
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00018000 <_vector_table>:
   18000:	38 fb 00 20 0d bf 01 00 41 64 02 00 e1 be 01 00     8.. ....Ad......
   18010:	e1 be 01 00 e1 be 01 00 e1 be 01 00 e1 be 01 00     ................
	...
   1802c:	35 b8 01 00 e1 be 01 00 00 00 00 00 d5 b7 01 00     5...............
   1803c:	e1 be 01 00                                         ....

00018040 <_irq_vector_table>:
   18040:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   18050:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   18060:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   18070:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   18080:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   18090:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   180a0:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   180b0:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   180c0:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   180d0:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   180e0:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   180f0:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   18100:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   18110:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   18120:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   18130:	bd b8 01 00 bd b8 01 00 bd b8 01 00 bd b8 01 00     ................
   18140:	bd b8 01 00                                         ....

Disassembly of section text:

00018148 <__aeabi_fmul>:
   18148:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1814c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18150:	bf1e      	ittt	ne
   18152:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18156:	ea92 0f0c 	teqne	r2, ip
   1815a:	ea93 0f0c 	teqne	r3, ip
   1815e:	d06f      	beq.n	18240 <__aeabi_fmul+0xf8>
   18160:	441a      	add	r2, r3
   18162:	ea80 0c01 	eor.w	ip, r0, r1
   18166:	0240      	lsls	r0, r0, #9
   18168:	bf18      	it	ne
   1816a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1816e:	d01e      	beq.n	181ae <__aeabi_fmul+0x66>
   18170:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18174:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18178:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1817c:	fba0 3101 	umull	r3, r1, r0, r1
   18180:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18184:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18188:	bf3e      	ittt	cc
   1818a:	0049      	lslcc	r1, r1, #1
   1818c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18190:	005b      	lslcc	r3, r3, #1
   18192:	ea40 0001 	orr.w	r0, r0, r1
   18196:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1819a:	2afd      	cmp	r2, #253	; 0xfd
   1819c:	d81d      	bhi.n	181da <__aeabi_fmul+0x92>
   1819e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   181a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   181a6:	bf08      	it	eq
   181a8:	f020 0001 	biceq.w	r0, r0, #1
   181ac:	4770      	bx	lr
   181ae:	f090 0f00 	teq	r0, #0
   181b2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   181b6:	bf08      	it	eq
   181b8:	0249      	lsleq	r1, r1, #9
   181ba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   181be:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   181c2:	3a7f      	subs	r2, #127	; 0x7f
   181c4:	bfc2      	ittt	gt
   181c6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   181ca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   181ce:	4770      	bxgt	lr
   181d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   181d4:	f04f 0300 	mov.w	r3, #0
   181d8:	3a01      	subs	r2, #1
   181da:	dc5d      	bgt.n	18298 <__aeabi_fmul+0x150>
   181dc:	f112 0f19 	cmn.w	r2, #25
   181e0:	bfdc      	itt	le
   181e2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   181e6:	4770      	bxle	lr
   181e8:	f1c2 0200 	rsb	r2, r2, #0
   181ec:	0041      	lsls	r1, r0, #1
   181ee:	fa21 f102 	lsr.w	r1, r1, r2
   181f2:	f1c2 0220 	rsb	r2, r2, #32
   181f6:	fa00 fc02 	lsl.w	ip, r0, r2
   181fa:	ea5f 0031 	movs.w	r0, r1, rrx
   181fe:	f140 0000 	adc.w	r0, r0, #0
   18202:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   18206:	bf08      	it	eq
   18208:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1820c:	4770      	bx	lr
   1820e:	f092 0f00 	teq	r2, #0
   18212:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18216:	bf02      	ittt	eq
   18218:	0040      	lsleq	r0, r0, #1
   1821a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1821e:	3a01      	subeq	r2, #1
   18220:	d0f9      	beq.n	18216 <__aeabi_fmul+0xce>
   18222:	ea40 000c 	orr.w	r0, r0, ip
   18226:	f093 0f00 	teq	r3, #0
   1822a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1822e:	bf02      	ittt	eq
   18230:	0049      	lsleq	r1, r1, #1
   18232:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18236:	3b01      	subeq	r3, #1
   18238:	d0f9      	beq.n	1822e <__aeabi_fmul+0xe6>
   1823a:	ea41 010c 	orr.w	r1, r1, ip
   1823e:	e78f      	b.n	18160 <__aeabi_fmul+0x18>
   18240:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18244:	ea92 0f0c 	teq	r2, ip
   18248:	bf18      	it	ne
   1824a:	ea93 0f0c 	teqne	r3, ip
   1824e:	d00a      	beq.n	18266 <__aeabi_fmul+0x11e>
   18250:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18254:	bf18      	it	ne
   18256:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1825a:	d1d8      	bne.n	1820e <__aeabi_fmul+0xc6>
   1825c:	ea80 0001 	eor.w	r0, r0, r1
   18260:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18264:	4770      	bx	lr
   18266:	f090 0f00 	teq	r0, #0
   1826a:	bf17      	itett	ne
   1826c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18270:	4608      	moveq	r0, r1
   18272:	f091 0f00 	teqne	r1, #0
   18276:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1827a:	d014      	beq.n	182a6 <__aeabi_fmul+0x15e>
   1827c:	ea92 0f0c 	teq	r2, ip
   18280:	d101      	bne.n	18286 <__aeabi_fmul+0x13e>
   18282:	0242      	lsls	r2, r0, #9
   18284:	d10f      	bne.n	182a6 <__aeabi_fmul+0x15e>
   18286:	ea93 0f0c 	teq	r3, ip
   1828a:	d103      	bne.n	18294 <__aeabi_fmul+0x14c>
   1828c:	024b      	lsls	r3, r1, #9
   1828e:	bf18      	it	ne
   18290:	4608      	movne	r0, r1
   18292:	d108      	bne.n	182a6 <__aeabi_fmul+0x15e>
   18294:	ea80 0001 	eor.w	r0, r0, r1
   18298:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1829c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   182a4:	4770      	bx	lr
   182a6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182aa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   182ae:	4770      	bx	lr

000182b0 <__aeabi_drsub>:
   182b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   182b4:	e002      	b.n	182bc <__adddf3>
   182b6:	bf00      	nop

000182b8 <__aeabi_dsub>:
   182b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000182bc <__adddf3>:
   182bc:	b530      	push	{r4, r5, lr}
   182be:	ea4f 0441 	mov.w	r4, r1, lsl #1
   182c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   182c6:	ea94 0f05 	teq	r4, r5
   182ca:	bf08      	it	eq
   182cc:	ea90 0f02 	teqeq	r0, r2
   182d0:	bf1f      	itttt	ne
   182d2:	ea54 0c00 	orrsne.w	ip, r4, r0
   182d6:	ea55 0c02 	orrsne.w	ip, r5, r2
   182da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   182de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   182e2:	f000 80e2 	beq.w	184aa <__adddf3+0x1ee>
   182e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   182ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   182ee:	bfb8      	it	lt
   182f0:	426d      	neglt	r5, r5
   182f2:	dd0c      	ble.n	1830e <__adddf3+0x52>
   182f4:	442c      	add	r4, r5
   182f6:	ea80 0202 	eor.w	r2, r0, r2
   182fa:	ea81 0303 	eor.w	r3, r1, r3
   182fe:	ea82 0000 	eor.w	r0, r2, r0
   18302:	ea83 0101 	eor.w	r1, r3, r1
   18306:	ea80 0202 	eor.w	r2, r0, r2
   1830a:	ea81 0303 	eor.w	r3, r1, r3
   1830e:	2d36      	cmp	r5, #54	; 0x36
   18310:	bf88      	it	hi
   18312:	bd30      	pophi	{r4, r5, pc}
   18314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18318:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1831c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   18320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   18324:	d002      	beq.n	1832c <__adddf3+0x70>
   18326:	4240      	negs	r0, r0
   18328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1832c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   18330:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   18338:	d002      	beq.n	18340 <__adddf3+0x84>
   1833a:	4252      	negs	r2, r2
   1833c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18340:	ea94 0f05 	teq	r4, r5
   18344:	f000 80a7 	beq.w	18496 <__adddf3+0x1da>
   18348:	f1a4 0401 	sub.w	r4, r4, #1
   1834c:	f1d5 0e20 	rsbs	lr, r5, #32
   18350:	db0d      	blt.n	1836e <__adddf3+0xb2>
   18352:	fa02 fc0e 	lsl.w	ip, r2, lr
   18356:	fa22 f205 	lsr.w	r2, r2, r5
   1835a:	1880      	adds	r0, r0, r2
   1835c:	f141 0100 	adc.w	r1, r1, #0
   18360:	fa03 f20e 	lsl.w	r2, r3, lr
   18364:	1880      	adds	r0, r0, r2
   18366:	fa43 f305 	asr.w	r3, r3, r5
   1836a:	4159      	adcs	r1, r3
   1836c:	e00e      	b.n	1838c <__adddf3+0xd0>
   1836e:	f1a5 0520 	sub.w	r5, r5, #32
   18372:	f10e 0e20 	add.w	lr, lr, #32
   18376:	2a01      	cmp	r2, #1
   18378:	fa03 fc0e 	lsl.w	ip, r3, lr
   1837c:	bf28      	it	cs
   1837e:	f04c 0c02 	orrcs.w	ip, ip, #2
   18382:	fa43 f305 	asr.w	r3, r3, r5
   18386:	18c0      	adds	r0, r0, r3
   18388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1838c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18390:	d507      	bpl.n	183a2 <__adddf3+0xe6>
   18392:	f04f 0e00 	mov.w	lr, #0
   18396:	f1dc 0c00 	rsbs	ip, ip, #0
   1839a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1839e:	eb6e 0101 	sbc.w	r1, lr, r1
   183a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   183a6:	d31b      	bcc.n	183e0 <__adddf3+0x124>
   183a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   183ac:	d30c      	bcc.n	183c8 <__adddf3+0x10c>
   183ae:	0849      	lsrs	r1, r1, #1
   183b0:	ea5f 0030 	movs.w	r0, r0, rrx
   183b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   183b8:	f104 0401 	add.w	r4, r4, #1
   183bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   183c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   183c4:	f080 809a 	bcs.w	184fc <__adddf3+0x240>
   183c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   183cc:	bf08      	it	eq
   183ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   183d2:	f150 0000 	adcs.w	r0, r0, #0
   183d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   183da:	ea41 0105 	orr.w	r1, r1, r5
   183de:	bd30      	pop	{r4, r5, pc}
   183e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   183e4:	4140      	adcs	r0, r0
   183e6:	eb41 0101 	adc.w	r1, r1, r1
   183ea:	3c01      	subs	r4, #1
   183ec:	bf28      	it	cs
   183ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   183f2:	d2e9      	bcs.n	183c8 <__adddf3+0x10c>
   183f4:	f091 0f00 	teq	r1, #0
   183f8:	bf04      	itt	eq
   183fa:	4601      	moveq	r1, r0
   183fc:	2000      	moveq	r0, #0
   183fe:	fab1 f381 	clz	r3, r1
   18402:	bf08      	it	eq
   18404:	3320      	addeq	r3, #32
   18406:	f1a3 030b 	sub.w	r3, r3, #11
   1840a:	f1b3 0220 	subs.w	r2, r3, #32
   1840e:	da0c      	bge.n	1842a <__adddf3+0x16e>
   18410:	320c      	adds	r2, #12
   18412:	dd08      	ble.n	18426 <__adddf3+0x16a>
   18414:	f102 0c14 	add.w	ip, r2, #20
   18418:	f1c2 020c 	rsb	r2, r2, #12
   1841c:	fa01 f00c 	lsl.w	r0, r1, ip
   18420:	fa21 f102 	lsr.w	r1, r1, r2
   18424:	e00c      	b.n	18440 <__adddf3+0x184>
   18426:	f102 0214 	add.w	r2, r2, #20
   1842a:	bfd8      	it	le
   1842c:	f1c2 0c20 	rsble	ip, r2, #32
   18430:	fa01 f102 	lsl.w	r1, r1, r2
   18434:	fa20 fc0c 	lsr.w	ip, r0, ip
   18438:	bfdc      	itt	le
   1843a:	ea41 010c 	orrle.w	r1, r1, ip
   1843e:	4090      	lslle	r0, r2
   18440:	1ae4      	subs	r4, r4, r3
   18442:	bfa2      	ittt	ge
   18444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   18448:	4329      	orrge	r1, r5
   1844a:	bd30      	popge	{r4, r5, pc}
   1844c:	ea6f 0404 	mvn.w	r4, r4
   18450:	3c1f      	subs	r4, #31
   18452:	da1c      	bge.n	1848e <__adddf3+0x1d2>
   18454:	340c      	adds	r4, #12
   18456:	dc0e      	bgt.n	18476 <__adddf3+0x1ba>
   18458:	f104 0414 	add.w	r4, r4, #20
   1845c:	f1c4 0220 	rsb	r2, r4, #32
   18460:	fa20 f004 	lsr.w	r0, r0, r4
   18464:	fa01 f302 	lsl.w	r3, r1, r2
   18468:	ea40 0003 	orr.w	r0, r0, r3
   1846c:	fa21 f304 	lsr.w	r3, r1, r4
   18470:	ea45 0103 	orr.w	r1, r5, r3
   18474:	bd30      	pop	{r4, r5, pc}
   18476:	f1c4 040c 	rsb	r4, r4, #12
   1847a:	f1c4 0220 	rsb	r2, r4, #32
   1847e:	fa20 f002 	lsr.w	r0, r0, r2
   18482:	fa01 f304 	lsl.w	r3, r1, r4
   18486:	ea40 0003 	orr.w	r0, r0, r3
   1848a:	4629      	mov	r1, r5
   1848c:	bd30      	pop	{r4, r5, pc}
   1848e:	fa21 f004 	lsr.w	r0, r1, r4
   18492:	4629      	mov	r1, r5
   18494:	bd30      	pop	{r4, r5, pc}
   18496:	f094 0f00 	teq	r4, #0
   1849a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1849e:	bf06      	itte	eq
   184a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   184a4:	3401      	addeq	r4, #1
   184a6:	3d01      	subne	r5, #1
   184a8:	e74e      	b.n	18348 <__adddf3+0x8c>
   184aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   184ae:	bf18      	it	ne
   184b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   184b4:	d029      	beq.n	1850a <__adddf3+0x24e>
   184b6:	ea94 0f05 	teq	r4, r5
   184ba:	bf08      	it	eq
   184bc:	ea90 0f02 	teqeq	r0, r2
   184c0:	d005      	beq.n	184ce <__adddf3+0x212>
   184c2:	ea54 0c00 	orrs.w	ip, r4, r0
   184c6:	bf04      	itt	eq
   184c8:	4619      	moveq	r1, r3
   184ca:	4610      	moveq	r0, r2
   184cc:	bd30      	pop	{r4, r5, pc}
   184ce:	ea91 0f03 	teq	r1, r3
   184d2:	bf1e      	ittt	ne
   184d4:	2100      	movne	r1, #0
   184d6:	2000      	movne	r0, #0
   184d8:	bd30      	popne	{r4, r5, pc}
   184da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   184de:	d105      	bne.n	184ec <__adddf3+0x230>
   184e0:	0040      	lsls	r0, r0, #1
   184e2:	4149      	adcs	r1, r1
   184e4:	bf28      	it	cs
   184e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   184ea:	bd30      	pop	{r4, r5, pc}
   184ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   184f0:	bf3c      	itt	cc
   184f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   184f6:	bd30      	popcc	{r4, r5, pc}
   184f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   184fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   18500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18504:	f04f 0000 	mov.w	r0, #0
   18508:	bd30      	pop	{r4, r5, pc}
   1850a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1850e:	bf1a      	itte	ne
   18510:	4619      	movne	r1, r3
   18512:	4610      	movne	r0, r2
   18514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18518:	bf1c      	itt	ne
   1851a:	460b      	movne	r3, r1
   1851c:	4602      	movne	r2, r0
   1851e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18522:	bf06      	itte	eq
   18524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18528:	ea91 0f03 	teqeq	r1, r3
   1852c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   18530:	bd30      	pop	{r4, r5, pc}
   18532:	bf00      	nop

00018534 <__aeabi_ui2d>:
   18534:	f090 0f00 	teq	r0, #0
   18538:	bf04      	itt	eq
   1853a:	2100      	moveq	r1, #0
   1853c:	4770      	bxeq	lr
   1853e:	b530      	push	{r4, r5, lr}
   18540:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18544:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18548:	f04f 0500 	mov.w	r5, #0
   1854c:	f04f 0100 	mov.w	r1, #0
   18550:	e750      	b.n	183f4 <__adddf3+0x138>
   18552:	bf00      	nop

00018554 <__aeabi_i2d>:
   18554:	f090 0f00 	teq	r0, #0
   18558:	bf04      	itt	eq
   1855a:	2100      	moveq	r1, #0
   1855c:	4770      	bxeq	lr
   1855e:	b530      	push	{r4, r5, lr}
   18560:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18564:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1856c:	bf48      	it	mi
   1856e:	4240      	negmi	r0, r0
   18570:	f04f 0100 	mov.w	r1, #0
   18574:	e73e      	b.n	183f4 <__adddf3+0x138>
   18576:	bf00      	nop

00018578 <__aeabi_f2d>:
   18578:	0042      	lsls	r2, r0, #1
   1857a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1857e:	ea4f 0131 	mov.w	r1, r1, rrx
   18582:	ea4f 7002 	mov.w	r0, r2, lsl #28
   18586:	bf1f      	itttt	ne
   18588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1858c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   18590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   18594:	4770      	bxne	lr
   18596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1859a:	bf08      	it	eq
   1859c:	4770      	bxeq	lr
   1859e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   185a2:	bf04      	itt	eq
   185a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   185a8:	4770      	bxeq	lr
   185aa:	b530      	push	{r4, r5, lr}
   185ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   185b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   185b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   185b8:	e71c      	b.n	183f4 <__adddf3+0x138>
   185ba:	bf00      	nop

000185bc <__aeabi_ul2d>:
   185bc:	ea50 0201 	orrs.w	r2, r0, r1
   185c0:	bf08      	it	eq
   185c2:	4770      	bxeq	lr
   185c4:	b530      	push	{r4, r5, lr}
   185c6:	f04f 0500 	mov.w	r5, #0
   185ca:	e00a      	b.n	185e2 <__aeabi_l2d+0x16>

000185cc <__aeabi_l2d>:
   185cc:	ea50 0201 	orrs.w	r2, r0, r1
   185d0:	bf08      	it	eq
   185d2:	4770      	bxeq	lr
   185d4:	b530      	push	{r4, r5, lr}
   185d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   185da:	d502      	bpl.n	185e2 <__aeabi_l2d+0x16>
   185dc:	4240      	negs	r0, r0
   185de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   185e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   185e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   185ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   185ee:	f43f aed8 	beq.w	183a2 <__adddf3+0xe6>
   185f2:	f04f 0203 	mov.w	r2, #3
   185f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   185fa:	bf18      	it	ne
   185fc:	3203      	addne	r2, #3
   185fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18602:	bf18      	it	ne
   18604:	3203      	addne	r2, #3
   18606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1860a:	f1c2 0320 	rsb	r3, r2, #32
   1860e:	fa00 fc03 	lsl.w	ip, r0, r3
   18612:	fa20 f002 	lsr.w	r0, r0, r2
   18616:	fa01 fe03 	lsl.w	lr, r1, r3
   1861a:	ea40 000e 	orr.w	r0, r0, lr
   1861e:	fa21 f102 	lsr.w	r1, r1, r2
   18622:	4414      	add	r4, r2
   18624:	e6bd      	b.n	183a2 <__adddf3+0xe6>
   18626:	bf00      	nop

00018628 <__aeabi_dmul>:
   18628:	b570      	push	{r4, r5, r6, lr}
   1862a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1862e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18636:	bf1d      	ittte	ne
   18638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1863c:	ea94 0f0c 	teqne	r4, ip
   18640:	ea95 0f0c 	teqne	r5, ip
   18644:	f000 f8de 	bleq	18804 <__aeabi_dmul+0x1dc>
   18648:	442c      	add	r4, r5
   1864a:	ea81 0603 	eor.w	r6, r1, r3
   1864e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   18652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   18656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1865a:	bf18      	it	ne
   1865c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   18660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18668:	d038      	beq.n	186dc <__aeabi_dmul+0xb4>
   1866a:	fba0 ce02 	umull	ip, lr, r0, r2
   1866e:	f04f 0500 	mov.w	r5, #0
   18672:	fbe1 e502 	umlal	lr, r5, r1, r2
   18676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1867a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1867e:	f04f 0600 	mov.w	r6, #0
   18682:	fbe1 5603 	umlal	r5, r6, r1, r3
   18686:	f09c 0f00 	teq	ip, #0
   1868a:	bf18      	it	ne
   1868c:	f04e 0e01 	orrne.w	lr, lr, #1
   18690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   18694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   18698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1869c:	d204      	bcs.n	186a8 <__aeabi_dmul+0x80>
   1869e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   186a2:	416d      	adcs	r5, r5
   186a4:	eb46 0606 	adc.w	r6, r6, r6
   186a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   186ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   186b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   186b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   186b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   186bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   186c0:	bf88      	it	hi
   186c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   186c6:	d81e      	bhi.n	18706 <__aeabi_dmul+0xde>
   186c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   186cc:	bf08      	it	eq
   186ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   186d2:	f150 0000 	adcs.w	r0, r0, #0
   186d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   186da:	bd70      	pop	{r4, r5, r6, pc}
   186dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   186e0:	ea46 0101 	orr.w	r1, r6, r1
   186e4:	ea40 0002 	orr.w	r0, r0, r2
   186e8:	ea81 0103 	eor.w	r1, r1, r3
   186ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   186f0:	bfc2      	ittt	gt
   186f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   186f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   186fa:	bd70      	popgt	{r4, r5, r6, pc}
   186fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18700:	f04f 0e00 	mov.w	lr, #0
   18704:	3c01      	subs	r4, #1
   18706:	f300 80ab 	bgt.w	18860 <__aeabi_dmul+0x238>
   1870a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1870e:	bfde      	ittt	le
   18710:	2000      	movle	r0, #0
   18712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   18716:	bd70      	pople	{r4, r5, r6, pc}
   18718:	f1c4 0400 	rsb	r4, r4, #0
   1871c:	3c20      	subs	r4, #32
   1871e:	da35      	bge.n	1878c <__aeabi_dmul+0x164>
   18720:	340c      	adds	r4, #12
   18722:	dc1b      	bgt.n	1875c <__aeabi_dmul+0x134>
   18724:	f104 0414 	add.w	r4, r4, #20
   18728:	f1c4 0520 	rsb	r5, r4, #32
   1872c:	fa00 f305 	lsl.w	r3, r0, r5
   18730:	fa20 f004 	lsr.w	r0, r0, r4
   18734:	fa01 f205 	lsl.w	r2, r1, r5
   18738:	ea40 0002 	orr.w	r0, r0, r2
   1873c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   18740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18748:	fa21 f604 	lsr.w	r6, r1, r4
   1874c:	eb42 0106 	adc.w	r1, r2, r6
   18750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18754:	bf08      	it	eq
   18756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1875a:	bd70      	pop	{r4, r5, r6, pc}
   1875c:	f1c4 040c 	rsb	r4, r4, #12
   18760:	f1c4 0520 	rsb	r5, r4, #32
   18764:	fa00 f304 	lsl.w	r3, r0, r4
   18768:	fa20 f005 	lsr.w	r0, r0, r5
   1876c:	fa01 f204 	lsl.w	r2, r1, r4
   18770:	ea40 0002 	orr.w	r0, r0, r2
   18774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1877c:	f141 0100 	adc.w	r1, r1, #0
   18780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18784:	bf08      	it	eq
   18786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1878a:	bd70      	pop	{r4, r5, r6, pc}
   1878c:	f1c4 0520 	rsb	r5, r4, #32
   18790:	fa00 f205 	lsl.w	r2, r0, r5
   18794:	ea4e 0e02 	orr.w	lr, lr, r2
   18798:	fa20 f304 	lsr.w	r3, r0, r4
   1879c:	fa01 f205 	lsl.w	r2, r1, r5
   187a0:	ea43 0302 	orr.w	r3, r3, r2
   187a4:	fa21 f004 	lsr.w	r0, r1, r4
   187a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   187ac:	fa21 f204 	lsr.w	r2, r1, r4
   187b0:	ea20 0002 	bic.w	r0, r0, r2
   187b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   187b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   187bc:	bf08      	it	eq
   187be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   187c2:	bd70      	pop	{r4, r5, r6, pc}
   187c4:	f094 0f00 	teq	r4, #0
   187c8:	d10f      	bne.n	187ea <__aeabi_dmul+0x1c2>
   187ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   187ce:	0040      	lsls	r0, r0, #1
   187d0:	eb41 0101 	adc.w	r1, r1, r1
   187d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   187d8:	bf08      	it	eq
   187da:	3c01      	subeq	r4, #1
   187dc:	d0f7      	beq.n	187ce <__aeabi_dmul+0x1a6>
   187de:	ea41 0106 	orr.w	r1, r1, r6
   187e2:	f095 0f00 	teq	r5, #0
   187e6:	bf18      	it	ne
   187e8:	4770      	bxne	lr
   187ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   187ee:	0052      	lsls	r2, r2, #1
   187f0:	eb43 0303 	adc.w	r3, r3, r3
   187f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   187f8:	bf08      	it	eq
   187fa:	3d01      	subeq	r5, #1
   187fc:	d0f7      	beq.n	187ee <__aeabi_dmul+0x1c6>
   187fe:	ea43 0306 	orr.w	r3, r3, r6
   18802:	4770      	bx	lr
   18804:	ea94 0f0c 	teq	r4, ip
   18808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1880c:	bf18      	it	ne
   1880e:	ea95 0f0c 	teqne	r5, ip
   18812:	d00c      	beq.n	1882e <__aeabi_dmul+0x206>
   18814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18818:	bf18      	it	ne
   1881a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1881e:	d1d1      	bne.n	187c4 <__aeabi_dmul+0x19c>
   18820:	ea81 0103 	eor.w	r1, r1, r3
   18824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18828:	f04f 0000 	mov.w	r0, #0
   1882c:	bd70      	pop	{r4, r5, r6, pc}
   1882e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18832:	bf06      	itte	eq
   18834:	4610      	moveq	r0, r2
   18836:	4619      	moveq	r1, r3
   18838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1883c:	d019      	beq.n	18872 <__aeabi_dmul+0x24a>
   1883e:	ea94 0f0c 	teq	r4, ip
   18842:	d102      	bne.n	1884a <__aeabi_dmul+0x222>
   18844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   18848:	d113      	bne.n	18872 <__aeabi_dmul+0x24a>
   1884a:	ea95 0f0c 	teq	r5, ip
   1884e:	d105      	bne.n	1885c <__aeabi_dmul+0x234>
   18850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   18854:	bf1c      	itt	ne
   18856:	4610      	movne	r0, r2
   18858:	4619      	movne	r1, r3
   1885a:	d10a      	bne.n	18872 <__aeabi_dmul+0x24a>
   1885c:	ea81 0103 	eor.w	r1, r1, r3
   18860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1886c:	f04f 0000 	mov.w	r0, #0
   18870:	bd70      	pop	{r4, r5, r6, pc}
   18872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1887a:	bd70      	pop	{r4, r5, r6, pc}

0001887c <__aeabi_ddiv>:
   1887c:	b570      	push	{r4, r5, r6, lr}
   1887e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1888a:	bf1d      	ittte	ne
   1888c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18890:	ea94 0f0c 	teqne	r4, ip
   18894:	ea95 0f0c 	teqne	r5, ip
   18898:	f000 f8a7 	bleq	189ea <__aeabi_ddiv+0x16e>
   1889c:	eba4 0405 	sub.w	r4, r4, r5
   188a0:	ea81 0e03 	eor.w	lr, r1, r3
   188a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   188a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   188ac:	f000 8088 	beq.w	189c0 <__aeabi_ddiv+0x144>
   188b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   188b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   188b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   188bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   188c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   188c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   188c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   188cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   188d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   188d4:	429d      	cmp	r5, r3
   188d6:	bf08      	it	eq
   188d8:	4296      	cmpeq	r6, r2
   188da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   188de:	f504 7440 	add.w	r4, r4, #768	; 0x300
   188e2:	d202      	bcs.n	188ea <__aeabi_ddiv+0x6e>
   188e4:	085b      	lsrs	r3, r3, #1
   188e6:	ea4f 0232 	mov.w	r2, r2, rrx
   188ea:	1ab6      	subs	r6, r6, r2
   188ec:	eb65 0503 	sbc.w	r5, r5, r3
   188f0:	085b      	lsrs	r3, r3, #1
   188f2:	ea4f 0232 	mov.w	r2, r2, rrx
   188f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   188fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   188fe:	ebb6 0e02 	subs.w	lr, r6, r2
   18902:	eb75 0e03 	sbcs.w	lr, r5, r3
   18906:	bf22      	ittt	cs
   18908:	1ab6      	subcs	r6, r6, r2
   1890a:	4675      	movcs	r5, lr
   1890c:	ea40 000c 	orrcs.w	r0, r0, ip
   18910:	085b      	lsrs	r3, r3, #1
   18912:	ea4f 0232 	mov.w	r2, r2, rrx
   18916:	ebb6 0e02 	subs.w	lr, r6, r2
   1891a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1891e:	bf22      	ittt	cs
   18920:	1ab6      	subcs	r6, r6, r2
   18922:	4675      	movcs	r5, lr
   18924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18928:	085b      	lsrs	r3, r3, #1
   1892a:	ea4f 0232 	mov.w	r2, r2, rrx
   1892e:	ebb6 0e02 	subs.w	lr, r6, r2
   18932:	eb75 0e03 	sbcs.w	lr, r5, r3
   18936:	bf22      	ittt	cs
   18938:	1ab6      	subcs	r6, r6, r2
   1893a:	4675      	movcs	r5, lr
   1893c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18940:	085b      	lsrs	r3, r3, #1
   18942:	ea4f 0232 	mov.w	r2, r2, rrx
   18946:	ebb6 0e02 	subs.w	lr, r6, r2
   1894a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1894e:	bf22      	ittt	cs
   18950:	1ab6      	subcs	r6, r6, r2
   18952:	4675      	movcs	r5, lr
   18954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18958:	ea55 0e06 	orrs.w	lr, r5, r6
   1895c:	d018      	beq.n	18990 <__aeabi_ddiv+0x114>
   1895e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18966:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1896a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1896e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1897a:	d1c0      	bne.n	188fe <__aeabi_ddiv+0x82>
   1897c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18980:	d10b      	bne.n	1899a <__aeabi_ddiv+0x11e>
   18982:	ea41 0100 	orr.w	r1, r1, r0
   18986:	f04f 0000 	mov.w	r0, #0
   1898a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1898e:	e7b6      	b.n	188fe <__aeabi_ddiv+0x82>
   18990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18994:	bf04      	itt	eq
   18996:	4301      	orreq	r1, r0
   18998:	2000      	moveq	r0, #0
   1899a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1899e:	bf88      	it	hi
   189a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   189a4:	f63f aeaf 	bhi.w	18706 <__aeabi_dmul+0xde>
   189a8:	ebb5 0c03 	subs.w	ip, r5, r3
   189ac:	bf04      	itt	eq
   189ae:	ebb6 0c02 	subseq.w	ip, r6, r2
   189b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   189b6:	f150 0000 	adcs.w	r0, r0, #0
   189ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   189be:	bd70      	pop	{r4, r5, r6, pc}
   189c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   189c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   189c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   189cc:	bfc2      	ittt	gt
   189ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   189d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   189d6:	bd70      	popgt	{r4, r5, r6, pc}
   189d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   189dc:	f04f 0e00 	mov.w	lr, #0
   189e0:	3c01      	subs	r4, #1
   189e2:	e690      	b.n	18706 <__aeabi_dmul+0xde>
   189e4:	ea45 0e06 	orr.w	lr, r5, r6
   189e8:	e68d      	b.n	18706 <__aeabi_dmul+0xde>
   189ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   189ee:	ea94 0f0c 	teq	r4, ip
   189f2:	bf08      	it	eq
   189f4:	ea95 0f0c 	teqeq	r5, ip
   189f8:	f43f af3b 	beq.w	18872 <__aeabi_dmul+0x24a>
   189fc:	ea94 0f0c 	teq	r4, ip
   18a00:	d10a      	bne.n	18a18 <__aeabi_ddiv+0x19c>
   18a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18a06:	f47f af34 	bne.w	18872 <__aeabi_dmul+0x24a>
   18a0a:	ea95 0f0c 	teq	r5, ip
   18a0e:	f47f af25 	bne.w	1885c <__aeabi_dmul+0x234>
   18a12:	4610      	mov	r0, r2
   18a14:	4619      	mov	r1, r3
   18a16:	e72c      	b.n	18872 <__aeabi_dmul+0x24a>
   18a18:	ea95 0f0c 	teq	r5, ip
   18a1c:	d106      	bne.n	18a2c <__aeabi_ddiv+0x1b0>
   18a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18a22:	f43f aefd 	beq.w	18820 <__aeabi_dmul+0x1f8>
   18a26:	4610      	mov	r0, r2
   18a28:	4619      	mov	r1, r3
   18a2a:	e722      	b.n	18872 <__aeabi_dmul+0x24a>
   18a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18a30:	bf18      	it	ne
   18a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18a36:	f47f aec5 	bne.w	187c4 <__aeabi_dmul+0x19c>
   18a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18a3e:	f47f af0d 	bne.w	1885c <__aeabi_dmul+0x234>
   18a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18a46:	f47f aeeb 	bne.w	18820 <__aeabi_dmul+0x1f8>
   18a4a:	e712      	b.n	18872 <__aeabi_dmul+0x24a>

00018a4c <__aeabi_d2f>:
   18a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18a54:	bf24      	itt	cs
   18a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   18a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18a5e:	d90d      	bls.n	18a7c <__aeabi_d2f+0x30>
   18a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18a74:	bf08      	it	eq
   18a76:	f020 0001 	biceq.w	r0, r0, #1
   18a7a:	4770      	bx	lr
   18a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18a80:	d121      	bne.n	18ac6 <__aeabi_d2f+0x7a>
   18a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18a86:	bfbc      	itt	lt
   18a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18a8c:	4770      	bxlt	lr
   18a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18a96:	f1c2 0218 	rsb	r2, r2, #24
   18a9a:	f1c2 0c20 	rsb	ip, r2, #32
   18a9e:	fa10 f30c 	lsls.w	r3, r0, ip
   18aa2:	fa20 f002 	lsr.w	r0, r0, r2
   18aa6:	bf18      	it	ne
   18aa8:	f040 0001 	orrne.w	r0, r0, #1
   18aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
   18ab8:	ea40 000c 	orr.w	r0, r0, ip
   18abc:	fa23 f302 	lsr.w	r3, r3, r2
   18ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18ac4:	e7cc      	b.n	18a60 <__aeabi_d2f+0x14>
   18ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18aca:	d107      	bne.n	18adc <__aeabi_d2f+0x90>
   18acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18ad0:	bf1e      	ittt	ne
   18ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18ada:	4770      	bxne	lr
   18adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18ae8:	4770      	bx	lr
   18aea:	bf00      	nop

00018aec <__aeabi_frsub>:
   18aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18af0:	e002      	b.n	18af8 <__addsf3>
   18af2:	bf00      	nop

00018af4 <__aeabi_fsub>:
   18af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018af8 <__addsf3>:
   18af8:	0042      	lsls	r2, r0, #1
   18afa:	bf1f      	itttt	ne
   18afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18b00:	ea92 0f03 	teqne	r2, r3
   18b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18b0c:	d06a      	beq.n	18be4 <__addsf3+0xec>
   18b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   18b16:	bfc1      	itttt	gt
   18b18:	18d2      	addgt	r2, r2, r3
   18b1a:	4041      	eorgt	r1, r0
   18b1c:	4048      	eorgt	r0, r1
   18b1e:	4041      	eorgt	r1, r0
   18b20:	bfb8      	it	lt
   18b22:	425b      	neglt	r3, r3
   18b24:	2b19      	cmp	r3, #25
   18b26:	bf88      	it	hi
   18b28:	4770      	bxhi	lr
   18b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18b36:	bf18      	it	ne
   18b38:	4240      	negne	r0, r0
   18b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18b46:	bf18      	it	ne
   18b48:	4249      	negne	r1, r1
   18b4a:	ea92 0f03 	teq	r2, r3
   18b4e:	d03f      	beq.n	18bd0 <__addsf3+0xd8>
   18b50:	f1a2 0201 	sub.w	r2, r2, #1
   18b54:	fa41 fc03 	asr.w	ip, r1, r3
   18b58:	eb10 000c 	adds.w	r0, r0, ip
   18b5c:	f1c3 0320 	rsb	r3, r3, #32
   18b60:	fa01 f103 	lsl.w	r1, r1, r3
   18b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18b68:	d502      	bpl.n	18b70 <__addsf3+0x78>
   18b6a:	4249      	negs	r1, r1
   18b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18b74:	d313      	bcc.n	18b9e <__addsf3+0xa6>
   18b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18b7a:	d306      	bcc.n	18b8a <__addsf3+0x92>
   18b7c:	0840      	lsrs	r0, r0, #1
   18b7e:	ea4f 0131 	mov.w	r1, r1, rrx
   18b82:	f102 0201 	add.w	r2, r2, #1
   18b86:	2afe      	cmp	r2, #254	; 0xfe
   18b88:	d251      	bcs.n	18c2e <__addsf3+0x136>
   18b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18b92:	bf08      	it	eq
   18b94:	f020 0001 	biceq.w	r0, r0, #1
   18b98:	ea40 0003 	orr.w	r0, r0, r3
   18b9c:	4770      	bx	lr
   18b9e:	0049      	lsls	r1, r1, #1
   18ba0:	eb40 0000 	adc.w	r0, r0, r0
   18ba4:	3a01      	subs	r2, #1
   18ba6:	bf28      	it	cs
   18ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   18bac:	d2ed      	bcs.n	18b8a <__addsf3+0x92>
   18bae:	fab0 fc80 	clz	ip, r0
   18bb2:	f1ac 0c08 	sub.w	ip, ip, #8
   18bb6:	ebb2 020c 	subs.w	r2, r2, ip
   18bba:	fa00 f00c 	lsl.w	r0, r0, ip
   18bbe:	bfaa      	itet	ge
   18bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18bc4:	4252      	neglt	r2, r2
   18bc6:	4318      	orrge	r0, r3
   18bc8:	bfbc      	itt	lt
   18bca:	40d0      	lsrlt	r0, r2
   18bcc:	4318      	orrlt	r0, r3
   18bce:	4770      	bx	lr
   18bd0:	f092 0f00 	teq	r2, #0
   18bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18bd8:	bf06      	itte	eq
   18bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18bde:	3201      	addeq	r2, #1
   18be0:	3b01      	subne	r3, #1
   18be2:	e7b5      	b.n	18b50 <__addsf3+0x58>
   18be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18bec:	bf18      	it	ne
   18bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18bf2:	d021      	beq.n	18c38 <__addsf3+0x140>
   18bf4:	ea92 0f03 	teq	r2, r3
   18bf8:	d004      	beq.n	18c04 <__addsf3+0x10c>
   18bfa:	f092 0f00 	teq	r2, #0
   18bfe:	bf08      	it	eq
   18c00:	4608      	moveq	r0, r1
   18c02:	4770      	bx	lr
   18c04:	ea90 0f01 	teq	r0, r1
   18c08:	bf1c      	itt	ne
   18c0a:	2000      	movne	r0, #0
   18c0c:	4770      	bxne	lr
   18c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18c12:	d104      	bne.n	18c1e <__addsf3+0x126>
   18c14:	0040      	lsls	r0, r0, #1
   18c16:	bf28      	it	cs
   18c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18c1c:	4770      	bx	lr
   18c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18c22:	bf3c      	itt	cc
   18c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18c28:	4770      	bxcc	lr
   18c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18c36:	4770      	bx	lr
   18c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18c3c:	bf16      	itet	ne
   18c3e:	4608      	movne	r0, r1
   18c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18c44:	4601      	movne	r1, r0
   18c46:	0242      	lsls	r2, r0, #9
   18c48:	bf06      	itte	eq
   18c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18c4e:	ea90 0f01 	teqeq	r0, r1
   18c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18c56:	4770      	bx	lr

00018c58 <__aeabi_ui2f>:
   18c58:	f04f 0300 	mov.w	r3, #0
   18c5c:	e004      	b.n	18c68 <__aeabi_i2f+0x8>
   18c5e:	bf00      	nop

00018c60 <__aeabi_i2f>:
   18c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18c64:	bf48      	it	mi
   18c66:	4240      	negmi	r0, r0
   18c68:	ea5f 0c00 	movs.w	ip, r0
   18c6c:	bf08      	it	eq
   18c6e:	4770      	bxeq	lr
   18c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18c74:	4601      	mov	r1, r0
   18c76:	f04f 0000 	mov.w	r0, #0
   18c7a:	e01c      	b.n	18cb6 <__aeabi_l2f+0x2a>

00018c7c <__aeabi_ul2f>:
   18c7c:	ea50 0201 	orrs.w	r2, r0, r1
   18c80:	bf08      	it	eq
   18c82:	4770      	bxeq	lr
   18c84:	f04f 0300 	mov.w	r3, #0
   18c88:	e00a      	b.n	18ca0 <__aeabi_l2f+0x14>
   18c8a:	bf00      	nop

00018c8c <__aeabi_l2f>:
   18c8c:	ea50 0201 	orrs.w	r2, r0, r1
   18c90:	bf08      	it	eq
   18c92:	4770      	bxeq	lr
   18c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18c98:	d502      	bpl.n	18ca0 <__aeabi_l2f+0x14>
   18c9a:	4240      	negs	r0, r0
   18c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18ca0:	ea5f 0c01 	movs.w	ip, r1
   18ca4:	bf02      	ittt	eq
   18ca6:	4684      	moveq	ip, r0
   18ca8:	4601      	moveq	r1, r0
   18caa:	2000      	moveq	r0, #0
   18cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18cb0:	bf08      	it	eq
   18cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18cba:	fabc f28c 	clz	r2, ip
   18cbe:	3a08      	subs	r2, #8
   18cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18cc4:	db10      	blt.n	18ce8 <__aeabi_l2f+0x5c>
   18cc6:	fa01 fc02 	lsl.w	ip, r1, r2
   18cca:	4463      	add	r3, ip
   18ccc:	fa00 fc02 	lsl.w	ip, r0, r2
   18cd0:	f1c2 0220 	rsb	r2, r2, #32
   18cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18cd8:	fa20 f202 	lsr.w	r2, r0, r2
   18cdc:	eb43 0002 	adc.w	r0, r3, r2
   18ce0:	bf08      	it	eq
   18ce2:	f020 0001 	biceq.w	r0, r0, #1
   18ce6:	4770      	bx	lr
   18ce8:	f102 0220 	add.w	r2, r2, #32
   18cec:	fa01 fc02 	lsl.w	ip, r1, r2
   18cf0:	f1c2 0220 	rsb	r2, r2, #32
   18cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18cf8:	fa21 f202 	lsr.w	r2, r1, r2
   18cfc:	eb43 0002 	adc.w	r0, r3, r2
   18d00:	bf08      	it	eq
   18d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18d06:	4770      	bx	lr

00018d08 <__aeabi_uldivmod>:
   18d08:	b953      	cbnz	r3, 18d20 <__aeabi_uldivmod+0x18>
   18d0a:	b94a      	cbnz	r2, 18d20 <__aeabi_uldivmod+0x18>
   18d0c:	2900      	cmp	r1, #0
   18d0e:	bf08      	it	eq
   18d10:	2800      	cmpeq	r0, #0
   18d12:	bf1c      	itt	ne
   18d14:	f04f 31ff 	movne.w	r1, #4294967295
   18d18:	f04f 30ff 	movne.w	r0, #4294967295
   18d1c:	f000 b80c 	b.w	18d38 <__aeabi_idiv0>
   18d20:	f1ad 0c08 	sub.w	ip, sp, #8
   18d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18d28:	f000 f808 	bl	18d3c <__udivmoddi4>
   18d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d34:	b004      	add	sp, #16
   18d36:	4770      	bx	lr

00018d38 <__aeabi_idiv0>:
   18d38:	4770      	bx	lr
   18d3a:	bf00      	nop

00018d3c <__udivmoddi4>:
   18d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18d40:	4686      	mov	lr, r0
   18d42:	468c      	mov	ip, r1
   18d44:	4608      	mov	r0, r1
   18d46:	9e08      	ldr	r6, [sp, #32]
   18d48:	4615      	mov	r5, r2
   18d4a:	4674      	mov	r4, lr
   18d4c:	4619      	mov	r1, r3
   18d4e:	2b00      	cmp	r3, #0
   18d50:	f040 80c1 	bne.w	18ed6 <__udivmoddi4+0x19a>
   18d54:	4285      	cmp	r5, r0
   18d56:	fab2 f282 	clz	r2, r2
   18d5a:	d945      	bls.n	18de8 <__udivmoddi4+0xac>
   18d5c:	b14a      	cbz	r2, 18d72 <__udivmoddi4+0x36>
   18d5e:	f1c2 0320 	rsb	r3, r2, #32
   18d62:	fa00 fc02 	lsl.w	ip, r0, r2
   18d66:	4095      	lsls	r5, r2
   18d68:	4094      	lsls	r4, r2
   18d6a:	fa2e f303 	lsr.w	r3, lr, r3
   18d6e:	ea43 0c0c 	orr.w	ip, r3, ip
   18d72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18d76:	b2a8      	uxth	r0, r5
   18d78:	0c23      	lsrs	r3, r4, #16
   18d7a:	fbbc f8fe 	udiv	r8, ip, lr
   18d7e:	fb0e cc18 	mls	ip, lr, r8, ip
   18d82:	fb08 f900 	mul.w	r9, r8, r0
   18d86:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   18d8a:	4599      	cmp	r9, r3
   18d8c:	d928      	bls.n	18de0 <__udivmoddi4+0xa4>
   18d8e:	18eb      	adds	r3, r5, r3
   18d90:	f108 37ff 	add.w	r7, r8, #4294967295
   18d94:	d204      	bcs.n	18da0 <__udivmoddi4+0x64>
   18d96:	4599      	cmp	r9, r3
   18d98:	d902      	bls.n	18da0 <__udivmoddi4+0x64>
   18d9a:	f1a8 0702 	sub.w	r7, r8, #2
   18d9e:	442b      	add	r3, r5
   18da0:	eba3 0309 	sub.w	r3, r3, r9
   18da4:	b2a4      	uxth	r4, r4
   18da6:	fbb3 fcfe 	udiv	ip, r3, lr
   18daa:	fb0e 331c 	mls	r3, lr, ip, r3
   18dae:	fb0c f000 	mul.w	r0, ip, r0
   18db2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   18db6:	42a0      	cmp	r0, r4
   18db8:	d914      	bls.n	18de4 <__udivmoddi4+0xa8>
   18dba:	192c      	adds	r4, r5, r4
   18dbc:	f10c 33ff 	add.w	r3, ip, #4294967295
   18dc0:	d204      	bcs.n	18dcc <__udivmoddi4+0x90>
   18dc2:	42a0      	cmp	r0, r4
   18dc4:	d902      	bls.n	18dcc <__udivmoddi4+0x90>
   18dc6:	f1ac 0302 	sub.w	r3, ip, #2
   18dca:	442c      	add	r4, r5
   18dcc:	1a24      	subs	r4, r4, r0
   18dce:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   18dd2:	b11e      	cbz	r6, 18ddc <__udivmoddi4+0xa0>
   18dd4:	40d4      	lsrs	r4, r2
   18dd6:	2300      	movs	r3, #0
   18dd8:	6034      	str	r4, [r6, #0]
   18dda:	6073      	str	r3, [r6, #4]
   18ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18de0:	4647      	mov	r7, r8
   18de2:	e7dd      	b.n	18da0 <__udivmoddi4+0x64>
   18de4:	4663      	mov	r3, ip
   18de6:	e7f1      	b.n	18dcc <__udivmoddi4+0x90>
   18de8:	bb92      	cbnz	r2, 18e50 <__udivmoddi4+0x114>
   18dea:	1b43      	subs	r3, r0, r5
   18dec:	2101      	movs	r1, #1
   18dee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18df2:	b2af      	uxth	r7, r5
   18df4:	0c20      	lsrs	r0, r4, #16
   18df6:	fbb3 fcfe 	udiv	ip, r3, lr
   18dfa:	fb0e 331c 	mls	r3, lr, ip, r3
   18dfe:	fb0c f807 	mul.w	r8, ip, r7
   18e02:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   18e06:	4598      	cmp	r8, r3
   18e08:	d961      	bls.n	18ece <__udivmoddi4+0x192>
   18e0a:	18eb      	adds	r3, r5, r3
   18e0c:	f10c 30ff 	add.w	r0, ip, #4294967295
   18e10:	d204      	bcs.n	18e1c <__udivmoddi4+0xe0>
   18e12:	4598      	cmp	r8, r3
   18e14:	d902      	bls.n	18e1c <__udivmoddi4+0xe0>
   18e16:	f1ac 0002 	sub.w	r0, ip, #2
   18e1a:	442b      	add	r3, r5
   18e1c:	eba3 0308 	sub.w	r3, r3, r8
   18e20:	b2a4      	uxth	r4, r4
   18e22:	fbb3 fcfe 	udiv	ip, r3, lr
   18e26:	fb0e 331c 	mls	r3, lr, ip, r3
   18e2a:	fb0c f707 	mul.w	r7, ip, r7
   18e2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   18e32:	42a7      	cmp	r7, r4
   18e34:	d94d      	bls.n	18ed2 <__udivmoddi4+0x196>
   18e36:	192c      	adds	r4, r5, r4
   18e38:	f10c 33ff 	add.w	r3, ip, #4294967295
   18e3c:	d204      	bcs.n	18e48 <__udivmoddi4+0x10c>
   18e3e:	42a7      	cmp	r7, r4
   18e40:	d902      	bls.n	18e48 <__udivmoddi4+0x10c>
   18e42:	f1ac 0302 	sub.w	r3, ip, #2
   18e46:	442c      	add	r4, r5
   18e48:	1be4      	subs	r4, r4, r7
   18e4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   18e4e:	e7c0      	b.n	18dd2 <__udivmoddi4+0x96>
   18e50:	f1c2 0320 	rsb	r3, r2, #32
   18e54:	4095      	lsls	r5, r2
   18e56:	4094      	lsls	r4, r2
   18e58:	fa20 f103 	lsr.w	r1, r0, r3
   18e5c:	fa2e f303 	lsr.w	r3, lr, r3
   18e60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18e64:	4090      	lsls	r0, r2
   18e66:	b2af      	uxth	r7, r5
   18e68:	4303      	orrs	r3, r0
   18e6a:	fbb1 fcfe 	udiv	ip, r1, lr
   18e6e:	fb0e 101c 	mls	r0, lr, ip, r1
   18e72:	0c19      	lsrs	r1, r3, #16
   18e74:	fb0c f807 	mul.w	r8, ip, r7
   18e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   18e7c:	4588      	cmp	r8, r1
   18e7e:	d922      	bls.n	18ec6 <__udivmoddi4+0x18a>
   18e80:	1869      	adds	r1, r5, r1
   18e82:	f10c 30ff 	add.w	r0, ip, #4294967295
   18e86:	d204      	bcs.n	18e92 <__udivmoddi4+0x156>
   18e88:	4588      	cmp	r8, r1
   18e8a:	d902      	bls.n	18e92 <__udivmoddi4+0x156>
   18e8c:	f1ac 0002 	sub.w	r0, ip, #2
   18e90:	4429      	add	r1, r5
   18e92:	eba1 0108 	sub.w	r1, r1, r8
   18e96:	b29b      	uxth	r3, r3
   18e98:	fbb1 fcfe 	udiv	ip, r1, lr
   18e9c:	fb0e 111c 	mls	r1, lr, ip, r1
   18ea0:	fb0c f707 	mul.w	r7, ip, r7
   18ea4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   18ea8:	429f      	cmp	r7, r3
   18eaa:	d90e      	bls.n	18eca <__udivmoddi4+0x18e>
   18eac:	18eb      	adds	r3, r5, r3
   18eae:	f10c 31ff 	add.w	r1, ip, #4294967295
   18eb2:	d204      	bcs.n	18ebe <__udivmoddi4+0x182>
   18eb4:	429f      	cmp	r7, r3
   18eb6:	d902      	bls.n	18ebe <__udivmoddi4+0x182>
   18eb8:	f1ac 0102 	sub.w	r1, ip, #2
   18ebc:	442b      	add	r3, r5
   18ebe:	1bdb      	subs	r3, r3, r7
   18ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   18ec4:	e793      	b.n	18dee <__udivmoddi4+0xb2>
   18ec6:	4660      	mov	r0, ip
   18ec8:	e7e3      	b.n	18e92 <__udivmoddi4+0x156>
   18eca:	4661      	mov	r1, ip
   18ecc:	e7f7      	b.n	18ebe <__udivmoddi4+0x182>
   18ece:	4660      	mov	r0, ip
   18ed0:	e7a4      	b.n	18e1c <__udivmoddi4+0xe0>
   18ed2:	4663      	mov	r3, ip
   18ed4:	e7b8      	b.n	18e48 <__udivmoddi4+0x10c>
   18ed6:	4283      	cmp	r3, r0
   18ed8:	d906      	bls.n	18ee8 <__udivmoddi4+0x1ac>
   18eda:	b916      	cbnz	r6, 18ee2 <__udivmoddi4+0x1a6>
   18edc:	2100      	movs	r1, #0
   18ede:	4608      	mov	r0, r1
   18ee0:	e77c      	b.n	18ddc <__udivmoddi4+0xa0>
   18ee2:	e9c6 e000 	strd	lr, r0, [r6]
   18ee6:	e7f9      	b.n	18edc <__udivmoddi4+0x1a0>
   18ee8:	fab3 f783 	clz	r7, r3
   18eec:	b98f      	cbnz	r7, 18f12 <__udivmoddi4+0x1d6>
   18eee:	4283      	cmp	r3, r0
   18ef0:	d301      	bcc.n	18ef6 <__udivmoddi4+0x1ba>
   18ef2:	4572      	cmp	r2, lr
   18ef4:	d808      	bhi.n	18f08 <__udivmoddi4+0x1cc>
   18ef6:	ebbe 0402 	subs.w	r4, lr, r2
   18efa:	eb60 0303 	sbc.w	r3, r0, r3
   18efe:	2001      	movs	r0, #1
   18f00:	469c      	mov	ip, r3
   18f02:	b91e      	cbnz	r6, 18f0c <__udivmoddi4+0x1d0>
   18f04:	2100      	movs	r1, #0
   18f06:	e769      	b.n	18ddc <__udivmoddi4+0xa0>
   18f08:	4638      	mov	r0, r7
   18f0a:	e7fa      	b.n	18f02 <__udivmoddi4+0x1c6>
   18f0c:	e9c6 4c00 	strd	r4, ip, [r6]
   18f10:	e7f8      	b.n	18f04 <__udivmoddi4+0x1c8>
   18f12:	f1c7 0c20 	rsb	ip, r7, #32
   18f16:	40bb      	lsls	r3, r7
   18f18:	fa0e f507 	lsl.w	r5, lr, r7
   18f1c:	fa22 f40c 	lsr.w	r4, r2, ip
   18f20:	fa2e f10c 	lsr.w	r1, lr, ip
   18f24:	40ba      	lsls	r2, r7
   18f26:	431c      	orrs	r4, r3
   18f28:	fa20 f30c 	lsr.w	r3, r0, ip
   18f2c:	40b8      	lsls	r0, r7
   18f2e:	ea4f 4914 	mov.w	r9, r4, lsr #16
   18f32:	4301      	orrs	r1, r0
   18f34:	fa1f fe84 	uxth.w	lr, r4
   18f38:	fbb3 f8f9 	udiv	r8, r3, r9
   18f3c:	fb09 3018 	mls	r0, r9, r8, r3
   18f40:	0c0b      	lsrs	r3, r1, #16
   18f42:	fb08 fa0e 	mul.w	sl, r8, lr
   18f46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   18f4a:	459a      	cmp	sl, r3
   18f4c:	d940      	bls.n	18fd0 <__udivmoddi4+0x294>
   18f4e:	18e3      	adds	r3, r4, r3
   18f50:	f108 30ff 	add.w	r0, r8, #4294967295
   18f54:	d204      	bcs.n	18f60 <__udivmoddi4+0x224>
   18f56:	459a      	cmp	sl, r3
   18f58:	d902      	bls.n	18f60 <__udivmoddi4+0x224>
   18f5a:	f1a8 0002 	sub.w	r0, r8, #2
   18f5e:	4423      	add	r3, r4
   18f60:	eba3 030a 	sub.w	r3, r3, sl
   18f64:	b289      	uxth	r1, r1
   18f66:	fbb3 f8f9 	udiv	r8, r3, r9
   18f6a:	fb09 3318 	mls	r3, r9, r8, r3
   18f6e:	fb08 fe0e 	mul.w	lr, r8, lr
   18f72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   18f76:	458e      	cmp	lr, r1
   18f78:	d92c      	bls.n	18fd4 <__udivmoddi4+0x298>
   18f7a:	1861      	adds	r1, r4, r1
   18f7c:	f108 33ff 	add.w	r3, r8, #4294967295
   18f80:	d204      	bcs.n	18f8c <__udivmoddi4+0x250>
   18f82:	458e      	cmp	lr, r1
   18f84:	d902      	bls.n	18f8c <__udivmoddi4+0x250>
   18f86:	f1a8 0302 	sub.w	r3, r8, #2
   18f8a:	4421      	add	r1, r4
   18f8c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   18f90:	eba1 010e 	sub.w	r1, r1, lr
   18f94:	fba0 9802 	umull	r9, r8, r0, r2
   18f98:	4541      	cmp	r1, r8
   18f9a:	46ce      	mov	lr, r9
   18f9c:	4643      	mov	r3, r8
   18f9e:	d302      	bcc.n	18fa6 <__udivmoddi4+0x26a>
   18fa0:	d106      	bne.n	18fb0 <__udivmoddi4+0x274>
   18fa2:	454d      	cmp	r5, r9
   18fa4:	d204      	bcs.n	18fb0 <__udivmoddi4+0x274>
   18fa6:	3801      	subs	r0, #1
   18fa8:	ebb9 0e02 	subs.w	lr, r9, r2
   18fac:	eb68 0304 	sbc.w	r3, r8, r4
   18fb0:	2e00      	cmp	r6, #0
   18fb2:	d0a7      	beq.n	18f04 <__udivmoddi4+0x1c8>
   18fb4:	ebb5 020e 	subs.w	r2, r5, lr
   18fb8:	eb61 0103 	sbc.w	r1, r1, r3
   18fbc:	fa01 fc0c 	lsl.w	ip, r1, ip
   18fc0:	fa22 f307 	lsr.w	r3, r2, r7
   18fc4:	40f9      	lsrs	r1, r7
   18fc6:	ea4c 0303 	orr.w	r3, ip, r3
   18fca:	e9c6 3100 	strd	r3, r1, [r6]
   18fce:	e799      	b.n	18f04 <__udivmoddi4+0x1c8>
   18fd0:	4640      	mov	r0, r8
   18fd2:	e7c5      	b.n	18f60 <__udivmoddi4+0x224>
   18fd4:	4643      	mov	r3, r8
   18fd6:	e7d9      	b.n	18f8c <__udivmoddi4+0x250>

00018fd8 <strcmp>:
   18fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
   18fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
   18fe0:	2a01      	cmp	r2, #1
   18fe2:	bf28      	it	cs
   18fe4:	429a      	cmpcs	r2, r3
   18fe6:	d0f7      	beq.n	18fd8 <strcmp>
   18fe8:	1ad0      	subs	r0, r2, r3
   18fea:	4770      	bx	lr

00018fec <strlen>:
   18fec:	4603      	mov	r3, r0
   18fee:	f813 2b01 	ldrb.w	r2, [r3], #1
   18ff2:	2a00      	cmp	r2, #0
   18ff4:	d1fb      	bne.n	18fee <strlen+0x2>
   18ff6:	1a18      	subs	r0, r3, r0
   18ff8:	3801      	subs	r0, #1
   18ffa:	4770      	bx	lr
   18ffc:	0000      	movs	r0, r0
	...

00019000 <parse_edrx>:

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   19000:	2300      	movs	r3, #0
{
   19002:	b5f0      	push	{r4, r5, r6, r7, lr}
   19004:	b08d      	sub	sp, #52	; 0x34
   19006:	af00      	add	r7, sp, #0
	struct at_param_list resp_list = {0};
   19008:	e9c7 3304 	strd	r3, r3, [r7, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1900c:	2304      	movs	r3, #4
{
   1900e:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   19010:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
   19012:	607b      	str	r3, [r7, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   19014:	2800      	cmp	r0, #0
   19016:	f000 80d5 	beq.w	191c4 <parse_edrx+0x1c4>
   1901a:	2900      	cmp	r1, #0
   1901c:	f000 80d2 	beq.w	191c4 <parse_edrx+0x1c4>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   19020:	2106      	movs	r1, #6
   19022:	f107 0010 	add.w	r0, r7, #16
   19026:	f00d ff6d 	bl	26f04 <at_params_list_init>
	if (err) {
   1902a:	4604      	mov	r4, r0
   1902c:	b190      	cbz	r0, 19054 <parse_edrx+0x54>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1902e:	466d      	mov	r5, sp
   19030:	b088      	sub	sp, #32
   19032:	466a      	mov	r2, sp
   19034:	4b68      	ldr	r3, [pc, #416]	; (191d8 <parse_edrx+0x1d8>)
   19036:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1903a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1903e:	2303      	movs	r3, #3
   19040:	4866      	ldr	r0, [pc, #408]	; (191dc <parse_edrx+0x1dc>)
   19042:	f842 3f10 	str.w	r3, [r2, #16]!
   19046:	f00e f89d 	bl	27184 <z_log_msg_static_create.constprop.0>
   1904a:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1904c:	4620      	mov	r0, r4
   1904e:	3734      	adds	r7, #52	; 0x34
   19050:	46bd      	mov	sp, r7
   19052:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   19054:	4601      	mov	r1, r0
   19056:	f107 0210 	add.w	r2, r7, #16
   1905a:	4630      	mov	r0, r6
   1905c:	f00d ff39 	bl	26ed2 <at_parser_params_from_str>
	if (err) {
   19060:	4604      	mov	r4, r0
   19062:	b198      	cbz	r0, 1908c <parse_edrx+0x8c>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   19064:	466d      	mov	r5, sp
   19066:	b088      	sub	sp, #32
   19068:	466a      	mov	r2, sp
   1906a:	4b5d      	ldr	r3, [pc, #372]	; (191e0 <parse_edrx+0x1e0>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1906c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   19070:	2303      	movs	r3, #3
   19072:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19076:	4859      	ldr	r0, [pc, #356]	; (191dc <parse_edrx+0x1dc>)
   19078:	f842 3f10 	str.w	r3, [r2, #16]!
   1907c:	f00e f882 	bl	27184 <z_log_msg_static_create.constprop.0>
   19080:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   19082:	f107 0010 	add.w	r0, r7, #16
   19086:	f00d ff67 	bl	26f58 <at_params_list_free>
	return err;
   1908a:	e7df      	b.n	1904c <parse_edrx+0x4c>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1908c:	2103      	movs	r1, #3
   1908e:	1d3b      	adds	r3, r7, #4
   19090:	f107 0208 	add.w	r2, r7, #8
   19094:	f107 0010 	add.w	r0, r7, #16
   19098:	f00e f83c 	bl	27114 <at_params_string_get>
	if (err) {
   1909c:	4604      	mov	r4, r0
   1909e:	b120      	cbz	r0, 190aa <parse_edrx+0xaa>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   190a0:	466d      	mov	r5, sp
   190a2:	b088      	sub	sp, #32
   190a4:	466a      	mov	r2, sp
   190a6:	4b4f      	ldr	r3, [pc, #316]	; (191e4 <parse_edrx+0x1e4>)
   190a8:	e7e0      	b.n	1906c <parse_edrx+0x6c>
	tmp_buf[len] = '\0';
   190aa:	687b      	ldr	r3, [r7, #4]
	idx = strtoul(tmp_buf, NULL, 2);
   190ac:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   190ae:	3330      	adds	r3, #48	; 0x30
   190b0:	443b      	add	r3, r7
   190b2:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
   190b6:	2202      	movs	r2, #2
   190b8:	f107 0008 	add.w	r0, r7, #8
   190bc:	f00c f8f8 	bl	252b0 <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   190c0:	463a      	mov	r2, r7
   190c2:	2101      	movs	r1, #1
	idx = strtoul(tmp_buf, NULL, 2);
   190c4:	b2c6      	uxtb	r6, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   190c6:	f107 0010 	add.w	r0, r7, #16
   190ca:	f00d fff7 	bl	270bc <at_params_int_get>
	if (err) {
   190ce:	4604      	mov	r4, r0
   190d0:	b120      	cbz	r0, 190dc <parse_edrx+0xdc>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   190d2:	466d      	mov	r5, sp
   190d4:	b088      	sub	sp, #32
   190d6:	466a      	mov	r2, sp
   190d8:	4b43      	ldr	r3, [pc, #268]	; (191e8 <parse_edrx+0x1e8>)
   190da:	e7c7      	b.n	1906c <parse_edrx+0x6c>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   190dc:	683b      	ldr	r3, [r7, #0]
   190de:	2b04      	cmp	r3, #4
   190e0:	d028      	beq.n	19134 <parse_edrx+0x134>
   190e2:	2b05      	cmp	r3, #5
   190e4:	d00e      	beq.n	19104 <parse_edrx+0x104>
   190e6:	7028      	strb	r0, [r5, #0]
		LOG_WRN("Active LTE mode could not be determined");
   190e8:	4b40      	ldr	r3, [pc, #256]	; (191ec <parse_edrx+0x1ec>)
   190ea:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   190ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   190f0:	2302      	movs	r3, #2
   190f2:	483a      	ldr	r0, [pc, #232]	; (191dc <parse_edrx+0x1dc>)
   190f4:	62bb      	str	r3, [r7, #40]	; 0x28
   190f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   190fa:	f00e f843 	bl	27184 <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   190fe:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   19102:	e7be      	b.n	19082 <parse_edrx+0x82>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19104:	2309      	movs	r3, #9
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   19106:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19108:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1910a:	d936      	bls.n	1917a <parse_edrx+0x17a>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1910c:	466c      	mov	r4, sp
   1910e:	b088      	sub	sp, #32
   19110:	466a      	mov	r2, sp
   19112:	4b37      	ldr	r3, [pc, #220]	; (191f0 <parse_edrx+0x1f0>)
   19114:	6153      	str	r3, [r2, #20]
   19116:	f06f 0315 	mvn.w	r3, #21
   1911a:	6193      	str	r3, [r2, #24]
   1911c:	2303      	movs	r3, #3
   1911e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19122:	482e      	ldr	r0, [pc, #184]	; (191dc <parse_edrx+0x1dc>)
   19124:	f842 3f10 	str.w	r3, [r2, #16]!
   19128:	f00e f82c 	bl	27184 <z_log_msg_static_create.constprop.0>
   1912c:	46a5      	mov	sp, r4
		return -ENOTCONN;
   1912e:	f06f 0415 	mvn.w	r4, #21
   19132:	e7a6      	b.n	19082 <parse_edrx+0x82>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19134:	2307      	movs	r3, #7
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   19136:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19138:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1913a:	d8e7      	bhi.n	1910c <parse_edrx+0x10c>
		multiplier = edrx_lookup_ltem[idx];
   1913c:	4b2d      	ldr	r3, [pc, #180]	; (191f4 <parse_edrx+0x1f4>)
   1913e:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
		*ptw_multiplier = 1.28;
   19142:	4e2d      	ldr	r6, [pc, #180]	; (191f8 <parse_edrx+0x1f8>)
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   19144:	b1f0      	cbz	r0, 19184 <parse_edrx+0x184>
   19146:	f7ff fa05 	bl	18554 <__aeabi_i2d>
   1914a:	a321      	add	r3, pc, #132	; (adr r3, 191d0 <parse_edrx+0x1d0>)
   1914c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19150:	f7ff fa6a 	bl	18628 <__aeabi_dmul>
   19154:	f7ff fc7a 	bl	18a4c <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   19158:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1915a:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1915c:	187b      	adds	r3, r7, r1
   1915e:	f107 0208 	add.w	r2, r7, #8
   19162:	f107 0010 	add.w	r0, r7, #16
	len = sizeof(tmp_buf) - 1;
   19166:	6079      	str	r1, [r7, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   19168:	f00d ffd4 	bl	27114 <at_params_string_get>
	if (err) {
   1916c:	4604      	mov	r4, r0
   1916e:	b158      	cbz	r0, 19188 <parse_edrx+0x188>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   19170:	466d      	mov	r5, sp
   19172:	b088      	sub	sp, #32
   19174:	466a      	mov	r2, sp
   19176:	4b21      	ldr	r3, [pc, #132]	; (191fc <parse_edrx+0x1fc>)
   19178:	e778      	b.n	1906c <parse_edrx+0x6c>
		multiplier = edrx_lookup_nbiot[idx];
   1917a:	4b21      	ldr	r3, [pc, #132]	; (19200 <parse_edrx+0x200>)
   1917c:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
		*ptw_multiplier = 2.56;
   19180:	4e20      	ldr	r6, [pc, #128]	; (19204 <parse_edrx+0x204>)
		break;
   19182:	e7df      	b.n	19144 <parse_edrx+0x144>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   19184:	4820      	ldr	r0, [pc, #128]	; (19208 <parse_edrx+0x208>)
   19186:	e7e7      	b.n	19158 <parse_edrx+0x158>
	tmp_buf[len] = '\0';
   19188:	687b      	ldr	r3, [r7, #4]
	idx = strtoul(tmp_buf, NULL, 2);
   1918a:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   1918c:	3330      	adds	r3, #48	; 0x30
   1918e:	443b      	add	r3, r7
   19190:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
   19194:	2202      	movs	r2, #2
   19196:	f107 0008 	add.w	r0, r7, #8
   1919a:	f00c f889 	bl	252b0 <strtoul>
   1919e:	b2c0      	uxtb	r0, r0
	if (idx > 15) {
   191a0:	280f      	cmp	r0, #15
   191a2:	d906      	bls.n	191b2 <parse_edrx+0x1b2>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   191a4:	466c      	mov	r4, sp
   191a6:	b088      	sub	sp, #32
   191a8:	466a      	mov	r2, sp
   191aa:	4b18      	ldr	r3, [pc, #96]	; (1920c <parse_edrx+0x20c>)
   191ac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   191b0:	e7b4      	b.n	1911c <parse_edrx+0x11c>
	idx += 1;
   191b2:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   191b4:	b2c0      	uxtb	r0, r0
   191b6:	f7ff fd53 	bl	18c60 <__aeabi_i2f>
   191ba:	4631      	mov	r1, r6
   191bc:	f7fe ffc4 	bl	18148 <__aeabi_fmul>
   191c0:	60a8      	str	r0, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   191c2:	e75e      	b.n	19082 <parse_edrx+0x82>
		return -EINVAL;
   191c4:	f06f 0415 	mvn.w	r4, #21
   191c8:	e740      	b.n	1904c <parse_edrx+0x4c>
   191ca:	bf00      	nop
   191cc:	f3af 8000 	nop.w
   191d0:	47ae147b 	.word	0x47ae147b
   191d4:	40247ae1 	.word	0x40247ae1
   191d8:	0002a973 	.word	0x0002a973
   191dc:	00028f24 	.word	0x00028f24
   191e0:	0002a99c 	.word	0x0002a99c
   191e4:	0002a9c8 	.word	0x0002a9c8
   191e8:	0002a9f4 	.word	0x0002a9f4
   191ec:	0002aa16 	.word	0x0002aa16
   191f0:	0002aa3e 	.word	0x0002aa3e
   191f4:	000296a4 	.word	0x000296a4
   191f8:	3fa3d70a 	.word	0x3fa3d70a
   191fc:	0002aa62 	.word	0x0002aa62
   19200:	00029684 	.word	0x00029684
   19204:	4023d70a 	.word	0x4023d70a
   19208:	40a3d70a 	.word	0x40a3d70a
   1920c:	0002aa8d 	.word	0x0002aa8d

00019210 <motion_detected>:

/********************************************************************************
 * Define the callback function
 ********************************************************************************/
void motion_detected(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
   19210:	b507      	push	{r0, r1, r2, lr}
	buzzer_state = ON;
	gpio_pin_set(gpio_dev, WATER_VALVE, OPEN_VALVE);
   19212:	4b09      	ldr	r3, [pc, #36]	; (19238 <motion_detected+0x28>)
   19214:	2201      	movs	r2, #1
   19216:	2110      	movs	r1, #16
   19218:	6818      	ldr	r0, [r3, #0]
   1921a:	f00c fa97 	bl	2574c <gpio_pin_set.isra.0>
		(void) arch_syscall_invoke5(parm0.x, parm1.split.lo, parm1.split.hi, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
   1921e:	2200      	movs	r2, #0
   19220:	2300      	movs	r3, #0
   19222:	4806      	ldr	r0, [pc, #24]	; (1923c <motion_detected+0x2c>)
   19224:	e9cd 2300 	strd	r2, r3, [sp]
   19228:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1922c:	2300      	movs	r3, #0
   1922e:	f00b fd39 	bl	24ca4 <z_impl_k_timer_start>
	/* start periodic timer that expires once every second */
	k_timer_start(&my_timer, K_SECONDS(10), K_NO_WAIT);
}
   19232:	b003      	add	sp, #12
   19234:	f85d fb04 	ldr.w	pc, [sp], #4
   19238:	2000c580 	.word	0x2000c580
   1923c:	2000c938 	.word	0x2000c938

00019240 <my_expiry_function>:
 * Define a variable of type static struct gpio_callback
 ********************************************************************************/
void my_expiry_function(struct k_timer *timer_id)
{
	buzzer_state = OFF;
	gpio_pin_set(gpio_dev, WATER_VALVE, CLOSE_VALVE);
   19240:	4b02      	ldr	r3, [pc, #8]	; (1924c <my_expiry_function+0xc>)
   19242:	2200      	movs	r2, #0
   19244:	2110      	movs	r1, #16
   19246:	6818      	ldr	r0, [r3, #0]
   19248:	f00c ba80 	b.w	2574c <gpio_pin_set.isra.0>
   1924c:	2000c580 	.word	0x2000c580

00019250 <blink_leds>:
{
   19250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch(id)
   19254:	2901      	cmp	r1, #1
{
   19256:	4605      	mov	r5, r0
   19258:	460c      	mov	r4, r1
   1925a:	4616      	mov	r6, r2
   1925c:	b087      	sub	sp, #28
	switch(id)
   1925e:	d03c      	beq.n	192da <blink_leds+0x8a>
   19260:	2902      	cmp	r1, #2
   19262:	d057      	beq.n	19314 <blink_leds+0xc4>
   19264:	b9e9      	cbnz	r1, 192a2 <blink_leds+0x52>
				LOG_INF("LIGHTWELL RED LED");
   19266:	f04f 0802 	mov.w	r8, #2
   1926a:	4f2d      	ldr	r7, [pc, #180]	; (19320 <blink_leds+0xd0>)
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1926c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 19324 <blink_leds+0xd4>
   19270:	e015      	b.n	1929e <blink_leds+0x4e>
   19272:	e9cd 8704 	strd	r8, r7, [sp, #16]
   19276:	2300      	movs	r3, #0
   19278:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1927c:	aa04      	add	r2, sp, #16
   1927e:	4648      	mov	r0, r9
   19280:	f001 fd2c 	bl	1acdc <z_impl_z_log_msg_static_create>
				dk_set_led_on(DK_LED1);
   19284:	2000      	movs	r0, #0
   19286:	f00d fdfb 	bl	26e80 <dk_set_led_on>
				k_msleep(sleep_ms);
   1928a:	4628      	mov	r0, r5
   1928c:	f00c fa6e 	bl	2576c <k_msleep.isra.0>
				dk_set_led_off(DK_LED1);
   19290:	2000      	movs	r0, #0
   19292:	f00d fdf8 	bl	26e86 <dk_set_led_off>
				k_msleep(sleep_ms);
   19296:	4628      	mov	r0, r5
   19298:	f00c fa68 	bl	2576c <k_msleep.isra.0>
			for(i = 0; i < numOfBlinks; i++) 
   1929c:	3401      	adds	r4, #1
   1929e:	42a6      	cmp	r6, r4
   192a0:	d1e7      	bne.n	19272 <blink_leds+0x22>
}
   192a2:	b007      	add	sp, #28
   192a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				LOG_INF("LIGHTWELL GREEN LED");
   192a8:	e9cd 8704 	strd	r8, r7, [sp, #16]
   192ac:	2300      	movs	r3, #0
   192ae:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   192b2:	aa04      	add	r2, sp, #16
   192b4:	4648      	mov	r0, r9
   192b6:	f001 fd11 	bl	1acdc <z_impl_z_log_msg_static_create>
				dk_set_led_on(DK_LED2);
   192ba:	2001      	movs	r0, #1
   192bc:	f00d fde0 	bl	26e80 <dk_set_led_on>
				k_msleep(sleep_ms);
   192c0:	4628      	mov	r0, r5
   192c2:	f00c fa53 	bl	2576c <k_msleep.isra.0>
				dk_set_led_off(DK_LED2);
   192c6:	2001      	movs	r0, #1
   192c8:	f00d fddd 	bl	26e86 <dk_set_led_off>
				k_msleep(sleep_ms);
   192cc:	4628      	mov	r0, r5
   192ce:	f00c fa4d 	bl	2576c <k_msleep.isra.0>
			for(i = 0; i < numOfBlinks; i++)
   192d2:	3401      	adds	r4, #1
   192d4:	42a6      	cmp	r6, r4
   192d6:	d1e7      	bne.n	192a8 <blink_leds+0x58>
   192d8:	e7e3      	b.n	192a2 <blink_leds+0x52>
	switch(id)
   192da:	2400      	movs	r4, #0
				LOG_INF("LIGHTWELL GREEN LED");
   192dc:	f04f 0802 	mov.w	r8, #2
   192e0:	4f11      	ldr	r7, [pc, #68]	; (19328 <blink_leds+0xd8>)
   192e2:	f8df 9040 	ldr.w	r9, [pc, #64]	; 19324 <blink_leds+0xd4>
   192e6:	e7f5      	b.n	192d4 <blink_leds+0x84>
				LOG_INF("LIGHTWELL BLUE LED");
   192e8:	e9cd 4804 	strd	r4, r8, [sp, #16]
   192ec:	2300      	movs	r3, #0
   192ee:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   192f2:	aa04      	add	r2, sp, #16
   192f4:	4648      	mov	r0, r9
   192f6:	f001 fcf1 	bl	1acdc <z_impl_z_log_msg_static_create>
				dk_set_led_on(DK_LED3);
   192fa:	2002      	movs	r0, #2
   192fc:	f00d fdc0 	bl	26e80 <dk_set_led_on>
				k_msleep(sleep_ms);
   19300:	4628      	mov	r0, r5
   19302:	f00c fa33 	bl	2576c <k_msleep.isra.0>
				dk_set_led_off(DK_LED3);
   19306:	2002      	movs	r0, #2
   19308:	f00d fdbd 	bl	26e86 <dk_set_led_off>
			for(i = 0; i < numOfBlinks; i++)
   1930c:	3701      	adds	r7, #1
   1930e:	42be      	cmp	r6, r7
   19310:	d1ea      	bne.n	192e8 <blink_leds+0x98>
   19312:	e7c6      	b.n	192a2 <blink_leds+0x52>
	switch(id)
   19314:	2700      	movs	r7, #0
				LOG_INF("LIGHTWELL BLUE LED");
   19316:	f8df 8014 	ldr.w	r8, [pc, #20]	; 1932c <blink_leds+0xdc>
   1931a:	f8df 9008 	ldr.w	r9, [pc, #8]	; 19324 <blink_leds+0xd4>
   1931e:	e7f6      	b.n	1930e <blink_leds+0xbe>
   19320:	000296c4 	.word	0x000296c4
   19324:	00028ebc 	.word	0x00028ebc
   19328:	000296d6 	.word	0x000296d6
   1932c:	000296ea 	.word	0x000296ea

00019330 <beep_buzzer>:
	for (long i = 0; i < duration * 1000L; i += tone * 2)
   19330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
   19334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19338:	4604      	mov	r4, r0
	for (long i = 0; i < duration * 1000L; i += tone * 2)
   1933a:	2500      	movs	r5, #0
   1933c:	fb03 f601 	mul.w	r6, r3, r1
		gpio_pin_set(gpio_dev, BUZZER, HIGH);
   19340:	4f0c      	ldr	r7, [pc, #48]	; (19374 <beep_buzzer+0x44>)
	for (long i = 0; i < duration * 1000L; i += tone * 2)
   19342:	ea4f 0840 	mov.w	r8, r0, lsl #1
   19346:	42ae      	cmp	r6, r5
   19348:	dc01      	bgt.n	1934e <beep_buzzer+0x1e>
}
   1934a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		gpio_pin_set(gpio_dev, BUZZER, HIGH);
   1934e:	2201      	movs	r2, #1
   19350:	211c      	movs	r1, #28
   19352:	6838      	ldr	r0, [r7, #0]
   19354:	f00c f9fa 	bl	2574c <gpio_pin_set.isra.0>
		k_msleep(tone);
   19358:	4620      	mov	r0, r4
   1935a:	f00c fa07 	bl	2576c <k_msleep.isra.0>
		gpio_pin_set(gpio_dev, BUZZER, LOW);
   1935e:	2200      	movs	r2, #0
   19360:	211c      	movs	r1, #28
   19362:	6838      	ldr	r0, [r7, #0]
   19364:	f00c f9f2 	bl	2574c <gpio_pin_set.isra.0>
		k_msleep(tone);
   19368:	4620      	mov	r0, r4
   1936a:	f00c f9ff 	bl	2576c <k_msleep.isra.0>
	for (long i = 0; i < duration * 1000L; i += tone * 2)
   1936e:	4445      	add	r5, r8
   19370:	e7e9      	b.n	19346 <beep_buzzer+0x16>
   19372:	bf00      	nop
   19374:	2000c580 	.word	0x2000c580

00019378 <configuer_all_outputs>:
{
   19378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (uint32_t i = 0; i < MAX_OUTPUTS; i++)
   1937a:	2400      	movs	r4, #0
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1937c:	2701      	movs	r7, #1
   1937e:	4d0f      	ldr	r5, [pc, #60]	; (193bc <configuer_all_outputs+0x44>)
		if (!device_is_ready(gpio_dev))
   19380:	4e0f      	ldr	r6, [pc, #60]	; (193c0 <configuer_all_outputs+0x48>)
   19382:	6830      	ldr	r0, [r6, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   19384:	f00e fe21 	bl	27fca <z_device_is_ready>
   19388:	b1b0      	cbz	r0, 193b8 <configuer_all_outputs+0x40>
		err = gpio_pin_configure(gpio_dev, output_gpio[i], GPIO_OUTPUT_INACTIVE);
   1938a:	6830      	ldr	r0, [r6, #0]
   1938c:	f855 1b04 	ldr.w	r1, [r5], #4
	struct gpio_driver_data *data =
   19390:	6902      	ldr	r2, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   19392:	b2c9      	uxtb	r1, r1
   19394:	6813      	ldr	r3, [r2, #0]
   19396:	fa07 fe01 	lsl.w	lr, r7, r1
	const struct gpio_driver_api *api =
   1939a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1939e:	ea23 030e 	bic.w	r3, r3, lr
   193a2:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
   193a4:	f8dc 3000 	ldr.w	r3, [ip]
   193a8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   193ac:	4798      	blx	r3
		if (err < 0)
   193ae:	2800      	cmp	r0, #0
   193b0:	db02      	blt.n	193b8 <configuer_all_outputs+0x40>
	for (uint32_t i = 0; i < MAX_OUTPUTS; i++)
   193b2:	3401      	adds	r4, #1
   193b4:	2c05      	cmp	r4, #5
   193b6:	d1e4      	bne.n	19382 <configuer_all_outputs+0xa>
}
   193b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   193ba:	bf00      	nop
   193bc:	00028ff8 	.word	0x00028ff8
   193c0:	2000c580 	.word	0x2000c580

000193c4 <configuer_all_inputs>:
{
   193c4:	b510      	push	{r4, lr}
		if (!device_is_ready(gpio_dev))
   193c6:	4c09      	ldr	r4, [pc, #36]	; (193ec <configuer_all_inputs+0x28>)
   193c8:	6820      	ldr	r0, [r4, #0]
   193ca:	f00e fdfe 	bl	27fca <z_device_is_ready>
   193ce:	b160      	cbz	r0, 193ea <configuer_all_inputs+0x26>
		err = gpio_pin_configure(gpio_dev, input_gpio[i], GPIO_INPUT | GPIO_PULL_DOWN);
   193d0:	6820      	ldr	r0, [r4, #0]
	struct gpio_driver_data *data =
   193d2:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   193d4:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   193d6:	6813      	ldr	r3, [r2, #0]
   193d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   193dc:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   193de:	680b      	ldr	r3, [r1, #0]
   193e0:	4a03      	ldr	r2, [pc, #12]	; (193f0 <configuer_all_inputs+0x2c>)
   193e2:	210d      	movs	r1, #13
}
   193e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   193e8:	4718      	bx	r3
   193ea:	bd10      	pop	{r4, pc}
   193ec:	2000c580 	.word	0x2000c580
   193f0:	00010020 	.word	0x00010020

000193f4 <main>:

/********************************************************************************
 *
 ********************************************************************************/
void main(void)
{
   193f4:	b570      	push	{r4, r5, r6, lr}
   193f6:	b086      	sub	sp, #24
	int err;

	uint32_t connect_attempt = 0;
	
	configuer_all_outputs();
   193f8:	f7ff ffbe 	bl	19378 <configuer_all_outputs>
	configuer_all_inputs();
   193fc:	f7ff ffe2 	bl	193c4 <configuer_all_inputs>
	if (dk_leds_init() != 0)
   19400:	f005 f960 	bl	1e6c4 <dk_leds_init>
   19404:	b150      	cbz	r0, 1941c <main+0x28>
	{
		LOG_ERR("Failed to initialize the LED library");
   19406:	4b34      	ldr	r3, [pc, #208]	; (194d8 <main+0xe4>)
   19408:	9305      	str	r3, [sp, #20]
   1940a:	2302      	movs	r3, #2
   1940c:	9304      	str	r3, [sp, #16]
   1940e:	2300      	movs	r3, #0
   19410:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19414:	4831      	ldr	r0, [pc, #196]	; (194dc <main+0xe8>)
   19416:	aa04      	add	r2, sp, #16
   19418:	f001 fc60 	bl	1acdc <z_impl_z_log_msg_static_create>
	}
	k_msleep(SLEEP_TIME_MS * 10);
   1941c:	f242 7010 	movw	r0, #10000	; 0x2710
   19420:	f00c f9a4 	bl	2576c <k_msleep.isra.0>
	LOG_INF("A Smart Water Tap Leakage Controller IoT Project/n/r");
   19424:	2402      	movs	r4, #2
   19426:	4b2e      	ldr	r3, [pc, #184]	; (194e0 <main+0xec>)
   19428:	9404      	str	r4, [sp, #16]
   1942a:	9305      	str	r3, [sp, #20]
   1942c:	2300      	movs	r3, #0
   1942e:	aa04      	add	r2, sp, #16
   19430:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   19434:	4829      	ldr	r0, [pc, #164]	; (194dc <main+0xe8>)
   19436:	f001 fc51 	bl	1acdc <z_impl_z_log_msg_static_create>
	blink_leds(150, LIGHTWELL_RED, 5);
   1943a:	2205      	movs	r2, #5
   1943c:	2100      	movs	r1, #0
   1943e:	2096      	movs	r0, #150	; 0x96
   19440:	f7ff ff06 	bl	19250 <blink_leds>
	blink_leds(150, LIGHTWELL_GREEN, 5);
   19444:	2205      	movs	r2, #5
   19446:	2101      	movs	r1, #1
   19448:	2096      	movs	r0, #150	; 0x96
   1944a:	f7ff ff01 	bl	19250 <blink_leds>
	blink_leds(150, LIGHTWELL_BLUE, 5);
   1944e:	4621      	mov	r1, r4

	/* Configure the interrupt on the button's pin */
	err = gpio_pin_interrupt_configure(gpio_dev, MOTION_DETECTOR, GPIO_INT_EDGE_TO_ACTIVE);
   19450:	4c24      	ldr	r4, [pc, #144]	; (194e4 <main+0xf0>)
	blink_leds(150, LIGHTWELL_BLUE, 5);
   19452:	2205      	movs	r2, #5
   19454:	2096      	movs	r0, #150	; 0x96
   19456:	f7ff fefb 	bl	19250 <blink_leds>
	err = gpio_pin_interrupt_configure(gpio_dev, MOTION_DETECTOR, GPIO_INT_EDGE_TO_ACTIVE);
   1945a:	6820      	ldr	r0, [r4, #0]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1945c:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   1945e:	6883      	ldr	r3, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   19460:	6812      	ldr	r2, [r2, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   19462:	699d      	ldr	r5, [r3, #24]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   19464:	f412 5f00 	tst.w	r2, #8192	; 0x2000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   19468:	bf14      	ite	ne
   1946a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
   1946e:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
   19472:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   19476:	210d      	movs	r1, #13
   19478:	47a8      	blx	r5
	if (err < 0)
   1947a:	2800      	cmp	r0, #0
   1947c:	db2a      	blt.n	194d4 <main+0xe0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1947e:	491a      	ldr	r1, [pc, #104]	; (194e8 <main+0xf4>)
   19480:	4b1a      	ldr	r3, [pc, #104]	; (194ec <main+0xf8>)
	}

	/* Initialize the static struct gpio_callback variable */
	gpio_init_callback(&motion_cb_data, motion_detected, BIT(13));
	/* Add the callback function by calling gpio_add_callback() */
	gpio_add_callback(gpio_dev, &motion_cb_data);
   19482:	6820      	ldr	r0, [r4, #0]
   19484:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   19486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1948a:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1948c:	6883      	ldr	r3, [r0, #8]
   1948e:	69db      	ldr	r3, [r3, #28]
   19490:	b10b      	cbz	r3, 19496 <main+0xa2>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   19492:	2201      	movs	r2, #1
   19494:	4798      	blx	r3

	//
	k_timer_init(&my_timer, my_expiry_function, NULL);
   19496:	2200      	movs	r2, #0
   19498:	4915      	ldr	r1, [pc, #84]	; (194f0 <main+0xfc>)
   1949a:	4816      	ldr	r0, [pc, #88]	; (194f4 <main+0x100>)
   1949c:	f00f f881 	bl	285a2 <k_timer_init>

	//
	while(1)
	{
		LOG_INF("Beep Buzzer!");
   194a0:	4e15      	ldr	r6, [pc, #84]	; (194f8 <main+0x104>)
   194a2:	4d0e      	ldr	r5, [pc, #56]	; (194dc <main+0xe8>)
   194a4:	2402      	movs	r4, #2
   194a6:	9605      	str	r6, [sp, #20]
   194a8:	9404      	str	r4, [sp, #16]
   194aa:	2300      	movs	r3, #0
   194ac:	aa04      	add	r2, sp, #16
   194ae:	4628      	mov	r0, r5
   194b0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   194b4:	f001 fc12 	bl	1acdc <z_impl_z_log_msg_static_create>
		beep_buzzer(3, 1);
   194b8:	2101      	movs	r1, #1
   194ba:	2003      	movs	r0, #3
   194bc:	f7ff ff38 	bl	19330 <beep_buzzer>
		k_msleep(SLEEP_TIME_MS);
   194c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   194c4:	f00c f952 	bl	2576c <k_msleep.isra.0>
		blink_leds(250, LIGHTWELL_GREEN, 2);
   194c8:	4622      	mov	r2, r4
   194ca:	2101      	movs	r1, #1
   194cc:	20fa      	movs	r0, #250	; 0xfa
   194ce:	f7ff febf 	bl	19250 <blink_leds>
	while(1)
   194d2:	e7e7      	b.n	194a4 <main+0xb0>
	if (err)
	{
		LOG_ERR("Could not disconnect MQTT client: %d", err);
	}
	goto do_connect;
   194d4:	b006      	add	sp, #24
   194d6:	bd70      	pop	{r4, r5, r6, pc}
   194d8:	000296fd 	.word	0x000296fd
   194dc:	00028ebc 	.word	0x00028ebc
   194e0:	00029722 	.word	0x00029722
   194e4:	2000c580 	.word	0x2000c580
   194e8:	2000d048 	.word	0x2000d048
   194ec:	00019211 	.word	0x00019211
   194f0:	00019241 	.word	0x00019241
   194f4:	2000c938 	.word	0x2000c938
   194f8:	00029757 	.word	0x00029757

000194fc <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   194fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19500:	b091      	sub	sp, #68	; 0x44
   19502:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   19504:	f002 0304 	and.w	r3, r2, #4
   19508:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1950a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   1950e:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   19510:	0784      	lsls	r4, r0, #30
{
   19512:	4605      	mov	r5, r0
   19514:	460e      	mov	r6, r1
   19516:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   1951a:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1951c:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   1951e:	f040 81bd 	bne.w	1989c <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   19522:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   19524:	b130      	cbz	r0, 19534 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   19526:	2907      	cmp	r1, #7
   19528:	d809      	bhi.n	1953e <cbvprintf_package+0x42>
		return -ENOSPC;
   1952a:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   1952e:	b011      	add	sp, #68	; 0x44
   19530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   19534:	f001 0607 	and.w	r6, r1, #7
   19538:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   1953a:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   1953e:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   19540:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
   19544:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
   19548:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   1954a:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   1954e:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   19550:	9301      	str	r3, [sp, #4]
	bool parsing = false;
   19552:	46cb      	mov	fp, r9
	size = sizeof(char *);
   19554:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   19556:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
   1955a:	b10d      	cbz	r5, 19560 <cbvprintf_package+0x64>
				*(const char **)buf = s;
   1955c:	9a00      	ldr	r2, [sp, #0]
   1955e:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   19560:	9805      	ldr	r0, [sp, #20]
   19562:	2800      	cmp	r0, #0
   19564:	f300 80eb 	bgt.w	1973e <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   19568:	4899      	ldr	r0, [pc, #612]	; (197d0 <cbvprintf_package+0x2d4>)
   1956a:	9a00      	ldr	r2, [sp, #0]
   1956c:	4282      	cmp	r2, r0
   1956e:	d303      	bcc.n	19578 <cbvprintf_package+0x7c>
   19570:	4898      	ldr	r0, [pc, #608]	; (197d4 <cbvprintf_package+0x2d8>)
   19572:	4282      	cmp	r2, r0
   19574:	f0c0 80e3 	bcc.w	1973e <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   19578:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   1957a:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   1957e:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   19580:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   19584:	f100 8106 	bmi.w	19794 <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   19588:	2f0f      	cmp	r7, #15
   1958a:	f200 80b4 	bhi.w	196f6 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
   1958e:	2d00      	cmp	r5, #0
   19590:	f000 8108 	beq.w	197a4 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
   19594:	f107 0240 	add.w	r2, r7, #64	; 0x40
   19598:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   1959c:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   1959e:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   195a2:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   195a6:	9804      	ldr	r0, [sp, #16]
   195a8:	3001      	adds	r0, #1
   195aa:	9004      	str	r0, [sp, #16]
   195ac:	e0ea      	b.n	19784 <cbvprintf_package+0x288>
			switch (*fmt) {
   195ae:	287a      	cmp	r0, #122	; 0x7a
   195b0:	d860      	bhi.n	19674 <cbvprintf_package+0x178>
   195b2:	284b      	cmp	r0, #75	; 0x4b
   195b4:	d80e      	bhi.n	195d4 <cbvprintf_package+0xd8>
   195b6:	2847      	cmp	r0, #71	; 0x47
   195b8:	d85c      	bhi.n	19674 <cbvprintf_package+0x178>
   195ba:	2829      	cmp	r0, #41	; 0x29
   195bc:	d82f      	bhi.n	1961e <cbvprintf_package+0x122>
   195be:	2825      	cmp	r0, #37	; 0x25
   195c0:	d055      	beq.n	1966e <cbvprintf_package+0x172>
   195c2:	d857      	bhi.n	19674 <cbvprintf_package+0x178>
   195c4:	2820      	cmp	r0, #32
   195c6:	d07d      	beq.n	196c4 <cbvprintf_package+0x1c8>
   195c8:	3823      	subs	r0, #35	; 0x23
   195ca:	f1d0 0b00 	rsbs	fp, r0, #0
   195ce:	eb4b 0b00 	adc.w	fp, fp, r0
   195d2:	e077      	b.n	196c4 <cbvprintf_package+0x1c8>
   195d4:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   195d8:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   195dc:	d84a      	bhi.n	19674 <cbvprintf_package+0x178>
   195de:	e8df f00c 	tbb	[pc, ip]
   195e2:	4971      	.short	0x4971
   195e4:	49494949 	.word	0x49494949
   195e8:	49494949 	.word	0x49494949
   195ec:	494c4949 	.word	0x494c4949
   195f0:	49494949 	.word	0x49494949
   195f4:	5a494949 	.word	0x5a494949
   195f8:	5a4c4c49 	.word	0x5a4c4c49
   195fc:	4c715a5a 	.word	0x4c715a5a
   19600:	4971496e 	.word	0x4971496e
   19604:	49184c18 	.word	0x49184c18
   19608:	4c808349 	.word	0x4c808349
   1960c:	494c4949 	.word	0x494c4949
   19610:	80          	.byte	0x80
   19611:	00          	.byte	0x00
   19612:	2000      	movs	r0, #0
   19614:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   19618:	f04f 0a04 	mov.w	sl, #4
   1961c:	e039      	b.n	19692 <cbvprintf_package+0x196>
   1961e:	2201      	movs	r2, #1
			switch (*fmt) {
   19620:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   19624:	fa5f fc8c 	uxtb.w	ip, ip
   19628:	fa02 fc0c 	lsl.w	ip, r2, ip
   1962c:	ea1c 0f0e 	tst.w	ip, lr
   19630:	d148      	bne.n	196c4 <cbvprintf_package+0x1c8>
   19632:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   19636:	d12e      	bne.n	19696 <cbvprintf_package+0x19a>
   19638:	ea1c 0b02 	ands.w	fp, ip, r2
   1963c:	d042      	beq.n	196c4 <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
   1963e:	3c01      	subs	r4, #1
   19640:	4454      	add	r4, sl
   19642:	f1ca 0c00 	rsb	ip, sl, #0
   19646:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   1964a:	2d00      	cmp	r5, #0
   1964c:	d061      	beq.n	19712 <cbvprintf_package+0x216>
   1964e:	eba3 0c05 	sub.w	ip, r3, r5
   19652:	44a4      	add	ip, r4
   19654:	4566      	cmp	r6, ip
   19656:	f4ff af68 	bcc.w	1952a <cbvprintf_package+0x2e>
		if (is_str_arg) {
   1965a:	2800      	cmp	r0, #0
   1965c:	d168      	bne.n	19730 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
   1965e:	2b04      	cmp	r3, #4
   19660:	d147      	bne.n	196f2 <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
   19662:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   19666:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   19668:	2304      	movs	r3, #4
   1966a:	3404      	adds	r4, #4
   1966c:	e02a      	b.n	196c4 <cbvprintf_package+0x1c8>
				arg_idx--;
   1966e:	9a01      	ldr	r2, [sp, #4]
   19670:	3a01      	subs	r2, #1
   19672:	9201      	str	r2, [sp, #4]
				parsing = false;
   19674:	f04f 0b00 	mov.w	fp, #0
				continue;
   19678:	e024      	b.n	196c4 <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
   1967a:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   1967e:	286c      	cmp	r0, #108	; 0x6c
   19680:	d134      	bne.n	196ec <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
   19682:	2000      	movs	r0, #0
   19684:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
   19688:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   1968a:	2b6c      	cmp	r3, #108	; 0x6c
   1968c:	d1c4      	bne.n	19618 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
   1968e:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   19692:	4653      	mov	r3, sl
   19694:	e7d3      	b.n	1963e <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
   19696:	f108 0807 	add.w	r8, r8, #7
   1969a:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   1969e:	3407      	adds	r4, #7
   196a0:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
   196a4:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
   196a8:	b135      	cbz	r5, 196b8 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
   196aa:	9806      	ldr	r0, [sp, #24]
   196ac:	4420      	add	r0, r4
   196ae:	42b0      	cmp	r0, r6
   196b0:	f63f af3b 	bhi.w	1952a <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
   196b4:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
   196b8:	f04f 0b00 	mov.w	fp, #0
				buf += size;
   196bc:	3408      	adds	r4, #8
			switch (*fmt) {
   196be:	f04f 0a08 	mov.w	sl, #8
   196c2:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   196c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   196c8:	2800      	cmp	r0, #0
   196ca:	d078      	beq.n	197be <cbvprintf_package+0x2c2>
			if (!parsing) {
   196cc:	f1bb 0f00 	cmp.w	fp, #0
   196d0:	f47f af6d 	bne.w	195ae <cbvprintf_package+0xb2>
				if (*fmt == '%') {
   196d4:	2825      	cmp	r0, #37	; 0x25
   196d6:	d1f5      	bne.n	196c4 <cbvprintf_package+0x1c8>
					parsing = true;
   196d8:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
   196dc:	9b01      	ldr	r3, [sp, #4]
   196de:	3301      	adds	r3, #1
   196e0:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
   196e2:	f04f 0a04 	mov.w	sl, #4
   196e6:	e7ec      	b.n	196c2 <cbvprintf_package+0x1c6>
			switch (*fmt) {
   196e8:	4658      	mov	r0, fp
   196ea:	e793      	b.n	19614 <cbvprintf_package+0x118>
   196ec:	2000      	movs	r0, #0
				parsing = false;
   196ee:	4683      	mov	fp, r0
   196f0:	e7a5      	b.n	1963e <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
   196f2:	2b08      	cmp	r3, #8
   196f4:	d002      	beq.n	196fc <cbvprintf_package+0x200>
					return -EINVAL;
   196f6:	f06f 0015 	mvn.w	r0, #21
   196fa:	e718      	b.n	1952e <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
   196fc:	f108 0807 	add.w	r8, r8, #7
   19700:	f028 0807 	bic.w	r8, r8, #7
   19704:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   19708:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   1970c:	2308      	movs	r3, #8
   1970e:	3408      	adds	r4, #8
   19710:	e7d8      	b.n	196c4 <cbvprintf_package+0x1c8>
		if (is_str_arg) {
   19712:	b968      	cbnz	r0, 19730 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
   19714:	2b04      	cmp	r3, #4
   19716:	d102      	bne.n	1971e <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
   19718:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   1971c:	e7a4      	b.n	19668 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
   1971e:	2b08      	cmp	r3, #8
   19720:	d1e9      	bne.n	196f6 <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
   19722:	f108 0807 	add.w	r8, r8, #7
   19726:	f028 0807 	bic.w	r8, r8, #7
   1972a:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   1972e:	e7ed      	b.n	1970c <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   19730:	9a05      	ldr	r2, [sp, #20]
   19732:	3a01      	subs	r2, #1
   19734:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   19736:	f858 2b04 	ldr.w	r2, [r8], #4
   1973a:	9200      	str	r2, [sp, #0]
   1973c:	e70d      	b.n	1955a <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
   1973e:	9a03      	ldr	r2, [sp, #12]
   19740:	0790      	lsls	r0, r2, #30
   19742:	d520      	bpl.n	19786 <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   19744:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   19748:	eba4 0e05 	sub.w	lr, r4, r5
   1974c:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   19750:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   19754:	d2cf      	bcs.n	196f6 <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   19756:	2f0f      	cmp	r7, #15
   19758:	d8cd      	bhi.n	196f6 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
   1975a:	b1f5      	cbz	r5, 1979a <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
   1975c:	f107 0240 	add.w	r2, r7, #64	; 0x40
   19760:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   19764:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   19766:	b2c0      	uxtb	r0, r0
   19768:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   1976c:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   19770:	f1bc 0f00 	cmp.w	ip, #0
   19774:	f43f af17 	beq.w	195a6 <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   19778:	f060 007f 	orn	r0, r0, #127	; 0x7f
   1977c:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   19780:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   19784:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   19786:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
   1978a:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
   1978e:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   19790:	9206      	str	r2, [sp, #24]
   19792:	e797      	b.n	196c4 <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   19794:	f04f 0c00 	mov.w	ip, #0
   19798:	e7da      	b.n	19750 <cbvprintf_package+0x254>
				} else if (is_ro) {
   1979a:	f1bc 0f00 	cmp.w	ip, #0
   1979e:	d001      	beq.n	197a4 <cbvprintf_package+0x2a8>
					len += 1;
   197a0:	3601      	adds	r6, #1
   197a2:	e7ef      	b.n	19784 <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
   197a4:	9802      	ldr	r0, [sp, #8]
					len += 2;
   197a6:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   197a8:	2800      	cmp	r0, #0
   197aa:	d1eb      	bne.n	19784 <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
   197ac:	9800      	ldr	r0, [sp, #0]
   197ae:	e9cd 3106 	strd	r3, r1, [sp, #24]
   197b2:	f7ff fc1b 	bl	18fec <strlen>
   197b6:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   197ba:	4406      	add	r6, r0
   197bc:	e7e2      	b.n	19784 <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
   197be:	1b63      	subs	r3, r4, r5
   197c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   197c4:	d297      	bcs.n	196f6 <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
   197c6:	b93d      	cbnz	r5, 197d8 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   197c8:	f1a6 0408 	sub.w	r4, r6, #8
   197cc:	18e0      	adds	r0, r4, r3
   197ce:	e6ae      	b.n	1952e <cbvprintf_package+0x32>
   197d0:	00028b04 	.word	0x00028b04
   197d4:	0002b69c 	.word	0x0002b69c
	if (rws_pos_en) {
   197d8:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   197da:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
   197dc:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   197de:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   197e0:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   197e4:	b1c2      	cbz	r2, 19818 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   197e6:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   197e8:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   197ec:	f1b9 0f00 	cmp.w	r9, #0
   197f0:	d005      	beq.n	197fe <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
   197f2:	2200      	movs	r2, #0
   197f4:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
   197f6:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   197fa:	4297      	cmp	r7, r2
   197fc:	d10e      	bne.n	1981c <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
   197fe:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   19802:	f1c5 0301 	rsb	r3, r5, #1
   19806:	f10d 0820 	add.w	r8, sp, #32
   1980a:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   1980c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   19810:	4557      	cmp	r7, sl
   19812:	d112      	bne.n	1983a <cbvprintf_package+0x33e>
	return BUF_OFFSET;
   19814:	1b60      	subs	r0, r4, r5
   19816:	e68a      	b.n	1952e <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   19818:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   1981a:	e7e5      	b.n	197e8 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   1981c:	f810 3b01 	ldrb.w	r3, [r0], #1
   19820:	0619      	lsls	r1, r3, #24
   19822:	d508      	bpl.n	19836 <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
   19824:	eb04 0e0c 	add.w	lr, r4, ip
   19828:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   1982a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   1982e:	f4ff ae7c 	bcc.w	1952a <cbvprintf_package+0x2e>
			*buf++ = pos;
   19832:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   19836:	3201      	adds	r2, #1
   19838:	e7df      	b.n	197fa <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   1983a:	f1b9 0f00 	cmp.w	r9, #0
   1983e:	d003      	beq.n	19848 <cbvprintf_package+0x34c>
   19840:	f998 2000 	ldrsb.w	r2, [r8]
   19844:	2a00      	cmp	r2, #0
   19846:	db17      	blt.n	19878 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
   19848:	9b02      	ldr	r3, [sp, #8]
   1984a:	b1d3      	cbz	r3, 19882 <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
   1984c:	f81a 200b 	ldrb.w	r2, [sl, fp]
   19850:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   19854:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   19856:	9b01      	ldr	r3, [sp, #4]
   19858:	1898      	adds	r0, r3, r2
   1985a:	4420      	add	r0, r4
   1985c:	4286      	cmp	r6, r0
   1985e:	f4ff ae64 	bcc.w	1952a <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
   19862:	f898 0000 	ldrb.w	r0, [r8]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19866:	9900      	ldr	r1, [sp, #0]
   19868:	f804 0b01 	strb.w	r0, [r4], #1
   1986c:	4620      	mov	r0, r4
   1986e:	9203      	str	r2, [sp, #12]
   19870:	f00e ff93 	bl	2879a <memcpy>
		buf += size;
   19874:	9a03      	ldr	r2, [sp, #12]
   19876:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   19878:	f10a 0a01 	add.w	sl, sl, #1
   1987c:	f108 0801 	add.w	r8, r8, #1
   19880:	e7c6      	b.n	19810 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   19882:	f898 2000 	ldrb.w	r2, [r8]
   19886:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1988a:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   1988c:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
   1988e:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   19890:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   19894:	f7ff fbaa 	bl	18fec <strlen>
   19898:	1c42      	adds	r2, r0, #1
   1989a:	e7dc      	b.n	19856 <cbvprintf_package+0x35a>
		return -EFAULT;
   1989c:	f06f 000d 	mvn.w	r0, #13
   198a0:	e645      	b.n	1952e <cbvprintf_package+0x32>
   198a2:	bf00      	nop

000198a4 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   198a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198a8:	b095      	sub	sp, #84	; 0x54
   198aa:	af00      	add	r7, sp, #0
   198ac:	61bb      	str	r3, [r7, #24]
   198ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   198b0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   198b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   198b6:	4688      	mov	r8, r1
{
   198b8:	627a      	str	r2, [r7, #36]	; 0x24
   198ba:	60fb      	str	r3, [r7, #12]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   198bc:	b949      	cbnz	r1, 198d2 <cbprintf_package_convert+0x2e>
	buf += ros_nbr;
   198be:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   198c0:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
   198c2:	7880      	ldrb	r0, [r0, #2]
   198c4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   198c8:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   198ca:	4545      	cmp	r5, r8
   198cc:	d819      	bhi.n	19902 <cbprintf_package_convert+0x5e>
	return (size_t)(uintptr_t)(buf - start);
   198ce:	eba0 0804 	sub.w	r8, r0, r4
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   198d2:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
   198d4:	f894 b002 	ldrb.w	fp, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
   198d8:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
   198da:	f1bb 0f00 	cmp.w	fp, #0
   198de:	d002      	beq.n	198e6 <cbprintf_package_convert+0x42>
   198e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   198e2:	07d8      	lsls	r0, r3, #31
   198e4:	d416      	bmi.n	19914 <cbprintf_package_convert+0x70>
	rw_cpy = rws_nbr > 0 &&
   198e6:	697b      	ldr	r3, [r7, #20]
   198e8:	bb53      	cbnz	r3, 19940 <cbprintf_package_convert+0x9c>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   198ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   198ec:	b11b      	cbz	r3, 198f6 <cbprintf_package_convert+0x52>
			cb(in_packaged, in_len, ctx);
   198ee:	4641      	mov	r1, r8
   198f0:	4620      	mov	r0, r4
   198f2:	69ba      	ldr	r2, [r7, #24]
   198f4:	4798      	blx	r3
		}

		return in_len;
   198f6:	4645      	mov	r5, r8

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   198f8:	4628      	mov	r0, r5
   198fa:	3754      	adds	r7, #84	; 0x54
   198fc:	46bd      	mov	sp, r7
   198fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   19902:	1c46      	adds	r6, r0, #1
		buf += strlen((const char *)buf) + 1;
   19904:	4630      	mov	r0, r6
   19906:	f7ff fb71 	bl	18fec <strlen>
   1990a:	3001      	adds	r0, #1
   1990c:	4430      	add	r0, r6
	for (int i = 0; i < s_nbr; i++) {
   1990e:	f108 0801 	add.w	r8, r8, #1
   19912:	e7da      	b.n	198ca <cbprintf_package_convert+0x26>
	rw_cpy = rws_nbr > 0 &&
   19914:	7823      	ldrb	r3, [r4, #0]
   19916:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
   19918:	623b      	str	r3, [r7, #32]
   1991a:	009b      	lsls	r3, r3, #2
   1991c:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
   1991e:	6a3b      	ldr	r3, [r7, #32]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   19920:	61fa      	str	r2, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
   19922:	eb04 0a83 	add.w	sl, r4, r3, lsl #2
	if (cb == NULL) {
   19926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19928:	2b00      	cmp	r3, #0
   1992a:	f040 80ff 	bne.w	19b2c <cbprintf_package_convert+0x288>
		out_len = (int)in_len;
   1992e:	4645      	mov	r5, r8
	size_t strl_cnt = 0;
   19930:	2600      	movs	r6, #0
   19932:	46d0      	mov	r8, sl
   19934:	eb0b 090a 	add.w	r9, fp, sl
			for (int i = 0; i < ros_nbr; i++) {
   19938:	45c1      	cmp	r9, r8
   1993a:	d151      	bne.n	199e0 <cbprintf_package_convert+0x13c>
   1993c:	44da      	add	sl, fp
   1993e:	e013      	b.n	19968 <cbprintf_package_convert+0xc4>
	rw_cpy = rws_nbr > 0 &&
   19940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19942:	0799      	lsls	r1, r3, #30
   19944:	d5d1      	bpl.n	198ea <cbprintf_package_convert+0x46>
	args_size = in_desc->len * sizeof(int);
   19946:	7823      	ldrb	r3, [r4, #0]
   19948:	469a      	mov	sl, r3
   1994a:	623b      	str	r3, [r7, #32]
   1994c:	009b      	lsls	r3, r3, #2
   1994e:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   19950:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
   19952:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
   19956:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   19958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1995a:	2b00      	cmp	r3, #0
   1995c:	d17a      	bne.n	19a54 <cbprintf_package_convert+0x1b0>
		out_len = (int)in_len;
   1995e:	4645      	mov	r5, r8
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   19960:	f1bb 0f00 	cmp.w	fp, #0
   19964:	d14f      	bne.n	19a06 <cbprintf_package_convert+0x162>
	size_t strl_cnt = 0;
   19966:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
   19968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1996a:	f013 0f05 	tst.w	r3, #5
   1996e:	bf0c      	ite	eq
   19970:	f04f 0b02 	moveq.w	fp, #2
   19974:	f04f 0b01 	movne.w	fp, #1
   19978:	697b      	ldr	r3, [r7, #20]
   1997a:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   1997e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19980:	f003 0302 	and.w	r3, r3, #2
   19984:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0; i < rws_nbr; i++) {
   19986:	45ca      	cmp	sl, r9
   19988:	d0b6      	beq.n	198f8 <cbprintf_package_convert+0x54>
			uint8_t arg_idx = *str_pos++;
   1998a:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
   1998e:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   19992:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
   19996:	4bab      	ldr	r3, [pc, #684]	; (19c44 <cbprintf_package_convert+0x3a0>)
   19998:	4598      	cmp	r8, r3
   1999a:	d302      	bcc.n	199a2 <cbprintf_package_convert+0xfe>
   1999c:	4baa      	ldr	r3, [pc, #680]	; (19c48 <cbprintf_package_convert+0x3a4>)
   1999e:	4598      	cmp	r8, r3
   199a0:	d338      	bcc.n	19a14 <cbprintf_package_convert+0x170>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   199a2:	68fb      	ldr	r3, [r7, #12]
   199a4:	2b00      	cmp	r3, #0
   199a6:	d042      	beq.n	19a2e <cbprintf_package_convert+0x18a>
   199a8:	69f8      	ldr	r0, [r7, #28]
   199aa:	f00b ff23 	bl	257f4 <is_ptr>
   199ae:	2800      	cmp	r0, #0
   199b0:	d03d      	beq.n	19a2e <cbprintf_package_convert+0x18a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   199b2:	46e8      	mov	r8, sp
   199b4:	b08a      	sub	sp, #40	; 0x28
   199b6:	466a      	mov	r2, sp
   199b8:	4ba4      	ldr	r3, [pc, #656]	; (19c4c <cbprintf_package_convert+0x3a8>)
   199ba:	6153      	str	r3, [r2, #20]
   199bc:	69fb      	ldr	r3, [r7, #28]
   199be:	e9c2 3106 	strd	r3, r1, [r2, #24]
   199c2:	f44f 7300 	mov.w	r3, #512	; 0x200
   199c6:	8413      	strh	r3, [r2, #32]
   199c8:	4ba1      	ldr	r3, [pc, #644]	; (19c50 <cbprintf_package_convert+0x3ac>)
   199ca:	f842 3f10 	str.w	r3, [r2, #16]!
   199ce:	2300      	movs	r3, #0
   199d0:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   199d4:	489f      	ldr	r0, [pc, #636]	; (19c54 <cbprintf_package_convert+0x3b0>)
   199d6:	f001 f981 	bl	1acdc <z_impl_z_log_msg_static_create>
				out_len -= 2;
   199da:	3d02      	subs	r5, #2
   199dc:	46c5      	mov	sp, r8
				continue;
   199de:	e7d2      	b.n	19986 <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
   199e0:	f818 3b01 	ldrb.w	r3, [r8], #1
		return 1 + strlen(str);
   199e4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   199e8:	f7ff fb00 	bl	18fec <strlen>
				if (strl && strl_cnt < strl_len) {
   199ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   199ee:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   199f0:	b13b      	cbz	r3, 19a02 <cbprintf_package_convert+0x15e>
   199f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   199f6:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   199f8:	bf3e      	ittt	cc
   199fa:	6ffb      	ldrcc	r3, [r7, #124]	; 0x7c
   199fc:	f823 0016 	strhcc.w	r0, [r3, r6, lsl #1]
   19a00:	3601      	addcc	r6, #1
				out_len += len;
   19a02:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
   19a04:	e798      	b.n	19938 <cbprintf_package_convert+0x94>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   19a06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19a08:	f013 0604 	ands.w	r6, r3, #4
	size_t strl_cnt = 0;
   19a0c:	bf1c      	itt	ne
   19a0e:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   19a10:	44da      	addne	sl, fp
   19a12:	e7a9      	b.n	19968 <cbprintf_package_convert+0xc4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   19a14:	68fb      	ldr	r3, [r7, #12]
   19a16:	b123      	cbz	r3, 19a22 <cbprintf_package_convert+0x17e>
   19a18:	69f8      	ldr	r0, [r7, #28]
   19a1a:	f00b feeb 	bl	257f4 <is_ptr>
   19a1e:	2800      	cmp	r0, #0
   19a20:	d1c7      	bne.n	199b2 <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   19a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19a24:	07da      	lsls	r2, r3, #31
   19a26:	d405      	bmi.n	19a34 <cbprintf_package_convert+0x190>
					out_len -= drop_ro_str_pos ? 2 : 1;
   19a28:	eba5 050b 	sub.w	r5, r5, fp
   19a2c:	e7ab      	b.n	19986 <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   19a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19a30:	2b00      	cmp	r3, #0
   19a32:	d0a8      	beq.n	19986 <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
   19a34:	4640      	mov	r0, r8
   19a36:	f7ff fad9 	bl	18fec <strlen>
				if (strl && strl_cnt < strl_len) {
   19a3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   19a3c:	b143      	cbz	r3, 19a50 <cbprintf_package_convert+0x1ac>
   19a3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   19a42:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   19a44:	bf3f      	itttt	cc
   19a46:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   19a48:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   19a4a:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   19a4e:	3601      	addcc	r6, #1
				out_len += (len - 1);
   19a50:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
   19a52:	e798      	b.n	19986 <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   19a54:	f1bb 0f00 	cmp.w	fp, #0
   19a58:	d06e      	beq.n	19b38 <cbprintf_package_convert+0x294>
   19a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19a5c:	f013 0604 	ands.w	r6, r3, #4
   19a60:	d06d      	beq.n	19b3e <cbprintf_package_convert+0x29a>
		keep_cnt = ros_nbr;
   19a62:	46d9      	mov	r9, fp
		scpy_cnt = 0;
   19a64:	2600      	movs	r6, #0
		dst = keep_str_pos;
   19a66:	f107 0040 	add.w	r0, r7, #64	; 0x40
   19a6a:	465a      	mov	r2, fp
   19a6c:	4651      	mov	r1, sl
   19a6e:	f00e fe94 	bl	2879a <memcpy>
	str_pos += ros_nbr;
   19a72:	697b      	ldr	r3, [r7, #20]
   19a74:	44da      	add	sl, fp
	for (int i = 0; i < rws_nbr; i++) {
   19a76:	005b      	lsls	r3, r3, #1
   19a78:	607b      	str	r3, [r7, #4]
   19a7a:	697b      	ldr	r3, [r7, #20]
   19a7c:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
   19a80:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   19a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19a84:	f003 0302 	and.w	r3, r3, #2
   19a88:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < rws_nbr; i++) {
   19a8a:	68bb      	ldr	r3, [r7, #8]
   19a8c:	4553      	cmp	r3, sl
   19a8e:	d158      	bne.n	19b42 <cbprintf_package_convert+0x29e>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   19a90:	6fb9      	ldr	r1, [r7, #120]	; 0x78
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   19a92:	7863      	ldrb	r3, [r4, #1]
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   19a94:	6fb8      	ldr	r0, [r7, #120]	; 0x78
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   19a96:	0789      	lsls	r1, r1, #30
   19a98:	bf48      	it	mi
   19a9a:	2100      	movmi	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   19a9c:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   19aa0:	bf58      	it	pl
   19aa2:	ea4f 0159 	movpl.w	r1, r9, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   19aa6:	07c5      	lsls	r5, r0, #31
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   19aa8:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   19aaa:	f100 809a 	bmi.w	19be2 <cbprintf_package_convert+0x33e>
   19aae:	f010 0f04 	tst.w	r0, #4
   19ab2:	bf14      	ite	ne
   19ab4:	4648      	movne	r0, r9
   19ab6:	2000      	moveq	r0, #0
   19ab8:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
   19aba:	7062      	strb	r2, [r4, #1]
   19abc:	70a0      	strb	r0, [r4, #2]
   19abe:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   19ac0:	4620      	mov	r0, r4
   19ac2:	69ba      	ldr	r2, [r7, #24]
   19ac4:	6939      	ldr	r1, [r7, #16]
   19ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19ac8:	4798      	blx	r3
	if (rv < 0) {
   19aca:	1e05      	subs	r5, r0, #0
   19acc:	f6ff af14 	blt.w	198f8 <cbprintf_package_convert+0x54>
	*in_desc = in_desc_backup;
   19ad0:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   19ad2:	4649      	mov	r1, r9
	*in_desc = in_desc_backup;
   19ad4:	7023      	strb	r3, [r4, #0]
   19ad6:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   19ad8:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
   19ada:	7063      	strb	r3, [r4, #1]
   19adc:	697b      	ldr	r3, [r7, #20]
   19ade:	f884 b002 	strb.w	fp, [r4, #2]
   19ae2:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   19ae4:	f107 0040 	add.w	r0, r7, #64	; 0x40
   19ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19aea:	4798      	blx	r3
	if (rv < 0) {
   19aec:	f1b0 0900 	subs.w	r9, r0, #0
   19af0:	f2c0 80a4 	blt.w	19c3c <cbprintf_package_convert+0x398>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   19af4:	693b      	ldr	r3, [r7, #16]
   19af6:	eba8 010b 	sub.w	r1, r8, fp
   19afa:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   19afc:	687b      	ldr	r3, [r7, #4]
   19afe:	4650      	mov	r0, sl
   19b00:	1ac9      	subs	r1, r1, r3
   19b02:	69ba      	ldr	r2, [r7, #24]
   19b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b06:	4798      	blx	r3
	if (rv < 0) {
   19b08:	2800      	cmp	r0, #0
   19b0a:	f2c0 8099 	blt.w	19c40 <cbprintf_package_convert+0x39c>
	for (int i = 0; i < scpy_cnt; i++) {
   19b0e:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
   19b12:	44a9      	add	r9, r5
	out_len += rv;
   19b14:	eb09 0500 	add.w	r5, r9, r0
		uint8_t loc = cpy_str_pos[i];
   19b18:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
   19b1c:	45b3      	cmp	fp, r6
   19b1e:	db62      	blt.n	19be6 <cbprintf_package_convert+0x342>
	(void)cb(NULL, 0, ctx);
   19b20:	2100      	movs	r1, #0
   19b22:	69ba      	ldr	r2, [r7, #24]
   19b24:	4608      	mov	r0, r1
   19b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b28:	4798      	blx	r3
	return out_len;
   19b2a:	e6e5      	b.n	198f8 <cbprintf_package_convert+0x54>
	if (cb == NULL) {
   19b2c:	465e      	mov	r6, fp
   19b2e:	f04f 0900 	mov.w	r9, #0
   19b32:	f107 0030 	add.w	r0, r7, #48	; 0x30
   19b36:	e798      	b.n	19a6a <cbprintf_package_convert+0x1c6>
		scpy_cnt = 0;
   19b38:	465e      	mov	r6, fp
		keep_cnt = 0;
   19b3a:	46d9      	mov	r9, fp
   19b3c:	e799      	b.n	19a72 <cbprintf_package_convert+0x1ce>
   19b3e:	46b1      	mov	r9, r6
   19b40:	e797      	b.n	19a72 <cbprintf_package_convert+0x1ce>
		uint8_t arg_idx = *str_pos++;
   19b42:	f81a 1b02 	ldrb.w	r1, [sl], #2
   19b46:	4b3f      	ldr	r3, [pc, #252]	; (19c44 <cbprintf_package_convert+0x3a0>)
		uint8_t arg_pos = *str_pos++;
   19b48:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   19b4c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   19b50:	4298      	cmp	r0, r3
   19b52:	d302      	bcc.n	19b5a <cbprintf_package_convert+0x2b6>
   19b54:	4b3c      	ldr	r3, [pc, #240]	; (19c48 <cbprintf_package_convert+0x3a4>)
   19b56:	4298      	cmp	r0, r3
   19b58:	d31d      	bcc.n	19b96 <cbprintf_package_convert+0x2f2>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   19b5a:	68fb      	ldr	r3, [r7, #12]
   19b5c:	b123      	cbz	r3, 19b68 <cbprintf_package_convert+0x2c4>
   19b5e:	69f8      	ldr	r0, [r7, #28]
   19b60:	f00b fe48 	bl	257f4 <is_ptr>
   19b64:	2800      	cmp	r0, #0
   19b66:	d190      	bne.n	19a8a <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   19b68:	683b      	ldr	r3, [r7, #0]
   19b6a:	b9fb      	cbnz	r3, 19bac <cbprintf_package_convert+0x308>
				keep_str_pos[keep_cnt++] = arg_idx;
   19b6c:	f109 0328 	add.w	r3, r9, #40	; 0x28
   19b70:	f107 0228 	add.w	r2, r7, #40	; 0x28
   19b74:	f109 0001 	add.w	r0, r9, #1
   19b78:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
   19b7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
   19b80:	f109 0902 	add.w	r9, r9, #2
   19b84:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
   19b88:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   19b8c:	fa5f f989 	uxtb.w	r9, r9
   19b90:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
   19b94:	e779      	b.n	19a8a <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   19b96:	68fb      	ldr	r3, [r7, #12]
   19b98:	b12b      	cbz	r3, 19ba6 <cbprintf_package_convert+0x302>
   19b9a:	69f8      	ldr	r0, [r7, #28]
   19b9c:	f00b fe2a 	bl	257f4 <is_ptr>
   19ba0:	2800      	cmp	r0, #0
   19ba2:	f47f af72 	bne.w	19a8a <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   19ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19ba8:	07db      	lsls	r3, r3, #31
   19baa:	d509      	bpl.n	19bc0 <cbprintf_package_convert+0x31c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   19bac:	f106 0328 	add.w	r3, r6, #40	; 0x28
   19bb0:	f107 0228 	add.w	r2, r7, #40	; 0x28
   19bb4:	1c71      	adds	r1, r6, #1
   19bb6:	189e      	adds	r6, r3, r2
   19bb8:	f806 5c20 	strb.w	r5, [r6, #-32]
   19bbc:	b2ce      	uxtb	r6, r1
   19bbe:	e764      	b.n	19a8a <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   19bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19bc2:	0758      	lsls	r0, r3, #29
   19bc4:	f57f af61 	bpl.w	19a8a <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
   19bc8:	f109 0328 	add.w	r3, r9, #40	; 0x28
   19bcc:	f107 0228 	add.w	r2, r7, #40	; 0x28
   19bd0:	f109 0101 	add.w	r1, r9, #1
   19bd4:	eb03 0902 	add.w	r9, r3, r2
   19bd8:	f809 5c10 	strb.w	r5, [r9, #-16]
   19bdc:	fa5f f981 	uxtb.w	r9, r1
   19be0:	e753      	b.n	19a8a <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   19be2:	2000      	movs	r0, #0
   19be4:	e768      	b.n	19ab8 <cbprintf_package_convert+0x214>
		uint8_t loc = cpy_str_pos[i];
   19be6:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
   19bea:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
   19bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
   19bf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   19bf4:	b1fb      	cbz	r3, 19c36 <cbprintf_package_convert+0x392>
   19bf6:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   19bfa:	2101      	movs	r1, #1
   19bfc:	69ba      	ldr	r2, [r7, #24]
   19bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19c00:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   19c04:	4798      	blx	r3
		if (rv < 0) {
   19c06:	2800      	cmp	r0, #0
   19c08:	db1a      	blt.n	19c40 <cbprintf_package_convert+0x39c>
		out_len += rv;
   19c0a:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   19c0c:	f1b8 0f00 	cmp.w	r8, #0
   19c10:	d106      	bne.n	19c20 <cbprintf_package_convert+0x37c>
   19c12:	4648      	mov	r0, r9
   19c14:	f7ff f9ea 	bl	18fec <strlen>
   19c18:	f100 0801 	add.w	r8, r0, #1
   19c1c:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   19c20:	4641      	mov	r1, r8
   19c22:	4648      	mov	r0, r9
   19c24:	69ba      	ldr	r2, [r7, #24]
   19c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19c28:	4798      	blx	r3
		if (rv < 0) {
   19c2a:	2800      	cmp	r0, #0
   19c2c:	db08      	blt.n	19c40 <cbprintf_package_convert+0x39c>
		out_len += rv;
   19c2e:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   19c30:	f10b 0b01 	add.w	fp, fp, #1
   19c34:	e772      	b.n	19b1c <cbprintf_package_convert+0x278>
		uint16_t str_len = strl ? strl[i] : 0;
   19c36:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   19c3a:	e7de      	b.n	19bfa <cbprintf_package_convert+0x356>
   19c3c:	464d      	mov	r5, r9
   19c3e:	e65b      	b.n	198f8 <cbprintf_package_convert+0x54>
   19c40:	4605      	mov	r5, r0
   19c42:	e659      	b.n	198f8 <cbprintf_package_convert+0x54>
   19c44:	00028b04 	.word	0x00028b04
   19c48:	0002b69c 	.word	0x0002b69c
   19c4c:	00029779 	.word	0x00029779
   19c50:	01000004 	.word	0x01000004
   19c54:	00028ed4 	.word	0x00028ed4

00019c58 <z_reserve_fd>:

	return entry->obj;
}

int z_reserve_fd(void)
{
   19c58:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   19c5a:	2400      	movs	r4, #0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   19c5c:	f04f 33ff 	mov.w	r3, #4294967295
   19c60:	f04f 32ff 	mov.w	r2, #4294967295
   19c64:	4814      	ldr	r0, [pc, #80]	; (19cb8 <z_reserve_fd+0x60>)
   19c66:	f00a f891 	bl	23d8c <z_impl_k_mutex_lock>
   19c6a:	4b14      	ldr	r3, [pc, #80]	; (19cbc <z_reserve_fd+0x64>)
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19c6c:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   19c70:	b17a      	cbz	r2, 19c92 <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   19c72:	3401      	adds	r4, #1
   19c74:	2c04      	cmp	r4, #4
   19c76:	f103 0320 	add.w	r3, r3, #32
   19c7a:	d1f7      	bne.n	19c6c <z_reserve_fd+0x14>
	errno = ENFILE;
   19c7c:	f00c fc26 	bl	264cc <__errno>
   19c80:	2317      	movs	r3, #23
	return -1;
   19c82:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   19c86:	6003      	str	r3, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   19c88:	480b      	ldr	r0, [pc, #44]	; (19cb8 <z_reserve_fd+0x60>)
   19c8a:	f00a f8f9 	bl	23e80 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   19c8e:	4620      	mov	r0, r4
   19c90:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   19c92:	e8d3 0fef 	ldaex	r0, [r3]
   19c96:	3001      	adds	r0, #1
   19c98:	e8c3 0fe1 	stlex	r1, r0, [r3]
   19c9c:	2900      	cmp	r1, #0
   19c9e:	d1f8      	bne.n	19c92 <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   19ca0:	4807      	ldr	r0, [pc, #28]	; (19cc0 <z_reserve_fd+0x68>)
   19ca2:	0163      	lsls	r3, r4, #5
   19ca4:	eb00 1144 	add.w	r1, r0, r4, lsl #5
   19ca8:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
   19caa:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
   19cac:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   19cae:	4418      	add	r0, r3
   19cb0:	f00e fa32 	bl	28118 <z_impl_k_mutex_init>
   19cb4:	e7e8      	b.n	19c88 <z_reserve_fd+0x30>
   19cb6:	bf00      	nop
   19cb8:	2000c864 	.word	0x2000c864
   19cbc:	2000d05c 	.word	0x2000d05c
   19cc0:	2000d054 	.word	0x2000d054

00019cc4 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   19cc4:	b410      	push	{r4}
   19cc6:	4604      	mov	r4, r0
   19cc8:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   19cca:	4b09      	ldr	r3, [pc, #36]	; (19cf0 <z_finalize_fd+0x2c>)
   19ccc:	0162      	lsls	r2, r4, #5
   19cce:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   19cd2:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   19cd4:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   19cd6:	b140      	cbz	r0, 19cea <z_finalize_fd+0x26>
   19cd8:	68c4      	ldr	r4, [r0, #12]
   19cda:	b134      	cbz	r4, 19cea <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   19cdc:	320c      	adds	r2, #12
   19cde:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   19ce0:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   19ce2:	f240 1205 	movw	r2, #261	; 0x105
   19ce6:	f00b bdaa 	b.w	2583e <z_fdtable_call_ioctl.constprop.0>
}
   19cea:	bc10      	pop	{r4}
   19cec:	4770      	bx	lr
   19cee:	bf00      	nop
   19cf0:	2000d054 	.word	0x2000d054

00019cf4 <z_free_fd>:

void z_free_fd(int fd)
{
   19cf4:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   19cf6:	490d      	ldr	r1, [pc, #52]	; (19d2c <z_free_fd+0x38>)
   19cf8:	0140      	lsls	r0, r0, #5
   19cfa:	f100 0308 	add.w	r3, r0, #8
   19cfe:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19d00:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
   19d04:	b182      	cbz	r2, 19d28 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   19d06:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19d08:	e8d3 5fef 	ldaex	r5, [r3]
   19d0c:	4295      	cmp	r5, r2
   19d0e:	d104      	bne.n	19d1a <z_free_fd+0x26>
   19d10:	e8c3 4fec 	stlex	ip, r4, [r3]
   19d14:	f1bc 0f00 	cmp.w	ip, #0
   19d18:	d1f6      	bne.n	19d08 <z_free_fd+0x14>
   19d1a:	d1f1      	bne.n	19d00 <z_free_fd+0xc>
	if (old_rc != 1) {
   19d1c:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
   19d1e:	bf01      	itttt	eq
   19d20:	2300      	moveq	r3, #0
   19d22:	180a      	addeq	r2, r1, r0
   19d24:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
   19d26:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   19d28:	bd30      	pop	{r4, r5, pc}
   19d2a:	bf00      	nop
   19d2c:	2000d054 	.word	0x2000d054

00019d30 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   19d30:	4b01      	ldr	r3, [pc, #4]	; (19d38 <__printk_hook_install+0x8>)
   19d32:	6018      	str	r0, [r3, #0]
}
   19d34:	4770      	bx	lr
   19d36:	bf00      	nop
   19d38:	2000c584 	.word	0x2000c584

00019d3c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   19d3c:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   19d3e:	2500      	movs	r5, #0
{
   19d40:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   19d42:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   19d46:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   19d48:	9500      	str	r5, [sp, #0]
   19d4a:	a903      	add	r1, sp, #12
   19d4c:	4805      	ldr	r0, [pc, #20]	; (19d64 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   19d4e:	9505      	str	r5, [sp, #20]
   19d50:	f000 f97a 	bl	1a048 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   19d54:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   19d58:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   19d5a:	bfb8      	it	lt
   19d5c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   19d5e:	b007      	add	sp, #28
   19d60:	bd30      	pop	{r4, r5, pc}
   19d62:	bf00      	nop
   19d64:	00025861 	.word	0x00025861

00019d68 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   19d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19d6c:	8b05      	ldrh	r5, [r0, #24]
{
   19d6e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   19d70:	0728      	lsls	r0, r5, #28
{
   19d72:	4690      	mov	r8, r2
	if (processing) {
   19d74:	d411      	bmi.n	19d9a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   19d76:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19d78:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   19d7c:	f040 80cd 	bne.w	19f1a <process_event+0x1b2>
			evt = process_recheck(mgr);
   19d80:	4620      	mov	r0, r4
   19d82:	f00b ff69 	bl	25c58 <process_recheck>
		}

		if (evt == EVT_NOP) {
   19d86:	b178      	cbz	r0, 19da8 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   19d88:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19d8a:	8b21      	ldrh	r1, [r4, #24]
   19d8c:	2804      	cmp	r0, #4
   19d8e:	d811      	bhi.n	19db4 <process_event+0x4c>
   19d90:	e8df f000 	tbb	[pc, r0]
   19d94:	856d10c3 	.word	0x856d10c3
   19d98:	95          	.byte	0x95
   19d99:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   19d9a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   19d9c:	bf0c      	ite	eq
   19d9e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19da2:	f045 0520 	orrne.w	r5, r5, #32
   19da6:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   19da8:	f388 8811 	msr	BASEPRI, r8
   19dac:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   19db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19db4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   19db8:	45aa      	cmp	sl, r5
   19dba:	f000 80a6 	beq.w	19f0a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   19dbe:	2700      	movs	r7, #0
   19dc0:	46b9      	mov	r9, r7
   19dc2:	463e      	mov	r6, r7
   19dc4:	68a3      	ldr	r3, [r4, #8]
   19dc6:	2b00      	cmp	r3, #0
   19dc8:	f000 80bd 	beq.w	19f46 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   19dcc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   19dd0:	8321      	strh	r1, [r4, #24]
   19dd2:	f388 8811 	msr	BASEPRI, r8
   19dd6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   19dda:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19ddc:	2900      	cmp	r1, #0
   19dde:	f000 80bb 	beq.w	19f58 <process_event+0x1f0>
	return node->next;
   19de2:	680d      	ldr	r5, [r1, #0]
   19de4:	2900      	cmp	r1, #0
   19de6:	f000 80b7 	beq.w	19f58 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   19dea:	4633      	mov	r3, r6
   19dec:	4652      	mov	r2, sl
   19dee:	4620      	mov	r0, r4
   19df0:	f8d1 8004 	ldr.w	r8, [r1, #4]
   19df4:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19df6:	2d00      	cmp	r5, #0
   19df8:	d076      	beq.n	19ee8 <process_event+0x180>
   19dfa:	682b      	ldr	r3, [r5, #0]
   19dfc:	4629      	mov	r1, r5
   19dfe:	461d      	mov	r5, r3
   19e00:	e7f0      	b.n	19de4 <process_event+0x7c>
   19e02:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   19e06:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   19e08:	2a01      	cmp	r2, #1
   19e0a:	d81b      	bhi.n	19e44 <process_event+0xdc>
	list->head = NULL;
   19e0c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19e0e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   19e12:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   19e14:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19e16:	b289      	uxth	r1, r1
	list->tail = NULL;
   19e18:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   19e1c:	d109      	bne.n	19e32 <process_event+0xca>
   19e1e:	463b      	mov	r3, r7
   19e20:	e003      	b.n	19e2a <process_event+0xc2>
				mgr->refs += 1U;
   19e22:	8b62      	ldrh	r2, [r4, #26]
   19e24:	3201      	adds	r2, #1
   19e26:	8362      	strh	r2, [r4, #26]
	return node->next;
   19e28:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   19e2a:	2b00      	cmp	r3, #0
   19e2c:	d1f9      	bne.n	19e22 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19e2e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   19e32:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   19e34:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   19e36:	f00b ff0f 	bl	25c58 <process_recheck>
   19e3a:	2800      	cmp	r0, #0
   19e3c:	d07b      	beq.n	19f36 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19e3e:	f041 0120 	orr.w	r1, r1, #32
   19e42:	e077      	b.n	19f34 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   19e44:	2b04      	cmp	r3, #4
   19e46:	d10a      	bne.n	19e5e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19e48:	f021 0107 	bic.w	r1, r1, #7
   19e4c:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   19e4e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   19e50:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   19e52:	f00b ff01 	bl	25c58 <process_recheck>
   19e56:	b110      	cbz	r0, 19e5e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19e58:	f041 0120 	orr.w	r1, r1, #32
   19e5c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19e5e:	8b21      	ldrh	r1, [r4, #24]
   19e60:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   19e64:	45aa      	cmp	sl, r5
   19e66:	d050      	beq.n	19f0a <process_event+0x1a2>
   19e68:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   19e6a:	46b9      	mov	r9, r7
   19e6c:	e7aa      	b.n	19dc4 <process_event+0x5c>
			transit = mgr->transitions->start;
   19e6e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19e70:	f021 0107 	bic.w	r1, r1, #7
   19e74:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   19e78:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   19e7a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   19e7e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   19e80:	d12d      	bne.n	19ede <process_event+0x176>
		    || (transit != NULL)) {
   19e82:	f1b9 0f00 	cmp.w	r9, #0
   19e86:	d040      	beq.n	19f0a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   19e88:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   19e8c:	8321      	strh	r1, [r4, #24]
   19e8e:	f388 8811 	msr	BASEPRI, r8
   19e92:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   19e96:	4620      	mov	r0, r4
   19e98:	4939      	ldr	r1, [pc, #228]	; (19f80 <process_event+0x218>)
   19e9a:	47c8      	blx	r9
   19e9c:	e029      	b.n	19ef2 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19e9e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   19ea2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19ea4:	f041 0104 	orr.w	r1, r1, #4
   19ea8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   19eaa:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   19eac:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   19eb0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   19eb2:	d0e6      	beq.n	19e82 <process_event+0x11a>
   19eb4:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19eb6:	f04f 0a04 	mov.w	sl, #4
		res = 0;
   19eba:	463e      	mov	r6, r7
   19ebc:	e782      	b.n	19dc4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19ebe:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   19ec2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19ec4:	f041 0105 	orr.w	r1, r1, #5
   19ec8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   19eca:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   19ecc:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   19ed0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   19ed2:	d0d6      	beq.n	19e82 <process_event+0x11a>
   19ed4:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19ed6:	f04f 0a05 	mov.w	sl, #5
		res = 0;
   19eda:	463e      	mov	r6, r7
   19edc:	e772      	b.n	19dc4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   19ede:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19ee0:	f04f 0a06 	mov.w	sl, #6
		res = 0;
   19ee4:	463e      	mov	r6, r7
   19ee6:	e76d      	b.n	19dc4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19ee8:	462b      	mov	r3, r5
   19eea:	e787      	b.n	19dfc <process_event+0x94>
			if (transit != NULL) {
   19eec:	f1b9 0f00 	cmp.w	r9, #0
   19ef0:	d1d1      	bne.n	19e96 <process_event+0x12e>
	__asm__ volatile(
   19ef2:	f04f 0320 	mov.w	r3, #32
   19ef6:	f3ef 8811 	mrs	r8, BASEPRI
   19efa:	f383 8812 	msr	BASEPRI_MAX, r3
   19efe:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   19f02:	8b23      	ldrh	r3, [r4, #24]
   19f04:	f023 0308 	bic.w	r3, r3, #8
   19f08:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   19f0a:	8b25      	ldrh	r5, [r4, #24]
   19f0c:	06ea      	lsls	r2, r5, #27
   19f0e:	d52e      	bpl.n	19f6e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   19f10:	f025 0310 	bic.w	r3, r5, #16
   19f14:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   19f16:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   19f1a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19f1c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   19f1e:	2e00      	cmp	r6, #0
   19f20:	f6bf af6f 	bge.w	19e02 <process_event+0x9a>
	list->head = NULL;
   19f24:	2300      	movs	r3, #0
		*clients = mgr->clients;
   19f26:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   19f28:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19f2c:	f021 0107 	bic.w	r1, r1, #7
   19f30:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19f34:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19f36:	8b21      	ldrh	r1, [r4, #24]
   19f38:	f04f 0900 	mov.w	r9, #0
   19f3c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   19f40:	45aa      	cmp	sl, r5
   19f42:	f47f af3f 	bne.w	19dc4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   19f46:	2f00      	cmp	r7, #0
   19f48:	d09b      	beq.n	19e82 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   19f4a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   19f4e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   19f50:	f388 8811 	msr	BASEPRI, r8
   19f54:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   19f58:	2f00      	cmp	r7, #0
   19f5a:	d0c7      	beq.n	19eec <process_event+0x184>
	return node->next;
   19f5c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   19f5e:	4639      	mov	r1, r7
   19f60:	4633      	mov	r3, r6
   19f62:	4652      	mov	r2, sl
   19f64:	4620      	mov	r0, r4
   19f66:	f00b fea3 	bl	25cb0 <notify_one>
	list->head = node;
   19f6a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   19f6c:	e7f4      	b.n	19f58 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   19f6e:	06ab      	lsls	r3, r5, #26
   19f70:	f57f af1a 	bpl.w	19da8 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   19f74:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   19f78:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   19f7a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   19f7e:	e6ff      	b.n	19d80 <process_event+0x18>
   19f80:	00025cdd 	.word	0x00025cdd

00019f84 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   19f84:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f86:	4602      	mov	r2, r0
   19f88:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   19f8a:	270a      	movs	r7, #10
	size_t val = 0;
   19f8c:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   19f8e:	4e07      	ldr	r6, [pc, #28]	; (19fac <extract_decimal+0x28>)
   19f90:	460b      	mov	r3, r1
   19f92:	781c      	ldrb	r4, [r3, #0]
   19f94:	3101      	adds	r1, #1
   19f96:	5d35      	ldrb	r5, [r6, r4]
   19f98:	076d      	lsls	r5, r5, #29
   19f9a:	d401      	bmi.n	19fa0 <extract_decimal+0x1c>
	}
	*str = sp;
   19f9c:	6013      	str	r3, [r2, #0]
	return val;
}
   19f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   19fa0:	fb07 4300 	mla	r3, r7, r0, r4
   19fa4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   19fa8:	e7f2      	b.n	19f90 <extract_decimal+0xc>
   19faa:	bf00      	nop
   19fac:	0002b550 	.word	0x0002b550

00019fb0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   19fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fb4:	4615      	mov	r5, r2
   19fb6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   19fb8:	78d3      	ldrb	r3, [r2, #3]
   19fba:	4a22      	ldr	r2, [pc, #136]	; (1a044 <encode_uint+0x94>)
	switch (specifier) {
   19fbc:	2b6f      	cmp	r3, #111	; 0x6f
   19fbe:	f812 b003 	ldrb.w	fp, [r2, r3]
{
   19fc2:	4680      	mov	r8, r0
   19fc4:	460f      	mov	r7, r1
   19fc6:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   19fca:	d029      	beq.n	1a020 <encode_uint+0x70>
   19fcc:	d824      	bhi.n	1a018 <encode_uint+0x68>
		return 10;
   19fce:	2b58      	cmp	r3, #88	; 0x58
   19fd0:	bf0c      	ite	eq
   19fd2:	2610      	moveq	r6, #16
   19fd4:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   19fd6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   19fda:	4632      	mov	r2, r6
   19fdc:	2300      	movs	r3, #0
   19fde:	4640      	mov	r0, r8
   19fe0:	4639      	mov	r1, r7
   19fe2:	f7fe fe91 	bl	18d08 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   19fe6:	2a09      	cmp	r2, #9
   19fe8:	b2d4      	uxtb	r4, r2
   19fea:	d81e      	bhi.n	1a02a <encode_uint+0x7a>
   19fec:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   19fee:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19ff0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   19ff2:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19ff6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   19ffa:	d301      	bcc.n	1a000 <encode_uint+0x50>
   19ffc:	45d1      	cmp	r9, sl
   19ffe:	d811      	bhi.n	1a024 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   1a000:	782b      	ldrb	r3, [r5, #0]
   1a002:	069b      	lsls	r3, r3, #26
   1a004:	d505      	bpl.n	1a012 <encode_uint+0x62>
		if (radix == 8) {
   1a006:	2e08      	cmp	r6, #8
   1a008:	d115      	bne.n	1a036 <encode_uint+0x86>
			conv->altform_0 = true;
   1a00a:	78ab      	ldrb	r3, [r5, #2]
   1a00c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   1a010:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
   1a012:	4648      	mov	r0, r9
   1a014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1a018:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1a01c:	2b70      	cmp	r3, #112	; 0x70
   1a01e:	e7d7      	b.n	19fd0 <encode_uint+0x20>
	switch (specifier) {
   1a020:	2608      	movs	r6, #8
   1a022:	e7d8      	b.n	19fd6 <encode_uint+0x26>
		value /= radix;
   1a024:	4680      	mov	r8, r0
   1a026:	460f      	mov	r7, r1
   1a028:	e7d7      	b.n	19fda <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a02a:	f1bb 0f01 	cmp.w	fp, #1
   1a02e:	bf0c      	ite	eq
   1a030:	3437      	addeq	r4, #55	; 0x37
   1a032:	3457      	addne	r4, #87	; 0x57
   1a034:	e7db      	b.n	19fee <encode_uint+0x3e>
		} else if (radix == 16) {
   1a036:	2e10      	cmp	r6, #16
   1a038:	d1eb      	bne.n	1a012 <encode_uint+0x62>
			conv->altform_0c = true;
   1a03a:	78ab      	ldrb	r3, [r5, #2]
   1a03c:	f043 0310 	orr.w	r3, r3, #16
   1a040:	e7e6      	b.n	1a010 <encode_uint+0x60>
   1a042:	bf00      	nop
   1a044:	0002b550 	.word	0x0002b550

0001a048 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   1a048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a04c:	4682      	mov	sl, r0
   1a04e:	4617      	mov	r7, r2
   1a050:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1a052:	2500      	movs	r5, #0
{
   1a054:	b097      	sub	sp, #92	; 0x5c
   1a056:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1a058:	7838      	ldrb	r0, [r7, #0]
   1a05a:	b908      	cbnz	r0, 1a060 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1a05c:	4628      	mov	r0, r5
   1a05e:	e349      	b.n	1a6f4 <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
   1a060:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   1a062:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   1a064:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
   1a066:	d006      	beq.n	1a076 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   1a068:	9903      	ldr	r1, [sp, #12]
   1a06a:	47d0      	blx	sl
   1a06c:	2800      	cmp	r0, #0
   1a06e:	f2c0 8341 	blt.w	1a6f4 <z_cbvprintf_impl+0x6ac>
   1a072:	3501      	adds	r5, #1
		if (bps == NULL) {
   1a074:	e1f0      	b.n	1a458 <z_cbvprintf_impl+0x410>
		} state = {
   1a076:	2218      	movs	r2, #24
   1a078:	2100      	movs	r1, #0
   1a07a:	a810      	add	r0, sp, #64	; 0x40
   1a07c:	f00e fb9a 	bl	287b4 <memset>
	if (*sp == '%') {
   1a080:	787b      	ldrb	r3, [r7, #1]
   1a082:	2b25      	cmp	r3, #37	; 0x25
   1a084:	f000 80a3 	beq.w	1a1ce <z_cbvprintf_impl+0x186>
   1a088:	2300      	movs	r3, #0
   1a08a:	4698      	mov	r8, r3
   1a08c:	469e      	mov	lr, r3
   1a08e:	469c      	mov	ip, r3
   1a090:	4618      	mov	r0, r3
   1a092:	1c79      	adds	r1, r7, #1
   1a094:	460e      	mov	r6, r1
		switch (*sp) {
   1a096:	f811 2b01 	ldrb.w	r2, [r1], #1
   1a09a:	2a2b      	cmp	r2, #43	; 0x2b
   1a09c:	f000 80c6 	beq.w	1a22c <z_cbvprintf_impl+0x1e4>
   1a0a0:	f200 80bd 	bhi.w	1a21e <z_cbvprintf_impl+0x1d6>
   1a0a4:	2a20      	cmp	r2, #32
   1a0a6:	f000 80c4 	beq.w	1a232 <z_cbvprintf_impl+0x1ea>
   1a0aa:	2a23      	cmp	r2, #35	; 0x23
   1a0ac:	f000 80c4 	beq.w	1a238 <z_cbvprintf_impl+0x1f0>
   1a0b0:	b12b      	cbz	r3, 1a0be <z_cbvprintf_impl+0x76>
   1a0b2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a0b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a0ba:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1a0be:	f1b8 0f00 	cmp.w	r8, #0
   1a0c2:	d005      	beq.n	1a0d0 <z_cbvprintf_impl+0x88>
   1a0c4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a0c8:	f043 0320 	orr.w	r3, r3, #32
   1a0cc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1a0d0:	f1be 0f00 	cmp.w	lr, #0
   1a0d4:	d005      	beq.n	1a0e2 <z_cbvprintf_impl+0x9a>
   1a0d6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a0da:	f043 0310 	orr.w	r3, r3, #16
   1a0de:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1a0e2:	f1bc 0f00 	cmp.w	ip, #0
   1a0e6:	d005      	beq.n	1a0f4 <z_cbvprintf_impl+0xac>
   1a0e8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a0ec:	f043 0308 	orr.w	r3, r3, #8
   1a0f0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1a0f4:	b128      	cbz	r0, 1a102 <z_cbvprintf_impl+0xba>
   1a0f6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a0fa:	f043 0304 	orr.w	r3, r3, #4
   1a0fe:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   1a102:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a106:	f003 0144 	and.w	r1, r3, #68	; 0x44
   1a10a:	2944      	cmp	r1, #68	; 0x44
   1a10c:	d103      	bne.n	1a116 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
   1a10e:	f36f 1386 	bfc	r3, #6, #1
   1a112:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   1a116:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   1a11a:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   1a11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a120:	9609      	str	r6, [sp, #36]	; 0x24
   1a122:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   1a126:	f040 808c 	bne.w	1a242 <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
   1a12a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1a12e:	f043 0301 	orr.w	r3, r3, #1
   1a132:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
   1a136:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
   1a138:	781a      	ldrb	r2, [r3, #0]
   1a13a:	2a2e      	cmp	r2, #46	; 0x2e
   1a13c:	bf0c      	ite	eq
   1a13e:	2101      	moveq	r1, #1
   1a140:	2100      	movne	r1, #0
   1a142:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a146:	f361 0241 	bfi	r2, r1, #1, #1
   1a14a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   1a14e:	d10c      	bne.n	1a16a <z_cbvprintf_impl+0x122>
	++sp;
   1a150:	1c5a      	adds	r2, r3, #1
   1a152:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
   1a154:	785a      	ldrb	r2, [r3, #1]
   1a156:	2a2a      	cmp	r2, #42	; 0x2a
   1a158:	f040 8083 	bne.w	1a262 <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
   1a15c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   1a160:	3302      	adds	r3, #2
		conv->prec_star = true;
   1a162:	f042 0204 	orr.w	r2, r2, #4
   1a166:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
   1a16a:	781a      	ldrb	r2, [r3, #0]
   1a16c:	2a6c      	cmp	r2, #108	; 0x6c
   1a16e:	f000 80a4 	beq.w	1a2ba <z_cbvprintf_impl+0x272>
   1a172:	f200 8086 	bhi.w	1a282 <z_cbvprintf_impl+0x23a>
   1a176:	2a68      	cmp	r2, #104	; 0x68
   1a178:	f000 808c 	beq.w	1a294 <z_cbvprintf_impl+0x24c>
   1a17c:	2a6a      	cmp	r2, #106	; 0x6a
   1a17e:	f000 80a5 	beq.w	1a2cc <z_cbvprintf_impl+0x284>
   1a182:	2a4c      	cmp	r2, #76	; 0x4c
   1a184:	f000 80aa 	beq.w	1a2dc <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
   1a188:	461a      	mov	r2, r3
   1a18a:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
   1a18e:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
   1a190:	9204      	str	r2, [sp, #16]
   1a192:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a196:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
   1a19a:	f200 8117 	bhi.w	1a3cc <z_cbvprintf_impl+0x384>
   1a19e:	2b6d      	cmp	r3, #109	; 0x6d
   1a1a0:	f200 80a9 	bhi.w	1a2f6 <z_cbvprintf_impl+0x2ae>
   1a1a4:	2b69      	cmp	r3, #105	; 0x69
   1a1a6:	f200 8111 	bhi.w	1a3cc <z_cbvprintf_impl+0x384>
   1a1aa:	2b57      	cmp	r3, #87	; 0x57
   1a1ac:	f200 80be 	bhi.w	1a32c <z_cbvprintf_impl+0x2e4>
   1a1b0:	2b41      	cmp	r3, #65	; 0x41
   1a1b2:	d003      	beq.n	1a1bc <z_cbvprintf_impl+0x174>
   1a1b4:	3b45      	subs	r3, #69	; 0x45
   1a1b6:	2b02      	cmp	r3, #2
   1a1b8:	f200 8108 	bhi.w	1a3cc <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
   1a1bc:	2204      	movs	r2, #4
   1a1be:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a1c2:	f362 0302 	bfi	r3, r2, #0, #3
   1a1c6:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
   1a1ca:	2301      	movs	r3, #1
			break;
   1a1cc:	e0ca      	b.n	1a364 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
   1a1ce:	1cba      	adds	r2, r7, #2
   1a1d0:	9204      	str	r2, [sp, #16]
   1a1d2:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   1a1d6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1a1da:	07da      	lsls	r2, r3, #31
   1a1dc:	f140 80fd 	bpl.w	1a3da <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
   1a1e0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   1a1e4:	f1b9 0f00 	cmp.w	r9, #0
   1a1e8:	da07      	bge.n	1a1fa <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
   1a1ea:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
   1a1ee:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
   1a1f2:	f042 0204 	orr.w	r2, r2, #4
   1a1f6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
   1a1fa:	075e      	lsls	r6, r3, #29
   1a1fc:	f140 80f6 	bpl.w	1a3ec <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
   1a200:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
   1a204:	f1bb 0f00 	cmp.w	fp, #0
   1a208:	f280 80f5 	bge.w	1a3f6 <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
   1a20c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1a210:	f36f 0341 	bfc	r3, #1, #1
   1a214:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   1a218:	f04f 3bff 	mov.w	fp, #4294967295
   1a21c:	e0eb      	b.n	1a3f6 <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
   1a21e:	2a2d      	cmp	r2, #45	; 0x2d
   1a220:	d00d      	beq.n	1a23e <z_cbvprintf_impl+0x1f6>
   1a222:	2a30      	cmp	r2, #48	; 0x30
   1a224:	f47f af44 	bne.w	1a0b0 <z_cbvprintf_impl+0x68>
   1a228:	2301      	movs	r3, #1
	} while (loop);
   1a22a:	e733      	b.n	1a094 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
   1a22c:	f04f 0c01 	mov.w	ip, #1
   1a230:	e730      	b.n	1a094 <z_cbvprintf_impl+0x4c>
   1a232:	f04f 0e01 	mov.w	lr, #1
   1a236:	e72d      	b.n	1a094 <z_cbvprintf_impl+0x4c>
   1a238:	f04f 0801 	mov.w	r8, #1
   1a23c:	e72a      	b.n	1a094 <z_cbvprintf_impl+0x4c>
   1a23e:	2001      	movs	r0, #1
   1a240:	e728      	b.n	1a094 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
   1a242:	a809      	add	r0, sp, #36	; 0x24
   1a244:	f7ff fe9e 	bl	19f84 <extract_decimal>
	if (sp != wp) {
   1a248:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a24a:	42b3      	cmp	r3, r6
   1a24c:	f43f af74 	beq.w	1a138 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
   1a250:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
   1a254:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   1a256:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
   1a258:	f360 0241 	bfi	r2, r0, #1, #1
   1a25c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1a260:	e76a      	b.n	1a138 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
   1a262:	a809      	add	r0, sp, #36	; 0x24
   1a264:	f7ff fe8e 	bl	19f84 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1a268:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
   1a26c:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   1a26e:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1a272:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   1a276:	f362 0341 	bfi	r3, r2, #1, #1
   1a27a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
   1a27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a280:	e773      	b.n	1a16a <z_cbvprintf_impl+0x122>
	switch (*sp) {
   1a282:	2a74      	cmp	r2, #116	; 0x74
   1a284:	d026      	beq.n	1a2d4 <z_cbvprintf_impl+0x28c>
   1a286:	2a7a      	cmp	r2, #122	; 0x7a
   1a288:	f47f af7e 	bne.w	1a188 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
   1a28c:	2106      	movs	r1, #6
   1a28e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a292:	e00c      	b.n	1a2ae <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
   1a294:	785a      	ldrb	r2, [r3, #1]
   1a296:	2a68      	cmp	r2, #104	; 0x68
   1a298:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a29c:	d106      	bne.n	1a2ac <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
   1a29e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1a2a0:	f361 02c6 	bfi	r2, r1, #3, #4
   1a2a4:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   1a2a8:	3302      	adds	r3, #2
   1a2aa:	e76d      	b.n	1a188 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
   1a2ac:	2102      	movs	r1, #2
   1a2ae:	f361 02c6 	bfi	r2, r1, #3, #4
   1a2b2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   1a2b6:	3301      	adds	r3, #1
   1a2b8:	e766      	b.n	1a188 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
   1a2ba:	785a      	ldrb	r2, [r3, #1]
   1a2bc:	2a6c      	cmp	r2, #108	; 0x6c
   1a2be:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a2c2:	d101      	bne.n	1a2c8 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
   1a2c4:	2104      	movs	r1, #4
   1a2c6:	e7eb      	b.n	1a2a0 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
   1a2c8:	2103      	movs	r1, #3
   1a2ca:	e7f0      	b.n	1a2ae <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
   1a2cc:	2105      	movs	r1, #5
   1a2ce:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a2d2:	e7ec      	b.n	1a2ae <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
   1a2d4:	2107      	movs	r1, #7
   1a2d6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a2da:	e7e8      	b.n	1a2ae <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
   1a2dc:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1a2e0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   1a2e4:	f022 0202 	bic.w	r2, r2, #2
   1a2e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1a2ec:	f042 0202 	orr.w	r2, r2, #2
   1a2f0:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   1a2f4:	e7df      	b.n	1a2b6 <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
   1a2f6:	3b6e      	subs	r3, #110	; 0x6e
   1a2f8:	b2d9      	uxtb	r1, r3
   1a2fa:	2301      	movs	r3, #1
   1a2fc:	408b      	lsls	r3, r1
   1a2fe:	f240 4182 	movw	r1, #1154	; 0x482
   1a302:	420b      	tst	r3, r1
   1a304:	d138      	bne.n	1a378 <z_cbvprintf_impl+0x330>
   1a306:	f013 0f24 	tst.w	r3, #36	; 0x24
   1a30a:	d152      	bne.n	1a3b2 <z_cbvprintf_impl+0x36a>
   1a30c:	07d8      	lsls	r0, r3, #31
   1a30e:	d55d      	bpl.n	1a3cc <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
   1a310:	2103      	movs	r1, #3
   1a312:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a316:	f361 0302 	bfi	r3, r1, #0, #3
   1a31a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a31e:	f002 0378 	and.w	r3, r2, #120	; 0x78
   1a322:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   1a326:	424b      	negs	r3, r1
   1a328:	414b      	adcs	r3, r1
   1a32a:	e01b      	b.n	1a364 <z_cbvprintf_impl+0x31c>
   1a32c:	2001      	movs	r0, #1
	switch (conv->specifier) {
   1a32e:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   1a332:	b2c9      	uxtb	r1, r1
   1a334:	fa00 f101 	lsl.w	r1, r0, r1
   1a338:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   1a33c:	f47f af3e 	bne.w	1a1bc <z_cbvprintf_impl+0x174>
   1a340:	f640 0601 	movw	r6, #2049	; 0x801
   1a344:	4231      	tst	r1, r6
   1a346:	d11d      	bne.n	1a384 <z_cbvprintf_impl+0x33c>
   1a348:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   1a34c:	d03e      	beq.n	1a3cc <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
   1a34e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a352:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a356:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1a35a:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   1a35c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a360:	d034      	beq.n	1a3cc <z_cbvprintf_impl+0x384>
	bool unsupported = false;
   1a362:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   1a364:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   1a368:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1a36c:	430b      	orrs	r3, r1
   1a36e:	f363 0241 	bfi	r2, r3, #1, #1
   1a372:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   1a376:	e72e      	b.n	1a1d6 <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
   1a378:	2102      	movs	r1, #2
   1a37a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a37e:	f361 0302 	bfi	r3, r1, #0, #3
   1a382:	e7e8      	b.n	1a356 <z_cbvprintf_impl+0x30e>
   1a384:	2002      	movs	r0, #2
   1a386:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a38a:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1a38e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a392:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   1a394:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   1a398:	bf02      	ittt	eq
   1a39a:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   1a39e:	f041 0101 	orreq.w	r1, r1, #1
   1a3a2:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   1a3a6:	2b63      	cmp	r3, #99	; 0x63
   1a3a8:	d1db      	bne.n	1a362 <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1a3aa:	1e13      	subs	r3, r2, #0
   1a3ac:	bf18      	it	ne
   1a3ae:	2301      	movne	r3, #1
   1a3b0:	e7d8      	b.n	1a364 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
   1a3b2:	2103      	movs	r1, #3
   1a3b4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   1a3b8:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1a3bc:	f361 0302 	bfi	r3, r1, #0, #3
   1a3c0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   1a3c4:	bf14      	ite	ne
   1a3c6:	2301      	movne	r3, #1
   1a3c8:	2300      	moveq	r3, #0
   1a3ca:	e7cb      	b.n	1a364 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
   1a3cc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a3d0:	f043 0301 	orr.w	r3, r3, #1
   1a3d4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   1a3d8:	e7c3      	b.n	1a362 <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
   1a3da:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   1a3de:	2a00      	cmp	r2, #0
		int width = -1;
   1a3e0:	bfac      	ite	ge
   1a3e2:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
   1a3e6:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
   1a3ea:	e706      	b.n	1a1fa <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
   1a3ec:	0798      	lsls	r0, r3, #30
   1a3ee:	f57f af13 	bpl.w	1a218 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
   1a3f2:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   1a3f6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1a3f8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
   1a3fc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
   1a400:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
   1a404:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1a408:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1a40a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1a40e:	d133      	bne.n	1a478 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
   1a410:	1ecb      	subs	r3, r1, #3
   1a412:	2b04      	cmp	r3, #4
   1a414:	d804      	bhi.n	1a420 <z_cbvprintf_impl+0x3d8>
   1a416:	e8df f003 	tbb	[pc, r3]
   1a41a:	4621      	.short	0x4621
   1a41c:	2146      	.short	0x2146
   1a41e:	21          	.byte	0x21
   1a41f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   1a420:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   1a422:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   1a424:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1a428:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   1a42c:	d11c      	bne.n	1a468 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
   1a42e:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   1a432:	17da      	asrs	r2, r3, #31
   1a434:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   1a438:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   1a43a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a43e:	f013 0603 	ands.w	r6, r3, #3
   1a442:	d050      	beq.n	1a4e6 <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
   1a444:	463a      	mov	r2, r7
   1a446:	4650      	mov	r0, sl
   1a448:	9b04      	ldr	r3, [sp, #16]
   1a44a:	9903      	ldr	r1, [sp, #12]
   1a44c:	f00b fcec 	bl	25e28 <outs>
   1a450:	2800      	cmp	r0, #0
   1a452:	f2c0 814f 	blt.w	1a6f4 <z_cbvprintf_impl+0x6ac>
   1a456:	4405      	add	r5, r0
			continue;
   1a458:	9f04      	ldr	r7, [sp, #16]
   1a45a:	e5fd      	b.n	1a058 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1a45c:	f854 3b04 	ldr.w	r3, [r4], #4
   1a460:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   1a462:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
   1a466:	e7e8      	b.n	1a43a <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
   1a468:	2902      	cmp	r1, #2
   1a46a:	d1e5      	bne.n	1a438 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
   1a46c:	b21a      	sxth	r2, r3
   1a46e:	f343 33c0 	sbfx	r3, r3, #15, #1
   1a472:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1a476:	e7df      	b.n	1a438 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1a478:	2b02      	cmp	r3, #2
   1a47a:	d124      	bne.n	1a4c6 <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
   1a47c:	1ecb      	subs	r3, r1, #3
   1a47e:	2b04      	cmp	r3, #4
   1a480:	d804      	bhi.n	1a48c <z_cbvprintf_impl+0x444>
   1a482:	e8df f003 	tbb	[pc, r3]
   1a486:	1018      	.short	0x1018
   1a488:	1810      	.short	0x1810
   1a48a:	18          	.byte	0x18
   1a48b:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   1a48c:	2901      	cmp	r1, #1
   1a48e:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
   1a492:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1a496:	d014      	beq.n	1a4c2 <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
   1a498:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   1a49a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   1a49e:	d1cc      	bne.n	1a43a <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
   1a4a0:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   1a4a2:	9310      	str	r3, [sp, #64]	; 0x40
   1a4a4:	e7c9      	b.n	1a43a <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
   1a4a6:	3407      	adds	r4, #7
   1a4a8:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   1a4ac:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1a4b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   1a4b4:	e7c1      	b.n	1a43a <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
   1a4b6:	f854 3b04 	ldr.w	r3, [r4], #4
   1a4ba:	9310      	str	r3, [sp, #64]	; 0x40
   1a4bc:	2300      	movs	r3, #0
   1a4be:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   1a4c0:	e7bb      	b.n	1a43a <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
   1a4c2:	b2db      	uxtb	r3, r3
   1a4c4:	e7cd      	b.n	1a462 <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
   1a4c6:	2b04      	cmp	r3, #4
   1a4c8:	d108      	bne.n	1a4dc <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
   1a4ca:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   1a4cc:	f024 0407 	bic.w	r4, r4, #7
   1a4d0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a4d4:	3408      	adds	r4, #8
   1a4d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1a4da:	e7ae      	b.n	1a43a <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1a4dc:	2b03      	cmp	r3, #3
   1a4de:	d1ac      	bne.n	1a43a <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
   1a4e0:	f854 3b04 	ldr.w	r3, [r4], #4
   1a4e4:	e7dd      	b.n	1a4a2 <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
   1a4e6:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1a4ea:	2878      	cmp	r0, #120	; 0x78
   1a4ec:	d8b4      	bhi.n	1a458 <z_cbvprintf_impl+0x410>
   1a4ee:	2862      	cmp	r0, #98	; 0x62
   1a4f0:	d81c      	bhi.n	1a52c <z_cbvprintf_impl+0x4e4>
   1a4f2:	2825      	cmp	r0, #37	; 0x25
   1a4f4:	f43f adb8 	beq.w	1a068 <z_cbvprintf_impl+0x20>
   1a4f8:	2858      	cmp	r0, #88	; 0x58
   1a4fa:	d1ad      	bne.n	1a458 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
   1a4fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1a500:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1a504:	9300      	str	r3, [sp, #0]
   1a506:	aa12      	add	r2, sp, #72	; 0x48
   1a508:	ab0a      	add	r3, sp, #40	; 0x28
   1a50a:	f7ff fd51 	bl	19fb0 <encode_uint>
			if (precision >= 0) {
   1a50e:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   1a512:	4607      	mov	r7, r0
			if (precision >= 0) {
   1a514:	f280 8097 	bge.w	1a646 <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
   1a518:	2f00      	cmp	r7, #0
   1a51a:	d09d      	beq.n	1a458 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
   1a51c:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
   1a520:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
   1a524:	2e00      	cmp	r6, #0
   1a526:	d04e      	beq.n	1a5c6 <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
   1a528:	3001      	adds	r0, #1
   1a52a:	e04c      	b.n	1a5c6 <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
   1a52c:	3863      	subs	r0, #99	; 0x63
   1a52e:	2815      	cmp	r0, #21
   1a530:	d892      	bhi.n	1a458 <z_cbvprintf_impl+0x410>
   1a532:	a201      	add	r2, pc, #4	; (adr r2, 1a538 <z_cbvprintf_impl+0x4f0>)
   1a534:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1a538:	0001a5b7 	.word	0x0001a5b7
   1a53c:	0001a61d 	.word	0x0001a61d
   1a540:	0001a459 	.word	0x0001a459
   1a544:	0001a459 	.word	0x0001a459
   1a548:	0001a459 	.word	0x0001a459
   1a54c:	0001a459 	.word	0x0001a459
   1a550:	0001a61d 	.word	0x0001a61d
   1a554:	0001a459 	.word	0x0001a459
   1a558:	0001a459 	.word	0x0001a459
   1a55c:	0001a459 	.word	0x0001a459
   1a560:	0001a459 	.word	0x0001a459
   1a564:	0001a6a5 	.word	0x0001a6a5
   1a568:	0001a641 	.word	0x0001a641
   1a56c:	0001a667 	.word	0x0001a667
   1a570:	0001a459 	.word	0x0001a459
   1a574:	0001a459 	.word	0x0001a459
   1a578:	0001a591 	.word	0x0001a591
   1a57c:	0001a459 	.word	0x0001a459
   1a580:	0001a641 	.word	0x0001a641
   1a584:	0001a459 	.word	0x0001a459
   1a588:	0001a459 	.word	0x0001a459
   1a58c:	0001a641 	.word	0x0001a641
			if (precision >= 0) {
   1a590:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
   1a594:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
   1a596:	db0a      	blt.n	1a5ae <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
   1a598:	4659      	mov	r1, fp
   1a59a:	4638      	mov	r0, r7
   1a59c:	f00e f94c 	bl	28838 <strnlen>
			bpe = bps + len;
   1a5a0:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
   1a5a4:	2f00      	cmp	r7, #0
   1a5a6:	f43f af57 	beq.w	1a458 <z_cbvprintf_impl+0x410>
		char sign = 0;
   1a5aa:	2600      	movs	r6, #0
   1a5ac:	e00b      	b.n	1a5c6 <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
   1a5ae:	4638      	mov	r0, r7
   1a5b0:	f7fe fd1c 	bl	18fec <strlen>
   1a5b4:	e7f4      	b.n	1a5a0 <z_cbvprintf_impl+0x558>
		char sign = 0;
   1a5b6:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
   1a5b8:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1a5ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
   1a5bc:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1a5c0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
   1a5c4:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
   1a5c6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a5ca:	f013 0210 	ands.w	r2, r3, #16
   1a5ce:	9205      	str	r2, [sp, #20]
   1a5d0:	f000 8083 	beq.w	1a6da <z_cbvprintf_impl+0x692>
			nj_len += 2U;
   1a5d4:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   1a5d6:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   1a5d8:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
   1a5dc:	bf48      	it	mi
   1a5de:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   1a5e0:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
   1a5e2:	bf48      	it	mi
   1a5e4:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   1a5e6:	f1b9 0f00 	cmp.w	r9, #0
   1a5ea:	f340 8090 	ble.w	1a70e <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
   1a5ee:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   1a5f2:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
   1a5f6:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1a5fa:	0750      	lsls	r0, r2, #29
   1a5fc:	9306      	str	r3, [sp, #24]
   1a5fe:	f100 8086 	bmi.w	1a70e <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
   1a602:	0651      	lsls	r1, r2, #25
   1a604:	d579      	bpl.n	1a6fa <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
   1a606:	b13e      	cbz	r6, 1a618 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   1a608:	4630      	mov	r0, r6
   1a60a:	9903      	ldr	r1, [sp, #12]
   1a60c:	47d0      	blx	sl
   1a60e:	2800      	cmp	r0, #0
   1a610:	db70      	blt.n	1a6f4 <z_cbvprintf_impl+0x6ac>
   1a612:	9b06      	ldr	r3, [sp, #24]
   1a614:	3501      	adds	r5, #1
   1a616:	461e      	mov	r6, r3
					pad = '0';
   1a618:	2230      	movs	r2, #48	; 0x30
   1a61a:	e06f      	b.n	1a6fc <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
   1a61c:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   1a61e:	bf5a      	itte	pl
   1a620:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   1a624:	015e      	lslpl	r6, r3, #5
				sign = '+';
   1a626:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
   1a628:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
   1a62c:	2b00      	cmp	r3, #0
   1a62e:	f6bf af65 	bge.w	1a4fc <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
   1a632:	4252      	negs	r2, r2
   1a634:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   1a638:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1a63a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1a63e:	e75d      	b.n	1a4fc <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
   1a640:	2600      	movs	r6, #0
   1a642:	e75b      	b.n	1a4fc <z_cbvprintf_impl+0x4b4>
		char sign = 0;
   1a644:	2600      	movs	r6, #0
				conv->flag_zero = false;
   1a646:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   1a64a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1a64e:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   1a650:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1a654:	459b      	cmp	fp, r3
				conv->flag_zero = false;
   1a656:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   1a65a:	f67f af5d 	bls.w	1a518 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
   1a65e:	ebab 0303 	sub.w	r3, fp, r3
   1a662:	9313      	str	r3, [sp, #76]	; 0x4c
   1a664:	e758      	b.n	1a518 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
   1a666:	9810      	ldr	r0, [sp, #64]	; 0x40
   1a668:	b380      	cbz	r0, 1a6cc <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1a66a:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
   1a66e:	ab0a      	add	r3, sp, #40	; 0x28
   1a670:	2100      	movs	r1, #0
   1a672:	f8cd 8000 	str.w	r8, [sp]
   1a676:	aa12      	add	r2, sp, #72	; 0x48
   1a678:	f7ff fc9a 	bl	19fb0 <encode_uint>
				conv->altform_0c = true;
   1a67c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
   1a680:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
   1a684:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1a688:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1a68c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1a690:	4607      	mov	r7, r0
				conv->altform_0c = true;
   1a692:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
   1a696:	dad5      	bge.n	1a644 <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
   1a698:	2800      	cmp	r0, #0
   1a69a:	f43f aedd 	beq.w	1a458 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
   1a69e:	eba8 0000 	sub.w	r0, r8, r0
   1a6a2:	e782      	b.n	1a5aa <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
   1a6a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   1a6a6:	2907      	cmp	r1, #7
   1a6a8:	f63f aed6 	bhi.w	1a458 <z_cbvprintf_impl+0x410>
   1a6ac:	e8df f001 	tbb	[pc, r1]
   1a6b0:	0c06040c 	.word	0x0c06040c
   1a6b4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   1a6b8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   1a6ba:	e6cd      	b.n	1a458 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
   1a6bc:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   1a6be:	e6cb      	b.n	1a458 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
   1a6c0:	17ea      	asrs	r2, r5, #31
   1a6c2:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   1a6c6:	e6c7      	b.n	1a458 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1a6c8:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   1a6ca:	e6c5      	b.n	1a458 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
   1a6cc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1a78c <z_cbvprintf_impl+0x744>
		char sign = 0;
   1a6d0:	4606      	mov	r6, r0
   1a6d2:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
   1a6d6:	2005      	movs	r0, #5
   1a6d8:	e775      	b.n	1a5c6 <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
   1a6da:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   1a6dc:	bf48      	it	mi
   1a6de:	3001      	addmi	r0, #1
   1a6e0:	e779      	b.n	1a5d6 <z_cbvprintf_impl+0x58e>
					OUTC(pad);
   1a6e2:	4610      	mov	r0, r2
   1a6e4:	9307      	str	r3, [sp, #28]
   1a6e6:	9206      	str	r2, [sp, #24]
   1a6e8:	9903      	ldr	r1, [sp, #12]
   1a6ea:	47d0      	blx	sl
   1a6ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a6f0:	2800      	cmp	r0, #0
   1a6f2:	da04      	bge.n	1a6fe <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
   1a6f4:	b017      	add	sp, #92	; 0x5c
   1a6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1a6fa:	2220      	movs	r2, #32
					pad = '0';
   1a6fc:	464b      	mov	r3, r9
				while (width-- > 0) {
   1a6fe:	4619      	mov	r1, r3
   1a700:	2900      	cmp	r1, #0
   1a702:	f103 33ff 	add.w	r3, r3, #4294967295
   1a706:	dcec      	bgt.n	1a6e2 <z_cbvprintf_impl+0x69a>
   1a708:	444d      	add	r5, r9
   1a70a:	4699      	mov	r9, r3
   1a70c:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
   1a70e:	b12e      	cbz	r6, 1a71c <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
   1a710:	4630      	mov	r0, r6
   1a712:	9903      	ldr	r1, [sp, #12]
   1a714:	47d0      	blx	sl
   1a716:	2800      	cmp	r0, #0
   1a718:	dbec      	blt.n	1a6f4 <z_cbvprintf_impl+0x6ac>
   1a71a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1a71c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a720:	06da      	lsls	r2, r3, #27
   1a722:	d401      	bmi.n	1a728 <z_cbvprintf_impl+0x6e0>
   1a724:	071b      	lsls	r3, r3, #28
   1a726:	d505      	bpl.n	1a734 <z_cbvprintf_impl+0x6ec>
				OUTC('0');
   1a728:	2030      	movs	r0, #48	; 0x30
   1a72a:	9903      	ldr	r1, [sp, #12]
   1a72c:	47d0      	blx	sl
   1a72e:	2800      	cmp	r0, #0
   1a730:	dbe0      	blt.n	1a6f4 <z_cbvprintf_impl+0x6ac>
   1a732:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1a734:	9b05      	ldr	r3, [sp, #20]
   1a736:	b133      	cbz	r3, 1a746 <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
   1a738:	9903      	ldr	r1, [sp, #12]
   1a73a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1a73e:	47d0      	blx	sl
   1a740:	2800      	cmp	r0, #0
   1a742:	dbd7      	blt.n	1a6f4 <z_cbvprintf_impl+0x6ac>
   1a744:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1a746:	44ab      	add	fp, r5
   1a748:	e005      	b.n	1a756 <z_cbvprintf_impl+0x70e>
				OUTC('0');
   1a74a:	2030      	movs	r0, #48	; 0x30
   1a74c:	9903      	ldr	r1, [sp, #12]
   1a74e:	47d0      	blx	sl
   1a750:	2800      	cmp	r0, #0
   1a752:	dbcf      	blt.n	1a6f4 <z_cbvprintf_impl+0x6ac>
   1a754:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1a756:	ebab 0305 	sub.w	r3, fp, r5
   1a75a:	2b00      	cmp	r3, #0
   1a75c:	dcf5      	bgt.n	1a74a <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
   1a75e:	4643      	mov	r3, r8
   1a760:	463a      	mov	r2, r7
   1a762:	4650      	mov	r0, sl
   1a764:	9903      	ldr	r1, [sp, #12]
   1a766:	f00b fb5f 	bl	25e28 <outs>
   1a76a:	2800      	cmp	r0, #0
   1a76c:	dbc2      	blt.n	1a6f4 <z_cbvprintf_impl+0x6ac>
   1a76e:	4405      	add	r5, r0
		while (width > 0) {
   1a770:	44a9      	add	r9, r5
   1a772:	eba9 0305 	sub.w	r3, r9, r5
   1a776:	2b00      	cmp	r3, #0
   1a778:	f77f ae6e 	ble.w	1a458 <z_cbvprintf_impl+0x410>
			OUTC(' ');
   1a77c:	2020      	movs	r0, #32
   1a77e:	9903      	ldr	r1, [sp, #12]
   1a780:	47d0      	blx	sl
   1a782:	2800      	cmp	r0, #0
   1a784:	dbb6      	blt.n	1a6f4 <z_cbvprintf_impl+0x6ac>
   1a786:	3501      	adds	r5, #1
			--width;
   1a788:	e7f3      	b.n	1a772 <z_cbvprintf_impl+0x72a>
   1a78a:	bf00      	nop
   1a78c:	00029832 	.word	0x00029832

0001a790 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   1a790:	f04f 0220 	mov.w	r2, #32
   1a794:	f3ef 8311 	mrs	r3, BASEPRI
   1a798:	f382 8812 	msr	BASEPRI_MAX, r2
   1a79c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1a7a0:	2101      	movs	r1, #1
   1a7a2:	4a04      	ldr	r2, [pc, #16]	; (1a7b4 <nordicsemi_nrf91_init+0x24>)
   1a7a4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   1a7a8:	f383 8811 	msr	BASEPRI, r3
   1a7ac:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1a7b0:	2000      	movs	r0, #0
   1a7b2:	4770      	bx	lr
   1a7b4:	40039000 	.word	0x40039000

0001a7b8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1a7b8:	b120      	cbz	r0, 1a7c4 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1a7ba:	4b03      	ldr	r3, [pc, #12]	; (1a7c8 <arch_busy_wait+0x10>)
   1a7bc:	0180      	lsls	r0, r0, #6
   1a7be:	f043 0301 	orr.w	r3, r3, #1
   1a7c2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1a7c4:	4770      	bx	lr
   1a7c6:	bf00      	nop
   1a7c8:	00028ff0 	.word	0x00028ff0

0001a7cc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1a7cc:	f006 b884 	b.w	208d8 <SystemInit>

0001a7d0 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   1a7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a7d4:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
   1a7d6:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
   1a7d8:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1a7dc:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1a830 <activate_foreach_backend+0x60>
	while (mask_cpy) {
   1a7e0:	b914      	cbnz	r4, 1a7e8 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   1a7e2:	4638      	mov	r0, r7
   1a7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   1a7e8:	fa94 f5a4 	rbit	r5, r4
   1a7ec:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   1a7f0:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1a7f4:	012e      	lsls	r6, r5, #4
   1a7f6:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   1a7fa:	ea6f 0a03 	mvn.w	sl, r3
   1a7fe:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1a802:	7b2b      	ldrb	r3, [r5, #12]
   1a804:	2b00      	cmp	r3, #0
   1a806:	d0eb      	beq.n	1a7e0 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   1a808:	f858 3006 	ldr.w	r3, [r8, r6]
   1a80c:	691b      	ldr	r3, [r3, #16]
   1a80e:	b94b      	cbnz	r3, 1a824 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   1a810:	4446      	add	r6, r8
			log_backend_enable(backend,
   1a812:	6873      	ldr	r3, [r6, #4]
   1a814:	2204      	movs	r2, #4
   1a816:	4628      	mov	r0, r5
   1a818:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   1a81a:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   1a81e:	f000 fa49 	bl	1acb4 <log_backend_enable>
   1a822:	e7dd      	b.n	1a7e0 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   1a824:	4628      	mov	r0, r5
   1a826:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1a828:	2800      	cmp	r0, #0
   1a82a:	d1d9      	bne.n	1a7e0 <activate_foreach_backend+0x10>
   1a82c:	e7f0      	b.n	1a810 <activate_foreach_backend+0x40>
   1a82e:	bf00      	nop
   1a830:	00028fcc 	.word	0x00028fcc

0001a834 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1a834:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1a836:	2200      	movs	r2, #0
{
   1a838:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   1a83a:	490f      	ldr	r1, [pc, #60]	; (1a878 <enable_logger+0x44>)
   1a83c:	480f      	ldr	r0, [pc, #60]	; (1a87c <enable_logger+0x48>)
   1a83e:	f00d feb0 	bl	285a2 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a842:	2200      	movs	r2, #0
   1a844:	2300      	movs	r3, #0
   1a846:	2400      	movs	r4, #0
   1a848:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a84c:	230e      	movs	r3, #14
   1a84e:	4d0c      	ldr	r5, [pc, #48]	; (1a880 <enable_logger+0x4c>)
   1a850:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1a854:	f44f 7240 	mov.w	r2, #768	; 0x300
   1a858:	4628      	mov	r0, r5
   1a85a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1a85e:	4b09      	ldr	r3, [pc, #36]	; (1a884 <enable_logger+0x50>)
   1a860:	4909      	ldr	r1, [pc, #36]	; (1a888 <enable_logger+0x54>)
   1a862:	9400      	str	r4, [sp, #0]
   1a864:	f009 f9ee 	bl	23c44 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1a868:	4908      	ldr	r1, [pc, #32]	; (1a88c <enable_logger+0x58>)
   1a86a:	4628      	mov	r0, r5
   1a86c:	f00d fc3e 	bl	280ec <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   1a870:	4620      	mov	r0, r4
   1a872:	b009      	add	sp, #36	; 0x24
   1a874:	bd30      	pop	{r4, r5, pc}
   1a876:	bf00      	nop
   1a878:	0001a891 	.word	0x0001a891
   1a87c:	2000ce00 	.word	0x2000ce00
   1a880:	2000c970 	.word	0x2000c970
   1a884:	0001ab61 	.word	0x0001ab61
   1a888:	2000ddf8 	.word	0x2000ddf8
   1a88c:	00029837 	.word	0x00029837

0001a890 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1a890:	4801      	ldr	r0, [pc, #4]	; (1a898 <log_process_thread_timer_expiry_fn+0x8>)
   1a892:	f009 bb65 	b.w	23f60 <z_impl_k_sem_give>
   1a896:	bf00      	nop
   1a898:	2000c8dc 	.word	0x2000c8dc

0001a89c <z_log_init>:
{
   1a89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a8a0:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   1a8a2:	481f      	ldr	r0, [pc, #124]	; (1a920 <z_log_init+0x84>)
{
   1a8a4:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   1a8a6:	f00b fcf8 	bl	2629a <atomic_inc>
   1a8aa:	4606      	mov	r6, r0
   1a8ac:	2800      	cmp	r0, #0
   1a8ae:	d030      	beq.n	1a912 <z_log_init+0x76>
	uint32_t mask = 0;
   1a8b0:	2500      	movs	r5, #0
}
   1a8b2:	4628      	mov	r0, r5
   1a8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   1a8b8:	7b23      	ldrb	r3, [r4, #12]
   1a8ba:	b173      	cbz	r3, 1a8da <z_log_init+0x3e>
	if (backend->api->init) {
   1a8bc:	6823      	ldr	r3, [r4, #0]
   1a8be:	68db      	ldr	r3, [r3, #12]
   1a8c0:	b10b      	cbz	r3, 1a8c6 <z_log_init+0x2a>
		backend->api->init(backend);
   1a8c2:	4620      	mov	r0, r4
   1a8c4:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   1a8c6:	6823      	ldr	r3, [r4, #0]
   1a8c8:	691b      	ldr	r3, [r3, #16]
   1a8ca:	b9d3      	cbnz	r3, 1a902 <z_log_init+0x66>
				log_backend_enable(backend,
   1a8cc:	6863      	ldr	r3, [r4, #4]
   1a8ce:	2204      	movs	r2, #4
   1a8d0:	4620      	mov	r0, r4
   1a8d2:	6819      	ldr	r1, [r3, #0]
   1a8d4:	f000 f9ee 	bl	1acb4 <log_backend_enable>
			i++;
   1a8d8:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1a8da:	3410      	adds	r4, #16
   1a8dc:	454c      	cmp	r4, r9
   1a8de:	d3eb      	bcc.n	1a8b8 <z_log_init+0x1c>
	if (blocking) {
   1a8e0:	f1b8 0f00 	cmp.w	r8, #0
   1a8e4:	d0e5      	beq.n	1a8b2 <z_log_init+0x16>
		while (mask) {
   1a8e6:	2d00      	cmp	r5, #0
   1a8e8:	d0e2      	beq.n	1a8b0 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   1a8ea:	4628      	mov	r0, r5
   1a8ec:	f7ff ff70 	bl	1a7d0 <activate_foreach_backend>
   1a8f0:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   1a8f2:	2f00      	cmp	r7, #0
   1a8f4:	d0f7      	beq.n	1a8e6 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   1a8f6:	2100      	movs	r1, #0
   1a8f8:	f44f 70a4 	mov.w	r0, #328	; 0x148
   1a8fc:	f009 ff7a 	bl	247f4 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a900:	e7f1      	b.n	1a8e6 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   1a902:	4620      	mov	r0, r4
   1a904:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   1a906:	2800      	cmp	r0, #0
   1a908:	d0e0      	beq.n	1a8cc <z_log_init+0x30>
				mask |= BIT(i);
   1a90a:	fa0a f306 	lsl.w	r3, sl, r6
   1a90e:	431d      	orrs	r5, r3
   1a910:	e7e2      	b.n	1a8d8 <z_log_init+0x3c>
	uint32_t mask = 0;
   1a912:	4605      	mov	r5, r0
				mask |= BIT(i);
   1a914:	f04f 0a01 	mov.w	sl, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1a918:	4c02      	ldr	r4, [pc, #8]	; (1a924 <z_log_init+0x88>)
   1a91a:	f8df 900c 	ldr.w	r9, [pc, #12]	; 1a928 <z_log_init+0x8c>
   1a91e:	e7dd      	b.n	1a8dc <z_log_init+0x40>
   1a920:	2000d0e4 	.word	0x2000d0e4
   1a924:	00028fcc 	.word	0x00028fcc
   1a928:	00028fdc 	.word	0x00028fdc

0001a92c <log_format_func_t_get>:
}
   1a92c:	4b01      	ldr	r3, [pc, #4]	; (1a934 <log_format_func_t_get+0x8>)
   1a92e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a932:	4770      	bx	lr
   1a934:	00029020 	.word	0x00029020

0001a938 <log_set_timestamp_func>:
{
   1a938:	b508      	push	{r3, lr}
   1a93a:	4603      	mov	r3, r0
   1a93c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   1a93e:	b12b      	cbz	r3, 1a94c <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   1a940:	4a04      	ldr	r2, [pc, #16]	; (1a954 <log_set_timestamp_func+0x1c>)
   1a942:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   1a944:	f000 fc3e 	bl	1b1c4 <log_output_timestamp_freq_set>
	return 0;
   1a948:	2000      	movs	r0, #0
}
   1a94a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1a94c:	f06f 0015 	mvn.w	r0, #21
   1a950:	e7fb      	b.n	1a94a <log_set_timestamp_func+0x12>
   1a952:	bf00      	nop
   1a954:	2000c588 	.word	0x2000c588

0001a958 <z_log_notify_backend_enabled>:
{
   1a958:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   1a95a:	4c04      	ldr	r4, [pc, #16]	; (1a96c <z_log_notify_backend_enabled+0x14>)
   1a95c:	7823      	ldrb	r3, [r4, #0]
   1a95e:	b913      	cbnz	r3, 1a966 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   1a960:	4803      	ldr	r0, [pc, #12]	; (1a970 <z_log_notify_backend_enabled+0x18>)
   1a962:	f009 fafd 	bl	23f60 <z_impl_k_sem_give>
	backend_attached = true;
   1a966:	2301      	movs	r3, #1
   1a968:	7023      	strb	r3, [r4, #0]
}
   1a96a:	bd10      	pop	{r4, pc}
   1a96c:	2000d89a 	.word	0x2000d89a
   1a970:	2000c8dc 	.word	0x2000c8dc

0001a974 <z_log_dropped>:
{
   1a974:	b510      	push	{r4, lr}
   1a976:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   1a978:	4806      	ldr	r0, [pc, #24]	; (1a994 <z_log_dropped+0x20>)
   1a97a:	f00b fc8e 	bl	2629a <atomic_inc>
	if (buffered) {
   1a97e:	b13c      	cbz	r4, 1a990 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a980:	4b05      	ldr	r3, [pc, #20]	; (1a998 <z_log_dropped+0x24>)
   1a982:	e8d3 1fef 	ldaex	r1, [r3]
   1a986:	3901      	subs	r1, #1
   1a988:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1a98c:	2a00      	cmp	r2, #0
   1a98e:	d1f8      	bne.n	1a982 <z_log_dropped+0xe>
}
   1a990:	bd10      	pop	{r4, pc}
   1a992:	bf00      	nop
   1a994:	2000d0dc 	.word	0x2000d0dc
   1a998:	2000d0e0 	.word	0x2000d0e0

0001a99c <z_log_dropped_read_and_clear>:
}
   1a99c:	2000      	movs	r0, #0
   1a99e:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a9a0:	4b03      	ldr	r3, [pc, #12]	; (1a9b0 <z_log_dropped_read_and_clear+0x14>)
   1a9a2:	e8d3 0fef 	ldaex	r0, [r3]
   1a9a6:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1a9aa:	2a00      	cmp	r2, #0
   1a9ac:	d1f9      	bne.n	1a9a2 <z_log_dropped_read_and_clear+0x6>
   1a9ae:	4770      	bx	lr
   1a9b0:	2000d0dc 	.word	0x2000d0dc

0001a9b4 <dropped_notify>:
{
   1a9b4:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   1a9b6:	f7ff fff1 	bl	1a99c <z_log_dropped_read_and_clear>
   1a9ba:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1a9bc:	4c07      	ldr	r4, [pc, #28]	; (1a9dc <dropped_notify+0x28>)
   1a9be:	4e08      	ldr	r6, [pc, #32]	; (1a9e0 <dropped_notify+0x2c>)
   1a9c0:	42b4      	cmp	r4, r6
   1a9c2:	d300      	bcc.n	1a9c6 <dropped_notify+0x12>
}
   1a9c4:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1a9c6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1a9c8:	795b      	ldrb	r3, [r3, #5]
   1a9ca:	b12b      	cbz	r3, 1a9d8 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   1a9cc:	6823      	ldr	r3, [r4, #0]
   1a9ce:	685b      	ldr	r3, [r3, #4]
   1a9d0:	b113      	cbz	r3, 1a9d8 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   1a9d2:	4629      	mov	r1, r5
   1a9d4:	4620      	mov	r0, r4
   1a9d6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1a9d8:	3410      	adds	r4, #16
   1a9da:	e7f1      	b.n	1a9c0 <dropped_notify+0xc>
   1a9dc:	00028fcc 	.word	0x00028fcc
   1a9e0:	00028fdc 	.word	0x00028fdc

0001a9e4 <z_log_msg_init>:
{
   1a9e4:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   1a9e6:	4c04      	ldr	r4, [pc, #16]	; (1a9f8 <z_log_msg_init+0x14>)
   1a9e8:	4904      	ldr	r1, [pc, #16]	; (1a9fc <z_log_msg_init+0x18>)
   1a9ea:	4620      	mov	r0, r4
   1a9ec:	f00b fae0 	bl	25fb0 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   1a9f0:	4b03      	ldr	r3, [pc, #12]	; (1aa00 <z_log_msg_init+0x1c>)
   1a9f2:	601c      	str	r4, [r3, #0]
}
   1a9f4:	bd10      	pop	{r4, pc}
   1a9f6:	bf00      	nop
   1a9f8:	2000c7d0 	.word	0x2000c7d0
   1a9fc:	0002900c 	.word	0x0002900c
   1aa00:	2000d0d4 	.word	0x2000d0d4

0001aa04 <log_core_init>:
{
   1aa04:	b508      	push	{r3, lr}
	panic_mode = false;
   1aa06:	2300      	movs	r3, #0
   1aa08:	4a06      	ldr	r2, [pc, #24]	; (1aa24 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
   1aa0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
   1aa0e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   1aa10:	4a05      	ldr	r2, [pc, #20]	; (1aa28 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   1aa12:	4806      	ldr	r0, [pc, #24]	; (1aa2c <log_core_init+0x28>)
	dropped_cnt = 0;
   1aa14:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   1aa16:	f7ff ff8f 	bl	1a938 <log_set_timestamp_func>
}
   1aa1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   1aa1e:	f7ff bfe1 	b.w	1a9e4 <z_log_msg_init>
   1aa22:	bf00      	nop
   1aa24:	2000d89b 	.word	0x2000d89b
   1aa28:	2000d0dc 	.word	0x2000d0dc
   1aa2c:	00026297 	.word	0x00026297

0001aa30 <z_log_msg_alloc>:
{
   1aa30:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   1aa32:	2200      	movs	r2, #0
   1aa34:	2300      	movs	r3, #0
   1aa36:	4801      	ldr	r0, [pc, #4]	; (1aa3c <z_log_msg_alloc+0xc>)
   1aa38:	f00b badb 	b.w	25ff2 <mpsc_pbuf_alloc>
   1aa3c:	2000c7d0 	.word	0x2000c7d0

0001aa40 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   1aa40:	4801      	ldr	r0, [pc, #4]	; (1aa48 <z_log_msg_local_claim+0x8>)
   1aa42:	f00b bb74 	b.w	2612e <mpsc_pbuf_claim>
   1aa46:	bf00      	nop
   1aa48:	2000c7d0 	.word	0x2000c7d0

0001aa4c <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   1aa4c:	4b02      	ldr	r3, [pc, #8]	; (1aa58 <z_log_msg_free+0xc>)
{
   1aa4e:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   1aa50:	6818      	ldr	r0, [r3, #0]
   1aa52:	f00b bbbc 	b.w	261ce <mpsc_pbuf_free>
   1aa56:	bf00      	nop
   1aa58:	2000d0d4 	.word	0x2000d0d4

0001aa5c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   1aa5c:	4801      	ldr	r0, [pc, #4]	; (1aa64 <z_log_msg_pending+0x8>)
   1aa5e:	f00b bbea 	b.w	26236 <mpsc_pbuf_is_pending>
   1aa62:	bf00      	nop
   1aa64:	2000c7d0 	.word	0x2000c7d0

0001aa68 <z_impl_log_process>:
{
   1aa68:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   1aa6a:	4b26      	ldr	r3, [pc, #152]	; (1ab04 <z_impl_log_process+0x9c>)
   1aa6c:	7818      	ldrb	r0, [r3, #0]
   1aa6e:	2800      	cmp	r0, #0
   1aa70:	d047      	beq.n	1ab02 <z_impl_log_process+0x9a>
	return z_log_msg_local_claim();
   1aa72:	f7ff ffe5 	bl	1aa40 <z_log_msg_local_claim>
	if (msg) {
   1aa76:	4605      	mov	r5, r0
   1aa78:	b170      	cbz	r0, 1aa98 <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1aa7a:	4b23      	ldr	r3, [pc, #140]	; (1ab08 <z_impl_log_process+0xa0>)
   1aa7c:	e8d3 1fef 	ldaex	r1, [r3]
   1aa80:	3901      	subs	r1, #1
   1aa82:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1aa86:	2a00      	cmp	r2, #0
   1aa88:	d1f8      	bne.n	1aa7c <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1aa8a:	4c20      	ldr	r4, [pc, #128]	; (1ab0c <z_impl_log_process+0xa4>)
   1aa8c:	4e20      	ldr	r6, [pc, #128]	; (1ab10 <z_impl_log_process+0xa8>)
   1aa8e:	42b4      	cmp	r4, r6
   1aa90:	d32d      	bcc.n	1aaee <z_impl_log_process+0x86>
		z_log_msg_free(msg);
   1aa92:	4628      	mov	r0, r5
   1aa94:	f7ff ffda 	bl	1aa4c <z_log_msg_free>
	return dropped_cnt > 0;
   1aa98:	4b1e      	ldr	r3, [pc, #120]	; (1ab14 <z_impl_log_process+0xac>)
   1aa9a:	4c1f      	ldr	r4, [pc, #124]	; (1ab18 <z_impl_log_process+0xb0>)
		if ((dropped_pend || unordered_pend) &&
   1aa9c:	681b      	ldr	r3, [r3, #0]
   1aa9e:	2b00      	cmp	r3, #0
   1aaa0:	dd19      	ble.n	1aad6 <z_impl_log_process+0x6e>
	return z_impl_k_uptime_ticks();
   1aaa2:	f00d fd56 	bl	28552 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1aaa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1aaaa:	fba0 0302 	umull	r0, r3, r0, r2
   1aaae:	fb02 3101 	mla	r1, r2, r1, r3
   1aab2:	0bc3      	lsrs	r3, r0, #15
   1aab4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   1aab8:	e9d4 2000 	ldrd	r2, r0, [r4]
   1aabc:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
   1aabe:	f240 32e9 	movw	r2, #1001	; 0x3e9
   1aac2:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   1aac6:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   1aaca:	4293      	cmp	r3, r2
   1aacc:	f171 0100 	sbcs.w	r1, r1, #0
   1aad0:	d301      	bcc.n	1aad6 <z_impl_log_process+0x6e>
				dropped_notify();
   1aad2:	f7ff ff6f 	bl	1a9b4 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   1aad6:	e9d4 3200 	ldrd	r3, r2, [r4]
   1aada:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   1aade:	f142 0200 	adc.w	r2, r2, #0
   1aae2:	e9c4 3200 	strd	r3, r2, [r4]
}
   1aae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   1aaea:	f7ff bfb7 	b.w	1aa5c <z_log_msg_pending>
	return backend->cb->active;
   1aaee:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   1aaf0:	795b      	ldrb	r3, [r3, #5]
   1aaf2:	b123      	cbz	r3, 1aafe <z_impl_log_process+0x96>
	backend->api->process(backend, msg);
   1aaf4:	6823      	ldr	r3, [r4, #0]
   1aaf6:	4629      	mov	r1, r5
   1aaf8:	4620      	mov	r0, r4
   1aafa:	681b      	ldr	r3, [r3, #0]
   1aafc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1aafe:	3410      	adds	r4, #16
   1ab00:	e7c5      	b.n	1aa8e <z_impl_log_process+0x26>
}
   1ab02:	bd70      	pop	{r4, r5, r6, pc}
   1ab04:	2000d89a 	.word	0x2000d89a
   1ab08:	2000d0e0 	.word	0x2000d0e0
   1ab0c:	00028fcc 	.word	0x00028fcc
   1ab10:	00028fdc 	.word	0x00028fdc
   1ab14:	2000d0dc 	.word	0x2000d0dc
   1ab18:	2000cdf8 	.word	0x2000cdf8

0001ab1c <z_impl_log_panic>:
{
   1ab1c:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   1ab1e:	4d0d      	ldr	r5, [pc, #52]	; (1ab54 <z_impl_log_panic+0x38>)
   1ab20:	7829      	ldrb	r1, [r5, #0]
   1ab22:	b961      	cbnz	r1, 1ab3e <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   1ab24:	2001      	movs	r0, #1
   1ab26:	f7ff feb9 	bl	1a89c <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1ab2a:	4c0b      	ldr	r4, [pc, #44]	; (1ab58 <z_impl_log_panic+0x3c>)
   1ab2c:	4e0b      	ldr	r6, [pc, #44]	; (1ab5c <z_impl_log_panic+0x40>)
   1ab2e:	42b4      	cmp	r4, r6
   1ab30:	d306      	bcc.n	1ab40 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   1ab32:	f7ff ff99 	bl	1aa68 <z_impl_log_process>
		while (log_process() == true) {
   1ab36:	2800      	cmp	r0, #0
   1ab38:	d1fb      	bne.n	1ab32 <z_impl_log_panic+0x16>
	panic_mode = true;
   1ab3a:	2301      	movs	r3, #1
   1ab3c:	702b      	strb	r3, [r5, #0]
}
   1ab3e:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   1ab40:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1ab42:	795b      	ldrb	r3, [r3, #5]
   1ab44:	b11b      	cbz	r3, 1ab4e <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   1ab46:	6823      	ldr	r3, [r4, #0]
   1ab48:	4620      	mov	r0, r4
   1ab4a:	689b      	ldr	r3, [r3, #8]
   1ab4c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1ab4e:	3410      	adds	r4, #16
   1ab50:	e7ed      	b.n	1ab2e <z_impl_log_panic+0x12>
   1ab52:	bf00      	nop
   1ab54:	2000d89b 	.word	0x2000d89b
   1ab58:	00028fcc 	.word	0x00028fcc
   1ab5c:	00028fdc 	.word	0x00028fdc

0001ab60 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   1ab60:	2100      	movs	r1, #0
{
   1ab62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   1ab66:	4608      	mov	r0, r1
   1ab68:	f7ff fe98 	bl	1a89c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1ab6c:	4604      	mov	r4, r0
   1ab6e:	b348      	cbz	r0, 1abc4 <log_process_thread_func+0x64>
   1ab70:	f240 6867 	movw	r8, #1639	; 0x667
   1ab74:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   1ab78:	f009 fe56 	bl	24828 <z_impl_z_current_get>
	proc_tid = process_tid;
   1ab7c:	4b1a      	ldr	r3, [pc, #104]	; (1abe8 <log_process_thread_func+0x88>)
   1ab7e:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1ab80:	b130      	cbz	r0, 1ab90 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   1ab82:	4b1a      	ldr	r3, [pc, #104]	; (1abec <log_process_thread_func+0x8c>)
	    process_tid &&
   1ab84:	681b      	ldr	r3, [r3, #0]
   1ab86:	2b09      	cmp	r3, #9
   1ab88:	dd02      	ble.n	1ab90 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   1ab8a:	4819      	ldr	r0, [pc, #100]	; (1abf0 <log_process_thread_func+0x90>)
   1ab8c:	f009 f9e8 	bl	23f60 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1ab90:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1ab92:	4f18      	ldr	r7, [pc, #96]	; (1abf4 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   1ab94:	f8df a058 	ldr.w	sl, [pc, #88]	; 1abf0 <log_process_thread_func+0x90>
		if (activate_mask) {
   1ab98:	b144      	cbz	r4, 1abac <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   1ab9a:	4620      	mov	r0, r4
   1ab9c:	f7ff fe18 	bl	1a7d0 <activate_foreach_backend>
			if (!activate_mask) {
   1aba0:	4604      	mov	r4, r0
   1aba2:	b918      	cbnz	r0, 1abac <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   1aba4:	f04f 38ff 	mov.w	r8, #4294967295
   1aba8:	f04f 39ff 	mov.w	r9, #4294967295
   1abac:	f7ff ff5c 	bl	1aa68 <z_impl_log_process>
		if (log_process() == false) {
   1abb0:	4606      	mov	r6, r0
   1abb2:	b928      	cbnz	r0, 1abc0 <log_process_thread_func+0x60>
			if (processed_any) {
   1abb4:	b9b5      	cbnz	r5, 1abe4 <log_process_thread_func+0x84>
   1abb6:	4642      	mov	r2, r8
   1abb8:	464b      	mov	r3, r9
   1abba:	4650      	mov	r0, sl
   1abbc:	f009 f9f6 	bl	23fac <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1abc0:	4635      	mov	r5, r6
   1abc2:	e7e9      	b.n	1ab98 <log_process_thread_func+0x38>
   1abc4:	f04f 38ff 	mov.w	r8, #4294967295
   1abc8:	f04f 39ff 	mov.w	r9, #4294967295
   1abcc:	e7d4      	b.n	1ab78 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   1abce:	682b      	ldr	r3, [r5, #0]
   1abd0:	699b      	ldr	r3, [r3, #24]
   1abd2:	b11b      	cbz	r3, 1abdc <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   1abd4:	2200      	movs	r2, #0
   1abd6:	4628      	mov	r0, r5
   1abd8:	4611      	mov	r1, r2
   1abda:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1abdc:	3510      	adds	r5, #16
   1abde:	42bd      	cmp	r5, r7
   1abe0:	d3f5      	bcc.n	1abce <log_process_thread_func+0x6e>
   1abe2:	e7e8      	b.n	1abb6 <log_process_thread_func+0x56>
   1abe4:	4d04      	ldr	r5, [pc, #16]	; (1abf8 <log_process_thread_func+0x98>)
   1abe6:	e7fa      	b.n	1abde <log_process_thread_func+0x7e>
   1abe8:	2000d0d8 	.word	0x2000d0d8
   1abec:	2000d0e0 	.word	0x2000d0e0
   1abf0:	2000c8dc 	.word	0x2000c8dc
   1abf4:	00028fdc 	.word	0x00028fdc
   1abf8:	00028fcc 	.word	0x00028fcc

0001abfc <z_log_msg_post_finalize>:
{
   1abfc:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   1abfe:	4818      	ldr	r0, [pc, #96]	; (1ac60 <z_log_msg_post_finalize+0x64>)
   1ac00:	f00b fb4b 	bl	2629a <atomic_inc>
	if (panic_mode) {
   1ac04:	4b17      	ldr	r3, [pc, #92]	; (1ac64 <z_log_msg_post_finalize+0x68>)
   1ac06:	781b      	ldrb	r3, [r3, #0]
   1ac08:	b17b      	cbz	r3, 1ac2a <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
   1ac0a:	f04f 0320 	mov.w	r3, #32
   1ac0e:	f3ef 8411 	mrs	r4, BASEPRI
   1ac12:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac16:	f3bf 8f6f 	isb	sy
   1ac1a:	f7ff ff25 	bl	1aa68 <z_impl_log_process>
	__asm__ volatile(
   1ac1e:	f384 8811 	msr	BASEPRI, r4
   1ac22:	f3bf 8f6f 	isb	sy
}
   1ac26:	b002      	add	sp, #8
   1ac28:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   1ac2a:	4b0f      	ldr	r3, [pc, #60]	; (1ac68 <z_log_msg_post_finalize+0x6c>)
   1ac2c:	681b      	ldr	r3, [r3, #0]
   1ac2e:	2b00      	cmp	r3, #0
   1ac30:	d0f9      	beq.n	1ac26 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   1ac32:	b950      	cbnz	r0, 1ac4a <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   1ac34:	2200      	movs	r2, #0
   1ac36:	2300      	movs	r3, #0
   1ac38:	480c      	ldr	r0, [pc, #48]	; (1ac6c <z_log_msg_post_finalize+0x70>)
   1ac3a:	e9cd 2300 	strd	r2, r3, [sp]
   1ac3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1ac42:	2300      	movs	r3, #0
   1ac44:	f00a f82e 	bl	24ca4 <z_impl_k_timer_start>
   1ac48:	e7ed      	b.n	1ac26 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1ac4a:	280a      	cmp	r0, #10
   1ac4c:	d1eb      	bne.n	1ac26 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   1ac4e:	4807      	ldr	r0, [pc, #28]	; (1ac6c <z_log_msg_post_finalize+0x70>)
   1ac50:	f00d fcb3 	bl	285ba <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1ac54:	4806      	ldr	r0, [pc, #24]	; (1ac70 <z_log_msg_post_finalize+0x74>)
}
   1ac56:	b002      	add	sp, #8
   1ac58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ac5c:	f009 b980 	b.w	23f60 <z_impl_k_sem_give>
   1ac60:	2000d0e0 	.word	0x2000d0e0
   1ac64:	2000d89b 	.word	0x2000d89b
   1ac68:	2000d0d8 	.word	0x2000d0d8
   1ac6c:	2000ce00 	.word	0x2000ce00
   1ac70:	2000c8dc 	.word	0x2000c8dc

0001ac74 <z_log_msg_commit>:
{
   1ac74:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   1ac76:	4b06      	ldr	r3, [pc, #24]	; (1ac90 <z_log_msg_commit+0x1c>)
{
   1ac78:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1ac7a:	681b      	ldr	r3, [r3, #0]
   1ac7c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   1ac7e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   1ac80:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   1ac82:	4804      	ldr	r0, [pc, #16]	; (1ac94 <z_log_msg_commit+0x20>)
   1ac84:	f00b fa33 	bl	260ee <mpsc_pbuf_commit>
}
   1ac88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   1ac8c:	f7ff bfb6 	b.w	1abfc <z_log_msg_post_finalize>
   1ac90:	2000c588 	.word	0x2000c588
   1ac94:	2000c7d0 	.word	0x2000c7d0

0001ac98 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   1ac98:	4a04      	ldr	r2, [pc, #16]	; (1acac <log_source_name_get+0x14>)
   1ac9a:	4b05      	ldr	r3, [pc, #20]	; (1acb0 <log_source_name_get+0x18>)
   1ac9c:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   1ac9e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   1aca2:	bf34      	ite	cc
   1aca4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   1aca8:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   1acaa:	4770      	bx	lr
   1acac:	00028e94 	.word	0x00028e94
   1acb0:	00028fcc 	.word	0x00028fcc

0001acb4 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1acb4:	4b08      	ldr	r3, [pc, #32]	; (1acd8 <log_backend_enable+0x24>)
{
   1acb6:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   1acb8:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
   1acba:	6844      	ldr	r4, [r0, #4]
   1acbc:	111b      	asrs	r3, r3, #4
   1acbe:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   1acc0:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   1acc2:	6843      	ldr	r3, [r0, #4]
   1acc4:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
   1acc6:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   1acc8:	6843      	ldr	r3, [r0, #4]
   1acca:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   1accc:	6843      	ldr	r3, [r0, #4]
   1acce:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   1acd0:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
   1acd2:	f7ff be41 	b.w	1a958 <z_log_notify_backend_enabled>
   1acd6:	bf00      	nop
   1acd8:	00028fcc 	.word	0x00028fcc

0001acdc <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   1acdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1ace0:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   1ace4:	b08f      	sub	sp, #60	; 0x3c
   1ace6:	f3c1 2649 	ubfx	r6, r1, #9, #10
   1acea:	460d      	mov	r5, r1
   1acec:	4690      	mov	r8, r2
   1acee:	4699      	mov	r9, r3
   1acf0:	9005      	str	r0, [sp, #20]
   1acf2:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   1acf4:	2e00      	cmp	r6, #0
   1acf6:	d03c      	beq.n	1ad72 <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
   1acf8:	f04f 0b04 	mov.w	fp, #4
   1acfc:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
   1ad00:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
   1ad02:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   1ad04:	4631      	mov	r1, r6
   1ad06:	ab0b      	add	r3, sp, #44	; 0x2c
   1ad08:	4640      	mov	r0, r8
   1ad0a:	f8cd b008 	str.w	fp, [sp, #8]
   1ad0e:	9701      	str	r7, [sp, #4]
   1ad10:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
   1ad14:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
   1ad18:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   1ad1a:	9607      	str	r6, [sp, #28]
   1ad1c:	f7fe fdc2 	bl	198a4 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   1ad20:	f3c0 0309 	ubfx	r3, r0, #0, #10
   1ad24:	1918      	adds	r0, r3, r4
   1ad26:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1ad2a:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   1ad2c:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1ad2e:	f363 2552 	bfi	r5, r3, #9, #10
   1ad32:	9306      	str	r3, [sp, #24]
   1ad34:	f7ff fe7c 	bl	1aa30 <z_log_msg_alloc>
		if (msg) {
   1ad38:	4604      	mov	r4, r0
   1ad3a:	b178      	cbz	r0, 1ad5c <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
   1ad3c:	2200      	movs	r2, #0
   1ad3e:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   1ad40:	3010      	adds	r0, #16
   1ad42:	900b      	str	r0, [sp, #44]	; 0x2c
   1ad44:	930c      	str	r3, [sp, #48]	; 0x30
   1ad46:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   1ad48:	4640      	mov	r0, r8
   1ad4a:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   1ad4e:	4a0c      	ldr	r2, [pc, #48]	; (1ad80 <z_impl_z_log_msg_static_create+0xa4>)
   1ad50:	9907      	ldr	r1, [sp, #28]
   1ad52:	f8cd a000 	str.w	sl, [sp]
   1ad56:	ab0b      	add	r3, sp, #44	; 0x2c
   1ad58:	f7fe fda4 	bl	198a4 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   1ad5c:	f366 2552 	bfi	r5, r6, #9, #10
   1ad60:	464b      	mov	r3, r9
   1ad62:	462a      	mov	r2, r5
   1ad64:	4620      	mov	r0, r4
   1ad66:	9905      	ldr	r1, [sp, #20]
}
   1ad68:	b00f      	add	sp, #60	; 0x3c
   1ad6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   1ad6e:	f00b bac6 	b.w	262fe <z_log_msg_finalize>
   1ad72:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1ad76:	0880      	lsrs	r0, r0, #2
   1ad78:	f7ff fe5a 	bl	1aa30 <z_log_msg_alloc>
   1ad7c:	4604      	mov	r4, r0
   1ad7e:	e7ed      	b.n	1ad5c <z_impl_z_log_msg_static_create+0x80>
   1ad80:	000262d3 	.word	0x000262d3

0001ad84 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   1ad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad88:	b087      	sub	sp, #28
   1ad8a:	4604      	mov	r4, r0
   1ad8c:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   1ad90:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   1ad94:	460f      	mov	r7, r1
   1ad96:	4693      	mov	fp, r2
   1ad98:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   1ad9a:	b3b6      	cbz	r6, 1ae0a <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   1ad9c:	2110      	movs	r1, #16
   1ad9e:	4633      	mov	r3, r6
   1ada0:	4652      	mov	r2, sl
   1ada2:	2000      	movs	r0, #0
   1ada4:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
   1ada8:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   1adac:	f7fe fba6 	bl	194fc <cbvprintf_package>
   1adb0:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   1adb2:	4b17      	ldr	r3, [pc, #92]	; (1ae10 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
   1adb4:	f004 0407 	and.w	r4, r4, #7
   1adb8:	f00b 0b07 	and.w	fp, fp, #7
   1adbc:	00e4      	lsls	r4, r4, #3
   1adbe:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1adc2:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
   1adc6:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
   1adca:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1adcc:	4408      	add	r0, r1
	struct log_msg_desc desc =
   1adce:	4b11      	ldr	r3, [pc, #68]	; (1ae14 <z_impl_z_log_msg_runtime_vcreate+0x90>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1add0:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   1add4:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   1add8:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   1adda:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1addc:	9103      	str	r1, [sp, #12]
		msg = z_log_msg_alloc(msg_wlen);
   1adde:	f7ff fe27 	bl	1aa30 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   1ade2:	4605      	mov	r5, r0
   1ade4:	b140      	cbz	r0, 1adf8 <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   1ade6:	b13e      	cbz	r6, 1adf8 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   1ade8:	4633      	mov	r3, r6
   1adea:	4652      	mov	r2, sl
   1adec:	9903      	ldr	r1, [sp, #12]
   1adee:	f8cd 9000 	str.w	r9, [sp]
   1adf2:	3010      	adds	r0, #16
   1adf4:	f7fe fb82 	bl	194fc <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   1adf8:	4643      	mov	r3, r8
   1adfa:	4622      	mov	r2, r4
   1adfc:	4639      	mov	r1, r7
   1adfe:	4628      	mov	r0, r5
	}
}
   1ae00:	b007      	add	sp, #28
   1ae02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   1ae06:	f00b ba7a 	b.w	262fe <z_log_msg_finalize>
		plen = 0;
   1ae0a:	4631      	mov	r1, r6
   1ae0c:	e7d1      	b.n	1adb2 <z_impl_z_log_msg_runtime_vcreate+0x2e>
   1ae0e:	bf00      	nop
   1ae10:	0007fe00 	.word	0x0007fe00
   1ae14:	7ff80000 	.word	0x7ff80000

0001ae18 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1ae18:	b40e      	push	{r1, r2, r3}
   1ae1a:	b503      	push	{r0, r1, lr}
   1ae1c:	ab03      	add	r3, sp, #12
   1ae1e:	f853 2b04 	ldr.w	r2, [r3], #4
   1ae22:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1ae24:	4804      	ldr	r0, [pc, #16]	; (1ae38 <print_formatted+0x20>)
	va_start(args, fmt);
   1ae26:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1ae28:	f00b fa90 	bl	2634c <cbvprintf>
	va_end(args);

	return length;
}
   1ae2c:	b002      	add	sp, #8
   1ae2e:	f85d eb04 	ldr.w	lr, [sp], #4
   1ae32:	b003      	add	sp, #12
   1ae34:	4770      	bx	lr
   1ae36:	bf00      	nop
   1ae38:	00026375 	.word	0x00026375

0001ae3c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1ae3c:	06ca      	lsls	r2, r1, #27
   1ae3e:	d405      	bmi.n	1ae4c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1ae40:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   1ae42:	bf4c      	ite	mi
   1ae44:	4902      	ldrmi	r1, [pc, #8]	; (1ae50 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   1ae46:	4903      	ldrpl	r1, [pc, #12]	; (1ae54 <newline_print+0x18>)
   1ae48:	f7ff bfe6 	b.w	1ae18 <print_formatted>
	}
}
   1ae4c:	4770      	bx	lr
   1ae4e:	bf00      	nop
   1ae50:	0002b2b0 	.word	0x0002b2b0
   1ae54:	0002b2af 	.word	0x0002b2af

0001ae58 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   1ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae5c:	b089      	sub	sp, #36	; 0x24
   1ae5e:	469a      	mov	sl, r3
   1ae60:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
   1ae64:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
   1ae68:	9305      	str	r3, [sp, #20]
   1ae6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ae6c:	4604      	mov	r4, r0
   1ae6e:	460d      	mov	r5, r1
   1ae70:	9e16      	ldr	r6, [sp, #88]	; 0x58
   1ae72:	9206      	str	r2, [sp, #24]
   1ae74:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   1ae76:	f1bb 0f00 	cmp.w	fp, #0
   1ae7a:	f000 8085 	beq.w	1af88 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1ae7e:	f006 0308 	and.w	r3, r6, #8
   1ae82:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   1ae84:	f00b fa23 	bl	262ce <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   1ae88:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
   1ae8c:	4602      	mov	r2, r0
   1ae8e:	2800      	cmp	r0, #0
   1ae90:	d049      	beq.n	1af26 <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
   1ae92:	4620      	mov	r0, r4
   1ae94:	4985      	ldr	r1, [pc, #532]	; (1b0ac <log_output_process+0x254>)
   1ae96:	f7ff ffbf 	bl	1ae18 <print_formatted>
   1ae9a:	4680      	mov	r8, r0
	if (stamp) {
   1ae9c:	f1b9 0f00 	cmp.w	r9, #0
   1aea0:	d008      	beq.n	1aeb4 <log_output_process+0x5c>
	if (!format) {
   1aea2:	f016 0f44 	tst.w	r6, #68	; 0x44
   1aea6:	d140      	bne.n	1af2a <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
   1aea8:	462a      	mov	r2, r5
   1aeaa:	4620      	mov	r0, r4
   1aeac:	4980      	ldr	r1, [pc, #512]	; (1b0b0 <log_output_process+0x258>)
   1aeae:	f7ff ffb3 	bl	1ae18 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   1aeb2:	4480      	add	r8, r0
	if (color) {
   1aeb4:	f006 0301 	and.w	r3, r6, #1
   1aeb8:	b153      	cbz	r3, 1aed0 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
   1aeba:	4b7e      	ldr	r3, [pc, #504]	; (1b0b4 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
   1aebc:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
   1aebe:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
   1aec2:	4b7d      	ldr	r3, [pc, #500]	; (1b0b8 <log_output_process+0x260>)
   1aec4:	497d      	ldr	r1, [pc, #500]	; (1b0bc <log_output_process+0x264>)
   1aec6:	2a00      	cmp	r2, #0
   1aec8:	bf08      	it	eq
   1aeca:	461a      	moveq	r2, r3
   1aecc:	f7ff ffa4 	bl	1ae18 <print_formatted>
	if (level_on) {
   1aed0:	f006 0308 	and.w	r3, r6, #8
   1aed4:	2b00      	cmp	r3, #0
   1aed6:	d054      	beq.n	1af82 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
   1aed8:	4b79      	ldr	r3, [pc, #484]	; (1b0c0 <log_output_process+0x268>)
   1aeda:	4620      	mov	r0, r4
   1aedc:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
   1aee0:	4978      	ldr	r1, [pc, #480]	; (1b0c4 <log_output_process+0x26c>)
   1aee2:	f7ff ff99 	bl	1ae18 <print_formatted>
   1aee6:	4605      	mov	r5, r0
	if (domain) {
   1aee8:	9b06      	ldr	r3, [sp, #24]
   1aeea:	b12b      	cbz	r3, 1aef8 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
   1aeec:	461a      	mov	r2, r3
   1aeee:	4620      	mov	r0, r4
   1aef0:	4975      	ldr	r1, [pc, #468]	; (1b0c8 <log_output_process+0x270>)
   1aef2:	f7ff ff91 	bl	1ae18 <print_formatted>
   1aef6:	4405      	add	r5, r0
	if (source) {
   1aef8:	f1ba 0f00 	cmp.w	sl, #0
   1aefc:	d005      	beq.n	1af0a <log_output_process+0xb2>
		total += print_formatted(output,
   1aefe:	4652      	mov	r2, sl
   1af00:	4620      	mov	r0, r4
   1af02:	4972      	ldr	r1, [pc, #456]	; (1b0cc <log_output_process+0x274>)
   1af04:	f7ff ff88 	bl	1ae18 <print_formatted>
   1af08:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   1af0a:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   1af0c:	2f00      	cmp	r7, #0
   1af0e:	d149      	bne.n	1afa4 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   1af10:	9b04      	ldr	r3, [sp, #16]
   1af12:	2b00      	cmp	r3, #0
   1af14:	d14f      	bne.n	1afb6 <log_output_process+0x15e>
	if (color) {
   1af16:	07f3      	lsls	r3, r6, #31
   1af18:	f100 80c1 	bmi.w	1b09e <log_output_process+0x246>
	newline_print(output, flags);
   1af1c:	4631      	mov	r1, r6
   1af1e:	4620      	mov	r0, r4
   1af20:	f7ff ff8c 	bl	1ae3c <newline_print>
}
   1af24:	e0b5      	b.n	1b092 <log_output_process+0x23a>
	uint32_t length = 0U;
   1af26:	4680      	mov	r8, r0
   1af28:	e7b8      	b.n	1ae9c <log_output_process+0x44>
	} else if (freq != 0U) {
   1af2a:	4b69      	ldr	r3, [pc, #420]	; (1b0d0 <log_output_process+0x278>)
   1af2c:	6818      	ldr	r0, [r3, #0]
   1af2e:	2800      	cmp	r0, #0
   1af30:	d0bf      	beq.n	1aeb2 <log_output_process+0x5a>
		timestamp /= timestamp_div;
   1af32:	4b68      	ldr	r3, [pc, #416]	; (1b0d4 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   1af34:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
   1af38:	681b      	ldr	r3, [r3, #0]
   1af3a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1af3e:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   1af42:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   1af46:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
   1af4a:	fb09 f505 	mul.w	r5, r9, r5
   1af4e:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1af52:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
   1af56:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   1af5a:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1af5e:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
   1af62:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1af66:	fb09 f505 	mul.w	r5, r9, r5
   1af6a:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   1af6e:	fb0c 1113 	mls	r1, ip, r3, r1
   1af72:	4620      	mov	r0, r4
   1af74:	9100      	str	r1, [sp, #0]
   1af76:	e9cd e501 	strd	lr, r5, [sp, #4]
   1af7a:	4957      	ldr	r1, [pc, #348]	; (1b0d8 <log_output_process+0x280>)
   1af7c:	f7ff ff4c 	bl	1ae18 <print_formatted>
   1af80:	e797      	b.n	1aeb2 <log_output_process+0x5a>
	int total = 0;
   1af82:	f006 0508 	and.w	r5, r6, #8
   1af86:	e7af      	b.n	1aee8 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1af88:	f1ba 0f01 	cmp.w	sl, #1
   1af8c:	d106      	bne.n	1af9c <log_output_process+0x144>
	if (package) {
   1af8e:	2f00      	cmp	r7, #0
   1af90:	d165      	bne.n	1b05e <log_output_process+0x206>
	if (data_len) {
   1af92:	9b04      	ldr	r3, [sp, #16]
   1af94:	2b00      	cmp	r3, #0
   1af96:	d07c      	beq.n	1b092 <log_output_process+0x23a>
		prefix_offset = 0;
   1af98:	2500      	movs	r5, #0
   1af9a:	e00c      	b.n	1afb6 <log_output_process+0x15e>
	if (package) {
   1af9c:	2f00      	cmp	r7, #0
   1af9e:	d0f8      	beq.n	1af92 <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1afa0:	484e      	ldr	r0, [pc, #312]	; (1b0dc <log_output_process+0x284>)
   1afa2:	e05d      	b.n	1b060 <log_output_process+0x208>
		cb = out_func;
   1afa4:	484e      	ldr	r0, [pc, #312]	; (1b0e0 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   1afa6:	463b      	mov	r3, r7
   1afa8:	4622      	mov	r2, r4
   1afaa:	494e      	ldr	r1, [pc, #312]	; (1b0e4 <log_output_process+0x28c>)
   1afac:	f00a fbf1 	bl	25792 <cbpprintf_external>
	if (data_len) {
   1afb0:	9b04      	ldr	r3, [sp, #16]
   1afb2:	2b00      	cmp	r3, #0
   1afb4:	d069      	beq.n	1b08a <log_output_process+0x232>
		print_formatted(output, " ");
   1afb6:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1b0e8 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
   1afba:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1b0ec <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1afbe:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
   1afc0:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1afc2:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   1afc4:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1afc6:	bf28      	it	cs
   1afc8:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
   1afca:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
   1afce:	f7ff ff35 	bl	1ae3c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   1afd2:	4555      	cmp	r5, sl
   1afd4:	dc46      	bgt.n	1b064 <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
   1afd6:	9b05      	ldr	r3, [sp, #20]
   1afd8:	4649      	mov	r1, r9
   1afda:	4620      	mov	r0, r4
   1afdc:	781a      	ldrb	r2, [r3, #0]
   1afde:	f7ff ff1b 	bl	1ae18 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1afe2:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
   1afe6:	f01a 0f07 	tst.w	sl, #7
   1afea:	d103      	bne.n	1aff4 <log_output_process+0x19c>
			print_formatted(output, " ");
   1afec:	4641      	mov	r1, r8
   1afee:	4620      	mov	r0, r4
   1aff0:	f7ff ff12 	bl	1ae18 <print_formatted>
		if (i < length) {
   1aff4:	4557      	cmp	r7, sl
   1aff6:	d93c      	bls.n	1b072 <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
   1aff8:	9b05      	ldr	r3, [sp, #20]
   1affa:	4649      	mov	r1, r9
   1affc:	4620      	mov	r0, r4
   1affe:	f813 200a 	ldrb.w	r2, [r3, sl]
   1b002:	f7ff ff09 	bl	1ae18 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b006:	f10a 0a01 	add.w	sl, sl, #1
   1b00a:	f1ba 0f10 	cmp.w	sl, #16
   1b00e:	d1ea      	bne.n	1afe6 <log_output_process+0x18e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b010:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
   1b014:	4620      	mov	r0, r4
   1b016:	4936      	ldr	r1, [pc, #216]	; (1b0f0 <log_output_process+0x298>)
   1b018:	f7ff fefe 	bl	1ae18 <print_formatted>
		if (i < length) {
   1b01c:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
   1b01e:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
   1b020:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
   1b022:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
   1b024:	4b33      	ldr	r3, [pc, #204]	; (1b0f4 <log_output_process+0x29c>)
   1b026:	5c99      	ldrb	r1, [r3, r2]
   1b028:	f011 0f97 	tst.w	r1, #151	; 0x97
   1b02c:	bf08      	it	eq
   1b02e:	222e      	moveq	r2, #46	; 0x2e
   1b030:	4931      	ldr	r1, [pc, #196]	; (1b0f8 <log_output_process+0x2a0>)
   1b032:	f7ff fef1 	bl	1ae18 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b036:	f10a 0a01 	add.w	sl, sl, #1
   1b03a:	f1ba 0f10 	cmp.w	sl, #16
   1b03e:	d01d      	beq.n	1b07c <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
   1b040:	f01a 0f07 	tst.w	sl, #7
   1b044:	d103      	bne.n	1b04e <log_output_process+0x1f6>
			print_formatted(output, " ");
   1b046:	4641      	mov	r1, r8
   1b048:	4620      	mov	r0, r4
   1b04a:	f7ff fee5 	bl	1ae18 <print_formatted>
		if (i < length) {
   1b04e:	4557      	cmp	r7, sl
   1b050:	4652      	mov	r2, sl
   1b052:	d8e4      	bhi.n	1b01e <log_output_process+0x1c6>
			print_formatted(output, " ");
   1b054:	4641      	mov	r1, r8
   1b056:	4620      	mov	r0, r4
   1b058:	f7ff fede 	bl	1ae18 <print_formatted>
   1b05c:	e7eb      	b.n	1b036 <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1b05e:	4820      	ldr	r0, [pc, #128]	; (1b0e0 <log_output_process+0x288>)
		prefix_offset = 0;
   1b060:	465d      	mov	r5, fp
   1b062:	e7a0      	b.n	1afa6 <log_output_process+0x14e>
		print_formatted(output, " ");
   1b064:	4641      	mov	r1, r8
   1b066:	4620      	mov	r0, r4
   1b068:	f7ff fed6 	bl	1ae18 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1b06c:	f10a 0a01 	add.w	sl, sl, #1
   1b070:	e7af      	b.n	1afd2 <log_output_process+0x17a>
			print_formatted(output, "   ");
   1b072:	4620      	mov	r0, r4
   1b074:	4921      	ldr	r1, [pc, #132]	; (1b0fc <log_output_process+0x2a4>)
   1b076:	f7ff fecf 	bl	1ae18 <print_formatted>
   1b07a:	e7c4      	b.n	1b006 <log_output_process+0x1ae>
		data += length;
   1b07c:	9b05      	ldr	r3, [sp, #20]
   1b07e:	443b      	add	r3, r7
   1b080:	9305      	str	r3, [sp, #20]
	} while (len);
   1b082:	9b04      	ldr	r3, [sp, #16]
   1b084:	1bdb      	subs	r3, r3, r7
   1b086:	9304      	str	r3, [sp, #16]
   1b088:	d199      	bne.n	1afbe <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   1b08a:	f1bb 0f00 	cmp.w	fp, #0
   1b08e:	f47f af42 	bne.w	1af16 <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   1b092:	4620      	mov	r0, r4
}
   1b094:	b009      	add	sp, #36	; 0x24
   1b096:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   1b09a:	f00b b95e 	b.w	2635a <log_output_flush>
		print_formatted(output, "%s", log_color);
   1b09e:	4620      	mov	r0, r4
   1b0a0:	4a05      	ldr	r2, [pc, #20]	; (1b0b8 <log_output_process+0x260>)
   1b0a2:	4906      	ldr	r1, [pc, #24]	; (1b0bc <log_output_process+0x264>)
   1b0a4:	f7ff feb8 	bl	1ae18 <print_formatted>
}
   1b0a8:	e738      	b.n	1af1c <log_output_process+0xc4>
   1b0aa:	bf00      	nop
   1b0ac:	00029851 	.word	0x00029851
   1b0b0:	00029855 	.word	0x00029855
   1b0b4:	00029030 	.word	0x00029030
   1b0b8:	0002984c 	.word	0x0002984c
   1b0bc:	0002a830 	.word	0x0002a830
   1b0c0:	00029044 	.word	0x00029044
   1b0c4:	0002987a 	.word	0x0002987a
   1b0c8:	00029880 	.word	0x00029880
   1b0cc:	00029884 	.word	0x00029884
   1b0d0:	2000d0ec 	.word	0x2000d0ec
   1b0d4:	2000d0e8 	.word	0x2000d0e8
   1b0d8:	0002985e 	.word	0x0002985e
   1b0dc:	000263a3 	.word	0x000263a3
   1b0e0:	00026375 	.word	0x00026375
   1b0e4:	0002634d 	.word	0x0002634d
   1b0e8:	00029891 	.word	0x00029891
   1b0ec:	00029889 	.word	0x00029889
   1b0f0:	00029893 	.word	0x00029893
   1b0f4:	0002b550 	.word	0x0002b550
   1b0f8:	00029895 	.word	0x00029895
   1b0fc:	0002988f 	.word	0x0002988f

0001b100 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   1b100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   1b104:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   1b106:	684b      	ldr	r3, [r1, #4]
   1b108:	4605      	mov	r5, r0
   1b10a:	460c      	mov	r4, r1
   1b10c:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   1b10e:	688e      	ldr	r6, [r1, #8]
   1b110:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
   1b112:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   1b116:	b15b      	cbz	r3, 1b130 <log_output_msg_process+0x30>
   1b118:	4a13      	ldr	r2, [pc, #76]	; (1b168 <log_output_msg_process+0x68>)
   1b11a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   1b11c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1b120:	2900      	cmp	r1, #0
   1b122:	db1f      	blt.n	1b164 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   1b124:	7820      	ldrb	r0, [r4, #0]
   1b126:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   1b12a:	f7ff fdb5 	bl	1ac98 <log_source_name_get>
   1b12e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   1b130:	4621      	mov	r1, r4
   1b132:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
   1b136:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   1b138:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   1b13c:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   1b13e:	eb01 0402 	add.w	r4, r1, r2
   1b142:	bf08      	it	eq
   1b144:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
   1b146:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   1b14a:	e9cd 0803 	strd	r0, r8, [sp, #12]
   1b14e:	e9cd 1401 	strd	r1, r4, [sp, #4]
   1b152:	2200      	movs	r2, #0
   1b154:	4631      	mov	r1, r6
   1b156:	4628      	mov	r0, r5
   1b158:	9700      	str	r7, [sp, #0]
   1b15a:	f7ff fe7d 	bl	1ae58 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   1b15e:	b006      	add	sp, #24
   1b160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1b164:	2300      	movs	r3, #0
   1b166:	e7e3      	b.n	1b130 <log_output_msg_process+0x30>
   1b168:	00028e94 	.word	0x00028e94

0001b16c <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1b16c:	f242 730f 	movw	r3, #9999	; 0x270f
{
   1b170:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1b172:	428b      	cmp	r3, r1
   1b174:	bf28      	it	cs
   1b176:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   1b178:	6805      	ldr	r5, [r0, #0]
{
   1b17a:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1b17c:	2105      	movs	r1, #5
   1b17e:	4668      	mov	r0, sp
   1b180:	4a0d      	ldr	r2, [pc, #52]	; (1b1b8 <log_output_dropped_process+0x4c>)
   1b182:	f00a fb8d 	bl	258a0 <snprintk>
   1b186:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1b188:	6863      	ldr	r3, [r4, #4]
   1b18a:	4628      	mov	r0, r5
   1b18c:	220b      	movs	r2, #11
   1b18e:	685b      	ldr	r3, [r3, #4]
   1b190:	490a      	ldr	r1, [pc, #40]	; (1b1bc <log_output_dropped_process+0x50>)
   1b192:	f00b f8ce 	bl	26332 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   1b196:	6863      	ldr	r3, [r4, #4]
   1b198:	4632      	mov	r2, r6
   1b19a:	4669      	mov	r1, sp
   1b19c:	4628      	mov	r0, r5
   1b19e:	685b      	ldr	r3, [r3, #4]
   1b1a0:	f00b f8c7 	bl	26332 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1b1a4:	6863      	ldr	r3, [r4, #4]
   1b1a6:	221b      	movs	r2, #27
   1b1a8:	4628      	mov	r0, r5
   1b1aa:	685b      	ldr	r3, [r3, #4]
   1b1ac:	4904      	ldr	r1, [pc, #16]	; (1b1c0 <log_output_dropped_process+0x54>)
   1b1ae:	f00b f8c0 	bl	26332 <buffer_write>
		     output->control_block->ctx);
}
   1b1b2:	b002      	add	sp, #8
   1b1b4:	bd70      	pop	{r4, r5, r6, pc}
   1b1b6:	bf00      	nop
   1b1b8:	0002ab9b 	.word	0x0002ab9b
   1b1bc:	000298b4 	.word	0x000298b4
   1b1c0:	00029898 	.word	0x00029898

0001b1c4 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1b1c4:	2100      	movs	r1, #0
   1b1c6:	2301      	movs	r3, #1
   1b1c8:	4a06      	ldr	r2, [pc, #24]	; (1b1e4 <log_output_timestamp_freq_set+0x20>)
   1b1ca:	4290      	cmp	r0, r2
   1b1cc:	d806      	bhi.n	1b1dc <log_output_timestamp_freq_set+0x18>
   1b1ce:	4a06      	ldr	r2, [pc, #24]	; (1b1e8 <log_output_timestamp_freq_set+0x24>)
   1b1d0:	b901      	cbnz	r1, 1b1d4 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   1b1d2:	2301      	movs	r3, #1
   1b1d4:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1b1d6:	4b05      	ldr	r3, [pc, #20]	; (1b1ec <log_output_timestamp_freq_set+0x28>)
   1b1d8:	6018      	str	r0, [r3, #0]
}
   1b1da:	4770      	bx	lr
		timestamp_div *= 2U;
   1b1dc:	2101      	movs	r1, #1
		frequency /= 2U;
   1b1de:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1b1e0:	005b      	lsls	r3, r3, #1
   1b1e2:	e7f2      	b.n	1b1ca <log_output_timestamp_freq_set+0x6>
   1b1e4:	000f4240 	.word	0x000f4240
   1b1e8:	2000d0e8 	.word	0x2000d0e8
   1b1ec:	2000d0ec 	.word	0x2000d0ec

0001b1f0 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   1b1f0:	4b01      	ldr	r3, [pc, #4]	; (1b1f8 <format_set+0x8>)
	return 0;
}
   1b1f2:	2000      	movs	r0, #0
	log_format_current = log_type;
   1b1f4:	6019      	str	r1, [r3, #0]
}
   1b1f6:	4770      	bx	lr
   1b1f8:	2000d104 	.word	0x2000d104

0001b1fc <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   1b1fc:	2201      	movs	r2, #1
   1b1fe:	4b02      	ldr	r3, [pc, #8]	; (1b208 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   1b200:	4802      	ldr	r0, [pc, #8]	; (1b20c <panic+0x10>)
   1b202:	701a      	strb	r2, [r3, #0]
   1b204:	f00b b8a9 	b.w	2635a <log_output_flush>
   1b208:	2000d89d 	.word	0x2000d89d
   1b20c:	00029074 	.word	0x00029074

0001b210 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   1b210:	4801      	ldr	r0, [pc, #4]	; (1b218 <dropped+0x8>)
   1b212:	f7ff bfab 	b.w	1b16c <log_output_dropped_process>
   1b216:	bf00      	nop
   1b218:	00029074 	.word	0x00029074

0001b21c <process>:
{
   1b21c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1b21e:	4b06      	ldr	r3, [pc, #24]	; (1b238 <process+0x1c>)
{
   1b220:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1b222:	6818      	ldr	r0, [r3, #0]
   1b224:	f7ff fb82 	bl	1a92c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   1b228:	4621      	mov	r1, r4
}
   1b22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1b22e:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
   1b230:	220f      	movs	r2, #15
   1b232:	4802      	ldr	r0, [pc, #8]	; (1b23c <process+0x20>)
   1b234:	4718      	bx	r3
   1b236:	bf00      	nop
   1b238:	2000d104 	.word	0x2000d104
   1b23c:	00029074 	.word	0x00029074

0001b240 <char_out>:
{
   1b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b242:	460d      	mov	r5, r1
   1b244:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1b246:	4f06      	ldr	r7, [pc, #24]	; (1b260 <char_out+0x20>)
   1b248:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   1b24a:	42b4      	cmp	r4, r6
   1b24c:	d101      	bne.n	1b252 <char_out+0x12>
}
   1b24e:	4628      	mov	r0, r5
   1b250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   1b252:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b256:	68bb      	ldr	r3, [r7, #8]
   1b258:	4801      	ldr	r0, [pc, #4]	; (1b260 <char_out+0x20>)
   1b25a:	685b      	ldr	r3, [r3, #4]
   1b25c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   1b25e:	e7f4      	b.n	1b24a <char_out+0xa>
   1b260:	00028bec 	.word	0x00028bec

0001b264 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   1b264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b268:	4605      	mov	r5, r0
   1b26a:	460e      	mov	r6, r1
   1b26c:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1b26e:	4c10      	ldr	r4, [pc, #64]	; (1b2b0 <z_impl_zsock_socket+0x4c>)
   1b270:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1b2b4 <z_impl_zsock_socket+0x50>
   1b274:	4544      	cmp	r4, r8
   1b276:	d307      	bcc.n	1b288 <z_impl_zsock_socket+0x24>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   1b278:	f00b f928 	bl	264cc <__errno>
   1b27c:	236a      	movs	r3, #106	; 0x6a
   1b27e:	6003      	str	r3, [r0, #0]
	return -1;
}
   1b280:	f04f 30ff 	mov.w	r0, #4294967295
   1b284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sock_family->family != family &&
   1b288:	6823      	ldr	r3, [r4, #0]
   1b28a:	42ab      	cmp	r3, r5
   1b28c:	d000      	beq.n	1b290 <z_impl_zsock_socket+0x2c>
   1b28e:	b963      	cbnz	r3, 1b2aa <z_impl_zsock_socket+0x46>
		if (!sock_family->is_supported(family, type, proto)) {
   1b290:	463a      	mov	r2, r7
   1b292:	4631      	mov	r1, r6
   1b294:	4628      	mov	r0, r5
   1b296:	68a3      	ldr	r3, [r4, #8]
   1b298:	4798      	blx	r3
   1b29a:	b130      	cbz	r0, 1b2aa <z_impl_zsock_socket+0x46>
		return sock_family->handler(family, type, proto);
   1b29c:	463a      	mov	r2, r7
   1b29e:	4631      	mov	r1, r6
   1b2a0:	4628      	mov	r0, r5
   1b2a2:	68e3      	ldr	r3, [r4, #12]
}
   1b2a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
   1b2a8:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1b2aa:	3410      	adds	r4, #16
   1b2ac:	e7e2      	b.n	1b274 <z_impl_zsock_socket+0x10>
   1b2ae:	bf00      	nop
   1b2b0:	00028e84 	.word	0x00028e84
   1b2b4:	00028e94 	.word	0x00028e94

0001b2b8 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   1b2b8:	4b01      	ldr	r3, [pc, #4]	; (1b2c0 <socket_offload_dns_register+0x8>)
   1b2ba:	6018      	str	r0, [r3, #0]
}
   1b2bc:	4770      	bx	lr
   1b2be:	bf00      	nop
   1b2c0:	2000d108 	.word	0x2000d108

0001b2c4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   1b2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b2c8:	4605      	mov	r5, r0
	__asm__ volatile(
   1b2ca:	f04f 0320 	mov.w	r3, #32
   1b2ce:	f3ef 8611 	mrs	r6, BASEPRI
   1b2d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1b2d6:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1b2da:	f04f 090c 	mov.w	r9, #12
	return list->head;
   1b2de:	4b0d      	ldr	r3, [pc, #52]	; (1b314 <pm_state_notify+0x50>)
   1b2e0:	4f0d      	ldr	r7, [pc, #52]	; (1b318 <pm_state_notify+0x54>)
   1b2e2:	681c      	ldr	r4, [r3, #0]
   1b2e4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1b31c <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1b2e8:	b92c      	cbnz	r4, 1b2f6 <pm_state_notify+0x32>
	__asm__ volatile(
   1b2ea:	f386 8811 	msr	BASEPRI, r6
   1b2ee:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1b2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   1b2f6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   1b2fa:	2d00      	cmp	r5, #0
   1b2fc:	bf18      	it	ne
   1b2fe:	4613      	movne	r3, r2
		if (callback) {
   1b300:	b12b      	cbz	r3, 1b30e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1b302:	f898 2014 	ldrb.w	r2, [r8, #20]
   1b306:	fb09 f202 	mul.w	r2, r9, r2
   1b30a:	5cb8      	ldrb	r0, [r7, r2]
   1b30c:	4798      	blx	r3
	return node->next;
   1b30e:	6824      	ldr	r4, [r4, #0]
   1b310:	e7ea      	b.n	1b2e8 <pm_state_notify+0x24>
   1b312:	bf00      	nop
   1b314:	2000d124 	.word	0x2000d124
   1b318:	2000d118 	.word	0x2000d118
   1b31c:	2000d848 	.word	0x2000d848

0001b320 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b320:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   1b322:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1b324:	4b16      	ldr	r3, [pc, #88]	; (1b380 <pm_system_resume+0x60>)
   1b326:	7d1c      	ldrb	r4, [r3, #20]
   1b328:	f004 031f 	and.w	r3, r4, #31
   1b32c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b32e:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b330:	4b14      	ldr	r3, [pc, #80]	; (1b384 <pm_system_resume+0x64>)
   1b332:	0961      	lsrs	r1, r4, #5
   1b334:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1b338:	e8d3 1fef 	ldaex	r1, [r3]
   1b33c:	ea01 0500 	and.w	r5, r1, r0
   1b340:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1b344:	2e00      	cmp	r6, #0
   1b346:	d1f7      	bne.n	1b338 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1b348:	420a      	tst	r2, r1
   1b34a:	d013      	beq.n	1b374 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   1b34c:	4b0e      	ldr	r3, [pc, #56]	; (1b388 <pm_system_resume+0x68>)
   1b34e:	4d0f      	ldr	r5, [pc, #60]	; (1b38c <pm_system_resume+0x6c>)
   1b350:	b18b      	cbz	r3, 1b376 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1b352:	230c      	movs	r3, #12
   1b354:	4363      	muls	r3, r4
   1b356:	18ea      	adds	r2, r5, r3
   1b358:	7851      	ldrb	r1, [r2, #1]
   1b35a:	5ce8      	ldrb	r0, [r5, r3]
   1b35c:	f00a ff82 	bl	26264 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   1b360:	2000      	movs	r0, #0
   1b362:	f7ff ffaf 	bl	1b2c4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1b366:	230c      	movs	r3, #12
   1b368:	435c      	muls	r4, r3
   1b36a:	2300      	movs	r3, #0
   1b36c:	192a      	adds	r2, r5, r4
   1b36e:	512b      	str	r3, [r5, r4]
   1b370:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   1b374:	bd70      	pop	{r4, r5, r6, pc}
   1b376:	f383 8811 	msr	BASEPRI, r3
   1b37a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1b37e:	e7ef      	b.n	1b360 <pm_system_resume+0x40>
   1b380:	2000d848 	.word	0x2000d848
   1b384:	2000d12c 	.word	0x2000d12c
   1b388:	00026265 	.word	0x00026265
   1b38c:	2000d118 	.word	0x2000d118

0001b390 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   1b390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   1b394:	4b32      	ldr	r3, [pc, #200]	; (1b460 <pm_system_suspend+0xd0>)
{
   1b396:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   1b398:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   1b39a:	f04f 0320 	mov.w	r3, #32
   1b39e:	f3ef 8811 	mrs	r8, BASEPRI
   1b3a2:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3a6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   1b3aa:	240c      	movs	r4, #12
   1b3ac:	436c      	muls	r4, r5
   1b3ae:	4b2d      	ldr	r3, [pc, #180]	; (1b464 <pm_system_suspend+0xd4>)
   1b3b0:	4e2d      	ldr	r6, [pc, #180]	; (1b468 <pm_system_suspend+0xd8>)
   1b3b2:	5d19      	ldrb	r1, [r3, r4]
   1b3b4:	191a      	adds	r2, r3, r4
   1b3b6:	2900      	cmp	r1, #0
   1b3b8:	d047      	beq.n	1b44a <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   1b3ba:	ca07      	ldmia	r2, {r0, r1, r2}
   1b3bc:	eb06 0c04 	add.w	ip, r6, r4
   1b3c0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   1b3c4:	2200      	movs	r2, #0
   1b3c6:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   1b3c8:	f388 8811 	msr	BASEPRI, r8
   1b3cc:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   1b3d0:	230c      	movs	r3, #12
   1b3d2:	436b      	muls	r3, r5
   1b3d4:	5cf0      	ldrb	r0, [r6, r3]
   1b3d6:	18f2      	adds	r2, r6, r3
   1b3d8:	b3a8      	cbz	r0, 1b446 <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1b3da:	1c7b      	adds	r3, r7, #1
   1b3dc:	d010      	beq.n	1b400 <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b3de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1b3e2:	2100      	movs	r1, #0
   1b3e4:	f8d2 c008 	ldr.w	ip, [r2, #8]
   1b3e8:	4c20      	ldr	r4, [pc, #128]	; (1b46c <pm_system_suspend+0xdc>)
   1b3ea:	2300      	movs	r3, #0
   1b3ec:	fbec 4100 	umlal	r4, r1, ip, r0
   1b3f0:	4a1f      	ldr	r2, [pc, #124]	; (1b470 <pm_system_suspend+0xe0>)
   1b3f2:	4620      	mov	r0, r4
   1b3f4:	f7fd fc88 	bl	18d08 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1b3f8:	2101      	movs	r1, #1
   1b3fa:	1a38      	subs	r0, r7, r0
   1b3fc:	f00d f889 	bl	28512 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1b400:	f009 f93a 	bl	24678 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1b404:	2001      	movs	r0, #1
   1b406:	f7ff ff5d 	bl	1b2c4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b40a:	4b1a      	ldr	r3, [pc, #104]	; (1b474 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b40c:	096a      	lsrs	r2, r5, #5
   1b40e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b412:	2201      	movs	r2, #1
   1b414:	f005 011f 	and.w	r1, r5, #31
   1b418:	408a      	lsls	r2, r1
   1b41a:	e8d3 0fef 	ldaex	r0, [r3]
   1b41e:	4310      	orrs	r0, r2
   1b420:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1b424:	2900      	cmp	r1, #0
   1b426:	d1f8      	bne.n	1b41a <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
   1b428:	4b13      	ldr	r3, [pc, #76]	; (1b478 <pm_system_suspend+0xe8>)
   1b42a:	b13b      	cbz	r3, 1b43c <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
   1b42c:	230c      	movs	r3, #12
   1b42e:	fb03 f005 	mul.w	r0, r3, r5
   1b432:	1833      	adds	r3, r6, r0
   1b434:	7859      	ldrb	r1, [r3, #1]
   1b436:	5c30      	ldrb	r0, [r6, r0]
   1b438:	f00a ff08 	bl	2624c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   1b43c:	f7ff ff70 	bl	1b320 <pm_system_resume>
	k_sched_unlock();
   1b440:	f009 f92e 	bl	246a0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   1b444:	2001      	movs	r0, #1
}
   1b446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   1b44a:	4601      	mov	r1, r0
   1b44c:	4628      	mov	r0, r5
   1b44e:	f000 f815 	bl	1b47c <pm_policy_next_state>
		if (info != NULL) {
   1b452:	2800      	cmp	r0, #0
   1b454:	d0b8      	beq.n	1b3c8 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   1b456:	c807      	ldmia	r0, {r0, r1, r2}
   1b458:	4434      	add	r4, r6
   1b45a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   1b45e:	e7b3      	b.n	1b3c8 <pm_system_suspend+0x38>
   1b460:	2000d848 	.word	0x2000d848
   1b464:	2000d10c 	.word	0x2000d10c
   1b468:	2000d118 	.word	0x2000d118
   1b46c:	000f423f 	.word	0x000f423f
   1b470:	000f4240 	.word	0x000f4240
   1b474:	2000d12c 	.word	0x2000d12c
   1b478:	0002624d 	.word	0x0002624d

0001b47c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   1b47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b480:	b085      	sub	sp, #20
   1b482:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   1b484:	a903      	add	r1, sp, #12
   1b486:	f000 f843 	bl	1b510 <pm_state_cpu_get_all>
   1b48a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1b48e:	4604      	mov	r4, r0
   1b490:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1b494:	4b1b      	ldr	r3, [pc, #108]	; (1b504 <pm_policy_next_state+0x88>)
   1b496:	9d03      	ldr	r5, [sp, #12]
   1b498:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1b49c:	1e43      	subs	r3, r0, #1
   1b49e:	b21b      	sxth	r3, r3
   1b4a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b4a4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1b508 <pm_policy_next_state+0x8c>
   1b4a8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1b4ac:	b924      	cbnz	r4, 1b4b8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   1b4ae:	46a1      	mov	r9, r4
}
   1b4b0:	4648      	mov	r0, r9
   1b4b2:	b005      	add	sp, #20
   1b4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4b8:	46c4      	mov	ip, r8
   1b4ba:	4659      	mov	r1, fp
   1b4bc:	6868      	ldr	r0, [r5, #4]
   1b4be:	2300      	movs	r3, #0
   1b4c0:	fbe0 c107 	umlal	ip, r1, r0, r7
   1b4c4:	4a11      	ldr	r2, [pc, #68]	; (1b50c <pm_policy_next_state+0x90>)
   1b4c6:	4660      	mov	r0, ip
   1b4c8:	f7fd fc1e 	bl	18d08 <__aeabi_uldivmod>
   1b4cc:	46c4      	mov	ip, r8
   1b4ce:	4659      	mov	r1, fp
   1b4d0:	9001      	str	r0, [sp, #4]
   1b4d2:	68a8      	ldr	r0, [r5, #8]
   1b4d4:	2300      	movs	r3, #0
   1b4d6:	fbe0 c107 	umlal	ip, r1, r0, r7
   1b4da:	4a0c      	ldr	r2, [pc, #48]	; (1b50c <pm_policy_next_state+0x90>)
   1b4dc:	4660      	mov	r0, ip
   1b4de:	f7fd fc13 	bl	18d08 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1b4e2:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   1b4e6:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1b4e8:	d001      	beq.n	1b4ee <pm_policy_next_state+0x72>
   1b4ea:	4582      	cmp	sl, r0
   1b4ec:	d905      	bls.n	1b4fa <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   1b4ee:	1c73      	adds	r3, r6, #1
   1b4f0:	d0de      	beq.n	1b4b0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   1b4f2:	9b01      	ldr	r3, [sp, #4]
   1b4f4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1b4f6:	42b0      	cmp	r0, r6
   1b4f8:	d9da      	bls.n	1b4b0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1b4fa:	3c01      	subs	r4, #1
   1b4fc:	b2a4      	uxth	r4, r4
   1b4fe:	3d0c      	subs	r5, #12
   1b500:	e7d4      	b.n	1b4ac <pm_policy_next_state+0x30>
   1b502:	bf00      	nop
   1b504:	2000c58c 	.word	0x2000c58c
   1b508:	000f423f 	.word	0x000f423f
   1b50c:	000f4240 	.word	0x000f4240

0001b510 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   1b510:	b908      	cbnz	r0, 1b516 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1b512:	4b02      	ldr	r3, [pc, #8]	; (1b51c <pm_state_cpu_get_all+0xc>)
   1b514:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1b516:	2000      	movs	r0, #0
   1b518:	4770      	bx	lr
   1b51a:	bf00      	nop
   1b51c:	00029084 	.word	0x00029084

0001b520 <adp536x_reg_read>:
#define ADP536X_FUEL_GAUGE_EN_FG(x)			((x) & 0x01)

static const struct device *i2c_dev;

static int adp536x_reg_read(uint8_t reg, uint8_t *buff)
{
   1b520:	4603      	mov	r3, r0
   1b522:	b510      	push	{r4, lr}
   1b524:	b088      	sub	sp, #32
   1b526:	f88d 3007 	strb.w	r3, [sp, #7]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   1b52a:	f10d 0307 	add.w	r3, sp, #7
   1b52e:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
   1b530:	2301      	movs	r3, #1
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
   1b532:	4a09      	ldr	r2, [pc, #36]	; (1b558 <adp536x_reg_read+0x38>)
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
   1b534:	e9cd 1305 	strd	r1, r3, [sp, #20]
   1b538:	6810      	ldr	r0, [r2, #0]
	msg[0].len = num_write;
   1b53a:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1b53c:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b53e:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   1b540:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b544:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1b548:	6883      	ldr	r3, [r0, #8]
   1b54a:	2202      	movs	r2, #2
   1b54c:	689c      	ldr	r4, [r3, #8]
   1b54e:	a902      	add	r1, sp, #8
   1b550:	2346      	movs	r3, #70	; 0x46
   1b552:	47a0      	blx	r4
}
   1b554:	b008      	add	sp, #32
   1b556:	bd10      	pop	{r4, pc}
   1b558:	2000d130 	.word	0x2000d130

0001b55c <adp536x_reg_write_mask>:
}

static int adp536x_reg_write_mask(uint8_t reg_addr,
			       uint32_t mask,
			       uint8_t data)
{
   1b55c:	b570      	push	{r4, r5, r6, lr}
   1b55e:	b086      	sub	sp, #24
   1b560:	460e      	mov	r6, r1
	int err;
	uint8_t tmp;

	err = adp536x_reg_read(reg_addr, &tmp);
   1b562:	f10d 0107 	add.w	r1, sp, #7
{
   1b566:	4605      	mov	r5, r0
   1b568:	4614      	mov	r4, r2
	err = adp536x_reg_read(reg_addr, &tmp);
   1b56a:	f7ff ffd9 	bl	1b520 <adp536x_reg_read>
	if (err) {
   1b56e:	b9c8      	cbnz	r0, 1b5a4 <adp536x_reg_write_mask+0x48>
		return err;
	}

	tmp &= ~mask;
   1b570:	f89d 3007 	ldrb.w	r3, [sp, #7]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   1b574:	f88d 5008 	strb.w	r5, [sp, #8]
   1b578:	ea23 0106 	bic.w	r1, r3, r6
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
   1b57c:	4b0a      	ldr	r3, [pc, #40]	; (1b5a8 <adp536x_reg_write_mask+0x4c>)
	tmp |= data;
   1b57e:	ea44 0201 	orr.w	r2, r4, r1
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
   1b582:	6818      	ldr	r0, [r3, #0]
	msg.buf = (uint8_t *)buf;
   1b584:	ab02      	add	r3, sp, #8
   1b586:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   1b588:	2302      	movs	r3, #2
	tmp |= data;
   1b58a:	f88d 2007 	strb.w	r2, [sp, #7]
	uint8_t tx_buf[2] = {reg_addr, value};
   1b58e:	f88d 2009 	strb.w	r2, [sp, #9]
	msg.len = num_bytes;
   1b592:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1b594:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1b598:	6883      	ldr	r3, [r0, #8]
   1b59a:	2201      	movs	r2, #1
   1b59c:	689c      	ldr	r4, [r3, #8]
   1b59e:	a903      	add	r1, sp, #12
   1b5a0:	2346      	movs	r3, #70	; 0x46
   1b5a2:	47a0      	blx	r4

	return adp536x_reg_write(reg_addr, tmp);
}
   1b5a4:	b006      	add	sp, #24
   1b5a6:	bd70      	pop	{r4, r5, r6, pc}
   1b5a8:	2000d130 	.word	0x2000d130

0001b5ac <adp536x_init>:

	return 0;
}

int adp536x_init(const struct device *dev)
{
   1b5ac:	b510      	push	{r4, lr}
   1b5ae:	4604      	mov	r4, r0
   1b5b0:	f00c fd0b 	bl	27fca <z_device_is_ready>
	if (!device_is_ready(dev)) {
   1b5b4:	b118      	cbz	r0, 1b5be <adp536x_init+0x12>
		return -ENODEV;
	}

	i2c_dev = dev;

	return 0;
   1b5b6:	2000      	movs	r0, #0
	i2c_dev = dev;
   1b5b8:	4b02      	ldr	r3, [pc, #8]	; (1b5c4 <adp536x_init+0x18>)
   1b5ba:	601c      	str	r4, [r3, #0]
}
   1b5bc:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1b5be:	f06f 0012 	mvn.w	r0, #18
   1b5c2:	e7fb      	b.n	1b5bc <adp536x_init+0x10>
   1b5c4:	2000d130 	.word	0x2000d130

0001b5c8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1b5c8:	4901      	ldr	r1, [pc, #4]	; (1b5d0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1b5ca:	2210      	movs	r2, #16
	str	r2, [r1]
   1b5cc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1b5ce:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1b5d0:	e000ed10 	.word	0xe000ed10

0001b5d4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1b5d4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1b5d6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1b5d8:	f380 8811 	msr	BASEPRI, r0
	isb
   1b5dc:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   1b5e0:	f3bf 8f4f 	dsb	sy
   1b5e4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1b5e6:	b662      	cpsie	i
	isb
   1b5e8:	f3bf 8f6f 	isb	sy

	bx	lr
   1b5ec:	4770      	bx	lr
   1b5ee:	bf00      	nop

0001b5f0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1b5f0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1b5f2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1b5f4:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   1b5f8:	f3bf 8f4f 	dsb	sy
   1b5fc:	bf20      	wfe

	msr	BASEPRI, r0
   1b5fe:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1b602:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1b604:	4770      	bx	lr
   1b606:	bf00      	nop

0001b608 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1b608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b60c:	4681      	mov	r9, r0

	if (esf != NULL) {
   1b60e:	460c      	mov	r4, r1
{
   1b610:	af00      	add	r7, sp, #0
	if (esf != NULL) {
   1b612:	2900      	cmp	r1, #0
   1b614:	d04c      	beq.n	1b6b0 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1b616:	e9d1 1200 	ldrd	r1, r2, [r1]
   1b61a:	466e      	mov	r6, sp
   1b61c:	b08a      	sub	sp, #40	; 0x28
   1b61e:	68a3      	ldr	r3, [r4, #8]
   1b620:	466d      	mov	r5, sp
   1b622:	f04f 0a05 	mov.w	sl, #5
   1b626:	46a8      	mov	r8, r5
   1b628:	4825      	ldr	r0, [pc, #148]	; (1b6c0 <z_arm_fatal_error+0xb8>)
   1b62a:	e9c5 2307 	strd	r2, r3, [r5, #28]
   1b62e:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1b632:	f848 af10 	str.w	sl, [r8, #16]!
   1b636:	2300      	movs	r3, #0
   1b638:	4642      	mov	r2, r8
   1b63a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1b63e:	4821      	ldr	r0, [pc, #132]	; (1b6c4 <z_arm_fatal_error+0xbc>)
   1b640:	f7ff fb4c 	bl	1acdc <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1b644:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1b648:	46b5      	mov	sp, r6
   1b64a:	6963      	ldr	r3, [r4, #20]
   1b64c:	46ad      	mov	sp, r5
   1b64e:	481e      	ldr	r0, [pc, #120]	; (1b6c8 <z_arm_fatal_error+0xc0>)
   1b650:	e9c5 2307 	strd	r2, r3, [r5, #28]
   1b654:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1b658:	f8c5 a010 	str.w	sl, [r5, #16]
   1b65c:	2300      	movs	r3, #0
   1b65e:	4642      	mov	r2, r8
   1b660:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1b664:	4817      	ldr	r0, [pc, #92]	; (1b6c4 <z_arm_fatal_error+0xbc>)
   1b666:	f7ff fb39 	bl	1acdc <z_impl_z_log_msg_static_create>
   1b66a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1b66c:	b088      	sub	sp, #32
   1b66e:	69e3      	ldr	r3, [r4, #28]
   1b670:	466d      	mov	r5, sp
   1b672:	f04f 0a03 	mov.w	sl, #3
   1b676:	46a8      	mov	r8, r5
   1b678:	4a14      	ldr	r2, [pc, #80]	; (1b6cc <z_arm_fatal_error+0xc4>)
   1b67a:	e9c5 2305 	strd	r2, r3, [r5, #20]
   1b67e:	f848 af10 	str.w	sl, [r8, #16]!
   1b682:	2300      	movs	r3, #0
   1b684:	4642      	mov	r2, r8
   1b686:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b68a:	480e      	ldr	r0, [pc, #56]	; (1b6c4 <z_arm_fatal_error+0xbc>)
   1b68c:	f7ff fb26 	bl	1acdc <z_impl_z_log_msg_static_create>
   1b690:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1b692:	69a3      	ldr	r3, [r4, #24]
   1b694:	46ad      	mov	sp, r5
   1b696:	4a0e      	ldr	r2, [pc, #56]	; (1b6d0 <z_arm_fatal_error+0xc8>)
   1b698:	f8c5 a010 	str.w	sl, [r5, #16]
   1b69c:	e9c5 2305 	strd	r2, r3, [r5, #20]
   1b6a0:	2300      	movs	r3, #0
   1b6a2:	4642      	mov	r2, r8
   1b6a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b6a8:	4806      	ldr	r0, [pc, #24]	; (1b6c4 <z_arm_fatal_error+0xbc>)
   1b6aa:	f7ff fb17 	bl	1acdc <z_impl_z_log_msg_static_create>
   1b6ae:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1b6b0:	4621      	mov	r1, r4
   1b6b2:	4648      	mov	r0, r9
   1b6b4:	f008 f918 	bl	238e8 <z_fatal_error>
}
   1b6b8:	46bd      	mov	sp, r7
   1b6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b6be:	bf00      	nop
   1b6c0:	0002997f 	.word	0x0002997f
   1b6c4:	00028fa4 	.word	0x00028fa4
   1b6c8:	000299ae 	.word	0x000299ae
   1b6cc:	000299dd 	.word	0x000299dd
   1b6d0:	000299ec 	.word	0x000299ec

0001b6d4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1b6d4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1b6d6:	2800      	cmp	r0, #0
   1b6d8:	db07      	blt.n	1b6ea <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b6da:	2301      	movs	r3, #1
   1b6dc:	0941      	lsrs	r1, r0, #5
   1b6de:	4a03      	ldr	r2, [pc, #12]	; (1b6ec <arch_irq_enable+0x18>)
   1b6e0:	f000 001f 	and.w	r0, r0, #31
   1b6e4:	4083      	lsls	r3, r0
   1b6e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   1b6ea:	4770      	bx	lr
   1b6ec:	e000e100 	.word	0xe000e100

0001b6f0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1b6f0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1b6f2:	2800      	cmp	r0, #0
   1b6f4:	db0c      	blt.n	1b710 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b6f6:	2201      	movs	r2, #1
   1b6f8:	4906      	ldr	r1, [pc, #24]	; (1b714 <arch_irq_disable+0x24>)
   1b6fa:	0943      	lsrs	r3, r0, #5
   1b6fc:	f000 001f 	and.w	r0, r0, #31
   1b700:	4082      	lsls	r2, r0
   1b702:	3320      	adds	r3, #32
   1b704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1b708:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b70c:	f3bf 8f6f 	isb	sy
}
   1b710:	4770      	bx	lr
   1b712:	bf00      	nop
   1b714:	e000e100 	.word	0xe000e100

0001b718 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1b718:	4b05      	ldr	r3, [pc, #20]	; (1b730 <arch_irq_is_enabled+0x18>)
   1b71a:	0942      	lsrs	r2, r0, #5
   1b71c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1b720:	2301      	movs	r3, #1
   1b722:	f000 001f 	and.w	r0, r0, #31
   1b726:	fa03 f000 	lsl.w	r0, r3, r0
}
   1b72a:	4010      	ands	r0, r2
   1b72c:	4770      	bx	lr
   1b72e:	bf00      	nop
   1b730:	e000e100 	.word	0xe000e100

0001b734 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1b734:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1b736:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
   1b738:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b73c:	bfac      	ite	ge
   1b73e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b742:	4b06      	ldrlt	r3, [pc, #24]	; (1b75c <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b744:	ea4f 1141 	mov.w	r1, r1, lsl #5
   1b748:	b2c9      	uxtb	r1, r1
   1b74a:	bfab      	itete	ge
   1b74c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b750:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b754:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b758:	5419      	strblt	r1, [r3, r0]
}
   1b75a:	4770      	bx	lr
   1b75c:	e000ed14 	.word	0xe000ed14

0001b760 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1b760:	bf30      	wfi
    b z_SysNmiOnReset
   1b762:	f7ff bffd 	b.w	1b760 <z_SysNmiOnReset>
   1b766:	bf00      	nop

0001b768 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1b768:	4a0b      	ldr	r2, [pc, #44]	; (1b798 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1b76a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1b76c:	4b0b      	ldr	r3, [pc, #44]	; (1b79c <z_arm_prep_c+0x34>)
   1b76e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1b772:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1b774:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b778:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1b77c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1b780:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1b784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1b788:	f008 f968 	bl	23a5c <z_bss_zero>
	z_data_copy();
   1b78c:	f009 f8c4 	bl	24918 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1b790:	f000 fbb0 	bl	1bef4 <z_arm_interrupt_init>
	z_cstart();
   1b794:	f008 f9a2 	bl	23adc <z_cstart>
   1b798:	00018000 	.word	0x00018000
   1b79c:	e000ed00 	.word	0xe000ed00

0001b7a0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1b7a0:	4a09      	ldr	r2, [pc, #36]	; (1b7c8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1b7a2:	490a      	ldr	r1, [pc, #40]	; (1b7cc <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1b7a4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1b7a6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1b7a8:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   1b7aa:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1b7ac:	4908      	ldr	r1, [pc, #32]	; (1b7d0 <arch_swap+0x30>)
   1b7ae:	684b      	ldr	r3, [r1, #4]
   1b7b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1b7b4:	604b      	str	r3, [r1, #4]
   1b7b6:	2300      	movs	r3, #0
   1b7b8:	f383 8811 	msr	BASEPRI, r3
   1b7bc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1b7c0:	6893      	ldr	r3, [r2, #8]
}
   1b7c2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1b7c4:	4770      	bx	lr
   1b7c6:	bf00      	nop
   1b7c8:	2000d848 	.word	0x2000d848
   1b7cc:	000295f4 	.word	0x000295f4
   1b7d0:	e000ed00 	.word	0xe000ed00

0001b7d4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1b7d4:	4915      	ldr	r1, [pc, #84]	; (1b82c <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1b7d6:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   1b7d8:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1b7dc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1b7e0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1b7e2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1b7e6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1b7ea:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   1b7ec:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1b7f0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1b7f4:	4f0e      	ldr	r7, [pc, #56]	; (1b830 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1b7f6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1b7fa:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1b7fc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1b7fe:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   1b800:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1b804:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1b806:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1b808:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1b80a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1b80e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1b812:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1b816:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1b81a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1b81e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1b820:	f00a fe15 	bl	2644e <configure_builtin_stack_guard>
    pop {r2, lr}
   1b824:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1b828:	4770      	bx	lr
   1b82a:	0000      	.short	0x0000
    ldr r1, =_kernel
   1b82c:	2000d848 	.word	0x2000d848
    ldr v4, =_SCS_ICSR
   1b830:	e000ed04 	.word	0xe000ed04

0001b834 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1b834:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1b838:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1b83a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1b83e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1b842:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1b844:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1b848:	2902      	cmp	r1, #2
    beq _oops
   1b84a:	d0ff      	beq.n	1b84c <_oops>

0001b84c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1b84c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1b84e:	f00a fdef 	bl	26430 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   1b852:	bd01      	pop	{r0, pc}

0001b854 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1b854:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1b858:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   1b85a:	490d      	ldr	r1, [pc, #52]	; (1b890 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   1b85c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1b860:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1b862:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   1b866:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1b86a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   1b86c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1b870:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1b874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1b878:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1b87c:	2300      	movs	r3, #0
   1b87e:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   1b880:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1b884:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1b886:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   1b888:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1b88c:	4770      	bx	lr
   1b88e:	bf00      	nop
   1b890:	000258bb 	.word	0x000258bb

0001b894 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1b894:	4b08      	ldr	r3, [pc, #32]	; (1b8b8 <arch_switch_to_main_thread+0x24>)
   1b896:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1b898:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1b89a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1b89e:	4610      	mov	r0, r2
   1b8a0:	f381 8809 	msr	PSP, r1
   1b8a4:	2100      	movs	r1, #0
   1b8a6:	b663      	cpsie	if
   1b8a8:	f381 8811 	msr	BASEPRI, r1
   1b8ac:	f3bf 8f6f 	isb	sy
   1b8b0:	2200      	movs	r2, #0
   1b8b2:	2300      	movs	r3, #0
   1b8b4:	f00a f801 	bl	258ba <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1b8b8:	2000d848 	.word	0x2000d848

0001b8bc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1b8bc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1b8be:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1b8c0:	4a0b      	ldr	r2, [pc, #44]	; (1b8f0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1b8c2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   1b8c4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1b8c6:	bf1e      	ittt	ne
	movne	r1, #0
   1b8c8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1b8ca:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   1b8cc:	f00c fc15 	blne	280fa <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1b8d0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1b8d2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1b8d6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1b8da:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1b8de:	4905      	ldr	r1, [pc, #20]	; (1b8f4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1b8e0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1b8e2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1b8e4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1b8e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1b8ea:	4903      	ldr	r1, [pc, #12]	; (1b8f8 <_isr_wrapper+0x3c>)
	bx r1
   1b8ec:	4708      	bx	r1
   1b8ee:	0000      	.short	0x0000
	ldr r2, =_kernel
   1b8f0:	2000d848 	.word	0x2000d848
	ldr r1, =_sw_isr_table
   1b8f4:	00028c4c 	.word	0x00028c4c
	ldr r1, =z_arm_int_exit
   1b8f8:	0001b8fd 	.word	0x0001b8fd

0001b8fc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1b8fc:	4b04      	ldr	r3, [pc, #16]	; (1b910 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1b8fe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1b900:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1b902:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1b904:	d003      	beq.n	1b90e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1b906:	4903      	ldr	r1, [pc, #12]	; (1b914 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1b908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1b90c:	600a      	str	r2, [r1, #0]

0001b90e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1b90e:	4770      	bx	lr
	ldr r3, =_kernel
   1b910:	2000d848 	.word	0x2000d848
	ldr r1, =_SCS_ICSR
   1b914:	e000ed04 	.word	0xe000ed04

0001b918 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1b918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b91c:	b086      	sub	sp, #24
   1b91e:	4606      	mov	r6, r0
   1b920:	460d      	mov	r5, r1
   1b922:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   1b924:	2402      	movs	r4, #2
   1b926:	4b41      	ldr	r3, [pc, #260]	; (1ba2c <mem_manage_fault.constprop.0+0x114>)
   1b928:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b92c:	617b      	str	r3, [r7, #20]
   1b92e:	4840      	ldr	r0, [pc, #256]	; (1ba30 <mem_manage_fault.constprop.0+0x118>)
   1b930:	613c      	str	r4, [r7, #16]
   1b932:	f107 0210 	add.w	r2, r7, #16
   1b936:	f00a fd8e 	bl	26456 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1b93a:	4b3e      	ldr	r3, [pc, #248]	; (1ba34 <mem_manage_fault.constprop.0+0x11c>)
   1b93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b93e:	06db      	lsls	r3, r3, #27
   1b940:	d509      	bpl.n	1b956 <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1b942:	4b3d      	ldr	r3, [pc, #244]	; (1ba38 <mem_manage_fault.constprop.0+0x120>)
   1b944:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b948:	e9c7 4304 	strd	r4, r3, [r7, #16]
   1b94c:	4838      	ldr	r0, [pc, #224]	; (1ba30 <mem_manage_fault.constprop.0+0x118>)
   1b94e:	f107 0210 	add.w	r2, r7, #16
   1b952:	f00a fd80 	bl	26456 <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1b956:	4b37      	ldr	r3, [pc, #220]	; (1ba34 <mem_manage_fault.constprop.0+0x11c>)
   1b958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b95a:	0718      	lsls	r0, r3, #28
   1b95c:	d50a      	bpl.n	1b974 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1b95e:	4b37      	ldr	r3, [pc, #220]	; (1ba3c <mem_manage_fault.constprop.0+0x124>)
   1b960:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b964:	617b      	str	r3, [r7, #20]
   1b966:	2302      	movs	r3, #2
   1b968:	4831      	ldr	r0, [pc, #196]	; (1ba30 <mem_manage_fault.constprop.0+0x118>)
   1b96a:	613b      	str	r3, [r7, #16]
   1b96c:	f107 0210 	add.w	r2, r7, #16
   1b970:	f00a fd71 	bl	26456 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1b974:	4c2f      	ldr	r4, [pc, #188]	; (1ba34 <mem_manage_fault.constprop.0+0x11c>)
   1b976:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b978:	0799      	lsls	r1, r3, #30
   1b97a:	d522      	bpl.n	1b9c2 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
   1b97c:	46e8      	mov	r8, sp
   1b97e:	4b30      	ldr	r3, [pc, #192]	; (1ba40 <mem_manage_fault.constprop.0+0x128>)
   1b980:	f107 0210 	add.w	r2, r7, #16
   1b984:	617b      	str	r3, [r7, #20]
   1b986:	2302      	movs	r3, #2
   1b988:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b98c:	613b      	str	r3, [r7, #16]
   1b98e:	4828      	ldr	r0, [pc, #160]	; (1ba30 <mem_manage_fault.constprop.0+0x118>)
   1b990:	f00a fd61 	bl	26456 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   1b994:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1b996:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1b998:	0612      	lsls	r2, r2, #24
   1b99a:	d512      	bpl.n	1b9c2 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1b99c:	b088      	sub	sp, #32
   1b99e:	466a      	mov	r2, sp
   1b9a0:	4928      	ldr	r1, [pc, #160]	; (1ba44 <mem_manage_fault.constprop.0+0x12c>)
   1b9a2:	4823      	ldr	r0, [pc, #140]	; (1ba30 <mem_manage_fault.constprop.0+0x118>)
   1b9a4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1b9a8:	2303      	movs	r3, #3
   1b9aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b9ae:	f842 3f10 	str.w	r3, [r2, #16]!
   1b9b2:	f00a fd50 	bl	26456 <z_log_msg_static_create.constprop.0>
   1b9b6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   1b9b8:	b11e      	cbz	r6, 1b9c2 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1b9ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b9bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1b9c0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1b9c2:	4b1c      	ldr	r3, [pc, #112]	; (1ba34 <mem_manage_fault.constprop.0+0x11c>)
   1b9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b9c6:	07dc      	lsls	r4, r3, #31
   1b9c8:	d50a      	bpl.n	1b9e0 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
   1b9ca:	4b1f      	ldr	r3, [pc, #124]	; (1ba48 <mem_manage_fault.constprop.0+0x130>)
   1b9cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b9d0:	617b      	str	r3, [r7, #20]
   1b9d2:	2302      	movs	r3, #2
   1b9d4:	4816      	ldr	r0, [pc, #88]	; (1ba30 <mem_manage_fault.constprop.0+0x118>)
   1b9d6:	613b      	str	r3, [r7, #16]
   1b9d8:	f107 0210 	add.w	r2, r7, #16
   1b9dc:	f00a fd3b 	bl	26456 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1b9e0:	4b14      	ldr	r3, [pc, #80]	; (1ba34 <mem_manage_fault.constprop.0+0x11c>)
   1b9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b9e4:	0698      	lsls	r0, r3, #26
   1b9e6:	d50a      	bpl.n	1b9fe <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
   1b9e8:	4b18      	ldr	r3, [pc, #96]	; (1ba4c <mem_manage_fault.constprop.0+0x134>)
   1b9ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b9ee:	617b      	str	r3, [r7, #20]
   1b9f0:	2302      	movs	r3, #2
   1b9f2:	480f      	ldr	r0, [pc, #60]	; (1ba30 <mem_manage_fault.constprop.0+0x118>)
   1b9f4:	613b      	str	r3, [r7, #16]
   1b9f6:	f107 0210 	add.w	r2, r7, #16
   1b9fa:	f00a fd2c 	bl	26456 <z_log_msg_static_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1b9fe:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1ba00:	4b0c      	ldr	r3, [pc, #48]	; (1ba34 <mem_manage_fault.constprop.0+0x11c>)

	return reason;
}
   1ba02:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1ba04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ba06:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1ba08:	bf58      	it	pl
   1ba0a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1ba0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ba0e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1ba10:	bf42      	ittt	mi
   1ba12:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   1ba14:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   1ba18:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1ba1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ba1c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1ba20:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1ba22:	7028      	strb	r0, [r5, #0]
}
   1ba24:	46bd      	mov	sp, r7
   1ba26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba2a:	bf00      	nop
   1ba2c:	00029a1a 	.word	0x00029a1a
   1ba30:	00028fa4 	.word	0x00028fa4
   1ba34:	e000ed00 	.word	0xe000ed00
   1ba38:	00029a30 	.word	0x00029a30
   1ba3c:	00029a63 	.word	0x00029a63
   1ba40:	00029a76 	.word	0x00029a76
   1ba44:	00029a8e 	.word	0x00029a8e
   1ba48:	00029aa4 	.word	0x00029aa4
   1ba4c:	00029ac3 	.word	0x00029ac3

0001ba50 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1ba50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba54:	b086      	sub	sp, #24
   1ba56:	4606      	mov	r6, r0
   1ba58:	460d      	mov	r5, r1
   1ba5a:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   1ba5c:	2402      	movs	r4, #2
   1ba5e:	4b3e      	ldr	r3, [pc, #248]	; (1bb58 <bus_fault.constprop.0+0x108>)
   1ba60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ba64:	617b      	str	r3, [r7, #20]
   1ba66:	483d      	ldr	r0, [pc, #244]	; (1bb5c <bus_fault.constprop.0+0x10c>)
   1ba68:	613c      	str	r4, [r7, #16]
   1ba6a:	f107 0210 	add.w	r2, r7, #16
   1ba6e:	f00a fcf2 	bl	26456 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1ba72:	4b3b      	ldr	r3, [pc, #236]	; (1bb60 <bus_fault.constprop.0+0x110>)
   1ba74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ba76:	04d9      	lsls	r1, r3, #19
   1ba78:	d509      	bpl.n	1ba8e <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   1ba7a:	4b3a      	ldr	r3, [pc, #232]	; (1bb64 <bus_fault.constprop.0+0x114>)
   1ba7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ba80:	e9c7 4304 	strd	r4, r3, [r7, #16]
   1ba84:	4835      	ldr	r0, [pc, #212]	; (1bb5c <bus_fault.constprop.0+0x10c>)
   1ba86:	f107 0210 	add.w	r2, r7, #16
   1ba8a:	f00a fce4 	bl	26456 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1ba8e:	4b34      	ldr	r3, [pc, #208]	; (1bb60 <bus_fault.constprop.0+0x110>)
   1ba90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ba92:	051a      	lsls	r2, r3, #20
   1ba94:	d50a      	bpl.n	1baac <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1ba96:	4b34      	ldr	r3, [pc, #208]	; (1bb68 <bus_fault.constprop.0+0x118>)
   1ba98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ba9c:	617b      	str	r3, [r7, #20]
   1ba9e:	2302      	movs	r3, #2
   1baa0:	482e      	ldr	r0, [pc, #184]	; (1bb5c <bus_fault.constprop.0+0x10c>)
   1baa2:	613b      	str	r3, [r7, #16]
   1baa4:	f107 0210 	add.w	r2, r7, #16
   1baa8:	f00a fcd5 	bl	26456 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1baac:	4c2c      	ldr	r4, [pc, #176]	; (1bb60 <bus_fault.constprop.0+0x110>)
   1baae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1bab0:	059b      	lsls	r3, r3, #22
   1bab2:	d522      	bpl.n	1bafa <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   1bab4:	46e8      	mov	r8, sp
   1bab6:	4b2d      	ldr	r3, [pc, #180]	; (1bb6c <bus_fault.constprop.0+0x11c>)
   1bab8:	4828      	ldr	r0, [pc, #160]	; (1bb5c <bus_fault.constprop.0+0x10c>)
   1baba:	617b      	str	r3, [r7, #20]
   1babc:	2302      	movs	r3, #2
   1babe:	f107 0210 	add.w	r2, r7, #16
   1bac2:	613b      	str	r3, [r7, #16]
   1bac4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bac8:	f00a fcc5 	bl	26456 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1bacc:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1bace:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1bad0:	0410      	lsls	r0, r2, #16
   1bad2:	d512      	bpl.n	1bafa <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1bad4:	b088      	sub	sp, #32
   1bad6:	466a      	mov	r2, sp
   1bad8:	4925      	ldr	r1, [pc, #148]	; (1bb70 <bus_fault.constprop.0+0x120>)
   1bada:	4820      	ldr	r0, [pc, #128]	; (1bb5c <bus_fault.constprop.0+0x10c>)
   1badc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1bae0:	2303      	movs	r3, #3
   1bae2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bae6:	f842 3f10 	str.w	r3, [r2, #16]!
   1baea:	f00a fcb4 	bl	26456 <z_log_msg_static_create.constprop.0>
   1baee:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   1baf0:	b11e      	cbz	r6, 1bafa <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1baf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1baf4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1baf8:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1bafa:	4b19      	ldr	r3, [pc, #100]	; (1bb60 <bus_fault.constprop.0+0x110>)
   1bafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bafe:	0559      	lsls	r1, r3, #21
   1bb00:	d50a      	bpl.n	1bb18 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   1bb02:	4b1c      	ldr	r3, [pc, #112]	; (1bb74 <bus_fault.constprop.0+0x124>)
   1bb04:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bb08:	617b      	str	r3, [r7, #20]
   1bb0a:	2302      	movs	r3, #2
   1bb0c:	4813      	ldr	r0, [pc, #76]	; (1bb5c <bus_fault.constprop.0+0x10c>)
   1bb0e:	613b      	str	r3, [r7, #16]
   1bb10:	f107 0210 	add.w	r2, r7, #16
   1bb14:	f00a fc9f 	bl	26456 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1bb18:	4b11      	ldr	r3, [pc, #68]	; (1bb60 <bus_fault.constprop.0+0x110>)
   1bb1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1bb1c:	05d2      	lsls	r2, r2, #23
   1bb1e:	d515      	bpl.n	1bb4c <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   1bb20:	4b15      	ldr	r3, [pc, #84]	; (1bb78 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1bb22:	617b      	str	r3, [r7, #20]
   1bb24:	2302      	movs	r3, #2
   1bb26:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bb2a:	480c      	ldr	r0, [pc, #48]	; (1bb5c <bus_fault.constprop.0+0x10c>)
   1bb2c:	613b      	str	r3, [r7, #16]
   1bb2e:	f107 0210 	add.w	r2, r7, #16
   1bb32:	f00a fc90 	bl	26456 <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   1bb36:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1bb38:	4a09      	ldr	r2, [pc, #36]	; (1bb60 <bus_fault.constprop.0+0x110>)

	return reason;
}
   1bb3a:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1bb3c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1bb3e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1bb42:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1bb44:	7028      	strb	r0, [r5, #0]
}
   1bb46:	46bd      	mov	sp, r7
   1bb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1bb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bb4e:	049b      	lsls	r3, r3, #18
   1bb50:	d5f1      	bpl.n	1bb36 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1bb52:	4b0a      	ldr	r3, [pc, #40]	; (1bb7c <bus_fault.constprop.0+0x12c>)
   1bb54:	e7e5      	b.n	1bb22 <bus_fault.constprop.0+0xd2>
   1bb56:	bf00      	nop
   1bb58:	00029af2 	.word	0x00029af2
   1bb5c:	00028fa4 	.word	0x00028fa4
   1bb60:	e000ed00 	.word	0xe000ed00
   1bb64:	00029b08 	.word	0x00029b08
   1bb68:	00029a63 	.word	0x00029a63
   1bb6c:	00029b19 	.word	0x00029b19
   1bb70:	00029b32 	.word	0x00029b32
   1bb74:	00029b47 	.word	0x00029b47
   1bb78:	00029b62 	.word	0x00029b62
   1bb7c:	00029ac3 	.word	0x00029ac3

0001bb80 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1bb80:	b510      	push	{r4, lr}
   1bb82:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1bb84:	2402      	movs	r4, #2
   1bb86:	4b3a      	ldr	r3, [pc, #232]	; (1bc70 <usage_fault.constprop.0+0xf0>)
   1bb88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bb8c:	4839      	ldr	r0, [pc, #228]	; (1bc74 <usage_fault.constprop.0+0xf4>)
   1bb8e:	aa04      	add	r2, sp, #16
   1bb90:	9305      	str	r3, [sp, #20]
   1bb92:	9404      	str	r4, [sp, #16]
   1bb94:	f00a fc5f 	bl	26456 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1bb98:	4b37      	ldr	r3, [pc, #220]	; (1bc78 <usage_fault.constprop.0+0xf8>)
   1bb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bb9c:	019b      	lsls	r3, r3, #6
   1bb9e:	d508      	bpl.n	1bbb2 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   1bba0:	4b36      	ldr	r3, [pc, #216]	; (1bc7c <usage_fault.constprop.0+0xfc>)
   1bba2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bba6:	4833      	ldr	r0, [pc, #204]	; (1bc74 <usage_fault.constprop.0+0xf4>)
   1bba8:	aa04      	add	r2, sp, #16
   1bbaa:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1bbae:	f00a fc52 	bl	26456 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1bbb2:	4b31      	ldr	r3, [pc, #196]	; (1bc78 <usage_fault.constprop.0+0xf8>)
   1bbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bbb6:	01dc      	lsls	r4, r3, #7
   1bbb8:	d509      	bpl.n	1bbce <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   1bbba:	4b31      	ldr	r3, [pc, #196]	; (1bc80 <usage_fault.constprop.0+0x100>)
   1bbbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bbc0:	9305      	str	r3, [sp, #20]
   1bbc2:	2302      	movs	r3, #2
   1bbc4:	482b      	ldr	r0, [pc, #172]	; (1bc74 <usage_fault.constprop.0+0xf4>)
   1bbc6:	aa04      	add	r2, sp, #16
   1bbc8:	9304      	str	r3, [sp, #16]
   1bbca:	f00a fc44 	bl	26456 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1bbce:	4b2a      	ldr	r3, [pc, #168]	; (1bc78 <usage_fault.constprop.0+0xf8>)
   1bbd0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1bbd2:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   1bbd6:	d009      	beq.n	1bbec <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1bbd8:	2402      	movs	r4, #2
   1bbda:	4b2a      	ldr	r3, [pc, #168]	; (1bc84 <usage_fault.constprop.0+0x104>)
   1bbdc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bbe0:	4824      	ldr	r0, [pc, #144]	; (1bc74 <usage_fault.constprop.0+0xf4>)
   1bbe2:	aa04      	add	r2, sp, #16
   1bbe4:	9305      	str	r3, [sp, #20]
   1bbe6:	9404      	str	r4, [sp, #16]
   1bbe8:	f00a fc35 	bl	26456 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1bbec:	4b22      	ldr	r3, [pc, #136]	; (1bc78 <usage_fault.constprop.0+0xf8>)
   1bbee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bbf0:	0318      	lsls	r0, r3, #12
   1bbf2:	d509      	bpl.n	1bc08 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
   1bbf4:	4b24      	ldr	r3, [pc, #144]	; (1bc88 <usage_fault.constprop.0+0x108>)
   1bbf6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bbfa:	9305      	str	r3, [sp, #20]
   1bbfc:	2302      	movs	r3, #2
   1bbfe:	481d      	ldr	r0, [pc, #116]	; (1bc74 <usage_fault.constprop.0+0xf4>)
   1bc00:	aa04      	add	r2, sp, #16
   1bc02:	9304      	str	r3, [sp, #16]
   1bc04:	f00a fc27 	bl	26456 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1bc08:	4b1b      	ldr	r3, [pc, #108]	; (1bc78 <usage_fault.constprop.0+0xf8>)
   1bc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bc0c:	0359      	lsls	r1, r3, #13
   1bc0e:	d509      	bpl.n	1bc24 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1bc10:	4b1e      	ldr	r3, [pc, #120]	; (1bc8c <usage_fault.constprop.0+0x10c>)
   1bc12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc16:	9305      	str	r3, [sp, #20]
   1bc18:	2302      	movs	r3, #2
   1bc1a:	4816      	ldr	r0, [pc, #88]	; (1bc74 <usage_fault.constprop.0+0xf4>)
   1bc1c:	aa04      	add	r2, sp, #16
   1bc1e:	9304      	str	r3, [sp, #16]
   1bc20:	f00a fc19 	bl	26456 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1bc24:	4b14      	ldr	r3, [pc, #80]	; (1bc78 <usage_fault.constprop.0+0xf8>)
   1bc26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bc28:	039a      	lsls	r2, r3, #14
   1bc2a:	d509      	bpl.n	1bc40 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1bc2c:	4b18      	ldr	r3, [pc, #96]	; (1bc90 <usage_fault.constprop.0+0x110>)
   1bc2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc32:	9305      	str	r3, [sp, #20]
   1bc34:	2302      	movs	r3, #2
   1bc36:	480f      	ldr	r0, [pc, #60]	; (1bc74 <usage_fault.constprop.0+0xf4>)
   1bc38:	aa04      	add	r2, sp, #16
   1bc3a:	9304      	str	r3, [sp, #16]
   1bc3c:	f00a fc0b 	bl	26456 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1bc40:	4b0d      	ldr	r3, [pc, #52]	; (1bc78 <usage_fault.constprop.0+0xf8>)
   1bc42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bc44:	03db      	lsls	r3, r3, #15
   1bc46:	d509      	bpl.n	1bc5c <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1bc48:	4b12      	ldr	r3, [pc, #72]	; (1bc94 <usage_fault.constprop.0+0x114>)
   1bc4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc4e:	9305      	str	r3, [sp, #20]
   1bc50:	2302      	movs	r3, #2
   1bc52:	4808      	ldr	r0, [pc, #32]	; (1bc74 <usage_fault.constprop.0+0xf4>)
   1bc54:	aa04      	add	r2, sp, #16
   1bc56:	9304      	str	r3, [sp, #16]
   1bc58:	f00a fbfd 	bl	26456 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1bc5c:	4a06      	ldr	r2, [pc, #24]	; (1bc78 <usage_fault.constprop.0+0xf8>)

	return reason;
}
   1bc5e:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1bc60:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1bc62:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1bc66:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1bc6a:	6293      	str	r3, [r2, #40]	; 0x28
}
   1bc6c:	b006      	add	sp, #24
   1bc6e:	bd10      	pop	{r4, pc}
   1bc70:	00029b7a 	.word	0x00029b7a
   1bc74:	00028fa4 	.word	0x00028fa4
   1bc78:	e000ed00 	.word	0xe000ed00
   1bc7c:	00029b92 	.word	0x00029b92
   1bc80:	00029ba5 	.word	0x00029ba5
   1bc84:	00029bbf 	.word	0x00029bbf
   1bc88:	00029be9 	.word	0x00029be9
   1bc8c:	00029c07 	.word	0x00029c07
   1bc90:	00029c2c 	.word	0x00029c2c
   1bc94:	00029c46 	.word	0x00029c46

0001bc98 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1bc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bc9c:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1bc9e:	4b7d      	ldr	r3, [pc, #500]	; (1be94 <z_arm_fault+0x1fc>)
{
   1bca0:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1bca2:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
   1bca6:	468a      	mov	sl, r1
   1bca8:	4616      	mov	r6, r2
   1bcaa:	2500      	movs	r5, #0
   1bcac:	af00      	add	r7, sp, #0
   1bcae:	f3c9 0808 	ubfx	r8, r9, #0, #9
   1bcb2:	f385 8811 	msr	BASEPRI, r5
   1bcb6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1bcba:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1bcbe:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1bcc2:	d125      	bne.n	1bd10 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1bcc4:	07d3      	lsls	r3, r2, #31
   1bcc6:	d423      	bmi.n	1bd10 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1bcc8:	0650      	lsls	r0, r2, #25
   1bcca:	d403      	bmi.n	1bcd4 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1bccc:	0711      	lsls	r1, r2, #28
   1bcce:	d40f      	bmi.n	1bcf0 <z_arm_fault+0x58>
			*nested_exc = true;
   1bcd0:	2501      	movs	r5, #1
   1bcd2:	e00f      	b.n	1bcf4 <z_arm_fault+0x5c>
		PR_FAULT_INFO("Exception occurred in Secure State");
   1bcd4:	4b70      	ldr	r3, [pc, #448]	; (1be98 <z_arm_fault+0x200>)
   1bcd6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bcda:	61fb      	str	r3, [r7, #28]
   1bcdc:	2302      	movs	r3, #2
   1bcde:	486f      	ldr	r0, [pc, #444]	; (1be9c <z_arm_fault+0x204>)
   1bce0:	61bb      	str	r3, [r7, #24]
   1bce2:	f107 0218 	add.w	r2, r7, #24
   1bce6:	f00a fbb6 	bl	26456 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1bcea:	f016 0604 	ands.w	r6, r6, #4
   1bcee:	d000      	beq.n	1bcf2 <z_arm_fault+0x5a>
			ptr_esf = (z_arch_esf_t *)psp;
   1bcf0:	4654      	mov	r4, sl
	*nested_exc = false;
   1bcf2:	2500      	movs	r5, #0
	*recoverable = false;
   1bcf4:	2300      	movs	r3, #0
   1bcf6:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   1bcf8:	f1a8 0303 	sub.w	r3, r8, #3
   1bcfc:	2b09      	cmp	r3, #9
   1bcfe:	f200 80a8 	bhi.w	1be52 <z_arm_fault+0x1ba>
   1bd02:	e8df f003 	tbb	[pc, r3]
   1bd06:	9b07      	.short	0x9b07
   1bd08:	a6a6979e 	.word	0xa6a6979e
   1bd0c:	a1a6a6a6 	.word	0xa1a6a6a6
		return NULL;
   1bd10:	462c      	mov	r4, r5
   1bd12:	e7ef      	b.n	1bcf4 <z_arm_fault+0x5c>
	PR_FAULT_INFO("***** HARD FAULT *****");
   1bd14:	46e9      	mov	r9, sp
   1bd16:	f04f 0802 	mov.w	r8, #2
   1bd1a:	4b61      	ldr	r3, [pc, #388]	; (1bea0 <z_arm_fault+0x208>)
   1bd1c:	f107 0218 	add.w	r2, r7, #24
   1bd20:	61fb      	str	r3, [r7, #28]
   1bd22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bd26:	485d      	ldr	r0, [pc, #372]	; (1be9c <z_arm_fault+0x204>)
   1bd28:	f8c7 8018 	str.w	r8, [r7, #24]
   1bd2c:	f00a fb93 	bl	26456 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   1bd30:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1bd32:	4e58      	ldr	r6, [pc, #352]	; (1be94 <z_arm_fault+0x1fc>)
	*recoverable = false;
   1bd34:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1bd36:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1bd38:	079a      	lsls	r2, r3, #30
   1bd3a:	d50b      	bpl.n	1bd54 <z_arm_fault+0xbc>
		PR_EXC("  Bus fault on vector table read");
   1bd3c:	4b59      	ldr	r3, [pc, #356]	; (1bea4 <z_arm_fault+0x20c>)
		PR_EXC("  Debug event");
   1bd3e:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   1bd42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bd46:	4855      	ldr	r0, [pc, #340]	; (1be9c <z_arm_fault+0x204>)
   1bd48:	f107 0218 	add.w	r2, r7, #24
   1bd4c:	f00a fb83 	bl	26456 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1bd50:	2300      	movs	r3, #0
   1bd52:	e038      	b.n	1bdc6 <z_arm_fault+0x12e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1bd54:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1bd56:	2b00      	cmp	r3, #0
   1bd58:	da01      	bge.n	1bd5e <z_arm_fault+0xc6>
		PR_EXC("  Debug event");
   1bd5a:	4b53      	ldr	r3, [pc, #332]	; (1bea8 <z_arm_fault+0x210>)
   1bd5c:	e7ef      	b.n	1bd3e <z_arm_fault+0xa6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1bd5e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1bd60:	005b      	lsls	r3, r3, #1
   1bd62:	d5f5      	bpl.n	1bd50 <z_arm_fault+0xb8>
		PR_EXC("  Fault escalation (see below)");
   1bd64:	4b51      	ldr	r3, [pc, #324]	; (1beac <z_arm_fault+0x214>)
   1bd66:	f107 0218 	add.w	r2, r7, #24
   1bd6a:	e9c7 8306 	strd	r8, r3, [r7, #24]
   1bd6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bd72:	484a      	ldr	r0, [pc, #296]	; (1be9c <z_arm_fault+0x204>)
   1bd74:	f00a fb6f 	bl	26456 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1bd78:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   1bd7a:	69a2      	ldr	r2, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1bd7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1bd80:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1bd82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bd86:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1bd8a:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1bd8c:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1bd90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1bd94:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1bd96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bd9a:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1bd9e:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1bda2:	429a      	cmp	r2, r3
   1bda4:	d131      	bne.n	1be0a <z_arm_fault+0x172>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1bda6:	b088      	sub	sp, #32
   1bda8:	6823      	ldr	r3, [r4, #0]
   1bdaa:	466a      	mov	r2, sp
   1bdac:	4940      	ldr	r1, [pc, #256]	; (1beb0 <z_arm_fault+0x218>)
   1bdae:	483b      	ldr	r0, [pc, #236]	; (1be9c <z_arm_fault+0x204>)
   1bdb0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1bdb4:	2303      	movs	r3, #3
   1bdb6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bdba:	f842 3f10 	str.w	r3, [r2, #16]!
   1bdbe:	f00a fb4a 	bl	26456 <z_log_msg_static_create.constprop.0>
   1bdc2:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   1bdc4:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1bdc6:	79fa      	ldrb	r2, [r7, #7]
   1bdc8:	b9da      	cbnz	r2, 1be02 <z_arm_fault+0x16a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1bdca:	f107 0608 	add.w	r6, r7, #8
   1bdce:	f104 0c20 	add.w	ip, r4, #32
   1bdd2:	4632      	mov	r2, r6
   1bdd4:	6820      	ldr	r0, [r4, #0]
   1bdd6:	6861      	ldr	r1, [r4, #4]
   1bdd8:	3408      	adds	r4, #8
   1bdda:	c203      	stmia	r2!, {r0, r1}
   1bddc:	4564      	cmp	r4, ip
   1bdde:	4616      	mov	r6, r2
   1bde0:	d1f7      	bne.n	1bdd2 <z_arm_fault+0x13a>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1bde2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1bde4:	2d00      	cmp	r5, #0
   1bde6:	d050      	beq.n	1be8a <z_arm_fault+0x1f2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1bde8:	f3c2 0108 	ubfx	r1, r2, #0, #9
   1bdec:	b921      	cbnz	r1, 1bdf8 <z_arm_fault+0x160>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1bdee:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   1bdf2:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1bdf6:	627a      	str	r2, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1bdf8:	4618      	mov	r0, r3
   1bdfa:	f107 0108 	add.w	r1, r7, #8
   1bdfe:	f7ff fc03 	bl	1b608 <z_arm_fatal_error>
}
   1be02:	3728      	adds	r7, #40	; 0x28
   1be04:	46bd      	mov	sp, r7
   1be06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1be0a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1be0c:	b2db      	uxtb	r3, r3
   1be0e:	b123      	cbz	r3, 1be1a <z_arm_fault+0x182>
			reason = mem_manage_fault(esf, 1, recoverable);
   1be10:	2001      	movs	r0, #1
   1be12:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1be14:	f7ff fd80 	bl	1b918 <mem_manage_fault.constprop.0>
   1be18:	e00e      	b.n	1be38 <z_arm_fault+0x1a0>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1be1a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1be1c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   1be20:	d004      	beq.n	1be2c <z_arm_fault+0x194>
			reason = bus_fault(esf, 1, recoverable);
   1be22:	2001      	movs	r0, #1
   1be24:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
   1be26:	f7ff fe13 	bl	1ba50 <bus_fault.constprop.0>
   1be2a:	e005      	b.n	1be38 <z_arm_fault+0x1a0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1be2c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1be2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1be32:	d38d      	bcc.n	1bd50 <z_arm_fault+0xb8>
			reason = usage_fault(esf);
   1be34:	f7ff fea4 	bl	1bb80 <usage_fault.constprop.0>
   1be38:	4603      	mov	r3, r0
   1be3a:	e7c4      	b.n	1bdc6 <z_arm_fault+0x12e>
		reason = mem_manage_fault(esf, 0, recoverable);
   1be3c:	2000      	movs	r0, #0
   1be3e:	1df9      	adds	r1, r7, #7
   1be40:	e7e8      	b.n	1be14 <z_arm_fault+0x17c>
		reason = bus_fault(esf, 0, recoverable);
   1be42:	2000      	movs	r0, #0
   1be44:	1df9      	adds	r1, r7, #7
   1be46:	e7ee      	b.n	1be26 <z_arm_fault+0x18e>
	PR_FAULT_INFO(
   1be48:	4b1a      	ldr	r3, [pc, #104]	; (1beb4 <z_arm_fault+0x21c>)
   1be4a:	61fb      	str	r3, [r7, #28]
   1be4c:	2302      	movs	r3, #2
   1be4e:	61bb      	str	r3, [r7, #24]
   1be50:	e777      	b.n	1bd42 <z_arm_fault+0xaa>
	PR_FAULT_INFO("***** %s %d) *****",
   1be52:	4a19      	ldr	r2, [pc, #100]	; (1beb8 <z_arm_fault+0x220>)
   1be54:	466e      	mov	r6, sp
   1be56:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
   1be5a:	b08a      	sub	sp, #40	; 0x28
   1be5c:	4b17      	ldr	r3, [pc, #92]	; (1bebc <z_arm_fault+0x224>)
   1be5e:	bf18      	it	ne
   1be60:	4613      	movne	r3, r2
   1be62:	466a      	mov	r2, sp
   1be64:	4916      	ldr	r1, [pc, #88]	; (1bec0 <z_arm_fault+0x228>)
   1be66:	480d      	ldr	r0, [pc, #52]	; (1be9c <z_arm_fault+0x204>)
   1be68:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1be6c:	f1a8 0310 	sub.w	r3, r8, #16
   1be70:	61d3      	str	r3, [r2, #28]
   1be72:	f44f 7300 	mov.w	r3, #512	; 0x200
   1be76:	8413      	strh	r3, [r2, #32]
   1be78:	4b12      	ldr	r3, [pc, #72]	; (1bec4 <z_arm_fault+0x22c>)
   1be7a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1be7e:	f842 3f10 	str.w	r3, [r2, #16]!
   1be82:	f00a fae8 	bl	26456 <z_log_msg_static_create.constprop.0>
   1be86:	46b5      	mov	sp, r6
}
   1be88:	e762      	b.n	1bd50 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1be8a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
   1be8e:	f022 0201 	bic.w	r2, r2, #1
   1be92:	e7b0      	b.n	1bdf6 <z_arm_fault+0x15e>
   1be94:	e000ed00 	.word	0xe000ed00
   1be98:	00029c9f 	.word	0x00029c9f
   1be9c:	00028fa4 	.word	0x00028fa4
   1bea0:	00029cc2 	.word	0x00029cc2
   1bea4:	00029cd9 	.word	0x00029cd9
   1bea8:	00029cfa 	.word	0x00029cfa
   1beac:	00029d08 	.word	0x00029d08
   1beb0:	00029d27 	.word	0x00029d27
   1beb4:	00029d43 	.word	0x00029d43
   1beb8:	00029c86 	.word	0x00029c86
   1bebc:	00029c71 	.word	0x00029c71
   1bec0:	00029d67 	.word	0x00029d67
   1bec4:	01000004 	.word	0x01000004

0001bec8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1bec8:	4b04      	ldr	r3, [pc, #16]	; (1bedc <z_arm_fault_init+0x14>)
   1beca:	695a      	ldr	r2, [r3, #20]
   1becc:	f042 0210 	orr.w	r2, r2, #16
   1bed0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1bed2:	695a      	ldr	r2, [r3, #20]
   1bed4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1bed8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1beda:	4770      	bx	lr
   1bedc:	e000ed00 	.word	0xe000ed00

0001bee0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1bee0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1bee4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1bee8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1beea:	4672      	mov	r2, lr
	bl z_arm_fault
   1beec:	f7ff fed4 	bl	1bc98 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1bef0:	bd01      	pop	{r0, pc}
   1bef2:	bf00      	nop

0001bef4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1bef4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bef6:	2120      	movs	r1, #32
   1bef8:	4803      	ldr	r0, [pc, #12]	; (1bf08 <z_arm_interrupt_init+0x14>)
   1befa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1befc:	3301      	adds	r3, #1
   1befe:	2b41      	cmp	r3, #65	; 0x41
   1bf00:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1bf04:	d1f9      	bne.n	1befa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1bf06:	4770      	bx	lr
   1bf08:	e000e100 	.word	0xe000e100

0001bf0c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1bf0c:	2000      	movs	r0, #0
    msr CONTROL, r0
   1bf0e:	f380 8814 	msr	CONTROL, r0
    isb
   1bf12:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   1bf16:	2000      	movs	r0, #0
    msr MSPLIM, r0
   1bf18:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   1bf1c:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1bf20:	f7fe fc54 	bl	1a7cc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1bf24:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1bf26:	490e      	ldr	r1, [pc, #56]	; (1bf60 <__start+0x54>)
    str r0, [r1]
   1bf28:	6008      	str	r0, [r1, #0]
    dsb
   1bf2a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1bf2e:	480d      	ldr	r0, [pc, #52]	; (1bf64 <__start+0x58>)
    msr msp, r0
   1bf30:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1bf34:	f000 f83e 	bl	1bfb4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1bf38:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1bf3a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1bf3e:	480a      	ldr	r0, [pc, #40]	; (1bf68 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1bf40:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1bf44:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1bf46:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1bf4a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1bf4e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1bf50:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1bf52:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1bf56:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1bf5a:	f7ff fc05 	bl	1b768 <z_arm_prep_c>
   1bf5e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   1bf60:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1bf64:	2000fb38 	.word	0x2000fb38
    ldr r0, =z_interrupt_stacks
   1bf68:	2000e1f8 	.word	0x2000e1f8

0001bf6c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1bf6c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1bf70:	4905      	ldr	r1, [pc, #20]	; (1bf88 <sys_arch_reboot+0x1c>)
   1bf72:	4b06      	ldr	r3, [pc, #24]	; (1bf8c <sys_arch_reboot+0x20>)
   1bf74:	68ca      	ldr	r2, [r1, #12]
   1bf76:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1bf7a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1bf7c:	60cb      	str	r3, [r1, #12]
   1bf7e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1bf82:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1bf84:	e7fd      	b.n	1bf82 <sys_arch_reboot+0x16>
   1bf86:	bf00      	nop
   1bf88:	e000ed00 	.word	0xe000ed00
   1bf8c:	05fa0004 	.word	0x05fa0004

0001bf90 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   1bf90:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   1bf92:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1bf94:	4906      	ldr	r1, [pc, #24]	; (1bfb0 <z_arm_clear_arm_mpu_config+0x20>)
   1bf96:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   1bf9a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   1bf9e:	4293      	cmp	r3, r2
   1bfa0:	db00      	blt.n	1bfa4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1bfa2:	4770      	bx	lr
  mpu->RNR = rnr;
   1bfa4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   1bfa8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   1bfac:	3301      	adds	r3, #1
   1bfae:	e7f6      	b.n	1bf9e <z_arm_clear_arm_mpu_config+0xe>
   1bfb0:	e000ed00 	.word	0xe000ed00

0001bfb4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1bfb4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1bfb6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1bfb8:	2400      	movs	r4, #0
   1bfba:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1bfbe:	f7ff ffe7 	bl	1bf90 <z_arm_clear_arm_mpu_config>
   1bfc2:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1bfc4:	f04f 30ff 	mov.w	r0, #4294967295
   1bfc8:	4a0c      	ldr	r2, [pc, #48]	; (1bffc <z_arm_init_arch_hw_at_boot+0x48>)
   1bfca:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1bfce:	3301      	adds	r3, #1
   1bfd0:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   1bfd2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1bfd6:	d1f8      	bne.n	1bfca <z_arm_init_arch_hw_at_boot+0x16>
   1bfd8:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1bfda:	f04f 30ff 	mov.w	r0, #4294967295
   1bfde:	4a07      	ldr	r2, [pc, #28]	; (1bffc <z_arm_init_arch_hw_at_boot+0x48>)
   1bfe0:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1bfe4:	3301      	adds	r3, #1
   1bfe6:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1bfe8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1bfec:	d1f8      	bne.n	1bfe0 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1bfee:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1bff0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bff4:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1bff8:	bd10      	pop	{r4, pc}
   1bffa:	bf00      	nop
   1bffc:	e000e100 	.word	0xe000e100

0001c000 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1c000:	4b08      	ldr	r3, [pc, #32]	; (1c024 <z_impl_k_thread_abort+0x24>)
   1c002:	689b      	ldr	r3, [r3, #8]
   1c004:	4283      	cmp	r3, r0
   1c006:	d10b      	bne.n	1c020 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1c008:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1c00c:	b143      	cbz	r3, 1c020 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1c00e:	4b06      	ldr	r3, [pc, #24]	; (1c028 <z_impl_k_thread_abort+0x28>)
   1c010:	685a      	ldr	r2, [r3, #4]
   1c012:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1c016:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1c018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1c01a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1c01e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   1c020:	f008 bc08 	b.w	24834 <z_thread_abort>
   1c024:	2000d848 	.word	0x2000d848
   1c028:	e000ed00 	.word	0xe000ed00

0001c02c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1c02c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1c02e:	4c09      	ldr	r4, [pc, #36]	; (1c054 <z_arm_configure_static_mpu_regions+0x28>)
   1c030:	4a09      	ldr	r2, [pc, #36]	; (1c058 <z_arm_configure_static_mpu_regions+0x2c>)
   1c032:	4623      	mov	r3, r4
   1c034:	2101      	movs	r1, #1
   1c036:	4809      	ldr	r0, [pc, #36]	; (1c05c <z_arm_configure_static_mpu_regions+0x30>)
   1c038:	f000 f92a 	bl	1c290 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1c03c:	2300      	movs	r3, #0
   1c03e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1c040:	4b07      	ldr	r3, [pc, #28]	; (1c060 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c042:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1c044:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c046:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1c048:	9301      	str	r3, [sp, #4]
   1c04a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c04c:	f000 f92a 	bl	1c2a4 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1c050:	b004      	add	sp, #16
   1c052:	bd10      	pop	{r4, pc}
   1c054:	20040000 	.word	0x20040000
   1c058:	2000c580 	.word	0x2000c580
   1c05c:	00029084 	.word	0x00029084
   1c060:	2000c938 	.word	0x2000c938

0001c064 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   1c064:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   1c066:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1c068:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1c06a:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1c06e:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   1c072:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1c074:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1c076:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1c078:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   1c07c:	4905      	ldr	r1, [pc, #20]	; (1c094 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1c07e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1c082:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   1c086:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   1c08a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   1c08e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1c092:	bd10      	pop	{r4, pc}
   1c094:	e000ed00 	.word	0xe000ed00

0001c098 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   1c098:	b580      	push	{r7, lr}
   1c09a:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1c09c:	b088      	sub	sp, #32
   1c09e:	466a      	mov	r2, sp
   1c0a0:	4b07      	ldr	r3, [pc, #28]	; (1c0c0 <region_allocate_and_init.part.0+0x28>)
   1c0a2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c0a6:	2303      	movs	r3, #3
   1c0a8:	f842 3f10 	str.w	r3, [r2, #16]!
   1c0ac:	2300      	movs	r3, #0
   1c0ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c0b2:	4804      	ldr	r0, [pc, #16]	; (1c0c4 <region_allocate_and_init.part.0+0x2c>)
   1c0b4:	f7fe fe12 	bl	1acdc <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   1c0b8:	f06f 0015 	mvn.w	r0, #21
   1c0bc:	46bd      	mov	sp, r7
   1c0be:	bd80      	pop	{r7, pc}
   1c0c0:	00029d7e 	.word	0x00029d7e
   1c0c4:	00028f34 	.word	0x00028f34

0001c0c8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0cc:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1c0ce:	4606      	mov	r6, r0
   1c0d0:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1c0d4:	b087      	sub	sp, #28
	MPU->RNR = rnr;
   1c0d6:	4d5f      	ldr	r5, [pc, #380]	; (1c254 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1c0d8:	af00      	add	r7, sp, #0
   1c0da:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
   1c0dc:	687b      	ldr	r3, [r7, #4]
   1c0de:	4599      	cmp	r9, r3
   1c0e0:	da35      	bge.n	1c14e <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
   1c0e2:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1c0e6:	f1b8 0f00 	cmp.w	r8, #0
   1c0ea:	d054      	beq.n	1c196 <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
   1c0ec:	f1b8 0f1f 	cmp.w	r8, #31
   1c0f0:	d91b      	bls.n	1c12a <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
   1c0f2:	f018 0f1f 	tst.w	r8, #31
   1c0f6:	d118      	bne.n	1c12a <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
   1c0f8:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   1c0fc:	f01b 0f1f 	tst.w	fp, #31
   1c100:	d113      	bne.n	1c12a <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1c102:	4658      	mov	r0, fp
   1c104:	f00a f9ac 	bl	26460 <arm_cmse_mpu_region_get>
   1c108:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1c10a:	eb08 000b 	add.w	r0, r8, fp
   1c10e:	3801      	subs	r0, #1
   1c110:	f00a f9a6 	bl	26460 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1c114:	4582      	cmp	sl, r0
   1c116:	d01f      	beq.n	1c158 <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   1c118:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1c11c:	466c      	mov	r4, sp
   1c11e:	b088      	sub	sp, #32
   1c120:	466a      	mov	r2, sp
   1c122:	494d      	ldr	r1, [pc, #308]	; (1c258 <mpu_configure_regions_and_partition.constprop.0+0x190>)
   1c124:	e9c2 1a05 	strd	r1, sl, [r2, #20]
   1c128:	e005      	b.n	1c136 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1c12a:	466c      	mov	r4, sp
   1c12c:	b088      	sub	sp, #32
   1c12e:	466a      	mov	r2, sp
   1c130:	4b4a      	ldr	r3, [pc, #296]	; (1c25c <mpu_configure_regions_and_partition.constprop.0+0x194>)
   1c132:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
   1c136:	2303      	movs	r3, #3
   1c138:	f842 3f10 	str.w	r3, [r2, #16]!
   1c13c:	2300      	movs	r3, #0
   1c13e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c142:	4847      	ldr	r0, [pc, #284]	; (1c260 <mpu_configure_regions_and_partition.constprop.0+0x198>)
   1c144:	f7fe fdca 	bl	1acdc <z_impl_z_log_msg_static_create>
   1c148:	46a5      	mov	sp, r4
			return -EINVAL;
   1c14a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1c14e:	4620      	mov	r0, r4
   1c150:	371c      	adds	r7, #28
   1c152:	46bd      	mov	sp, r7
   1c154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   1c158:	f11a 0f16 	cmn.w	sl, #22
   1c15c:	d0de      	beq.n	1c11c <mpu_configure_regions_and_partition.constprop.0+0x54>
   1c15e:	4554      	cmp	r4, sl
   1c160:	dddc      	ble.n	1c11c <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
   1c162:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1c166:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   1c16a:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
   1c16e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1c172:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1c176:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1c17a:	e9d6 2100 	ldrd	r2, r1, [r6]
   1c17e:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
   1c180:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1c182:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
   1c186:	d11e      	bne.n	1c1c6 <mpu_configure_regions_and_partition.constprop.0+0xfe>
   1c188:	45d8      	cmp	r8, fp
   1c18a:	d108      	bne.n	1c19e <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
   1c18c:	4631      	mov	r1, r6
   1c18e:	fa5f f08a 	uxtb.w	r0, sl
   1c192:	f00a f96e 	bl	26472 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1c196:	f109 0901 	add.w	r9, r9, #1
   1c19a:	360c      	adds	r6, #12
   1c19c:	e79e      	b.n	1c0dc <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
   1c19e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1c1a2:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   1c1a6:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   1c1aa:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   1c1ae:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
   1c1b0:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
   1c1b2:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   1c1b6:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   1c1b8:	f00a f95b 	bl	26472 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1c1bc:	f110 0f16 	cmn.w	r0, #22
   1c1c0:	d0c3      	beq.n	1c14a <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
   1c1c2:	1c44      	adds	r4, r0, #1
   1c1c4:	e7e7      	b.n	1c196 <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
   1c1c6:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
   1c1c8:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
   1c1ca:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1c1cc:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   1c1d0:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   1c1d4:	d108      	bne.n	1c1e8 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
   1c1d6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1c1da:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   1c1dc:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1c1e0:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   1c1e2:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   1c1e6:	e7e7      	b.n	1c1b8 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
   1c1e8:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   1c1ec:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1c1f0:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
   1c1f2:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1c1f6:	4631      	mov	r1, r6
   1c1f8:	f00a f93b 	bl	26472 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1c1fc:	f110 0f16 	cmn.w	r0, #22
   1c200:	d0a3      	beq.n	1c14a <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
   1c202:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1c206:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1c20a:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   1c20c:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
   1c210:	f362 0304 	bfi	r3, r2, #0, #5
   1c214:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
   1c216:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1c21a:	7c3a      	ldrb	r2, [r7, #16]
   1c21c:	085b      	lsrs	r3, r3, #1
   1c21e:	f363 1247 	bfi	r2, r3, #5, #3
   1c222:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
   1c224:	e9d6 3200 	ldrd	r3, r2, [r6]
   1c228:	4413      	add	r3, r2
   1c22a:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   1c22c:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   1c230:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1c232:	4443      	add	r3, r8
   1c234:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
   1c238:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   1c23a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1c23e:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   1c240:	617b      	str	r3, [r7, #20]
   1c242:	d902      	bls.n	1c24a <mpu_configure_regions_and_partition.constprop.0+0x182>
   1c244:	f7ff ff28 	bl	1c098 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   1c248:	e7b8      	b.n	1c1bc <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
   1c24a:	f107 0108 	add.w	r1, r7, #8
   1c24e:	f7ff ff09 	bl	1c064 <region_init>
   1c252:	e7b6      	b.n	1c1c2 <mpu_configure_regions_and_partition.constprop.0+0xfa>
   1c254:	e000ed00 	.word	0xe000ed00
   1c258:	00029dc7 	.word	0x00029dc7
   1c25c:	00029da4 	.word	0x00029da4
   1c260:	00028f34 	.word	0x00028f34

0001c264 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1c264:	2205      	movs	r2, #5
   1c266:	4b04      	ldr	r3, [pc, #16]	; (1c278 <arm_core_mpu_enable+0x14>)
   1c268:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1c26c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c270:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1c274:	4770      	bx	lr
   1c276:	bf00      	nop
   1c278:	e000ed00 	.word	0xe000ed00

0001c27c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1c27c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1c280:	2200      	movs	r2, #0
   1c282:	4b02      	ldr	r3, [pc, #8]	; (1c28c <arm_core_mpu_disable+0x10>)
   1c284:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   1c288:	4770      	bx	lr
   1c28a:	bf00      	nop
   1c28c:	e000ed00 	.word	0xe000ed00

0001c290 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1c290:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1c292:	4c03      	ldr	r4, [pc, #12]	; (1c2a0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1c294:	7822      	ldrb	r2, [r4, #0]
   1c296:	f7ff ff17 	bl	1c0c8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1c29a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1c29c:	bd10      	pop	{r4, pc}
   1c29e:	bf00      	nop
   1c2a0:	2000d89e 	.word	0x2000d89e

0001c2a4 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   1c2a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2a8:	4d29      	ldr	r5, [pc, #164]	; (1c350 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
   1c2aa:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
   1c2ac:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1c2ae:	f04f 0800 	mov.w	r8, #0
   1c2b2:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
   1c2b4:	4f27      	ldr	r7, [pc, #156]	; (1c354 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1c2b6:	45d0      	cmp	r8, sl
   1c2b8:	da1b      	bge.n	1c2f2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   1c2ba:	f8d6 9004 	ldr.w	r9, [r6, #4]
   1c2be:	f1b9 0f00 	cmp.w	r9, #0
   1c2c2:	d03f      	beq.n	1c344 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1c2c4:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1c2c6:	4608      	mov	r0, r1
   1c2c8:	9101      	str	r1, [sp, #4]
   1c2ca:	f00a f8c9 	bl	26460 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1c2ce:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1c2d0:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1c2d2:	eb09 0001 	add.w	r0, r9, r1
   1c2d6:	3801      	subs	r0, #1
   1c2d8:	f00a f8c2 	bl	26460 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1c2dc:	4284      	cmp	r4, r0
   1c2de:	f04f 0214 	mov.w	r2, #20
   1c2e2:	4b1d      	ldr	r3, [pc, #116]	; (1c358 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
   1c2e4:	d008      	beq.n	1c2f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   1c2e6:	fb02 f308 	mul.w	r3, r2, r8
   1c2ea:	f06f 0215 	mvn.w	r2, #21
   1c2ee:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   1c2f2:	b003      	add	sp, #12
   1c2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1c2f8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   1c2fc:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1c2fe:	d0f8      	beq.n	1c2f2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1c300:	7819      	ldrb	r1, [r3, #0]
   1c302:	42a1      	cmp	r1, r4
   1c304:	ddf5      	ble.n	1c2f2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
   1c306:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   1c30a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   1c30e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   1c312:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1c316:	f100 0108 	add.w	r1, r0, #8
   1c31a:	7b00      	ldrb	r0, [r0, #12]
   1c31c:	f364 0004 	bfi	r0, r4, #0, #5
   1c320:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   1c322:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1c326:	790c      	ldrb	r4, [r1, #4]
   1c328:	0840      	lsrs	r0, r0, #1
   1c32a:	f360 1447 	bfi	r4, r0, #5, #3
   1c32e:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   1c330:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1c334:	f021 011f 	bic.w	r1, r1, #31
   1c338:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
   1c33a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   1c33e:	f021 011f 	bic.w	r1, r1, #31
   1c342:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1c344:	f108 0801 	add.w	r8, r8, #1
   1c348:	3514      	adds	r5, #20
   1c34a:	360c      	adds	r6, #12
   1c34c:	e7b3      	b.n	1c2b6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1c34e:	bf00      	nop
   1c350:	2000d134 	.word	0x2000d134
   1c354:	e000ed00 	.word	0xe000ed00
   1c358:	2000d89e 	.word	0x2000d89e

0001c35c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   1c35c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1c35e:	4d0e      	ldr	r5, [pc, #56]	; (1c398 <z_arm_mpu_init+0x3c>)
   1c360:	682c      	ldr	r4, [r5, #0]
   1c362:	2c10      	cmp	r4, #16
   1c364:	d815      	bhi.n	1c392 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1c366:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   1c368:	f7ff ff88 	bl	1c27c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   1c36c:	4b0b      	ldr	r3, [pc, #44]	; (1c39c <z_arm_mpu_init+0x40>)
   1c36e:	4a0c      	ldr	r2, [pc, #48]	; (1c3a0 <z_arm_mpu_init+0x44>)
   1c370:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1c374:	4284      	cmp	r4, r0
   1c376:	d105      	bne.n	1c384 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1c378:	4b0a      	ldr	r3, [pc, #40]	; (1c3a4 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1c37a:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
   1c37c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   1c37e:	f7ff ff71 	bl	1c264 <arm_core_mpu_enable>
}
   1c382:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1c384:	6869      	ldr	r1, [r5, #4]
   1c386:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1c38a:	f7ff fe6b 	bl	1c064 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1c38e:	3001      	adds	r0, #1
   1c390:	e7f0      	b.n	1c374 <z_arm_mpu_init+0x18>
		return -1;
   1c392:	f04f 30ff 	mov.w	r0, #4294967295
   1c396:	e7f4      	b.n	1c382 <z_arm_mpu_init+0x26>
   1c398:	00029090 	.word	0x00029090
   1c39c:	e000ed00 	.word	0xe000ed00
   1c3a0:	0044ffaa 	.word	0x0044ffaa
   1c3a4:	2000d89e 	.word	0x2000d89e

0001c3a8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1c3a8:	4b01      	ldr	r3, [pc, #4]	; (1c3b0 <__stdout_hook_install+0x8>)
   1c3aa:	6018      	str	r0, [r3, #0]
}
   1c3ac:	4770      	bx	lr
   1c3ae:	bf00      	nop
   1c3b0:	2000c590 	.word	0x2000c590

0001c3b4 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   1c3b4:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   1c3b6:	4c07      	ldr	r4, [pc, #28]	; (1c3d4 <_sbrk+0x20>)
   1c3b8:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1c3ba:	18c2      	adds	r2, r0, r3
   1c3bc:	4806      	ldr	r0, [pc, #24]	; (1c3d8 <_sbrk+0x24>)
   1c3be:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1c3c2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1c3c6:	428a      	cmp	r2, r1
		heap_sz += count;
   1c3c8:	bf36      	itet	cc
   1c3ca:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   1c3cc:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1c3d0:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   1c3d2:	bd10      	pop	{r4, pc}
   1c3d4:	2000d148 	.word	0x2000d148
   1c3d8:	200107b8 	.word	0x200107b8

0001c3dc <thingy91_board_init>:

	return 0;
}

static int thingy91_board_init(const struct device *dev)
{
   1c3dc:	b5b0      	push	{r4, r5, r7, lr}
	err = adp536x_init(ADP536X_I2C_DEVICE);
   1c3de:	483e      	ldr	r0, [pc, #248]	; (1c4d8 <thingy91_board_init+0xfc>)
{
   1c3e0:	af00      	add	r7, sp, #0
	err = adp536x_init(ADP536X_I2C_DEVICE);
   1c3e2:	f7ff f8e3 	bl	1b5ac <adp536x_init>
	if (err) {
   1c3e6:	4604      	mov	r4, r0
   1c3e8:	b300      	cbz	r0, 1c42c <thingy91_board_init+0x50>
		LOG_ERR("ADP536X failed to initialize, error: %d\n", err);
   1c3ea:	466d      	mov	r5, sp
   1c3ec:	b088      	sub	sp, #32
   1c3ee:	466a      	mov	r2, sp
   1c3f0:	4b3a      	ldr	r3, [pc, #232]	; (1c4dc <thingy91_board_init+0x100>)
		LOG_ERR("Could not enable fuel gauge: %d", err);
   1c3f2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c3f6:	2303      	movs	r3, #3
   1c3f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c3fc:	4838      	ldr	r0, [pc, #224]	; (1c4e0 <thingy91_board_init+0x104>)
   1c3fe:	f842 3f10 	str.w	r3, [r2, #16]!
   1c402:	f00a f865 	bl	264d0 <z_log_msg_static_create.constprop.0>
   1c406:	46ad      	mov	sp, r5
	int err;

	err = power_mgmt_init();
	if (err) {
		LOG_ERR("power_mgmt_init failed with error: %d", err);
   1c408:	466d      	mov	r5, sp
   1c40a:	b088      	sub	sp, #32
   1c40c:	466a      	mov	r2, sp
   1c40e:	4b35      	ldr	r3, [pc, #212]	; (1c4e4 <thingy91_board_init+0x108>)
   1c410:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c414:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c418:	2303      	movs	r3, #3
   1c41a:	4831      	ldr	r0, [pc, #196]	; (1c4e0 <thingy91_board_init+0x104>)
   1c41c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c420:	f00a f856 	bl	264d0 <z_log_msg_static_create.constprop.0>
   1c424:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   1c426:	4620      	mov	r0, r4
   1c428:	46bd      	mov	sp, r7
   1c42a:	bdb0      	pop	{r4, r5, r7, pc}
	err = adp536x_buck_1v8_set();
   1c42c:	f009 ffe0 	bl	263f0 <adp536x_buck_1v8_set>
	if (err) {
   1c430:	4604      	mov	r4, r0
   1c432:	b120      	cbz	r0, 1c43e <thingy91_board_init+0x62>
		LOG_ERR("Could not set buck to 1.8 V, error: %d\n", err);
   1c434:	466d      	mov	r5, sp
   1c436:	b088      	sub	sp, #32
   1c438:	466a      	mov	r2, sp
   1c43a:	4b2b      	ldr	r3, [pc, #172]	; (1c4e8 <thingy91_board_init+0x10c>)
   1c43c:	e7d9      	b.n	1c3f2 <thingy91_board_init+0x16>
	err = adp536x_buckbst_3v3_set();
   1c43e:	f009 ffe3 	bl	26408 <adp536x_buckbst_3v3_set>
	if (err) {
   1c442:	4604      	mov	r4, r0
   1c444:	b120      	cbz	r0, 1c450 <thingy91_board_init+0x74>
		LOG_ERR("Could not set buck/boost to 3.3 V, error: %d\n", err);
   1c446:	466d      	mov	r5, sp
   1c448:	b088      	sub	sp, #32
   1c44a:	466a      	mov	r2, sp
   1c44c:	4b27      	ldr	r3, [pc, #156]	; (1c4ec <thingy91_board_init+0x110>)
   1c44e:	e7d0      	b.n	1c3f2 <thingy91_board_init+0x16>
	err = adp536x_buckbst_enable(true);
   1c450:	2001      	movs	r0, #1
   1c452:	f009 ffde 	bl	26412 <adp536x_buckbst_enable>
	if (err) {
   1c456:	4604      	mov	r4, r0
   1c458:	b120      	cbz	r0, 1c464 <thingy91_board_init+0x88>
		LOG_ERR("Could not enable buck/boost output, error: %d\n", err);
   1c45a:	466d      	mov	r5, sp
   1c45c:	b088      	sub	sp, #32
   1c45e:	466a      	mov	r2, sp
   1c460:	4b23      	ldr	r3, [pc, #140]	; (1c4f0 <thingy91_board_init+0x114>)
   1c462:	e7c6      	b.n	1c3f2 <thingy91_board_init+0x16>
	err = adp536x_buck_discharge_set(true);
   1c464:	2001      	movs	r0, #1
   1c466:	f009 ffc8 	bl	263fa <adp536x_buck_discharge_set>
	if (err) {
   1c46a:	4604      	mov	r4, r0
   1c46c:	2800      	cmp	r0, #0
   1c46e:	d1cb      	bne.n	1c408 <thingy91_board_init+0x2c>
	err = adp536x_vbus_current_set(ADP536X_VBUS_ILIM_500mA);
   1c470:	2007      	movs	r0, #7
   1c472:	f009 ffab 	bl	263cc <adp536x_vbus_current_set>
	if (err) {
   1c476:	4604      	mov	r4, r0
   1c478:	b120      	cbz	r0, 1c484 <thingy91_board_init+0xa8>
		LOG_ERR("Could not set VBUS current limit, error: %d\n", err);
   1c47a:	466d      	mov	r5, sp
   1c47c:	b088      	sub	sp, #32
   1c47e:	466a      	mov	r2, sp
   1c480:	4b1c      	ldr	r3, [pc, #112]	; (1c4f4 <thingy91_board_init+0x118>)
   1c482:	e7b6      	b.n	1c3f2 <thingy91_board_init+0x16>
	err = adp536x_charger_current_set(ADP536X_CHG_CURRENT_320mA);
   1c484:	201f      	movs	r0, #31
   1c486:	f009 ff9b 	bl	263c0 <adp536x_charger_current_set>
	if (err) {
   1c48a:	4604      	mov	r4, r0
   1c48c:	b120      	cbz	r0, 1c498 <thingy91_board_init+0xbc>
		LOG_ERR("Could not set charging current, error: %d\n", err);
   1c48e:	466d      	mov	r5, sp
   1c490:	b088      	sub	sp, #32
   1c492:	466a      	mov	r2, sp
   1c494:	4b18      	ldr	r3, [pc, #96]	; (1c4f8 <thingy91_board_init+0x11c>)
   1c496:	e7ac      	b.n	1c3f2 <thingy91_board_init+0x16>
	err = adp536x_oc_chg_current_set(ADP536X_OC_CHG_THRESHOLD_400mA);
   1c498:	2007      	movs	r0, #7
   1c49a:	f009 ffa2 	bl	263e2 <adp536x_oc_chg_current_set>
	if (err) {
   1c49e:	4604      	mov	r4, r0
   1c4a0:	b120      	cbz	r0, 1c4ac <thingy91_board_init+0xd0>
		LOG_ERR("Could not set charge current protection, error: %d\n",
   1c4a2:	466d      	mov	r5, sp
   1c4a4:	b088      	sub	sp, #32
   1c4a6:	466a      	mov	r2, sp
   1c4a8:	4b14      	ldr	r3, [pc, #80]	; (1c4fc <thingy91_board_init+0x120>)
   1c4aa:	e7a2      	b.n	1c3f2 <thingy91_board_init+0x16>
	err = adp536x_charging_enable(true);
   1c4ac:	2001      	movs	r0, #1
   1c4ae:	f009 ff93 	bl	263d8 <adp536x_charging_enable>
	if (err) {
   1c4b2:	4604      	mov	r4, r0
   1c4b4:	b120      	cbz	r0, 1c4c0 <thingy91_board_init+0xe4>
		LOG_ERR("Could not enable charging: %d\n", err);
   1c4b6:	466d      	mov	r5, sp
   1c4b8:	b088      	sub	sp, #32
   1c4ba:	466a      	mov	r2, sp
   1c4bc:	4b10      	ldr	r3, [pc, #64]	; (1c500 <thingy91_board_init+0x124>)
   1c4be:	e798      	b.n	1c3f2 <thingy91_board_init+0x16>
	err = adp536x_fg_set_mode(ADP566X_FG_ENABLED, ADP566X_FG_MODE_SLEEP);
   1c4c0:	2101      	movs	r1, #1
   1c4c2:	4608      	mov	r0, r1
   1c4c4:	f009 ffaa 	bl	2641c <adp536x_fg_set_mode>
	if (err) {
   1c4c8:	4604      	mov	r4, r0
   1c4ca:	2800      	cmp	r0, #0
   1c4cc:	d0ab      	beq.n	1c426 <thingy91_board_init+0x4a>
		LOG_ERR("Could not enable fuel gauge: %d", err);
   1c4ce:	466d      	mov	r5, sp
   1c4d0:	b088      	sub	sp, #32
   1c4d2:	466a      	mov	r2, sp
   1c4d4:	4b0b      	ldr	r3, [pc, #44]	; (1c504 <thingy91_board_init+0x128>)
   1c4d6:	e78c      	b.n	1c3f2 <thingy91_board_init+0x16>
   1c4d8:	00028c1c 	.word	0x00028c1c
   1c4dc:	00029df9 	.word	0x00029df9
   1c4e0:	00028ecc 	.word	0x00028ecc
   1c4e4:	00029f72 	.word	0x00029f72
   1c4e8:	00029e22 	.word	0x00029e22
   1c4ec:	00029e4a 	.word	0x00029e4a
   1c4f0:	00029e78 	.word	0x00029e78
   1c4f4:	00029ea7 	.word	0x00029ea7
   1c4f8:	00029ed4 	.word	0x00029ed4
   1c4fc:	00029eff 	.word	0x00029eff
   1c500:	00029f33 	.word	0x00029f33
   1c504:	00029f52 	.word	0x00029f52

0001c508 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   1c508:	4602      	mov	r2, r0
   1c50a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1c50c:	4801      	ldr	r0, [pc, #4]	; (1c514 <k_mutex_lock.constprop.0.isra.0+0xc>)
   1c50e:	f007 bc3d 	b.w	23d8c <z_impl_k_mutex_lock>
   1c512:	bf00      	nop
   1c514:	2000c8a0 	.word	0x2000c8a0

0001c518 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1c518:	4801      	ldr	r0, [pc, #4]	; (1c520 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1c51a:	f007 bcb1 	b.w	23e80 <z_impl_k_mutex_unlock>
   1c51e:	bf00      	nop
   1c520:	2000c8a0 	.word	0x2000c8a0

0001c524 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1c524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   1c526:	f04f 30ff 	mov.w	r0, #4294967295
   1c52a:	f04f 31ff 	mov.w	r1, #4294967295
   1c52e:	f7ff ffeb 	bl	1c508 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   1c532:	4c0c      	ldr	r4, [pc, #48]	; (1c564 <net_if_init+0x40>)
   1c534:	4e0c      	ldr	r6, [pc, #48]	; (1c568 <net_if_init+0x44>)
   1c536:	42b4      	cmp	r4, r6
   1c538:	4627      	mov	r7, r4
   1c53a:	d303      	bcc.n	1c544 <net_if_init+0x20>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   1c53c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   1c540:	f7ff bfea 	b.w	1c518 <k_mutex_unlock.constprop.0.isra.0>
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   1c544:	f854 0b04 	ldr.w	r0, [r4], #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1c548:	6803      	ldr	r3, [r0, #0]
   1c54a:	689d      	ldr	r5, [r3, #8]
	if (!api || !api->init) {
   1c54c:	2d00      	cmp	r5, #0
   1c54e:	d0f2      	beq.n	1c536 <net_if_init+0x12>
   1c550:	682b      	ldr	r3, [r5, #0]
   1c552:	2b00      	cmp	r3, #0
   1c554:	d0ef      	beq.n	1c536 <net_if_init+0x12>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
   1c556:	2109      	movs	r1, #9
   1c558:	f00a f83c 	bl	265d4 <net_if_flag_test_and_set.isra.0>
	api->init(iface);
   1c55c:	4638      	mov	r0, r7
   1c55e:	682b      	ldr	r3, [r5, #0]
   1c560:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1c562:	e7e8      	b.n	1c536 <net_if_init+0x12>
   1c564:	2000c90c 	.word	0x2000c90c
   1c568:	2000c910 	.word	0x2000c910

0001c56c <net_if_post_init>:

void net_if_post_init(void)
{
   1c56c:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1c56e:	4c07      	ldr	r4, [pc, #28]	; (1c58c <net_if_post_init+0x20>)
   1c570:	4d07      	ldr	r5, [pc, #28]	; (1c590 <net_if_post_init+0x24>)
   1c572:	42ac      	cmp	r4, r5
   1c574:	d300      	bcc.n	1c578 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1c576:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1c578:	2103      	movs	r1, #3
   1c57a:	4620      	mov	r0, r4
   1c57c:	f009 ffd6 	bl	2652c <net_if_flag_is_set>
   1c580:	b910      	cbnz	r0, 1c588 <net_if_post_init+0x1c>
			net_if_up(iface);
   1c582:	4620      	mov	r0, r4
   1c584:	f00a f838 	bl	265f8 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1c588:	3404      	adds	r4, #4
   1c58a:	e7f2      	b.n	1c572 <net_if_post_init+0x6>
   1c58c:	2000c90c 	.word	0x2000c90c
   1c590:	2000c910 	.word	0x2000c910

0001c594 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1c594:	4b08      	ldr	r3, [pc, #32]	; (1c5b8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1c596:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1c598:	1ac3      	subs	r3, r0, r3
{
   1c59a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c59c:	4907      	ldr	r1, [pc, #28]	; (1c5bc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1c59e:	109b      	asrs	r3, r3, #2
{
   1c5a0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c5a2:	4359      	muls	r1, r3
   1c5a4:	2240      	movs	r2, #64	; 0x40
   1c5a6:	4806      	ldr	r0, [pc, #24]	; (1c5c0 <onoff_stop+0x2c>)
   1c5a8:	f00a f86e 	bl	26688 <stop>
	notify(mgr, res);
   1c5ac:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c5ae:	4601      	mov	r1, r0
	notify(mgr, res);
   1c5b0:	4620      	mov	r0, r4
}
   1c5b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1c5b6:	4718      	bx	r3
   1c5b8:	2000d160 	.word	0x2000d160
   1c5bc:	b6db6db7 	.word	0xb6db6db7
   1c5c0:	00028ba4 	.word	0x00028ba4

0001c5c4 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c5c4:	2340      	movs	r3, #64	; 0x40
{
   1c5c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1c5c8:	4c0b      	ldr	r4, [pc, #44]	; (1c5f8 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c5ca:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1c5cc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c5ce:	460b      	mov	r3, r1
{
   1c5d0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c5d2:	490a      	ldr	r1, [pc, #40]	; (1c5fc <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   1c5d4:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c5d6:	4361      	muls	r1, r4
{
   1c5d8:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c5da:	4a09      	ldr	r2, [pc, #36]	; (1c600 <onoff_start+0x3c>)
   1c5dc:	4809      	ldr	r0, [pc, #36]	; (1c604 <onoff_start+0x40>)
   1c5de:	f00a f87f 	bl	266e0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1c5e2:	1e01      	subs	r1, r0, #0
   1c5e4:	da05      	bge.n	1c5f2 <onoff_start+0x2e>
		notify(mgr, err);
   1c5e6:	4630      	mov	r0, r6
   1c5e8:	462b      	mov	r3, r5
	}
}
   1c5ea:	b002      	add	sp, #8
   1c5ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1c5f0:	4718      	bx	r3
}
   1c5f2:	b002      	add	sp, #8
   1c5f4:	bd70      	pop	{r4, r5, r6, pc}
   1c5f6:	bf00      	nop
   1c5f8:	2000d160 	.word	0x2000d160
   1c5fc:	b6db6db7 	.word	0xb6db6db7
   1c600:	0002674b 	.word	0x0002674b
   1c604:	00028ba4 	.word	0x00028ba4

0001c608 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1c608:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c60a:	2200      	movs	r2, #0
   1c60c:	2101      	movs	r1, #1
{
   1c60e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c610:	2005      	movs	r0, #5
   1c612:	f7ff f88f 	bl	1b734 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1c616:	480f      	ldr	r0, [pc, #60]	; (1c654 <clk_init+0x4c>)
   1c618:	f004 f9f8 	bl	20a0c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1c61c:	4b0e      	ldr	r3, [pc, #56]	; (1c658 <clk_init+0x50>)
   1c61e:	4298      	cmp	r0, r3
   1c620:	d115      	bne.n	1c64e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1c622:	f004 fa03 	bl	20a2c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1c626:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c628:	490c      	ldr	r1, [pc, #48]	; (1c65c <clk_init+0x54>)
   1c62a:	4630      	mov	r0, r6
   1c62c:	f009 fb64 	bl	25cf8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1c630:	2800      	cmp	r0, #0
   1c632:	db0b      	blt.n	1c64c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c634:	2501      	movs	r5, #1
   1c636:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   1c638:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c63a:	4908      	ldr	r1, [pc, #32]	; (1c65c <clk_init+0x54>)
   1c63c:	f104 001c 	add.w	r0, r4, #28
   1c640:	f009 fb5a 	bl	25cf8 <onoff_manager_init>
		if (err < 0) {
   1c644:	2800      	cmp	r0, #0
   1c646:	db01      	blt.n	1c64c <clk_init+0x44>
	}

	return 0;
   1c648:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c64a:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   1c64c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1c64e:	f06f 0004 	mvn.w	r0, #4
   1c652:	e7fb      	b.n	1c64c <clk_init+0x44>
   1c654:	0001c695 	.word	0x0001c695
   1c658:	0bad0000 	.word	0x0bad0000
   1c65c:	000290b8 	.word	0x000290b8

0001c660 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1c660:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1c662:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1c664:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   1c666:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1c668:	434b      	muls	r3, r1
   1c66a:	4808      	ldr	r0, [pc, #32]	; (1c68c <clkstarted_handle.constprop.0+0x2c>)
   1c66c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1c66e:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   1c670:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1c674:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1c676:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1c678:	f009 fff3 	bl	26662 <set_on_state>
	if (callback) {
   1c67c:	b12d      	cbz	r5, 1c68a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c67e:	4632      	mov	r2, r6
   1c680:	462b      	mov	r3, r5
}
   1c682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c686:	4802      	ldr	r0, [pc, #8]	; (1c690 <clkstarted_handle.constprop.0+0x30>)
   1c688:	4718      	bx	r3
}
   1c68a:	bd70      	pop	{r4, r5, r6, pc}
   1c68c:	2000d160 	.word	0x2000d160
   1c690:	00028ba4 	.word	0x00028ba4

0001c694 <clock_event_handler>:
	switch (event) {
   1c694:	b110      	cbz	r0, 1c69c <clock_event_handler+0x8>
   1c696:	2801      	cmp	r0, #1
   1c698:	d004      	beq.n	1c6a4 <clock_event_handler+0x10>
   1c69a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1c69c:	4b03      	ldr	r3, [pc, #12]	; (1c6ac <clock_event_handler+0x18>)
   1c69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c6a0:	075b      	lsls	r3, r3, #29
   1c6a2:	d101      	bne.n	1c6a8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1c6a4:	f7ff bfdc 	b.w	1c660 <clkstarted_handle.constprop.0>
}
   1c6a8:	4770      	bx	lr
   1c6aa:	bf00      	nop
   1c6ac:	2000d160 	.word	0x2000d160

0001c6b0 <generic_hfclk_start>:
{
   1c6b0:	b508      	push	{r3, lr}
	__asm__ volatile(
   1c6b2:	f04f 0320 	mov.w	r3, #32
   1c6b6:	f3ef 8111 	mrs	r1, BASEPRI
   1c6ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1c6be:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1c6c2:	4a11      	ldr	r2, [pc, #68]	; (1c708 <generic_hfclk_start+0x58>)
   1c6c4:	6813      	ldr	r3, [r2, #0]
   1c6c6:	f043 0002 	orr.w	r0, r3, #2
   1c6ca:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1c6cc:	07da      	lsls	r2, r3, #31
   1c6ce:	d408      	bmi.n	1c6e2 <generic_hfclk_start+0x32>
	__asm__ volatile(
   1c6d0:	f381 8811 	msr	BASEPRI, r1
   1c6d4:	f3bf 8f6f 	isb	sy
}
   1c6d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1c6dc:	2001      	movs	r0, #1
   1c6de:	f004 b9b5 	b.w	20a4c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c6e2:	4b0a      	ldr	r3, [pc, #40]	; (1c70c <generic_hfclk_start+0x5c>)
   1c6e4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c6e8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1c6ec:	07d3      	lsls	r3, r2, #31
   1c6ee:	d5ef      	bpl.n	1c6d0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1c6f0:	4807      	ldr	r0, [pc, #28]	; (1c710 <generic_hfclk_start+0x60>)
   1c6f2:	f009 ffb6 	bl	26662 <set_on_state>
   1c6f6:	f381 8811 	msr	BASEPRI, r1
   1c6fa:	f3bf 8f6f 	isb	sy
}
   1c6fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1c702:	2000      	movs	r0, #0
   1c704:	f7ff bfac 	b.w	1c660 <clkstarted_handle.constprop.0>
   1c708:	2000d1b0 	.word	0x2000d1b0
   1c70c:	40005000 	.word	0x40005000
   1c710:	2000d1a0 	.word	0x2000d1a0

0001c714 <api_blocking_start>:
{
   1c714:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c716:	2200      	movs	r2, #0
   1c718:	2301      	movs	r3, #1
   1c71a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c71e:	ab04      	add	r3, sp, #16
   1c720:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c724:	4a09      	ldr	r2, [pc, #36]	; (1c74c <api_blocking_start+0x38>)
   1c726:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c728:	f8cd d000 	str.w	sp, [sp]
   1c72c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c730:	f00a f804 	bl	2673c <api_start>
	if (err < 0) {
   1c734:	2800      	cmp	r0, #0
   1c736:	db05      	blt.n	1c744 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1c738:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1c73c:	2300      	movs	r3, #0
   1c73e:	4668      	mov	r0, sp
   1c740:	f007 fc34 	bl	23fac <z_impl_k_sem_take>
}
   1c744:	b007      	add	sp, #28
   1c746:	f85d fb04 	ldr.w	pc, [sp], #4
   1c74a:	bf00      	nop
   1c74c:	00026769 	.word	0x00026769

0001c750 <generic_hfclk_stop>:
{
   1c750:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c752:	f04f 0320 	mov.w	r3, #32
   1c756:	f3ef 8411 	mrs	r4, BASEPRI
   1c75a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c75e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1c762:	4a07      	ldr	r2, [pc, #28]	; (1c780 <generic_hfclk_stop+0x30>)
   1c764:	6813      	ldr	r3, [r2, #0]
   1c766:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1c76a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1c76c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1c76e:	d402      	bmi.n	1c776 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1c770:	2001      	movs	r0, #1
   1c772:	f00a fd58 	bl	27226 <nrfx_clock_stop>
	__asm__ volatile(
   1c776:	f384 8811 	msr	BASEPRI, r4
   1c77a:	f3bf 8f6f 	isb	sy
}
   1c77e:	bd10      	pop	{r4, pc}
   1c780:	2000d1b0 	.word	0x2000d1b0

0001c784 <z_nrf_clock_control_lf_on>:
{
   1c784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c788:	2201      	movs	r2, #1
   1c78a:	4607      	mov	r7, r0
   1c78c:	4935      	ldr	r1, [pc, #212]	; (1c864 <z_nrf_clock_control_lf_on+0xe0>)
   1c78e:	e8d1 3fef 	ldaex	r3, [r1]
   1c792:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1c796:	2800      	cmp	r0, #0
   1c798:	d1f9      	bne.n	1c78e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1c79a:	b933      	cbnz	r3, 1c7aa <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1c79c:	4932      	ldr	r1, [pc, #200]	; (1c868 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   1c79e:	4833      	ldr	r0, [pc, #204]	; (1c86c <z_nrf_clock_control_lf_on+0xe8>)
   1c7a0:	604b      	str	r3, [r1, #4]
   1c7a2:	60cb      	str	r3, [r1, #12]
   1c7a4:	608a      	str	r2, [r1, #8]
   1c7a6:	f009 faba 	bl	25d1e <onoff_request>
	switch (start_mode) {
   1c7aa:	1e7b      	subs	r3, r7, #1
   1c7ac:	2b01      	cmp	r3, #1
   1c7ae:	d828      	bhi.n	1c802 <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1c7b0:	2f01      	cmp	r7, #1
   1c7b2:	d106      	bne.n	1c7c2 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1c7b4:	4b2e      	ldr	r3, [pc, #184]	; (1c870 <z_nrf_clock_control_lf_on+0xec>)
   1c7b6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1c7ba:	f003 0303 	and.w	r3, r3, #3
   1c7be:	2b02      	cmp	r3, #2
   1c7c0:	d01f      	beq.n	1c802 <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c7c2:	f00b fc8d 	bl	280e0 <k_is_in_isr>
   1c7c6:	4605      	mov	r5, r0
   1c7c8:	b9e8      	cbnz	r0, 1c806 <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1c7ca:	4b2a      	ldr	r3, [pc, #168]	; (1c874 <z_nrf_clock_control_lf_on+0xf0>)
   1c7cc:	781b      	ldrb	r3, [r3, #0]
   1c7ce:	b1d3      	cbz	r3, 1c806 <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   1c7d0:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1c7d2:	4606      	mov	r6, r0
   1c7d4:	4b26      	ldr	r3, [pc, #152]	; (1c870 <z_nrf_clock_control_lf_on+0xec>)
   1c7d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c7da:	4c25      	ldr	r4, [pc, #148]	; (1c870 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c7dc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1c878 <z_nrf_clock_control_lf_on+0xf4>
   1c7e0:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c7e4:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1c7e8:	03d2      	lsls	r2, r2, #15
   1c7ea:	d516      	bpl.n	1c81a <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1c7ec:	f003 0303 	and.w	r3, r3, #3
   1c7f0:	2b02      	cmp	r3, #2
   1c7f2:	d001      	beq.n	1c7f8 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1c7f4:	2f01      	cmp	r7, #1
   1c7f6:	d110      	bne.n	1c81a <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   1c7f8:	b375      	cbz	r5, 1c858 <z_nrf_clock_control_lf_on+0xd4>
   1c7fa:	f386 8811 	msr	BASEPRI, r6
   1c7fe:	f3bf 8f6f 	isb	sy
}
   1c802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c806:	f04f 0320 	mov.w	r3, #32
   1c80a:	f3ef 8611 	mrs	r6, BASEPRI
   1c80e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c812:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c816:	2501      	movs	r5, #1
   1c818:	e7df      	b.n	1c7da <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c81a:	b1c5      	cbz	r5, 1c84e <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1c81c:	4630      	mov	r0, r6
   1c81e:	f7fe fee7 	bl	1b5f0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1c822:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1c826:	b2db      	uxtb	r3, r3
   1c828:	2b01      	cmp	r3, #1
   1c82a:	d1d9      	bne.n	1c7e0 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c82c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1c830:	2a00      	cmp	r2, #0
   1c832:	d0d5      	beq.n	1c7e0 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c834:	2200      	movs	r2, #0
   1c836:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1c83a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c83e:	2202      	movs	r2, #2
   1c840:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1c844:	2220      	movs	r2, #32
   1c846:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c84a:	60a3      	str	r3, [r4, #8]
}
   1c84c:	e7c8      	b.n	1c7e0 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   1c84e:	2100      	movs	r1, #0
   1c850:	2021      	movs	r0, #33	; 0x21
   1c852:	f007 ffcf 	bl	247f4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c856:	e7e4      	b.n	1c822 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   1c858:	2202      	movs	r2, #2
   1c85a:	4b05      	ldr	r3, [pc, #20]	; (1c870 <z_nrf_clock_control_lf_on+0xec>)
   1c85c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c860:	e7cf      	b.n	1c802 <z_nrf_clock_control_lf_on+0x7e>
   1c862:	bf00      	nop
   1c864:	2000d15c 	.word	0x2000d15c
   1c868:	2000d14c 	.word	0x2000d14c
   1c86c:	2000d17c 	.word	0x2000d17c
   1c870:	40005000 	.word	0x40005000
   1c874:	2000ddf2 	.word	0x2000ddf2
   1c878:	e000e100 	.word	0xe000e100

0001c87c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1c87c:	b508      	push	{r3, lr}
   1c87e:	4807      	ldr	r0, [pc, #28]	; (1c89c <uart_console_init+0x20>)
   1c880:	f00b fba3 	bl	27fca <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1c884:	b138      	cbz	r0, 1c896 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1c886:	4806      	ldr	r0, [pc, #24]	; (1c8a0 <uart_console_init+0x24>)
   1c888:	f7ff fd8e 	bl	1c3a8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1c88c:	4804      	ldr	r0, [pc, #16]	; (1c8a0 <uart_console_init+0x24>)
   1c88e:	f7fd fa4f 	bl	19d30 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1c892:	2000      	movs	r0, #0
}
   1c894:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1c896:	f06f 0012 	mvn.w	r0, #18
   1c89a:	e7fb      	b.n	1c894 <uart_console_init+0x18>
   1c89c:	00028bec 	.word	0x00028bec
   1c8a0:	0001c8a5 	.word	0x0001c8a5

0001c8a4 <console_out>:
	if ('\n' == c) {
   1c8a4:	280a      	cmp	r0, #10
{
   1c8a6:	b538      	push	{r3, r4, r5, lr}
   1c8a8:	4604      	mov	r4, r0
   1c8aa:	4d07      	ldr	r5, [pc, #28]	; (1c8c8 <console_out+0x24>)
	if ('\n' == c) {
   1c8ac:	d104      	bne.n	1c8b8 <console_out+0x14>
   1c8ae:	68ab      	ldr	r3, [r5, #8]
   1c8b0:	210d      	movs	r1, #13
   1c8b2:	4628      	mov	r0, r5
   1c8b4:	685b      	ldr	r3, [r3, #4]
   1c8b6:	4798      	blx	r3
   1c8b8:	68ab      	ldr	r3, [r5, #8]
   1c8ba:	4803      	ldr	r0, [pc, #12]	; (1c8c8 <console_out+0x24>)
   1c8bc:	685b      	ldr	r3, [r3, #4]
   1c8be:	b2e1      	uxtb	r1, r4
   1c8c0:	4798      	blx	r3
}
   1c8c2:	4620      	mov	r0, r4
   1c8c4:	bd38      	pop	{r3, r4, r5, pc}
   1c8c6:	bf00      	nop
   1c8c8:	00028bec 	.word	0x00028bec

0001c8cc <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1c8cc:	b530      	push	{r4, r5, lr}
	return port->config;
   1c8ce:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c8d0:	f001 041f 	and.w	r4, r1, #31
   1c8d4:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1c8d6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1c8da:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c8dc:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c8e0:	d105      	bne.n	1c8ee <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1c8e2:	4620      	mov	r0, r4
   1c8e4:	f004 fb76 	bl	20fd4 <nrfx_gpiote_trigger_disable>

		return 0;
   1c8e8:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   1c8ea:	b005      	add	sp, #20
   1c8ec:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c8ee:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c8f0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c8f4:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c8f8:	d114      	bne.n	1c924 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1c8fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c8fe:	bf0c      	ite	eq
   1c900:	2304      	moveq	r3, #4
   1c902:	2305      	movne	r3, #5
   1c904:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c908:	2300      	movs	r3, #0
   1c90a:	4620      	mov	r0, r4
   1c90c:	4619      	mov	r1, r3
   1c90e:	aa02      	add	r2, sp, #8
   1c910:	f004 f996 	bl	20c40 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c914:	4b1c      	ldr	r3, [pc, #112]	; (1c988 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1c916:	4298      	cmp	r0, r3
   1c918:	d133      	bne.n	1c982 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1c91a:	2101      	movs	r1, #1
   1c91c:	4620      	mov	r0, r4
   1c91e:	f004 fb15 	bl	20f4c <nrfx_gpiote_trigger_enable>
	return 0;
   1c922:	e7e1      	b.n	1c8e8 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c924:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1c928:	d020      	beq.n	1c96c <gpio_nrfx_pin_interrupt_configure+0xa0>
   1c92a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1c92e:	bf14      	ite	ne
   1c930:	2301      	movne	r3, #1
   1c932:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c934:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1c938:	6883      	ldr	r3, [r0, #8]
   1c93a:	40cb      	lsrs	r3, r1
   1c93c:	07d9      	lsls	r1, r3, #31
   1c93e:	d4e3      	bmi.n	1c908 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1c940:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1c944:	d1e0      	bne.n	1c908 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c946:	4a11      	ldr	r2, [pc, #68]	; (1c98c <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1c948:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c94c:	3380      	adds	r3, #128	; 0x80
   1c94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1c952:	07db      	lsls	r3, r3, #31
   1c954:	d4d8      	bmi.n	1c908 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c956:	f10d 0507 	add.w	r5, sp, #7
   1c95a:	4629      	mov	r1, r5
   1c95c:	4620      	mov	r0, r4
   1c95e:	f004 faa1 	bl	20ea4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1c962:	4b0b      	ldr	r3, [pc, #44]	; (1c990 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1c964:	4298      	cmp	r0, r3
   1c966:	d003      	beq.n	1c970 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
   1c968:	9503      	str	r5, [sp, #12]
   1c96a:	e7cd      	b.n	1c908 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c96c:	2303      	movs	r3, #3
   1c96e:	e7e1      	b.n	1c934 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   1c970:	4628      	mov	r0, r5
   1c972:	f004 fae5 	bl	20f40 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1c976:	4b04      	ldr	r3, [pc, #16]	; (1c988 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1c978:	4298      	cmp	r0, r3
   1c97a:	d0f5      	beq.n	1c968 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   1c97c:	f06f 000b 	mvn.w	r0, #11
   1c980:	e7b3      	b.n	1c8ea <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1c982:	f06f 0015 	mvn.w	r0, #21
   1c986:	e7b0      	b.n	1c8ea <gpio_nrfx_pin_interrupt_configure+0x1e>
   1c988:	0bad0000 	.word	0x0bad0000
   1c98c:	40842500 	.word	0x40842500
   1c990:	0bad0004 	.word	0x0bad0004

0001c994 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1c994:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1c996:	f004 fac3 	bl	20f20 <nrfx_gpiote_is_init>
   1c99a:	4604      	mov	r4, r0
   1c99c:	b968      	cbnz	r0, 1c9ba <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1c99e:	f004 fa97 	bl	20ed0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1c9a2:	4b08      	ldr	r3, [pc, #32]	; (1c9c4 <gpio_nrfx_init+0x30>)
   1c9a4:	4298      	cmp	r0, r3
   1c9a6:	d10a      	bne.n	1c9be <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1c9a8:	4621      	mov	r1, r4
   1c9aa:	4807      	ldr	r0, [pc, #28]	; (1c9c8 <gpio_nrfx_init+0x34>)
   1c9ac:	f004 fa74 	bl	20e98 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c9b0:	4622      	mov	r2, r4
   1c9b2:	2105      	movs	r1, #5
   1c9b4:	2031      	movs	r0, #49	; 0x31
   1c9b6:	f7fe febd 	bl	1b734 <z_arm_irq_priority_set>
		return 0;
   1c9ba:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1c9bc:	bd10      	pop	{r4, pc}
		return -EIO;
   1c9be:	f06f 0004 	mvn.w	r0, #4
   1c9c2:	e7fb      	b.n	1c9bc <gpio_nrfx_init+0x28>
   1c9c4:	0bad0000 	.word	0x0bad0000
   1c9c8:	0001c9cd 	.word	0x0001c9cd

0001c9cc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c9cc:	0943      	lsrs	r3, r0, #5
{
   1c9ce:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c9d0:	d107      	bne.n	1c9e2 <nrfx_gpio_handler+0x16>
	return list->head;
   1c9d2:	4b0b      	ldr	r3, [pc, #44]	; (1ca00 <nrfx_gpio_handler+0x34>)
   1c9d4:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c9d6:	b121      	cbz	r1, 1c9e2 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   1c9d8:	2501      	movs	r5, #1
	return node->next;
   1c9da:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1c9dc:	4e09      	ldr	r6, [pc, #36]	; (1ca04 <nrfx_gpio_handler+0x38>)
   1c9de:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c9e0:	b901      	cbnz	r1, 1c9e4 <nrfx_gpio_handler+0x18>
}
   1c9e2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   1c9e4:	688a      	ldr	r2, [r1, #8]
   1c9e6:	402a      	ands	r2, r5
   1c9e8:	d002      	beq.n	1c9f0 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   1c9ea:	4630      	mov	r0, r6
   1c9ec:	684b      	ldr	r3, [r1, #4]
   1c9ee:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c9f0:	b11c      	cbz	r4, 1c9fa <nrfx_gpio_handler+0x2e>
   1c9f2:	6823      	ldr	r3, [r4, #0]
   1c9f4:	4621      	mov	r1, r4
   1c9f6:	461c      	mov	r4, r3
   1c9f8:	e7f2      	b.n	1c9e0 <nrfx_gpio_handler+0x14>
   1c9fa:	4623      	mov	r3, r4
   1c9fc:	e7fa      	b.n	1c9f4 <nrfx_gpio_handler+0x28>
   1c9fe:	bf00      	nop
   1ca00:	2000d1b4 	.word	0x2000d1b4
   1ca04:	00028bbc 	.word	0x00028bbc

0001ca08 <gpio_nrfx_pin_configure>:
{
   1ca08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1ca0c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ca0e:	f001 051f 	and.w	r5, r1, #31
   1ca12:	7b3b      	ldrb	r3, [r7, #12]
{
   1ca14:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ca16:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1ca1a:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1ca1c:	4628      	mov	r0, r5
   1ca1e:	f10d 0103 	add.w	r1, sp, #3
   1ca22:	f004 fa3f 	bl	20ea4 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1ca26:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1ca2a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1ca2c:	d10b      	bne.n	1ca46 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1ca2e:	4628      	mov	r0, r5
   1ca30:	f004 faf8 	bl	21024 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1ca34:	4b3c      	ldr	r3, [pc, #240]	; (1cb28 <gpio_nrfx_pin_configure+0x120>)
   1ca36:	4598      	cmp	r8, r3
   1ca38:	d103      	bne.n	1ca42 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   1ca3a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1ca3e:	f004 fa79 	bl	20f34 <nrfx_gpiote_channel_free>
		return 0;
   1ca42:	2000      	movs	r0, #0
   1ca44:	e00c      	b.n	1ca60 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ca46:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1ca48:	4628      	mov	r0, r5
   1ca4a:	4619      	mov	r1, r3
   1ca4c:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ca4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1ca52:	f004 f8f5 	bl	20c40 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1ca56:	4b34      	ldr	r3, [pc, #208]	; (1cb28 <gpio_nrfx_pin_configure+0x120>)
   1ca58:	4298      	cmp	r0, r3
   1ca5a:	d004      	beq.n	1ca66 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   1ca5c:	f06f 0015 	mvn.w	r0, #21
}
   1ca60:	b004      	add	sp, #16
   1ca62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1ca66:	4580      	cmp	r8, r0
   1ca68:	d103      	bne.n	1ca72 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1ca6a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1ca6e:	f004 fa61 	bl	20f34 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1ca72:	03a3      	lsls	r3, r4, #14
   1ca74:	d549      	bpl.n	1cb0a <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1ca76:	f240 3306 	movw	r3, #774	; 0x306
   1ca7a:	4023      	ands	r3, r4
   1ca7c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1ca80:	d019      	beq.n	1cab6 <gpio_nrfx_pin_configure+0xae>
   1ca82:	d80c      	bhi.n	1ca9e <gpio_nrfx_pin_configure+0x96>
   1ca84:	2b06      	cmp	r3, #6
   1ca86:	d017      	beq.n	1cab8 <gpio_nrfx_pin_configure+0xb0>
   1ca88:	d804      	bhi.n	1ca94 <gpio_nrfx_pin_configure+0x8c>
   1ca8a:	b1ab      	cbz	r3, 1cab8 <gpio_nrfx_pin_configure+0xb0>
   1ca8c:	2b02      	cmp	r3, #2
   1ca8e:	d1e5      	bne.n	1ca5c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   1ca90:	2304      	movs	r3, #4
   1ca92:	e011      	b.n	1cab8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1ca94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1ca98:	d1e0      	bne.n	1ca5c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   1ca9a:	2301      	movs	r3, #1
   1ca9c:	e00c      	b.n	1cab8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1ca9e:	f240 2202 	movw	r2, #514	; 0x202
   1caa2:	4293      	cmp	r3, r2
   1caa4:	d026      	beq.n	1caf4 <gpio_nrfx_pin_configure+0xec>
   1caa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1caaa:	d025      	beq.n	1caf8 <gpio_nrfx_pin_configure+0xf0>
   1caac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1cab0:	d1d4      	bne.n	1ca5c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   1cab2:	2302      	movs	r3, #2
   1cab4:	e000      	b.n	1cab8 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   1cab6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1cab8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1cabc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1cac0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1cac4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1cac6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1caca:	bf4c      	ite	mi
   1cacc:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1cace:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1cad2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1cad4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1cad8:	d510      	bpl.n	1cafc <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1cada:	2301      	movs	r3, #1
   1cadc:	687a      	ldr	r2, [r7, #4]
   1cade:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1cae0:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1cae2:	2200      	movs	r2, #0
   1cae4:	4628      	mov	r0, r5
   1cae6:	a901      	add	r1, sp, #4
   1cae8:	f004 f956 	bl	20d98 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1caec:	4b0e      	ldr	r3, [pc, #56]	; (1cb28 <gpio_nrfx_pin_configure+0x120>)
   1caee:	4298      	cmp	r0, r3
   1caf0:	d0a7      	beq.n	1ca42 <gpio_nrfx_pin_configure+0x3a>
   1caf2:	e7b3      	b.n	1ca5c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   1caf4:	2305      	movs	r3, #5
   1caf6:	e7df      	b.n	1cab8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1caf8:	2303      	movs	r3, #3
   1cafa:	e7dd      	b.n	1cab8 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1cafc:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1cafe:	bf41      	itttt	mi
   1cb00:	2301      	movmi	r3, #1
   1cb02:	687a      	ldrmi	r2, [r7, #4]
   1cb04:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   1cb06:	60d3      	strmi	r3, [r2, #12]
}
   1cb08:	e7eb      	b.n	1cae2 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   1cb0a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1cb0c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1cb10:	bf4c      	ite	mi
   1cb12:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1cb14:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1cb18:	461a      	mov	r2, r3
   1cb1a:	4628      	mov	r0, r5
   1cb1c:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1cb1e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1cb22:	f004 f88d 	bl	20c40 <nrfx_gpiote_input_configure>
   1cb26:	e7e1      	b.n	1caec <gpio_nrfx_pin_configure+0xe4>
   1cb28:	0bad0000 	.word	0x0bad0000

0001cb2c <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
   1cb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1cb2e:	6844      	ldr	r4, [r0, #4]
{
   1cb30:	af00      	add	r7, sp, #0
	struct i2c_nrfx_twim_data *dev_data = dev->data;

	dev_config->irq_connect();
   1cb32:	69e3      	ldr	r3, [r4, #28]
{
   1cb34:	4605      	mov	r5, r0
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1cb36:	6906      	ldr	r6, [r0, #16]
	dev_config->irq_connect();
   1cb38:	4798      	blx	r3

#ifdef CONFIG_PINCTRL
	int err = pinctrl_apply_state(dev_config->pcfg,
   1cb3a:	6a20      	ldr	r0, [r4, #32]
   1cb3c:	f009 fe69 	bl	26812 <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
   1cb40:	2800      	cmp	r0, #0
   1cb42:	db1f      	blt.n	1cb84 <i2c_nrfx_twim_init+0x58>
		return err;
	}
#endif

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
   1cb44:	4633      	mov	r3, r6
   1cb46:	4620      	mov	r0, r4
   1cb48:	4a12      	ldr	r2, [pc, #72]	; (1cb94 <i2c_nrfx_twim_init+0x68>)
   1cb4a:	f104 0108 	add.w	r1, r4, #8
   1cb4e:	f004 fd6d 	bl	2162c <nrfx_twim_init>
   1cb52:	4b11      	ldr	r3, [pc, #68]	; (1cb98 <i2c_nrfx_twim_init+0x6c>)
   1cb54:	4298      	cmp	r0, r3
   1cb56:	d017      	beq.n	1cb88 <i2c_nrfx_twim_init+0x5c>
			   event_handler, dev_data) != NRFX_SUCCESS) {
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1cb58:	466c      	mov	r4, sp
   1cb5a:	b088      	sub	sp, #32
   1cb5c:	682b      	ldr	r3, [r5, #0]
   1cb5e:	466a      	mov	r2, sp
   1cb60:	490e      	ldr	r1, [pc, #56]	; (1cb9c <i2c_nrfx_twim_init+0x70>)
   1cb62:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1cb66:	f44f 7300 	mov.w	r3, #512	; 0x200
   1cb6a:	8393      	strh	r3, [r2, #28]
   1cb6c:	4b0c      	ldr	r3, [pc, #48]	; (1cba0 <i2c_nrfx_twim_init+0x74>)
   1cb6e:	f842 3f10 	str.w	r3, [r2, #16]!
   1cb72:	480c      	ldr	r0, [pc, #48]	; (1cba4 <i2c_nrfx_twim_init+0x78>)
   1cb74:	2300      	movs	r3, #0
   1cb76:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1cb7a:	f7fe f8af 	bl	1acdc <z_impl_z_log_msg_static_create>
		return -EIO;
   1cb7e:	f06f 0004 	mvn.w	r0, #4
   1cb82:	46a5      	mov	sp, r4
#else
	nrfx_twim_enable(&dev_config->twim);
#endif

	return 0;
}
   1cb84:	46bd      	mov	sp, r7
   1cb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_twim_enable(&dev_config->twim);
   1cb88:	4620      	mov	r0, r4
   1cb8a:	f004 fda1 	bl	216d0 <nrfx_twim_enable>
	return 0;
   1cb8e:	2000      	movs	r0, #0
   1cb90:	e7f8      	b.n	1cb84 <i2c_nrfx_twim_init+0x58>
   1cb92:	bf00      	nop
   1cb94:	0001cbe5 	.word	0x0001cbe5
   1cb98:	0bad0000 	.word	0x0bad0000
   1cb9c:	0002a075 	.word	0x0002a075
   1cba0:	01000003 	.word	0x01000003
   1cba4:	00028efc 	.word	0x00028efc

0001cba8 <i2c_nrfx_twim_recover_bus>:
{
   1cba8:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1cbaa:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
   1cbac:	6823      	ldr	r3, [r4, #0]
		nrfx_twim_disable(&dev_config->twim);
   1cbae:	4620      	mov	r0, r4
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
   1cbb0:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
   1cbb4:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
   1cbb8:	f004 fd9a 	bl	216f0 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1cbbc:	4631      	mov	r1, r6
   1cbbe:	4628      	mov	r0, r5
   1cbc0:	f005 f800 	bl	21bc4 <nrfx_twi_twim_bus_recover>
   1cbc4:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
   1cbc6:	6a20      	ldr	r0, [r4, #32]
   1cbc8:	f009 fe23 	bl	26812 <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
   1cbcc:	4620      	mov	r0, r4
   1cbce:	f004 fd7f 	bl	216d0 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1cbd2:	4b03      	ldr	r3, [pc, #12]	; (1cbe0 <i2c_nrfx_twim_recover_bus+0x38>)
   1cbd4:	429d      	cmp	r5, r3
}
   1cbd6:	bf14      	ite	ne
   1cbd8:	f06f 000f 	mvnne.w	r0, #15
   1cbdc:	2000      	moveq	r0, #0
   1cbde:	bd70      	pop	{r4, r5, r6, pc}
   1cbe0:	0bad0000 	.word	0x0bad0000

0001cbe4 <event_handler>:
	switch (p_event->type) {
   1cbe4:	7803      	ldrb	r3, [r0, #0]
   1cbe6:	2b01      	cmp	r3, #1
   1cbe8:	d008      	beq.n	1cbfc <event_handler+0x18>
   1cbea:	2b02      	cmp	r3, #2
   1cbec:	d008      	beq.n	1cc00 <event_handler+0x1c>
   1cbee:	b94b      	cbnz	r3, 1cc04 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1cbf0:	4b05      	ldr	r3, [pc, #20]	; (1cc08 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1cbf2:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1cbf4:	f101 0018 	add.w	r0, r1, #24
   1cbf8:	f007 b9b2 	b.w	23f60 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1cbfc:	4b03      	ldr	r3, [pc, #12]	; (1cc0c <event_handler+0x28>)
   1cbfe:	e7f8      	b.n	1cbf2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1cc00:	4b03      	ldr	r3, [pc, #12]	; (1cc10 <event_handler+0x2c>)
   1cc02:	e7f6      	b.n	1cbf2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1cc04:	4b03      	ldr	r3, [pc, #12]	; (1cc14 <event_handler+0x30>)
   1cc06:	e7f4      	b.n	1cbf2 <event_handler+0xe>
   1cc08:	0bad0000 	.word	0x0bad0000
   1cc0c:	0bae0001 	.word	0x0bae0001
   1cc10:	0bae0002 	.word	0x0bae0002
   1cc14:	0bad0001 	.word	0x0bad0001

0001cc18 <i2c_nrfx_twim_configure>:
{
   1cc18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   1cc1a:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1cc1e:	6842      	ldr	r2, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
   1cc20:	d10f      	bne.n	1cc42 <i2c_nrfx_twim_configure+0x2a>
	switch (I2C_SPEED_GET(i2c_config)) {
   1cc22:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1cc26:	2901      	cmp	r1, #1
   1cc28:	d00e      	beq.n	1cc48 <i2c_nrfx_twim_configure+0x30>
   1cc2a:	2902      	cmp	r1, #2
   1cc2c:	d015      	beq.n	1cc5a <i2c_nrfx_twim_configure+0x42>
		LOG_ERR("unsupported speed");
   1cc2e:	4a0d      	ldr	r2, [pc, #52]	; (1cc64 <i2c_nrfx_twim_configure+0x4c>)
   1cc30:	9205      	str	r2, [sp, #20]
   1cc32:	2202      	movs	r2, #2
   1cc34:	9204      	str	r2, [sp, #16]
   1cc36:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cc3a:	480b      	ldr	r0, [pc, #44]	; (1cc68 <i2c_nrfx_twim_configure+0x50>)
   1cc3c:	aa04      	add	r2, sp, #16
   1cc3e:	f7fe f84d 	bl	1acdc <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1cc42:	f06f 0015 	mvn.w	r0, #21
   1cc46:	e005      	b.n	1cc54 <i2c_nrfx_twim_configure+0x3c>
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1cc48:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1cc4a:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
	return 0;
   1cc4e:	2000      	movs	r0, #0
   1cc50:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
   1cc54:	b007      	add	sp, #28
   1cc56:	f85d fb04 	ldr.w	pc, [sp], #4
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1cc5a:	6813      	ldr	r3, [r2, #0]
   1cc5c:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1cc60:	e7f5      	b.n	1cc4e <i2c_nrfx_twim_configure+0x36>
   1cc62:	bf00      	nop
   1cc64:	0002a095 	.word	0x0002a095
   1cc68:	00028efc 	.word	0x00028efc

0001cc6c <i2c_nrfx_twim_transfer>:
{
   1cc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc70:	b08d      	sub	sp, #52	; 0x34
   1cc72:	461d      	mov	r5, r3
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1cc74:	f8d0 b004 	ldr.w	fp, [r0, #4]
{
   1cc78:	af00      	add	r7, sp, #0
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1cc7a:	f8d0 9010 	ldr.w	r9, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1cc7e:	f8bb 3018 	ldrh.w	r3, [fp, #24]
{
   1cc82:	613a      	str	r2, [r7, #16]
   1cc84:	4606      	mov	r6, r0
   1cc86:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   1cc88:	2214      	movs	r2, #20
   1cc8a:	2100      	movs	r1, #0
   1cc8c:	f107 001c 	add.w	r0, r7, #28
	uint8_t *msg_buf = dev_data->msg_buf;
   1cc90:	f8d9 a034 	ldr.w	sl, [r9, #52]	; 0x34
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1cc94:	617b      	str	r3, [r7, #20]
	nrfx_twim_xfer_desc_t cur_xfer = {
   1cc96:	f00b fd8d 	bl	287b4 <memset>
   1cc9a:	777d      	strb	r5, [r7, #29]
	return z_impl_k_sem_take(sem, timeout);
   1cc9c:	f04f 32ff 	mov.w	r2, #4294967295
   1cca0:	f04f 33ff 	mov.w	r3, #4294967295
   1cca4:	4648      	mov	r0, r9
   1cca6:	f007 f981 	bl	23fac <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   1ccaa:	f109 0318 	add.w	r3, r9, #24
   1ccae:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < num_msgs; i++) {
   1ccb0:	f04f 0800 	mov.w	r8, #0
   1ccb4:	2200      	movs	r2, #0
   1ccb6:	2300      	movs	r3, #0
   1ccb8:	f109 0018 	add.w	r0, r9, #24
   1ccbc:	f007 f976 	bl	23fac <z_impl_k_sem_take>
	uint16_t msg_buf_used = 0;
   1ccc0:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   1ccc2:	693b      	ldr	r3, [r7, #16]
   1ccc4:	4598      	cmp	r8, r3
   1ccc6:	d301      	bcc.n	1cccc <i2c_nrfx_twim_transfer+0x60>
   1ccc8:	2400      	movs	r4, #0
   1ccca:	e038      	b.n	1cd3e <i2c_nrfx_twim_transfer+0xd2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1cccc:	7a20      	ldrb	r0, [r4, #8]
   1ccce:	0702      	lsls	r2, r0, #28
   1ccd0:	f100 80eb 	bmi.w	1ceaa <i2c_nrfx_twim_transfer+0x23e>
				&& ((msgs[i].flags & I2C_MSG_READ)
   1ccd4:	693a      	ldr	r2, [r7, #16]
		bool concat_next = ((i + 1) < num_msgs)
   1ccd6:	f108 0301 	add.w	r3, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   1ccda:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
   1ccdc:	60bb      	str	r3, [r7, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
   1ccde:	d20a      	bcs.n	1ccf6 <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   1cce0:	0783      	lsls	r3, r0, #30
   1cce2:	d408      	bmi.n	1ccf6 <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1cce4:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   1cce6:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   1ccea:	f002 0201 	and.w	r2, r2, #1
   1ccee:	f003 0304 	and.w	r3, r3, #4
   1ccf2:	431a      	orrs	r2, r3
   1ccf4:	d02b      	beq.n	1cd4e <i2c_nrfx_twim_transfer+0xe2>
		if (concat_next || (msg_buf_used != 0)) {
   1ccf6:	2d00      	cmp	r5, #0
   1ccf8:	d03f      	beq.n	1cd7a <i2c_nrfx_twim_transfer+0x10e>
		bool concat_next = ((i + 1) < num_msgs)
   1ccfa:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   1ccfc:	6862      	ldr	r2, [r4, #4]
   1ccfe:	f8d7 c014 	ldr.w	ip, [r7, #20]
   1cd02:	18a9      	adds	r1, r5, r2
   1cd04:	4561      	cmp	r1, ip
   1cd06:	d924      	bls.n	1cd52 <i2c_nrfx_twim_transfer+0xe6>
				LOG_ERR("Need to use concatenation buffer and "
   1cd08:	466c      	mov	r4, sp
   1cd0a:	b08c      	sub	sp, #48	; 0x30
   1cd0c:	6831      	ldr	r1, [r6, #0]
   1cd0e:	466b      	mov	r3, sp
   1cd10:	61da      	str	r2, [r3, #28]
   1cd12:	697a      	ldr	r2, [r7, #20]
   1cd14:	4866      	ldr	r0, [pc, #408]	; (1ceb0 <i2c_nrfx_twim_transfer+0x244>)
   1cd16:	e9c3 2108 	strd	r2, r1, [r3, #32]
   1cd1a:	f240 5203 	movw	r2, #1283	; 0x503
   1cd1e:	851a      	strh	r2, [r3, #40]	; 0x28
   1cd20:	461a      	mov	r2, r3
   1cd22:	e9c3 0505 	strd	r0, r5, [r3, #20]
   1cd26:	4b63      	ldr	r3, [pc, #396]	; (1ceb4 <i2c_nrfx_twim_transfer+0x248>)
   1cd28:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd2c:	2300      	movs	r3, #0
   1cd2e:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   1cd32:	4861      	ldr	r0, [pc, #388]	; (1ceb8 <i2c_nrfx_twim_transfer+0x24c>)
   1cd34:	f7fd ffd2 	bl	1acdc <z_impl_z_log_msg_static_create>
   1cd38:	46a5      	mov	sp, r4
				ret = -ENOSPC;
   1cd3a:	f06f 041b 	mvn.w	r4, #27
	z_impl_k_sem_give(sem);
   1cd3e:	4648      	mov	r0, r9
   1cd40:	f007 f90e 	bl	23f60 <z_impl_k_sem_give>
}
   1cd44:	4620      	mov	r0, r4
   1cd46:	3734      	adds	r7, #52	; 0x34
   1cd48:	46bd      	mov	sp, r7
   1cd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bool concat_next = ((i + 1) < num_msgs)
   1cd4e:	2301      	movs	r3, #1
   1cd50:	e7d4      	b.n	1ccfc <i2c_nrfx_twim_transfer+0x90>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   1cd52:	07c1      	lsls	r1, r0, #31
   1cd54:	d406      	bmi.n	1cd64 <i2c_nrfx_twim_transfer+0xf8>
   1cd56:	6821      	ldr	r1, [r4, #0]
   1cd58:	eb0a 0005 	add.w	r0, sl, r5
   1cd5c:	607b      	str	r3, [r7, #4]
   1cd5e:	f00b fd1c 	bl	2879a <memcpy>
   1cd62:	687b      	ldr	r3, [r7, #4]
			msg_buf_used += msgs[i].len;
   1cd64:	6862      	ldr	r2, [r4, #4]
   1cd66:	442a      	add	r2, r5
   1cd68:	b295      	uxth	r5, r2
		if (concat_next) {
   1cd6a:	2b00      	cmp	r3, #0
   1cd6c:	f040 8085 	bne.w	1ce7a <i2c_nrfx_twim_transfer+0x20e>
		if (msg_buf_used == 0) {
   1cd70:	b13d      	cbz	r5, 1cd82 <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.primary_length = msg_buf_used;
   1cd72:	462b      	mov	r3, r5
			cur_xfer.p_primary_buf = msg_buf;
   1cd74:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
   1cd78:	e007      	b.n	1cd8a <i2c_nrfx_twim_transfer+0x11e>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1cd7a:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
   1cd7c:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1cd80:	d51b      	bpl.n	1cdba <i2c_nrfx_twim_transfer+0x14e>
			cur_xfer.p_primary_buf = msgs[i].buf;
   1cd82:	2500      	movs	r5, #0
   1cd84:	6823      	ldr	r3, [r4, #0]
   1cd86:	62bb      	str	r3, [r7, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
   1cd88:	6863      	ldr	r3, [r4, #4]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1cd8a:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
   1cd8c:	623b      	str	r3, [r7, #32]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   1cd8e:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1cd92:	f082 0202 	eor.w	r2, r2, #2
   1cd96:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1cd9a:	4658      	mov	r0, fp
   1cd9c:	0152      	lsls	r2, r2, #5
   1cd9e:	f107 011c 	add.w	r1, r7, #28
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1cda2:	773b      	strb	r3, [r7, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1cda4:	f004 fcc2 	bl	2172c <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1cda8:	4b44      	ldr	r3, [pc, #272]	; (1cebc <i2c_nrfx_twim_transfer+0x250>)
   1cdaa:	4298      	cmp	r0, r3
   1cdac:	d02c      	beq.n	1ce08 <i2c_nrfx_twim_transfer+0x19c>
			if (res == NRFX_ERROR_BUSY) {
   1cdae:	330b      	adds	r3, #11
   1cdb0:	4298      	cmp	r0, r3
   1cdb2:	d144      	bne.n	1ce3e <i2c_nrfx_twim_transfer+0x1d2>
				ret = -EBUSY;
   1cdb4:	f06f 040f 	mvn.w	r4, #15
   1cdb8:	e7c1      	b.n	1cd3e <i2c_nrfx_twim_transfer+0xd2>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1cdba:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1cdbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1cdc2:	d0de      	beq.n	1cd82 <i2c_nrfx_twim_transfer+0x116>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   1cdc4:	f8bb 301a 	ldrh.w	r3, [fp, #26]
   1cdc8:	4293      	cmp	r3, r2
   1cdca:	d218      	bcs.n	1cdfe <i2c_nrfx_twim_transfer+0x192>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   1cdcc:	466c      	mov	r4, sp
   1cdce:	b08a      	sub	sp, #40	; 0x28
   1cdd0:	466b      	mov	r3, sp
   1cdd2:	6831      	ldr	r1, [r6, #0]
   1cdd4:	483a      	ldr	r0, [pc, #232]	; (1cec0 <i2c_nrfx_twim_transfer+0x254>)
   1cdd6:	61d9      	str	r1, [r3, #28]
   1cdd8:	e9c3 0205 	strd	r0, r2, [r3, #20]
   1cddc:	f240 3201 	movw	r2, #769	; 0x301
   1cde0:	841a      	strh	r2, [r3, #32]
   1cde2:	461a      	mov	r2, r3
   1cde4:	4b37      	ldr	r3, [pc, #220]	; (1cec4 <i2c_nrfx_twim_transfer+0x258>)
   1cde6:	f842 3f10 	str.w	r3, [r2, #16]!
   1cdea:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1cdee:	462b      	mov	r3, r5
   1cdf0:	4831      	ldr	r0, [pc, #196]	; (1ceb8 <i2c_nrfx_twim_transfer+0x24c>)
   1cdf2:	f7fd ff73 	bl	1acdc <z_impl_z_log_msg_static_create>
   1cdf6:	46a5      	mov	sp, r4
				ret = -EINVAL;
   1cdf8:	f06f 0415 	mvn.w	r4, #21
				break;
   1cdfc:	e79f      	b.n	1cd3e <i2c_nrfx_twim_transfer+0xd2>
   1cdfe:	4650      	mov	r0, sl
   1ce00:	f00b fccb 	bl	2879a <memcpy>
			msg_buf_used = msgs[i].len;
   1ce04:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
   1ce06:	e7b3      	b.n	1cd70 <i2c_nrfx_twim_transfer+0x104>
	return z_impl_k_sem_take(sem, timeout);
   1ce08:	2300      	movs	r3, #0
   1ce0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1ce0e:	68f8      	ldr	r0, [r7, #12]
   1ce10:	f007 f8cc 	bl	23fac <z_impl_k_sem_take>
		if (ret != 0) {
   1ce14:	4603      	mov	r3, r0
   1ce16:	b1a8      	cbz	r0, 1ce44 <i2c_nrfx_twim_transfer+0x1d8>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1ce18:	466c      	mov	r4, sp
   1ce1a:	b088      	sub	sp, #32
   1ce1c:	466a      	mov	r2, sp
   1ce1e:	4b2a      	ldr	r3, [pc, #168]	; (1cec8 <i2c_nrfx_twim_transfer+0x25c>)
   1ce20:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1ce24:	2303      	movs	r3, #3
   1ce26:	f842 3f10 	str.w	r3, [r2, #16]!
   1ce2a:	4823      	ldr	r0, [pc, #140]	; (1ceb8 <i2c_nrfx_twim_transfer+0x24c>)
   1ce2c:	2300      	movs	r3, #0
   1ce2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ce32:	f7fd ff53 	bl	1acdc <z_impl_z_log_msg_static_create>
			(void)i2c_nrfx_twim_recover_bus(dev);
   1ce36:	4630      	mov	r0, r6
   1ce38:	46a5      	mov	sp, r4
   1ce3a:	f7ff feb5 	bl	1cba8 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
   1ce3e:	f06f 0404 	mvn.w	r4, #4
   1ce42:	e77c      	b.n	1cd3e <i2c_nrfx_twim_transfer+0xd2>
		res = dev_data->res;
   1ce44:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1ce48:	4a1c      	ldr	r2, [pc, #112]	; (1cebc <i2c_nrfx_twim_transfer+0x250>)
   1ce4a:	4291      	cmp	r1, r2
   1ce4c:	d011      	beq.n	1ce72 <i2c_nrfx_twim_transfer+0x206>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1ce4e:	466c      	mov	r4, sp
   1ce50:	b088      	sub	sp, #32
   1ce52:	466a      	mov	r2, sp
   1ce54:	481d      	ldr	r0, [pc, #116]	; (1cecc <i2c_nrfx_twim_transfer+0x260>)
   1ce56:	f8c2 801c 	str.w	r8, [r2, #28]
   1ce5a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1ce5e:	2104      	movs	r1, #4
   1ce60:	f842 1f10 	str.w	r1, [r2, #16]!
   1ce64:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ce68:	4813      	ldr	r0, [pc, #76]	; (1ceb8 <i2c_nrfx_twim_transfer+0x24c>)
   1ce6a:	f7fd ff37 	bl	1acdc <z_impl_z_log_msg_static_create>
   1ce6e:	46a5      	mov	sp, r4
			break;
   1ce70:	e7e5      	b.n	1ce3e <i2c_nrfx_twim_transfer+0x1d2>
		if ((msgs[i].flags & I2C_MSG_READ)
   1ce72:	7a23      	ldrb	r3, [r4, #8]
   1ce74:	07db      	lsls	r3, r3, #31
   1ce76:	d404      	bmi.n	1ce82 <i2c_nrfx_twim_transfer+0x216>
		msg_buf_used = 0;
   1ce78:	2500      	movs	r5, #0
   1ce7a:	f8d7 8008 	ldr.w	r8, [r7, #8]
   1ce7e:	340c      	adds	r4, #12
   1ce80:	e71f      	b.n	1ccc2 <i2c_nrfx_twim_transfer+0x56>
		    && cur_xfer.p_primary_buf == msg_buf) {
   1ce82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce84:	459a      	cmp	sl, r3
   1ce86:	d1f7      	bne.n	1ce78 <i2c_nrfx_twim_transfer+0x20c>
   1ce88:	46a0      	mov	r8, r4
   1ce8a:	e007      	b.n	1ce9c <i2c_nrfx_twim_transfer+0x230>
				msg_buf_used -= msgs[j].len;
   1ce8c:	1aa9      	subs	r1, r5, r2
   1ce8e:	b28d      	uxth	r5, r1
   1ce90:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1ce94:	fa1a f181 	uxtah	r1, sl, r1
   1ce98:	f00b fc7f 	bl	2879a <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   1ce9c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1cea0:	f1a8 080c 	sub.w	r8, r8, #12
   1cea4:	4295      	cmp	r5, r2
   1cea6:	d2f1      	bcs.n	1ce8c <i2c_nrfx_twim_transfer+0x220>
   1cea8:	e7e6      	b.n	1ce78 <i2c_nrfx_twim_transfer+0x20c>
			ret = -ENOTSUP;
   1ceaa:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1ceae:	e746      	b.n	1cd3e <i2c_nrfx_twim_transfer+0xd2>
   1ceb0:	0002a0a7 	.word	0x0002a0a7
   1ceb4:	01000006 	.word	0x01000006
   1ceb8:	00028efc 	.word	0x00028efc
   1cebc:	0bad0000 	.word	0x0bad0000
   1cec0:	0002a137 	.word	0x0002a137
   1cec4:	01000004 	.word	0x01000004
   1cec8:	0002a19d 	.word	0x0002a19d
   1cecc:	0002a1c7 	.word	0x0002a1c7

0001ced0 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   1ced0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ced4:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1ced6:	6844      	ldr	r4, [r0, #4]
{
   1ced8:	af00      	add	r7, sp, #0
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1ceda:	6a66      	ldr	r6, [r4, #36]	; 0x24
	struct spi_nrfx_data *dev_data = dev->data;
   1cedc:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1cede:	2100      	movs	r1, #0
   1cee0:	4630      	mov	r0, r6
   1cee2:	1d3a      	adds	r2, r7, #4
   1cee4:	f009 fda7 	bl	26a36 <pinctrl_lookup_state>
	if (ret < 0) {
   1cee8:	2800      	cmp	r0, #0
   1ceea:	db32      	blt.n	1cf52 <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1ceec:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1ceee:	6832      	ldr	r2, [r6, #0]
   1cef0:	7919      	ldrb	r1, [r3, #4]
   1cef2:	6818      	ldr	r0, [r3, #0]
   1cef4:	f000 fe30 	bl	1db58 <pinctrl_configure_pins>
	if (err < 0) {
   1cef8:	2800      	cmp	r0, #0
   1cefa:	db2a      	blt.n	1cf52 <spi_nrfx_init+0x82>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1cefc:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   1cefe:	6a23      	ldr	r3, [r4, #32]
   1cf00:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1cf02:	68ac      	ldr	r4, [r5, #8]
   1cf04:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1cf08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1cf0c:	429c      	cmp	r4, r3
   1cf0e:	d304      	bcc.n	1cf1a <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1cf10:	4628      	mov	r0, r5
   1cf12:	f009 fcdf 	bl	268d4 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   1cf16:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   1cf18:	e01b      	b.n	1cf52 <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
   1cf1a:	6820      	ldr	r0, [r4, #0]
   1cf1c:	f00b f855 	bl	27fca <z_device_is_ready>
   1cf20:	b9d8      	cbnz	r0, 1cf5a <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1cf22:	6823      	ldr	r3, [r4, #0]
   1cf24:	6819      	ldr	r1, [r3, #0]
   1cf26:	7923      	ldrb	r3, [r4, #4]
   1cf28:	466c      	mov	r4, sp
   1cf2a:	b08a      	sub	sp, #40	; 0x28
   1cf2c:	466a      	mov	r2, sp
   1cf2e:	61d3      	str	r3, [r2, #28]
   1cf30:	f44f 7300 	mov.w	r3, #512	; 0x200
   1cf34:	481a      	ldr	r0, [pc, #104]	; (1cfa0 <spi_nrfx_init+0xd0>)
   1cf36:	8413      	strh	r3, [r2, #32]
   1cf38:	4b1a      	ldr	r3, [pc, #104]	; (1cfa4 <spi_nrfx_init+0xd4>)
   1cf3a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1cf3e:	481a      	ldr	r0, [pc, #104]	; (1cfa8 <spi_nrfx_init+0xd8>)
   1cf40:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1cf44:	f842 3f10 	str.w	r3, [r2, #16]!
   1cf48:	f009 fc8b 	bl	26862 <z_log_msg_static_create.constprop.0>
			return -ENODEV;
   1cf4c:	f06f 0012 	mvn.w	r0, #18
   1cf50:	46a5      	mov	sp, r4
#endif
}
   1cf52:	370c      	adds	r7, #12
   1cf54:	46bd      	mov	sp, r7
   1cf56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
   1cf5a:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1cf5c:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1cf5e:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   1cf60:	f8d0 e010 	ldr.w	lr, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1cf64:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   1cf66:	bf54      	ite	pl
   1cf68:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1cf6c:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1cf70:	f8de c000 	ldr.w	ip, [lr]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1cf74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1cf78:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1cf7c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1cf7e:	bf4c      	ite	mi
   1cf80:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1cf84:	ea2c 0308 	bicpl.w	r3, ip, r8
	const struct gpio_driver_api *api =
   1cf88:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1cf8c:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   1cf90:	f8d9 3000 	ldr.w	r3, [r9]
   1cf94:	4798      	blx	r3
		if (ret < 0) {
   1cf96:	2800      	cmp	r0, #0
   1cf98:	dbdb      	blt.n	1cf52 <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1cf9a:	3408      	adds	r4, #8
   1cf9c:	e7b2      	b.n	1cf04 <spi_nrfx_init+0x34>
   1cf9e:	bf00      	nop
   1cfa0:	0002a203 	.word	0x0002a203
   1cfa4:	01000004 	.word	0x01000004
   1cfa8:	00028fbc 	.word	0x00028fbc

0001cfac <transfer_next_chunk>:
{
   1cfac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1cfae:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1cfb0:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1cfb2:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1cfb4:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1cfb6:	b98d      	cbnz	r5, 1cfdc <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   1cfb8:	2b00      	cmp	r3, #0
   1cfba:	d137      	bne.n	1d02c <transfer_next_chunk+0x80>
	int error = 0;
   1cfbc:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   1cfbe:	2200      	movs	r2, #0
   1cfc0:	4620      	mov	r0, r4
   1cfc2:	4611      	mov	r1, r2
   1cfc4:	f009 fc64 	bl	26890 <_spi_context_cs_control>
	ctx->sync_status = status;
   1cfc8:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1cfca:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1cfce:	f006 ffc7 	bl	23f60 <z_impl_k_sem_give>
	dev_data->busy = false;
   1cfd2:	2300      	movs	r3, #0
   1cfd4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1cfd8:	b004      	add	sp, #16
   1cfda:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1cfdc:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1cfde:	bb0b      	cbnz	r3, 1d024 <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   1cfe0:	bb39      	cbnz	r1, 1d032 <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1cfe2:	f641 72ff 	movw	r2, #8191	; 0x1fff
   1cfe6:	42aa      	cmp	r2, r5
   1cfe8:	bf28      	it	cs
   1cfea:	462a      	movcs	r2, r5
   1cfec:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   1cfee:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1cff0:	9100      	str	r1, [sp, #0]
   1cff2:	b11b      	cbz	r3, 1cffc <transfer_next_chunk+0x50>
   1cff4:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1cff6:	2b00      	cmp	r3, #0
   1cff8:	bf18      	it	ne
   1cffa:	4613      	movne	r3, r2
   1cffc:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1cffe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1d000:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1d002:	b11b      	cbz	r3, 1d00c <transfer_next_chunk+0x60>
   1d004:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1d006:	2b00      	cmp	r3, #0
   1d008:	bf18      	it	ne
   1d00a:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1d00c:	2200      	movs	r2, #0
   1d00e:	4669      	mov	r1, sp
   1d010:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1d012:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1d014:	f004 fa70 	bl	214f8 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1d018:	4b0d      	ldr	r3, [pc, #52]	; (1d050 <transfer_next_chunk+0xa4>)
   1d01a:	4298      	cmp	r0, r3
   1d01c:	d0dc      	beq.n	1cfd8 <transfer_next_chunk+0x2c>
			error = -EIO;
   1d01e:	f06f 0504 	mvn.w	r5, #4
   1d022:	e7cc      	b.n	1cfbe <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1d024:	429d      	cmp	r5, r3
   1d026:	bf28      	it	cs
   1d028:	461d      	movcs	r5, r3
   1d02a:	e7d9      	b.n	1cfe0 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   1d02c:	461d      	mov	r5, r3
   1d02e:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1d030:	e7d7      	b.n	1cfe2 <transfer_next_chunk+0x36>
   1d032:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1d036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1d03a:	d0d2      	beq.n	1cfe2 <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1d03c:	2d08      	cmp	r5, #8
   1d03e:	bf28      	it	cs
   1d040:	2508      	movcs	r5, #8
   1d042:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1d044:	462a      	mov	r2, r5
   1d046:	f00b fba8 	bl	2879a <memcpy>
			tx_buf = dev_data->buffer;
   1d04a:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1d04c:	e7c9      	b.n	1cfe2 <transfer_next_chunk+0x36>
   1d04e:	bf00      	nop
   1d050:	0bad0000 	.word	0x0bad0000

0001d054 <event_handler>:
{
   1d054:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1d056:	7803      	ldrb	r3, [r0, #0]
{
   1d058:	460c      	mov	r4, r1
   1d05a:	b086      	sub	sp, #24
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1d05c:	2b00      	cmp	r3, #0
   1d05e:	d154      	bne.n	1d10a <event_handler+0xb6>
	if (!ctx->tx_len) {
   1d060:	6d8b      	ldr	r3, [r1, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1d062:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   1d064:	b15b      	cbz	r3, 1d07e <event_handler+0x2a>
	if (len > ctx->tx_len) {
   1d066:	429a      	cmp	r2, r3
   1d068:	d91e      	bls.n	1d0a8 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
   1d06a:	4b29      	ldr	r3, [pc, #164]	; (1d110 <event_handler+0xbc>)
   1d06c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d070:	9305      	str	r3, [sp, #20]
   1d072:	2302      	movs	r3, #2
   1d074:	4827      	ldr	r0, [pc, #156]	; (1d114 <event_handler+0xc0>)
   1d076:	aa04      	add	r2, sp, #16
   1d078:	9304      	str	r3, [sp, #16]
   1d07a:	f009 fbf2 	bl	26862 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
   1d07e:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1d080:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1d082:	b15b      	cbz	r3, 1d09c <event_handler+0x48>
	if (len > ctx->rx_len) {
   1d084:	429a      	cmp	r2, r3
   1d086:	d927      	bls.n	1d0d8 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
   1d088:	4b21      	ldr	r3, [pc, #132]	; (1d110 <event_handler+0xbc>)
   1d08a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d08e:	9305      	str	r3, [sp, #20]
   1d090:	2302      	movs	r3, #2
   1d092:	4820      	ldr	r0, [pc, #128]	; (1d114 <event_handler+0xc0>)
   1d094:	aa04      	add	r2, sp, #16
   1d096:	9304      	str	r3, [sp, #16]
   1d098:	f009 fbe3 	bl	26862 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1d09c:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1d09e:	b006      	add	sp, #24
   1d0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1d0a4:	f7ff bf82 	b.w	1cfac <transfer_next_chunk>
	ctx->tx_len -= len;
   1d0a8:	1a9b      	subs	r3, r3, r2
   1d0aa:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1d0ac:	b973      	cbnz	r3, 1d0cc <event_handler+0x78>
		++ctx->current_tx;
   1d0ae:	6c4b      	ldr	r3, [r1, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1d0b0:	f101 0258 	add.w	r2, r1, #88	; 0x58
		++ctx->current_tx;
   1d0b4:	3308      	adds	r3, #8
   1d0b6:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1d0b8:	6c8b      	ldr	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1d0ba:	f104 0044 	add.w	r0, r4, #68	; 0x44
		--ctx->tx_count;
   1d0be:	3b01      	subs	r3, #1
   1d0c0:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1d0c2:	3148      	adds	r1, #72	; 0x48
   1d0c4:	f009 fbba 	bl	2683c <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1d0c8:	6560      	str	r0, [r4, #84]	; 0x54
   1d0ca:	e7d8      	b.n	1d07e <event_handler+0x2a>
	} else if (ctx->tx_buf) {
   1d0cc:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1d0ce:	2b00      	cmp	r3, #0
   1d0d0:	d0d5      	beq.n	1d07e <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
   1d0d2:	4413      	add	r3, r2
   1d0d4:	654b      	str	r3, [r1, #84]	; 0x54
   1d0d6:	e7d2      	b.n	1d07e <event_handler+0x2a>
	ctx->rx_len -= len;
   1d0d8:	1a9b      	subs	r3, r3, r2
   1d0da:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1d0dc:	b97b      	cbnz	r3, 1d0fe <event_handler+0xaa>
		++ctx->current_rx;
   1d0de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1d0e0:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1d0e4:	3308      	adds	r3, #8
   1d0e6:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1d0e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1d0ea:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1d0ee:	3b01      	subs	r3, #1
   1d0f0:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1d0f2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1d0f6:	f009 fba1 	bl	2683c <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1d0fa:	65e0      	str	r0, [r4, #92]	; 0x5c
   1d0fc:	e7ce      	b.n	1d09c <event_handler+0x48>
	} else if (ctx->rx_buf) {
   1d0fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1d100:	2b00      	cmp	r3, #0
   1d102:	d0cb      	beq.n	1d09c <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1d104:	4413      	add	r3, r2
   1d106:	65e3      	str	r3, [r4, #92]	; 0x5c
   1d108:	e7c8      	b.n	1d09c <event_handler+0x48>
}
   1d10a:	b006      	add	sp, #24
   1d10c:	bd10      	pop	{r4, pc}
   1d10e:	bf00      	nop
   1d110:	0002a227 	.word	0x0002a227
   1d114:	00028fbc 	.word	0x00028fbc

0001d118 <spi_nrfx_transceive>:
{
   1d118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d11c:	b08b      	sub	sp, #44	; 0x2c
   1d11e:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1d120:	888b      	ldrh	r3, [r1, #4]
   1d122:	af00      	add	r7, sp, #0
   1d124:	049b      	lsls	r3, r3, #18
   1d126:	4680      	mov	r8, r0
   1d128:	460e      	mov	r6, r1
	struct spi_nrfx_data *dev_data = dev->data;
   1d12a:	6904      	ldr	r4, [r0, #16]
{
   1d12c:	60ba      	str	r2, [r7, #8]
   1d12e:	d439      	bmi.n	1d1a4 <spi_nrfx_transceive+0x8c>
	return z_impl_k_sem_take(sem, timeout);
   1d130:	f04f 32ff 	mov.w	r2, #4294967295
   1d134:	f04f 33ff 	mov.w	r3, #4294967295
   1d138:	f104 0010 	add.w	r0, r4, #16
   1d13c:	f006 ff36 	bl	23fac <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1d140:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1d142:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1d146:	f8d8 9010 	ldr.w	r9, [r8, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1d14a:	60fb      	str	r3, [r7, #12]
	uint32_t max_freq = dev_config->max_freq;
   1d14c:	689b      	ldr	r3, [r3, #8]
   1d14e:	603b      	str	r3, [r7, #0]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1d150:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
   1d154:	607b      	str	r3, [r7, #4]
   1d156:	b123      	cbz	r3, 1d162 <spi_nrfx_transceive+0x4a>
   1d158:	f8d9 3000 	ldr.w	r3, [r9]
   1d15c:	429e      	cmp	r6, r3
   1d15e:	f000 80d0 	beq.w	1d302 <spi_nrfx_transceive+0x1ea>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1d162:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   1d166:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   1d16a:	d022      	beq.n	1d1b2 <spi_nrfx_transceive+0x9a>
		LOG_ERR("Half-duplex not supported");
   1d16c:	4b9b      	ldr	r3, [pc, #620]	; (1d3dc <spi_nrfx_transceive+0x2c4>)
		return -ENOTSUP;
   1d16e:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
   1d172:	627b      	str	r3, [r7, #36]	; 0x24
   1d174:	2302      	movs	r3, #2
   1d176:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d17a:	4899      	ldr	r0, [pc, #612]	; (1d3e0 <spi_nrfx_transceive+0x2c8>)
   1d17c:	623b      	str	r3, [r7, #32]
   1d17e:	f107 0220 	add.w	r2, r7, #32
   1d182:	f009 fb6e 	bl	26862 <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1d186:	6823      	ldr	r3, [r4, #0]
   1d188:	889b      	ldrh	r3, [r3, #4]
   1d18a:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1d18e:	d104      	bne.n	1d19a <spi_nrfx_transceive+0x82>
		ctx->owner = NULL;
   1d190:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1d192:	f104 0010 	add.w	r0, r4, #16
   1d196:	f006 fee3 	bl	23f60 <z_impl_k_sem_give>
}
   1d19a:	4628      	mov	r0, r5
   1d19c:	372c      	adds	r7, #44	; 0x2c
   1d19e:	46bd      	mov	sp, r7
   1d1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1d1a4:	69a3      	ldr	r3, [r4, #24]
   1d1a6:	2b00      	cmp	r3, #0
   1d1a8:	d1c2      	bne.n	1d130 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1d1aa:	6863      	ldr	r3, [r4, #4]
   1d1ac:	4299      	cmp	r1, r3
   1d1ae:	d1bf      	bne.n	1d130 <spi_nrfx_transceive+0x18>
   1d1b0:	e7c7      	b.n	1d142 <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1d1b2:	f01c 0f01 	tst.w	ip, #1
   1d1b6:	d016      	beq.n	1d1e6 <spi_nrfx_transceive+0xce>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1d1b8:	466d      	mov	r5, sp
   1d1ba:	b088      	sub	sp, #32
   1d1bc:	f8d8 3000 	ldr.w	r3, [r8]
   1d1c0:	466a      	mov	r2, sp
   1d1c2:	4988      	ldr	r1, [pc, #544]	; (1d3e4 <spi_nrfx_transceive+0x2cc>)
   1d1c4:	4886      	ldr	r0, [pc, #536]	; (1d3e0 <spi_nrfx_transceive+0x2c8>)
   1d1c6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1d1ca:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d1ce:	8393      	strh	r3, [r2, #28]
   1d1d0:	4b85      	ldr	r3, [pc, #532]	; (1d3e8 <spi_nrfx_transceive+0x2d0>)
   1d1d2:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1d1d6:	f842 3f10 	str.w	r3, [r2, #16]!
   1d1da:	f009 fb42 	bl	26862 <z_log_msg_static_create.constprop.0>
   1d1de:	46ad      	mov	sp, r5
		return -EINVAL;
   1d1e0:	f06f 0515 	mvn.w	r5, #21
   1d1e4:	e7cf      	b.n	1d186 <spi_nrfx_transceive+0x6e>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1d1e6:	f01c 0f08 	tst.w	ip, #8
   1d1ea:	d00b      	beq.n	1d204 <spi_nrfx_transceive+0xec>
		LOG_ERR("Loopback mode is not supported");
   1d1ec:	4b7f      	ldr	r3, [pc, #508]	; (1d3ec <spi_nrfx_transceive+0x2d4>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1d1ee:	627b      	str	r3, [r7, #36]	; 0x24
   1d1f0:	2302      	movs	r3, #2
   1d1f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d1f6:	487a      	ldr	r0, [pc, #488]	; (1d3e0 <spi_nrfx_transceive+0x2c8>)
   1d1f8:	623b      	str	r3, [r7, #32]
   1d1fa:	f107 0220 	add.w	r2, r7, #32
   1d1fe:	f009 fb30 	bl	26862 <z_log_msg_static_create.constprop.0>
	if (error == 0) {
   1d202:	e7ed      	b.n	1d1e0 <spi_nrfx_transceive+0xc8>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1d204:	f3cc 1345 	ubfx	r3, ip, #5, #6
   1d208:	2b08      	cmp	r3, #8
   1d20a:	d001      	beq.n	1d210 <spi_nrfx_transceive+0xf8>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1d20c:	4b78      	ldr	r3, [pc, #480]	; (1d3f0 <spi_nrfx_transceive+0x2d8>)
   1d20e:	e7ee      	b.n	1d1ee <spi_nrfx_transceive+0xd6>
	if (spi_cfg->frequency < 125000) {
   1d210:	6835      	ldr	r5, [r6, #0]
   1d212:	4b78      	ldr	r3, [pc, #480]	; (1d3f4 <spi_nrfx_transceive+0x2dc>)
   1d214:	429d      	cmp	r5, r3
   1d216:	d801      	bhi.n	1d21c <spi_nrfx_transceive+0x104>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1d218:	4b77      	ldr	r3, [pc, #476]	; (1d3f8 <spi_nrfx_transceive+0x2e0>)
   1d21a:	e7e8      	b.n	1d1ee <spi_nrfx_transceive+0xd6>
	config = dev_config->def_config;
   1d21c:	68fb      	ldr	r3, [r7, #12]
   1d21e:	f107 0e10 	add.w	lr, r7, #16
   1d222:	f103 0b0c 	add.w	fp, r3, #12
   1d226:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   1d22a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1d22e:	f8db 3000 	ldr.w	r3, [fp]
   1d232:	f8ce 3000 	str.w	r3, [lr]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1d236:	683b      	ldr	r3, [r7, #0]
   1d238:	42ab      	cmp	r3, r5
   1d23a:	bf28      	it	cs
   1d23c:	462b      	movcs	r3, r5
   1d23e:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1d240:	4b6e      	ldr	r3, [pc, #440]	; (1d3fc <spi_nrfx_transceive+0x2e4>)
   1d242:	429d      	cmp	r5, r3
   1d244:	d945      	bls.n	1d2d2 <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 500000) {
   1d246:	4b6e      	ldr	r3, [pc, #440]	; (1d400 <spi_nrfx_transceive+0x2e8>)
   1d248:	429d      	cmp	r5, r3
   1d24a:	d945      	bls.n	1d2d8 <spi_nrfx_transceive+0x1c0>
	} else if (frequency < 1000000) {
   1d24c:	4b6d      	ldr	r3, [pc, #436]	; (1d404 <spi_nrfx_transceive+0x2ec>)
   1d24e:	429d      	cmp	r5, r3
   1d250:	d945      	bls.n	1d2de <spi_nrfx_transceive+0x1c6>
	} else if (frequency < 2000000) {
   1d252:	4b6d      	ldr	r3, [pc, #436]	; (1d408 <spi_nrfx_transceive+0x2f0>)
   1d254:	429d      	cmp	r5, r3
   1d256:	d945      	bls.n	1d2e4 <spi_nrfx_transceive+0x1cc>
	} else if (frequency < 4000000) {
   1d258:	4b6c      	ldr	r3, [pc, #432]	; (1d40c <spi_nrfx_transceive+0x2f4>)
   1d25a:	429d      	cmp	r5, r3
   1d25c:	d945      	bls.n	1d2ea <spi_nrfx_transceive+0x1d2>
		return NRF_SPIM_FREQ_4M;
   1d25e:	4b6c      	ldr	r3, [pc, #432]	; (1d410 <spi_nrfx_transceive+0x2f8>)
   1d260:	429d      	cmp	r5, r3
   1d262:	bf2c      	ite	cs
   1d264:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
   1d268:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1d26c:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1d270:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1d272:	f00c 0304 	and.w	r3, ip, #4
   1d276:	d03b      	beq.n	1d2f0 <spi_nrfx_transceive+0x1d8>
			return NRF_SPIM_MODE_2;
   1d278:	2b00      	cmp	r3, #0
   1d27a:	bf14      	ite	ne
   1d27c:	2303      	movne	r3, #3
   1d27e:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1d280:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   1d282:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1d284:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1d288:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   1d28c:	b12b      	cbz	r3, 1d29a <spi_nrfx_transceive+0x182>
		nrfx_spim_uninit(&dev_config->spim);
   1d28e:	68f8      	ldr	r0, [r7, #12]
   1d290:	f004 f8ea 	bl	21468 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1d294:	2300      	movs	r3, #0
   1d296:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1d29a:	464b      	mov	r3, r9
   1d29c:	4a5d      	ldr	r2, [pc, #372]	; (1d414 <spi_nrfx_transceive+0x2fc>)
   1d29e:	68f8      	ldr	r0, [r7, #12]
   1d2a0:	f107 0110 	add.w	r1, r7, #16
   1d2a4:	f004 f838 	bl	21318 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1d2a8:	4b5b      	ldr	r3, [pc, #364]	; (1d418 <spi_nrfx_transceive+0x300>)
   1d2aa:	4298      	cmp	r0, r3
   1d2ac:	d024      	beq.n	1d2f8 <spi_nrfx_transceive+0x1e0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1d2ae:	466d      	mov	r5, sp
   1d2b0:	b088      	sub	sp, #32
   1d2b2:	466a      	mov	r2, sp
   1d2b4:	4b59      	ldr	r3, [pc, #356]	; (1d41c <spi_nrfx_transceive+0x304>)
   1d2b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d2ba:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d2be:	2303      	movs	r3, #3
   1d2c0:	4847      	ldr	r0, [pc, #284]	; (1d3e0 <spi_nrfx_transceive+0x2c8>)
   1d2c2:	f842 3f10 	str.w	r3, [r2, #16]!
   1d2c6:	f009 facc 	bl	26862 <z_log_msg_static_create.constprop.0>
   1d2ca:	46ad      	mov	sp, r5
		return -EIO;
   1d2cc:	f06f 0504 	mvn.w	r5, #4
   1d2d0:	e759      	b.n	1d186 <spi_nrfx_transceive+0x6e>
		return NRF_SPIM_FREQ_125K;
   1d2d2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1d2d6:	e7c9      	b.n	1d26c <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_250K;
   1d2d8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1d2dc:	e7c6      	b.n	1d26c <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_500K;
   1d2de:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1d2e2:	e7c3      	b.n	1d26c <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_1M;
   1d2e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1d2e8:	e7c0      	b.n	1d26c <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_2M;
   1d2ea:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1d2ee:	e7bd      	b.n	1d26c <spi_nrfx_transceive+0x154>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1d2f0:	3b00      	subs	r3, #0
   1d2f2:	bf18      	it	ne
   1d2f4:	2301      	movne	r3, #1
   1d2f6:	e7c3      	b.n	1d280 <spi_nrfx_transceive+0x168>
	dev_data->initialized = true;
   1d2f8:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1d2fa:	f8c9 6000 	str.w	r6, [r9]
	dev_data->initialized = true;
   1d2fe:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
		dev_data->busy = true;
   1d302:	2301      	movs	r3, #1
   1d304:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1d308:	68bb      	ldr	r3, [r7, #8]
   1d30a:	2b00      	cmp	r3, #0
   1d30c:	d154      	bne.n	1d3b8 <spi_nrfx_transceive+0x2a0>
   1d30e:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1d310:	2300      	movs	r3, #0
   1d312:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1d314:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1d318:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1d31c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1d320:	f009 fa8c 	bl	2683c <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1d324:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1d326:	f1ba 0f00 	cmp.w	sl, #0
   1d32a:	d14d      	bne.n	1d3c8 <spi_nrfx_transceive+0x2b0>
   1d32c:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1d330:	2300      	movs	r3, #0
   1d332:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1d334:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1d338:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1d33c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1d340:	f009 fa7c 	bl	2683c <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1d344:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1d346:	2101      	movs	r1, #1
   1d348:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1d34a:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1d34c:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1d34e:	4620      	mov	r0, r4
   1d350:	f009 fa9e 	bl	26890 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1d354:	4640      	mov	r0, r8
   1d356:	f7ff fe29 	bl	1cfac <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1d35a:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1d35c:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1d35e:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1d360:	429d      	cmp	r5, r3
   1d362:	bf38      	it	cc
   1d364:	461d      	movcc	r5, r3
   1d366:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1d36a:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1d36c:	f858 3b28 	ldr.w	r3, [r8], #40
			return ((t * to_hz + off) / from_hz);
   1d370:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1d374:	681b      	ldr	r3, [r3, #0]
   1d376:	4631      	mov	r1, r6
   1d378:	fbb5 f5f3 	udiv	r5, r5, r3
   1d37c:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1d380:	35c8      	adds	r5, #200	; 0xc8
   1d382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d386:	2300      	movs	r3, #0
   1d388:	fbe5 010c 	umlal	r0, r1, r5, ip
   1d38c:	f7fb fcbc 	bl	18d08 <__aeabi_uldivmod>
   1d390:	4602      	mov	r2, r0
   1d392:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1d394:	4640      	mov	r0, r8
   1d396:	f006 fe09 	bl	23fac <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1d39a:	b1e8      	cbz	r0, 1d3d8 <spi_nrfx_transceive+0x2c0>
		LOG_ERR("Timeout waiting for transfer complete");
   1d39c:	4b20      	ldr	r3, [pc, #128]	; (1d420 <spi_nrfx_transceive+0x308>)
   1d39e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d3a2:	627b      	str	r3, [r7, #36]	; 0x24
   1d3a4:	2302      	movs	r3, #2
   1d3a6:	480e      	ldr	r0, [pc, #56]	; (1d3e0 <spi_nrfx_transceive+0x2c8>)
   1d3a8:	623b      	str	r3, [r7, #32]
   1d3aa:	f107 0220 	add.w	r2, r7, #32
   1d3ae:	f009 fa58 	bl	26862 <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
   1d3b2:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1d3b6:	e6e6      	b.n	1d186 <spi_nrfx_transceive+0x6e>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1d3b8:	68bb      	ldr	r3, [r7, #8]
   1d3ba:	681b      	ldr	r3, [r3, #0]
   1d3bc:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1d3be:	2b00      	cmp	r3, #0
   1d3c0:	d0a6      	beq.n	1d310 <spi_nrfx_transceive+0x1f8>
   1d3c2:	68bb      	ldr	r3, [r7, #8]
   1d3c4:	685b      	ldr	r3, [r3, #4]
   1d3c6:	e7a4      	b.n	1d312 <spi_nrfx_transceive+0x1fa>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1d3c8:	f8da 3000 	ldr.w	r3, [sl]
   1d3cc:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1d3ce:	2b00      	cmp	r3, #0
   1d3d0:	d0ae      	beq.n	1d330 <spi_nrfx_transceive+0x218>
   1d3d2:	f8da 3004 	ldr.w	r3, [sl, #4]
   1d3d6:	e7ac      	b.n	1d332 <spi_nrfx_transceive+0x21a>
	status = ctx->sync_status;
   1d3d8:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1d3da:	e6d4      	b.n	1d186 <spi_nrfx_transceive+0x6e>
   1d3dc:	0002a245 	.word	0x0002a245
   1d3e0:	00028fbc 	.word	0x00028fbc
   1d3e4:	0002a25f 	.word	0x0002a25f
   1d3e8:	01000003 	.word	0x01000003
   1d3ec:	0002a281 	.word	0x0002a281
   1d3f0:	0002a2a0 	.word	0x0002a2a0
   1d3f4:	0001e847 	.word	0x0001e847
   1d3f8:	0002a2cf 	.word	0x0002a2cf
   1d3fc:	0003d08f 	.word	0x0003d08f
   1d400:	0007a11f 	.word	0x0007a11f
   1d404:	000f423f 	.word	0x000f423f
   1d408:	001e847f 	.word	0x001e847f
   1d40c:	003d08ff 	.word	0x003d08ff
   1d410:	007a1200 	.word	0x007a1200
   1d414:	0001d055 	.word	0x0001d055
   1d418:	0bad0000 	.word	0x0bad0000
   1d41c:	0002a300 	.word	0x0002a300
   1d420:	0002a327 	.word	0x0002a327

0001d424 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1d424:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1d426:	794b      	ldrb	r3, [r1, #5]
   1d428:	2b01      	cmp	r3, #1
   1d42a:	d026      	beq.n	1d47a <uarte_nrfx_configure+0x56>
   1d42c:	2b03      	cmp	r3, #3
   1d42e:	d121      	bne.n	1d474 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1d430:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1d432:	798b      	ldrb	r3, [r1, #6]
   1d434:	2b03      	cmp	r3, #3
   1d436:	d11d      	bne.n	1d474 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1d438:	79ce      	ldrb	r6, [r1, #7]
   1d43a:	b10e      	cbz	r6, 1d440 <uarte_nrfx_configure+0x1c>
   1d43c:	2e01      	cmp	r6, #1
   1d43e:	d119      	bne.n	1d474 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1d440:	790a      	ldrb	r2, [r1, #4]
   1d442:	b112      	cbz	r2, 1d44a <uarte_nrfx_configure+0x26>
   1d444:	2a02      	cmp	r2, #2
   1d446:	d115      	bne.n	1d474 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1d448:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1d44a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1d44c:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1d44e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1d452:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   1d454:	d067      	beq.n	1d526 <uarte_nrfx_configure+0x102>
   1d456:	d82d      	bhi.n	1d4b4 <uarte_nrfx_configure+0x90>
   1d458:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1d45c:	d066      	beq.n	1d52c <uarte_nrfx_configure+0x108>
   1d45e:	d816      	bhi.n	1d48e <uarte_nrfx_configure+0x6a>
   1d460:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1d464:	d064      	beq.n	1d530 <uarte_nrfx_configure+0x10c>
   1d466:	d80a      	bhi.n	1d47e <uarte_nrfx_configure+0x5a>
   1d468:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1d46c:	d063      	beq.n	1d536 <uarte_nrfx_configure+0x112>
   1d46e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1d472:	d063      	beq.n	1d53c <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   1d474:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d478:	e054      	b.n	1d524 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1d47a:	2500      	movs	r5, #0
   1d47c:	e7d9      	b.n	1d432 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1d47e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1d482:	d05e      	beq.n	1d542 <uarte_nrfx_configure+0x11e>
   1d484:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1d488:	d1f4      	bne.n	1d474 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1d48a:	4b38      	ldr	r3, [pc, #224]	; (1d56c <uarte_nrfx_configure+0x148>)
   1d48c:	e03c      	b.n	1d508 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d48e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1d492:	d059      	beq.n	1d548 <uarte_nrfx_configure+0x124>
   1d494:	d807      	bhi.n	1d4a6 <uarte_nrfx_configure+0x82>
   1d496:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1d49a:	d057      	beq.n	1d54c <uarte_nrfx_configure+0x128>
   1d49c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1d4a0:	d1e8      	bne.n	1d474 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1d4a2:	4b33      	ldr	r3, [pc, #204]	; (1d570 <uarte_nrfx_configure+0x14c>)
   1d4a4:	e030      	b.n	1d508 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d4a6:	f647 2412 	movw	r4, #31250	; 0x7a12
   1d4aa:	42a3      	cmp	r3, r4
   1d4ac:	d1e2      	bne.n	1d474 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1d4ae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1d4b2:	e029      	b.n	1d508 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d4b4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1d4b8:	d04a      	beq.n	1d550 <uarte_nrfx_configure+0x12c>
   1d4ba:	d813      	bhi.n	1d4e4 <uarte_nrfx_configure+0xc0>
   1d4bc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1d4c0:	d049      	beq.n	1d556 <uarte_nrfx_configure+0x132>
   1d4c2:	d809      	bhi.n	1d4d8 <uarte_nrfx_configure+0xb4>
   1d4c4:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1d4c8:	42a3      	cmp	r3, r4
   1d4ca:	d046      	beq.n	1d55a <uarte_nrfx_configure+0x136>
   1d4cc:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1d4d0:	d1d0      	bne.n	1d474 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1d4d2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1d4d6:	e017      	b.n	1d508 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d4d8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1d4dc:	d1ca      	bne.n	1d474 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1d4de:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1d4e2:	e011      	b.n	1d508 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d4e4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1d4e8:	d03a      	beq.n	1d560 <uarte_nrfx_configure+0x13c>
   1d4ea:	d808      	bhi.n	1d4fe <uarte_nrfx_configure+0xda>
   1d4ec:	4c21      	ldr	r4, [pc, #132]	; (1d574 <uarte_nrfx_configure+0x150>)
   1d4ee:	42a3      	cmp	r3, r4
   1d4f0:	d039      	beq.n	1d566 <uarte_nrfx_configure+0x142>
   1d4f2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1d4f6:	d1bd      	bne.n	1d474 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1d4f8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1d4fc:	e004      	b.n	1d508 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d4fe:	4c1e      	ldr	r4, [pc, #120]	; (1d578 <uarte_nrfx_configure+0x154>)
   1d500:	42a3      	cmp	r3, r4
   1d502:	d1b7      	bne.n	1d474 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1d504:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1d508:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1d50a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   1d50e:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   1d510:	4335      	orrs	r5, r6
   1d512:	681b      	ldr	r3, [r3, #0]
   1d514:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1d516:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1d51a:	1d23      	adds	r3, r4, #4
   1d51c:	c903      	ldmia	r1, {r0, r1}
   1d51e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1d522:	2000      	movs	r0, #0
}
   1d524:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1d526:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1d52a:	e7ed      	b.n	1d508 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1d52c:	4b13      	ldr	r3, [pc, #76]	; (1d57c <uarte_nrfx_configure+0x158>)
   1d52e:	e7eb      	b.n	1d508 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1d530:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1d534:	e7e8      	b.n	1d508 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1d536:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1d53a:	e7e5      	b.n	1d508 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d53c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1d540:	e7e2      	b.n	1d508 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1d542:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1d546:	e7df      	b.n	1d508 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1d548:	4b0d      	ldr	r3, [pc, #52]	; (1d580 <uarte_nrfx_configure+0x15c>)
   1d54a:	e7dd      	b.n	1d508 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1d54c:	4b0d      	ldr	r3, [pc, #52]	; (1d584 <uarte_nrfx_configure+0x160>)
   1d54e:	e7db      	b.n	1d508 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1d550:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1d554:	e7d8      	b.n	1d508 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1d556:	4b0c      	ldr	r3, [pc, #48]	; (1d588 <uarte_nrfx_configure+0x164>)
   1d558:	e7d6      	b.n	1d508 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1d55a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1d55e:	e7d3      	b.n	1d508 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1d560:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d564:	e7d0      	b.n	1d508 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1d566:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d56a:	e7cd      	b.n	1d508 <uarte_nrfx_configure+0xe4>
   1d56c:	0013b000 	.word	0x0013b000
   1d570:	004ea000 	.word	0x004ea000
   1d574:	0003d090 	.word	0x0003d090
   1d578:	000f4240 	.word	0x000f4240
   1d57c:	00275000 	.word	0x00275000
   1d580:	0075c000 	.word	0x0075c000
   1d584:	003af000 	.word	0x003af000
   1d588:	013a9000 	.word	0x013a9000

0001d58c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1d58c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d590:	4680      	mov	r8, r0
   1d592:	b087      	sub	sp, #28
   1d594:	2200      	movs	r2, #0
   1d596:	2101      	movs	r1, #1
   1d598:	2008      	movs	r0, #8
   1d59a:	f7fe f8cb 	bl	1b734 <z_arm_irq_priority_set>
   1d59e:	2008      	movs	r0, #8
   1d5a0:	f7fe f898 	bl	1b6d4 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d5a4:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   1d5a6:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d5aa:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   1d5ae:	683c      	ldr	r4, [r7, #0]
	ret = pinctrl_lookup_state(config, id, &state);
   1d5b0:	466a      	mov	r2, sp
   1d5b2:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1d5b6:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1d5ba:	f8d7 900c 	ldr.w	r9, [r7, #12]
   1d5be:	4648      	mov	r0, r9
   1d5c0:	f009 fa39 	bl	26a36 <pinctrl_lookup_state>
	if (ret < 0) {
   1d5c4:	1e05      	subs	r5, r0, #0
   1d5c6:	db25      	blt.n	1d614 <uarte_0_init+0x88>
	return pinctrl_apply_state_direct(config, state);
   1d5c8:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1d5ca:	f8d9 2000 	ldr.w	r2, [r9]
   1d5ce:	7919      	ldrb	r1, [r3, #4]
   1d5d0:	6818      	ldr	r0, [r3, #0]
   1d5d2:	f000 fac1 	bl	1db58 <pinctrl_configure_pins>
	if (err < 0) {
   1d5d6:	1e05      	subs	r5, r0, #0
   1d5d8:	db1c      	blt.n	1d614 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1d5da:	4640      	mov	r0, r8
   1d5dc:	1d31      	adds	r1, r6, #4
   1d5de:	f7ff ff21 	bl	1d424 <uarte_nrfx_configure>
	if (err) {
   1d5e2:	4605      	mov	r5, r0
   1d5e4:	b9b0      	cbnz	r0, 1d614 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1d5e6:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1d5e8:	0799      	lsls	r1, r3, #30
   1d5ea:	d524      	bpl.n	1d636 <uarte_0_init+0xaa>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1d5ec:	f106 0018 	add.w	r0, r6, #24
   1d5f0:	f003 faa0 	bl	20b34 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1d5f4:	4b24      	ldr	r3, [pc, #144]	; (1d688 <uarte_0_init+0xfc>)
   1d5f6:	4298      	cmp	r0, r3
   1d5f8:	d010      	beq.n	1d61c <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   1d5fa:	4b24      	ldr	r3, [pc, #144]	; (1d68c <uarte_0_init+0x100>)
   1d5fc:	9305      	str	r3, [sp, #20]
   1d5fe:	2302      	movs	r3, #2
   1d600:	9304      	str	r3, [sp, #16]
   1d602:	462b      	mov	r3, r5
		return -EIO;
   1d604:	f06f 0504 	mvn.w	r5, #4
   1d608:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d60c:	4820      	ldr	r0, [pc, #128]	; (1d690 <uarte_0_init+0x104>)
   1d60e:	aa04      	add	r2, sp, #16
   1d610:	f7fd fb64 	bl	1acdc <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   1d614:	4628      	mov	r0, r5
   1d616:	b007      	add	sp, #28
   1d618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1d61c:	7e33      	ldrb	r3, [r6, #24]
   1d61e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d622:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1d626:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1d62a:	2301      	movs	r3, #1
   1d62c:	7e32      	ldrb	r2, [r6, #24]
   1d62e:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1d630:	4a18      	ldr	r2, [pc, #96]	; (1d694 <uarte_0_init+0x108>)
   1d632:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d636:	2308      	movs	r3, #8
   1d638:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1d63c:	7a3b      	ldrb	r3, [r7, #8]
   1d63e:	b953      	cbnz	r3, 1d656 <uarte_0_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d640:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d644:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d648:	6973      	ldr	r3, [r6, #20]
   1d64a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d64e:	2301      	movs	r3, #1
   1d650:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d654:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1d656:	687b      	ldr	r3, [r7, #4]
   1d658:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1d65a:	bf5c      	itt	pl
   1d65c:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1d660:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d664:	687b      	ldr	r3, [r7, #4]
   1d666:	06db      	lsls	r3, r3, #27
   1d668:	bf44      	itt	mi
   1d66a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1d66e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d672:	6933      	ldr	r3, [r6, #16]
   1d674:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d678:	2300      	movs	r3, #0
   1d67a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d67e:	2301      	movs	r3, #1
   1d680:	60a3      	str	r3, [r4, #8]
   1d682:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1d684:	e7c6      	b.n	1d614 <uarte_0_init+0x88>
   1d686:	bf00      	nop
   1d688:	0bad0000 	.word	0x0bad0000
   1d68c:	0002a364 	.word	0x0002a364
   1d690:	00028fc4 	.word	0x00028fc4
   1d694:	40017000 	.word	0x40017000

0001d698 <uarte_nrfx_poll_out>:
{
   1d698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d69a:	4604      	mov	r4, r0
   1d69c:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   1d69e:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d6a0:	f00a fd1e 	bl	280e0 <k_is_in_isr>
   1d6a4:	b9b0      	cbnz	r0, 1d6d4 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   1d6a6:	4b2e      	ldr	r3, [pc, #184]	; (1d760 <uarte_nrfx_poll_out+0xc8>)
   1d6a8:	781b      	ldrb	r3, [r3, #0]
   1d6aa:	b19b      	cbz	r3, 1d6d4 <uarte_nrfx_poll_out+0x3c>
{
   1d6ac:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1d6ae:	6860      	ldr	r0, [r4, #4]
   1d6b0:	f009 f955 	bl	2695e <is_tx_ready.isra.0>
   1d6b4:	bb00      	cbnz	r0, 1d6f8 <uarte_nrfx_poll_out+0x60>
   1d6b6:	2001      	movs	r0, #1
   1d6b8:	f009 fdb3 	bl	27222 <nrfx_busy_wait>
   1d6bc:	3e01      	subs	r6, #1
   1d6be:	d1f6      	bne.n	1d6ae <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   1d6c0:	2100      	movs	r1, #0
   1d6c2:	2021      	movs	r0, #33	; 0x21
   1d6c4:	f007 f896 	bl	247f4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d6c8:	e7f0      	b.n	1d6ac <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   1d6ca:	f386 8811 	msr	BASEPRI, r6
   1d6ce:	f3bf 8f6f 	isb	sy
}
   1d6d2:	e7f5      	b.n	1d6c0 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   1d6d4:	f04f 0320 	mov.w	r3, #32
   1d6d8:	f3ef 8611 	mrs	r6, BASEPRI
   1d6dc:	f383 8812 	msr	BASEPRI_MAX, r3
   1d6e0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d6e4:	6860      	ldr	r0, [r4, #4]
   1d6e6:	4631      	mov	r1, r6
   1d6e8:	f009 f939 	bl	2695e <is_tx_ready.isra.0>
   1d6ec:	b990      	cbnz	r0, 1d714 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1d6ee:	f386 8811 	msr	BASEPRI, r6
   1d6f2:	f3bf 8f6f 	isb	sy
}
   1d6f6:	e7ed      	b.n	1d6d4 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   1d6f8:	f04f 0320 	mov.w	r3, #32
   1d6fc:	f3ef 8611 	mrs	r6, BASEPRI
   1d700:	f383 8812 	msr	BASEPRI_MAX, r3
   1d704:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d708:	6860      	ldr	r0, [r4, #4]
   1d70a:	4631      	mov	r1, r6
   1d70c:	f009 f927 	bl	2695e <is_tx_ready.isra.0>
   1d710:	2800      	cmp	r0, #0
   1d712:	d0da      	beq.n	1d6ca <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   1d714:	693b      	ldr	r3, [r7, #16]
   1d716:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   1d718:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d71a:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   1d71c:	6813      	ldr	r3, [r2, #0]
   1d71e:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d722:	2001      	movs	r0, #1
   1d724:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d728:	2000      	movs	r0, #0
   1d72a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1d72e:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   1d732:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d736:	6852      	ldr	r2, [r2, #4]
   1d738:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   1d73c:	06d2      	lsls	r2, r2, #27
   1d73e:	d508      	bpl.n	1d752 <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d740:	2008      	movs	r0, #8
	return config->uarte_regs;
   1d742:	6862      	ldr	r2, [r4, #4]
   1d744:	6812      	ldr	r2, [r2, #0]
   1d746:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1d74a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1d74e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d752:	2201      	movs	r2, #1
   1d754:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1d756:	f381 8811 	msr	BASEPRI, r1
   1d75a:	f3bf 8f6f 	isb	sy
}
   1d75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d760:	2000ddf2 	.word	0x2000ddf2

0001d764 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1d764:	2301      	movs	r3, #1
   1d766:	4083      	lsls	r3, r0
{
   1d768:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1d76a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d76c:	4a0b      	ldr	r2, [pc, #44]	; (1d79c <compare_int_lock+0x38>)
   1d76e:	e8d2 1fef 	ldaex	r1, [r2]
   1d772:	ea01 0504 	and.w	r5, r1, r4
   1d776:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1d77a:	2e00      	cmp	r6, #0
   1d77c:	d1f7      	bne.n	1d76e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d77e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1d782:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1d784:	4806      	ldr	r0, [pc, #24]	; (1d7a0 <compare_int_lock+0x3c>)
   1d786:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1d78a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1d78e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1d792:	420b      	tst	r3, r1
}
   1d794:	bf14      	ite	ne
   1d796:	2001      	movne	r0, #1
   1d798:	2000      	moveq	r0, #0
   1d79a:	bd70      	pop	{r4, r5, r6, pc}
   1d79c:	2000d1c4 	.word	0x2000d1c4
   1d7a0:	40015000 	.word	0x40015000

0001d7a4 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1d7a4:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1d7a6:	490e      	ldr	r1, [pc, #56]	; (1d7e0 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
   1d7a8:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1d7ac:	e9d1 3400 	ldrd	r3, r4, [r1]
   1d7b0:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1d7b2:	18c3      	adds	r3, r0, r3
   1d7b4:	f144 0400 	adc.w	r4, r4, #0
   1d7b8:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1d7bc:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1d7c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1d7c4:	d209      	bcs.n	1d7da <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1d7c6:	4b07      	ldr	r3, [pc, #28]	; (1d7e4 <sys_clock_timeout_handler+0x40>)
   1d7c8:	681b      	ldr	r3, [r3, #0]
   1d7ca:	0a1a      	lsrs	r2, r3, #8
   1d7cc:	061b      	lsls	r3, r3, #24
   1d7ce:	199c      	adds	r4, r3, r6
   1d7d0:	4b05      	ldr	r3, [pc, #20]	; (1d7e8 <sys_clock_timeout_handler+0x44>)
   1d7d2:	f142 0500 	adc.w	r5, r2, #0
   1d7d6:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1d7da:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1d7dc:	f007 b982 	b.w	24ae4 <sys_clock_announce>
   1d7e0:	2000ce48 	.word	0x2000ce48
   1d7e4:	2000d1c8 	.word	0x2000d1c8
   1d7e8:	2000ce50 	.word	0x2000ce50

0001d7ec <compare_int_unlock>:
	if (key) {
   1d7ec:	b1d9      	cbz	r1, 1d826 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1d7ee:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d7f0:	4a0d      	ldr	r2, [pc, #52]	; (1d828 <compare_int_unlock+0x3c>)
   1d7f2:	4083      	lsls	r3, r0
   1d7f4:	e8d2 cfef 	ldaex	ip, [r2]
   1d7f8:	ea4c 0c03 	orr.w	ip, ip, r3
   1d7fc:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1d800:	2900      	cmp	r1, #0
   1d802:	d1f7      	bne.n	1d7f4 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1d808:	4a08      	ldr	r2, [pc, #32]	; (1d82c <compare_int_unlock+0x40>)
   1d80a:	4083      	lsls	r3, r0
   1d80c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d810:	4b07      	ldr	r3, [pc, #28]	; (1d830 <compare_int_unlock+0x44>)
   1d812:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1d816:	40c3      	lsrs	r3, r0
   1d818:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d81a:	bf42      	ittt	mi
   1d81c:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1d820:	4b04      	ldrmi	r3, [pc, #16]	; (1d834 <compare_int_unlock+0x48>)
   1d822:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1d826:	4770      	bx	lr
   1d828:	2000d1c4 	.word	0x2000d1c4
   1d82c:	40015000 	.word	0x40015000
   1d830:	2000d1c0 	.word	0x2000d1c0
   1d834:	e000e100 	.word	0xe000e100

0001d838 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1d838:	4b0d      	ldr	r3, [pc, #52]	; (1d870 <z_nrf_rtc_timer_read+0x38>)
   1d83a:	6818      	ldr	r0, [r3, #0]
   1d83c:	0a01      	lsrs	r1, r0, #8
   1d83e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1d840:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1d844:	4b0b      	ldr	r3, [pc, #44]	; (1d874 <z_nrf_rtc_timer_read+0x3c>)
   1d846:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1d84a:	1818      	adds	r0, r3, r0
   1d84c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1d850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d854:	d20a      	bcs.n	1d86c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1d856:	4b08      	ldr	r3, [pc, #32]	; (1d878 <z_nrf_rtc_timer_read+0x40>)
   1d858:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d85c:	4290      	cmp	r0, r2
   1d85e:	eb71 0303 	sbcs.w	r3, r1, r3
   1d862:	d203      	bcs.n	1d86c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1d864:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1d868:	f141 0100 	adc.w	r1, r1, #0
}
   1d86c:	4770      	bx	lr
   1d86e:	bf00      	nop
   1d870:	2000d1c8 	.word	0x2000d1c8
   1d874:	40015000 	.word	0x40015000
   1d878:	2000ce50 	.word	0x2000ce50

0001d87c <compare_set>:
{
   1d87c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d880:	4616      	mov	r6, r2
   1d882:	461f      	mov	r7, r3
   1d884:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   1d886:	f7ff ff6d 	bl	1d764 <compare_int_lock>
   1d88a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1d88c:	f7ff ffd4 	bl	1d838 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1d890:	42b0      	cmp	r0, r6
   1d892:	eb71 0307 	sbcs.w	r3, r1, r7
   1d896:	d250      	bcs.n	1d93a <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1d898:	4b38      	ldr	r3, [pc, #224]	; (1d97c <compare_set+0x100>)
   1d89a:	1a30      	subs	r0, r6, r0
   1d89c:	eb67 0101 	sbc.w	r1, r7, r1
   1d8a0:	4298      	cmp	r0, r3
   1d8a2:	f171 0100 	sbcs.w	r1, r1, #0
   1d8a6:	d265      	bcs.n	1d974 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
   1d8a8:	4b35      	ldr	r3, [pc, #212]	; (1d980 <compare_set+0x104>)
   1d8aa:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1d8ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1d8b2:	429f      	cmp	r7, r3
   1d8b4:	bf08      	it	eq
   1d8b6:	4296      	cmpeq	r6, r2
   1d8b8:	d049      	beq.n	1d94e <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d8ba:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1d8be:	4931      	ldr	r1, [pc, #196]	; (1d984 <compare_set+0x108>)
   1d8c0:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
   1d8c4:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
   1d8c6:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   1d8ca:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   1d8ce:	f009 f8a2 	bl	26a16 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1d8d2:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
   1d8d6:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1d8d8:	f104 0550 	add.w	r5, r4, #80	; 0x50
   1d8dc:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d8de:	b2ad      	uxth	r5, r5
   1d8e0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   1d8e4:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1d8e8:	4a27      	ldr	r2, [pc, #156]	; (1d988 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d8ea:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
   1d8ee:	9301      	str	r3, [sp, #4]
   1d8f0:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1d8f4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   1d8f8:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
   1d8fc:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   1d900:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d904:	eba0 0008 	sub.w	r0, r0, r8
   1d908:	3803      	subs	r0, #3
   1d90a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1d90e:	4290      	cmp	r0, r2
   1d910:	d91d      	bls.n	1d94e <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d912:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   1d914:	b160      	cbz	r0, 1d930 <compare_set+0xb4>
     return p_reg->COUNTER;
   1d916:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d91a:	eba8 000b 	sub.w	r0, r8, fp
   1d91e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1d922:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d926:	d912      	bls.n	1d94e <compare_set+0xd2>
					event_clear(chan);
   1d928:	4620      	mov	r0, r4
   1d92a:	f009 f874 	bl	26a16 <event_clear>
   1d92e:	4a16      	ldr	r2, [pc, #88]	; (1d988 <compare_set+0x10c>)
			cc_val = now + cc_inc;
   1d930:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
   1d934:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   1d938:	e7da      	b.n	1d8f0 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1d93a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d93c:	4a13      	ldr	r2, [pc, #76]	; (1d98c <compare_set+0x110>)
   1d93e:	40a3      	lsls	r3, r4
   1d940:	e8d2 0fef 	ldaex	r0, [r2]
   1d944:	4318      	orrs	r0, r3
   1d946:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1d94a:	2900      	cmp	r1, #0
   1d94c:	d1f8      	bne.n	1d940 <compare_set+0xc4>
	return ret;
   1d94e:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
   1d950:	490b      	ldr	r1, [pc, #44]	; (1d980 <compare_set+0x104>)
	cc_data[chan].callback = handler;
   1d952:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   1d954:	0123      	lsls	r3, r4, #4
   1d956:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
   1d95a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   1d95c:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
   1d960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d962:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1d964:	4620      	mov	r0, r4
   1d966:	9900      	ldr	r1, [sp, #0]
   1d968:	f7ff ff40 	bl	1d7ec <compare_int_unlock>
}
   1d96c:	4628      	mov	r0, r5
   1d96e:	b003      	add	sp, #12
   1d970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   1d974:	f06f 0515 	mvn.w	r5, #21
   1d978:	e7f4      	b.n	1d964 <compare_set+0xe8>
   1d97a:	bf00      	nop
   1d97c:	00800001 	.word	0x00800001
   1d980:	2000ce38 	.word	0x2000ce38
   1d984:	40015000 	.word	0x40015000
   1d988:	007ffffd 	.word	0x007ffffd
   1d98c:	2000d1c0 	.word	0x2000d1c0

0001d990 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1d990:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   1d992:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d994:	f04f 30ff 	mov.w	r0, #4294967295
   1d998:	f04f 31ff 	mov.w	r1, #4294967295
   1d99c:	4d16      	ldr	r5, [pc, #88]	; (1d9f8 <sys_clock_driver_init+0x68>)
   1d99e:	4b17      	ldr	r3, [pc, #92]	; (1d9fc <sys_clock_driver_init+0x6c>)
   1d9a0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1d9a4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1d9a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d9ac:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d9ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1d9b2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   1d9b6:	4b12      	ldr	r3, [pc, #72]	; (1da00 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1d9b8:	2101      	movs	r1, #1
   1d9ba:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1d9be:	2015      	movs	r0, #21
   1d9c0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1d9c4:	4622      	mov	r2, r4
   1d9c6:	f7fd feb5 	bl	1b734 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1d9ca:	2015      	movs	r0, #21
   1d9cc:	f7fd fe82 	bl	1b6d4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1d9d0:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1d9d2:	4a0c      	ldr	r2, [pc, #48]	; (1da04 <sys_clock_driver_init+0x74>)
   1d9d4:	60ab      	str	r3, [r5, #8]
   1d9d6:	602b      	str	r3, [r5, #0]
   1d9d8:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1d9da:	4b0b      	ldr	r3, [pc, #44]	; (1da08 <sys_clock_driver_init+0x78>)
   1d9dc:	4a0b      	ldr	r2, [pc, #44]	; (1da0c <sys_clock_driver_init+0x7c>)
   1d9de:	9300      	str	r3, [sp, #0]
   1d9e0:	4620      	mov	r0, r4
   1d9e2:	2300      	movs	r3, #0
   1d9e4:	9401      	str	r4, [sp, #4]
   1d9e6:	f7ff ff49 	bl	1d87c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1d9ea:	4630      	mov	r0, r6
   1d9ec:	f7fe feca 	bl	1c784 <z_nrf_clock_control_lf_on>

	return 0;
}
   1d9f0:	4620      	mov	r0, r4
   1d9f2:	b002      	add	sp, #8
   1d9f4:	bd70      	pop	{r4, r5, r6, pc}
   1d9f6:	bf00      	nop
   1d9f8:	40015000 	.word	0x40015000
   1d9fc:	2000ce38 	.word	0x2000ce38
   1da00:	e000e100 	.word	0xe000e100
   1da04:	2000d1c4 	.word	0x2000d1c4
   1da08:	0001d7a5 	.word	0x0001d7a5
   1da0c:	007fffff 	.word	0x007fffff

0001da10 <rtc_nrf_isr>:
{
   1da10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1da14:	4b2e      	ldr	r3, [pc, #184]	; (1dad0 <rtc_nrf_isr+0xc0>)
   1da16:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1da1a:	0790      	lsls	r0, r2, #30
   1da1c:	d50b      	bpl.n	1da36 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da1e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1da22:	b142      	cbz	r2, 1da36 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1da24:	2200      	movs	r2, #0
   1da26:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1da2a:	4a2a      	ldr	r2, [pc, #168]	; (1dad4 <rtc_nrf_isr+0xc4>)
   1da2c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1da30:	6813      	ldr	r3, [r2, #0]
   1da32:	3301      	adds	r3, #1
   1da34:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1da36:	4a26      	ldr	r2, [pc, #152]	; (1dad0 <rtc_nrf_isr+0xc0>)
   1da38:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1da3c:	03d9      	lsls	r1, r3, #15
   1da3e:	d527      	bpl.n	1da90 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1da40:	4b25      	ldr	r3, [pc, #148]	; (1dad8 <rtc_nrf_isr+0xc8>)
   1da42:	e8d3 1fef 	ldaex	r1, [r3]
   1da46:	f021 0001 	bic.w	r0, r1, #1
   1da4a:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1da4e:	2c00      	cmp	r4, #0
   1da50:	d1f7      	bne.n	1da42 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1da52:	07cb      	lsls	r3, r1, #31
   1da54:	d402      	bmi.n	1da5c <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da56:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   1da5a:	b1cb      	cbz	r3, 1da90 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1da5c:	2500      	movs	r5, #0
   1da5e:	4c1c      	ldr	r4, [pc, #112]	; (1dad0 <rtc_nrf_isr+0xc0>)
   1da60:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1da64:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1da68:	f7ff fee6 	bl	1d838 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1da6c:	f04f 0320 	mov.w	r3, #32
   1da70:	f3ef 8211 	mrs	r2, BASEPRI
   1da74:	f383 8812 	msr	BASEPRI_MAX, r3
   1da78:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1da7c:	4b17      	ldr	r3, [pc, #92]	; (1dadc <rtc_nrf_isr+0xcc>)
   1da7e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1da82:	42b0      	cmp	r0, r6
   1da84:	41b9      	sbcs	r1, r7
   1da86:	d206      	bcs.n	1da96 <rtc_nrf_isr+0x86>
	__asm__ volatile(
   1da88:	f382 8811 	msr	BASEPRI, r2
   1da8c:	f3bf 8f6f 	isb	sy
}
   1da90:	b003      	add	sp, #12
   1da92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1da96:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
   1da9a:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1da9e:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   1daa2:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1daa4:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
   1daa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1daac:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dab0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1dab4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1dab8:	f382 8811 	msr	BASEPRI, r2
   1dabc:	f3bf 8f6f 	isb	sy
		if (handler) {
   1dac0:	2900      	cmp	r1, #0
   1dac2:	d0e5      	beq.n	1da90 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
   1dac4:	9000      	str	r0, [sp, #0]
   1dac6:	4632      	mov	r2, r6
   1dac8:	463b      	mov	r3, r7
   1daca:	4628      	mov	r0, r5
   1dacc:	4788      	blx	r1
   1dace:	e7df      	b.n	1da90 <rtc_nrf_isr+0x80>
   1dad0:	40015000 	.word	0x40015000
   1dad4:	2000d1c8 	.word	0x2000d1c8
   1dad8:	2000d1c0 	.word	0x2000d1c0
   1dadc:	2000ce38 	.word	0x2000ce38

0001dae0 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1dae0:	1c43      	adds	r3, r0, #1
{
   1dae2:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1dae4:	d021      	beq.n	1db2a <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1dae6:	2801      	cmp	r0, #1
   1dae8:	dd21      	ble.n	1db2e <sys_clock_set_timeout+0x4e>
   1daea:	4a12      	ldr	r2, [pc, #72]	; (1db34 <sys_clock_set_timeout+0x54>)
   1daec:	4b12      	ldr	r3, [pc, #72]	; (1db38 <sys_clock_set_timeout+0x58>)
   1daee:	4290      	cmp	r0, r2
   1daf0:	bfd4      	ite	le
   1daf2:	4604      	movle	r4, r0
   1daf4:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1daf6:	f7ff fe9f 	bl	1d838 <z_nrf_rtc_timer_read>
   1dafa:	4b10      	ldr	r3, [pc, #64]	; (1db3c <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   1dafc:	490e      	ldr	r1, [pc, #56]	; (1db38 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1dafe:	e9d3 2300 	ldrd	r2, r3, [r3]
   1db02:	1a80      	subs	r0, r0, r2
		cyc = 0;
   1db04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1db08:	bf28      	it	cs
   1db0a:	2400      	movcs	r4, #0
	cyc += unannounced;
   1db0c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1db0e:	428c      	cmp	r4, r1
   1db10:	bf28      	it	cs
   1db12:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   1db14:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1db16:	490a      	ldr	r1, [pc, #40]	; (1db40 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
   1db18:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1db1a:	9001      	str	r0, [sp, #4]
   1db1c:	9100      	str	r1, [sp, #0]
   1db1e:	f143 0300 	adc.w	r3, r3, #0
   1db22:	f7ff feab 	bl	1d87c <compare_set>
}
   1db26:	b002      	add	sp, #8
   1db28:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   1db2a:	4c03      	ldr	r4, [pc, #12]	; (1db38 <sys_clock_set_timeout+0x58>)
   1db2c:	e7e3      	b.n	1daf6 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1db2e:	2401      	movs	r4, #1
   1db30:	e7e1      	b.n	1daf6 <sys_clock_set_timeout+0x16>
   1db32:	bf00      	nop
   1db34:	007ffffe 	.word	0x007ffffe
   1db38:	007fffff 	.word	0x007fffff
   1db3c:	2000ce48 	.word	0x2000ce48
   1db40:	0001d7a5 	.word	0x0001d7a5

0001db44 <sys_clock_elapsed>:
{
   1db44:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1db46:	f7ff fe77 	bl	1d838 <z_nrf_rtc_timer_read>
   1db4a:	4b02      	ldr	r3, [pc, #8]	; (1db54 <sys_clock_elapsed+0x10>)
   1db4c:	681b      	ldr	r3, [r3, #0]
}
   1db4e:	1ac0      	subs	r0, r0, r3
   1db50:	bd08      	pop	{r3, pc}
   1db52:	bf00      	nop
   1db54:	2000ce48 	.word	0x2000ce48

0001db58 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1db58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1db5c:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
   1db5e:	4e3f      	ldr	r6, [pc, #252]	; (1dc5c <pinctrl_configure_pins+0x104>)
   1db60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1db64:	4281      	cmp	r1, r0
   1db66:	d102      	bne.n	1db6e <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1db68:	2000      	movs	r0, #0
}
   1db6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1db6e:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1db70:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1db74:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
   1db78:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1db7a:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   1db7e:	bf08      	it	eq
   1db80:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1db84:	2d19      	cmp	r5, #25
   1db86:	d866      	bhi.n	1dc56 <pinctrl_configure_pins+0xfe>
   1db88:	e8df f005 	tbb	[pc, r5]
   1db8c:	1e1b160d 	.word	0x1e1b160d
   1db90:	651e2d21 	.word	0x651e2d21
   1db94:	31656565 	.word	0x31656565
   1db98:	65656551 	.word	0x65656551
   1db9c:	65656565 	.word	0x65656565
   1dba0:	5c546565 	.word	0x5c546565
   1dba4:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
   1dba6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   1dbaa:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1dbae:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
   1dbb2:	60b5      	str	r5, [r6, #8]
}
   1dbb4:	2501      	movs	r5, #1
   1dbb6:	e002      	b.n	1dbbe <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
   1dbb8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1dbbc:	2500      	movs	r5, #0
   1dbbe:	46ac      	mov	ip, r5
   1dbc0:	e01c      	b.n	1dbfc <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
   1dbc2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   1dbc6:	e7f0      	b.n	1dbaa <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
   1dbc8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   1dbcc:	e7f6      	b.n	1dbbc <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1dbce:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1dbd0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   1dbd4:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1dbd8:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   1dbdc:	f8c6 c00c 	str.w	ip, [r6, #12]
}
   1dbe0:	f04f 0c01 	mov.w	ip, #1
   1dbe4:	e00a      	b.n	1dbfc <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1dbe6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   1dbea:	2501      	movs	r5, #1
   1dbec:	e7f2      	b.n	1dbd4 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1dbee:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1dbf2:	2c00      	cmp	r4, #0
   1dbf4:	d1e2      	bne.n	1dbbc <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1dbf6:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
   1dbf8:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1dbfa:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1dbfc:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1dc00:	0224      	lsls	r4, r4, #8
   1dc02:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1dc06:	f1b8 0f00 	cmp.w	r8, #0
   1dc0a:	bf1c      	itt	ne
   1dc0c:	f04f 0c00 	movne.w	ip, #0
   1dc10:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1dc12:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
   1dc16:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
   1dc1a:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1dc1e:	ea44 040c 	orr.w	r4, r4, ip
   1dc22:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1dc26:	3380      	adds	r3, #128	; 0x80
   1dc28:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1dc2c:	e79a      	b.n	1db64 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1dc2e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1dc32:	e7de      	b.n	1dbf2 <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1dc34:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1dc38:	6805      	ldr	r5, [r0, #0]
   1dc3a:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
   1dc3e:	2d00      	cmp	r5, #0
   1dc40:	d0d3      	beq.n	1dbea <pinctrl_configure_pins+0x92>
   1dc42:	e7b2      	b.n	1dbaa <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1dc44:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1dc48:	e7f6      	b.n	1dc38 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1dc4a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1dc4e:	e7f3      	b.n	1dc38 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1dc50:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   1dc54:	e7f0      	b.n	1dc38 <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
   1dc56:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1dc5a:	e786      	b.n	1db6a <pinctrl_configure_pins+0x12>
   1dc5c:	40842500 	.word	0x40842500

0001dc60 <_nrf_modem_lib_init>:
			nrf_modem_at_err(err), nrf_modem_at_err_type(err));
	}
}

static int _nrf_modem_lib_init(const struct device *unused)
{
   1dc60:	b570      	push	{r4, r5, r6, lr}
	int err;
	(void) err;

	if (!first_time_init) {
   1dc62:	4d1a      	ldr	r5, [pc, #104]	; (1dccc <_nrf_modem_lib_init+0x6c>)
   1dc64:	4c1a      	ldr	r4, [pc, #104]	; (1dcd0 <_nrf_modem_lib_init+0x70>)
   1dc66:	782b      	ldrb	r3, [r5, #0]
   1dc68:	b933      	cbnz	r3, 1dc78 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   1dc6a:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   1dc6e:	4819      	ldr	r0, [pc, #100]	; (1dcd4 <_nrf_modem_lib_init+0x74>)
   1dc70:	f00a fa52 	bl	28118 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   1dc74:	2301      	movs	r3, #1
   1dc76:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
   1dc78:	2200      	movs	r2, #0
   1dc7a:	2101      	movs	r1, #1
   1dc7c:	202a      	movs	r0, #42	; 0x2a
   1dc7e:	f7fd fd59 	bl	1b734 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params);
   1dc82:	4815      	ldr	r0, [pc, #84]	; (1dcd8 <_nrf_modem_lib_init+0x78>)
   1dc84:	f005 fd4a 	bl	2371c <nrf_modem_init>
   1dc88:	4d14      	ldr	r5, [pc, #80]	; (1dcdc <_nrf_modem_lib_init+0x7c>)
   1dc8a:	6028      	str	r0, [r5, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1dc8c:	f04f 32ff 	mov.w	r2, #4294967295
   1dc90:	f04f 33ff 	mov.w	r3, #4294967295
   1dc94:	480f      	ldr	r0, [pc, #60]	; (1dcd4 <_nrf_modem_lib_init+0x74>)
   1dc96:	f006 f879 	bl	23d8c <z_impl_k_mutex_lock>
	return list->head;
   1dc9a:	6820      	ldr	r0, [r4, #0]
	if (IS_ENABLED(CONFIG_NRF_MODEM_LIB_LOG_FW_VERSION_UUID)) {
		log_fw_version_uuid();
	}

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   1dc9c:	b120      	cbz	r0, 1dca8 <_nrf_modem_lib_init+0x48>
	return node->next;
   1dc9e:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   1dca0:	3004      	adds	r0, #4
   1dca2:	f006 f95d 	bl	23f60 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   1dca6:	b944      	cbnz	r4, 1dcba <_nrf_modem_lib_init+0x5a>
	return z_impl_k_mutex_unlock(mutex);
   1dca8:	480a      	ldr	r0, [pc, #40]	; (1dcd4 <_nrf_modem_lib_init+0x74>)
   1dcaa:	f006 f8e9 	bl	23e80 <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&slist_mutex);

	LOG_DBG("Modem library has initialized, ret %d", init_ret);
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   1dcae:	4c0c      	ldr	r4, [pc, #48]	; (1dce0 <_nrf_modem_lib_init+0x80>)
   1dcb0:	4e0c      	ldr	r6, [pc, #48]	; (1dce4 <_nrf_modem_lib_init+0x84>)
   1dcb2:	42b4      	cmp	r4, r6
   1dcb4:	d304      	bcc.n	1dcc0 <_nrf_modem_lib_init+0x60>
		 */
		return 0;
	}

	return init_ret;
}
   1dcb6:	2000      	movs	r0, #0
   1dcb8:	bd70      	pop	{r4, r5, r6, pc}
   1dcba:	4620      	mov	r0, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   1dcbc:	6824      	ldr	r4, [r4, #0]
   1dcbe:	e7ef      	b.n	1dca0 <_nrf_modem_lib_init+0x40>
		e->callback(init_ret, e->context);
   1dcc0:	e9d4 3100 	ldrd	r3, r1, [r4]
   1dcc4:	6828      	ldr	r0, [r5, #0]
   1dcc6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   1dcc8:	3408      	adds	r4, #8
   1dcca:	e7f2      	b.n	1dcb2 <_nrf_modem_lib_init+0x52>
   1dccc:	2000d8b9 	.word	0x2000d8b9
   1dcd0:	2000d1e4 	.word	0x2000d1e4
   1dcd4:	2000d1d0 	.word	0x2000d1d0
   1dcd8:	00029234 	.word	0x00029234
   1dcdc:	2000d1cc 	.word	0x2000d1cc
   1dce0:	0002b684 	.word	0x0002b684
   1dce4:	0002b694 	.word	0x0002b694

0001dce8 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   1dce8:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1dcea:	4b0f      	ldr	r3, [pc, #60]	; (1dd28 <thread_monitor_entry_get+0x40>)
{
   1dcec:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   1dcee:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1dcf0:	4b0e      	ldr	r3, [pc, #56]	; (1dd2c <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1dcf2:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
   1dcf4:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1dcf6:	4618      	mov	r0, r3
   1dcf8:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1dcfa:	42b8      	cmp	r0, r7
   1dcfc:	d301      	bcc.n	1dd02 <thread_monitor_entry_get+0x1a>
   1dcfe:	3d01      	subs	r5, #1
   1dd00:	d104      	bne.n	1dd0c <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   1dd02:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   1dd04:	3a01      	subs	r2, #1
	new_entry->id = id;
   1dd06:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1dd08:	605a      	str	r2, [r3, #4]
}
   1dd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
   1dd0c:	6804      	ldr	r4, [r0, #0]
   1dd0e:	428c      	cmp	r4, r1
   1dd10:	d0fb      	beq.n	1dd0a <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
   1dd12:	b13c      	cbz	r4, 1dd24 <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
   1dd14:	6844      	ldr	r4, [r0, #4]
   1dd16:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   1dd18:	42a6      	cmp	r6, r4
   1dd1a:	bfbc      	itt	lt
   1dd1c:	4603      	movlt	r3, r0
   1dd1e:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1dd20:	3008      	adds	r0, #8
   1dd22:	e7ea      	b.n	1dcfa <thread_monitor_entry_get+0x12>
   1dd24:	4603      	mov	r3, r0
   1dd26:	e7ec      	b.n	1dd02 <thread_monitor_entry_get+0x1a>
   1dd28:	2000d294 	.word	0x2000d294
   1dd2c:	2000d2a0 	.word	0x2000d2a0

0001dd30 <on_init>:
	list->head = NULL;
   1dd30:	2000      	movs	r0, #0
   1dd32:	4b05      	ldr	r3, [pc, #20]	; (1dd48 <on_init+0x18>)
	list->tail = NULL;
   1dd34:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1dd38:	4b04      	ldr	r3, [pc, #16]	; (1dd4c <on_init+0x1c>)
   1dd3a:	e8d3 2fef 	ldaex	r2, [r3]
   1dd3e:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1dd42:	2900      	cmp	r1, #0
   1dd44:	d1f9      	bne.n	1dd3a <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   1dd46:	4770      	bx	lr
   1dd48:	2000d298 	.word	0x2000d298
   1dd4c:	2000d294 	.word	0x2000d294

0001dd50 <nrf_modem_os_timedwait>:
{
   1dd50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dd54:	b088      	sub	sp, #32
   1dd56:	4605      	mov	r5, r0
   1dd58:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
   1dd5a:	f00a f933 	bl	27fc4 <nrf_modem_is_initialized>
   1dd5e:	b920      	cbnz	r0, 1dd6a <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
   1dd60:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   1dd64:	b008      	add	sp, #32
   1dd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   1dd6a:	f00a fbf2 	bl	28552 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1dd6e:	6833      	ldr	r3, [r6, #0]
   1dd70:	4604      	mov	r4, r0
   1dd72:	2b00      	cmp	r3, #0
   1dd74:	460f      	mov	r7, r1
   1dd76:	d104      	bne.n	1dd82 <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
   1dd78:	f006 fcba 	bl	246f0 <z_impl_k_yield>
		return -NRF_EAGAIN;
   1dd7c:	f06f 000a 	mvn.w	r0, #10
   1dd80:	e7f0      	b.n	1dd64 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
   1dd82:	bfbc      	itt	lt
   1dd84:	f04f 33ff 	movlt.w	r3, #4294967295
   1dd88:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1dd8a:	2201      	movs	r2, #1
   1dd8c:	2100      	movs	r1, #0
   1dd8e:	a801      	add	r0, sp, #4
   1dd90:	f00a fa46 	bl	28220 <z_impl_k_sem_init>
   1dd94:	46e8      	mov	r8, sp
	thread->context = context;
   1dd96:	9507      	str	r5, [sp, #28]
	__asm__ volatile(
   1dd98:	f04f 0320 	mov.w	r3, #32
   1dd9c:	f3ef 8a11 	mrs	sl, BASEPRI
   1dda0:	f383 8812 	msr	BASEPRI_MAX, r3
   1dda4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1dda8:	f006 fd3e 	bl	24828 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1ddac:	f7ff ff9c 	bl	1dce8 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1ddb0:	f8df 9118 	ldr.w	r9, [pc, #280]	; 1decc <nrf_modem_os_timedwait+0x17c>
   1ddb4:	6842      	ldr	r2, [r0, #4]
   1ddb6:	f8d9 3000 	ldr.w	r3, [r9]
   1ddba:	429a      	cmp	r2, r3
   1ddbc:	d16d      	bne.n	1de9a <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
   1ddbe:	2300      	movs	r3, #0
	return list->tail;
   1ddc0:	4d43      	ldr	r5, [pc, #268]	; (1ded0 <nrf_modem_os_timedwait+0x180>)
	parent->next = child;
   1ddc2:	9300      	str	r3, [sp, #0]
	return list->tail;
   1ddc4:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1ddc6:	2b00      	cmp	r3, #0
   1ddc8:	d16e      	bne.n	1dea8 <nrf_modem_os_timedwait+0x158>
	list->head = node;
   1ddca:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
   1ddce:	f38a 8811 	msr	BASEPRI, sl
   1ddd2:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1ddd6:	6833      	ldr	r3, [r6, #0]
   1ddd8:	1c5a      	adds	r2, r3, #1
   1ddda:	d06a      	beq.n	1deb2 <nrf_modem_os_timedwait+0x162>
   1dddc:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1dde0:	f240 30e7 	movw	r0, #999	; 0x3e7
   1dde4:	2100      	movs	r1, #0
   1dde6:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   1ddea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ddee:	2300      	movs	r3, #0
   1ddf0:	fbcc 010e 	smlal	r0, r1, ip, lr
   1ddf4:	f7fa ff88 	bl	18d08 <__aeabi_uldivmod>
   1ddf8:	4602      	mov	r2, r0
   1ddfa:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1ddfc:	a801      	add	r0, sp, #4
   1ddfe:	f006 f8d5 	bl	23fac <z_impl_k_sem_take>
	__asm__ volatile(
   1de02:	f04f 0320 	mov.w	r3, #32
   1de06:	f3ef 8a11 	mrs	sl, BASEPRI
   1de0a:	f383 8812 	msr	BASEPRI_MAX, r3
   1de0e:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1de12:	2200      	movs	r2, #0
	return list->head;
   1de14:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1de16:	b15b      	cbz	r3, 1de30 <nrf_modem_os_timedwait+0xe0>
   1de18:	4543      	cmp	r3, r8
   1de1a:	d154      	bne.n	1dec6 <nrf_modem_os_timedwait+0x176>
	return node->next;
   1de1c:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
   1de1e:	2a00      	cmp	r2, #0
   1de20:	d14b      	bne.n	1deba <nrf_modem_os_timedwait+0x16a>
   1de22:	686a      	ldr	r2, [r5, #4]
	list->head = node;
   1de24:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1de26:	429a      	cmp	r2, r3
   1de28:	d100      	bne.n	1de2c <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
   1de2a:	6069      	str	r1, [r5, #4]
	parent->next = child;
   1de2c:	2300      	movs	r3, #0
   1de2e:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
   1de30:	f006 fcfa 	bl	24828 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1de34:	f7ff ff58 	bl	1dce8 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1de38:	f8d9 3000 	ldr.w	r3, [r9]
   1de3c:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1de3e:	f38a 8811 	msr	BASEPRI, sl
   1de42:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   1de46:	f00a f8bd 	bl	27fc4 <nrf_modem_is_initialized>
   1de4a:	2800      	cmp	r0, #0
   1de4c:	d088      	beq.n	1dd60 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
   1de4e:	6835      	ldr	r5, [r6, #0]
   1de50:	1c6b      	adds	r3, r5, #1
   1de52:	d027      	beq.n	1dea4 <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
   1de54:	f00a fb7d 	bl	28552 <z_impl_k_uptime_ticks>
   1de58:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   1de5c:	fba0 320e 	umull	r3, r2, r0, lr
   1de60:	fb0e 2101 	mla	r1, lr, r1, r2
   1de64:	fba4 420e 	umull	r4, r2, r4, lr
   1de68:	fb0e 2207 	mla	r2, lr, r7, r2
   1de6c:	0bdb      	lsrs	r3, r3, #15
   1de6e:	0be4      	lsrs	r4, r4, #15
   1de70:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1de74:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
   1de78:	1b1b      	subs	r3, r3, r4
   1de7a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   1de7e:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   1de82:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
   1de86:	1aed      	subs	r5, r5, r3
   1de88:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   1de8c:	f1bc 0f00 	cmp.w	ip, #0
   1de90:	bfb8      	it	lt
   1de92:	2500      	movlt	r5, #0
   1de94:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
   1de96:	b92d      	cbnz	r5, 1dea4 <nrf_modem_os_timedwait+0x154>
   1de98:	e770      	b.n	1dd7c <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
   1de9a:	6043      	str	r3, [r0, #4]
   1de9c:	f38a 8811 	msr	BASEPRI, sl
   1dea0:	f3bf 8f6f 	isb	sy
		return 0;
   1dea4:	2000      	movs	r0, #0
   1dea6:	e75d      	b.n	1dd64 <nrf_modem_os_timedwait+0x14>
   1dea8:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   1deac:	f8c5 8004 	str.w	r8, [r5, #4]
   1deb0:	e78d      	b.n	1ddce <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1deb2:	f04f 32ff 	mov.w	r2, #4294967295
   1deb6:	4613      	mov	r3, r2
   1deb8:	e7a0      	b.n	1ddfc <nrf_modem_os_timedwait+0xac>
	parent->next = child;
   1deba:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1debc:	6869      	ldr	r1, [r5, #4]
   1debe:	4299      	cmp	r1, r3
	list->tail = node;
   1dec0:	bf08      	it	eq
   1dec2:	606a      	streq	r2, [r5, #4]
}
   1dec4:	e7b2      	b.n	1de2c <nrf_modem_os_timedwait+0xdc>
	return node->next;
   1dec6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dec8:	681b      	ldr	r3, [r3, #0]
   1deca:	e7a4      	b.n	1de16 <nrf_modem_os_timedwait+0xc6>
   1decc:	2000d294 	.word	0x2000d294
   1ded0:	2000d298 	.word	0x2000d298

0001ded4 <nrf_modem_os_sem_init>:
{
   1ded4:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   1ded6:	6804      	ldr	r4, [r0, #0]
   1ded8:	4b0a      	ldr	r3, [pc, #40]	; (1df04 <nrf_modem_os_sem_init+0x30>)
   1deda:	b12c      	cbz	r4, 1dee8 <nrf_modem_os_sem_init+0x14>
   1dedc:	429c      	cmp	r4, r3
   1dede:	d303      	bcc.n	1dee8 <nrf_modem_os_sem_init+0x14>
   1dee0:	f103 05a8 	add.w	r5, r3, #168	; 0xa8
   1dee4:	42ac      	cmp	r4, r5
   1dee6:	d308      	bcc.n	1defa <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
   1dee8:	4d07      	ldr	r5, [pc, #28]	; (1df08 <nrf_modem_os_sem_init+0x34>)
   1deea:	782c      	ldrb	r4, [r5, #0]
   1deec:	1c66      	adds	r6, r4, #1
   1deee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1def2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1def6:	702e      	strb	r6, [r5, #0]
   1def8:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   1defa:	6800      	ldr	r0, [r0, #0]
}
   1defc:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1defe:	f00a b98f 	b.w	28220 <z_impl_k_sem_init>
   1df02:	bf00      	nop
   1df04:	2000d1ec 	.word	0x2000d1ec
   1df08:	2000d8ba 	.word	0x2000d8ba

0001df0c <nrf_modem_os_event_notify>:
{
   1df0c:	b538      	push	{r3, r4, r5, lr}
   1df0e:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1df10:	4b0a      	ldr	r3, [pc, #40]	; (1df3c <nrf_modem_os_event_notify+0x30>)
   1df12:	e8d3 1fef 	ldaex	r1, [r3]
   1df16:	3101      	adds	r1, #1
   1df18:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1df1c:	2a00      	cmp	r2, #0
   1df1e:	d1f8      	bne.n	1df12 <nrf_modem_os_event_notify+0x6>
	return list->head;
   1df20:	4b07      	ldr	r3, [pc, #28]	; (1df40 <nrf_modem_os_event_notify+0x34>)
   1df22:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1df24:	b904      	cbnz	r4, 1df28 <nrf_modem_os_event_notify+0x1c>
}
   1df26:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
   1df28:	69e3      	ldr	r3, [r4, #28]
   1df2a:	42ab      	cmp	r3, r5
   1df2c:	d000      	beq.n	1df30 <nrf_modem_os_event_notify+0x24>
   1df2e:	b915      	cbnz	r5, 1df36 <nrf_modem_os_event_notify+0x2a>
	z_impl_k_sem_give(sem);
   1df30:	1d20      	adds	r0, r4, #4
   1df32:	f006 f815 	bl	23f60 <z_impl_k_sem_give>
	return node->next;
   1df36:	6824      	ldr	r4, [r4, #0]
   1df38:	e7f4      	b.n	1df24 <nrf_modem_os_event_notify+0x18>
   1df3a:	bf00      	nop
   1df3c:	2000d294 	.word	0x2000d294
   1df40:	2000d298 	.word	0x2000d298

0001df44 <nrf_modem_os_alloc>:
{
   1df44:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
   1df46:	2200      	movs	r2, #0
   1df48:	2300      	movs	r3, #0
   1df4a:	4801      	ldr	r0, [pc, #4]	; (1df50 <nrf_modem_os_alloc+0xc>)
   1df4c:	f00a b8a1 	b.w	28092 <k_heap_alloc>
   1df50:	2000d2f0 	.word	0x2000d2f0

0001df54 <nrf_modem_os_free>:
{
   1df54:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
   1df56:	4801      	ldr	r0, [pc, #4]	; (1df5c <nrf_modem_os_free+0x8>)
   1df58:	f00a b8a5 	b.w	280a6 <k_heap_free>
   1df5c:	2000d2f0 	.word	0x2000d2f0

0001df60 <nrf_modem_os_shm_tx_alloc>:
{
   1df60:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
   1df62:	2200      	movs	r2, #0
   1df64:	2300      	movs	r3, #0
   1df66:	4801      	ldr	r0, [pc, #4]	; (1df6c <nrf_modem_os_shm_tx_alloc+0xc>)
   1df68:	f00a b893 	b.w	28092 <k_heap_alloc>
   1df6c:	2000d304 	.word	0x2000d304

0001df70 <nrf_modem_os_shm_tx_free>:
{
   1df70:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
   1df72:	4801      	ldr	r0, [pc, #4]	; (1df78 <nrf_modem_os_shm_tx_free+0x8>)
   1df74:	f00a b897 	b.w	280a6 <k_heap_free>
   1df78:	2000d304 	.word	0x2000d304

0001df7c <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   1df7c:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
   1df7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1df82:	4906      	ldr	r1, [pc, #24]	; (1df9c <nrf_modem_os_init+0x20>)
   1df84:	4806      	ldr	r0, [pc, #24]	; (1dfa0 <nrf_modem_os_init+0x24>)
   1df86:	f00a f82f 	bl	27fe8 <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
   1df8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
   1df8e:	f44f 5202 	mov.w	r2, #8320	; 0x2080
   1df92:	4904      	ldr	r1, [pc, #16]	; (1dfa4 <nrf_modem_os_init+0x28>)
   1df94:	4804      	ldr	r0, [pc, #16]	; (1dfa8 <nrf_modem_os_init+0x2c>)
   1df96:	f00a b827 	b.w	27fe8 <k_heap_init>
   1df9a:	bf00      	nop
   1df9c:	2000d8bb 	.word	0x2000d8bb
   1dfa0:	2000d2f0 	.word	0x2000d2f0
   1dfa4:	200084e8 	.word	0x200084e8
   1dfa8:	2000d304 	.word	0x2000d304

0001dfac <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1dfac:	2801      	cmp	r0, #1
   1dfae:	d00e      	beq.n	1dfce <z_to_nrf_optname+0x22>
   1dfb0:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1dfb4:	d113      	bne.n	1dfde <z_to_nrf_optname+0x32>
	case SOL_TLS:
		switch (z_in_optname) {
   1dfb6:	1e4b      	subs	r3, r1, #1
   1dfb8:	2b0d      	cmp	r3, #13
   1dfba:	d810      	bhi.n	1dfde <z_to_nrf_optname+0x32>
   1dfbc:	e8df f003 	tbb	[pc, r3]
   1dfc0:	0f626262 	.word	0x0f626262
   1dfc4:	0f0f6262 	.word	0x0f0f6262
   1dfc8:	620f0f0f 	.word	0x620f0f0f
   1dfcc:	6262      	.short	0x6262
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   1dfce:	2937      	cmp	r1, #55	; 0x37
   1dfd0:	dc05      	bgt.n	1dfde <z_to_nrf_optname+0x32>
   1dfd2:	2913      	cmp	r1, #19
   1dfd4:	dc06      	bgt.n	1dfe4 <z_to_nrf_optname+0x38>
   1dfd6:	2902      	cmp	r1, #2
   1dfd8:	d054      	beq.n	1e084 <z_to_nrf_optname+0xd8>
   1dfda:	2904      	cmp	r1, #4
   1dfdc:	d052      	beq.n	1e084 <z_to_nrf_optname+0xd8>
   1dfde:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   1dfe2:	4770      	bx	lr
   1dfe4:	f1a1 0314 	sub.w	r3, r1, #20
   1dfe8:	2b23      	cmp	r3, #35	; 0x23
   1dfea:	d8f8      	bhi.n	1dfde <z_to_nrf_optname+0x32>
   1dfec:	a001      	add	r0, pc, #4	; (adr r0, 1dff4 <z_to_nrf_optname+0x48>)
   1dfee:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1dff2:	bf00      	nop
   1dff4:	0001e085 	.word	0x0001e085
   1dff8:	0001e085 	.word	0x0001e085
   1dffc:	0001dfdf 	.word	0x0001dfdf
   1e000:	0001dfdf 	.word	0x0001dfdf
   1e004:	0001dfdf 	.word	0x0001dfdf
   1e008:	0001e085 	.word	0x0001e085
   1e00c:	0001dfdf 	.word	0x0001dfdf
   1e010:	0001dfdf 	.word	0x0001dfdf
   1e014:	0001dfdf 	.word	0x0001dfdf
   1e018:	0001dfdf 	.word	0x0001dfdf
   1e01c:	0001e085 	.word	0x0001e085
   1e020:	0001e085 	.word	0x0001e085
   1e024:	0001e085 	.word	0x0001e085
   1e028:	0001dfdf 	.word	0x0001dfdf
   1e02c:	0001dfdf 	.word	0x0001dfdf
   1e030:	0001dfdf 	.word	0x0001dfdf
   1e034:	0001dfdf 	.word	0x0001dfdf
   1e038:	0001dfdf 	.word	0x0001dfdf
   1e03c:	0001dfdf 	.word	0x0001dfdf
   1e040:	0001dfdf 	.word	0x0001dfdf
   1e044:	0001dfdf 	.word	0x0001dfdf
   1e048:	0001dfdf 	.word	0x0001dfdf
   1e04c:	0001dfdf 	.word	0x0001dfdf
   1e050:	0001dfdf 	.word	0x0001dfdf
   1e054:	0001dfdf 	.word	0x0001dfdf
   1e058:	0001dfdf 	.word	0x0001dfdf
   1e05c:	0001dfdf 	.word	0x0001dfdf
   1e060:	0001dfdf 	.word	0x0001dfdf
   1e064:	0001dfdf 	.word	0x0001dfdf
   1e068:	0001dfdf 	.word	0x0001dfdf
   1e06c:	0001e085 	.word	0x0001e085
   1e070:	0001e085 	.word	0x0001e085
   1e074:	0001e085 	.word	0x0001e085
   1e078:	0001e085 	.word	0x0001e085
   1e07c:	0001e085 	.word	0x0001e085
   1e080:	0001e085 	.word	0x0001e085
	int retval = 0;
   1e084:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   1e086:	6011      	str	r1, [r2, #0]
   1e088:	4770      	bx	lr
   1e08a:	bf00      	nop

0001e08c <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   1e08c:	f04f 32ff 	mov.w	r2, #4294967295
   1e090:	4b06      	ldr	r3, [pc, #24]	; (1e0ac <nrf91_nrf_modem_lib_socket_offload_init+0x20>)
	}

	return 0;
}
   1e092:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   1e094:	601a      	str	r2, [r3, #0]
   1e096:	619a      	str	r2, [r3, #24]
   1e098:	631a      	str	r2, [r3, #48]	; 0x30
   1e09a:	649a      	str	r2, [r3, #72]	; 0x48
   1e09c:	661a      	str	r2, [r3, #96]	; 0x60
   1e09e:	679a      	str	r2, [r3, #120]	; 0x78
   1e0a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   1e0a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
   1e0a8:	4770      	bx	lr
   1e0aa:	bf00      	nop
   1e0ac:	2000d31c 	.word	0x2000d31c

0001e0b0 <nrf91_socket_iface_init>:
	struct net_if *iface;
} nrf91_socket_iface_data;

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;
   1e0b0:	4b03      	ldr	r3, [pc, #12]	; (1e0c0 <nrf91_socket_iface_init+0x10>)

	iface->if_dev->socket_offload = nrf91_socket_create;
   1e0b2:	4a04      	ldr	r2, [pc, #16]	; (1e0c4 <nrf91_socket_iface_init+0x14>)
	nrf91_socket_iface_data.iface = iface;
   1e0b4:	6018      	str	r0, [r3, #0]
	iface->if_dev->socket_offload = nrf91_socket_create;
   1e0b6:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1e0b8:	4803      	ldr	r0, [pc, #12]	; (1e0c8 <nrf91_socket_iface_init+0x18>)
	iface->if_dev->socket_offload = nrf91_socket_create;
   1e0ba:	61da      	str	r2, [r3, #28]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1e0bc:	f7fd b8fc 	b.w	1b2b8 <socket_offload_dns_register>
   1e0c0:	2000d318 	.word	0x2000d318
   1e0c4:	0001e599 	.word	0x0001e599
   1e0c8:	0002925c 	.word	0x0002925c

0001e0cc <nrf91_socket_is_supported>:
	if (offload_disabled) {
   1e0cc:	490b      	ldr	r1, [pc, #44]	; (1e0fc <nrf91_socket_is_supported+0x30>)
{
   1e0ce:	4603      	mov	r3, r0
	if (offload_disabled) {
   1e0d0:	7808      	ldrb	r0, [r1, #0]
   1e0d2:	b980      	cbnz	r0, 1e0f6 <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   1e0d4:	490a      	ldr	r1, [pc, #40]	; (1e100 <nrf91_socket_is_supported+0x34>)
   1e0d6:	7809      	ldrb	r1, [r1, #0]
   1e0d8:	b139      	cbz	r1, 1e0ea <nrf91_socket_is_supported+0x1e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1e0da:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
   1e0de:	2902      	cmp	r1, #2
   1e0e0:	d90a      	bls.n	1e0f8 <nrf91_socket_is_supported+0x2c>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   1e0e2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1e0e6:	2a01      	cmp	r2, #1
   1e0e8:	d906      	bls.n	1e0f8 <nrf91_socket_is_supported+0x2c>
	return (family == AF_PACKET) || (family == AF_INET) || (family == AF_INET6);
   1e0ea:	3b01      	subs	r3, #1
   1e0ec:	2b02      	cmp	r3, #2
   1e0ee:	bf8c      	ite	hi
   1e0f0:	2000      	movhi	r0, #0
   1e0f2:	2001      	movls	r0, #1
	return af_is_supported(family);
   1e0f4:	4770      	bx	lr
		return false;
   1e0f6:	2000      	movs	r0, #0
}
   1e0f8:	4770      	bx	lr
   1e0fa:	bf00      	nop
   1e0fc:	2000dd3c 	.word	0x2000dd3c
   1e100:	2000dd3b 	.word	0x2000dd3b

0001e104 <pollcb>:
{
   1e104:	b470      	push	{r4, r5, r6}
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1e106:	2300      	movs	r3, #0
   1e108:	2518      	movs	r5, #24
	ctx = find_ctx(pollfd->fd);
   1e10a:	6801      	ldr	r1, [r0, #0]
		if (offload_ctx[i].nrf_fd == fd) {
   1e10c:	4c08      	ldr	r4, [pc, #32]	; (1e130 <pollcb+0x2c>)
   1e10e:	fb05 f203 	mul.w	r2, r5, r3
   1e112:	58a6      	ldr	r6, [r4, r2]
   1e114:	42b1      	cmp	r1, r6
   1e116:	d106      	bne.n	1e126 <pollcb+0x22>
	k_poll_signal_raise(&ctx->poll, pollfd->revents);
   1e118:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   1e11c:	3208      	adds	r2, #8
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1e11e:	18a0      	adds	r0, r4, r2
}
   1e120:	bc70      	pop	{r4, r5, r6}
   1e122:	f006 be0b 	b.w	24d3c <z_impl_k_poll_signal_raise>
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1e126:	3301      	adds	r3, #1
   1e128:	2b08      	cmp	r3, #8
   1e12a:	d1f0      	bne.n	1e10e <pollcb+0xa>
}
   1e12c:	bc70      	pop	{r4, r5, r6}
   1e12e:	4770      	bx	lr
   1e130:	2000d31c 	.word	0x2000d31c

0001e134 <nrf91_socket_offload_getaddrinfo>:
{
   1e134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e138:	4614      	mov	r4, r2
   1e13a:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1e13c:	2100      	movs	r1, #0
{
   1e13e:	b08b      	sub	sp, #44	; 0x2c
   1e140:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e142:	2220      	movs	r2, #32
   1e144:	a802      	add	r0, sp, #8
{
   1e146:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1e148:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e14a:	f00a fb33 	bl	287b4 <memset>
	if (hints != NULL) {
   1e14e:	b15c      	cbz	r4, 1e168 <nrf91_socket_offload_getaddrinfo+0x34>
	nrf_out->ai_flags = z_in->ai_flags;
   1e150:	6863      	ldr	r3, [r4, #4]
   1e152:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_in->ai_socktype;
   1e154:	68e3      	ldr	r3, [r4, #12]
   1e156:	9304      	str	r3, [sp, #16]
	nrf_out->ai_family = z_in->ai_family;
   1e158:	68a3      	ldr	r3, [r4, #8]
   1e15a:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_in->ai_protocol;
   1e15c:	6923      	ldr	r3, [r4, #16]
   1e15e:	9305      	str	r3, [sp, #20]
	if (z_in->ai_canonname != NULL) {
   1e160:	69e3      	ldr	r3, [r4, #28]
   1e162:	b103      	cbz	r3, 1e166 <nrf91_socket_offload_getaddrinfo+0x32>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1e164:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   1e166:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   1e168:	f04f 32ff 	mov.w	r2, #4294967295
   1e16c:	f04f 33ff 	mov.w	r3, #4294967295
   1e170:	4834      	ldr	r0, [pc, #208]	; (1e244 <nrf91_socket_offload_getaddrinfo+0x110>)
   1e172:	f008 fdef 	bl	26d54 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1e176:	4631      	mov	r1, r6
   1e178:	4622      	mov	r2, r4
   1e17a:	4628      	mov	r0, r5
   1e17c:	ab01      	add	r3, sp, #4
   1e17e:	f004 f94f 	bl	22420 <nrf_getaddrinfo>
	if (retval != 0) {
   1e182:	4606      	mov	r6, r0
   1e184:	b948      	cbnz	r0, 1e19a <nrf91_socket_offload_getaddrinfo+0x66>
	struct zsock_addrinfo *latest_z_res = NULL;
   1e186:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   1e188:	4681      	mov	r9, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1e18a:	f04f 0a18 	mov.w	sl, #24
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1e18e:	9d01      	ldr	r5, [sp, #4]
	*res = NULL;
   1e190:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1e192:	b94d      	cbnz	r5, 1e1a8 <nrf91_socket_offload_getaddrinfo+0x74>
	nrf_freeaddrinfo(nrf_res);
   1e194:	9801      	ldr	r0, [sp, #4]
   1e196:	f009 fa9f 	bl	276d8 <nrf_freeaddrinfo>
	k_mutex_unlock(&getaddrinfo_lock);
   1e19a:	482a      	ldr	r0, [pc, #168]	; (1e244 <nrf91_socket_offload_getaddrinfo+0x110>)
   1e19c:	f008 fddc 	bl	26d58 <k_mutex_unlock.isra.0>
}
   1e1a0:	4630      	mov	r0, r6
   1e1a2:	b00b      	add	sp, #44	; 0x2c
   1e1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					k_malloc(sizeof(struct zsock_addrinfo));
   1e1a8:	2050      	movs	r0, #80	; 0x50
   1e1aa:	f00a fabe 	bl	2872a <k_malloc>
		if (next_z_res == NULL) {
   1e1ae:	4604      	mov	r4, r0
   1e1b0:	2800      	cmp	r0, #0
   1e1b2:	d040      	beq.n	1e236 <nrf91_socket_offload_getaddrinfo+0x102>
	z_out->ai_next = NULL;
   1e1b4:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1e1b8:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_in->ai_flags;
   1e1bc:	682b      	ldr	r3, [r5, #0]
   1e1be:	6043      	str	r3, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1e1c0:	68ab      	ldr	r3, [r5, #8]
   1e1c2:	60c3      	str	r3, [r0, #12]
	z_out->ai_family = nrf_in->ai_family;
   1e1c4:	686b      	ldr	r3, [r5, #4]
   1e1c6:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_in->ai_protocol;
   1e1c8:	68eb      	ldr	r3, [r5, #12]
   1e1ca:	6103      	str	r3, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1e1cc:	f8d5 b004 	ldr.w	fp, [r5, #4]
   1e1d0:	f1bb 0f01 	cmp.w	fp, #1
   1e1d4:	d114      	bne.n	1e200 <nrf91_socket_offload_getaddrinfo+0xcc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1e1d6:	2008      	movs	r0, #8
   1e1d8:	f00a faa7 	bl	2872a <k_malloc>
   1e1dc:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1e1de:	b338      	cbz	r0, 1e230 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1e1e0:	2308      	movs	r3, #8
   1e1e2:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1e1e4:	696b      	ldr	r3, [r5, #20]
	ptr->sin_port = nrf_in->sin_port;
   1e1e6:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_family = AF_INET;
   1e1e8:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_port = nrf_in->sin_port;
   1e1ec:	8042      	strh	r2, [r0, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e1ee:	68db      	ldr	r3, [r3, #12]
   1e1f0:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   1e1f2:	f1b8 0f00 	cmp.w	r8, #0
   1e1f6:	d121      	bne.n	1e23c <nrf91_socket_offload_getaddrinfo+0x108>
			*res = next_z_res;
   1e1f8:	603c      	str	r4, [r7, #0]
					k_malloc(sizeof(struct zsock_addrinfo));
   1e1fa:	46a0      	mov	r8, r4
		next_nrf_res = next_nrf_res->ai_next;
   1e1fc:	69ed      	ldr	r5, [r5, #28]
   1e1fe:	e7c8      	b.n	1e192 <nrf91_socket_offload_getaddrinfo+0x5e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1e200:	f1bb 0f02 	cmp.w	fp, #2
   1e204:	d009      	beq.n	1e21a <nrf91_socket_offload_getaddrinfo+0xe6>
			k_free(next_z_res);
   1e206:	f00a fa89 	bl	2871c <k_free>
			retval = DNS_EAI_FAMILY;
   1e20a:	f06f 0605 	mvn.w	r6, #5
		nrf91_socket_offload_freeaddrinfo(*res);
   1e20e:	6838      	ldr	r0, [r7, #0]
   1e210:	f008 fcd5 	bl	26bbe <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1e214:	2300      	movs	r3, #0
   1e216:	603b      	str	r3, [r7, #0]
   1e218:	e7bc      	b.n	1e194 <nrf91_socket_offload_getaddrinfo+0x60>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1e21a:	2018      	movs	r0, #24
   1e21c:	f00a fa85 	bl	2872a <k_malloc>
   1e220:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1e222:	b128      	cbz	r0, 1e230 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1e224:	f8c4 a014 	str.w	sl, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   1e228:	6969      	ldr	r1, [r5, #20]
   1e22a:	f008 fcd5 	bl	26bd8 <nrf_to_z_ipv6>
		if (err == -ENOMEM) {
   1e22e:	e7e0      	b.n	1e1f2 <nrf91_socket_offload_getaddrinfo+0xbe>
			k_free(next_z_res);
   1e230:	4620      	mov	r0, r4
   1e232:	f00a fa73 	bl	2871c <k_free>
					k_malloc(sizeof(struct zsock_addrinfo));
   1e236:	f06f 0609 	mvn.w	r6, #9
   1e23a:	e7e8      	b.n	1e20e <nrf91_socket_offload_getaddrinfo+0xda>
			latest_z_res->ai_next = next_z_res;
   1e23c:	f8c8 4000 	str.w	r4, [r8]
   1e240:	e7db      	b.n	1e1fa <nrf91_socket_offload_getaddrinfo+0xc6>
   1e242:	bf00      	nop
   1e244:	2000c878 	.word	0x2000c878

0001e248 <nrf91_socket_offload_sendmsg>:
{
   1e248:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1e24c:	4607      	mov	r7, r0
   1e24e:	4690      	mov	r8, r2
	if (msg == NULL) {
   1e250:	460c      	mov	r4, r1
   1e252:	b379      	cbz	r1, 1e2b4 <nrf91_socket_offload_sendmsg+0x6c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e254:	2300      	movs	r3, #0
	ssize_t len = 0;
   1e256:	461a      	mov	r2, r3
   1e258:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e25a:	4283      	cmp	r3, r0
   1e25c:	d134      	bne.n	1e2c8 <nrf91_socket_offload_sendmsg+0x80>
	if (len <= sizeof(buf)) {
   1e25e:	2a80      	cmp	r2, #128	; 0x80
   1e260:	d871      	bhi.n	1e346 <nrf91_socket_offload_sendmsg+0xfe>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1e262:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   1e264:	f04f 32ff 	mov.w	r2, #4294967295
   1e268:	f04f 33ff 	mov.w	r3, #4294967295
   1e26c:	4838      	ldr	r0, [pc, #224]	; (1e350 <nrf91_socket_offload_sendmsg+0x108>)
   1e26e:	f008 fd71 	bl	26d54 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   1e272:	46a9      	mov	r9, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1e274:	4e37      	ldr	r6, [pc, #220]	; (1e354 <nrf91_socket_offload_sendmsg+0x10c>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   1e276:	68e3      	ldr	r3, [r4, #12]
   1e278:	429d      	cmp	r5, r3
   1e27a:	d32c      	bcc.n	1e2d6 <nrf91_socket_offload_sendmsg+0x8e>
		offset = 0;
   1e27c:	2600      	movs	r6, #0
		ret = 0;
   1e27e:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   1e280:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1e354 <nrf91_socket_offload_sendmsg+0x10c>
		while ((offset < len) && (ret >= 0)) {
   1e284:	45b1      	cmp	r9, r6
   1e286:	dd11      	ble.n	1e2ac <nrf91_socket_offload_sendmsg+0x64>
   1e288:	b985      	cbnz	r5, 1e2ac <nrf91_socket_offload_sendmsg+0x64>
			ret = nrf91_socket_offload_sendto(obj,
   1e28a:	6863      	ldr	r3, [r4, #4]
   1e28c:	4638      	mov	r0, r7
   1e28e:	9301      	str	r3, [sp, #4]
   1e290:	6823      	ldr	r3, [r4, #0]
   1e292:	eba9 0206 	sub.w	r2, r9, r6
   1e296:	9300      	str	r3, [sp, #0]
   1e298:	eb0a 0106 	add.w	r1, sl, r6
   1e29c:	4643      	mov	r3, r8
   1e29e:	f008 fcc8 	bl	26c32 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   1e2a2:	1e05      	subs	r5, r0, #0
   1e2a4:	ddee      	ble.n	1e284 <nrf91_socket_offload_sendmsg+0x3c>
				offset += ret;
   1e2a6:	442e      	add	r6, r5
		while ((offset < len) && (ret >= 0)) {
   1e2a8:	45b1      	cmp	r9, r6
   1e2aa:	dcee      	bgt.n	1e28a <nrf91_socket_offload_sendmsg+0x42>
		k_mutex_unlock(&sendmsg_lock);
   1e2ac:	4828      	ldr	r0, [pc, #160]	; (1e350 <nrf91_socket_offload_sendmsg+0x108>)
   1e2ae:	f008 fd53 	bl	26d58 <k_mutex_unlock.isra.0>
		return ret;
   1e2b2:	e005      	b.n	1e2c0 <nrf91_socket_offload_sendmsg+0x78>
		errno = EINVAL;
   1e2b4:	f008 f90a 	bl	264cc <__errno>
   1e2b8:	2316      	movs	r3, #22
		return -1;
   1e2ba:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   1e2be:	6003      	str	r3, [r0, #0]
}
   1e2c0:	4628      	mov	r0, r5
   1e2c2:	b002      	add	sp, #8
   1e2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   1e2c8:	68a1      	ldr	r1, [r4, #8]
   1e2ca:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1e2ce:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e2d0:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   1e2d2:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e2d4:	e7c1      	b.n	1e25a <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1e2d6:	68a3      	ldr	r3, [r4, #8]
   1e2d8:	eb06 0009 	add.w	r0, r6, r9
   1e2dc:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
   1e2e0:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   1e2e4:	6852      	ldr	r2, [r2, #4]
   1e2e6:	f00a fa58 	bl	2879a <memcpy>
			len += msg->msg_iov[i].iov_len;
   1e2ea:	68a3      	ldr	r3, [r4, #8]
   1e2ec:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   1e2f0:	4453      	add	r3, sl
   1e2f2:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   1e2f4:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   1e2f6:	4499      	add	r9, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   1e2f8:	e7bd      	b.n	1e276 <nrf91_socket_offload_sendmsg+0x2e>
		if (msg->msg_iov[i].iov_len == 0) {
   1e2fa:	68a3      	ldr	r3, [r4, #8]
   1e2fc:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   1e300:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1e304:	685b      	ldr	r3, [r3, #4]
   1e306:	b13b      	cbz	r3, 1e318 <nrf91_socket_offload_sendmsg+0xd0>
		offset = 0;
   1e308:	f04f 0900 	mov.w	r9, #0
		while (offset < msg->msg_iov[i].iov_len) {
   1e30c:	68a3      	ldr	r3, [r4, #8]
   1e30e:	eb03 020a 	add.w	r2, r3, sl
   1e312:	6852      	ldr	r2, [r2, #4]
   1e314:	4591      	cmp	r9, r2
   1e316:	d304      	bcc.n	1e322 <nrf91_socket_offload_sendmsg+0xda>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e318:	3601      	adds	r6, #1
   1e31a:	68e3      	ldr	r3, [r4, #12]
   1e31c:	429e      	cmp	r6, r3
   1e31e:	d3ec      	bcc.n	1e2fa <nrf91_socket_offload_sendmsg+0xb2>
   1e320:	e7ce      	b.n	1e2c0 <nrf91_socket_offload_sendmsg+0x78>
			ret = nrf91_socket_offload_sendto(obj,
   1e322:	f853 100a 	ldr.w	r1, [r3, sl]
   1e326:	6863      	ldr	r3, [r4, #4]
   1e328:	4449      	add	r1, r9
   1e32a:	9301      	str	r3, [sp, #4]
   1e32c:	6823      	ldr	r3, [r4, #0]
   1e32e:	4638      	mov	r0, r7
   1e330:	9300      	str	r3, [sp, #0]
   1e332:	eba2 0209 	sub.w	r2, r2, r9
   1e336:	4643      	mov	r3, r8
   1e338:	f008 fc7b 	bl	26c32 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   1e33c:	1e01      	subs	r1, r0, #0
   1e33e:	db05      	blt.n	1e34c <nrf91_socket_offload_sendmsg+0x104>
			offset += ret;
   1e340:	4489      	add	r9, r1
			len += ret;
   1e342:	440d      	add	r5, r1
   1e344:	e7e2      	b.n	1e30c <nrf91_socket_offload_sendmsg+0xc4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e346:	2600      	movs	r6, #0
	len = 0;
   1e348:	4635      	mov	r5, r6
   1e34a:	e7e6      	b.n	1e31a <nrf91_socket_offload_sendmsg+0xd2>
			ret = nrf91_socket_offload_sendto(obj,
   1e34c:	460d      	mov	r5, r1
   1e34e:	e7b7      	b.n	1e2c0 <nrf91_socket_offload_sendmsg+0x78>
   1e350:	2000c8b4 	.word	0x2000c8b4
   1e354:	2000dcbb 	.word	0x2000dcbb

0001e358 <allocate_ctx>:
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1e358:	f04f 32ff 	mov.w	r2, #4294967295
   1e35c:	f04f 33ff 	mov.w	r3, #4294967295
{
   1e360:	b570      	push	{r4, r5, r6, lr}
   1e362:	4605      	mov	r5, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1e364:	480b      	ldr	r0, [pc, #44]	; (1e394 <allocate_ctx+0x3c>)
   1e366:	f008 fcf5 	bl	26d54 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1e36a:	2300      	movs	r3, #0
   1e36c:	2018      	movs	r0, #24
		if (offload_ctx[i].nrf_fd == -1) {
   1e36e:	4a0a      	ldr	r2, [pc, #40]	; (1e398 <allocate_ctx+0x40>)
   1e370:	fb00 f103 	mul.w	r1, r0, r3
   1e374:	5856      	ldr	r6, [r2, r1]
   1e376:	188c      	adds	r4, r1, r2
   1e378:	3601      	adds	r6, #1
   1e37a:	d105      	bne.n	1e388 <allocate_ctx+0x30>
			ctx->nrf_fd = nrf_fd;
   1e37c:	5055      	str	r5, [r2, r1]
	k_mutex_unlock(&ctx_lock);
   1e37e:	4805      	ldr	r0, [pc, #20]	; (1e394 <allocate_ctx+0x3c>)
   1e380:	f008 fcea 	bl	26d58 <k_mutex_unlock.isra.0>
}
   1e384:	4620      	mov	r0, r4
   1e386:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1e388:	3301      	adds	r3, #1
   1e38a:	2b08      	cmp	r3, #8
   1e38c:	d1f0      	bne.n	1e370 <allocate_ctx+0x18>
	struct nrf_sock_ctx *ctx = NULL;
   1e38e:	2400      	movs	r4, #0
   1e390:	e7f5      	b.n	1e37e <allocate_ctx+0x26>
   1e392:	bf00      	nop
   1e394:	2000c850 	.word	0x2000c850
   1e398:	2000d31c 	.word	0x2000d31c

0001e39c <release_ctx>:
{
   1e39c:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1e39e:	4d09      	ldr	r5, [pc, #36]	; (1e3c4 <release_ctx+0x28>)
{
   1e3a0:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1e3a2:	f04f 32ff 	mov.w	r2, #4294967295
   1e3a6:	4628      	mov	r0, r5
   1e3a8:	f04f 33ff 	mov.w	r3, #4294967295
   1e3ac:	f008 fcd2 	bl	26d54 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   1e3b0:	2300      	movs	r3, #0
   1e3b2:	f04f 32ff 	mov.w	r2, #4294967295
   1e3b6:	e9c4 2300 	strd	r2, r3, [r4]
	k_mutex_unlock(&ctx_lock);
   1e3ba:	4628      	mov	r0, r5
}
   1e3bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   1e3c0:	f008 bcca 	b.w	26d58 <k_mutex_unlock.isra.0>
   1e3c4:	2000c850 	.word	0x2000c850

0001e3c8 <nrf91_socket_offload_accept>:
{
   1e3c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e3cc:	b08b      	sub	sp, #44	; 0x2c
   1e3ce:	4607      	mov	r7, r0
   1e3d0:	460c      	mov	r4, r1
   1e3d2:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   1e3d4:	f7fb fc40 	bl	19c58 <z_reserve_fd>
   1e3d8:	4606      	mov	r6, r0
	if (fd < 0) {
   1e3da:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   1e3dc:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   1e3de:	db1e      	blt.n	1e41e <nrf91_socket_offload_accept+0x56>
	if ((addr != NULL) && (addrlen != NULL)) {
   1e3e0:	b304      	cbz	r4, 1e424 <nrf91_socket_offload_accept+0x5c>
   1e3e2:	b315      	cbz	r5, 1e42a <nrf91_socket_offload_accept+0x62>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1e3e4:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1e3e6:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1e3e8:	2b08      	cmp	r3, #8
   1e3ea:	bf14      	ite	ne
   1e3ec:	2324      	movne	r3, #36	; 0x24
   1e3ee:	2310      	moveq	r3, #16
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1e3f0:	f10d 0904 	add.w	r9, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1e3f4:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1e3f6:	4649      	mov	r1, r9
   1e3f8:	f009 faed 	bl	279d6 <nrf_accept>
	if (new_sd < 0) {
   1e3fc:	f1b0 0800 	subs.w	r8, r0, #0
   1e400:	db0a      	blt.n	1e418 <nrf91_socket_offload_accept+0x50>
	ctx = allocate_ctx(new_sd);
   1e402:	f7ff ffa9 	bl	1e358 <allocate_ctx>
	if (ctx == NULL) {
   1e406:	4607      	mov	r7, r0
   1e408:	b990      	cbnz	r0, 1e430 <nrf91_socket_offload_accept+0x68>
		errno = ENOMEM;
   1e40a:	f008 f85f 	bl	264cc <__errno>
   1e40e:	230c      	movs	r3, #12
   1e410:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1e412:	4640      	mov	r0, r8
   1e414:	f004 faba 	bl	2298c <nrf_close>
	z_free_fd(fd);
   1e418:	4630      	mov	r0, r6
   1e41a:	f7fb fc6b 	bl	19cf4 <z_free_fd>
		return -1;
   1e41e:	f04f 36ff 	mov.w	r6, #4294967295
   1e422:	e018      	b.n	1e456 <nrf91_socket_offload_accept+0x8e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1e424:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1e426:	46a1      	mov	r9, r4
   1e428:	e7e5      	b.n	1e3f6 <nrf91_socket_offload_accept+0x2e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1e42a:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1e42c:	46a9      	mov	r9, r5
   1e42e:	e7e2      	b.n	1e3f6 <nrf91_socket_offload_accept+0x2e>
	if ((addr != NULL) && (addrlen != NULL)) {
   1e430:	b164      	cbz	r4, 1e44c <nrf91_socket_offload_accept+0x84>
   1e432:	b15d      	cbz	r5, 1e44c <nrf91_socket_offload_accept+0x84>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1e434:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e438:	2b01      	cmp	r3, #1
   1e43a:	d110      	bne.n	1e45e <nrf91_socket_offload_accept+0x96>
			*addrlen = sizeof(struct sockaddr_in);
   1e43c:	2208      	movs	r2, #8
   1e43e:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   1e440:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   1e444:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e446:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   1e448:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e44a:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   1e44c:	4639      	mov	r1, r7
   1e44e:	4630      	mov	r0, r6
   1e450:	4a0d      	ldr	r2, [pc, #52]	; (1e488 <nrf91_socket_offload_accept+0xc0>)
   1e452:	f7fb fc37 	bl	19cc4 <z_finalize_fd>
}
   1e456:	4630      	mov	r0, r6
   1e458:	b00b      	add	sp, #44	; 0x2c
   1e45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   1e45e:	2b02      	cmp	r3, #2
   1e460:	d106      	bne.n	1e470 <nrf91_socket_offload_accept+0xa8>
			*addrlen = sizeof(struct sockaddr_in6);
   1e462:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1e464:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   1e466:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1e468:	a901      	add	r1, sp, #4
   1e46a:	f008 fbb5 	bl	26bd8 <nrf_to_z_ipv6>
   1e46e:	e7ed      	b.n	1e44c <nrf91_socket_offload_accept+0x84>
			errno = ENOTSUP;
   1e470:	f008 f82c 	bl	264cc <__errno>
   1e474:	2386      	movs	r3, #134	; 0x86
   1e476:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1e478:	4640      	mov	r0, r8
   1e47a:	f004 fa87 	bl	2298c <nrf_close>
		release_ctx(ctx);
   1e47e:	4638      	mov	r0, r7
   1e480:	f7ff ff8c 	bl	1e39c <release_ctx>
   1e484:	e7c8      	b.n	1e418 <nrf91_socket_offload_accept+0x50>
   1e486:	bf00      	nop
   1e488:	00029264 	.word	0x00029264

0001e48c <nrf91_socket_offload_ioctl>:
{
   1e48c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (request) {
   1e48e:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
	int sd = OBJ_TO_SD(obj);
   1e492:	6804      	ldr	r4, [r0, #0]
{
   1e494:	b087      	sub	sp, #28
	switch (request) {
   1e496:	2b03      	cmp	r3, #3
   1e498:	d857      	bhi.n	1e54a <nrf91_socket_offload_ioctl+0xbe>
   1e49a:	e8df f003 	tbb	[pc, r3]
   1e49e:	4002      	.short	0x4002
   1e4a0:	5377      	.short	0x5377
	struct nrf_modem_pollcb pcb = {
   1e4a2:	2701      	movs	r7, #1
		pev_end = va_arg(args, struct k_poll_event *);
   1e4a4:	e9d2 6101 	ldrd	r6, r1, [r2, #4]
		return nrf91_poll_prepare(obj, pfd, pev, pev_end);
   1e4a8:	6813      	ldr	r3, [r2, #0]
	struct nrf_modem_pollcb pcb = {
   1e4aa:	4a3a      	ldr	r2, [pc, #232]	; (1e594 <nrf91_socket_offload_ioctl+0x108>)
   1e4ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1e4b0:	9204      	str	r2, [sp, #16]
   1e4b2:	f8ad 3014 	strh.w	r3, [sp, #20]
   1e4b6:	f88d 7016 	strb.w	r7, [sp, #22]
	if (*pev == pev_end) {
   1e4ba:	6833      	ldr	r3, [r6, #0]
   1e4bc:	4299      	cmp	r1, r3
   1e4be:	d104      	bne.n	1e4ca <nrf91_socket_offload_ioctl+0x3e>
		errno = ENOMEM;
   1e4c0:	f008 f804 	bl	264cc <__errno>
   1e4c4:	230c      	movs	r3, #12
		errno = EINVAL;
   1e4c6:	6003      	str	r3, [r0, #0]
   1e4c8:	e014      	b.n	1e4f4 <nrf91_socket_offload_ioctl+0x68>
	k_poll_signal_init(&ctx->poll);
   1e4ca:	f100 0508 	add.w	r5, r0, #8
	z_impl_k_poll_signal_init(sig);
   1e4ce:	4628      	mov	r0, r5
   1e4d0:	f00a f907 	bl	286e2 <z_impl_k_poll_signal_init>
	k_poll_event_init(*pev, K_POLL_TYPE_SIGNAL, K_POLL_MODE_NOTIFY_ONLY, &ctx->poll);
   1e4d4:	462b      	mov	r3, r5
   1e4d6:	2200      	movs	r2, #0
   1e4d8:	4639      	mov	r1, r7
   1e4da:	6830      	ldr	r0, [r6, #0]
   1e4dc:	f00a f8e4 	bl	286a8 <k_poll_event_init>
	err = nrf_setsockopt(fd, NRF_SOL_SOCKET, NRF_SO_POLLCB, &pcb, sizeof(pcb));
   1e4e0:	2308      	movs	r3, #8
   1e4e2:	4620      	mov	r0, r4
   1e4e4:	9300      	str	r3, [sp, #0]
   1e4e6:	223c      	movs	r2, #60	; 0x3c
   1e4e8:	4639      	mov	r1, r7
   1e4ea:	ab04      	add	r3, sp, #16
   1e4ec:	f004 fb8e 	bl	22c0c <nrf_setsockopt>
	if (err) {
   1e4f0:	4604      	mov	r4, r0
   1e4f2:	b110      	cbz	r0, 1e4fa <nrf91_socket_offload_ioctl+0x6e>
		retval = -1;
   1e4f4:	f04f 34ff 	mov.w	r4, #4294967295
		return nrf91_socket_offload_fcntl(sd, request, args);
   1e4f8:	e00e      	b.n	1e518 <nrf91_socket_offload_ioctl+0x8c>
	(*pev)++;
   1e4fa:	6833      	ldr	r3, [r6, #0]
   1e4fc:	3314      	adds	r3, #20
   1e4fe:	6033      	str	r3, [r6, #0]
	flags = 0;
   1e500:	e9cd 0002 	strd	r0, r0, [sp, #8]
	z_impl_k_poll_signal_check(sig, signaled, result);
   1e504:	4628      	mov	r0, r5
   1e506:	aa02      	add	r2, sp, #8
   1e508:	a903      	add	r1, sp, #12
   1e50a:	f00a f8ef 	bl	286ec <z_impl_k_poll_signal_check>
	if (!signaled) {
   1e50e:	9b03      	ldr	r3, [sp, #12]
	return -EALREADY;
   1e510:	2b00      	cmp	r3, #0
   1e512:	bf18      	it	ne
   1e514:	f06f 0477 	mvnne.w	r4, #119	; 0x77
}
   1e518:	4620      	mov	r0, r4
   1e51a:	b007      	add	sp, #28
   1e51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pev = va_arg(args, struct k_poll_event **);
   1e51e:	e9d2 4200 	ldrd	r4, r2, [r2]
	(*pev)++;
   1e522:	6813      	ldr	r3, [r2, #0]
   1e524:	3314      	adds	r3, #20
   1e526:	6013      	str	r3, [r2, #0]
	signaled = 0;
   1e528:	2300      	movs	r3, #0
	flags = 0;
   1e52a:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1e52e:	aa03      	add	r2, sp, #12
   1e530:	a904      	add	r1, sp, #16
   1e532:	3008      	adds	r0, #8
   1e534:	f00a f8da 	bl	286ec <z_impl_k_poll_signal_check>
	if (!signaled) {
   1e538:	9b04      	ldr	r3, [sp, #16]
   1e53a:	b10b      	cbz	r3, 1e540 <nrf91_socket_offload_ioctl+0xb4>
	pfd->revents = flags;
   1e53c:	9b03      	ldr	r3, [sp, #12]
   1e53e:	80e3      	strh	r3, [r4, #6]
		return nrf91_poll_update(obj, pfd, pev);
   1e540:	2400      	movs	r4, #0
   1e542:	e7e9      	b.n	1e518 <nrf91_socket_offload_ioctl+0x8c>
		ctx->lock = va_arg(args, struct k_mutex *);
   1e544:	6813      	ldr	r3, [r2, #0]
   1e546:	6043      	str	r3, [r0, #4]
		return 0;
   1e548:	e7fa      	b.n	1e540 <nrf91_socket_offload_ioctl+0xb4>
	switch (cmd) {
   1e54a:	2903      	cmp	r1, #3
   1e54c:	d012      	beq.n	1e574 <nrf91_socket_offload_ioctl+0xe8>
   1e54e:	2904      	cmp	r1, #4
   1e550:	d118      	bne.n	1e584 <nrf91_socket_offload_ioctl+0xf8>
		flags = va_arg(args, int);
   1e552:	6815      	ldr	r5, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK) {
   1e554:	f435 4380 	bics.w	r3, r5, #16384	; 0x4000
   1e558:	d003      	beq.n	1e562 <nrf91_socket_offload_ioctl+0xd6>
			errno = EINVAL;
   1e55a:	f007 ffb7 	bl	264cc <__errno>
   1e55e:	2316      	movs	r3, #22
   1e560:	6003      	str	r3, [r0, #0]
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1e562:	2104      	movs	r1, #4
   1e564:	4620      	mov	r0, r4
   1e566:	f3c5 3280 	ubfx	r2, r5, #14, #1
}
   1e56a:	b007      	add	sp, #28
   1e56c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1e570:	f009 bc71 	b.w	27e56 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1e574:	4620      	mov	r0, r4
   1e576:	2200      	movs	r2, #0
   1e578:	f009 fc6d 	bl	27e56 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1e57c:	0384      	lsls	r4, r0, #14
   1e57e:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
   1e582:	e7c9      	b.n	1e518 <nrf91_socket_offload_ioctl+0x8c>
		errno = EINVAL;
   1e584:	f007 ffa2 	bl	264cc <__errno>
   1e588:	2316      	movs	r3, #22
   1e58a:	e79c      	b.n	1e4c6 <nrf91_socket_offload_ioctl+0x3a>
	switch (request) {
   1e58c:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1e590:	e7c2      	b.n	1e518 <nrf91_socket_offload_ioctl+0x8c>
   1e592:	bf00      	nop
   1e594:	0001e105 	.word	0x0001e105

0001e598 <nrf91_socket_create>:
{
   1e598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
   1e59c:	1e0d      	subs	r5, r1, #0
{
   1e59e:	4607      	mov	r7, r0
   1e5a0:	4690      	mov	r8, r2
	if (type & SOCK_NATIVE) {
   1e5a2:	da12      	bge.n	1e5ca <nrf91_socket_create+0x32>
	k_sched_lock();
   1e5a4:	f006 f868 	bl	24678 <k_sched_lock>
	*offload_lock = true;
   1e5a8:	4e1c      	ldr	r6, [pc, #112]	; (1e61c <nrf91_socket_create+0x84>)
   1e5aa:	2301      	movs	r3, #1
   1e5ac:	7033      	strb	r3, [r6, #0]
		union { uintptr_t x; int val; } parm2 = { .val = proto };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_SOCKET);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_socket(family, type, proto);
   1e5ae:	4642      	mov	r2, r8
   1e5b0:	4638      	mov	r0, r7
   1e5b2:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
   1e5b6:	f7fc fe55 	bl	1b264 <z_impl_zsock_socket>
	*offload_lock = false;
   1e5ba:	2300      	movs	r3, #0
   1e5bc:	7033      	strb	r3, [r6, #0]
   1e5be:	4604      	mov	r4, r0
	k_sched_unlock();
   1e5c0:	f006 f86e 	bl	246a0 <k_sched_unlock>
}
   1e5c4:	4620      	mov	r0, r4
   1e5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   1e5ca:	006b      	lsls	r3, r5, #1
   1e5cc:	d503      	bpl.n	1e5d6 <nrf91_socket_create+0x3e>
	k_sched_lock();
   1e5ce:	f006 f853 	bl	24678 <k_sched_lock>
	*offload_lock = true;
   1e5d2:	4e13      	ldr	r6, [pc, #76]	; (1e620 <nrf91_socket_create+0x88>)
   1e5d4:	e7e9      	b.n	1e5aa <nrf91_socket_create+0x12>
	fd = z_reserve_fd();
   1e5d6:	f7fb fb3f 	bl	19c58 <z_reserve_fd>
	if (fd < 0) {
   1e5da:	1e04      	subs	r4, r0, #0
   1e5dc:	db09      	blt.n	1e5f2 <nrf91_socket_create+0x5a>
	retval = nrf_socket(family, type, proto);
   1e5de:	4629      	mov	r1, r5
   1e5e0:	4642      	mov	r2, r8
   1e5e2:	4638      	mov	r0, r7
   1e5e4:	f009 f88b 	bl	276fe <nrf_socket>
	if (sd < 0) {
   1e5e8:	1e05      	subs	r5, r0, #0
   1e5ea:	da05      	bge.n	1e5f8 <nrf91_socket_create+0x60>
		z_free_fd(fd);
   1e5ec:	4620      	mov	r0, r4
   1e5ee:	f7fb fb81 	bl	19cf4 <z_free_fd>
		return -1;
   1e5f2:	f04f 34ff 	mov.w	r4, #4294967295
   1e5f6:	e7e5      	b.n	1e5c4 <nrf91_socket_create+0x2c>
	ctx = allocate_ctx(sd);
   1e5f8:	f7ff feae 	bl	1e358 <allocate_ctx>
	if (ctx == NULL) {
   1e5fc:	4601      	mov	r1, r0
   1e5fe:	b938      	cbnz	r0, 1e610 <nrf91_socket_create+0x78>
		errno = ENOMEM;
   1e600:	f007 ff64 	bl	264cc <__errno>
   1e604:	230c      	movs	r3, #12
   1e606:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   1e608:	4628      	mov	r0, r5
   1e60a:	f004 f9bf 	bl	2298c <nrf_close>
		z_free_fd(fd);
   1e60e:	e7ed      	b.n	1e5ec <nrf91_socket_create+0x54>
	z_finalize_fd(fd, ctx,
   1e610:	4620      	mov	r0, r4
   1e612:	4a04      	ldr	r2, [pc, #16]	; (1e624 <nrf91_socket_create+0x8c>)
   1e614:	f7fb fb56 	bl	19cc4 <z_finalize_fd>
	return fd;
   1e618:	e7d4      	b.n	1e5c4 <nrf91_socket_create+0x2c>
   1e61a:	bf00      	nop
   1e61c:	2000dd3c 	.word	0x2000dd3c
   1e620:	2000dd3b 	.word	0x2000dd3b
   1e624:	00029264 	.word	0x00029264

0001e628 <nrf_modem_fault_handler>:

LOG_MODULE_DECLARE(nrf_modem, CONFIG_NRF_MODEM_LIB_LOG_LEVEL);

#if CONFIG_NRF_MODEM_LIB_ON_FAULT_DO_NOTHING
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault_info)
{
   1e628:	b580      	push	{r7, lr}
   1e62a:	af00      	add	r7, sp, #0
	LOG_ERR("Modem error: 0x%x, PC: 0x%x", fault_info->reason, fault_info->program_counter);
   1e62c:	b088      	sub	sp, #32
   1e62e:	466a      	mov	r2, sp
   1e630:	e9d0 1300 	ldrd	r1, r3, [r0]
   1e634:	61d3      	str	r3, [r2, #28]
   1e636:	2304      	movs	r3, #4
   1e638:	4806      	ldr	r0, [pc, #24]	; (1e654 <nrf_modem_fault_handler+0x2c>)
   1e63a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1e63e:	f842 3f10 	str.w	r3, [r2, #16]!
   1e642:	2300      	movs	r3, #0
   1e644:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e648:	4803      	ldr	r0, [pc, #12]	; (1e658 <nrf_modem_fault_handler+0x30>)
   1e64a:	f7fc fb47 	bl	1acdc <z_impl_z_log_msg_static_create>
}
   1e64e:	46bd      	mov	sp, r7
   1e650:	bd80      	pop	{r7, pc}
   1e652:	bf00      	nop
   1e654:	0002a3bc 	.word	0x0002a3bc
   1e658:	00028f9c 	.word	0x00028f9c

0001e65c <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1e65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e660:	4607      	mov	r7, r0
   1e662:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1e664:	2500      	movs	r5, #0
   1e666:	4e14      	ldr	r6, [pc, #80]	; (1e6b8 <dk_set_leds_state.part.0+0x5c>)
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1e668:	b086      	sub	sp, #24
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1e66a:	fa27 f205 	lsr.w	r2, r7, r5
   1e66e:	f012 0201 	ands.w	r2, r2, #1
   1e672:	d117      	bne.n	1e6a4 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1e674:	fa28 f305 	lsr.w	r3, r8, r5
   1e678:	07db      	lsls	r3, r3, #31
   1e67a:	d515      	bpl.n	1e6a8 <dk_set_leds_state.part.0+0x4c>
	return gpio_pin_set(spec->port, spec->pin, value);
   1e67c:	7931      	ldrb	r1, [r6, #4]
   1e67e:	6830      	ldr	r0, [r6, #0]
   1e680:	f008 fbeb 	bl	26e5a <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1e684:	4604      	mov	r4, r0
   1e686:	b178      	cbz	r0, 1e6a8 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   1e688:	4b0c      	ldr	r3, [pc, #48]	; (1e6bc <dk_set_leds_state.part.0+0x60>)
   1e68a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e68e:	9305      	str	r3, [sp, #20]
   1e690:	2302      	movs	r3, #2
   1e692:	480b      	ldr	r0, [pc, #44]	; (1e6c0 <dk_set_leds_state.part.0+0x64>)
   1e694:	aa04      	add	r2, sp, #16
   1e696:	9304      	str	r3, [sp, #16]
   1e698:	f008 fbef 	bl	26e7a <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   1e69c:	4620      	mov	r0, r4
   1e69e:	b006      	add	sp, #24
   1e6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1e6a4:	2201      	movs	r2, #1
   1e6a6:	e7e9      	b.n	1e67c <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1e6a8:	3501      	adds	r5, #1
   1e6aa:	2d06      	cmp	r5, #6
   1e6ac:	f106 0608 	add.w	r6, r6, #8
   1e6b0:	d1db      	bne.n	1e66a <dk_set_leds_state.part.0+0xe>
	return 0;
   1e6b2:	2400      	movs	r4, #0
   1e6b4:	e7f2      	b.n	1e69c <dk_set_leds_state.part.0+0x40>
   1e6b6:	bf00      	nop
   1e6b8:	000292a4 	.word	0x000292a4
   1e6bc:	0002a3d8 	.word	0x0002a3d8
   1e6c0:	00028ee4 	.word	0x00028ee4

0001e6c4 <dk_leds_init>:
{
   1e6c4:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1e6c6:	2500      	movs	r5, #0
   1e6c8:	4e10      	ldr	r6, [pc, #64]	; (1e70c <dk_leds_init+0x48>)
{
   1e6ca:	b086      	sub	sp, #24
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
   1e6cc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1e6d0:	4630      	mov	r0, r6
   1e6d2:	f008 fbad 	bl	26e30 <gpio_pin_configure_dt>
		if (err) {
   1e6d6:	4604      	mov	r4, r0
   1e6d8:	b950      	cbnz	r0, 1e6f0 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1e6da:	3501      	adds	r5, #1
   1e6dc:	2d06      	cmp	r5, #6
   1e6de:	f106 0608 	add.w	r6, r6, #8
   1e6e2:	d1f3      	bne.n	1e6cc <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1e6e4:	210f      	movs	r1, #15
}
   1e6e6:	b006      	add	sp, #24
   1e6e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e6ec:	f7ff bfb6 	b.w	1e65c <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1e6f0:	4b07      	ldr	r3, [pc, #28]	; (1e710 <dk_leds_init+0x4c>)
   1e6f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e6f6:	9305      	str	r3, [sp, #20]
   1e6f8:	2302      	movs	r3, #2
   1e6fa:	4806      	ldr	r0, [pc, #24]	; (1e714 <dk_leds_init+0x50>)
   1e6fc:	aa04      	add	r2, sp, #16
   1e6fe:	9304      	str	r3, [sp, #16]
   1e700:	f008 fbbb 	bl	26e7a <z_log_msg_static_create.constprop.0>
}
   1e704:	4620      	mov	r0, r4
   1e706:	b006      	add	sp, #24
   1e708:	bd70      	pop	{r4, r5, r6, pc}
   1e70a:	bf00      	nop
   1e70c:	000292a4 	.word	0x000292a4
   1e710:	0002a3ee 	.word	0x0002a3ee
   1e714:	00028ee4 	.word	0x00028ee4

0001e718 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1e718:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1e71a:	2805      	cmp	r0, #5
{
   1e71c:	460a      	mov	r2, r1
   1e71e:	b086      	sub	sp, #24
	if (led_idx >= ARRAY_SIZE(leds)) {
   1e720:	d90e      	bls.n	1e740 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   1e722:	4b12      	ldr	r3, [pc, #72]	; (1e76c <dk_set_led+0x54>)
		return -EINVAL;
   1e724:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   1e728:	9305      	str	r3, [sp, #20]
   1e72a:	2302      	movs	r3, #2
   1e72c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e730:	480f      	ldr	r0, [pc, #60]	; (1e770 <dk_set_led+0x58>)
   1e732:	aa04      	add	r2, sp, #16
   1e734:	9304      	str	r3, [sp, #16]
   1e736:	f008 fba0 	bl	26e7a <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1e73a:	4620      	mov	r0, r4
   1e73c:	b006      	add	sp, #24
   1e73e:	bd10      	pop	{r4, pc}
   1e740:	4b0c      	ldr	r3, [pc, #48]	; (1e774 <dk_set_led+0x5c>)
   1e742:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1e746:	7909      	ldrb	r1, [r1, #4]
   1e748:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1e74c:	f008 fb85 	bl	26e5a <gpio_pin_set>
	if (err) {
   1e750:	4604      	mov	r4, r0
   1e752:	2800      	cmp	r0, #0
   1e754:	d0f1      	beq.n	1e73a <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   1e756:	4b08      	ldr	r3, [pc, #32]	; (1e778 <dk_set_led+0x60>)
   1e758:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e75c:	9305      	str	r3, [sp, #20]
   1e75e:	2302      	movs	r3, #2
   1e760:	4803      	ldr	r0, [pc, #12]	; (1e770 <dk_set_led+0x58>)
   1e762:	aa04      	add	r2, sp, #16
   1e764:	9304      	str	r3, [sp, #16]
   1e766:	f008 fb88 	bl	26e7a <z_log_msg_static_create.constprop.0>
   1e76a:	e7e6      	b.n	1e73a <dk_set_led+0x22>
   1e76c:	0002a408 	.word	0x0002a408
   1e770:	00028ee4 	.word	0x00028ee4
   1e774:	000292a4 	.word	0x000292a4
   1e778:	0002a3d8 	.word	0x0002a3d8

0001e77c <at_monitor_dispatch>:
/* Dispatch AT notifications immediately, or schedules a workqueue task to do that.
 * Keep this function public so that it can be called by tests.
 * This function is called from an ISR.
 */
void at_monitor_dispatch(const char *notif)
{
   1e77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e780:	4604      	mov	r4, r0
	struct at_notif_fifo *at_notif;
	size_t sz_needed;

	__ASSERT_NO_MSG(notif != NULL);

	monitored = false;
   1e782:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e784:	4d24      	ldr	r5, [pc, #144]	; (1e818 <at_monitor_dispatch+0x9c>)
   1e786:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1e81c <at_monitor_dispatch+0xa0>
{
   1e78a:	af00      	add	r7, sp, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e78c:	4545      	cmp	r5, r8
   1e78e:	d321      	bcc.n	1e7d4 <at_monitor_dispatch+0x58>
				monitored = true;
			}
		}
	}

	if (!monitored) {
   1e790:	b1ee      	cbz	r6, 1e7ce <at_monitor_dispatch+0x52>
		/* Only copy monitored notifications to save heap */
		return;
	}

	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   1e792:	4620      	mov	r0, r4
   1e794:	f7fa fc2a 	bl	18fec <strlen>

	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   1e798:	2200      	movs	r2, #0
   1e79a:	1d41      	adds	r1, r0, #5
   1e79c:	2300      	movs	r3, #0
   1e79e:	4820      	ldr	r0, [pc, #128]	; (1e820 <at_monitor_dispatch+0xa4>)
   1e7a0:	f009 fc77 	bl	28092 <k_heap_alloc>
	if (!at_notif) {
   1e7a4:	4605      	mov	r5, r0
   1e7a6:	bb50      	cbnz	r0, 1e7fe <at_monitor_dispatch+0x82>
		LOG_WRN("No heap space for incoming notification: %s",
   1e7a8:	466e      	mov	r6, sp
   1e7aa:	b088      	sub	sp, #32
   1e7ac:	466a      	mov	r2, sp
   1e7ae:	4b1d      	ldr	r3, [pc, #116]	; (1e824 <at_monitor_dispatch+0xa8>)
   1e7b0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1e7b4:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e7b8:	8393      	strh	r3, [r2, #28]
   1e7ba:	4b1b      	ldr	r3, [pc, #108]	; (1e828 <at_monitor_dispatch+0xac>)
   1e7bc:	f842 3f10 	str.w	r3, [r2, #16]!
   1e7c0:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1e7c4:	4603      	mov	r3, r0
   1e7c6:	4819      	ldr	r0, [pc, #100]	; (1e82c <at_monitor_dispatch+0xb0>)
   1e7c8:	f7fc fa88 	bl	1acdc <z_impl_z_log_msg_static_create>
   1e7cc:	46b5      	mov	sp, r6

	strcpy(at_notif->data, notif);

	k_fifo_put(&at_monitor_fifo, at_notif);
	k_work_submit(&at_monitor_work);
}
   1e7ce:	46bd      	mov	sp, r7
   1e7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return mon->flags.paused;
   1e7d4:	7a2b      	ldrb	r3, [r5, #8]
		if (!is_paused(e) && has_match(e, notif)) {
   1e7d6:	07da      	lsls	r2, r3, #31
   1e7d8:	d405      	bmi.n	1e7e6 <at_monitor_dispatch+0x6a>
   1e7da:	6829      	ldr	r1, [r5, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1e7dc:	b929      	cbnz	r1, 1e7ea <at_monitor_dispatch+0x6e>
	return mon->flags.direct;
   1e7de:	7a2b      	ldrb	r3, [r5, #8]
			if (is_direct(e)) {
   1e7e0:	079b      	lsls	r3, r3, #30
   1e7e2:	d408      	bmi.n	1e7f6 <at_monitor_dispatch+0x7a>
				monitored = true;
   1e7e4:	2601      	movs	r6, #1
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e7e6:	350c      	adds	r5, #12
   1e7e8:	e7d0      	b.n	1e78c <at_monitor_dispatch+0x10>
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1e7ea:	4620      	mov	r0, r4
   1e7ec:	f00a f830 	bl	28850 <strstr>
   1e7f0:	2800      	cmp	r0, #0
   1e7f2:	d1f4      	bne.n	1e7de <at_monitor_dispatch+0x62>
   1e7f4:	e7f7      	b.n	1e7e6 <at_monitor_dispatch+0x6a>
				e->handler(notif);
   1e7f6:	4620      	mov	r0, r4
   1e7f8:	686b      	ldr	r3, [r5, #4]
   1e7fa:	4798      	blx	r3
   1e7fc:	e7f3      	b.n	1e7e6 <at_monitor_dispatch+0x6a>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1e7fe:	4621      	mov	r1, r4
   1e800:	3004      	adds	r0, #4
   1e802:	f009 ffec 	bl	287de <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   1e806:	4629      	mov	r1, r5
   1e808:	4809      	ldr	r0, [pc, #36]	; (1e830 <at_monitor_dispatch+0xb4>)
   1e80a:	f009 fcfe 	bl	2820a <k_queue_append>
	k_work_submit(&at_monitor_work);
   1e80e:	4809      	ldr	r0, [pc, #36]	; (1e834 <at_monitor_dispatch+0xb8>)
   1e810:	f005 fcea 	bl	241e8 <k_work_submit>
   1e814:	e7db      	b.n	1e7ce <at_monitor_dispatch+0x52>
   1e816:	bf00      	nop
   1e818:	2000c76c 	.word	0x2000c76c
   1e81c:	2000c7c0 	.word	0x2000c7c0
   1e820:	2000c828 	.word	0x2000c828
   1e824:	0002a437 	.word	0x0002a437
   1e828:	01000003 	.word	0x01000003
   1e82c:	00028ec4 	.word	0x00028ec4
   1e830:	2000c8f4 	.word	0x2000c8f4
   1e834:	2000c660 	.word	0x2000c660

0001e838 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   1e838:	b598      	push	{r3, r4, r7, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1e83a:	480c      	ldr	r0, [pc, #48]	; (1e86c <at_monitor_sys_init+0x34>)
{
   1e83c:	af00      	add	r7, sp, #0
	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1e83e:	f004 fd51 	bl	232e4 <nrf_modem_at_notif_handler_set>
	if (err) {
   1e842:	b178      	cbz	r0, 1e864 <at_monitor_sys_init+0x2c>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   1e844:	466c      	mov	r4, sp
   1e846:	b088      	sub	sp, #32
   1e848:	466a      	mov	r2, sp
   1e84a:	4b09      	ldr	r3, [pc, #36]	; (1e870 <at_monitor_sys_init+0x38>)
   1e84c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e850:	2303      	movs	r3, #3
   1e852:	f842 3f10 	str.w	r3, [r2, #16]!
   1e856:	2300      	movs	r3, #0
   1e858:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e85c:	4805      	ldr	r0, [pc, #20]	; (1e874 <at_monitor_sys_init+0x3c>)
   1e85e:	f7fc fa3d 	bl	1acdc <z_impl_z_log_msg_static_create>
   1e862:	46a5      	mov	sp, r4
	}

	return 0;
}
   1e864:	2000      	movs	r0, #0
   1e866:	46bd      	mov	sp, r7
   1e868:	bd98      	pop	{r3, r4, r7, pc}
   1e86a:	bf00      	nop
   1e86c:	0001e77d 	.word	0x0001e77d
   1e870:	0002a463 	.word	0x0002a463
   1e874:	00028ec4 	.word	0x00028ec4

0001e878 <at_monitor_task>:
{
   1e878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   1e87c:	4e14      	ldr	r6, [pc, #80]	; (1e8d0 <at_monitor_task+0x58>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e87e:	4f15      	ldr	r7, [pc, #84]	; (1e8d4 <at_monitor_task+0x5c>)
		k_heap_free(&at_monitor_heap, at_notif);
   1e880:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1e8d8 <at_monitor_task+0x60>
   1e884:	2200      	movs	r2, #0
   1e886:	2300      	movs	r3, #0
   1e888:	4630      	mov	r0, r6
   1e88a:	f005 fb35 	bl	23ef8 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   1e88e:	4605      	mov	r5, r0
   1e890:	b9c8      	cbnz	r0, 1e8c6 <at_monitor_task+0x4e>
}
   1e892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
   1e896:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   1e898:	07da      	lsls	r2, r3, #31
   1e89a:	d406      	bmi.n	1e8aa <at_monitor_task+0x32>
   1e89c:	079b      	lsls	r3, r3, #30
   1e89e:	d404      	bmi.n	1e8aa <at_monitor_task+0x32>
   1e8a0:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1e8a2:	b951      	cbnz	r1, 1e8ba <at_monitor_task+0x42>
				e->handler(at_notif->data);
   1e8a4:	4648      	mov	r0, r9
   1e8a6:	6863      	ldr	r3, [r4, #4]
   1e8a8:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e8aa:	340c      	adds	r4, #12
   1e8ac:	42bc      	cmp	r4, r7
   1e8ae:	d3f2      	bcc.n	1e896 <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
   1e8b0:	4629      	mov	r1, r5
   1e8b2:	4640      	mov	r0, r8
   1e8b4:	f009 fbf7 	bl	280a6 <k_heap_free>
   1e8b8:	e7e4      	b.n	1e884 <at_monitor_task+0xc>
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1e8ba:	4648      	mov	r0, r9
   1e8bc:	f009 ffc8 	bl	28850 <strstr>
   1e8c0:	2800      	cmp	r0, #0
   1e8c2:	d1ef      	bne.n	1e8a4 <at_monitor_task+0x2c>
   1e8c4:	e7f1      	b.n	1e8aa <at_monitor_task+0x32>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e8c6:	4c05      	ldr	r4, [pc, #20]	; (1e8dc <at_monitor_task+0x64>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   1e8c8:	f105 0904 	add.w	r9, r5, #4
   1e8cc:	e7ee      	b.n	1e8ac <at_monitor_task+0x34>
   1e8ce:	bf00      	nop
   1e8d0:	2000c8f4 	.word	0x2000c8f4
   1e8d4:	2000c7c0 	.word	0x2000c7c0
   1e8d8:	2000c828 	.word	0x2000c828
   1e8dc:	2000c76c 	.word	0x2000c76c

0001e8e0 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   1e8e0:	4b09      	ldr	r3, [pc, #36]	; (1e908 <is_valid_notification_char+0x28>)
   1e8e2:	5c1b      	ldrb	r3, [r3, r0]
   1e8e4:	f003 0303 	and.w	r3, r3, #3
   1e8e8:	2b02      	cmp	r3, #2
   1e8ea:	bf08      	it	eq
   1e8ec:	3820      	subeq	r0, #32
   1e8ee:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
   1e8f0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1e8f4:	2b19      	cmp	r3, #25
   1e8f6:	d904      	bls.n	1e902 <is_valid_notification_char+0x22>
   1e8f8:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   1e8fc:	4258      	negs	r0, r3
   1e8fe:	4158      	adcs	r0, r3
   1e900:	4770      	bx	lr
		return true;
   1e902:	2001      	movs	r0, #1
	}

	return false;
}
   1e904:	4770      	bx	lr
   1e906:	bf00      	nop
   1e908:	0002b550 	.word	0x0002b550

0001e90c <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1e90c:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
   1e910:	b2db      	uxtb	r3, r3
   1e912:	2b11      	cmp	r3, #17
   1e914:	bf9d      	ittte	ls
   1e916:	4803      	ldrls	r0, [pc, #12]	; (1e924 <is_separator+0x18>)
   1e918:	40d8      	lsrls	r0, r3
   1e91a:	f000 0001 	andls.w	r0, r0, #1
{
   1e91e:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
   1e920:	4770      	bx	lr
   1e922:	bf00      	nop
   1e924:	00024001 	.word	0x00024001

0001e928 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   1e928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e92a:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1e92c:	2400      	movs	r4, #0
   1e92e:	4e09      	ldr	r6, [pc, #36]	; (1e954 <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   1e930:	f856 7b04 	ldr.w	r7, [r6], #4
   1e934:	4638      	mov	r0, r7
   1e936:	f7fa fb59 	bl	18fec <strlen>
   1e93a:	4639      	mov	r1, r7
   1e93c:	4602      	mov	r2, r0
   1e93e:	4628      	mov	r0, r5
   1e940:	f009 ff55 	bl	287ee <strncmp>
		if (!diff) {
   1e944:	b120      	cbz	r0, 1e950 <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1e946:	3401      	adds	r4, #1
   1e948:	2c04      	cmp	r4, #4
   1e94a:	d1f1      	bne.n	1e930 <is_result+0x8>
			return true;
		}
	}

	return false;
   1e94c:	2000      	movs	r0, #0
}
   1e94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
   1e950:	2001      	movs	r0, #1
   1e952:	e7fc      	b.n	1e94e <is_result+0x26>
   1e954:	000292d4 	.word	0x000292d4

0001e958 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   1e958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   1e95c:	6804      	ldr	r4, [r0, #0]
{
   1e95e:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e960:	7823      	ldrb	r3, [r4, #0]
   1e962:	4680      	mov	r8, r0
   1e964:	460e      	mov	r6, r1
   1e966:	4615      	mov	r5, r2
	const char *tmpstr = *str;
   1e968:	9400      	str	r4, [sp, #0]
   1e96a:	2b00      	cmp	r3, #0
   1e96c:	f000 80cd 	beq.w	1eb0a <at_parse_process_element+0x1b2>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1e970:	4b67      	ldr	r3, [pc, #412]	; (1eb10 <at_parse_process_element+0x1b8>)
   1e972:	781b      	ldrb	r3, [r3, #0]
   1e974:	2b06      	cmp	r3, #6
   1e976:	d113      	bne.n	1e9a0 <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
   1e978:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
   1e97a:	1c62      	adds	r2, r4, #1
   1e97c:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
   1e97e:	4611      	mov	r1, r2
   1e980:	4607      	mov	r7, r0
   1e982:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e986:	f7ff ffab 	bl	1e8e0 <is_valid_notification_char>
   1e98a:	2800      	cmp	r0, #0
   1e98c:	d1f7      	bne.n	1e97e <at_parse_process_element+0x26>
   1e98e:	b107      	cbz	r7, 1e992 <at_parse_process_element+0x3a>
   1e990:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1e992:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1e994:	4622      	mov	r2, r4
   1e996:	4631      	mov	r1, r6
   1e998:	4628      	mov	r0, r5
   1e99a:	f008 fb15 	bl	26fc8 <at_params_string_put>
   1e99e:	e046      	b.n	1ea2e <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
   1e9a0:	3b01      	subs	r3, #1
   1e9a2:	2b08      	cmp	r3, #8
   1e9a4:	d843      	bhi.n	1ea2e <at_parse_process_element+0xd6>
   1e9a6:	e8df f003 	tbb	[pc, r3]
   1e9aa:	4964      	.short	0x4964
   1e9ac:	420da05a 	.word	0x420da05a
   1e9b0:	3f1c      	.short	0x3f1c
   1e9b2:	05          	.byte	0x05
   1e9b3:	00          	.byte	0x00
   1e9b4:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
   1e9b6:	2100      	movs	r1, #0
   1e9b8:	4613      	mov	r3, r2
   1e9ba:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e9be:	b160      	cbz	r0, 1e9da <at_parse_process_element+0x82>
   1e9c0:	2101      	movs	r1, #1
   1e9c2:	e7f9      	b.n	1e9b8 <at_parse_process_element+0x60>
   1e9c4:	4622      	mov	r2, r4
   1e9c6:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
   1e9c8:	4f52      	ldr	r7, [pc, #328]	; (1eb14 <at_parse_process_element+0x1bc>)
   1e9ca:	4613      	mov	r3, r2
   1e9cc:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e9d0:	5c38      	ldrb	r0, [r7, r0]
   1e9d2:	f010 0f44 	tst.w	r0, #68	; 0x44
   1e9d6:	f040 8096 	bne.w	1eb06 <at_parse_process_element+0x1ae>
   1e9da:	b101      	cbz	r1, 1e9de <at_parse_process_element+0x86>
   1e9dc:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1e9de:	1b1b      	subs	r3, r3, r4
   1e9e0:	e7d8      	b.n	1e994 <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
   1e9e2:	4668      	mov	r0, sp
   1e9e4:	f008 fa67 	bl	26eb6 <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
   1e9e8:	2200      	movs	r2, #0
   1e9ea:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   1e9ec:	4849      	ldr	r0, [pc, #292]	; (1eb14 <at_parse_process_element+0x1bc>)
   1e9ee:	461f      	mov	r7, r3
   1e9f0:	f813 1b01 	ldrb.w	r1, [r3], #1
   1e9f4:	5c41      	ldrb	r1, [r0, r1]
   1e9f6:	0749      	lsls	r1, r1, #29
   1e9f8:	d110      	bne.n	1ea1c <at_parse_process_element+0xc4>
   1e9fa:	b102      	cbz	r2, 1e9fe <at_parse_process_element+0xa6>
   1e9fc:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1e9fe:	1b3b      	subs	r3, r7, r4
   1ea00:	4622      	mov	r2, r4
   1ea02:	4631      	mov	r1, r6
   1ea04:	4628      	mov	r0, r5
   1ea06:	f008 fadf 	bl	26fc8 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1ea0a:	783b      	ldrb	r3, [r7, #0]
   1ea0c:	2b3d      	cmp	r3, #61	; 0x3d
   1ea0e:	d107      	bne.n	1ea20 <at_parse_process_element+0xc8>
   1ea10:	787b      	ldrb	r3, [r7, #1]
   1ea12:	2b3f      	cmp	r3, #63	; 0x3f
   1ea14:	d10b      	bne.n	1ea2e <at_parse_process_element+0xd6>
			tmpstr += 2;
   1ea16:	3702      	adds	r7, #2
		tmpstr++;
   1ea18:	9700      	str	r7, [sp, #0]
   1ea1a:	e008      	b.n	1ea2e <at_parse_process_element+0xd6>
   1ea1c:	2201      	movs	r2, #1
   1ea1e:	e7e6      	b.n	1e9ee <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1ea20:	2b3f      	cmp	r3, #63	; 0x3f
   1ea22:	d104      	bne.n	1ea2e <at_parse_process_element+0xd6>
			tmpstr++;
   1ea24:	3701      	adds	r7, #1
   1ea26:	e7f7      	b.n	1ea18 <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
   1ea28:	4628      	mov	r0, r5
   1ea2a:	f008 faa3 	bl	26f74 <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1ea2e:	2000      	movs	r0, #0
	*str = tmpstr;
   1ea30:	9b00      	ldr	r3, [sp, #0]
   1ea32:	f8c8 3000 	str.w	r3, [r8]
}
   1ea36:	b023      	add	sp, #140	; 0x8c
   1ea38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
   1ea3c:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1ea3e:	783a      	ldrb	r2, [r7, #0]
   1ea40:	4610      	mov	r0, r2
   1ea42:	f008 fa2f 	bl	26ea4 <is_lfcr>
   1ea46:	463b      	mov	r3, r7
			tmpstr++;
   1ea48:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1ea4a:	b908      	cbnz	r0, 1ea50 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1ea4c:	2a00      	cmp	r2, #0
   1ea4e:	d1f6      	bne.n	1ea3e <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
   1ea50:	4622      	mov	r2, r4
   1ea52:	4631      	mov	r1, r6
   1ea54:	4628      	mov	r0, r5
   1ea56:	1b1b      	subs	r3, r3, r4
   1ea58:	f008 fab6 	bl	26fc8 <at_params_string_put>
   1ea5c:	e7dc      	b.n	1ea18 <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
   1ea5e:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   1ea60:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   1ea62:	463b      	mov	r3, r7
   1ea64:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
   1ea66:	f107 0701 	add.w	r7, r7, #1
   1ea6a:	d0f1      	beq.n	1ea50 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1ea6c:	2a00      	cmp	r2, #0
   1ea6e:	d1f7      	bne.n	1ea60 <at_parse_process_element+0x108>
   1ea70:	e7ee      	b.n	1ea50 <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1ea72:	4620      	mov	r0, r4
   1ea74:	220a      	movs	r2, #10
   1ea76:	a901      	add	r1, sp, #4
   1ea78:	f006 fc1a 	bl	252b0 <strtoul>
   1ea7c:	2401      	movs	r4, #1
		tmpstr = next;
   1ea7e:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1ea80:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1ea82:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   1ea84:	9b00      	ldr	r3, [sp, #0]
   1ea86:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   1ea88:	2829      	cmp	r0, #41	; 0x29
   1ea8a:	d023      	beq.n	1ead4 <at_parse_process_element+0x17c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1ea8c:	b310      	cbz	r0, 1ead4 <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1ea8e:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
   1ea92:	f7ff ff3b 	bl	1e90c <is_separator>
				tmparray[i++] =
   1ea96:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
   1ea9a:	b908      	cbnz	r0, 1eaa0 <at_parse_process_element+0x148>
					tmpstr = next;
   1ea9c:	4627      	mov	r7, r4
   1ea9e:	e017      	b.n	1ead0 <at_parse_process_element+0x178>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1eaa0:	220a      	movs	r2, #10
   1eaa2:	a901      	add	r1, sp, #4
   1eaa4:	4648      	mov	r0, r9
   1eaa6:	f006 fc03 	bl	252b0 <strtoul>
				tmparray[i++] =
   1eaaa:	ab22      	add	r3, sp, #136	; 0x88
   1eaac:	1c67      	adds	r7, r4, #1
   1eaae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1eab2:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1eab6:	4648      	mov	r0, r9
   1eab8:	f7fa fa98 	bl	18fec <strlen>
   1eabc:	4604      	mov	r4, r0
   1eabe:	9801      	ldr	r0, [sp, #4]
   1eac0:	f7fa fa94 	bl	18fec <strlen>
   1eac4:	4284      	cmp	r4, r0
   1eac6:	d006      	beq.n	1ead6 <at_parse_process_element+0x17e>
					tmpstr = next;
   1eac8:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1eaca:	2f20      	cmp	r7, #32
					tmpstr = next;
   1eacc:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1eace:	d002      	beq.n	1ead6 <at_parse_process_element+0x17e>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1ead0:	463c      	mov	r4, r7
   1ead2:	e7d7      	b.n	1ea84 <at_parse_process_element+0x12c>
   1ead4:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   1ead6:	00bb      	lsls	r3, r7, #2
   1ead8:	4631      	mov	r1, r6
   1eada:	4628      	mov	r0, r5
   1eadc:	aa02      	add	r2, sp, #8
   1eade:	f008 fa96 	bl	2700e <at_params_array_put>
		tmpstr++;
   1eae2:	9b00      	ldr	r3, [sp, #0]
   1eae4:	3301      	adds	r3, #1
   1eae6:	9300      	str	r3, [sp, #0]
   1eae8:	e7a1      	b.n	1ea2e <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1eaea:	220a      	movs	r2, #10
   1eaec:	4620      	mov	r0, r4
   1eaee:	a902      	add	r1, sp, #8
   1eaf0:	f006 fb62 	bl	251b8 <strtoll>
   1eaf4:	460b      	mov	r3, r1
		tmpstr = next;
   1eaf6:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1eaf8:	4602      	mov	r2, r0
		tmpstr = next;
   1eafa:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   1eafc:	4628      	mov	r0, r5
   1eafe:	4631      	mov	r1, r6
   1eb00:	f008 fa4d 	bl	26f9e <at_params_int_put>
   1eb04:	e793      	b.n	1ea2e <at_parse_process_element+0xd6>
   1eb06:	2101      	movs	r1, #1
   1eb08:	e75f      	b.n	1e9ca <at_parse_process_element+0x72>
		return -1;
   1eb0a:	f04f 30ff 	mov.w	r0, #4294967295
   1eb0e:	e792      	b.n	1ea36 <at_parse_process_element+0xde>
   1eb10:	2000dd3e 	.word	0x2000dd3e
   1eb14:	0002b550 	.word	0x0002b550

0001eb18 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1eb18:	b510      	push	{r4, lr}
   1eb1a:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1eb1c:	f7fa fa66 	bl	18fec <strlen>
   1eb20:	2801      	cmp	r0, #1
   1eb22:	d921      	bls.n	1eb68 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   1eb24:	7823      	ldrb	r3, [r4, #0]
   1eb26:	4912      	ldr	r1, [pc, #72]	; (1eb70 <is_command+0x58>)
   1eb28:	5cca      	ldrb	r2, [r1, r3]
   1eb2a:	f002 0203 	and.w	r2, r2, #3
   1eb2e:	2a02      	cmp	r2, #2
   1eb30:	bf08      	it	eq
   1eb32:	3b20      	subeq	r3, #32
   1eb34:	2b41      	cmp	r3, #65	; 0x41
   1eb36:	d117      	bne.n	1eb68 <is_command+0x50>
   1eb38:	7863      	ldrb	r3, [r4, #1]
   1eb3a:	5cca      	ldrb	r2, [r1, r3]
   1eb3c:	f002 0203 	and.w	r2, r2, #3
   1eb40:	2a02      	cmp	r2, #2
   1eb42:	bf08      	it	eq
   1eb44:	3b20      	subeq	r3, #32
   1eb46:	2b54      	cmp	r3, #84	; 0x54
   1eb48:	d10e      	bne.n	1eb68 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1eb4a:	78a2      	ldrb	r2, [r4, #2]
   1eb4c:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1eb50:	2b23      	cmp	r3, #35	; 0x23
   1eb52:	d00b      	beq.n	1eb6c <is_command+0x54>
   1eb54:	2a25      	cmp	r2, #37	; 0x25
   1eb56:	d009      	beq.n	1eb6c <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1eb58:	4610      	mov	r0, r2
   1eb5a:	f008 f9a3 	bl	26ea4 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1eb5e:	b910      	cbnz	r0, 1eb66 <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1eb60:	fab2 f082 	clz	r0, r2
   1eb64:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1eb66:	bd10      	pop	{r4, pc}
		return false;
   1eb68:	2000      	movs	r0, #0
   1eb6a:	e7fc      	b.n	1eb66 <is_command+0x4e>
		return true;
   1eb6c:	2001      	movs	r0, #1
   1eb6e:	e7fa      	b.n	1eb66 <is_command+0x4e>
   1eb70:	0002b550 	.word	0x0002b550

0001eb74 <at_parse_detect_type>:
{
   1eb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb78:	4606      	mov	r6, r0
	const char *tmpstr = *str;
   1eb7a:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1eb7c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 1ed0c <at_parse_detect_type+0x198>
   1eb80:	2900      	cmp	r1, #0
   1eb82:	d13d      	bne.n	1ec00 <at_parse_detect_type+0x8c>
   1eb84:	7820      	ldrb	r0, [r4, #0]
   1eb86:	f008 f981 	bl	26e8c <is_notification>
   1eb8a:	4f61      	ldr	r7, [pc, #388]	; (1ed10 <at_parse_detect_type+0x19c>)
   1eb8c:	4605      	mov	r5, r0
   1eb8e:	b360      	cbz	r0, 1ebea <at_parse_detect_type+0x76>
	state = new_state;
   1eb90:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1eb92:	2205      	movs	r2, #5
   1eb94:	4620      	mov	r0, r4
   1eb96:	495f      	ldr	r1, [pc, #380]	; (1ed14 <at_parse_detect_type+0x1a0>)
	state = new_state;
   1eb98:	703b      	strb	r3, [r7, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1eb9a:	f009 fe28 	bl	287ee <strncmp>
   1eb9e:	b1f8      	cbz	r0, 1ebe0 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1eba0:	2205      	movs	r2, #5
   1eba2:	4620      	mov	r0, r4
   1eba4:	495c      	ldr	r1, [pc, #368]	; (1ed18 <at_parse_detect_type+0x1a4>)
   1eba6:	f009 fe22 	bl	287ee <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1ebaa:	b1c8      	cbz	r0, 1ebe0 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1ebac:	220b      	movs	r2, #11
   1ebae:	4620      	mov	r0, r4
   1ebb0:	495a      	ldr	r1, [pc, #360]	; (1ed1c <at_parse_detect_type+0x1a8>)
   1ebb2:	f009 fe1c 	bl	287ee <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1ebb6:	b198      	cbz	r0, 1ebe0 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1ebb8:	220a      	movs	r2, #10
   1ebba:	4620      	mov	r0, r4
   1ebbc:	4958      	ldr	r1, [pc, #352]	; (1ed20 <at_parse_detect_type+0x1ac>)
   1ebbe:	f009 fe16 	bl	287ee <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1ebc2:	b168      	cbz	r0, 1ebe0 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1ebc4:	220b      	movs	r2, #11
   1ebc6:	4620      	mov	r0, r4
   1ebc8:	4956      	ldr	r1, [pc, #344]	; (1ed24 <at_parse_detect_type+0x1b0>)
   1ebca:	f009 fe10 	bl	287ee <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1ebce:	b138      	cbz	r0, 1ebe0 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   1ebd0:	2207      	movs	r2, #7
   1ebd2:	4620      	mov	r0, r4
   1ebd4:	4954      	ldr	r1, [pc, #336]	; (1ed28 <at_parse_detect_type+0x1b4>)
   1ebd6:	f009 fe0a 	bl	287ee <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1ebda:	fab0 f580 	clz	r5, r0
   1ebde:	096d      	lsrs	r5, r5, #5
		set_type_string = check_response_for_forced_string(tmpstr);
   1ebe0:	f888 5000 	strb.w	r5, [r8]
	return 0;
   1ebe4:	2000      	movs	r0, #0
	*str = tmpstr;
   1ebe6:	6034      	str	r4, [r6, #0]
	return 0;
   1ebe8:	e04c      	b.n	1ec84 <at_parse_detect_type+0x110>
	} else if (set_type_string) {
   1ebea:	f898 3000 	ldrb.w	r3, [r8]
   1ebee:	b953      	cbnz	r3, 1ec06 <at_parse_detect_type+0x92>
	} else if ((index == 0) && is_command(tmpstr)) {
   1ebf0:	4620      	mov	r0, r4
   1ebf2:	f7ff ff91 	bl	1eb18 <is_command>
   1ebf6:	2800      	cmp	r0, #0
   1ebf8:	d04e      	beq.n	1ec98 <at_parse_detect_type+0x124>
	state = new_state;
   1ebfa:	2307      	movs	r3, #7
   1ebfc:	703b      	strb	r3, [r7, #0]
}
   1ebfe:	e7f1      	b.n	1ebe4 <at_parse_detect_type+0x70>
	} else if (set_type_string) {
   1ec00:	f898 3000 	ldrb.w	r3, [r8]
   1ec04:	b11b      	cbz	r3, 1ec0e <at_parse_detect_type+0x9a>
	state = new_state;
   1ec06:	2202      	movs	r2, #2
   1ec08:	4b41      	ldr	r3, [pc, #260]	; (1ed10 <at_parse_detect_type+0x19c>)
   1ec0a:	701a      	strb	r2, [r3, #0]
}
   1ec0c:	e7ea      	b.n	1ebe4 <at_parse_detect_type+0x70>
	} else if ((index > 0) && is_clac(tmpstr)) {
   1ec0e:	2900      	cmp	r1, #0
   1ec10:	dd44      	ble.n	1ec9c <at_parse_detect_type+0x128>
   1ec12:	4622      	mov	r2, r4
   1ec14:	4615      	mov	r5, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   1ec16:	f812 0b01 	ldrb.w	r0, [r2], #1
   1ec1a:	f008 f943 	bl	26ea4 <is_lfcr>
   1ec1e:	2800      	cmp	r0, #0
   1ec20:	d1f8      	bne.n	1ec14 <at_parse_detect_type+0xa0>
		str++;
	}

	if (strlen(str) < 4) {
   1ec22:	4628      	mov	r0, r5
   1ec24:	f7fa f9e2 	bl	18fec <strlen>
   1ec28:	2803      	cmp	r0, #3
   1ec2a:	d92d      	bls.n	1ec88 <at_parse_detect_type+0x114>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1ec2c:	782b      	ldrb	r3, [r5, #0]
   1ec2e:	4a3f      	ldr	r2, [pc, #252]	; (1ed2c <at_parse_detect_type+0x1b8>)
   1ec30:	5cd1      	ldrb	r1, [r2, r3]
   1ec32:	f001 0103 	and.w	r1, r1, #3
   1ec36:	2902      	cmp	r1, #2
   1ec38:	bf08      	it	eq
   1ec3a:	3b20      	subeq	r3, #32
   1ec3c:	2b41      	cmp	r3, #65	; 0x41
   1ec3e:	d123      	bne.n	1ec88 <at_parse_detect_type+0x114>
   1ec40:	786b      	ldrb	r3, [r5, #1]
   1ec42:	5cd1      	ldrb	r1, [r2, r3]
   1ec44:	f001 0103 	and.w	r1, r1, #3
   1ec48:	2902      	cmp	r1, #2
   1ec4a:	bf08      	it	eq
   1ec4c:	3b20      	subeq	r3, #32
   1ec4e:	2b54      	cmp	r3, #84	; 0x54
   1ec50:	d11a      	bne.n	1ec88 <at_parse_detect_type+0x114>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   1ec52:	78ab      	ldrb	r3, [r5, #2]
   1ec54:	5cd1      	ldrb	r1, [r2, r3]
   1ec56:	f001 0103 	and.w	r1, r1, #3
   1ec5a:	2902      	cmp	r1, #2
   1ec5c:	bf08      	it	eq
   1ec5e:	3b20      	subeq	r3, #32
   1ec60:	2b2b      	cmp	r3, #43	; 0x2b
   1ec62:	d00a      	beq.n	1ec7a <at_parse_detect_type+0x106>
   1ec64:	2b25      	cmp	r3, #37	; 0x25
   1ec66:	d10f      	bne.n	1ec88 <at_parse_detect_type+0x114>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   1ec68:	78eb      	ldrb	r3, [r5, #3]
   1ec6a:	5cd2      	ldrb	r2, [r2, r3]
   1ec6c:	f002 0203 	and.w	r2, r2, #3
   1ec70:	2a02      	cmp	r2, #2
   1ec72:	bf08      	it	eq
   1ec74:	3b20      	subeq	r3, #32
   1ec76:	2b58      	cmp	r3, #88	; 0x58
   1ec78:	d006      	beq.n	1ec88 <at_parse_detect_type+0x114>
	state = new_state;
   1ec7a:	2209      	movs	r2, #9
		return -2;
   1ec7c:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   1ec80:	4b23      	ldr	r3, [pc, #140]	; (1ed10 <at_parse_detect_type+0x19c>)
   1ec82:	701a      	strb	r2, [r3, #0]
}
   1ec84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1ec88:	7820      	ldrb	r0, [r4, #0]
   1ec8a:	f008 f8ff 	bl	26e8c <is_notification>
   1ec8e:	b128      	cbz	r0, 1ec9c <at_parse_detect_type+0x128>
		return -1;
   1ec90:	f04f 30ff 	mov.w	r0, #4294967295
		*str = tmpstr;
   1ec94:	6034      	str	r4, [r6, #0]
   1ec96:	e7f5      	b.n	1ec84 <at_parse_detect_type+0x110>
	state = new_state;
   1ec98:	2302      	movs	r3, #2
   1ec9a:	e7af      	b.n	1ebfc <at_parse_detect_type+0x88>
	} else if (is_number(*tmpstr)) {
   1ec9c:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   1ec9e:	4b23      	ldr	r3, [pc, #140]	; (1ed2c <at_parse_detect_type+0x1b8>)
   1eca0:	5c9b      	ldrb	r3, [r3, r2]
   1eca2:	075b      	lsls	r3, r3, #29
   1eca4:	d40a      	bmi.n	1ecbc <at_parse_detect_type+0x148>
   1eca6:	2a2d      	cmp	r2, #45	; 0x2d
   1eca8:	d008      	beq.n	1ecbc <at_parse_detect_type+0x148>
   1ecaa:	2a2b      	cmp	r2, #43	; 0x2b
   1ecac:	d006      	beq.n	1ecbc <at_parse_detect_type+0x148>
	if (chr == '"') {
   1ecae:	2a22      	cmp	r2, #34	; 0x22
   1ecb0:	d107      	bne.n	1ecc2 <at_parse_detect_type+0x14e>
	state = new_state;
   1ecb2:	2203      	movs	r2, #3
   1ecb4:	4b16      	ldr	r3, [pc, #88]	; (1ed10 <at_parse_detect_type+0x19c>)
		tmpstr++;
   1ecb6:	3401      	adds	r4, #1
	state = new_state;
   1ecb8:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1ecba:	e793      	b.n	1ebe4 <at_parse_detect_type+0x70>
	state = new_state;
   1ecbc:	2204      	movs	r2, #4
   1ecbe:	4b14      	ldr	r3, [pc, #80]	; (1ed10 <at_parse_detect_type+0x19c>)
   1ecc0:	e7a3      	b.n	1ec0a <at_parse_detect_type+0x96>
	if (chr == '(') {
   1ecc2:	2a28      	cmp	r2, #40	; 0x28
   1ecc4:	d104      	bne.n	1ecd0 <at_parse_detect_type+0x15c>
   1ecc6:	2201      	movs	r2, #1
   1ecc8:	4b11      	ldr	r3, [pc, #68]	; (1ed10 <at_parse_detect_type+0x19c>)
		tmpstr++;
   1ecca:	4414      	add	r4, r2
	state = new_state;
   1eccc:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1ecce:	e789      	b.n	1ebe4 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1ecd0:	4610      	mov	r0, r2
   1ecd2:	f008 f8e7 	bl	26ea4 <is_lfcr>
   1ecd6:	b188      	cbz	r0, 1ecfc <at_parse_detect_type+0x188>
   1ecd8:	490d      	ldr	r1, [pc, #52]	; (1ed10 <at_parse_detect_type+0x19c>)
   1ecda:	780b      	ldrb	r3, [r1, #0]
   1ecdc:	2b04      	cmp	r3, #4
   1ecde:	d10a      	bne.n	1ecf6 <at_parse_detect_type+0x182>
   1ece0:	4622      	mov	r2, r4
   1ece2:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
   1ece4:	f812 0b01 	ldrb.w	r0, [r2], #1
   1ece8:	f008 f8dc 	bl	26ea4 <is_lfcr>
   1ecec:	2800      	cmp	r0, #0
   1ecee:	d1f8      	bne.n	1ece2 <at_parse_detect_type+0x16e>
	state = new_state;
   1ecf0:	2305      	movs	r3, #5
   1ecf2:	700b      	strb	r3, [r1, #0]
}
   1ecf4:	e776      	b.n	1ebe4 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1ecf6:	2b08      	cmp	r3, #8
   1ecf8:	f43f af74 	beq.w	1ebe4 <at_parse_detect_type+0x70>
	} else if (is_separator(*tmpstr)) {
   1ecfc:	4610      	mov	r0, r2
   1ecfe:	f7ff fe05 	bl	1e90c <is_separator>
   1ed02:	2800      	cmp	r0, #0
   1ed04:	d0c4      	beq.n	1ec90 <at_parse_detect_type+0x11c>
	state = new_state;
   1ed06:	2208      	movs	r2, #8
   1ed08:	4b01      	ldr	r3, [pc, #4]	; (1ed10 <at_parse_detect_type+0x19c>)
   1ed0a:	e77e      	b.n	1ec0a <at_parse_detect_type+0x96>
   1ed0c:	2000dd3d 	.word	0x2000dd3d
   1ed10:	2000dd3e 	.word	0x2000dd3e
   1ed14:	0002a49b 	.word	0x0002a49b
   1ed18:	0002a4a1 	.word	0x0002a4a1
   1ed1c:	0002a4a7 	.word	0x0002a4a7
   1ed20:	0002a4b3 	.word	0x0002a4b3
   1ed24:	0002a4be 	.word	0x0002a4be
   1ed28:	0002a4ca 	.word	0x0002a4ca
   1ed2c:	0002b550 	.word	0x0002b550

0001ed30 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   1ed30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed34:	4689      	mov	r9, r1
   1ed36:	4616      	mov	r6, r2
   1ed38:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1ed3a:	4680      	mov	r8, r0
   1ed3c:	2800      	cmp	r0, #0
   1ed3e:	f000 809a 	beq.w	1ee76 <at_parser_max_params_from_str+0x146>
   1ed42:	2a00      	cmp	r2, #0
   1ed44:	f000 8097 	beq.w	1ee76 <at_parser_max_params_from_str+0x146>
   1ed48:	6853      	ldr	r3, [r2, #4]
   1ed4a:	2b00      	cmp	r3, #0
   1ed4c:	f000 8093 	beq.w	1ee76 <at_parser_max_params_from_str+0x146>
	state = IDLE;
   1ed50:	2400      	movs	r4, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   1ed52:	4610      	mov	r0, r2
   1ed54:	f008 f8e9 	bl	26f2a <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1ed58:	4642      	mov	r2, r8
   1ed5a:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   1ed5c:	f8cd 8004 	str.w	r8, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   1ed60:	429f      	cmp	r7, r3
   1ed62:	bf28      	it	cs
   1ed64:	461f      	movcs	r7, r3
	state = IDLE;
   1ed66:	4b45      	ldr	r3, [pc, #276]	; (1ee7c <at_parser_max_params_from_str+0x14c>)
   1ed68:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
   1ed6a:	4b45      	ldr	r3, [pc, #276]	; (1ee80 <at_parser_max_params_from_str+0x150>)
   1ed6c:	701c      	strb	r4, [r3, #0]
   1ed6e:	4611      	mov	r1, r2
	while (is_lfcr(*str)) {
   1ed70:	7808      	ldrb	r0, [r1, #0]
   1ed72:	f008 f897 	bl	26ea4 <is_lfcr>
   1ed76:	4625      	mov	r5, r4
   1ed78:	3201      	adds	r2, #1
   1ed7a:	4604      	mov	r4, r0
   1ed7c:	2800      	cmp	r0, #0
   1ed7e:	d1f6      	bne.n	1ed6e <at_parser_max_params_from_str+0x3e>
   1ed80:	b105      	cbz	r5, 1ed84 <at_parser_max_params_from_str+0x54>
   1ed82:	9101      	str	r1, [sp, #4]
	int index = 0;
   1ed84:	2500      	movs	r5, #0
		if (isspace((int)*str)) {
   1ed86:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 1ee84 <at_parser_max_params_from_str+0x154>
	while ((!is_terminated(*str)) && (index < max_params)) {
   1ed8a:	9b01      	ldr	r3, [sp, #4]
   1ed8c:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1ed8e:	2a00      	cmp	r2, #0
   1ed90:	d048      	beq.n	1ee24 <at_parser_max_params_from_str+0xf4>
   1ed92:	42af      	cmp	r7, r5
   1ed94:	d946      	bls.n	1ee24 <at_parser_max_params_from_str+0xf4>
		if (isspace((int)*str)) {
   1ed96:	f81b 2002 	ldrb.w	r2, [fp, r2]
		ret = at_parse_detect_type(&str, index);
   1ed9a:	4629      	mov	r1, r5
		if (isspace((int)*str)) {
   1ed9c:	0712      	lsls	r2, r2, #28
			str++;
   1ed9e:	bf48      	it	mi
   1eda0:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   1eda2:	a801      	add	r0, sp, #4
			str++;
   1eda4:	bf48      	it	mi
   1eda6:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
   1eda8:	f7ff fee4 	bl	1eb74 <at_parse_detect_type>
		if (ret == -1) {
   1edac:	1c43      	adds	r3, r0, #1
   1edae:	d039      	beq.n	1ee24 <at_parser_max_params_from_str+0xf4>
		if (ret == -2) {
   1edb0:	3002      	adds	r0, #2
			index = 0;
   1edb2:	bf08      	it	eq
   1edb4:	2500      	moveq	r5, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   1edb6:	4632      	mov	r2, r6
   1edb8:	4629      	mov	r1, r5
   1edba:	a801      	add	r0, sp, #4
			str = *at_params_str;
   1edbc:	bf08      	it	eq
   1edbe:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
   1edc2:	f7ff fdc9 	bl	1e958 <at_parse_process_element>
   1edc6:	3001      	adds	r0, #1
   1edc8:	d02c      	beq.n	1ee24 <at_parser_max_params_from_str+0xf4>
		if (is_separator(*str)) {
   1edca:	9a01      	ldr	r2, [sp, #4]
   1edcc:	7810      	ldrb	r0, [r2, #0]
   1edce:	f7ff fd9d 	bl	1e90c <is_separator>
   1edd2:	b1b0      	cbz	r0, 1ee02 <at_parser_max_params_from_str+0xd2>
			if (is_lfcr(*(str + 1))) {
   1edd4:	7850      	ldrb	r0, [r2, #1]
   1edd6:	f008 f865 	bl	26ea4 <is_lfcr>
   1edda:	b178      	cbz	r0, 1edfc <at_parser_max_params_from_str+0xcc>
				index++;
   1eddc:	3501      	adds	r5, #1
				if (index == max_params) {
   1edde:	42bd      	cmp	r5, r7
   1ede0:	d03c      	beq.n	1ee5c <at_parser_max_params_from_str+0x12c>
				if (at_parse_detect_type(&str, index) == -1) {
   1ede2:	4629      	mov	r1, r5
   1ede4:	a801      	add	r0, sp, #4
   1ede6:	f7ff fec5 	bl	1eb74 <at_parse_detect_type>
   1edea:	3001      	adds	r0, #1
   1edec:	d01a      	beq.n	1ee24 <at_parser_max_params_from_str+0xf4>
				if (at_parse_process_element(&str, index,
   1edee:	4632      	mov	r2, r6
   1edf0:	4629      	mov	r1, r5
   1edf2:	a801      	add	r0, sp, #4
   1edf4:	f7ff fdb0 	bl	1e958 <at_parse_process_element>
   1edf8:	3001      	adds	r0, #1
   1edfa:	d013      	beq.n	1ee24 <at_parser_max_params_from_str+0xf4>
			str++;
   1edfc:	9b01      	ldr	r3, [sp, #4]
   1edfe:	3301      	adds	r3, #1
   1ee00:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   1ee02:	9a01      	ldr	r2, [sp, #4]
   1ee04:	7810      	ldrb	r0, [r2, #0]
   1ee06:	f008 f84d 	bl	26ea4 <is_lfcr>
   1ee0a:	b310      	cbz	r0, 1ee52 <at_parser_max_params_from_str+0x122>
   1ee0c:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   1ee0e:	7811      	ldrb	r1, [r2, #0]
   1ee10:	4692      	mov	sl, r2
   1ee12:	4608      	mov	r0, r1
   1ee14:	3201      	adds	r2, #1
   1ee16:	f008 f845 	bl	26ea4 <is_lfcr>
   1ee1a:	2800      	cmp	r0, #0
   1ee1c:	d1f7      	bne.n	1ee0e <at_parser_max_params_from_str+0xde>
   1ee1e:	b971      	cbnz	r1, 1ee3e <at_parser_max_params_from_str+0x10e>
				str += i;
   1ee20:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   1ee24:	9d01      	ldr	r5, [sp, #4]
	if (oversized) {
   1ee26:	bb1c      	cbnz	r4, 1ee70 <at_parser_max_params_from_str+0x140>
   1ee28:	782b      	ldrb	r3, [r5, #0]
   1ee2a:	b9cb      	cbnz	r3, 1ee60 <at_parser_max_params_from_str+0x130>
	return 0;
   1ee2c:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1ee2e:	f1b9 0f00 	cmp.w	r9, #0
   1ee32:	d001      	beq.n	1ee38 <at_parser_max_params_from_str+0x108>
		*next_param_str = (char *)at_params_str;
   1ee34:	f8c9 5000 	str.w	r5, [r9]
	}

	return err;
}
   1ee38:	b003      	add	sp, #12
   1ee3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1ee3e:	4608      	mov	r0, r1
   1ee40:	f008 f824 	bl	26e8c <is_notification>
   1ee44:	2800      	cmp	r0, #0
   1ee46:	d1eb      	bne.n	1ee20 <at_parser_max_params_from_str+0xf0>
			    is_result(str + i)) {
   1ee48:	4650      	mov	r0, sl
   1ee4a:	f7ff fd6d 	bl	1e928 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1ee4e:	2800      	cmp	r0, #0
   1ee50:	d1e6      	bne.n	1ee20 <at_parser_max_params_from_str+0xf0>
		index++;
   1ee52:	3501      	adds	r5, #1
			oversized = true;
   1ee54:	42bd      	cmp	r5, r7
   1ee56:	bf08      	it	eq
   1ee58:	2401      	moveq	r4, #1
   1ee5a:	e796      	b.n	1ed8a <at_parser_max_params_from_str+0x5a>
					oversized = true;
   1ee5c:	4604      	mov	r4, r0
   1ee5e:	e7e1      	b.n	1ee24 <at_parser_max_params_from_str+0xf4>
	if (!is_terminated(*str) && !is_result(str)) {
   1ee60:	4628      	mov	r0, r5
   1ee62:	f7ff fd61 	bl	1e928 <is_result>
   1ee66:	2800      	cmp	r0, #0
   1ee68:	d1e0      	bne.n	1ee2c <at_parser_max_params_from_str+0xfc>
		return -EAGAIN;
   1ee6a:	f06f 000a 	mvn.w	r0, #10
   1ee6e:	e7de      	b.n	1ee2e <at_parser_max_params_from_str+0xfe>
		return -E2BIG;
   1ee70:	f06f 0006 	mvn.w	r0, #6
   1ee74:	e7db      	b.n	1ee2e <at_parser_max_params_from_str+0xfe>
		return -EINVAL;
   1ee76:	f06f 0015 	mvn.w	r0, #21
   1ee7a:	e7dd      	b.n	1ee38 <at_parser_max_params_from_str+0x108>
   1ee7c:	2000dd3e 	.word	0x2000dd3e
   1ee80:	2000dd3d 	.word	0x2000dd3d
   1ee84:	0002b550 	.word	0x0002b550

0001ee88 <enable_notifications>:

	event_handler_list_dispatch(&evt);
}

static int enable_notifications(void)
{
   1ee88:	b5b0      	push	{r4, r5, r7, lr}
   1ee8a:	b08e      	sub	sp, #56	; 0x38
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   1ee8c:	482c      	ldr	r0, [pc, #176]	; (1ef40 <enable_notifications+0xb8>)
{
   1ee8e:	af00      	add	r7, sp, #0
	err = nrf_modem_at_printf(AT_CEREG_5);
   1ee90:	f004 fa2e 	bl	232f0 <nrf_modem_at_printf>
	if (err) {
   1ee94:	4604      	mov	r4, r0
   1ee96:	b1a0      	cbz	r0, 1eec2 <enable_notifications+0x3a>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   1ee98:	466d      	mov	r5, sp
   1ee9a:	b088      	sub	sp, #32
   1ee9c:	466a      	mov	r2, sp
   1ee9e:	4b29      	ldr	r3, [pc, #164]	; (1ef44 <enable_notifications+0xbc>)
   1eea0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1eea4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1eea8:	2303      	movs	r3, #3
   1eeaa:	4827      	ldr	r0, [pc, #156]	; (1ef48 <enable_notifications+0xc0>)
   1eeac:	f842 3f10 	str.w	r3, [r2, #16]!
   1eeb0:	f008 f965 	bl	2717e <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1eeb4:	f06f 040d 	mvn.w	r4, #13
   1eeb8:	46ad      	mov	sp, r5
			LOG_WRN("Current modem firmware version: %s", buf);
		}
	}

	return 0;
}
   1eeba:	4620      	mov	r0, r4
   1eebc:	3738      	adds	r7, #56	; 0x38
   1eebe:	46bd      	mov	sp, r7
   1eec0:	bdb0      	pop	{r4, r5, r7, pc}
	err = nrf_modem_at_printf(cscon);
   1eec2:	4822      	ldr	r0, [pc, #136]	; (1ef4c <enable_notifications+0xc4>)
   1eec4:	f004 fa14 	bl	232f0 <nrf_modem_at_printf>
	if (err) {
   1eec8:	2800      	cmp	r0, #0
   1eeca:	d0f6      	beq.n	1eeba <enable_notifications+0x32>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   1eecc:	466d      	mov	r5, sp
   1eece:	b088      	sub	sp, #32
   1eed0:	466a      	mov	r2, sp
   1eed2:	4b1f      	ldr	r3, [pc, #124]	; (1ef50 <enable_notifications+0xc8>)
   1eed4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1eed8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1eedc:	2303      	movs	r3, #3
   1eede:	481a      	ldr	r0, [pc, #104]	; (1ef48 <enable_notifications+0xc0>)
   1eee0:	f842 3f10 	str.w	r3, [r2, #16]!
   1eee4:	f008 f94b 	bl	2717e <z_log_msg_static_create.constprop.0>
   1eee8:	46ad      	mov	sp, r5
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   1eeea:	4b1a      	ldr	r3, [pc, #104]	; (1ef54 <enable_notifications+0xcc>)
   1eeec:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1eef0:	617b      	str	r3, [r7, #20]
   1eef2:	2302      	movs	r3, #2
   1eef4:	4814      	ldr	r0, [pc, #80]	; (1ef48 <enable_notifications+0xc0>)
   1eef6:	f107 0210 	add.w	r2, r7, #16
   1eefa:	613b      	str	r3, [r7, #16]
   1eefc:	f008 f93f 	bl	2717e <z_log_msg_static_create.constprop.0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   1ef00:	2132      	movs	r1, #50	; 0x32
   1ef02:	4638      	mov	r0, r7
   1ef04:	4a14      	ldr	r2, [pc, #80]	; (1ef58 <enable_notifications+0xd0>)
   1ef06:	f004 fa3f 	bl	23388 <nrf_modem_at_cmd>
		if (err == 0) {
   1ef0a:	2800      	cmp	r0, #0
   1ef0c:	d1d5      	bne.n	1eeba <enable_notifications+0x32>
			char *end = strstr(buf, "\r\nOK");
   1ef0e:	4638      	mov	r0, r7
   1ef10:	4912      	ldr	r1, [pc, #72]	; (1ef5c <enable_notifications+0xd4>)
   1ef12:	f009 fc9d 	bl	28850 <strstr>
			if (end) {
   1ef16:	b100      	cbz	r0, 1ef1a <enable_notifications+0x92>
				*end = '\0';
   1ef18:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", buf);
   1ef1a:	466d      	mov	r5, sp
   1ef1c:	b088      	sub	sp, #32
   1ef1e:	466a      	mov	r2, sp
   1ef20:	4b0f      	ldr	r3, [pc, #60]	; (1ef60 <enable_notifications+0xd8>)
   1ef22:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1ef26:	e9c2 3705 	strd	r3, r7, [r2, #20]
   1ef2a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ef2e:	8393      	strh	r3, [r2, #28]
   1ef30:	4b0c      	ldr	r3, [pc, #48]	; (1ef64 <enable_notifications+0xdc>)
   1ef32:	4805      	ldr	r0, [pc, #20]	; (1ef48 <enable_notifications+0xc0>)
   1ef34:	f842 3f10 	str.w	r3, [r2, #16]!
   1ef38:	f008 f921 	bl	2717e <z_log_msg_static_create.constprop.0>
   1ef3c:	46ad      	mov	sp, r5
   1ef3e:	e7bc      	b.n	1eeba <enable_notifications+0x32>
   1ef40:	0002a4f5 	.word	0x0002a4f5
   1ef44:	0002a500 	.word	0x0002a500
   1ef48:	00028f1c 	.word	0x00028f1c
   1ef4c:	0002a94f 	.word	0x0002a94f
   1ef50:	0002a536 	.word	0x0002a536
   1ef54:	0002a56e 	.word	0x0002a56e
   1ef58:	0002a59f 	.word	0x0002a59f
   1ef5c:	0002a5a7 	.word	0x0002a5a7
   1ef60:	0002a5ac 	.word	0x0002a5ac
   1ef64:	01000003 	.word	0x01000003

0001ef68 <at_handler_mdmev>:
{
   1ef68:	b590      	push	{r4, r7, lr}
   1ef6a:	4604      	mov	r4, r0
   1ef6c:	b093      	sub	sp, #76	; 0x4c
   1ef6e:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1ef70:	2100      	movs	r1, #0
   1ef72:	2248      	movs	r2, #72	; 0x48
   1ef74:	4638      	mov	r0, r7
   1ef76:	f009 fc1d 	bl	287b4 <memset>
	err = parse_mdmev(response, &evt.modem_evt);
   1ef7a:	4620      	mov	r0, r4
   1ef7c:	f107 0108 	add.w	r1, r7, #8
   1ef80:	f001 fbac 	bl	206dc <parse_mdmev>
	if (err) {
   1ef84:	b188      	cbz	r0, 1efaa <at_handler_mdmev+0x42>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   1ef86:	466c      	mov	r4, sp
   1ef88:	b088      	sub	sp, #32
   1ef8a:	466a      	mov	r2, sp
   1ef8c:	4b0a      	ldr	r3, [pc, #40]	; (1efb8 <at_handler_mdmev+0x50>)
   1ef8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ef92:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ef96:	2303      	movs	r3, #3
   1ef98:	4808      	ldr	r0, [pc, #32]	; (1efbc <at_handler_mdmev+0x54>)
   1ef9a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ef9e:	f008 f8ee 	bl	2717e <z_log_msg_static_create.constprop.0>
   1efa2:	46a5      	mov	sp, r4
}
   1efa4:	374c      	adds	r7, #76	; 0x4c
   1efa6:	46bd      	mov	sp, r7
   1efa8:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1efaa:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   1efac:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1efae:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1efb0:	f000 fbb0 	bl	1f714 <event_handler_list_dispatch>
   1efb4:	e7f6      	b.n	1efa4 <at_handler_mdmev+0x3c>
   1efb6:	bf00      	nop
   1efb8:	0002a5cf 	.word	0x0002a5cf
   1efbc:	00028f1c 	.word	0x00028f1c

0001efc0 <at_handler_xmodemsleep>:
{
   1efc0:	b590      	push	{r4, r7, lr}
   1efc2:	4604      	mov	r4, r0
   1efc4:	b093      	sub	sp, #76	; 0x4c
   1efc6:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1efc8:	2100      	movs	r1, #0
   1efca:	2248      	movs	r2, #72	; 0x48
   1efcc:	4638      	mov	r0, r7
   1efce:	f009 fbf1 	bl	287b4 <memset>
	err = parse_xmodemsleep(response, &evt.modem_sleep);
   1efd2:	4620      	mov	r0, r4
   1efd4:	f107 0108 	add.w	r1, r7, #8
   1efd8:	f001 fb06 	bl	205e8 <parse_xmodemsleep>
	if (err) {
   1efdc:	b188      	cbz	r0, 1f002 <at_handler_xmodemsleep+0x42>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   1efde:	466c      	mov	r4, sp
   1efe0:	b088      	sub	sp, #32
   1efe2:	466a      	mov	r2, sp
   1efe4:	4b13      	ldr	r3, [pc, #76]	; (1f034 <at_handler_xmodemsleep+0x74>)
   1efe6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1efea:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1efee:	2303      	movs	r3, #3
   1eff0:	4811      	ldr	r0, [pc, #68]	; (1f038 <at_handler_xmodemsleep+0x78>)
   1eff2:	f842 3f10 	str.w	r3, [r2, #16]!
   1eff6:	f008 f8c2 	bl	2717e <z_log_msg_static_create.constprop.0>
   1effa:	46a5      	mov	sp, r4
}
   1effc:	374c      	adds	r7, #76	; 0x4c
   1effe:	46bd      	mov	sp, r7
   1f000:	bd90      	pop	{r4, r7, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   1f002:	7a3b      	ldrb	r3, [r7, #8]
   1f004:	1e5a      	subs	r2, r3, #1
   1f006:	2a01      	cmp	r2, #1
   1f008:	d901      	bls.n	1f00e <at_handler_xmodemsleep+0x4e>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   1f00a:	2b04      	cmp	r3, #4
   1f00c:	d1f6      	bne.n	1effc <at_handler_xmodemsleep+0x3c>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   1f00e:	e9d7 2104 	ldrd	r2, r1, [r7, #16]
   1f012:	f5a2 539c 	sub.w	r3, r2, #4992	; 0x1380
   1f016:	3b08      	subs	r3, #8
   1f018:	430b      	orrs	r3, r1
   1f01a:	d007      	beq.n	1f02c <at_handler_xmodemsleep+0x6c>
	} else if (evt.modem_sleep.time == 0) {
   1f01c:	430a      	orrs	r2, r1
   1f01e:	d007      	beq.n	1f030 <at_handler_xmodemsleep+0x70>
   1f020:	230a      	movs	r3, #10
	event_handler_list_dispatch(&evt);
   1f022:	4638      	mov	r0, r7
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   1f024:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1f026:	f000 fb75 	bl	1f714 <event_handler_list_dispatch>
   1f02a:	e7e7      	b.n	1effc <at_handler_xmodemsleep+0x3c>
   1f02c:	2308      	movs	r3, #8
   1f02e:	e7f8      	b.n	1f022 <at_handler_xmodemsleep+0x62>
   1f030:	2309      	movs	r3, #9
   1f032:	e7f6      	b.n	1f022 <at_handler_xmodemsleep+0x62>
   1f034:	0002a5ff 	.word	0x0002a5ff
   1f038:	00028f1c 	.word	0x00028f1c

0001f03c <at_handler_ncellmeas>:
{
   1f03c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f03e:	b0ab      	sub	sp, #172	; 0xac
   1f040:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f042:	2100      	movs	r1, #0
   1f044:	2248      	movs	r2, #72	; 0x48
{
   1f046:	4606      	mov	r6, r0
	struct lte_lc_evt evt = {0};
   1f048:	f107 0018 	add.w	r0, r7, #24
   1f04c:	f009 fbb2 	bl	287b4 <memset>
	if (event_handler_list_is_empty() || !ncellmeas_ongoing) {
   1f050:	f000 fb58 	bl	1f704 <event_handler_list_is_empty>
   1f054:	4d5e      	ldr	r5, [pc, #376]	; (1f1d0 <at_handler_ncellmeas+0x194>)
   1f056:	4601      	mov	r1, r0
   1f058:	b9e0      	cbnz	r0, 1f094 <at_handler_ncellmeas+0x58>
   1f05a:	782b      	ldrb	r3, [r5, #0]
   1f05c:	b1d3      	cbz	r3, 1f094 <at_handler_ncellmeas+0x58>
	if (ncellmeas_params.search_type > LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   1f05e:	4c5d      	ldr	r4, [pc, #372]	; (1f1d4 <at_handler_ncellmeas+0x198>)
   1f060:	7823      	ldrb	r3, [r4, #0]
   1f062:	2b03      	cmp	r3, #3
   1f064:	d962      	bls.n	1f12c <at_handler_ncellmeas+0xf0>
	struct lte_lc_evt evt = {0};
   1f066:	2248      	movs	r2, #72	; 0x48
   1f068:	f107 0060 	add.w	r0, r7, #96	; 0x60
   1f06c:	f009 fba2 	bl	287b4 <memset>
	int max_cell_count = ncellmeas_params.gci_count;
   1f070:	7860      	ldrb	r0, [r4, #1]
	if (max_cell_count != 0) {
   1f072:	b1a0      	cbz	r0, 1f09e <at_handler_ncellmeas+0x62>
		cells = k_calloc(max_cell_count, sizeof(struct lte_lc_cell));
   1f074:	2130      	movs	r1, #48	; 0x30
   1f076:	f009 fb5c 	bl	28732 <k_calloc>
		if (cells == NULL) {
   1f07a:	4604      	mov	r4, r0
   1f07c:	b980      	cbnz	r0, 1f0a0 <at_handler_ncellmeas+0x64>
			LOG_ERR("Failed to allocate memory for the GCI cells");
   1f07e:	4b56      	ldr	r3, [pc, #344]	; (1f1d8 <at_handler_ncellmeas+0x19c>)
   1f080:	f107 0210 	add.w	r2, r7, #16
   1f084:	617b      	str	r3, [r7, #20]
   1f086:	2302      	movs	r3, #2
   1f088:	613b      	str	r3, [r7, #16]
			LOG_ERR("Failed to allocate memory for neighbor cells");
   1f08a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f08e:	4853      	ldr	r0, [pc, #332]	; (1f1dc <at_handler_ncellmeas+0x1a0>)
   1f090:	f008 f875 	bl	2717e <z_log_msg_static_create.constprop.0>
	ncellmeas_ongoing = false;
   1f094:	2300      	movs	r3, #0
}
   1f096:	37ac      	adds	r7, #172	; 0xac
	ncellmeas_ongoing = false;
   1f098:	702b      	strb	r3, [r5, #0]
}
   1f09a:	46bd      	mov	sp, r7
   1f09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct lte_lc_cell *cells = NULL;
   1f09e:	4604      	mov	r4, r0
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   1f0a0:	f107 0268 	add.w	r2, r7, #104	; 0x68
   1f0a4:	4631      	mov	r1, r6
   1f0a6:	484b      	ldr	r0, [pc, #300]	; (1f1d4 <at_handler_ncellmeas+0x198>)
	evt.cells_info.gci_cells = cells;
   1f0a8:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   1f0ac:	f000 ffd0 	bl	20050 <parse_ncellmeas_gci>
	switch (err) {
   1f0b0:	1dc2      	adds	r2, r0, #7
   1f0b2:	d011      	beq.n	1f0d8 <at_handler_ncellmeas+0x9c>
   1f0b4:	2801      	cmp	r0, #1
   1f0b6:	d92a      	bls.n	1f10e <at_handler_ncellmeas+0xd2>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1f0b8:	466e      	mov	r6, sp
   1f0ba:	b088      	sub	sp, #32
   1f0bc:	466a      	mov	r2, sp
   1f0be:	4b48      	ldr	r3, [pc, #288]	; (1f1e0 <at_handler_ncellmeas+0x1a4>)
   1f0c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f0c4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f0c8:	2303      	movs	r3, #3
   1f0ca:	4844      	ldr	r0, [pc, #272]	; (1f1dc <at_handler_ncellmeas+0x1a0>)
   1f0cc:	f842 3f10 	str.w	r3, [r2, #16]!
   1f0d0:	f008 f855 	bl	2717e <z_log_msg_static_create.constprop.0>
   1f0d4:	46b5      	mov	sp, r6
   1f0d6:	e021      	b.n	1f11c <at_handler_ncellmeas+0xe0>
		LOG_WRN("Not all neighbor cells could be parsed");
   1f0d8:	466e      	mov	r6, sp
   1f0da:	4b42      	ldr	r3, [pc, #264]	; (1f1e4 <at_handler_ncellmeas+0x1a8>)
   1f0dc:	f107 0210 	add.w	r2, r7, #16
   1f0e0:	617b      	str	r3, [r7, #20]
   1f0e2:	2302      	movs	r3, #2
   1f0e4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1f0e8:	483c      	ldr	r0, [pc, #240]	; (1f1dc <at_handler_ncellmeas+0x1a0>)
   1f0ea:	613b      	str	r3, [r7, #16]
   1f0ec:	f008 f847 	bl	2717e <z_log_msg_static_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   1f0f0:	b088      	sub	sp, #32
   1f0f2:	466a      	mov	r2, sp
   1f0f4:	4b3c      	ldr	r3, [pc, #240]	; (1f1e8 <at_handler_ncellmeas+0x1ac>)
   1f0f6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1f0fa:	6153      	str	r3, [r2, #20]
   1f0fc:	230a      	movs	r3, #10
   1f0fe:	6193      	str	r3, [r2, #24]
   1f100:	2303      	movs	r3, #3
   1f102:	4836      	ldr	r0, [pc, #216]	; (1f1dc <at_handler_ncellmeas+0x1a0>)
   1f104:	f842 3f10 	str.w	r3, [r2, #16]!
   1f108:	f008 f839 	bl	2717e <z_log_msg_static_create.constprop.0>
   1f10c:	46b5      	mov	sp, r6
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1f10e:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1f110:	f107 0060 	add.w	r0, r7, #96	; 0x60
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1f114:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   1f118:	f000 fafc 	bl	1f714 <event_handler_list_dispatch>
	k_free(cells);
   1f11c:	4620      	mov	r0, r4
   1f11e:	f009 fafd 	bl	2871c <k_free>
	k_free(evt.cells_info.neighbor_cells);
   1f122:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
		k_free(neighbor_cells);
   1f126:	f009 faf9 	bl	2871c <k_free>
   1f12a:	e7b3      	b.n	1f094 <at_handler_ncellmeas+0x58>
	int ncell_count = neighborcell_count_get(response);
   1f12c:	4630      	mov	r0, r6
   1f12e:	f000 fdcf 	bl	1fcd0 <neighborcell_count_get>
   1f132:	4604      	mov	r4, r0
	if (ncell_count != 0) {
   1f134:	b158      	cbz	r0, 1f14e <at_handler_ncellmeas+0x112>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   1f136:	2110      	movs	r1, #16
   1f138:	f009 fafb 	bl	28732 <k_calloc>
		if (neighbor_cells == NULL) {
   1f13c:	4604      	mov	r4, r0
   1f13e:	b930      	cbnz	r0, 1f14e <at_handler_ncellmeas+0x112>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   1f140:	4b2a      	ldr	r3, [pc, #168]	; (1f1ec <at_handler_ncellmeas+0x1b0>)
   1f142:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1f146:	677b      	str	r3, [r7, #116]	; 0x74
   1f148:	2302      	movs	r3, #2
   1f14a:	673b      	str	r3, [r7, #112]	; 0x70
   1f14c:	e79d      	b.n	1f08a <at_handler_ncellmeas+0x4e>
	err = parse_ncellmeas(response, &evt.cells_info);
   1f14e:	4630      	mov	r0, r6
   1f150:	f107 0120 	add.w	r1, r7, #32
	evt.cells_info.neighbor_cells = neighbor_cells;
   1f154:	657c      	str	r4, [r7, #84]	; 0x54
	err = parse_ncellmeas(response, &evt.cells_info);
   1f156:	f000 fde1 	bl	1fd1c <parse_ncellmeas>
	switch (err) {
   1f15a:	1dc3      	adds	r3, r0, #7
   1f15c:	d011      	beq.n	1f182 <at_handler_ncellmeas+0x146>
   1f15e:	2801      	cmp	r0, #1
   1f160:	d92a      	bls.n	1f1b8 <at_handler_ncellmeas+0x17c>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1f162:	466e      	mov	r6, sp
   1f164:	b088      	sub	sp, #32
   1f166:	466a      	mov	r2, sp
   1f168:	4b1d      	ldr	r3, [pc, #116]	; (1f1e0 <at_handler_ncellmeas+0x1a4>)
   1f16a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f16e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f172:	2303      	movs	r3, #3
   1f174:	4819      	ldr	r0, [pc, #100]	; (1f1dc <at_handler_ncellmeas+0x1a0>)
   1f176:	f842 3f10 	str.w	r3, [r2, #16]!
   1f17a:	f008 f800 	bl	2717e <z_log_msg_static_create.constprop.0>
   1f17e:	46b5      	mov	sp, r6
   1f180:	e020      	b.n	1f1c4 <at_handler_ncellmeas+0x188>
		LOG_WRN("Not all neighbor cells could be parsed");
   1f182:	466e      	mov	r6, sp
   1f184:	4b17      	ldr	r3, [pc, #92]	; (1f1e4 <at_handler_ncellmeas+0x1a8>)
   1f186:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1f18a:	677b      	str	r3, [r7, #116]	; 0x74
   1f18c:	2302      	movs	r3, #2
   1f18e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1f192:	4812      	ldr	r0, [pc, #72]	; (1f1dc <at_handler_ncellmeas+0x1a0>)
   1f194:	673b      	str	r3, [r7, #112]	; 0x70
   1f196:	f007 fff2 	bl	2717e <z_log_msg_static_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   1f19a:	b088      	sub	sp, #32
   1f19c:	466a      	mov	r2, sp
   1f19e:	4b12      	ldr	r3, [pc, #72]	; (1f1e8 <at_handler_ncellmeas+0x1ac>)
   1f1a0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1f1a4:	6153      	str	r3, [r2, #20]
   1f1a6:	230a      	movs	r3, #10
   1f1a8:	6193      	str	r3, [r2, #24]
   1f1aa:	2303      	movs	r3, #3
   1f1ac:	480b      	ldr	r0, [pc, #44]	; (1f1dc <at_handler_ncellmeas+0x1a0>)
   1f1ae:	f842 3f10 	str.w	r3, [r2, #16]!
   1f1b2:	f007 ffe4 	bl	2717e <z_log_msg_static_create.constprop.0>
   1f1b6:	46b5      	mov	sp, r6
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1f1b8:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1f1ba:	f107 0018 	add.w	r0, r7, #24
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1f1be:	763b      	strb	r3, [r7, #24]
		event_handler_list_dispatch(&evt);
   1f1c0:	f000 faa8 	bl	1f714 <event_handler_list_dispatch>
	if (neighbor_cells) {
   1f1c4:	2c00      	cmp	r4, #0
   1f1c6:	f43f af65 	beq.w	1f094 <at_handler_ncellmeas+0x58>
		k_free(neighbor_cells);
   1f1ca:	4620      	mov	r0, r4
   1f1cc:	e7ab      	b.n	1f126 <at_handler_ncellmeas+0xea>
   1f1ce:	bf00      	nop
   1f1d0:	2000dde1 	.word	0x2000dde1
   1f1d4:	2000dde2 	.word	0x2000dde2
   1f1d8:	0002a63b 	.word	0x0002a63b
   1f1dc:	00028f1c 	.word	0x00028f1c
   1f1e0:	0002a6c8 	.word	0x0002a6c8
   1f1e4:	0002a667 	.word	0x0002a667
   1f1e8:	0002a68e 	.word	0x0002a68e
   1f1ec:	0002a6f2 	.word	0x0002a6f2

0001f1f0 <at_handler_xt3412>:
{
   1f1f0:	b590      	push	{r4, r7, lr}
   1f1f2:	4604      	mov	r4, r0
   1f1f4:	b093      	sub	sp, #76	; 0x4c
   1f1f6:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f1f8:	2100      	movs	r1, #0
   1f1fa:	2248      	movs	r2, #72	; 0x48
   1f1fc:	4638      	mov	r0, r7
   1f1fe:	f009 fad9 	bl	287b4 <memset>
	err = parse_xt3412(response, &evt.time);
   1f202:	4620      	mov	r0, r4
   1f204:	f107 0108 	add.w	r1, r7, #8
   1f208:	f000 fcf2 	bl	1fbf0 <parse_xt3412>
	if (err) {
   1f20c:	b188      	cbz	r0, 1f232 <at_handler_xt3412+0x42>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   1f20e:	466c      	mov	r4, sp
   1f210:	b088      	sub	sp, #32
   1f212:	466a      	mov	r2, sp
   1f214:	4b0d      	ldr	r3, [pc, #52]	; (1f24c <at_handler_xt3412+0x5c>)
   1f216:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f21a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f21e:	2303      	movs	r3, #3
   1f220:	480b      	ldr	r0, [pc, #44]	; (1f250 <at_handler_xt3412+0x60>)
   1f222:	f842 3f10 	str.w	r3, [r2, #16]!
   1f226:	f007 ffaa 	bl	2717e <z_log_msg_static_create.constprop.0>
   1f22a:	46a5      	mov	sp, r4
}
   1f22c:	374c      	adds	r7, #76	; 0x4c
   1f22e:	46bd      	mov	sp, r7
   1f230:	bd90      	pop	{r4, r7, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   1f232:	68bb      	ldr	r3, [r7, #8]
   1f234:	68fa      	ldr	r2, [r7, #12]
   1f236:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   1f23a:	3b08      	subs	r3, #8
   1f23c:	4313      	orrs	r3, r2
   1f23e:	d1f5      	bne.n	1f22c <at_handler_xt3412+0x3c>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1f240:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   1f242:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1f244:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1f246:	f000 fa65 	bl	1f714 <event_handler_list_dispatch>
   1f24a:	e7ef      	b.n	1f22c <at_handler_xt3412+0x3c>
   1f24c:	0002a71f 	.word	0x0002a71f
   1f250:	00028f1c 	.word	0x00028f1c

0001f254 <at_handler_cedrxp>:
{
   1f254:	b590      	push	{r4, r7, lr}
   1f256:	4604      	mov	r4, r0
   1f258:	b093      	sub	sp, #76	; 0x4c
   1f25a:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f25c:	2100      	movs	r1, #0
   1f25e:	2248      	movs	r2, #72	; 0x48
   1f260:	4638      	mov	r0, r7
   1f262:	f009 faa7 	bl	287b4 <memset>
	err = parse_edrx(response, &evt.edrx_cfg);
   1f266:	4620      	mov	r0, r4
   1f268:	f107 0108 	add.w	r1, r7, #8
   1f26c:	f7f9 fec8 	bl	19000 <parse_edrx>
	if (err) {
   1f270:	b188      	cbz	r0, 1f296 <at_handler_cedrxp+0x42>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   1f272:	466c      	mov	r4, sp
   1f274:	b088      	sub	sp, #32
   1f276:	466a      	mov	r2, sp
   1f278:	4b0a      	ldr	r3, [pc, #40]	; (1f2a4 <at_handler_cedrxp+0x50>)
   1f27a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f27e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f282:	2303      	movs	r3, #3
   1f284:	4808      	ldr	r0, [pc, #32]	; (1f2a8 <at_handler_cedrxp+0x54>)
   1f286:	f842 3f10 	str.w	r3, [r2, #16]!
   1f28a:	f007 ff78 	bl	2717e <z_log_msg_static_create.constprop.0>
   1f28e:	46a5      	mov	sp, r4
}
   1f290:	374c      	adds	r7, #76	; 0x4c
   1f292:	46bd      	mov	sp, r7
   1f294:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1f296:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   1f298:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1f29a:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1f29c:	f000 fa3a 	bl	1f714 <event_handler_list_dispatch>
   1f2a0:	e7f6      	b.n	1f290 <at_handler_cedrxp+0x3c>
   1f2a2:	bf00      	nop
   1f2a4:	0002a753 	.word	0x0002a753
   1f2a8:	00028f1c 	.word	0x00028f1c

0001f2ac <at_handler_cscon>:
{
   1f2ac:	b590      	push	{r4, r7, lr}
   1f2ae:	4604      	mov	r4, r0
   1f2b0:	b093      	sub	sp, #76	; 0x4c
   1f2b2:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f2b4:	2248      	movs	r2, #72	; 0x48
   1f2b6:	2100      	movs	r1, #0
   1f2b8:	4638      	mov	r0, r7
   1f2ba:	f009 fa7b 	bl	287b4 <memset>
	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   1f2be:	2201      	movs	r2, #1
   1f2c0:	4620      	mov	r0, r4
   1f2c2:	f107 0108 	add.w	r1, r7, #8
   1f2c6:	f000 fb03 	bl	1f8d0 <parse_rrc_mode>
	if (err) {
   1f2ca:	b188      	cbz	r0, 1f2f0 <at_handler_cscon+0x44>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   1f2cc:	466c      	mov	r4, sp
   1f2ce:	b088      	sub	sp, #32
   1f2d0:	466a      	mov	r2, sp
   1f2d2:	4b0a      	ldr	r3, [pc, #40]	; (1f2fc <at_handler_cscon+0x50>)
   1f2d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f2d8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f2dc:	2303      	movs	r3, #3
   1f2de:	4808      	ldr	r0, [pc, #32]	; (1f300 <at_handler_cscon+0x54>)
   1f2e0:	f842 3f10 	str.w	r3, [r2, #16]!
   1f2e4:	f007 ff4b 	bl	2717e <z_log_msg_static_create.constprop.0>
   1f2e8:	46a5      	mov	sp, r4
}
   1f2ea:	374c      	adds	r7, #76	; 0x4c
   1f2ec:	46bd      	mov	sp, r7
   1f2ee:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1f2f0:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   1f2f2:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1f2f4:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1f2f6:	f000 fa0d 	bl	1f714 <event_handler_list_dispatch>
   1f2fa:	e7f6      	b.n	1f2ea <at_handler_cscon+0x3e>
   1f2fc:	0002a76f 	.word	0x0002a76f
   1f300:	00028f1c 	.word	0x00028f1c

0001f304 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   1f304:	2300      	movs	r3, #0
{
   1f306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f30a:	b090      	sub	sp, #64	; 0x40
   1f30c:	af00      	add	r7, sp, #0
   1f30e:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   1f310:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   1f312:	e9c7 3301 	strd	r3, r3, [r7, #4]
	char tau_ext_str[9] = {0};
   1f316:	e9c7 3304 	strd	r3, r3, [r7, #16]
	char tau_legacy_str[9] = {0};
   1f31a:	e9c7 3307 	strd	r3, r3, [r7, #28]
	char active_time_str[9] = {0};
   1f31e:	733b      	strb	r3, [r7, #12]
	char tau_ext_str[9] = {0};
   1f320:	763b      	strb	r3, [r7, #24]
	char tau_legacy_str[9] = {0};
   1f322:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if ((tau == NULL) || (active_time == NULL)) {
   1f326:	2800      	cmp	r0, #0
   1f328:	d07e      	beq.n	1f428 <lte_lc_psm_get+0x124>
   1f32a:	2900      	cmp	r1, #0
   1f32c:	d07c      	beq.n	1f428 <lte_lc_psm_get+0x124>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   1f32e:	4c40      	ldr	r4, [pc, #256]	; (1f430 <lte_lc_psm_get+0x12c>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1f330:	21a0      	movs	r1, #160	; 0xa0
   1f332:	4620      	mov	r0, r4
   1f334:	4a3f      	ldr	r2, [pc, #252]	; (1f434 <lte_lc_psm_get+0x130>)
	response[0] = '\0';
   1f336:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1f338:	f004 f826 	bl	23388 <nrf_modem_at_cmd>
	if (err) {
   1f33c:	b1a8      	cbz	r0, 1f36a <lte_lc_psm_get+0x66>
		LOG_ERR("AT command failed, error: %d", err);
   1f33e:	466c      	mov	r4, sp
   1f340:	b088      	sub	sp, #32
   1f342:	466a      	mov	r2, sp
   1f344:	4b3c      	ldr	r3, [pc, #240]	; (1f438 <lte_lc_psm_get+0x134>)
   1f346:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f34a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f34e:	2303      	movs	r3, #3
   1f350:	483a      	ldr	r0, [pc, #232]	; (1f43c <lte_lc_psm_get+0x138>)
   1f352:	f842 3f10 	str.w	r3, [r2, #16]!
   1f356:	f007 ff12 	bl	2717e <z_log_msg_static_create.constprop.0>
   1f35a:	46a5      	mov	sp, r4
		return -EFAULT;
   1f35c:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec", *tau, *active_time);

	return 0;
}
   1f360:	4620      	mov	r0, r4
   1f362:	3740      	adds	r7, #64	; 0x40
   1f364:	46bd      	mov	sp, r7
   1f366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	comma_ptr = strchr(response, ch);
   1f36a:	4620      	mov	r0, r4
   1f36c:	212c      	movs	r1, #44	; 0x2c
   1f36e:	f009 fa29 	bl	287c4 <strchr>
	if (!comma_ptr) {
   1f372:	4604      	mov	r4, r0
   1f374:	2800      	cmp	r0, #0
   1f376:	d048      	beq.n	1f40a <lte_lc_psm_get+0x106>
   1f378:	f04f 080c 	mov.w	r8, #12
			comma_ptr = strchr(comma_ptr + 1, ch);
   1f37c:	1c60      	adds	r0, r4, #1
   1f37e:	212c      	movs	r1, #44	; 0x2c
   1f380:	f009 fa20 	bl	287c4 <strchr>
	for (int i = 0; i < 12; i++) {
   1f384:	f1b8 0801 	subs.w	r8, r8, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   1f388:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   1f38a:	d131      	bne.n	1f3f0 <lte_lc_psm_get+0xec>
	if (comma_ptr) {
   1f38c:	b390      	cbz	r0, 1f3f4 <lte_lc_psm_get+0xf0>
		strncpy(active_time_str, comma_ptr + 2, 8);
   1f38e:	1c81      	adds	r1, r0, #2
   1f390:	2208      	movs	r2, #8
   1f392:	1d38      	adds	r0, r7, #4
   1f394:	f009 fa3d 	bl	28812 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1f398:	1c60      	adds	r0, r4, #1
   1f39a:	212c      	movs	r1, #44	; 0x2c
   1f39c:	f009 fa12 	bl	287c4 <strchr>
	if (comma_ptr) {
   1f3a0:	4604      	mov	r4, r0
   1f3a2:	b338      	cbz	r0, 1f3f4 <lte_lc_psm_get+0xf0>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   1f3a4:	1c81      	adds	r1, r0, #2
   1f3a6:	2208      	movs	r2, #8
   1f3a8:	f107 0010 	add.w	r0, r7, #16
   1f3ac:	f009 fa31 	bl	28812 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1f3b0:	212c      	movs	r1, #44	; 0x2c
   1f3b2:	1c60      	adds	r0, r4, #1
   1f3b4:	f009 fa06 	bl	287c4 <strchr>
	if (comma_ptr) {
   1f3b8:	bb50      	cbnz	r0, 1f410 <lte_lc_psm_get+0x10c>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   1f3ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1f3be:	f107 021c 	add.w	r2, r7, #28
   1f3c2:	f107 0110 	add.w	r1, r7, #16
   1f3c6:	1d38      	adds	r0, r7, #4
   1f3c8:	f000 f9ee 	bl	1f7a8 <parse_psm>
	if (err) {
   1f3cc:	4604      	mov	r4, r0
   1f3ce:	b330      	cbz	r0, 1f41e <lte_lc_psm_get+0x11a>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   1f3d0:	466d      	mov	r5, sp
   1f3d2:	b088      	sub	sp, #32
   1f3d4:	466a      	mov	r2, sp
   1f3d6:	4b1a      	ldr	r3, [pc, #104]	; (1f440 <lte_lc_psm_get+0x13c>)
   1f3d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f3dc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f3e0:	2303      	movs	r3, #3
   1f3e2:	4816      	ldr	r0, [pc, #88]	; (1f43c <lte_lc_psm_get+0x138>)
   1f3e4:	f842 3f10 	str.w	r3, [r2, #16]!
   1f3e8:	f007 fec9 	bl	2717e <z_log_msg_static_create.constprop.0>
   1f3ec:	46ad      	mov	sp, r5
		return err;
   1f3ee:	e7b7      	b.n	1f360 <lte_lc_psm_get+0x5c>
		if (comma_ptr) {
   1f3f0:	2c00      	cmp	r4, #0
   1f3f2:	d1c3      	bne.n	1f37c <lte_lc_psm_get+0x78>
		LOG_ERR("AT command parsing failed");
   1f3f4:	4b13      	ldr	r3, [pc, #76]	; (1f444 <lte_lc_psm_get+0x140>)
   1f3f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   1f3fc:	2302      	movs	r3, #2
   1f3fe:	480f      	ldr	r0, [pc, #60]	; (1f43c <lte_lc_psm_get+0x138>)
   1f400:	63bb      	str	r3, [r7, #56]	; 0x38
   1f402:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1f406:	f007 feba 	bl	2717e <z_log_msg_static_create.constprop.0>
		return -EBADMSG;
   1f40a:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   1f40e:	e7a7      	b.n	1f360 <lte_lc_psm_get+0x5c>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   1f410:	1c81      	adds	r1, r0, #2
   1f412:	2208      	movs	r2, #8
   1f414:	f107 001c 	add.w	r0, r7, #28
   1f418:	f009 f9fb 	bl	28812 <strncpy>
   1f41c:	e7cd      	b.n	1f3ba <lte_lc_psm_get+0xb6>
	*tau = psm_cfg.tau;
   1f41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f420:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   1f422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f424:	602b      	str	r3, [r5, #0]
	return 0;
   1f426:	e79b      	b.n	1f360 <lte_lc_psm_get+0x5c>
		return -EINVAL;
   1f428:	f06f 0415 	mvn.w	r4, #21
   1f42c:	e798      	b.n	1f360 <lte_lc_psm_get+0x5c>
   1f42e:	bf00      	nop
   1f430:	2000dd3f 	.word	0x2000dd3f
   1f434:	0002a796 	.word	0x0002a796
   1f438:	0002a7a3 	.word	0x0002a7a3
   1f43c:	00028f1c 	.word	0x00028f1c
   1f440:	0002a7da 	.word	0x0002a7da
   1f444:	0002a7c0 	.word	0x0002a7c0

0001f448 <at_handler_cereg>:
{
   1f448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	enum lte_lc_nw_reg_status reg_status = 0;
   1f44c:	2500      	movs	r5, #0
{
   1f44e:	4604      	mov	r4, r0
   1f450:	b0aa      	sub	sp, #168	; 0xa8
   1f452:	af02      	add	r7, sp, #8
	struct lte_lc_evt evt = {0};
   1f454:	2248      	movs	r2, #72	; 0x48
   1f456:	2100      	movs	r1, #0
   1f458:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1f45c:	f009 f9aa 	bl	287b4 <memset>
	struct lte_lc_cell cell = {0};
   1f460:	2230      	movs	r2, #48	; 0x30
   1f462:	4629      	mov	r1, r5
   1f464:	f107 0028 	add.w	r0, r7, #40	; 0x28
	enum lte_lc_nw_reg_status reg_status = 0;
   1f468:	71bd      	strb	r5, [r7, #6]
	struct lte_lc_psm_cfg psm_cfg = {0};
   1f46a:	f107 0808 	add.w	r8, r7, #8
	struct lte_lc_cell cell = {0};
   1f46e:	f009 f9a1 	bl	287b4 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1f472:	1dfb      	adds	r3, r7, #7
	struct lte_lc_psm_cfg psm_cfg = {0};
   1f474:	60bd      	str	r5, [r7, #8]
   1f476:	f8c8 5004 	str.w	r5, [r8, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1f47a:	2101      	movs	r1, #1
   1f47c:	9300      	str	r3, [sp, #0]
   1f47e:	4620      	mov	r0, r4
   1f480:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1f484:	1dba      	adds	r2, r7, #6
   1f486:	f000 fa95 	bl	1f9b4 <parse_cereg>
	if (err) {
   1f48a:	b1b0      	cbz	r0, 1f4ba <at_handler_cereg+0x72>
		LOG_ERR("Failed to parse notification (error %d): %s",
   1f48c:	466d      	mov	r5, sp
   1f48e:	b08a      	sub	sp, #40	; 0x28
   1f490:	aa02      	add	r2, sp, #8
   1f492:	4b4e      	ldr	r3, [pc, #312]	; (1f5cc <at_handler_cereg+0x184>)
   1f494:	61d4      	str	r4, [r2, #28]
   1f496:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f49a:	f240 3301 	movw	r3, #769	; 0x301
   1f49e:	8413      	strh	r3, [r2, #32]
   1f4a0:	4b4b      	ldr	r3, [pc, #300]	; (1f5d0 <at_handler_cereg+0x188>)
   1f4a2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f4a6:	484b      	ldr	r0, [pc, #300]	; (1f5d4 <at_handler_cereg+0x18c>)
   1f4a8:	f842 3f10 	str.w	r3, [r2, #16]!
   1f4ac:	f007 fe67 	bl	2717e <z_log_msg_static_create.constprop.0>
   1f4b0:	46ad      	mov	sp, r5
}
   1f4b2:	37a0      	adds	r7, #160	; 0xa0
   1f4b4:	46bd      	mov	sp, r7
   1f4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1f4ba:	79bb      	ldrb	r3, [r7, #6]
   1f4bc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1f4c0:	2b01      	cmp	r3, #1
   1f4c2:	d104      	bne.n	1f4ce <at_handler_cereg+0x86>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   1f4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f4c6:	3301      	adds	r3, #1
   1f4c8:	d162      	bne.n	1f590 <at_handler_cereg+0x148>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   1f4ca:	2304      	movs	r3, #4
   1f4cc:	71bb      	strb	r3, [r7, #6]
	if (event_handler_list_is_empty()) {
   1f4ce:	f000 f919 	bl	1f704 <event_handler_list_is_empty>
   1f4d2:	2800      	cmp	r0, #0
   1f4d4:	d1ed      	bne.n	1f4b2 <at_handler_cereg+0x6a>
	if (reg_status != prev_reg_status) {
   1f4d6:	4a40      	ldr	r2, [pc, #256]	; (1f5d8 <at_handler_cereg+0x190>)
   1f4d8:	79bb      	ldrb	r3, [r7, #6]
   1f4da:	7811      	ldrb	r1, [r2, #0]
   1f4dc:	4299      	cmp	r1, r3
   1f4de:	d008      	beq.n	1f4f2 <at_handler_cereg+0xaa>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1f4e0:	f887 0058 	strb.w	r0, [r7, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   1f4e4:	f107 0058 	add.w	r0, r7, #88	; 0x58
		prev_reg_status = reg_status;
   1f4e8:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   1f4ea:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   1f4ee:	f000 f911 	bl	1f714 <event_handler_list_dispatch>
	if ((cell.id != prev_cell.id) || (cell.tac != prev_cell.tac)) {
   1f4f2:	4b3a      	ldr	r3, [pc, #232]	; (1f5dc <at_handler_cereg+0x194>)
   1f4f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1f4f6:	689a      	ldr	r2, [r3, #8]
   1f4f8:	4291      	cmp	r1, r2
   1f4fa:	d103      	bne.n	1f504 <at_handler_cereg+0xbc>
   1f4fc:	68db      	ldr	r3, [r3, #12]
   1f4fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1f500:	429a      	cmp	r2, r3
   1f502:	d01d      	beq.n	1f540 <at_handler_cereg+0xf8>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   1f504:	2304      	movs	r3, #4
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1f506:	4d35      	ldr	r5, [pc, #212]	; (1f5dc <at_handler_cereg+0x194>)
   1f508:	f107 0428 	add.w	r4, r7, #40	; 0x28
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   1f50c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1f510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f518:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1f51c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   1f520:	f107 0660 	add.w	r6, r7, #96	; 0x60
   1f524:	f107 0528 	add.w	r5, r7, #40	; 0x28
   1f528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f52a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1f52c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f52e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1f530:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1f534:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   1f538:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1f53c:	f000 f8ea 	bl	1f714 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   1f540:	4a27      	ldr	r2, [pc, #156]	; (1f5e0 <at_handler_cereg+0x198>)
   1f542:	79fb      	ldrb	r3, [r7, #7]
   1f544:	7811      	ldrb	r1, [r2, #0]
   1f546:	4299      	cmp	r1, r3
   1f548:	d009      	beq.n	1f55e <at_handler_cereg+0x116>
		prev_lte_mode = lte_mode;
   1f54a:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1f54c:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   1f54e:	f107 0058 	add.w	r0, r7, #88	; 0x58
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1f552:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
		evt.lte_mode = lte_mode;
   1f556:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   1f55a:	f000 f8db 	bl	1f714 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   1f55e:	79bb      	ldrb	r3, [r7, #6]
   1f560:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1f564:	2b01      	cmp	r3, #1
   1f566:	d1a4      	bne.n	1f4b2 <at_handler_cereg+0x6a>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   1f568:	4640      	mov	r0, r8
   1f56a:	f107 010c 	add.w	r1, r7, #12
   1f56e:	f7ff fec9 	bl	1f304 <lte_lc_psm_get>
	if (err) {
   1f572:	b188      	cbz	r0, 1f598 <at_handler_cereg+0x150>
		if (err != -EBADMSG) {
   1f574:	304d      	adds	r0, #77	; 0x4d
   1f576:	d09c      	beq.n	1f4b2 <at_handler_cereg+0x6a>
			LOG_ERR("Failed to get PSM information");
   1f578:	4b1a      	ldr	r3, [pc, #104]	; (1f5e4 <at_handler_cereg+0x19c>)
   1f57a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f57e:	627b      	str	r3, [r7, #36]	; 0x24
   1f580:	2302      	movs	r3, #2
   1f582:	4814      	ldr	r0, [pc, #80]	; (1f5d4 <at_handler_cereg+0x18c>)
   1f584:	623b      	str	r3, [r7, #32]
   1f586:	f107 0220 	add.w	r2, r7, #32
   1f58a:	f007 fdf8 	bl	2717e <z_log_msg_static_create.constprop.0>
   1f58e:	e790      	b.n	1f4b2 <at_handler_cereg+0x6a>
	z_impl_k_sem_give(sem);
   1f590:	4815      	ldr	r0, [pc, #84]	; (1f5e8 <at_handler_cereg+0x1a0>)
   1f592:	f004 fce5 	bl	23f60 <z_impl_k_sem_give>
}
   1f596:	e79a      	b.n	1f4ce <at_handler_cereg+0x86>
	if ((psm_cfg.tau != prev_psm_cfg.tau) ||
   1f598:	4b14      	ldr	r3, [pc, #80]	; (1f5ec <at_handler_cereg+0x1a4>)
   1f59a:	68b9      	ldr	r1, [r7, #8]
   1f59c:	681a      	ldr	r2, [r3, #0]
   1f59e:	4291      	cmp	r1, r2
   1f5a0:	461a      	mov	r2, r3
   1f5a2:	d103      	bne.n	1f5ac <at_handler_cereg+0x164>
   1f5a4:	685b      	ldr	r3, [r3, #4]
   1f5a6:	68f9      	ldr	r1, [r7, #12]
   1f5a8:	4299      	cmp	r1, r3
   1f5aa:	d082      	beq.n	1f4b2 <at_handler_cereg+0x6a>
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f5ac:	e898 0003 	ldmia.w	r8, {r0, r1}
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   1f5b0:	2301      	movs	r3, #1
   1f5b2:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f5b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f5ba:	e882 0003 	stmia.w	r2, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f5be:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   1f5c2:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1f5c6:	f000 f8a5 	bl	1f714 <event_handler_list_dispatch>
   1f5ca:	e772      	b.n	1f4b2 <at_handler_cereg+0x6a>
   1f5cc:	0002a807 	.word	0x0002a807
   1f5d0:	01000004 	.word	0x01000004
   1f5d4:	00028f1c 	.word	0x00028f1c
   1f5d8:	2000dde0 	.word	0x2000dde0
   1f5dc:	2000ce58 	.word	0x2000ce58
   1f5e0:	2000dddf 	.word	0x2000dddf
   1f5e4:	0002a833 	.word	0x0002a833
   1f5e8:	2000d3e4 	.word	0x2000d3e4
   1f5ec:	2000d3dc 	.word	0x2000d3dc

0001f5f0 <lte_lc_func_mode_set>:

	return 0;
}

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   1f5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	switch (mode) {
   1f5f4:	2804      	cmp	r0, #4
{
   1f5f6:	b086      	sub	sp, #24
   1f5f8:	4604      	mov	r4, r0
   1f5fa:	af00      	add	r7, sp, #0
	switch (mode) {
   1f5fc:	d826      	bhi.n	1f64c <lte_lc_func_mode_set+0x5c>
   1f5fe:	2804      	cmp	r0, #4
   1f600:	d829      	bhi.n	1f656 <lte_lc_func_mode_set+0x66>
   1f602:	e8df f000 	tbb	[pc, r0]
   1f606:	0a3a      	.short	0x0a3a
   1f608:	283a      	.short	0x283a
   1f60a:	3a          	.byte	0x3a
   1f60b:	00          	.byte	0x00
   1f60c:	2201      	movs	r2, #1
   1f60e:	492a      	ldr	r1, [pc, #168]	; (1f6b8 <lte_lc_func_mode_set+0xc8>)
   1f610:	409a      	lsls	r2, r3
   1f612:	420a      	tst	r2, r1
   1f614:	d131      	bne.n	1f67a <lte_lc_func_mode_set+0x8a>
   1f616:	2b01      	cmp	r3, #1
   1f618:	d11d      	bne.n	1f656 <lte_lc_func_mode_set+0x66>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   1f61a:	f7ff fc35 	bl	1ee88 <enable_notifications>
		if (err) {
   1f61e:	b360      	cbz	r0, 1f67a <lte_lc_func_mode_set+0x8a>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   1f620:	466c      	mov	r4, sp
   1f622:	b088      	sub	sp, #32
   1f624:	466a      	mov	r2, sp
   1f626:	4b25      	ldr	r3, [pc, #148]	; (1f6bc <lte_lc_func_mode_set+0xcc>)
   1f628:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f62c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f630:	2303      	movs	r3, #3
   1f632:	4823      	ldr	r0, [pc, #140]	; (1f6c0 <lte_lc_func_mode_set+0xd0>)
   1f634:	f842 3f10 	str.w	r3, [r2, #16]!
   1f638:	f007 fda1 	bl	2717e <z_log_msg_static_create.constprop.0>
   1f63c:	46a5      	mov	sp, r4
			return -EFAULT;
   1f63e:	f06f 050d 	mvn.w	r5, #13
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   1f642:	4628      	mov	r0, r5
   1f644:	3718      	adds	r7, #24
   1f646:	46bd      	mov	sp, r7
   1f648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (mode) {
   1f64c:	f1a0 0314 	sub.w	r3, r0, #20
   1f650:	b2db      	uxtb	r3, r3
   1f652:	2b18      	cmp	r3, #24
   1f654:	d9da      	bls.n	1f60c <lte_lc_func_mode_set+0x1c>
		LOG_ERR("Invalid functional mode: %d", mode);
   1f656:	466d      	mov	r5, sp
   1f658:	b088      	sub	sp, #32
   1f65a:	466a      	mov	r2, sp
   1f65c:	4b19      	ldr	r3, [pc, #100]	; (1f6c4 <lte_lc_func_mode_set+0xd4>)
   1f65e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f662:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f666:	2303      	movs	r3, #3
   1f668:	4815      	ldr	r0, [pc, #84]	; (1f6c0 <lte_lc_func_mode_set+0xd0>)
   1f66a:	f842 3f10 	str.w	r3, [r2, #16]!
   1f66e:	f007 fd86 	bl	2717e <z_log_msg_static_create.constprop.0>
   1f672:	46ad      	mov	sp, r5
		return -EINVAL;
   1f674:	f06f 0515 	mvn.w	r5, #21
   1f678:	e7e3      	b.n	1f642 <lte_lc_func_mode_set+0x52>
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   1f67a:	4621      	mov	r1, r4
   1f67c:	4812      	ldr	r0, [pc, #72]	; (1f6c8 <lte_lc_func_mode_set+0xd8>)
   1f67e:	f003 fe37 	bl	232f0 <nrf_modem_at_printf>
	if (err) {
   1f682:	4605      	mov	r5, r0
   1f684:	b198      	cbz	r0, 1f6ae <lte_lc_func_mode_set+0xbe>
		LOG_ERR("Failed to set functional mode. Please check XSYSTEMMODE.");
   1f686:	4b11      	ldr	r3, [pc, #68]	; (1f6cc <lte_lc_func_mode_set+0xdc>)
   1f688:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f68c:	617b      	str	r3, [r7, #20]
   1f68e:	2302      	movs	r3, #2
   1f690:	480b      	ldr	r0, [pc, #44]	; (1f6c0 <lte_lc_func_mode_set+0xd0>)
   1f692:	613b      	str	r3, [r7, #16]
   1f694:	f107 0210 	add.w	r2, r7, #16
   1f698:	f007 fd71 	bl	2717e <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1f69c:	e7cf      	b.n	1f63e <lte_lc_func_mode_set+0x4e>
		e->callback(mode, e->context);
   1f69e:	e9d6 3100 	ldrd	r3, r1, [r6]
   1f6a2:	4620      	mov	r0, r4
   1f6a4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   1f6a6:	3608      	adds	r6, #8
   1f6a8:	4546      	cmp	r6, r8
   1f6aa:	d3f8      	bcc.n	1f69e <lte_lc_func_mode_set+0xae>
   1f6ac:	e7c9      	b.n	1f642 <lte_lc_func_mode_set+0x52>
   1f6ae:	4e08      	ldr	r6, [pc, #32]	; (1f6d0 <lte_lc_func_mode_set+0xe0>)
   1f6b0:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1f6d4 <lte_lc_func_mode_set+0xe4>
   1f6b4:	e7f8      	b.n	1f6a8 <lte_lc_func_mode_set+0xb8>
   1f6b6:	bf00      	nop
   1f6b8:	01300c01 	.word	0x01300c01
   1f6bc:	0002a851 	.word	0x0002a851
   1f6c0:	00028f1c 	.word	0x00028f1c
   1f6c4:	0002a87b 	.word	0x0002a87b
   1f6c8:	0002a897 	.word	0x0002a897
   1f6cc:	0002a8a2 	.word	0x0002a8a2
   1f6d0:	0002b684 	.word	0x0002b684
   1f6d4:	0002b684 	.word	0x0002b684

0001f6d8 <lte_lc_deinit>:
{
   1f6d8:	b508      	push	{r3, lr}
	if (is_initialized) {
   1f6da:	4b06      	ldr	r3, [pc, #24]	; (1f6f4 <lte_lc_deinit+0x1c>)
   1f6dc:	781a      	ldrb	r2, [r3, #0]
   1f6de:	b122      	cbz	r2, 1f6ea <lte_lc_deinit+0x12>
		is_initialized = false;
   1f6e0:	2000      	movs	r0, #0
   1f6e2:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   1f6e4:	f7ff ff84 	bl	1f5f0 <lte_lc_func_mode_set>
   1f6e8:	b908      	cbnz	r0, 1f6ee <lte_lc_deinit+0x16>
   1f6ea:	2000      	movs	r0, #0
}
   1f6ec:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   1f6ee:	f06f 000d 	mvn.w	r0, #13
   1f6f2:	e7fb      	b.n	1f6ec <lte_lc_deinit+0x14>
   1f6f4:	2000dde4 	.word	0x2000dde4

0001f6f8 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1f6f8:	4801      	ldr	r0, [pc, #4]	; (1f700 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1f6fa:	f004 bbc1 	b.w	23e80 <z_impl_k_mutex_unlock>
   1f6fe:	bf00      	nop
   1f700:	2000c88c 	.word	0x2000c88c

0001f704 <event_handler_list_is_empty>:
	return list->head;
   1f704:	4b02      	ldr	r3, [pc, #8]	; (1f710 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   1f706:	6818      	ldr	r0, [r3, #0]
}
   1f708:	fab0 f080 	clz	r0, r0
   1f70c:	0940      	lsrs	r0, r0, #5
   1f70e:	4770      	bx	lr
   1f710:	2000d3fc 	.word	0x2000d3fc

0001f714 <event_handler_list_dispatch>:
{
   1f714:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1f716:	4c0f      	ldr	r4, [pc, #60]	; (1f754 <event_handler_list_dispatch+0x40>)
   1f718:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   1f71a:	6823      	ldr	r3, [r4, #0]
   1f71c:	b1c3      	cbz	r3, 1f750 <event_handler_list_dispatch+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   1f71e:	f04f 33ff 	mov.w	r3, #4294967295
   1f722:	f04f 32ff 	mov.w	r2, #4294967295
   1f726:	480c      	ldr	r0, [pc, #48]	; (1f758 <event_handler_list_dispatch+0x44>)
   1f728:	f004 fb30 	bl	23d8c <z_impl_k_mutex_lock>
   1f72c:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1f72e:	b10b      	cbz	r3, 1f734 <event_handler_list_dispatch+0x20>
	return node->next;
   1f730:	681c      	ldr	r4, [r3, #0]
   1f732:	b91b      	cbnz	r3, 1f73c <event_handler_list_dispatch+0x28>
}
   1f734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   1f738:	f7ff bfde 	b.w	1f6f8 <k_mutex_unlock.constprop.0.isra.0>
		curr->handler(evt);
   1f73c:	4628      	mov	r0, r5
   1f73e:	685b      	ldr	r3, [r3, #4]
   1f740:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1f742:	b11c      	cbz	r4, 1f74c <event_handler_list_dispatch+0x38>
   1f744:	6822      	ldr	r2, [r4, #0]
   1f746:	4623      	mov	r3, r4
   1f748:	4614      	mov	r4, r2
   1f74a:	e7f2      	b.n	1f732 <event_handler_list_dispatch+0x1e>
   1f74c:	4622      	mov	r2, r4
   1f74e:	e7fa      	b.n	1f746 <event_handler_list_dispatch+0x32>
}
   1f750:	bd38      	pop	{r3, r4, r5, pc}
   1f752:	bf00      	nop
   1f754:	2000d3fc 	.word	0x2000d3fc
   1f758:	2000c88c 	.word	0x2000c88c

0001f75c <response_is_valid>:
{
   1f75c:	b570      	push	{r4, r5, r6, lr}
   1f75e:	460e      	mov	r6, r1
   1f760:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   1f762:	4605      	mov	r5, r0
{
   1f764:	b086      	sub	sp, #24
	if ((response == NULL) || (check == NULL)) {
   1f766:	b100      	cbz	r0, 1f76a <response_is_valid+0xe>
   1f768:	b962      	cbnz	r2, 1f784 <response_is_valid+0x28>
		LOG_ERR("Invalid pointer provided");
   1f76a:	4b0d      	ldr	r3, [pc, #52]	; (1f7a0 <response_is_valid+0x44>)
   1f76c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f770:	9305      	str	r3, [sp, #20]
   1f772:	2302      	movs	r3, #2
   1f774:	480b      	ldr	r0, [pc, #44]	; (1f7a4 <response_is_valid+0x48>)
   1f776:	aa04      	add	r2, sp, #16
   1f778:	9304      	str	r3, [sp, #16]
   1f77a:	f007 fd03 	bl	27184 <z_log_msg_static_create.constprop.0>
		return false;
   1f77e:	2000      	movs	r0, #0
}
   1f780:	b006      	add	sp, #24
   1f782:	bd70      	pop	{r4, r5, r6, pc}
	if ((response_len < strlen(check)) ||
   1f784:	4610      	mov	r0, r2
   1f786:	f7f9 fc31 	bl	18fec <strlen>
   1f78a:	42b0      	cmp	r0, r6
   1f78c:	d8f7      	bhi.n	1f77e <response_is_valid+0x22>
	    (memcmp(response, check, response_len) != 0)) {
   1f78e:	4632      	mov	r2, r6
   1f790:	4621      	mov	r1, r4
   1f792:	4628      	mov	r0, r5
   1f794:	f008 fff1 	bl	2877a <memcmp>
	if ((response_len < strlen(check)) ||
   1f798:	fab0 f080 	clz	r0, r0
   1f79c:	0940      	lsrs	r0, r0, #5
   1f79e:	e7ef      	b.n	1f780 <response_is_valid+0x24>
   1f7a0:	0002a95a 	.word	0x0002a95a
   1f7a4:	00028f24 	.word	0x00028f24

0001f7a8 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   1f7a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   1f7ac:	f04f 0900 	mov.w	r9, #0
{
   1f7b0:	b089      	sub	sp, #36	; 0x24
   1f7b2:	4607      	mov	r7, r0
   1f7b4:	460e      	mov	r6, r1
   1f7b6:	4614      	mov	r4, r2
   1f7b8:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   1f7ba:	f8cd 9004 	str.w	r9, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   1f7be:	f7f9 fc15 	bl	18fec <strlen>
   1f7c2:	2808      	cmp	r0, #8
   1f7c4:	d11b      	bne.n	1f7fe <parse_psm+0x56>
   1f7c6:	4630      	mov	r0, r6
   1f7c8:	f7f9 fc10 	bl	18fec <strlen>
   1f7cc:	2808      	cmp	r0, #8
   1f7ce:	d116      	bne.n	1f7fe <parse_psm+0x56>
		return -EINVAL;
	}

	/* Parse T3412-extended (periodic TAU) timer */
	memcpy(unit_str, tau_ext_str, unit_str_len);
   1f7d0:	8832      	ldrh	r2, [r6, #0]
   1f7d2:	78b3      	ldrb	r3, [r6, #2]
   1f7d4:	f8ad 2004 	strh.w	r2, [sp, #4]

	lut_idx = strtoul(unit_str, NULL, 2);
   1f7d8:	4649      	mov	r1, r9
   1f7da:	2202      	movs	r2, #2
   1f7dc:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   1f7de:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   1f7e2:	f005 fd65 	bl	252b0 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   1f7e6:	2807      	cmp	r0, #7
   1f7e8:	d90e      	bls.n	1f808 <parse_psm+0x60>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   1f7ea:	4b32      	ldr	r3, [pc, #200]	; (1f8b4 <parse_psm+0x10c>)
   1f7ec:	9307      	str	r3, [sp, #28]
   1f7ee:	2302      	movs	r3, #2
   1f7f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f7f4:	4830      	ldr	r0, [pc, #192]	; (1f8b8 <parse_psm+0x110>)
   1f7f6:	aa06      	add	r2, sp, #24
   1f7f8:	9306      	str	r3, [sp, #24]
   1f7fa:	f007 fcc3 	bl	27184 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1f7fe:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   1f802:	b009      	add	sp, #36	; 0x24
   1f804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	timer_unit = t3412_ext_lookup[lut_idx];
   1f808:	4b2c      	ldr	r3, [pc, #176]	; (1f8bc <parse_psm+0x114>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   1f80a:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   1f80c:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   1f810:	4649      	mov	r1, r9
   1f812:	1cf0      	adds	r0, r6, #3
   1f814:	f005 fd4c 	bl	252b0 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1f818:	f1b8 0f00 	cmp.w	r8, #0
   1f81c:	d117      	bne.n	1f84e <parse_psm+0xa6>
   1f81e:	f04f 33ff 	mov.w	r3, #4294967295
   1f822:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   1f824:	b1c4      	cbz	r4, 1f858 <parse_psm+0xb0>
   1f826:	4620      	mov	r0, r4
   1f828:	f7f9 fbe0 	bl	18fec <strlen>
   1f82c:	2808      	cmp	r0, #8
   1f82e:	d113      	bne.n	1f858 <parse_psm+0xb0>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   1f830:	8822      	ldrh	r2, [r4, #0]
   1f832:	78a3      	ldrb	r3, [r4, #2]
   1f834:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   1f838:	2100      	movs	r1, #0
   1f83a:	2202      	movs	r2, #2
   1f83c:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   1f83e:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   1f842:	f005 fd35 	bl	252b0 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   1f846:	2807      	cmp	r0, #7
   1f848:	d915      	bls.n	1f876 <parse_psm+0xce>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   1f84a:	4b1d      	ldr	r3, [pc, #116]	; (1f8c0 <parse_psm+0x118>)
   1f84c:	e7ce      	b.n	1f7ec <parse_psm+0x44>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1f84e:	fb00 f008 	mul.w	r0, r0, r8
   1f852:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   1f854:	3001      	adds	r0, #1
   1f856:	d0e5      	beq.n	1f824 <parse_psm+0x7c>
	memcpy(unit_str, active_time_str, unit_str_len);
   1f858:	883a      	ldrh	r2, [r7, #0]
   1f85a:	78bb      	ldrb	r3, [r7, #2]
   1f85c:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   1f860:	2100      	movs	r1, #0
   1f862:	2202      	movs	r2, #2
   1f864:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   1f866:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   1f86a:	f005 fd21 	bl	252b0 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   1f86e:	2807      	cmp	r0, #7
   1f870:	d910      	bls.n	1f894 <parse_psm+0xec>
		LOG_ERR("Unable to parse active time string");
   1f872:	4b14      	ldr	r3, [pc, #80]	; (1f8c4 <parse_psm+0x11c>)
   1f874:	e7ba      	b.n	1f7ec <parse_psm+0x44>
		timer_unit = t3412_lookup[lut_idx];
   1f876:	4b14      	ldr	r3, [pc, #80]	; (1f8c8 <parse_psm+0x120>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   1f878:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   1f87a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   1f87e:	2100      	movs	r1, #0
   1f880:	1ce0      	adds	r0, r4, #3
   1f882:	f005 fd15 	bl	252b0 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1f886:	b116      	cbz	r6, 1f88e <parse_psm+0xe6>
   1f888:	4370      	muls	r0, r6
   1f88a:	6028      	str	r0, [r5, #0]
   1f88c:	e7e4      	b.n	1f858 <parse_psm+0xb0>
   1f88e:	f04f 30ff 	mov.w	r0, #4294967295
   1f892:	e7fa      	b.n	1f88a <parse_psm+0xe2>
	timer_unit = t3324_lookup[lut_idx];
   1f894:	4b0d      	ldr	r3, [pc, #52]	; (1f8cc <parse_psm+0x124>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   1f896:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   1f898:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   1f89c:	2100      	movs	r1, #0
   1f89e:	1cf8      	adds	r0, r7, #3
   1f8a0:	f005 fd06 	bl	252b0 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1f8a4:	b11c      	cbz	r4, 1f8ae <parse_psm+0x106>
   1f8a6:	4360      	muls	r0, r4
   1f8a8:	6068      	str	r0, [r5, #4]
	return 0;
   1f8aa:	2000      	movs	r0, #0
   1f8ac:	e7a9      	b.n	1f802 <parse_psm+0x5a>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1f8ae:	f04f 30ff 	mov.w	r0, #4294967295
   1f8b2:	e7f9      	b.n	1f8a8 <parse_psm+0x100>
   1f8b4:	0002aaaa 	.word	0x0002aaaa
   1f8b8:	00028f24 	.word	0x00028f24
   1f8bc:	00029318 	.word	0x00029318
   1f8c0:	0002aadf 	.word	0x0002aadf
   1f8c4:	0002ab0b 	.word	0x0002ab0b
   1f8c8:	000292f8 	.word	0x000292f8
   1f8cc:	000292f8 	.word	0x000292f8

0001f8d0 <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   1f8d0:	2300      	movs	r3, #0
{
   1f8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f8d6:	b084      	sub	sp, #16
   1f8d8:	af00      	add	r7, sp, #0
   1f8da:	4680      	mov	r8, r0
   1f8dc:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1f8de:	f107 0008 	add.w	r0, r7, #8
   1f8e2:	2104      	movs	r1, #4
{
   1f8e4:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   1f8e6:	e9c7 3302 	strd	r3, r3, [r7, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1f8ea:	f007 fb0b 	bl	26f04 <at_params_list_init>
	if (err) {
   1f8ee:	4604      	mov	r4, r0
   1f8f0:	b198      	cbz	r0, 1f91a <parse_rrc_mode+0x4a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1f8f2:	466d      	mov	r5, sp
   1f8f4:	b088      	sub	sp, #32
   1f8f6:	466a      	mov	r2, sp
   1f8f8:	4b29      	ldr	r3, [pc, #164]	; (1f9a0 <parse_rrc_mode+0xd0>)
   1f8fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f8fe:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f902:	2303      	movs	r3, #3
   1f904:	4827      	ldr	r0, [pc, #156]	; (1f9a4 <parse_rrc_mode+0xd4>)
   1f906:	f842 3f10 	str.w	r3, [r2, #16]!
   1f90a:	f007 fc3b 	bl	27184 <z_log_msg_static_create.constprop.0>
   1f90e:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1f910:	4620      	mov	r0, r4
   1f912:	3710      	adds	r7, #16
   1f914:	46bd      	mov	sp, r7
   1f916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
   1f91a:	4601      	mov	r1, r0
   1f91c:	f107 0208 	add.w	r2, r7, #8
   1f920:	4640      	mov	r0, r8
   1f922:	f007 fad6 	bl	26ed2 <at_parser_params_from_str>
	if (err) {
   1f926:	4604      	mov	r4, r0
   1f928:	b198      	cbz	r0, 1f952 <parse_rrc_mode+0x82>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   1f92a:	466d      	mov	r5, sp
   1f92c:	b088      	sub	sp, #32
   1f92e:	466a      	mov	r2, sp
   1f930:	4b1d      	ldr	r3, [pc, #116]	; (1f9a8 <parse_rrc_mode+0xd8>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1f932:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f936:	2303      	movs	r3, #3
   1f938:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f93c:	4819      	ldr	r0, [pc, #100]	; (1f9a4 <parse_rrc_mode+0xd4>)
   1f93e:	f842 3f10 	str.w	r3, [r2, #16]!
   1f942:	f007 fc1f 	bl	27184 <z_log_msg_static_create.constprop.0>
   1f946:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1f948:	f107 0008 	add.w	r0, r7, #8
   1f94c:	f007 fb04 	bl	26f58 <at_params_list_free>
	return err;
   1f950:	e7de      	b.n	1f910 <parse_rrc_mode+0x40>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   1f952:	4631      	mov	r1, r6
   1f954:	1d3a      	adds	r2, r7, #4
   1f956:	f107 0008 	add.w	r0, r7, #8
   1f95a:	f007 fbaf 	bl	270bc <at_params_int_get>
	if (err) {
   1f95e:	4604      	mov	r4, r0
   1f960:	b120      	cbz	r0, 1f96c <parse_rrc_mode+0x9c>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1f962:	466d      	mov	r5, sp
   1f964:	b088      	sub	sp, #32
   1f966:	466a      	mov	r2, sp
   1f968:	4b10      	ldr	r3, [pc, #64]	; (1f9ac <parse_rrc_mode+0xdc>)
   1f96a:	e7e2      	b.n	1f932 <parse_rrc_mode+0x62>
	if (temp_mode == 0) {
   1f96c:	687b      	ldr	r3, [r7, #4]
   1f96e:	b11b      	cbz	r3, 1f978 <parse_rrc_mode+0xa8>
	} else if (temp_mode == 1) {
   1f970:	2b01      	cmp	r3, #1
   1f972:	d103      	bne.n	1f97c <parse_rrc_mode+0xac>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   1f974:	702b      	strb	r3, [r5, #0]
   1f976:	e7e7      	b.n	1f948 <parse_rrc_mode+0x78>
   1f978:	4603      	mov	r3, r0
   1f97a:	e7fb      	b.n	1f974 <parse_rrc_mode+0xa4>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   1f97c:	466c      	mov	r4, sp
   1f97e:	b088      	sub	sp, #32
   1f980:	466a      	mov	r2, sp
   1f982:	490b      	ldr	r1, [pc, #44]	; (1f9b0 <parse_rrc_mode+0xe0>)
   1f984:	4807      	ldr	r0, [pc, #28]	; (1f9a4 <parse_rrc_mode+0xd4>)
   1f986:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1f98a:	2303      	movs	r3, #3
   1f98c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f990:	f842 3f10 	str.w	r3, [r2, #16]!
   1f994:	f007 fbf6 	bl	27184 <z_log_msg_static_create.constprop.0>
   1f998:	46a5      	mov	sp, r4
		err = -EINVAL;
   1f99a:	f06f 0415 	mvn.w	r4, #21
   1f99e:	e7d3      	b.n	1f948 <parse_rrc_mode+0x78>
   1f9a0:	0002a973 	.word	0x0002a973
   1f9a4:	00028f24 	.word	0x00028f24
   1f9a8:	0002ab2e 	.word	0x0002ab2e
   1f9ac:	0002ab59 	.word	0x0002ab59
   1f9b0:	0002ab82 	.word	0x0002ab82

0001f9b4 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   1f9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f9b8:	461d      	mov	r5, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   1f9ba:	2300      	movs	r3, #0
{
   1f9bc:	b08a      	sub	sp, #40	; 0x28
   1f9be:	af00      	add	r7, sp, #0
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   1f9c0:	60fb      	str	r3, [r7, #12]
   1f9c2:	823b      	strh	r3, [r7, #16]
   1f9c4:	74bb      	strb	r3, [r7, #18]
{
   1f9c6:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   1f9c8:	2309      	movs	r3, #9
   1f9ca:	2207      	movs	r2, #7
{
   1f9cc:	4680      	mov	r8, r0
   1f9ce:	4689      	mov	r9, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1f9d0:	f107 0014 	add.w	r0, r7, #20
   1f9d4:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   1f9d6:	e9c7 2300 	strd	r2, r3, [r7]
{
   1f9da:	f8d7 a048 	ldr.w	sl, [r7, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1f9de:	f007 fa91 	bl	26f04 <at_params_list_init>
	if (err) {
   1f9e2:	4604      	mov	r4, r0
   1f9e4:	b198      	cbz	r0, 1fa0e <parse_cereg+0x5a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1f9e6:	466d      	mov	r5, sp
   1f9e8:	b088      	sub	sp, #32
   1f9ea:	466a      	mov	r2, sp
   1f9ec:	4b77      	ldr	r3, [pc, #476]	; (1fbcc <parse_cereg+0x218>)
   1f9ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f9f2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f9f6:	2303      	movs	r3, #3
   1f9f8:	4875      	ldr	r0, [pc, #468]	; (1fbd0 <parse_cereg+0x21c>)
   1f9fa:	f842 3f10 	str.w	r3, [r2, #16]!
   1f9fe:	f007 fbc1 	bl	27184 <z_log_msg_static_create.constprop.0>
   1fa02:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1fa04:	4620      	mov	r0, r4
   1fa06:	3728      	adds	r7, #40	; 0x28
   1fa08:	46bd      	mov	sp, r7
   1fa0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   1fa0e:	4601      	mov	r1, r0
   1fa10:	f107 0214 	add.w	r2, r7, #20
   1fa14:	4640      	mov	r0, r8
   1fa16:	f007 fa5c 	bl	26ed2 <at_parser_params_from_str>
	if (err) {
   1fa1a:	4604      	mov	r4, r0
   1fa1c:	b198      	cbz	r0, 1fa46 <parse_cereg+0x92>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   1fa1e:	466d      	mov	r5, sp
   1fa20:	b088      	sub	sp, #32
   1fa22:	466a      	mov	r2, sp
   1fa24:	4b6b      	ldr	r3, [pc, #428]	; (1fbd4 <parse_cereg+0x220>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   1fa26:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1fa2a:	2303      	movs	r3, #3
   1fa2c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fa30:	4867      	ldr	r0, [pc, #412]	; (1fbd0 <parse_cereg+0x21c>)
   1fa32:	f842 3f10 	str.w	r3, [r2, #16]!
   1fa36:	f007 fba5 	bl	27184 <z_log_msg_static_create.constprop.0>
   1fa3a:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1fa3c:	f107 0014 	add.w	r0, r7, #20
   1fa40:	f007 fa8a 	bl	26f58 <at_params_list_free>
	return err;
   1fa44:	e7de      	b.n	1fa04 <parse_cereg+0x50>
	err = at_params_string_get(&resp_list,
   1fa46:	4601      	mov	r1, r0
   1fa48:	463b      	mov	r3, r7
   1fa4a:	f107 020c 	add.w	r2, r7, #12
   1fa4e:	f107 0014 	add.w	r0, r7, #20
   1fa52:	f007 fb5f 	bl	27114 <at_params_string_get>
	if (err) {
   1fa56:	4604      	mov	r4, r0
   1fa58:	b120      	cbz	r0, 1fa64 <parse_cereg+0xb0>
		LOG_ERR("Could not get response prefix, error: %d", err);
   1fa5a:	466d      	mov	r5, sp
   1fa5c:	b088      	sub	sp, #32
   1fa5e:	466a      	mov	r2, sp
   1fa60:	4b5d      	ldr	r3, [pc, #372]	; (1fbd8 <parse_cereg+0x224>)
   1fa62:	e7e0      	b.n	1fa26 <parse_cereg+0x72>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1fa64:	4a5d      	ldr	r2, [pc, #372]	; (1fbdc <parse_cereg+0x228>)
   1fa66:	6839      	ldr	r1, [r7, #0]
   1fa68:	f107 000c 	add.w	r0, r7, #12
   1fa6c:	f7ff fe76 	bl	1f75c <response_is_valid>
   1fa70:	2800      	cmp	r0, #0
   1fa72:	d0e3      	beq.n	1fa3c <parse_cereg+0x88>
	err = at_params_int_get(list, reg_status_index, &reg_status);
   1fa74:	f107 021c 	add.w	r2, r7, #28
   1fa78:	f1c9 0102 	rsb	r1, r9, #2
   1fa7c:	f107 0014 	add.w	r0, r7, #20
   1fa80:	f007 fb1c 	bl	270bc <at_params_int_get>
	if (err) {
   1fa84:	f1b0 0800 	subs.w	r8, r0, #0
   1fa88:	d165      	bne.n	1fb56 <parse_cereg+0x1a2>
	switch (reg_status) {
   1fa8a:	69fb      	ldr	r3, [r7, #28]
   1fa8c:	2b08      	cmp	r3, #8
   1fa8e:	d03b      	beq.n	1fb08 <parse_cereg+0x154>
   1fa90:	dc23      	bgt.n	1fada <parse_cereg+0x126>
   1fa92:	2b05      	cmp	r3, #5
   1fa94:	d938      	bls.n	1fb08 <parse_cereg+0x154>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   1fa96:	466c      	mov	r4, sp
   1fa98:	b088      	sub	sp, #32
   1fa9a:	466a      	mov	r2, sp
   1fa9c:	4950      	ldr	r1, [pc, #320]	; (1fbe0 <parse_cereg+0x22c>)
   1fa9e:	484c      	ldr	r0, [pc, #304]	; (1fbd0 <parse_cereg+0x21c>)
   1faa0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1faa4:	2303      	movs	r3, #3
   1faa6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1faaa:	f842 3f10 	str.w	r3, [r2, #16]!
   1faae:	f007 fb69 	bl	27184 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1fab2:	f06f 0815 	mvn.w	r8, #21
   1fab6:	46a5      	mov	sp, r4
		LOG_ERR("Could not get registration status, error: %d", status);
   1fab8:	466c      	mov	r4, sp
   1faba:	b088      	sub	sp, #32
   1fabc:	466a      	mov	r2, sp
   1fabe:	4b49      	ldr	r3, [pc, #292]	; (1fbe4 <parse_cereg+0x230>)
   1fac0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fac4:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1fac8:	2303      	movs	r3, #3
   1faca:	4841      	ldr	r0, [pc, #260]	; (1fbd0 <parse_cereg+0x21c>)
   1facc:	f842 3f10 	str.w	r3, [r2, #16]!
   1fad0:	f007 fb58 	bl	27184 <z_log_msg_static_create.constprop.0>
   1fad4:	46a5      	mov	sp, r4
		goto clean_exit;
   1fad6:	4644      	mov	r4, r8
   1fad8:	e7b0      	b.n	1fa3c <parse_cereg+0x88>
	switch (reg_status) {
   1fada:	2b5a      	cmp	r3, #90	; 0x5a
   1fadc:	d1db      	bne.n	1fa96 <parse_cereg+0xe2>
	if (reg_status) {
   1fade:	b106      	cbz	r6, 1fae2 <parse_cereg+0x12e>
		*reg_status = status;
   1fae0:	7033      	strb	r3, [r6, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1fae2:	2d00      	cmp	r5, #0
   1fae4:	d140      	bne.n	1fb68 <parse_cereg+0x1b4>
	if (lte_mode) {
   1fae6:	f1ba 0f00 	cmp.w	sl, #0
   1faea:	d0a7      	beq.n	1fa3c <parse_cereg+0x88>
		err = at_params_int_get(&resp_list,
   1faec:	f107 0208 	add.w	r2, r7, #8
   1faf0:	f1c9 0105 	rsb	r1, r9, #5
   1faf4:	f107 0014 	add.w	r0, r7, #20
   1faf8:	f007 fae0 	bl	270bc <at_params_int_get>
		if (err) {
   1fafc:	2800      	cmp	r0, #0
   1fafe:	d163      	bne.n	1fbc8 <parse_cereg+0x214>
			*lte_mode = mode;
   1fb00:	7a3b      	ldrb	r3, [r7, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   1fb02:	f88a 3000 	strb.w	r3, [sl]
   1fb06:	e799      	b.n	1fa3c <parse_cereg+0x88>
	if (reg_status) {
   1fb08:	bb1e      	cbnz	r6, 1fb52 <parse_cereg+0x19e>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1fb0a:	2d00      	cmp	r5, #0
   1fb0c:	d0eb      	beq.n	1fae6 <parse_cereg+0x132>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   1fb0e:	f107 0014 	add.w	r0, r7, #20
   1fb12:	f007 fb1f 	bl	27154 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1fb16:	2803      	cmp	r0, #3
   1fb18:	d926      	bls.n	1fb68 <parse_cereg+0x1b4>
		err = at_params_string_get(
   1fb1a:	1d3b      	adds	r3, r7, #4
   1fb1c:	f107 021c 	add.w	r2, r7, #28
   1fb20:	f1c9 0103 	rsb	r1, r9, #3
   1fb24:	f107 0014 	add.w	r0, r7, #20
   1fb28:	f007 faf4 	bl	27114 <at_params_string_get>
		if (err) {
   1fb2c:	4606      	mov	r6, r0
   1fb2e:	b300      	cbz	r0, 1fb72 <parse_cereg+0x1be>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   1fb30:	466c      	mov	r4, sp
   1fb32:	b088      	sub	sp, #32
   1fb34:	466a      	mov	r2, sp
   1fb36:	4b2c      	ldr	r3, [pc, #176]	; (1fbe8 <parse_cereg+0x234>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   1fb38:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1fb3c:	2303      	movs	r3, #3
   1fb3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fb42:	4823      	ldr	r0, [pc, #140]	; (1fbd0 <parse_cereg+0x21c>)
   1fb44:	f842 3f10 	str.w	r3, [r2, #16]!
   1fb48:	f007 fb1c 	bl	27184 <z_log_msg_static_create.constprop.0>
   1fb4c:	46a5      	mov	sp, r4
			goto clean_exit;
   1fb4e:	4634      	mov	r4, r6
   1fb50:	e774      	b.n	1fa3c <parse_cereg+0x88>
		*reg_status = status;
   1fb52:	7033      	strb	r3, [r6, #0]
   1fb54:	e7d9      	b.n	1fb0a <parse_cereg+0x156>
	if (status < 0) {
   1fb56:	dbaf      	blt.n	1fab8 <parse_cereg+0x104>
	if (reg_status) {
   1fb58:	b10e      	cbz	r6, 1fb5e <parse_cereg+0x1aa>
		*reg_status = status;
   1fb5a:	f886 8000 	strb.w	r8, [r6]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1fb5e:	2d00      	cmp	r5, #0
   1fb60:	d0c1      	beq.n	1fae6 <parse_cereg+0x132>
   1fb62:	f1b8 0f5a 	cmp.w	r8, #90	; 0x5a
   1fb66:	d1d2      	bne.n	1fb0e <parse_cereg+0x15a>
		cell->tac = UINT32_MAX;
   1fb68:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fb6c:	e9c5 3302 	strd	r3, r3, [r5, #8]
   1fb70:	e7b9      	b.n	1fae6 <parse_cereg+0x132>
		str_buf[len] = '\0';
   1fb72:	687b      	ldr	r3, [r7, #4]
		cell->tac = strtoul(str_buf, NULL, 16);
   1fb74:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   1fb76:	3328      	adds	r3, #40	; 0x28
   1fb78:	443b      	add	r3, r7
   1fb7a:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   1fb7e:	2210      	movs	r2, #16
   1fb80:	f107 001c 	add.w	r0, r7, #28
   1fb84:	f005 fb94 	bl	252b0 <strtoul>
		len = sizeof(str_buf) - 1;
   1fb88:	2309      	movs	r3, #9
		cell->tac = strtoul(str_buf, NULL, 16);
   1fb8a:	60e8      	str	r0, [r5, #12]
		len = sizeof(str_buf) - 1;
   1fb8c:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&resp_list,
   1fb8e:	f107 021c 	add.w	r2, r7, #28
   1fb92:	1d3b      	adds	r3, r7, #4
   1fb94:	f1c9 0104 	rsb	r1, r9, #4
   1fb98:	f107 0014 	add.w	r0, r7, #20
   1fb9c:	f007 faba 	bl	27114 <at_params_string_get>
		if (err) {
   1fba0:	4606      	mov	r6, r0
   1fba2:	b120      	cbz	r0, 1fbae <parse_cereg+0x1fa>
			LOG_ERR("Could not get cell ID, error: %d", err);
   1fba4:	466c      	mov	r4, sp
   1fba6:	b088      	sub	sp, #32
   1fba8:	466a      	mov	r2, sp
   1fbaa:	4b10      	ldr	r3, [pc, #64]	; (1fbec <parse_cereg+0x238>)
   1fbac:	e7c4      	b.n	1fb38 <parse_cereg+0x184>
		str_buf[len] = '\0';
   1fbae:	687b      	ldr	r3, [r7, #4]
		cell->id = strtoul(str_buf, NULL, 16);
   1fbb0:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   1fbb2:	3328      	adds	r3, #40	; 0x28
   1fbb4:	443b      	add	r3, r7
   1fbb6:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   1fbba:	2210      	movs	r2, #16
   1fbbc:	f107 001c 	add.w	r0, r7, #28
   1fbc0:	f005 fb76 	bl	252b0 <strtoul>
   1fbc4:	60a8      	str	r0, [r5, #8]
   1fbc6:	e78e      	b.n	1fae6 <parse_cereg+0x132>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   1fbc8:	2300      	movs	r3, #0
   1fbca:	e79a      	b.n	1fb02 <parse_cereg+0x14e>
   1fbcc:	0002a973 	.word	0x0002a973
   1fbd0:	00028f24 	.word	0x00028f24
   1fbd4:	0002ab9e 	.word	0x0002ab9e
   1fbd8:	0002abcb 	.word	0x0002abcb
   1fbdc:	0002a911 	.word	0x0002a911
   1fbe0:	0002abf4 	.word	0x0002abf4
   1fbe4:	0002ac1c 	.word	0x0002ac1c
   1fbe8:	0002ac49 	.word	0x0002ac49
   1fbec:	0002ac75 	.word	0x0002ac75

0001fbf0 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   1fbf0:	2300      	movs	r3, #0
{
   1fbf2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fbf4:	b089      	sub	sp, #36	; 0x24
   1fbf6:	af00      	add	r7, sp, #0
   1fbf8:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   1fbfa:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   1fbfc:	e9c7 3300 	strd	r3, r3, [r7]
	if (time == NULL || at_response == NULL) {
   1fc00:	2900      	cmp	r1, #0
   1fc02:	d056      	beq.n	1fcb2 <parse_xt3412+0xc2>
   1fc04:	2800      	cmp	r0, #0
   1fc06:	d054      	beq.n	1fcb2 <parse_xt3412+0xc2>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   1fc08:	2104      	movs	r1, #4
   1fc0a:	4638      	mov	r0, r7
   1fc0c:	f007 f97a 	bl	26f04 <at_params_list_init>
	if (err) {
   1fc10:	4604      	mov	r4, r0
   1fc12:	b190      	cbz	r0, 1fc3a <parse_xt3412+0x4a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1fc14:	466d      	mov	r5, sp
   1fc16:	b088      	sub	sp, #32
   1fc18:	466a      	mov	r2, sp
   1fc1a:	4b27      	ldr	r3, [pc, #156]	; (1fcb8 <parse_xt3412+0xc8>)
   1fc1c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fc20:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1fc24:	2303      	movs	r3, #3
   1fc26:	4825      	ldr	r0, [pc, #148]	; (1fcbc <parse_xt3412+0xcc>)
   1fc28:	f842 3f10 	str.w	r3, [r2, #16]!
   1fc2c:	f007 faaa 	bl	27184 <z_log_msg_static_create.constprop.0>
   1fc30:	46ad      	mov	sp, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   1fc32:	4620      	mov	r0, r4
   1fc34:	3724      	adds	r7, #36	; 0x24
   1fc36:	46bd      	mov	sp, r7
   1fc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   1fc3a:	4601      	mov	r1, r0
   1fc3c:	463a      	mov	r2, r7
   1fc3e:	4630      	mov	r0, r6
   1fc40:	f007 f947 	bl	26ed2 <at_parser_params_from_str>
	if (err) {
   1fc44:	4604      	mov	r4, r0
   1fc46:	b190      	cbz	r0, 1fc6e <parse_xt3412+0x7e>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   1fc48:	466d      	mov	r5, sp
   1fc4a:	b088      	sub	sp, #32
   1fc4c:	466a      	mov	r2, sp
   1fc4e:	4b1c      	ldr	r3, [pc, #112]	; (1fcc0 <parse_xt3412+0xd0>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   1fc50:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1fc54:	2303      	movs	r3, #3
   1fc56:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fc5a:	4818      	ldr	r0, [pc, #96]	; (1fcbc <parse_xt3412+0xcc>)
   1fc5c:	f842 3f10 	str.w	r3, [r2, #16]!
   1fc60:	f007 fa90 	bl	27184 <z_log_msg_static_create.constprop.0>
   1fc64:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1fc66:	4638      	mov	r0, r7
   1fc68:	f007 f976 	bl	26f58 <at_params_list_free>
	return err;
   1fc6c:	e7e1      	b.n	1fc32 <parse_xt3412+0x42>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   1fc6e:	462a      	mov	r2, r5
   1fc70:	2102      	movs	r1, #2
   1fc72:	4638      	mov	r0, r7
   1fc74:	f007 fa3a 	bl	270ec <at_params_int64_get>
	if (err) {
   1fc78:	4604      	mov	r4, r0
   1fc7a:	b120      	cbz	r0, 1fc86 <parse_xt3412+0x96>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   1fc7c:	466d      	mov	r5, sp
   1fc7e:	b088      	sub	sp, #32
   1fc80:	466a      	mov	r2, sp
   1fc82:	4b10      	ldr	r3, [pc, #64]	; (1fcc4 <parse_xt3412+0xd4>)
   1fc84:	e7e4      	b.n	1fc50 <parse_xt3412+0x60>
	if ((*time > T3412_MAX) || *time < 0) {
   1fc86:	4910      	ldr	r1, [pc, #64]	; (1fcc8 <parse_xt3412+0xd8>)
   1fc88:	e9d5 3200 	ldrd	r3, r2, [r5]
   1fc8c:	4299      	cmp	r1, r3
   1fc8e:	f04f 0308 	mov.w	r3, #8
   1fc92:	4193      	sbcs	r3, r2
   1fc94:	d2e7      	bcs.n	1fc66 <parse_xt3412+0x76>
		LOG_WRN("Parsed time parameter not within valid range");
   1fc96:	4b0d      	ldr	r3, [pc, #52]	; (1fccc <parse_xt3412+0xdc>)
   1fc98:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1fc9c:	61fb      	str	r3, [r7, #28]
   1fc9e:	2302      	movs	r3, #2
   1fca0:	4806      	ldr	r0, [pc, #24]	; (1fcbc <parse_xt3412+0xcc>)
   1fca2:	61bb      	str	r3, [r7, #24]
   1fca4:	f107 0218 	add.w	r2, r7, #24
   1fca8:	f007 fa6c 	bl	27184 <z_log_msg_static_create.constprop.0>
		err = -EINVAL;
   1fcac:	f06f 0415 	mvn.w	r4, #21
   1fcb0:	e7d9      	b.n	1fc66 <parse_xt3412+0x76>
		return -EINVAL;
   1fcb2:	f06f 0415 	mvn.w	r4, #21
   1fcb6:	e7bc      	b.n	1fc32 <parse_xt3412+0x42>
   1fcb8:	0002a973 	.word	0x0002a973
   1fcbc:	00028f24 	.word	0x00028f24
   1fcc0:	0002ac96 	.word	0x0002ac96
   1fcc4:	0002acc3 	.word	0x0002acc3
   1fcc8:	5099e000 	.word	0x5099e000
   1fccc:	0002acf0 	.word	0x0002acf0

0001fcd0 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   1fcd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   1fcd2:	b968      	cbnz	r0, 1fcf0 <neighborcell_count_get+0x20>
		LOG_ERR("at_response is NULL, can't get cell count");
   1fcd4:	4b0f      	ldr	r3, [pc, #60]	; (1fd14 <neighborcell_count_get+0x44>)
   1fcd6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1fcda:	9305      	str	r3, [sp, #20]
   1fcdc:	2302      	movs	r3, #2
   1fcde:	480e      	ldr	r0, [pc, #56]	; (1fd18 <neighborcell_count_get+0x48>)
   1fce0:	aa04      	add	r2, sp, #16
   1fce2:	9304      	str	r3, [sp, #16]
   1fce4:	f007 fa4e 	bl	27184 <z_log_msg_static_create.constprop.0>
		return 0;
   1fce8:	2000      	movs	r0, #0
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   1fcea:	b007      	add	sp, #28
   1fcec:	f85d fb04 	ldr.w	pc, [sp], #4
	uint32_t count = 0;
   1fcf0:	2300      	movs	r3, #0
   1fcf2:	3801      	subs	r0, #1
		if (*str == c) {
   1fcf4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1fcf8:	2a2c      	cmp	r2, #44	; 0x2c
   1fcfa:	d101      	bne.n	1fd00 <neighborcell_count_get+0x30>
			count++;
   1fcfc:	3301      	adds	r3, #1
	} while (*(str++) != '\0');
   1fcfe:	e7f9      	b.n	1fcf4 <neighborcell_count_get+0x24>
   1fd00:	2a00      	cmp	r2, #0
   1fd02:	d1f7      	bne.n	1fcf4 <neighborcell_count_get+0x24>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   1fd04:	2b0a      	cmp	r3, #10
   1fd06:	d9ef      	bls.n	1fce8 <neighborcell_count_get+0x18>
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   1fd08:	f1a3 0009 	sub.w	r0, r3, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   1fd0c:	2305      	movs	r3, #5
   1fd0e:	fbb0 f0f3 	udiv	r0, r0, r3
	return ncell_count;
   1fd12:	e7ea      	b.n	1fcea <neighborcell_count_get+0x1a>
   1fd14:	0002ad1d 	.word	0x0002ad1d
   1fd18:	00028f24 	.word	0x00028f24

0001fd1c <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   1fd1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   1fd20:	230b      	movs	r3, #11
{
   1fd22:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1fd24:	2100      	movs	r1, #0
{
   1fd26:	4680      	mov	r8, r0
   1fd28:	b08c      	sub	sp, #48	; 0x30
   1fd2a:	af00      	add	r7, sp, #0
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1fd2c:	e9c7 1109 	strd	r1, r1, [r7, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   1fd30:	613b      	str	r3, [r7, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1fd32:	f8c7 102b 	str.w	r1, [r7, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   1fd36:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   1fd38:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1fd3c:	2b2c      	cmp	r3, #44	; 0x2c
   1fd3e:	d101      	bne.n	1fd44 <parse_ncellmeas+0x28>
			count++;
   1fd40:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   1fd42:	e7f9      	b.n	1fd38 <parse_ncellmeas+0x1c>
   1fd44:	2b00      	cmp	r3, #0
   1fd46:	d1f7      	bne.n	1fd38 <parse_ncellmeas+0x1c>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   1fd48:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fd4c:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   1fd50:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fd52:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   1fd54:	f107 001c 	add.w	r0, r7, #28
   1fd58:	f007 f8d4 	bl	26f04 <at_params_list_init>
	if (err) {
   1fd5c:	4604      	mov	r4, r0
   1fd5e:	b198      	cbz	r0, 1fd88 <parse_ncellmeas+0x6c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1fd60:	466d      	mov	r5, sp
   1fd62:	b088      	sub	sp, #32
   1fd64:	466a      	mov	r2, sp
   1fd66:	4bb5      	ldr	r3, [pc, #724]	; (2003c <parse_ncellmeas+0x320>)
   1fd68:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fd6c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1fd70:	2303      	movs	r3, #3
   1fd72:	48b3      	ldr	r0, [pc, #716]	; (20040 <parse_ncellmeas+0x324>)
   1fd74:	f842 3f10 	str.w	r3, [r2, #16]!
   1fd78:	f007 fa04 	bl	27184 <z_log_msg_static_create.constprop.0>
   1fd7c:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1fd7e:	4620      	mov	r0, r4
   1fd80:	3730      	adds	r7, #48	; 0x30
   1fd82:	46bd      	mov	sp, r7
   1fd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   1fd88:	4601      	mov	r1, r0
   1fd8a:	f107 021c 	add.w	r2, r7, #28
   1fd8e:	4640      	mov	r0, r8
   1fd90:	f007 f89f 	bl	26ed2 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   1fd94:	4604      	mov	r4, r0
   1fd96:	b1a8      	cbz	r0, 1fdc4 <parse_ncellmeas+0xa8>
   1fd98:	1dc3      	adds	r3, r0, #7
   1fd9a:	d024      	beq.n	1fde6 <parse_ncellmeas+0xca>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   1fd9c:	466d      	mov	r5, sp
   1fd9e:	b088      	sub	sp, #32
   1fda0:	466a      	mov	r2, sp
   1fda2:	4ba8      	ldr	r3, [pc, #672]	; (20044 <parse_ncellmeas+0x328>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   1fda4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1fda8:	2303      	movs	r3, #3
   1fdaa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fdae:	48a4      	ldr	r0, [pc, #656]	; (20040 <parse_ncellmeas+0x324>)
   1fdb0:	f842 3f10 	str.w	r3, [r2, #16]!
   1fdb4:	f007 f9e6 	bl	27184 <z_log_msg_static_create.constprop.0>
   1fdb8:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1fdba:	f107 001c 	add.w	r0, r7, #28
   1fdbe:	f007 f8cb 	bl	26f58 <at_params_list_free>
	return err;
   1fdc2:	e7dc      	b.n	1fd7e <parse_ncellmeas+0x62>
	bool incomplete = false;
   1fdc4:	4606      	mov	r6, r0
	err = at_params_string_get(&resp_list,
   1fdc6:	2100      	movs	r1, #0
   1fdc8:	f107 0310 	add.w	r3, r7, #16
   1fdcc:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1fdd0:	f107 001c 	add.w	r0, r7, #28
   1fdd4:	f007 f99e 	bl	27114 <at_params_string_get>
	if (err) {
   1fdd8:	4604      	mov	r4, r0
   1fdda:	b130      	cbz	r0, 1fdea <parse_ncellmeas+0xce>
		LOG_ERR("Could not get response prefix, error: %d", err);
   1fddc:	466d      	mov	r5, sp
   1fdde:	b088      	sub	sp, #32
   1fde0:	466a      	mov	r2, sp
   1fde2:	4b99      	ldr	r3, [pc, #612]	; (20048 <parse_ncellmeas+0x32c>)
   1fde4:	e7de      	b.n	1fda4 <parse_ncellmeas+0x88>
		incomplete = true;
   1fde6:	2601      	movs	r6, #1
   1fde8:	e7ed      	b.n	1fdc6 <parse_ncellmeas+0xaa>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1fdea:	4a98      	ldr	r2, [pc, #608]	; (2004c <parse_ncellmeas+0x330>)
   1fdec:	6939      	ldr	r1, [r7, #16]
   1fdee:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1fdf2:	f7ff fcb3 	bl	1f75c <response_is_valid>
   1fdf6:	2800      	cmp	r0, #0
   1fdf8:	f000 80b9 	beq.w	1ff6e <parse_ncellmeas+0x252>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   1fdfc:	2101      	movs	r1, #1
   1fdfe:	1d3a      	adds	r2, r7, #4
   1fe00:	f107 001c 	add.w	r0, r7, #28
   1fe04:	f007 f95a 	bl	270bc <at_params_int_get>
	if (err) {
   1fe08:	4604      	mov	r4, r0
   1fe0a:	2800      	cmp	r0, #0
   1fe0c:	d1d5      	bne.n	1fdba <parse_ncellmeas+0x9e>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   1fe0e:	687b      	ldr	r3, [r7, #4]
   1fe10:	2b00      	cmp	r3, #0
   1fe12:	f040 8110 	bne.w	20036 <parse_ncellmeas+0x31a>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   1fe16:	2102      	movs	r1, #2
   1fe18:	f107 0208 	add.w	r2, r7, #8
   1fe1c:	f107 001c 	add.w	r0, r7, #28
   1fe20:	f007 f9d9 	bl	271d6 <string_param_to_int.constprop.0>
	if (err) {
   1fe24:	4604      	mov	r4, r0
   1fe26:	2800      	cmp	r0, #0
   1fe28:	d1c7      	bne.n	1fdba <parse_ncellmeas+0x9e>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   1fe2a:	68bb      	ldr	r3, [r7, #8]
	len = sizeof(tmp_str);
   1fe2c:	f04f 0907 	mov.w	r9, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   1fe30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fe34:	bfa4      	itt	ge
   1fe36:	f04f 33ff 	movge.w	r3, #4294967295
   1fe3a:	60bb      	strge	r3, [r7, #8]
	cells->current_cell.id = tmp;
   1fe3c:	68bb      	ldr	r3, [r7, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1fe3e:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   1fe40:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1fe42:	f107 0214 	add.w	r2, r7, #20
   1fe46:	f107 030c 	add.w	r3, r7, #12
   1fe4a:	f107 001c 	add.w	r0, r7, #28
	len = sizeof(tmp_str);
   1fe4e:	f8c7 900c 	str.w	r9, [r7, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1fe52:	f007 f95f 	bl	27114 <at_params_string_get>
	if (err) {
   1fe56:	4604      	mov	r4, r0
   1fe58:	2800      	cmp	r0, #0
   1fe5a:	d1ae      	bne.n	1fdba <parse_ncellmeas+0x9e>
	tmp_str[len] = '\0';
   1fe5c:	68fb      	ldr	r3, [r7, #12]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   1fe5e:	210a      	movs	r1, #10
	tmp_str[len] = '\0';
   1fe60:	3330      	adds	r3, #48	; 0x30
   1fe62:	443b      	add	r3, r7
   1fe64:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   1fe68:	1d2a      	adds	r2, r5, #4
   1fe6a:	f107 0017 	add.w	r0, r7, #23
   1fe6e:	f007 f98c 	bl	2718a <string_to_int>
	if (err) {
   1fe72:	4604      	mov	r4, r0
   1fe74:	2800      	cmp	r0, #0
   1fe76:	d1a0      	bne.n	1fdba <parse_ncellmeas+0x9e>
	tmp_str[3] = '\0';
   1fe78:	75f8      	strb	r0, [r7, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   1fe7a:	462a      	mov	r2, r5
   1fe7c:	210a      	movs	r1, #10
   1fe7e:	f107 0014 	add.w	r0, r7, #20
   1fe82:	f007 f982 	bl	2718a <string_to_int>
	if (err) {
   1fe86:	4604      	mov	r4, r0
   1fe88:	2800      	cmp	r0, #0
   1fe8a:	d196      	bne.n	1fdba <parse_ncellmeas+0x9e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   1fe8c:	2104      	movs	r1, #4
   1fe8e:	f107 0208 	add.w	r2, r7, #8
   1fe92:	f107 001c 	add.w	r0, r7, #28
   1fe96:	f007 f99e 	bl	271d6 <string_param_to_int.constprop.0>
	if (err) {
   1fe9a:	4604      	mov	r4, r0
   1fe9c:	2800      	cmp	r0, #0
   1fe9e:	d18c      	bne.n	1fdba <parse_ncellmeas+0x9e>
	cells->current_cell.tac = tmp;
   1fea0:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   1fea2:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   1fea4:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   1fea6:	f107 0208 	add.w	r2, r7, #8
   1feaa:	f107 001c 	add.w	r0, r7, #28
   1feae:	f007 f905 	bl	270bc <at_params_int_get>
	if (err) {
   1feb2:	4604      	mov	r4, r0
   1feb4:	2800      	cmp	r0, #0
   1feb6:	d180      	bne.n	1fdba <parse_ncellmeas+0x9e>
	cells->current_cell.timing_advance = tmp;
   1feb8:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   1feba:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   1febc:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   1febe:	f105 0210 	add.w	r2, r5, #16
   1fec2:	f107 001c 	add.w	r0, r7, #28
   1fec6:	f007 f8f9 	bl	270bc <at_params_int_get>
	if (err) {
   1feca:	4604      	mov	r4, r0
   1fecc:	2800      	cmp	r0, #0
   1fece:	f47f af74 	bne.w	1fdba <parse_ncellmeas+0x9e>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   1fed2:	4649      	mov	r1, r9
   1fed4:	f105 0228 	add.w	r2, r5, #40	; 0x28
   1fed8:	f107 001c 	add.w	r0, r7, #28
   1fedc:	f007 f8ba 	bl	27054 <at_params_short_get>
	if (err) {
   1fee0:	4604      	mov	r4, r0
   1fee2:	2800      	cmp	r0, #0
   1fee4:	f47f af69 	bne.w	1fdba <parse_ncellmeas+0x9e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   1fee8:	2108      	movs	r1, #8
   1feea:	f107 0208 	add.w	r2, r7, #8
   1feee:	f107 001c 	add.w	r0, r7, #28
   1fef2:	f007 f8e3 	bl	270bc <at_params_int_get>
	if (err) {
   1fef6:	4604      	mov	r4, r0
   1fef8:	2800      	cmp	r0, #0
   1fefa:	f47f af5e 	bne.w	1fdba <parse_ncellmeas+0x9e>
	cells->current_cell.rsrp = tmp;
   1fefe:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   1ff00:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   1ff02:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   1ff04:	f107 0208 	add.w	r2, r7, #8
   1ff08:	f107 001c 	add.w	r0, r7, #28
   1ff0c:	f007 f8d6 	bl	270bc <at_params_int_get>
	if (err) {
   1ff10:	4604      	mov	r4, r0
   1ff12:	2800      	cmp	r0, #0
   1ff14:	f47f af51 	bne.w	1fdba <parse_ncellmeas+0x9e>
	cells->current_cell.rsrq = tmp;
   1ff18:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   1ff1a:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   1ff1c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   1ff1e:	f105 0220 	add.w	r2, r5, #32
   1ff22:	f107 001c 	add.w	r0, r7, #28
   1ff26:	f007 f8e1 	bl	270ec <at_params_int64_get>
	if (err) {
   1ff2a:	4604      	mov	r4, r0
   1ff2c:	2800      	cmp	r0, #0
   1ff2e:	f47f af44 	bne.w	1fdba <parse_ncellmeas+0x9e>
	cells->ncells_count = neighborcell_count_get(at_response);
   1ff32:	4640      	mov	r0, r8
   1ff34:	f7ff fecc 	bl	1fcd0 <neighborcell_count_get>
   1ff38:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   1ff3c:	b2c0      	uxtb	r0, r0
   1ff3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   1ff42:	f100 040b 	add.w	r4, r0, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   1ff46:	f107 001c 	add.w	r0, r7, #28
   1ff4a:	f007 f903 	bl	27154 <at_params_valid_count_get>
   1ff4e:	4284      	cmp	r4, r0
   1ff50:	d20f      	bcs.n	1ff72 <parse_ncellmeas+0x256>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   1ff52:	4621      	mov	r1, r4
   1ff54:	f105 0218 	add.w	r2, r5, #24
   1ff58:	f107 001c 	add.w	r0, r7, #28
   1ff5c:	f007 f8c6 	bl	270ec <at_params_int64_get>
		if (err) {
   1ff60:	4604      	mov	r4, r0
   1ff62:	2800      	cmp	r0, #0
   1ff64:	f47f af29 	bne.w	1fdba <parse_ncellmeas+0x9e>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   1ff68:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1ff6c:	b933      	cbnz	r3, 1ff7c <parse_ncellmeas+0x260>
	err = at_params_string_get(&resp_list,
   1ff6e:	2400      	movs	r4, #0
   1ff70:	e723      	b.n	1fdba <parse_ncellmeas+0x9e>
		cells->current_cell.timing_advance_meas_time = 0;
   1ff72:	2200      	movs	r2, #0
   1ff74:	2300      	movs	r3, #0
   1ff76:	e9c5 2306 	strd	r2, r3, [r5, #24]
   1ff7a:	e7f5      	b.n	1ff68 <parse_ncellmeas+0x24c>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   1ff7c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ff7e:	2b00      	cmp	r3, #0
   1ff80:	d0f5      	beq.n	1ff6e <parse_ncellmeas+0x252>
   1ff82:	f04f 080f 	mov.w	r8, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   1ff86:	f04f 0900 	mov.w	r9, #0
   1ff8a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1ff8e:	4599      	cmp	r9, r3
   1ff90:	d304      	bcc.n	1ff9c <parse_ncellmeas+0x280>
	if (incomplete) {
   1ff92:	2e00      	cmp	r6, #0
   1ff94:	d0eb      	beq.n	1ff6e <parse_ncellmeas+0x252>
		err = -E2BIG;
   1ff96:	f06f 0406 	mvn.w	r4, #6
   1ff9a:	e70e      	b.n	1fdba <parse_ncellmeas+0x9e>
					&cells->neighbor_cells[i].earfcn);
   1ff9c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   1ff9e:	f1a8 0104 	sub.w	r1, r8, #4
   1ffa2:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   1ffa6:	f107 001c 	add.w	r0, r7, #28
   1ffaa:	f007 f887 	bl	270bc <at_params_int_get>
		if (err) {
   1ffae:	ea4f 1a09 	mov.w	sl, r9, lsl #4
   1ffb2:	4604      	mov	r4, r0
   1ffb4:	2800      	cmp	r0, #0
   1ffb6:	f47f af00 	bne.w	1fdba <parse_ncellmeas+0x9e>
					  &cells->neighbor_cells[i].phys_cell_id);
   1ffba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   1ffbc:	f1a8 0103 	sub.w	r1, r8, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   1ffc0:	4452      	add	r2, sl
		err = at_params_short_get(&resp_list,
   1ffc2:	3208      	adds	r2, #8
   1ffc4:	f107 001c 	add.w	r0, r7, #28
   1ffc8:	f007 f844 	bl	27054 <at_params_short_get>
		if (err) {
   1ffcc:	4604      	mov	r4, r0
   1ffce:	2800      	cmp	r0, #0
   1ffd0:	f47f aef3 	bne.w	1fdba <parse_ncellmeas+0x9e>
		err = at_params_int_get(&resp_list,
   1ffd4:	f107 0208 	add.w	r2, r7, #8
   1ffd8:	f1a8 0102 	sub.w	r1, r8, #2
   1ffdc:	f107 001c 	add.w	r0, r7, #28
   1ffe0:	f007 f86c 	bl	270bc <at_params_int_get>
		if (err) {
   1ffe4:	4604      	mov	r4, r0
   1ffe6:	2800      	cmp	r0, #0
   1ffe8:	f47f aee7 	bne.w	1fdba <parse_ncellmeas+0x9e>
		cells->neighbor_cells[i].rsrp = tmp;
   1ffec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ffee:	68ba      	ldr	r2, [r7, #8]
   1fff0:	4453      	add	r3, sl
   1fff2:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   1fff4:	f108 31ff 	add.w	r1, r8, #4294967295
   1fff8:	f107 0208 	add.w	r2, r7, #8
   1fffc:	f107 001c 	add.w	r0, r7, #28
   20000:	f007 f85c 	bl	270bc <at_params_int_get>
		if (err) {
   20004:	4604      	mov	r4, r0
   20006:	2800      	cmp	r0, #0
   20008:	f47f aed7 	bne.w	1fdba <parse_ncellmeas+0x9e>
		cells->neighbor_cells[i].rsrq = tmp;
   2000c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2000e:	68ba      	ldr	r2, [r7, #8]
   20010:	4453      	add	r3, sl
   20012:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   20014:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   20016:	4641      	mov	r1, r8
					&cells->neighbor_cells[i].time_diff);
   20018:	4452      	add	r2, sl
		err = at_params_int_get(&resp_list,
   2001a:	3204      	adds	r2, #4
   2001c:	f107 001c 	add.w	r0, r7, #28
   20020:	f007 f84c 	bl	270bc <at_params_int_get>
		if (err) {
   20024:	f108 0805 	add.w	r8, r8, #5
   20028:	4604      	mov	r4, r0
   2002a:	2800      	cmp	r0, #0
   2002c:	f47f aec5 	bne.w	1fdba <parse_ncellmeas+0x9e>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   20030:	f109 0901 	add.w	r9, r9, #1
   20034:	e7a9      	b.n	1ff8a <parse_ncellmeas+0x26e>
		err = 1;
   20036:	2401      	movs	r4, #1
   20038:	e6bf      	b.n	1fdba <parse_ncellmeas+0x9e>
   2003a:	bf00      	nop
   2003c:	0002a973 	.word	0x0002a973
   20040:	00028f24 	.word	0x00028f24
   20044:	0002ad47 	.word	0x0002ad47
   20048:	0002abcb 	.word	0x0002abcb
   2004c:	0002a8ef 	.word	0x0002a8ef

00020050 <parse_ncellmeas_gci>:
{
	struct at_param_list resp_list;
	struct lte_lc_ncell *ncells = NULL;
	int err, status, tmp_int, len;
	int16_t tmp_short;
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20050:	2300      	movs	r3, #0
{
   20052:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20056:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
   20058:	220b      	movs	r2, #11
{
   2005a:	460d      	mov	r5, r1
	uint32_t count = 0;
   2005c:	4699      	mov	r9, r3
{
   2005e:	b0a5      	sub	sp, #148	; 0x94
   20060:	af00      	add	r7, sp, #0
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20062:	e9c7 330f 	strd	r3, r3, [r7, #60]	; 0x3c
	size_t response_prefix_len = sizeof(response_prefix);
   20066:	62ba      	str	r2, [r7, #40]	; 0x28
{
   20068:	60f8      	str	r0, [r7, #12]
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   2006a:	f8c7 3043 	str.w	r3, [r7, #67]	; 0x43
static uint32_t get_char_frequency(const char *str, char c)
   2006e:	1e4a      	subs	r2, r1, #1
		if (*str == c) {
   20070:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   20074:	2b2c      	cmp	r3, #44	; 0x2c
   20076:	d102      	bne.n	2007e <parse_ncellmeas_gci+0x2e>
			count++;
   20078:	f109 0901 	add.w	r9, r9, #1
	} while (*(str++) != '\0');
   2007c:	e7f8      	b.n	20070 <parse_ncellmeas_gci+0x20>
   2007e:	2b00      	cmp	r3, #0
   20080:	d1f6      	bne.n	20070 <parse_ncellmeas_gci+0x20>
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	/* Fill the defaults */
	cells->gci_cells_count = 0;
	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20082:	f04f 32ff 	mov.w	r2, #4294967295
   20086:	2430      	movs	r4, #48	; 0x30
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   20088:	f109 0803 	add.w	r8, r9, #3
	cells->gci_cells_count = 0;
   2008c:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	cells->ncells_count = 0;
   20090:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20094:	60b2      	str	r2, [r6, #8]

	for (i = 0; i < params->gci_count; i++) {
   20096:	68f9      	ldr	r1, [r7, #12]
   20098:	7849      	ldrb	r1, [r1, #1]
   2009a:	4299      	cmp	r1, r3
   2009c:	d812      	bhi.n	200c4 <parse_ncellmeas_gci+0x74>
	 *		<meas_time>,<serving>,<neighbor_count>
	 *	[,<n_earfcn1>,<n_phys_cell_id1>,<n_rsrp1>,<n_rsrq1>,<time_diff1>]
	 *	[,<n_earfcn2>,<n_phys_cell_id2>,<n_rsrp2>,<n_rsrq2>,<time_diff2>]...]...
	 */

	err = at_params_list_init(&resp_list, param_count);
   2009e:	4641      	mov	r1, r8
   200a0:	f107 0034 	add.w	r0, r7, #52	; 0x34
   200a4:	f006 ff2e 	bl	26f04 <at_params_list_init>
	if (err) {
   200a8:	4604      	mov	r4, r0
   200aa:	b1a8      	cbz	r0, 200d8 <parse_ncellmeas_gci+0x88>
		LOG_ERR("Could not init AT params list for cell_list, error: %d", err);
   200ac:	466d      	mov	r5, sp
   200ae:	b088      	sub	sp, #32
   200b0:	466a      	mov	r2, sp
   200b2:	4bb1      	ldr	r3, [pc, #708]	; (20378 <parse_ncellmeas_gci+0x328>)

				/* <n_rsrq[j]> */
				curr_index++;
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
				if (err) {
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   200b4:	6153      	str	r3, [r2, #20]
		}
	}

	if (incomplete) {
		err = -E2BIG;
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   200b6:	2303      	movs	r3, #3
   200b8:	6194      	str	r4, [r2, #24]
   200ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   200be:	f842 3f10 	str.w	r3, [r2, #16]!
   200c2:	e0a7      	b.n	20214 <parse_ncellmeas_gci+0x1c4>
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   200c4:	fb04 f003 	mul.w	r0, r4, r3
   200c8:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
	for (i = 0; i < params->gci_count; i++) {
   200ca:	3301      	adds	r3, #1
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   200cc:	4401      	add	r1, r0
   200ce:	608a      	str	r2, [r1, #8]
		cells->gci_cells[i].timing_advance = LTE_LC_CELL_TIMING_ADVANCE_INVALID;
   200d0:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   200d2:	4401      	add	r1, r0
   200d4:	828a      	strh	r2, [r1, #20]
	for (i = 0; i < params->gci_count; i++) {
   200d6:	e7de      	b.n	20096 <parse_ncellmeas_gci+0x46>
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   200d8:	4601      	mov	r1, r0
   200da:	f107 0234 	add.w	r2, r7, #52	; 0x34
   200de:	4628      	mov	r0, r5
   200e0:	f006 fef7 	bl	26ed2 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   200e4:	4604      	mov	r4, r0
   200e6:	b360      	cbz	r0, 20142 <parse_ncellmeas_gci+0xf2>
   200e8:	1dc3      	adds	r3, r0, #7
   200ea:	d004      	beq.n	200f6 <parse_ncellmeas_gci+0xa6>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   200ec:	466d      	mov	r5, sp
   200ee:	b088      	sub	sp, #32
   200f0:	466a      	mov	r2, sp
   200f2:	4ba2      	ldr	r3, [pc, #648]	; (2037c <parse_ncellmeas_gci+0x32c>)
   200f4:	e7de      	b.n	200b4 <parse_ncellmeas_gci+0x64>
		LOG_WRN("E2BIG was returned, continue. param_count %d, err %d, str %s",
   200f6:	46ea      	mov	sl, sp
   200f8:	b08a      	sub	sp, #40	; 0x28
   200fa:	466a      	mov	r2, sp
   200fc:	4ba0      	ldr	r3, [pc, #640]	; (20380 <parse_ncellmeas_gci+0x330>)
   200fe:	e9c2 0507 	strd	r0, r5, [r2, #28]
   20102:	e9c2 3805 	strd	r3, r8, [r2, #20]
   20106:	f240 4302 	movw	r3, #1026	; 0x402
   2010a:	8493      	strh	r3, [r2, #36]	; 0x24
   2010c:	4b9d      	ldr	r3, [pc, #628]	; (20384 <parse_ncellmeas_gci+0x334>)
   2010e:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   20112:	f842 3f10 	str.w	r3, [r2, #16]!
   20116:	489c      	ldr	r0, [pc, #624]	; (20388 <parse_ncellmeas_gci+0x338>)
   20118:	f007 f834 	bl	27184 <z_log_msg_static_create.constprop.0>
		incomplete = true;
   2011c:	2301      	movs	r3, #1
   2011e:	46d5      	mov	sp, sl
   20120:	617b      	str	r3, [r7, #20]
	err = at_params_string_get(&resp_list,
   20122:	2100      	movs	r1, #0
   20124:	f107 0328 	add.w	r3, r7, #40	; 0x28
   20128:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   2012c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20130:	f006 fff0 	bl	27114 <at_params_string_get>
	if (err) {
   20134:	4604      	mov	r4, r0
   20136:	b130      	cbz	r0, 20146 <parse_ncellmeas_gci+0xf6>
		LOG_ERR("Could not get response prefix, error: %d", err);
   20138:	466d      	mov	r5, sp
   2013a:	b088      	sub	sp, #32
   2013c:	466a      	mov	r2, sp
   2013e:	4b93      	ldr	r3, [pc, #588]	; (2038c <parse_ncellmeas_gci+0x33c>)
   20140:	e7b8      	b.n	200b4 <parse_ncellmeas_gci+0x64>
	bool incomplete = false;
   20142:	6178      	str	r0, [r7, #20]
   20144:	e7ed      	b.n	20122 <parse_ncellmeas_gci+0xd2>
	if (!response_is_valid(response_prefix, response_prefix_len,
   20146:	4a92      	ldr	r2, [pc, #584]	; (20390 <parse_ncellmeas_gci+0x340>)
   20148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2014a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   2014e:	f7ff fb05 	bl	1f75c <response_is_valid>
   20152:	6138      	str	r0, [r7, #16]
   20154:	b9a0      	cbnz	r0, 20180 <parse_ncellmeas_gci+0x130>
		LOG_ERR("Not a valid NCELLMEAS response");
   20156:	4b8f      	ldr	r3, [pc, #572]	; (20394 <parse_ncellmeas_gci+0x344>)
   20158:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2015c:	677b      	str	r3, [r7, #116]	; 0x74
   2015e:	2302      	movs	r3, #2
   20160:	4889      	ldr	r0, [pc, #548]	; (20388 <parse_ncellmeas_gci+0x338>)
   20162:	673b      	str	r3, [r7, #112]	; 0x70
   20164:	f107 0270 	add.w	r2, r7, #112	; 0x70
   20168:	f007 f80c 	bl	27184 <z_log_msg_static_create.constprop.0>
	err = at_params_string_get(&resp_list,
   2016c:	2400      	movs	r4, #0
	}

clean_exit:
	at_params_list_free(&resp_list);
   2016e:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20172:	f006 fef1 	bl	26f58 <at_params_list_free>

	return err;
}
   20176:	4620      	mov	r0, r4
   20178:	3794      	adds	r7, #148	; 0x94
   2017a:	46bd      	mov	sp, r7
   2017c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = at_params_int_get(&resp_list, curr_index, &status);
   20180:	2101      	movs	r1, #1
   20182:	f107 021c 	add.w	r2, r7, #28
   20186:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2018a:	f006 ff97 	bl	270bc <at_params_int_get>
	if (err) {
   2018e:	4604      	mov	r4, r0
   20190:	2800      	cmp	r0, #0
   20192:	d1ec      	bne.n	2016e <parse_ncellmeas_gci+0x11e>
	if (status == AT_NCELLMEAS_STATUS_VALUE_FAIL) {
   20194:	69fc      	ldr	r4, [r7, #28]
   20196:	2c01      	cmp	r4, #1
   20198:	d0e9      	beq.n	2016e <parse_ncellmeas_gci+0x11e>
	} else if (status == AT_NCELLMEAS_STATUS_VALUE_INCOMPLETE) {
   2019a:	2c02      	cmp	r4, #2
   2019c:	d109      	bne.n	201b2 <parse_ncellmeas_gci+0x162>
		LOG_WRN("NCELLMEAS measurements interrupted; results incomplete");
   2019e:	4b7e      	ldr	r3, [pc, #504]	; (20398 <parse_ncellmeas_gci+0x348>)
   201a0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   201a4:	e9c7 431c 	strd	r4, r3, [r7, #112]	; 0x70
   201a8:	4877      	ldr	r0, [pc, #476]	; (20388 <parse_ncellmeas_gci+0x338>)
   201aa:	f107 0270 	add.w	r2, r7, #112	; 0x70
   201ae:	f006 ffe9 	bl	27184 <z_log_msg_static_create.constprop.0>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   201b2:	f04f 0a00 	mov.w	sl, #0
   201b6:	2501      	movs	r5, #1
   201b8:	46d0      	mov	r8, sl
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   201ba:	f1a9 030a 	sub.w	r3, r9, #10
   201be:	607b      	str	r3, [r7, #4]
   201c0:	687b      	ldr	r3, [r7, #4]
   201c2:	42ab      	cmp	r3, r5
   201c4:	d903      	bls.n	201ce <parse_ncellmeas_gci+0x17e>
			i < params->gci_count; i++) {
   201c6:	68fb      	ldr	r3, [r7, #12]
   201c8:	785b      	ldrb	r3, [r3, #1]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   201ca:	4543      	cmp	r3, r8
   201cc:	d80a      	bhi.n	201e4 <parse_ncellmeas_gci+0x194>
	if (incomplete) {
   201ce:	697b      	ldr	r3, [r7, #20]
   201d0:	2b00      	cmp	r3, #0
   201d2:	d0cb      	beq.n	2016c <parse_ncellmeas_gci+0x11c>
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   201d4:	466d      	mov	r5, sp
   201d6:	b088      	sub	sp, #32
   201d8:	466a      	mov	r2, sp
   201da:	4b70      	ldr	r3, [pc, #448]	; (2039c <parse_ncellmeas_gci+0x34c>)
   201dc:	f06f 0406 	mvn.w	r4, #6
   201e0:	6153      	str	r3, [r2, #20]
   201e2:	e768      	b.n	200b6 <parse_ncellmeas_gci+0x66>
		curr_index++;
   201e4:	f105 0901 	add.w	r9, r5, #1
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   201e8:	4649      	mov	r1, r9
   201ea:	f107 0220 	add.w	r2, r7, #32
   201ee:	f107 0034 	add.w	r0, r7, #52	; 0x34
   201f2:	f006 fff0 	bl	271d6 <string_param_to_int.constprop.0>
		if (err) {
   201f6:	4604      	mov	r4, r0
   201f8:	b188      	cbz	r0, 2021e <parse_ncellmeas_gci+0x1ce>
			LOG_ERR("Could not parse cell_id, index %d, i %d error: %d",
   201fa:	466d      	mov	r5, sp
   201fc:	b08a      	sub	sp, #40	; 0x28
   201fe:	466a      	mov	r2, sp
   20200:	4b67      	ldr	r3, [pc, #412]	; (203a0 <parse_ncellmeas_gci+0x350>)
   20202:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   20206:	e9c2 3905 	strd	r3, r9, [r2, #20]
   2020a:	2305      	movs	r3, #5
   2020c:	e9c2 8007 	strd	r8, r0, [r2, #28]
   20210:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   20214:	485c      	ldr	r0, [pc, #368]	; (20388 <parse_ncellmeas_gci+0x338>)
   20216:	f006 ffb5 	bl	27184 <z_log_msg_static_create.constprop.0>
   2021a:	46ad      	mov	sp, r5
   2021c:	e7a7      	b.n	2016e <parse_ncellmeas_gci+0x11e>
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   2021e:	6a3b      	ldr	r3, [r7, #32]
   20220:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   20224:	db11      	blt.n	2024a <parse_ncellmeas_gci+0x1fa>
			LOG_WRN("cell_id = %d which is > LTE_LC_CELL_EUTRAN_ID_MAX; "
   20226:	466c      	mov	r4, sp
   20228:	b088      	sub	sp, #32
   2022a:	466a      	mov	r2, sp
   2022c:	495d      	ldr	r1, [pc, #372]	; (203a4 <parse_ncellmeas_gci+0x354>)
   2022e:	4856      	ldr	r0, [pc, #344]	; (20388 <parse_ncellmeas_gci+0x338>)
   20230:	e9c2 1305 	strd	r1, r3, [r2, #20]
   20234:	2303      	movs	r3, #3
   20236:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2023a:	f842 3f10 	str.w	r3, [r2, #16]!
   2023e:	f006 ffa1 	bl	27184 <z_log_msg_static_create.constprop.0>
			tmp_int = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20242:	f04f 33ff 	mov.w	r3, #4294967295
   20246:	46a5      	mov	sp, r4
   20248:	623b      	str	r3, [r7, #32]
		parsed_cell.id = tmp_int;
   2024a:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   2024c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
		parsed_cell.id = tmp_int;
   20250:	66bb      	str	r3, [r7, #104]	; 0x68
		len = sizeof(tmp_str);
   20252:	2307      	movs	r3, #7
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   20254:	1ca9      	adds	r1, r5, #2
		len = sizeof(tmp_str);
   20256:	627b      	str	r3, [r7, #36]	; 0x24
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   20258:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2025c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   20260:	f006 ff58 	bl	27114 <at_params_string_get>
		if (err) {
   20264:	4604      	mov	r4, r0
   20266:	b120      	cbz	r0, 20272 <parse_ncellmeas_gci+0x222>
			LOG_ERR("Could not parse plmn, error: %d", err);
   20268:	466d      	mov	r5, sp
   2026a:	b088      	sub	sp, #32
   2026c:	466a      	mov	r2, sp
   2026e:	4b4e      	ldr	r3, [pc, #312]	; (203a8 <parse_ncellmeas_gci+0x358>)
   20270:	e720      	b.n	200b4 <parse_ncellmeas_gci+0x64>
		tmp_str[len] = '\0';
   20272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20274:	f107 0218 	add.w	r2, r7, #24
   20278:	3378      	adds	r3, #120	; 0x78
   2027a:	4413      	add	r3, r2
   2027c:	f803 0c64 	strb.w	r0, [r3, #-100]
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
   20280:	210a      	movs	r1, #10
   20282:	f107 0264 	add.w	r2, r7, #100	; 0x64
   20286:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   2028a:	f006 ff7e 	bl	2718a <string_to_int>
		if (err) {
   2028e:	4604      	mov	r4, r0
   20290:	b120      	cbz	r0, 2029c <parse_ncellmeas_gci+0x24c>
			LOG_ERR("string_to_int, error: %d", err);
   20292:	466d      	mov	r5, sp
   20294:	b088      	sub	sp, #32
   20296:	466a      	mov	r2, sp
   20298:	4b44      	ldr	r3, [pc, #272]	; (203ac <parse_ncellmeas_gci+0x35c>)
   2029a:	e70b      	b.n	200b4 <parse_ncellmeas_gci+0x64>
		tmp_str[3] = '\0';
   2029c:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
		err = string_to_int(tmp_str, 10, &parsed_cell.mcc);
   202a0:	210a      	movs	r1, #10
   202a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
   202a6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   202aa:	f006 ff6e 	bl	2718a <string_to_int>
		if (err) {
   202ae:	4604      	mov	r4, r0
   202b0:	2800      	cmp	r0, #0
   202b2:	d1ee      	bne.n	20292 <parse_ncellmeas_gci+0x242>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   202b4:	f107 0220 	add.w	r2, r7, #32
   202b8:	1ce9      	adds	r1, r5, #3
   202ba:	f107 0034 	add.w	r0, r7, #52	; 0x34
   202be:	f006 ff8a 	bl	271d6 <string_param_to_int.constprop.0>
		if (err) {
   202c2:	4604      	mov	r4, r0
   202c4:	b160      	cbz	r0, 202e0 <parse_ncellmeas_gci+0x290>
			LOG_ERR("Could not parse tracking_area_code in i %d, error: %d", i, err);
   202c6:	466d      	mov	r5, sp
   202c8:	b088      	sub	sp, #32
   202ca:	466a      	mov	r2, sp
   202cc:	4b38      	ldr	r3, [pc, #224]	; (203b0 <parse_ncellmeas_gci+0x360>)
   202ce:	61d0      	str	r0, [r2, #28]
   202d0:	e9c2 3805 	strd	r3, r8, [r2, #20]
   202d4:	2304      	movs	r3, #4
   202d6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   202da:	f842 3f10 	str.w	r3, [r2, #16]!
   202de:	e799      	b.n	20214 <parse_ncellmeas_gci+0x1c4>
		parsed_cell.tac = tmp_int;
   202e0:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   202e2:	f107 0220 	add.w	r2, r7, #32
		parsed_cell.tac = tmp_int;
   202e6:	66fb      	str	r3, [r7, #108]	; 0x6c
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   202e8:	1d29      	adds	r1, r5, #4
   202ea:	f107 0034 	add.w	r0, r7, #52	; 0x34
   202ee:	f006 fee5 	bl	270bc <at_params_int_get>
		if (err) {
   202f2:	4604      	mov	r4, r0
   202f4:	b120      	cbz	r0, 20300 <parse_ncellmeas_gci+0x2b0>
			LOG_ERR("Could not parse timing_advance, error: %d", err);
   202f6:	466d      	mov	r5, sp
   202f8:	b088      	sub	sp, #32
   202fa:	466a      	mov	r2, sp
   202fc:	4b2d      	ldr	r3, [pc, #180]	; (203b4 <parse_ncellmeas_gci+0x364>)
   202fe:	e6d9      	b.n	200b4 <parse_ncellmeas_gci+0x64>
		parsed_cell.timing_advance = tmp_int;
   20300:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_int64_get(&resp_list, curr_index,
   20302:	f107 0278 	add.w	r2, r7, #120	; 0x78
		parsed_cell.timing_advance = tmp_int;
   20306:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		err = at_params_int64_get(&resp_list, curr_index,
   2030a:	1d69      	adds	r1, r5, #5
   2030c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20310:	f006 feec 	bl	270ec <at_params_int64_get>
		if (err) {
   20314:	4604      	mov	r4, r0
   20316:	b120      	cbz	r0, 20322 <parse_ncellmeas_gci+0x2d2>
			LOG_ERR("Could not parse timing_advance_meas_time, error: %d", err);
   20318:	466d      	mov	r5, sp
   2031a:	b088      	sub	sp, #32
   2031c:	466a      	mov	r2, sp
   2031e:	4b26      	ldr	r3, [pc, #152]	; (203b8 <parse_ncellmeas_gci+0x368>)
   20320:	e6c8      	b.n	200b4 <parse_ncellmeas_gci+0x64>
		err = at_params_int_get(&resp_list, curr_index, &parsed_cell.earfcn);
   20322:	f107 0270 	add.w	r2, r7, #112	; 0x70
   20326:	1da9      	adds	r1, r5, #6
   20328:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2032c:	f006 fec6 	bl	270bc <at_params_int_get>
		if (err) {
   20330:	4604      	mov	r4, r0
   20332:	b120      	cbz	r0, 2033e <parse_ncellmeas_gci+0x2ee>
			LOG_ERR("Could not parse earfcn, error: %d", err);
   20334:	466d      	mov	r5, sp
   20336:	b088      	sub	sp, #32
   20338:	466a      	mov	r2, sp
   2033a:	4b20      	ldr	r3, [pc, #128]	; (203bc <parse_ncellmeas_gci+0x36c>)
   2033c:	e6ba      	b.n	200b4 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.phys_cell_id);
   2033e:	f107 0288 	add.w	r2, r7, #136	; 0x88
   20342:	1de9      	adds	r1, r5, #7
   20344:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20348:	f006 fe84 	bl	27054 <at_params_short_get>
		if (err) {
   2034c:	4604      	mov	r4, r0
   2034e:	b120      	cbz	r0, 2035a <parse_ncellmeas_gci+0x30a>
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   20350:	466d      	mov	r5, sp
   20352:	b088      	sub	sp, #32
   20354:	466a      	mov	r2, sp
   20356:	4b1a      	ldr	r3, [pc, #104]	; (203c0 <parse_ncellmeas_gci+0x370>)
   20358:	e6ac      	b.n	200b4 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrp);
   2035a:	f107 028a 	add.w	r2, r7, #138	; 0x8a
   2035e:	f105 0108 	add.w	r1, r5, #8
   20362:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20366:	f006 fe75 	bl	27054 <at_params_short_get>
		if (err) {
   2036a:	4604      	mov	r4, r0
   2036c:	b360      	cbz	r0, 203c8 <parse_ncellmeas_gci+0x378>
			LOG_ERR("Could not parse rsrp, error: %d", err);
   2036e:	466d      	mov	r5, sp
   20370:	b088      	sub	sp, #32
   20372:	466a      	mov	r2, sp
   20374:	4b13      	ldr	r3, [pc, #76]	; (203c4 <parse_ncellmeas_gci+0x374>)
   20376:	e69d      	b.n	200b4 <parse_ncellmeas_gci+0x64>
   20378:	0002ad79 	.word	0x0002ad79
   2037c:	0002ad47 	.word	0x0002ad47
   20380:	0002adb0 	.word	0x0002adb0
   20384:	01000005 	.word	0x01000005
   20388:	00028f24 	.word	0x00028f24
   2038c:	0002abcb 	.word	0x0002abcb
   20390:	0002a8ef 	.word	0x0002a8ef
   20394:	0002aded 	.word	0x0002aded
   20398:	0002ae0c 	.word	0x0002ae0c
   2039c:	0002b1c4 	.word	0x0002b1c4
   203a0:	0002ae43 	.word	0x0002ae43
   203a4:	0002ae75 	.word	0x0002ae75
   203a8:	0002aeb8 	.word	0x0002aeb8
   203ac:	0002aed8 	.word	0x0002aed8
   203b0:	0002aef1 	.word	0x0002aef1
   203b4:	0002af27 	.word	0x0002af27
   203b8:	0002af51 	.word	0x0002af51
   203bc:	0002af85 	.word	0x0002af85
   203c0:	0002afa7 	.word	0x0002afa7
   203c4:	0002afcf 	.word	0x0002afcf
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrq);
   203c8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
   203cc:	f105 0109 	add.w	r1, r5, #9
   203d0:	f107 0034 	add.w	r0, r7, #52	; 0x34
   203d4:	f006 fe3e 	bl	27054 <at_params_short_get>
		if (err) {
   203d8:	4604      	mov	r4, r0
   203da:	b120      	cbz	r0, 203e6 <parse_ncellmeas_gci+0x396>
			LOG_ERR("Could not parse rsrq, error: %d", err);
   203dc:	466d      	mov	r5, sp
   203de:	b088      	sub	sp, #32
   203e0:	466a      	mov	r2, sp
   203e2:	4b75      	ldr	r3, [pc, #468]	; (205b8 <parse_ncellmeas_gci+0x568>)
   203e4:	e666      	b.n	200b4 <parse_ncellmeas_gci+0x64>
		err = at_params_int64_get(&resp_list, curr_index, &parsed_cell.measurement_time);
   203e6:	f107 0280 	add.w	r2, r7, #128	; 0x80
   203ea:	f105 010a 	add.w	r1, r5, #10
   203ee:	f107 0034 	add.w	r0, r7, #52	; 0x34
   203f2:	f006 fe7b 	bl	270ec <at_params_int64_get>
		if (err) {
   203f6:	4604      	mov	r4, r0
   203f8:	b120      	cbz	r0, 20404 <parse_ncellmeas_gci+0x3b4>
			LOG_ERR("Could not parse meas_time, error: %d", err);
   203fa:	466d      	mov	r5, sp
   203fc:	b088      	sub	sp, #32
   203fe:	466a      	mov	r2, sp
   20400:	4b6e      	ldr	r3, [pc, #440]	; (205bc <parse_ncellmeas_gci+0x56c>)
   20402:	e657      	b.n	200b4 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   20404:	f107 021a 	add.w	r2, r7, #26
   20408:	f105 010b 	add.w	r1, r5, #11
   2040c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20410:	f006 fe20 	bl	27054 <at_params_short_get>
		if (err) {
   20414:	4604      	mov	r4, r0
   20416:	b120      	cbz	r0, 20422 <parse_ncellmeas_gci+0x3d2>
			LOG_ERR("Could not parse serving, error: %d", err);
   20418:	466d      	mov	r5, sp
   2041a:	b088      	sub	sp, #32
   2041c:	466a      	mov	r2, sp
   2041e:	4b68      	ldr	r3, [pc, #416]	; (205c0 <parse_ncellmeas_gci+0x570>)
   20420:	e648      	b.n	200b4 <parse_ncellmeas_gci+0x64>
		curr_index++;
   20422:	350c      	adds	r5, #12
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   20424:	4629      	mov	r1, r5
   20426:	f107 021a 	add.w	r2, r7, #26
   2042a:	f107 0034 	add.w	r0, r7, #52	; 0x34
		is_serving_cell = tmp_short;
   2042e:	f9b7 901a 	ldrsh.w	r9, [r7, #26]
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   20432:	f006 fe0f 	bl	27054 <at_params_short_get>
		if (err) {
   20436:	4604      	mov	r4, r0
   20438:	b120      	cbz	r0, 20444 <parse_ncellmeas_gci+0x3f4>
			LOG_ERR("Could not parse neighbor_count, error: %d", err);
   2043a:	466d      	mov	r5, sp
   2043c:	b088      	sub	sp, #32
   2043e:	466a      	mov	r2, sp
   20440:	4b60      	ldr	r3, [pc, #384]	; (205c4 <parse_ncellmeas_gci+0x574>)
   20442:	e637      	b.n	200b4 <parse_ncellmeas_gci+0x64>
		if (is_serving_cell) {
   20444:	f1b9 0f00 	cmp.w	r9, #0
   20448:	f000 809e 	beq.w	20588 <parse_ncellmeas_gci+0x538>
			cells->current_cell = parsed_cell;
   2044c:	46b4      	mov	ip, r6
   2044e:	f107 0e60 	add.w	lr, r7, #96	; 0x60
   20452:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   20456:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2045a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2045e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20462:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
		parsed_ncells_count = tmp_short;
   20466:	f897 901a 	ldrb.w	r9, [r7, #26]
			cells->current_cell = parsed_cell;
   2046a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			if (parsed_ncells_count != 0) {
   2046e:	f1b9 0f00 	cmp.w	r9, #0
   20472:	d02c      	beq.n	204ce <parse_ncellmeas_gci+0x47e>
				if (parsed_ncells_count > CONFIG_LTE_NEIGHBOR_CELLS_MAX) {
   20474:	f1b9 0f0a 	cmp.w	r9, #10
   20478:	d924      	bls.n	204c4 <parse_ncellmeas_gci+0x474>
					LOG_WRN("Cutting response, because received neigbor cell"
   2047a:	46e9      	mov	r9, sp
   2047c:	b088      	sub	sp, #32
   2047e:	466a      	mov	r2, sp
   20480:	4b51      	ldr	r3, [pc, #324]	; (205c8 <parse_ncellmeas_gci+0x578>)
   20482:	240a      	movs	r4, #10
   20484:	6153      	str	r3, [r2, #20]
   20486:	2303      	movs	r3, #3
   20488:	6194      	str	r4, [r2, #24]
   2048a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2048e:	f842 3f10 	str.w	r3, [r2, #16]!
   20492:	484e      	ldr	r0, [pc, #312]	; (205cc <parse_ncellmeas_gci+0x57c>)
   20494:	f006 fe76 	bl	27184 <z_log_msg_static_create.constprop.0>
   20498:	46cd      	mov	sp, r9
					incomplete = true;
   2049a:	693b      	ldr	r3, [r7, #16]
   2049c:	617b      	str	r3, [r7, #20]
				ncells = k_calloc(
   2049e:	2110      	movs	r1, #16
   204a0:	4620      	mov	r0, r4
   204a2:	f008 f946 	bl	28732 <k_calloc>
				if (ncells == NULL) {
   204a6:	b978      	cbnz	r0, 204c8 <parse_ncellmeas_gci+0x478>
					LOG_WRN("Failed to allocate memory for the ncells"
   204a8:	4b49      	ldr	r3, [pc, #292]	; (205d0 <parse_ncellmeas_gci+0x580>)
   204aa:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   204ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   204b0:	2302      	movs	r3, #2
   204b2:	4846      	ldr	r0, [pc, #280]	; (205cc <parse_ncellmeas_gci+0x57c>)
   204b4:	65bb      	str	r3, [r7, #88]	; 0x58
   204b6:	f107 0258 	add.w	r2, r7, #88	; 0x58
   204ba:	f006 fe63 	bl	27184 <z_log_msg_static_create.constprop.0>
			i < params->gci_count; i++) {
   204be:	f108 0801 	add.w	r8, r8, #1
   204c2:	e67d      	b.n	201c0 <parse_ncellmeas_gci+0x170>
					to_be_parsed_ncell_count = parsed_ncells_count;
   204c4:	464c      	mov	r4, r9
   204c6:	e7ea      	b.n	2049e <parse_ncellmeas_gci+0x44e>
				cells->neighbor_cells = ncells;
   204c8:	6370      	str	r0, [r6, #52]	; 0x34
				cells->ncells_count = to_be_parsed_ncell_count;
   204ca:	f886 4030 	strb.w	r4, [r6, #48]	; 0x30
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   204ce:	f04f 0900 	mov.w	r9, #0
   204d2:	60bc      	str	r4, [r7, #8]
   204d4:	68bb      	ldr	r3, [r7, #8]
   204d6:	454b      	cmp	r3, r9
   204d8:	d0f1      	beq.n	204be <parse_ncellmeas_gci+0x46e>
							&cells->neighbor_cells[j].earfcn);
   204da:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_int_get(&resp_list,
   204dc:	1c69      	adds	r1, r5, #1
   204de:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   204e2:	f107 0034 	add.w	r0, r7, #52	; 0x34
   204e6:	f006 fde9 	bl	270bc <at_params_int_get>
				if (err) {
   204ea:	ea4f 1b09 	mov.w	fp, r9, lsl #4
   204ee:	4604      	mov	r4, r0
   204f0:	b120      	cbz	r0, 204fc <parse_ncellmeas_gci+0x4ac>
					LOG_ERR("Could not parse n_earfcn, error: %d", err);
   204f2:	466d      	mov	r5, sp
   204f4:	b088      	sub	sp, #32
   204f6:	466a      	mov	r2, sp
   204f8:	4b36      	ldr	r3, [pc, #216]	; (205d4 <parse_ncellmeas_gci+0x584>)
   204fa:	e5db      	b.n	200b4 <parse_ncellmeas_gci+0x64>
							  &cells->neighbor_cells[j].phys_cell_id);
   204fc:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_short_get(&resp_list,
   204fe:	1ca9      	adds	r1, r5, #2
							  &cells->neighbor_cells[j].phys_cell_id);
   20500:	445a      	add	r2, fp
				err = at_params_short_get(&resp_list,
   20502:	3208      	adds	r2, #8
   20504:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20508:	f006 fda4 	bl	27054 <at_params_short_get>
				if (err) {
   2050c:	4604      	mov	r4, r0
   2050e:	b120      	cbz	r0, 2051a <parse_ncellmeas_gci+0x4ca>
					LOG_ERR("Could not parse n_phys_cell_id, error: %d", err);
   20510:	466d      	mov	r5, sp
   20512:	b088      	sub	sp, #32
   20514:	466a      	mov	r2, sp
   20516:	4b30      	ldr	r3, [pc, #192]	; (205d8 <parse_ncellmeas_gci+0x588>)
   20518:	e5cc      	b.n	200b4 <parse_ncellmeas_gci+0x64>
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   2051a:	f107 0220 	add.w	r2, r7, #32
   2051e:	1ce9      	adds	r1, r5, #3
   20520:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20524:	f006 fdca 	bl	270bc <at_params_int_get>
				if (err) {
   20528:	4604      	mov	r4, r0
   2052a:	b120      	cbz	r0, 20536 <parse_ncellmeas_gci+0x4e6>
					LOG_ERR("Could not parse n_rsrp, error: %d", err);
   2052c:	466d      	mov	r5, sp
   2052e:	b088      	sub	sp, #32
   20530:	466a      	mov	r2, sp
   20532:	4b2a      	ldr	r3, [pc, #168]	; (205dc <parse_ncellmeas_gci+0x58c>)
   20534:	e5be      	b.n	200b4 <parse_ncellmeas_gci+0x64>
				cells->neighbor_cells[j].rsrp = tmp_int;
   20536:	6b73      	ldr	r3, [r6, #52]	; 0x34
   20538:	6a3a      	ldr	r2, [r7, #32]
   2053a:	445b      	add	r3, fp
   2053c:	815a      	strh	r2, [r3, #10]
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   2053e:	1d29      	adds	r1, r5, #4
   20540:	f107 0220 	add.w	r2, r7, #32
   20544:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20548:	f006 fdb8 	bl	270bc <at_params_int_get>
				if (err) {
   2054c:	4604      	mov	r4, r0
   2054e:	b120      	cbz	r0, 2055a <parse_ncellmeas_gci+0x50a>
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   20550:	466d      	mov	r5, sp
   20552:	b088      	sub	sp, #32
   20554:	466a      	mov	r2, sp
   20556:	4b22      	ldr	r3, [pc, #136]	; (205e0 <parse_ncellmeas_gci+0x590>)
   20558:	e5ac      	b.n	200b4 <parse_ncellmeas_gci+0x64>
				cells->neighbor_cells[j].rsrq = tmp_int;
   2055a:	6b73      	ldr	r3, [r6, #52]	; 0x34
   2055c:	6a3a      	ldr	r2, [r7, #32]
   2055e:	445b      	add	r3, fp
   20560:	819a      	strh	r2, [r3, #12]
							&cells->neighbor_cells[j].time_diff);
   20562:	6b72      	ldr	r2, [r6, #52]	; 0x34
				curr_index++;
   20564:	3505      	adds	r5, #5
							&cells->neighbor_cells[j].time_diff);
   20566:	445a      	add	r2, fp
				err = at_params_int_get(&resp_list,
   20568:	4629      	mov	r1, r5
   2056a:	3204      	adds	r2, #4
   2056c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20570:	f006 fda4 	bl	270bc <at_params_int_get>
				if (err) {
   20574:	4604      	mov	r4, r0
   20576:	b120      	cbz	r0, 20582 <parse_ncellmeas_gci+0x532>
					LOG_ERR("Could not parse time_diff, error: %d", err);
   20578:	466d      	mov	r5, sp
   2057a:	b088      	sub	sp, #32
   2057c:	466a      	mov	r2, sp
   2057e:	4b19      	ldr	r3, [pc, #100]	; (205e4 <parse_ncellmeas_gci+0x594>)
   20580:	e598      	b.n	200b4 <parse_ncellmeas_gci+0x64>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   20582:	f109 0901 	add.w	r9, r9, #1
   20586:	e7a5      	b.n	204d4 <parse_ncellmeas_gci+0x484>
			cells->gci_cells[k] = parsed_cell;
   20588:	2330      	movs	r3, #48	; 0x30
   2058a:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
   2058c:	f107 0c60 	add.w	ip, r7, #96	; 0x60
   20590:	fb03 440a 	mla	r4, r3, sl, r4
   20594:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   20598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2059a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2059e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   205a0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   205a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   205a8:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
			k++;
   205ac:	f10a 0a01 	add.w	sl, sl, #1
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   205b0:	3301      	adds	r3, #1
   205b2:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
			k++;
   205b6:	e782      	b.n	204be <parse_ncellmeas_gci+0x46e>
   205b8:	0002afef 	.word	0x0002afef
   205bc:	0002b00f 	.word	0x0002b00f
   205c0:	0002b034 	.word	0x0002b034
   205c4:	0002b057 	.word	0x0002b057
   205c8:	0002b081 	.word	0x0002b081
   205cc:	00028f24 	.word	0x00028f24
   205d0:	0002b0d9 	.word	0x0002b0d9
   205d4:	0002b10d 	.word	0x0002b10d
   205d8:	0002b131 	.word	0x0002b131
   205dc:	0002b15b 	.word	0x0002b15b
   205e0:	0002b17d 	.word	0x0002b17d
   205e4:	0002b19f 	.word	0x0002b19f

000205e8 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
	int err;
	struct at_param_list resp_list = {0};
   205e8:	2300      	movs	r3, #0
{
   205ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   205ec:	b085      	sub	sp, #20
   205ee:	af00      	add	r7, sp, #0
   205f0:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   205f2:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   205f4:	e9c7 3302 	strd	r3, r3, [r7, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   205f8:	2900      	cmp	r1, #0
   205fa:	d062      	beq.n	206c2 <parse_xmodemsleep+0xda>
   205fc:	2800      	cmp	r0, #0
   205fe:	d060      	beq.n	206c2 <parse_xmodemsleep+0xda>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   20600:	2104      	movs	r1, #4
   20602:	f107 0008 	add.w	r0, r7, #8
   20606:	f006 fc7d 	bl	26f04 <at_params_list_init>
	if (err) {
   2060a:	4604      	mov	r4, r0
   2060c:	b190      	cbz	r0, 20634 <parse_xmodemsleep+0x4c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   2060e:	466d      	mov	r5, sp
   20610:	b088      	sub	sp, #32
   20612:	466a      	mov	r2, sp
   20614:	4b2c      	ldr	r3, [pc, #176]	; (206c8 <parse_xmodemsleep+0xe0>)
   20616:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2061a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2061e:	2303      	movs	r3, #3
   20620:	482a      	ldr	r0, [pc, #168]	; (206cc <parse_xmodemsleep+0xe4>)
   20622:	f842 3f10 	str.w	r3, [r2, #16]!
   20626:	f006 fdad 	bl	27184 <z_log_msg_static_create.constprop.0>
   2062a:	46ad      	mov	sp, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   2062c:	4620      	mov	r0, r4
   2062e:	3714      	adds	r7, #20
   20630:	46bd      	mov	sp, r7
   20632:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   20634:	4601      	mov	r1, r0
   20636:	f107 0208 	add.w	r2, r7, #8
   2063a:	4630      	mov	r0, r6
   2063c:	f006 fc49 	bl	26ed2 <at_parser_params_from_str>
	if (err) {
   20640:	4604      	mov	r4, r0
   20642:	b178      	cbz	r0, 20664 <parse_xmodemsleep+0x7c>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   20644:	466d      	mov	r5, sp
   20646:	b088      	sub	sp, #32
   20648:	466a      	mov	r2, sp
   2064a:	4b21      	ldr	r3, [pc, #132]	; (206d0 <parse_xmodemsleep+0xe8>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   2064c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   20650:	2303      	movs	r3, #3
   20652:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20656:	481d      	ldr	r0, [pc, #116]	; (206cc <parse_xmodemsleep+0xe4>)
   20658:	f842 3f10 	str.w	r3, [r2, #16]!
   2065c:	f006 fd92 	bl	27184 <z_log_msg_static_create.constprop.0>
   20660:	46ad      	mov	sp, r5
		goto clean_exit;
   20662:	e01a      	b.n	2069a <parse_xmodemsleep+0xb2>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   20664:	2101      	movs	r1, #1
   20666:	1dba      	adds	r2, r7, #6
   20668:	f107 0008 	add.w	r0, r7, #8
   2066c:	f006 fd0e 	bl	2708c <at_params_unsigned_short_get>
	if (err) {
   20670:	4604      	mov	r4, r0
   20672:	b120      	cbz	r0, 2067e <parse_xmodemsleep+0x96>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   20674:	466d      	mov	r5, sp
   20676:	b088      	sub	sp, #32
   20678:	466a      	mov	r2, sp
   2067a:	4b16      	ldr	r3, [pc, #88]	; (206d4 <parse_xmodemsleep+0xec>)
   2067c:	e7e6      	b.n	2064c <parse_xmodemsleep+0x64>
	modem_sleep->type = type;
   2067e:	88fb      	ldrh	r3, [r7, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   20680:	f107 0008 	add.w	r0, r7, #8
	modem_sleep->type = type;
   20684:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   20686:	f006 fd65 	bl	27154 <at_params_valid_count_get>
   2068a:	2802      	cmp	r0, #2
   2068c:	d80a      	bhi.n	206a4 <parse_xmodemsleep+0xbc>
		modem_sleep->time = -1;
   2068e:	f04f 32ff 	mov.w	r2, #4294967295
   20692:	f04f 33ff 	mov.w	r3, #4294967295
   20696:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   2069a:	f107 0008 	add.w	r0, r7, #8
   2069e:	f006 fc5b 	bl	26f58 <at_params_list_free>
	return err;
   206a2:	e7c3      	b.n	2062c <parse_xmodemsleep+0x44>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   206a4:	2102      	movs	r1, #2
   206a6:	f105 0208 	add.w	r2, r5, #8
   206aa:	f107 0008 	add.w	r0, r7, #8
   206ae:	f006 fd1d 	bl	270ec <at_params_int64_get>
	if (err) {
   206b2:	4604      	mov	r4, r0
   206b4:	2800      	cmp	r0, #0
   206b6:	d0f0      	beq.n	2069a <parse_xmodemsleep+0xb2>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   206b8:	466d      	mov	r5, sp
   206ba:	b088      	sub	sp, #32
   206bc:	466a      	mov	r2, sp
   206be:	4b06      	ldr	r3, [pc, #24]	; (206d8 <parse_xmodemsleep+0xf0>)
   206c0:	e7c4      	b.n	2064c <parse_xmodemsleep+0x64>
		return -EINVAL;
   206c2:	f06f 0415 	mvn.w	r4, #21
   206c6:	e7b1      	b.n	2062c <parse_xmodemsleep+0x44>
   206c8:	0002a973 	.word	0x0002a973
   206cc:	00028f24 	.word	0x00028f24
   206d0:	0002b1f0 	.word	0x0002b1f0
   206d4:	0002b222 	.word	0x0002b222
   206d8:	0002b24b 	.word	0x0002b24b

000206dc <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   206dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   206de:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   206e0:	4604      	mov	r4, r0
{
   206e2:	b087      	sub	sp, #28
	if (at_response == NULL || modem_evt == NULL) {
   206e4:	b320      	cbz	r0, 20730 <parse_mdmev+0x54>
   206e6:	b319      	cbz	r1, 20730 <parse_mdmev+0x54>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   206e8:	2108      	movs	r1, #8
   206ea:	4a13      	ldr	r2, [pc, #76]	; (20738 <parse_mdmev+0x5c>)
   206ec:	f7ff f836 	bl	1f75c <response_is_valid>
   206f0:	b968      	cbnz	r0, 2070e <parse_mdmev+0x32>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   206f2:	4b12      	ldr	r3, [pc, #72]	; (2073c <parse_mdmev+0x60>)
   206f4:	4812      	ldr	r0, [pc, #72]	; (20740 <parse_mdmev+0x64>)
   206f6:	9305      	str	r3, [sp, #20]
   206f8:	2302      	movs	r3, #2
   206fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   206fe:	aa04      	add	r2, sp, #16
   20700:	9304      	str	r3, [sp, #16]
   20702:	f006 fd3f 	bl	27184 <z_log_msg_static_create.constprop.0>
		return -EIO;
   20706:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", at_response);

	return -ENODATA;
}
   2070a:	b007      	add	sp, #28
   2070c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   2070e:	2500      	movs	r5, #0
   20710:	4f0c      	ldr	r7, [pc, #48]	; (20744 <parse_mdmev+0x68>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   20712:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   20714:	4621      	mov	r1, r4
   20716:	f857 0b04 	ldr.w	r0, [r7], #4
   2071a:	f7f8 fc5d 	bl	18fd8 <strcmp>
   2071e:	b908      	cbnz	r0, 20724 <parse_mdmev+0x48>
			*modem_evt = i;
   20720:	7035      	strb	r5, [r6, #0]
			return 0;
   20722:	e7f2      	b.n	2070a <parse_mdmev+0x2e>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   20724:	3501      	adds	r5, #1
   20726:	2d05      	cmp	r5, #5
   20728:	d1f4      	bne.n	20714 <parse_mdmev+0x38>
	return -ENODATA;
   2072a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   2072e:	e7ec      	b.n	2070a <parse_mdmev+0x2e>
		return -EINVAL;
   20730:	f06f 0015 	mvn.w	r0, #21
   20734:	e7e9      	b.n	2070a <parse_mdmev+0x2e>
   20736:	bf00      	nop
   20738:	0002b280 	.word	0x0002b280
   2073c:	0002b289 	.word	0x0002b289
   20740:	00028f24 	.word	0x00028f24
   20744:	000292e4 	.word	0x000292e4

00020748 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   20748:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   2074a:	f7fa f9e7 	bl	1ab1c <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   2074e:	4b07      	ldr	r3, [pc, #28]	; (2076c <k_sys_fatal_error_handler+0x24>)
   20750:	9305      	str	r3, [sp, #20]
   20752:	2302      	movs	r3, #2
   20754:	9304      	str	r3, [sp, #16]
   20756:	4806      	ldr	r0, [pc, #24]	; (20770 <k_sys_fatal_error_handler+0x28>)
   20758:	2300      	movs	r3, #0
   2075a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2075e:	aa04      	add	r2, sp, #16
   20760:	f7fa fabc 	bl	1acdc <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   20764:	2000      	movs	r0, #0
   20766:	f7fb fc01 	bl	1bf6c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   2076a:	bf00      	nop
   2076c:	0002b301 	.word	0x0002b301
   20770:	00028eec 	.word	0x00028eec

00020774 <on_modem_lib_init.part.0>:

LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
   20774:	b598      	push	{r3, r4, r7, lr}

	if (ret != 0) {
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   20776:	481a      	ldr	r0, [pc, #104]	; (207e0 <on_modem_lib_init.part.0+0x6c>)
static void on_modem_lib_init(int ret, void *ctx)
   20778:	af00      	add	r7, sp, #0
	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   2077a:	f7f8 fc37 	bl	18fec <strlen>
   2077e:	b1a0      	cbz	r0, 207aa <on_modem_lib_init.part.0+0x36>
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   20780:	4917      	ldr	r1, [pc, #92]	; (207e0 <on_modem_lib_init.part.0+0x6c>)
   20782:	4818      	ldr	r0, [pc, #96]	; (207e4 <on_modem_lib_init.part.0+0x70>)
   20784:	f002 fdb4 	bl	232f0 <nrf_modem_at_printf>
		if (err) {
   20788:	b178      	cbz	r0, 207aa <on_modem_lib_init.part.0+0x36>
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
   2078a:	466c      	mov	r4, sp
   2078c:	b088      	sub	sp, #32
   2078e:	466a      	mov	r2, sp
   20790:	4b15      	ldr	r3, [pc, #84]	; (207e8 <on_modem_lib_init.part.0+0x74>)
   20792:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20796:	2303      	movs	r3, #3
   20798:	f842 3f10 	str.w	r3, [r2, #16]!
   2079c:	2300      	movs	r3, #0
   2079e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   207a2:	4812      	ldr	r0, [pc, #72]	; (207ec <on_modem_lib_init.part.0+0x78>)
   207a4:	f7fa fa9a 	bl	1acdc <z_impl_z_log_msg_static_create>
   207a8:	46a5      	mov	sp, r4
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
   207aa:	4811      	ldr	r0, [pc, #68]	; (207f0 <on_modem_lib_init.part.0+0x7c>)
   207ac:	f7f8 fc1e 	bl	18fec <strlen>
   207b0:	b1a0      	cbz	r0, 207dc <on_modem_lib_init.part.0+0x68>
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
   207b2:	490f      	ldr	r1, [pc, #60]	; (207f0 <on_modem_lib_init.part.0+0x7c>)
   207b4:	480b      	ldr	r0, [pc, #44]	; (207e4 <on_modem_lib_init.part.0+0x70>)
   207b6:	f002 fd9b 	bl	232f0 <nrf_modem_at_printf>
		if (err) {
   207ba:	b178      	cbz	r0, 207dc <on_modem_lib_init.part.0+0x68>
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
   207bc:	466c      	mov	r4, sp
   207be:	b088      	sub	sp, #32
   207c0:	466a      	mov	r2, sp
   207c2:	4b0c      	ldr	r3, [pc, #48]	; (207f4 <on_modem_lib_init.part.0+0x80>)
   207c4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   207c8:	2303      	movs	r3, #3
   207ca:	f842 3f10 	str.w	r3, [r2, #16]!
   207ce:	2300      	movs	r3, #0
   207d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   207d4:	4805      	ldr	r0, [pc, #20]	; (207ec <on_modem_lib_init.part.0+0x78>)
   207d6:	f7fa fa81 	bl	1acdc <z_impl_z_log_msg_static_create>
   207da:	46a5      	mov	sp, r4
		}
	}
}
   207dc:	46bd      	mov	sp, r7
   207de:	bd98      	pop	{r3, r4, r7, pc}
   207e0:	0002b31e 	.word	0x0002b31e
   207e4:	0002a830 	.word	0x0002a830
   207e8:	0002b37b 	.word	0x0002b37b
   207ec:	00028f2c 	.word	0x00028f2c
   207f0:	0002b3a8 	.word	0x0002b3a8
   207f4:	0002b3c0 	.word	0x0002b3c0

000207f8 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   207f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   207fc:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   207fe:	4b15      	ldr	r3, [pc, #84]	; (20854 <tfm_ns_interface_dispatch+0x5c>)
   20800:	4604      	mov	r4, r0
   20802:	f893 8000 	ldrb.w	r8, [r3]
   20806:	460d      	mov	r5, r1
   20808:	4616      	mov	r6, r2
   2080a:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   2080c:	f1b8 0f00 	cmp.w	r8, #0
   20810:	d115      	bne.n	2083e <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   20812:	4668      	mov	r0, sp
   20814:	f005 fe22 	bl	2645c <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   20818:	463a      	mov	r2, r7
   2081a:	4631      	mov	r1, r6
   2081c:	4628      	mov	r0, r5
   2081e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   20820:	47a0      	blx	r4
   20822:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   20824:	4668      	mov	r0, sp
   20826:	f005 fe1a 	bl	2645e <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   2082a:	f1b8 0f00 	cmp.w	r8, #0
   2082e:	d002      	beq.n	20836 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   20830:	4809      	ldr	r0, [pc, #36]	; (20858 <tfm_ns_interface_dispatch+0x60>)
   20832:	f003 fb25 	bl	23e80 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   20836:	4620      	mov	r0, r4
   20838:	b022      	add	sp, #136	; 0x88
   2083a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   2083e:	f04f 32ff 	mov.w	r2, #4294967295
   20842:	f04f 33ff 	mov.w	r3, #4294967295
   20846:	4804      	ldr	r0, [pc, #16]	; (20858 <tfm_ns_interface_dispatch+0x60>)
   20848:	f003 faa0 	bl	23d8c <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   2084c:	2800      	cmp	r0, #0
   2084e:	d0e0      	beq.n	20812 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   20850:	241f      	movs	r4, #31
   20852:	e7f0      	b.n	20836 <tfm_ns_interface_dispatch+0x3e>
   20854:	2000ddf2 	.word	0x2000ddf2
   20858:	2000c8c8 	.word	0x2000c8c8

0002085c <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   2085c:	b530      	push	{r4, r5, lr}
   2085e:	b095      	sub	sp, #84	; 0x54
   20860:	4605      	mov	r5, r0
   20862:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   20864:	2230      	movs	r2, #48	; 0x30
   20866:	2100      	movs	r1, #0
   20868:	a808      	add	r0, sp, #32
   2086a:	f007 ffa3 	bl	287b4 <memset>
   2086e:	233f      	movs	r3, #63	; 0x3f
   20870:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   20872:	ab07      	add	r3, sp, #28
   20874:	9303      	str	r3, [sp, #12]
   20876:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   20878:	9406      	str	r4, [sp, #24]
   2087a:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   2087e:	b154      	cbz	r4, 20896 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   20880:	2301      	movs	r3, #1
   20882:	aa05      	add	r2, sp, #20
   20884:	9200      	str	r2, [sp, #0]
   20886:	2100      	movs	r1, #0
   20888:	4804      	ldr	r0, [pc, #16]	; (2089c <psa_generate_random+0x40>)
   2088a:	9301      	str	r3, [sp, #4]
   2088c:	aa03      	add	r2, sp, #12
   2088e:	f000 f807 	bl	208a0 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   20892:	b015      	add	sp, #84	; 0x54
   20894:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   20896:	4620      	mov	r0, r4
   20898:	e7fb      	b.n	20892 <psa_generate_random+0x36>
   2089a:	bf00      	nop
   2089c:	40000100 	.word	0x40000100

000208a0 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   208a0:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   208a2:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   208a6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   208aa:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   208ac:	d20d      	bcs.n	208ca <psa_call+0x2a>
        (type < INT16_MIN) ||
   208ae:	ea43 0504 	orr.w	r5, r3, r4
   208b2:	2dff      	cmp	r5, #255	; 0xff
   208b4:	d809      	bhi.n	208ca <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   208b6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   208ba:	4613      	mov	r3, r2
   208bc:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   208c0:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   208c2:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   208c4:	4803      	ldr	r0, [pc, #12]	; (208d4 <psa_call+0x34>)
   208c6:	f7ff bf97 	b.w	207f8 <tfm_ns_interface_dispatch>
}
   208ca:	f06f 0080 	mvn.w	r0, #128	; 0x80
   208ce:	bc30      	pop	{r4, r5}
   208d0:	4770      	bx	lr
   208d2:	bf00      	nop
   208d4:	00017c21 	.word	0x00017c21

000208d8 <SystemInit>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   208d8:	4b01      	ldr	r3, [pc, #4]	; (208e0 <SystemInit+0x8>)
   208da:	4a02      	ldr	r2, [pc, #8]	; (208e4 <SystemInit+0xc>)
   208dc:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   208de:	4770      	bx	lr
   208e0:	2000c670 	.word	0x2000c670
   208e4:	03d09000 	.word	0x03d09000

000208e8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   208e8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   208ea:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   208ec:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   208ee:	fab2 f382 	clz	r3, r2
   208f2:	f1c3 031f 	rsb	r3, r3, #31
   208f6:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   208f8:	fa05 f403 	lsl.w	r4, r5, r3
   208fc:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20900:	e8d0 6fef 	ldaex	r6, [r0]
   20904:	4296      	cmp	r6, r2
   20906:	d104      	bne.n	20912 <nrfx_flag32_alloc+0x2a>
   20908:	e8c0 4fec 	stlex	ip, r4, [r0]
   2090c:	f1bc 0f00 	cmp.w	ip, #0
   20910:	d1f6      	bne.n	20900 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   20912:	d1eb      	bne.n	208ec <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   20914:	4801      	ldr	r0, [pc, #4]	; (2091c <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   20916:	700b      	strb	r3, [r1, #0]
}
   20918:	bd70      	pop	{r4, r5, r6, pc}
   2091a:	bf00      	nop
   2091c:	0bad0000 	.word	0x0bad0000

00020920 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   20920:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   20922:	6803      	ldr	r3, [r0, #0]
   20924:	40cb      	lsrs	r3, r1
   20926:	07db      	lsls	r3, r3, #31
   20928:	d410      	bmi.n	2094c <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   2092a:	2301      	movs	r3, #1
   2092c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   2092e:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   20930:	ea43 0102 	orr.w	r1, r3, r2
   20934:	e8d0 4fef 	ldaex	r4, [r0]
   20938:	4294      	cmp	r4, r2
   2093a:	d104      	bne.n	20946 <nrfx_flag32_free+0x26>
   2093c:	e8c0 1fec 	stlex	ip, r1, [r0]
   20940:	f1bc 0f00 	cmp.w	ip, #0
   20944:	d1f6      	bne.n	20934 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   20946:	d1f2      	bne.n	2092e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   20948:	4801      	ldr	r0, [pc, #4]	; (20950 <nrfx_flag32_free+0x30>)
}
   2094a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2094c:	4801      	ldr	r0, [pc, #4]	; (20954 <nrfx_flag32_free+0x34>)
   2094e:	e7fc      	b.n	2094a <nrfx_flag32_free+0x2a>
   20950:	0bad0000 	.word	0x0bad0000
   20954:	0bad0004 	.word	0x0bad0004

00020958 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   20958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   2095a:	4604      	mov	r4, r0
   2095c:	b118      	cbz	r0, 20966 <clock_stop+0xe>
   2095e:	2801      	cmp	r0, #1
   20960:	d01e      	beq.n	209a0 <clock_stop+0x48>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   20962:	b003      	add	sp, #12
   20964:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   20966:	2202      	movs	r2, #2
   20968:	4b27      	ldr	r3, [pc, #156]	; (20a08 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2096a:	4607      	mov	r7, r0
   2096c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20970:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   20974:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20978:	2201      	movs	r2, #1
   2097a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   2097c:	2301      	movs	r3, #1
   2097e:	f242 7510 	movw	r5, #10000	; 0x2710
   20982:	4e21      	ldr	r6, [pc, #132]	; (20a08 <clock_stop+0xb0>)
   20984:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   20988:	b1b4      	cbz	r4, 209b8 <clock_stop+0x60>
   2098a:	2c01      	cmp	r4, #1
   2098c:	d1e9      	bne.n	20962 <clock_stop+0xa>
            if (p_clk_src != NULL)
   2098e:	b387      	cbz	r7, 209f2 <clock_stop+0x9a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   20990:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   20994:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   20998:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2099a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   2099e:	e013      	b.n	209c8 <clock_stop+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   209a0:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   209a2:	4b19      	ldr	r3, [pc, #100]	; (20a08 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   209a4:	f10d 0707 	add.w	r7, sp, #7
   209a8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   209ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   209b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   209b4:	6058      	str	r0, [r3, #4]
   209b6:	e7e1      	b.n	2097c <clock_stop+0x24>
            if (p_clk_src != NULL)
   209b8:	b18f      	cbz	r7, 209de <clock_stop+0x86>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   209ba:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   209be:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   209c2:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   209c4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   209c8:	03da      	lsls	r2, r3, #15
   209ca:	d5ca      	bpl.n	20962 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   209cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   209d0:	2801      	cmp	r0, #1
   209d2:	d1c6      	bne.n	20962 <clock_stop+0xa>
   209d4:	f006 fc25 	bl	27222 <nrfx_busy_wait>
   209d8:	3d01      	subs	r5, #1
   209da:	d1d5      	bne.n	20988 <clock_stop+0x30>
   209dc:	e7c1      	b.n	20962 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   209de:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   209e2:	03d9      	lsls	r1, r3, #15
   209e4:	d5bd      	bpl.n	20962 <clock_stop+0xa>
   209e6:	2001      	movs	r0, #1
   209e8:	f006 fc1b 	bl	27222 <nrfx_busy_wait>
   209ec:	3d01      	subs	r5, #1
   209ee:	d1f6      	bne.n	209de <clock_stop+0x86>
   209f0:	e7b7      	b.n	20962 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   209f2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   209f6:	03db      	lsls	r3, r3, #15
   209f8:	d5b3      	bpl.n	20962 <clock_stop+0xa>
   209fa:	2001      	movs	r0, #1
   209fc:	f006 fc11 	bl	27222 <nrfx_busy_wait>
   20a00:	3d01      	subs	r5, #1
   20a02:	d1f6      	bne.n	209f2 <clock_stop+0x9a>
   20a04:	e7ad      	b.n	20962 <clock_stop+0xa>
   20a06:	bf00      	nop
   20a08:	40005000 	.word	0x40005000

00020a0c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   20a0c:	4b04      	ldr	r3, [pc, #16]	; (20a20 <nrfx_clock_init+0x14>)
   20a0e:	791a      	ldrb	r2, [r3, #4]
   20a10:	b922      	cbnz	r2, 20a1c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   20a12:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   20a14:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   20a16:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   20a18:	4802      	ldr	r0, [pc, #8]	; (20a24 <nrfx_clock_init+0x18>)
   20a1a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   20a1c:	4802      	ldr	r0, [pc, #8]	; (20a28 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   20a1e:	4770      	bx	lr
   20a20:	2000d404 	.word	0x2000d404
   20a24:	0bad0000 	.word	0x0bad0000
   20a28:	0bad000c 	.word	0x0bad000c

00020a2c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   20a2c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   20a2e:	2005      	movs	r0, #5
   20a30:	f7fa fe72 	bl	1b718 <arch_irq_is_enabled>
   20a34:	b910      	cbnz	r0, 20a3c <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   20a36:	2005      	movs	r0, #5
   20a38:	f7fa fe4c 	bl	1b6d4 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   20a3c:	2201      	movs	r2, #1
   20a3e:	4b02      	ldr	r3, [pc, #8]	; (20a48 <nrfx_clock_enable+0x1c>)
   20a40:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   20a44:	bd08      	pop	{r3, pc}
   20a46:	bf00      	nop
   20a48:	40005000 	.word	0x40005000

00020a4c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   20a4c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   20a4e:	b110      	cbz	r0, 20a56 <nrfx_clock_start+0xa>
   20a50:	2801      	cmp	r0, #1
   20a52:	d02e      	beq.n	20ab2 <nrfx_clock_start+0x66>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   20a54:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20a56:	4a1c      	ldr	r2, [pc, #112]	; (20ac8 <nrfx_clock_start+0x7c>)
   20a58:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20a5c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   20a60:	03c9      	lsls	r1, r1, #15
   20a62:	d40e      	bmi.n	20a82 <nrfx_clock_start+0x36>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   20a64:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   20a68:	07db      	lsls	r3, r3, #31
   20a6a:	d513      	bpl.n	20a94 <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   20a6c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   20a70:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   20a74:	3b01      	subs	r3, #1
   20a76:	2b01      	cmp	r3, #1
   20a78:	d809      	bhi.n	20a8e <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
   20a7a:	2302      	movs	r3, #2
   20a7c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   20a80:	e7e8      	b.n	20a54 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20a82:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   20a86:	2b02      	cmp	r3, #2
   20a88:	d005      	beq.n	20a96 <nrfx_clock_start+0x4a>
   20a8a:	2b01      	cmp	r3, #1
   20a8c:	d002      	beq.n	20a94 <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   20a8e:	2000      	movs	r0, #0
   20a90:	f7ff ff62 	bl	20958 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   20a94:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   20a96:	4a0c      	ldr	r2, [pc, #48]	; (20ac8 <nrfx_clock_start+0x7c>)
   20a98:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20a9c:	2300      	movs	r3, #0
   20a9e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   20aa2:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   20aa6:	2302      	movs	r3, #2
   20aa8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20aac:	2301      	movs	r3, #1
   20aae:	6093      	str	r3, [r2, #8]
}
   20ab0:	e7d0      	b.n	20a54 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20ab2:	2200      	movs	r2, #0
   20ab4:	4b04      	ldr	r3, [pc, #16]	; (20ac8 <nrfx_clock_start+0x7c>)
   20ab6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   20aba:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   20abe:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20ac2:	6018      	str	r0, [r3, #0]
}
   20ac4:	e7c6      	b.n	20a54 <nrfx_clock_start+0x8>
   20ac6:	bf00      	nop
   20ac8:	40005000 	.word	0x40005000

00020acc <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   20acc:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20ace:	4b17      	ldr	r3, [pc, #92]	; (20b2c <nrfx_power_clock_irq_handler+0x60>)
   20ad0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   20ad4:	b152      	cbz	r2, 20aec <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20ad6:	2000      	movs	r0, #0
   20ad8:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   20adc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   20ae0:	2201      	movs	r2, #1
   20ae2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   20ae6:	4b12      	ldr	r3, [pc, #72]	; (20b30 <nrfx_power_clock_irq_handler+0x64>)
   20ae8:	681b      	ldr	r3, [r3, #0]
   20aea:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20aec:	4b0f      	ldr	r3, [pc, #60]	; (20b2c <nrfx_power_clock_irq_handler+0x60>)
   20aee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   20af2:	b18a      	cbz	r2, 20b18 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20af4:	2200      	movs	r2, #0
   20af6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   20afa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20afe:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20b02:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   20b06:	f002 0203 	and.w	r2, r2, #3
   20b0a:	2a01      	cmp	r2, #1
   20b0c:	f04f 0102 	mov.w	r1, #2
   20b10:	d103      	bne.n	20b1a <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   20b12:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20b16:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   20b18:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   20b1a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   20b1e:	4b04      	ldr	r3, [pc, #16]	; (20b30 <nrfx_power_clock_irq_handler+0x64>)
   20b20:	2001      	movs	r0, #1
}
   20b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   20b26:	681b      	ldr	r3, [r3, #0]
   20b28:	4718      	bx	r3
   20b2a:	bf00      	nop
   20b2c:	40005000 	.word	0x40005000
   20b30:	2000d404 	.word	0x2000d404

00020b34 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   20b34:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   20b36:	4801      	ldr	r0, [pc, #4]	; (20b3c <nrfx_dppi_channel_alloc+0x8>)
   20b38:	f7ff bed6 	b.w	208e8 <nrfx_flag32_alloc>
   20b3c:	2000c674 	.word	0x2000c674

00020b40 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20b40:	4a06      	ldr	r2, [pc, #24]	; (20b5c <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   20b42:	f000 001f 	and.w	r0, r0, #31
   20b46:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20b4a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
   20b4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20b52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   20b56:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
   20b5a:	4770      	bx	lr
   20b5c:	40842500 	.word	0x40842500

00020b60 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   20b60:	4b03      	ldr	r3, [pc, #12]	; (20b70 <pin_in_use_by_te+0x10>)
   20b62:	3008      	adds	r0, #8
   20b64:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20b68:	f3c0 1040 	ubfx	r0, r0, #5, #1
   20b6c:	4770      	bx	lr
   20b6e:	bf00      	nop
   20b70:	2000c678 	.word	0x2000c678

00020b74 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   20b74:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20b76:	4c0d      	ldr	r4, [pc, #52]	; (20bac <call_handler+0x38>)
   20b78:	f100 0308 	add.w	r3, r0, #8
   20b7c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   20b80:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20b82:	05da      	lsls	r2, r3, #23
{
   20b84:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20b86:	d507      	bpl.n	20b98 <call_handler+0x24>
   20b88:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   20b8c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   20b90:	6852      	ldr	r2, [r2, #4]
   20b92:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   20b96:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   20b98:	68a3      	ldr	r3, [r4, #8]
   20b9a:	b12b      	cbz	r3, 20ba8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   20b9c:	4631      	mov	r1, r6
   20b9e:	4628      	mov	r0, r5
   20ba0:	68e2      	ldr	r2, [r4, #12]
    }
}
   20ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   20ba6:	4718      	bx	r3
}
   20ba8:	bd70      	pop	{r4, r5, r6, pc}
   20baa:	bf00      	nop
   20bac:	2000c678 	.word	0x2000c678

00020bb0 <release_handler>:
{
   20bb0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20bb2:	4a12      	ldr	r2, [pc, #72]	; (20bfc <release_handler+0x4c>)
   20bb4:	3008      	adds	r0, #8
   20bb6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   20bba:	05d9      	lsls	r1, r3, #23
   20bbc:	d51b      	bpl.n	20bf6 <release_handler+0x46>
   20bbe:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   20bc2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   20bc6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   20bca:	2000      	movs	r0, #0
   20bcc:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   20bd0:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   20bd4:	f413 7f80 	tst.w	r3, #256	; 0x100
   20bd8:	d003      	beq.n	20be2 <release_handler+0x32>
   20bda:	f3c3 2343 	ubfx	r3, r3, #9, #4
   20bde:	4299      	cmp	r1, r3
   20be0:	d009      	beq.n	20bf6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   20be2:	3001      	adds	r0, #1
   20be4:	2820      	cmp	r0, #32
   20be6:	d1f3      	bne.n	20bd0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   20be8:	2300      	movs	r3, #0
   20bea:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   20bee:	4804      	ldr	r0, [pc, #16]	; (20c00 <release_handler+0x50>)
}
   20bf0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   20bf2:	f7ff be95 	b.w	20920 <nrfx_flag32_free>
}
   20bf6:	bc10      	pop	{r4}
   20bf8:	4770      	bx	lr
   20bfa:	bf00      	nop
   20bfc:	2000c678 	.word	0x2000c678
   20c00:	2000c6cc 	.word	0x2000c6cc

00020c04 <pin_handler_trigger_uninit>:
{
   20c04:	b538      	push	{r3, r4, r5, lr}
   20c06:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   20c08:	f7ff ffaa 	bl	20b60 <pin_in_use_by_te>
   20c0c:	4c0b      	ldr	r4, [pc, #44]	; (20c3c <pin_handler_trigger_uninit+0x38>)
   20c0e:	f102 0508 	add.w	r5, r2, #8
   20c12:	b160      	cbz	r0, 20c2e <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   20c14:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20c16:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   20c1a:	0b5b      	lsrs	r3, r3, #13
   20c1c:	009b      	lsls	r3, r3, #2
   20c1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20c22:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   20c26:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   20c2a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   20c2e:	4610      	mov	r0, r2
   20c30:	f7ff ffbe 	bl	20bb0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   20c34:	2300      	movs	r3, #0
   20c36:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   20c3a:	bd38      	pop	{r3, r4, r5, pc}
   20c3c:	2000c678 	.word	0x2000c678

00020c40 <nrfx_gpiote_input_configure>:
{
   20c40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20c44:	4604      	mov	r4, r0
   20c46:	461d      	mov	r5, r3
    if (p_input_config)
   20c48:	b309      	cbz	r1, 20c8e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20c4a:	4f4e      	ldr	r7, [pc, #312]	; (20d84 <nrfx_gpiote_input_configure+0x144>)
   20c4c:	f100 0808 	add.w	r8, r0, #8
   20c50:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   20c54:	07b3      	lsls	r3, r6, #30
   20c56:	d506      	bpl.n	20c66 <nrfx_gpiote_input_configure+0x26>
   20c58:	f7ff ff82 	bl	20b60 <pin_in_use_by_te>
   20c5c:	b118      	cbz	r0, 20c66 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   20c5e:	484a      	ldr	r0, [pc, #296]	; (20d88 <nrfx_gpiote_input_configure+0x148>)
}
   20c60:	b002      	add	sp, #8
   20c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20c66:	4849      	ldr	r0, [pc, #292]	; (20d8c <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
   20c68:	f004 031f 	and.w	r3, r4, #31
   20c6c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20c70:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   20c74:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   20c76:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   20c7a:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20c7e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   20c82:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
   20c86:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   20c8a:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
   20c8e:	b19a      	cbz	r2, 20cb8 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20c90:	4e3c      	ldr	r6, [pc, #240]	; (20d84 <nrfx_gpiote_input_configure+0x144>)
   20c92:	f104 0708 	add.w	r7, r4, #8
   20c96:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   20c9a:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
   20c9c:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   20ca0:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
   20ca2:	d00c      	beq.n	20cbe <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
   20ca4:	2800      	cmp	r0, #0
   20ca6:	d1da      	bne.n	20c5e <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   20ca8:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
   20cac:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   20cb0:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
   20cb4:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   20cb8:	bbd5      	cbnz	r5, 20d30 <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
   20cba:	4835      	ldr	r0, [pc, #212]	; (20d90 <nrfx_gpiote_input_configure+0x150>)
   20cbc:	e7d0      	b.n	20c60 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   20cbe:	f021 0120 	bic.w	r1, r1, #32
   20cc2:	04c9      	lsls	r1, r1, #19
   20cc4:	0cc9      	lsrs	r1, r1, #19
   20cc6:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   20cca:	2800      	cmp	r0, #0
   20ccc:	d0ec      	beq.n	20ca8 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   20cce:	2b03      	cmp	r3, #3
   20cd0:	d8c5      	bhi.n	20c5e <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   20cd2:	6852      	ldr	r2, [r2, #4]
   20cd4:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   20cd8:	4662      	mov	r2, ip
   20cda:	0092      	lsls	r2, r2, #2
   20cdc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   20ce0:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   20ce4:	b923      	cbnz	r3, 20cf0 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
   20ce6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   20cea:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
   20cee:	e7db      	b.n	20ca8 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   20cf0:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   20cf4:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   20cf8:	f020 0003 	bic.w	r0, r0, #3
   20cfc:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   20d00:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   20d04:	f041 0120 	orr.w	r1, r1, #32
   20d08:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   20d0c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   20d10:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20d14:	0220      	lsls	r0, r4, #8
   20d16:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   20d1a:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   20d1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   20d22:	ea40 000e 	orr.w	r0, r0, lr
   20d26:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   20d2a:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   20d2e:	e7bb      	b.n	20ca8 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
   20d30:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   20d32:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   20d36:	f7ff ff3b 	bl	20bb0 <release_handler>
    if (!handler)
   20d3a:	2e00      	cmp	r6, #0
   20d3c:	d0bd      	beq.n	20cba <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   20d3e:	4d11      	ldr	r5, [pc, #68]	; (20d84 <nrfx_gpiote_input_configure+0x144>)
   20d40:	e9d5 2300 	ldrd	r2, r3, [r5]
   20d44:	4296      	cmp	r6, r2
   20d46:	d101      	bne.n	20d4c <nrfx_gpiote_input_configure+0x10c>
   20d48:	429f      	cmp	r7, r3
   20d4a:	d018      	beq.n	20d7e <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   20d4c:	4811      	ldr	r0, [pc, #68]	; (20d94 <nrfx_gpiote_input_configure+0x154>)
   20d4e:	f10d 0107 	add.w	r1, sp, #7
   20d52:	f7ff fdc9 	bl	208e8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   20d56:	4b0e      	ldr	r3, [pc, #56]	; (20d90 <nrfx_gpiote_input_configure+0x150>)
   20d58:	4298      	cmp	r0, r3
   20d5a:	d181      	bne.n	20c60 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   20d5c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
   20d60:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20d64:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   20d66:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20d68:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   20d6c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20d70:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   20d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   20d78:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   20d7c:	e79d      	b.n	20cba <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   20d7e:	2200      	movs	r2, #0
   20d80:	e7ee      	b.n	20d60 <nrfx_gpiote_input_configure+0x120>
   20d82:	bf00      	nop
   20d84:	2000c678 	.word	0x2000c678
   20d88:	0bad0004 	.word	0x0bad0004
   20d8c:	40842500 	.word	0x40842500
   20d90:	0bad0000 	.word	0x0bad0000
   20d94:	2000c6cc 	.word	0x2000c6cc

00020d98 <nrfx_gpiote_output_configure>:
{
   20d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20d9a:	4604      	mov	r4, r0
    if (p_config)
   20d9c:	b379      	cbz	r1, 20dfe <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20d9e:	4e3a      	ldr	r6, [pc, #232]	; (20e88 <nrfx_gpiote_output_configure+0xf0>)
   20da0:	f100 0708 	add.w	r7, r0, #8
   20da4:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   20da8:	07ab      	lsls	r3, r5, #30
   20daa:	d404      	bmi.n	20db6 <nrfx_gpiote_output_configure+0x1e>
   20dac:	f7ff fed8 	bl	20b60 <pin_in_use_by_te>
   20db0:	b108      	cbz	r0, 20db6 <nrfx_gpiote_output_configure+0x1e>
{
   20db2:	4836      	ldr	r0, [pc, #216]	; (20e8c <nrfx_gpiote_output_configure+0xf4>)
}
   20db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   20db6:	f015 0f1c 	tst.w	r5, #28
   20dba:	784b      	ldrb	r3, [r1, #1]
   20dbc:	d122      	bne.n	20e04 <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
   20dbe:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20dc2:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 20e90 <nrfx_gpiote_output_configure+0xf8>
   20dc6:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   20dca:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   20dce:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   20dd2:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   20dd4:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   20dd8:	7809      	ldrb	r1, [r1, #0]
   20dda:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
   20dde:	f02c 0c07 	bic.w	ip, ip, #7
   20de2:	ea43 030c 	orr.w	r3, r3, ip
   20de6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   20dea:	4929      	ldr	r1, [pc, #164]	; (20e90 <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20dec:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   20df0:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   20df2:	f045 0503 	orr.w	r5, r5, #3
   20df6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   20dfa:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
   20dfe:	b922      	cbnz	r2, 20e0a <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
   20e00:	4824      	ldr	r0, [pc, #144]	; (20e94 <nrfx_gpiote_output_configure+0xfc>)
   20e02:	e7d7      	b.n	20db4 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   20e04:	2b01      	cmp	r3, #1
   20e06:	d1da      	bne.n	20dbe <nrfx_gpiote_output_configure+0x26>
   20e08:	e7d3      	b.n	20db2 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20e0a:	4e1f      	ldr	r6, [pc, #124]	; (20e88 <nrfx_gpiote_output_configure+0xf0>)
   20e0c:	f104 0708 	add.w	r7, r4, #8
   20e10:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   20e14:	0783      	lsls	r3, r0, #30
   20e16:	d5cc      	bpl.n	20db2 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   20e18:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   20e1c:	2300      	movs	r3, #0
   20e1e:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   20e20:	f020 0020 	bic.w	r0, r0, #32
   20e24:	0089      	lsls	r1, r1, #2
   20e26:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   20e2a:	04c0      	lsls	r0, r0, #19
   20e2c:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   20e30:	0cc0      	lsrs	r0, r0, #19
   20e32:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   20e36:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   20e3a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   20e3e:	7855      	ldrb	r5, [r2, #1]
   20e40:	2d00      	cmp	r5, #0
   20e42:	d0dd      	beq.n	20e00 <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   20e44:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   20e48:	7892      	ldrb	r2, [r2, #2]
   20e4a:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   20e4e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   20e52:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20e56:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   20e5a:	0223      	lsls	r3, r4, #8
   20e5c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   20e60:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20e62:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   20e66:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   20e6a:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20e6c:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   20e6e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   20e72:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20e76:	4313      	orrs	r3, r2
   20e78:	f040 0020 	orr.w	r0, r0, #32
   20e7c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   20e80:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   20e84:	e7bc      	b.n	20e00 <nrfx_gpiote_output_configure+0x68>
   20e86:	bf00      	nop
   20e88:	2000c678 	.word	0x2000c678
   20e8c:	0bad0004 	.word	0x0bad0004
   20e90:	40842500 	.word	0x40842500
   20e94:	0bad0000 	.word	0x0bad0000

00020e98 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   20e98:	4b01      	ldr	r3, [pc, #4]	; (20ea0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   20e9a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   20e9e:	4770      	bx	lr
   20ea0:	2000c678 	.word	0x2000c678

00020ea4 <nrfx_gpiote_channel_get>:
{
   20ea4:	b508      	push	{r3, lr}
   20ea6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   20ea8:	f7ff fe5a 	bl	20b60 <pin_in_use_by_te>
   20eac:	b138      	cbz	r0, 20ebe <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20eae:	4b05      	ldr	r3, [pc, #20]	; (20ec4 <nrfx_gpiote_channel_get+0x20>)
   20eb0:	3208      	adds	r2, #8
   20eb2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   20eb6:	4804      	ldr	r0, [pc, #16]	; (20ec8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20eb8:	0b5b      	lsrs	r3, r3, #13
   20eba:	700b      	strb	r3, [r1, #0]
}
   20ebc:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   20ebe:	4803      	ldr	r0, [pc, #12]	; (20ecc <nrfx_gpiote_channel_get+0x28>)
   20ec0:	e7fc      	b.n	20ebc <nrfx_gpiote_channel_get+0x18>
   20ec2:	bf00      	nop
   20ec4:	2000c678 	.word	0x2000c678
   20ec8:	0bad0000 	.word	0x0bad0000
   20ecc:	0bad0004 	.word	0x0bad0004

00020ed0 <nrfx_gpiote_init>:
{
   20ed0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   20ed2:	4c0f      	ldr	r4, [pc, #60]	; (20f10 <nrfx_gpiote_init+0x40>)
   20ed4:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   20ed8:	b9bd      	cbnz	r5, 20f0a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   20eda:	2240      	movs	r2, #64	; 0x40
   20edc:	4629      	mov	r1, r5
   20ede:	f104 0010 	add.w	r0, r4, #16
   20ee2:	f007 fc67 	bl	287b4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   20ee6:	2031      	movs	r0, #49	; 0x31
   20ee8:	f7fa fbf4 	bl	1b6d4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20eec:	4b09      	ldr	r3, [pc, #36]	; (20f14 <nrfx_gpiote_init+0x44>)
    return err_code;
   20eee:	480a      	ldr	r0, [pc, #40]	; (20f18 <nrfx_gpiote_init+0x48>)
   20ef0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   20ef4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   20ef8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   20efc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   20f00:	2301      	movs	r3, #1
   20f02:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   20f06:	6563      	str	r3, [r4, #84]	; 0x54
}
   20f08:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   20f0a:	4804      	ldr	r0, [pc, #16]	; (20f1c <nrfx_gpiote_init+0x4c>)
   20f0c:	e7fc      	b.n	20f08 <nrfx_gpiote_init+0x38>
   20f0e:	bf00      	nop
   20f10:	2000c678 	.word	0x2000c678
   20f14:	40031000 	.word	0x40031000
   20f18:	0bad0000 	.word	0x0bad0000
   20f1c:	0bad0005 	.word	0x0bad0005

00020f20 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   20f20:	4b03      	ldr	r3, [pc, #12]	; (20f30 <nrfx_gpiote_is_init+0x10>)
   20f22:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   20f26:	3800      	subs	r0, #0
   20f28:	bf18      	it	ne
   20f2a:	2001      	movne	r0, #1
   20f2c:	4770      	bx	lr
   20f2e:	bf00      	nop
   20f30:	2000c678 	.word	0x2000c678

00020f34 <nrfx_gpiote_channel_free>:
{
   20f34:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   20f36:	4801      	ldr	r0, [pc, #4]	; (20f3c <nrfx_gpiote_channel_free+0x8>)
   20f38:	f7ff bcf2 	b.w	20920 <nrfx_flag32_free>
   20f3c:	2000c6c8 	.word	0x2000c6c8

00020f40 <nrfx_gpiote_channel_alloc>:
{
   20f40:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   20f42:	4801      	ldr	r0, [pc, #4]	; (20f48 <nrfx_gpiote_channel_alloc+0x8>)
   20f44:	f7ff bcd0 	b.w	208e8 <nrfx_flag32_alloc>
   20f48:	2000c6c8 	.word	0x2000c6c8

00020f4c <nrfx_gpiote_trigger_enable>:
{
   20f4c:	4602      	mov	r2, r0
   20f4e:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20f50:	f7ff fe06 	bl	20b60 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20f54:	4b1b      	ldr	r3, [pc, #108]	; (20fc4 <nrfx_gpiote_trigger_enable+0x78>)
   20f56:	f102 0408 	add.w	r4, r2, #8
   20f5a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20f5e:	b1c8      	cbz	r0, 20f94 <nrfx_gpiote_trigger_enable+0x48>
   20f60:	f013 0402 	ands.w	r4, r3, #2
   20f64:	d116      	bne.n	20f94 <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
   20f66:	4818      	ldr	r0, [pc, #96]	; (20fc8 <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20f68:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   20f6a:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20f6c:	5084      	str	r4, [r0, r2]
   20f6e:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   20f70:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   20f74:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   20f78:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   20f7c:	f040 0001 	orr.w	r0, r0, #1
   20f80:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   20f84:	b129      	cbz	r1, 20f92 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   20f86:	2201      	movs	r2, #1
   20f88:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   20f8c:	4a0f      	ldr	r2, [pc, #60]	; (20fcc <nrfx_gpiote_trigger_enable+0x80>)
   20f8e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   20f92:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20f94:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   20f98:	2b04      	cmp	r3, #4
   20f9a:	d00e      	beq.n	20fba <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   20f9c:	2b05      	cmp	r3, #5
   20f9e:	d00e      	beq.n	20fbe <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
   20fa0:	4b0b      	ldr	r3, [pc, #44]	; (20fd0 <nrfx_gpiote_trigger_enable+0x84>)
   20fa2:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
   20fa4:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   20fa8:	40d9      	lsrs	r1, r3
   20faa:	f001 0101 	and.w	r1, r1, #1
   20fae:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   20fb0:	4610      	mov	r0, r2
}
   20fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   20fb6:	f7ff bdc3 	b.w	20b40 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   20fba:	2103      	movs	r1, #3
   20fbc:	e7f8      	b.n	20fb0 <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   20fbe:	2102      	movs	r1, #2
   20fc0:	e7f6      	b.n	20fb0 <nrfx_gpiote_trigger_enable+0x64>
   20fc2:	bf00      	nop
   20fc4:	2000c678 	.word	0x2000c678
   20fc8:	40031100 	.word	0x40031100
   20fcc:	40031000 	.word	0x40031000
   20fd0:	40842500 	.word	0x40842500

00020fd4 <nrfx_gpiote_trigger_disable>:
{
   20fd4:	b508      	push	{r3, lr}
   20fd6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20fd8:	f7ff fdc2 	bl	20b60 <pin_in_use_by_te>
   20fdc:	b1c0      	cbz	r0, 21010 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20fde:	4b0f      	ldr	r3, [pc, #60]	; (2101c <nrfx_gpiote_trigger_disable+0x48>)
   20fe0:	f102 0108 	add.w	r1, r2, #8
   20fe4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20fe8:	0799      	lsls	r1, r3, #30
   20fea:	d411      	bmi.n	21010 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   20fec:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20fee:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   20ff0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   20ff2:	490b      	ldr	r1, [pc, #44]	; (21020 <nrfx_gpiote_trigger_disable+0x4c>)
   20ff4:	009b      	lsls	r3, r3, #2
   20ff6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20ffa:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   20ffe:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   21002:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21006:	f022 0203 	bic.w	r2, r2, #3
   2100a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   2100e:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21010:	2100      	movs	r1, #0
}
   21012:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21016:	4610      	mov	r0, r2
   21018:	f7ff bd92 	b.w	20b40 <nrf_gpio_cfg_sense_set>
   2101c:	2000c678 	.word	0x2000c678
   21020:	40031000 	.word	0x40031000

00021024 <nrfx_gpiote_pin_uninit>:
{
   21024:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   21026:	4b0c      	ldr	r3, [pc, #48]	; (21058 <nrfx_gpiote_pin_uninit+0x34>)
   21028:	f100 0208 	add.w	r2, r0, #8
   2102c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   21030:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   21032:	07db      	lsls	r3, r3, #31
   21034:	d50d      	bpl.n	21052 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
   21036:	f7ff ffcd 	bl	20fd4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2103a:	4620      	mov	r0, r4
   2103c:	f7ff fde2 	bl	20c04 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   21040:	2202      	movs	r2, #2
   21042:	4b06      	ldr	r3, [pc, #24]	; (2105c <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
   21044:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   21048:	3480      	adds	r4, #128	; 0x80
   2104a:	4805      	ldr	r0, [pc, #20]	; (21060 <nrfx_gpiote_pin_uninit+0x3c>)
   2104c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   21050:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21052:	4804      	ldr	r0, [pc, #16]	; (21064 <nrfx_gpiote_pin_uninit+0x40>)
   21054:	e7fc      	b.n	21050 <nrfx_gpiote_pin_uninit+0x2c>
   21056:	bf00      	nop
   21058:	2000c678 	.word	0x2000c678
   2105c:	40842500 	.word	0x40842500
   21060:	0bad0000 	.word	0x0bad0000
   21064:	0bad0004 	.word	0x0bad0004

00021068 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   21068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   2106c:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   2106e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21070:	462c      	mov	r4, r5
{
   21072:	4b4d      	ldr	r3, [pc, #308]	; (211a8 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   21074:	484d      	ldr	r0, [pc, #308]	; (211ac <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21076:	494e      	ldr	r1, [pc, #312]	; (211b0 <nrfx_gpiote_irq_handler+0x148>)
{
   21078:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2107a:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   2107c:	b136      	cbz	r6, 2108c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   2107e:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   21082:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21084:	bf1e      	ittt	ne
   21086:	601c      	strne	r4, [r3, #0]
   21088:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   2108a:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2108c:	3304      	adds	r3, #4
   2108e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   21090:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21094:	d1f1      	bne.n	2107a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21096:	4f45      	ldr	r7, [pc, #276]	; (211ac <nrfx_gpiote_irq_handler+0x144>)
   21098:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   2109c:	b193      	cbz	r3, 210c4 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
   2109e:	4e45      	ldr	r6, [pc, #276]	; (211b4 <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   210a0:	f10d 090c 	add.w	r9, sp, #12
   210a4:	6a33      	ldr	r3, [r6, #32]
   210a6:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   210a8:	6233      	str	r3, [r6, #32]
   210aa:	f04f 0a01 	mov.w	sl, #1
            while (latch[i])
   210ae:	9803      	ldr	r0, [sp, #12]
   210b0:	b970      	cbnz	r0, 210d0 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   210b2:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
   210b6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   210ba:	6a33      	ldr	r3, [r6, #32]
   210bc:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   210be:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
   210c0:	2b00      	cmp	r3, #0
   210c2:	d1f2      	bne.n	210aa <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   210c4:	2401      	movs	r4, #1
    while (mask)
   210c6:	2d00      	cmp	r5, #0
   210c8:	d156      	bne.n	21178 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   210ca:	b005      	add	sp, #20
   210cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   210d0:	fa90 fba0 	rbit	fp, r0
   210d4:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   210d8:	4a37      	ldr	r2, [pc, #220]	; (211b8 <nrfx_gpiote_irq_handler+0x150>)
   210da:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   210de:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
   210e2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   210e6:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   210ea:	f819 300c 	ldrb.w	r3, [r9, ip]
   210ee:	fa0a f404 	lsl.w	r4, sl, r4
   210f2:	ea23 0304 	bic.w	r3, r3, r4
   210f6:	f809 300c 	strb.w	r3, [r9, ip]
   210fa:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   210fe:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   21102:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
   21106:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21108:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   2110a:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
   2110e:	d518      	bpl.n	21142 <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
   21110:	4611      	mov	r1, r2
   21112:	4658      	mov	r0, fp
   21114:	9301      	str	r3, [sp, #4]
   21116:	f7ff fd2d 	bl	20b74 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2111a:	9b01      	ldr	r3, [sp, #4]
   2111c:	b2e4      	uxtb	r4, r4
   2111e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
   21122:	f3c3 4301 	ubfx	r3, r3, #16, #2
   21126:	429c      	cmp	r4, r3
   21128:	d107      	bne.n	2113a <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2112a:	2100      	movs	r1, #0
   2112c:	4658      	mov	r0, fp
   2112e:	f7ff fd07 	bl	20b40 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   21132:	4621      	mov	r1, r4
   21134:	4658      	mov	r0, fp
   21136:	f7ff fd03 	bl	20b40 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   2113a:	fa0a f00b 	lsl.w	r0, sl, fp
   2113e:	6230      	str	r0, [r6, #32]
}
   21140:	e7b5      	b.n	210ae <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   21142:	2c02      	cmp	r4, #2
   21144:	d10c      	bne.n	21160 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   21146:	2103      	movs	r1, #3
   21148:	4658      	mov	r0, fp
   2114a:	f7ff fcf9 	bl	20b40 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2114e:	f008 0305 	and.w	r3, r8, #5
   21152:	2b01      	cmp	r3, #1
   21154:	d1f1      	bne.n	2113a <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
   21156:	4641      	mov	r1, r8
   21158:	4658      	mov	r0, fp
   2115a:	f7ff fd0b 	bl	20b74 <call_handler>
   2115e:	e7ec      	b.n	2113a <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   21160:	2102      	movs	r1, #2
   21162:	4658      	mov	r0, fp
   21164:	9201      	str	r2, [sp, #4]
   21166:	f7ff fceb 	bl	20b40 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2116a:	9a01      	ldr	r2, [sp, #4]
   2116c:	2a03      	cmp	r2, #3
   2116e:	d0f2      	beq.n	21156 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   21170:	2c03      	cmp	r4, #3
   21172:	d1e2      	bne.n	2113a <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   21174:	428a      	cmp	r2, r1
   21176:	e7ed      	b.n	21154 <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
   21178:	fa95 f3a5 	rbit	r3, r5
   2117c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   21180:	fa04 f203 	lsl.w	r2, r4, r3
   21184:	009b      	lsls	r3, r3, #2
   21186:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2118a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2118e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   21192:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   21196:	f3c0 2004 	ubfx	r0, r0, #8, #5
   2119a:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   2119e:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   211a2:	f7ff fce7 	bl	20b74 <call_handler>
   211a6:	e78e      	b.n	210c6 <nrfx_gpiote_irq_handler+0x5e>
   211a8:	40031100 	.word	0x40031100
   211ac:	40031000 	.word	0x40031000
   211b0:	40031120 	.word	0x40031120
   211b4:	40842500 	.word	0x40842500
   211b8:	2000c678 	.word	0x2000c678

000211bc <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   211bc:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   211be:	4c08      	ldr	r4, [pc, #32]	; (211e0 <nrfx_ipc_init+0x24>)
{
   211c0:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   211c2:	7923      	ldrb	r3, [r4, #4]
{
   211c4:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   211c6:	b943      	cbnz	r3, 211da <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   211c8:	202a      	movs	r0, #42	; 0x2a
   211ca:	f7fa fa83 	bl	1b6d4 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   211ce:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   211d0:	4804      	ldr	r0, [pc, #16]	; (211e4 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   211d2:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   211d4:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   211d6:	60a5      	str	r5, [r4, #8]
}
   211d8:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   211da:	4803      	ldr	r0, [pc, #12]	; (211e8 <nrfx_ipc_init+0x2c>)
   211dc:	e7fc      	b.n	211d8 <nrfx_ipc_init+0x1c>
   211de:	bf00      	nop
   211e0:	2000d40c 	.word	0x2000d40c
   211e4:	0bad0000 	.word	0x0bad0000
   211e8:	0bad000c 	.word	0x0bad000c

000211ec <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   211ec:	2300      	movs	r3, #0
{
   211ee:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   211f0:	4a0d      	ldr	r2, [pc, #52]	; (21228 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   211f2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   211f6:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   211fa:	3301      	adds	r3, #1
   211fc:	2b08      	cmp	r3, #8
   211fe:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   21202:	d1f6      	bne.n	211f2 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   21204:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   21206:	4a08      	ldr	r2, [pc, #32]	; (21228 <nrfx_ipc_config_load+0x3c>)
   21208:	f100 011c 	add.w	r1, r0, #28
   2120c:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   21210:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   21214:	3301      	adds	r3, #1
   21216:	2b08      	cmp	r3, #8
   21218:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   2121c:	d1f6      	bne.n	2120c <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   2121e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   21220:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   21224:	bd30      	pop	{r4, r5, pc}
   21226:	bf00      	nop
   21228:	4002a000 	.word	0x4002a000

0002122c <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   2122c:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   2122e:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   21232:	4a13      	ldr	r2, [pc, #76]	; (21280 <nrfx_ipc_uninit+0x54>)
   21234:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   21238:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   2123c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   21240:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   21244:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   21248:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   2124c:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   21250:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   21254:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   21258:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   2125c:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   21260:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   21264:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   21268:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   2126c:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   21270:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   21274:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   21278:	4a02      	ldr	r2, [pc, #8]	; (21284 <nrfx_ipc_uninit+0x58>)
   2127a:	7113      	strb	r3, [r2, #4]
}
   2127c:	4770      	bx	lr
   2127e:	bf00      	nop
   21280:	4002a000 	.word	0x4002a000
   21284:	2000d40c 	.word	0x2000d40c

00021288 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   21288:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   2128a:	4a02      	ldr	r2, [pc, #8]	; (21294 <nrfx_ipc_receive_event_enable+0xc>)
   2128c:	4083      	lsls	r3, r0
   2128e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   21292:	4770      	bx	lr
   21294:	4002a000 	.word	0x4002a000

00021298 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   21298:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   2129a:	4a02      	ldr	r2, [pc, #8]	; (212a4 <nrfx_ipc_receive_event_disable+0xc>)
   2129c:	4083      	lsls	r3, r0
   2129e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   212a2:	4770      	bx	lr
   212a4:	4002a000 	.word	0x4002a000

000212a8 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   212a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   212aa:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   212ac:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   212ae:	4b0b      	ldr	r3, [pc, #44]	; (212dc <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   212b0:	4d0b      	ldr	r5, [pc, #44]	; (212e0 <nrfx_ipc_irq_handler+0x38>)
   212b2:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   212b6:	b904      	cbnz	r4, 212ba <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   212b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   212ba:	fa94 f0a4 	rbit	r0, r4
   212be:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   212c2:	fa06 f300 	lsl.w	r3, r6, r0
   212c6:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   212ca:	4b06      	ldr	r3, [pc, #24]	; (212e4 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   212cc:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   212ce:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   212d0:	682b      	ldr	r3, [r5, #0]
   212d2:	2b00      	cmp	r3, #0
   212d4:	d0ef      	beq.n	212b6 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   212d6:	68a9      	ldr	r1, [r5, #8]
   212d8:	4798      	blx	r3
   212da:	e7ec      	b.n	212b6 <nrfx_ipc_irq_handler+0xe>
   212dc:	4002a000 	.word	0x4002a000
   212e0:	2000d40c 	.word	0x2000d40c
   212e4:	4002a100 	.word	0x4002a100

000212e8 <spim_pin_uninit>:
    return err_code;
}

static void spim_pin_uninit(uint32_t pin)
{
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   212e8:	1c43      	adds	r3, r0, #1
   212ea:	d006      	beq.n	212fa <spim_pin_uninit+0x12>
    reg->PIN_CNF[pin_number] = cnf;
   212ec:	2202      	movs	r2, #2
   212ee:	4b03      	ldr	r3, [pc, #12]	; (212fc <spim_pin_uninit+0x14>)
    *p_pin = pin_number & 0x1F;
   212f0:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
   212f4:	3080      	adds	r0, #128	; 0x80
   212f6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    {
        return;
    }

    nrf_gpio_cfg_default(pin);
}
   212fa:	4770      	bx	lr
   212fc:	40842500 	.word	0x40842500

00021300 <nrf_gpio_pin_write>:
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21300:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
   21302:	f000 001f 	and.w	r0, r0, #31
   21306:	4a03      	ldr	r2, [pc, #12]	; (21314 <nrf_gpio_pin_write+0x14>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21308:	4083      	lsls	r3, r0
    if (value == 0)
   2130a:	b909      	cbnz	r1, 21310 <nrf_gpio_pin_write+0x10>
    p_reg->OUTCLR = clr_mask;
   2130c:	60d3      	str	r3, [r2, #12]
}
   2130e:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
   21310:	6093      	str	r3, [r2, #8]
}
   21312:	4770      	bx	lr
   21314:	40842500 	.word	0x40842500

00021318 <nrfx_spim_init>:
{
   21318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2131c:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2131e:	4d4e      	ldr	r5, [pc, #312]	; (21458 <nrfx_spim_init+0x140>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21320:	7901      	ldrb	r1, [r0, #4]
{
   21322:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   21324:	014f      	lsls	r7, r1, #5
   21326:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   2132a:	7f08      	ldrb	r0, [r1, #28]
   2132c:	2800      	cmp	r0, #0
   2132e:	f040 8090 	bne.w	21452 <nrfx_spim_init+0x13a>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   21332:	f8d6 8000 	ldr.w	r8, [r6]
    p_cb->handler = handler;
   21336:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
   21338:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   2133a:	7be0      	ldrb	r0, [r4, #15]
   2133c:	7f8a      	ldrb	r2, [r1, #30]
   2133e:	f360 0200 	bfi	r2, r0, #0, #1
   21342:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   21344:	7920      	ldrb	r0, [r4, #4]
   21346:	b2d2      	uxtb	r2, r2
   21348:	f360 0241 	bfi	r2, r0, #1, #1
   2134c:	778a      	strb	r2, [r1, #30]
    p_cb->ss_pin = p_config->ss_pin;
   2134e:	78e3      	ldrb	r3, [r4, #3]
   21350:	77cb      	strb	r3, [r1, #31]
    if (!p_config->skip_gpio_cfg)
   21352:	7be3      	ldrb	r3, [r4, #15]
   21354:	f8d6 a000 	ldr.w	sl, [r6]
   21358:	2b00      	cmp	r3, #0
   2135a:	d138      	bne.n	213ce <nrfx_spim_init+0xb6>
        nrf_gpio_pin_write(p_config->sck_pin,
   2135c:	7b21      	ldrb	r1, [r4, #12]
   2135e:	7820      	ldrb	r0, [r4, #0]
   21360:	2901      	cmp	r1, #1
   21362:	bf94      	ite	ls
   21364:	2100      	movls	r1, #0
   21366:	2101      	movhi	r1, #1
   21368:	f7ff ffca 	bl	21300 <nrf_gpio_pin_write>
    reg->PIN_CNF[pin_number] = cnf;
   2136c:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   2136e:	7823      	ldrb	r3, [r4, #0]
    reg->PIN_CNF[pin_number] = cnf;
   21370:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 2145c <nrfx_spim_init+0x144>
    *p_pin = pin_number & 0x1F;
   21374:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   21378:	3380      	adds	r3, #128	; 0x80
   2137a:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   2137e:	7863      	ldrb	r3, [r4, #1]
   21380:	2bff      	cmp	r3, #255	; 0xff
   21382:	d00b      	beq.n	2139c <nrfx_spim_init+0x84>
    *p_pin = pin_number & 0x1F;
   21384:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21388:	409a      	lsls	r2, r3
    p_reg->OUTCLR = clr_mask;
   2138a:	f8c9 200c 	str.w	r2, [r9, #12]
    reg->PIN_CNF[pin_number] = cnf;
   2138e:	2203      	movs	r2, #3
    *p_pin = pin_number & 0x1F;
   21390:	7863      	ldrb	r3, [r4, #1]
   21392:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   21396:	3380      	adds	r3, #128	; 0x80
   21398:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   2139c:	78a3      	ldrb	r3, [r4, #2]
   2139e:	2bff      	cmp	r3, #255	; 0xff
   213a0:	d006      	beq.n	213b0 <nrfx_spim_init+0x98>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   213a2:	7ba2      	ldrb	r2, [r4, #14]
    *p_pin = pin_number & 0x1F;
   213a4:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   213a8:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
   213aa:	3380      	adds	r3, #128	; 0x80
   213ac:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   213b0:	78e0      	ldrb	r0, [r4, #3]
   213b2:	28ff      	cmp	r0, #255	; 0xff
   213b4:	d00b      	beq.n	213ce <nrfx_spim_init+0xb6>
                               p_config->ss_active_high ? 0 : 1);
   213b6:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
   213b8:	f081 0101 	eor.w	r1, r1, #1
   213bc:	f7ff ffa0 	bl	21300 <nrf_gpio_pin_write>
   213c0:	2203      	movs	r2, #3
    *p_pin = pin_number & 0x1F;
   213c2:	78e3      	ldrb	r3, [r4, #3]
   213c4:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   213c8:	3380      	adds	r3, #128	; 0x80
   213ca:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   213ce:	7c23      	ldrb	r3, [r4, #16]
   213d0:	b993      	cbnz	r3, 213f8 <nrfx_spim_init+0xe0>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   213d2:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   213d4:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   213d6:	2bff      	cmp	r3, #255	; 0xff
   213d8:	bf18      	it	ne
   213da:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   213dc:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   213de:	bf08      	it	eq
   213e0:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   213e4:	2bff      	cmp	r3, #255	; 0xff
   213e6:	bf08      	it	eq
   213e8:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   213ec:	f8ca 1508 	str.w	r1, [sl, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   213f0:	f8ca 250c 	str.w	r2, [sl, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   213f4:	f8ca 3510 	str.w	r3, [sl, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   213f8:	68a3      	ldr	r3, [r4, #8]
   213fa:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   213fe:	7b63      	ldrb	r3, [r4, #13]
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   21400:	7b22      	ldrb	r2, [r4, #12]
   21402:	3b00      	subs	r3, #0
   21404:	bf18      	it	ne
   21406:	2301      	movne	r3, #1
    switch (spi_mode)
   21408:	2a02      	cmp	r2, #2
   2140a:	d01c      	beq.n	21446 <nrfx_spim_init+0x12e>
   2140c:	2a03      	cmp	r2, #3
   2140e:	d01d      	beq.n	2144c <nrfx_spim_init+0x134>
   21410:	2a01      	cmp	r2, #1
   21412:	d101      	bne.n	21418 <nrfx_spim_init+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   21414:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   21418:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   2141c:	79a3      	ldrb	r3, [r4, #6]
   2141e:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   21422:	2307      	movs	r3, #7
   21424:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    if (p_cb->handler)
   21428:	59eb      	ldr	r3, [r5, r7]
   2142a:	b123      	cbz	r3, 21436 <nrfx_spim_init+0x11e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2142c:	6830      	ldr	r0, [r6, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2142e:	f340 3007 	sbfx	r0, r0, #12, #8
   21432:	f7fa f94f 	bl	1b6d4 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   21436:	2300      	movs	r3, #0
   21438:	443d      	add	r5, r7
   2143a:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2143c:	2301      	movs	r3, #1
    return err_code;
   2143e:	4808      	ldr	r0, [pc, #32]	; (21460 <nrfx_spim_init+0x148>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   21440:	772b      	strb	r3, [r5, #28]
}
   21442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   21446:	f043 0304 	orr.w	r3, r3, #4
        break;
   2144a:	e7e5      	b.n	21418 <nrfx_spim_init+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   2144c:	f043 0306 	orr.w	r3, r3, #6
        break;
   21450:	e7e2      	b.n	21418 <nrfx_spim_init+0x100>
        return err_code;
   21452:	4804      	ldr	r0, [pc, #16]	; (21464 <nrfx_spim_init+0x14c>)
   21454:	e7f5      	b.n	21442 <nrfx_spim_init+0x12a>
   21456:	bf00      	nop
   21458:	2000d418 	.word	0x2000d418
   2145c:	40842500 	.word	0x40842500
   21460:	0bad0000 	.word	0x0bad0000
   21464:	0bad0005 	.word	0x0bad0005

00021468 <nrfx_spim_uninit>:

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   21468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2146a:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   2146c:	4d1f      	ldr	r5, [pc, #124]	; (214ec <nrfx_spim_uninit+0x84>)
   2146e:	015e      	lsls	r6, r3, #5
   21470:	eb05 1743 	add.w	r7, r5, r3, lsl #5
   21474:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   21476:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   21478:	b1b3      	cbz	r3, 214a8 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   2147a:	f344 3007 	sbfx	r0, r4, #12, #8
   2147e:	f7fa f937 	bl	1b6f0 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   21482:	4b1b      	ldr	r3, [pc, #108]	; (214f0 <nrfx_spim_uninit+0x88>)
   21484:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   21488:	7f7b      	ldrb	r3, [r7, #29]
   2148a:	b16b      	cbz	r3, 214a8 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2148c:	2301      	movs	r3, #1
   2148e:	2764      	movs	r7, #100	; 0x64
   21490:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21492:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   21496:	b923      	cbnz	r3, 214a2 <nrfx_spim_uninit+0x3a>
   21498:	2001      	movs	r0, #1
   2149a:	f005 fec2 	bl	27222 <nrfx_busy_wait>
   2149e:	3f01      	subs	r7, #1
   214a0:	d1f7      	bne.n	21492 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
   214a2:	2200      	movs	r2, #0
   214a4:	19ab      	adds	r3, r5, r6
   214a6:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   214a8:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   214aa:	19a9      	adds	r1, r5, r6
   214ac:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   214b0:	7f8b      	ldrb	r3, [r1, #30]
   214b2:	07db      	lsls	r3, r3, #31
   214b4:	d415      	bmi.n	214e2 <nrfx_spim_uninit+0x7a>
    return p_reg->PSEL.SCK;
   214b6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   214ba:	f7ff ff15 	bl	212e8 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   214be:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   214c2:	f7ff ff11 	bl	212e8 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   214c6:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   214ca:	f7ff ff0d 	bl	212e8 <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   214ce:	7fcb      	ldrb	r3, [r1, #31]
   214d0:	2bff      	cmp	r3, #255	; 0xff
   214d2:	d006      	beq.n	214e2 <nrfx_spim_uninit+0x7a>
   214d4:	2102      	movs	r1, #2
   214d6:	4a07      	ldr	r2, [pc, #28]	; (214f4 <nrfx_spim_uninit+0x8c>)
    *p_pin = pin_number & 0x1F;
   214d8:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   214dc:	3380      	adds	r3, #128	; 0x80
   214de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   214e2:	2300      	movs	r3, #0
   214e4:	4435      	add	r5, r6
   214e6:	772b      	strb	r3, [r5, #28]
}
   214e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   214ea:	bf00      	nop
   214ec:	2000d418 	.word	0x2000d418
   214f0:	00080152 	.word	0x00080152
   214f4:	40842500 	.word	0x40842500

000214f8 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   214f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   214fc:	4f38      	ldr	r7, [pc, #224]	; (215e0 <nrfx_spim_xfer+0xe8>)
   214fe:	7903      	ldrb	r3, [r0, #4]
{
   21500:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21502:	eb07 1843 	add.w	r8, r7, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   21506:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   2150a:	4681      	mov	r9, r0
   2150c:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
   2150e:	015e      	lsls	r6, r3, #5
   21510:	2a00      	cmp	r2, #0
   21512:	d163      	bne.n	215dc <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   21514:	59ba      	ldr	r2, [r7, r6]
   21516:	b12a      	cbz	r2, 21524 <nrfx_spim_xfer+0x2c>
   21518:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   2151c:	bf04      	itt	eq
   2151e:	2201      	moveq	r2, #1
   21520:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   21524:	eb07 0c06 	add.w	ip, r7, r6
   21528:	f10c 0c0c 	add.w	ip, ip, #12
   2152c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   21530:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   21534:	2101      	movs	r1, #1
   21536:	4640      	mov	r0, r8
   21538:	f005 fe77 	bl	2722a <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   2153c:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   2153e:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   21542:	b121      	cbz	r1, 2154e <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   21544:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   21548:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   2154c:	d106      	bne.n	2155c <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2154e:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   21550:	b152      	cbz	r2, 21568 <nrfx_spim_xfer+0x70>
   21552:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   21556:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   2155a:	d005      	beq.n	21568 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
   2155c:	2300      	movs	r3, #0
   2155e:	443e      	add	r6, r7
        return err_code;
   21560:	4820      	ldr	r0, [pc, #128]	; (215e4 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
   21562:	7773      	strb	r3, [r6, #29]
}
   21564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   21568:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2156a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2156e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   21572:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   21576:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2157a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2157e:	2200      	movs	r2, #0
   21580:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   21584:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   21588:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   2158c:	bf18      	it	ne
   2158e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   21590:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   21594:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   21598:	bf18      	it	ne
   2159a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   2159c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   215a0:	072a      	lsls	r2, r5, #28
   215a2:	d507      	bpl.n	215b4 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
   215a4:	59ba      	ldr	r2, [r7, r6]
   215a6:	b972      	cbnz	r2, 215c6 <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
   215a8:	2100      	movs	r1, #0
   215aa:	4640      	mov	r0, r8
   215ac:	f005 fe3d 	bl	2722a <set_ss_pin_state>
    return err_code;
   215b0:	480d      	ldr	r0, [pc, #52]	; (215e8 <nrfx_spim_xfer+0xf0>)
   215b2:	e7d7      	b.n	21564 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   215b4:	2201      	movs	r2, #1
   215b6:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   215b8:	59ba      	ldr	r2, [r7, r6]
   215ba:	b922      	cbnz	r2, 215c6 <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   215bc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   215c0:	2a00      	cmp	r2, #0
   215c2:	d0fb      	beq.n	215bc <nrfx_spim_xfer+0xc4>
   215c4:	e7f0      	b.n	215a8 <nrfx_spim_xfer+0xb0>
    if (!enable)
   215c6:	f015 0f04 	tst.w	r5, #4
   215ca:	f04f 0240 	mov.w	r2, #64	; 0x40
   215ce:	d002      	beq.n	215d6 <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
   215d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   215d4:	e7ec      	b.n	215b0 <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
   215d6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   215da:	e7e9      	b.n	215b0 <nrfx_spim_xfer+0xb8>
        return err_code;
   215dc:	4803      	ldr	r0, [pc, #12]	; (215ec <nrfx_spim_xfer+0xf4>)
   215de:	e7c1      	b.n	21564 <nrfx_spim_xfer+0x6c>
   215e0:	2000d418 	.word	0x2000d418
   215e4:	0bad000a 	.word	0x0bad000a
   215e8:	0bad0000 	.word	0x0bad0000
   215ec:	0bad000b 	.word	0x0bad000b

000215f0 <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   215f0:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   215f2:	4b0c      	ldr	r3, [pc, #48]	; (21624 <nrfx_spim_3_irq_handler+0x34>)
   215f4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   215f8:	b192      	cbz	r2, 21620 <nrfx_spim_3_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   215fa:	2500      	movs	r5, #0
    set_ss_pin_state(p_cb, false);
   215fc:	4c0a      	ldr	r4, [pc, #40]	; (21628 <nrfx_spim_3_irq_handler+0x38>)
   215fe:	4629      	mov	r1, r5
   21600:	4620      	mov	r0, r4
   21602:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   21606:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   2160a:	f005 fe0e 	bl	2722a <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2160e:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   21612:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   21614:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   21616:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   2161a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2161e:	4718      	bx	r3
}
   21620:	bd70      	pop	{r4, r5, r6, pc}
   21622:	bf00      	nop
   21624:	4000b000 	.word	0x4000b000
   21628:	2000d418 	.word	0x2000d418

0002162c <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   2162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2162e:	f04f 0e34 	mov.w	lr, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   21632:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   21634:	4d22      	ldr	r5, [pc, #136]	; (216c0 <nrfx_twim_init+0x94>)
   21636:	fb0e fe06 	mul.w	lr, lr, r6
   2163a:	eb05 040e 	add.w	r4, r5, lr
   2163e:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   21642:	2f00      	cmp	r7, #0
   21644:	d139      	bne.n	216ba <nrfx_twim_init+0x8e>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   21646:	f8d0 c000 	ldr.w	ip, [r0]
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   2164a:	60a7      	str	r7, [r4, #8]
    p_cb->handler         = event_handler;
   2164c:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->p_context       = p_context;
   21650:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
   21652:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   21656:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   2165a:	7b4b      	ldrb	r3, [r1, #13]
   2165c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   21660:	7b8b      	ldrb	r3, [r1, #14]
   21662:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   21666:	b1c3      	cbz	r3, 2169a <nrfx_twim_init+0x6e>
   21668:	7bcb      	ldrb	r3, [r1, #15]
   2166a:	b92b      	cbnz	r3, 21678 <nrfx_twim_init+0x4c>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   2166c:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   21670:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   21674:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   21678:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   2167a:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524

    if (p_cb->handler)
   2167e:	b122      	cbz	r2, 2168a <nrfx_twim_init+0x5e>
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   21680:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   21682:	f340 3007 	sbfx	r0, r0, #12, #8
   21686:	f7fa f825 	bl	1b6d4 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2168a:	2334      	movs	r3, #52	; 0x34
   2168c:	fb03 5506 	mla	r5, r3, r6, r5
   21690:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   21692:	480c      	ldr	r0, [pc, #48]	; (216c4 <nrfx_twim_init+0x98>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   21694:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   21698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2169a:	f240 670c 	movw	r7, #1548	; 0x60c
    *p_pin = pin_number & 0x1F;
   2169e:	680b      	ldr	r3, [r1, #0]
    reg->PIN_CNF[pin_number] = cnf;
   216a0:	4c09      	ldr	r4, [pc, #36]	; (216c8 <nrfx_twim_init+0x9c>)
    *p_pin = pin_number & 0x1F;
   216a2:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   216a6:	3380      	adds	r3, #128	; 0x80
   216a8:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   216ac:	684b      	ldr	r3, [r1, #4]
   216ae:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   216b2:	3380      	adds	r3, #128	; 0x80
   216b4:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   216b8:	e7d6      	b.n	21668 <nrfx_twim_init+0x3c>
        return err_code;
   216ba:	4804      	ldr	r0, [pc, #16]	; (216cc <nrfx_twim_init+0xa0>)
   216bc:	e7ec      	b.n	21698 <nrfx_twim_init+0x6c>
   216be:	bf00      	nop
   216c0:	2000d438 	.word	0x2000d438
   216c4:	0bad0000 	.word	0x0bad0000
   216c8:	40842500 	.word	0x40842500
   216cc:	0bad0005 	.word	0x0bad0005

000216d0 <nrfx_twim_enable>:
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   216d0:	2106      	movs	r1, #6
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
   216d2:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   216d4:	7902      	ldrb	r2, [r0, #4]
   216d6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   216da:	2134      	movs	r1, #52	; 0x34
   216dc:	4b03      	ldr	r3, [pc, #12]	; (216ec <nrfx_twim_enable+0x1c>)
   216de:	fb01 3302 	mla	r3, r1, r2, r3
   216e2:	2202      	movs	r2, #2
   216e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   216e8:	4770      	bx	lr
   216ea:	bf00      	nop
   216ec:	2000d438 	.word	0x2000d438

000216f0 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   216f0:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   216f2:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   216f4:	2034      	movs	r0, #52	; 0x34
   216f6:	4b0b      	ldr	r3, [pc, #44]	; (21724 <nrfx_twim_disable+0x34>)
   216f8:	fb00 3301 	mla	r3, r0, r1, r3
   216fc:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   216fe:	480a      	ldr	r0, [pc, #40]	; (21728 <nrfx_twim_disable+0x38>)
   21700:	6099      	str	r1, [r3, #8]
   21702:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   21706:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   2170a:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   2170e:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   21712:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   21716:	2201      	movs	r2, #1
    p_cb->busy = false;
   21718:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2171c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   21720:	4770      	bx	lr
   21722:	bf00      	nop
   21724:	2000d438 	.word	0x2000d438
   21728:	019c0202 	.word	0x019c0202

0002172c <nrfx_twim_xfer>:
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
   2172c:	2334      	movs	r3, #52	; 0x34


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   2172e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21732:	4617      	mov	r7, r2
    p_cb->error = false;
   21734:	2200      	movs	r2, #0
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21736:	f890 e004 	ldrb.w	lr, [r0, #4]
    p_cb->error = false;
   2173a:	f8df c2e4 	ldr.w	ip, [pc, #740]	; 21a20 <nrfx_twim_xfer+0x2f4>
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   2173e:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   21740:	fb03 c30e 	mla	r3, r3, lr, ip
   21744:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   21748:	684b      	ldr	r3, [r1, #4]
{
   2174a:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   2174c:	b14b      	cbz	r3, 21762 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2174e:	68cb      	ldr	r3, [r1, #12]
   21750:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   21754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   21758:	d003      	beq.n	21762 <nrfx_twim_xfer+0x36>
        return err_code;
   2175a:	4eb2      	ldr	r6, [pc, #712]	; (21a24 <nrfx_twim_xfer+0x2f8>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2175c:	4630      	mov	r0, r6
   2175e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   21762:	2634      	movs	r6, #52	; 0x34
   21764:	fb06 c60e 	mla	r6, r6, lr, ip
    p_reg->INTENCLR = mask;
   21768:	4baf      	ldr	r3, [pc, #700]	; (21a28 <nrfx_twim_xfer+0x2fc>)
   2176a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   2176e:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   21772:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   21776:	b123      	cbz	r3, 21782 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   21778:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   2177a:	4eac      	ldr	r6, [pc, #688]	; (21a2c <nrfx_twim_xfer+0x300>)
    p_reg->INTENSET = mask;
   2177c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   21780:	e7ec      	b.n	2175c <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   21782:	f017 0f14 	tst.w	r7, #20
   21786:	bf0c      	ite	eq
   21788:	2301      	moveq	r3, #1
   2178a:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   2178c:	46a9      	mov	r9, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   2178e:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   21792:	f106 080c 	add.w	r8, r6, #12
   21796:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   2179a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   2179e:	f8d9 3000 	ldr.w	r3, [r9]
    p_cb->flags = flags;
   217a2:	6237      	str	r7, [r6, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   217a4:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   217a8:	f3c7 1300 	ubfx	r3, r7, #4, #1
   217ac:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   217b0:	786b      	ldrb	r3, [r5, #1]
   217b2:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   217b6:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   217ba:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   217be:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   217c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   217c6:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   217ca:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   217ce:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   217d2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   217d6:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   217da:	bf18      	it	ne
   217dc:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   217de:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   217e2:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   217e6:	bf18      	it	ne
   217e8:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   217ea:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   217ee:	782b      	ldrb	r3, [r5, #0]
   217f0:	2b03      	cmp	r3, #3
   217f2:	f200 80b9 	bhi.w	21968 <nrfx_twim_xfer+0x23c>
   217f6:	e8df f003 	tbb	[pc, r3]
   217fa:	a48b      	.short	0xa48b
   217fc:	026d      	.short	0x026d
   217fe:	692b      	ldr	r3, [r5, #16]
   21800:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   21804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   21808:	d1a7      	bne.n	2175a <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   2180a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2180e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   21812:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21814:	68ea      	ldr	r2, [r5, #12]
   21816:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2181a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2181e:	2300      	movs	r3, #0
   21820:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   21824:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21828:	2201      	movs	r2, #1
   2182a:	6222      	str	r2, [r4, #32]
   2182c:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2182e:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   21832:	2a00      	cmp	r2, #0
   21834:	d0fb      	beq.n	2182e <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21836:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   2183a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2183e:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   21840:	68ab      	ldr	r3, [r5, #8]
   21842:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21846:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   2184a:	2334      	movs	r3, #52	; 0x34
   2184c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   21850:	fb03 c30e 	mla	r3, r3, lr, ip
   21854:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   21856:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   21858:	4e75      	ldr	r6, [pc, #468]	; (21a30 <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   2185a:	0738      	lsls	r0, r7, #28
   2185c:	d407      	bmi.n	2186e <nrfx_twim_xfer+0x142>
   2185e:	782a      	ldrb	r2, [r5, #0]
   21860:	2a03      	cmp	r2, #3
   21862:	d004      	beq.n	2186e <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21864:	2201      	movs	r2, #1
   21866:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   21868:	686b      	ldr	r3, [r5, #4]
   2186a:	b903      	cbnz	r3, 2186e <nrfx_twim_xfer+0x142>
   2186c:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   2186e:	2334      	movs	r3, #52	; 0x34
   21870:	fb03 f30e 	mul.w	r3, r3, lr
   21874:	f85c 1003 	ldr.w	r1, [ip, r3]
   21878:	eb0c 0203 	add.w	r2, ip, r3
   2187c:	2900      	cmp	r1, #0
   2187e:	d176      	bne.n	2196e <nrfx_twim_xfer+0x242>
   21880:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21882:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   21886:	2b00      	cmp	r3, #0
   21888:	f000 8089 	beq.w	2199e <nrfx_twim_xfer+0x272>
   2188c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   21890:	2b00      	cmp	r3, #0
   21892:	f040 8087 	bne.w	219a4 <nrfx_twim_xfer+0x278>
   21896:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   2189a:	2b00      	cmp	r3, #0
   2189c:	f000 8095 	beq.w	219ca <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
   218a0:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   218a2:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   218a6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   218aa:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   218ae:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   218b2:	2d00      	cmp	r5, #0
   218b4:	f000 8081 	beq.w	219ba <nrfx_twim_xfer+0x28e>
   218b8:	f412 7f00 	tst.w	r2, #512	; 0x200
   218bc:	f402 7280 	and.w	r2, r2, #256	; 0x100
   218c0:	d17e      	bne.n	219c0 <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   218c2:	6220      	str	r0, [r4, #32]
   218c4:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   218c6:	2a00      	cmp	r2, #0
   218c8:	d0db      	beq.n	21882 <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   218ca:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
   218ce:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   218d2:	e7d6      	b.n	21882 <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   218d4:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   218d6:	68ea      	ldr	r2, [r5, #12]
   218d8:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   218dc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   218e0:	692b      	ldr	r3, [r5, #16]
   218e2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   218e6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   218ea:	f47f af36 	bne.w	2175a <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   218ee:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   218f0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   218f4:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   218f8:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   218fc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   21900:	2334      	movs	r3, #52	; 0x34
   21902:	2202      	movs	r2, #2
   21904:	fb03 c30e 	mla	r3, r3, lr, ip
   21908:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2190a:	2301      	movs	r3, #1
   2190c:	6223      	str	r3, [r4, #32]
   2190e:	e7a2      	b.n	21856 <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   21910:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21912:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   21914:	f017 0f20 	tst.w	r7, #32
   21918:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2191c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   21920:	f04f 0334 	mov.w	r3, #52	; 0x34
   21924:	d008      	beq.n	21938 <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
   21926:	f44f 7280 	mov.w	r2, #256	; 0x100
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   2192a:	fb03 c30e 	mla	r3, r3, lr, ip
   2192e:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   21932:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   21936:	e7e7      	b.n	21908 <nrfx_twim_xfer+0x1dc>
   21938:	f44f 7200 	mov.w	r2, #512	; 0x200
   2193c:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   21940:	e7df      	b.n	21902 <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   21942:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   21944:	68ea      	ldr	r2, [r5, #12]
   21946:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2194a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   2194e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   21952:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   21956:	2334      	movs	r3, #52	; 0x34
   21958:	2202      	movs	r2, #2
   2195a:	fb03 c30e 	mla	r3, r3, lr, ip
   2195e:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21960:	2301      	movs	r3, #1
   21962:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   21964:	2300      	movs	r3, #0
   21966:	e777      	b.n	21858 <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
   21968:	2308      	movs	r3, #8
   2196a:	4e32      	ldr	r6, [pc, #200]	; (21a34 <nrfx_twim_xfer+0x308>)
   2196c:	e775      	b.n	2185a <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   2196e:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
   21970:	bf44      	itt	mi
   21972:	2300      	movmi	r3, #0
   21974:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   21976:	067a      	lsls	r2, r7, #25
   21978:	d406      	bmi.n	21988 <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   2197a:	2334      	movs	r3, #52	; 0x34
   2197c:	fb03 c30e 	mla	r3, r3, lr, ip
   21980:	689a      	ldr	r2, [r3, #8]
   21982:	f042 0202 	orr.w	r2, r2, #2
   21986:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   21988:	2334      	movs	r3, #52	; 0x34
   2198a:	fb03 c30e 	mla	r3, r3, lr, ip
   2198e:	689a      	ldr	r2, [r3, #8]
   21990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   21994:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   21996:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
   21998:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2199c:	e6de      	b.n	2175c <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2199e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   219a2:	b123      	cbz	r3, 219ae <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   219a4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   219a8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   219ac:	e773      	b.n	21896 <nrfx_twim_xfer+0x16a>
   219ae:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   219b2:	2a00      	cmp	r2, #0
   219b4:	f43f af65 	beq.w	21882 <nrfx_twim_xfer+0x156>
   219b8:	e773      	b.n	218a2 <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   219ba:	6220      	str	r0, [r4, #32]
   219bc:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   219be:	e760      	b.n	21882 <nrfx_twim_xfer+0x156>
   219c0:	2a00      	cmp	r2, #0
   219c2:	d182      	bne.n	218ca <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
   219c4:	2b00      	cmp	r3, #0
   219c6:	f43f af5c 	beq.w	21882 <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
   219ca:	2134      	movs	r1, #52	; 0x34
   219cc:	2000      	movs	r0, #0
   219ce:	fb01 c20e 	mla	r2, r1, lr, ip
    uint32_t error_source = p_reg->ERRORSRC;
   219d2:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   219d6:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   219da:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   219de:	b18b      	cbz	r3, 21a04 <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   219e0:	4a15      	ldr	r2, [pc, #84]	; (21a38 <nrfx_twim_xfer+0x30c>)
   219e2:	f013 0f01 	tst.w	r3, #1
   219e6:	4e15      	ldr	r6, [pc, #84]	; (21a3c <nrfx_twim_xfer+0x310>)
   219e8:	bf18      	it	ne
   219ea:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   219ec:	f013 0f02 	tst.w	r3, #2
   219f0:	f102 0201 	add.w	r2, r2, #1
   219f4:	bf18      	it	ne
   219f6:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   219f8:	f013 0f04 	tst.w	r3, #4
   219fc:	4b10      	ldr	r3, [pc, #64]	; (21a40 <nrfx_twim_xfer+0x314>)
   219fe:	bf18      	it	ne
   21a00:	461e      	movne	r6, r3
   21a02:	e6ab      	b.n	2175c <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   21a04:	067b      	lsls	r3, r7, #25
   21a06:	f53f aea9 	bmi.w	2175c <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   21a0a:	4620      	mov	r0, r4
   21a0c:	fb0e c101 	mla	r1, lr, r1, ip
   21a10:	f005 fc17 	bl	27242 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   21a14:	4b09      	ldr	r3, [pc, #36]	; (21a3c <nrfx_twim_xfer+0x310>)
   21a16:	2800      	cmp	r0, #0
   21a18:	bf08      	it	eq
   21a1a:	461e      	moveq	r6, r3
   21a1c:	e69e      	b.n	2175c <nrfx_twim_xfer+0x30>
   21a1e:	bf00      	nop
   21a20:	2000d438 	.word	0x2000d438
   21a24:	0bad000a 	.word	0x0bad000a
   21a28:	019c0202 	.word	0x019c0202
   21a2c:	0bad000b 	.word	0x0bad000b
   21a30:	0bad0000 	.word	0x0bad0000
   21a34:	0bad0004 	.word	0x0bad0004
   21a38:	0bae0000 	.word	0x0bae0000
   21a3c:	0bad0001 	.word	0x0bad0001
   21a40:	0bae0002 	.word	0x0bae0002

00021a44 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   21a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21a46:	4d5a      	ldr	r5, [pc, #360]	; (21bb0 <nrfx_twim_2_irq_handler+0x16c>)
   21a48:	4c5a      	ldr	r4, [pc, #360]	; (21bb4 <nrfx_twim_2_irq_handler+0x170>)
   21a4a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   21a4e:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   21a50:	b1fb      	cbz	r3, 21a92 <nrfx_twim_2_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21a52:	2300      	movs	r3, #0
   21a54:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   21a58:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21a5c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   21a60:	b9bb      	cbnz	r3, 21a92 <nrfx_twim_2_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   21a62:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   21a64:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   21a68:	2302      	movs	r3, #2
   21a6a:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   21a6c:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   21a6e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21a72:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   21a76:	b11b      	cbz	r3, 21a80 <nrfx_twim_2_irq_handler+0x3c>
    return p_reg->SHORTS;
   21a78:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   21a7c:	059e      	lsls	r6, r3, #22
   21a7e:	d403      	bmi.n	21a88 <nrfx_twim_2_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21a80:	2201      	movs	r2, #1
   21a82:	4b4b      	ldr	r3, [pc, #300]	; (21bb0 <nrfx_twim_2_irq_handler+0x16c>)
   21a84:	621a      	str	r2, [r3, #32]
   21a86:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   21a88:	2301      	movs	r3, #1
   21a8a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   21a8e:	b007      	add	sp, #28
   21a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21a92:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   21a96:	2b00      	cmp	r3, #0
   21a98:	d05a      	beq.n	21b50 <nrfx_twim_2_irq_handler+0x10c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21a9a:	2300      	movs	r3, #0
   21a9c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   21aa0:	6a27      	ldr	r7, [r4, #32]
   21aa2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   21aa6:	067d      	lsls	r5, r7, #25
   21aa8:	d40a      	bmi.n	21ac0 <nrfx_twim_2_irq_handler+0x7c>
   21aaa:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   21aae:	b93b      	cbnz	r3, 21ac0 <nrfx_twim_2_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   21ab0:	4940      	ldr	r1, [pc, #256]	; (21bb4 <nrfx_twim_2_irq_handler+0x170>)
   21ab2:	483f      	ldr	r0, [pc, #252]	; (21bb0 <nrfx_twim_2_irq_handler+0x16c>)
   21ab4:	f005 fbc5 	bl	27242 <xfer_completeness_check>
   21ab8:	f080 0001 	eor.w	r0, r0, #1
   21abc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   21ac0:	f017 0704 	ands.w	r7, r7, #4
            if (!p_cb->repeated || p_cb->error)
   21ac4:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   21ac8:	d120      	bne.n	21b0c <nrfx_twim_2_irq_handler+0xc8>
            event.xfer_desc = p_cb->xfer_desc;
   21aca:	4e3b      	ldr	r6, [pc, #236]	; (21bb8 <nrfx_twim_2_irq_handler+0x174>)
   21acc:	ad01      	add	r5, sp, #4
   21ace:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   21ad2:	6833      	ldr	r3, [r6, #0]
   21ad4:	602b      	str	r3, [r5, #0]
   21ad6:	4b36      	ldr	r3, [pc, #216]	; (21bb0 <nrfx_twim_2_irq_handler+0x16c>)
   21ad8:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   21adc:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   21ae0:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   21ae4:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   21ae8:	f1bc 0f00 	cmp.w	ip, #0
   21aec:	d002      	beq.n	21af4 <nrfx_twim_2_irq_handler+0xb0>
   21aee:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   21af2:	b15a      	cbz	r2, 21b0c <nrfx_twim_2_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   21af4:	2200      	movs	r2, #0
   21af6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   21afa:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   21afc:	4a2f      	ldr	r2, [pc, #188]	; (21bbc <nrfx_twim_2_irq_handler+0x178>)
   21afe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   21b02:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21b06:	4b2e      	ldr	r3, [pc, #184]	; (21bc0 <nrfx_twim_2_irq_handler+0x17c>)
   21b08:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   21b0c:	4a28      	ldr	r2, [pc, #160]	; (21bb0 <nrfx_twim_2_irq_handler+0x16c>)
   21b0e:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   21b12:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   21b14:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   21b18:	d443      	bmi.n	21ba2 <nrfx_twim_2_irq_handler+0x15e>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   21b1a:	0759      	lsls	r1, r3, #29
   21b1c:	d443      	bmi.n	21ba6 <nrfx_twim_2_irq_handler+0x162>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   21b1e:	07da      	lsls	r2, r3, #31
   21b20:	d443      	bmi.n	21baa <nrfx_twim_2_irq_handler+0x166>
    else if (p_cb->error)
   21b22:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   21b26:	009b      	lsls	r3, r3, #2
   21b28:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   21b2a:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   21b2e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   21b32:	b90b      	cbnz	r3, 21b38 <nrfx_twim_2_irq_handler+0xf4>
        p_cb->busy = false;
   21b34:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   21b38:	6a23      	ldr	r3, [r4, #32]
   21b3a:	075b      	lsls	r3, r3, #29
   21b3c:	d503      	bpl.n	21b46 <nrfx_twim_2_irq_handler+0x102>
   21b3e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   21b42:	2b00      	cmp	r3, #0
   21b44:	d0a3      	beq.n	21a8e <nrfx_twim_2_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
   21b46:	e9d4 3100 	ldrd	r3, r1, [r4]
   21b4a:	4668      	mov	r0, sp
   21b4c:	4798      	blx	r3
}
   21b4e:	e79e      	b.n	21a8e <nrfx_twim_2_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21b50:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   21b54:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   21b58:	7b23      	ldrb	r3, [r4, #12]
   21b5a:	b983      	cbnz	r3, 21b7e <nrfx_twim_2_irq_handler+0x13a>
            event.xfer_desc = p_cb->xfer_desc;
   21b5c:	4f16      	ldr	r7, [pc, #88]	; (21bb8 <nrfx_twim_2_irq_handler+0x174>)
   21b5e:	ae01      	add	r6, sp, #4
   21b60:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   21b62:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   21b64:	683b      	ldr	r3, [r7, #0]
   21b66:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   21b68:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   21b6c:	2b00      	cmp	r3, #0
   21b6e:	d1cd      	bne.n	21b0c <nrfx_twim_2_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   21b70:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   21b74:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   21b76:	4b11      	ldr	r3, [pc, #68]	; (21bbc <nrfx_twim_2_irq_handler+0x178>)
   21b78:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   21b7c:	e7c1      	b.n	21b02 <nrfx_twim_2_irq_handler+0xbe>
    p_reg->SHORTS = mask;
   21b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
   21b82:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   21b86:	f240 2302 	movw	r3, #514	; 0x202
   21b8a:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   21b8c:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   21b90:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   21b94:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   21b96:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21b9a:	2301      	movs	r3, #1
   21b9c:	60ab      	str	r3, [r5, #8]
   21b9e:	622b      	str	r3, [r5, #32]
            return;
   21ba0:	e775      	b.n	21a8e <nrfx_twim_2_irq_handler+0x4a>
   21ba2:	2301      	movs	r3, #1
   21ba4:	e7c1      	b.n	21b2a <nrfx_twim_2_irq_handler+0xe6>
   21ba6:	2302      	movs	r3, #2
   21ba8:	e7bf      	b.n	21b2a <nrfx_twim_2_irq_handler+0xe6>
   21baa:	2303      	movs	r3, #3
   21bac:	e7bd      	b.n	21b2a <nrfx_twim_2_irq_handler+0xe6>
   21bae:	bf00      	nop
   21bb0:	4000a000 	.word	0x4000a000
   21bb4:	2000d438 	.word	0x2000d438
   21bb8:	2000d444 	.word	0x2000d444
   21bbc:	019c0202 	.word	0x019c0202
   21bc0:	e000e100 	.word	0xe000e100

00021bc4 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   21bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21bc8:	2501      	movs	r5, #1
    reg->PIN_CNF[pin_number] = cnf;
   21bca:	f240 630d 	movw	r3, #1549	; 0x60d
    p_reg->OUTSET = set_mask;
   21bce:	4c1b      	ldr	r4, [pc, #108]	; (21c3c <nrfx_twi_twim_bus_recover+0x78>)
    *p_pin = pin_number & 0x1F;
   21bd0:	f001 061f 	and.w	r6, r1, #31
   21bd4:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21bd8:	fa05 f800 	lsl.w	r8, r5, r0
    reg->PIN_CNF[pin_number] = cnf;
   21bdc:	f106 0280 	add.w	r2, r6, #128	; 0x80
   21be0:	3080      	adds	r0, #128	; 0x80
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21be2:	40b5      	lsls	r5, r6
    p_reg->OUTSET = set_mask;
   21be4:	f8c4 8008 	str.w	r8, [r4, #8]
   21be8:	60a5      	str	r5, [r4, #8]
    reg->PIN_CNF[pin_number] = cnf;
   21bea:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   21bee:	2004      	movs	r0, #4
   21bf0:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
   21bf4:	f005 fb15 	bl	27222 <nrfx_busy_wait>
   21bf8:	2709      	movs	r7, #9
    return p_reg->IN;
   21bfa:	6923      	ldr	r3, [r4, #16]

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   21bfc:	421d      	tst	r5, r3
   21bfe:	d10d      	bne.n	21c1c <nrfx_twi_twim_bus_recover+0x58>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   21c00:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   21c02:	f8c4 800c 	str.w	r8, [r4, #12]
   21c06:	f005 fb0c 	bl	27222 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   21c0a:	3f01      	subs	r7, #1
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   21c0c:	2004      	movs	r0, #4
    p_reg->OUTSET = set_mask;
   21c0e:	f8c4 8008 	str.w	r8, [r4, #8]
   21c12:	f005 fb06 	bl	27222 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   21c16:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   21c1a:	d1ee      	bne.n	21bfa <nrfx_twi_twim_bus_recover+0x36>
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   21c1c:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   21c1e:	60e5      	str	r5, [r4, #12]
   21c20:	f005 faff 	bl	27222 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   21c24:	2004      	movs	r0, #4
    p_reg->OUTSET = set_mask;
   21c26:	60a5      	str	r5, [r4, #8]
   21c28:	f005 fafb 	bl	27222 <nrfx_busy_wait>
    return p_reg->IN;
   21c2c:	6923      	ldr	r3, [r4, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   21c2e:	4804      	ldr	r0, [pc, #16]	; (21c40 <nrfx_twi_twim_bus_recover+0x7c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   21c30:	40f3      	lsrs	r3, r6
   21c32:	f003 0301 	and.w	r3, r3, #1
   21c36:	1ac0      	subs	r0, r0, r3
   21c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21c3c:	40842500 	.word	0x40842500
   21c40:	0bad0001 	.word	0x0bad0001

00021c44 <rpc_handle_data_message>:
   21c44:	b570      	push	{r4, r5, r6, lr}
   21c46:	6803      	ldr	r3, [r0, #0]
   21c48:	4604      	mov	r4, r0
   21c4a:	b2db      	uxtb	r3, r3
   21c4c:	2b04      	cmp	r3, #4
   21c4e:	d009      	beq.n	21c64 <rpc_handle_data_message+0x20>
   21c50:	2b03      	cmp	r3, #3
   21c52:	d015      	beq.n	21c80 <rpc_handle_data_message+0x3c>
   21c54:	2b06      	cmp	r3, #6
   21c56:	d015      	beq.n	21c84 <rpc_handle_data_message+0x40>
   21c58:	2b07      	cmp	r3, #7
   21c5a:	d015      	beq.n	21c88 <rpc_handle_data_message+0x44>
   21c5c:	6880      	ldr	r0, [r0, #8]
   21c5e:	b9a8      	cbnz	r0, 21c8c <rpc_handle_data_message+0x48>
   21c60:	2000      	movs	r0, #0
   21c62:	bd70      	pop	{r4, r5, r6, pc}
   21c64:	2300      	movs	r3, #0
   21c66:	4a0b      	ldr	r2, [pc, #44]	; (21c94 <rpc_handle_data_message+0x50>)
   21c68:	4620      	mov	r0, r4
   21c6a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   21c6e:	685d      	ldr	r5, [r3, #4]
   21c70:	f005 fb6a 	bl	27348 <rpc_client_msg_from_rpc_msg_get>
   21c74:	6821      	ldr	r1, [r4, #0]
   21c76:	462b      	mov	r3, r5
   21c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21c7c:	0c09      	lsrs	r1, r1, #16
   21c7e:	4718      	bx	r3
   21c80:	2301      	movs	r3, #1
   21c82:	e7f0      	b.n	21c66 <rpc_handle_data_message+0x22>
   21c84:	2302      	movs	r3, #2
   21c86:	e7ee      	b.n	21c66 <rpc_handle_data_message+0x22>
   21c88:	2303      	movs	r3, #3
   21c8a:	e7ec      	b.n	21c66 <rpc_handle_data_message+0x22>
   21c8c:	f000 f81c 	bl	21cc8 <rpc_transport_msg_data_rx_free>
   21c90:	e7e6      	b.n	21c60 <rpc_handle_data_message+0x1c>
   21c92:	bf00      	nop
   21c94:	00029338 	.word	0x00029338

00021c98 <rpc_transport_init>:
   21c98:	4b01      	ldr	r3, [pc, #4]	; (21ca0 <rpc_transport_init+0x8>)
   21c9a:	699b      	ldr	r3, [r3, #24]
   21c9c:	4718      	bx	r3
   21c9e:	bf00      	nop
   21ca0:	2000c6d4 	.word	0x2000c6d4

00021ca4 <rpc_transport_msg_alloc>:
   21ca4:	4b01      	ldr	r3, [pc, #4]	; (21cac <rpc_transport_msg_alloc+0x8>)
   21ca6:	681b      	ldr	r3, [r3, #0]
   21ca8:	4718      	bx	r3
   21caa:	bf00      	nop
   21cac:	2000c6d4 	.word	0x2000c6d4

00021cb0 <rpc_transport_msg_data_tx_size>:
   21cb0:	4b01      	ldr	r3, [pc, #4]	; (21cb8 <rpc_transport_msg_data_tx_size+0x8>)
   21cb2:	685b      	ldr	r3, [r3, #4]
   21cb4:	4718      	bx	r3
   21cb6:	bf00      	nop
   21cb8:	2000c6d4 	.word	0x2000c6d4

00021cbc <rpc_transport_msg_rx_free>:
   21cbc:	4b01      	ldr	r3, [pc, #4]	; (21cc4 <rpc_transport_msg_rx_free+0x8>)
   21cbe:	68db      	ldr	r3, [r3, #12]
   21cc0:	4718      	bx	r3
   21cc2:	bf00      	nop
   21cc4:	2000c6d4 	.word	0x2000c6d4

00021cc8 <rpc_transport_msg_data_rx_free>:
   21cc8:	4b01      	ldr	r3, [pc, #4]	; (21cd0 <rpc_transport_msg_data_rx_free+0x8>)
   21cca:	695b      	ldr	r3, [r3, #20]
   21ccc:	4718      	bx	r3
   21cce:	bf00      	nop
   21cd0:	2000c6d4 	.word	0x2000c6d4

00021cd4 <rpc_transport_msg_send>:
   21cd4:	4b01      	ldr	r3, [pc, #4]	; (21cdc <rpc_transport_msg_send+0x8>)
   21cd6:	689b      	ldr	r3, [r3, #8]
   21cd8:	4718      	bx	r3
   21cda:	bf00      	nop
   21cdc:	2000c6d4 	.word	0x2000c6d4

00021ce0 <rpc_transport_data_rx_suspend>:
   21ce0:	4b01      	ldr	r3, [pc, #4]	; (21ce8 <rpc_transport_data_rx_suspend+0x8>)
   21ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21ce4:	4718      	bx	r3
   21ce6:	bf00      	nop
   21ce8:	2000c6d4 	.word	0x2000c6d4

00021cec <rpc_transport_data_rx_resume>:
   21cec:	4b01      	ldr	r3, [pc, #4]	; (21cf4 <rpc_transport_data_rx_resume+0x8>)
   21cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21cf0:	4718      	bx	r3
   21cf2:	bf00      	nop
   21cf4:	2000c6d4 	.word	0x2000c6d4

00021cf8 <rpc_transport_ipc_msg_data_tx_size>:
   21cf8:	4b01      	ldr	r3, [pc, #4]	; (21d00 <rpc_transport_ipc_msg_data_tx_size+0x8>)
   21cfa:	681b      	ldr	r3, [r3, #0]
   21cfc:	68d8      	ldr	r0, [r3, #12]
   21cfe:	4770      	bx	lr
   21d00:	2000d46c 	.word	0x2000d46c

00021d04 <rpc_transport_ipc_msg_rx_free>:
   21d04:	2300      	movs	r3, #0
   21d06:	b530      	push	{r4, r5, lr}
   21d08:	4910      	ldr	r1, [pc, #64]	; (21d4c <rpc_transport_ipc_msg_rx_free+0x48>)
   21d0a:	680a      	ldr	r2, [r1, #0]
   21d0c:	6814      	ldr	r4, [r2, #0]
   21d0e:	42a3      	cmp	r3, r4
   21d10:	d10b      	bne.n	21d2a <rpc_transport_ipc_msg_rx_free+0x26>
   21d12:	2300      	movs	r3, #0
   21d14:	684a      	ldr	r2, [r1, #4]
   21d16:	6811      	ldr	r1, [r2, #0]
   21d18:	428b      	cmp	r3, r1
   21d1a:	d015      	beq.n	21d48 <rpc_transport_ipc_msg_rx_free+0x44>
   21d1c:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   21d20:	68a4      	ldr	r4, [r4, #8]
   21d22:	42a0      	cmp	r0, r4
   21d24:	d008      	beq.n	21d38 <rpc_transport_ipc_msg_rx_free+0x34>
   21d26:	3301      	adds	r3, #1
   21d28:	e7f6      	b.n	21d18 <rpc_transport_ipc_msg_rx_free+0x14>
   21d2a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   21d2e:	68ad      	ldr	r5, [r5, #8]
   21d30:	42a8      	cmp	r0, r5
   21d32:	d001      	beq.n	21d38 <rpc_transport_ipc_msg_rx_free+0x34>
   21d34:	3301      	adds	r3, #1
   21d36:	e7ea      	b.n	21d0e <rpc_transport_ipc_msg_rx_free+0xa>
   21d38:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   21d3c:	6853      	ldr	r3, [r2, #4]
   21d3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   21d42:	f043 0303 	orr.w	r3, r3, #3
   21d46:	6053      	str	r3, [r2, #4]
   21d48:	bd30      	pop	{r4, r5, pc}
   21d4a:	bf00      	nop
   21d4c:	2000d48c 	.word	0x2000d48c

00021d50 <rpc_transport_ipc_msg_tx_free>:
   21d50:	2200      	movs	r2, #0
   21d52:	b530      	push	{r4, r5, lr}
   21d54:	4b0b      	ldr	r3, [pc, #44]	; (21d84 <rpc_transport_ipc_msg_tx_free+0x34>)
   21d56:	6819      	ldr	r1, [r3, #0]
   21d58:	680c      	ldr	r4, [r1, #0]
   21d5a:	4294      	cmp	r4, r2
   21d5c:	d00f      	beq.n	21d7e <rpc_transport_ipc_msg_tx_free+0x2e>
   21d5e:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   21d62:	689d      	ldr	r5, [r3, #8]
   21d64:	42a8      	cmp	r0, r5
   21d66:	d10b      	bne.n	21d80 <rpc_transport_ipc_msg_tx_free+0x30>
   21d68:	f04f 0203 	mov.w	r2, #3
   21d6c:	3304      	adds	r3, #4
   21d6e:	e8d3 1fcf 	ldaexb	r1, [r3]
   21d72:	2900      	cmp	r1, #0
   21d74:	d103      	bne.n	21d7e <rpc_transport_ipc_msg_tx_free+0x2e>
   21d76:	e8c3 2fc0 	stlexb	r0, r2, [r3]
   21d7a:	2800      	cmp	r0, #0
   21d7c:	d1f7      	bne.n	21d6e <rpc_transport_ipc_msg_tx_free+0x1e>
   21d7e:	bd30      	pop	{r4, r5, pc}
   21d80:	3201      	adds	r2, #1
   21d82:	e7ea      	b.n	21d5a <rpc_transport_ipc_msg_tx_free+0xa>
   21d84:	2000d484 	.word	0x2000d484

00021d88 <handle_modem_rpc_msg>:
   21d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d8c:	2500      	movs	r5, #0
   21d8e:	4606      	mov	r6, r0
   21d90:	460f      	mov	r7, r1
   21d92:	4628      	mov	r0, r5
   21d94:	f8df 8064 	ldr.w	r8, [pc, #100]	; 21dfc <handle_modem_rpc_msg+0x74>
   21d98:	6833      	ldr	r3, [r6, #0]
   21d9a:	42ab      	cmp	r3, r5
   21d9c:	d801      	bhi.n	21da2 <handle_modem_rpc_msg+0x1a>
   21d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21da2:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   21da6:	6863      	ldr	r3, [r4, #4]
   21da8:	b2db      	uxtb	r3, r3
   21daa:	2b01      	cmp	r3, #1
   21dac:	d117      	bne.n	21dde <handle_modem_rpc_msg+0x56>
   21dae:	6862      	ldr	r2, [r4, #4]
   21db0:	f8b8 3000 	ldrh.w	r3, [r8]
   21db4:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   21db8:	d111      	bne.n	21dde <handle_modem_rpc_msg+0x56>
   21dba:	2f02      	cmp	r7, #2
   21dbc:	68a0      	ldr	r0, [r4, #8]
   21dbe:	d110      	bne.n	21de2 <handle_modem_rpc_msg+0x5a>
   21dc0:	f7ff ff40 	bl	21c44 <rpc_handle_data_message>
   21dc4:	b990      	cbnz	r0, 21dec <handle_modem_rpc_msg+0x64>
   21dc6:	6863      	ldr	r3, [r4, #4]
   21dc8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   21dcc:	f043 0303 	orr.w	r3, r3, #3
   21dd0:	6063      	str	r3, [r4, #4]
   21dd2:	2001      	movs	r0, #1
   21dd4:	f8b8 3000 	ldrh.w	r3, [r8]
   21dd8:	3301      	adds	r3, #1
   21dda:	f8a8 3000 	strh.w	r3, [r8]
   21dde:	3501      	adds	r5, #1
   21de0:	e7da      	b.n	21d98 <handle_modem_rpc_msg+0x10>
   21de2:	6801      	ldr	r1, [r0, #0]
   21de4:	0c09      	lsrs	r1, r1, #16
   21de6:	f005 fa5c 	bl	272a2 <rpc_handle_ctrl_message>
   21dea:	e7eb      	b.n	21dc4 <handle_modem_rpc_msg+0x3c>
   21dec:	2801      	cmp	r0, #1
   21dee:	d1f0      	bne.n	21dd2 <handle_modem_rpc_msg+0x4a>
   21df0:	6863      	ldr	r3, [r4, #4]
   21df2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   21df6:	f043 0302 	orr.w	r3, r3, #2
   21dfa:	e7e9      	b.n	21dd0 <handle_modem_rpc_msg+0x48>
   21dfc:	2000d894 	.word	0x2000d894

00021e00 <rpc_message_handler>:
   21e00:	b538      	push	{r3, r4, r5, lr}
   21e02:	4d07      	ldr	r5, [pc, #28]	; (21e20 <rpc_message_handler+0x20>)
   21e04:	2101      	movs	r1, #1
   21e06:	6828      	ldr	r0, [r5, #0]
   21e08:	f7ff ffbe 	bl	21d88 <handle_modem_rpc_msg>
   21e0c:	2102      	movs	r1, #2
   21e0e:	4604      	mov	r4, r0
   21e10:	6868      	ldr	r0, [r5, #4]
   21e12:	f7ff ffb9 	bl	21d88 <handle_modem_rpc_msg>
   21e16:	2800      	cmp	r0, #0
   21e18:	d1f4      	bne.n	21e04 <rpc_message_handler+0x4>
   21e1a:	2c00      	cmp	r4, #0
   21e1c:	d1f2      	bne.n	21e04 <rpc_message_handler+0x4>
   21e1e:	bd38      	pop	{r3, r4, r5, pc}
   21e20:	2000d48c 	.word	0x2000d48c

00021e24 <ipc_irq_handler>:
   21e24:	b570      	push	{r4, r5, r6, lr}
   21e26:	2807      	cmp	r0, #7
   21e28:	d868      	bhi.n	21efc <ipc_irq_handler+0xd8>
   21e2a:	e8df f000 	tbb	[pc, r0]
   21e2e:	670b      	.short	0x670b
   21e30:	674b674f 	.word	0x674b674f
   21e34:	0440      	.short	0x0440
   21e36:	f001 fced 	bl	23814 <ipc_trace_handler>
   21e3a:	2003      	movs	r0, #3
   21e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21e40:	f7fc b864 	b.w	1df0c <nrf_modem_os_event_notify>
   21e44:	2003      	movs	r0, #3
   21e46:	4b2e      	ldr	r3, [pc, #184]	; (21f00 <ipc_irq_handler+0xdc>)
   21e48:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
   21e4c:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
   21e50:	4b2c      	ldr	r3, [pc, #176]	; (21f04 <ipc_irq_handler+0xe0>)
   21e52:	781d      	ldrb	r5, [r3, #0]
   21e54:	7018      	strb	r0, [r3, #0]
   21e56:	f001 fcb3 	bl	237c0 <nrf_modem_state_set>
   21e5a:	4b2b      	ldr	r3, [pc, #172]	; (21f08 <ipc_irq_handler+0xe4>)
   21e5c:	b2ed      	uxtb	r5, r5
   21e5e:	6818      	ldr	r0, [r3, #0]
   21e60:	f004 fe06 	bl	26a70 <nrf_modem_os_sem_give>
   21e64:	2d01      	cmp	r5, #1
   21e66:	d11c      	bne.n	21ea2 <ipc_irq_handler+0x7e>
   21e68:	4b28      	ldr	r3, [pc, #160]	; (21f0c <ipc_irq_handler+0xe8>)
   21e6a:	429c      	cmp	r4, r3
   21e6c:	d010      	beq.n	21e90 <ipc_irq_handler+0x6c>
   21e6e:	d809      	bhi.n	21e84 <ipc_irq_handler+0x60>
   21e70:	3b02      	subs	r3, #2
   21e72:	429c      	cmp	r4, r3
   21e74:	d00f      	beq.n	21e96 <ipc_irq_handler+0x72>
   21e76:	3301      	adds	r3, #1
   21e78:	429c      	cmp	r4, r3
   21e7a:	d00f      	beq.n	21e9c <ipc_irq_handler+0x78>
   21e7c:	4b24      	ldr	r3, [pc, #144]	; (21f10 <ipc_irq_handler+0xec>)
   21e7e:	601c      	str	r4, [r3, #0]
   21e80:	2000      	movs	r0, #0
   21e82:	e7db      	b.n	21e3c <ipc_irq_handler+0x18>
   21e84:	4b23      	ldr	r3, [pc, #140]	; (21f14 <ipc_irq_handler+0xf0>)
   21e86:	429c      	cmp	r4, r3
   21e88:	d1f8      	bne.n	21e7c <ipc_irq_handler+0x58>
   21e8a:	f06f 040c 	mvn.w	r4, #12
   21e8e:	e7f5      	b.n	21e7c <ipc_irq_handler+0x58>
   21e90:	f06f 040b 	mvn.w	r4, #11
   21e94:	e7f2      	b.n	21e7c <ipc_irq_handler+0x58>
   21e96:	f06f 0415 	mvn.w	r4, #21
   21e9a:	e7ef      	b.n	21e7c <ipc_irq_handler+0x58>
   21e9c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   21ea0:	e7ec      	b.n	21e7c <ipc_irq_handler+0x58>
   21ea2:	4631      	mov	r1, r6
   21ea4:	f3c4 000b 	ubfx	r0, r4, #0, #12
   21ea8:	f001 fc7e 	bl	237a8 <nrf_modem_fault_handler_internal>
   21eac:	e7e8      	b.n	21e80 <ipc_irq_handler+0x5c>
   21eae:	2202      	movs	r2, #2
   21eb0:	4b14      	ldr	r3, [pc, #80]	; (21f04 <ipc_irq_handler+0xe0>)
   21eb2:	2000      	movs	r0, #0
   21eb4:	701a      	strb	r2, [r3, #0]
   21eb6:	f001 fc83 	bl	237c0 <nrf_modem_state_set>
   21eba:	4b13      	ldr	r3, [pc, #76]	; (21f08 <ipc_irq_handler+0xe4>)
   21ebc:	6818      	ldr	r0, [r3, #0]
   21ebe:	f004 fdd7 	bl	26a70 <nrf_modem_os_sem_give>
   21ec2:	e7dd      	b.n	21e80 <ipc_irq_handler+0x5c>
   21ec4:	f7ff ff9c 	bl	21e00 <rpc_message_handler>
   21ec8:	2002      	movs	r0, #2
   21eca:	e7b7      	b.n	21e3c <ipc_irq_handler+0x18>
   21ecc:	4b0d      	ldr	r3, [pc, #52]	; (21f04 <ipc_irq_handler+0xe0>)
   21ece:	781a      	ldrb	r2, [r3, #0]
   21ed0:	2a01      	cmp	r2, #1
   21ed2:	b2d0      	uxtb	r0, r2
   21ed4:	d10e      	bne.n	21ef4 <ipc_irq_handler+0xd0>
   21ed6:	4a10      	ldr	r2, [pc, #64]	; (21f18 <ipc_irq_handler+0xf4>)
   21ed8:	6811      	ldr	r1, [r2, #0]
   21eda:	4a10      	ldr	r2, [pc, #64]	; (21f1c <ipc_irq_handler+0xf8>)
   21edc:	688c      	ldr	r4, [r1, #8]
   21ede:	6054      	str	r4, [r2, #4]
   21ee0:	6849      	ldr	r1, [r1, #4]
   21ee2:	6011      	str	r1, [r2, #0]
   21ee4:	2200      	movs	r2, #0
   21ee6:	701a      	strb	r2, [r3, #0]
   21ee8:	f001 fc6a 	bl	237c0 <nrf_modem_state_set>
   21eec:	4b06      	ldr	r3, [pc, #24]	; (21f08 <ipc_irq_handler+0xe4>)
   21eee:	6818      	ldr	r0, [r3, #0]
   21ef0:	f004 fdbe 	bl	26a70 <nrf_modem_os_sem_give>
   21ef4:	f7ff ff84 	bl	21e00 <rpc_message_handler>
   21ef8:	2001      	movs	r0, #1
   21efa:	e79f      	b.n	21e3c <ipc_irq_handler+0x18>
   21efc:	bd70      	pop	{r4, r5, r6, pc}
   21efe:	bf00      	nop
   21f00:	4002a000 	.word	0x4002a000
   21f04:	2000dde6 	.word	0x2000dde6
   21f08:	2000d474 	.word	0x2000d474
   21f0c:	00010022 	.word	0x00010022
   21f10:	2000d488 	.word	0x2000d488
   21f14:	00013032 	.word	0x00013032
   21f18:	2000d470 	.word	0x2000d470
   21f1c:	2000d48c 	.word	0x2000d48c

00021f20 <rpc_transport_ipc_data_msg_send>:
   21f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f22:	4b16      	ldr	r3, [pc, #88]	; (21f7c <rpc_transport_ipc_data_msg_send+0x5c>)
   21f24:	6842      	ldr	r2, [r0, #4]
   21f26:	681b      	ldr	r3, [r3, #0]
   21f28:	4c15      	ldr	r4, [pc, #84]	; (21f80 <rpc_transport_ipc_data_msg_send+0x60>)
   21f2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   21f2e:	f042 0202 	orr.w	r2, r2, #2
   21f32:	1ac3      	subs	r3, r0, r3
   21f34:	6042      	str	r2, [r0, #4]
   21f36:	6821      	ldr	r1, [r4, #0]
   21f38:	4a12      	ldr	r2, [pc, #72]	; (21f84 <rpc_transport_ipc_data_msg_send+0x64>)
   21f3a:	f3c3 1389 	ubfx	r3, r3, #6, #10
   21f3e:	e8d2 5fdf 	ldaexh	r5, [r2]
   21f42:	1c6e      	adds	r6, r5, #1
   21f44:	e8c2 6fd7 	stlexh	r7, r6, [r2]
   21f48:	2f00      	cmp	r7, #0
   21f4a:	d1f8      	bne.n	21f3e <rpc_transport_ipc_data_msg_send+0x1e>
   21f4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   21f50:	684a      	ldr	r2, [r1, #4]
   21f52:	b292      	uxth	r2, r2
   21f54:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   21f58:	604a      	str	r2, [r1, #4]
   21f5a:	6822      	ldr	r2, [r4, #0]
   21f5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   21f60:	6098      	str	r0, [r3, #8]
   21f62:	685a      	ldr	r2, [r3, #4]
   21f64:	2003      	movs	r0, #3
   21f66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   21f6a:	f042 0201 	orr.w	r2, r2, #1
   21f6e:	605a      	str	r2, [r3, #4]
   21f70:	f004 fd74 	bl	26a5c <nrf_modem_os_busywait>
   21f74:	2201      	movs	r2, #1
   21f76:	4b04      	ldr	r3, [pc, #16]	; (21f88 <rpc_transport_ipc_data_msg_send+0x68>)
   21f78:	60da      	str	r2, [r3, #12]
   21f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21f7c:	2000d47c 	.word	0x2000d47c
   21f80:	2000d484 	.word	0x2000d484
   21f84:	2000d896 	.word	0x2000d896
   21f88:	4002a000 	.word	0x4002a000

00021f8c <rpc_transport_ipc_ctrl_msg_alloc>:
   21f8c:	230a      	movs	r3, #10
   21f8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21f90:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   21f94:	4e0c      	ldr	r6, [pc, #48]	; (21fc8 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   21f96:	4f0d      	ldr	r7, [pc, #52]	; (21fcc <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   21f98:	9301      	str	r3, [sp, #4]
   21f9a:	6831      	ldr	r1, [r6, #0]
   21f9c:	6838      	ldr	r0, [r7, #0]
   21f9e:	f005 f9b2 	bl	27306 <rpc_transport_ipc_msg_alloc>
   21fa2:	4604      	mov	r4, r0
   21fa4:	b940      	cbnz	r0, 21fb8 <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
   21fa6:	f004 fd61 	bl	26a6c <nrf_modem_os_is_in_isr>
   21faa:	b940      	cbnz	r0, 21fbe <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   21fac:	2001      	movs	r0, #1
   21fae:	a901      	add	r1, sp, #4
   21fb0:	f7fb fece 	bl	1dd50 <nrf_modem_os_timedwait>
   21fb4:	306e      	adds	r0, #110	; 0x6e
   21fb6:	d1f0      	bne.n	21f9a <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   21fb8:	4620      	mov	r0, r4
   21fba:	b003      	add	sp, #12
   21fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21fbe:	9801      	ldr	r0, [sp, #4]
   21fc0:	4368      	muls	r0, r5
   21fc2:	f004 fd4b 	bl	26a5c <nrf_modem_os_busywait>
   21fc6:	e7e8      	b.n	21f9a <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   21fc8:	2000d478 	.word	0x2000d478
   21fcc:	2000d480 	.word	0x2000d480

00021fd0 <rpc_transport_ipc_data_msg_alloc>:
   21fd0:	4b05      	ldr	r3, [pc, #20]	; (21fe8 <rpc_transport_ipc_data_msg_alloc+0x18>)
   21fd2:	781b      	ldrb	r3, [r3, #0]
   21fd4:	b92b      	cbnz	r3, 21fe2 <rpc_transport_ipc_data_msg_alloc+0x12>
   21fd6:	4b05      	ldr	r3, [pc, #20]	; (21fec <rpc_transport_ipc_data_msg_alloc+0x1c>)
   21fd8:	6819      	ldr	r1, [r3, #0]
   21fda:	4b05      	ldr	r3, [pc, #20]	; (21ff0 <rpc_transport_ipc_data_msg_alloc+0x20>)
   21fdc:	6818      	ldr	r0, [r3, #0]
   21fde:	f005 b992 	b.w	27306 <rpc_transport_ipc_msg_alloc>
   21fe2:	2000      	movs	r0, #0
   21fe4:	4770      	bx	lr
   21fe6:	bf00      	nop
   21fe8:	2000dde5 	.word	0x2000dde5
   21fec:	2000d47c 	.word	0x2000d47c
   21ff0:	2000d484 	.word	0x2000d484

00021ff4 <rpc_transport_ipc_init>:
   21ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ff8:	b095      	sub	sp, #84	; 0x54
   21ffa:	2238      	movs	r2, #56	; 0x38
   21ffc:	2100      	movs	r1, #0
   21ffe:	4606      	mov	r6, r0
   22000:	a803      	add	r0, sp, #12
   22002:	f006 fbd7 	bl	287b4 <memset>
   22006:	2302      	movs	r3, #2
   22008:	9304      	str	r3, [sp, #16]
   2200a:	2308      	movs	r3, #8
   2200c:	9306      	str	r3, [sp, #24]
   2200e:	2320      	movs	r3, #32
   22010:	9308      	str	r3, [sp, #32]
   22012:	2304      	movs	r3, #4
   22014:	930d      	str	r3, [sp, #52]	; 0x34
   22016:	2310      	movs	r3, #16
   22018:	2540      	movs	r5, #64	; 0x40
   2201a:	930f      	str	r3, [sp, #60]	; 0x3c
   2201c:	2380      	movs	r3, #128	; 0x80
   2201e:	2201      	movs	r2, #1
   22020:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
   22024:	23d5      	movs	r3, #213	; 0xd5
   22026:	2100      	movs	r1, #0
   22028:	4855      	ldr	r0, [pc, #340]	; (22180 <rpc_transport_ipc_init+0x18c>)
   2202a:	920b      	str	r2, [sp, #44]	; 0x2c
   2202c:	9313      	str	r3, [sp, #76]	; 0x4c
   2202e:	f7fb ff51 	bl	1ded4 <nrf_modem_os_sem_init>
   22032:	4605      	mov	r5, r0
   22034:	2800      	cmp	r0, #0
   22036:	f040 809f 	bne.w	22178 <rpc_transport_ipc_init+0x184>
   2203a:	4602      	mov	r2, r0
   2203c:	4951      	ldr	r1, [pc, #324]	; (22184 <rpc_transport_ipc_init+0x190>)
   2203e:	7930      	ldrb	r0, [r6, #4]
   22040:	f7ff f8bc 	bl	211bc <nrfx_ipc_init>
   22044:	a803      	add	r0, sp, #12
   22046:	f7ff f8d1 	bl	211ec <nrfx_ipc_config_load>
   2204a:	6834      	ldr	r4, [r6, #0]
   2204c:	6862      	ldr	r2, [r4, #4]
   2204e:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   22052:	f040 8089 	bne.w	22168 <rpc_transport_ipc_init+0x174>
   22056:	6961      	ldr	r1, [r4, #20]
   22058:	68e3      	ldr	r3, [r4, #12]
   2205a:	440b      	add	r3, r1
   2205c:	69e1      	ldr	r1, [r4, #28]
   2205e:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   22062:	440b      	add	r3, r1
   22064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   22068:	d87e      	bhi.n	22168 <rpc_transport_ipc_init+0x174>
   2206a:	6820      	ldr	r0, [r4, #0]
   2206c:	4629      	mov	r1, r5
   2206e:	f006 fba1 	bl	287b4 <memset>
   22072:	6833      	ldr	r3, [r6, #0]
   22074:	681c      	ldr	r4, [r3, #0]
   22076:	f8d3 901c 	ldr.w	r9, [r3, #28]
   2207a:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   2207e:	9201      	str	r2, [sp, #4]
   22080:	f104 0760 	add.w	r7, r4, #96	; 0x60
   22084:	4a40      	ldr	r2, [pc, #256]	; (22188 <rpc_transport_ipc_init+0x194>)
   22086:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
   2208a:	f104 0b20 	add.w	fp, r4, #32
   2208e:	f1b9 0f00 	cmp.w	r9, #0
   22092:	d15c      	bne.n	2214e <rpc_transport_ipc_init+0x15a>
   22094:	f8c2 b000 	str.w	fp, [r2]
   22098:	2500      	movs	r5, #0
   2209a:	f04f 0a01 	mov.w	sl, #1
   2209e:	7025      	strb	r5, [r4, #0]
   220a0:	7065      	strb	r5, [r4, #1]
   220a2:	f884 a002 	strb.w	sl, [r4, #2]
   220a6:	70e5      	strb	r5, [r4, #3]
   220a8:	6833      	ldr	r3, [r6, #0]
   220aa:	4640      	mov	r0, r8
   220ac:	691b      	ldr	r3, [r3, #16]
   220ae:	6063      	str	r3, [r4, #4]
   220b0:	6833      	ldr	r3, [r6, #0]
   220b2:	695b      	ldr	r3, [r3, #20]
   220b4:	f8c4 b014 	str.w	fp, [r4, #20]
   220b8:	60a3      	str	r3, [r4, #8]
   220ba:	4b34      	ldr	r3, [pc, #208]	; (2218c <rpc_transport_ipc_init+0x198>)
   220bc:	f8c4 9018 	str.w	r9, [r4, #24]
   220c0:	f8c3 8000 	str.w	r8, [r3]
   220c4:	4b32      	ldr	r3, [pc, #200]	; (22190 <rpc_transport_ipc_init+0x19c>)
   220c6:	60e7      	str	r7, [r4, #12]
   220c8:	601f      	str	r7, [r3, #0]
   220ca:	2308      	movs	r3, #8
   220cc:	f8c4 8010 	str.w	r8, [r4, #16]
   220d0:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
   220d4:	f888 5001 	strb.w	r5, [r8, #1]
   220d8:	f888 5002 	strb.w	r5, [r8, #2]
   220dc:	f888 5003 	strb.w	r5, [r8, #3]
   220e0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   220e4:	707d      	strb	r5, [r7, #1]
   220e6:	70bd      	strb	r5, [r7, #2]
   220e8:	70fd      	strb	r5, [r7, #3]
   220ea:	f005 f8f4 	bl	272d6 <rpc_list_preambles_init>
   220ee:	4638      	mov	r0, r7
   220f0:	f005 f8f1 	bl	272d6 <rpc_list_preambles_init>
   220f4:	4b27      	ldr	r3, [pc, #156]	; (22194 <rpc_transport_ipc_init+0x1a0>)
   220f6:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   220fa:	601a      	str	r2, [r3, #0]
   220fc:	4b26      	ldr	r3, [pc, #152]	; (22198 <rpc_transport_ipc_init+0x1a4>)
   220fe:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
   22102:	601a      	str	r2, [r3, #0]
   22104:	6831      	ldr	r1, [r6, #0]
   22106:	4b25      	ldr	r3, [pc, #148]	; (2219c <rpc_transport_ipc_init+0x1a8>)
   22108:	6019      	str	r1, [r3, #0]
   2210a:	4b25      	ldr	r3, [pc, #148]	; (221a0 <rpc_transport_ipc_init+0x1ac>)
   2210c:	4925      	ldr	r1, [pc, #148]	; (221a4 <rpc_transport_ipc_init+0x1b0>)
   2210e:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
   22112:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
   22116:	4b24      	ldr	r3, [pc, #144]	; (221a8 <rpc_transport_ipc_init+0x1b4>)
   22118:	4c24      	ldr	r4, [pc, #144]	; (221ac <rpc_transport_ipc_init+0x1b8>)
   2211a:	801d      	strh	r5, [r3, #0]
   2211c:	4b24      	ldr	r3, [pc, #144]	; (221b0 <rpc_transport_ipc_init+0x1bc>)
   2211e:	6025      	str	r5, [r4, #0]
   22120:	801d      	strh	r5, [r3, #0]
   22122:	4b24      	ldr	r3, [pc, #144]	; (221b4 <rpc_transport_ipc_init+0x1c0>)
   22124:	f883 a000 	strb.w	sl, [r3]
   22128:	4b23      	ldr	r3, [pc, #140]	; (221b8 <rpc_transport_ipc_init+0x1c4>)
   2212a:	9502      	str	r5, [sp, #8]
   2212c:	611d      	str	r5, [r3, #16]
   2212e:	691b      	ldr	r3, [r3, #16]
   22130:	9302      	str	r3, [sp, #8]
   22132:	9b02      	ldr	r3, [sp, #8]
   22134:	4b12      	ldr	r3, [pc, #72]	; (22180 <rpc_transport_ipc_init+0x18c>)
   22136:	6818      	ldr	r0, [r3, #0]
   22138:	f004 fc9c 	bl	26a74 <nrf_modem_os_sem_take>
   2213c:	b9c8      	cbnz	r0, 22172 <rpc_transport_ipc_init+0x17e>
   2213e:	6824      	ldr	r4, [r4, #0]
   22140:	b9a4      	cbnz	r4, 2216c <rpc_transport_ipc_init+0x178>
   22142:	4b1e      	ldr	r3, [pc, #120]	; (221bc <rpc_transport_ipc_init+0x1c8>)
   22144:	701c      	strb	r4, [r3, #0]
   22146:	4620      	mov	r0, r4
   22148:	b015      	add	sp, #84	; 0x54
   2214a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2214e:	699b      	ldr	r3, [r3, #24]
   22150:	f104 0940 	add.w	r9, r4, #64	; 0x40
   22154:	6463      	str	r3, [r4, #68]	; 0x44
   22156:	6833      	ldr	r3, [r6, #0]
   22158:	4648      	mov	r0, r9
   2215a:	69db      	ldr	r3, [r3, #28]
   2215c:	f8c2 b000 	str.w	fp, [r2]
   22160:	6423      	str	r3, [r4, #64]	; 0x40
   22162:	f001 fb3b 	bl	237dc <ipc_trace_init>
   22166:	e797      	b.n	22098 <rpc_transport_ipc_init+0xa4>
   22168:	f06f 0415 	mvn.w	r4, #21
   2216c:	f7ff f85e 	bl	2122c <nrfx_ipc_uninit>
   22170:	e7e9      	b.n	22146 <rpc_transport_ipc_init+0x152>
   22172:	f06f 0473 	mvn.w	r4, #115	; 0x73
   22176:	e7f9      	b.n	2216c <rpc_transport_ipc_init+0x178>
   22178:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   2217c:	e7e3      	b.n	22146 <rpc_transport_ipc_init+0x152>
   2217e:	bf00      	nop
   22180:	2000d474 	.word	0x2000d474
   22184:	00021e25 	.word	0x00021e25
   22188:	2000d470 	.word	0x2000d470
   2218c:	2000d484 	.word	0x2000d484
   22190:	2000d480 	.word	0x2000d480
   22194:	2000d47c 	.word	0x2000d47c
   22198:	2000d478 	.word	0x2000d478
   2219c:	2000d46c 	.word	0x2000d46c
   221a0:	4002a000 	.word	0x4002a000
   221a4:	000249f0 	.word	0x000249f0
   221a8:	2000d896 	.word	0x2000d896
   221ac:	2000d488 	.word	0x2000d488
   221b0:	2000d894 	.word	0x2000d894
   221b4:	2000dde6 	.word	0x2000dde6
   221b8:	40005600 	.word	0x40005600
   221bc:	2000dde5 	.word	0x2000dde5

000221c0 <rpc_transport_ipc_ctrl_msg_send>:
   221c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   221c2:	4b16      	ldr	r3, [pc, #88]	; (2221c <rpc_transport_ipc_ctrl_msg_send+0x5c>)
   221c4:	6842      	ldr	r2, [r0, #4]
   221c6:	681b      	ldr	r3, [r3, #0]
   221c8:	4c15      	ldr	r4, [pc, #84]	; (22220 <rpc_transport_ipc_ctrl_msg_send+0x60>)
   221ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   221ce:	f042 0201 	orr.w	r2, r2, #1
   221d2:	1ac3      	subs	r3, r0, r3
   221d4:	6042      	str	r2, [r0, #4]
   221d6:	6821      	ldr	r1, [r4, #0]
   221d8:	4a12      	ldr	r2, [pc, #72]	; (22224 <rpc_transport_ipc_ctrl_msg_send+0x64>)
   221da:	f3c3 1389 	ubfx	r3, r3, #6, #10
   221de:	e8d2 5fdf 	ldaexh	r5, [r2]
   221e2:	1c6e      	adds	r6, r5, #1
   221e4:	e8c2 6fd7 	stlexh	r7, r6, [r2]
   221e8:	2f00      	cmp	r7, #0
   221ea:	d1f8      	bne.n	221de <rpc_transport_ipc_ctrl_msg_send+0x1e>
   221ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   221f0:	684a      	ldr	r2, [r1, #4]
   221f2:	b292      	uxth	r2, r2
   221f4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   221f8:	604a      	str	r2, [r1, #4]
   221fa:	6822      	ldr	r2, [r4, #0]
   221fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   22200:	6098      	str	r0, [r3, #8]
   22202:	685a      	ldr	r2, [r3, #4]
   22204:	2003      	movs	r0, #3
   22206:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2220a:	f042 0201 	orr.w	r2, r2, #1
   2220e:	605a      	str	r2, [r3, #4]
   22210:	f004 fc24 	bl	26a5c <nrf_modem_os_busywait>
   22214:	2201      	movs	r2, #1
   22216:	4b04      	ldr	r3, [pc, #16]	; (22228 <rpc_transport_ipc_ctrl_msg_send+0x68>)
   22218:	605a      	str	r2, [r3, #4]
   2221a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2221c:	2000d478 	.word	0x2000d478
   22220:	2000d480 	.word	0x2000d480
   22224:	2000d896 	.word	0x2000d896
   22228:	4002a000 	.word	0x4002a000

0002222c <rpc_transport_ipc_request_shutdown>:
   2222c:	b510      	push	{r4, lr}
   2222e:	f7ff fead 	bl	21f8c <rpc_transport_ipc_ctrl_msg_alloc>
   22232:	2401      	movs	r4, #1
   22234:	2200      	movs	r2, #0
   22236:	2103      	movs	r1, #3
   22238:	7004      	strb	r4, [r0, #0]
   2223a:	7081      	strb	r1, [r0, #2]
   2223c:	7042      	strb	r2, [r0, #1]
   2223e:	70c2      	strb	r2, [r0, #3]
   22240:	f7ff ffbe 	bl	221c0 <rpc_transport_ipc_ctrl_msg_send>
   22244:	4b05      	ldr	r3, [pc, #20]	; (2225c <rpc_transport_ipc_request_shutdown+0x30>)
   22246:	701c      	strb	r4, [r3, #0]
   22248:	f005 f858 	bl	272fc <rpc_transport_ipc_data_rx_suspend>
   2224c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22250:	4b03      	ldr	r3, [pc, #12]	; (22260 <rpc_transport_ipc_request_shutdown+0x34>)
   22252:	f247 5130 	movw	r1, #30000	; 0x7530
   22256:	6818      	ldr	r0, [r3, #0]
   22258:	f004 bc0c 	b.w	26a74 <nrf_modem_os_sem_take>
   2225c:	2000dde5 	.word	0x2000dde5
   22260:	2000d474 	.word	0x2000d474

00022264 <rpc_transport_ipc_msg_data_rx_free>:
   22264:	b510      	push	{r4, lr}
   22266:	4b0a      	ldr	r3, [pc, #40]	; (22290 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
   22268:	4604      	mov	r4, r0
   2226a:	781b      	ldrb	r3, [r3, #0]
   2226c:	2b03      	cmp	r3, #3
   2226e:	d00e      	beq.n	2228e <rpc_transport_ipc_msg_data_rx_free+0x2a>
   22270:	f7ff fe8c 	bl	21f8c <rpc_transport_ipc_ctrl_msg_alloc>
   22274:	b158      	cbz	r0, 2228e <rpc_transport_ipc_msg_data_rx_free+0x2a>
   22276:	2101      	movs	r1, #1
   22278:	2200      	movs	r2, #0
   2227a:	7001      	strb	r1, [r0, #0]
   2227c:	2102      	movs	r1, #2
   2227e:	6084      	str	r4, [r0, #8]
   22280:	7042      	strb	r2, [r0, #1]
   22282:	7081      	strb	r1, [r0, #2]
   22284:	70c2      	strb	r2, [r0, #3]
   22286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2228a:	f7ff bf99 	b.w	221c0 <rpc_transport_ipc_ctrl_msg_send>
   2228e:	bd10      	pop	{r4, pc}
   22290:	2000dde6 	.word	0x2000dde6

00022294 <sock_init>:
   22294:	f44f 7250 	mov.w	r2, #832	; 0x340
   22298:	2100      	movs	r1, #0
   2229a:	b508      	push	{r3, lr}
   2229c:	4808      	ldr	r0, [pc, #32]	; (222c0 <sock_init+0x2c>)
   2229e:	f006 fa89 	bl	287b4 <memset>
   222a2:	2300      	movs	r3, #0
   222a4:	4619      	mov	r1, r3
   222a6:	4a07      	ldr	r2, [pc, #28]	; (222c4 <sock_init+0x30>)
   222a8:	4807      	ldr	r0, [pc, #28]	; (222c8 <sock_init+0x34>)
   222aa:	7013      	strb	r3, [r2, #0]
   222ac:	4a04      	ldr	r2, [pc, #16]	; (222c0 <sock_init+0x2c>)
   222ae:	3301      	adds	r3, #1
   222b0:	2b08      	cmp	r3, #8
   222b2:	e9c2 0100 	strd	r0, r1, [r2]
   222b6:	6091      	str	r1, [r2, #8]
   222b8:	f102 0268 	add.w	r2, r2, #104	; 0x68
   222bc:	d1f7      	bne.n	222ae <sock_init+0x1a>
   222be:	bd08      	pop	{r3, pc}
   222c0:	2000d494 	.word	0x2000d494
   222c4:	2000dde7 	.word	0x2000dde7
   222c8:	1badf11e 	.word	0x1badf11e

000222cc <sock_open>:
   222cc:	b570      	push	{r4, r5, r6, lr}
   222ce:	2300      	movs	r3, #0
   222d0:	2468      	movs	r4, #104	; 0x68
   222d2:	4a0e      	ldr	r2, [pc, #56]	; (2230c <sock_open+0x40>)
   222d4:	4d0e      	ldr	r5, [pc, #56]	; (22310 <sock_open+0x44>)
   222d6:	fb04 f103 	mul.w	r1, r4, r3
   222da:	5856      	ldr	r6, [r2, r1]
   222dc:	1888      	adds	r0, r1, r2
   222de:	42ae      	cmp	r6, r5
   222e0:	d10e      	bne.n	22300 <sock_open+0x34>
   222e2:	f04f 33ff 	mov.w	r3, #4294967295
   222e6:	5053      	str	r3, [r2, r1]
   222e8:	4a0a      	ldr	r2, [pc, #40]	; (22314 <sock_open+0x48>)
   222ea:	7f03      	ldrb	r3, [r0, #28]
   222ec:	7812      	ldrb	r2, [r2, #0]
   222ee:	f362 1386 	bfi	r3, r2, #6, #1
   222f2:	7703      	strb	r3, [r0, #28]
   222f4:	2302      	movs	r3, #2
   222f6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   222fa:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   222fe:	bd70      	pop	{r4, r5, r6, pc}
   22300:	3301      	adds	r3, #1
   22302:	2b08      	cmp	r3, #8
   22304:	d1e7      	bne.n	222d6 <sock_open+0xa>
   22306:	2000      	movs	r0, #0
   22308:	e7f9      	b.n	222fe <sock_open+0x32>
   2230a:	bf00      	nop
   2230c:	2000d494 	.word	0x2000d494
   22310:	1badf11e 	.word	0x1badf11e
   22314:	2000dde7 	.word	0x2000dde7

00022318 <sock_find>:
   22318:	b530      	push	{r4, r5, lr}
   2231a:	4602      	mov	r2, r0
   2231c:	2300      	movs	r3, #0
   2231e:	2568      	movs	r5, #104	; 0x68
   22320:	4905      	ldr	r1, [pc, #20]	; (22338 <sock_find+0x20>)
   22322:	fb05 f403 	mul.w	r4, r5, r3
   22326:	1860      	adds	r0, r4, r1
   22328:	590c      	ldr	r4, [r1, r4]
   2232a:	4294      	cmp	r4, r2
   2232c:	d003      	beq.n	22336 <sock_find+0x1e>
   2232e:	3301      	adds	r3, #1
   22330:	2b08      	cmp	r3, #8
   22332:	d1f6      	bne.n	22322 <sock_find+0xa>
   22334:	2000      	movs	r0, #0
   22336:	bd30      	pop	{r4, r5, pc}
   22338:	2000d494 	.word	0x2000d494

0002233c <_sock_close>:
   2233c:	b538      	push	{r3, r4, r5, lr}
   2233e:	f7ff ffeb 	bl	22318 <sock_find>
   22342:	4604      	mov	r4, r0
   22344:	1d05      	adds	r5, r0, #4
   22346:	4628      	mov	r0, r5
   22348:	f005 f9b6 	bl	276b8 <pkt_flush>
   2234c:	6c20      	ldr	r0, [r4, #64]	; 0x40
   2234e:	b108      	cbz	r0, 22354 <_sock_close+0x18>
   22350:	f7fb fe00 	bl	1df54 <nrf_modem_os_free>
   22354:	2264      	movs	r2, #100	; 0x64
   22356:	2100      	movs	r1, #0
   22358:	4628      	mov	r0, r5
   2235a:	f006 fa2b 	bl	287b4 <memset>
   2235e:	4b01      	ldr	r3, [pc, #4]	; (22364 <_sock_close+0x28>)
   22360:	6023      	str	r3, [r4, #0]
   22362:	bd38      	pop	{r3, r4, r5, pc}
   22364:	1badf11e 	.word	0x1badf11e

00022368 <sock_flow_control_set>:
   22368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2236c:	1e02      	subs	r2, r0, #0
   2236e:	4c10      	ldr	r4, [pc, #64]	; (223b0 <sock_flow_control_set+0x48>)
   22370:	bf18      	it	ne
   22372:	2201      	movne	r2, #1
   22374:	4606      	mov	r6, r0
   22376:	2500      	movs	r5, #0
   22378:	46a0      	mov	r8, r4
   2237a:	f04f 0968 	mov.w	r9, #104	; 0x68
   2237e:	4b0d      	ldr	r3, [pc, #52]	; (223b4 <sock_flow_control_set+0x4c>)
   22380:	4f0d      	ldr	r7, [pc, #52]	; (223b8 <sock_flow_control_set+0x50>)
   22382:	701a      	strb	r2, [r3, #0]
   22384:	6823      	ldr	r3, [r4, #0]
   22386:	42bb      	cmp	r3, r7
   22388:	d00a      	beq.n	223a0 <sock_flow_control_set+0x38>
   2238a:	fb09 8305 	mla	r3, r9, r5, r8
   2238e:	7f1a      	ldrb	r2, [r3, #28]
   22390:	f366 1286 	bfi	r2, r6, #6, #1
   22394:	771a      	strb	r2, [r3, #28]
   22396:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22398:	b113      	cbz	r3, 223a0 <sock_flow_control_set+0x38>
   2239a:	4620      	mov	r0, r4
   2239c:	f005 f843 	bl	27426 <sock_pollcb>
   223a0:	3501      	adds	r5, #1
   223a2:	2d08      	cmp	r5, #8
   223a4:	f104 0468 	add.w	r4, r4, #104	; 0x68
   223a8:	d1ec      	bne.n	22384 <sock_flow_control_set+0x1c>
   223aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   223ae:	bf00      	nop
   223b0:	2000d494 	.word	0x2000d494
   223b4:	2000dde7 	.word	0x2000dde7
   223b8:	1badf11e 	.word	0x1badf11e

000223bc <sock_proto_is_valid>:
   223bc:	2811      	cmp	r0, #17
   223be:	dc06      	bgt.n	223ce <sock_proto_is_valid+0x12>
   223c0:	2800      	cmp	r0, #0
   223c2:	db0d      	blt.n	223e0 <sock_proto_is_valid+0x24>
   223c4:	4b08      	ldr	r3, [pc, #32]	; (223e8 <sock_proto_is_valid+0x2c>)
   223c6:	40c3      	lsrs	r3, r0
   223c8:	f003 0001 	and.w	r0, r3, #1
   223cc:	4770      	bx	lr
   223ce:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   223d2:	d007      	beq.n	223e4 <sock_proto_is_valid+0x28>
   223d4:	f240 1311 	movw	r3, #273	; 0x111
   223d8:	1ac3      	subs	r3, r0, r3
   223da:	4258      	negs	r0, r3
   223dc:	4158      	adcs	r0, r3
   223de:	4770      	bx	lr
   223e0:	2000      	movs	r0, #0
   223e2:	4770      	bx	lr
   223e4:	2001      	movs	r0, #1
   223e6:	4770      	bx	lr
   223e8:	00020041 	.word	0x00020041

000223ec <on_getaddrinfo_res>:
   223ec:	2301      	movs	r3, #1
   223ee:	4a03      	ldr	r2, [pc, #12]	; (223fc <on_getaddrinfo_res+0x10>)
   223f0:	7013      	strb	r3, [r2, #0]
   223f2:	4a03      	ldr	r2, [pc, #12]	; (22400 <on_getaddrinfo_res+0x14>)
   223f4:	6010      	str	r0, [r2, #0]
   223f6:	4618      	mov	r0, r3
   223f8:	4770      	bx	lr
   223fa:	bf00      	nop
   223fc:	2000dde8 	.word	0x2000dde8
   22400:	2000d7d4 	.word	0x2000d7d4

00022404 <addrinfo_init>:
   22404:	2201      	movs	r2, #1
   22406:	b508      	push	{r3, lr}
   22408:	4611      	mov	r1, r2
   2240a:	4804      	ldr	r0, [pc, #16]	; (2241c <addrinfo_init+0x18>)
   2240c:	f7fb fd62 	bl	1ded4 <nrf_modem_os_sem_init>
   22410:	2800      	cmp	r0, #0
   22412:	bf18      	it	ne
   22414:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   22418:	bd08      	pop	{r3, pc}
   2241a:	bf00      	nop
   2241c:	2000d7d8 	.word	0x2000d7d8

00022420 <nrf_getaddrinfo>:
   22420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22424:	b085      	sub	sp, #20
   22426:	4680      	mov	r8, r0
   22428:	460f      	mov	r7, r1
   2242a:	4616      	mov	r6, r2
   2242c:	461d      	mov	r5, r3
   2242e:	f001 f9cd 	bl	237cc <nrf_modem_state_is_initialized>
   22432:	b928      	cbnz	r0, 22440 <nrf_getaddrinfo+0x20>
   22434:	2001      	movs	r0, #1
   22436:	f004 fb13 	bl	26a60 <nrf_modem_os_errno_set>
   2243a:	f06f 040a 	mvn.w	r4, #10
   2243e:	e01c      	b.n	2247a <nrf_getaddrinfo+0x5a>
   22440:	ea58 0307 	orrs.w	r3, r8, r7
   22444:	f000 8164 	beq.w	22710 <nrf_getaddrinfo+0x2f0>
   22448:	b31e      	cbz	r6, 22492 <nrf_getaddrinfo+0x72>
   2244a:	6833      	ldr	r3, [r6, #0]
   2244c:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   22450:	f023 0302 	bic.w	r3, r3, #2
   22454:	2b00      	cmp	r3, #0
   22456:	f040 815e 	bne.w	22716 <nrf_getaddrinfo+0x2f6>
   2245a:	6870      	ldr	r0, [r6, #4]
   2245c:	b938      	cbnz	r0, 2246e <nrf_getaddrinfo+0x4e>
   2245e:	68b0      	ldr	r0, [r6, #8]
   22460:	b178      	cbz	r0, 22482 <nrf_getaddrinfo+0x62>
   22462:	f005 f8c6 	bl	275f2 <sock_type_is_valid>
   22466:	b960      	cbnz	r0, 22482 <nrf_getaddrinfo+0x62>
   22468:	f06f 0406 	mvn.w	r4, #6
   2246c:	e005      	b.n	2247a <nrf_getaddrinfo+0x5a>
   2246e:	f005 f8ba 	bl	275e6 <sock_family_is_valid>
   22472:	2800      	cmp	r0, #0
   22474:	d1f3      	bne.n	2245e <nrf_getaddrinfo+0x3e>
   22476:	f06f 0405 	mvn.w	r4, #5
   2247a:	4620      	mov	r0, r4
   2247c:	b005      	add	sp, #20
   2247e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22482:	68f0      	ldr	r0, [r6, #12]
   22484:	b128      	cbz	r0, 22492 <nrf_getaddrinfo+0x72>
   22486:	68b1      	ldr	r1, [r6, #8]
   22488:	f005 f8b9 	bl	275fe <sock_proto_supports_type>
   2248c:	b908      	cbnz	r0, 22492 <nrf_getaddrinfo+0x72>
   2248e:	206b      	movs	r0, #107	; 0x6b
   22490:	e7d1      	b.n	22436 <nrf_getaddrinfo+0x16>
   22492:	4ba4      	ldr	r3, [pc, #656]	; (22724 <nrf_getaddrinfo+0x304>)
   22494:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   22498:	6818      	ldr	r0, [r3, #0]
   2249a:	f004 faeb 	bl	26a74 <nrf_modem_os_sem_take>
   2249e:	4604      	mov	r4, r0
   224a0:	2800      	cmp	r0, #0
   224a2:	f040 813b 	bne.w	2271c <nrf_getaddrinfo+0x2fc>
   224a6:	2f00      	cmp	r7, #0
   224a8:	d057      	beq.n	2255a <nrf_getaddrinfo+0x13a>
   224aa:	b326      	cbz	r6, 224f6 <nrf_getaddrinfo+0xd6>
   224ac:	6833      	ldr	r3, [r6, #0]
   224ae:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   224b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   224b6:	d11e      	bne.n	224f6 <nrf_getaddrinfo+0xd6>
   224b8:	6833      	ldr	r3, [r6, #0]
   224ba:	04db      	lsls	r3, r3, #19
   224bc:	d551      	bpl.n	22562 <nrf_getaddrinfo+0x142>
   224be:	213a      	movs	r1, #58	; 0x3a
   224c0:	4638      	mov	r0, r7
   224c2:	f006 f97f 	bl	287c4 <strchr>
   224c6:	4682      	mov	sl, r0
   224c8:	b120      	cbz	r0, 224d4 <nrf_getaddrinfo+0xb4>
   224ca:	4897      	ldr	r0, [pc, #604]	; (22728 <nrf_getaddrinfo+0x308>)
   224cc:	f7f6 fd8e 	bl	18fec <strlen>
   224d0:	eb0a 0700 	add.w	r7, sl, r0
   224d4:	4638      	mov	r0, r7
   224d6:	4995      	ldr	r1, [pc, #596]	; (2272c <nrf_getaddrinfo+0x30c>)
   224d8:	f006 f9ba 	bl	28850 <strstr>
   224dc:	4682      	mov	sl, r0
   224de:	2800      	cmp	r0, #0
   224e0:	d037      	beq.n	22552 <nrf_getaddrinfo+0x132>
   224e2:	4892      	ldr	r0, [pc, #584]	; (2272c <nrf_getaddrinfo+0x30c>)
   224e4:	f7f6 fd82 	bl	18fec <strlen>
   224e8:	220a      	movs	r2, #10
   224ea:	2100      	movs	r1, #0
   224ec:	4450      	add	r0, sl
   224ee:	f002 fdc5 	bl	2507c <strtol>
   224f2:	4682      	mov	sl, r0
   224f4:	e037      	b.n	22566 <nrf_getaddrinfo+0x146>
   224f6:	220a      	movs	r2, #10
   224f8:	2100      	movs	r1, #0
   224fa:	4638      	mov	r0, r7
   224fc:	f002 fed8 	bl	252b0 <strtoul>
   22500:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   22504:	1e42      	subs	r2, r0, #1
   22506:	429a      	cmp	r2, r3
   22508:	f200 80ff 	bhi.w	2270a <nrf_getaddrinfo+0x2ea>
   2250c:	4a88      	ldr	r2, [pc, #544]	; (22730 <nrf_getaddrinfo+0x310>)
   2250e:	0203      	lsls	r3, r0, #8
   22510:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   22514:	8013      	strh	r3, [r2, #0]
   22516:	2e00      	cmp	r6, #0
   22518:	d1ce      	bne.n	224b8 <nrf_getaddrinfo+0x98>
   2251a:	2300      	movs	r3, #0
   2251c:	2101      	movs	r1, #1
   2251e:	4a85      	ldr	r2, [pc, #532]	; (22734 <nrf_getaddrinfo+0x314>)
   22520:	f04f 3aff 	mov.w	sl, #4294967295
   22524:	6013      	str	r3, [r2, #0]
   22526:	4a84      	ldr	r2, [pc, #528]	; (22738 <nrf_getaddrinfo+0x318>)
   22528:	6011      	str	r1, [r2, #0]
   2252a:	2106      	movs	r1, #6
   2252c:	4a83      	ldr	r2, [pc, #524]	; (2273c <nrf_getaddrinfo+0x31c>)
   2252e:	6011      	str	r1, [r2, #0]
   22530:	4f83      	ldr	r7, [pc, #524]	; (22740 <nrf_getaddrinfo+0x320>)
   22532:	4640      	mov	r0, r8
   22534:	603b      	str	r3, [r7, #0]
   22536:	f1b8 0f00 	cmp.w	r8, #0
   2253a:	d173      	bne.n	22624 <nrf_getaddrinfo+0x204>
   2253c:	f004 ff06 	bl	2734c <rpc_client_msg_alloc>
   22540:	4606      	mov	r6, r0
   22542:	bb20      	cbnz	r0, 2258e <nrf_getaddrinfo+0x16e>
   22544:	f06f 0409 	mvn.w	r4, #9
   22548:	4b76      	ldr	r3, [pc, #472]	; (22724 <nrf_getaddrinfo+0x304>)
   2254a:	6818      	ldr	r0, [r3, #0]
   2254c:	f004 fa90 	bl	26a70 <nrf_modem_os_sem_give>
   22550:	e793      	b.n	2247a <nrf_getaddrinfo+0x5a>
   22552:	4601      	mov	r1, r0
   22554:	220a      	movs	r2, #10
   22556:	4638      	mov	r0, r7
   22558:	e7c9      	b.n	224ee <nrf_getaddrinfo+0xce>
   2255a:	4b75      	ldr	r3, [pc, #468]	; (22730 <nrf_getaddrinfo+0x310>)
   2255c:	8018      	strh	r0, [r3, #0]
   2255e:	2e00      	cmp	r6, #0
   22560:	d0db      	beq.n	2251a <nrf_getaddrinfo+0xfa>
   22562:	f04f 3aff 	mov.w	sl, #4294967295
   22566:	6870      	ldr	r0, [r6, #4]
   22568:	b108      	cbz	r0, 2256e <nrf_getaddrinfo+0x14e>
   2256a:	f000 fe15 	bl	23198 <nrf_af_to_rpc_af>
   2256e:	4b71      	ldr	r3, [pc, #452]	; (22734 <nrf_getaddrinfo+0x314>)
   22570:	4a71      	ldr	r2, [pc, #452]	; (22738 <nrf_getaddrinfo+0x318>)
   22572:	6018      	str	r0, [r3, #0]
   22574:	68b3      	ldr	r3, [r6, #8]
   22576:	2b00      	cmp	r3, #0
   22578:	bf08      	it	eq
   2257a:	2301      	moveq	r3, #1
   2257c:	6013      	str	r3, [r2, #0]
   2257e:	68f3      	ldr	r3, [r6, #12]
   22580:	4a6e      	ldr	r2, [pc, #440]	; (2273c <nrf_getaddrinfo+0x31c>)
   22582:	2b00      	cmp	r3, #0
   22584:	bf08      	it	eq
   22586:	2306      	moveq	r3, #6
   22588:	6013      	str	r3, [r2, #0]
   2258a:	6833      	ldr	r3, [r6, #0]
   2258c:	e7d0      	b.n	22530 <nrf_getaddrinfo+0x110>
   2258e:	f8c0 a010 	str.w	sl, [r0, #16]
   22592:	4b68      	ldr	r3, [pc, #416]	; (22734 <nrf_getaddrinfo+0x314>)
   22594:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 22738 <nrf_getaddrinfo+0x318>
   22598:	681b      	ldr	r3, [r3, #0]
   2259a:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 2273c <nrf_getaddrinfo+0x31c>
   2259e:	61b3      	str	r3, [r6, #24]
   225a0:	f8db 3000 	ldr.w	r3, [fp]
   225a4:	4632      	mov	r2, r6
   225a6:	61f3      	str	r3, [r6, #28]
   225a8:	f8da 3000 	ldr.w	r3, [sl]
   225ac:	f247 010d 	movw	r1, #28685	; 0x700d
   225b0:	6233      	str	r3, [r6, #32]
   225b2:	683b      	ldr	r3, [r7, #0]
   225b4:	2004      	movs	r0, #4
   225b6:	6173      	str	r3, [r6, #20]
   225b8:	f004 fee4 	bl	27384 <rpc_client_msg_send>
   225bc:	2300      	movs	r3, #0
   225be:	4e61      	ldr	r6, [pc, #388]	; (22744 <nrf_getaddrinfo+0x324>)
   225c0:	7033      	strb	r3, [r6, #0]
   225c2:	f04f 33ff 	mov.w	r3, #4294967295
   225c6:	9303      	str	r3, [sp, #12]
   225c8:	7833      	ldrb	r3, [r6, #0]
   225ca:	2b01      	cmp	r3, #1
   225cc:	d13e      	bne.n	2264c <nrf_getaddrinfo+0x22c>
   225ce:	f8df 8178 	ldr.w	r8, [pc, #376]	; 22748 <nrf_getaddrinfo+0x328>
   225d2:	f8d8 3000 	ldr.w	r3, [r8]
   225d6:	6958      	ldr	r0, [r3, #20]
   225d8:	2800      	cmp	r0, #0
   225da:	f040 8092 	bne.w	22702 <nrf_getaddrinfo+0x2e2>
   225de:	2020      	movs	r0, #32
   225e0:	f8d3 9000 	ldr.w	r9, [r3]
   225e4:	f7fb fcae 	bl	1df44 <nrf_modem_os_alloc>
   225e8:	6028      	str	r0, [r5, #0]
   225ea:	b170      	cbz	r0, 2260a <nrf_getaddrinfo+0x1ea>
   225ec:	f109 0318 	add.w	r3, r9, #24
   225f0:	4a4f      	ldr	r2, [pc, #316]	; (22730 <nrf_getaddrinfo+0x310>)
   225f2:	9301      	str	r3, [sp, #4]
   225f4:	4618      	mov	r0, r3
   225f6:	8812      	ldrh	r2, [r2, #0]
   225f8:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   225fc:	f004 feda 	bl	273b4 <sockaddr_init>
   22600:	4606      	mov	r6, r0
   22602:	bb78      	cbnz	r0, 22664 <nrf_getaddrinfo+0x244>
   22604:	6828      	ldr	r0, [r5, #0]
   22606:	f7fb fca5 	bl	1df54 <nrf_modem_os_free>
   2260a:	f06f 0409 	mvn.w	r4, #9
   2260e:	f8d8 3000 	ldr.w	r3, [r8]
   22612:	6818      	ldr	r0, [r3, #0]
   22614:	b108      	cbz	r0, 2261a <nrf_getaddrinfo+0x1fa>
   22616:	f004 febf 	bl	27398 <rpc_client_msg_data_rx_free>
   2261a:	f8d8 0000 	ldr.w	r0, [r8]
   2261e:	f004 feb8 	bl	27392 <rpc_client_msg_rx_free>
   22622:	e791      	b.n	22548 <nrf_getaddrinfo+0x128>
   22624:	f7f6 fce2 	bl	18fec <strlen>
   22628:	f004 fe90 	bl	2734c <rpc_client_msg_alloc>
   2262c:	4606      	mov	r6, r0
   2262e:	2800      	cmp	r0, #0
   22630:	d088      	beq.n	22544 <nrf_getaddrinfo+0x124>
   22632:	f8c0 a010 	str.w	sl, [r0, #16]
   22636:	f8d0 a000 	ldr.w	sl, [r0]
   2263a:	4640      	mov	r0, r8
   2263c:	f7f6 fcd6 	bl	18fec <strlen>
   22640:	4641      	mov	r1, r8
   22642:	4602      	mov	r2, r0
   22644:	4650      	mov	r0, sl
   22646:	f006 f8a8 	bl	2879a <memcpy>
   2264a:	e7a2      	b.n	22592 <nrf_getaddrinfo+0x172>
   2264c:	2002      	movs	r0, #2
   2264e:	a903      	add	r1, sp, #12
   22650:	f7fb fb7e 	bl	1dd50 <nrf_modem_os_timedwait>
   22654:	2800      	cmp	r0, #0
   22656:	d0b7      	beq.n	225c8 <nrf_getaddrinfo+0x1a8>
   22658:	206e      	movs	r0, #110	; 0x6e
   2265a:	f004 fa01 	bl	26a60 <nrf_modem_os_errno_set>
   2265e:	f06f 040a 	mvn.w	r4, #10
   22662:	e771      	b.n	22548 <nrf_getaddrinfo+0x128>
   22664:	f8d9 2008 	ldr.w	r2, [r9, #8]
   22668:	2a01      	cmp	r2, #1
   2266a:	d004      	beq.n	22676 <nrf_getaddrinfo+0x256>
   2266c:	2a02      	cmp	r2, #2
   2266e:	d01a      	beq.n	226a6 <nrf_getaddrinfo+0x286>
   22670:	f06f 0405 	mvn.w	r4, #5
   22674:	e7cb      	b.n	2260e <nrf_getaddrinfo+0x1ee>
   22676:	2110      	movs	r1, #16
   22678:	682a      	ldr	r2, [r5, #0]
   2267a:	6111      	str	r1, [r2, #16]
   2267c:	683a      	ldr	r2, [r7, #0]
   2267e:	6829      	ldr	r1, [r5, #0]
   22680:	f012 0202 	ands.w	r2, r2, #2
   22684:	d03b      	beq.n	226fe <nrf_getaddrinfo+0x2de>
   22686:	9101      	str	r1, [sp, #4]
   22688:	f8b9 0016 	ldrh.w	r0, [r9, #22]
   2268c:	3001      	adds	r0, #1
   2268e:	f7fb fc59 	bl	1df44 <nrf_modem_os_alloc>
   22692:	9901      	ldr	r1, [sp, #4]
   22694:	6188      	str	r0, [r1, #24]
   22696:	682a      	ldr	r2, [r5, #0]
   22698:	6990      	ldr	r0, [r2, #24]
   2269a:	b938      	cbnz	r0, 226ac <nrf_getaddrinfo+0x28c>
   2269c:	4628      	mov	r0, r5
   2269e:	f7fb fc59 	bl	1df54 <nrf_modem_os_free>
   226a2:	4630      	mov	r0, r6
   226a4:	e7af      	b.n	22606 <nrf_getaddrinfo+0x1e6>
   226a6:	2124      	movs	r1, #36	; 0x24
   226a8:	682a      	ldr	r2, [r5, #0]
   226aa:	e7e6      	b.n	2267a <nrf_getaddrinfo+0x25a>
   226ac:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   226b0:	f109 0318 	add.w	r3, r9, #24
   226b4:	440b      	add	r3, r1
   226b6:	4619      	mov	r1, r3
   226b8:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   226bc:	f006 f86d 	bl	2879a <memcpy>
   226c0:	2000      	movs	r0, #0
   226c2:	6829      	ldr	r1, [r5, #0]
   226c4:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   226c8:	6989      	ldr	r1, [r1, #24]
   226ca:	5488      	strb	r0, [r1, r2]
   226cc:	682a      	ldr	r2, [r5, #0]
   226ce:	9201      	str	r2, [sp, #4]
   226d0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   226d4:	f005 fbd8 	bl	27e88 <rpc_af_to_nrf_af>
   226d8:	9a01      	ldr	r2, [sp, #4]
   226da:	6050      	str	r0, [r2, #4]
   226dc:	682b      	ldr	r3, [r5, #0]
   226de:	f8db 2000 	ldr.w	r2, [fp]
   226e2:	609a      	str	r2, [r3, #8]
   226e4:	682b      	ldr	r3, [r5, #0]
   226e6:	f8da 2000 	ldr.w	r2, [sl]
   226ea:	60da      	str	r2, [r3, #12]
   226ec:	682b      	ldr	r3, [r5, #0]
   226ee:	683a      	ldr	r2, [r7, #0]
   226f0:	601a      	str	r2, [r3, #0]
   226f2:	2200      	movs	r2, #0
   226f4:	682b      	ldr	r3, [r5, #0]
   226f6:	615e      	str	r6, [r3, #20]
   226f8:	682b      	ldr	r3, [r5, #0]
   226fa:	61da      	str	r2, [r3, #28]
   226fc:	e787      	b.n	2260e <nrf_getaddrinfo+0x1ee>
   226fe:	618a      	str	r2, [r1, #24]
   22700:	e7e4      	b.n	226cc <nrf_getaddrinfo+0x2ac>
   22702:	f005 fc07 	bl	27f14 <rpc_error_to_nrf_gai_errno>
   22706:	4604      	mov	r4, r0
   22708:	e781      	b.n	2260e <nrf_getaddrinfo+0x1ee>
   2270a:	f06f 0407 	mvn.w	r4, #7
   2270e:	e71b      	b.n	22548 <nrf_getaddrinfo+0x128>
   22710:	f06f 0401 	mvn.w	r4, #1
   22714:	e6b1      	b.n	2247a <nrf_getaddrinfo+0x5a>
   22716:	f04f 34ff 	mov.w	r4, #4294967295
   2271a:	e6ae      	b.n	2247a <nrf_getaddrinfo+0x5a>
   2271c:	f06f 0402 	mvn.w	r4, #2
   22720:	e6ab      	b.n	2247a <nrf_getaddrinfo+0x5a>
   22722:	bf00      	nop
   22724:	2000d7d8 	.word	0x2000d7d8
   22728:	0002b441 	.word	0x0002b441
   2272c:	0002b42f 	.word	0x0002b42f
   22730:	2000d898 	.word	0x2000d898
   22734:	2000d7e4 	.word	0x2000d7e4
   22738:	2000d7e0 	.word	0x2000d7e0
   2273c:	2000d7dc 	.word	0x2000d7dc
   22740:	2000d7e8 	.word	0x2000d7e8
   22744:	2000dde8 	.word	0x2000dde8
   22748:	2000d7d4 	.word	0x2000d7d4

0002274c <rpc_ip_event_handler>:
   2274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2274e:	f248 030f 	movw	r3, #32783	; 0x800f
   22752:	4299      	cmp	r1, r3
   22754:	4606      	mov	r6, r0
   22756:	460d      	mov	r5, r1
   22758:	d03b      	beq.n	227d2 <rpc_ip_event_handler+0x86>
   2275a:	d822      	bhi.n	227a2 <rpc_ip_event_handler+0x56>
   2275c:	f248 030d 	movw	r3, #32781	; 0x800d
   22760:	4299      	cmp	r1, r3
   22762:	d02f      	beq.n	227c4 <rpc_ip_event_handler+0x78>
   22764:	f248 030e 	movw	r3, #32782	; 0x800e
   22768:	4299      	cmp	r1, r3
   2276a:	d02f      	beq.n	227cc <rpc_ip_event_handler+0x80>
   2276c:	6900      	ldr	r0, [r0, #16]
   2276e:	f7ff fdd3 	bl	22318 <sock_find>
   22772:	4604      	mov	r4, r0
   22774:	b308      	cbz	r0, 227ba <rpc_ip_event_handler+0x6e>
   22776:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2277a:	d91e      	bls.n	227ba <rpc_ip_event_handler+0x6e>
   2277c:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
   22780:	3d01      	subs	r5, #1
   22782:	2d0b      	cmp	r5, #11
   22784:	d819      	bhi.n	227ba <rpc_ip_event_handler+0x6e>
   22786:	e8df f015 	tbh	[pc, r5, lsl #1]
   2278a:	0090      	.short	0x0090
   2278c:	009400b3 	.word	0x009400b3
   22790:	00940094 	.word	0x00940094
   22794:	00ee00ee 	.word	0x00ee00ee
   22798:	00990094 	.word	0x00990094
   2279c:	00180018 	.word	0x00180018
   227a0:	00d2      	.short	0x00d2
   227a2:	f249 0304 	movw	r3, #36868	; 0x9004
   227a6:	4299      	cmp	r1, r3
   227a8:	d016      	beq.n	227d8 <rpc_ip_event_handler+0x8c>
   227aa:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   227ae:	d924      	bls.n	227fa <rpc_ip_event_handler+0xae>
   227b0:	68c0      	ldr	r0, [r0, #12]
   227b2:	f7ff fdb1 	bl	22318 <sock_find>
   227b6:	4604      	mov	r4, r0
   227b8:	bb70      	cbnz	r0, 22818 <rpc_ip_event_handler+0xcc>
   227ba:	6830      	ldr	r0, [r6, #0]
   227bc:	b1b0      	cbz	r0, 227ec <rpc_ip_event_handler+0xa0>
   227be:	f004 fdeb 	bl	27398 <rpc_client_msg_data_rx_free>
   227c2:	e013      	b.n	227ec <rpc_ip_event_handler+0xa0>
   227c4:	f7ff fe12 	bl	223ec <on_getaddrinfo_res>
   227c8:	b2c0      	uxtb	r0, r0
   227ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   227cc:	f004 ff95 	bl	276fa <on_getifaddrs_res>
   227d0:	e7fa      	b.n	227c8 <rpc_ip_event_handler+0x7c>
   227d2:	f004 ff7f 	bl	276d4 <on_conf_dnssrv_res>
   227d6:	e7f7      	b.n	227c8 <rpc_ip_event_handler+0x7c>
   227d8:	6903      	ldr	r3, [r0, #16]
   227da:	2b03      	cmp	r3, #3
   227dc:	d806      	bhi.n	227ec <rpc_ip_event_handler+0xa0>
   227de:	e8df f003 	tbb	[pc, r3]
   227e2:	0a02      	.short	0x0a02
   227e4:	0702      	.short	0x0702
   227e6:	2000      	movs	r0, #0
   227e8:	f7ff fdbe 	bl	22368 <sock_flow_control_set>
   227ec:	2000      	movs	r0, #0
   227ee:	e7ec      	b.n	227ca <rpc_ip_event_handler+0x7e>
   227f0:	2201      	movs	r2, #1
   227f2:	4b65      	ldr	r3, [pc, #404]	; (22988 <rpc_ip_event_handler+0x23c>)
   227f4:	701a      	strb	r2, [r3, #0]
   227f6:	2001      	movs	r0, #1
   227f8:	e7f6      	b.n	227e8 <rpc_ip_event_handler+0x9c>
   227fa:	6900      	ldr	r0, [r0, #16]
   227fc:	f7ff fd8c 	bl	22318 <sock_find>
   22800:	4604      	mov	r4, r0
   22802:	2800      	cmp	r0, #0
   22804:	d0d9      	beq.n	227ba <rpc_ip_event_handler+0x6e>
   22806:	f248 0381 	movw	r3, #32897	; 0x8081
   2280a:	429d      	cmp	r5, r3
   2280c:	d1d5      	bne.n	227ba <rpc_ip_event_handler+0x6e>
   2280e:	4601      	mov	r1, r0
   22810:	4630      	mov	r0, r6
   22812:	f000 fc1d 	bl	23050 <on_tls_attach_res>
   22816:	e04f      	b.n	228b8 <rpc_ip_event_handler+0x16c>
   22818:	f249 0302 	movw	r3, #36866	; 0x9002
   2281c:	429d      	cmp	r5, r3
   2281e:	f000 809e 	beq.w	2295e <rpc_ip_event_handler+0x212>
   22822:	d835      	bhi.n	22890 <rpc_ip_event_handler+0x144>
   22824:	f004 fe7a 	bl	2751c <sock_has_stream_error>
   22828:	4607      	mov	r7, r0
   2282a:	b9e0      	cbnz	r0, 22866 <rpc_ip_event_handler+0x11a>
   2282c:	2010      	movs	r0, #16
   2282e:	f7fb fb89 	bl	1df44 <nrf_modem_os_alloc>
   22832:	4605      	mov	r5, r0
   22834:	b1b8      	cbz	r0, 22866 <rpc_ip_event_handler+0x11a>
   22836:	4639      	mov	r1, r7
   22838:	2210      	movs	r2, #16
   2283a:	f005 ffbb 	bl	287b4 <memset>
   2283e:	6833      	ldr	r3, [r6, #0]
   22840:	606b      	str	r3, [r5, #4]
   22842:	6873      	ldr	r3, [r6, #4]
   22844:	812b      	strh	r3, [r5, #8]
   22846:	8a71      	ldrh	r1, [r6, #18]
   22848:	2900      	cmp	r1, #0
   2284a:	f000 8097 	beq.w	2297c <rpc_ip_event_handler+0x230>
   2284e:	8a32      	ldrh	r2, [r6, #16]
   22850:	f106 0014 	add.w	r0, r6, #20
   22854:	f004 fdae 	bl	273b4 <sockaddr_init>
   22858:	60e8      	str	r0, [r5, #12]
   2285a:	2800      	cmp	r0, #0
   2285c:	f040 808e 	bne.w	2297c <rpc_ip_event_handler+0x230>
   22860:	4628      	mov	r0, r5
   22862:	f7fb fb77 	bl	1df54 <nrf_modem_os_free>
   22866:	6830      	ldr	r0, [r6, #0]
   22868:	f004 fd96 	bl	27398 <rpc_client_msg_data_rx_free>
   2286c:	4620      	mov	r0, r4
   2286e:	f004 fe17 	bl	274a0 <sock_is_stream>
   22872:	b148      	cbz	r0, 22888 <rpc_ip_event_handler+0x13c>
   22874:	4620      	mov	r0, r4
   22876:	f004 fe51 	bl	2751c <sock_has_stream_error>
   2287a:	b928      	cbnz	r0, 22888 <rpc_ip_event_handler+0x13c>
   2287c:	230c      	movs	r3, #12
   2287e:	61a3      	str	r3, [r4, #24]
   22880:	7f23      	ldrb	r3, [r4, #28]
   22882:	f063 037e 	orn	r3, r3, #126	; 0x7e
   22886:	7723      	strb	r3, [r4, #28]
   22888:	4620      	mov	r0, r4
   2288a:	f004 fe0e 	bl	274aa <sock_is_datagram>
   2288e:	e025      	b.n	228dc <rpc_ip_event_handler+0x190>
   22890:	f249 0303 	movw	r3, #36867	; 0x9003
   22894:	429d      	cmp	r5, r3
   22896:	d018      	beq.n	228ca <rpc_ip_event_handler+0x17e>
   22898:	f249 0382 	movw	r3, #36994	; 0x9082
   2289c:	429d      	cmp	r5, r3
   2289e:	d18c      	bne.n	227ba <rpc_ip_event_handler+0x6e>
   228a0:	4601      	mov	r1, r0
   228a2:	4630      	mov	r0, r6
   228a4:	f000 fbe8 	bl	23078 <on_tls_handshake_ntf>
   228a8:	e006      	b.n	228b8 <rpc_ip_event_handler+0x16c>
   228aa:	6973      	ldr	r3, [r6, #20]
   228ac:	b90b      	cbnz	r3, 228b2 <rpc_ip_event_handler+0x166>
   228ae:	69b3      	ldr	r3, [r6, #24]
   228b0:	6003      	str	r3, [r0, #0]
   228b2:	4630      	mov	r0, r6
   228b4:	f005 fb77 	bl	27fa6 <res_forward>
   228b8:	4605      	mov	r5, r0
   228ba:	e010      	b.n	228de <rpc_ip_event_handler+0x192>
   228bc:	7f03      	ldrb	r3, [r0, #28]
   228be:	f023 0303 	bic.w	r3, r3, #3
   228c2:	f043 0303 	orr.w	r3, r3, #3
   228c6:	7703      	strb	r3, [r0, #28]
   228c8:	e7f3      	b.n	228b2 <rpc_ip_event_handler+0x166>
   228ca:	7f03      	ldrb	r3, [r0, #28]
   228cc:	f043 0301 	orr.w	r3, r3, #1
   228d0:	7703      	strb	r3, [r0, #28]
   228d2:	6930      	ldr	r0, [r6, #16]
   228d4:	2869      	cmp	r0, #105	; 0x69
   228d6:	d112      	bne.n	228fe <rpc_ip_event_handler+0x1b2>
   228d8:	2368      	movs	r3, #104	; 0x68
   228da:	61a3      	str	r3, [r4, #24]
   228dc:	2500      	movs	r5, #0
   228de:	4620      	mov	r0, r4
   228e0:	f004 fe2a 	bl	27538 <sock_has_pollcb>
   228e4:	b110      	cbz	r0, 228ec <rpc_ip_event_handler+0x1a0>
   228e6:	4620      	mov	r0, r4
   228e8:	f004 fd9d 	bl	27426 <sock_pollcb>
   228ec:	b2e8      	uxtb	r0, r5
   228ee:	e76c      	b.n	227ca <rpc_ip_event_handler+0x7e>
   228f0:	7f03      	ldrb	r3, [r0, #28]
   228f2:	68f5      	ldr	r5, [r6, #12]
   228f4:	f36f 0382 	bfc	r3, #2, #1
   228f8:	7703      	strb	r3, [r0, #28]
   228fa:	6970      	ldr	r0, [r6, #20]
   228fc:	b118      	cbz	r0, 22906 <rpc_ip_event_handler+0x1ba>
   228fe:	f000 fc5f 	bl	231c0 <rpc_error_to_nrf_errno>
   22902:	61a0      	str	r0, [r4, #24]
   22904:	e7ea      	b.n	228dc <rpc_ip_event_handler+0x190>
   22906:	4620      	mov	r0, r4
   22908:	f004 fdd9 	bl	274be <sock_proto_is_secure>
   2290c:	b918      	cbnz	r0, 22916 <rpc_ip_event_handler+0x1ca>
   2290e:	7f23      	ldrb	r3, [r4, #28]
   22910:	f043 0308 	orr.w	r3, r3, #8
   22914:	7723      	strb	r3, [r4, #28]
   22916:	4620      	mov	r0, r4
   22918:	f004 fdd1 	bl	274be <sock_proto_is_secure>
   2291c:	2800      	cmp	r0, #0
   2291e:	d0cb      	beq.n	228b8 <rpc_ip_event_handler+0x16c>
   22920:	2d00      	cmp	r5, #0
   22922:	d0dc      	beq.n	228de <rpc_ip_event_handler+0x192>
   22924:	2100      	movs	r1, #0
   22926:	4620      	mov	r0, r4
   22928:	f000 fbc0 	bl	230ac <tls_attach>
   2292c:	e7d6      	b.n	228dc <rpc_ip_event_handler+0x190>
   2292e:	7f43      	ldrb	r3, [r0, #29]
   22930:	3b01      	subs	r3, #1
   22932:	7743      	strb	r3, [r0, #29]
   22934:	6973      	ldr	r3, [r6, #20]
   22936:	2b00      	cmp	r3, #0
   22938:	d1bb      	bne.n	228b2 <rpc_ip_event_handler+0x166>
   2293a:	4630      	mov	r0, r6
   2293c:	f005 fb31 	bl	27fa2 <res_cookie_get>
   22940:	69b2      	ldr	r2, [r6, #24]
   22942:	6843      	ldr	r3, [r0, #4]
   22944:	601a      	str	r2, [r3, #0]
   22946:	6842      	ldr	r2, [r0, #4]
   22948:	7f13      	ldrb	r3, [r2, #28]
   2294a:	f043 0308 	orr.w	r3, r3, #8
   2294e:	7713      	strb	r3, [r2, #28]
   22950:	6843      	ldr	r3, [r0, #4]
   22952:	6922      	ldr	r2, [r4, #16]
   22954:	611a      	str	r2, [r3, #16]
   22956:	6843      	ldr	r3, [r0, #4]
   22958:	6962      	ldr	r2, [r4, #20]
   2295a:	615a      	str	r2, [r3, #20]
   2295c:	e7a9      	b.n	228b2 <rpc_ip_event_handler+0x166>
   2295e:	7f43      	ldrb	r3, [r0, #29]
   22960:	3301      	adds	r3, #1
   22962:	7743      	strb	r3, [r0, #29]
   22964:	e7ba      	b.n	228dc <rpc_ip_event_handler+0x190>
   22966:	4630      	mov	r0, r6
   22968:	f005 fb1b 	bl	27fa2 <res_cookie_get>
   2296c:	6973      	ldr	r3, [r6, #20]
   2296e:	b913      	cbnz	r3, 22976 <rpc_ip_event_handler+0x22a>
   22970:	69b3      	ldr	r3, [r6, #24]
   22972:	6043      	str	r3, [r0, #4]
   22974:	e79d      	b.n	228b2 <rpc_ip_event_handler+0x166>
   22976:	f04f 33ff 	mov.w	r3, #4294967295
   2297a:	e7fa      	b.n	22972 <rpc_ip_event_handler+0x226>
   2297c:	4629      	mov	r1, r5
   2297e:	4620      	mov	r0, r4
   22980:	f004 fd6e 	bl	27460 <sock_pkt_append>
   22984:	e7aa      	b.n	228dc <rpc_ip_event_handler+0x190>
   22986:	bf00      	nop
   22988:	2000dde9 	.word	0x2000dde9

0002298c <nrf_close>:
   2298c:	b570      	push	{r4, r5, r6, lr}
   2298e:	4604      	mov	r4, r0
   22990:	f7ff fcc2 	bl	22318 <sock_find>
   22994:	4605      	mov	r5, r0
   22996:	b930      	cbnz	r0, 229a6 <nrf_close+0x1a>
   22998:	2009      	movs	r0, #9
   2299a:	f004 f861 	bl	26a60 <nrf_modem_os_errno_set>
   2299e:	f04f 36ff 	mov.w	r6, #4294967295
   229a2:	4630      	mov	r0, r6
   229a4:	bd70      	pop	{r4, r5, r6, pc}
   229a6:	f000 ff11 	bl	237cc <nrf_modem_state_is_initialized>
   229aa:	b960      	cbnz	r0, 229c6 <nrf_close+0x3a>
   229ac:	2600      	movs	r6, #0
   229ae:	4628      	mov	r0, r5
   229b0:	f004 fd99 	bl	274e6 <sock_is_attaching>
   229b4:	b118      	cbz	r0, 229be <nrf_close+0x32>
   229b6:	4b0e      	ldr	r3, [pc, #56]	; (229f0 <nrf_close+0x64>)
   229b8:	6818      	ldr	r0, [r3, #0]
   229ba:	f004 f859 	bl	26a70 <nrf_modem_os_sem_give>
   229be:	4620      	mov	r0, r4
   229c0:	f7ff fcbc 	bl	2233c <_sock_close>
   229c4:	e7ed      	b.n	229a2 <nrf_close+0x16>
   229c6:	2000      	movs	r0, #0
   229c8:	f004 fcc0 	bl	2734c <rpc_client_msg_alloc>
   229cc:	4601      	mov	r1, r0
   229ce:	b908      	cbnz	r0, 229d4 <nrf_close+0x48>
   229d0:	2069      	movs	r0, #105	; 0x69
   229d2:	e7e2      	b.n	2299a <nrf_close+0xe>
   229d4:	6104      	str	r4, [r0, #16]
   229d6:	f247 0009 	movw	r0, #28681	; 0x7009
   229da:	f005 fab5 	bl	27f48 <req_forward>
   229de:	2800      	cmp	r0, #0
   229e0:	d0e4      	beq.n	229ac <nrf_close+0x20>
   229e2:	2816      	cmp	r0, #22
   229e4:	d0e2      	beq.n	229ac <nrf_close+0x20>
   229e6:	f004 f83b 	bl	26a60 <nrf_modem_os_errno_set>
   229ea:	f04f 36ff 	mov.w	r6, #4294967295
   229ee:	e7de      	b.n	229ae <nrf_close+0x22>
   229f0:	2000d7ec 	.word	0x2000d7ec

000229f4 <nrf_sendto>:
   229f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229f8:	4698      	mov	r8, r3
   229fa:	2300      	movs	r3, #0
   229fc:	b085      	sub	sp, #20
   229fe:	4682      	mov	sl, r0
   22a00:	4689      	mov	r9, r1
   22a02:	4616      	mov	r6, r2
   22a04:	e9cd 3302 	strd	r3, r3, [sp, #8]
   22a08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   22a0a:	f7ff fc85 	bl	22318 <sock_find>
   22a0e:	4605      	mov	r5, r0
   22a10:	b940      	cbnz	r0, 22a24 <nrf_sendto+0x30>
   22a12:	2009      	movs	r0, #9
   22a14:	f004 f824 	bl	26a60 <nrf_modem_os_errno_set>
   22a18:	f04f 34ff 	mov.w	r4, #4294967295
   22a1c:	4620      	mov	r0, r4
   22a1e:	b005      	add	sp, #20
   22a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a24:	f038 0340 	bics.w	r3, r8, #64	; 0x40
   22a28:	d001      	beq.n	22a2e <nrf_sendto+0x3a>
   22a2a:	205f      	movs	r0, #95	; 0x5f
   22a2c:	e7f2      	b.n	22a14 <nrf_sendto+0x20>
   22a2e:	f004 fd88 	bl	27542 <sock_has_rai_no_data>
   22a32:	b128      	cbz	r0, 22a40 <nrf_sendto+0x4c>
   22a34:	4628      	mov	r0, r5
   22a36:	f004 fd74 	bl	27522 <sock_has_error>
   22a3a:	b128      	cbz	r0, 22a48 <nrf_sendto+0x54>
   22a3c:	69a8      	ldr	r0, [r5, #24]
   22a3e:	e7e9      	b.n	22a14 <nrf_sendto+0x20>
   22a40:	4628      	mov	r0, r5
   22a42:	f004 fd58 	bl	274f6 <sock_is_closed>
   22a46:	e7f8      	b.n	22a3a <nrf_sendto+0x46>
   22a48:	4628      	mov	r0, r5
   22a4a:	b1d7      	cbz	r7, 22a82 <nrf_sendto+0x8e>
   22a4c:	f004 fd28 	bl	274a0 <sock_is_stream>
   22a50:	bb00      	cbnz	r0, 22a94 <nrf_sendto+0xa0>
   22a52:	4639      	mov	r1, r7
   22a54:	4628      	mov	r0, r5
   22a56:	f004 fe00 	bl	2765a <sock_sockaddr_fam_is_valid>
   22a5a:	b908      	cbnz	r0, 22a60 <nrf_sendto+0x6c>
   22a5c:	206a      	movs	r0, #106	; 0x6a
   22a5e:	e7d9      	b.n	22a14 <nrf_sendto+0x20>
   22a60:	4638      	mov	r0, r7
   22a62:	990f      	ldr	r1, [sp, #60]	; 0x3c
   22a64:	f004 fde5 	bl	27632 <sock_sockaddr_len_is_valid>
   22a68:	b908      	cbnz	r0, 22a6e <nrf_sendto+0x7a>
   22a6a:	2016      	movs	r0, #22
   22a6c:	e7d2      	b.n	22a14 <nrf_sendto+0x20>
   22a6e:	4628      	mov	r0, r5
   22a70:	f004 fd1b 	bl	274aa <sock_is_datagram>
   22a74:	b170      	cbz	r0, 22a94 <nrf_sendto+0xa0>
   22a76:	4628      	mov	r0, r5
   22a78:	f004 fd21 	bl	274be <sock_proto_is_secure>
   22a7c:	b150      	cbz	r0, 22a94 <nrf_sendto+0xa0>
   22a7e:	207f      	movs	r0, #127	; 0x7f
   22a80:	e7c8      	b.n	22a14 <nrf_sendto+0x20>
   22a82:	f004 fd12 	bl	274aa <sock_is_datagram>
   22a86:	b128      	cbz	r0, 22a94 <nrf_sendto+0xa0>
   22a88:	4628      	mov	r0, r5
   22a8a:	f004 fd28 	bl	274de <sock_is_connected>
   22a8e:	b908      	cbnz	r0, 22a94 <nrf_sendto+0xa0>
   22a90:	2079      	movs	r0, #121	; 0x79
   22a92:	e7bf      	b.n	22a14 <nrf_sendto+0x20>
   22a94:	4628      	mov	r0, r5
   22a96:	f004 fd94 	bl	275c2 <sock_sndtimeo_ms_get>
   22a9a:	9001      	str	r0, [sp, #4]
   22a9c:	4628      	mov	r0, r5
   22a9e:	f004 fd26 	bl	274ee <sock_is_nonblock>
   22aa2:	bb78      	cbnz	r0, 22b04 <nrf_sendto+0x110>
   22aa4:	f3c8 1880 	ubfx	r8, r8, #6, #1
   22aa8:	4628      	mov	r0, r5
   22aaa:	f004 fcf9 	bl	274a0 <sock_is_stream>
   22aae:	b140      	cbz	r0, 22ac2 <nrf_sendto+0xce>
   22ab0:	4628      	mov	r0, r5
   22ab2:	f004 fd04 	bl	274be <sock_proto_is_secure>
   22ab6:	b120      	cbz	r0, 22ac2 <nrf_sendto+0xce>
   22ab8:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
   22abc:	bf28      	it	cs
   22abe:	f44f 6600 	movcs.w	r6, #2048	; 0x800
   22ac2:	f004 fc6b 	bl	2739c <rpc_client_msg_data_tx_size>
   22ac6:	42b0      	cmp	r0, r6
   22ac8:	d206      	bcs.n	22ad8 <nrf_sendto+0xe4>
   22aca:	4628      	mov	r0, r5
   22acc:	f004 fce8 	bl	274a0 <sock_is_stream>
   22ad0:	b1d8      	cbz	r0, 22b0a <nrf_sendto+0x116>
   22ad2:	f004 fc63 	bl	2739c <rpc_client_msg_data_tx_size>
   22ad6:	4606      	mov	r6, r0
   22ad8:	4628      	mov	r0, r5
   22ada:	f004 fd29 	bl	27530 <sock_has_flow_control>
   22ade:	b118      	cbz	r0, 22ae8 <nrf_sendto+0xf4>
   22ae0:	4628      	mov	r0, r5
   22ae2:	f004 fd08 	bl	274f6 <sock_is_closed>
   22ae6:	b190      	cbz	r0, 22b0e <nrf_sendto+0x11a>
   22ae8:	4630      	mov	r0, r6
   22aea:	f004 fc2f 	bl	2734c <rpc_client_msg_alloc>
   22aee:	4604      	mov	r4, r0
   22af0:	b9d8      	cbnz	r0, 22b2a <nrf_sendto+0x136>
   22af2:	2001      	movs	r0, #1
   22af4:	a901      	add	r1, sp, #4
   22af6:	f7fb f92b 	bl	1dd50 <nrf_modem_os_timedwait>
   22afa:	b998      	cbnz	r0, 22b24 <nrf_sendto+0x130>
   22afc:	f1b8 0f00 	cmp.w	r8, #0
   22b00:	d0f2      	beq.n	22ae8 <nrf_sendto+0xf4>
   22b02:	e007      	b.n	22b14 <nrf_sendto+0x120>
   22b04:	f04f 0801 	mov.w	r8, #1
   22b08:	e7ce      	b.n	22aa8 <nrf_sendto+0xb4>
   22b0a:	207a      	movs	r0, #122	; 0x7a
   22b0c:	e782      	b.n	22a14 <nrf_sendto+0x20>
   22b0e:	f1b8 0f00 	cmp.w	r8, #0
   22b12:	d001      	beq.n	22b18 <nrf_sendto+0x124>
   22b14:	200b      	movs	r0, #11
   22b16:	e77d      	b.n	22a14 <nrf_sendto+0x20>
   22b18:	2002      	movs	r0, #2
   22b1a:	a901      	add	r1, sp, #4
   22b1c:	f7fb f918 	bl	1dd50 <nrf_modem_os_timedwait>
   22b20:	2800      	cmp	r0, #0
   22b22:	d0d9      	beq.n	22ad8 <nrf_sendto+0xe4>
   22b24:	f005 fe17 	bl	28756 <abs>
   22b28:	e774      	b.n	22a14 <nrf_sendto+0x20>
   22b2a:	f8c0 a010 	str.w	sl, [r0, #16]
   22b2e:	f1b9 0f00 	cmp.w	r9, #0
   22b32:	d004      	beq.n	22b3e <nrf_sendto+0x14a>
   22b34:	4632      	mov	r2, r6
   22b36:	4649      	mov	r1, r9
   22b38:	6800      	ldr	r0, [r0, #0]
   22b3a:	f005 fe2e 	bl	2879a <memcpy>
   22b3e:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
   22b42:	f1bb 0f00 	cmp.w	fp, #0
   22b46:	d001      	beq.n	22b4c <nrf_sendto+0x158>
   22b48:	2300      	movs	r3, #0
   22b4a:	632b      	str	r3, [r5, #48]	; 0x30
   22b4c:	b3cf      	cbz	r7, 22bc2 <nrf_sendto+0x1ce>
   22b4e:	4628      	mov	r0, r5
   22b50:	f004 fca6 	bl	274a0 <sock_is_stream>
   22b54:	bba8      	cbnz	r0, 22bc2 <nrf_sendto+0x1ce>
   22b56:	2318      	movs	r3, #24
   22b58:	7260      	strb	r0, [r4, #9]
   22b5a:	7223      	strb	r3, [r4, #8]
   22b5c:	72a0      	strb	r0, [r4, #10]
   22b5e:	72e0      	strb	r0, [r4, #11]
   22b60:	f8c4 b014 	str.w	fp, [r4, #20]
   22b64:	687b      	ldr	r3, [r7, #4]
   22b66:	2b01      	cmp	r3, #1
   22b68:	d012      	beq.n	22b90 <nrf_sendto+0x19c>
   22b6a:	2b02      	cmp	r3, #2
   22b6c:	d018      	beq.n	22ba0 <nrf_sendto+0x1ac>
   22b6e:	f247 0b07 	movw	fp, #28679	; 0x7007
   22b72:	4620      	mov	r0, r4
   22b74:	a902      	add	r1, sp, #8
   22b76:	f005 fa12 	bl	27f9e <req_cookie_set>
   22b7a:	4621      	mov	r1, r4
   22b7c:	4658      	mov	r0, fp
   22b7e:	f005 f9e3 	bl	27f48 <req_forward>
   22b82:	4603      	mov	r3, r0
   22b84:	bb40      	cbnz	r0, 22bd8 <nrf_sendto+0x1e4>
   22b86:	e9dd 0402 	ldrd	r0, r4, [sp, #8]
   22b8a:	f004 fc02 	bl	27392 <rpc_client_msg_rx_free>
   22b8e:	e745      	b.n	22a1c <nrf_sendto+0x28>
   22b90:	893b      	ldrh	r3, [r7, #8]
   22b92:	76e0      	strb	r0, [r4, #27]
   22b94:	8323      	strh	r3, [r4, #24]
   22b96:	2304      	movs	r3, #4
   22b98:	76a3      	strb	r3, [r4, #26]
   22b9a:	68fb      	ldr	r3, [r7, #12]
   22b9c:	61e3      	str	r3, [r4, #28]
   22b9e:	e7e6      	b.n	22b6e <nrf_sendto+0x17a>
   22ba0:	893b      	ldrh	r3, [r7, #8]
   22ba2:	f104 021c 	add.w	r2, r4, #28
   22ba6:	8323      	strh	r3, [r4, #24]
   22ba8:	2310      	movs	r3, #16
   22baa:	76e0      	strb	r0, [r4, #27]
   22bac:	76a3      	strb	r3, [r4, #26]
   22bae:	f107 0120 	add.w	r1, r7, #32
   22bb2:	18fb      	adds	r3, r7, r3
   22bb4:	f853 0b04 	ldr.w	r0, [r3], #4
   22bb8:	428b      	cmp	r3, r1
   22bba:	f842 0b04 	str.w	r0, [r2], #4
   22bbe:	d1f9      	bne.n	22bb4 <nrf_sendto+0x1c0>
   22bc0:	e7d5      	b.n	22b6e <nrf_sendto+0x17a>
   22bc2:	2300      	movs	r3, #0
   22bc4:	2204      	movs	r2, #4
   22bc6:	f8c4 b014 	str.w	fp, [r4, #20]
   22bca:	7222      	strb	r2, [r4, #8]
   22bcc:	f247 0b06 	movw	fp, #28678	; 0x7006
   22bd0:	7263      	strb	r3, [r4, #9]
   22bd2:	72a3      	strb	r3, [r4, #10]
   22bd4:	72e3      	strb	r3, [r4, #11]
   22bd6:	e7cc      	b.n	22b72 <nrf_sendto+0x17e>
   22bd8:	280c      	cmp	r0, #12
   22bda:	dc0f      	bgt.n	22bfc <nrf_sendto+0x208>
   22bdc:	280a      	cmp	r0, #10
   22bde:	dd10      	ble.n	22c02 <nrf_sendto+0x20e>
   22be0:	4b09      	ldr	r3, [pc, #36]	; (22c08 <nrf_sendto+0x214>)
   22be2:	781b      	ldrb	r3, [r3, #0]
   22be4:	b92b      	cbnz	r3, 22bf2 <nrf_sendto+0x1fe>
   22be6:	2001      	movs	r0, #1
   22be8:	a901      	add	r1, sp, #4
   22bea:	f7fb f8b1 	bl	1dd50 <nrf_modem_os_timedwait>
   22bee:	2800      	cmp	r0, #0
   22bf0:	d198      	bne.n	22b24 <nrf_sendto+0x130>
   22bf2:	f1b8 0f00 	cmp.w	r8, #0
   22bf6:	f43f af6f 	beq.w	22ad8 <nrf_sendto+0xe4>
   22bfa:	e78b      	b.n	22b14 <nrf_sendto+0x120>
   22bfc:	288c      	cmp	r0, #140	; 0x8c
   22bfe:	f43f af09 	beq.w	22a14 <nrf_sendto+0x20>
   22c02:	4618      	mov	r0, r3
   22c04:	e706      	b.n	22a14 <nrf_sendto+0x20>
   22c06:	bf00      	nop
   22c08:	2000dde9 	.word	0x2000dde9

00022c0c <nrf_setsockopt>:
   22c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22c10:	b085      	sub	sp, #20
   22c12:	4681      	mov	r9, r0
   22c14:	4688      	mov	r8, r1
   22c16:	4617      	mov	r7, r2
   22c18:	461e      	mov	r6, r3
   22c1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   22c1c:	f7ff fb7c 	bl	22318 <sock_find>
   22c20:	4604      	mov	r4, r0
   22c22:	b938      	cbnz	r0, 22c34 <nrf_setsockopt+0x28>
   22c24:	2009      	movs	r0, #9
   22c26:	f003 ff1b 	bl	26a60 <nrf_modem_os_errno_set>
   22c2a:	f04f 30ff 	mov.w	r0, #4294967295
   22c2e:	b005      	add	sp, #20
   22c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22c34:	b916      	cbnz	r6, 22c3c <nrf_setsockopt+0x30>
   22c36:	b10d      	cbz	r5, 22c3c <nrf_setsockopt+0x30>
   22c38:	2016      	movs	r0, #22
   22c3a:	e7f4      	b.n	22c26 <nrf_setsockopt+0x1a>
   22c3c:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   22c40:	f000 80fe 	beq.w	22e40 <nrf_setsockopt+0x234>
   22c44:	dc0c      	bgt.n	22c60 <nrf_setsockopt+0x54>
   22c46:	f1b8 0f01 	cmp.w	r8, #1
   22c4a:	d012      	beq.n	22c72 <nrf_setsockopt+0x66>
   22c4c:	f1b8 0f06 	cmp.w	r8, #6
   22c50:	f000 80f0 	beq.w	22e34 <nrf_setsockopt+0x228>
   22c54:	f1b8 0f00 	cmp.w	r8, #0
   22c58:	f000 80f0 	beq.w	22e3c <nrf_setsockopt+0x230>
   22c5c:	206d      	movs	r0, #109	; 0x6d
   22c5e:	e7e2      	b.n	22c26 <nrf_setsockopt+0x1a>
   22c60:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   22c64:	f000 809b 	beq.w	22d9e <nrf_setsockopt+0x192>
   22c68:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   22c6c:	d1f6      	bne.n	22c5c <nrf_setsockopt+0x50>
   22c6e:	2f1e      	cmp	r7, #30
   22c70:	e0e1      	b.n	22e36 <nrf_setsockopt+0x22a>
   22c72:	2f3c      	cmp	r7, #60	; 0x3c
   22c74:	dcf2      	bgt.n	22c5c <nrf_setsockopt+0x50>
   22c76:	2f31      	cmp	r7, #49	; 0x31
   22c78:	dc0f      	bgt.n	22c9a <nrf_setsockopt+0x8e>
   22c7a:	2f15      	cmp	r7, #21
   22c7c:	d04c      	beq.n	22d18 <nrf_setsockopt+0x10c>
   22c7e:	dc29      	bgt.n	22cd4 <nrf_setsockopt+0xc8>
   22c80:	2f02      	cmp	r7, #2
   22c82:	d040      	beq.n	22d06 <nrf_setsockopt+0xfa>
   22c84:	2f14      	cmp	r7, #20
   22c86:	d1e9      	bne.n	22c5c <nrf_setsockopt+0x50>
   22c88:	f104 0020 	add.w	r0, r4, #32
   22c8c:	2d00      	cmp	r5, #0
   22c8e:	d149      	bne.n	22d24 <nrf_setsockopt+0x118>
   22c90:	2300      	movs	r3, #0
   22c92:	6223      	str	r3, [r4, #32]
   22c94:	6043      	str	r3, [r0, #4]
   22c96:	2000      	movs	r0, #0
   22c98:	e7c9      	b.n	22c2e <nrf_setsockopt+0x22>
   22c9a:	3f32      	subs	r7, #50	; 0x32
   22c9c:	2f0a      	cmp	r7, #10
   22c9e:	d8dd      	bhi.n	22c5c <nrf_setsockopt+0x50>
   22ca0:	a301      	add	r3, pc, #4	; (adr r3, 22ca8 <nrf_setsockopt+0x9c>)
   22ca2:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
   22ca6:	bf00      	nop
   22ca8:	00022d7f 	.word	0x00022d7f
   22cac:	00022d65 	.word	0x00022d65
   22cb0:	00022d6d 	.word	0x00022d6d
   22cb4:	00022d73 	.word	0x00022d73
   22cb8:	00022d79 	.word	0x00022d79
   22cbc:	00022c5d 	.word	0x00022c5d
   22cc0:	00022c5d 	.word	0x00022c5d
   22cc4:	00022c5d 	.word	0x00022c5d
   22cc8:	00022c5d 	.word	0x00022c5d
   22ccc:	00022c5d 	.word	0x00022c5d
   22cd0:	00022d35 	.word	0x00022d35
   22cd4:	2f19      	cmp	r7, #25
   22cd6:	d1c1      	bne.n	22c5c <nrf_setsockopt+0x50>
   22cd8:	2e00      	cmp	r6, #0
   22cda:	d0ad      	beq.n	22c38 <nrf_setsockopt+0x2c>
   22cdc:	4869      	ldr	r0, [pc, #420]	; (22e84 <nrf_setsockopt+0x278>)
   22cde:	f7f6 f985 	bl	18fec <strlen>
   22ce2:	4968      	ldr	r1, [pc, #416]	; (22e84 <nrf_setsockopt+0x278>)
   22ce4:	4602      	mov	r2, r0
   22ce6:	4630      	mov	r0, r6
   22ce8:	f005 fd47 	bl	2877a <memcmp>
   22cec:	2800      	cmp	r0, #0
   22cee:	d152      	bne.n	22d96 <nrf_setsockopt+0x18a>
   22cf0:	4864      	ldr	r0, [pc, #400]	; (22e84 <nrf_setsockopt+0x278>)
   22cf2:	f7f6 f97b 	bl	18fec <strlen>
   22cf6:	220a      	movs	r2, #10
   22cf8:	2100      	movs	r1, #0
   22cfa:	4430      	add	r0, r6
   22cfc:	f002 fad8 	bl	252b0 <strtoul>
   22d00:	2504      	movs	r5, #4
   22d02:	9003      	str	r0, [sp, #12]
   22d04:	ae03      	add	r6, sp, #12
   22d06:	4628      	mov	r0, r5
   22d08:	f004 fb20 	bl	2734c <rpc_client_msg_alloc>
   22d0c:	4604      	mov	r4, r0
   22d0e:	2800      	cmp	r0, #0
   22d10:	f040 8098 	bne.w	22e44 <nrf_setsockopt+0x238>
   22d14:	2069      	movs	r0, #105	; 0x69
   22d16:	e786      	b.n	22c26 <nrf_setsockopt+0x1a>
   22d18:	f104 0028 	add.w	r0, r4, #40	; 0x28
   22d1c:	b915      	cbnz	r5, 22d24 <nrf_setsockopt+0x118>
   22d1e:	62a5      	str	r5, [r4, #40]	; 0x28
   22d20:	6045      	str	r5, [r0, #4]
   22d22:	e7b8      	b.n	22c96 <nrf_setsockopt+0x8a>
   22d24:	2d08      	cmp	r5, #8
   22d26:	462a      	mov	r2, r5
   22d28:	4631      	mov	r1, r6
   22d2a:	bf28      	it	cs
   22d2c:	2208      	movcs	r2, #8
   22d2e:	f005 fd34 	bl	2879a <memcpy>
   22d32:	e7b0      	b.n	22c96 <nrf_setsockopt+0x8a>
   22d34:	b186      	cbz	r6, 22d58 <nrf_setsockopt+0x14c>
   22d36:	2d08      	cmp	r5, #8
   22d38:	f47f af7e 	bne.w	22c38 <nrf_setsockopt+0x2c>
   22d3c:	f7fe ffd0 	bl	21ce0 <rpc_transport_data_rx_suspend>
   22d40:	e896 0003 	ldmia.w	r6, {r0, r1}
   22d44:	f104 0334 	add.w	r3, r4, #52	; 0x34
   22d48:	e883 0003 	stmia.w	r3, {r0, r1}
   22d4c:	4620      	mov	r0, r4
   22d4e:	f004 fb6a 	bl	27426 <sock_pollcb>
   22d52:	f7fe ffcb 	bl	21cec <rpc_transport_data_rx_resume>
   22d56:	e79e      	b.n	22c96 <nrf_setsockopt+0x8a>
   22d58:	2d00      	cmp	r5, #0
   22d5a:	f47f af6d 	bne.w	22c38 <nrf_setsockopt+0x2c>
   22d5e:	6365      	str	r5, [r4, #52]	; 0x34
   22d60:	63a5      	str	r5, [r4, #56]	; 0x38
   22d62:	e798      	b.n	22c96 <nrf_setsockopt+0x8a>
   22d64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   22d68:	6323      	str	r3, [r4, #48]	; 0x30
   22d6a:	e794      	b.n	22c96 <nrf_setsockopt+0x8a>
   22d6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   22d70:	e7fa      	b.n	22d68 <nrf_setsockopt+0x15c>
   22d72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   22d76:	e7f7      	b.n	22d68 <nrf_setsockopt+0x15c>
   22d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22d7c:	e7f4      	b.n	22d68 <nrf_setsockopt+0x15c>
   22d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   22d82:	6323      	str	r3, [r4, #48]	; 0x30
   22d84:	2300      	movs	r3, #0
   22d86:	4648      	mov	r0, r9
   22d88:	461a      	mov	r2, r3
   22d8a:	4619      	mov	r1, r3
   22d8c:	e9cd 3300 	strd	r3, r3, [sp]
   22d90:	f7ff fe30 	bl	229f4 <nrf_sendto>
   22d94:	e74b      	b.n	22c2e <nrf_setsockopt+0x22>
   22d96:	220a      	movs	r2, #10
   22d98:	2100      	movs	r1, #0
   22d9a:	4630      	mov	r0, r6
   22d9c:	e7ae      	b.n	22cfc <nrf_setsockopt+0xf0>
   22d9e:	1e7b      	subs	r3, r7, #1
   22da0:	2b0d      	cmp	r3, #13
   22da2:	f63f af5b 	bhi.w	22c5c <nrf_setsockopt+0x50>
   22da6:	a201      	add	r2, pc, #4	; (adr r2, 22dac <nrf_setsockopt+0x1a0>)
   22da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22dac:	00022df5 	.word	0x00022df5
   22db0:	00022e25 	.word	0x00022e25
   22db4:	00022d07 	.word	0x00022d07
   22db8:	00022c5d 	.word	0x00022c5d
   22dbc:	00022e15 	.word	0x00022e15
   22dc0:	00022de5 	.word	0x00022de5
   22dc4:	00022c5d 	.word	0x00022c5d
   22dc8:	00022c5d 	.word	0x00022c5d
   22dcc:	00022c5d 	.word	0x00022c5d
   22dd0:	00022c5d 	.word	0x00022c5d
   22dd4:	00022c5d 	.word	0x00022c5d
   22dd8:	00022e05 	.word	0x00022e05
   22ddc:	00022d07 	.word	0x00022d07
   22de0:	00022d07 	.word	0x00022d07
   22de4:	462a      	mov	r2, r5
   22de6:	4631      	mov	r1, r6
   22de8:	4620      	mov	r0, r4
   22dea:	b005      	add	sp, #20
   22dec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22df0:	f004 bf79 	b.w	27ce6 <tls_setopt_role>
   22df4:	462a      	mov	r2, r5
   22df6:	4631      	mov	r1, r6
   22df8:	4620      	mov	r0, r4
   22dfa:	b005      	add	sp, #20
   22dfc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e00:	f004 bf85 	b.w	27d0e <tls_setopt_taglist>
   22e04:	462a      	mov	r2, r5
   22e06:	4631      	mov	r1, r6
   22e08:	4620      	mov	r0, r4
   22e0a:	b005      	add	sp, #20
   22e0c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e10:	f004 bf90 	b.w	27d34 <tls_setopt_sess_cache>
   22e14:	462a      	mov	r2, r5
   22e16:	4631      	mov	r1, r6
   22e18:	4620      	mov	r0, r4
   22e1a:	b005      	add	sp, #20
   22e1c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e20:	f004 bf9a 	b.w	27d58 <tls_setopt_peer_verify>
   22e24:	462a      	mov	r2, r5
   22e26:	4631      	mov	r1, r6
   22e28:	4620      	mov	r0, r4
   22e2a:	b005      	add	sp, #20
   22e2c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e30:	f004 bfa1 	b.w	27d76 <tls_setopt_hostname>
   22e34:	2f37      	cmp	r7, #55	; 0x37
   22e36:	f43f af66 	beq.w	22d06 <nrf_setsockopt+0xfa>
   22e3a:	e70f      	b.n	22c5c <nrf_setsockopt+0x50>
   22e3c:	2f1f      	cmp	r7, #31
   22e3e:	e7fa      	b.n	22e36 <nrf_setsockopt+0x22a>
   22e40:	2f20      	cmp	r7, #32
   22e42:	e7f8      	b.n	22e36 <nrf_setsockopt+0x22a>
   22e44:	2300      	movs	r3, #0
   22e46:	2208      	movs	r2, #8
   22e48:	7243      	strb	r3, [r0, #9]
   22e4a:	7202      	strb	r2, [r0, #8]
   22e4c:	7283      	strb	r3, [r0, #10]
   22e4e:	72c3      	strb	r3, [r0, #11]
   22e50:	f8c0 9010 	str.w	r9, [r0, #16]
   22e54:	4640      	mov	r0, r8
   22e56:	f005 f840 	bl	27eda <nrf_sol_to_rpc_sol>
   22e5a:	6160      	str	r0, [r4, #20]
   22e5c:	4638      	mov	r0, r7
   22e5e:	f000 f9a3 	bl	231a8 <nrf_so_to_rpc_so>
   22e62:	4631      	mov	r1, r6
   22e64:	61a0      	str	r0, [r4, #24]
   22e66:	462a      	mov	r2, r5
   22e68:	6820      	ldr	r0, [r4, #0]
   22e6a:	f005 fc96 	bl	2879a <memcpy>
   22e6e:	4621      	mov	r1, r4
   22e70:	f247 0003 	movw	r0, #28675	; 0x7003
   22e74:	6065      	str	r5, [r4, #4]
   22e76:	f005 f867 	bl	27f48 <req_forward>
   22e7a:	2800      	cmp	r0, #0
   22e7c:	f43f af0b 	beq.w	22c96 <nrf_setsockopt+0x8a>
   22e80:	e6d1      	b.n	22c26 <nrf_setsockopt+0x1a>
   22e82:	bf00      	nop
   22e84:	0002b42f 	.word	0x0002b42f

00022e88 <nrf_getsockopt>:
   22e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22e8c:	9c08      	ldr	r4, [sp, #32]
   22e8e:	4681      	mov	r9, r0
   22e90:	4688      	mov	r8, r1
   22e92:	4617      	mov	r7, r2
   22e94:	461e      	mov	r6, r3
   22e96:	f7ff fa3f 	bl	22318 <sock_find>
   22e9a:	4605      	mov	r5, r0
   22e9c:	b930      	cbnz	r0, 22eac <nrf_getsockopt+0x24>
   22e9e:	2009      	movs	r0, #9
   22ea0:	f003 fdde 	bl	26a60 <nrf_modem_os_errno_set>
   22ea4:	f04f 30ff 	mov.w	r0, #4294967295
   22ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22eac:	b106      	cbz	r6, 22eb0 <nrf_getsockopt+0x28>
   22eae:	b90c      	cbnz	r4, 22eb4 <nrf_getsockopt+0x2c>
   22eb0:	200e      	movs	r0, #14
   22eb2:	e7f5      	b.n	22ea0 <nrf_getsockopt+0x18>
   22eb4:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   22eb8:	f000 808a 	beq.w	22fd0 <nrf_getsockopt+0x148>
   22ebc:	dc0a      	bgt.n	22ed4 <nrf_getsockopt+0x4c>
   22ebe:	f1b8 0f01 	cmp.w	r8, #1
   22ec2:	d00f      	beq.n	22ee4 <nrf_getsockopt+0x5c>
   22ec4:	f1b8 0f06 	cmp.w	r8, #6
   22ec8:	d077      	beq.n	22fba <nrf_getsockopt+0x132>
   22eca:	f1b8 0f00 	cmp.w	r8, #0
   22ece:	d07d      	beq.n	22fcc <nrf_getsockopt+0x144>
   22ed0:	206d      	movs	r0, #109	; 0x6d
   22ed2:	e7e5      	b.n	22ea0 <nrf_getsockopt+0x18>
   22ed4:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   22ed8:	d024      	beq.n	22f24 <nrf_getsockopt+0x9c>
   22eda:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   22ede:	d1f7      	bne.n	22ed0 <nrf_getsockopt+0x48>
   22ee0:	2f1e      	cmp	r7, #30
   22ee2:	e06b      	b.n	22fbc <nrf_getsockopt+0x134>
   22ee4:	2f14      	cmp	r7, #20
   22ee6:	d00a      	beq.n	22efe <nrf_getsockopt+0x76>
   22ee8:	2f15      	cmp	r7, #21
   22eea:	d013      	beq.n	22f14 <nrf_getsockopt+0x8c>
   22eec:	2f04      	cmp	r7, #4
   22eee:	d1ef      	bne.n	22ed0 <nrf_getsockopt+0x48>
   22ef0:	6983      	ldr	r3, [r0, #24]
   22ef2:	6027      	str	r7, [r4, #0]
   22ef4:	6033      	str	r3, [r6, #0]
   22ef6:	2300      	movs	r3, #0
   22ef8:	6183      	str	r3, [r0, #24]
   22efa:	2000      	movs	r0, #0
   22efc:	e7d4      	b.n	22ea8 <nrf_getsockopt+0x20>
   22efe:	6822      	ldr	r2, [r4, #0]
   22f00:	f100 0120 	add.w	r1, r0, #32
   22f04:	2a08      	cmp	r2, #8
   22f06:	bf28      	it	cs
   22f08:	2208      	movcs	r2, #8
   22f0a:	6022      	str	r2, [r4, #0]
   22f0c:	4630      	mov	r0, r6
   22f0e:	f005 fc44 	bl	2879a <memcpy>
   22f12:	e7f2      	b.n	22efa <nrf_getsockopt+0x72>
   22f14:	6822      	ldr	r2, [r4, #0]
   22f16:	f100 0128 	add.w	r1, r0, #40	; 0x28
   22f1a:	2a08      	cmp	r2, #8
   22f1c:	bf28      	it	cs
   22f1e:	2208      	movcs	r2, #8
   22f20:	6022      	str	r2, [r4, #0]
   22f22:	e7f3      	b.n	22f0c <nrf_getsockopt+0x84>
   22f24:	1e7b      	subs	r3, r7, #1
   22f26:	2b0d      	cmp	r3, #13
   22f28:	d8d2      	bhi.n	22ed0 <nrf_getsockopt+0x48>
   22f2a:	a201      	add	r2, pc, #4	; (adr r2, 22f30 <nrf_getsockopt+0xa8>)
   22f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22f30:	00022f89 	.word	0x00022f89
   22f34:	00022f9f 	.word	0x00022f9f
   22f38:	00022fbf 	.word	0x00022fbf
   22f3c:	00022ed1 	.word	0x00022ed1
   22f40:	00022f7f 	.word	0x00022f7f
   22f44:	00022f69 	.word	0x00022f69
   22f48:	00022ed1 	.word	0x00022ed1
   22f4c:	00022ed1 	.word	0x00022ed1
   22f50:	00022ed1 	.word	0x00022ed1
   22f54:	00022ed1 	.word	0x00022ed1
   22f58:	00022ed1 	.word	0x00022ed1
   22f5c:	00022f75 	.word	0x00022f75
   22f60:	00022ed1 	.word	0x00022ed1
   22f64:	00022fbf 	.word	0x00022fbf
   22f68:	2304      	movs	r3, #4
   22f6a:	6023      	str	r3, [r4, #0]
   22f6c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   22f70:	6033      	str	r3, [r6, #0]
   22f72:	e7c2      	b.n	22efa <nrf_getsockopt+0x72>
   22f74:	2304      	movs	r3, #4
   22f76:	6023      	str	r3, [r4, #0]
   22f78:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
   22f7c:	e7f8      	b.n	22f70 <nrf_getsockopt+0xe8>
   22f7e:	2304      	movs	r3, #4
   22f80:	6023      	str	r3, [r4, #0]
   22f82:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   22f86:	e7f3      	b.n	22f70 <nrf_getsockopt+0xe8>
   22f88:	f890 2047 	ldrb.w	r2, [r0, #71]	; 0x47
   22f8c:	6823      	ldr	r3, [r4, #0]
   22f8e:	0092      	lsls	r2, r2, #2
   22f90:	429a      	cmp	r2, r3
   22f92:	bf28      	it	cs
   22f94:	461a      	movcs	r2, r3
   22f96:	f100 0148 	add.w	r1, r0, #72	; 0x48
   22f9a:	6022      	str	r2, [r4, #0]
   22f9c:	e7b6      	b.n	22f0c <nrf_getsockopt+0x84>
   22f9e:	6c00      	ldr	r0, [r0, #64]	; 0x40
   22fa0:	f7f6 f824 	bl	18fec <strlen>
   22fa4:	6822      	ldr	r2, [r4, #0]
   22fa6:	3001      	adds	r0, #1
   22fa8:	4290      	cmp	r0, r2
   22faa:	d203      	bcs.n	22fb4 <nrf_getsockopt+0x12c>
   22fac:	6c28      	ldr	r0, [r5, #64]	; 0x40
   22fae:	f7f6 f81d 	bl	18fec <strlen>
   22fb2:	1c42      	adds	r2, r0, #1
   22fb4:	6c29      	ldr	r1, [r5, #64]	; 0x40
   22fb6:	6022      	str	r2, [r4, #0]
   22fb8:	e7a8      	b.n	22f0c <nrf_getsockopt+0x84>
   22fba:	2f37      	cmp	r7, #55	; 0x37
   22fbc:	d188      	bne.n	22ed0 <nrf_getsockopt+0x48>
   22fbe:	6820      	ldr	r0, [r4, #0]
   22fc0:	f004 f9c4 	bl	2734c <rpc_client_msg_alloc>
   22fc4:	4605      	mov	r5, r0
   22fc6:	b928      	cbnz	r0, 22fd4 <nrf_getsockopt+0x14c>
   22fc8:	2069      	movs	r0, #105	; 0x69
   22fca:	e769      	b.n	22ea0 <nrf_getsockopt+0x18>
   22fcc:	2f1f      	cmp	r7, #31
   22fce:	e7f5      	b.n	22fbc <nrf_getsockopt+0x134>
   22fd0:	2f20      	cmp	r7, #32
   22fd2:	e7f3      	b.n	22fbc <nrf_getsockopt+0x134>
   22fd4:	2300      	movs	r3, #0
   22fd6:	2208      	movs	r2, #8
   22fd8:	7243      	strb	r3, [r0, #9]
   22fda:	7202      	strb	r2, [r0, #8]
   22fdc:	7283      	strb	r3, [r0, #10]
   22fde:	72c3      	strb	r3, [r0, #11]
   22fe0:	f8c0 9010 	str.w	r9, [r0, #16]
   22fe4:	4640      	mov	r0, r8
   22fe6:	f004 ff78 	bl	27eda <nrf_sol_to_rpc_sol>
   22fea:	6168      	str	r0, [r5, #20]
   22fec:	4638      	mov	r0, r7
   22fee:	f000 f8db 	bl	231a8 <nrf_so_to_rpc_so>
   22ff2:	4629      	mov	r1, r5
   22ff4:	61a8      	str	r0, [r5, #24]
   22ff6:	f247 0004 	movw	r0, #28676	; 0x7004
   22ffa:	682f      	ldr	r7, [r5, #0]
   22ffc:	f004 ffa4 	bl	27f48 <req_forward>
   23000:	2800      	cmp	r0, #0
   23002:	f47f af4d 	bne.w	22ea0 <nrf_getsockopt+0x18>
   23006:	686a      	ldr	r2, [r5, #4]
   23008:	6823      	ldr	r3, [r4, #0]
   2300a:	4639      	mov	r1, r7
   2300c:	429a      	cmp	r2, r3
   2300e:	bf28      	it	cs
   23010:	461a      	movcs	r2, r3
   23012:	4630      	mov	r0, r6
   23014:	6022      	str	r2, [r4, #0]
   23016:	f005 fbc0 	bl	2879a <memcpy>
   2301a:	4638      	mov	r0, r7
   2301c:	f004 f9c2 	bl	273a4 <rpc_client_msg_data_tx_free>
   23020:	e76b      	b.n	22efa <nrf_getsockopt+0x72>
   23022:	bf00      	nop

00023024 <rpc_ip_init>:
   23024:	b508      	push	{r3, lr}
   23026:	f7ff f935 	bl	22294 <sock_init>
   2302a:	f7ff f9eb 	bl	22404 <addrinfo_init>
   2302e:	2200      	movs	r2, #0
   23030:	4b05      	ldr	r3, [pc, #20]	; (23048 <rpc_ip_init+0x24>)
   23032:	4806      	ldr	r0, [pc, #24]	; (2304c <rpc_ip_init+0x28>)
   23034:	701a      	strb	r2, [r3, #0]
   23036:	2201      	movs	r2, #1
   23038:	4611      	mov	r1, r2
   2303a:	f7fa ff4b 	bl	1ded4 <nrf_modem_os_sem_init>
   2303e:	2800      	cmp	r0, #0
   23040:	bf18      	it	ne
   23042:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   23046:	bd08      	pop	{r3, pc}
   23048:	2000dde9 	.word	0x2000dde9
   2304c:	2000d7ec 	.word	0x2000d7ec

00023050 <on_tls_attach_res>:
   23050:	b510      	push	{r4, lr}
   23052:	6943      	ldr	r3, [r0, #20]
   23054:	460c      	mov	r4, r1
   23056:	b15b      	cbz	r3, 23070 <on_tls_attach_res+0x20>
   23058:	7f0b      	ldrb	r3, [r1, #28]
   2305a:	f36f 1304 	bfc	r3, #4, #1
   2305e:	770b      	strb	r3, [r1, #28]
   23060:	6940      	ldr	r0, [r0, #20]
   23062:	f000 f8ad 	bl	231c0 <rpc_error_to_nrf_errno>
   23066:	4b03      	ldr	r3, [pc, #12]	; (23074 <on_tls_attach_res+0x24>)
   23068:	61a0      	str	r0, [r4, #24]
   2306a:	6818      	ldr	r0, [r3, #0]
   2306c:	f003 fd00 	bl	26a70 <nrf_modem_os_sem_give>
   23070:	2000      	movs	r0, #0
   23072:	bd10      	pop	{r4, pc}
   23074:	2000d7ec 	.word	0x2000d7ec

00023078 <on_tls_handshake_ntf>:
   23078:	b510      	push	{r4, lr}
   2307a:	7f0b      	ldrb	r3, [r1, #28]
   2307c:	460c      	mov	r4, r1
   2307e:	f36f 1304 	bfc	r3, #4, #1
   23082:	770b      	strb	r3, [r1, #28]
   23084:	6900      	ldr	r0, [r0, #16]
   23086:	b958      	cbnz	r0, 230a0 <on_tls_handshake_ntf+0x28>
   23088:	b2db      	uxtb	r3, r3
   2308a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   2308e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   23092:	770b      	strb	r3, [r1, #28]
   23094:	4b04      	ldr	r3, [pc, #16]	; (230a8 <on_tls_handshake_ntf+0x30>)
   23096:	6818      	ldr	r0, [r3, #0]
   23098:	f003 fcea 	bl	26a70 <nrf_modem_os_sem_give>
   2309c:	2000      	movs	r0, #0
   2309e:	bd10      	pop	{r4, pc}
   230a0:	f000 f88e 	bl	231c0 <rpc_error_to_nrf_errno>
   230a4:	61a0      	str	r0, [r4, #24]
   230a6:	e7f5      	b.n	23094 <on_tls_handshake_ntf+0x1c>
   230a8:	2000d7ec 	.word	0x2000d7ec

000230ac <tls_attach>:
   230ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   230b0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 23194 <tls_attach+0xe8>
   230b4:	4605      	mov	r5, r0
   230b6:	f8d8 0000 	ldr.w	r0, [r8]
   230ba:	9101      	str	r1, [sp, #4]
   230bc:	f003 fcda 	bl	26a74 <nrf_modem_os_sem_take>
   230c0:	4607      	mov	r7, r0
   230c2:	b150      	cbz	r0, 230da <tls_attach+0x2e>
   230c4:	9b01      	ldr	r3, [sp, #4]
   230c6:	2b00      	cmp	r3, #0
   230c8:	d162      	bne.n	23190 <tls_attach+0xe4>
   230ca:	2310      	movs	r3, #16
   230cc:	61ab      	str	r3, [r5, #24]
   230ce:	f04f 37ff 	mov.w	r7, #4294967295
   230d2:	4638      	mov	r0, r7
   230d4:	b002      	add	sp, #8
   230d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   230da:	6c28      	ldr	r0, [r5, #64]	; 0x40
   230dc:	b1a8      	cbz	r0, 2310a <tls_attach+0x5e>
   230de:	f7f5 ff85 	bl	18fec <strlen>
   230e2:	1c46      	adds	r6, r0, #1
   230e4:	4630      	mov	r0, r6
   230e6:	f004 f931 	bl	2734c <rpc_client_msg_alloc>
   230ea:	4604      	mov	r4, r0
   230ec:	b978      	cbnz	r0, 2310e <tls_attach+0x62>
   230ee:	4628      	mov	r0, r5
   230f0:	f004 f9fd 	bl	274ee <sock_is_nonblock>
   230f4:	b108      	cbz	r0, 230fa <tls_attach+0x4e>
   230f6:	2369      	movs	r3, #105	; 0x69
   230f8:	61ab      	str	r3, [r5, #24]
   230fa:	f8d8 0000 	ldr.w	r0, [r8]
   230fe:	f003 fcb7 	bl	26a70 <nrf_modem_os_sem_give>
   23102:	2069      	movs	r0, #105	; 0x69
   23104:	f003 fcac 	bl	26a60 <nrf_modem_os_errno_set>
   23108:	e7e1      	b.n	230ce <tls_attach+0x22>
   2310a:	463e      	mov	r6, r7
   2310c:	e7ea      	b.n	230e4 <tls_attach+0x38>
   2310e:	682b      	ldr	r3, [r5, #0]
   23110:	2204      	movs	r2, #4
   23112:	6103      	str	r3, [r0, #16]
   23114:	2300      	movs	r3, #0
   23116:	7202      	strb	r2, [r0, #8]
   23118:	7243      	strb	r3, [r0, #9]
   2311a:	7283      	strb	r3, [r0, #10]
   2311c:	72c3      	strb	r3, [r0, #11]
   2311e:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
   23122:	f105 0144 	add.w	r1, r5, #68	; 0x44
   23126:	3201      	adds	r2, #1
   23128:	0092      	lsls	r2, r2, #2
   2312a:	6082      	str	r2, [r0, #8]
   2312c:	3014      	adds	r0, #20
   2312e:	f005 fb34 	bl	2879a <memcpy>
   23132:	b1e6      	cbz	r6, 2316e <tls_attach+0xc2>
   23134:	4632      	mov	r2, r6
   23136:	6c29      	ldr	r1, [r5, #64]	; 0x40
   23138:	6820      	ldr	r0, [r4, #0]
   2313a:	f005 fb6a 	bl	28812 <strncpy>
   2313e:	6066      	str	r6, [r4, #4]
   23140:	7f2b      	ldrb	r3, [r5, #28]
   23142:	2004      	movs	r0, #4
   23144:	f043 0310 	orr.w	r3, r3, #16
   23148:	4622      	mov	r2, r4
   2314a:	f247 0181 	movw	r1, #28801	; 0x7081
   2314e:	772b      	strb	r3, [r5, #28]
   23150:	f004 f918 	bl	27384 <rpc_client_msg_send>
   23154:	4628      	mov	r0, r5
   23156:	f004 f9ca 	bl	274ee <sock_is_nonblock>
   2315a:	2800      	cmp	r0, #0
   2315c:	d1b9      	bne.n	230d2 <tls_attach+0x26>
   2315e:	4628      	mov	r0, r5
   23160:	f004 f9c1 	bl	274e6 <sock_is_attaching>
   23164:	b940      	cbnz	r0, 23178 <tls_attach+0xcc>
   23166:	69a8      	ldr	r0, [r5, #24]
   23168:	2800      	cmp	r0, #0
   2316a:	d0b2      	beq.n	230d2 <tls_attach+0x26>
   2316c:	e7ca      	b.n	23104 <tls_attach+0x58>
   2316e:	7026      	strb	r6, [r4, #0]
   23170:	7066      	strb	r6, [r4, #1]
   23172:	70a6      	strb	r6, [r4, #2]
   23174:	70e6      	strb	r6, [r4, #3]
   23176:	e7e2      	b.n	2313e <tls_attach+0x92>
   23178:	2002      	movs	r0, #2
   2317a:	a901      	add	r1, sp, #4
   2317c:	f7fa fde8 	bl	1dd50 <nrf_modem_os_timedwait>
   23180:	f110 0f0b 	cmn.w	r0, #11
   23184:	d004      	beq.n	23190 <tls_attach+0xe4>
   23186:	2800      	cmp	r0, #0
   23188:	d0e9      	beq.n	2315e <tls_attach+0xb2>
   2318a:	f005 fae4 	bl	28756 <abs>
   2318e:	e7b9      	b.n	23104 <tls_attach+0x58>
   23190:	2074      	movs	r0, #116	; 0x74
   23192:	e7b7      	b.n	23104 <tls_attach+0x58>
   23194:	2000d7ec 	.word	0x2000d7ec

00023198 <nrf_af_to_rpc_af>:
   23198:	2803      	cmp	r0, #3
   2319a:	bf9c      	itt	ls
   2319c:	4b01      	ldrls	r3, [pc, #4]	; (231a4 <nrf_af_to_rpc_af+0xc>)
   2319e:	5618      	ldrsbls	r0, [r3, r0]
   231a0:	4770      	bx	lr
   231a2:	bf00      	nop
   231a4:	0002b433 	.word	0x0002b433

000231a8 <nrf_so_to_rpc_so>:
   231a8:	3802      	subs	r0, #2
   231aa:	2835      	cmp	r0, #53	; 0x35
   231ac:	bf9a      	itte	ls
   231ae:	4b03      	ldrls	r3, [pc, #12]	; (231bc <nrf_so_to_rpc_so+0x14>)
   231b0:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   231b4:	f04f 30ff 	movhi.w	r0, #4294967295
   231b8:	4770      	bx	lr
   231ba:	bf00      	nop
   231bc:	0002950c 	.word	0x0002950c

000231c0 <rpc_error_to_nrf_errno>:
   231c0:	286c      	cmp	r0, #108	; 0x6c
   231c2:	bf9a      	itte	ls
   231c4:	4b02      	ldrls	r3, [pc, #8]	; (231d0 <rpc_error_to_nrf_errno+0x10>)
   231c6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   231ca:	4802      	ldrhi	r0, [pc, #8]	; (231d4 <rpc_error_to_nrf_errno+0x14>)
   231cc:	4770      	bx	lr
   231ce:	bf00      	nop
   231d0:	00029358 	.word	0x00029358
   231d4:	baadbaad 	.word	0xbaadbaad

000231d8 <at_cmd_send>:
   231d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   231dc:	4605      	mov	r5, r0
   231de:	2000      	movs	r0, #0
   231e0:	4617      	mov	r7, r2
   231e2:	4688      	mov	r8, r1
   231e4:	461e      	mov	r6, r3
   231e6:	f004 f8b1 	bl	2734c <rpc_client_msg_alloc>
   231ea:	4602      	mov	r2, r0
   231ec:	b940      	cbnz	r0, 23200 <at_cmd_send+0x28>
   231ee:	b115      	cbz	r5, 231f6 <at_cmd_send+0x1e>
   231f0:	4628      	mov	r0, r5
   231f2:	f004 f8d7 	bl	273a4 <rpc_client_msg_data_tx_free>
   231f6:	f06f 000b 	mvn.w	r0, #11
   231fa:	b002      	add	sp, #8
   231fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23200:	f06f 0358 	mvn.w	r3, #88	; 0x58
   23204:	2400      	movs	r4, #0
   23206:	7303      	strb	r3, [r0, #12]
   23208:	2304      	movs	r3, #4
   2320a:	6005      	str	r5, [r0, #0]
   2320c:	4d0e      	ldr	r5, [pc, #56]	; (23248 <at_cmd_send+0x70>)
   2320e:	7203      	strb	r3, [r0, #8]
   23210:	7344      	strb	r4, [r0, #13]
   23212:	7384      	strb	r4, [r0, #14]
   23214:	73c4      	strb	r4, [r0, #15]
   23216:	7244      	strb	r4, [r0, #9]
   23218:	7284      	strb	r4, [r0, #10]
   2321a:	72c4      	strb	r4, [r0, #11]
   2321c:	f8c0 8004 	str.w	r8, [r0, #4]
   23220:	4639      	mov	r1, r7
   23222:	2003      	movs	r0, #3
   23224:	702c      	strb	r4, [r5, #0]
   23226:	f004 f8ad 	bl	27384 <rpc_client_msg_send>
   2322a:	f04f 33ff 	mov.w	r3, #4294967295
   2322e:	9301      	str	r3, [sp, #4]
   23230:	782b      	ldrb	r3, [r5, #0]
   23232:	42b3      	cmp	r3, r6
   23234:	d101      	bne.n	2323a <at_cmd_send+0x62>
   23236:	2000      	movs	r0, #0
   23238:	e7df      	b.n	231fa <at_cmd_send+0x22>
   2323a:	2002      	movs	r0, #2
   2323c:	a901      	add	r1, sp, #4
   2323e:	f7fa fd87 	bl	1dd50 <nrf_modem_os_timedwait>
   23242:	2800      	cmp	r0, #0
   23244:	d0f4      	beq.n	23230 <at_cmd_send+0x58>
   23246:	e7d8      	b.n	231fa <at_cmd_send+0x22>
   23248:	2000ddea 	.word	0x2000ddea

0002324c <at_response_match>:
   2324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2324e:	4605      	mov	r5, r0
   23250:	2400      	movs	r4, #0
   23252:	4f0f      	ldr	r7, [pc, #60]	; (23290 <at_response_match+0x44>)
   23254:	f857 6b04 	ldr.w	r6, [r7], #4
   23258:	4628      	mov	r0, r5
   2325a:	4631      	mov	r1, r6
   2325c:	f005 faf8 	bl	28850 <strstr>
   23260:	b928      	cbnz	r0, 2326e <at_response_match+0x22>
   23262:	3401      	adds	r4, #1
   23264:	2c04      	cmp	r4, #4
   23266:	d1f5      	bne.n	23254 <at_response_match+0x8>
   23268:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   2326c:	e00d      	b.n	2328a <at_response_match+0x3e>
   2326e:	b16c      	cbz	r4, 2328c <at_response_match+0x40>
   23270:	1ea3      	subs	r3, r4, #2
   23272:	2b01      	cmp	r3, #1
   23274:	d8f8      	bhi.n	23268 <at_response_match+0x1c>
   23276:	4630      	mov	r0, r6
   23278:	f7f5 feb8 	bl	18fec <strlen>
   2327c:	220a      	movs	r2, #10
   2327e:	2100      	movs	r1, #0
   23280:	4428      	add	r0, r5
   23282:	f001 fefb 	bl	2507c <strtol>
   23286:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   2328a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2328c:	4620      	mov	r0, r4
   2328e:	e7fc      	b.n	2328a <at_response_match+0x3e>
   23290:	000295e4 	.word	0x000295e4

00023294 <at_vsprintf>:
   23294:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23298:	2500      	movs	r5, #0
   2329a:	4681      	mov	r9, r0
   2329c:	460f      	mov	r7, r1
   2329e:	4810      	ldr	r0, [pc, #64]	; (232e0 <at_vsprintf+0x4c>)
   232a0:	4629      	mov	r1, r5
   232a2:	4690      	mov	r8, r2
   232a4:	461e      	mov	r6, r3
   232a6:	9301      	str	r3, [sp, #4]
   232a8:	f002 f80c 	bl	252c4 <vsniprintf>
   232ac:	1e04      	subs	r4, r0, #0
   232ae:	db11      	blt.n	232d4 <at_vsprintf+0x40>
   232b0:	3401      	adds	r4, #1
   232b2:	4620      	mov	r0, r4
   232b4:	f004 f874 	bl	273a0 <rpc_client_msg_data_tx_alloc>
   232b8:	f8c9 0000 	str.w	r0, [r9]
   232bc:	b168      	cbz	r0, 232da <at_vsprintf+0x46>
   232be:	4633      	mov	r3, r6
   232c0:	4642      	mov	r2, r8
   232c2:	4621      	mov	r1, r4
   232c4:	9601      	str	r6, [sp, #4]
   232c6:	f001 fffd 	bl	252c4 <vsniprintf>
   232ca:	4628      	mov	r0, r5
   232cc:	603c      	str	r4, [r7, #0]
   232ce:	b003      	add	sp, #12
   232d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   232d4:	f06f 0015 	mvn.w	r0, #21
   232d8:	e7f9      	b.n	232ce <at_vsprintf+0x3a>
   232da:	f06f 000b 	mvn.w	r0, #11
   232de:	e7f6      	b.n	232ce <at_vsprintf+0x3a>
   232e0:	00028fe0 	.word	0x00028fe0

000232e4 <nrf_modem_at_notif_handler_set>:
   232e4:	4b01      	ldr	r3, [pc, #4]	; (232ec <nrf_modem_at_notif_handler_set+0x8>)
   232e6:	6018      	str	r0, [r3, #0]
   232e8:	2000      	movs	r0, #0
   232ea:	4770      	bx	lr
   232ec:	2000d7fc 	.word	0x2000d7fc

000232f0 <nrf_modem_at_printf>:
   232f0:	b40f      	push	{r0, r1, r2, r3}
   232f2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   232f4:	9c08      	ldr	r4, [sp, #32]
   232f6:	f000 fa69 	bl	237cc <nrf_modem_state_is_initialized>
   232fa:	2800      	cmp	r0, #0
   232fc:	d039      	beq.n	23372 <nrf_modem_at_printf+0x82>
   232fe:	2c00      	cmp	r4, #0
   23300:	d03a      	beq.n	23378 <nrf_modem_at_printf+0x88>
   23302:	4622      	mov	r2, r4
   23304:	ab09      	add	r3, sp, #36	; 0x24
   23306:	a903      	add	r1, sp, #12
   23308:	a802      	add	r0, sp, #8
   2330a:	9301      	str	r3, [sp, #4]
   2330c:	f7ff ffc2 	bl	23294 <at_vsprintf>
   23310:	4604      	mov	r4, r0
   23312:	b960      	cbnz	r0, 2332e <nrf_modem_at_printf+0x3e>
   23314:	4e1a      	ldr	r6, [pc, #104]	; (23380 <nrf_modem_at_printf+0x90>)
   23316:	f04f 31ff 	mov.w	r1, #4294967295
   2331a:	6830      	ldr	r0, [r6, #0]
   2331c:	f003 fbaa 	bl	26a74 <nrf_modem_os_sem_take>
   23320:	4603      	mov	r3, r0
   23322:	9802      	ldr	r0, [sp, #8]
   23324:	b14b      	cbz	r3, 2333a <nrf_modem_at_printf+0x4a>
   23326:	f004 f83d 	bl	273a4 <rpc_client_msg_data_tx_free>
   2332a:	f06f 040a 	mvn.w	r4, #10
   2332e:	4620      	mov	r0, r4
   23330:	b004      	add	sp, #16
   23332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23336:	b004      	add	sp, #16
   23338:	4770      	bx	lr
   2333a:	2302      	movs	r3, #2
   2333c:	2201      	movs	r2, #1
   2333e:	9903      	ldr	r1, [sp, #12]
   23340:	f7ff ff4a 	bl	231d8 <at_cmd_send>
   23344:	4604      	mov	r4, r0
   23346:	b118      	cbz	r0, 23350 <nrf_modem_at_printf+0x60>
   23348:	6830      	ldr	r0, [r6, #0]
   2334a:	f003 fb91 	bl	26a70 <nrf_modem_os_sem_give>
   2334e:	e7ee      	b.n	2332e <nrf_modem_at_printf+0x3e>
   23350:	4d0c      	ldr	r5, [pc, #48]	; (23384 <nrf_modem_at_printf+0x94>)
   23352:	682b      	ldr	r3, [r5, #0]
   23354:	6818      	ldr	r0, [r3, #0]
   23356:	f7ff ff79 	bl	2324c <at_response_match>
   2335a:	4604      	mov	r4, r0
   2335c:	6830      	ldr	r0, [r6, #0]
   2335e:	f003 fb87 	bl	26a70 <nrf_modem_os_sem_give>
   23362:	682b      	ldr	r3, [r5, #0]
   23364:	6818      	ldr	r0, [r3, #0]
   23366:	f004 f817 	bl	27398 <rpc_client_msg_data_rx_free>
   2336a:	6828      	ldr	r0, [r5, #0]
   2336c:	f004 f811 	bl	27392 <rpc_client_msg_rx_free>
   23370:	e7dd      	b.n	2332e <nrf_modem_at_printf+0x3e>
   23372:	f04f 34ff 	mov.w	r4, #4294967295
   23376:	e7da      	b.n	2332e <nrf_modem_at_printf+0x3e>
   23378:	f06f 040d 	mvn.w	r4, #13
   2337c:	e7d7      	b.n	2332e <nrf_modem_at_printf+0x3e>
   2337e:	bf00      	nop
   23380:	2000d804 	.word	0x2000d804
   23384:	2000d800 	.word	0x2000d800

00023388 <nrf_modem_at_cmd>:
   23388:	b40c      	push	{r2, r3}
   2338a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2338e:	b085      	sub	sp, #20
   23390:	4606      	mov	r6, r0
   23392:	460d      	mov	r5, r1
   23394:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   23396:	f000 fa19 	bl	237cc <nrf_modem_state_is_initialized>
   2339a:	2800      	cmp	r0, #0
   2339c:	f000 8081 	beq.w	234a2 <nrf_modem_at_cmd+0x11a>
   233a0:	2e00      	cmp	r6, #0
   233a2:	f000 8081 	beq.w	234a8 <nrf_modem_at_cmd+0x120>
   233a6:	2c00      	cmp	r4, #0
   233a8:	d07e      	beq.n	234a8 <nrf_modem_at_cmd+0x120>
   233aa:	2d00      	cmp	r5, #0
   233ac:	d07f      	beq.n	234ae <nrf_modem_at_cmd+0x126>
   233ae:	4622      	mov	r2, r4
   233b0:	ab0f      	add	r3, sp, #60	; 0x3c
   233b2:	a903      	add	r1, sp, #12
   233b4:	a802      	add	r0, sp, #8
   233b6:	9301      	str	r3, [sp, #4]
   233b8:	f7ff ff6c 	bl	23294 <at_vsprintf>
   233bc:	4604      	mov	r4, r0
   233be:	2800      	cmp	r0, #0
   233c0:	d13c      	bne.n	2343c <nrf_modem_at_cmd+0xb4>
   233c2:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 234b4 <nrf_modem_at_cmd+0x12c>
   233c6:	9f02      	ldr	r7, [sp, #8]
   233c8:	f8d8 3000 	ldr.w	r3, [r8]
   233cc:	b1c3      	cbz	r3, 23400 <nrf_modem_at_cmd+0x78>
   233ce:	f04f 0b0c 	mov.w	fp, #12
   233d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 234b8 <nrf_modem_at_cmd+0x130>
   233d6:	f8da 3000 	ldr.w	r3, [sl]
   233da:	429c      	cmp	r4, r3
   233dc:	d210      	bcs.n	23400 <nrf_modem_at_cmd+0x78>
   233de:	fb0b f904 	mul.w	r9, fp, r4
   233e2:	f8d8 3000 	ldr.w	r3, [r8]
   233e6:	4638      	mov	r0, r7
   233e8:	f853 1009 	ldr.w	r1, [r3, r9]
   233ec:	f005 fa30 	bl	28850 <strstr>
   233f0:	b1a8      	cbz	r0, 2341e <nrf_modem_at_cmd+0x96>
   233f2:	f8d8 3000 	ldr.w	r3, [r8]
   233f6:	444b      	add	r3, r9
   233f8:	7a1a      	ldrb	r2, [r3, #8]
   233fa:	b982      	cbnz	r2, 2341e <nrf_modem_at_cmd+0x96>
   233fc:	685b      	ldr	r3, [r3, #4]
   233fe:	b983      	cbnz	r3, 23422 <nrf_modem_at_cmd+0x9a>
   23400:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 234bc <nrf_modem_at_cmd+0x134>
   23404:	f04f 31ff 	mov.w	r1, #4294967295
   23408:	f8d8 0000 	ldr.w	r0, [r8]
   2340c:	f003 fb32 	bl	26a74 <nrf_modem_os_sem_take>
   23410:	b1d0      	cbz	r0, 23448 <nrf_modem_at_cmd+0xc0>
   23412:	4638      	mov	r0, r7
   23414:	f003 ffc6 	bl	273a4 <rpc_client_msg_data_tx_free>
   23418:	f06f 040a 	mvn.w	r4, #10
   2341c:	e00e      	b.n	2343c <nrf_modem_at_cmd+0xb4>
   2341e:	3401      	adds	r4, #1
   23420:	e7d9      	b.n	233d6 <nrf_modem_at_cmd+0x4e>
   23422:	463a      	mov	r2, r7
   23424:	4629      	mov	r1, r5
   23426:	4630      	mov	r0, r6
   23428:	4798      	blx	r3
   2342a:	4604      	mov	r4, r0
   2342c:	b918      	cbnz	r0, 23436 <nrf_modem_at_cmd+0xae>
   2342e:	4630      	mov	r0, r6
   23430:	f7ff ff0c 	bl	2324c <at_response_match>
   23434:	4604      	mov	r4, r0
   23436:	4638      	mov	r0, r7
   23438:	f003 ffb4 	bl	273a4 <rpc_client_msg_data_tx_free>
   2343c:	4620      	mov	r0, r4
   2343e:	b005      	add	sp, #20
   23440:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23444:	b002      	add	sp, #8
   23446:	4770      	bx	lr
   23448:	2302      	movs	r3, #2
   2344a:	2201      	movs	r2, #1
   2344c:	4638      	mov	r0, r7
   2344e:	9903      	ldr	r1, [sp, #12]
   23450:	f7ff fec2 	bl	231d8 <at_cmd_send>
   23454:	4604      	mov	r4, r0
   23456:	b120      	cbz	r0, 23462 <nrf_modem_at_cmd+0xda>
   23458:	f8d8 0000 	ldr.w	r0, [r8]
   2345c:	f003 fb08 	bl	26a70 <nrf_modem_os_sem_give>
   23460:	e7ec      	b.n	2343c <nrf_modem_at_cmd+0xb4>
   23462:	4f17      	ldr	r7, [pc, #92]	; (234c0 <nrf_modem_at_cmd+0x138>)
   23464:	4630      	mov	r0, r6
   23466:	683c      	ldr	r4, [r7, #0]
   23468:	6862      	ldr	r2, [r4, #4]
   2346a:	6821      	ldr	r1, [r4, #0]
   2346c:	42aa      	cmp	r2, r5
   2346e:	bf28      	it	cs
   23470:	462a      	movcs	r2, r5
   23472:	f005 f992 	bl	2879a <memcpy>
   23476:	6863      	ldr	r3, [r4, #4]
   23478:	42ab      	cmp	r3, r5
   2347a:	d80f      	bhi.n	2349c <nrf_modem_at_cmd+0x114>
   2347c:	6820      	ldr	r0, [r4, #0]
   2347e:	f7ff fee5 	bl	2324c <at_response_match>
   23482:	4604      	mov	r4, r0
   23484:	f8d8 0000 	ldr.w	r0, [r8]
   23488:	f003 faf2 	bl	26a70 <nrf_modem_os_sem_give>
   2348c:	683b      	ldr	r3, [r7, #0]
   2348e:	6818      	ldr	r0, [r3, #0]
   23490:	f003 ff82 	bl	27398 <rpc_client_msg_data_rx_free>
   23494:	6838      	ldr	r0, [r7, #0]
   23496:	f003 ff7c 	bl	27392 <rpc_client_msg_rx_free>
   2349a:	e7cf      	b.n	2343c <nrf_modem_at_cmd+0xb4>
   2349c:	f06f 0406 	mvn.w	r4, #6
   234a0:	e7f0      	b.n	23484 <nrf_modem_at_cmd+0xfc>
   234a2:	f04f 34ff 	mov.w	r4, #4294967295
   234a6:	e7c9      	b.n	2343c <nrf_modem_at_cmd+0xb4>
   234a8:	f06f 040d 	mvn.w	r4, #13
   234ac:	e7c6      	b.n	2343c <nrf_modem_at_cmd+0xb4>
   234ae:	f06f 0415 	mvn.w	r4, #21
   234b2:	e7c3      	b.n	2343c <nrf_modem_at_cmd+0xb4>
   234b4:	2000d7f4 	.word	0x2000d7f4
   234b8:	2000d7f0 	.word	0x2000d7f0
   234bc:	2000d804 	.word	0x2000d804
   234c0:	2000d800 	.word	0x2000d800

000234c4 <rpc_at_event_handler>:
   234c4:	b538      	push	{r3, r4, r5, lr}
   234c6:	68c3      	ldr	r3, [r0, #12]
   234c8:	4604      	mov	r4, r0
   234ca:	2ba7      	cmp	r3, #167	; 0xa7
   234cc:	d003      	beq.n	234d6 <rpc_at_event_handler+0x12>
   234ce:	6820      	ldr	r0, [r4, #0]
   234d0:	f003 ff62 	bl	27398 <rpc_client_msg_data_rx_free>
   234d4:	e008      	b.n	234e8 <rpc_at_event_handler+0x24>
   234d6:	2903      	cmp	r1, #3
   234d8:	d008      	beq.n	234ec <rpc_at_event_handler+0x28>
   234da:	2904      	cmp	r1, #4
   234dc:	d021      	beq.n	23522 <rpc_at_event_handler+0x5e>
   234de:	2902      	cmp	r1, #2
   234e0:	bf02      	ittt	eq
   234e2:	2201      	moveq	r2, #1
   234e4:	4b12      	ldreq	r3, [pc, #72]	; (23530 <rpc_at_event_handler+0x6c>)
   234e6:	701a      	strbeq	r2, [r3, #0]
   234e8:	2000      	movs	r0, #0
   234ea:	bd38      	pop	{r3, r4, r5, pc}
   234ec:	4d11      	ldr	r5, [pc, #68]	; (23534 <rpc_at_event_handler+0x70>)
   234ee:	682b      	ldr	r3, [r5, #0]
   234f0:	b13b      	cbz	r3, 23502 <rpc_at_event_handler+0x3e>
   234f2:	6800      	ldr	r0, [r0, #0]
   234f4:	4798      	blx	r3
   234f6:	2300      	movs	r3, #0
   234f8:	6820      	ldr	r0, [r4, #0]
   234fa:	602b      	str	r3, [r5, #0]
   234fc:	f003 ff4c 	bl	27398 <rpc_client_msg_data_rx_free>
   23500:	e006      	b.n	23510 <rpc_at_event_handler+0x4c>
   23502:	4b0b      	ldr	r3, [pc, #44]	; (23530 <rpc_at_event_handler+0x6c>)
   23504:	781a      	ldrb	r2, [r3, #0]
   23506:	2a02      	cmp	r2, #2
   23508:	d105      	bne.n	23516 <rpc_at_event_handler+0x52>
   2350a:	6800      	ldr	r0, [r0, #0]
   2350c:	2800      	cmp	r0, #0
   2350e:	d1f5      	bne.n	234fc <rpc_at_event_handler+0x38>
   23510:	2000      	movs	r0, #0
   23512:	b2c0      	uxtb	r0, r0
   23514:	e7e9      	b.n	234ea <rpc_at_event_handler+0x26>
   23516:	4a08      	ldr	r2, [pc, #32]	; (23538 <rpc_at_event_handler+0x74>)
   23518:	6010      	str	r0, [r2, #0]
   2351a:	2202      	movs	r2, #2
   2351c:	2001      	movs	r0, #1
   2351e:	701a      	strb	r2, [r3, #0]
   23520:	e7f7      	b.n	23512 <rpc_at_event_handler+0x4e>
   23522:	4b06      	ldr	r3, [pc, #24]	; (2353c <rpc_at_event_handler+0x78>)
   23524:	681b      	ldr	r3, [r3, #0]
   23526:	2b00      	cmp	r3, #0
   23528:	d0d1      	beq.n	234ce <rpc_at_event_handler+0xa>
   2352a:	6800      	ldr	r0, [r0, #0]
   2352c:	4798      	blx	r3
   2352e:	e7ce      	b.n	234ce <rpc_at_event_handler+0xa>
   23530:	2000ddea 	.word	0x2000ddea
   23534:	2000d7f8 	.word	0x2000d7f8
   23538:	2000d800 	.word	0x2000d800
   2353c:	2000d7fc 	.word	0x2000d7fc

00023540 <rpc_at_init>:
   23540:	2201      	movs	r2, #1
   23542:	b510      	push	{r4, lr}
   23544:	4611      	mov	r1, r2
   23546:	4807      	ldr	r0, [pc, #28]	; (23564 <rpc_at_init+0x24>)
   23548:	f7fa fcc4 	bl	1ded4 <nrf_modem_os_sem_init>
   2354c:	4601      	mov	r1, r0
   2354e:	b928      	cbnz	r0, 2355c <rpc_at_init+0x1c>
   23550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23554:	2301      	movs	r3, #1
   23556:	2205      	movs	r2, #5
   23558:	f7ff be3e 	b.w	231d8 <at_cmd_send>
   2355c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   23560:	bd10      	pop	{r4, pc}
   23562:	bf00      	nop
   23564:	2000d804 	.word	0x2000d804

00023568 <rpc_gnss_event_handler>:
   23568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2356a:	6804      	ldr	r4, [r0, #0]
   2356c:	4606      	mov	r6, r0
   2356e:	b13c      	cbz	r4, 23580 <rpc_gnss_event_handler+0x18>
   23570:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   23574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   23578:	d104      	bne.n	23584 <rpc_gnss_event_handler+0x1c>
   2357a:	4b41      	ldr	r3, [pc, #260]	; (23680 <rpc_gnss_event_handler+0x118>)
   2357c:	e9c3 1400 	strd	r1, r4, [r3]
   23580:	2000      	movs	r0, #0
   23582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23584:	4d3f      	ldr	r5, [pc, #252]	; (23684 <rpc_gnss_event_handler+0x11c>)
   23586:	682b      	ldr	r3, [r5, #0]
   23588:	2b00      	cmp	r3, #0
   2358a:	d06f      	beq.n	2366c <rpc_gnss_event_handler+0x104>
   2358c:	f244 0204 	movw	r2, #16388	; 0x4004
   23590:	4291      	cmp	r1, r2
   23592:	d80b      	bhi.n	235ac <rpc_gnss_event_handler+0x44>
   23594:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   23598:	d968      	bls.n	2366c <rpc_gnss_event_handler+0x104>
   2359a:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
   2359e:	3902      	subs	r1, #2
   235a0:	2902      	cmp	r1, #2
   235a2:	d82a      	bhi.n	235fa <rpc_gnss_event_handler+0x92>
   235a4:	e8df f001 	tbb	[pc, r1]
   235a8:	5047      	.short	0x5047
   235aa:	59          	.byte	0x59
   235ab:	00          	.byte	0x00
   235ac:	f244 1301 	movw	r3, #16641	; 0x4101
   235b0:	4299      	cmp	r1, r3
   235b2:	d02e      	beq.n	23612 <rpc_gnss_event_handler+0xaa>
   235b4:	f244 2301 	movw	r3, #16897	; 0x4201
   235b8:	4299      	cmp	r1, r3
   235ba:	d157      	bne.n	2366c <rpc_gnss_event_handler+0x104>
   235bc:	4e32      	ldr	r6, [pc, #200]	; (23688 <rpc_gnss_event_handler+0x120>)
   235be:	6830      	ldr	r0, [r6, #0]
   235c0:	b108      	cbz	r0, 235c6 <rpc_gnss_event_handler+0x5e>
   235c2:	f003 fee9 	bl	27398 <rpc_client_msg_data_rx_free>
   235c6:	2202      	movs	r2, #2
   235c8:	4b30      	ldr	r3, [pc, #192]	; (2368c <rpc_gnss_event_handler+0x124>)
   235ca:	6034      	str	r4, [r6, #0]
   235cc:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   235d0:	701a      	strb	r2, [r3, #0]
   235d2:	4e2f      	ldr	r6, [pc, #188]	; (23690 <rpc_gnss_event_handler+0x128>)
   235d4:	f014 0708 	ands.w	r7, r4, #8
   235d8:	682b      	ldr	r3, [r5, #0]
   235da:	7832      	ldrb	r2, [r6, #0]
   235dc:	d025      	beq.n	2362a <rpc_gnss_event_handler+0xc2>
   235de:	b91a      	cbnz	r2, 235e8 <rpc_gnss_event_handler+0x80>
   235e0:	2005      	movs	r0, #5
   235e2:	4798      	blx	r3
   235e4:	2301      	movs	r3, #1
   235e6:	7033      	strb	r3, [r6, #0]
   235e8:	07e3      	lsls	r3, r4, #31
   235ea:	d502      	bpl.n	235f2 <rpc_gnss_event_handler+0x8a>
   235ec:	2002      	movs	r0, #2
   235ee:	682b      	ldr	r3, [r5, #0]
   235f0:	4798      	blx	r3
   235f2:	2001      	movs	r0, #1
   235f4:	682b      	ldr	r3, [r5, #0]
   235f6:	4798      	blx	r3
   235f8:	e7c2      	b.n	23580 <rpc_gnss_event_handler+0x18>
   235fa:	4e23      	ldr	r6, [pc, #140]	; (23688 <rpc_gnss_event_handler+0x120>)
   235fc:	6830      	ldr	r0, [r6, #0]
   235fe:	b108      	cbz	r0, 23604 <rpc_gnss_event_handler+0x9c>
   23600:	f003 feca 	bl	27398 <rpc_client_msg_data_rx_free>
   23604:	2200      	movs	r2, #0
   23606:	4b21      	ldr	r3, [pc, #132]	; (2368c <rpc_gnss_event_handler+0x124>)
   23608:	6034      	str	r4, [r6, #0]
   2360a:	701a      	strb	r2, [r3, #0]
   2360c:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
   23610:	e7df      	b.n	235d2 <rpc_gnss_event_handler+0x6a>
   23612:	4e1d      	ldr	r6, [pc, #116]	; (23688 <rpc_gnss_event_handler+0x120>)
   23614:	6830      	ldr	r0, [r6, #0]
   23616:	b108      	cbz	r0, 2361c <rpc_gnss_event_handler+0xb4>
   23618:	f003 febe 	bl	27398 <rpc_client_msg_data_rx_free>
   2361c:	2201      	movs	r2, #1
   2361e:	4b1b      	ldr	r3, [pc, #108]	; (2368c <rpc_gnss_event_handler+0x124>)
   23620:	6034      	str	r4, [r6, #0]
   23622:	701a      	strb	r2, [r3, #0]
   23624:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
   23628:	e7d3      	b.n	235d2 <rpc_gnss_event_handler+0x6a>
   2362a:	2a00      	cmp	r2, #0
   2362c:	d0dc      	beq.n	235e8 <rpc_gnss_event_handler+0x80>
   2362e:	2006      	movs	r0, #6
   23630:	4798      	blx	r3
   23632:	7037      	strb	r7, [r6, #0]
   23634:	e7d8      	b.n	235e8 <rpc_gnss_event_handler+0x80>
   23636:	4e17      	ldr	r6, [pc, #92]	; (23694 <rpc_gnss_event_handler+0x12c>)
   23638:	6830      	ldr	r0, [r6, #0]
   2363a:	b108      	cbz	r0, 23640 <rpc_gnss_event_handler+0xd8>
   2363c:	f003 feac 	bl	27398 <rpc_client_msg_data_rx_free>
   23640:	2003      	movs	r0, #3
   23642:	682b      	ldr	r3, [r5, #0]
   23644:	6034      	str	r4, [r6, #0]
   23646:	e7d6      	b.n	235f6 <rpc_gnss_event_handler+0x8e>
   23648:	4e13      	ldr	r6, [pc, #76]	; (23698 <rpc_gnss_event_handler+0x130>)
   2364a:	6830      	ldr	r0, [r6, #0]
   2364c:	b108      	cbz	r0, 23652 <rpc_gnss_event_handler+0xea>
   2364e:	f003 fea3 	bl	27398 <rpc_client_msg_data_rx_free>
   23652:	2004      	movs	r0, #4
   23654:	682b      	ldr	r3, [r5, #0]
   23656:	6034      	str	r4, [r6, #0]
   23658:	e7cd      	b.n	235f6 <rpc_gnss_event_handler+0x8e>
   2365a:	7822      	ldrb	r2, [r4, #0]
   2365c:	2a03      	cmp	r2, #3
   2365e:	d805      	bhi.n	2366c <rpc_gnss_event_handler+0x104>
   23660:	e8df f002 	tbb	[pc, r2]
   23664:	0c0a0802 	.word	0x0c0a0802
   23668:	2007      	movs	r0, #7
   2366a:	4798      	blx	r3
   2366c:	6830      	ldr	r0, [r6, #0]
   2366e:	f003 fe93 	bl	27398 <rpc_client_msg_data_rx_free>
   23672:	e785      	b.n	23580 <rpc_gnss_event_handler+0x18>
   23674:	2008      	movs	r0, #8
   23676:	e7f8      	b.n	2366a <rpc_gnss_event_handler+0x102>
   23678:	2009      	movs	r0, #9
   2367a:	e7f6      	b.n	2366a <rpc_gnss_event_handler+0x102>
   2367c:	200a      	movs	r0, #10
   2367e:	e7f4      	b.n	2366a <rpc_gnss_event_handler+0x102>
   23680:	2000d818 	.word	0x2000d818
   23684:	2000d808 	.word	0x2000d808
   23688:	2000d814 	.word	0x2000d814
   2368c:	2000ddeb 	.word	0x2000ddeb
   23690:	2000ddec 	.word	0x2000ddec
   23694:	2000d810 	.word	0x2000d810
   23698:	2000d80c 	.word	0x2000d80c

0002369c <rpc_gnss_init>:
   2369c:	b508      	push	{r3, lr}
   2369e:	2300      	movs	r3, #0
   236a0:	4a09      	ldr	r2, [pc, #36]	; (236c8 <rpc_gnss_init+0x2c>)
   236a2:	480a      	ldr	r0, [pc, #40]	; (236cc <rpc_gnss_init+0x30>)
   236a4:	7013      	strb	r3, [r2, #0]
   236a6:	4a0a      	ldr	r2, [pc, #40]	; (236d0 <rpc_gnss_init+0x34>)
   236a8:	7013      	strb	r3, [r2, #0]
   236aa:	4a0a      	ldr	r2, [pc, #40]	; (236d4 <rpc_gnss_init+0x38>)
   236ac:	7013      	strb	r3, [r2, #0]
   236ae:	4a0a      	ldr	r2, [pc, #40]	; (236d8 <rpc_gnss_init+0x3c>)
   236b0:	7013      	strb	r3, [r2, #0]
   236b2:	4a0a      	ldr	r2, [pc, #40]	; (236dc <rpc_gnss_init+0x40>)
   236b4:	6013      	str	r3, [r2, #0]
   236b6:	2201      	movs	r2, #1
   236b8:	4611      	mov	r1, r2
   236ba:	f7fa fc0b 	bl	1ded4 <nrf_modem_os_sem_init>
   236be:	2800      	cmp	r0, #0
   236c0:	bf18      	it	ne
   236c2:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   236c6:	bd08      	pop	{r3, pc}
   236c8:	2000ddec 	.word	0x2000ddec
   236cc:	2000d820 	.word	0x2000d820
   236d0:	2000ddee 	.word	0x2000ddee
   236d4:	2000dded 	.word	0x2000dded
   236d8:	2000ddeb 	.word	0x2000ddeb
   236dc:	2000d808 	.word	0x2000d808

000236e0 <modem_off>:
   236e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   236e2:	2501      	movs	r5, #1
   236e4:	4c07      	ldr	r4, [pc, #28]	; (23704 <modem_off+0x24>)
   236e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   236ea:	6165      	str	r5, [r4, #20]
   236ec:	f003 f9b6 	bl	26a5c <nrf_modem_os_busywait>
   236f0:	2300      	movs	r3, #0
   236f2:	6163      	str	r3, [r4, #20]
   236f4:	9301      	str	r3, [sp, #4]
   236f6:	6125      	str	r5, [r4, #16]
   236f8:	6923      	ldr	r3, [r4, #16]
   236fa:	9301      	str	r3, [sp, #4]
   236fc:	9b01      	ldr	r3, [sp, #4]
   236fe:	b003      	add	sp, #12
   23700:	bd30      	pop	{r4, r5, pc}
   23702:	bf00      	nop
   23704:	40005600 	.word	0x40005600

00023708 <atomic_set.constprop.0.isra.0>:
   23708:	4b03      	ldr	r3, [pc, #12]	; (23718 <atomic_set.constprop.0.isra.0+0x10>)
   2370a:	e8d3 2fef 	ldaex	r2, [r3]
   2370e:	e8c3 0fe1 	stlex	r1, r0, [r3]
   23712:	2900      	cmp	r1, #0
   23714:	d1f9      	bne.n	2370a <atomic_set.constprop.0.isra.0+0x2>
   23716:	4770      	bx	lr
   23718:	2000d824 	.word	0x2000d824

0002371c <nrf_modem_init>:
   2371c:	b513      	push	{r0, r1, r4, lr}
   2371e:	4604      	mov	r4, r0
   23720:	b380      	cbz	r0, 23784 <nrf_modem_init+0x68>
   23722:	6a43      	ldr	r3, [r0, #36]	; 0x24
   23724:	b38b      	cbz	r3, 2378a <nrf_modem_init+0x6e>
   23726:	2201      	movs	r2, #1
   23728:	4b1b      	ldr	r3, [pc, #108]	; (23798 <nrf_modem_init+0x7c>)
   2372a:	e8d3 1fef 	ldaex	r1, [r3]
   2372e:	2900      	cmp	r1, #0
   23730:	d103      	bne.n	2373a <nrf_modem_init+0x1e>
   23732:	e8c3 2fe0 	stlex	r0, r2, [r3]
   23736:	2800      	cmp	r0, #0
   23738:	d1f7      	bne.n	2372a <nrf_modem_init+0xe>
   2373a:	d129      	bne.n	23790 <nrf_modem_init+0x74>
   2373c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2373e:	f000 f82d 	bl	2379c <nrf_modem_fault_handler_set>
   23742:	f7fa fc1b 	bl	1df7c <nrf_modem_os_init>
   23746:	6a23      	ldr	r3, [r4, #32]
   23748:	4668      	mov	r0, sp
   2374a:	9400      	str	r4, [sp, #0]
   2374c:	f88d 3004 	strb.w	r3, [sp, #4]
   23750:	f003 fdbf 	bl	272d2 <rpc_init>
   23754:	4604      	mov	r4, r0
   23756:	b958      	cbnz	r0, 23770 <nrf_modem_init+0x54>
   23758:	f7ff fef2 	bl	23540 <rpc_at_init>
   2375c:	4604      	mov	r4, r0
   2375e:	b938      	cbnz	r0, 23770 <nrf_modem_init+0x54>
   23760:	f7ff fc60 	bl	23024 <rpc_ip_init>
   23764:	4604      	mov	r4, r0
   23766:	b918      	cbnz	r0, 23770 <nrf_modem_init+0x54>
   23768:	f7ff ff98 	bl	2369c <rpc_gnss_init>
   2376c:	4604      	mov	r4, r0
   2376e:	b138      	cbz	r0, 23780 <nrf_modem_init+0x64>
   23770:	f7ff ffb6 	bl	236e0 <modem_off>
   23774:	2000      	movs	r0, #0
   23776:	f7ff ffc7 	bl	23708 <atomic_set.constprop.0.isra.0>
   2377a:	4620      	mov	r0, r4
   2377c:	b002      	add	sp, #8
   2377e:	bd10      	pop	{r4, pc}
   23780:	2002      	movs	r0, #2
   23782:	e7f8      	b.n	23776 <nrf_modem_init+0x5a>
   23784:	f06f 040d 	mvn.w	r4, #13
   23788:	e7f7      	b.n	2377a <nrf_modem_init+0x5e>
   2378a:	f06f 0415 	mvn.w	r4, #21
   2378e:	e7f4      	b.n	2377a <nrf_modem_init+0x5e>
   23790:	f04f 34ff 	mov.w	r4, #4294967295
   23794:	e7f1      	b.n	2377a <nrf_modem_init+0x5e>
   23796:	bf00      	nop
   23798:	2000d824 	.word	0x2000d824

0002379c <nrf_modem_fault_handler_set>:
   2379c:	4b01      	ldr	r3, [pc, #4]	; (237a4 <nrf_modem_fault_handler_set+0x8>)
   2379e:	6018      	str	r0, [r3, #0]
   237a0:	4770      	bx	lr
   237a2:	bf00      	nop
   237a4:	2000d828 	.word	0x2000d828

000237a8 <nrf_modem_fault_handler_internal>:
   237a8:	b507      	push	{r0, r1, r2, lr}
   237aa:	4b04      	ldr	r3, [pc, #16]	; (237bc <nrf_modem_fault_handler_internal+0x14>)
   237ac:	e9cd 0100 	strd	r0, r1, [sp]
   237b0:	681b      	ldr	r3, [r3, #0]
   237b2:	4668      	mov	r0, sp
   237b4:	4798      	blx	r3
   237b6:	b003      	add	sp, #12
   237b8:	f85d fb04 	ldr.w	pc, [sp], #4
   237bc:	2000d828 	.word	0x2000d828

000237c0 <nrf_modem_state_set>:
   237c0:	4b01      	ldr	r3, [pc, #4]	; (237c8 <nrf_modem_state_set+0x8>)
   237c2:	7018      	strb	r0, [r3, #0]
   237c4:	4770      	bx	lr
   237c6:	bf00      	nop
   237c8:	2000ddef 	.word	0x2000ddef

000237cc <nrf_modem_state_is_initialized>:
   237cc:	4b02      	ldr	r3, [pc, #8]	; (237d8 <nrf_modem_state_is_initialized+0xc>)
   237ce:	7818      	ldrb	r0, [r3, #0]
   237d0:	1e43      	subs	r3, r0, #1
   237d2:	4258      	negs	r0, r3
   237d4:	4158      	adcs	r0, r3
   237d6:	4770      	bx	lr
   237d8:	2000ddef 	.word	0x2000ddef

000237dc <ipc_trace_init>:
   237dc:	2100      	movs	r1, #0
   237de:	4b07      	ldr	r3, [pc, #28]	; (237fc <ipc_trace_init+0x20>)
   237e0:	2201      	movs	r2, #1
   237e2:	7019      	strb	r1, [r3, #0]
   237e4:	4b06      	ldr	r3, [pc, #24]	; (23800 <ipc_trace_init+0x24>)
   237e6:	7019      	strb	r1, [r3, #0]
   237e8:	4b06      	ldr	r3, [pc, #24]	; (23804 <ipc_trace_init+0x28>)
   237ea:	6019      	str	r1, [r3, #0]
   237ec:	4b06      	ldr	r3, [pc, #24]	; (23808 <ipc_trace_init+0x2c>)
   237ee:	6019      	str	r1, [r3, #0]
   237f0:	4b06      	ldr	r3, [pc, #24]	; (2380c <ipc_trace_init+0x30>)
   237f2:	6018      	str	r0, [r3, #0]
   237f4:	4806      	ldr	r0, [pc, #24]	; (23810 <ipc_trace_init+0x34>)
   237f6:	f7fa bb6d 	b.w	1ded4 <nrf_modem_os_sem_init>
   237fa:	bf00      	nop
   237fc:	2000ddf0 	.word	0x2000ddf0
   23800:	2000ddf1 	.word	0x2000ddf1
   23804:	2000d830 	.word	0x2000d830
   23808:	2000d834 	.word	0x2000d834
   2380c:	2000d844 	.word	0x2000d844
   23810:	2000d82c 	.word	0x2000d82c

00023814 <ipc_trace_handler>:
   23814:	b470      	push	{r4, r5, r6}
   23816:	4b2d      	ldr	r3, [pc, #180]	; (238cc <ipc_trace_handler+0xb8>)
   23818:	681b      	ldr	r3, [r3, #0]
   2381a:	6919      	ldr	r1, [r3, #16]
   2381c:	6958      	ldr	r0, [r3, #20]
   2381e:	7c1a      	ldrb	r2, [r3, #16]
   23820:	2200      	movs	r2, #0
   23822:	741a      	strb	r2, [r3, #16]
   23824:	7c5c      	ldrb	r4, [r3, #17]
   23826:	745a      	strb	r2, [r3, #17]
   23828:	7c9c      	ldrb	r4, [r3, #18]
   2382a:	749a      	strb	r2, [r3, #18]
   2382c:	7cdc      	ldrb	r4, [r3, #19]
   2382e:	74da      	strb	r2, [r3, #19]
   23830:	7d1c      	ldrb	r4, [r3, #20]
   23832:	751a      	strb	r2, [r3, #20]
   23834:	7d5c      	ldrb	r4, [r3, #21]
   23836:	755a      	strb	r2, [r3, #21]
   23838:	7d9c      	ldrb	r4, [r3, #22]
   2383a:	2903      	cmp	r1, #3
   2383c:	759a      	strb	r2, [r3, #22]
   2383e:	7ddc      	ldrb	r4, [r3, #23]
   23840:	75da      	strb	r2, [r3, #23]
   23842:	d029      	beq.n	23898 <ipc_trace_handler+0x84>
   23844:	2904      	cmp	r1, #4
   23846:	d033      	beq.n	238b0 <ipc_trace_handler+0x9c>
   23848:	2901      	cmp	r1, #1
   2384a:	d12f      	bne.n	238ac <ipc_trace_handler+0x98>
   2384c:	6885      	ldr	r5, [r0, #8]
   2384e:	4e20      	ldr	r6, [pc, #128]	; (238d0 <ipc_trace_handler+0xbc>)
   23850:	4295      	cmp	r5, r2
   23852:	d110      	bne.n	23876 <ipc_trace_handler+0x62>
   23854:	2101      	movs	r1, #1
   23856:	7a1a      	ldrb	r2, [r3, #8]
   23858:	2200      	movs	r2, #0
   2385a:	7219      	strb	r1, [r3, #8]
   2385c:	7a59      	ldrb	r1, [r3, #9]
   2385e:	725a      	strb	r2, [r3, #9]
   23860:	7a99      	ldrb	r1, [r3, #10]
   23862:	729a      	strb	r2, [r3, #10]
   23864:	7ada      	ldrb	r2, [r3, #11]
   23866:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   2386a:	72da      	strb	r2, [r3, #11]
   2386c:	4b19      	ldr	r3, [pc, #100]	; (238d4 <ipc_trace_handler+0xc0>)
   2386e:	bc70      	pop	{r4, r5, r6}
   23870:	6818      	ldr	r0, [r3, #0]
   23872:	f003 b8fd 	b.w	26a70 <nrf_modem_os_sem_give>
   23876:	1c91      	adds	r1, r2, #2
   23878:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2387c:	684c      	ldr	r4, [r1, #4]
   2387e:	7821      	ldrb	r1, [r4, #0]
   23880:	2962      	cmp	r1, #98	; 0x62
   23882:	d007      	beq.n	23894 <ipc_trace_handler+0x80>
   23884:	3963      	subs	r1, #99	; 0x63
   23886:	bf18      	it	ne
   23888:	2101      	movne	r1, #1
   2388a:	0049      	lsls	r1, r1, #1
   2388c:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
   23890:	3201      	adds	r2, #1
   23892:	e7dd      	b.n	23850 <ipc_trace_handler+0x3c>
   23894:	2101      	movs	r1, #1
   23896:	e7f9      	b.n	2388c <ipc_trace_handler+0x78>
   23898:	7a18      	ldrb	r0, [r3, #8]
   2389a:	7219      	strb	r1, [r3, #8]
   2389c:	7a59      	ldrb	r1, [r3, #9]
   2389e:	725a      	strb	r2, [r3, #9]
   238a0:	7a99      	ldrb	r1, [r3, #10]
   238a2:	729a      	strb	r2, [r3, #10]
   238a4:	7ada      	ldrb	r2, [r3, #11]
   238a6:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   238aa:	72da      	strb	r2, [r3, #11]
   238ac:	bc70      	pop	{r4, r5, r6}
   238ae:	4770      	bx	lr
   238b0:	7a18      	ldrb	r0, [r3, #8]
   238b2:	7219      	strb	r1, [r3, #8]
   238b4:	7a59      	ldrb	r1, [r3, #9]
   238b6:	725a      	strb	r2, [r3, #9]
   238b8:	7a99      	ldrb	r1, [r3, #10]
   238ba:	729a      	strb	r2, [r3, #10]
   238bc:	7ada      	ldrb	r2, [r3, #11]
   238be:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   238c2:	72da      	strb	r2, [r3, #11]
   238c4:	2201      	movs	r2, #1
   238c6:	4b04      	ldr	r3, [pc, #16]	; (238d8 <ipc_trace_handler+0xc4>)
   238c8:	701a      	strb	r2, [r3, #0]
   238ca:	e7ef      	b.n	238ac <ipc_trace_handler+0x98>
   238cc:	2000d844 	.word	0x2000d844
   238d0:	2000d838 	.word	0x2000d838
   238d4:	2000d82c 	.word	0x2000d82c
   238d8:	2000ddf1 	.word	0x2000ddf1

000238dc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   238dc:	4b01      	ldr	r3, [pc, #4]	; (238e4 <z_impl_z_errno+0x8>)
   238de:	6898      	ldr	r0, [r3, #8]
}
   238e0:	3064      	adds	r0, #100	; 0x64
   238e2:	4770      	bx	lr
   238e4:	2000d848 	.word	0x2000d848

000238e8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   238e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   238ec:	b086      	sub	sp, #24
   238ee:	4605      	mov	r5, r0
   238f0:	460e      	mov	r6, r1
   238f2:	af00      	add	r7, sp, #0
	__asm__ volatile(
   238f4:	f04f 0320 	mov.w	r3, #32
   238f8:	f3ef 8811 	mrs	r8, BASEPRI
   238fc:	f383 8812 	msr	BASEPRI_MAX, r3
   23900:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   23904:	f000 ff90 	bl	24828 <z_impl_z_current_get>
   23908:	2d04      	cmp	r5, #4
   2390a:	bf98      	it	ls
   2390c:	4b2c      	ldrls	r3, [pc, #176]	; (239c0 <z_fatal_error+0xd8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2390e:	46e9      	mov	r9, sp
   23910:	b08a      	sub	sp, #40	; 0x28
   23912:	4604      	mov	r4, r0
   23914:	466a      	mov	r2, sp
   23916:	bf94      	ite	ls
   23918:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   2391c:	4b29      	ldrhi	r3, [pc, #164]	; (239c4 <z_fatal_error+0xdc>)
   2391e:	61d3      	str	r3, [r2, #28]
   23920:	f240 3301 	movw	r3, #769	; 0x301
   23924:	f04f 0a00 	mov.w	sl, #0
   23928:	8493      	strh	r3, [r2, #36]	; 0x24
   2392a:	4927      	ldr	r1, [pc, #156]	; (239c8 <z_fatal_error+0xe0>)
   2392c:	4b27      	ldr	r3, [pc, #156]	; (239cc <z_fatal_error+0xe4>)
   2392e:	e9c2 1505 	strd	r1, r5, [r2, #20]
   23932:	f8c2 a020 	str.w	sl, [r2, #32]
   23936:	f842 3f10 	str.w	r3, [r2, #16]!
   2393a:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   2393e:	4653      	mov	r3, sl
   23940:	4823      	ldr	r0, [pc, #140]	; (239d0 <z_fatal_error+0xe8>)
   23942:	f7f7 f9cb 	bl	1acdc <z_impl_z_log_msg_static_create>
   23946:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   23948:	b17e      	cbz	r6, 2396a <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2394a:	69f3      	ldr	r3, [r6, #28]
   2394c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   23950:	b15b      	cbz	r3, 2396a <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   23952:	4b20      	ldr	r3, [pc, #128]	; (239d4 <z_fatal_error+0xec>)
   23954:	617b      	str	r3, [r7, #20]
   23956:	2302      	movs	r3, #2
   23958:	613b      	str	r3, [r7, #16]
   2395a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2395e:	4653      	mov	r3, sl
   23960:	481b      	ldr	r0, [pc, #108]	; (239d0 <z_fatal_error+0xe8>)
   23962:	f107 0210 	add.w	r2, r7, #16
   23966:	f7f7 f9b9 	bl	1acdc <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2396a:	b12c      	cbz	r4, 23978 <z_fatal_error+0x90>
   2396c:	4620      	mov	r0, r4
   2396e:	f004 fbc0 	bl	280f2 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   23972:	b108      	cbz	r0, 23978 <z_fatal_error+0x90>
   23974:	7803      	ldrb	r3, [r0, #0]
   23976:	b903      	cbnz	r3, 2397a <z_fatal_error+0x92>
		thread_name = "unknown";
   23978:	4817      	ldr	r0, [pc, #92]	; (239d8 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2397a:	46e9      	mov	r9, sp
   2397c:	b08a      	sub	sp, #40	; 0x28
   2397e:	466a      	mov	r2, sp
   23980:	4b16      	ldr	r3, [pc, #88]	; (239dc <z_fatal_error+0xf4>)
   23982:	61d0      	str	r0, [r2, #28]
   23984:	e9c2 3405 	strd	r3, r4, [r2, #20]
   23988:	f240 3301 	movw	r3, #769	; 0x301
   2398c:	8413      	strh	r3, [r2, #32]
   2398e:	4b14      	ldr	r3, [pc, #80]	; (239e0 <z_fatal_error+0xf8>)
   23990:	f842 3f10 	str.w	r3, [r2, #16]!
   23994:	2300      	movs	r3, #0
   23996:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   2399a:	480d      	ldr	r0, [pc, #52]	; (239d0 <z_fatal_error+0xe8>)
   2399c:	f7f7 f99e 	bl	1acdc <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   239a0:	4631      	mov	r1, r6
   239a2:	46cd      	mov	sp, r9
   239a4:	4628      	mov	r0, r5
   239a6:	f7fc fecf 	bl	20748 <k_sys_fatal_error_handler>
	__asm__ volatile(
   239aa:	f388 8811 	msr	BASEPRI, r8
   239ae:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   239b2:	4620      	mov	r0, r4
   239b4:	f7f8 fb24 	bl	1c000 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   239b8:	3718      	adds	r7, #24
   239ba:	46bd      	mov	sp, r7
   239bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   239c0:	000295f8 	.word	0x000295f8
   239c4:	0002b44f 	.word	0x0002b44f
   239c8:	0002b465 	.word	0x0002b465
   239cc:	01000005 	.word	0x01000005
   239d0:	00028fa4 	.word	0x00028fa4
   239d4:	0002b48d 	.word	0x0002b48d
   239d8:	0002b45d 	.word	0x0002b45d
   239dc:	0002b4ae 	.word	0x0002b4ae
   239e0:	01000004 	.word	0x01000004

000239e4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   239e4:	4b0f      	ldr	r3, [pc, #60]	; (23a24 <z_sys_init_run_level+0x40>)
{
   239e6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   239e8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   239ec:	3001      	adds	r0, #1
   239ee:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   239f2:	42a6      	cmp	r6, r4
   239f4:	d800      	bhi.n	239f8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   239f6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   239f8:	e9d4 3500 	ldrd	r3, r5, [r4]
   239fc:	4628      	mov	r0, r5
   239fe:	4798      	blx	r3
		if (dev != NULL) {
   23a00:	b16d      	cbz	r5, 23a1e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   23a02:	b138      	cbz	r0, 23a14 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   23a04:	2800      	cmp	r0, #0
   23a06:	bfb8      	it	lt
   23a08:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   23a0a:	28ff      	cmp	r0, #255	; 0xff
   23a0c:	bfa8      	it	ge
   23a0e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   23a10:	68eb      	ldr	r3, [r5, #12]
   23a12:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   23a14:	68ea      	ldr	r2, [r5, #12]
   23a16:	7853      	ldrb	r3, [r2, #1]
   23a18:	f043 0301 	orr.w	r3, r3, #1
   23a1c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23a1e:	3408      	adds	r4, #8
   23a20:	e7e7      	b.n	239f2 <z_sys_init_run_level+0xe>
   23a22:	bf00      	nop
   23a24:	0002960c 	.word	0x0002960c

00023a28 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   23a28:	2201      	movs	r2, #1
{
   23a2a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   23a2c:	4b09      	ldr	r3, [pc, #36]	; (23a54 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   23a2e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   23a30:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   23a32:	f7ff ffd7 	bl	239e4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   23a36:	f001 f9cf 	bl	24dd8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   23a3a:	2004      	movs	r0, #4
   23a3c:	f7ff ffd2 	bl	239e4 <z_sys_init_run_level>

	z_init_static_threads();
   23a40:	f000 f92c 	bl	23c9c <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   23a44:	f7f5 fcd6 	bl	193f4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   23a48:	4a03      	ldr	r2, [pc, #12]	; (23a58 <bg_thread_main+0x30>)
   23a4a:	7b13      	ldrb	r3, [r2, #12]
   23a4c:	f023 0301 	bic.w	r3, r3, #1
   23a50:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   23a52:	bd08      	pop	{r3, pc}
   23a54:	2000ddf2 	.word	0x2000ddf2
   23a58:	2000cf10 	.word	0x2000cf10

00023a5c <z_bss_zero>:
{
   23a5c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   23a5e:	4803      	ldr	r0, [pc, #12]	; (23a6c <z_bss_zero+0x10>)
   23a60:	4a03      	ldr	r2, [pc, #12]	; (23a70 <z_bss_zero+0x14>)
   23a62:	2100      	movs	r1, #0
   23a64:	1a12      	subs	r2, r2, r0
   23a66:	f004 fabb 	bl	27fe0 <z_early_memset>
}
   23a6a:	bd08      	pop	{r3, pc}
   23a6c:	2000c938 	.word	0x2000c938
   23a70:	2000ddf4 	.word	0x2000ddf4

00023a74 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   23a74:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   23a76:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   23a78:	4e13      	ldr	r6, [pc, #76]	; (23ac8 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   23a7a:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   23a7c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   23a80:	2300      	movs	r3, #0
{
   23a82:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   23a84:	e9cd 2304 	strd	r2, r3, [sp, #16]
   23a88:	220f      	movs	r2, #15
   23a8a:	9301      	str	r3, [sp, #4]
   23a8c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   23a90:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   23a92:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   23a96:	4d0d      	ldr	r5, [pc, #52]	; (23acc <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   23a98:	490d      	ldr	r1, [pc, #52]	; (23ad0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   23a9a:	fb03 5500 	mla	r5, r3, r0, r5
{
   23a9e:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   23aa0:	fb02 1100 	mla	r1, r2, r0, r1
   23aa4:	4b0b      	ldr	r3, [pc, #44]	; (23ad4 <z_init_cpu+0x60>)
   23aa6:	4630      	mov	r0, r6
   23aa8:	9500      	str	r5, [sp, #0]
   23aaa:	f000 f89b 	bl	23be4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23aae:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   23ab0:	752c      	strb	r4, [r5, #20]
   23ab2:	f023 0304 	bic.w	r3, r3, #4
   23ab6:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   23ab8:	4b07      	ldr	r3, [pc, #28]	; (23ad8 <z_init_cpu+0x64>)
   23aba:	3401      	adds	r4, #1
   23abc:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   23ac0:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   23ac2:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   23ac4:	b006      	add	sp, #24
   23ac6:	bd70      	pop	{r4, r5, r6, pc}
   23ac8:	2000ce88 	.word	0x2000ce88
   23acc:	2000d848 	.word	0x2000d848
   23ad0:	2000e9f8 	.word	0x2000e9f8
   23ad4:	00023d55 	.word	0x00023d55
   23ad8:	2000e1f8 	.word	0x2000e1f8

00023adc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   23adc:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   23ade:	2000      	movs	r0, #0
{
   23ae0:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   23ae2:	f7ff ff7f 	bl	239e4 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   23ae6:	4b2f      	ldr	r3, [pc, #188]	; (23ba4 <z_cstart+0xc8>)
	uint32_t msp =
   23ae8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   23aec:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   23af0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23af4:	2400      	movs	r4, #0
   23af6:	23e0      	movs	r3, #224	; 0xe0
   23af8:	4d2b      	ldr	r5, [pc, #172]	; (23ba8 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   23afa:	4e2c      	ldr	r6, [pc, #176]	; (23bac <z_cstart+0xd0>)
   23afc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   23b00:	77ec      	strb	r4, [r5, #31]
   23b02:	762c      	strb	r4, [r5, #24]
   23b04:	766c      	strb	r4, [r5, #25]
   23b06:	76ac      	strb	r4, [r5, #26]
   23b08:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   23b0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23b0e:	4f28      	ldr	r7, [pc, #160]	; (23bb0 <z_cstart+0xd4>)
   23b10:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   23b14:	626b      	str	r3, [r5, #36]	; 0x24
   23b16:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   23b1a:	f7f8 f9d5 	bl	1bec8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   23b1e:	f7f7 fd53 	bl	1b5c8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   23b22:	f04f 33ff 	mov.w	r3, #4294967295
   23b26:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   23b28:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   23b2a:	f7f8 fc17 	bl	1c35c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   23b2e:	f7f8 fa7d 	bl	1c02c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   23b32:	f7f6 ff67 	bl	1aa04 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   23b36:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   23b3a:	ad06      	add	r5, sp, #24
   23b3c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   23b3e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   23b42:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   23b46:	f001 f929 	bl	24d9c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   23b4a:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   23b4c:	f004 fa3c 	bl	27fc8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   23b50:	2001      	movs	r0, #1
   23b52:	f7ff ff47 	bl	239e4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   23b56:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   23b58:	4d16      	ldr	r5, [pc, #88]	; (23bb4 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   23b5a:	f7ff ff43 	bl	239e4 <z_sys_init_run_level>
	z_sched_init();
   23b5e:	f000 fdbb 	bl	246d8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23b62:	4b15      	ldr	r3, [pc, #84]	; (23bb8 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   23b64:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23b66:	9305      	str	r3, [sp, #20]
   23b68:	2301      	movs	r3, #1
   23b6a:	4914      	ldr	r1, [pc, #80]	; (23bbc <z_cstart+0xe0>)
   23b6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   23b70:	e9cd 4303 	strd	r4, r3, [sp, #12]
   23b74:	4628      	mov	r0, r5
   23b76:	463b      	mov	r3, r7
   23b78:	e9cd 4401 	strd	r4, r4, [sp, #4]
   23b7c:	9400      	str	r4, [sp, #0]
   23b7e:	f000 f831 	bl	23be4 <z_setup_new_thread>
   23b82:	4606      	mov	r6, r0
   23b84:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   23b86:	4628      	mov	r0, r5
   23b88:	f022 0204 	bic.w	r2, r2, #4
   23b8c:	736a      	strb	r2, [r5, #13]
   23b8e:	f004 fbea 	bl	28366 <z_ready_thread>
	z_init_cpu(0);
   23b92:	4620      	mov	r0, r4
   23b94:	f7ff ff6e 	bl	23a74 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   23b98:	463a      	mov	r2, r7
   23b9a:	4631      	mov	r1, r6
   23b9c:	4628      	mov	r0, r5
   23b9e:	f7f7 fe79 	bl	1b894 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   23ba2:	bf00      	nop
   23ba4:	2000e1f8 	.word	0x2000e1f8
   23ba8:	e000ed00 	.word	0xe000ed00
   23bac:	2000d848 	.word	0x2000d848
   23bb0:	00023a29 	.word	0x00023a29
   23bb4:	2000cf10 	.word	0x2000cf10
   23bb8:	0002b510 	.word	0x0002b510
   23bbc:	2000eb38 	.word	0x2000eb38

00023bc0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   23bc0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   23bc2:	4c06      	ldr	r4, [pc, #24]	; (23bdc <statics_init+0x1c>)
   23bc4:	4d06      	ldr	r5, [pc, #24]	; (23be0 <statics_init+0x20>)
   23bc6:	42ac      	cmp	r4, r5
   23bc8:	d301      	bcc.n	23bce <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   23bca:	2000      	movs	r0, #0
   23bcc:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   23bce:	4620      	mov	r0, r4
   23bd0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   23bd4:	f004 fa08 	bl	27fe8 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   23bd8:	3414      	adds	r4, #20
   23bda:	e7f4      	b.n	23bc6 <statics_init+0x6>
   23bdc:	2000c814 	.word	0x2000c814
   23be0:	2000c83c 	.word	0x2000c83c

00023be4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   23be4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   23be8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   23bea:	f100 0558 	add.w	r5, r0, #88	; 0x58
   23bee:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   23bf0:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   23bf2:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   23bf6:	2500      	movs	r5, #0
{
   23bf8:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   23bfa:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   23bfc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   23bfe:	e9c0 5506 	strd	r5, r5, [r0, #24]
   23c02:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23c04:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23c06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23c08:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   23c0c:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   23c10:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   23c12:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   23c14:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23c16:	9202      	str	r2, [sp, #8]
   23c18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   23c1a:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23c1e:	9201      	str	r2, [sp, #4]
   23c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   23c22:	9200      	str	r2, [sp, #0]
   23c24:	4642      	mov	r2, r8
   23c26:	f7f7 fe15 	bl	1b854 <arch_new_thread>
	if (!_current) {
   23c2a:	4b05      	ldr	r3, [pc, #20]	; (23c40 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   23c2c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   23c2e:	689b      	ldr	r3, [r3, #8]
   23c30:	b103      	cbz	r3, 23c34 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   23c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   23c34:	4640      	mov	r0, r8
   23c36:	6763      	str	r3, [r4, #116]	; 0x74
   23c38:	b004      	add	sp, #16
   23c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23c3e:	bf00      	nop
   23c40:	2000d848 	.word	0x2000d848

00023c44 <z_impl_k_thread_create>:
{
   23c44:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23c46:	2500      	movs	r5, #0
{
   23c48:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23c4a:	9505      	str	r5, [sp, #20]
   23c4c:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   23c4e:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23c52:	9504      	str	r5, [sp, #16]
   23c54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   23c56:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23c58:	9503      	str	r5, [sp, #12]
   23c5a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23c5c:	9502      	str	r5, [sp, #8]
   23c5e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23c60:	9501      	str	r5, [sp, #4]
   23c62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23c64:	9500      	str	r5, [sp, #0]
   23c66:	f7ff ffbd 	bl	23be4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   23c6a:	f1b6 3fff 	cmp.w	r6, #4294967295
   23c6e:	bf08      	it	eq
   23c70:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   23c74:	d005      	beq.n	23c82 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23c76:	ea56 0307 	orrs.w	r3, r6, r7
   23c7a:	d105      	bne.n	23c88 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   23c7c:	4620      	mov	r0, r4
   23c7e:	f000 fcab 	bl	245d8 <z_sched_start>
}
   23c82:	4620      	mov	r0, r4
   23c84:	b007      	add	sp, #28
   23c86:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23c88:	463a      	mov	r2, r7
   23c8a:	4633      	mov	r3, r6
   23c8c:	4902      	ldr	r1, [pc, #8]	; (23c98 <z_impl_k_thread_create+0x54>)
   23c8e:	f104 0018 	add.w	r0, r4, #24
   23c92:	f000 fea9 	bl	249e8 <z_add_timeout>
   23c96:	e7f4      	b.n	23c82 <z_impl_k_thread_create+0x3e>
   23c98:	000282d3 	.word	0x000282d3

00023c9c <z_init_static_threads>:
{
   23c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23ca0:	4c29      	ldr	r4, [pc, #164]	; (23d48 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   23ca2:	4d2a      	ldr	r5, [pc, #168]	; (23d4c <z_init_static_threads+0xb0>)
{
   23ca4:	b087      	sub	sp, #28
   23ca6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   23ca8:	42ae      	cmp	r6, r5
   23caa:	f104 0430 	add.w	r4, r4, #48	; 0x30
   23cae:	d30f      	bcc.n	23cd0 <z_init_static_threads+0x34>
	k_sched_lock();
   23cb0:	f000 fce2 	bl	24678 <k_sched_lock>
   23cb4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   23cb8:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   23cbc:	4c22      	ldr	r4, [pc, #136]	; (23d48 <z_init_static_threads+0xac>)
   23cbe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 23d50 <z_init_static_threads+0xb4>
   23cc2:	42ac      	cmp	r4, r5
   23cc4:	d320      	bcc.n	23d08 <z_init_static_threads+0x6c>
}
   23cc6:	b007      	add	sp, #28
   23cc8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   23ccc:	f000 bce8 	b.w	246a0 <k_sched_unlock>
		z_setup_new_thread(
   23cd0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23cd4:	9305      	str	r3, [sp, #20]
   23cd6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   23cda:	9304      	str	r3, [sp, #16]
   23cdc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   23ce0:	9303      	str	r3, [sp, #12]
   23ce2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   23ce6:	9302      	str	r3, [sp, #8]
   23ce8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   23cec:	9301      	str	r3, [sp, #4]
   23cee:	f854 3c20 	ldr.w	r3, [r4, #-32]
   23cf2:	9300      	str	r3, [sp, #0]
   23cf4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   23cf8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   23cfc:	f7ff ff72 	bl	23be4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   23d00:	f854 3c30 	ldr.w	r3, [r4, #-48]
   23d04:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   23d06:	e7ce      	b.n	23ca6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   23d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23d0a:	1c5a      	adds	r2, r3, #1
   23d0c:	d00d      	beq.n	23d2a <z_init_static_threads+0x8e>
   23d0e:	2100      	movs	r1, #0
   23d10:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   23d12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23d16:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23d1a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   23d1e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23d22:	d104      	bne.n	23d2e <z_init_static_threads+0x92>
	z_sched_start(thread);
   23d24:	4640      	mov	r0, r8
   23d26:	f000 fc57 	bl	245d8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   23d2a:	3430      	adds	r4, #48	; 0x30
   23d2c:	e7c9      	b.n	23cc2 <z_init_static_threads+0x26>
   23d2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23d32:	2300      	movs	r3, #0
   23d34:	f7f4 ffe8 	bl	18d08 <__aeabi_uldivmod>
   23d38:	4602      	mov	r2, r0
   23d3a:	460b      	mov	r3, r1
   23d3c:	f108 0018 	add.w	r0, r8, #24
   23d40:	4649      	mov	r1, r9
   23d42:	f000 fe51 	bl	249e8 <z_add_timeout>
   23d46:	e7f0      	b.n	23d2a <z_init_static_threads+0x8e>
   23d48:	00028e54 	.word	0x00028e54
   23d4c:	00028e54 	.word	0x00028e54
   23d50:	000282d3 	.word	0x000282d3

00023d54 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   23d54:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   23d56:	4c0b      	ldr	r4, [pc, #44]	; (23d84 <idle+0x30>)
   23d58:	4d0b      	ldr	r5, [pc, #44]	; (23d88 <idle+0x34>)
	__asm__ volatile(
   23d5a:	f04f 0220 	mov.w	r2, #32
   23d5e:	f3ef 8311 	mrs	r3, BASEPRI
   23d62:	f382 8812 	msr	BASEPRI_MAX, r2
   23d66:	f3bf 8f6f 	isb	sy
   23d6a:	f004 fbc2 	bl	284f2 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   23d6e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   23d70:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   23d72:	b913      	cbnz	r3, 23d7a <idle+0x26>
	arch_cpu_idle();
   23d74:	f7f7 fc2e 	bl	1b5d4 <arch_cpu_idle>
}
   23d78:	e7ef      	b.n	23d5a <idle+0x6>
   23d7a:	f7f7 fb09 	bl	1b390 <pm_system_suspend>
   23d7e:	2800      	cmp	r0, #0
   23d80:	d1eb      	bne.n	23d5a <idle+0x6>
   23d82:	e7f7      	b.n	23d74 <idle+0x20>
   23d84:	2000d848 	.word	0x2000d848
   23d88:	2000ddf2 	.word	0x2000ddf2

00023d8c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   23d8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23d90:	4604      	mov	r4, r0
   23d92:	4617      	mov	r7, r2
   23d94:	461e      	mov	r6, r3
   23d96:	f04f 0320 	mov.w	r3, #32
   23d9a:	f3ef 8811 	mrs	r8, BASEPRI
   23d9e:	f383 8812 	msr	BASEPRI_MAX, r3
   23da2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   23da6:	68c3      	ldr	r3, [r0, #12]
   23da8:	4a33      	ldr	r2, [pc, #204]	; (23e78 <z_impl_k_mutex_lock+0xec>)
   23daa:	b17b      	cbz	r3, 23dcc <z_impl_k_mutex_lock+0x40>
   23dac:	6880      	ldr	r0, [r0, #8]
   23dae:	6891      	ldr	r1, [r2, #8]
   23db0:	4288      	cmp	r0, r1
   23db2:	d019      	beq.n	23de8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   23db4:	ea57 0306 	orrs.w	r3, r7, r6
   23db8:	d118      	bne.n	23dec <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   23dba:	f388 8811 	msr	BASEPRI, r8
   23dbe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   23dc2:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   23dc6:	b002      	add	sp, #8
   23dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   23dcc:	6891      	ldr	r1, [r2, #8]
   23dce:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   23dd2:	3301      	adds	r3, #1
   23dd4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   23dd6:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   23dd8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   23dda:	60a3      	str	r3, [r4, #8]
   23ddc:	f388 8811 	msr	BASEPRI, r8
   23de0:	f3bf 8f6f 	isb	sy
		return 0;
   23de4:	2000      	movs	r0, #0
   23de6:	e7ee      	b.n	23dc6 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   23de8:	6921      	ldr	r1, [r4, #16]
   23dea:	e7f2      	b.n	23dd2 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   23dec:	f991 100e 	ldrsb.w	r1, [r1, #14]
   23df0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   23df4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   23df8:	4299      	cmp	r1, r3
   23dfa:	bfa8      	it	ge
   23dfc:	4619      	movge	r1, r3
   23dfe:	4291      	cmp	r1, r2
   23e00:	bfb8      	it	lt
   23e02:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   23e04:	428b      	cmp	r3, r1
   23e06:	dd2e      	ble.n	23e66 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   23e08:	f004 f97e 	bl	28108 <adjust_owner_prio.isra.0>
   23e0c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   23e0e:	4622      	mov	r2, r4
   23e10:	4641      	mov	r1, r8
   23e12:	e9cd 7600 	strd	r7, r6, [sp]
   23e16:	4819      	ldr	r0, [pc, #100]	; (23e7c <z_impl_k_mutex_lock+0xf0>)
   23e18:	f000 fb68 	bl	244ec <z_pend_curr>
	if (got_mutex == 0) {
   23e1c:	2800      	cmp	r0, #0
   23e1e:	d0e1      	beq.n	23de4 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   23e20:	f04f 0320 	mov.w	r3, #32
   23e24:	f3ef 8611 	mrs	r6, BASEPRI
   23e28:	f383 8812 	msr	BASEPRI_MAX, r3
   23e2c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   23e30:	68a0      	ldr	r0, [r4, #8]
   23e32:	b1d0      	cbz	r0, 23e6a <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   23e34:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   23e36:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23e38:	429c      	cmp	r4, r3
   23e3a:	d00a      	beq.n	23e52 <z_impl_k_mutex_lock+0xc6>
   23e3c:	b14b      	cbz	r3, 23e52 <z_impl_k_mutex_lock+0xc6>
   23e3e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   23e42:	4299      	cmp	r1, r3
   23e44:	bfa8      	it	ge
   23e46:	4619      	movge	r1, r3
   23e48:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   23e4c:	4299      	cmp	r1, r3
   23e4e:	bfb8      	it	lt
   23e50:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   23e52:	f004 f959 	bl	28108 <adjust_owner_prio.isra.0>
   23e56:	b140      	cbz	r0, 23e6a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   23e58:	4631      	mov	r1, r6
   23e5a:	4808      	ldr	r0, [pc, #32]	; (23e7c <z_impl_k_mutex_lock+0xf0>)
   23e5c:	f000 fbaa 	bl	245b4 <z_reschedule>
	return -EAGAIN;
   23e60:	f06f 000a 	mvn.w	r0, #10
   23e64:	e7af      	b.n	23dc6 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   23e66:	2500      	movs	r5, #0
   23e68:	e7d1      	b.n	23e0e <z_impl_k_mutex_lock+0x82>
	if (resched) {
   23e6a:	2d00      	cmp	r5, #0
   23e6c:	d1f4      	bne.n	23e58 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   23e6e:	f386 8811 	msr	BASEPRI, r6
   23e72:	f3bf 8f6f 	isb	sy
   23e76:	e7f3      	b.n	23e60 <z_impl_k_mutex_lock+0xd4>
   23e78:	2000d848 	.word	0x2000d848
   23e7c:	2000ddf3 	.word	0x2000ddf3

00023e80 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   23e80:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   23e82:	6883      	ldr	r3, [r0, #8]
{
   23e84:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   23e86:	b36b      	cbz	r3, 23ee4 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   23e88:	4a19      	ldr	r2, [pc, #100]	; (23ef0 <z_impl_k_mutex_unlock+0x70>)
   23e8a:	6892      	ldr	r2, [r2, #8]
   23e8c:	4293      	cmp	r3, r2
   23e8e:	d12c      	bne.n	23eea <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   23e90:	68c3      	ldr	r3, [r0, #12]
   23e92:	2b01      	cmp	r3, #1
   23e94:	d903      	bls.n	23e9e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   23e96:	3b01      	subs	r3, #1
   23e98:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   23e9a:	2000      	movs	r0, #0
}
   23e9c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   23e9e:	f04f 0320 	mov.w	r3, #32
   23ea2:	f3ef 8511 	mrs	r5, BASEPRI
   23ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   23eaa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   23eae:	6901      	ldr	r1, [r0, #16]
   23eb0:	6880      	ldr	r0, [r0, #8]
   23eb2:	f004 f929 	bl	28108 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   23eb6:	4620      	mov	r0, r4
   23eb8:	f004 fa8c 	bl	283d4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   23ebc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   23ebe:	b158      	cbz	r0, 23ed8 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   23ec0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   23ec4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   23ec6:	2200      	movs	r2, #0
   23ec8:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   23eca:	f004 fa4c 	bl	28366 <z_ready_thread>
		z_reschedule(&lock, key);
   23ece:	4629      	mov	r1, r5
   23ed0:	4808      	ldr	r0, [pc, #32]	; (23ef4 <z_impl_k_mutex_unlock+0x74>)
   23ed2:	f000 fb6f 	bl	245b4 <z_reschedule>
   23ed6:	e7e0      	b.n	23e9a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   23ed8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   23eda:	f385 8811 	msr	BASEPRI, r5
   23ede:	f3bf 8f6f 	isb	sy
   23ee2:	e7da      	b.n	23e9a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   23ee4:	f06f 0015 	mvn.w	r0, #21
   23ee8:	e7d8      	b.n	23e9c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   23eea:	f04f 30ff 	mov.w	r0, #4294967295
   23eee:	e7d5      	b.n	23e9c <z_impl_k_mutex_unlock+0x1c>
   23ef0:	2000d848 	.word	0x2000d848
   23ef4:	2000ddf3 	.word	0x2000ddf3

00023ef8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   23ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23efa:	4611      	mov	r1, r2
	__asm__ volatile(
   23efc:	f04f 0220 	mov.w	r2, #32
   23f00:	f3ef 8511 	mrs	r5, BASEPRI
   23f04:	f382 8812 	msr	BASEPRI_MAX, r2
   23f08:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   23f0c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   23f0e:	b19c      	cbz	r4, 23f38 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23f10:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23f12:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23f14:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23f18:	4294      	cmp	r4, r2
	list->head = node;
   23f1a:	6003      	str	r3, [r0, #0]
	list->tail = node;
   23f1c:	bf08      	it	eq
   23f1e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   23f20:	2101      	movs	r1, #1
   23f22:	4620      	mov	r0, r4
   23f24:	f004 f965 	bl	281f2 <z_queue_node_peek>
   23f28:	4604      	mov	r4, r0
	__asm__ volatile(
   23f2a:	f385 8811 	msr	BASEPRI, r5
   23f2e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   23f32:	4620      	mov	r0, r4
   23f34:	b003      	add	sp, #12
   23f36:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23f38:	ea51 0203 	orrs.w	r2, r1, r3
   23f3c:	d0f5      	beq.n	23f2a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23f3e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   23f42:	e9cd 1300 	strd	r1, r3, [sp]
   23f46:	4610      	mov	r0, r2
   23f48:	4629      	mov	r1, r5
   23f4a:	f000 facf 	bl	244ec <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   23f4e:	2800      	cmp	r0, #0
   23f50:	d1ef      	bne.n	23f32 <z_impl_k_queue_get+0x3a>
   23f52:	4b02      	ldr	r3, [pc, #8]	; (23f5c <z_impl_k_queue_get+0x64>)
   23f54:	689b      	ldr	r3, [r3, #8]
   23f56:	695c      	ldr	r4, [r3, #20]
   23f58:	e7eb      	b.n	23f32 <z_impl_k_queue_get+0x3a>
   23f5a:	bf00      	nop
   23f5c:	2000d848 	.word	0x2000d848

00023f60 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   23f60:	b538      	push	{r3, r4, r5, lr}
   23f62:	4604      	mov	r4, r0
	__asm__ volatile(
   23f64:	f04f 0320 	mov.w	r3, #32
   23f68:	f3ef 8511 	mrs	r5, BASEPRI
   23f6c:	f383 8812 	msr	BASEPRI_MAX, r3
   23f70:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   23f74:	f004 fa2e 	bl	283d4 <z_unpend_first_thread>

	if (thread != NULL) {
   23f78:	b148      	cbz	r0, 23f8e <z_impl_k_sem_give+0x2e>
   23f7a:	2200      	movs	r2, #0
   23f7c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   23f7e:	f004 f9f2 	bl	28366 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   23f82:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   23f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   23f88:	4807      	ldr	r0, [pc, #28]	; (23fa8 <z_impl_k_sem_give+0x48>)
   23f8a:	f000 bb13 	b.w	245b4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   23f8e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   23f92:	429a      	cmp	r2, r3
   23f94:	bf18      	it	ne
   23f96:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   23f98:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   23f9a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   23f9c:	f104 0010 	add.w	r0, r4, #16
   23fa0:	f004 fb91 	bl	286c6 <z_handle_obj_poll_events>
}
   23fa4:	e7ed      	b.n	23f82 <z_impl_k_sem_give+0x22>
   23fa6:	bf00      	nop
   23fa8:	2000ddf3 	.word	0x2000ddf3

00023fac <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   23fac:	b513      	push	{r0, r1, r4, lr}
   23fae:	f04f 0420 	mov.w	r4, #32
   23fb2:	f3ef 8111 	mrs	r1, BASEPRI
   23fb6:	f384 8812 	msr	BASEPRI_MAX, r4
   23fba:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   23fbe:	6884      	ldr	r4, [r0, #8]
   23fc0:	b144      	cbz	r4, 23fd4 <z_impl_k_sem_take+0x28>
		sem->count--;
   23fc2:	3c01      	subs	r4, #1
   23fc4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   23fc6:	f381 8811 	msr	BASEPRI, r1
   23fca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   23fce:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   23fd0:	b002      	add	sp, #8
   23fd2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23fd4:	ea52 0403 	orrs.w	r4, r2, r3
   23fd8:	d106      	bne.n	23fe8 <z_impl_k_sem_take+0x3c>
   23fda:	f381 8811 	msr	BASEPRI, r1
   23fde:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   23fe2:	f06f 000f 	mvn.w	r0, #15
   23fe6:	e7f3      	b.n	23fd0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   23fe8:	e9cd 2300 	strd	r2, r3, [sp]
   23fec:	4602      	mov	r2, r0
   23fee:	4802      	ldr	r0, [pc, #8]	; (23ff8 <z_impl_k_sem_take+0x4c>)
   23ff0:	f000 fa7c 	bl	244ec <z_pend_curr>
	return ret;
   23ff4:	e7ec      	b.n	23fd0 <z_impl_k_sem_take+0x24>
   23ff6:	bf00      	nop
   23ff8:	2000ddf3 	.word	0x2000ddf3

00023ffc <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   23ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24000:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   24002:	f04f 38ff 	mov.w	r8, #4294967295
   24006:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
   2400a:	4e48      	ldr	r6, [pc, #288]	; (2412c <work_queue_main+0x130>)
{
   2400c:	b085      	sub	sp, #20
	__asm__ volatile(
   2400e:	f04f 0320 	mov.w	r3, #32
   24012:	f3ef 8711 	mrs	r7, BASEPRI
   24016:	f383 8812 	msr	BASEPRI_MAX, r3
   2401a:	f3bf 8f6f 	isb	sy
   2401e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   24022:	b98d      	cbnz	r5, 24048 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   24024:	2102      	movs	r1, #2
   24026:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   2402a:	f004 f909 	bl	28240 <flag_test_and_clear>
   2402e:	2800      	cmp	r0, #0
   24030:	d143      	bne.n	240ba <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   24032:	2300      	movs	r3, #0
   24034:	4639      	mov	r1, r7
   24036:	e9cd 8900 	strd	r8, r9, [sp]
   2403a:	9302      	str	r3, [sp, #8]
   2403c:	f104 0290 	add.w	r2, r4, #144	; 0x90
   24040:	483b      	ldr	r0, [pc, #236]	; (24130 <work_queue_main+0x134>)
   24042:	f000 fc57 	bl	248f4 <z_sched_wait>
			continue;
   24046:	e7e2      	b.n	2400e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24048:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   2404c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2404e:	4295      	cmp	r5, r2
	list->head = node;
   24050:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	list->tail = node;
   24054:	bf08      	it	eq
   24056:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	*flagp |= BIT(bit);
   2405a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   2405e:	f043 0302 	orr.w	r3, r3, #2
   24062:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   24066:	68eb      	ldr	r3, [r5, #12]
   24068:	f023 0304 	bic.w	r3, r3, #4
   2406c:	f043 0301 	orr.w	r3, r3, #1
   24070:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   24072:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   24074:	f387 8811 	msr	BASEPRI, r7
   24078:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   2407c:	4628      	mov	r0, r5
   2407e:	4798      	blx	r3
	__asm__ volatile(
   24080:	f04f 0320 	mov.w	r3, #32
   24084:	f3ef 8b11 	mrs	fp, BASEPRI
   24088:	f383 8812 	msr	BASEPRI_MAX, r3
   2408c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   24090:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24092:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   24094:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24098:	d419      	bmi.n	240ce <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   2409a:	60ea      	str	r2, [r5, #12]
   2409c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   240a0:	f023 0302 	bic.w	r3, r3, #2
   240a4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	__asm__ volatile(
   240a8:	f38b 8811 	msr	BASEPRI, fp
   240ac:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   240b0:	05db      	lsls	r3, r3, #23
   240b2:	d4ac      	bmi.n	2400e <work_queue_main+0x12>
	z_impl_k_yield();
   240b4:	f000 fb1c 	bl	246f0 <z_impl_k_yield>
}
   240b8:	e7a9      	b.n	2400e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   240ba:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   240be:	2200      	movs	r2, #0
   240c0:	2101      	movs	r1, #1
   240c2:	4628      	mov	r0, r5
   240c4:	f004 f9dc 	bl	28480 <z_sched_wake>
   240c8:	2800      	cmp	r0, #0
   240ca:	d1f8      	bne.n	240be <work_queue_main+0xc2>
   240cc:	e7b1      	b.n	24032 <work_queue_main+0x36>
	return list->head;
   240ce:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   240d0:	f023 0303 	bic.w	r3, r3, #3
   240d4:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   240d6:	2800      	cmp	r0, #0
   240d8:	d0e0      	beq.n	2409c <work_queue_main+0xa0>
	return node->next;
   240da:	2700      	movs	r7, #0
	parent->next = child;
   240dc:	463b      	mov	r3, r7
	return node->next;
   240de:	f8d0 a000 	ldr.w	sl, [r0]
   240e2:	2800      	cmp	r0, #0
   240e4:	d0da      	beq.n	2409c <work_queue_main+0xa0>
		if (wc->work == work) {
   240e6:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   240e8:	4601      	mov	r1, r0
		if (wc->work == work) {
   240ea:	4295      	cmp	r5, r2
   240ec:	d10c      	bne.n	24108 <work_queue_main+0x10c>
   240ee:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   240f0:	b99f      	cbnz	r7, 2411a <work_queue_main+0x11e>
   240f2:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   240f4:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   240f6:	4282      	cmp	r2, r0
   240f8:	d100      	bne.n	240fc <work_queue_main+0x100>
	list->tail = node;
   240fa:	6071      	str	r1, [r6, #4]
	parent->next = child;
   240fc:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   24100:	f7ff ff2e 	bl	23f60 <z_impl_k_sem_give>
}
   24104:	4639      	mov	r1, r7
   24106:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24108:	f1ba 0f00 	cmp.w	sl, #0
   2410c:	d00b      	beq.n	24126 <work_queue_main+0x12a>
	return node->next;
   2410e:	f8da 2000 	ldr.w	r2, [sl]
   24112:	4650      	mov	r0, sl
   24114:	460f      	mov	r7, r1
   24116:	4692      	mov	sl, r2
   24118:	e7e3      	b.n	240e2 <work_queue_main+0xe6>
	parent->next = child;
   2411a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2411c:	6872      	ldr	r2, [r6, #4]
   2411e:	4282      	cmp	r2, r0
	list->tail = node;
   24120:	bf08      	it	eq
   24122:	6077      	streq	r7, [r6, #4]
}
   24124:	e7ea      	b.n	240fc <work_queue_main+0x100>
   24126:	4652      	mov	r2, sl
   24128:	e7f3      	b.n	24112 <work_queue_main+0x116>
   2412a:	bf00      	nop
   2412c:	2000d870 	.word	0x2000d870
   24130:	2000ddf3 	.word	0x2000ddf3

00024134 <submit_to_queue_locked>:
{
   24134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   24136:	68c3      	ldr	r3, [r0, #12]
{
   24138:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2413a:	079a      	lsls	r2, r3, #30
{
   2413c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2413e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   24142:	d42c      	bmi.n	2419e <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   24144:	075b      	lsls	r3, r3, #29
   24146:	d41a      	bmi.n	2417e <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   24148:	680b      	ldr	r3, [r1, #0]
   2414a:	b90b      	cbnz	r3, 24150 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   2414c:	6883      	ldr	r3, [r0, #8]
   2414e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   24150:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   24152:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   24154:	bf42      	ittt	mi
   24156:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   24158:	2602      	movmi	r6, #2
			*queuep = work->queue;
   2415a:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   2415c:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   2415e:	bf58      	it	pl
   24160:	2601      	movpl	r6, #1
	if (queue == NULL) {
   24162:	2d00      	cmp	r5, #0
   24164:	d03a      	beq.n	241dc <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   24166:	4b1f      	ldr	r3, [pc, #124]	; (241e4 <submit_to_queue_locked+0xb0>)
   24168:	689b      	ldr	r3, [r3, #8]
   2416a:	42ab      	cmp	r3, r5
   2416c:	d00a      	beq.n	24184 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   2416e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24172:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   24174:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24178:	d414      	bmi.n	241a4 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   2417a:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   2417e:	2300      	movs	r3, #0
   24180:	603b      	str	r3, [r7, #0]
	return ret;
   24182:	e025      	b.n	241d0 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   24184:	f003 ffac 	bl	280e0 <k_is_in_isr>
   24188:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   2418c:	2800      	cmp	r0, #0
   2418e:	d1f0      	bne.n	24172 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24190:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   24192:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24196:	d5f0      	bpl.n	2417a <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   24198:	b152      	cbz	r2, 241b0 <submit_to_queue_locked+0x7c>
   2419a:	075b      	lsls	r3, r3, #29
   2419c:	d408      	bmi.n	241b0 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   2419e:	f06f 060f 	mvn.w	r6, #15
   241a2:	e7ec      	b.n	2417e <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   241a4:	2a00      	cmp	r2, #0
   241a6:	d1fa      	bne.n	2419e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   241a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   241ac:	2b00      	cmp	r3, #0
   241ae:	d1f6      	bne.n	2419e <submit_to_queue_locked+0x6a>
	parent->next = child;
   241b0:	2300      	movs	r3, #0
   241b2:	6023      	str	r3, [r4, #0]
	return list->tail;
   241b4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   241b8:	b963      	cbnz	r3, 241d4 <submit_to_queue_locked+0xa0>
	list->head = node;
   241ba:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   241be:	4628      	mov	r0, r5
   241c0:	f004 f849 	bl	28256 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   241c4:	68e3      	ldr	r3, [r4, #12]
   241c6:	f043 0304 	orr.w	r3, r3, #4
   241ca:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   241cc:	683b      	ldr	r3, [r7, #0]
   241ce:	60a3      	str	r3, [r4, #8]
}
   241d0:	4630      	mov	r0, r6
   241d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   241d4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   241d6:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   241da:	e7f0      	b.n	241be <submit_to_queue_locked+0x8a>
		return -EINVAL;
   241dc:	f06f 0615 	mvn.w	r6, #21
   241e0:	e7cd      	b.n	2417e <submit_to_queue_locked+0x4a>
   241e2:	bf00      	nop
   241e4:	2000d848 	.word	0x2000d848

000241e8 <k_work_submit>:
{
   241e8:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   241ea:	4801      	ldr	r0, [pc, #4]	; (241f0 <k_work_submit+0x8>)
   241ec:	f004 b84e 	b.w	2828c <k_work_submit_to_queue>
   241f0:	2000cfa0 	.word	0x2000cfa0

000241f4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   241f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   241f6:	4604      	mov	r4, r0
	list->head = NULL;
   241f8:	2000      	movs	r0, #0
   241fa:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   241fc:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   24200:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   24202:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   24206:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   2420a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2420e:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   24212:	b31d      	cbz	r5, 2425c <k_work_queue_start+0x68>
   24214:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   24216:	2800      	cmp	r0, #0
   24218:	f240 1001 	movw	r0, #257	; 0x101
   2421c:	bf08      	it	eq
   2421e:	2001      	moveq	r0, #1
	*flagp = flags;
   24220:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   24224:	2000      	movs	r0, #0
   24226:	f04f 36ff 	mov.w	r6, #4294967295
   2422a:	f04f 37ff 	mov.w	r7, #4294967295
   2422e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   24232:	e9cd 0001 	strd	r0, r0, [sp, #4]
   24236:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2423a:	4620      	mov	r0, r4
   2423c:	4b08      	ldr	r3, [pc, #32]	; (24260 <k_work_queue_start+0x6c>)
   2423e:	9400      	str	r4, [sp, #0]
   24240:	f7ff fd00 	bl	23c44 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   24244:	b125      	cbz	r5, 24250 <k_work_queue_start+0x5c>
   24246:	6829      	ldr	r1, [r5, #0]
   24248:	b111      	cbz	r1, 24250 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   2424a:	4620      	mov	r0, r4
   2424c:	f003 ff4e 	bl	280ec <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   24250:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   24252:	b009      	add	sp, #36	; 0x24
   24254:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   24258:	f003 bf4d 	b.w	280f6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2425c:	2001      	movs	r0, #1
   2425e:	e7df      	b.n	24220 <k_work_queue_start+0x2c>
   24260:	00023ffd 	.word	0x00023ffd

00024264 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   24264:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   24266:	4d07      	ldr	r5, [pc, #28]	; (24284 <z_reset_time_slice+0x20>)
   24268:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   2426a:	b154      	cbz	r4, 24282 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   2426c:	f7f9 fc6a 	bl	1db44 <sys_clock_elapsed>
   24270:	4b05      	ldr	r3, [pc, #20]	; (24288 <z_reset_time_slice+0x24>)
   24272:	4404      	add	r4, r0
   24274:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   24276:	6828      	ldr	r0, [r5, #0]
   24278:	2100      	movs	r1, #0
	}
}
   2427a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   2427e:	f004 b948 	b.w	28512 <z_set_timeout_expiry>
}
   24282:	bd38      	pop	{r3, r4, r5, pc}
   24284:	2000d880 	.word	0x2000d880
   24288:	2000d848 	.word	0x2000d848

0002428c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   2428c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2428e:	4d0d      	ldr	r5, [pc, #52]	; (242c4 <update_cache+0x38>)
   24290:	462b      	mov	r3, r5
   24292:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24296:	429c      	cmp	r4, r3
   24298:	d000      	beq.n	2429c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2429a:	b904      	cbnz	r4, 2429e <update_cache+0x12>
   2429c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   2429e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   242a0:	b938      	cbnz	r0, 242b2 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   242a2:	7b5a      	ldrb	r2, [r3, #13]
   242a4:	06d2      	lsls	r2, r2, #27
   242a6:	d104      	bne.n	242b2 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   242a8:	69a2      	ldr	r2, [r4, #24]
   242aa:	b912      	cbnz	r2, 242b2 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   242ac:	89da      	ldrh	r2, [r3, #14]
   242ae:	2a7f      	cmp	r2, #127	; 0x7f
   242b0:	d805      	bhi.n	242be <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   242b2:	429c      	cmp	r4, r3
   242b4:	d002      	beq.n	242bc <update_cache+0x30>
			z_reset_time_slice(thread);
   242b6:	4620      	mov	r0, r4
   242b8:	f7ff ffd4 	bl	24264 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   242bc:	4623      	mov	r3, r4
   242be:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   242c0:	bd38      	pop	{r3, r4, r5, pc}
   242c2:	bf00      	nop
   242c4:	2000d848 	.word	0x2000d848

000242c8 <move_thread_to_end_of_prio_q>:
{
   242c8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   242ca:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   242ce:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   242d0:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   242d2:	7b43      	ldrb	r3, [r0, #13]
   242d4:	da04      	bge.n	242e0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   242d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   242da:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   242dc:	f003 ffe7 	bl	282ae <sys_dlist_remove>
	return list->head == list;
   242e0:	4a15      	ldr	r2, [pc, #84]	; (24338 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   242e2:	7b4b      	ldrb	r3, [r1, #13]
   242e4:	4610      	mov	r0, r2
   242e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   242ea:	734b      	strb	r3, [r1, #13]
   242ec:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   242f0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   242f2:	4283      	cmp	r3, r0
   242f4:	bf08      	it	eq
   242f6:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   242f8:	b923      	cbnz	r3, 24304 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   242fa:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   242fe:	6021      	str	r1, [r4, #0]
	list->tail = node;
   24300:	6251      	str	r1, [r2, #36]	; 0x24
}
   24302:	e00c      	b.n	2431e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   24304:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   24308:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2430c:	42b5      	cmp	r5, r6
   2430e:	d00e      	beq.n	2432e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   24310:	42ae      	cmp	r6, r5
   24312:	dd0c      	ble.n	2432e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   24314:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   24316:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   2431a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   2431c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   2431e:	6890      	ldr	r0, [r2, #8]
}
   24320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   24324:	1a43      	subs	r3, r0, r1
   24326:	4258      	negs	r0, r3
   24328:	4158      	adcs	r0, r3
   2432a:	f7ff bfaf 	b.w	2428c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2432e:	429c      	cmp	r4, r3
   24330:	d0e3      	beq.n	242fa <move_thread_to_end_of_prio_q+0x32>
   24332:	681b      	ldr	r3, [r3, #0]
   24334:	e7e0      	b.n	242f8 <move_thread_to_end_of_prio_q+0x30>
   24336:	bf00      	nop
   24338:	2000d848 	.word	0x2000d848

0002433c <ready_thread>:
{
   2433c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2433e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   24342:	7b42      	ldrb	r2, [r0, #13]
   24344:	2b00      	cmp	r3, #0
   24346:	db29      	blt.n	2439c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24348:	06d3      	lsls	r3, r2, #27
   2434a:	d127      	bne.n	2439c <ready_thread+0x60>
	return node->next != NULL;
   2434c:	6983      	ldr	r3, [r0, #24]
   2434e:	bb2b      	cbnz	r3, 2439c <ready_thread+0x60>
	return list->head == list;
   24350:	4913      	ldr	r1, [pc, #76]	; (243a0 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   24352:	f062 027f 	orn	r2, r2, #127	; 0x7f
   24356:	7342      	strb	r2, [r0, #13]
   24358:	460a      	mov	r2, r1
   2435a:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2435e:	4294      	cmp	r4, r2
   24360:	bf18      	it	ne
   24362:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   24364:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24366:	b923      	cbnz	r3, 24372 <ready_thread+0x36>
	node->prev = tail;
   24368:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   2436c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2436e:	6248      	str	r0, [r1, #36]	; 0x24
}
   24370:	e00c      	b.n	2438c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   24372:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   24376:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2437a:	42b5      	cmp	r5, r6
   2437c:	d00a      	beq.n	24394 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2437e:	42ae      	cmp	r6, r5
   24380:	dd08      	ble.n	24394 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   24382:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24384:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   24388:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   2438a:	6058      	str	r0, [r3, #4]
		update_cache(0);
   2438c:	2000      	movs	r0, #0
}
   2438e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   24390:	f7ff bf7c 	b.w	2428c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   24394:	42a3      	cmp	r3, r4
   24396:	d0e7      	beq.n	24368 <ready_thread+0x2c>
   24398:	681b      	ldr	r3, [r3, #0]
   2439a:	e7e4      	b.n	24366 <ready_thread+0x2a>
}
   2439c:	bc70      	pop	{r4, r5, r6}
   2439e:	4770      	bx	lr
   243a0:	2000d848 	.word	0x2000d848

000243a4 <unready_thread>:
{
   243a4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   243a6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   243aa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   243ac:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   243ae:	7b43      	ldrb	r3, [r0, #13]
   243b0:	da04      	bge.n	243bc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   243b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   243b6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   243b8:	f003 ff79 	bl	282ae <sys_dlist_remove>
	update_cache(thread == _current);
   243bc:	4b04      	ldr	r3, [pc, #16]	; (243d0 <unready_thread+0x2c>)
   243be:	6898      	ldr	r0, [r3, #8]
   243c0:	1a43      	subs	r3, r0, r1
   243c2:	4258      	negs	r0, r3
   243c4:	4158      	adcs	r0, r3
}
   243c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   243ca:	f7ff bf5f 	b.w	2428c <update_cache>
   243ce:	bf00      	nop
   243d0:	2000d848 	.word	0x2000d848

000243d4 <pend_locked>:
{
   243d4:	b570      	push	{r4, r5, r6, lr}
   243d6:	4615      	mov	r5, r2
   243d8:	461c      	mov	r4, r3
   243da:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   243dc:	f003 ff9b 	bl	28316 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   243e0:	f1b4 3fff 	cmp.w	r4, #4294967295
   243e4:	bf08      	it	eq
   243e6:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   243ea:	d008      	beq.n	243fe <pend_locked+0x2a>
   243ec:	462a      	mov	r2, r5
   243ee:	4623      	mov	r3, r4
   243f0:	f106 0018 	add.w	r0, r6, #24
   243f4:	4902      	ldr	r1, [pc, #8]	; (24400 <pend_locked+0x2c>)
}
   243f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   243fa:	f000 baf5 	b.w	249e8 <z_add_timeout>
   243fe:	bd70      	pop	{r4, r5, r6, pc}
   24400:	000282d3 	.word	0x000282d3

00024404 <k_sched_time_slice_set>:
{
   24404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24406:	4604      	mov	r4, r0
   24408:	460d      	mov	r5, r1
	__asm__ volatile(
   2440a:	f04f 0320 	mov.w	r3, #32
   2440e:	f3ef 8711 	mrs	r7, BASEPRI
   24412:	f383 8812 	msr	BASEPRI_MAX, r3
   24416:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   2441a:	2600      	movs	r6, #0
   2441c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   24420:	f240 30e7 	movw	r0, #999	; 0x3e7
   24424:	4631      	mov	r1, r6
   24426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2442a:	2300      	movs	r3, #0
   2442c:	fbe4 010c 	umlal	r0, r1, r4, ip
   24430:	f7f4 fc6a 	bl	18d08 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   24434:	42b4      	cmp	r4, r6
   24436:	dd02      	ble.n	2443e <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   24438:	2802      	cmp	r0, #2
   2443a:	bfb8      	it	lt
   2443c:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   2443e:	4a07      	ldr	r2, [pc, #28]	; (2445c <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   24440:	4b07      	ldr	r3, [pc, #28]	; (24460 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   24442:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   24444:	4a07      	ldr	r2, [pc, #28]	; (24464 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   24446:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   24448:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   2444a:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   2444c:	f7ff ff0a 	bl	24264 <z_reset_time_slice>
	__asm__ volatile(
   24450:	f387 8811 	msr	BASEPRI, r7
   24454:	f3bf 8f6f 	isb	sy
}
   24458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2445a:	bf00      	nop
   2445c:	2000d880 	.word	0x2000d880
   24460:	2000d848 	.word	0x2000d848
   24464:	2000d87c 	.word	0x2000d87c

00024468 <z_time_slice>:
{
   24468:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2446a:	f04f 0320 	mov.w	r3, #32
   2446e:	f3ef 8511 	mrs	r5, BASEPRI
   24472:	f383 8812 	msr	BASEPRI_MAX, r3
   24476:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   2447a:	4b17      	ldr	r3, [pc, #92]	; (244d8 <z_time_slice+0x70>)
   2447c:	4a17      	ldr	r2, [pc, #92]	; (244dc <z_time_slice+0x74>)
   2447e:	689c      	ldr	r4, [r3, #8]
   24480:	6811      	ldr	r1, [r2, #0]
   24482:	428c      	cmp	r4, r1
   24484:	d107      	bne.n	24496 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   24486:	4620      	mov	r0, r4
   24488:	f7ff feec 	bl	24264 <z_reset_time_slice>
	__asm__ volatile(
   2448c:	f385 8811 	msr	BASEPRI, r5
   24490:	f3bf 8f6f 	isb	sy
}
   24494:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   24496:	2100      	movs	r1, #0
   24498:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   2449a:	4a11      	ldr	r2, [pc, #68]	; (244e0 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   2449c:	6812      	ldr	r2, [r2, #0]
   2449e:	b1c2      	cbz	r2, 244d2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   244a0:	89e2      	ldrh	r2, [r4, #14]
   244a2:	2a7f      	cmp	r2, #127	; 0x7f
   244a4:	d815      	bhi.n	244d2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   244a6:	7b62      	ldrb	r2, [r4, #13]
   244a8:	06d2      	lsls	r2, r2, #27
   244aa:	d112      	bne.n	244d2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   244ac:	4a0d      	ldr	r2, [pc, #52]	; (244e4 <z_time_slice+0x7c>)
   244ae:	f994 100e 	ldrsb.w	r1, [r4, #14]
   244b2:	6812      	ldr	r2, [r2, #0]
   244b4:	4291      	cmp	r1, r2
   244b6:	db0c      	blt.n	244d2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   244b8:	4a0b      	ldr	r2, [pc, #44]	; (244e8 <z_time_slice+0x80>)
   244ba:	4294      	cmp	r4, r2
   244bc:	d009      	beq.n	244d2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   244be:	691a      	ldr	r2, [r3, #16]
   244c0:	4282      	cmp	r2, r0
   244c2:	dc03      	bgt.n	244cc <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   244c4:	4620      	mov	r0, r4
   244c6:	f7ff feff 	bl	242c8 <move_thread_to_end_of_prio_q>
   244ca:	e7dc      	b.n	24486 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   244cc:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   244ce:	611a      	str	r2, [r3, #16]
   244d0:	e7dc      	b.n	2448c <z_time_slice+0x24>
   244d2:	2200      	movs	r2, #0
   244d4:	e7fb      	b.n	244ce <z_time_slice+0x66>
   244d6:	bf00      	nop
   244d8:	2000d848 	.word	0x2000d848
   244dc:	2000d878 	.word	0x2000d878
   244e0:	2000d880 	.word	0x2000d880
   244e4:	2000d87c 	.word	0x2000d87c
   244e8:	2000ce88 	.word	0x2000ce88

000244ec <z_pend_curr>:
{
   244ec:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   244ee:	480c      	ldr	r0, [pc, #48]	; (24520 <z_pend_curr+0x34>)
   244f0:	4d0c      	ldr	r5, [pc, #48]	; (24524 <z_pend_curr+0x38>)
   244f2:	6886      	ldr	r6, [r0, #8]
{
   244f4:	460c      	mov	r4, r1
	pending_current = _current;
   244f6:	602e      	str	r6, [r5, #0]
{
   244f8:	4611      	mov	r1, r2
   244fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   244fe:	f04f 0620 	mov.w	r6, #32
   24502:	f3ef 8511 	mrs	r5, BASEPRI
   24506:	f386 8812 	msr	BASEPRI_MAX, r6
   2450a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   2450e:	6880      	ldr	r0, [r0, #8]
   24510:	f7ff ff60 	bl	243d4 <pend_locked>
	ret = arch_swap(key);
   24514:	4620      	mov	r0, r4
}
   24516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2451a:	f7f7 b941 	b.w	1b7a0 <arch_swap>
   2451e:	bf00      	nop
   24520:	2000d848 	.word	0x2000d848
   24524:	2000d878 	.word	0x2000d878

00024528 <z_set_prio>:
{
   24528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2452a:	4604      	mov	r4, r0
   2452c:	f04f 0320 	mov.w	r3, #32
   24530:	f3ef 8611 	mrs	r6, BASEPRI
   24534:	f383 8812 	msr	BASEPRI_MAX, r3
   24538:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   2453c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   2453e:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24540:	06da      	lsls	r2, r3, #27
   24542:	d119      	bne.n	24578 <z_set_prio+0x50>
	return node->next != NULL;
   24544:	6985      	ldr	r5, [r0, #24]
   24546:	b9bd      	cbnz	r5, 24578 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2454c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2454e:	f003 feae 	bl	282ae <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   24552:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   24554:	4a16      	ldr	r2, [pc, #88]	; (245b0 <z_set_prio+0x88>)
   24556:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2455a:	7343      	strb	r3, [r0, #13]
   2455c:	4613      	mov	r3, r2
				thread->base.prio = prio;
   2455e:	7381      	strb	r1, [r0, #14]
   24560:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24564:	4298      	cmp	r0, r3
   24566:	bf18      	it	ne
   24568:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   2456a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2456c:	b95d      	cbnz	r5, 24586 <z_set_prio+0x5e>
	node->prev = tail;
   2456e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   24572:	6004      	str	r4, [r0, #0]
	list->tail = node;
   24574:	6254      	str	r4, [r2, #36]	; 0x24
}
   24576:	e011      	b.n	2459c <z_set_prio+0x74>
   24578:	2000      	movs	r0, #0
			thread->base.prio = prio;
   2457a:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   2457c:	f386 8811 	msr	BASEPRI, r6
   24580:	f3bf 8f6f 	isb	sy
}
   24584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   24586:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   2458a:	42b9      	cmp	r1, r7
   2458c:	d00b      	beq.n	245a6 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2458e:	428f      	cmp	r7, r1
   24590:	dd09      	ble.n	245a6 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   24592:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   24594:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   24598:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2459a:	606c      	str	r4, [r5, #4]
			update_cache(1);
   2459c:	2001      	movs	r0, #1
   2459e:	f7ff fe75 	bl	2428c <update_cache>
   245a2:	2001      	movs	r0, #1
   245a4:	e7ea      	b.n	2457c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   245a6:	42a8      	cmp	r0, r5
   245a8:	d0e1      	beq.n	2456e <z_set_prio+0x46>
   245aa:	682d      	ldr	r5, [r5, #0]
   245ac:	e7de      	b.n	2456c <z_set_prio+0x44>
   245ae:	bf00      	nop
   245b0:	2000d848 	.word	0x2000d848

000245b4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   245b4:	b949      	cbnz	r1, 245ca <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   245b6:	f3ef 8005 	mrs	r0, IPSR
   245ba:	b930      	cbnz	r0, 245ca <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   245bc:	4b05      	ldr	r3, [pc, #20]	; (245d4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   245be:	69da      	ldr	r2, [r3, #28]
   245c0:	689b      	ldr	r3, [r3, #8]
   245c2:	429a      	cmp	r2, r3
   245c4:	d001      	beq.n	245ca <z_reschedule+0x16>
   245c6:	f7f7 b8eb 	b.w	1b7a0 <arch_swap>
   245ca:	f381 8811 	msr	BASEPRI, r1
   245ce:	f3bf 8f6f 	isb	sy
}
   245d2:	4770      	bx	lr
   245d4:	2000d848 	.word	0x2000d848

000245d8 <z_sched_start>:
{
   245d8:	b510      	push	{r4, lr}
	__asm__ volatile(
   245da:	f04f 0220 	mov.w	r2, #32
   245de:	f3ef 8411 	mrs	r4, BASEPRI
   245e2:	f382 8812 	msr	BASEPRI_MAX, r2
   245e6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   245ea:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   245ec:	0751      	lsls	r1, r2, #29
   245ee:	d404      	bmi.n	245fa <z_sched_start+0x22>
	__asm__ volatile(
   245f0:	f384 8811 	msr	BASEPRI, r4
   245f4:	f3bf 8f6f 	isb	sy
}
   245f8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   245fa:	f022 0204 	bic.w	r2, r2, #4
   245fe:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   24600:	f7ff fe9c 	bl	2433c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   24604:	4621      	mov	r1, r4
}
   24606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   2460a:	4801      	ldr	r0, [pc, #4]	; (24610 <z_sched_start+0x38>)
   2460c:	f7ff bfd2 	b.w	245b4 <z_reschedule>
   24610:	2000ddf3 	.word	0x2000ddf3

00024614 <z_impl_k_thread_suspend>:
{
   24614:	b570      	push	{r4, r5, r6, lr}
   24616:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   24618:	3018      	adds	r0, #24
   2461a:	f003 ff54 	bl	284c6 <z_abort_timeout>
	__asm__ volatile(
   2461e:	f04f 0320 	mov.w	r3, #32
   24622:	f3ef 8611 	mrs	r6, BASEPRI
   24626:	f383 8812 	msr	BASEPRI_MAX, r3
   2462a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   2462e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   24632:	7b63      	ldrb	r3, [r4, #13]
   24634:	2a00      	cmp	r2, #0
   24636:	da05      	bge.n	24644 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   2463c:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2463e:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24640:	f003 fe35 	bl	282ae <sys_dlist_remove>
		update_cache(thread == _current);
   24644:	4d0b      	ldr	r5, [pc, #44]	; (24674 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   24646:	7b63      	ldrb	r3, [r4, #13]
   24648:	68a8      	ldr	r0, [r5, #8]
   2464a:	f043 0310 	orr.w	r3, r3, #16
   2464e:	7363      	strb	r3, [r4, #13]
   24650:	1b03      	subs	r3, r0, r4
   24652:	4258      	negs	r0, r3
   24654:	4158      	adcs	r0, r3
   24656:	f7ff fe19 	bl	2428c <update_cache>
	__asm__ volatile(
   2465a:	f386 8811 	msr	BASEPRI, r6
   2465e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   24662:	68ab      	ldr	r3, [r5, #8]
   24664:	42a3      	cmp	r3, r4
   24666:	d103      	bne.n	24670 <z_impl_k_thread_suspend+0x5c>
}
   24668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2466c:	f003 beee 	b.w	2844c <z_reschedule_unlocked>
}
   24670:	bd70      	pop	{r4, r5, r6, pc}
   24672:	bf00      	nop
   24674:	2000d848 	.word	0x2000d848

00024678 <k_sched_lock>:
	__asm__ volatile(
   24678:	f04f 0320 	mov.w	r3, #32
   2467c:	f3ef 8111 	mrs	r1, BASEPRI
   24680:	f383 8812 	msr	BASEPRI_MAX, r3
   24684:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   24688:	4b04      	ldr	r3, [pc, #16]	; (2469c <k_sched_lock+0x24>)
   2468a:	689a      	ldr	r2, [r3, #8]
   2468c:	7bd3      	ldrb	r3, [r2, #15]
   2468e:	3b01      	subs	r3, #1
   24690:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   24692:	f381 8811 	msr	BASEPRI, r1
   24696:	f3bf 8f6f 	isb	sy
}
   2469a:	4770      	bx	lr
   2469c:	2000d848 	.word	0x2000d848

000246a0 <k_sched_unlock>:
{
   246a0:	b510      	push	{r4, lr}
	__asm__ volatile(
   246a2:	f04f 0320 	mov.w	r3, #32
   246a6:	f3ef 8411 	mrs	r4, BASEPRI
   246aa:	f383 8812 	msr	BASEPRI_MAX, r3
   246ae:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   246b2:	4b08      	ldr	r3, [pc, #32]	; (246d4 <k_sched_unlock+0x34>)
		update_cache(0);
   246b4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   246b6:	689a      	ldr	r2, [r3, #8]
   246b8:	7bd3      	ldrb	r3, [r2, #15]
   246ba:	3301      	adds	r3, #1
   246bc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   246be:	f7ff fde5 	bl	2428c <update_cache>
	__asm__ volatile(
   246c2:	f384 8811 	msr	BASEPRI, r4
   246c6:	f3bf 8f6f 	isb	sy
}
   246ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   246ce:	f003 bebd 	b.w	2844c <z_reschedule_unlocked>
   246d2:	bf00      	nop
   246d4:	2000d848 	.word	0x2000d848

000246d8 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   246d8:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   246da:	4b04      	ldr	r3, [pc, #16]	; (246ec <z_sched_init+0x14>)
   246dc:	4608      	mov	r0, r1
   246de:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   246e2:	e9c3 2208 	strd	r2, r2, [r3, #32]
   246e6:	f7ff be8d 	b.w	24404 <k_sched_time_slice_set>
   246ea:	bf00      	nop
   246ec:	2000d848 	.word	0x2000d848

000246f0 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   246f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   246f2:	f04f 0320 	mov.w	r3, #32
   246f6:	f3ef 8511 	mrs	r5, BASEPRI
   246fa:	f383 8812 	msr	BASEPRI_MAX, r3
   246fe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   24702:	4919      	ldr	r1, [pc, #100]	; (24768 <z_impl_k_yield+0x78>)
   24704:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24706:	7b43      	ldrb	r3, [r0, #13]
   24708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2470c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2470e:	f003 fdce 	bl	282ae <sys_dlist_remove>
	return list->head == list;
   24712:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   24714:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   24716:	7b5a      	ldrb	r2, [r3, #13]
   24718:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2471c:	735a      	strb	r2, [r3, #13]
   2471e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   24722:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24724:	4282      	cmp	r2, r0
   24726:	bf08      	it	eq
   24728:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2472a:	b922      	cbnz	r2, 24736 <z_impl_k_yield+0x46>
	node->prev = tail;
   2472c:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   24730:	6023      	str	r3, [r4, #0]
	list->tail = node;
   24732:	624b      	str	r3, [r1, #36]	; 0x24
}
   24734:	e00c      	b.n	24750 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   24736:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2473a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   2473e:	42be      	cmp	r6, r7
   24740:	d00e      	beq.n	24760 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   24742:	42b7      	cmp	r7, r6
   24744:	dd0c      	ble.n	24760 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   24746:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   24748:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2474c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2474e:	6053      	str	r3, [r2, #4]
	update_cache(1);
   24750:	2001      	movs	r0, #1
   24752:	f7ff fd9b 	bl	2428c <update_cache>
   24756:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   24758:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2475c:	f7f7 b820 	b.w	1b7a0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   24760:	42a2      	cmp	r2, r4
   24762:	d0e3      	beq.n	2472c <z_impl_k_yield+0x3c>
   24764:	6812      	ldr	r2, [r2, #0]
   24766:	e7e0      	b.n	2472a <z_impl_k_yield+0x3a>
   24768:	2000d848 	.word	0x2000d848

0002476c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2476c:	ea50 0301 	orrs.w	r3, r0, r1
{
   24770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24774:	4605      	mov	r5, r0
   24776:	460e      	mov	r6, r1
	if (ticks == 0) {
   24778:	d103      	bne.n	24782 <z_tick_sleep+0x16>
	z_impl_k_yield();
   2477a:	f7ff ffb9 	bl	246f0 <z_impl_k_yield>
		k_yield();
		return 0;
   2477e:	2000      	movs	r0, #0
   24780:	e02c      	b.n	247dc <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   24782:	1c83      	adds	r3, r0, #2
   24784:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   24788:	db2a      	blt.n	247e0 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2478a:	f003 fede 	bl	2854a <sys_clock_tick_get_32>
   2478e:	182c      	adds	r4, r5, r0
   24790:	f04f 0320 	mov.w	r3, #32
   24794:	f3ef 8811 	mrs	r8, BASEPRI
   24798:	f383 8812 	msr	BASEPRI_MAX, r3
   2479c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   247a0:	4f11      	ldr	r7, [pc, #68]	; (247e8 <z_tick_sleep+0x7c>)
   247a2:	4b12      	ldr	r3, [pc, #72]	; (247ec <z_tick_sleep+0x80>)
   247a4:	68b8      	ldr	r0, [r7, #8]
   247a6:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   247a8:	f7ff fdfc 	bl	243a4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   247ac:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   247ae:	4910      	ldr	r1, [pc, #64]	; (247f0 <z_tick_sleep+0x84>)
   247b0:	462a      	mov	r2, r5
   247b2:	4633      	mov	r3, r6
   247b4:	3018      	adds	r0, #24
   247b6:	f000 f917 	bl	249e8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   247ba:	68ba      	ldr	r2, [r7, #8]
   247bc:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   247be:	7b53      	ldrb	r3, [r2, #13]
   247c0:	f043 0310 	orr.w	r3, r3, #16
   247c4:	7353      	strb	r3, [r2, #13]
   247c6:	f7f6 ffeb 	bl	1b7a0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   247ca:	f003 febe 	bl	2854a <sys_clock_tick_get_32>
   247ce:	1a20      	subs	r0, r4, r0
   247d0:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   247d4:	2801      	cmp	r0, #1
   247d6:	f173 0300 	sbcs.w	r3, r3, #0
   247da:	dbd0      	blt.n	2477e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   247dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   247e0:	f06f 0401 	mvn.w	r4, #1
   247e4:	1a24      	subs	r4, r4, r0
   247e6:	e7d3      	b.n	24790 <z_tick_sleep+0x24>
   247e8:	2000d848 	.word	0x2000d848
   247ec:	2000d878 	.word	0x2000d878
   247f0:	000282d3 	.word	0x000282d3

000247f4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   247f4:	f1b1 3fff 	cmp.w	r1, #4294967295
   247f8:	bf08      	it	eq
   247fa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   247fe:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24800:	d106      	bne.n	24810 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   24802:	4b08      	ldr	r3, [pc, #32]	; (24824 <z_impl_k_sleep+0x30>)
   24804:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   24806:	f7ff ff05 	bl	24614 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2480a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2480e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   24810:	f7ff ffac 	bl	2476c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   24814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24818:	fb80 0303 	smull	r0, r3, r0, r3
   2481c:	0bc0      	lsrs	r0, r0, #15
   2481e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   24822:	e7f4      	b.n	2480e <z_impl_k_sleep+0x1a>
   24824:	2000d848 	.word	0x2000d848

00024828 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   24828:	4b01      	ldr	r3, [pc, #4]	; (24830 <z_impl_z_current_get+0x8>)
   2482a:	6898      	ldr	r0, [r3, #8]
   2482c:	4770      	bx	lr
   2482e:	bf00      	nop
   24830:	2000d848 	.word	0x2000d848

00024834 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   24834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24838:	4604      	mov	r4, r0
   2483a:	f04f 0320 	mov.w	r3, #32
   2483e:	f3ef 8611 	mrs	r6, BASEPRI
   24842:	f383 8812 	msr	BASEPRI_MAX, r3
   24846:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   2484a:	7b03      	ldrb	r3, [r0, #12]
   2484c:	07d9      	lsls	r1, r3, #31
   2484e:	d50b      	bpl.n	24868 <z_thread_abort+0x34>
	__asm__ volatile(
   24850:	f386 8811 	msr	BASEPRI, r6
   24854:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   24858:	4040      	eors	r0, r0
   2485a:	f380 8811 	msr	BASEPRI, r0
   2485e:	f04f 0004 	mov.w	r0, #4
   24862:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   24864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   24868:	7b43      	ldrb	r3, [r0, #13]
   2486a:	071a      	lsls	r2, r3, #28
   2486c:	d504      	bpl.n	24878 <z_thread_abort+0x44>
   2486e:	f386 8811 	msr	BASEPRI, r6
   24872:	f3bf 8f6f 	isb	sy
   24876:	e7f5      	b.n	24864 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   24878:	f023 0220 	bic.w	r2, r3, #32
   2487c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   24880:	09d2      	lsrs	r2, r2, #7
   24882:	d120      	bne.n	248c6 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   24884:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   24886:	68a3      	ldr	r3, [r4, #8]
   24888:	b113      	cbz	r3, 24890 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   2488a:	4620      	mov	r0, r4
   2488c:	f003 fd17 	bl	282be <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   24890:	f104 0018 	add.w	r0, r4, #24
   24894:	f003 fe17 	bl	284c6 <z_abort_timeout>
   24898:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2489c:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   248a0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   248a2:	42bd      	cmp	r5, r7
   248a4:	d000      	beq.n	248a8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   248a6:	b9b5      	cbnz	r5, 248d6 <z_thread_abort+0xa2>
		update_cache(1);
   248a8:	2001      	movs	r0, #1
   248aa:	f7ff fcef 	bl	2428c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   248ae:	4b10      	ldr	r3, [pc, #64]	; (248f0 <z_thread_abort+0xbc>)
   248b0:	689b      	ldr	r3, [r3, #8]
   248b2:	42a3      	cmp	r3, r4
   248b4:	d1db      	bne.n	2486e <z_thread_abort+0x3a>
   248b6:	f3ef 8305 	mrs	r3, IPSR
   248ba:	2b00      	cmp	r3, #0
   248bc:	d1d7      	bne.n	2486e <z_thread_abort+0x3a>
   248be:	4630      	mov	r0, r6
   248c0:	f7f6 ff6e 	bl	1b7a0 <arch_swap>
	return ret;
   248c4:	e7d3      	b.n	2486e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   248c6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   248ca:	f043 0308 	orr.w	r3, r3, #8
   248ce:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   248d0:	f003 fced 	bl	282ae <sys_dlist_remove>
}
   248d4:	e7d7      	b.n	24886 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   248d6:	4628      	mov	r0, r5
   248d8:	f003 fcf1 	bl	282be <unpend_thread_no_timeout>
   248dc:	f105 0018 	add.w	r0, r5, #24
   248e0:	f003 fdf1 	bl	284c6 <z_abort_timeout>
		ready_thread(thread);
   248e4:	4628      	mov	r0, r5
   248e6:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   248ea:	f7ff fd27 	bl	2433c <ready_thread>
   248ee:	e7d7      	b.n	248a0 <z_thread_abort+0x6c>
   248f0:	2000d848 	.word	0x2000d848

000248f4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   248f4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   248f6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   248fa:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   248fc:	e9cd 6700 	strd	r6, r7, [sp]
   24900:	f7ff fdf4 	bl	244ec <z_pend_curr>

	if (data != NULL) {
   24904:	b11c      	cbz	r4, 2490e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   24906:	4b03      	ldr	r3, [pc, #12]	; (24914 <z_sched_wait+0x20>)
   24908:	689b      	ldr	r3, [r3, #8]
   2490a:	695b      	ldr	r3, [r3, #20]
   2490c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2490e:	b002      	add	sp, #8
   24910:	bdd0      	pop	{r4, r6, r7, pc}
   24912:	bf00      	nop
   24914:	2000d848 	.word	0x2000d848

00024918 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   24918:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2491a:	4806      	ldr	r0, [pc, #24]	; (24934 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   2491c:	4a06      	ldr	r2, [pc, #24]	; (24938 <z_data_copy+0x20>)
   2491e:	4907      	ldr	r1, [pc, #28]	; (2493c <z_data_copy+0x24>)
   24920:	1a12      	subs	r2, r2, r0
   24922:	f003 fb5f 	bl	27fe4 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   24926:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2492a:	4a05      	ldr	r2, [pc, #20]	; (24940 <z_data_copy+0x28>)
   2492c:	4905      	ldr	r1, [pc, #20]	; (24944 <z_data_copy+0x2c>)
   2492e:	4806      	ldr	r0, [pc, #24]	; (24948 <z_data_copy+0x30>)
   24930:	f003 bb58 	b.w	27fe4 <z_early_memcpy>
   24934:	2000c580 	.word	0x2000c580
   24938:	2000c934 	.word	0x2000c934
   2493c:	0002b6b4 	.word	0x0002b6b4
   24940:	00000000 	.word	0x00000000
   24944:	0002b69c 	.word	0x0002b69c
   24948:	2000c580 	.word	0x2000c580

0002494c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2494c:	4b03      	ldr	r3, [pc, #12]	; (2495c <elapsed+0x10>)
   2494e:	681b      	ldr	r3, [r3, #0]
   24950:	b90b      	cbnz	r3, 24956 <elapsed+0xa>
   24952:	f7f9 b8f7 	b.w	1db44 <sys_clock_elapsed>
}
   24956:	2000      	movs	r0, #0
   24958:	4770      	bx	lr
   2495a:	bf00      	nop
   2495c:	2000d884 	.word	0x2000d884

00024960 <next_timeout>:

static int32_t next_timeout(void)
{
   24960:	b510      	push	{r4, lr}
	return list->head == list;
   24962:	4b11      	ldr	r3, [pc, #68]	; (249a8 <next_timeout+0x48>)
   24964:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24966:	429c      	cmp	r4, r3
   24968:	d10a      	bne.n	24980 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2496a:	f7ff ffef 	bl	2494c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   2496e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   24972:	4b0e      	ldr	r3, [pc, #56]	; (249ac <next_timeout+0x4c>)
   24974:	691b      	ldr	r3, [r3, #16]
   24976:	b113      	cbz	r3, 2497e <next_timeout+0x1e>
   24978:	4298      	cmp	r0, r3
   2497a:	bfa8      	it	ge
   2497c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2497e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   24980:	f7ff ffe4 	bl	2494c <elapsed>
	if ((to == NULL) ||
   24984:	2c00      	cmp	r4, #0
   24986:	d0f2      	beq.n	2496e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   24988:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   2498c:	1a1b      	subs	r3, r3, r0
   2498e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   24992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   24996:	f172 0100 	sbcs.w	r1, r2, #0
   2499a:	dae8      	bge.n	2496e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   2499c:	2a00      	cmp	r2, #0
   2499e:	bfac      	ite	ge
   249a0:	4618      	movge	r0, r3
   249a2:	2000      	movlt	r0, #0
   249a4:	e7e5      	b.n	24972 <next_timeout+0x12>
   249a6:	bf00      	nop
   249a8:	2000c700 	.word	0x2000c700
   249ac:	2000d848 	.word	0x2000d848

000249b0 <remove_timeout>:
{
   249b0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   249b2:	b170      	cbz	r0, 249d2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   249b4:	4b0b      	ldr	r3, [pc, #44]	; (249e4 <remove_timeout+0x34>)
   249b6:	685b      	ldr	r3, [r3, #4]
   249b8:	4298      	cmp	r0, r3
   249ba:	d00a      	beq.n	249d2 <remove_timeout+0x22>
   249bc:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   249be:	b143      	cbz	r3, 249d2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   249c0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   249c4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   249c8:	1912      	adds	r2, r2, r4
   249ca:	eb41 0105 	adc.w	r1, r1, r5
   249ce:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   249d2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   249d6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   249d8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   249da:	2300      	movs	r3, #0
	node->prev = NULL;
   249dc:	e9c0 3300 	strd	r3, r3, [r0]
}
   249e0:	bd30      	pop	{r4, r5, pc}
   249e2:	bf00      	nop
   249e4:	2000c700 	.word	0x2000c700

000249e8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   249e8:	f1b3 3fff 	cmp.w	r3, #4294967295
   249ec:	bf08      	it	eq
   249ee:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   249f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   249f4:	4604      	mov	r4, r0
   249f6:	461d      	mov	r5, r3
   249f8:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   249fa:	d061      	beq.n	24ac0 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   249fc:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   249fe:	f04f 0320 	mov.w	r3, #32
   24a02:	f3ef 8711 	mrs	r7, BASEPRI
   24a06:	f383 8812 	msr	BASEPRI_MAX, r3
   24a0a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   24a0e:	3201      	adds	r2, #1
   24a10:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   24a14:	da24      	bge.n	24a60 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   24a16:	f06f 0301 	mvn.w	r3, #1
   24a1a:	492f      	ldr	r1, [pc, #188]	; (24ad8 <z_add_timeout+0xf0>)
   24a1c:	e9d1 2000 	ldrd	r2, r0, [r1]
   24a20:	1a9b      	subs	r3, r3, r2
   24a22:	f04f 32ff 	mov.w	r2, #4294967295
   24a26:	eb62 0000 	sbc.w	r0, r2, r0
   24a2a:	1b9e      	subs	r6, r3, r6
   24a2c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   24a30:	2e01      	cmp	r6, #1
   24a32:	f170 0300 	sbcs.w	r3, r0, #0
   24a36:	da01      	bge.n	24a3c <z_add_timeout+0x54>
   24a38:	2601      	movs	r6, #1
   24a3a:	2000      	movs	r0, #0
   24a3c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   24a40:	4e26      	ldr	r6, [pc, #152]	; (24adc <z_add_timeout+0xf4>)
   24a42:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   24a46:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24a48:	45b4      	cmp	ip, r6
   24a4a:	bf08      	it	eq
   24a4c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   24a50:	f1bc 0f00 	cmp.w	ip, #0
   24a54:	d10d      	bne.n	24a72 <z_add_timeout+0x8a>
	node->prev = tail;
   24a56:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   24a5a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   24a5c:	6074      	str	r4, [r6, #4]
}
   24a5e:	e01c      	b.n	24a9a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   24a60:	f7ff ff74 	bl	2494c <elapsed>
   24a64:	3601      	adds	r6, #1
   24a66:	f145 0500 	adc.w	r5, r5, #0
   24a6a:	1836      	adds	r6, r6, r0
   24a6c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   24a70:	e7e4      	b.n	24a3c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   24a72:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   24a76:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   24a7a:	4293      	cmp	r3, r2
   24a7c:	eb71 0e00 	sbcs.w	lr, r1, r0
   24a80:	da1f      	bge.n	24ac2 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   24a82:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   24a84:	f8dc 3004 	ldr.w	r3, [ip, #4]
   24a88:	eb60 0001 	sbc.w	r0, r0, r1
   24a8c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   24a90:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   24a94:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   24a96:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   24a9a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24a9c:	42b3      	cmp	r3, r6
   24a9e:	d00b      	beq.n	24ab8 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   24aa0:	429c      	cmp	r4, r3
   24aa2:	d109      	bne.n	24ab8 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   24aa4:	f7ff ff5c 	bl	24960 <next_timeout>

			if (next_time == 0 ||
   24aa8:	b118      	cbz	r0, 24ab2 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   24aaa:	4b0d      	ldr	r3, [pc, #52]	; (24ae0 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   24aac:	691b      	ldr	r3, [r3, #16]
   24aae:	4283      	cmp	r3, r0
   24ab0:	d002      	beq.n	24ab8 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   24ab2:	2100      	movs	r1, #0
   24ab4:	f7f9 f814 	bl	1dae0 <sys_clock_set_timeout>
	__asm__ volatile(
   24ab8:	f387 8811 	msr	BASEPRI, r7
   24abc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   24ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   24ac2:	1a9b      	subs	r3, r3, r2
   24ac4:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   24ac8:	45ac      	cmp	ip, r5
   24aca:	e9c4 3104 	strd	r3, r1, [r4, #16]
   24ace:	d0c2      	beq.n	24a56 <z_add_timeout+0x6e>
   24ad0:	f8dc c000 	ldr.w	ip, [ip]
   24ad4:	e7bc      	b.n	24a50 <z_add_timeout+0x68>
   24ad6:	bf00      	nop
   24ad8:	2000cf98 	.word	0x2000cf98
   24adc:	2000c700 	.word	0x2000c700
   24ae0:	2000d848 	.word	0x2000d848

00024ae4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   24ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24ae8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   24aea:	f7ff fcbd 	bl	24468 <z_time_slice>
	__asm__ volatile(
   24aee:	f04f 0320 	mov.w	r3, #32
   24af2:	f3ef 8611 	mrs	r6, BASEPRI
   24af6:	f383 8812 	msr	BASEPRI_MAX, r3
   24afa:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   24afe:	4f24      	ldr	r7, [pc, #144]	; (24b90 <sys_clock_announce+0xac>)
	return list->head == list;
   24b00:	f8df 8090 	ldr.w	r8, [pc, #144]	; 24b94 <sys_clock_announce+0xb0>
   24b04:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   24b08:	4a23      	ldr	r2, [pc, #140]	; (24b98 <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24b0a:	4540      	cmp	r0, r8
	announce_remaining = ticks;
   24b0c:	603c      	str	r4, [r7, #0]
	return list->head == list;
   24b0e:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   24b12:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24b16:	d00b      	beq.n	24b30 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   24b18:	b150      	cbz	r0, 24b30 <sys_clock_announce+0x4c>
   24b1a:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   24b1e:	42ac      	cmp	r4, r5
   24b20:	eb71 090c 	sbcs.w	r9, r1, ip
   24b24:	da17      	bge.n	24b56 <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   24b26:	1b2d      	subs	r5, r5, r4
   24b28:	eb6c 0c01 	sbc.w	ip, ip, r1
   24b2c:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   24b30:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   24b32:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   24b36:	eb4e 0101 	adc.w	r1, lr, r1
   24b3a:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   24b3e:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   24b40:	f7ff ff0e 	bl	24960 <next_timeout>
   24b44:	4621      	mov	r1, r4
   24b46:	f7f8 ffcb 	bl	1dae0 <sys_clock_set_timeout>
	__asm__ volatile(
   24b4a:	f386 8811 	msr	BASEPRI, r6
   24b4e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   24b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   24b56:	18eb      	adds	r3, r5, r3
   24b58:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   24b5c:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   24b60:	2200      	movs	r2, #0
   24b62:	2300      	movs	r3, #0
   24b64:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   24b68:	f7ff ff22 	bl	249b0 <remove_timeout>
   24b6c:	f386 8811 	msr	BASEPRI, r6
   24b70:	f3bf 8f6f 	isb	sy
		t->fn(t);
   24b74:	6883      	ldr	r3, [r0, #8]
   24b76:	4798      	blx	r3
	__asm__ volatile(
   24b78:	f04f 0320 	mov.w	r3, #32
   24b7c:	f3ef 8611 	mrs	r6, BASEPRI
   24b80:	f383 8812 	msr	BASEPRI_MAX, r3
   24b84:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   24b88:	683c      	ldr	r4, [r7, #0]
   24b8a:	1b64      	subs	r4, r4, r5
   24b8c:	e7ba      	b.n	24b04 <sys_clock_announce+0x20>
   24b8e:	bf00      	nop
   24b90:	2000d884 	.word	0x2000d884
   24b94:	2000c700 	.word	0x2000c700
   24b98:	2000cf98 	.word	0x2000cf98

00024b9c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   24b9c:	b510      	push	{r4, lr}
   24b9e:	f04f 0320 	mov.w	r3, #32
   24ba2:	f3ef 8411 	mrs	r4, BASEPRI
   24ba6:	f383 8812 	msr	BASEPRI_MAX, r3
   24baa:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   24bae:	f7ff fecd 	bl	2494c <elapsed>
   24bb2:	4603      	mov	r3, r0
   24bb4:	4a05      	ldr	r2, [pc, #20]	; (24bcc <sys_clock_tick_get+0x30>)
   24bb6:	e9d2 0100 	ldrd	r0, r1, [r2]
   24bba:	1818      	adds	r0, r3, r0
   24bbc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   24bc0:	f384 8811 	msr	BASEPRI, r4
   24bc4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   24bc8:	bd10      	pop	{r4, pc}
   24bca:	bf00      	nop
   24bcc:	2000cf98 	.word	0x2000cf98

00024bd0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   24bd0:	b570      	push	{r4, r5, r6, lr}
   24bd2:	4604      	mov	r4, r0
	__asm__ volatile(
   24bd4:	f04f 0320 	mov.w	r3, #32
   24bd8:	f3ef 8511 	mrs	r5, BASEPRI
   24bdc:	f383 8812 	msr	BASEPRI_MAX, r3
   24be0:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   24be4:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   24be8:	3301      	adds	r3, #1
   24bea:	f142 0200 	adc.w	r2, r2, #0
   24bee:	2b02      	cmp	r3, #2
   24bf0:	f172 0200 	sbcs.w	r2, r2, #0
   24bf4:	d322      	bcc.n	24c3c <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   24bf6:	f003 fcac 	bl	28552 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   24bfa:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   24bfe:	3001      	adds	r0, #1
   24c00:	f141 0100 	adc.w	r1, r1, #0
   24c04:	18c0      	adds	r0, r0, r3
   24c06:	eb41 0102 	adc.w	r1, r1, r2
   24c0a:	2801      	cmp	r0, #1
   24c0c:	f171 0100 	sbcs.w	r1, r1, #0
   24c10:	db32      	blt.n	24c78 <z_timer_expiration_handler+0xa8>
   24c12:	f003 fc9e 	bl	28552 <z_impl_k_uptime_ticks>
   24c16:	3001      	adds	r0, #1
   24c18:	f141 0300 	adc.w	r3, r1, #0
   24c1c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   24c20:	1880      	adds	r0, r0, r2
   24c22:	f06f 0201 	mvn.w	r2, #1
   24c26:	eb43 0301 	adc.w	r3, r3, r1
   24c2a:	f04f 31ff 	mov.w	r1, #4294967295
   24c2e:	1a12      	subs	r2, r2, r0
   24c30:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24c34:	4620      	mov	r0, r4
   24c36:	491a      	ldr	r1, [pc, #104]	; (24ca0 <z_timer_expiration_handler+0xd0>)
   24c38:	f7ff fed6 	bl	249e8 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   24c3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24c3e:	3301      	adds	r3, #1
   24c40:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   24c42:	6a23      	ldr	r3, [r4, #32]
   24c44:	b173      	cbz	r3, 24c64 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   24c46:	f385 8811 	msr	BASEPRI, r5
   24c4a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   24c4e:	4620      	mov	r0, r4
   24c50:	6a23      	ldr	r3, [r4, #32]
   24c52:	4798      	blx	r3
	__asm__ volatile(
   24c54:	f04f 0320 	mov.w	r3, #32
   24c58:	f3ef 8511 	mrs	r5, BASEPRI
   24c5c:	f383 8812 	msr	BASEPRI_MAX, r3
   24c60:	f3bf 8f6f 	isb	sy
	return list->head == list;
   24c64:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24c68:	42a6      	cmp	r6, r4
   24c6a:	d000      	beq.n	24c6e <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   24c6c:	b94e      	cbnz	r6, 24c82 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   24c6e:	f385 8811 	msr	BASEPRI, r5
   24c72:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   24c76:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   24c78:	f06f 0201 	mvn.w	r2, #1
   24c7c:	f04f 33ff 	mov.w	r3, #4294967295
   24c80:	e7d8      	b.n	24c34 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   24c82:	4630      	mov	r0, r6
   24c84:	f003 fb7f 	bl	28386 <z_unpend_thread_no_timeout>
   24c88:	2300      	movs	r3, #0
   24c8a:	67f3      	str	r3, [r6, #124]	; 0x7c
   24c8c:	f385 8811 	msr	BASEPRI, r5
   24c90:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   24c94:	4630      	mov	r0, r6
}
   24c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   24c9a:	f003 bb64 	b.w	28366 <z_ready_thread>
   24c9e:	bf00      	nop
   24ca0:	00024bd1 	.word	0x00024bd1

00024ca4 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   24ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
   24ca8:	bf08      	it	eq
   24caa:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   24cae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24cb2:	4619      	mov	r1, r3
   24cb4:	4605      	mov	r5, r0
   24cb6:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   24cba:	4614      	mov	r4, r2
   24cbc:	4691      	mov	r9, r2
   24cbe:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   24cc0:	d037      	beq.n	24d32 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   24cc2:	f1b0 3fff 	cmp.w	r0, #4294967295
   24cc6:	bf08      	it	eq
   24cc8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   24ccc:	4637      	mov	r7, r6
   24cce:	4682      	mov	sl, r0
   24cd0:	d011      	beq.n	24cf6 <z_impl_k_timer_start+0x52>
   24cd2:	ea50 0306 	orrs.w	r3, r0, r6
   24cd6:	d00e      	beq.n	24cf6 <z_impl_k_timer_start+0x52>
   24cd8:	1c72      	adds	r2, r6, #1
   24cda:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   24cde:	db0a      	blt.n	24cf6 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   24ce0:	2e02      	cmp	r6, #2
   24ce2:	4684      	mov	ip, r0
   24ce4:	f170 0000 	sbcs.w	r0, r0, #0
   24ce8:	bfbc      	itt	lt
   24cea:	2702      	movlt	r7, #2
   24cec:	f04f 0c00 	movlt.w	ip, #0
   24cf0:	3f01      	subs	r7, #1
   24cf2:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   24cf6:	1c63      	adds	r3, r4, #1
   24cf8:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   24cfc:	db0a      	blt.n	24d14 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   24cfe:	2c01      	cmp	r4, #1
   24d00:	f171 0300 	sbcs.w	r3, r1, #0
   24d04:	4622      	mov	r2, r4
   24d06:	bfbc      	itt	lt
   24d08:	2201      	movlt	r2, #1
   24d0a:	2100      	movlt	r1, #0
   24d0c:	f112 39ff 	adds.w	r9, r2, #4294967295
   24d10:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   24d14:	4628      	mov	r0, r5
   24d16:	f003 fbd6 	bl	284c6 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   24d1a:	2300      	movs	r3, #0
	timer->period = period;
   24d1c:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   24d20:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24d22:	464a      	mov	r2, r9
   24d24:	4643      	mov	r3, r8
   24d26:	4628      	mov	r0, r5
		     duration);
}
   24d28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24d2c:	4902      	ldr	r1, [pc, #8]	; (24d38 <z_impl_k_timer_start+0x94>)
   24d2e:	f7ff be5b 	b.w	249e8 <z_add_timeout>
}
   24d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24d36:	bf00      	nop
   24d38:	00024bd1 	.word	0x00024bd1

00024d3c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   24d3c:	b538      	push	{r3, r4, r5, lr}
   24d3e:	4603      	mov	r3, r0
	__asm__ volatile(
   24d40:	f04f 0220 	mov.w	r2, #32
   24d44:	f3ef 8511 	mrs	r5, BASEPRI
   24d48:	f382 8812 	msr	BASEPRI_MAX, r2
   24d4c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   24d50:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   24d52:	2101      	movs	r1, #1
   24d54:	6081      	str	r1, [r0, #8]
	return list->head == list;
   24d56:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   24d58:	4283      	cmp	r3, r0
   24d5a:	d106      	bne.n	24d6a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   24d5c:	f385 8811 	msr	BASEPRI, r5
   24d60:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   24d64:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   24d66:	4620      	mov	r0, r4
   24d68:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   24d6a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24d6e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24d70:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24d72:	2300      	movs	r3, #0
	node->prev = NULL;
   24d74:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24d78:	f003 fc3c 	bl	285f4 <signal_poll_event>
	z_reschedule(&lock, key);
   24d7c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24d7e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   24d80:	4801      	ldr	r0, [pc, #4]	; (24d88 <z_impl_k_poll_signal_raise+0x4c>)
   24d82:	f7ff fc17 	bl	245b4 <z_reschedule>
	return rc;
   24d86:	e7ee      	b.n	24d66 <z_impl_k_poll_signal_raise+0x2a>
   24d88:	2000ddf3 	.word	0x2000ddf3

00024d8c <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   24d8c:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   24d8e:	4601      	mov	r1, r0
   24d90:	4801      	ldr	r0, [pc, #4]	; (24d98 <k_aligned_alloc+0xc>)
   24d92:	f003 bcb0 	b.w	286f6 <z_heap_aligned_alloc>
   24d96:	bf00      	nop
   24d98:	2000c814 	.word	0x2000c814

00024d9c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   24d9c:	4b01      	ldr	r3, [pc, #4]	; (24da4 <k_thread_system_pool_assign+0x8>)
   24d9e:	6743      	str	r3, [r0, #116]	; 0x74
}
   24da0:	4770      	bx	lr
   24da2:	bf00      	nop
   24da4:	2000c814 	.word	0x2000c814

00024da8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   24da8:	b538      	push	{r3, r4, r5, lr}
   24daa:	4604      	mov	r4, r0
   24dac:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   24dae:	f003 f997 	bl	280e0 <k_is_in_isr>
   24db2:	b920      	cbnz	r0, 24dbe <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   24db4:	4b06      	ldr	r3, [pc, #24]	; (24dd0 <z_thread_aligned_alloc+0x28>)
   24db6:	689b      	ldr	r3, [r3, #8]
   24db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   24dba:	b90b      	cbnz	r3, 24dc0 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   24dbc:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   24dbe:	4b05      	ldr	r3, [pc, #20]	; (24dd4 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   24dc0:	462a      	mov	r2, r5
   24dc2:	4621      	mov	r1, r4
   24dc4:	4618      	mov	r0, r3
}
   24dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   24dca:	f003 bc94 	b.w	286f6 <z_heap_aligned_alloc>
   24dce:	bf00      	nop
   24dd0:	2000d848 	.word	0x2000d848
   24dd4:	2000c814 	.word	0x2000c814

00024dd8 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   24dd8:	4801      	ldr	r0, [pc, #4]	; (24de0 <boot_banner+0x8>)
   24dda:	f000 bd54 	b.w	25886 <printk>
   24dde:	bf00      	nop
   24de0:	0002b518 	.word	0x0002b518

00024de4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   24de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   24de6:	2400      	movs	r4, #0
   24de8:	4b08      	ldr	r3, [pc, #32]	; (24e0c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   24dea:	f44f 6290 	mov.w	r2, #1152	; 0x480
	struct k_work_queue_config cfg = {
   24dee:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   24df0:	ab02      	add	r3, sp, #8
   24df2:	9300      	str	r3, [sp, #0]
   24df4:	4906      	ldr	r1, [pc, #24]	; (24e10 <k_sys_work_q_init+0x2c>)
   24df6:	f04f 33ff 	mov.w	r3, #4294967295
   24dfa:	4806      	ldr	r0, [pc, #24]	; (24e14 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   24dfc:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   24e00:	f7ff f9f8 	bl	241f4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   24e04:	4620      	mov	r0, r4
   24e06:	b004      	add	sp, #16
   24e08:	bd10      	pop	{r4, pc}
   24e0a:	bf00      	nop
   24e0c:	0002b546 	.word	0x0002b546
   24e10:	20010338 	.word	0x20010338
   24e14:	2000cfa0 	.word	0x2000cfa0

00024e18 <_free_r>:
   24e18:	b538      	push	{r3, r4, r5, lr}
   24e1a:	4605      	mov	r5, r0
   24e1c:	2900      	cmp	r1, #0
   24e1e:	d041      	beq.n	24ea4 <_free_r+0x8c>
   24e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
   24e24:	1f0c      	subs	r4, r1, #4
   24e26:	2b00      	cmp	r3, #0
   24e28:	bfb8      	it	lt
   24e2a:	18e4      	addlt	r4, r4, r3
   24e2c:	f000 fa58 	bl	252e0 <__malloc_lock>
   24e30:	4a1d      	ldr	r2, [pc, #116]	; (24ea8 <_free_r+0x90>)
   24e32:	6813      	ldr	r3, [r2, #0]
   24e34:	b933      	cbnz	r3, 24e44 <_free_r+0x2c>
   24e36:	6063      	str	r3, [r4, #4]
   24e38:	6014      	str	r4, [r2, #0]
   24e3a:	4628      	mov	r0, r5
   24e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24e40:	f000 ba54 	b.w	252ec <__malloc_unlock>
   24e44:	42a3      	cmp	r3, r4
   24e46:	d908      	bls.n	24e5a <_free_r+0x42>
   24e48:	6820      	ldr	r0, [r4, #0]
   24e4a:	1821      	adds	r1, r4, r0
   24e4c:	428b      	cmp	r3, r1
   24e4e:	bf01      	itttt	eq
   24e50:	6819      	ldreq	r1, [r3, #0]
   24e52:	685b      	ldreq	r3, [r3, #4]
   24e54:	1809      	addeq	r1, r1, r0
   24e56:	6021      	streq	r1, [r4, #0]
   24e58:	e7ed      	b.n	24e36 <_free_r+0x1e>
   24e5a:	461a      	mov	r2, r3
   24e5c:	685b      	ldr	r3, [r3, #4]
   24e5e:	b10b      	cbz	r3, 24e64 <_free_r+0x4c>
   24e60:	42a3      	cmp	r3, r4
   24e62:	d9fa      	bls.n	24e5a <_free_r+0x42>
   24e64:	6811      	ldr	r1, [r2, #0]
   24e66:	1850      	adds	r0, r2, r1
   24e68:	42a0      	cmp	r0, r4
   24e6a:	d10b      	bne.n	24e84 <_free_r+0x6c>
   24e6c:	6820      	ldr	r0, [r4, #0]
   24e6e:	4401      	add	r1, r0
   24e70:	1850      	adds	r0, r2, r1
   24e72:	6011      	str	r1, [r2, #0]
   24e74:	4283      	cmp	r3, r0
   24e76:	d1e0      	bne.n	24e3a <_free_r+0x22>
   24e78:	6818      	ldr	r0, [r3, #0]
   24e7a:	685b      	ldr	r3, [r3, #4]
   24e7c:	4408      	add	r0, r1
   24e7e:	6053      	str	r3, [r2, #4]
   24e80:	6010      	str	r0, [r2, #0]
   24e82:	e7da      	b.n	24e3a <_free_r+0x22>
   24e84:	d902      	bls.n	24e8c <_free_r+0x74>
   24e86:	230c      	movs	r3, #12
   24e88:	602b      	str	r3, [r5, #0]
   24e8a:	e7d6      	b.n	24e3a <_free_r+0x22>
   24e8c:	6820      	ldr	r0, [r4, #0]
   24e8e:	1821      	adds	r1, r4, r0
   24e90:	428b      	cmp	r3, r1
   24e92:	bf02      	ittt	eq
   24e94:	6819      	ldreq	r1, [r3, #0]
   24e96:	685b      	ldreq	r3, [r3, #4]
   24e98:	1809      	addeq	r1, r1, r0
   24e9a:	6063      	str	r3, [r4, #4]
   24e9c:	bf08      	it	eq
   24e9e:	6021      	streq	r1, [r4, #0]
   24ea0:	6054      	str	r4, [r2, #4]
   24ea2:	e7ca      	b.n	24e3a <_free_r+0x22>
   24ea4:	bd38      	pop	{r3, r4, r5, pc}
   24ea6:	bf00      	nop
   24ea8:	2000d88c 	.word	0x2000d88c

00024eac <_malloc_r>:
   24eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24eae:	1ccd      	adds	r5, r1, #3
   24eb0:	4606      	mov	r6, r0
   24eb2:	f025 0503 	bic.w	r5, r5, #3
   24eb6:	3508      	adds	r5, #8
   24eb8:	2d0c      	cmp	r5, #12
   24eba:	bf38      	it	cc
   24ebc:	250c      	movcc	r5, #12
   24ebe:	2d00      	cmp	r5, #0
   24ec0:	db01      	blt.n	24ec6 <_malloc_r+0x1a>
   24ec2:	42a9      	cmp	r1, r5
   24ec4:	d903      	bls.n	24ece <_malloc_r+0x22>
   24ec6:	230c      	movs	r3, #12
   24ec8:	6033      	str	r3, [r6, #0]
   24eca:	2000      	movs	r0, #0
   24ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24ece:	f000 fa07 	bl	252e0 <__malloc_lock>
   24ed2:	4921      	ldr	r1, [pc, #132]	; (24f58 <_malloc_r+0xac>)
   24ed4:	680a      	ldr	r2, [r1, #0]
   24ed6:	4614      	mov	r4, r2
   24ed8:	b99c      	cbnz	r4, 24f02 <_malloc_r+0x56>
   24eda:	4f20      	ldr	r7, [pc, #128]	; (24f5c <_malloc_r+0xb0>)
   24edc:	683b      	ldr	r3, [r7, #0]
   24ede:	b923      	cbnz	r3, 24eea <_malloc_r+0x3e>
   24ee0:	4621      	mov	r1, r4
   24ee2:	4630      	mov	r0, r6
   24ee4:	f000 f83c 	bl	24f60 <_sbrk_r>
   24ee8:	6038      	str	r0, [r7, #0]
   24eea:	4629      	mov	r1, r5
   24eec:	4630      	mov	r0, r6
   24eee:	f000 f837 	bl	24f60 <_sbrk_r>
   24ef2:	1c43      	adds	r3, r0, #1
   24ef4:	d123      	bne.n	24f3e <_malloc_r+0x92>
   24ef6:	230c      	movs	r3, #12
   24ef8:	4630      	mov	r0, r6
   24efa:	6033      	str	r3, [r6, #0]
   24efc:	f000 f9f6 	bl	252ec <__malloc_unlock>
   24f00:	e7e3      	b.n	24eca <_malloc_r+0x1e>
   24f02:	6823      	ldr	r3, [r4, #0]
   24f04:	1b5b      	subs	r3, r3, r5
   24f06:	d417      	bmi.n	24f38 <_malloc_r+0x8c>
   24f08:	2b0b      	cmp	r3, #11
   24f0a:	d903      	bls.n	24f14 <_malloc_r+0x68>
   24f0c:	6023      	str	r3, [r4, #0]
   24f0e:	441c      	add	r4, r3
   24f10:	6025      	str	r5, [r4, #0]
   24f12:	e004      	b.n	24f1e <_malloc_r+0x72>
   24f14:	6863      	ldr	r3, [r4, #4]
   24f16:	42a2      	cmp	r2, r4
   24f18:	bf0c      	ite	eq
   24f1a:	600b      	streq	r3, [r1, #0]
   24f1c:	6053      	strne	r3, [r2, #4]
   24f1e:	4630      	mov	r0, r6
   24f20:	f000 f9e4 	bl	252ec <__malloc_unlock>
   24f24:	f104 000b 	add.w	r0, r4, #11
   24f28:	1d23      	adds	r3, r4, #4
   24f2a:	f020 0007 	bic.w	r0, r0, #7
   24f2e:	1ac2      	subs	r2, r0, r3
   24f30:	bf1c      	itt	ne
   24f32:	1a1b      	subne	r3, r3, r0
   24f34:	50a3      	strne	r3, [r4, r2]
   24f36:	e7c9      	b.n	24ecc <_malloc_r+0x20>
   24f38:	4622      	mov	r2, r4
   24f3a:	6864      	ldr	r4, [r4, #4]
   24f3c:	e7cc      	b.n	24ed8 <_malloc_r+0x2c>
   24f3e:	1cc4      	adds	r4, r0, #3
   24f40:	f024 0403 	bic.w	r4, r4, #3
   24f44:	42a0      	cmp	r0, r4
   24f46:	d0e3      	beq.n	24f10 <_malloc_r+0x64>
   24f48:	1a21      	subs	r1, r4, r0
   24f4a:	4630      	mov	r0, r6
   24f4c:	f000 f808 	bl	24f60 <_sbrk_r>
   24f50:	3001      	adds	r0, #1
   24f52:	d1dd      	bne.n	24f10 <_malloc_r+0x64>
   24f54:	e7cf      	b.n	24ef6 <_malloc_r+0x4a>
   24f56:	bf00      	nop
   24f58:	2000d88c 	.word	0x2000d88c
   24f5c:	2000d888 	.word	0x2000d888

00024f60 <_sbrk_r>:
   24f60:	b538      	push	{r3, r4, r5, lr}
   24f62:	2300      	movs	r3, #0
   24f64:	4d05      	ldr	r5, [pc, #20]	; (24f7c <_sbrk_r+0x1c>)
   24f66:	4604      	mov	r4, r0
   24f68:	4608      	mov	r0, r1
   24f6a:	602b      	str	r3, [r5, #0]
   24f6c:	f7f7 fa22 	bl	1c3b4 <_sbrk>
   24f70:	1c43      	adds	r3, r0, #1
   24f72:	d102      	bne.n	24f7a <_sbrk_r+0x1a>
   24f74:	682b      	ldr	r3, [r5, #0]
   24f76:	b103      	cbz	r3, 24f7a <_sbrk_r+0x1a>
   24f78:	6023      	str	r3, [r4, #0]
   24f7a:	bd38      	pop	{r3, r4, r5, pc}
   24f7c:	2000d890 	.word	0x2000d890

00024f80 <_strtol_l.constprop.0>:
   24f80:	2b24      	cmp	r3, #36	; 0x24
   24f82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24f86:	4686      	mov	lr, r0
   24f88:	4690      	mov	r8, r2
   24f8a:	d801      	bhi.n	24f90 <_strtol_l.constprop.0+0x10>
   24f8c:	2b01      	cmp	r3, #1
   24f8e:	d106      	bne.n	24f9e <_strtol_l.constprop.0+0x1e>
   24f90:	f001 fa9c 	bl	264cc <__errno>
   24f94:	2316      	movs	r3, #22
   24f96:	6003      	str	r3, [r0, #0]
   24f98:	2000      	movs	r0, #0
   24f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24f9e:	460d      	mov	r5, r1
   24fa0:	4835      	ldr	r0, [pc, #212]	; (25078 <_strtol_l.constprop.0+0xf8>)
   24fa2:	462a      	mov	r2, r5
   24fa4:	f815 4b01 	ldrb.w	r4, [r5], #1
   24fa8:	5d06      	ldrb	r6, [r0, r4]
   24faa:	f016 0608 	ands.w	r6, r6, #8
   24fae:	d1f8      	bne.n	24fa2 <_strtol_l.constprop.0+0x22>
   24fb0:	2c2d      	cmp	r4, #45	; 0x2d
   24fb2:	d124      	bne.n	24ffe <_strtol_l.constprop.0+0x7e>
   24fb4:	782c      	ldrb	r4, [r5, #0]
   24fb6:	2601      	movs	r6, #1
   24fb8:	1c95      	adds	r5, r2, #2
   24fba:	bb2b      	cbnz	r3, 25008 <_strtol_l.constprop.0+0x88>
   24fbc:	2c30      	cmp	r4, #48	; 0x30
   24fbe:	d030      	beq.n	25022 <_strtol_l.constprop.0+0xa2>
   24fc0:	230a      	movs	r3, #10
   24fc2:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   24fc6:	2200      	movs	r2, #0
   24fc8:	f10c 3cff 	add.w	ip, ip, #4294967295
   24fcc:	4610      	mov	r0, r2
   24fce:	fbbc f9f3 	udiv	r9, ip, r3
   24fd2:	fb03 ca19 	mls	sl, r3, r9, ip
   24fd6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   24fda:	2f09      	cmp	r7, #9
   24fdc:	d828      	bhi.n	25030 <_strtol_l.constprop.0+0xb0>
   24fde:	463c      	mov	r4, r7
   24fe0:	42a3      	cmp	r3, r4
   24fe2:	dd34      	ble.n	2504e <_strtol_l.constprop.0+0xce>
   24fe4:	1c57      	adds	r7, r2, #1
   24fe6:	d007      	beq.n	24ff8 <_strtol_l.constprop.0+0x78>
   24fe8:	4581      	cmp	r9, r0
   24fea:	d32d      	bcc.n	25048 <_strtol_l.constprop.0+0xc8>
   24fec:	d101      	bne.n	24ff2 <_strtol_l.constprop.0+0x72>
   24fee:	45a2      	cmp	sl, r4
   24ff0:	db2a      	blt.n	25048 <_strtol_l.constprop.0+0xc8>
   24ff2:	fb00 4003 	mla	r0, r0, r3, r4
   24ff6:	2201      	movs	r2, #1
   24ff8:	f815 4b01 	ldrb.w	r4, [r5], #1
   24ffc:	e7eb      	b.n	24fd6 <_strtol_l.constprop.0+0x56>
   24ffe:	2c2b      	cmp	r4, #43	; 0x2b
   25000:	bf04      	itt	eq
   25002:	782c      	ldrbeq	r4, [r5, #0]
   25004:	1c95      	addeq	r5, r2, #2
   25006:	e7d8      	b.n	24fba <_strtol_l.constprop.0+0x3a>
   25008:	2b10      	cmp	r3, #16
   2500a:	d1da      	bne.n	24fc2 <_strtol_l.constprop.0+0x42>
   2500c:	2c30      	cmp	r4, #48	; 0x30
   2500e:	d1d8      	bne.n	24fc2 <_strtol_l.constprop.0+0x42>
   25010:	782a      	ldrb	r2, [r5, #0]
   25012:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   25016:	2a58      	cmp	r2, #88	; 0x58
   25018:	d1d3      	bne.n	24fc2 <_strtol_l.constprop.0+0x42>
   2501a:	786c      	ldrb	r4, [r5, #1]
   2501c:	2310      	movs	r3, #16
   2501e:	3502      	adds	r5, #2
   25020:	e7cf      	b.n	24fc2 <_strtol_l.constprop.0+0x42>
   25022:	782b      	ldrb	r3, [r5, #0]
   25024:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25028:	2b58      	cmp	r3, #88	; 0x58
   2502a:	d0f6      	beq.n	2501a <_strtol_l.constprop.0+0x9a>
   2502c:	2308      	movs	r3, #8
   2502e:	e7c8      	b.n	24fc2 <_strtol_l.constprop.0+0x42>
   25030:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   25034:	2f19      	cmp	r7, #25
   25036:	d801      	bhi.n	2503c <_strtol_l.constprop.0+0xbc>
   25038:	3c37      	subs	r4, #55	; 0x37
   2503a:	e7d1      	b.n	24fe0 <_strtol_l.constprop.0+0x60>
   2503c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   25040:	2f19      	cmp	r7, #25
   25042:	d804      	bhi.n	2504e <_strtol_l.constprop.0+0xce>
   25044:	3c57      	subs	r4, #87	; 0x57
   25046:	e7cb      	b.n	24fe0 <_strtol_l.constprop.0+0x60>
   25048:	f04f 32ff 	mov.w	r2, #4294967295
   2504c:	e7d4      	b.n	24ff8 <_strtol_l.constprop.0+0x78>
   2504e:	1c53      	adds	r3, r2, #1
   25050:	d108      	bne.n	25064 <_strtol_l.constprop.0+0xe4>
   25052:	2322      	movs	r3, #34	; 0x22
   25054:	4660      	mov	r0, ip
   25056:	f8ce 3000 	str.w	r3, [lr]
   2505a:	f1b8 0f00 	cmp.w	r8, #0
   2505e:	d09c      	beq.n	24f9a <_strtol_l.constprop.0+0x1a>
   25060:	1e69      	subs	r1, r5, #1
   25062:	e006      	b.n	25072 <_strtol_l.constprop.0+0xf2>
   25064:	b106      	cbz	r6, 25068 <_strtol_l.constprop.0+0xe8>
   25066:	4240      	negs	r0, r0
   25068:	f1b8 0f00 	cmp.w	r8, #0
   2506c:	d095      	beq.n	24f9a <_strtol_l.constprop.0+0x1a>
   2506e:	2a00      	cmp	r2, #0
   25070:	d1f6      	bne.n	25060 <_strtol_l.constprop.0+0xe0>
   25072:	f8c8 1000 	str.w	r1, [r8]
   25076:	e790      	b.n	24f9a <_strtol_l.constprop.0+0x1a>
   25078:	0002b550 	.word	0x0002b550

0002507c <strtol>:
   2507c:	4613      	mov	r3, r2
   2507e:	460a      	mov	r2, r1
   25080:	4601      	mov	r1, r0
   25082:	4802      	ldr	r0, [pc, #8]	; (2508c <strtol+0x10>)
   25084:	6800      	ldr	r0, [r0, #0]
   25086:	f7ff bf7b 	b.w	24f80 <_strtol_l.constprop.0>
   2508a:	bf00      	nop
   2508c:	2000c708 	.word	0x2000c708

00025090 <_strtoll_l.constprop.0>:
   25090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25094:	4690      	mov	r8, r2
   25096:	b085      	sub	sp, #20
   25098:	4689      	mov	r9, r1
   2509a:	461e      	mov	r6, r3
   2509c:	460d      	mov	r5, r1
   2509e:	4a45      	ldr	r2, [pc, #276]	; (251b4 <_strtoll_l.constprop.0+0x124>)
   250a0:	9002      	str	r0, [sp, #8]
   250a2:	462b      	mov	r3, r5
   250a4:	f815 4b01 	ldrb.w	r4, [r5], #1
   250a8:	5d17      	ldrb	r7, [r2, r4]
   250aa:	f017 0708 	ands.w	r7, r7, #8
   250ae:	d1f8      	bne.n	250a2 <_strtoll_l.constprop.0+0x12>
   250b0:	2c2d      	cmp	r4, #45	; 0x2d
   250b2:	d141      	bne.n	25138 <_strtoll_l.constprop.0+0xa8>
   250b4:	782c      	ldrb	r4, [r5, #0]
   250b6:	2701      	movs	r7, #1
   250b8:	1c9d      	adds	r5, r3, #2
   250ba:	2e00      	cmp	r6, #0
   250bc:	d141      	bne.n	25142 <_strtoll_l.constprop.0+0xb2>
   250be:	2c30      	cmp	r4, #48	; 0x30
   250c0:	d04c      	beq.n	2515c <_strtoll_l.constprop.0+0xcc>
   250c2:	260a      	movs	r6, #10
   250c4:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   250c8:	f107 3bff 	add.w	fp, r7, #4294967295
   250cc:	17f3      	asrs	r3, r6, #31
   250ce:	4632      	mov	r2, r6
   250d0:	f10a 3aff 	add.w	sl, sl, #4294967295
   250d4:	4658      	mov	r0, fp
   250d6:	9303      	str	r3, [sp, #12]
   250d8:	4651      	mov	r1, sl
   250da:	f7f3 fe15 	bl	18d08 <__aeabi_uldivmod>
   250de:	9201      	str	r2, [sp, #4]
   250e0:	2200      	movs	r2, #0
   250e2:	468e      	mov	lr, r1
   250e4:	4684      	mov	ip, r0
   250e6:	4611      	mov	r1, r2
   250e8:	4610      	mov	r0, r2
   250ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   250ee:	2b09      	cmp	r3, #9
   250f0:	d905      	bls.n	250fe <_strtoll_l.constprop.0+0x6e>
   250f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   250f6:	2b19      	cmp	r3, #25
   250f8:	d837      	bhi.n	2516a <_strtoll_l.constprop.0+0xda>
   250fa:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   250fe:	429e      	cmp	r6, r3
   25100:	dd3d      	ble.n	2517e <_strtoll_l.constprop.0+0xee>
   25102:	1c54      	adds	r4, r2, #1
   25104:	d015      	beq.n	25132 <_strtoll_l.constprop.0+0xa2>
   25106:	4584      	cmp	ip, r0
   25108:	eb7e 0201 	sbcs.w	r2, lr, r1
   2510c:	d334      	bcc.n	25178 <_strtoll_l.constprop.0+0xe8>
   2510e:	458e      	cmp	lr, r1
   25110:	bf08      	it	eq
   25112:	4584      	cmpeq	ip, r0
   25114:	d102      	bne.n	2511c <_strtoll_l.constprop.0+0x8c>
   25116:	9a01      	ldr	r2, [sp, #4]
   25118:	429a      	cmp	r2, r3
   2511a:	db2d      	blt.n	25178 <_strtoll_l.constprop.0+0xe8>
   2511c:	9a03      	ldr	r2, [sp, #12]
   2511e:	4371      	muls	r1, r6
   25120:	fb00 1102 	mla	r1, r0, r2, r1
   25124:	fba6 0200 	umull	r0, r2, r6, r0
   25128:	440a      	add	r2, r1
   2512a:	1818      	adds	r0, r3, r0
   2512c:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
   25130:	2201      	movs	r2, #1
   25132:	f815 4b01 	ldrb.w	r4, [r5], #1
   25136:	e7d8      	b.n	250ea <_strtoll_l.constprop.0+0x5a>
   25138:	2c2b      	cmp	r4, #43	; 0x2b
   2513a:	bf04      	itt	eq
   2513c:	782c      	ldrbeq	r4, [r5, #0]
   2513e:	1c9d      	addeq	r5, r3, #2
   25140:	e7bb      	b.n	250ba <_strtoll_l.constprop.0+0x2a>
   25142:	2e10      	cmp	r6, #16
   25144:	d1be      	bne.n	250c4 <_strtoll_l.constprop.0+0x34>
   25146:	2c30      	cmp	r4, #48	; 0x30
   25148:	d1bc      	bne.n	250c4 <_strtoll_l.constprop.0+0x34>
   2514a:	782b      	ldrb	r3, [r5, #0]
   2514c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25150:	2b58      	cmp	r3, #88	; 0x58
   25152:	d1b7      	bne.n	250c4 <_strtoll_l.constprop.0+0x34>
   25154:	786c      	ldrb	r4, [r5, #1]
   25156:	2610      	movs	r6, #16
   25158:	3502      	adds	r5, #2
   2515a:	e7b3      	b.n	250c4 <_strtoll_l.constprop.0+0x34>
   2515c:	782b      	ldrb	r3, [r5, #0]
   2515e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25162:	2b58      	cmp	r3, #88	; 0x58
   25164:	d0f6      	beq.n	25154 <_strtoll_l.constprop.0+0xc4>
   25166:	2608      	movs	r6, #8
   25168:	e7ac      	b.n	250c4 <_strtoll_l.constprop.0+0x34>
   2516a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   2516e:	2b19      	cmp	r3, #25
   25170:	d805      	bhi.n	2517e <_strtoll_l.constprop.0+0xee>
   25172:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   25176:	e7c2      	b.n	250fe <_strtoll_l.constprop.0+0x6e>
   25178:	f04f 32ff 	mov.w	r2, #4294967295
   2517c:	e7d9      	b.n	25132 <_strtoll_l.constprop.0+0xa2>
   2517e:	1c53      	adds	r3, r2, #1
   25180:	d10a      	bne.n	25198 <_strtoll_l.constprop.0+0x108>
   25182:	2322      	movs	r3, #34	; 0x22
   25184:	9a02      	ldr	r2, [sp, #8]
   25186:	4658      	mov	r0, fp
   25188:	4651      	mov	r1, sl
   2518a:	6013      	str	r3, [r2, #0]
   2518c:	f1b8 0f00 	cmp.w	r8, #0
   25190:	d10a      	bne.n	251a8 <_strtoll_l.constprop.0+0x118>
   25192:	b005      	add	sp, #20
   25194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25198:	b117      	cbz	r7, 251a0 <_strtoll_l.constprop.0+0x110>
   2519a:	4240      	negs	r0, r0
   2519c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   251a0:	f1b8 0f00 	cmp.w	r8, #0
   251a4:	d0f5      	beq.n	25192 <_strtoll_l.constprop.0+0x102>
   251a6:	b10a      	cbz	r2, 251ac <_strtoll_l.constprop.0+0x11c>
   251a8:	f105 39ff 	add.w	r9, r5, #4294967295
   251ac:	f8c8 9000 	str.w	r9, [r8]
   251b0:	e7ef      	b.n	25192 <_strtoll_l.constprop.0+0x102>
   251b2:	bf00      	nop
   251b4:	0002b550 	.word	0x0002b550

000251b8 <strtoll>:
   251b8:	4613      	mov	r3, r2
   251ba:	460a      	mov	r2, r1
   251bc:	4601      	mov	r1, r0
   251be:	4802      	ldr	r0, [pc, #8]	; (251c8 <strtoll+0x10>)
   251c0:	6800      	ldr	r0, [r0, #0]
   251c2:	f7ff bf65 	b.w	25090 <_strtoll_l.constprop.0>
   251c6:	bf00      	nop
   251c8:	2000c708 	.word	0x2000c708

000251cc <_strtoul_l.constprop.0>:
   251cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   251d0:	4686      	mov	lr, r0
   251d2:	460d      	mov	r5, r1
   251d4:	4e35      	ldr	r6, [pc, #212]	; (252ac <_strtoul_l.constprop.0+0xe0>)
   251d6:	4628      	mov	r0, r5
   251d8:	f815 4b01 	ldrb.w	r4, [r5], #1
   251dc:	5d37      	ldrb	r7, [r6, r4]
   251de:	f017 0708 	ands.w	r7, r7, #8
   251e2:	d1f8      	bne.n	251d6 <_strtoul_l.constprop.0+0xa>
   251e4:	2c2d      	cmp	r4, #45	; 0x2d
   251e6:	d126      	bne.n	25236 <_strtoul_l.constprop.0+0x6a>
   251e8:	782c      	ldrb	r4, [r5, #0]
   251ea:	2701      	movs	r7, #1
   251ec:	1c85      	adds	r5, r0, #2
   251ee:	bb3b      	cbnz	r3, 25240 <_strtoul_l.constprop.0+0x74>
   251f0:	2c30      	cmp	r4, #48	; 0x30
   251f2:	d032      	beq.n	2525a <_strtoul_l.constprop.0+0x8e>
   251f4:	230a      	movs	r3, #10
   251f6:	f04f 38ff 	mov.w	r8, #4294967295
   251fa:	2600      	movs	r6, #0
   251fc:	fbb8 f8f3 	udiv	r8, r8, r3
   25200:	fb03 f908 	mul.w	r9, r3, r8
   25204:	4630      	mov	r0, r6
   25206:	ea6f 0909 	mvn.w	r9, r9
   2520a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   2520e:	f1bc 0f09 	cmp.w	ip, #9
   25212:	d829      	bhi.n	25268 <_strtoul_l.constprop.0+0x9c>
   25214:	4664      	mov	r4, ip
   25216:	42a3      	cmp	r3, r4
   25218:	dd37      	ble.n	2528a <_strtoul_l.constprop.0+0xbe>
   2521a:	f1b6 3fff 	cmp.w	r6, #4294967295
   2521e:	d007      	beq.n	25230 <_strtoul_l.constprop.0+0x64>
   25220:	4580      	cmp	r8, r0
   25222:	d32f      	bcc.n	25284 <_strtoul_l.constprop.0+0xb8>
   25224:	d101      	bne.n	2522a <_strtoul_l.constprop.0+0x5e>
   25226:	45a1      	cmp	r9, r4
   25228:	db2c      	blt.n	25284 <_strtoul_l.constprop.0+0xb8>
   2522a:	fb00 4003 	mla	r0, r0, r3, r4
   2522e:	2601      	movs	r6, #1
   25230:	f815 4b01 	ldrb.w	r4, [r5], #1
   25234:	e7e9      	b.n	2520a <_strtoul_l.constprop.0+0x3e>
   25236:	2c2b      	cmp	r4, #43	; 0x2b
   25238:	bf04      	itt	eq
   2523a:	782c      	ldrbeq	r4, [r5, #0]
   2523c:	1c85      	addeq	r5, r0, #2
   2523e:	e7d6      	b.n	251ee <_strtoul_l.constprop.0+0x22>
   25240:	2b10      	cmp	r3, #16
   25242:	d1d8      	bne.n	251f6 <_strtoul_l.constprop.0+0x2a>
   25244:	2c30      	cmp	r4, #48	; 0x30
   25246:	d1d6      	bne.n	251f6 <_strtoul_l.constprop.0+0x2a>
   25248:	7828      	ldrb	r0, [r5, #0]
   2524a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2524e:	2858      	cmp	r0, #88	; 0x58
   25250:	d1d1      	bne.n	251f6 <_strtoul_l.constprop.0+0x2a>
   25252:	786c      	ldrb	r4, [r5, #1]
   25254:	2310      	movs	r3, #16
   25256:	3502      	adds	r5, #2
   25258:	e7cd      	b.n	251f6 <_strtoul_l.constprop.0+0x2a>
   2525a:	782b      	ldrb	r3, [r5, #0]
   2525c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25260:	2b58      	cmp	r3, #88	; 0x58
   25262:	d0f6      	beq.n	25252 <_strtoul_l.constprop.0+0x86>
   25264:	2308      	movs	r3, #8
   25266:	e7c6      	b.n	251f6 <_strtoul_l.constprop.0+0x2a>
   25268:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   2526c:	f1bc 0f19 	cmp.w	ip, #25
   25270:	d801      	bhi.n	25276 <_strtoul_l.constprop.0+0xaa>
   25272:	3c37      	subs	r4, #55	; 0x37
   25274:	e7cf      	b.n	25216 <_strtoul_l.constprop.0+0x4a>
   25276:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   2527a:	f1bc 0f19 	cmp.w	ip, #25
   2527e:	d804      	bhi.n	2528a <_strtoul_l.constprop.0+0xbe>
   25280:	3c57      	subs	r4, #87	; 0x57
   25282:	e7c8      	b.n	25216 <_strtoul_l.constprop.0+0x4a>
   25284:	f04f 36ff 	mov.w	r6, #4294967295
   25288:	e7d2      	b.n	25230 <_strtoul_l.constprop.0+0x64>
   2528a:	1c73      	adds	r3, r6, #1
   2528c:	d106      	bne.n	2529c <_strtoul_l.constprop.0+0xd0>
   2528e:	2322      	movs	r3, #34	; 0x22
   25290:	4630      	mov	r0, r6
   25292:	f8ce 3000 	str.w	r3, [lr]
   25296:	b932      	cbnz	r2, 252a6 <_strtoul_l.constprop.0+0xda>
   25298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2529c:	b107      	cbz	r7, 252a0 <_strtoul_l.constprop.0+0xd4>
   2529e:	4240      	negs	r0, r0
   252a0:	2a00      	cmp	r2, #0
   252a2:	d0f9      	beq.n	25298 <_strtoul_l.constprop.0+0xcc>
   252a4:	b106      	cbz	r6, 252a8 <_strtoul_l.constprop.0+0xdc>
   252a6:	1e69      	subs	r1, r5, #1
   252a8:	6011      	str	r1, [r2, #0]
   252aa:	e7f5      	b.n	25298 <_strtoul_l.constprop.0+0xcc>
   252ac:	0002b550 	.word	0x0002b550

000252b0 <strtoul>:
   252b0:	4613      	mov	r3, r2
   252b2:	460a      	mov	r2, r1
   252b4:	4601      	mov	r1, r0
   252b6:	4802      	ldr	r0, [pc, #8]	; (252c0 <strtoul+0x10>)
   252b8:	6800      	ldr	r0, [r0, #0]
   252ba:	f7ff bf87 	b.w	251cc <_strtoul_l.constprop.0>
   252be:	bf00      	nop
   252c0:	2000c708 	.word	0x2000c708

000252c4 <vsniprintf>:
   252c4:	b507      	push	{r0, r1, r2, lr}
   252c6:	9300      	str	r3, [sp, #0]
   252c8:	4613      	mov	r3, r2
   252ca:	460a      	mov	r2, r1
   252cc:	4601      	mov	r1, r0
   252ce:	4803      	ldr	r0, [pc, #12]	; (252dc <vsniprintf+0x18>)
   252d0:	6800      	ldr	r0, [r0, #0]
   252d2:	f003 fad3 	bl	2887c <_vsniprintf_r>
   252d6:	b003      	add	sp, #12
   252d8:	f85d fb04 	ldr.w	pc, [sp], #4
   252dc:	2000c708 	.word	0x2000c708

000252e0 <__malloc_lock>:
   252e0:	4801      	ldr	r0, [pc, #4]	; (252e8 <__malloc_lock+0x8>)
   252e2:	f001 b8eb 	b.w	264bc <__retarget_lock_acquire_recursive>
   252e6:	bf00      	nop
   252e8:	2000c83c 	.word	0x2000c83c

000252ec <__malloc_unlock>:
   252ec:	4801      	ldr	r0, [pc, #4]	; (252f4 <__malloc_unlock+0x8>)
   252ee:	f001 b8eb 	b.w	264c8 <__retarget_lock_release_recursive>
   252f2:	bf00      	nop
   252f4:	2000c83c 	.word	0x2000c83c

000252f8 <_svfiprintf_r>:
   252f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252fc:	4698      	mov	r8, r3
   252fe:	898b      	ldrh	r3, [r1, #12]
   25300:	b09d      	sub	sp, #116	; 0x74
   25302:	4607      	mov	r7, r0
   25304:	061b      	lsls	r3, r3, #24
   25306:	460d      	mov	r5, r1
   25308:	4614      	mov	r4, r2
   2530a:	d510      	bpl.n	2532e <_svfiprintf_r+0x36>
   2530c:	690b      	ldr	r3, [r1, #16]
   2530e:	b973      	cbnz	r3, 2532e <_svfiprintf_r+0x36>
   25310:	2140      	movs	r1, #64	; 0x40
   25312:	f7ff fdcb 	bl	24eac <_malloc_r>
   25316:	6028      	str	r0, [r5, #0]
   25318:	6128      	str	r0, [r5, #16]
   2531a:	b930      	cbnz	r0, 2532a <_svfiprintf_r+0x32>
   2531c:	230c      	movs	r3, #12
   2531e:	603b      	str	r3, [r7, #0]
   25320:	f04f 30ff 	mov.w	r0, #4294967295
   25324:	b01d      	add	sp, #116	; 0x74
   25326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2532a:	2340      	movs	r3, #64	; 0x40
   2532c:	616b      	str	r3, [r5, #20]
   2532e:	2300      	movs	r3, #0
   25330:	f8cd 800c 	str.w	r8, [sp, #12]
   25334:	f04f 0901 	mov.w	r9, #1
   25338:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 254dc <_svfiprintf_r+0x1e4>
   2533c:	9309      	str	r3, [sp, #36]	; 0x24
   2533e:	2320      	movs	r3, #32
   25340:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   25344:	2330      	movs	r3, #48	; 0x30
   25346:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2534a:	4623      	mov	r3, r4
   2534c:	469a      	mov	sl, r3
   2534e:	f813 2b01 	ldrb.w	r2, [r3], #1
   25352:	b10a      	cbz	r2, 25358 <_svfiprintf_r+0x60>
   25354:	2a25      	cmp	r2, #37	; 0x25
   25356:	d1f9      	bne.n	2534c <_svfiprintf_r+0x54>
   25358:	ebba 0b04 	subs.w	fp, sl, r4
   2535c:	d00b      	beq.n	25376 <_svfiprintf_r+0x7e>
   2535e:	465b      	mov	r3, fp
   25360:	4622      	mov	r2, r4
   25362:	4629      	mov	r1, r5
   25364:	4638      	mov	r0, r7
   25366:	f003 fab4 	bl	288d2 <__ssputs_r>
   2536a:	3001      	adds	r0, #1
   2536c:	f000 80a7 	beq.w	254be <_svfiprintf_r+0x1c6>
   25370:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25372:	445a      	add	r2, fp
   25374:	9209      	str	r2, [sp, #36]	; 0x24
   25376:	f89a 3000 	ldrb.w	r3, [sl]
   2537a:	2b00      	cmp	r3, #0
   2537c:	f000 809f 	beq.w	254be <_svfiprintf_r+0x1c6>
   25380:	2300      	movs	r3, #0
   25382:	f04f 32ff 	mov.w	r2, #4294967295
   25386:	f10a 0a01 	add.w	sl, sl, #1
   2538a:	9304      	str	r3, [sp, #16]
   2538c:	9307      	str	r3, [sp, #28]
   2538e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   25392:	931a      	str	r3, [sp, #104]	; 0x68
   25394:	e9cd 2305 	strd	r2, r3, [sp, #20]
   25398:	4654      	mov	r4, sl
   2539a:	2205      	movs	r2, #5
   2539c:	484f      	ldr	r0, [pc, #316]	; (254dc <_svfiprintf_r+0x1e4>)
   2539e:	f814 1b01 	ldrb.w	r1, [r4], #1
   253a2:	f003 f9dc 	bl	2875e <memchr>
   253a6:	9a04      	ldr	r2, [sp, #16]
   253a8:	b9d8      	cbnz	r0, 253e2 <_svfiprintf_r+0xea>
   253aa:	06d0      	lsls	r0, r2, #27
   253ac:	bf44      	itt	mi
   253ae:	2320      	movmi	r3, #32
   253b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   253b4:	0711      	lsls	r1, r2, #28
   253b6:	bf44      	itt	mi
   253b8:	232b      	movmi	r3, #43	; 0x2b
   253ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   253be:	f89a 3000 	ldrb.w	r3, [sl]
   253c2:	2b2a      	cmp	r3, #42	; 0x2a
   253c4:	d015      	beq.n	253f2 <_svfiprintf_r+0xfa>
   253c6:	9a07      	ldr	r2, [sp, #28]
   253c8:	4654      	mov	r4, sl
   253ca:	2000      	movs	r0, #0
   253cc:	f04f 0c0a 	mov.w	ip, #10
   253d0:	4621      	mov	r1, r4
   253d2:	f811 3b01 	ldrb.w	r3, [r1], #1
   253d6:	3b30      	subs	r3, #48	; 0x30
   253d8:	2b09      	cmp	r3, #9
   253da:	d94b      	bls.n	25474 <_svfiprintf_r+0x17c>
   253dc:	b1b0      	cbz	r0, 2540c <_svfiprintf_r+0x114>
   253de:	9207      	str	r2, [sp, #28]
   253e0:	e014      	b.n	2540c <_svfiprintf_r+0x114>
   253e2:	eba0 0308 	sub.w	r3, r0, r8
   253e6:	46a2      	mov	sl, r4
   253e8:	fa09 f303 	lsl.w	r3, r9, r3
   253ec:	4313      	orrs	r3, r2
   253ee:	9304      	str	r3, [sp, #16]
   253f0:	e7d2      	b.n	25398 <_svfiprintf_r+0xa0>
   253f2:	9b03      	ldr	r3, [sp, #12]
   253f4:	1d19      	adds	r1, r3, #4
   253f6:	681b      	ldr	r3, [r3, #0]
   253f8:	2b00      	cmp	r3, #0
   253fa:	9103      	str	r1, [sp, #12]
   253fc:	bfbb      	ittet	lt
   253fe:	425b      	neglt	r3, r3
   25400:	f042 0202 	orrlt.w	r2, r2, #2
   25404:	9307      	strge	r3, [sp, #28]
   25406:	9307      	strlt	r3, [sp, #28]
   25408:	bfb8      	it	lt
   2540a:	9204      	strlt	r2, [sp, #16]
   2540c:	7823      	ldrb	r3, [r4, #0]
   2540e:	2b2e      	cmp	r3, #46	; 0x2e
   25410:	d10a      	bne.n	25428 <_svfiprintf_r+0x130>
   25412:	7863      	ldrb	r3, [r4, #1]
   25414:	2b2a      	cmp	r3, #42	; 0x2a
   25416:	d132      	bne.n	2547e <_svfiprintf_r+0x186>
   25418:	9b03      	ldr	r3, [sp, #12]
   2541a:	3402      	adds	r4, #2
   2541c:	1d1a      	adds	r2, r3, #4
   2541e:	681b      	ldr	r3, [r3, #0]
   25420:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   25424:	9203      	str	r2, [sp, #12]
   25426:	9305      	str	r3, [sp, #20]
   25428:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 254e0 <_svfiprintf_r+0x1e8>
   2542c:	2203      	movs	r2, #3
   2542e:	7821      	ldrb	r1, [r4, #0]
   25430:	4650      	mov	r0, sl
   25432:	f003 f994 	bl	2875e <memchr>
   25436:	b138      	cbz	r0, 25448 <_svfiprintf_r+0x150>
   25438:	eba0 000a 	sub.w	r0, r0, sl
   2543c:	2240      	movs	r2, #64	; 0x40
   2543e:	9b04      	ldr	r3, [sp, #16]
   25440:	3401      	adds	r4, #1
   25442:	4082      	lsls	r2, r0
   25444:	4313      	orrs	r3, r2
   25446:	9304      	str	r3, [sp, #16]
   25448:	f814 1b01 	ldrb.w	r1, [r4], #1
   2544c:	2206      	movs	r2, #6
   2544e:	4825      	ldr	r0, [pc, #148]	; (254e4 <_svfiprintf_r+0x1ec>)
   25450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   25454:	f003 f983 	bl	2875e <memchr>
   25458:	2800      	cmp	r0, #0
   2545a:	d036      	beq.n	254ca <_svfiprintf_r+0x1d2>
   2545c:	4b22      	ldr	r3, [pc, #136]	; (254e8 <_svfiprintf_r+0x1f0>)
   2545e:	bb1b      	cbnz	r3, 254a8 <_svfiprintf_r+0x1b0>
   25460:	9b03      	ldr	r3, [sp, #12]
   25462:	3307      	adds	r3, #7
   25464:	f023 0307 	bic.w	r3, r3, #7
   25468:	3308      	adds	r3, #8
   2546a:	9303      	str	r3, [sp, #12]
   2546c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2546e:	4433      	add	r3, r6
   25470:	9309      	str	r3, [sp, #36]	; 0x24
   25472:	e76a      	b.n	2534a <_svfiprintf_r+0x52>
   25474:	fb0c 3202 	mla	r2, ip, r2, r3
   25478:	460c      	mov	r4, r1
   2547a:	2001      	movs	r0, #1
   2547c:	e7a8      	b.n	253d0 <_svfiprintf_r+0xd8>
   2547e:	2300      	movs	r3, #0
   25480:	3401      	adds	r4, #1
   25482:	f04f 0c0a 	mov.w	ip, #10
   25486:	4619      	mov	r1, r3
   25488:	9305      	str	r3, [sp, #20]
   2548a:	4620      	mov	r0, r4
   2548c:	f810 2b01 	ldrb.w	r2, [r0], #1
   25490:	3a30      	subs	r2, #48	; 0x30
   25492:	2a09      	cmp	r2, #9
   25494:	d903      	bls.n	2549e <_svfiprintf_r+0x1a6>
   25496:	2b00      	cmp	r3, #0
   25498:	d0c6      	beq.n	25428 <_svfiprintf_r+0x130>
   2549a:	9105      	str	r1, [sp, #20]
   2549c:	e7c4      	b.n	25428 <_svfiprintf_r+0x130>
   2549e:	fb0c 2101 	mla	r1, ip, r1, r2
   254a2:	4604      	mov	r4, r0
   254a4:	2301      	movs	r3, #1
   254a6:	e7f0      	b.n	2548a <_svfiprintf_r+0x192>
   254a8:	ab03      	add	r3, sp, #12
   254aa:	462a      	mov	r2, r5
   254ac:	a904      	add	r1, sp, #16
   254ae:	4638      	mov	r0, r7
   254b0:	9300      	str	r3, [sp, #0]
   254b2:	4b0e      	ldr	r3, [pc, #56]	; (254ec <_svfiprintf_r+0x1f4>)
   254b4:	f3af 8000 	nop.w
   254b8:	1c42      	adds	r2, r0, #1
   254ba:	4606      	mov	r6, r0
   254bc:	d1d6      	bne.n	2546c <_svfiprintf_r+0x174>
   254be:	89ab      	ldrh	r3, [r5, #12]
   254c0:	065b      	lsls	r3, r3, #25
   254c2:	f53f af2d 	bmi.w	25320 <_svfiprintf_r+0x28>
   254c6:	9809      	ldr	r0, [sp, #36]	; 0x24
   254c8:	e72c      	b.n	25324 <_svfiprintf_r+0x2c>
   254ca:	ab03      	add	r3, sp, #12
   254cc:	462a      	mov	r2, r5
   254ce:	a904      	add	r1, sp, #16
   254d0:	4638      	mov	r0, r7
   254d2:	9300      	str	r3, [sp, #0]
   254d4:	4b05      	ldr	r3, [pc, #20]	; (254ec <_svfiprintf_r+0x1f4>)
   254d6:	f000 f80b 	bl	254f0 <_printf_i>
   254da:	e7ed      	b.n	254b8 <_svfiprintf_r+0x1c0>
   254dc:	0002b650 	.word	0x0002b650
   254e0:	0002b656 	.word	0x0002b656
   254e4:	0002b65a 	.word	0x0002b65a
   254e8:	00000000 	.word	0x00000000
   254ec:	000288d3 	.word	0x000288d3

000254f0 <_printf_i>:
   254f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   254f4:	7e0f      	ldrb	r7, [r1, #24]
   254f6:	4691      	mov	r9, r2
   254f8:	4680      	mov	r8, r0
   254fa:	460c      	mov	r4, r1
   254fc:	2f78      	cmp	r7, #120	; 0x78
   254fe:	469a      	mov	sl, r3
   25500:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   25502:	f101 0243 	add.w	r2, r1, #67	; 0x43
   25506:	d807      	bhi.n	25518 <_printf_i+0x28>
   25508:	2f62      	cmp	r7, #98	; 0x62
   2550a:	d80a      	bhi.n	25522 <_printf_i+0x32>
   2550c:	2f00      	cmp	r7, #0
   2550e:	f000 80e0 	beq.w	256d2 <_printf_i+0x1e2>
   25512:	2f58      	cmp	r7, #88	; 0x58
   25514:	f000 80bb 	beq.w	2568e <_printf_i+0x19e>
   25518:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2551c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   25520:	e03a      	b.n	25598 <_printf_i+0xa8>
   25522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   25526:	2b15      	cmp	r3, #21
   25528:	d8f6      	bhi.n	25518 <_printf_i+0x28>
   2552a:	a101      	add	r1, pc, #4	; (adr r1, 25530 <_printf_i+0x40>)
   2552c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   25530:	00025589 	.word	0x00025589
   25534:	0002559d 	.word	0x0002559d
   25538:	00025519 	.word	0x00025519
   2553c:	00025519 	.word	0x00025519
   25540:	00025519 	.word	0x00025519
   25544:	00025519 	.word	0x00025519
   25548:	0002559d 	.word	0x0002559d
   2554c:	00025519 	.word	0x00025519
   25550:	00025519 	.word	0x00025519
   25554:	00025519 	.word	0x00025519
   25558:	00025519 	.word	0x00025519
   2555c:	000256b9 	.word	0x000256b9
   25560:	0002562d 	.word	0x0002562d
   25564:	0002566f 	.word	0x0002566f
   25568:	00025519 	.word	0x00025519
   2556c:	00025519 	.word	0x00025519
   25570:	000256db 	.word	0x000256db
   25574:	00025519 	.word	0x00025519
   25578:	0002562d 	.word	0x0002562d
   2557c:	00025519 	.word	0x00025519
   25580:	00025519 	.word	0x00025519
   25584:	00025677 	.word	0x00025677
   25588:	682b      	ldr	r3, [r5, #0]
   2558a:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2558e:	1d1a      	adds	r2, r3, #4
   25590:	681b      	ldr	r3, [r3, #0]
   25592:	602a      	str	r2, [r5, #0]
   25594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   25598:	2301      	movs	r3, #1
   2559a:	e0ab      	b.n	256f4 <_printf_i+0x204>
   2559c:	6823      	ldr	r3, [r4, #0]
   2559e:	6829      	ldr	r1, [r5, #0]
   255a0:	061f      	lsls	r7, r3, #24
   255a2:	f101 0004 	add.w	r0, r1, #4
   255a6:	6028      	str	r0, [r5, #0]
   255a8:	d501      	bpl.n	255ae <_printf_i+0xbe>
   255aa:	680d      	ldr	r5, [r1, #0]
   255ac:	e003      	b.n	255b6 <_printf_i+0xc6>
   255ae:	065e      	lsls	r6, r3, #25
   255b0:	d5fb      	bpl.n	255aa <_printf_i+0xba>
   255b2:	f9b1 5000 	ldrsh.w	r5, [r1]
   255b6:	2d00      	cmp	r5, #0
   255b8:	6861      	ldr	r1, [r4, #4]
   255ba:	da7a      	bge.n	256b2 <_printf_i+0x1c2>
   255bc:	202d      	movs	r0, #45	; 0x2d
   255be:	2900      	cmp	r1, #0
   255c0:	60a1      	str	r1, [r4, #8]
   255c2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   255c6:	da2d      	bge.n	25624 <_printf_i+0x134>
   255c8:	426d      	negs	r5, r5
   255ca:	485e      	ldr	r0, [pc, #376]	; (25744 <_printf_i+0x254>)
   255cc:	230a      	movs	r3, #10
   255ce:	4616      	mov	r6, r2
   255d0:	fbb5 f1f3 	udiv	r1, r5, r3
   255d4:	fb03 5711 	mls	r7, r3, r1, r5
   255d8:	5dc7      	ldrb	r7, [r0, r7]
   255da:	f806 7d01 	strb.w	r7, [r6, #-1]!
   255de:	462f      	mov	r7, r5
   255e0:	460d      	mov	r5, r1
   255e2:	42bb      	cmp	r3, r7
   255e4:	d9f4      	bls.n	255d0 <_printf_i+0xe0>
   255e6:	2b08      	cmp	r3, #8
   255e8:	d10b      	bne.n	25602 <_printf_i+0x112>
   255ea:	6823      	ldr	r3, [r4, #0]
   255ec:	07df      	lsls	r7, r3, #31
   255ee:	d508      	bpl.n	25602 <_printf_i+0x112>
   255f0:	6923      	ldr	r3, [r4, #16]
   255f2:	6861      	ldr	r1, [r4, #4]
   255f4:	4299      	cmp	r1, r3
   255f6:	bfde      	ittt	le
   255f8:	2330      	movle	r3, #48	; 0x30
   255fa:	f806 3c01 	strble.w	r3, [r6, #-1]
   255fe:	f106 36ff 	addle.w	r6, r6, #4294967295
   25602:	1b92      	subs	r2, r2, r6
   25604:	6122      	str	r2, [r4, #16]
   25606:	464b      	mov	r3, r9
   25608:	aa03      	add	r2, sp, #12
   2560a:	4621      	mov	r1, r4
   2560c:	4640      	mov	r0, r8
   2560e:	f8cd a000 	str.w	sl, [sp]
   25612:	f003 f9b9 	bl	28988 <_printf_common>
   25616:	3001      	adds	r0, #1
   25618:	d171      	bne.n	256fe <_printf_i+0x20e>
   2561a:	f04f 30ff 	mov.w	r0, #4294967295
   2561e:	b004      	add	sp, #16
   25620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25624:	f023 0304 	bic.w	r3, r3, #4
   25628:	6023      	str	r3, [r4, #0]
   2562a:	e7cd      	b.n	255c8 <_printf_i+0xd8>
   2562c:	682b      	ldr	r3, [r5, #0]
   2562e:	6820      	ldr	r0, [r4, #0]
   25630:	1d19      	adds	r1, r3, #4
   25632:	6029      	str	r1, [r5, #0]
   25634:	0605      	lsls	r5, r0, #24
   25636:	d501      	bpl.n	2563c <_printf_i+0x14c>
   25638:	681d      	ldr	r5, [r3, #0]
   2563a:	e002      	b.n	25642 <_printf_i+0x152>
   2563c:	0641      	lsls	r1, r0, #25
   2563e:	d5fb      	bpl.n	25638 <_printf_i+0x148>
   25640:	881d      	ldrh	r5, [r3, #0]
   25642:	2f6f      	cmp	r7, #111	; 0x6f
   25644:	483f      	ldr	r0, [pc, #252]	; (25744 <_printf_i+0x254>)
   25646:	bf14      	ite	ne
   25648:	230a      	movne	r3, #10
   2564a:	2308      	moveq	r3, #8
   2564c:	2100      	movs	r1, #0
   2564e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   25652:	6866      	ldr	r6, [r4, #4]
   25654:	2e00      	cmp	r6, #0
   25656:	60a6      	str	r6, [r4, #8]
   25658:	dbb9      	blt.n	255ce <_printf_i+0xde>
   2565a:	6821      	ldr	r1, [r4, #0]
   2565c:	f021 0104 	bic.w	r1, r1, #4
   25660:	6021      	str	r1, [r4, #0]
   25662:	2d00      	cmp	r5, #0
   25664:	d1b3      	bne.n	255ce <_printf_i+0xde>
   25666:	2e00      	cmp	r6, #0
   25668:	d1b1      	bne.n	255ce <_printf_i+0xde>
   2566a:	4616      	mov	r6, r2
   2566c:	e7bb      	b.n	255e6 <_printf_i+0xf6>
   2566e:	6823      	ldr	r3, [r4, #0]
   25670:	f043 0320 	orr.w	r3, r3, #32
   25674:	6023      	str	r3, [r4, #0]
   25676:	2778      	movs	r7, #120	; 0x78
   25678:	4833      	ldr	r0, [pc, #204]	; (25748 <_printf_i+0x258>)
   2567a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   2567e:	6829      	ldr	r1, [r5, #0]
   25680:	6823      	ldr	r3, [r4, #0]
   25682:	1d0e      	adds	r6, r1, #4
   25684:	602e      	str	r6, [r5, #0]
   25686:	061e      	lsls	r6, r3, #24
   25688:	d503      	bpl.n	25692 <_printf_i+0x1a2>
   2568a:	680d      	ldr	r5, [r1, #0]
   2568c:	e004      	b.n	25698 <_printf_i+0x1a8>
   2568e:	482d      	ldr	r0, [pc, #180]	; (25744 <_printf_i+0x254>)
   25690:	e7f3      	b.n	2567a <_printf_i+0x18a>
   25692:	065d      	lsls	r5, r3, #25
   25694:	d5f9      	bpl.n	2568a <_printf_i+0x19a>
   25696:	880d      	ldrh	r5, [r1, #0]
   25698:	07d9      	lsls	r1, r3, #31
   2569a:	bf44      	itt	mi
   2569c:	f043 0320 	orrmi.w	r3, r3, #32
   256a0:	6023      	strmi	r3, [r4, #0]
   256a2:	b10d      	cbz	r5, 256a8 <_printf_i+0x1b8>
   256a4:	2310      	movs	r3, #16
   256a6:	e7d1      	b.n	2564c <_printf_i+0x15c>
   256a8:	6823      	ldr	r3, [r4, #0]
   256aa:	f023 0320 	bic.w	r3, r3, #32
   256ae:	6023      	str	r3, [r4, #0]
   256b0:	e7f8      	b.n	256a4 <_printf_i+0x1b4>
   256b2:	4824      	ldr	r0, [pc, #144]	; (25744 <_printf_i+0x254>)
   256b4:	230a      	movs	r3, #10
   256b6:	e7cc      	b.n	25652 <_printf_i+0x162>
   256b8:	682b      	ldr	r3, [r5, #0]
   256ba:	6826      	ldr	r6, [r4, #0]
   256bc:	1d18      	adds	r0, r3, #4
   256be:	6961      	ldr	r1, [r4, #20]
   256c0:	6028      	str	r0, [r5, #0]
   256c2:	0635      	lsls	r5, r6, #24
   256c4:	681b      	ldr	r3, [r3, #0]
   256c6:	d501      	bpl.n	256cc <_printf_i+0x1dc>
   256c8:	6019      	str	r1, [r3, #0]
   256ca:	e002      	b.n	256d2 <_printf_i+0x1e2>
   256cc:	0670      	lsls	r0, r6, #25
   256ce:	d5fb      	bpl.n	256c8 <_printf_i+0x1d8>
   256d0:	8019      	strh	r1, [r3, #0]
   256d2:	2300      	movs	r3, #0
   256d4:	4616      	mov	r6, r2
   256d6:	6123      	str	r3, [r4, #16]
   256d8:	e795      	b.n	25606 <_printf_i+0x116>
   256da:	682b      	ldr	r3, [r5, #0]
   256dc:	2100      	movs	r1, #0
   256de:	1d1a      	adds	r2, r3, #4
   256e0:	602a      	str	r2, [r5, #0]
   256e2:	681e      	ldr	r6, [r3, #0]
   256e4:	6862      	ldr	r2, [r4, #4]
   256e6:	4630      	mov	r0, r6
   256e8:	f003 f839 	bl	2875e <memchr>
   256ec:	b108      	cbz	r0, 256f2 <_printf_i+0x202>
   256ee:	1b80      	subs	r0, r0, r6
   256f0:	6060      	str	r0, [r4, #4]
   256f2:	6863      	ldr	r3, [r4, #4]
   256f4:	6123      	str	r3, [r4, #16]
   256f6:	2300      	movs	r3, #0
   256f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   256fc:	e783      	b.n	25606 <_printf_i+0x116>
   256fe:	6923      	ldr	r3, [r4, #16]
   25700:	4632      	mov	r2, r6
   25702:	4649      	mov	r1, r9
   25704:	4640      	mov	r0, r8
   25706:	47d0      	blx	sl
   25708:	3001      	adds	r0, #1
   2570a:	d086      	beq.n	2561a <_printf_i+0x12a>
   2570c:	6823      	ldr	r3, [r4, #0]
   2570e:	079b      	lsls	r3, r3, #30
   25710:	d414      	bmi.n	2573c <_printf_i+0x24c>
   25712:	68e0      	ldr	r0, [r4, #12]
   25714:	9b03      	ldr	r3, [sp, #12]
   25716:	4298      	cmp	r0, r3
   25718:	bfb8      	it	lt
   2571a:	4618      	movlt	r0, r3
   2571c:	e77f      	b.n	2561e <_printf_i+0x12e>
   2571e:	2301      	movs	r3, #1
   25720:	4632      	mov	r2, r6
   25722:	4649      	mov	r1, r9
   25724:	4640      	mov	r0, r8
   25726:	47d0      	blx	sl
   25728:	3001      	adds	r0, #1
   2572a:	f43f af76 	beq.w	2561a <_printf_i+0x12a>
   2572e:	3501      	adds	r5, #1
   25730:	68e3      	ldr	r3, [r4, #12]
   25732:	9903      	ldr	r1, [sp, #12]
   25734:	1a5b      	subs	r3, r3, r1
   25736:	42ab      	cmp	r3, r5
   25738:	dcf1      	bgt.n	2571e <_printf_i+0x22e>
   2573a:	e7ea      	b.n	25712 <_printf_i+0x222>
   2573c:	2500      	movs	r5, #0
   2573e:	f104 0619 	add.w	r6, r4, #25
   25742:	e7f5      	b.n	25730 <_printf_i+0x240>
   25744:	0002b661 	.word	0x0002b661
   25748:	0002b672 	.word	0x0002b672

0002574c <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2574c:	2301      	movs	r3, #1
   2574e:	fa03 f101 	lsl.w	r1, r3, r1
   25752:	6903      	ldr	r3, [r0, #16]
   25754:	681b      	ldr	r3, [r3, #0]
   25756:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   25758:	bf18      	it	ne
   2575a:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2575e:	b112      	cbz	r2, 25766 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   25760:	6883      	ldr	r3, [r0, #8]
   25762:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   25764:	4718      	bx	r3
   25766:	6883      	ldr	r3, [r0, #8]
   25768:	691b      	ldr	r3, [r3, #16]
   2576a:	e7fb      	b.n	25764 <gpio_pin_set.isra.0+0x18>

0002576c <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   2576c:	b538      	push	{r3, r4, r5, lr}
   2576e:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
   25770:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   25774:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   25778:	f240 30e7 	movw	r0, #999	; 0x3e7
   2577c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25780:	2300      	movs	r3, #0
   25782:	fbc4 0105 	smlal	r0, r1, r4, r5
   25786:	f7f3 fabf 	bl	18d08 <__aeabi_uldivmod>
}
   2578a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   2578e:	f7ff b831 	b.w	247f4 <z_impl_k_sleep>

00025792 <cbpprintf_external>:
{
   25792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25796:	4606      	mov	r6, r0
   25798:	460d      	mov	r5, r1
   2579a:	4617      	mov	r7, r2
	if (buf == NULL) {
   2579c:	4698      	mov	r8, r3
   2579e:	b32b      	cbz	r3, 257ec <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   257a0:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   257a4:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   257a8:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   257ac:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   257ae:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   257b0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   257b4:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   257b8:	441c      	add	r4, r3
   257ba:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   257bc:	45ca      	cmp	sl, r9
   257be:	d309      	bcc.n	257d4 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   257c0:	4639      	mov	r1, r7
   257c2:	4630      	mov	r0, r6
   257c4:	46ac      	mov	ip, r5
   257c6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   257ca:	f108 0308 	add.w	r3, r8, #8
}
   257ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   257d2:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   257d4:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   257d8:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   257dc:	4620      	mov	r0, r4
		*ps = s;
   257de:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   257e2:	f7f3 fc03 	bl	18fec <strlen>
   257e6:	3001      	adds	r0, #1
   257e8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   257ea:	e7e7      	b.n	257bc <cbpprintf_external+0x2a>
}
   257ec:	f06f 0015 	mvn.w	r0, #21
   257f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000257f4 <is_ptr>:
{
   257f4:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   257f6:	2500      	movs	r5, #0
{
   257f8:	4602      	mov	r2, r0
	bool mod = false;
   257fa:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   257fc:	4614      	mov	r4, r2
   257fe:	f814 3b01 	ldrb.w	r3, [r4], #1
   25802:	b90b      	cbnz	r3, 25808 <is_ptr+0x14>
					return false;
   25804:	4618      	mov	r0, r3
   25806:	e009      	b.n	2581c <is_ptr+0x28>
		if (mod) {
   25808:	b198      	cbz	r0, 25832 <is_ptr+0x3e>
			if (cnt == n) {
   2580a:	428d      	cmp	r5, r1
   2580c:	d107      	bne.n	2581e <is_ptr+0x2a>
				if (c == 'p') {
   2580e:	2b70      	cmp	r3, #112	; 0x70
   25810:	d004      	beq.n	2581c <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   25812:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   25816:	2a3a      	cmp	r2, #58	; 0x3a
   25818:	d80b      	bhi.n	25832 <is_ptr+0x3e>
					return false;
   2581a:	2000      	movs	r0, #0
}
   2581c:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   2581e:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   25822:	2e3a      	cmp	r6, #58	; 0x3a
   25824:	d805      	bhi.n	25832 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   25826:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   25828:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2582a:	1c94      	adds	r4, r2, #2
   2582c:	2b00      	cmp	r3, #0
   2582e:	d0e9      	beq.n	25804 <is_ptr+0x10>
   25830:	2000      	movs	r0, #0
		if (c == '%') {
   25832:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   25834:	4622      	mov	r2, r4
			mod = !mod;
   25836:	bf08      	it	eq
   25838:	f080 0001 	eoreq.w	r0, r0, #1
   2583c:	e7de      	b.n	257fc <is_ptr+0x8>

0002583e <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   2583e:	b40c      	push	{r2, r3}
   25840:	4603      	mov	r3, r0
   25842:	b507      	push	{r0, r1, r2, lr}
   25844:	4608      	mov	r0, r1
				       unsigned long request, ...)
{
	va_list args;
	int res;

	va_start(args, request);
   25846:	aa05      	add	r2, sp, #20
	res = vtable->ioctl(obj, request, args);
   25848:	f240 1105 	movw	r1, #261	; 0x105
   2584c:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2584e:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   25850:	4798      	blx	r3
	va_end(args);

	return res;
}
   25852:	b003      	add	sp, #12
   25854:	f85d eb04 	ldr.w	lr, [sp], #4
   25858:	b002      	add	sp, #8
   2585a:	4770      	bx	lr

0002585c <arch_printk_char_out>:
}
   2585c:	2000      	movs	r0, #0
   2585e:	4770      	bx	lr

00025860 <str_out>:
{
   25860:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25862:	688a      	ldr	r2, [r1, #8]
   25864:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   25866:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25868:	b114      	cbz	r4, 25870 <str_out+0x10>
   2586a:	684b      	ldr	r3, [r1, #4]
   2586c:	4293      	cmp	r3, r2
   2586e:	dc01      	bgt.n	25874 <str_out+0x14>
		ctx->count++;
   25870:	608d      	str	r5, [r1, #8]
}
   25872:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   25874:	3b01      	subs	r3, #1
   25876:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   25878:	bf08      	it	eq
   2587a:	2200      	moveq	r2, #0
   2587c:	608d      	str	r5, [r1, #8]
   2587e:	bf0c      	ite	eq
   25880:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   25882:	54a0      	strbne	r0, [r4, r2]
   25884:	e7f5      	b.n	25872 <str_out+0x12>

00025886 <printk>:
{
   25886:	b40f      	push	{r0, r1, r2, r3}
   25888:	b507      	push	{r0, r1, r2, lr}
   2588a:	a904      	add	r1, sp, #16
   2588c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   25890:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   25892:	f000 fd0b 	bl	262ac <z_log_vprintk>
}
   25896:	b003      	add	sp, #12
   25898:	f85d eb04 	ldr.w	lr, [sp], #4
   2589c:	b004      	add	sp, #16
   2589e:	4770      	bx	lr

000258a0 <snprintk>:
{
   258a0:	b40c      	push	{r2, r3}
   258a2:	b507      	push	{r0, r1, r2, lr}
   258a4:	ab04      	add	r3, sp, #16
   258a6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   258aa:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   258ac:	f7f4 fa46 	bl	19d3c <vsnprintk>
}
   258b0:	b003      	add	sp, #12
   258b2:	f85d eb04 	ldr.w	lr, [sp], #4
   258b6:	b002      	add	sp, #8
   258b8:	4770      	bx	lr

000258ba <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   258ba:	4604      	mov	r4, r0
   258bc:	b508      	push	{r3, lr}
   258be:	4608      	mov	r0, r1
   258c0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   258c2:	461a      	mov	r2, r3
   258c4:	47a0      	blx	r4
	return z_impl_z_current_get();
   258c6:	f7fe ffaf 	bl	24828 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   258ca:	f7f6 fb99 	bl	1c000 <z_impl_k_thread_abort>

000258ce <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   258ce:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   258d2:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   258d4:	0840      	lsrs	r0, r0, #1
   258d6:	4770      	bx	lr

000258d8 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   258d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   258da:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   258dc:	f7ff fff7 	bl	258ce <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   258e0:	fab0 f080 	clz	r0, r0
   258e4:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   258e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   258ec:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   258f0:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   258f2:	1d17      	adds	r7, r2, #4
{
   258f4:	460c      	mov	r4, r1
   258f6:	3206      	adds	r2, #6
   258f8:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   258fa:	b956      	cbnz	r6, 25912 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   258fc:	2101      	movs	r1, #1
   258fe:	fa01 f000 	lsl.w	r0, r1, r0
   25902:	68d9      	ldr	r1, [r3, #12]
   25904:	4301      	orrs	r1, r0
   25906:	60d9      	str	r1, [r3, #12]
		b->next = c;
   25908:	f8cc 4010 	str.w	r4, [ip, #16]
   2590c:	53dd      	strh	r5, [r3, r7]
   2590e:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   25910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   25912:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   25914:	3104      	adds	r1, #4
   25916:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   25918:	53d8      	strh	r0, [r3, r7]
   2591a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2591e:	529e      	strh	r6, [r3, r2]
   25920:	80c5      	strh	r5, [r0, #6]
   25922:	525d      	strh	r5, [r3, r1]
   25924:	e7f4      	b.n	25910 <free_list_add+0x38>

00025926 <free_list_remove_bidx>:
{
   25926:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   25928:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2592c:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2592e:	4299      	cmp	r1, r3
   25930:	f102 0104 	add.w	r1, r2, #4
   25934:	d10a      	bne.n	2594c <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   25936:	2301      	movs	r3, #1
   25938:	fa03 f202 	lsl.w	r2, r3, r2
   2593c:	68c3      	ldr	r3, [r0, #12]
   2593e:	ea23 0302 	bic.w	r3, r3, r2
   25942:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   25944:	2300      	movs	r3, #0
   25946:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2594a:	bd10      	pop	{r4, pc}
   2594c:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2594e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   25952:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   25956:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2595a:	80cb      	strh	r3, [r1, #6]
   2595c:	8082      	strh	r2, [r0, #4]
}
   2595e:	e7f4      	b.n	2594a <free_list_remove_bidx+0x24>

00025960 <free_list_remove>:
{
   25960:	b508      	push	{r3, lr}
   25962:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   25964:	f7ff ffb3 	bl	258ce <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   25968:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2596c:	4618      	mov	r0, r3
}
   2596e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   25972:	f1c2 021f 	rsb	r2, r2, #31
   25976:	f7ff bfd6 	b.w	25926 <free_list_remove_bidx>

0002597a <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2597a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2597e:	fab1 f581 	clz	r5, r1
   25982:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   25986:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   2598a:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2598e:	4603      	mov	r3, r0
   25990:	460e      	mov	r6, r1
	if (b->next) {
   25992:	b1c2      	cbz	r2, 259c6 <alloc_chunk+0x4c>
   25994:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   25996:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2599a:	4618      	mov	r0, r3
   2599c:	4621      	mov	r1, r4
   2599e:	f7ff ff96 	bl	258ce <chunk_size>
   259a2:	42b0      	cmp	r0, r6
   259a4:	d306      	bcc.n	259b4 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   259a6:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   259a8:	4618      	mov	r0, r3
   259aa:	f7ff ffbc 	bl	25926 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   259ae:	4620      	mov	r0, r4
   259b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   259b4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   259b8:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   259ba:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   259bc:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   259c0:	d001      	beq.n	259c6 <alloc_chunk+0x4c>
   259c2:	4282      	cmp	r2, r0
   259c4:	d1e7      	bne.n	25996 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   259c6:	f04f 34ff 	mov.w	r4, #4294967295
   259ca:	f1c5 0220 	rsb	r2, r5, #32
   259ce:	4094      	lsls	r4, r2
   259d0:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   259d2:	4014      	ands	r4, r2
   259d4:	d0eb      	beq.n	259ae <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   259d6:	fa94 f2a4 	rbit	r2, r4
   259da:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   259de:	1d11      	adds	r1, r2, #4
   259e0:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   259e4:	4621      	mov	r1, r4
   259e6:	e7df      	b.n	259a8 <alloc_chunk+0x2e>

000259e8 <merge_chunks>:
{
   259e8:	b538      	push	{r3, r4, r5, lr}
   259ea:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   259ec:	f7ff ff6f 	bl	258ce <chunk_size>
{
   259f0:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   259f2:	4604      	mov	r4, r0
   259f4:	4611      	mov	r1, r2
   259f6:	4618      	mov	r0, r3
   259f8:	f7ff ff69 	bl	258ce <chunk_size>
   259fc:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   259fe:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   25a00:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   25a04:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   25a06:	4618      	mov	r0, r3
   25a08:	f7ff ff61 	bl	258ce <chunk_size>
	void *cmem = &buf[c];
   25a0c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   25a0e:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   25a12:	bd38      	pop	{r3, r4, r5, pc}

00025a14 <split_chunks>:
{
   25a14:	b538      	push	{r3, r4, r5, lr}
   25a16:	460c      	mov	r4, r1
   25a18:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   25a1a:	f7ff ff58 	bl	258ce <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   25a1e:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   25a20:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   25a22:	4405      	add	r5, r0
   25a24:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25a28:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   25a2a:	8060      	strh	r0, [r4, #2]
   25a2c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25a30:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   25a32:	8044      	strh	r4, [r0, #2]
   25a34:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   25a38:	4618      	mov	r0, r3
   25a3a:	4611      	mov	r1, r2
   25a3c:	f7ff ff47 	bl	258ce <chunk_size>
	void *cmem = &buf[c];
   25a40:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   25a42:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   25a46:	bd38      	pop	{r3, r4, r5, pc}

00025a48 <free_chunk>:
{
   25a48:	b538      	push	{r3, r4, r5, lr}
   25a4a:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   25a4c:	f7ff ff3f 	bl	258ce <chunk_size>
   25a50:	460c      	mov	r4, r1
   25a52:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   25a54:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25a58:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   25a5a:	07da      	lsls	r2, r3, #31
   25a5c:	d40a      	bmi.n	25a74 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   25a5e:	4628      	mov	r0, r5
   25a60:	f7ff ff7e 	bl	25960 <free_list_remove>
	return c + chunk_size(h, c);
   25a64:	4621      	mov	r1, r4
   25a66:	4628      	mov	r0, r5
   25a68:	f7ff ff31 	bl	258ce <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   25a6c:	1822      	adds	r2, r4, r0
   25a6e:	4628      	mov	r0, r5
   25a70:	f7ff ffba 	bl	259e8 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   25a74:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25a78:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   25a7a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25a7e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   25a80:	07db      	lsls	r3, r3, #31
   25a82:	d40c      	bmi.n	25a9e <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   25a84:	4628      	mov	r0, r5
   25a86:	f7ff ff6b 	bl	25960 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   25a8a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   25a8e:	4622      	mov	r2, r4
   25a90:	1a61      	subs	r1, r4, r1
   25a92:	4628      	mov	r0, r5
   25a94:	f7ff ffa8 	bl	259e8 <merge_chunks>
   25a98:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25a9c:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   25a9e:	4621      	mov	r1, r4
   25aa0:	4628      	mov	r0, r5
}
   25aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   25aa6:	f7ff bf17 	b.w	258d8 <free_list_add>

00025aaa <sys_heap_free>:
	if (mem == NULL) {
   25aaa:	b161      	cbz	r1, 25ac6 <sys_heap_free+0x1c>
   25aac:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25aae:	3904      	subs	r1, #4
   25ab0:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   25ab2:	f021 0307 	bic.w	r3, r1, #7
   25ab6:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   25ab8:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   25aba:	08c9      	lsrs	r1, r1, #3
   25abc:	f022 0201 	bic.w	r2, r2, #1
   25ac0:	805a      	strh	r2, [r3, #2]
   25ac2:	f7ff bfc1 	b.w	25a48 <free_chunk>
}
   25ac6:	4770      	bx	lr

00025ac8 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   25ac8:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   25aca:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   25acc:	b909      	cbnz	r1, 25ad2 <sys_heap_alloc+0xa>
		return NULL;
   25ace:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   25ad0:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   25ad2:	68ab      	ldr	r3, [r5, #8]
   25ad4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   25ad8:	d9f9      	bls.n	25ace <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25ada:	310b      	adds	r1, #11
   25adc:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   25ade:	4621      	mov	r1, r4
   25ae0:	4628      	mov	r0, r5
   25ae2:	f7ff ff4a 	bl	2597a <alloc_chunk>
	if (c == 0U) {
   25ae6:	4606      	mov	r6, r0
   25ae8:	2800      	cmp	r0, #0
   25aea:	d0f0      	beq.n	25ace <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   25aec:	4601      	mov	r1, r0
   25aee:	4628      	mov	r0, r5
   25af0:	f7ff feed 	bl	258ce <chunk_size>
   25af4:	42a0      	cmp	r0, r4
   25af6:	d907      	bls.n	25b08 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   25af8:	4628      	mov	r0, r5
   25afa:	1932      	adds	r2, r6, r4
   25afc:	f7ff ff8a 	bl	25a14 <split_chunks>
		free_list_add(h, c + chunk_sz);
   25b00:	4611      	mov	r1, r2
   25b02:	4628      	mov	r0, r5
   25b04:	f7ff fee8 	bl	258d8 <free_list_add>
	void *cmem = &buf[c];
   25b08:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   25b0c:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25b0e:	8853      	ldrh	r3, [r2, #2]
   25b10:	3004      	adds	r0, #4
   25b12:	f043 0301 	orr.w	r3, r3, #1
   25b16:	8053      	strh	r3, [r2, #2]
	return mem;
   25b18:	e7da      	b.n	25ad0 <sys_heap_alloc+0x8>

00025b1a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   25b1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25b1e:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   25b22:	ea19 0901 	ands.w	r9, r9, r1
{
   25b26:	460f      	mov	r7, r1
   25b28:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   25b2a:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   25b2c:	d00c      	beq.n	25b48 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   25b2e:	424b      	negs	r3, r1
   25b30:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   25b32:	2b04      	cmp	r3, #4
   25b34:	461a      	mov	r2, r3
   25b36:	464f      	mov	r7, r9
   25b38:	bf28      	it	cs
   25b3a:	2204      	movcs	r2, #4
	rew = align & -align;
   25b3c:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   25b3e:	b964      	cbnz	r4, 25b5a <sys_heap_aligned_alloc+0x40>
		return NULL;
   25b40:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   25b42:	4628      	mov	r0, r5
   25b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   25b48:	2904      	cmp	r1, #4
   25b4a:	d804      	bhi.n	25b56 <sys_heap_aligned_alloc+0x3c>
}
   25b4c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   25b50:	4611      	mov	r1, r2
   25b52:	f7ff bfb9 	b.w	25ac8 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   25b56:	2204      	movs	r2, #4
   25b58:	e7f1      	b.n	25b3e <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   25b5a:	68b3      	ldr	r3, [r6, #8]
   25b5c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   25b60:	d9ee      	bls.n	25b40 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25b62:	f104 010b 	add.w	r1, r4, #11
   25b66:	4439      	add	r1, r7
   25b68:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   25b6a:	4630      	mov	r0, r6
   25b6c:	08c9      	lsrs	r1, r1, #3
   25b6e:	f7ff ff04 	bl	2597a <alloc_chunk>
	if (c0 == 0) {
   25b72:	4680      	mov	r8, r0
   25b74:	2800      	cmp	r0, #0
   25b76:	d0e3      	beq.n	25b40 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   25b78:	f109 0504 	add.w	r5, r9, #4
   25b7c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   25b80:	1e7b      	subs	r3, r7, #1
   25b82:	4435      	add	r5, r6
   25b84:	441d      	add	r5, r3
   25b86:	427f      	negs	r7, r7
   25b88:	403d      	ands	r5, r7
   25b8a:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25b8e:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25b90:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25b92:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25b94:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25b96:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   25b9a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   25b9c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25ba0:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   25ba4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   25ba8:	d208      	bcs.n	25bbc <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   25baa:	4601      	mov	r1, r0
   25bac:	463a      	mov	r2, r7
   25bae:	4630      	mov	r0, r6
   25bb0:	f7ff ff30 	bl	25a14 <split_chunks>
		free_list_add(h, c0);
   25bb4:	4641      	mov	r1, r8
   25bb6:	4630      	mov	r0, r6
   25bb8:	f7ff fe8e 	bl	258d8 <free_list_add>
	return c + chunk_size(h, c);
   25bbc:	4639      	mov	r1, r7
   25bbe:	4630      	mov	r0, r6
   25bc0:	f7ff fe85 	bl	258ce <chunk_size>
   25bc4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   25bc6:	4284      	cmp	r4, r0
   25bc8:	d207      	bcs.n	25bda <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   25bca:	4630      	mov	r0, r6
   25bcc:	4622      	mov	r2, r4
   25bce:	f7ff ff21 	bl	25a14 <split_chunks>
		free_list_add(h, c_end);
   25bd2:	4621      	mov	r1, r4
   25bd4:	4630      	mov	r0, r6
   25bd6:	f7ff fe7f 	bl	258d8 <free_list_add>
	void *cmem = &buf[c];
   25bda:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25bde:	8873      	ldrh	r3, [r6, #2]
   25be0:	f043 0301 	orr.w	r3, r3, #1
   25be4:	8073      	strh	r3, [r6, #2]
   25be6:	e7ac      	b.n	25b42 <sys_heap_aligned_alloc+0x28>

00025be8 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   25be8:	b4f0      	push	{r4, r5, r6, r7}
   25bea:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   25bec:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   25bee:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   25bf0:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   25bf2:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   25bf6:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   25bfa:	1a0e      	subs	r6, r1, r0
   25bfc:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   25bfe:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   25c02:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   25c04:	2700      	movs	r7, #0
   25c06:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   25c08:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   25c0c:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   25c0e:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25c10:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   25c12:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   25c16:	f1c2 0220 	rsb	r2, r2, #32
   25c1a:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   25c1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   25c20:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   25c24:	4294      	cmp	r4, r2
   25c26:	d1fb      	bne.n	25c20 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25c28:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25c2a:	f042 0201 	orr.w	r2, r2, #1
   25c2e:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   25c30:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25c32:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   25c34:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   25c38:	8007      	strh	r7, [r0, #0]
   25c3a:	8065      	strh	r5, [r4, #2]
   25c3c:	1984      	adds	r4, r0, r6
   25c3e:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   25c42:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   25c46:	8067      	strh	r7, [r4, #2]
   25c48:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25c4a:	885a      	ldrh	r2, [r3, #2]
   25c4c:	f042 0201 	orr.w	r2, r2, #1
   25c50:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   25c52:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   25c54:	f7ff be40 	b.w	258d8 <free_list_add>

00025c58 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25c58:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   25c5a:	f013 0307 	ands.w	r3, r3, #7
   25c5e:	d105      	bne.n	25c6c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   25c60:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   25c62:	2b00      	cmp	r3, #0
   25c64:	bf0c      	ite	eq
   25c66:	2000      	moveq	r0, #0
   25c68:	2003      	movne	r0, #3
   25c6a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   25c6c:	2b02      	cmp	r3, #2
   25c6e:	d105      	bne.n	25c7c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   25c70:	8b40      	ldrh	r0, [r0, #26]
   25c72:	fab0 f080 	clz	r0, r0
   25c76:	0940      	lsrs	r0, r0, #5
   25c78:	0080      	lsls	r0, r0, #2
   25c7a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   25c7c:	2b01      	cmp	r3, #1
   25c7e:	d105      	bne.n	25c8c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   25c80:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   25c82:	2b00      	cmp	r3, #0
   25c84:	bf0c      	ite	eq
   25c86:	2000      	moveq	r0, #0
   25c88:	2005      	movne	r0, #5
   25c8a:	4770      	bx	lr
	int evt = EVT_NOP;
   25c8c:	2000      	movs	r0, #0
}
   25c8e:	4770      	bx	lr

00025c90 <validate_args>:
{
   25c90:	b510      	push	{r4, lr}
   25c92:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   25c94:	b100      	cbz	r0, 25c98 <validate_args+0x8>
   25c96:	b911      	cbnz	r1, 25c9e <validate_args+0xe>
		return -EINVAL;
   25c98:	f06f 0015 	mvn.w	r0, #21
}
   25c9c:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   25c9e:	1d08      	adds	r0, r1, #4
   25ca0:	f000 f895 	bl	25dce <sys_notify_validate>
	if ((rv == 0)
   25ca4:	2800      	cmp	r0, #0
   25ca6:	d1f9      	bne.n	25c9c <validate_args+0xc>
	    && ((cli->notify.flags
   25ca8:	68a3      	ldr	r3, [r4, #8]
   25caa:	2b03      	cmp	r3, #3
   25cac:	d9f6      	bls.n	25c9c <validate_args+0xc>
   25cae:	e7f3      	b.n	25c98 <validate_args+0x8>

00025cb0 <notify_one>:
{
   25cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25cb4:	460d      	mov	r5, r1
   25cb6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25cb8:	4619      	mov	r1, r3
   25cba:	1d28      	adds	r0, r5, #4
{
   25cbc:	4690      	mov	r8, r2
   25cbe:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25cc0:	f000 f899 	bl	25df6 <sys_notify_finalize>
	if (cb) {
   25cc4:	4604      	mov	r4, r0
   25cc6:	b138      	cbz	r0, 25cd8 <notify_one+0x28>
		cb(mgr, cli, state, res);
   25cc8:	4633      	mov	r3, r6
   25cca:	4642      	mov	r2, r8
   25ccc:	4629      	mov	r1, r5
   25cce:	4638      	mov	r0, r7
   25cd0:	46a4      	mov	ip, r4
}
   25cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   25cd6:	4760      	bx	ip
}
   25cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025cdc <transition_complete>:
{
   25cdc:	b410      	push	{r4}
	__asm__ volatile(
   25cde:	f04f 0420 	mov.w	r4, #32
   25ce2:	f3ef 8211 	mrs	r2, BASEPRI
   25ce6:	f384 8812 	msr	BASEPRI_MAX, r4
   25cea:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   25cee:	6141      	str	r1, [r0, #20]
}
   25cf0:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   25cf2:	2101      	movs	r1, #1
   25cf4:	f7f4 b838 	b.w	19d68 <process_event>

00025cf8 <onoff_manager_init>:
{
   25cf8:	b538      	push	{r3, r4, r5, lr}
   25cfa:	460c      	mov	r4, r1
	if ((mgr == NULL)
   25cfc:	4605      	mov	r5, r0
   25cfe:	b158      	cbz	r0, 25d18 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   25d00:	b151      	cbz	r1, 25d18 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   25d02:	680b      	ldr	r3, [r1, #0]
   25d04:	b143      	cbz	r3, 25d18 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   25d06:	684b      	ldr	r3, [r1, #4]
   25d08:	b133      	cbz	r3, 25d18 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   25d0a:	221c      	movs	r2, #28
   25d0c:	2100      	movs	r1, #0
   25d0e:	f002 fd51 	bl	287b4 <memset>
	return 0;
   25d12:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   25d14:	612c      	str	r4, [r5, #16]
}
   25d16:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25d18:	f06f 0015 	mvn.w	r0, #21
   25d1c:	e7fb      	b.n	25d16 <onoff_manager_init+0x1e>

00025d1e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   25d1e:	b570      	push	{r4, r5, r6, lr}
   25d20:	4605      	mov	r5, r0
   25d22:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   25d24:	f7ff ffb4 	bl	25c90 <validate_args>

	if (rv < 0) {
   25d28:	1e04      	subs	r4, r0, #0
   25d2a:	db15      	blt.n	25d58 <onoff_request+0x3a>
   25d2c:	f04f 0320 	mov.w	r3, #32
   25d30:	f3ef 8211 	mrs	r2, BASEPRI
   25d34:	f383 8812 	msr	BASEPRI_MAX, r3
   25d38:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   25d3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   25d40:	8b6b      	ldrh	r3, [r5, #26]
   25d42:	8b2c      	ldrh	r4, [r5, #24]
   25d44:	428b      	cmp	r3, r1
   25d46:	f004 0407 	and.w	r4, r4, #7
   25d4a:	d107      	bne.n	25d5c <onoff_request+0x3e>
	__asm__ volatile(
   25d4c:	f382 8811 	msr	BASEPRI, r2
   25d50:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   25d54:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   25d58:	4620      	mov	r0, r4
   25d5a:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   25d5c:	2c02      	cmp	r4, #2
   25d5e:	d10c      	bne.n	25d7a <onoff_request+0x5c>
		mgr->refs += 1U;
   25d60:	3301      	adds	r3, #1
   25d62:	836b      	strh	r3, [r5, #26]
   25d64:	f382 8811 	msr	BASEPRI, r2
   25d68:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   25d6c:	2300      	movs	r3, #0
   25d6e:	4622      	mov	r2, r4
   25d70:	4631      	mov	r1, r6
   25d72:	4628      	mov	r0, r5
   25d74:	f7ff ff9c 	bl	25cb0 <notify_one>
   25d78:	e7ee      	b.n	25d58 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   25d7a:	2c06      	cmp	r4, #6
   25d7c:	d814      	bhi.n	25da8 <onoff_request+0x8a>
   25d7e:	e8df f004 	tbb	[pc, r4]
   25d82:	1304      	.short	0x1304
   25d84:	1a041313 	.word	0x1a041313
   25d88:	04          	.byte	0x04
   25d89:	00          	.byte	0x00
	parent->next = child;
   25d8a:	2300      	movs	r3, #0
   25d8c:	6033      	str	r3, [r6, #0]
	return list->tail;
   25d8e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   25d90:	b93b      	cbnz	r3, 25da2 <onoff_request+0x84>
	list->head = node;
   25d92:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   25d96:	b9ac      	cbnz	r4, 25dc4 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   25d98:	2102      	movs	r1, #2
   25d9a:	4628      	mov	r0, r5
   25d9c:	f7f3 ffe4 	bl	19d68 <process_event>
   25da0:	e7da      	b.n	25d58 <onoff_request+0x3a>
	parent->next = child;
   25da2:	601e      	str	r6, [r3, #0]
	list->tail = node;
   25da4:	606e      	str	r6, [r5, #4]
}
   25da6:	e7f6      	b.n	25d96 <onoff_request+0x78>
   25da8:	f382 8811 	msr	BASEPRI, r2
   25dac:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   25db0:	f06f 0404 	mvn.w	r4, #4
   25db4:	e7d0      	b.n	25d58 <onoff_request+0x3a>
   25db6:	f382 8811 	msr	BASEPRI, r2
   25dba:	f3bf 8f6f 	isb	sy
   25dbe:	f06f 0485 	mvn.w	r4, #133	; 0x85
   25dc2:	e7c9      	b.n	25d58 <onoff_request+0x3a>
   25dc4:	f382 8811 	msr	BASEPRI, r2
   25dc8:	f3bf 8f6f 	isb	sy
		if (notify) {
   25dcc:	e7c4      	b.n	25d58 <onoff_request+0x3a>

00025dce <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   25dce:	4603      	mov	r3, r0
   25dd0:	b140      	cbz	r0, 25de4 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25dd2:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   25dd4:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   25dd8:	2a02      	cmp	r2, #2
   25dda:	d006      	beq.n	25dea <sys_notify_validate+0x1c>
   25ddc:	2a03      	cmp	r2, #3
   25dde:	d004      	beq.n	25dea <sys_notify_validate+0x1c>
   25de0:	2a01      	cmp	r2, #1
   25de2:	d005      	beq.n	25df0 <sys_notify_validate+0x22>
   25de4:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   25de8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   25dea:	681a      	ldr	r2, [r3, #0]
   25dec:	2a00      	cmp	r2, #0
   25dee:	d0f9      	beq.n	25de4 <sys_notify_validate+0x16>
		notify->result = 0;
   25df0:	2000      	movs	r0, #0
   25df2:	6098      	str	r0, [r3, #8]
   25df4:	4770      	bx	lr

00025df6 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   25df6:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25df8:	6842      	ldr	r2, [r0, #4]
   25dfa:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   25dfc:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   25e00:	2a02      	cmp	r2, #2
   25e02:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   25e06:	6081      	str	r1, [r0, #8]
	switch (method) {
   25e08:	d007      	beq.n	25e1a <sys_notify_finalize+0x24>
   25e0a:	2a03      	cmp	r2, #3
   25e0c:	d002      	beq.n	25e14 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   25e0e:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   25e10:	2000      	movs	r0, #0
   25e12:	e001      	b.n	25e18 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   25e14:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   25e16:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   25e18:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   25e1a:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   25e1c:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   25e1e:	2800      	cmp	r0, #0
   25e20:	d0f6      	beq.n	25e10 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   25e22:	f7fe ff8b 	bl	24d3c <z_impl_k_poll_signal_raise>
   25e26:	e7f3      	b.n	25e10 <sys_notify_finalize+0x1a>

00025e28 <outs>:
{
   25e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25e2c:	4607      	mov	r7, r0
   25e2e:	4688      	mov	r8, r1
   25e30:	4615      	mov	r5, r2
   25e32:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   25e34:	4614      	mov	r4, r2
   25e36:	42b4      	cmp	r4, r6
   25e38:	d305      	bcc.n	25e46 <outs+0x1e>
   25e3a:	b10e      	cbz	r6, 25e40 <outs+0x18>
	return (int)count;
   25e3c:	1b60      	subs	r0, r4, r5
   25e3e:	e008      	b.n	25e52 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   25e40:	7823      	ldrb	r3, [r4, #0]
   25e42:	2b00      	cmp	r3, #0
   25e44:	d0fa      	beq.n	25e3c <outs+0x14>
		int rc = out((int)*sp++, ctx);
   25e46:	4641      	mov	r1, r8
   25e48:	f814 0b01 	ldrb.w	r0, [r4], #1
   25e4c:	47b8      	blx	r7
		if (rc < 0) {
   25e4e:	2800      	cmp	r0, #0
   25e50:	daf1      	bge.n	25e36 <outs+0xe>
}
   25e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025e56 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   25e56:	68c3      	ldr	r3, [r0, #12]
   25e58:	6802      	ldr	r2, [r0, #0]
   25e5a:	4293      	cmp	r3, r2
   25e5c:	d904      	bls.n	25e68 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   25e5e:	3b01      	subs	r3, #1
   25e60:	1a9a      	subs	r2, r3, r2

		return false;
   25e62:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   25e64:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   25e66:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   25e68:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
   25e6a:	b913      	cbnz	r3, 25e72 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   25e6c:	3801      	subs	r0, #1
   25e6e:	1a82      	subs	r2, r0, r2
		return false;
   25e70:	e7f7      	b.n	25e62 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   25e72:	1a82      	subs	r2, r0, r2
	return true;
   25e74:	2001      	movs	r0, #1
   25e76:	e7f5      	b.n	25e64 <free_space+0xe>

00025e78 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   25e78:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   25e7a:	a901      	add	r1, sp, #4
{
   25e7c:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   25e7e:	f7ff ffea 	bl	25e56 <free_space>
   25e82:	b120      	cbz	r0, 25e8e <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   25e84:	9b01      	ldr	r3, [sp, #4]
   25e86:	68e2      	ldr	r2, [r4, #12]
   25e88:	3b01      	subs	r3, #1
   25e8a:	4413      	add	r3, r2
   25e8c:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   25e8e:	6a20      	ldr	r0, [r4, #32]
   25e90:	9b01      	ldr	r3, [sp, #4]
   25e92:	1ac0      	subs	r0, r0, r3
}
   25e94:	3801      	subs	r0, #1
   25e96:	b002      	add	sp, #8
   25e98:	bd10      	pop	{r4, pc}

00025e9a <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   25e9a:	b510      	push	{r4, lr}
   25e9c:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   25e9e:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   25ea0:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   25ea2:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   25ea4:	07d2      	lsls	r2, r2, #31
   25ea6:	d502      	bpl.n	25eae <idx_inc+0x14>
		return i & (buffer->size - 1);
   25ea8:	3b01      	subs	r3, #1
   25eaa:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   25eac:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   25eae:	4298      	cmp	r0, r3
   25eb0:	bf28      	it	cs
   25eb2:	1ac0      	subcs	r0, r0, r3
   25eb4:	e7fa      	b.n	25eac <idx_inc+0x12>

00025eb6 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   25eb6:	b538      	push	{r3, r4, r5, lr}
   25eb8:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   25eba:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   25ebc:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   25ebe:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   25ec0:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   25ec4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25ec8:	6801      	ldr	r1, [r0, #0]
   25eca:	462a      	mov	r2, r5
{
   25ecc:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25ece:	f7ff ffe4 	bl	25e9a <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25ed2:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25ed4:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25ed6:	462a      	mov	r2, r5
   25ed8:	4620      	mov	r0, r4
   25eda:	f7ff ffde 	bl	25e9a <idx_inc>
   25ede:	6060      	str	r0, [r4, #4]
}
   25ee0:	bd38      	pop	{r3, r4, r5, pc}

00025ee2 <max_utilization_update>:
{
   25ee2:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   25ee4:	6903      	ldr	r3, [r0, #16]
{
   25ee6:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   25ee8:	075b      	lsls	r3, r3, #29
   25eea:	d506      	bpl.n	25efa <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   25eec:	6a45      	ldr	r5, [r0, #36]	; 0x24
   25eee:	f7ff ffc3 	bl	25e78 <get_usage>
   25ef2:	4285      	cmp	r5, r0
   25ef4:	bf2c      	ite	cs
   25ef6:	6265      	strcs	r5, [r4, #36]	; 0x24
   25ef8:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   25efa:	bd38      	pop	{r3, r4, r5, pc}

00025efc <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   25efc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f00:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   25f02:	2300      	movs	r3, #0
   25f04:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   25f06:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   25f0a:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   25f0e:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   25f10:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   25f14:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   25f16:	f003 0303 	and.w	r3, r3, #3
   25f1a:	2b02      	cmp	r3, #2
{
   25f1c:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   25f1e:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   25f22:	d103      	bne.n	25f2c <drop_item_locked+0x30>
		return item->skip.len;
   25f24:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   25f28:	08ad      	lsrs	r5, r5, #2
   25f2a:	d12e      	bne.n	25f8a <drop_item_locked+0x8e>
   25f2c:	4630      	mov	r0, r6
   25f2e:	69a3      	ldr	r3, [r4, #24]
   25f30:	4798      	blx	r3
   25f32:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   25f34:	f1b8 0f00 	cmp.w	r8, #0
   25f38:	d038      	beq.n	25fac <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   25f3a:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   25f3e:	079b      	lsls	r3, r3, #30
   25f40:	d531      	bpl.n	25fa6 <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   25f42:	4620      	mov	r0, r4
   25f44:	f10b 0101 	add.w	r1, fp, #1
   25f48:	f7ff ffb5 	bl	25eb6 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   25f4c:	6861      	ldr	r1, [r4, #4]
   25f4e:	462a      	mov	r2, r5
   25f50:	4620      	mov	r0, r4
   25f52:	f7ff ffa2 	bl	25e9a <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   25f56:	6821      	ldr	r1, [r4, #0]
   25f58:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   25f5a:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   25f5c:	4620      	mov	r0, r4
   25f5e:	f7ff ff9c 	bl	25e9a <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   25f62:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   25f64:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   25f66:	68e1      	ldr	r1, [r4, #12]
   25f68:	4620      	mov	r0, r4
   25f6a:	f7ff ff96 	bl	25e9a <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   25f6e:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   25f70:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   25f74:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   25f78:	f002 0203 	and.w	r2, r2, #3
   25f7c:	2a02      	cmp	r2, #2
   25f7e:	d10e      	bne.n	25f9e <drop_item_locked+0xa2>
		return item->skip.len;
   25f80:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   25f84:	089b      	lsrs	r3, r3, #2
   25f86:	d00a      	beq.n	25f9e <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   25f88:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   25f8a:	68e1      	ldr	r1, [r4, #12]
   25f8c:	462a      	mov	r2, r5
   25f8e:	4620      	mov	r0, r4
   25f90:	f7ff ff83 	bl	25e9a <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   25f94:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
   25f98:	4630      	mov	r0, r6
   25f9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   25f9e:	4630      	mov	r0, r6
   25fa0:	69a3      	ldr	r3, [r4, #24]
   25fa2:	4798      	blx	r3
   25fa4:	4405      	add	r5, r0
			*user_packet = true;
   25fa6:	2301      	movs	r3, #1
   25fa8:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   25faa:	e7ee      	b.n	25f8a <drop_item_locked+0x8e>
		item = NULL;
   25fac:	4646      	mov	r6, r8
	return item;
   25fae:	e7f3      	b.n	25f98 <drop_item_locked+0x9c>

00025fb0 <mpsc_pbuf_init>:
{
   25fb0:	b538      	push	{r3, r4, r5, lr}
   25fb2:	460d      	mov	r5, r1
   25fb4:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   25fb6:	221c      	movs	r2, #28
   25fb8:	2100      	movs	r1, #0
   25fba:	f002 fbfb 	bl	287b4 <memset>
	buffer->max_usage = 0;
   25fbe:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
   25fc0:	68eb      	ldr	r3, [r5, #12]
   25fc2:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   25fc4:	68ab      	ldr	r3, [r5, #8]
   25fc6:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   25fc8:	682b      	ldr	r3, [r5, #0]
   25fca:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   25fcc:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
   25fce:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   25fd0:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
   25fd2:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   25fd4:	b123      	cbz	r3, 25fe0 <mpsc_pbuf_init+0x30>
   25fd6:	1e59      	subs	r1, r3, #1
   25fd8:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   25fda:	bf08      	it	eq
   25fdc:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   25fe0:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   25fe2:	2201      	movs	r2, #1
   25fe4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   25fe8:	2100      	movs	r1, #0
}
   25fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25fee:	f002 b917 	b.w	28220 <z_impl_k_sem_init>

00025ff2 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   25ff2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   25ff6:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   25ff8:	6a03      	ldr	r3, [r0, #32]
{
   25ffa:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
   25ffc:	3b01      	subs	r3, #1
   25ffe:	428b      	cmp	r3, r1
{
   26000:	460e      	mov	r6, r1
   26002:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
   26004:	d351      	bcc.n	260aa <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
   26006:	2500      	movs	r5, #0
	__asm__ volatile(
   26008:	f04f 0320 	mov.w	r3, #32
   2600c:	f3ef 8911 	mrs	r9, BASEPRI
   26010:	f383 8812 	msr	BASEPRI_MAX, r3
   26014:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
   26018:	4620      	mov	r0, r4
   2601a:	a901      	add	r1, sp, #4
   2601c:	f7ff ff1b 	bl	25e56 <free_space>

		if (free_wlen >= wlen) {
   26020:	f8dd a004 	ldr.w	sl, [sp, #4]
   26024:	45b2      	cmp	sl, r6
   26026:	d317      	bcc.n	26058 <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   26028:	6822      	ldr	r2, [r4, #0]
			item =
   2602a:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   2602c:	4620      	mov	r0, r4
			item->hdr.valid = 0;
   2602e:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
   26032:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.valid = 0;
   26036:	f021 0103 	bic.w	r1, r1, #3
   2603a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   2603e:	6821      	ldr	r1, [r4, #0]
   26040:	4632      	mov	r2, r6
   26042:	f7ff ff2a 	bl	25e9a <idx_inc>
   26046:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   26048:	f389 8811 	msr	BASEPRI, r9
   2604c:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   26050:	4628      	mov	r0, r5
   26052:	b002      	add	sp, #8
   26054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
   26058:	b150      	cbz	r0, 26070 <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
   2605a:	4651      	mov	r1, sl
   2605c:	4620      	mov	r0, r4
   2605e:	f7ff ff2a 	bl	25eb6 <add_skip_item>
   26062:	f389 8811 	msr	BASEPRI, r9
   26066:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   2606a:	2d00      	cmp	r5, #0
   2606c:	d0cb      	beq.n	26006 <mpsc_pbuf_alloc+0x14>
   2606e:	e033      	b.n	260d8 <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   26070:	ea57 0308 	orrs.w	r3, r7, r8
   26074:	d020      	beq.n	260b8 <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
   26076:	f002 f833 	bl	280e0 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2607a:	b9e8      	cbnz	r0, 260b8 <mpsc_pbuf_alloc+0xc6>
   2607c:	f389 8811 	msr	BASEPRI, r9
   26080:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   26084:	463a      	mov	r2, r7
   26086:	4643      	mov	r3, r8
   26088:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2608c:	f7fd ff8e 	bl	23fac <z_impl_k_sem_take>
	__asm__ volatile(
   26090:	f04f 0220 	mov.w	r2, #32
   26094:	f3ef 8311 	mrs	r3, BASEPRI
   26098:	f382 8812 	msr	BASEPRI_MAX, r2
   2609c:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   260a0:	b128      	cbz	r0, 260ae <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
   260a2:	f383 8811 	msr	BASEPRI, r3
   260a6:	f3bf 8f6f 	isb	sy
		return NULL;
   260aa:	2500      	movs	r5, #0
   260ac:	e7d0      	b.n	26050 <mpsc_pbuf_alloc+0x5e>
   260ae:	f383 8811 	msr	BASEPRI, r3
   260b2:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   260b6:	e7d8      	b.n	2606a <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   260b8:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   260ba:	4651      	mov	r1, sl
   260bc:	4620      	mov	r0, r4
   260be:	f10d 0303 	add.w	r3, sp, #3
   260c2:	f3c2 0240 	ubfx	r2, r2, #1, #1
   260c6:	f7ff ff19 	bl	25efc <drop_item_locked>
   260ca:	4605      	mov	r5, r0
   260cc:	f389 8811 	msr	BASEPRI, r9
   260d0:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   260d4:	2800      	cmp	r0, #0
   260d6:	d0e8      	beq.n	260aa <mpsc_pbuf_alloc+0xb8>
   260d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   260dc:	2b00      	cmp	r3, #0
   260de:	d093      	beq.n	26008 <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
   260e0:	6963      	ldr	r3, [r4, #20]
   260e2:	2b00      	cmp	r3, #0
   260e4:	d08f      	beq.n	26006 <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
   260e6:	4629      	mov	r1, r5
   260e8:	4620      	mov	r0, r4
   260ea:	4798      	blx	r3
   260ec:	e78b      	b.n	26006 <mpsc_pbuf_alloc+0x14>

000260ee <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   260ee:	b570      	push	{r4, r5, r6, lr}
   260f0:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   260f2:	6983      	ldr	r3, [r0, #24]
   260f4:	4608      	mov	r0, r1
{
   260f6:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   260f8:	4798      	blx	r3
   260fa:	4602      	mov	r2, r0
	__asm__ volatile(
   260fc:	f04f 0320 	mov.w	r3, #32
   26100:	f3ef 8611 	mrs	r6, BASEPRI
   26104:	f383 8812 	msr	BASEPRI_MAX, r3
   26108:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   2610c:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2610e:	4620      	mov	r0, r4
	item->hdr.valid = 1;
   26110:	f043 0301 	orr.w	r3, r3, #1
   26114:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   26116:	6861      	ldr	r1, [r4, #4]
   26118:	f7ff febf 	bl	25e9a <idx_inc>
   2611c:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   2611e:	4620      	mov	r0, r4
   26120:	f7ff fedf 	bl	25ee2 <max_utilization_update>
	__asm__ volatile(
   26124:	f386 8811 	msr	BASEPRI, r6
   26128:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   2612c:	bd70      	pop	{r4, r5, r6, pc}

0002612e <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   2612e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26130:	4604      	mov	r4, r0
	__asm__ volatile(
   26132:	f04f 0320 	mov.w	r3, #32
   26136:	f3ef 8611 	mrs	r6, BASEPRI
   2613a:	f383 8812 	msr	BASEPRI_MAX, r3
   2613e:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   26142:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   26146:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   26148:	bf88      	it	hi
   2614a:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   2614c:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
   2614e:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   26150:	b132      	cbz	r2, 26160 <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
   26152:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
   26156:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   2615a:	f012 0003 	ands.w	r0, r2, #3
   2615e:	d105      	bne.n	2616c <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
   26160:	f386 8811 	msr	BASEPRI, r6
   26164:	f3bf 8f6f 	isb	sy
			item = NULL;
   26168:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   2616a:	e02e      	b.n	261ca <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
   2616c:	2802      	cmp	r0, #2
   2616e:	d103      	bne.n	26178 <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
   26170:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   26174:	08ad      	lsrs	r5, r5, #2
   26176:	d105      	bne.n	26184 <mpsc_pbuf_claim+0x56>
   26178:	07d0      	lsls	r0, r2, #31
   2617a:	d414      	bmi.n	261a6 <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
   2617c:	4638      	mov	r0, r7
   2617e:	69a3      	ldr	r3, [r4, #24]
   26180:	4798      	blx	r3
   26182:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   26184:	68a1      	ldr	r1, [r4, #8]
   26186:	462a      	mov	r2, r5
   26188:	4620      	mov	r0, r4
   2618a:	f7ff fe86 	bl	25e9a <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   2618e:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   26190:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   26192:	462a      	mov	r2, r5
   26194:	4620      	mov	r0, r4
   26196:	f7ff fe80 	bl	25e9a <idx_inc>
				buffer->rd_idx =
   2619a:	60e0      	str	r0, [r4, #12]
   2619c:	f386 8811 	msr	BASEPRI, r6
   261a0:	f3bf 8f6f 	isb	sy
	} while (cont);
   261a4:	e7c5      	b.n	26132 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   261a6:	f042 0202 	orr.w	r2, r2, #2
   261aa:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   261ae:	69a3      	ldr	r3, [r4, #24]
   261b0:	4638      	mov	r0, r7
   261b2:	68a5      	ldr	r5, [r4, #8]
   261b4:	4798      	blx	r3
   261b6:	4629      	mov	r1, r5
   261b8:	4602      	mov	r2, r0
   261ba:	4620      	mov	r0, r4
   261bc:	f7ff fe6d 	bl	25e9a <idx_inc>
				buffer->tmp_rd_idx =
   261c0:	60a0      	str	r0, [r4, #8]
   261c2:	f386 8811 	msr	BASEPRI, r6
   261c6:	f3bf 8f6f 	isb	sy
}
   261ca:	4638      	mov	r0, r7
   261cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000261ce <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   261ce:	b570      	push	{r4, r5, r6, lr}
   261d0:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   261d2:	6983      	ldr	r3, [r0, #24]
   261d4:	4608      	mov	r0, r1
{
   261d6:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   261d8:	4798      	blx	r3
   261da:	4602      	mov	r2, r0
	__asm__ volatile(
   261dc:	f04f 0320 	mov.w	r3, #32
   261e0:	f3ef 8611 	mrs	r6, BASEPRI
   261e4:	f383 8812 	msr	BASEPRI_MAX, r3
   261e8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   261ec:	782b      	ldrb	r3, [r5, #0]
   261ee:	f36f 0300 	bfc	r3, #0, #1
   261f2:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   261f4:	6923      	ldr	r3, [r4, #16]
   261f6:	079b      	lsls	r3, r3, #30
   261f8:	d505      	bpl.n	26206 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   261fa:	68e1      	ldr	r1, [r4, #12]
   261fc:	69e3      	ldr	r3, [r4, #28]
   261fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   26202:	429d      	cmp	r5, r3
   26204:	d112      	bne.n	2622c <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   26206:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   26208:	4620      	mov	r0, r4
		witem->hdr.busy = 0;
   2620a:	f36f 0341 	bfc	r3, #1, #1
   2620e:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   26210:	68e1      	ldr	r1, [r4, #12]
   26212:	f7ff fe42 	bl	25e9a <idx_inc>
   26216:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   26218:	f386 8811 	msr	BASEPRI, r6
   2621c:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   26220:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   26224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26228:	f7fd be9a 	b.w	23f60 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   2622c:	682b      	ldr	r3, [r5, #0]
   2622e:	f360 039f 	bfi	r3, r0, #2, #30
   26232:	602b      	str	r3, [r5, #0]
   26234:	e7f0      	b.n	26218 <mpsc_pbuf_free+0x4a>

00026236 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   26236:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2623a:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   2623c:	bf88      	it	hi
   2623e:	6a02      	ldrhi	r2, [r0, #32]
   26240:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   26242:	1e18      	subs	r0, r3, #0
   26244:	bf18      	it	ne
   26246:	2001      	movne	r0, #1
   26248:	4770      	bx	lr

0002624a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2624a:	4770      	bx	lr

0002624c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2624c:	2806      	cmp	r0, #6
   2624e:	d108      	bne.n	26262 <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   26250:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   26254:	2201      	movs	r2, #1
   26256:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2625a:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   2625e:	bf20      	wfe
    while (true)
   26260:	e7fd      	b.n	2625e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   26262:	4770      	bx	lr

00026264 <pm_state_exit_post_ops>:
   26264:	2300      	movs	r3, #0
   26266:	f383 8811 	msr	BASEPRI, r3
   2626a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2626e:	4770      	bx	lr

00026270 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   26270:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   26272:	075b      	lsls	r3, r3, #29
   26274:	d40b      	bmi.n	2628e <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   26276:	6803      	ldr	r3, [r0, #0]
   26278:	8842      	ldrh	r2, [r0, #2]
   2627a:	f3c3 2349 	ubfx	r3, r3, #9, #10
   2627e:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   26282:	1898      	adds	r0, r3, r2
   26284:	3017      	adds	r0, #23
   26286:	f020 0007 	bic.w	r0, r0, #7
   2628a:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   2628c:	4770      	bx	lr
	return 0;
   2628e:	2000      	movs	r0, #0
}
   26290:	4770      	bx	lr

00026292 <dummy_timestamp>:
}
   26292:	2000      	movs	r0, #0
   26294:	4770      	bx	lr

00026296 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   26296:	f000 bbca 	b.w	26a2e <sys_clock_cycle_get_32>

0002629a <atomic_inc>:
{
   2629a:	4603      	mov	r3, r0
}
   2629c:	e8d3 0fef 	ldaex	r0, [r3]
   262a0:	1c42      	adds	r2, r0, #1
   262a2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   262a6:	2900      	cmp	r1, #0
   262a8:	d1f8      	bne.n	2629c <atomic_inc+0x2>
   262aa:	4770      	bx	lr

000262ac <z_log_vprintk>:
{
   262ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   262ae:	2300      	movs	r3, #0
   262b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   262b4:	461a      	mov	r2, r3
   262b6:	4619      	mov	r1, r3
   262b8:	4618      	mov	r0, r3
   262ba:	e9cd 3300 	strd	r3, r3, [sp]
   262be:	f7f4 fd61 	bl	1ad84 <z_impl_z_log_msg_runtime_vcreate>
}
   262c2:	b005      	add	sp, #20
   262c4:	f85d fb04 	ldr.w	pc, [sp], #4

000262c8 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   262c8:	2001      	movs	r0, #1
   262ca:	f7f4 bb53 	b.w	1a974 <z_log_dropped>

000262ce <z_log_get_tag>:
}
   262ce:	2000      	movs	r0, #0
   262d0:	4770      	bx	lr

000262d2 <z_cbprintf_cpy>:
{
   262d2:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   262d4:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   262d8:	1b9b      	subs	r3, r3, r6
   262da:	428b      	cmp	r3, r1
{
   262dc:	460c      	mov	r4, r1
   262de:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   262e0:	d30a      	bcc.n	262f8 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   262e2:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   262e4:	460a      	mov	r2, r1
   262e6:	4601      	mov	r1, r0
   262e8:	1998      	adds	r0, r3, r6
   262ea:	f002 fa56 	bl	2879a <memcpy>
	return len;
   262ee:	4620      	mov	r0, r4
	desc->off += len;
   262f0:	68ab      	ldr	r3, [r5, #8]
   262f2:	4423      	add	r3, r4
   262f4:	60ab      	str	r3, [r5, #8]
}
   262f6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   262f8:	f06f 001b 	mvn.w	r0, #27
   262fc:	e7fb      	b.n	262f6 <z_cbprintf_cpy+0x24>

000262fe <z_log_msg_finalize>:
{
   262fe:	b570      	push	{r4, r5, r6, lr}
   26300:	460e      	mov	r6, r1
   26302:	4615      	mov	r5, r2
   26304:	4619      	mov	r1, r3
	if (!msg) {
   26306:	4604      	mov	r4, r0
   26308:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   2630c:	b918      	cbnz	r0, 26316 <z_log_msg_finalize+0x18>
}
   2630e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   26312:	f7f4 bb2f 	b.w	1a974 <z_log_dropped>
	if (data) {
   26316:	b12b      	cbz	r3, 26324 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   26318:	3010      	adds	r0, #16
   2631a:	f3c5 2349 	ubfx	r3, r5, #9, #10
   2631e:	4418      	add	r0, r3
   26320:	f002 fa3b 	bl	2879a <memcpy>
	msg->hdr.source = source;
   26324:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   26328:	4620      	mov	r0, r4
}
   2632a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2632e:	f7f4 bca1 	b.w	1ac74 <z_log_msg_commit>

00026332 <buffer_write>:
{
   26332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26334:	4606      	mov	r6, r0
   26336:	460d      	mov	r5, r1
   26338:	4614      	mov	r4, r2
   2633a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2633c:	4621      	mov	r1, r4
   2633e:	4628      	mov	r0, r5
   26340:	463a      	mov	r2, r7
   26342:	47b0      	blx	r6
	} while (len != 0);
   26344:	1a24      	subs	r4, r4, r0
		buf += processed;
   26346:	4405      	add	r5, r0
	} while (len != 0);
   26348:	d1f8      	bne.n	2633c <buffer_write+0xa>
}
   2634a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002634c <cbvprintf>:
{
   2634c:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2634e:	2400      	movs	r4, #0
   26350:	9400      	str	r4, [sp, #0]
   26352:	f7f3 fe79 	bl	1a048 <z_cbvprintf_impl>
}
   26356:	b002      	add	sp, #8
   26358:	bd10      	pop	{r4, pc}

0002635a <log_output_flush>:
{
   2635a:	b510      	push	{r4, lr}
		     output->control_block->offset,
   2635c:	6842      	ldr	r2, [r0, #4]
{
   2635e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   26360:	e9d2 2300 	ldrd	r2, r3, [r2]
   26364:	6881      	ldr	r1, [r0, #8]
   26366:	6800      	ldr	r0, [r0, #0]
   26368:	f7ff ffe3 	bl	26332 <buffer_write>
	output->control_block->offset = 0;
   2636c:	2200      	movs	r2, #0
   2636e:	6863      	ldr	r3, [r4, #4]
   26370:	601a      	str	r2, [r3, #0]
}
   26372:	bd10      	pop	{r4, pc}

00026374 <out_func>:
{
   26374:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   26376:	684b      	ldr	r3, [r1, #4]
{
   26378:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   2637a:	681a      	ldr	r2, [r3, #0]
   2637c:	68cb      	ldr	r3, [r1, #12]
{
   2637e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   26380:	429a      	cmp	r2, r3
   26382:	d102      	bne.n	2638a <out_func+0x16>
		log_output_flush(out_ctx);
   26384:	4608      	mov	r0, r1
   26386:	f7ff ffe8 	bl	2635a <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2638a:	6863      	ldr	r3, [r4, #4]
   2638c:	e8d3 2fef 	ldaex	r2, [r3]
   26390:	1c51      	adds	r1, r2, #1
   26392:	e8c3 1fe0 	stlex	r0, r1, [r3]
   26396:	2800      	cmp	r0, #0
   26398:	d1f8      	bne.n	2638c <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   2639a:	68a3      	ldr	r3, [r4, #8]
}
   2639c:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   2639e:	549d      	strb	r5, [r3, r2]
}
   263a0:	bd38      	pop	{r3, r4, r5, pc}

000263a2 <cr_out_func>:
	if (c == '\n') {
   263a2:	280a      	cmp	r0, #10
{
   263a4:	b538      	push	{r3, r4, r5, lr}
   263a6:	4604      	mov	r4, r0
   263a8:	460d      	mov	r5, r1
	if (c == '\n') {
   263aa:	d102      	bne.n	263b2 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   263ac:	200d      	movs	r0, #13
   263ae:	f7ff ffe1 	bl	26374 <out_func>
	out_func(c, ctx);
   263b2:	4629      	mov	r1, r5
   263b4:	4620      	mov	r0, r4
   263b6:	f7ff ffdd 	bl	26374 <out_func>
}
   263ba:	2000      	movs	r0, #0
   263bc:	bd38      	pop	{r3, r4, r5, pc}

000263be <log_backend_uart_init>:
}
   263be:	4770      	bx	lr

000263c0 <adp536x_charger_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_CURRENT_SET,
   263c0:	f000 021f 	and.w	r2, r0, #31
   263c4:	211f      	movs	r1, #31
   263c6:	2004      	movs	r0, #4
   263c8:	f7f5 b8c8 	b.w	1b55c <adp536x_reg_write_mask>

000263cc <adp536x_vbus_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_VBUS_ILIM,
   263cc:	f000 0207 	and.w	r2, r0, #7
   263d0:	2107      	movs	r1, #7
   263d2:	2002      	movs	r0, #2
   263d4:	f7f5 b8c2 	b.w	1b55c <adp536x_reg_write_mask>

000263d8 <adp536x_charging_enable>:
{
   263d8:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_CHG_FUNC,
   263da:	2101      	movs	r1, #1
   263dc:	2007      	movs	r0, #7
   263de:	f7f5 b8bd 	b.w	1b55c <adp536x_reg_write_mask>

000263e2 <adp536x_oc_chg_current_set>:
					ADP536X_BAT_OC_CHG_OC_CHG(value));
   263e2:	0142      	lsls	r2, r0, #5
	return adp536x_reg_write_mask(ADP536X_BAT_OC_CHG,
   263e4:	21e0      	movs	r1, #224	; 0xe0
   263e6:	2015      	movs	r0, #21
   263e8:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   263ec:	f7f5 b8b6 	b.w	1b55c <adp536x_reg_write_mask>

000263f0 <adp536x_buck_1v8_set>:
	return adp536x_reg_write_mask(ADP536X_BUCK_OUTPUT,
   263f0:	2218      	movs	r2, #24
   263f2:	213f      	movs	r1, #63	; 0x3f
   263f4:	202a      	movs	r0, #42	; 0x2a
   263f6:	f7f5 b8b1 	b.w	1b55c <adp536x_reg_write_mask>

000263fa <adp536x_buck_discharge_set>:
				ADP536X_BUCK_CFG_DISCHG_BUCK(enable));
   263fa:	0042      	lsls	r2, r0, #1
	return adp536x_reg_write_mask(ADP536X_BUCK_CFG,
   263fc:	2102      	movs	r1, #2
   263fe:	2029      	movs	r0, #41	; 0x29
   26400:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   26404:	f7f5 b8aa 	b.w	1b55c <adp536x_reg_write_mask>

00026408 <adp536x_buckbst_3v3_set>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_OUTPUT,
   26408:	2213      	movs	r2, #19
   2640a:	213f      	movs	r1, #63	; 0x3f
   2640c:	202c      	movs	r0, #44	; 0x2c
   2640e:	f7f5 b8a5 	b.w	1b55c <adp536x_reg_write_mask>

00026412 <adp536x_buckbst_enable>:
{
   26412:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_BUCKBST_CFG,
   26414:	2101      	movs	r1, #1
   26416:	202b      	movs	r0, #43	; 0x2b
   26418:	f7f5 b8a0 	b.w	1b55c <adp536x_reg_write_mask>

0002641c <adp536x_fg_set_mode>:
int adp536x_fg_set_mode(enum adp536x_fg_enabled en, enum adp536x_fg_mode mode)
{
	return adp536x_reg_write_mask(
		ADP536X_FUEL_GAUGE_MODE,
		ADP536X_FUEL_GAUGE_MODE_FG_MODE_MSK | ADP536X_FUEL_GAUGE_EN_FG_MSK,
		ADP536X_FUEL_GAUGE_MODE_FG_MODE(mode) | ADP536X_FUEL_GAUGE_EN_FG(en));
   2641c:	0049      	lsls	r1, r1, #1
   2641e:	f001 0102 	and.w	r1, r1, #2
	return adp536x_reg_write_mask(
   26422:	f000 0201 	and.w	r2, r0, #1
   26426:	430a      	orrs	r2, r1
   26428:	2027      	movs	r0, #39	; 0x27
   2642a:	2103      	movs	r1, #3
   2642c:	f7f5 b896 	b.w	1b55c <adp536x_reg_write_mask>

00026430 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   26430:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   26432:	6800      	ldr	r0, [r0, #0]
   26434:	f7f5 b8e8 	b.w	1b608 <z_arm_fatal_error>

00026438 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   26438:	2100      	movs	r1, #0
   2643a:	2001      	movs	r0, #1
   2643c:	f7f5 b8e4 	b.w	1b608 <z_arm_fatal_error>

00026440 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   26440:	b508      	push	{r3, lr}
	handler();
   26442:	f7f5 f98d 	bl	1b760 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   26446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2644a:	f7f5 ba57 	b.w	1b8fc <z_arm_exc_exit>

0002644e <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2644e:	6e83      	ldr	r3, [r0, #104]	; 0x68
   26450:	f383 880b 	msr	PSPLIM, r3
}
   26454:	4770      	bx	lr

00026456 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   26456:	2300      	movs	r3, #0
   26458:	f7f4 bc40 	b.w	1acdc <z_impl_z_log_msg_static_create>

0002645c <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2645c:	4770      	bx	lr

0002645e <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   2645e:	4770      	bx	lr

00026460 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   26460:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   26464:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   26468:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   2646a:	bf08      	it	eq
   2646c:	f06f 0015 	mvneq.w	r0, #21
   26470:	4770      	bx	lr

00026472 <mpu_configure_region>:
{
   26472:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   26474:	890a      	ldrh	r2, [r1, #8]
   26476:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   26478:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   2647a:	684c      	ldr	r4, [r1, #4]
   2647c:	f002 021f 	and.w	r2, r2, #31
{
   26480:	b085      	sub	sp, #20
   26482:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   26486:	9300      	str	r3, [sp, #0]
   26488:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2648c:	f023 031f 	bic.w	r3, r3, #31
   26490:	1e62      	subs	r2, r4, #1
   26492:	4413      	add	r3, r2
   26494:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   26498:	280f      	cmp	r0, #15
   2649a:	9303      	str	r3, [sp, #12]
   2649c:	d904      	bls.n	264a8 <mpu_configure_region+0x36>
}
   2649e:	b005      	add	sp, #20
   264a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   264a4:	f7f5 bdf8 	b.w	1c098 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   264a8:	4669      	mov	r1, sp
   264aa:	f7f5 fddb 	bl	1c064 <region_init>
}
   264ae:	b005      	add	sp, #20
   264b0:	bd30      	pop	{r4, r5, pc}

000264b2 <malloc_prepare>:
}
   264b2:	2000      	movs	r0, #0
   264b4:	4770      	bx	lr

000264b6 <_stdout_hook_default>:
}
   264b6:	f04f 30ff 	mov.w	r0, #4294967295
   264ba:	4770      	bx	lr

000264bc <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   264bc:	f04f 32ff 	mov.w	r2, #4294967295
   264c0:	f04f 33ff 	mov.w	r3, #4294967295
   264c4:	f7fd bc62 	b.w	23d8c <z_impl_k_mutex_lock>

000264c8 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   264c8:	f7fd bcda 	b.w	23e80 <z_impl_k_mutex_unlock>

000264cc <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   264cc:	f7fd ba06 	b.w	238dc <z_impl_z_errno>

000264d0 <z_log_msg_static_create.constprop.0>:
   264d0:	2300      	movs	r3, #0
   264d2:	f7f4 bc03 	b.w	1acdc <z_impl_z_log_msg_static_create>

000264d6 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   264d6:	b508      	push	{r3, lr}
	net_if_init();
   264d8:	f7f6 f824 	bl	1c524 <net_if_init>
	net_if_post_init();
   264dc:	f7f6 f846 	bl	1c56c <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   264e0:	2000      	movs	r0, #0
   264e2:	bd08      	pop	{r3, pc}

000264e4 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   264e4:	b110      	cbz	r0, 264ec <net_if_l2+0x8>
   264e6:	6800      	ldr	r0, [r0, #0]
   264e8:	b100      	cbz	r0, 264ec <net_if_l2+0x8>
	return iface->if_dev->l2;
   264ea:	6840      	ldr	r0, [r0, #4]
}
   264ec:	4770      	bx	lr

000264ee <atomic_set_bit>:
   264ee:	2301      	movs	r3, #1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   264f0:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   264f2:	f001 011f 	and.w	r1, r1, #31
   264f6:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   264f8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   264fc:	e8d0 2fef 	ldaex	r2, [r0]
   26500:	431a      	orrs	r2, r3
   26502:	e8c0 2fe1 	stlex	r1, r2, [r0]
   26506:	2900      	cmp	r1, #0
   26508:	d1f8      	bne.n	264fc <atomic_set_bit+0xe>
}
   2650a:	4770      	bx	lr

0002650c <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2650c:	2301      	movs	r3, #1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2650e:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   26510:	f001 011f 	and.w	r1, r1, #31
   26514:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26516:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26518:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   2651c:	e8d0 2fef 	ldaex	r2, [r0]
   26520:	401a      	ands	r2, r3
   26522:	e8c0 2fe1 	stlex	r1, r2, [r0]
   26526:	2900      	cmp	r1, #0
   26528:	d1f8      	bne.n	2651c <atomic_clear_bit+0x10>
}
   2652a:	4770      	bx	lr

0002652c <net_if_flag_is_set>:
	if (iface == NULL) {
   2652c:	b130      	cbz	r0, 2653c <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2652e:	6803      	ldr	r3, [r0, #0]
   26530:	330c      	adds	r3, #12
   26532:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   26536:	4108      	asrs	r0, r1
   26538:	f000 0001 	and.w	r0, r0, #1
}
   2653c:	4770      	bx	lr

0002653e <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   2653e:	b510      	push	{r4, lr}
   26540:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   26542:	f7ff ffcf 	bl	264e4 <net_if_l2>
   26546:	b128      	cbz	r0, 26554 <l2_flags_get.isra.0+0x16>
   26548:	68c2      	ldr	r2, [r0, #12]
   2654a:	b11a      	cbz	r2, 26554 <l2_flags_get.isra.0+0x16>
}
   2654c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   26550:	4618      	mov	r0, r3
   26552:	4710      	bx	r2
}
   26554:	bd10      	pop	{r4, pc}

00026556 <update_operational_state>:
{
   26556:	b510      	push	{r4, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   26558:	6803      	ldr	r3, [r0, #0]
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
   2655a:	2100      	movs	r1, #0
{
   2655c:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   2655e:	f893 2020 	ldrb.w	r2, [r3, #32]
   26562:	f7ff ffe3 	bl	2652c <net_if_flag_is_set>
	if (!net_if_is_admin_up(iface)) {
   26566:	b978      	cbnz	r0, 26588 <update_operational_state+0x32>
		iface->if_dev->oper_state = oper_state;
   26568:	2102      	movs	r1, #2
   2656a:	6823      	ldr	r3, [r4, #0]
   2656c:	f883 1020 	strb.w	r1, [r3, #32]
	return iface->if_dev->oper_state;
   26570:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   26572:	f890 3020 	ldrb.w	r3, [r0, #32]
   26576:	428b      	cmp	r3, r1
   26578:	d12b      	bne.n	265d2 <update_operational_state+0x7c>
		if (prev_state == NET_IF_OPER_UP) {
   2657a:	2a06      	cmp	r2, #6
   2657c:	d129      	bne.n	265d2 <update_operational_state+0x7c>
	atomic_clear_bit(iface->if_dev->flags, value);
   2657e:	2108      	movs	r1, #8
   26580:	300c      	adds	r0, #12
   26582:	f7ff ffc3 	bl	2650c <atomic_clear_bit>
	return (iface->if_dev->socket_offload != NULL);
   26586:	e01c      	b.n	265c2 <update_operational_state+0x6c>
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
   26588:	2109      	movs	r1, #9
   2658a:	4620      	mov	r0, r4
   2658c:	f7ff ffce 	bl	2652c <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
   26590:	2800      	cmp	r0, #0
   26592:	d0e9      	beq.n	26568 <update_operational_state+0x12>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
   26594:	210a      	movs	r1, #10
   26596:	4620      	mov	r0, r4
   26598:	f7ff ffc8 	bl	2652c <net_if_flag_is_set>
		iface->if_dev->oper_state = oper_state;
   2659c:	6821      	ldr	r1, [r4, #0]
   2659e:	f1c0 0306 	rsb	r3, r0, #6
   265a2:	b2db      	uxtb	r3, r3
   265a4:	f881 3020 	strb.w	r3, [r1, #32]
	return iface->if_dev->oper_state;
   265a8:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   265aa:	f890 1020 	ldrb.w	r1, [r0, #32]
   265ae:	4299      	cmp	r1, r3
   265b0:	d10f      	bne.n	265d2 <update_operational_state+0x7c>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
   265b2:	2906      	cmp	r1, #6
   265b4:	d1e1      	bne.n	2657a <update_operational_state+0x24>
		if (prev_state != NET_IF_OPER_UP) {
   265b6:	2a06      	cmp	r2, #6
   265b8:	d00b      	beq.n	265d2 <update_operational_state+0x7c>
	atomic_set_bit(iface->if_dev->flags, value);
   265ba:	2108      	movs	r1, #8
   265bc:	300c      	adds	r0, #12
   265be:	f7ff ff96 	bl	264ee <atomic_set_bit>
	return (iface->if_dev->socket_offload != NULL);
   265c2:	6823      	ldr	r3, [r4, #0]
	if (!is_iface_offloaded(iface) &&
   265c4:	69db      	ldr	r3, [r3, #28]
   265c6:	b923      	cbnz	r3, 265d2 <update_operational_state+0x7c>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   265c8:	4620      	mov	r0, r4
}
   265ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   265ce:	f7ff bfb6 	b.w	2653e <l2_flags_get.isra.0>
}
   265d2:	bd10      	pop	{r4, pc}

000265d4 <net_if_flag_test_and_set.isra.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   265d4:	2301      	movs	r3, #1
static inline bool net_if_flag_test_and_set(struct net_if *iface,
   265d6:	b510      	push	{r4, lr}
   265d8:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   265dc:	300c      	adds	r0, #12
   265de:	e8d0 3fef 	ldaex	r3, [r0]
   265e2:	ea43 0201 	orr.w	r2, r3, r1
   265e6:	e8c0 2fe4 	stlex	r4, r2, [r0]
   265ea:	2c00      	cmp	r4, #0
   265ec:	d1f7      	bne.n	265de <net_if_flag_test_and_set.isra.0+0xa>
	return (old & mask) != 0;
   265ee:	4219      	tst	r1, r3
}
   265f0:	bf14      	ite	ne
   265f2:	2001      	movne	r0, #1
   265f4:	2000      	moveq	r0, #0
   265f6:	bd10      	pop	{r4, pc}

000265f8 <net_if_up>:
{
   265f8:	b538      	push	{r3, r4, r5, lr}
   265fa:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   265fc:	f04f 31ff 	mov.w	r1, #4294967295
   26600:	f04f 30ff 	mov.w	r0, #4294967295
   26604:	f7f5 ff80 	bl	1c508 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   26608:	2100      	movs	r1, #0
   2660a:	4628      	mov	r0, r5
   2660c:	f7ff ff8e 	bl	2652c <net_if_flag_is_set>
   26610:	4604      	mov	r4, r0
   26612:	b9d0      	cbnz	r0, 2664a <net_if_up+0x52>
	return (iface->if_dev->socket_offload != NULL);
   26614:	682b      	ldr	r3, [r5, #0]
	if (is_iface_offloaded(iface)) {
   26616:	69db      	ldr	r3, [r3, #28]
   26618:	b95b      	cbnz	r3, 26632 <net_if_up+0x3a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   2661a:	4628      	mov	r0, r5
   2661c:	f7ff ff62 	bl	264e4 <net_if_l2>
   26620:	4604      	mov	r4, r0
   26622:	b130      	cbz	r0, 26632 <net_if_up+0x3a>
   26624:	6884      	ldr	r4, [r0, #8]
   26626:	b124      	cbz	r4, 26632 <net_if_up+0x3a>
	status = net_if_l2(iface)->enable(iface, true);
   26628:	2101      	movs	r1, #1
   2662a:	4628      	mov	r0, r5
   2662c:	47a0      	blx	r4
	if (status < 0) {
   2662e:	1e04      	subs	r4, r0, #0
   26630:	db07      	blt.n	26642 <net_if_up+0x4a>
	atomic_set_bit(iface->if_dev->flags, value);
   26632:	6828      	ldr	r0, [r5, #0]
   26634:	2100      	movs	r1, #0
   26636:	300c      	adds	r0, #12
   26638:	f7ff ff59 	bl	264ee <atomic_set_bit>
	update_operational_state(iface);
   2663c:	4628      	mov	r0, r5
   2663e:	f7ff ff8a 	bl	26556 <update_operational_state>
	k_mutex_unlock(&lock);
   26642:	f7f5 ff69 	bl	1c518 <k_mutex_unlock.constprop.0.isra.0>
}
   26646:	4620      	mov	r0, r4
   26648:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
   2664a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2664e:	e7f8      	b.n	26642 <net_if_up+0x4a>

00026650 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   26650:	220c      	movs	r2, #12
   26652:	6903      	ldr	r3, [r0, #16]
   26654:	b2c9      	uxtb	r1, r1
   26656:	fb01 3302 	mla	r3, r1, r2, r3
   2665a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   2665c:	f000 0007 	and.w	r0, r0, #7
   26660:	4770      	bx	lr

00026662 <set_on_state>:
	__asm__ volatile(
   26662:	f04f 0320 	mov.w	r3, #32
   26666:	f3ef 8211 	mrs	r2, BASEPRI
   2666a:	f383 8812 	msr	BASEPRI_MAX, r3
   2666e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   26672:	6803      	ldr	r3, [r0, #0]
   26674:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   26678:	f043 0302 	orr.w	r3, r3, #2
   2667c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2667e:	f382 8811 	msr	BASEPRI, r2
   26682:	f3bf 8f6f 	isb	sy
}
   26686:	4770      	bx	lr

00026688 <stop>:
{
   26688:	b570      	push	{r4, r5, r6, lr}
   2668a:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   2668c:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   2668e:	f04f 0420 	mov.w	r4, #32
   26692:	f3ef 8511 	mrs	r5, BASEPRI
   26696:	f384 8812 	msr	BASEPRI_MAX, r4
   2669a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2669e:	260c      	movs	r6, #12
   266a0:	fb06 3401 	mla	r4, r6, r1, r3
   266a4:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   266a6:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   266aa:	d008      	beq.n	266be <stop+0x36>
   266ac:	42a2      	cmp	r2, r4
   266ae:	d006      	beq.n	266be <stop+0x36>
	__asm__ volatile(
   266b0:	f385 8811 	msr	BASEPRI, r5
   266b4:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   266b8:	f04f 30ff 	mov.w	r0, #4294967295
}
   266bc:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   266be:	2201      	movs	r2, #1
   266c0:	4371      	muls	r1, r6
   266c2:	440b      	add	r3, r1
   266c4:	641a      	str	r2, [r3, #64]	; 0x40
   266c6:	f385 8811 	msr	BASEPRI, r5
   266ca:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   266ce:	6843      	ldr	r3, [r0, #4]
   266d0:	440b      	add	r3, r1
   266d2:	685b      	ldr	r3, [r3, #4]
   266d4:	4798      	blx	r3
	return 0;
   266d6:	2000      	movs	r0, #0
   266d8:	e7f0      	b.n	266bc <stop+0x34>

000266da <api_stop>:
	return stop(dev, subsys, CTX_API);
   266da:	2280      	movs	r2, #128	; 0x80
   266dc:	f7ff bfd4 	b.w	26688 <stop>

000266e0 <async_start>:
{
   266e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   266e2:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   266e4:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   266e6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   266e8:	f04f 0520 	mov.w	r5, #32
   266ec:	f3ef 8611 	mrs	r6, BASEPRI
   266f0:	f385 8812 	msr	BASEPRI_MAX, r5
   266f4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   266f8:	250c      	movs	r5, #12
   266fa:	4369      	muls	r1, r5
   266fc:	440c      	add	r4, r1
   266fe:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   26700:	f005 0c07 	and.w	ip, r5, #7
   26704:	f1bc 0f01 	cmp.w	ip, #1
   26708:	d10b      	bne.n	26722 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2670a:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   2670c:	f386 8811 	msr	BASEPRI, r6
   26710:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   26714:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   26718:	6843      	ldr	r3, [r0, #4]
   2671a:	585b      	ldr	r3, [r3, r1]
   2671c:	4798      	blx	r3
	return 0;
   2671e:	2000      	movs	r0, #0
}
   26720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   26722:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   26726:	42af      	cmp	r7, r5
   26728:	f386 8811 	msr	BASEPRI, r6
   2672c:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   26730:	bf0c      	ite	eq
   26732:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   26736:	f04f 30ff 	movne.w	r0, #4294967295
   2673a:	e7f1      	b.n	26720 <async_start+0x40>

0002673c <api_start>:
{
   2673c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2673e:	2480      	movs	r4, #128	; 0x80
   26740:	9400      	str	r4, [sp, #0]
   26742:	f7ff ffcd 	bl	266e0 <async_start>
}
   26746:	b002      	add	sp, #8
   26748:	bd10      	pop	{r4, pc}

0002674a <onoff_started_callback>:
{
   2674a:	b410      	push	{r4}
	notify(mgr, 0);
   2674c:	241c      	movs	r4, #28
	return &data->mgr[type];
   2674e:	6900      	ldr	r0, [r0, #16]
   26750:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   26752:	fb03 0004 	mla	r0, r3, r4, r0
   26756:	2100      	movs	r1, #0
}
   26758:	bc10      	pop	{r4}
	notify(mgr, 0);
   2675a:	4710      	bx	r2

0002675c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2675c:	2000      	movs	r0, #0
   2675e:	f7fa b975 	b.w	20a4c <nrfx_clock_start>

00026762 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   26762:	2000      	movs	r0, #0
   26764:	f000 bd5f 	b.w	27226 <nrfx_clock_stop>

00026768 <blocking_start_callback>:
{
   26768:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2676a:	f7fd bbf9 	b.w	23f60 <z_impl_k_sem_give>

0002676e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2676e:	6843      	ldr	r3, [r0, #4]
}
   26770:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26772:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   26774:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   26776:	600b      	str	r3, [r1, #0]
}
   26778:	4770      	bx	lr

0002677a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2677a:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   2677c:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26780:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   26782:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   26786:	6098      	str	r0, [r3, #8]
}
   26788:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2678a:	60d9      	str	r1, [r3, #12]
   2678c:	4770      	bx	lr

0002678e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2678e:	6843      	ldr	r3, [r0, #4]
}
   26790:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26792:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   26794:	6099      	str	r1, [r3, #8]
}
   26796:	4770      	bx	lr

00026798 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26798:	6843      	ldr	r3, [r0, #4]
}
   2679a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2679c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2679e:	60d9      	str	r1, [r3, #12]
}
   267a0:	4770      	bx	lr

000267a2 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   267a2:	6843      	ldr	r3, [r0, #4]
   267a4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   267a6:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   267a8:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   267ac:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   267ae:	6090      	str	r0, [r2, #8]
}
   267b0:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   267b2:	60d3      	str	r3, [r2, #12]
   267b4:	4770      	bx	lr

000267b6 <gpio_nrfx_manage_callback>:
{
   267b6:	b510      	push	{r4, lr}
	return port->data;
   267b8:	6903      	ldr	r3, [r0, #16]
	return list->head;
   267ba:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   267bc:	b1f8      	cbz	r0, 267fe <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   267be:	4288      	cmp	r0, r1
   267c0:	d119      	bne.n	267f6 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   267c2:	689c      	ldr	r4, [r3, #8]
	return node->next;
   267c4:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   267c6:	42a1      	cmp	r1, r4
	list->head = node;
   267c8:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   267ca:	d100      	bne.n	267ce <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   267cc:	6098      	str	r0, [r3, #8]
	parent->next = child;
   267ce:	2000      	movs	r0, #0
   267d0:	6008      	str	r0, [r1, #0]
	if (set) {
   267d2:	b12a      	cbz	r2, 267e0 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   267d4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   267d6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   267d8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   267da:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   267dc:	b902      	cbnz	r2, 267e0 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   267de:	6099      	str	r1, [r3, #8]
	return 0;
   267e0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   267e2:	e010      	b.n	26806 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   267e4:	4281      	cmp	r1, r0
   267e6:	d106      	bne.n	267f6 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   267e8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   267ea:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   267ec:	6898      	ldr	r0, [r3, #8]
   267ee:	4281      	cmp	r1, r0
   267f0:	d1ed      	bne.n	267ce <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   267f2:	609c      	str	r4, [r3, #8]
}
   267f4:	e7eb      	b.n	267ce <gpio_nrfx_manage_callback+0x18>
	return node->next;
   267f6:	4604      	mov	r4, r0
   267f8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   267fa:	2800      	cmp	r0, #0
   267fc:	d1f2      	bne.n	267e4 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   267fe:	2a00      	cmp	r2, #0
   26800:	d1e8      	bne.n	267d4 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   26802:	f06f 0015 	mvn.w	r0, #21
}
   26806:	bd10      	pop	{r4, pc}

00026808 <irq_connect2>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   26808:	2200      	movs	r2, #0
   2680a:	2101      	movs	r1, #1
   2680c:	200a      	movs	r0, #10
   2680e:	f7f4 bf91 	b.w	1b734 <z_arm_irq_priority_set>

00026812 <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   26812:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   26814:	2100      	movs	r1, #0
   26816:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   26818:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   2681a:	f000 f90c 	bl	26a36 <pinctrl_lookup_state>
	if (ret < 0) {
   2681e:	2800      	cmp	r0, #0
   26820:	db05      	blt.n	2682e <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
   26822:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   26824:	6822      	ldr	r2, [r4, #0]
   26826:	7919      	ldrb	r1, [r3, #4]
   26828:	6818      	ldr	r0, [r3, #0]
   2682a:	f7f7 f995 	bl	1db58 <pinctrl_configure_pins>
}
   2682e:	b002      	add	sp, #8
   26830:	bd10      	pop	{r4, pc}

00026832 <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
   26832:	2200      	movs	r2, #0
   26834:	2101      	movs	r1, #1
   26836:	200b      	movs	r0, #11
   26838:	f7f4 bf7c 	b.w	1b734 <z_arm_irq_priority_set>

0002683c <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2683c:	b510      	push	{r4, lr}
	while (*count) {
   2683e:	680b      	ldr	r3, [r1, #0]
   26840:	b913      	cbnz	r3, 26848 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   26842:	4618      	mov	r0, r3
	*buf_len = 0;
   26844:	6013      	str	r3, [r2, #0]
	return NULL;
   26846:	e005      	b.n	26854 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   26848:	6803      	ldr	r3, [r0, #0]
   2684a:	685c      	ldr	r4, [r3, #4]
   2684c:	b11c      	cbz	r4, 26856 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   2684e:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   26850:	6803      	ldr	r3, [r0, #0]
   26852:	6818      	ldr	r0, [r3, #0]
}
   26854:	bd10      	pop	{r4, pc}
		++(*current);
   26856:	3308      	adds	r3, #8
   26858:	6003      	str	r3, [r0, #0]
		--(*count);
   2685a:	680b      	ldr	r3, [r1, #0]
   2685c:	3b01      	subs	r3, #1
   2685e:	600b      	str	r3, [r1, #0]
   26860:	e7ed      	b.n	2683e <spi_context_get_next_buf.constprop.0+0x2>

00026862 <z_log_msg_static_create.constprop.0>:
   26862:	2300      	movs	r3, #0
   26864:	f7f4 ba3a 	b.w	1acdc <z_impl_z_log_msg_static_create>

00026868 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   26868:	4603      	mov	r3, r0
   2686a:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2686c:	7919      	ldrb	r1, [r3, #4]
   2686e:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   26870:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   26872:	fa03 f101 	lsl.w	r1, r3, r1
   26876:	6903      	ldr	r3, [r0, #16]
   26878:	681b      	ldr	r3, [r3, #0]
   2687a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2687c:	bf18      	it	ne
   2687e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   26882:	b112      	cbz	r2, 2688a <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   26884:	6883      	ldr	r3, [r0, #8]
   26886:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   26888:	4718      	bx	r3
   2688a:	6883      	ldr	r3, [r0, #8]
   2688c:	691b      	ldr	r3, [r3, #16]
   2688e:	e7fb      	b.n	26888 <gpio_pin_set_dt.isra.0+0x20>

00026890 <_spi_context_cs_control>:
{
   26890:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   26892:	6803      	ldr	r3, [r0, #0]
{
   26894:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   26896:	b1e3      	cbz	r3, 268d2 <_spi_context_cs_control+0x42>
   26898:	6898      	ldr	r0, [r3, #8]
   2689a:	b1d0      	cbz	r0, 268d2 <_spi_context_cs_control+0x42>
   2689c:	6805      	ldr	r5, [r0, #0]
   2689e:	b1c5      	cbz	r5, 268d2 <_spi_context_cs_control+0x42>
		if (on) {
   268a0:	b149      	cbz	r1, 268b6 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   268a2:	2101      	movs	r1, #1
   268a4:	f7ff ffe0 	bl	26868 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   268a8:	6823      	ldr	r3, [r4, #0]
   268aa:	689b      	ldr	r3, [r3, #8]
   268ac:	6898      	ldr	r0, [r3, #8]
}
   268ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   268b2:	f001 be50 	b.w	28556 <z_impl_k_busy_wait>
			if (!force_off &&
   268b6:	b912      	cbnz	r2, 268be <_spi_context_cs_control+0x2e>
   268b8:	889b      	ldrh	r3, [r3, #4]
   268ba:	04db      	lsls	r3, r3, #19
   268bc:	d409      	bmi.n	268d2 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   268be:	6880      	ldr	r0, [r0, #8]
   268c0:	f001 fe49 	bl	28556 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   268c4:	6823      	ldr	r3, [r4, #0]
   268c6:	2100      	movs	r1, #0
   268c8:	6898      	ldr	r0, [r3, #8]
}
   268ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   268ce:	f7ff bfcb 	b.w	26868 <gpio_pin_set_dt.isra.0>
}
   268d2:	bd38      	pop	{r3, r4, r5, pc}

000268d4 <spi_context_unlock_unconditionally>:
{
   268d4:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   268d6:	2201      	movs	r2, #1
   268d8:	2100      	movs	r1, #0
{
   268da:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   268dc:	f7ff ffd8 	bl	26890 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   268e0:	69a3      	ldr	r3, [r4, #24]
   268e2:	b933      	cbnz	r3, 268f2 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   268e4:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   268e6:	f104 0010 	add.w	r0, r4, #16
}
   268ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   268ee:	f7fd bb37 	b.w	23f60 <z_impl_k_sem_give>
   268f2:	bd10      	pop	{r4, pc}

000268f4 <spi_nrfx_release>:
{
   268f4:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   268f6:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   268f8:	6803      	ldr	r3, [r0, #0]
   268fa:	428b      	cmp	r3, r1
   268fc:	d106      	bne.n	2690c <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   268fe:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   26902:	b934      	cbnz	r4, 26912 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   26904:	f7ff ffe6 	bl	268d4 <spi_context_unlock_unconditionally>
	return 0;
   26908:	4620      	mov	r0, r4
}
   2690a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2690c:	f06f 0015 	mvn.w	r0, #21
   26910:	e7fb      	b.n	2690a <spi_nrfx_release+0x16>
		return -EBUSY;
   26912:	f06f 000f 	mvn.w	r0, #15
   26916:	e7f8      	b.n	2690a <spi_nrfx_release+0x16>

00026918 <uarte_nrfx_config_get>:
{
   26918:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   2691a:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   2691c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   26920:	e883 0003 	stmia.w	r3, {r0, r1}
}
   26924:	2000      	movs	r0, #0
   26926:	4770      	bx	lr

00026928 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   26928:	6843      	ldr	r3, [r0, #4]
   2692a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2692c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   26930:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   26934:	4770      	bx	lr

00026936 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   26936:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   26938:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2693a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2693c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26940:	b150      	cbz	r0, 26958 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26942:	2000      	movs	r0, #0
	*c = *data->rx_data;
   26944:	6952      	ldr	r2, [r2, #20]
   26946:	7812      	ldrb	r2, [r2, #0]
   26948:	700a      	strb	r2, [r1, #0]
   2694a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2694e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26952:	2201      	movs	r2, #1
   26954:	601a      	str	r2, [r3, #0]
	return 0;
   26956:	4770      	bx	lr
		return -1;
   26958:	f04f 30ff 	mov.w	r0, #4294967295
}
   2695c:	4770      	bx	lr

0002695e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2695e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   26960:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26962:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   26966:	b940      	cbnz	r0, 2697a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   26968:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2696a:	079b      	lsls	r3, r3, #30
   2696c:	d406      	bmi.n	2697c <is_tx_ready.isra.0+0x1e>
   2696e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   26972:	3800      	subs	r0, #0
   26974:	bf18      	it	ne
   26976:	2001      	movne	r0, #1
   26978:	4770      	bx	lr
   2697a:	2001      	movs	r0, #1
}
   2697c:	4770      	bx	lr

0002697e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   2697e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   26980:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   26982:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   26986:	05c9      	lsls	r1, r1, #23
   26988:	d518      	bpl.n	269bc <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2698a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2698e:	b1a9      	cbz	r1, 269bc <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   26990:	f04f 0020 	mov.w	r0, #32
   26994:	f3ef 8111 	mrs	r1, BASEPRI
   26998:	f380 8812 	msr	BASEPRI_MAX, r0
   2699c:	f3bf 8f6f 	isb	sy
   269a0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   269a4:	b130      	cbz	r0, 269b4 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   269a6:	2000      	movs	r0, #0
   269a8:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   269ac:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   269b0:	2001      	movs	r0, #1
   269b2:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   269b4:	f381 8811 	msr	BASEPRI, r1
   269b8:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   269bc:	6852      	ldr	r2, [r2, #4]
   269be:	06d2      	lsls	r2, r2, #27
   269c0:	d515      	bpl.n	269ee <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   269c2:	f04f 0120 	mov.w	r1, #32
   269c6:	f3ef 8211 	mrs	r2, BASEPRI
   269ca:	f381 8812 	msr	BASEPRI_MAX, r1
   269ce:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   269d2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   269d6:	b111      	cbz	r1, 269de <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   269d8:	2100      	movs	r1, #0
   269da:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   269de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   269e2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   269e6:	f382 8811 	msr	BASEPRI, r2
   269ea:	f3bf 8f6f 	isb	sy
}
   269ee:	4770      	bx	lr

000269f0 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   269f0:	4608      	mov	r0, r1
   269f2:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   269f4:	4611      	mov	r1, r2
   269f6:	f7f9 ff31 	bl	2085c <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   269fa:	2800      	cmp	r0, #0
	}

	return 0;
}
   269fc:	bf18      	it	ne
   269fe:	f06f 0004 	mvnne.w	r0, #4
   26a02:	bd08      	pop	{r3, pc}

00026a04 <entropy_psa_crypto_rng_init>:
{
   26a04:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   26a06:	f000 fc09 	bl	2721c <psa_crypto_init>
		return -EIO;
   26a0a:	2800      	cmp	r0, #0
}
   26a0c:	bf18      	it	ne
   26a0e:	f06f 0004 	mvnne.w	r0, #4
   26a12:	bd08      	pop	{r3, pc}

00026a14 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   26a14:	4770      	bx	lr

00026a16 <event_clear>:
   26a16:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   26a18:	f100 0350 	add.w	r3, r0, #80	; 0x50
   26a1c:	009b      	lsls	r3, r3, #2
   26a1e:	b29b      	uxth	r3, r3
   26a20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   26a24:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   26a28:	601a      	str	r2, [r3, #0]
   26a2a:	681b      	ldr	r3, [r3, #0]
}
   26a2c:	4770      	bx	lr

00026a2e <sys_clock_cycle_get_32>:
{
   26a2e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   26a30:	f7f6 ff02 	bl	1d838 <z_nrf_rtc_timer_read>
}
   26a34:	bd08      	pop	{r3, pc}

00026a36 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   26a36:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   26a38:	6843      	ldr	r3, [r0, #4]
   26a3a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   26a3c:	7a05      	ldrb	r5, [r0, #8]
   26a3e:	6844      	ldr	r4, [r0, #4]
   26a40:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   26a44:	42a3      	cmp	r3, r4
   26a46:	d302      	bcc.n	26a4e <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   26a48:	f06f 0001 	mvn.w	r0, #1
}
   26a4c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   26a4e:	795c      	ldrb	r4, [r3, #5]
   26a50:	428c      	cmp	r4, r1
   26a52:	d001      	beq.n	26a58 <pinctrl_lookup_state+0x22>
		(*state)++;
   26a54:	3308      	adds	r3, #8
   26a56:	e7f0      	b.n	26a3a <pinctrl_lookup_state+0x4>
			return 0;
   26a58:	2000      	movs	r0, #0
   26a5a:	e7f7      	b.n	26a4c <pinctrl_lookup_state+0x16>

00026a5c <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   26a5c:	f001 bd7b 	b.w	28556 <z_impl_k_busy_wait>

00026a60 <nrf_modem_os_errno_set>:
{
   26a60:	b510      	push	{r4, lr}
   26a62:	4604      	mov	r4, r0
	errno = err_code;
   26a64:	f7ff fd32 	bl	264cc <__errno>
   26a68:	6004      	str	r4, [r0, #0]
}
   26a6a:	bd10      	pop	{r4, pc}

00026a6c <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   26a6c:	f001 bb38 	b.w	280e0 <k_is_in_isr>

00026a70 <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
   26a70:	f7fd ba76 	b.w	23f60 <z_impl_k_sem_give>

00026a74 <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   26a74:	1c4b      	adds	r3, r1, #1
{
   26a76:	b570      	push	{r4, r5, r6, lr}
   26a78:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   26a7a:	d017      	beq.n	26aac <nrf_modem_os_sem_take+0x38>
   26a7c:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   26a80:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   26a84:	f240 30e7 	movw	r0, #999	; 0x3e7
   26a88:	2100      	movs	r1, #0
   26a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26a8e:	2300      	movs	r3, #0
   26a90:	fbc4 0106 	smlal	r0, r1, r4, r6
   26a94:	f7f2 f938 	bl	18d08 <__aeabi_uldivmod>
   26a98:	4602      	mov	r2, r0
   26a9a:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   26a9c:	4628      	mov	r0, r5
   26a9e:	f7fd fa85 	bl	23fac <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   26aa2:	2800      	cmp	r0, #0
}
   26aa4:	bf18      	it	ne
   26aa6:	f06f 000a 	mvnne.w	r0, #10
   26aaa:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   26aac:	f04f 32ff 	mov.w	r2, #4294967295
   26ab0:	4613      	mov	r3, r2
   26ab2:	e7f3      	b.n	26a9c <nrf_modem_os_sem_take+0x28>

00026ab4 <nrf91_socket_offload_setsockopt>:
{
   26ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   26ab6:	460d      	mov	r5, r1
   26ab8:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = { 0 };
   26aba:	2300      	movs	r3, #0
{
   26abc:	b087      	sub	sp, #28
   26abe:	4611      	mov	r1, r2
	int sd = OBJ_TO_SD(obj);
   26ac0:	6807      	ldr	r7, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   26ac2:	aa03      	add	r2, sp, #12
   26ac4:	4628      	mov	r0, r5
	struct nrf_timeval nrf_timeo = { 0 };
   26ac6:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   26aca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   26acc:	f7f7 fa6e 	bl	1dfac <z_to_nrf_optname>
   26ad0:	2800      	cmp	r0, #0
   26ad2:	da07      	bge.n	26ae4 <nrf91_socket_offload_setsockopt+0x30>
		errno = ENOPROTOOPT;
   26ad4:	f7ff fcfa 	bl	264cc <__errno>
   26ad8:	236d      	movs	r3, #109	; 0x6d
   26ada:	6003      	str	r3, [r0, #0]
		return -1;
   26adc:	f04f 30ff 	mov.w	r0, #4294967295
}
   26ae0:	b007      	add	sp, #28
   26ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   26ae4:	2d01      	cmp	r5, #1
   26ae6:	d112      	bne.n	26b0e <nrf91_socket_offload_setsockopt+0x5a>
   26ae8:	f1a1 0214 	sub.w	r2, r1, #20
   26aec:	2a01      	cmp	r2, #1
   26aee:	d806      	bhi.n	26afe <nrf91_socket_offload_setsockopt+0x4a>
		if (optval != NULL) {
   26af0:	b12c      	cbz	r4, 26afe <nrf91_socket_offload_setsockopt+0x4a>
			nrf_optlen = sizeof(struct nrf_timeval);
   26af2:	2608      	movs	r6, #8
			nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   26af4:	6823      	ldr	r3, [r4, #0]
   26af6:	9304      	str	r3, [sp, #16]
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   26af8:	68a3      	ldr	r3, [r4, #8]
			nrf_optval = &nrf_timeo;
   26afa:	ac04      	add	r4, sp, #16
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   26afc:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   26afe:	4623      	mov	r3, r4
   26b00:	4629      	mov	r1, r5
   26b02:	4638      	mov	r0, r7
   26b04:	9a03      	ldr	r2, [sp, #12]
   26b06:	9600      	str	r6, [sp, #0]
   26b08:	f7fc f880 	bl	22c0c <nrf_setsockopt>
	return retval;
   26b0c:	e7e8      	b.n	26ae0 <nrf91_socket_offload_setsockopt+0x2c>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   26b0e:	f5b5 7f8d 	cmp.w	r5, #282	; 0x11a
   26b12:	d1f4      	bne.n	26afe <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   26b14:	290c      	cmp	r1, #12
   26b16:	bf08      	it	eq
   26b18:	2604      	moveq	r6, #4
   26b1a:	e7f0      	b.n	26afe <nrf91_socket_offload_setsockopt+0x4a>

00026b1c <nrf91_socket_offload_getsockopt>:
{
   26b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26b20:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   26b22:	2300      	movs	r3, #0
{
   26b24:	b086      	sub	sp, #24
   26b26:	460f      	mov	r7, r1
   26b28:	4615      	mov	r5, r2
	struct nrf_timeval nrf_timeo = {0, 0};
   26b2a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   26b2e:	2308      	movs	r3, #8
	int sd = OBJ_TO_SD(obj);
   26b30:	6806      	ldr	r6, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   26b32:	4629      	mov	r1, r5
   26b34:	4638      	mov	r0, r7
   26b36:	eb0d 0203 	add.w	r2, sp, r3
{
   26b3a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   26b3e:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   26b40:	f7f7 fa34 	bl	1dfac <z_to_nrf_optname>
   26b44:	2800      	cmp	r0, #0
   26b46:	da09      	bge.n	26b5c <nrf91_socket_offload_getsockopt+0x40>
		errno = ENOPROTOOPT;
   26b48:	f7ff fcc0 	bl	264cc <__errno>
   26b4c:	236d      	movs	r3, #109	; 0x6d
		return -1;
   26b4e:	f04f 36ff 	mov.w	r6, #4294967295
		errno = ENOPROTOOPT;
   26b52:	6003      	str	r3, [r0, #0]
}
   26b54:	4630      	mov	r0, r6
   26b56:	b006      	add	sp, #24
   26b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   26b5c:	2f01      	cmp	r7, #1
   26b5e:	d11c      	bne.n	26b9a <nrf91_socket_offload_getsockopt+0x7e>
   26b60:	f1a5 0314 	sub.w	r3, r5, #20
   26b64:	2b01      	cmp	r3, #1
   26b66:	d818      	bhi.n	26b9a <nrf91_socket_offload_getsockopt+0x7e>
		nrf_optlen = &nrf_timeo_size;
   26b68:	aa03      	add	r2, sp, #12
		nrf_optval = &nrf_timeo;
   26b6a:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   26b6c:	4630      	mov	r0, r6
   26b6e:	9200      	str	r2, [sp, #0]
   26b70:	4639      	mov	r1, r7
   26b72:	9a02      	ldr	r2, [sp, #8]
   26b74:	f7fc f988 	bl	22e88 <nrf_getsockopt>
	if (retval == 0) {
   26b78:	4606      	mov	r6, r0
   26b7a:	2800      	cmp	r0, #0
   26b7c:	d1ea      	bne.n	26b54 <nrf91_socket_offload_getsockopt+0x38>
		if (level == SOL_SOCKET) {
   26b7e:	2f01      	cmp	r7, #1
   26b80:	d1e8      	bne.n	26b54 <nrf91_socket_offload_getsockopt+0x38>
			if (optname == SO_ERROR) {
   26b82:	2d04      	cmp	r5, #4
   26b84:	d10c      	bne.n	26ba0 <nrf91_socket_offload_getsockopt+0x84>
				if (*(int *)optval != 0) {
   26b86:	6820      	ldr	r0, [r4, #0]
   26b88:	2800      	cmp	r0, #0
   26b8a:	d0e3      	beq.n	26b54 <nrf91_socket_offload_getsockopt+0x38>
					nrf_modem_os_errno_set(*(int *)optval);
   26b8c:	f7ff ff68 	bl	26a60 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   26b90:	f7ff fc9c 	bl	264cc <__errno>
   26b94:	6803      	ldr	r3, [r0, #0]
   26b96:	6023      	str	r3, [r4, #0]
   26b98:	e7dc      	b.n	26b54 <nrf91_socket_offload_getsockopt+0x38>
	nrf_socklen_t *nrf_optlen = (nrf_socklen_t *)optlen;
   26b9a:	4642      	mov	r2, r8
   26b9c:	4623      	mov	r3, r4
   26b9e:	e7e5      	b.n	26b6c <nrf91_socket_offload_getsockopt+0x50>
			} else if ((optname == SO_RCVTIMEO) ||
   26ba0:	3d14      	subs	r5, #20
   26ba2:	2d01      	cmp	r5, #1
   26ba4:	d8d6      	bhi.n	26b54 <nrf91_socket_offload_getsockopt+0x38>
					nrf_timeo.tv_sec;
   26ba6:	9b04      	ldr	r3, [sp, #16]
   26ba8:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   26bac:	9b05      	ldr	r3, [sp, #20]
   26bae:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   26bb0:	2310      	movs	r3, #16
   26bb2:	f8c8 3000 	str.w	r3, [r8]
   26bb6:	e7cd      	b.n	26b54 <nrf91_socket_offload_getsockopt+0x38>

00026bb8 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   26bb8:	6800      	ldr	r0, [r0, #0]
   26bba:	f000 bee1 	b.w	27980 <nrf_listen>

00026bbe <nrf91_socket_offload_freeaddrinfo>:
{
   26bbe:	b538      	push	{r3, r4, r5, lr}
   26bc0:	4604      	mov	r4, r0
	while (next != NULL) {
   26bc2:	b904      	cbnz	r4, 26bc6 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   26bc4:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   26bc6:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   26bc8:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   26bca:	f001 fda7 	bl	2871c <k_free>
		k_free(this);
   26bce:	4620      	mov	r0, r4
   26bd0:	f001 fda4 	bl	2871c <k_free>
		next = next->ai_next;
   26bd4:	462c      	mov	r4, r5
   26bd6:	e7f4      	b.n	26bc2 <nrf91_socket_offload_freeaddrinfo+0x4>

00026bd8 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   26bd8:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   26bda:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   26bdc:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   26bde:	4603      	mov	r3, r0
{
   26be0:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   26be2:	f823 2b04 	strh.w	r2, [r3], #4
   26be6:	f101 0420 	add.w	r4, r1, #32
   26bea:	f101 0210 	add.w	r2, r1, #16
   26bee:	f852 5b04 	ldr.w	r5, [r2], #4
   26bf2:	42a2      	cmp	r2, r4
   26bf4:	f843 5b04 	str.w	r5, [r3], #4
   26bf8:	d1f9      	bne.n	26bee <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   26bfa:	6a0b      	ldr	r3, [r1, #32]
   26bfc:	7503      	strb	r3, [r0, #20]
}
   26bfe:	bd30      	pop	{r4, r5, pc}

00026c00 <z_to_nrf_ipv6>:
{
   26c00:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   26c02:	2124      	movs	r1, #36	; 0x24
{
   26c04:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   26c06:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   26c08:	8841      	ldrh	r1, [r0, #2]
{
   26c0a:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   26c0c:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   26c0e:	2102      	movs	r1, #2
   26c10:	1d04      	adds	r4, r0, #4
   26c12:	6059      	str	r1, [r3, #4]
   26c14:	f103 0610 	add.w	r6, r3, #16
   26c18:	f100 0714 	add.w	r7, r0, #20
   26c1c:	4635      	mov	r5, r6
   26c1e:	6820      	ldr	r0, [r4, #0]
   26c20:	6861      	ldr	r1, [r4, #4]
   26c22:	3408      	adds	r4, #8
   26c24:	c503      	stmia	r5!, {r0, r1}
   26c26:	42bc      	cmp	r4, r7
   26c28:	462e      	mov	r6, r5
   26c2a:	d1f7      	bne.n	26c1c <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   26c2c:	7d12      	ldrb	r2, [r2, #20]
   26c2e:	621a      	str	r2, [r3, #32]
}
   26c30:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026c32 <nrf91_socket_offload_sendto>:
{
   26c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26c36:	4604      	mov	r4, r0
   26c38:	b08c      	sub	sp, #48	; 0x30
   26c3a:	9812      	ldr	r0, [sp, #72]	; 0x48
   26c3c:	460d      	mov	r5, r1
   26c3e:	4616      	mov	r6, r2
   26c40:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   26c42:	6824      	ldr	r4, [r4, #0]
	if (to == NULL) {
   26c44:	b930      	cbnz	r0, 26c54 <nrf91_socket_offload_sendto+0x22>
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   26c46:	9013      	str	r0, [sp, #76]	; 0x4c
   26c48:	4620      	mov	r0, r4
}
   26c4a:	b00c      	add	sp, #48	; 0x30
   26c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   26c50:	f7fb bed0 	b.w	229f4 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   26c54:	f8b0 c000 	ldrh.w	ip, [r0]
   26c58:	f1bc 0f01 	cmp.w	ip, #1
   26c5c:	d112      	bne.n	26c84 <nrf91_socket_offload_sendto+0x52>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26c5e:	2510      	movs	r5, #16
	nrf_out->sin_port = ptr->sin_port;
   26c60:	8846      	ldrh	r6, [r0, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26c62:	6840      	ldr	r0, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26c64:	f88d 500c 	strb.w	r5, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26c68:	9006      	str	r0, [sp, #24]
		retval = nrf_sendto(sd, buf, len, flags,
   26c6a:	a803      	add	r0, sp, #12
	nrf_out->sin_port = ptr->sin_port;
   26c6c:	f8ad 6014 	strh.w	r6, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   26c70:	f8cd c010 	str.w	ip, [sp, #16]
		retval = nrf_sendto(sd, buf, len, flags,
   26c74:	9501      	str	r5, [sp, #4]
   26c76:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, flags,
   26c78:	4620      	mov	r0, r4
   26c7a:	f7fb febb 	bl	229f4 <nrf_sendto>
}
   26c7e:	b00c      	add	sp, #48	; 0x30
   26c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   26c84:	f1bc 0f02 	cmp.w	ip, #2
   26c88:	d10b      	bne.n	26ca2 <nrf91_socket_offload_sendto+0x70>
		z_to_nrf_ipv6(to, &ipv6);
   26c8a:	f10d 080c 	add.w	r8, sp, #12
   26c8e:	4641      	mov	r1, r8
   26c90:	f7ff ffb6 	bl	26c00 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, flags,
   26c94:	2324      	movs	r3, #36	; 0x24
   26c96:	4632      	mov	r2, r6
   26c98:	e9cd 8300 	strd	r8, r3, [sp]
   26c9c:	4629      	mov	r1, r5
   26c9e:	463b      	mov	r3, r7
   26ca0:	e7ea      	b.n	26c78 <nrf91_socket_offload_sendto+0x46>
		errno = EAFNOSUPPORT;
   26ca2:	f7ff fc13 	bl	264cc <__errno>
   26ca6:	236a      	movs	r3, #106	; 0x6a
   26ca8:	6003      	str	r3, [r0, #0]
		retval = -1;
   26caa:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   26cae:	e7e6      	b.n	26c7e <nrf91_socket_offload_sendto+0x4c>

00026cb0 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   26cb0:	2300      	movs	r3, #0
{
   26cb2:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   26cb4:	e9cd 3300 	strd	r3, r3, [sp]
   26cb8:	f7ff ffbb 	bl	26c32 <nrf91_socket_offload_sendto>
}
   26cbc:	b003      	add	sp, #12
   26cbe:	f85d fb04 	ldr.w	pc, [sp], #4

00026cc2 <nrf91_socket_offload_connect>:
{
   26cc2:	4603      	mov	r3, r0
   26cc4:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   26cc6:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   26cc8:	880b      	ldrh	r3, [r1, #0]
{
   26cca:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   26ccc:	2b01      	cmp	r3, #1
{
   26cce:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   26cd0:	d10e      	bne.n	26cf0 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26cd2:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   26cd4:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   26cd6:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26cd8:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26cda:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   26cde:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26ce2:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   26ce4:	4620      	mov	r0, r4
   26ce6:	a901      	add	r1, sp, #4
   26ce8:	f000 fd68 	bl	277bc <nrf_connect>
}
   26cec:	b00a      	add	sp, #40	; 0x28
   26cee:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   26cf0:	2b02      	cmp	r3, #2
   26cf2:	d104      	bne.n	26cfe <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   26cf4:	a901      	add	r1, sp, #4
   26cf6:	f7ff ff83 	bl	26c00 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   26cfa:	2224      	movs	r2, #36	; 0x24
   26cfc:	e7f2      	b.n	26ce4 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   26cfe:	4620      	mov	r0, r4
}
   26d00:	b00a      	add	sp, #40	; 0x28
   26d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = nrf_connect(sd, (void *)addr, addrlen);
   26d06:	f000 bd59 	b.w	277bc <nrf_connect>

00026d0a <nrf91_socket_offload_bind>:
{
   26d0a:	4603      	mov	r3, r0
   26d0c:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   26d0e:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   26d10:	880b      	ldrh	r3, [r1, #0]
{
   26d12:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   26d14:	2b01      	cmp	r3, #1
{
   26d16:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   26d18:	d10e      	bne.n	26d38 <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26d1a:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   26d1c:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   26d1e:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26d20:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26d22:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   26d26:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26d2a:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   26d2c:	4620      	mov	r0, r4
   26d2e:	a901      	add	r1, sp, #4
   26d30:	f000 fddd 	bl	278ee <nrf_bind>
}
   26d34:	b00a      	add	sp, #40	; 0x28
   26d36:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   26d38:	2b02      	cmp	r3, #2
   26d3a:	d104      	bne.n	26d46 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   26d3c:	a901      	add	r1, sp, #4
   26d3e:	f7ff ff5f 	bl	26c00 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   26d42:	2224      	movs	r2, #36	; 0x24
   26d44:	e7f2      	b.n	26d2c <nrf91_socket_offload_bind+0x22>
		errno = EAFNOSUPPORT;
   26d46:	f7ff fbc1 	bl	264cc <__errno>
   26d4a:	236a      	movs	r3, #106	; 0x6a
   26d4c:	6003      	str	r3, [r0, #0]
		retval = -1;
   26d4e:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   26d52:	e7ef      	b.n	26d34 <nrf91_socket_offload_bind+0x2a>

00026d54 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   26d54:	f7fd b81a 	b.w	23d8c <z_impl_k_mutex_lock>

00026d58 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   26d58:	f7fd b892 	b.w	23e80 <z_impl_k_mutex_unlock>

00026d5c <nrf91_socket_offload_recvfrom>:
{
   26d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d60:	4605      	mov	r5, r0
	if (ctx->lock) {
   26d62:	6840      	ldr	r0, [r0, #4]
{
   26d64:	b08d      	sub	sp, #52	; 0x34
   26d66:	460c      	mov	r4, r1
   26d68:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   26d6c:	4691      	mov	r9, r2
   26d6e:	469a      	mov	sl, r3
	if (ctx->lock) {
   26d70:	b108      	cbz	r0, 26d76 <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   26d72:	f7ff fff1 	bl	26d58 <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   26d76:	f8d5 b000 	ldr.w	fp, [r5]
	if (from == NULL || fromlen == NULL) {
   26d7a:	b106      	cbz	r6, 26d7e <nrf91_socket_offload_recvfrom+0x22>
   26d7c:	b9af      	cbnz	r7, 26daa <nrf91_socket_offload_recvfrom+0x4e>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   26d7e:	2300      	movs	r3, #0
   26d80:	4621      	mov	r1, r4
   26d82:	e9cd 3300 	strd	r3, r3, [sp]
   26d86:	464a      	mov	r2, r9
   26d88:	4653      	mov	r3, sl
   26d8a:	4658      	mov	r0, fp
   26d8c:	f000 febd 	bl	27b0a <nrf_recvfrom>
   26d90:	4604      	mov	r4, r0
	if (ctx->lock) {
   26d92:	6868      	ldr	r0, [r5, #4]
   26d94:	b128      	cbz	r0, 26da2 <nrf91_socket_offload_recvfrom+0x46>
		k_mutex_lock(ctx->lock, K_FOREVER);
   26d96:	f04f 32ff 	mov.w	r2, #4294967295
   26d9a:	f04f 33ff 	mov.w	r3, #4294967295
   26d9e:	f7ff ffd9 	bl	26d54 <k_mutex_lock.constprop.0.isra.0>
}
   26da2:	4620      	mov	r0, r4
   26da4:	b00d      	add	sp, #52	; 0x34
   26da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   26daa:	f10d 080c 	add.w	r8, sp, #12
   26dae:	2224      	movs	r2, #36	; 0x24
   26db0:	2100      	movs	r1, #0
   26db2:	4640      	mov	r0, r8
   26db4:	f001 fcfe 	bl	287b4 <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   26db8:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   26dba:	ab02      	add	r3, sp, #8
   26dbc:	4621      	mov	r1, r4
   26dbe:	e9cd 8300 	strd	r8, r3, [sp]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   26dc2:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   26dc4:	4653      	mov	r3, sl
   26dc6:	464a      	mov	r2, r9
   26dc8:	4658      	mov	r0, fp
   26dca:	f000 fe9e 	bl	27b0a <nrf_recvfrom>
		if (retval < 0) {
   26dce:	1e04      	subs	r4, r0, #0
   26dd0:	dbdf      	blt.n	26d92 <nrf91_socket_offload_recvfrom+0x36>
		if (cliaddr->sa_family == NRF_AF_INET &&
   26dd2:	9b04      	ldr	r3, [sp, #16]
   26dd4:	2b01      	cmp	r3, #1
   26dd6:	d10b      	bne.n	26df0 <nrf91_socket_offload_recvfrom+0x94>
   26dd8:	9a02      	ldr	r2, [sp, #8]
   26dda:	2a10      	cmp	r2, #16
   26ddc:	d1d9      	bne.n	26d92 <nrf91_socket_offload_recvfrom+0x36>
	ptr->sin_family = AF_INET;
   26dde:	8033      	strh	r3, [r6, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   26de0:	9b06      	ldr	r3, [sp, #24]
	ptr->sin_port = nrf_in->sin_port;
   26de2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   26de6:	6073      	str	r3, [r6, #4]
			*fromlen = sizeof(struct sockaddr_in);
   26de8:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   26dea:	8072      	strh	r2, [r6, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   26dec:	603b      	str	r3, [r7, #0]
   26dee:	e7d0      	b.n	26d92 <nrf91_socket_offload_recvfrom+0x36>
		} else if (cliaddr->sa_family == NRF_AF_INET6 &&
   26df0:	2b02      	cmp	r3, #2
   26df2:	d1ce      	bne.n	26d92 <nrf91_socket_offload_recvfrom+0x36>
   26df4:	9b02      	ldr	r3, [sp, #8]
   26df6:	2b24      	cmp	r3, #36	; 0x24
   26df8:	d1cb      	bne.n	26d92 <nrf91_socket_offload_recvfrom+0x36>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   26dfa:	4641      	mov	r1, r8
   26dfc:	4630      	mov	r0, r6
   26dfe:	f7ff feeb 	bl	26bd8 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   26e02:	2318      	movs	r3, #24
   26e04:	e7f2      	b.n	26dec <nrf91_socket_offload_recvfrom+0x90>

00026e06 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   26e06:	2300      	movs	r3, #0
{
   26e08:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   26e0a:	e9cd 3300 	strd	r3, r3, [sp]
   26e0e:	f7ff ffa5 	bl	26d5c <nrf91_socket_offload_recvfrom>
}
   26e12:	b003      	add	sp, #12
   26e14:	f85d fb04 	ldr.w	pc, [sp], #4

00026e18 <nrf91_socket_offload_close>:
{
   26e18:	b538      	push	{r3, r4, r5, lr}
   26e1a:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   26e1c:	6800      	ldr	r0, [r0, #0]
   26e1e:	f7fb fdb5 	bl	2298c <nrf_close>
	if (retval == 0) {
   26e22:	4604      	mov	r4, r0
   26e24:	b910      	cbnz	r0, 26e2c <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   26e26:	4628      	mov	r0, r5
   26e28:	f7f7 fab8 	bl	1e39c <release_ctx>
}
   26e2c:	4620      	mov	r0, r4
   26e2e:	bd38      	pop	{r3, r4, r5, pc}

00026e30 <gpio_pin_configure_dt>:
{
   26e30:	4603      	mov	r3, r0
   26e32:	b470      	push	{r4, r5, r6}
   26e34:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   26e36:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   26e38:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   26e3a:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   26e3c:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
   26e3e:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
   26e40:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   26e42:	408c      	lsls	r4, r1
   26e44:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   26e46:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
   26e4a:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   26e4c:	bf14      	ite	ne
   26e4e:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   26e50:	43a3      	biceq	r3, r4
   26e52:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   26e54:	6833      	ldr	r3, [r6, #0]
}
   26e56:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   26e58:	4718      	bx	r3

00026e5a <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   26e5a:	2301      	movs	r3, #1
   26e5c:	fa03 f101 	lsl.w	r1, r3, r1
   26e60:	6903      	ldr	r3, [r0, #16]
   26e62:	681b      	ldr	r3, [r3, #0]
   26e64:	4219      	tst	r1, r3
   26e66:	d003      	beq.n	26e70 <gpio_pin_set+0x16>
	if (value != 0)	{
   26e68:	b122      	cbz	r2, 26e74 <gpio_pin_set+0x1a>
	return api->port_clear_bits_raw(port, pins);
   26e6a:	6883      	ldr	r3, [r0, #8]
   26e6c:	691b      	ldr	r3, [r3, #16]
   26e6e:	e003      	b.n	26e78 <gpio_pin_set+0x1e>
	if (value != 0)	{
   26e70:	2a00      	cmp	r2, #0
   26e72:	d0fa      	beq.n	26e6a <gpio_pin_set+0x10>
	return api->port_set_bits_raw(port, pins);
   26e74:	6883      	ldr	r3, [r0, #8]
   26e76:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   26e78:	4718      	bx	r3

00026e7a <z_log_msg_static_create.constprop.0>:
   26e7a:	2300      	movs	r3, #0
   26e7c:	f7f3 bf2e 	b.w	1acdc <z_impl_z_log_msg_static_create>

00026e80 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   26e80:	2101      	movs	r1, #1
   26e82:	f7f7 bc49 	b.w	1e718 <dk_set_led>

00026e86 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   26e86:	2100      	movs	r1, #0
   26e88:	f7f7 bc46 	b.w	1e718 <dk_set_led>

00026e8c <is_notification>:
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26e8c:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
   26e90:	b2db      	uxtb	r3, r3
   26e92:	2b08      	cmp	r3, #8
   26e94:	bf9d      	ittte	ls
   26e96:	f240 1005 	movwls	r0, #261	; 0x105
   26e9a:	40d8      	lsrls	r0, r3
   26e9c:	f000 0001 	andls.w	r0, r0, #1
{
   26ea0:	2000      	movhi	r0, #0
}
   26ea2:	4770      	bx	lr

00026ea4 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   26ea4:	280d      	cmp	r0, #13
   26ea6:	d004      	beq.n	26eb2 <is_lfcr+0xe>
   26ea8:	f1a0 030a 	sub.w	r3, r0, #10
   26eac:	4258      	negs	r0, r3
   26eae:	4158      	adcs	r0, r3
   26eb0:	4770      	bx	lr
		return true;
   26eb2:	2001      	movs	r0, #1
}
   26eb4:	4770      	bx	lr

00026eb6 <skip_command_prefix>:
{
   26eb6:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   26eb8:	6801      	ldr	r1, [r0, #0]
{
   26eba:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   26ebc:	1c8b      	adds	r3, r1, #2
   26ebe:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   26ec0:	788c      	ldrb	r4, [r1, #2]
   26ec2:	4620      	mov	r0, r4
   26ec4:	f7ff ffee 	bl	26ea4 <is_lfcr>
   26ec8:	b910      	cbnz	r0, 26ed0 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26eca:	b10c      	cbz	r4, 26ed0 <skip_command_prefix+0x1a>
	(*cmd)++;
   26ecc:	3103      	adds	r1, #3
   26ece:	6011      	str	r1, [r2, #0]
}
   26ed0:	bd10      	pop	{r4, pc}

00026ed2 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   26ed2:	6813      	ldr	r3, [r2, #0]
   26ed4:	f7f7 bf2c 	b.w	1ed30 <at_parser_max_params_from_str>

00026ed8 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   26ed8:	6803      	ldr	r3, [r0, #0]
   26eda:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   26edc:	bf86      	itte	hi
   26ede:	6840      	ldrhi	r0, [r0, #4]
   26ee0:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
		return NULL;
   26ee4:	2000      	movls	r0, #0
}
   26ee6:	4770      	bx	lr

00026ee8 <at_param_clear>:
{
   26ee8:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   26eea:	7803      	ldrb	r3, [r0, #0]
{
   26eec:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   26eee:	3b02      	subs	r3, #2
   26ef0:	2b01      	cmp	r3, #1
   26ef2:	d802      	bhi.n	26efa <at_param_clear+0x12>
		k_free(param->value.str_val);
   26ef4:	6880      	ldr	r0, [r0, #8]
   26ef6:	f001 fc11 	bl	2871c <k_free>
	param->value.int_val = 0;
   26efa:	2200      	movs	r2, #0
   26efc:	2300      	movs	r3, #0
   26efe:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   26f02:	bd10      	pop	{r4, pc}

00026f04 <at_params_list_init>:

	return 0;
}

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   26f04:	b538      	push	{r3, r4, r5, lr}
   26f06:	460d      	mov	r5, r1
	if (list == NULL) {
   26f08:	4604      	mov	r4, r0
   26f0a:	b140      	cbz	r0, 26f1e <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   26f0c:	2110      	movs	r1, #16
   26f0e:	4628      	mov	r0, r5
   26f10:	f001 fc0f 	bl	28732 <k_calloc>
   26f14:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   26f16:	b128      	cbz	r0, 26f24 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   26f18:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   26f1a:	6025      	str	r5, [r4, #0]
}
   26f1c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   26f1e:	f06f 0015 	mvn.w	r0, #21
   26f22:	e7fb      	b.n	26f1c <at_params_list_init+0x18>
		return -ENOMEM;
   26f24:	f06f 000b 	mvn.w	r0, #11
   26f28:	e7f8      	b.n	26f1c <at_params_list_init+0x18>

00026f2a <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   26f2a:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   26f2c:	4604      	mov	r4, r0
   26f2e:	b128      	cbz	r0, 26f3c <at_params_list_clear+0x12>
   26f30:	6843      	ldr	r3, [r0, #4]
   26f32:	b11b      	cbz	r3, 26f3c <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   26f34:	2500      	movs	r5, #0
   26f36:	6823      	ldr	r3, [r4, #0]
   26f38:	429d      	cmp	r5, r3
   26f3a:	d300      	bcc.n	26f3e <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   26f3c:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   26f3e:	6866      	ldr	r6, [r4, #4]
   26f40:	eb06 1605 	add.w	r6, r6, r5, lsl #4
   26f44:	4630      	mov	r0, r6
   26f46:	f7ff ffcf 	bl	26ee8 <at_param_clear>
__ssp_bos_icheck3(memset, void *, int)
   26f4a:	2210      	movs	r2, #16
   26f4c:	2100      	movs	r1, #0
   26f4e:	4630      	mov	r0, r6
   26f50:	f001 fc30 	bl	287b4 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   26f54:	3501      	adds	r5, #1
   26f56:	e7ee      	b.n	26f36 <at_params_list_clear+0xc>

00026f58 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   26f58:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   26f5a:	4604      	mov	r4, r0
   26f5c:	b148      	cbz	r0, 26f72 <at_params_list_free+0x1a>
   26f5e:	6843      	ldr	r3, [r0, #4]
   26f60:	b13b      	cbz	r3, 26f72 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   26f62:	2500      	movs	r5, #0
	at_params_list_clear(list);
   26f64:	f7ff ffe1 	bl	26f2a <at_params_list_clear>
	k_free(list->params);
   26f68:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   26f6a:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   26f6c:	f001 fbd6 	bl	2871c <k_free>
	list->params = NULL;
   26f70:	6065      	str	r5, [r4, #4]
}
   26f72:	bd38      	pop	{r3, r4, r5, pc}

00026f74 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   26f74:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   26f76:	b178      	cbz	r0, 26f98 <at_params_empty_put+0x24>
   26f78:	6843      	ldr	r3, [r0, #4]
   26f7a:	b16b      	cbz	r3, 26f98 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26f7c:	f7ff ffac 	bl	26ed8 <at_params_get>

	if (param == NULL) {
   26f80:	4604      	mov	r4, r0
   26f82:	b148      	cbz	r0, 26f98 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   26f84:	f7ff ffb0 	bl	26ee8 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   26f88:	2304      	movs	r3, #4
	param->value.int_val = 0;
   26f8a:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   26f8c:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   26f8e:	2300      	movs	r3, #0

	return 0;
   26f90:	2000      	movs	r0, #0
	param->value.int_val = 0;
   26f92:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   26f96:	bd10      	pop	{r4, pc}
		return -EINVAL;
   26f98:	f06f 0015 	mvn.w	r0, #21
   26f9c:	e7fb      	b.n	26f96 <at_params_empty_put+0x22>

00026f9e <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   26f9e:	b570      	push	{r4, r5, r6, lr}
   26fa0:	4616      	mov	r6, r2
   26fa2:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   26fa4:	b168      	cbz	r0, 26fc2 <at_params_int_put+0x24>
   26fa6:	6843      	ldr	r3, [r0, #4]
   26fa8:	b15b      	cbz	r3, 26fc2 <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26faa:	f7ff ff95 	bl	26ed8 <at_params_get>

	if (param == NULL) {
   26fae:	4604      	mov	r4, r0
   26fb0:	b138      	cbz	r0, 26fc2 <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   26fb2:	f7ff ff99 	bl	26ee8 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   26fb6:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   26fb8:	2000      	movs	r0, #0
	param->value.int_val = value;
   26fba:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   26fbe:	7023      	strb	r3, [r4, #0]
}
   26fc0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   26fc2:	f06f 0015 	mvn.w	r0, #21
   26fc6:	e7fb      	b.n	26fc0 <at_params_int_put+0x22>

00026fc8 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   26fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26fca:	4617      	mov	r7, r2
   26fcc:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   26fce:	b1c0      	cbz	r0, 27002 <at_params_string_put+0x3a>
   26fd0:	6843      	ldr	r3, [r0, #4]
   26fd2:	b1b3      	cbz	r3, 27002 <at_params_string_put+0x3a>
   26fd4:	b1aa      	cbz	r2, 27002 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26fd6:	f7ff ff7f 	bl	26ed8 <at_params_get>

	if (param == NULL) {
   26fda:	4604      	mov	r4, r0
   26fdc:	b188      	cbz	r0, 27002 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   26fde:	1c68      	adds	r0, r5, #1
   26fe0:	f001 fba3 	bl	2872a <k_malloc>

	if (param_value == NULL) {
   26fe4:	4606      	mov	r6, r0
   26fe6:	b178      	cbz	r0, 27008 <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26fe8:	462a      	mov	r2, r5
   26fea:	4639      	mov	r1, r7
   26fec:	f001 fbd5 	bl	2879a <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   26ff0:	4620      	mov	r0, r4
   26ff2:	f7ff ff79 	bl	26ee8 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   26ff6:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   26ff8:	2000      	movs	r0, #0
	param->size = str_len;
   26ffa:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   26ffc:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   26ffe:	60a6      	str	r6, [r4, #8]
}
   27000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   27002:	f06f 0015 	mvn.w	r0, #21
   27006:	e7fb      	b.n	27000 <at_params_string_put+0x38>
		return -ENOMEM;
   27008:	f06f 000b 	mvn.w	r0, #11
   2700c:	e7f8      	b.n	27000 <at_params_string_put+0x38>

0002700e <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   2700e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27010:	4617      	mov	r7, r2
   27012:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   27014:	b1c0      	cbz	r0, 27048 <at_params_array_put+0x3a>
   27016:	6843      	ldr	r3, [r0, #4]
   27018:	b1b3      	cbz	r3, 27048 <at_params_array_put+0x3a>
   2701a:	b1aa      	cbz	r2, 27048 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2701c:	f7ff ff5c 	bl	26ed8 <at_params_get>

	if (param == NULL) {
   27020:	4604      	mov	r4, r0
   27022:	b188      	cbz	r0, 27048 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   27024:	4628      	mov	r0, r5
   27026:	f001 fb80 	bl	2872a <k_malloc>

	if (param_value == NULL) {
   2702a:	4606      	mov	r6, r0
   2702c:	b178      	cbz	r0, 2704e <at_params_array_put+0x40>
   2702e:	462a      	mov	r2, r5
   27030:	4639      	mov	r1, r7
   27032:	f001 fbb2 	bl	2879a <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   27036:	4620      	mov	r0, r4
   27038:	f7ff ff56 	bl	26ee8 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   2703c:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   2703e:	2000      	movs	r0, #0
	param->size = array_len;
   27040:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   27042:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   27044:	60a6      	str	r6, [r4, #8]
}
   27046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   27048:	f06f 0015 	mvn.w	r0, #21
   2704c:	e7fb      	b.n	27046 <at_params_array_put+0x38>
		return -ENOMEM;
   2704e:	f06f 000b 	mvn.w	r0, #11
   27052:	e7f8      	b.n	27046 <at_params_array_put+0x38>

00027054 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   27054:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   27056:	b1b0      	cbz	r0, 27086 <at_params_short_get+0x32>
   27058:	6843      	ldr	r3, [r0, #4]
   2705a:	b1a3      	cbz	r3, 27086 <at_params_short_get+0x32>
   2705c:	b19a      	cbz	r2, 27086 <at_params_short_get+0x32>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2705e:	f7ff ff3b 	bl	26ed8 <at_params_get>

	if (param == NULL) {
   27062:	b180      	cbz	r0, 27086 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   27064:	7803      	ldrb	r3, [r0, #0]
   27066:	2b01      	cmp	r3, #1
   27068:	d10d      	bne.n	27086 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   2706a:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   2706e:	f513 4000 	adds.w	r0, r3, #32768	; 0x8000
   27072:	f141 0100 	adc.w	r1, r1, #0
   27076:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   2707a:	f171 0100 	sbcs.w	r1, r1, #0
   2707e:	d202      	bcs.n	27086 <at_params_short_get+0x32>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   27080:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   27082:	8013      	strh	r3, [r2, #0]
}
   27084:	bd08      	pop	{r3, pc}
		return -EINVAL;
   27086:	f06f 0015 	mvn.w	r0, #21
   2708a:	e7fb      	b.n	27084 <at_params_short_get+0x30>

0002708c <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   2708c:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   2708e:	b190      	cbz	r0, 270b6 <at_params_unsigned_short_get+0x2a>
   27090:	6843      	ldr	r3, [r0, #4]
   27092:	b183      	cbz	r3, 270b6 <at_params_unsigned_short_get+0x2a>
   27094:	b17a      	cbz	r2, 270b6 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   27096:	f7ff ff1f 	bl	26ed8 <at_params_get>

	if (param == NULL) {
   2709a:	b160      	cbz	r0, 270b6 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2709c:	7803      	ldrb	r3, [r0, #0]
   2709e:	2b01      	cmp	r3, #1
   270a0:	d109      	bne.n	270b6 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   270a2:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   270a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   270aa:	f171 0100 	sbcs.w	r1, r1, #0
   270ae:	d202      	bcs.n	270b6 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
   270b0:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   270b2:	8013      	strh	r3, [r2, #0]
}
   270b4:	bd08      	pop	{r3, pc}
		return -EINVAL;
   270b6:	f06f 0015 	mvn.w	r0, #21
   270ba:	e7fb      	b.n	270b4 <at_params_unsigned_short_get+0x28>

000270bc <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   270bc:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   270be:	b190      	cbz	r0, 270e6 <at_params_int_get+0x2a>
   270c0:	6843      	ldr	r3, [r0, #4]
   270c2:	b183      	cbz	r3, 270e6 <at_params_int_get+0x2a>
   270c4:	b17a      	cbz	r2, 270e6 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   270c6:	f7ff ff07 	bl	26ed8 <at_params_get>

	if (param == NULL) {
   270ca:	b160      	cbz	r0, 270e6 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   270cc:	7803      	ldrb	r3, [r0, #0]
   270ce:	2b01      	cmp	r3, #1
   270d0:	d109      	bne.n	270e6 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   270d2:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   270d6:	f113 4000 	adds.w	r0, r3, #2147483648	; 0x80000000
   270da:	f141 0100 	adc.w	r1, r1, #0
   270de:	b911      	cbnz	r1, 270e6 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   270e0:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   270e2:	6013      	str	r3, [r2, #0]
}
   270e4:	bd08      	pop	{r3, pc}
		return -EINVAL;
   270e6:	f06f 0015 	mvn.w	r0, #21
   270ea:	e7fb      	b.n	270e4 <at_params_int_get+0x28>

000270ec <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   270ec:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   270ee:	b170      	cbz	r0, 2710e <at_params_int64_get+0x22>
   270f0:	6843      	ldr	r3, [r0, #4]
   270f2:	b163      	cbz	r3, 2710e <at_params_int64_get+0x22>
   270f4:	b15a      	cbz	r2, 2710e <at_params_int64_get+0x22>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   270f6:	f7ff feef 	bl	26ed8 <at_params_get>

	if (param == NULL) {
   270fa:	b140      	cbz	r0, 2710e <at_params_int64_get+0x22>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   270fc:	7803      	ldrb	r3, [r0, #0]
   270fe:	2b01      	cmp	r3, #1
   27100:	d105      	bne.n	2710e <at_params_int64_get+0x22>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   27102:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   27106:	e9c2 0100 	strd	r0, r1, [r2]
	return 0;
   2710a:	2000      	movs	r0, #0
}
   2710c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2710e:	f06f 0015 	mvn.w	r0, #21
   27112:	e7fb      	b.n	2710c <at_params_int64_get+0x20>

00027114 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   27114:	b570      	push	{r4, r5, r6, lr}
   27116:	4615      	mov	r5, r2
   27118:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL || len == NULL) {
   2711a:	b1a8      	cbz	r0, 27148 <at_params_string_get+0x34>
   2711c:	6843      	ldr	r3, [r0, #4]
   2711e:	b19b      	cbz	r3, 27148 <at_params_string_get+0x34>
   27120:	b192      	cbz	r2, 27148 <at_params_string_get+0x34>
   27122:	b18c      	cbz	r4, 27148 <at_params_string_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   27124:	f7ff fed8 	bl	26ed8 <at_params_get>

	if (param == NULL) {
   27128:	b170      	cbz	r0, 27148 <at_params_string_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   2712a:	7803      	ldrb	r3, [r0, #0]
   2712c:	2b02      	cmp	r3, #2
   2712e:	d10b      	bne.n	27148 <at_params_string_get+0x34>
		return param->size;
   27130:	6846      	ldr	r6, [r0, #4]
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);

	if (*len < param_len) {
   27132:	6823      	ldr	r3, [r4, #0]
   27134:	42b3      	cmp	r3, r6
   27136:	d30a      	bcc.n	2714e <at_params_string_get+0x3a>
   27138:	6881      	ldr	r1, [r0, #8]
   2713a:	4632      	mov	r2, r6
   2713c:	4628      	mov	r0, r5
   2713e:	f001 fb2c 	bl	2879a <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   27142:	2000      	movs	r0, #0
	*len = param_len;
   27144:	6026      	str	r6, [r4, #0]
}
   27146:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   27148:	f06f 0015 	mvn.w	r0, #21
   2714c:	e7fb      	b.n	27146 <at_params_string_get+0x32>
		return -ENOMEM;
   2714e:	f06f 000b 	mvn.w	r0, #11
   27152:	e7f8      	b.n	27146 <at_params_string_get+0x32>

00027154 <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   27154:	4602      	mov	r2, r0
{
   27156:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   27158:	b170      	cbz	r0, 27178 <at_params_valid_count_get+0x24>
   2715a:	6840      	ldr	r0, [r0, #4]
   2715c:	b160      	cbz	r0, 27178 <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   2715e:	6811      	ldr	r1, [r2, #0]
   27160:	b119      	cbz	r1, 2716a <at_params_valid_count_get+0x16>
   27162:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   27164:	b108      	cbz	r0, 2716a <at_params_valid_count_get+0x16>
   27166:	7803      	ldrb	r3, [r0, #0]
   27168:	b90b      	cbnz	r3, 2716e <at_params_valid_count_get+0x1a>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   2716a:	4608      	mov	r0, r1
   2716c:	bd08      	pop	{r3, pc}
		param = at_params_get(list, valid_i);
   2716e:	4610      	mov	r0, r2
		valid_i += 1;
   27170:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   27172:	f7ff feb1 	bl	26ed8 <at_params_get>
   27176:	e7f5      	b.n	27164 <at_params_valid_count_get+0x10>
		return -EINVAL;
   27178:	f06f 0115 	mvn.w	r1, #21
   2717c:	e7f5      	b.n	2716a <at_params_valid_count_get+0x16>

0002717e <z_log_msg_static_create.constprop.0>:
   2717e:	2300      	movs	r3, #0
   27180:	f7f3 bdac 	b.w	1acdc <z_impl_z_log_msg_static_create>

00027184 <z_log_msg_static_create.constprop.0>:
   27184:	2300      	movs	r3, #0
   27186:	f7f3 bda9 	b.w	1acdc <z_impl_z_log_msg_static_create>

0002718a <string_to_int>:
{
   2718a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2718c:	460c      	mov	r4, r1
   2718e:	4605      	mov	r5, r0
   27190:	4616      	mov	r6, r2
	errno = 0;
   27192:	f7ff f99b 	bl	264cc <__errno>
   27196:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   27198:	4622      	mov	r2, r4
	errno = 0;
   2719a:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   2719c:	a901      	add	r1, sp, #4
   2719e:	4628      	mov	r0, r5
   271a0:	f7fd ff6c 	bl	2507c <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   271a4:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   271a6:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   271a8:	42ab      	cmp	r3, r5
   271aa:	d103      	bne.n	271b4 <string_to_int+0x2a>
		return -ENODATA;
   271ac:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   271b0:	b002      	add	sp, #8
   271b2:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   271b4:	781b      	ldrb	r3, [r3, #0]
   271b6:	2b00      	cmp	r3, #0
   271b8:	d1f8      	bne.n	271ac <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   271ba:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   271be:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   271c0:	3303      	adds	r3, #3
   271c2:	d802      	bhi.n	271ca <string_to_int+0x40>
	return 0;
   271c4:	2000      	movs	r0, #0
	*output = temp;
   271c6:	6034      	str	r4, [r6, #0]
	return 0;
   271c8:	e7f2      	b.n	271b0 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   271ca:	f7ff f97f 	bl	264cc <__errno>
   271ce:	6803      	ldr	r3, [r0, #0]
   271d0:	2b22      	cmp	r3, #34	; 0x22
   271d2:	d1f7      	bne.n	271c4 <string_to_int+0x3a>
   271d4:	e7ea      	b.n	271ac <string_to_int+0x22>

000271d6 <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   271d6:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   271d8:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   271da:	b087      	sub	sp, #28
   271dc:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   271de:	ab01      	add	r3, sp, #4
   271e0:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   271e2:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   271e4:	f7ff ff96 	bl	27114 <at_params_string_get>
	if (err) {
   271e8:	b968      	cbnz	r0, 27206 <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   271ea:	9b01      	ldr	r3, [sp, #4]
	if (string_to_int(str_buf, base, output)) {
   271ec:	4622      	mov	r2, r4
	str_buf[len] = '\0';
   271ee:	3318      	adds	r3, #24
   271f0:	446b      	add	r3, sp
   271f2:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   271f6:	4629      	mov	r1, r5
   271f8:	a802      	add	r0, sp, #8
   271fa:	f7ff ffc6 	bl	2718a <string_to_int>
		return -ENODATA;
   271fe:	2800      	cmp	r0, #0
   27200:	bf18      	it	ne
   27202:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   27206:	b007      	add	sp, #28
   27208:	bd30      	pop	{r4, r5, pc}

0002720a <on_modem_init>:
	if (err) {
		LOG_ERR("Failed to unlock PLMN, err %d", err);
		return;
	}
#endif
}
   2720a:	4770      	bx	lr

0002720c <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   2720c:	f7f8 ba64 	b.w	1f6d8 <lte_lc_deinit>

00027210 <on_modem_lib_init>:
	if (ret != 0) {
   27210:	b908      	cbnz	r0, 27216 <on_modem_lib_init+0x6>
   27212:	f7f9 baaf 	b.w	20774 <on_modem_lib_init.part.0>
}
   27216:	4770      	bx	lr

00027218 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   27218:	2000      	movs	r0, #0
   2721a:	4770      	bx	lr

0002721c <psa_crypto_init>:
}
   2721c:	2000      	movs	r0, #0
   2721e:	4770      	bx	lr

00027220 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   27220:	4700      	bx	r0

00027222 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   27222:	f001 b998 	b.w	28556 <z_impl_k_busy_wait>

00027226 <nrfx_clock_stop>:
    clock_stop(domain);
   27226:	f7f9 bb97 	b.w	20958 <clock_stop>

0002722a <set_ss_pin_state>:
{
   2722a:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2722c:	7fc0      	ldrb	r0, [r0, #31]
   2722e:	28ff      	cmp	r0, #255	; 0xff
   27230:	d006      	beq.n	27240 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
   27232:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
   27234:	079b      	lsls	r3, r3, #30
   27236:	bf58      	it	pl
   27238:	f081 0101 	eorpl.w	r1, r1, #1
   2723c:	f7fa b860 	b.w	21300 <nrf_gpio_pin_write>
}
   27240:	4770      	bx	lr

00027242 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   27242:	7b0a      	ldrb	r2, [r1, #12]
{
   27244:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   27246:	2a03      	cmp	r2, #3
   27248:	d829      	bhi.n	2729e <xfer_completeness_check+0x5c>
   2724a:	e8df f002 	tbb	[pc, r2]
   2724e:	2521      	.short	0x2521
   27250:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   27252:	688a      	ldr	r2, [r1, #8]
   27254:	0350      	lsls	r0, r2, #13
   27256:	d504      	bpl.n	27262 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   27258:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   2725c:	6908      	ldr	r0, [r1, #16]
   2725e:	4290      	cmp	r0, r2
   27260:	d107      	bne.n	27272 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   27262:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   27264:	0352      	lsls	r2, r2, #13
   27266:	d41a      	bmi.n	2729e <xfer_completeness_check+0x5c>
   27268:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   2726c:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   2726e:	4291      	cmp	r1, r2
   27270:	d015      	beq.n	2729e <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   27272:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   27274:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   27276:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2727a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2727e:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   27280:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   27284:	6908      	ldr	r0, [r1, #16]
   27286:	4290      	cmp	r0, r2
   27288:	d1f3      	bne.n	27272 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   2728a:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   2728e:	e7ed      	b.n	2726c <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   27290:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   27294:	6909      	ldr	r1, [r1, #16]
   27296:	e7ea      	b.n	2726e <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   27298:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   2729c:	e7fa      	b.n	27294 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   2729e:	2001      	movs	r0, #1
}
   272a0:	4770      	bx	lr

000272a2 <rpc_handle_ctrl_message>:
   272a2:	2902      	cmp	r1, #2
   272a4:	b510      	push	{r4, lr}
   272a6:	4604      	mov	r4, r0
   272a8:	d005      	beq.n	272b6 <rpc_handle_ctrl_message+0x14>
   272aa:	2904      	cmp	r1, #4
   272ac:	d001      	beq.n	272b2 <rpc_handle_ctrl_message+0x10>
   272ae:	2901      	cmp	r1, #1
   272b0:	d107      	bne.n	272c2 <rpc_handle_ctrl_message+0x20>
   272b2:	2000      	movs	r0, #0
   272b4:	bd10      	pop	{r4, pc}
   272b6:	6880      	ldr	r0, [r0, #8]
   272b8:	2800      	cmp	r0, #0
   272ba:	d0fa      	beq.n	272b2 <rpc_handle_ctrl_message+0x10>
   272bc:	f7f6 fe58 	bl	1df70 <nrf_modem_os_shm_tx_free>
   272c0:	e7f7      	b.n	272b2 <rpc_handle_ctrl_message+0x10>
   272c2:	6880      	ldr	r0, [r0, #8]
   272c4:	b108      	cbz	r0, 272ca <rpc_handle_ctrl_message+0x28>
   272c6:	f7f6 fe53 	bl	1df70 <nrf_modem_os_shm_tx_free>
   272ca:	4620      	mov	r0, r4
   272cc:	f7fa fcf6 	bl	21cbc <rpc_transport_msg_rx_free>
   272d0:	e7ef      	b.n	272b2 <rpc_handle_ctrl_message+0x10>

000272d2 <rpc_init>:
   272d2:	f7fa bce1 	b.w	21c98 <rpc_transport_init>

000272d6 <rpc_list_preambles_init>:
   272d6:	2200      	movs	r2, #0
   272d8:	b510      	push	{r4, lr}
   272da:	6804      	ldr	r4, [r0, #0]
   272dc:	4294      	cmp	r4, r2
   272de:	d100      	bne.n	272e2 <rpc_list_preambles_init+0xc>
   272e0:	bd10      	pop	{r4, pc}
   272e2:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   272e6:	684b      	ldr	r3, [r1, #4]
   272e8:	3201      	adds	r2, #1
   272ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   272ee:	f043 0303 	orr.w	r3, r3, #3
   272f2:	604b      	str	r3, [r1, #4]
   272f4:	e7f2      	b.n	272dc <rpc_list_preambles_init+0x6>

000272f6 <rpc_transport_ipc_data_rx_resume>:
   272f6:	2004      	movs	r0, #4
   272f8:	f7f9 bfc6 	b.w	21288 <nrfx_ipc_receive_event_enable>

000272fc <rpc_transport_ipc_data_rx_suspend>:
   272fc:	2004      	movs	r0, #4
   272fe:	f7f9 bfcb 	b.w	21298 <nrfx_ipc_receive_event_disable>

00027302 <rpc_transport_ipc_shutdown>:
   27302:	f7f9 bf93 	b.w	2122c <nrfx_ipc_uninit>

00027306 <rpc_transport_ipc_msg_alloc>:
   27306:	b538      	push	{r3, r4, r5, lr}
   27308:	2300      	movs	r3, #0
   2730a:	1d02      	adds	r2, r0, #4
   2730c:	6804      	ldr	r4, [r0, #0]
   2730e:	429c      	cmp	r4, r3
   27310:	d801      	bhi.n	27316 <rpc_transport_ipc_msg_alloc+0x10>
   27312:	2300      	movs	r3, #0
   27314:	e016      	b.n	27344 <rpc_transport_ipc_msg_alloc+0x3e>
   27316:	f04f 0400 	mov.w	r4, #0
   2731a:	e8d2 5fcf 	ldaexb	r5, [r2]
   2731e:	2d03      	cmp	r5, #3
   27320:	d104      	bne.n	2732c <rpc_transport_ipc_msg_alloc+0x26>
   27322:	e8c2 4fcc 	stlexb	ip, r4, [r2]
   27326:	f1bc 0f00 	cmp.w	ip, #0
   2732a:	d1f6      	bne.n	2731a <rpc_transport_ipc_msg_alloc+0x14>
   2732c:	d002      	beq.n	27334 <rpc_transport_ipc_msg_alloc+0x2e>
   2732e:	3208      	adds	r2, #8
   27330:	3301      	adds	r3, #1
   27332:	e7eb      	b.n	2730c <rpc_transport_ipc_msg_alloc+0x6>
   27334:	eb01 1383 	add.w	r3, r1, r3, lsl #6
   27338:	4618      	mov	r0, r3
   2733a:	2240      	movs	r2, #64	; 0x40
   2733c:	2100      	movs	r1, #0
   2733e:	f001 fa39 	bl	287b4 <memset>
   27342:	4603      	mov	r3, r0
   27344:	4618      	mov	r0, r3
   27346:	bd38      	pop	{r3, r4, r5, pc}

00027348 <rpc_client_msg_from_rpc_msg_get>:
   27348:	3008      	adds	r0, #8
   2734a:	4770      	bx	lr

0002734c <rpc_client_msg_alloc>:
   2734c:	b538      	push	{r3, r4, r5, lr}
   2734e:	4605      	mov	r5, r0
   27350:	b920      	cbnz	r0, 2735c <rpc_client_msg_alloc+0x10>
   27352:	f7fa fca7 	bl	21ca4 <rpc_transport_msg_alloc>
   27356:	b980      	cbnz	r0, 2737a <rpc_client_msg_alloc+0x2e>
   27358:	2000      	movs	r0, #0
   2735a:	bd38      	pop	{r3, r4, r5, pc}
   2735c:	f7f6 fe00 	bl	1df60 <nrf_modem_os_shm_tx_alloc>
   27360:	4604      	mov	r4, r0
   27362:	2800      	cmp	r0, #0
   27364:	d0f8      	beq.n	27358 <rpc_client_msg_alloc+0xc>
   27366:	f7fa fc9d 	bl	21ca4 <rpc_transport_msg_alloc>
   2736a:	b938      	cbnz	r0, 2737c <rpc_client_msg_alloc+0x30>
   2736c:	4620      	mov	r0, r4
   2736e:	f7f6 fdff 	bl	1df70 <nrf_modem_os_shm_tx_free>
   27372:	2001      	movs	r0, #1
   27374:	f7f6 fdca 	bl	1df0c <nrf_modem_os_event_notify>
   27378:	e7ee      	b.n	27358 <rpc_client_msg_alloc+0xc>
   2737a:	462c      	mov	r4, r5
   2737c:	60c5      	str	r5, [r0, #12]
   2737e:	f840 4f08 	str.w	r4, [r0, #8]!
   27382:	e7ea      	b.n	2735a <rpc_client_msg_alloc+0xe>

00027384 <rpc_client_msg_send>:
   27384:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   27388:	4610      	mov	r0, r2
   2738a:	f840 1d08 	str.w	r1, [r0, #-8]!
   2738e:	f7fa bca1 	b.w	21cd4 <rpc_transport_msg_send>

00027392 <rpc_client_msg_rx_free>:
   27392:	3808      	subs	r0, #8
   27394:	f7fa bc92 	b.w	21cbc <rpc_transport_msg_rx_free>

00027398 <rpc_client_msg_data_rx_free>:
   27398:	f7fa bc96 	b.w	21cc8 <rpc_transport_msg_data_rx_free>

0002739c <rpc_client_msg_data_tx_size>:
   2739c:	f7fa bc88 	b.w	21cb0 <rpc_transport_msg_data_tx_size>

000273a0 <rpc_client_msg_data_tx_alloc>:
   273a0:	f7f6 bdde 	b.w	1df60 <nrf_modem_os_shm_tx_alloc>

000273a4 <rpc_client_msg_data_tx_free>:
   273a4:	b508      	push	{r3, lr}
   273a6:	f7f6 fde3 	bl	1df70 <nrf_modem_os_shm_tx_free>
   273aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   273ae:	2001      	movs	r0, #1
   273b0:	f7f6 bdac 	b.w	1df0c <nrf_modem_os_event_notify>

000273b4 <sockaddr_init>:
   273b4:	2904      	cmp	r1, #4
   273b6:	b570      	push	{r4, r5, r6, lr}
   273b8:	4605      	mov	r5, r0
   273ba:	4616      	mov	r6, r2
   273bc:	d003      	beq.n	273c6 <sockaddr_init+0x12>
   273be:	2910      	cmp	r1, #16
   273c0:	d015      	beq.n	273ee <sockaddr_init+0x3a>
   273c2:	2400      	movs	r4, #0
   273c4:	e011      	b.n	273ea <sockaddr_init+0x36>
   273c6:	2010      	movs	r0, #16
   273c8:	f7f6 fdbc 	bl	1df44 <nrf_modem_os_alloc>
   273cc:	4604      	mov	r4, r0
   273ce:	2800      	cmp	r0, #0
   273d0:	d0f7      	beq.n	273c2 <sockaddr_init+0xe>
   273d2:	220f      	movs	r2, #15
   273d4:	2100      	movs	r1, #0
   273d6:	3001      	adds	r0, #1
   273d8:	f001 f9ec 	bl	287b4 <memset>
   273dc:	2310      	movs	r3, #16
   273de:	7023      	strb	r3, [r4, #0]
   273e0:	2301      	movs	r3, #1
   273e2:	8126      	strh	r6, [r4, #8]
   273e4:	6063      	str	r3, [r4, #4]
   273e6:	682b      	ldr	r3, [r5, #0]
   273e8:	60e3      	str	r3, [r4, #12]
   273ea:	4620      	mov	r0, r4
   273ec:	bd70      	pop	{r4, r5, r6, pc}
   273ee:	2024      	movs	r0, #36	; 0x24
   273f0:	f7f6 fda8 	bl	1df44 <nrf_modem_os_alloc>
   273f4:	4604      	mov	r4, r0
   273f6:	2800      	cmp	r0, #0
   273f8:	d0e3      	beq.n	273c2 <sockaddr_init+0xe>
   273fa:	2223      	movs	r2, #35	; 0x23
   273fc:	2100      	movs	r1, #0
   273fe:	3001      	adds	r0, #1
   27400:	f001 f9d8 	bl	287b4 <memset>
   27404:	2324      	movs	r3, #36	; 0x24
   27406:	7023      	strb	r3, [r4, #0]
   27408:	2302      	movs	r3, #2
   2740a:	4628      	mov	r0, r5
   2740c:	6063      	str	r3, [r4, #4]
   2740e:	8126      	strh	r6, [r4, #8]
   27410:	f104 0310 	add.w	r3, r4, #16
   27414:	f105 0210 	add.w	r2, r5, #16
   27418:	f850 1b04 	ldr.w	r1, [r0], #4
   2741c:	4290      	cmp	r0, r2
   2741e:	f843 1b04 	str.w	r1, [r3], #4
   27422:	d1f9      	bne.n	27418 <sockaddr_init+0x64>
   27424:	e7e1      	b.n	273ea <sockaddr_init+0x36>

00027426 <sock_pollcb>:
   27426:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27428:	2500      	movs	r5, #0
   2742a:	6803      	ldr	r3, [r0, #0]
   2742c:	4604      	mov	r4, r0
   2742e:	9300      	str	r3, [sp, #0]
   27430:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   27432:	4668      	mov	r0, sp
   27434:	f8ad 5006 	strh.w	r5, [sp, #6]
   27438:	f8ad 3004 	strh.w	r3, [sp, #4]
   2743c:	f000 fcc2 	bl	27dc4 <nrf_poll_one>
   27440:	b138      	cbz	r0, 27452 <sock_pollcb+0x2c>
   27442:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27444:	4668      	mov	r0, sp
   27446:	4798      	blx	r3
   27448:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   2744c:	b10b      	cbz	r3, 27452 <sock_pollcb+0x2c>
   2744e:	6365      	str	r5, [r4, #52]	; 0x34
   27450:	63a5      	str	r5, [r4, #56]	; 0x38
   27452:	b003      	add	sp, #12
   27454:	bd30      	pop	{r4, r5, pc}

00027456 <sock_has_pkt>:
   27456:	6840      	ldr	r0, [r0, #4]
   27458:	3800      	subs	r0, #0
   2745a:	bf18      	it	ne
   2745c:	2001      	movne	r0, #1
   2745e:	4770      	bx	lr

00027460 <sock_pkt_append>:
   27460:	2300      	movs	r3, #0
   27462:	600b      	str	r3, [r1, #0]
   27464:	6883      	ldr	r3, [r0, #8]
   27466:	b913      	cbnz	r3, 2746e <sock_pkt_append+0xe>
   27468:	e9c0 1101 	strd	r1, r1, [r0, #4]
   2746c:	4770      	bx	lr
   2746e:	6019      	str	r1, [r3, #0]
   27470:	6081      	str	r1, [r0, #8]
   27472:	4770      	bx	lr

00027474 <sock_pkt_remove>:
   27474:	b538      	push	{r3, r4, r5, lr}
   27476:	4605      	mov	r5, r0
   27478:	460c      	mov	r4, r1
   2747a:	f7fa fc31 	bl	21ce0 <rpc_transport_data_rx_suspend>
   2747e:	68aa      	ldr	r2, [r5, #8]
   27480:	6823      	ldr	r3, [r4, #0]
   27482:	4294      	cmp	r4, r2
   27484:	606b      	str	r3, [r5, #4]
   27486:	bf08      	it	eq
   27488:	60ab      	streq	r3, [r5, #8]
   2748a:	2300      	movs	r3, #0
   2748c:	4620      	mov	r0, r4
   2748e:	6023      	str	r3, [r4, #0]
   27490:	f000 f904 	bl	2769c <pkt_free>
   27494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27498:	f7fa bc28 	b.w	21cec <rpc_transport_data_rx_resume>

0002749c <sock_pkt_peek_head>:
   2749c:	6840      	ldr	r0, [r0, #4]
   2749e:	4770      	bx	lr

000274a0 <sock_is_stream>:
   274a0:	6900      	ldr	r0, [r0, #16]
   274a2:	1e43      	subs	r3, r0, #1
   274a4:	4258      	negs	r0, r3
   274a6:	4158      	adcs	r0, r3
   274a8:	4770      	bx	lr

000274aa <sock_is_datagram>:
   274aa:	6900      	ldr	r0, [r0, #16]
   274ac:	1e83      	subs	r3, r0, #2
   274ae:	4258      	negs	r0, r3
   274b0:	4158      	adcs	r0, r3
   274b2:	4770      	bx	lr

000274b4 <sock_is_raw>:
   274b4:	6900      	ldr	r0, [r0, #16]
   274b6:	1ec3      	subs	r3, r0, #3
   274b8:	4258      	negs	r0, r3
   274ba:	4158      	adcs	r0, r3
   274bc:	4770      	bx	lr

000274be <sock_proto_is_secure>:
   274be:	6940      	ldr	r0, [r0, #20]
   274c0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   274c4:	d005      	beq.n	274d2 <sock_proto_is_secure+0x14>
   274c6:	f240 1311 	movw	r3, #273	; 0x111
   274ca:	1ac3      	subs	r3, r0, r3
   274cc:	4258      	negs	r0, r3
   274ce:	4158      	adcs	r0, r3
   274d0:	4770      	bx	lr
   274d2:	2001      	movs	r0, #1
   274d4:	4770      	bx	lr

000274d6 <sock_is_connecting>:
   274d6:	7f00      	ldrb	r0, [r0, #28]
   274d8:	f3c0 0080 	ubfx	r0, r0, #2, #1
   274dc:	4770      	bx	lr

000274de <sock_is_connected>:
   274de:	7f00      	ldrb	r0, [r0, #28]
   274e0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   274e4:	4770      	bx	lr

000274e6 <sock_is_attaching>:
   274e6:	7f00      	ldrb	r0, [r0, #28]
   274e8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   274ec:	4770      	bx	lr

000274ee <sock_is_nonblock>:
   274ee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   274f0:	f000 0001 	and.w	r0, r0, #1
   274f4:	4770      	bx	lr

000274f6 <sock_is_closed>:
   274f6:	7f00      	ldrb	r0, [r0, #28]
   274f8:	f000 0001 	and.w	r0, r0, #1
   274fc:	4770      	bx	lr

000274fe <sock_is_local_closed>:
   274fe:	7f00      	ldrb	r0, [r0, #28]
   27500:	f3c0 0040 	ubfx	r0, r0, #1, #1
   27504:	4770      	bx	lr

00027506 <sock_is_eof>:
   27506:	6903      	ldr	r3, [r0, #16]
   27508:	2b01      	cmp	r3, #1
   2750a:	d105      	bne.n	27518 <sock_is_eof+0x12>
   2750c:	6980      	ldr	r0, [r0, #24]
   2750e:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   27512:	4258      	negs	r0, r3
   27514:	4158      	adcs	r0, r3
   27516:	4770      	bx	lr
   27518:	2000      	movs	r0, #0
   2751a:	4770      	bx	lr

0002751c <sock_has_stream_error>:
   2751c:	7f00      	ldrb	r0, [r0, #28]
   2751e:	09c0      	lsrs	r0, r0, #7
   27520:	4770      	bx	lr

00027522 <sock_has_error>:
   27522:	6983      	ldr	r3, [r0, #24]
   27524:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   27528:	bf14      	ite	ne
   2752a:	2001      	movne	r0, #1
   2752c:	2000      	moveq	r0, #0
   2752e:	4770      	bx	lr

00027530 <sock_has_flow_control>:
   27530:	7f00      	ldrb	r0, [r0, #28]
   27532:	f3c0 1080 	ubfx	r0, r0, #6, #1
   27536:	4770      	bx	lr

00027538 <sock_has_pollcb>:
   27538:	6b40      	ldr	r0, [r0, #52]	; 0x34
   2753a:	3800      	subs	r0, #0
   2753c:	bf18      	it	ne
   2753e:	2001      	movne	r0, #1
   27540:	4770      	bx	lr

00027542 <sock_has_rai_no_data>:
   27542:	6b00      	ldr	r0, [r0, #48]	; 0x30
   27544:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
   27548:	4258      	negs	r0, r3
   2754a:	4158      	adcs	r0, r3
   2754c:	4770      	bx	lr

0002754e <sock_can_read>:
   2754e:	6840      	ldr	r0, [r0, #4]
   27550:	3800      	subs	r0, #0
   27552:	bf18      	it	ne
   27554:	2001      	movne	r0, #1
   27556:	4770      	bx	lr

00027558 <sock_can_accept>:
   27558:	7f40      	ldrb	r0, [r0, #29]
   2755a:	3800      	subs	r0, #0
   2755c:	bf18      	it	ne
   2755e:	2001      	movne	r0, #1
   27560:	4770      	bx	lr

00027562 <sock_can_send>:
   27562:	b510      	push	{r4, lr}
   27564:	4602      	mov	r2, r0
   27566:	6904      	ldr	r4, [r0, #16]
   27568:	f7ff ffa9 	bl	274be <sock_proto_is_secure>
   2756c:	2c01      	cmp	r4, #1
   2756e:	4601      	mov	r1, r0
   27570:	7f13      	ldrb	r3, [r2, #28]
   27572:	d103      	bne.n	2757c <sock_can_send+0x1a>
   27574:	071c      	lsls	r4, r3, #28
   27576:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   2757a:	d50b      	bpl.n	27594 <sock_can_send+0x32>
   2757c:	b931      	cbnz	r1, 2758c <sock_can_send+0x2a>
   2757e:	07d9      	lsls	r1, r3, #31
   27580:	d40b      	bmi.n	2759a <sock_can_send+0x38>
   27582:	f3c3 1380 	ubfx	r3, r3, #6, #1
   27586:	f1c3 0001 	rsb	r0, r3, #1
   2758a:	e003      	b.n	27594 <sock_can_send+0x32>
   2758c:	069a      	lsls	r2, r3, #26
   2758e:	f3c3 1040 	ubfx	r0, r3, #5, #1
   27592:	d4f4      	bmi.n	2757e <sock_can_send+0x1c>
   27594:	f000 0001 	and.w	r0, r0, #1
   27598:	bd10      	pop	{r4, pc}
   2759a:	2000      	movs	r0, #0
   2759c:	e7fa      	b.n	27594 <sock_can_send+0x32>

0002759e <sock_rcvtimeo_ms_get>:
   2759e:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   275a2:	ea53 0102 	orrs.w	r1, r3, r2
   275a6:	d009      	beq.n	275bc <sock_rcvtimeo_ms_get+0x1e>
   275a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   275ac:	fbb3 f0f1 	udiv	r0, r3, r1
   275b0:	fb01 0002 	mla	r0, r1, r2, r0
   275b4:	2801      	cmp	r0, #1
   275b6:	bfb8      	it	lt
   275b8:	2001      	movlt	r0, #1
   275ba:	4770      	bx	lr
   275bc:	f04f 30ff 	mov.w	r0, #4294967295
   275c0:	4770      	bx	lr

000275c2 <sock_sndtimeo_ms_get>:
   275c2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   275c6:	ea53 0102 	orrs.w	r1, r3, r2
   275ca:	d009      	beq.n	275e0 <sock_sndtimeo_ms_get+0x1e>
   275cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   275d0:	fbb3 f0f1 	udiv	r0, r3, r1
   275d4:	fb01 0002 	mla	r0, r1, r2, r0
   275d8:	2801      	cmp	r0, #1
   275da:	bfb8      	it	lt
   275dc:	2001      	movlt	r0, #1
   275de:	4770      	bx	lr
   275e0:	f04f 30ff 	mov.w	r0, #4294967295
   275e4:	4770      	bx	lr

000275e6 <sock_family_is_valid>:
   275e6:	3801      	subs	r0, #1
   275e8:	2802      	cmp	r0, #2
   275ea:	bf8c      	ite	hi
   275ec:	2000      	movhi	r0, #0
   275ee:	2001      	movls	r0, #1
   275f0:	4770      	bx	lr

000275f2 <sock_type_is_valid>:
   275f2:	3801      	subs	r0, #1
   275f4:	2802      	cmp	r0, #2
   275f6:	bf8c      	ite	hi
   275f8:	2000      	movhi	r0, #0
   275fa:	2001      	movls	r0, #1
   275fc:	4770      	bx	lr

000275fe <sock_proto_supports_type>:
   275fe:	2903      	cmp	r1, #3
   27600:	d015      	beq.n	2762e <sock_proto_supports_type+0x30>
   27602:	2811      	cmp	r0, #17
   27604:	d00c      	beq.n	27620 <sock_proto_supports_type+0x22>
   27606:	dc04      	bgt.n	27612 <sock_proto_supports_type+0x14>
   27608:	b188      	cbz	r0, 2762e <sock_proto_supports_type+0x30>
   2760a:	2806      	cmp	r0, #6
   2760c:	d00a      	beq.n	27624 <sock_proto_supports_type+0x26>
   2760e:	2000      	movs	r0, #0
   27610:	4770      	bx	lr
   27612:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   27616:	d005      	beq.n	27624 <sock_proto_supports_type+0x26>
   27618:	f240 1311 	movw	r3, #273	; 0x111
   2761c:	4298      	cmp	r0, r3
   2761e:	d1f6      	bne.n	2760e <sock_proto_supports_type+0x10>
   27620:	2902      	cmp	r1, #2
   27622:	e000      	b.n	27626 <sock_proto_supports_type+0x28>
   27624:	2901      	cmp	r1, #1
   27626:	bf14      	ite	ne
   27628:	2000      	movne	r0, #0
   2762a:	2001      	moveq	r0, #1
   2762c:	4770      	bx	lr
   2762e:	2001      	movs	r0, #1
   27630:	4770      	bx	lr

00027632 <sock_sockaddr_len_is_valid>:
   27632:	6843      	ldr	r3, [r0, #4]
   27634:	2b01      	cmp	r3, #1
   27636:	d003      	beq.n	27640 <sock_sockaddr_len_is_valid+0xe>
   27638:	2b02      	cmp	r3, #2
   2763a:	d009      	beq.n	27650 <sock_sockaddr_len_is_valid+0x1e>
   2763c:	2000      	movs	r0, #0
   2763e:	4770      	bx	lr
   27640:	7803      	ldrb	r3, [r0, #0]
   27642:	2b10      	cmp	r3, #16
   27644:	d1fa      	bne.n	2763c <sock_sockaddr_len_is_valid+0xa>
   27646:	2910      	cmp	r1, #16
   27648:	bf14      	ite	ne
   2764a:	2000      	movne	r0, #0
   2764c:	2001      	moveq	r0, #1
   2764e:	4770      	bx	lr
   27650:	7803      	ldrb	r3, [r0, #0]
   27652:	2b24      	cmp	r3, #36	; 0x24
   27654:	d1f2      	bne.n	2763c <sock_sockaddr_len_is_valid+0xa>
   27656:	2924      	cmp	r1, #36	; 0x24
   27658:	e7f6      	b.n	27648 <sock_sockaddr_len_is_valid+0x16>

0002765a <sock_sockaddr_fam_is_valid>:
   2765a:	68c3      	ldr	r3, [r0, #12]
   2765c:	2b01      	cmp	r3, #1
   2765e:	d003      	beq.n	27668 <sock_sockaddr_fam_is_valid+0xe>
   27660:	2b02      	cmp	r3, #2
   27662:	d007      	beq.n	27674 <sock_sockaddr_fam_is_valid+0x1a>
   27664:	2001      	movs	r0, #1
   27666:	4770      	bx	lr
   27668:	6848      	ldr	r0, [r1, #4]
   2766a:	2801      	cmp	r0, #1
   2766c:	bf14      	ite	ne
   2766e:	2000      	movne	r0, #0
   27670:	2001      	moveq	r0, #1
   27672:	4770      	bx	lr
   27674:	6848      	ldr	r0, [r1, #4]
   27676:	2802      	cmp	r0, #2
   27678:	e7f8      	b.n	2766c <sock_sockaddr_fam_is_valid+0x12>

0002767a <pkt_has_next>:
   2767a:	b100      	cbz	r0, 2767e <pkt_has_next+0x4>
   2767c:	6800      	ldr	r0, [r0, #0]
   2767e:	3800      	subs	r0, #0
   27680:	bf18      	it	ne
   27682:	2001      	movne	r0, #1
   27684:	4770      	bx	lr

00027686 <pkt_peek_next>:
   27686:	b100      	cbz	r0, 2768a <pkt_peek_next+0x4>
   27688:	6800      	ldr	r0, [r0, #0]
   2768a:	4770      	bx	lr

0002768c <pkt_bytes_get>:
   2768c:	8943      	ldrh	r3, [r0, #10]
   2768e:	6840      	ldr	r0, [r0, #4]
   27690:	4418      	add	r0, r3
   27692:	4770      	bx	lr

00027694 <pkt_bytes_left>:
   27694:	8902      	ldrh	r2, [r0, #8]
   27696:	8940      	ldrh	r0, [r0, #10]
   27698:	1a10      	subs	r0, r2, r0
   2769a:	4770      	bx	lr

0002769c <pkt_free>:
   2769c:	b510      	push	{r4, lr}
   2769e:	4604      	mov	r4, r0
   276a0:	6840      	ldr	r0, [r0, #4]
   276a2:	f7ff fe79 	bl	27398 <rpc_client_msg_data_rx_free>
   276a6:	68e0      	ldr	r0, [r4, #12]
   276a8:	b108      	cbz	r0, 276ae <pkt_free+0x12>
   276aa:	f7f6 fc53 	bl	1df54 <nrf_modem_os_free>
   276ae:	4620      	mov	r0, r4
   276b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   276b4:	f7f6 bc4e 	b.w	1df54 <nrf_modem_os_free>

000276b8 <pkt_flush>:
   276b8:	b510      	push	{r4, lr}
   276ba:	4604      	mov	r4, r0
   276bc:	6820      	ldr	r0, [r4, #0]
   276be:	b900      	cbnz	r0, 276c2 <pkt_flush+0xa>
   276c0:	bd10      	pop	{r4, pc}
   276c2:	6862      	ldr	r2, [r4, #4]
   276c4:	6803      	ldr	r3, [r0, #0]
   276c6:	4290      	cmp	r0, r2
   276c8:	6023      	str	r3, [r4, #0]
   276ca:	bf08      	it	eq
   276cc:	6063      	streq	r3, [r4, #4]
   276ce:	f7ff ffe5 	bl	2769c <pkt_free>
   276d2:	e7f3      	b.n	276bc <pkt_flush+0x4>

000276d4 <on_conf_dnssrv_res>:
   276d4:	f000 bc67 	b.w	27fa6 <res_forward>

000276d8 <nrf_freeaddrinfo>:
   276d8:	b510      	push	{r4, lr}
   276da:	4604      	mov	r4, r0
   276dc:	b160      	cbz	r0, 276f8 <nrf_freeaddrinfo+0x20>
   276de:	6940      	ldr	r0, [r0, #20]
   276e0:	b108      	cbz	r0, 276e6 <nrf_freeaddrinfo+0xe>
   276e2:	f7f6 fc37 	bl	1df54 <nrf_modem_os_free>
   276e6:	69a0      	ldr	r0, [r4, #24]
   276e8:	b108      	cbz	r0, 276ee <nrf_freeaddrinfo+0x16>
   276ea:	f7f6 fc33 	bl	1df54 <nrf_modem_os_free>
   276ee:	4620      	mov	r0, r4
   276f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   276f4:	f7f6 bc2e 	b.w	1df54 <nrf_modem_os_free>
   276f8:	bd10      	pop	{r4, pc}

000276fa <on_getifaddrs_res>:
   276fa:	f000 bc54 	b.w	27fa6 <res_forward>

000276fe <nrf_socket>:
   276fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27702:	4681      	mov	r9, r0
   27704:	460f      	mov	r7, r1
   27706:	4616      	mov	r6, r2
   27708:	f7ff ff6d 	bl	275e6 <sock_family_is_valid>
   2770c:	b930      	cbnz	r0, 2771c <nrf_socket+0x1e>
   2770e:	206a      	movs	r0, #106	; 0x6a
   27710:	f7ff f9a6 	bl	26a60 <nrf_modem_os_errno_set>
   27714:	f04f 30ff 	mov.w	r0, #4294967295
   27718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2771c:	4630      	mov	r0, r6
   2771e:	f7fa fe4d 	bl	223bc <sock_proto_is_valid>
   27722:	b908      	cbnz	r0, 27728 <nrf_socket+0x2a>
   27724:	207b      	movs	r0, #123	; 0x7b
   27726:	e7f3      	b.n	27710 <nrf_socket+0x12>
   27728:	4638      	mov	r0, r7
   2772a:	f7ff ff62 	bl	275f2 <sock_type_is_valid>
   2772e:	b908      	cbnz	r0, 27734 <nrf_socket+0x36>
   27730:	206b      	movs	r0, #107	; 0x6b
   27732:	e7ed      	b.n	27710 <nrf_socket+0x12>
   27734:	4639      	mov	r1, r7
   27736:	4630      	mov	r0, r6
   27738:	f7ff ff61 	bl	275fe <sock_proto_supports_type>
   2773c:	2800      	cmp	r0, #0
   2773e:	d0f7      	beq.n	27730 <nrf_socket+0x32>
   27740:	f7fa fdc4 	bl	222cc <sock_open>
   27744:	4605      	mov	r5, r0
   27746:	b908      	cbnz	r0, 2774c <nrf_socket+0x4e>
   27748:	2017      	movs	r0, #23
   2774a:	e7e1      	b.n	27710 <nrf_socket+0x12>
   2774c:	2000      	movs	r0, #0
   2774e:	f7ff fdfd 	bl	2734c <rpc_client_msg_alloc>
   27752:	4604      	mov	r4, r0
   27754:	b920      	cbnz	r0, 27760 <nrf_socket+0x62>
   27756:	6828      	ldr	r0, [r5, #0]
   27758:	f7fa fdf0 	bl	2233c <_sock_close>
   2775c:	2069      	movs	r0, #105	; 0x69
   2775e:	e7d7      	b.n	27710 <nrf_socket+0x12>
   27760:	2300      	movs	r3, #0
   27762:	220c      	movs	r2, #12
   27764:	f04f 38ff 	mov.w	r8, #4294967295
   27768:	7202      	strb	r2, [r0, #8]
   2776a:	7243      	strb	r3, [r0, #9]
   2776c:	7283      	strb	r3, [r0, #10]
   2776e:	72c3      	strb	r3, [r0, #11]
   27770:	f880 8010 	strb.w	r8, [r0, #16]
   27774:	f880 8011 	strb.w	r8, [r0, #17]
   27778:	f880 8012 	strb.w	r8, [r0, #18]
   2777c:	f880 8013 	strb.w	r8, [r0, #19]
   27780:	4648      	mov	r0, r9
   27782:	f7fb fd09 	bl	23198 <nrf_af_to_rpc_af>
   27786:	6160      	str	r0, [r4, #20]
   27788:	4638      	mov	r0, r7
   2778a:	f000 fb85 	bl	27e98 <nrf_type_to_rpc_type>
   2778e:	4601      	mov	r1, r0
   27790:	61a0      	str	r0, [r4, #24]
   27792:	4630      	mov	r0, r6
   27794:	f000 fb81 	bl	27e9a <nrf_proto_to_rpc_proto>
   27798:	4621      	mov	r1, r4
   2779a:	61e0      	str	r0, [r4, #28]
   2779c:	f247 0001 	movw	r0, #28673	; 0x7001
   277a0:	e9c5 9703 	strd	r9, r7, [r5, #12]
   277a4:	616e      	str	r6, [r5, #20]
   277a6:	f000 fbcf 	bl	27f48 <req_forward>
   277aa:	4604      	mov	r4, r0
   277ac:	b120      	cbz	r0, 277b8 <nrf_socket+0xba>
   277ae:	4640      	mov	r0, r8
   277b0:	f7fa fdc4 	bl	2233c <_sock_close>
   277b4:	4620      	mov	r0, r4
   277b6:	e7ab      	b.n	27710 <nrf_socket+0x12>
   277b8:	6828      	ldr	r0, [r5, #0]
   277ba:	e7ad      	b.n	27718 <nrf_socket+0x1a>

000277bc <nrf_connect>:
   277bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   277be:	4607      	mov	r7, r0
   277c0:	460d      	mov	r5, r1
   277c2:	4616      	mov	r6, r2
   277c4:	f7fa fda8 	bl	22318 <sock_find>
   277c8:	4604      	mov	r4, r0
   277ca:	b938      	cbnz	r0, 277dc <nrf_connect+0x20>
   277cc:	2009      	movs	r0, #9
   277ce:	f7ff f947 	bl	26a60 <nrf_modem_os_errno_set>
   277d2:	f04f 35ff 	mov.w	r5, #4294967295
   277d6:	4628      	mov	r0, r5
   277d8:	b003      	add	sp, #12
   277da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   277dc:	f7ff fe8b 	bl	274f6 <sock_is_closed>
   277e0:	b108      	cbz	r0, 277e6 <nrf_connect+0x2a>
   277e2:	69a0      	ldr	r0, [r4, #24]
   277e4:	e7f3      	b.n	277ce <nrf_connect+0x12>
   277e6:	4620      	mov	r0, r4
   277e8:	f7ff fe79 	bl	274de <sock_is_connected>
   277ec:	b108      	cbz	r0, 277f2 <nrf_connect+0x36>
   277ee:	207f      	movs	r0, #127	; 0x7f
   277f0:	e7ed      	b.n	277ce <nrf_connect+0x12>
   277f2:	4620      	mov	r0, r4
   277f4:	f7ff fe6f 	bl	274d6 <sock_is_connecting>
   277f8:	b108      	cbz	r0, 277fe <nrf_connect+0x42>
   277fa:	2078      	movs	r0, #120	; 0x78
   277fc:	e7e7      	b.n	277ce <nrf_connect+0x12>
   277fe:	b90d      	cbnz	r5, 27804 <nrf_connect+0x48>
   27800:	200e      	movs	r0, #14
   27802:	e7e4      	b.n	277ce <nrf_connect+0x12>
   27804:	4631      	mov	r1, r6
   27806:	4628      	mov	r0, r5
   27808:	f7ff ff13 	bl	27632 <sock_sockaddr_len_is_valid>
   2780c:	b908      	cbnz	r0, 27812 <nrf_connect+0x56>
   2780e:	2016      	movs	r0, #22
   27810:	e7dd      	b.n	277ce <nrf_connect+0x12>
   27812:	4629      	mov	r1, r5
   27814:	4620      	mov	r0, r4
   27816:	f7ff ff20 	bl	2765a <sock_sockaddr_fam_is_valid>
   2781a:	b908      	cbnz	r0, 27820 <nrf_connect+0x64>
   2781c:	206a      	movs	r0, #106	; 0x6a
   2781e:	e7d6      	b.n	277ce <nrf_connect+0x12>
   27820:	4620      	mov	r0, r4
   27822:	f7ff fe64 	bl	274ee <sock_is_nonblock>
   27826:	4606      	mov	r6, r0
   27828:	b118      	cbz	r0, 27832 <nrf_connect+0x76>
   2782a:	6966      	ldr	r6, [r4, #20]
   2782c:	3e11      	subs	r6, #17
   2782e:	bf18      	it	ne
   27830:	2601      	movne	r6, #1
   27832:	2000      	movs	r0, #0
   27834:	f7ff fd8a 	bl	2734c <rpc_client_msg_alloc>
   27838:	4602      	mov	r2, r0
   2783a:	b908      	cbnz	r0, 27840 <nrf_connect+0x84>
   2783c:	2069      	movs	r0, #105	; 0x69
   2783e:	e7c6      	b.n	277ce <nrf_connect+0x12>
   27840:	2300      	movs	r3, #0
   27842:	2114      	movs	r1, #20
   27844:	6107      	str	r7, [r0, #16]
   27846:	7201      	strb	r1, [r0, #8]
   27848:	7243      	strb	r3, [r0, #9]
   2784a:	7283      	strb	r3, [r0, #10]
   2784c:	72c3      	strb	r3, [r0, #11]
   2784e:	6869      	ldr	r1, [r5, #4]
   27850:	2901      	cmp	r1, #1
   27852:	d00e      	beq.n	27872 <nrf_connect+0xb6>
   27854:	2902      	cmp	r1, #2
   27856:	d014      	beq.n	27882 <nrf_connect+0xc6>
   27858:	7f23      	ldrb	r3, [r4, #28]
   2785a:	f247 0102 	movw	r1, #28674	; 0x7002
   2785e:	f043 0304 	orr.w	r3, r3, #4
   27862:	7723      	strb	r3, [r4, #28]
   27864:	2004      	movs	r0, #4
   27866:	60d6      	str	r6, [r2, #12]
   27868:	f7ff fd8c 	bl	27384 <rpc_client_msg_send>
   2786c:	b1ce      	cbz	r6, 278a2 <nrf_connect+0xe6>
   2786e:	2077      	movs	r0, #119	; 0x77
   27870:	e7ad      	b.n	277ce <nrf_connect+0x12>
   27872:	8929      	ldrh	r1, [r5, #8]
   27874:	75c3      	strb	r3, [r0, #23]
   27876:	8281      	strh	r1, [r0, #20]
   27878:	2104      	movs	r1, #4
   2787a:	7581      	strb	r1, [r0, #22]
   2787c:	68eb      	ldr	r3, [r5, #12]
   2787e:	6183      	str	r3, [r0, #24]
   27880:	e7ea      	b.n	27858 <nrf_connect+0x9c>
   27882:	8929      	ldrh	r1, [r5, #8]
   27884:	75c3      	strb	r3, [r0, #23]
   27886:	8281      	strh	r1, [r0, #20]
   27888:	2110      	movs	r1, #16
   2788a:	186b      	adds	r3, r5, r1
   2788c:	7581      	strb	r1, [r0, #22]
   2788e:	3520      	adds	r5, #32
   27890:	f100 0118 	add.w	r1, r0, #24
   27894:	f853 0b04 	ldr.w	r0, [r3], #4
   27898:	42ab      	cmp	r3, r5
   2789a:	f841 0b04 	str.w	r0, [r1], #4
   2789e:	d1f9      	bne.n	27894 <nrf_connect+0xd8>
   278a0:	e7da      	b.n	27858 <nrf_connect+0x9c>
   278a2:	4620      	mov	r0, r4
   278a4:	f7ff fe8d 	bl	275c2 <sock_sndtimeo_ms_get>
   278a8:	9001      	str	r0, [sp, #4]
   278aa:	4620      	mov	r0, r4
   278ac:	f7ff fe13 	bl	274d6 <sock_is_connecting>
   278b0:	b918      	cbnz	r0, 278ba <nrf_connect+0xfe>
   278b2:	69a5      	ldr	r5, [r4, #24]
   278b4:	b17d      	cbz	r5, 278d6 <nrf_connect+0x11a>
   278b6:	4628      	mov	r0, r5
   278b8:	e789      	b.n	277ce <nrf_connect+0x12>
   278ba:	2002      	movs	r0, #2
   278bc:	a901      	add	r1, sp, #4
   278be:	f7f6 fa47 	bl	1dd50 <nrf_modem_os_timedwait>
   278c2:	f110 0f0b 	cmn.w	r0, #11
   278c6:	d004      	beq.n	278d2 <nrf_connect+0x116>
   278c8:	2800      	cmp	r0, #0
   278ca:	d0ee      	beq.n	278aa <nrf_connect+0xee>
   278cc:	f000 ff43 	bl	28756 <abs>
   278d0:	e77d      	b.n	277ce <nrf_connect+0x12>
   278d2:	2074      	movs	r0, #116	; 0x74
   278d4:	e77b      	b.n	277ce <nrf_connect+0x12>
   278d6:	4620      	mov	r0, r4
   278d8:	f7ff fdf1 	bl	274be <sock_proto_is_secure>
   278dc:	2800      	cmp	r0, #0
   278de:	f43f af7a 	beq.w	277d6 <nrf_connect+0x1a>
   278e2:	4620      	mov	r0, r4
   278e4:	9901      	ldr	r1, [sp, #4]
   278e6:	f7fb fbe1 	bl	230ac <tls_attach>
   278ea:	4605      	mov	r5, r0
   278ec:	e773      	b.n	277d6 <nrf_connect+0x1a>

000278ee <nrf_bind>:
   278ee:	b538      	push	{r3, r4, r5, lr}
   278f0:	4605      	mov	r5, r0
   278f2:	460c      	mov	r4, r1
   278f4:	f7fa fd10 	bl	22318 <sock_find>
   278f8:	b930      	cbnz	r0, 27908 <nrf_bind+0x1a>
   278fa:	2009      	movs	r0, #9
   278fc:	f7ff f8b0 	bl	26a60 <nrf_modem_os_errno_set>
   27900:	f04f 33ff 	mov.w	r3, #4294967295
   27904:	4618      	mov	r0, r3
   27906:	bd38      	pop	{r3, r4, r5, pc}
   27908:	b90c      	cbnz	r4, 2790e <nrf_bind+0x20>
   2790a:	200e      	movs	r0, #14
   2790c:	e7f6      	b.n	278fc <nrf_bind+0xe>
   2790e:	4621      	mov	r1, r4
   27910:	f7ff fea3 	bl	2765a <sock_sockaddr_fam_is_valid>
   27914:	b908      	cbnz	r0, 2791a <nrf_bind+0x2c>
   27916:	206a      	movs	r0, #106	; 0x6a
   27918:	e7f0      	b.n	278fc <nrf_bind+0xe>
   2791a:	2000      	movs	r0, #0
   2791c:	f7ff fd16 	bl	2734c <rpc_client_msg_alloc>
   27920:	4601      	mov	r1, r0
   27922:	b908      	cbnz	r0, 27928 <nrf_bind+0x3a>
   27924:	2069      	movs	r0, #105	; 0x69
   27926:	e7e9      	b.n	278fc <nrf_bind+0xe>
   27928:	2300      	movs	r3, #0
   2792a:	2214      	movs	r2, #20
   2792c:	6105      	str	r5, [r0, #16]
   2792e:	7202      	strb	r2, [r0, #8]
   27930:	7243      	strb	r3, [r0, #9]
   27932:	7283      	strb	r3, [r0, #10]
   27934:	72c3      	strb	r3, [r0, #11]
   27936:	6862      	ldr	r2, [r4, #4]
   27938:	2a01      	cmp	r2, #1
   2793a:	d009      	beq.n	27950 <nrf_bind+0x62>
   2793c:	2a02      	cmp	r2, #2
   2793e:	d00f      	beq.n	27960 <nrf_bind+0x72>
   27940:	f247 0005 	movw	r0, #28677	; 0x7005
   27944:	f000 fb00 	bl	27f48 <req_forward>
   27948:	4603      	mov	r3, r0
   2794a:	2800      	cmp	r0, #0
   2794c:	d0da      	beq.n	27904 <nrf_bind+0x16>
   2794e:	e7d5      	b.n	278fc <nrf_bind+0xe>
   27950:	8922      	ldrh	r2, [r4, #8]
   27952:	75c3      	strb	r3, [r0, #23]
   27954:	8282      	strh	r2, [r0, #20]
   27956:	2204      	movs	r2, #4
   27958:	7582      	strb	r2, [r0, #22]
   2795a:	68e3      	ldr	r3, [r4, #12]
   2795c:	6183      	str	r3, [r0, #24]
   2795e:	e7ef      	b.n	27940 <nrf_bind+0x52>
   27960:	8922      	ldrh	r2, [r4, #8]
   27962:	75c3      	strb	r3, [r0, #23]
   27964:	8282      	strh	r2, [r0, #20]
   27966:	2210      	movs	r2, #16
   27968:	18a3      	adds	r3, r4, r2
   2796a:	7582      	strb	r2, [r0, #22]
   2796c:	3420      	adds	r4, #32
   2796e:	f100 0218 	add.w	r2, r0, #24
   27972:	f853 0b04 	ldr.w	r0, [r3], #4
   27976:	42a3      	cmp	r3, r4
   27978:	f842 0b04 	str.w	r0, [r2], #4
   2797c:	d1f9      	bne.n	27972 <nrf_bind+0x84>
   2797e:	e7df      	b.n	27940 <nrf_bind+0x52>

00027980 <nrf_listen>:
   27980:	b538      	push	{r3, r4, r5, lr}
   27982:	4605      	mov	r5, r0
   27984:	460c      	mov	r4, r1
   27986:	f7fa fcc7 	bl	22318 <sock_find>
   2798a:	b930      	cbnz	r0, 2799a <nrf_listen+0x1a>
   2798c:	2009      	movs	r0, #9
   2798e:	f7ff f867 	bl	26a60 <nrf_modem_os_errno_set>
   27992:	f04f 33ff 	mov.w	r3, #4294967295
   27996:	4618      	mov	r0, r3
   27998:	bd38      	pop	{r3, r4, r5, pc}
   2799a:	f7ff fd81 	bl	274a0 <sock_is_stream>
   2799e:	b908      	cbnz	r0, 279a4 <nrf_listen+0x24>
   279a0:	205f      	movs	r0, #95	; 0x5f
   279a2:	e7f4      	b.n	2798e <nrf_listen+0xe>
   279a4:	2000      	movs	r0, #0
   279a6:	f7ff fcd1 	bl	2734c <rpc_client_msg_alloc>
   279aa:	4601      	mov	r1, r0
   279ac:	b908      	cbnz	r0, 279b2 <nrf_listen+0x32>
   279ae:	2069      	movs	r0, #105	; 0x69
   279b0:	e7ed      	b.n	2798e <nrf_listen+0xe>
   279b2:	2300      	movs	r3, #0
   279b4:	2204      	movs	r2, #4
   279b6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   279ba:	7243      	strb	r3, [r0, #9]
   279bc:	7283      	strb	r3, [r0, #10]
   279be:	72c3      	strb	r3, [r0, #11]
   279c0:	6105      	str	r5, [r0, #16]
   279c2:	7202      	strb	r2, [r0, #8]
   279c4:	6144      	str	r4, [r0, #20]
   279c6:	f247 0008 	movw	r0, #28680	; 0x7008
   279ca:	f000 fabd 	bl	27f48 <req_forward>
   279ce:	4603      	mov	r3, r0
   279d0:	2800      	cmp	r0, #0
   279d2:	d0e0      	beq.n	27996 <nrf_listen+0x16>
   279d4:	e7db      	b.n	2798e <nrf_listen+0xe>

000279d6 <nrf_accept>:
   279d6:	2300      	movs	r3, #0
   279d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   279dc:	b08d      	sub	sp, #52	; 0x34
   279de:	4606      	mov	r6, r0
   279e0:	4688      	mov	r8, r1
   279e2:	4614      	mov	r4, r2
   279e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   279e8:	f7fa fc96 	bl	22318 <sock_find>
   279ec:	4605      	mov	r5, r0
   279ee:	b938      	cbnz	r0, 27a00 <nrf_accept+0x2a>
   279f0:	2009      	movs	r0, #9
   279f2:	f7ff f835 	bl	26a60 <nrf_modem_os_errno_set>
   279f6:	f04f 30ff 	mov.w	r0, #4294967295
   279fa:	b00d      	add	sp, #52	; 0x34
   279fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27a00:	f1b8 0f00 	cmp.w	r8, #0
   27a04:	d002      	beq.n	27a0c <nrf_accept+0x36>
   27a06:	b91c      	cbnz	r4, 27a10 <nrf_accept+0x3a>
   27a08:	200e      	movs	r0, #14
   27a0a:	e7f2      	b.n	279f2 <nrf_accept+0x1c>
   27a0c:	2c00      	cmp	r4, #0
   27a0e:	d1fb      	bne.n	27a08 <nrf_accept+0x32>
   27a10:	4628      	mov	r0, r5
   27a12:	f7ff fd45 	bl	274a0 <sock_is_stream>
   27a16:	b908      	cbnz	r0, 27a1c <nrf_accept+0x46>
   27a18:	205f      	movs	r0, #95	; 0x5f
   27a1a:	e7ea      	b.n	279f2 <nrf_accept+0x1c>
   27a1c:	4628      	mov	r0, r5
   27a1e:	f7ff fd66 	bl	274ee <sock_is_nonblock>
   27a22:	b128      	cbz	r0, 27a30 <nrf_accept+0x5a>
   27a24:	4628      	mov	r0, r5
   27a26:	f7ff fd97 	bl	27558 <sock_can_accept>
   27a2a:	b908      	cbnz	r0, 27a30 <nrf_accept+0x5a>
   27a2c:	200b      	movs	r0, #11
   27a2e:	e7e0      	b.n	279f2 <nrf_accept+0x1c>
   27a30:	f7fa fc4c 	bl	222cc <sock_open>
   27a34:	4607      	mov	r7, r0
   27a36:	b908      	cbnz	r0, 27a3c <nrf_accept+0x66>
   27a38:	2017      	movs	r0, #23
   27a3a:	e7da      	b.n	279f2 <nrf_accept+0x1c>
   27a3c:	2000      	movs	r0, #0
   27a3e:	f7ff fc85 	bl	2734c <rpc_client_msg_alloc>
   27a42:	4605      	mov	r5, r0
   27a44:	b920      	cbnz	r0, 27a50 <nrf_accept+0x7a>
   27a46:	6838      	ldr	r0, [r7, #0]
   27a48:	f7fa fc78 	bl	2233c <_sock_close>
   27a4c:	2069      	movs	r0, #105	; 0x69
   27a4e:	e7d0      	b.n	279f2 <nrf_accept+0x1c>
   27a50:	6106      	str	r6, [r0, #16]
   27a52:	a901      	add	r1, sp, #4
   27a54:	9702      	str	r7, [sp, #8]
   27a56:	f000 faa2 	bl	27f9e <req_cookie_set>
   27a5a:	4629      	mov	r1, r5
   27a5c:	f247 000c 	movw	r0, #28684	; 0x700c
   27a60:	f000 fa72 	bl	27f48 <req_forward>
   27a64:	4606      	mov	r6, r0
   27a66:	b120      	cbz	r0, 27a72 <nrf_accept+0x9c>
   27a68:	6838      	ldr	r0, [r7, #0]
   27a6a:	f7fa fc67 	bl	2233c <_sock_close>
   27a6e:	4630      	mov	r0, r6
   27a70:	e7bf      	b.n	279f2 <nrf_accept+0x1c>
   27a72:	9d01      	ldr	r5, [sp, #4]
   27a74:	f1b8 0f00 	cmp.w	r8, #0
   27a78:	d006      	beq.n	27a88 <nrf_accept+0xb2>
   27a7a:	b12c      	cbz	r4, 27a88 <nrf_accept+0xb2>
   27a7c:	8beb      	ldrh	r3, [r5, #30]
   27a7e:	2b04      	cmp	r3, #4
   27a80:	d007      	beq.n	27a92 <nrf_accept+0xbc>
   27a82:	2b10      	cmp	r3, #16
   27a84:	d01e      	beq.n	27ac4 <nrf_accept+0xee>
   27a86:	6026      	str	r6, [r4, #0]
   27a88:	4628      	mov	r0, r5
   27a8a:	f7ff fc82 	bl	27392 <rpc_client_msg_rx_free>
   27a8e:	6838      	ldr	r0, [r7, #0]
   27a90:	e7b3      	b.n	279fa <nrf_accept+0x24>
   27a92:	2310      	movs	r3, #16
   27a94:	9003      	str	r0, [sp, #12]
   27a96:	f88d 300c 	strb.w	r3, [sp, #12]
   27a9a:	2301      	movs	r3, #1
   27a9c:	6826      	ldr	r6, [r4, #0]
   27a9e:	9005      	str	r0, [sp, #20]
   27aa0:	2e10      	cmp	r6, #16
   27aa2:	bf28      	it	cs
   27aa4:	2610      	movcs	r6, #16
   27aa6:	9304      	str	r3, [sp, #16]
   27aa8:	7f2b      	ldrb	r3, [r5, #28]
   27aaa:	7f6a      	ldrb	r2, [r5, #29]
   27aac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   27ab0:	f8ad 3014 	strh.w	r3, [sp, #20]
   27ab4:	6a2b      	ldr	r3, [r5, #32]
   27ab6:	9306      	str	r3, [sp, #24]
   27ab8:	4632      	mov	r2, r6
   27aba:	4640      	mov	r0, r8
   27abc:	a903      	add	r1, sp, #12
   27abe:	f000 fe6c 	bl	2879a <memcpy>
   27ac2:	e7e0      	b.n	27a86 <nrf_accept+0xb0>
   27ac4:	f04f 0924 	mov.w	r9, #36	; 0x24
   27ac8:	4601      	mov	r1, r0
   27aca:	464a      	mov	r2, r9
   27acc:	a803      	add	r0, sp, #12
   27ace:	f000 fe71 	bl	287b4 <memset>
   27ad2:	2302      	movs	r3, #2
   27ad4:	f88d 900c 	strb.w	r9, [sp, #12]
   27ad8:	9304      	str	r3, [sp, #16]
   27ada:	7f2b      	ldrb	r3, [r5, #28]
   27adc:	7f6a      	ldrb	r2, [r5, #29]
   27ade:	ae07      	add	r6, sp, #28
   27ae0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   27ae4:	f8ad 3014 	strh.w	r3, [sp, #20]
   27ae8:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   27aec:	f105 0320 	add.w	r3, r5, #32
   27af0:	4632      	mov	r2, r6
   27af2:	6818      	ldr	r0, [r3, #0]
   27af4:	6859      	ldr	r1, [r3, #4]
   27af6:	3308      	adds	r3, #8
   27af8:	c203      	stmia	r2!, {r0, r1}
   27afa:	4563      	cmp	r3, ip
   27afc:	4616      	mov	r6, r2
   27afe:	d1f7      	bne.n	27af0 <nrf_accept+0x11a>
   27b00:	6826      	ldr	r6, [r4, #0]
   27b02:	2e24      	cmp	r6, #36	; 0x24
   27b04:	bf28      	it	cs
   27b06:	2624      	movcs	r6, #36	; 0x24
   27b08:	e7d6      	b.n	27ab8 <nrf_accept+0xe2>

00027b0a <nrf_recvfrom>:
   27b0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27b0e:	b085      	sub	sp, #20
   27b10:	4690      	mov	r8, r2
   27b12:	e9dd b70e 	ldrd	fp, r7, [sp, #56]	; 0x38
   27b16:	461e      	mov	r6, r3
   27b18:	9101      	str	r1, [sp, #4]
   27b1a:	f403 7a80 	and.w	sl, r3, #256	; 0x100
   27b1e:	f7fa fbfb 	bl	22318 <sock_find>
   27b22:	4604      	mov	r4, r0
   27b24:	b940      	cbnz	r0, 27b38 <nrf_recvfrom+0x2e>
   27b26:	2009      	movs	r0, #9
   27b28:	f7fe ff9a 	bl	26a60 <nrf_modem_os_errno_set>
   27b2c:	f04f 39ff 	mov.w	r9, #4294967295
   27b30:	4648      	mov	r0, r9
   27b32:	b005      	add	sp, #20
   27b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b38:	f436 79a1 	bics.w	r9, r6, #322	; 0x142
   27b3c:	d001      	beq.n	27b42 <nrf_recvfrom+0x38>
   27b3e:	205f      	movs	r0, #95	; 0x5f
   27b40:	e7f2      	b.n	27b28 <nrf_recvfrom+0x1e>
   27b42:	f1bb 0f00 	cmp.w	fp, #0
   27b46:	d002      	beq.n	27b4e <nrf_recvfrom+0x44>
   27b48:	b91f      	cbnz	r7, 27b52 <nrf_recvfrom+0x48>
   27b4a:	200e      	movs	r0, #14
   27b4c:	e7ec      	b.n	27b28 <nrf_recvfrom+0x1e>
   27b4e:	2f00      	cmp	r7, #0
   27b50:	d1fb      	bne.n	27b4a <nrf_recvfrom+0x40>
   27b52:	4620      	mov	r0, r4
   27b54:	f7ff fca4 	bl	274a0 <sock_is_stream>
   27b58:	b128      	cbz	r0, 27b66 <nrf_recvfrom+0x5c>
   27b5a:	4620      	mov	r0, r4
   27b5c:	f7ff fcbf 	bl	274de <sock_is_connected>
   27b60:	b908      	cbnz	r0, 27b66 <nrf_recvfrom+0x5c>
   27b62:	2080      	movs	r0, #128	; 0x80
   27b64:	e7e0      	b.n	27b28 <nrf_recvfrom+0x1e>
   27b66:	f1ba 0f00 	cmp.w	sl, #0
   27b6a:	d117      	bne.n	27b9c <nrf_recvfrom+0x92>
   27b6c:	4620      	mov	r0, r4
   27b6e:	f7ff fcbe 	bl	274ee <sock_is_nonblock>
   27b72:	b9a8      	cbnz	r0, 27ba0 <nrf_recvfrom+0x96>
   27b74:	f3c6 1580 	ubfx	r5, r6, #6, #1
   27b78:	4620      	mov	r0, r4
   27b7a:	f7ff fd10 	bl	2759e <sock_rcvtimeo_ms_get>
   27b7e:	9003      	str	r0, [sp, #12]
   27b80:	4620      	mov	r0, r4
   27b82:	f7ff fcb8 	bl	274f6 <sock_is_closed>
   27b86:	b1b0      	cbz	r0, 27bb6 <nrf_recvfrom+0xac>
   27b88:	4620      	mov	r0, r4
   27b8a:	f7ff fc64 	bl	27456 <sock_has_pkt>
   27b8e:	bb70      	cbnz	r0, 27bee <nrf_recvfrom+0xe4>
   27b90:	4620      	mov	r0, r4
   27b92:	f7ff fcc6 	bl	27522 <sock_has_error>
   27b96:	b1b8      	cbz	r0, 27bc8 <nrf_recvfrom+0xbe>
   27b98:	69a0      	ldr	r0, [r4, #24]
   27b9a:	e7c5      	b.n	27b28 <nrf_recvfrom+0x1e>
   27b9c:	2500      	movs	r5, #0
   27b9e:	e7eb      	b.n	27b78 <nrf_recvfrom+0x6e>
   27ba0:	2501      	movs	r5, #1
   27ba2:	e7e9      	b.n	27b78 <nrf_recvfrom+0x6e>
   27ba4:	2002      	movs	r0, #2
   27ba6:	a903      	add	r1, sp, #12
   27ba8:	f7f6 f8d2 	bl	1dd50 <nrf_modem_os_timedwait>
   27bac:	2800      	cmp	r0, #0
   27bae:	d0e7      	beq.n	27b80 <nrf_recvfrom+0x76>
   27bb0:	f000 fdd1 	bl	28756 <abs>
   27bb4:	e7b8      	b.n	27b28 <nrf_recvfrom+0x1e>
   27bb6:	4620      	mov	r0, r4
   27bb8:	f7ff fc4d 	bl	27456 <sock_has_pkt>
   27bbc:	2800      	cmp	r0, #0
   27bbe:	d1e3      	bne.n	27b88 <nrf_recvfrom+0x7e>
   27bc0:	2d00      	cmp	r5, #0
   27bc2:	d0ef      	beq.n	27ba4 <nrf_recvfrom+0x9a>
   27bc4:	200b      	movs	r0, #11
   27bc6:	e7af      	b.n	27b28 <nrf_recvfrom+0x1e>
   27bc8:	4620      	mov	r0, r4
   27bca:	f7ff fc9c 	bl	27506 <sock_is_eof>
   27bce:	2800      	cmp	r0, #0
   27bd0:	d1ae      	bne.n	27b30 <nrf_recvfrom+0x26>
   27bd2:	4620      	mov	r0, r4
   27bd4:	f7ff fc93 	bl	274fe <sock_is_local_closed>
   27bd8:	b148      	cbz	r0, 27bee <nrf_recvfrom+0xe4>
   27bda:	4620      	mov	r0, r4
   27bdc:	f7ff fc60 	bl	274a0 <sock_is_stream>
   27be0:	2800      	cmp	r0, #0
   27be2:	d1a5      	bne.n	27b30 <nrf_recvfrom+0x26>
   27be4:	4620      	mov	r0, r4
   27be6:	f7ff fc60 	bl	274aa <sock_is_datagram>
   27bea:	2800      	cmp	r0, #0
   27bec:	d19b      	bne.n	27b26 <nrf_recvfrom+0x1c>
   27bee:	4620      	mov	r0, r4
   27bf0:	f7ff fc54 	bl	2749c <sock_pkt_peek_head>
   27bf4:	4605      	mov	r5, r0
   27bf6:	f1bb 0f00 	cmp.w	fp, #0
   27bfa:	d00a      	beq.n	27c12 <nrf_recvfrom+0x108>
   27bfc:	68c1      	ldr	r1, [r0, #12]
   27bfe:	b369      	cbz	r1, 27c5c <nrf_recvfrom+0x152>
   27c00:	780a      	ldrb	r2, [r1, #0]
   27c02:	683b      	ldr	r3, [r7, #0]
   27c04:	4658      	mov	r0, fp
   27c06:	429a      	cmp	r2, r3
   27c08:	bf28      	it	cs
   27c0a:	461a      	movcs	r2, r3
   27c0c:	603a      	str	r2, [r7, #0]
   27c0e:	f000 fdc4 	bl	2879a <memcpy>
   27c12:	f006 0602 	and.w	r6, r6, #2
   27c16:	4628      	mov	r0, r5
   27c18:	f7ff fd3c 	bl	27694 <pkt_bytes_left>
   27c1c:	4540      	cmp	r0, r8
   27c1e:	d81f      	bhi.n	27c60 <nrf_recvfrom+0x156>
   27c20:	4628      	mov	r0, r5
   27c22:	f7ff fd37 	bl	27694 <pkt_bytes_left>
   27c26:	4607      	mov	r7, r0
   27c28:	2f00      	cmp	r7, #0
   27c2a:	d081      	beq.n	27b30 <nrf_recvfrom+0x26>
   27c2c:	9b01      	ldr	r3, [sp, #4]
   27c2e:	4628      	mov	r0, r5
   27c30:	eb03 0b09 	add.w	fp, r3, r9
   27c34:	f7ff fd2a 	bl	2768c <pkt_bytes_get>
   27c38:	463a      	mov	r2, r7
   27c3a:	4601      	mov	r1, r0
   27c3c:	4658      	mov	r0, fp
   27c3e:	f000 fdac 	bl	2879a <memcpy>
   27c42:	4620      	mov	r0, r4
   27c44:	44b9      	add	r9, r7
   27c46:	f7ff fc30 	bl	274aa <sock_is_datagram>
   27c4a:	b158      	cbz	r0, 27c64 <nrf_recvfrom+0x15a>
   27c4c:	2e00      	cmp	r6, #0
   27c4e:	f47f af6f 	bne.w	27b30 <nrf_recvfrom+0x26>
   27c52:	4629      	mov	r1, r5
   27c54:	4620      	mov	r0, r4
   27c56:	f7ff fc0d 	bl	27474 <sock_pkt_remove>
   27c5a:	e769      	b.n	27b30 <nrf_recvfrom+0x26>
   27c5c:	6039      	str	r1, [r7, #0]
   27c5e:	e7d8      	b.n	27c12 <nrf_recvfrom+0x108>
   27c60:	4647      	mov	r7, r8
   27c62:	e7e1      	b.n	27c28 <nrf_recvfrom+0x11e>
   27c64:	4620      	mov	r0, r4
   27c66:	f7ff fc25 	bl	274b4 <sock_is_raw>
   27c6a:	2800      	cmp	r0, #0
   27c6c:	d1ee      	bne.n	27c4c <nrf_recvfrom+0x142>
   27c6e:	b956      	cbnz	r6, 27c86 <nrf_recvfrom+0x17c>
   27c70:	896b      	ldrh	r3, [r5, #10]
   27c72:	4628      	mov	r0, r5
   27c74:	443b      	add	r3, r7
   27c76:	816b      	strh	r3, [r5, #10]
   27c78:	f7ff fd0c 	bl	27694 <pkt_bytes_left>
   27c7c:	b918      	cbnz	r0, 27c86 <nrf_recvfrom+0x17c>
   27c7e:	4629      	mov	r1, r5
   27c80:	4620      	mov	r0, r4
   27c82:	f7ff fbf7 	bl	27474 <sock_pkt_remove>
   27c86:	45b8      	cmp	r8, r7
   27c88:	f43f af52 	beq.w	27b30 <nrf_recvfrom+0x26>
   27c8c:	f1ba 0f00 	cmp.w	sl, #0
   27c90:	d10a      	bne.n	27ca8 <nrf_recvfrom+0x19e>
   27c92:	b976      	cbnz	r6, 27cb2 <nrf_recvfrom+0x1a8>
   27c94:	4620      	mov	r0, r4
   27c96:	f7ff fc01 	bl	2749c <sock_pkt_peek_head>
   27c9a:	e00d      	b.n	27cb8 <nrf_recvfrom+0x1ae>
   27c9c:	4620      	mov	r0, r4
   27c9e:	f7ff fc2a 	bl	274f6 <sock_is_closed>
   27ca2:	2800      	cmp	r0, #0
   27ca4:	f47f af44 	bne.w	27b30 <nrf_recvfrom+0x26>
   27ca8:	b16e      	cbz	r6, 27cc6 <nrf_recvfrom+0x1bc>
   27caa:	4628      	mov	r0, r5
   27cac:	f7ff fce5 	bl	2767a <pkt_has_next>
   27cb0:	b170      	cbz	r0, 27cd0 <nrf_recvfrom+0x1c6>
   27cb2:	4628      	mov	r0, r5
   27cb4:	f7ff fce7 	bl	27686 <pkt_peek_next>
   27cb8:	4605      	mov	r5, r0
   27cba:	2800      	cmp	r0, #0
   27cbc:	f43f af38 	beq.w	27b30 <nrf_recvfrom+0x26>
   27cc0:	eba8 0807 	sub.w	r8, r8, r7
   27cc4:	e7a7      	b.n	27c16 <nrf_recvfrom+0x10c>
   27cc6:	4620      	mov	r0, r4
   27cc8:	f7ff fbc5 	bl	27456 <sock_has_pkt>
   27ccc:	2800      	cmp	r0, #0
   27cce:	d1e1      	bne.n	27c94 <nrf_recvfrom+0x18a>
   27cd0:	2002      	movs	r0, #2
   27cd2:	a903      	add	r1, sp, #12
   27cd4:	f7f6 f83c 	bl	1dd50 <nrf_modem_os_timedwait>
   27cd8:	2800      	cmp	r0, #0
   27cda:	d0df      	beq.n	27c9c <nrf_recvfrom+0x192>
   27cdc:	f1b9 0f00 	cmp.w	r9, #0
   27ce0:	f47f af26 	bne.w	27b30 <nrf_recvfrom+0x26>
   27ce4:	e764      	b.n	27bb0 <nrf_recvfrom+0xa6>

00027ce6 <tls_setopt_role>:
   27ce6:	b508      	push	{r3, lr}
   27ce8:	b109      	cbz	r1, 27cee <tls_setopt_role+0x8>
   27cea:	2a04      	cmp	r2, #4
   27cec:	d005      	beq.n	27cfa <tls_setopt_role+0x14>
   27cee:	2016      	movs	r0, #22
   27cf0:	f7fe feb6 	bl	26a60 <nrf_modem_os_errno_set>
   27cf4:	f04f 30ff 	mov.w	r0, #4294967295
   27cf8:	e006      	b.n	27d08 <tls_setopt_role+0x22>
   27cfa:	780b      	ldrb	r3, [r1, #0]
   27cfc:	b12b      	cbz	r3, 27d0a <tls_setopt_role+0x24>
   27cfe:	2b01      	cmp	r3, #1
   27d00:	d1f5      	bne.n	27cee <tls_setopt_role+0x8>
   27d02:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   27d06:	2000      	movs	r0, #0
   27d08:	bd08      	pop	{r3, pc}
   27d0a:	2302      	movs	r3, #2
   27d0c:	e7f9      	b.n	27d02 <tls_setopt_role+0x1c>

00027d0e <tls_setopt_taglist>:
   27d0e:	b510      	push	{r4, lr}
   27d10:	f012 0403 	ands.w	r4, r2, #3
   27d14:	d100      	bne.n	27d18 <tls_setopt_taglist+0xa>
   27d16:	b92a      	cbnz	r2, 27d24 <tls_setopt_taglist+0x16>
   27d18:	2016      	movs	r0, #22
   27d1a:	f7fe fea1 	bl	26a60 <nrf_modem_os_errno_set>
   27d1e:	f04f 30ff 	mov.w	r0, #4294967295
   27d22:	bd10      	pop	{r4, pc}
   27d24:	0893      	lsrs	r3, r2, #2
   27d26:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   27d2a:	3048      	adds	r0, #72	; 0x48
   27d2c:	f000 fd35 	bl	2879a <memcpy>
   27d30:	4620      	mov	r0, r4
   27d32:	e7f6      	b.n	27d22 <tls_setopt_taglist+0x14>

00027d34 <tls_setopt_sess_cache>:
   27d34:	b508      	push	{r3, lr}
   27d36:	b109      	cbz	r1, 27d3c <tls_setopt_sess_cache+0x8>
   27d38:	2a04      	cmp	r2, #4
   27d3a:	d005      	beq.n	27d48 <tls_setopt_sess_cache+0x14>
   27d3c:	2016      	movs	r0, #22
   27d3e:	f7fe fe8f 	bl	26a60 <nrf_modem_os_errno_set>
   27d42:	f04f 30ff 	mov.w	r0, #4294967295
   27d46:	bd08      	pop	{r3, pc}
   27d48:	780b      	ldrb	r3, [r1, #0]
   27d4a:	3b00      	subs	r3, #0
   27d4c:	bf18      	it	ne
   27d4e:	2301      	movne	r3, #1
   27d50:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   27d54:	2000      	movs	r0, #0
   27d56:	e7f6      	b.n	27d46 <tls_setopt_sess_cache+0x12>

00027d58 <tls_setopt_peer_verify>:
   27d58:	b508      	push	{r3, lr}
   27d5a:	b109      	cbz	r1, 27d60 <tls_setopt_peer_verify+0x8>
   27d5c:	2a04      	cmp	r2, #4
   27d5e:	d005      	beq.n	27d6c <tls_setopt_peer_verify+0x14>
   27d60:	2016      	movs	r0, #22
   27d62:	f7fe fe7d 	bl	26a60 <nrf_modem_os_errno_set>
   27d66:	f04f 30ff 	mov.w	r0, #4294967295
   27d6a:	bd08      	pop	{r3, pc}
   27d6c:	680b      	ldr	r3, [r1, #0]
   27d6e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   27d72:	2000      	movs	r0, #0
   27d74:	e7f9      	b.n	27d6a <tls_setopt_peer_verify+0x12>

00027d76 <tls_setopt_hostname>:
   27d76:	b570      	push	{r4, r5, r6, lr}
   27d78:	4605      	mov	r5, r0
   27d7a:	4614      	mov	r4, r2
   27d7c:	460e      	mov	r6, r1
   27d7e:	b931      	cbnz	r1, 27d8e <tls_setopt_hostname+0x18>
   27d80:	b192      	cbz	r2, 27da8 <tls_setopt_hostname+0x32>
   27d82:	2016      	movs	r0, #22
   27d84:	f7fe fe6c 	bl	26a60 <nrf_modem_os_errno_set>
   27d88:	f04f 30ff 	mov.w	r0, #4294967295
   27d8c:	bd70      	pop	{r4, r5, r6, pc}
   27d8e:	2a00      	cmp	r2, #0
   27d90:	d0f7      	beq.n	27d82 <tls_setopt_hostname+0xc>
   27d92:	6c00      	ldr	r0, [r0, #64]	; 0x40
   27d94:	b108      	cbz	r0, 27d9a <tls_setopt_hostname+0x24>
   27d96:	f7f6 f8dd 	bl	1df54 <nrf_modem_os_free>
   27d9a:	1c60      	adds	r0, r4, #1
   27d9c:	f7f6 f8d2 	bl	1df44 <nrf_modem_os_alloc>
   27da0:	6428      	str	r0, [r5, #64]	; 0x40
   27da2:	b938      	cbnz	r0, 27db4 <tls_setopt_hostname+0x3e>
   27da4:	2069      	movs	r0, #105	; 0x69
   27da6:	e7ed      	b.n	27d84 <tls_setopt_hostname+0xe>
   27da8:	6c00      	ldr	r0, [r0, #64]	; 0x40
   27daa:	b108      	cbz	r0, 27db0 <tls_setopt_hostname+0x3a>
   27dac:	f7f6 f8d2 	bl	1df54 <nrf_modem_os_free>
   27db0:	2000      	movs	r0, #0
   27db2:	e7eb      	b.n	27d8c <tls_setopt_hostname+0x16>
   27db4:	4622      	mov	r2, r4
   27db6:	4631      	mov	r1, r6
   27db8:	f000 fcef 	bl	2879a <memcpy>
   27dbc:	2200      	movs	r2, #0
   27dbe:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   27dc0:	551a      	strb	r2, [r3, r4]
   27dc2:	e7f5      	b.n	27db0 <tls_setopt_hostname+0x3a>

00027dc4 <nrf_poll_one>:
   27dc4:	b538      	push	{r3, r4, r5, lr}
   27dc6:	4604      	mov	r4, r0
   27dc8:	6800      	ldr	r0, [r0, #0]
   27dca:	f7fa faa5 	bl	22318 <sock_find>
   27dce:	4605      	mov	r5, r0
   27dd0:	b928      	cbnz	r0, 27dde <nrf_poll_one+0x1a>
   27dd2:	2001      	movs	r0, #1
   27dd4:	88e3      	ldrh	r3, [r4, #6]
   27dd6:	f043 0320 	orr.w	r3, r3, #32
   27dda:	80e3      	strh	r3, [r4, #6]
   27ddc:	bd38      	pop	{r3, r4, r5, pc}
   27dde:	f7ff fb8e 	bl	274fe <sock_is_local_closed>
   27de2:	2800      	cmp	r0, #0
   27de4:	d1f5      	bne.n	27dd2 <nrf_poll_one+0xe>
   27de6:	4628      	mov	r0, r5
   27de8:	f7ff fb9b 	bl	27522 <sock_has_error>
   27dec:	b1f8      	cbz	r0, 27e2e <nrf_poll_one+0x6a>
   27dee:	88e3      	ldrh	r3, [r4, #6]
   27df0:	f043 0308 	orr.w	r3, r3, #8
   27df4:	80e3      	strh	r3, [r4, #6]
   27df6:	88a3      	ldrh	r3, [r4, #4]
   27df8:	07da      	lsls	r2, r3, #31
   27dfa:	d507      	bpl.n	27e0c <nrf_poll_one+0x48>
   27dfc:	4628      	mov	r0, r5
   27dfe:	f7ff fba6 	bl	2754e <sock_can_read>
   27e02:	b1e8      	cbz	r0, 27e40 <nrf_poll_one+0x7c>
   27e04:	88e3      	ldrh	r3, [r4, #6]
   27e06:	f043 0301 	orr.w	r3, r3, #1
   27e0a:	80e3      	strh	r3, [r4, #6]
   27e0c:	88a3      	ldrh	r3, [r4, #4]
   27e0e:	075b      	lsls	r3, r3, #29
   27e10:	d507      	bpl.n	27e22 <nrf_poll_one+0x5e>
   27e12:	4628      	mov	r0, r5
   27e14:	f7ff fba5 	bl	27562 <sock_can_send>
   27e18:	b118      	cbz	r0, 27e22 <nrf_poll_one+0x5e>
   27e1a:	88e3      	ldrh	r3, [r4, #6]
   27e1c:	f043 0304 	orr.w	r3, r3, #4
   27e20:	80e3      	strh	r3, [r4, #6]
   27e22:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   27e26:	3800      	subs	r0, #0
   27e28:	bf18      	it	ne
   27e2a:	2001      	movne	r0, #1
   27e2c:	e7d6      	b.n	27ddc <nrf_poll_one+0x18>
   27e2e:	4628      	mov	r0, r5
   27e30:	f7ff fb69 	bl	27506 <sock_is_eof>
   27e34:	2800      	cmp	r0, #0
   27e36:	d0de      	beq.n	27df6 <nrf_poll_one+0x32>
   27e38:	88e3      	ldrh	r3, [r4, #6]
   27e3a:	f043 0310 	orr.w	r3, r3, #16
   27e3e:	e7d9      	b.n	27df4 <nrf_poll_one+0x30>
   27e40:	4628      	mov	r0, r5
   27e42:	f7ff fb89 	bl	27558 <sock_can_accept>
   27e46:	2800      	cmp	r0, #0
   27e48:	d1dc      	bne.n	27e04 <nrf_poll_one+0x40>
   27e4a:	4628      	mov	r0, r5
   27e4c:	f7ff fb5b 	bl	27506 <sock_is_eof>
   27e50:	2800      	cmp	r0, #0
   27e52:	d1d7      	bne.n	27e04 <nrf_poll_one+0x40>
   27e54:	e7da      	b.n	27e0c <nrf_poll_one+0x48>

00027e56 <nrf_fcntl>:
   27e56:	b538      	push	{r3, r4, r5, lr}
   27e58:	460d      	mov	r5, r1
   27e5a:	4614      	mov	r4, r2
   27e5c:	f7fa fa5c 	bl	22318 <sock_find>
   27e60:	b928      	cbnz	r0, 27e6e <nrf_fcntl+0x18>
   27e62:	2009      	movs	r0, #9
   27e64:	f7fe fdfc 	bl	26a60 <nrf_modem_os_errno_set>
   27e68:	f04f 30ff 	mov.w	r0, #4294967295
   27e6c:	e006      	b.n	27e7c <nrf_fcntl+0x26>
   27e6e:	2d03      	cmp	r5, #3
   27e70:	d003      	beq.n	27e7a <nrf_fcntl+0x24>
   27e72:	2d04      	cmp	r5, #4
   27e74:	d003      	beq.n	27e7e <nrf_fcntl+0x28>
   27e76:	2016      	movs	r0, #22
   27e78:	e7f4      	b.n	27e64 <nrf_fcntl+0xe>
   27e7a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   27e7c:	bd38      	pop	{r3, r4, r5, pc}
   27e7e:	2c01      	cmp	r4, #1
   27e80:	d8f9      	bhi.n	27e76 <nrf_fcntl+0x20>
   27e82:	63c4      	str	r4, [r0, #60]	; 0x3c
   27e84:	2000      	movs	r0, #0
   27e86:	e7f9      	b.n	27e7c <nrf_fcntl+0x26>

00027e88 <rpc_af_to_nrf_af>:
   27e88:	1f43      	subs	r3, r0, #5
   27e8a:	2b00      	cmp	r3, #0
   27e8c:	d803      	bhi.n	27e96 <rpc_af_to_nrf_af+0xe>
   27e8e:	e8df f003 	tbb	[pc, r3]
   27e92:	01          	.byte	0x01
   27e93:	00          	.byte	0x00
   27e94:	2003      	movs	r0, #3
   27e96:	4770      	bx	lr

00027e98 <nrf_type_to_rpc_type>:
   27e98:	4770      	bx	lr

00027e9a <nrf_proto_to_rpc_proto>:
   27e9a:	2829      	cmp	r0, #41	; 0x29
   27e9c:	d015      	beq.n	27eca <nrf_proto_to_rpc_proto+0x30>
   27e9e:	dc05      	bgt.n	27eac <nrf_proto_to_rpc_proto+0x12>
   27ea0:	2806      	cmp	r0, #6
   27ea2:	d014      	beq.n	27ece <nrf_proto_to_rpc_proto+0x34>
   27ea4:	2811      	cmp	r0, #17
   27ea6:	d014      	beq.n	27ed2 <nrf_proto_to_rpc_proto+0x38>
   27ea8:	b148      	cbz	r0, 27ebe <nrf_proto_to_rpc_proto+0x24>
   27eaa:	4770      	bx	lr
   27eac:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   27eb0:	d00d      	beq.n	27ece <nrf_proto_to_rpc_proto+0x34>
   27eb2:	f240 1311 	movw	r3, #273	; 0x111
   27eb6:	4298      	cmp	r0, r3
   27eb8:	d00b      	beq.n	27ed2 <nrf_proto_to_rpc_proto+0x38>
   27eba:	28ff      	cmp	r0, #255	; 0xff
   27ebc:	d10c      	bne.n	27ed8 <nrf_proto_to_rpc_proto+0x3e>
   27ebe:	2901      	cmp	r1, #1
   27ec0:	d009      	beq.n	27ed6 <nrf_proto_to_rpc_proto+0x3c>
   27ec2:	2902      	cmp	r1, #2
   27ec4:	bf08      	it	eq
   27ec6:	2002      	moveq	r0, #2
   27ec8:	4770      	bx	lr
   27eca:	2006      	movs	r0, #6
   27ecc:	4770      	bx	lr
   27ece:	2001      	movs	r0, #1
   27ed0:	4770      	bx	lr
   27ed2:	2002      	movs	r0, #2
   27ed4:	4770      	bx	lr
   27ed6:	4608      	mov	r0, r1
   27ed8:	4770      	bx	lr

00027eda <nrf_sol_to_rpc_sol>:
   27eda:	2829      	cmp	r0, #41	; 0x29
   27edc:	d011      	beq.n	27f02 <nrf_sol_to_rpc_sol+0x28>
   27ede:	dc0a      	bgt.n	27ef6 <nrf_sol_to_rpc_sol+0x1c>
   27ee0:	2801      	cmp	r0, #1
   27ee2:	d010      	beq.n	27f06 <nrf_sol_to_rpc_sol+0x2c>
   27ee4:	2806      	cmp	r0, #6
   27ee6:	d010      	beq.n	27f0a <nrf_sol_to_rpc_sol+0x30>
   27ee8:	2800      	cmp	r0, #0
   27eea:	bf08      	it	eq
   27eec:	2004      	moveq	r0, #4
   27eee:	bf18      	it	ne
   27ef0:	f04f 30ff 	movne.w	r0, #4294967295
   27ef4:	4770      	bx	lr
   27ef6:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   27efa:	d008      	beq.n	27f0e <nrf_sol_to_rpc_sol+0x34>
   27efc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   27f00:	e7f5      	b.n	27eee <nrf_sol_to_rpc_sol+0x14>
   27f02:	2006      	movs	r0, #6
   27f04:	4770      	bx	lr
   27f06:	2008      	movs	r0, #8
   27f08:	4770      	bx	lr
   27f0a:	2001      	movs	r0, #1
   27f0c:	4770      	bx	lr
   27f0e:	f44f 7080 	mov.w	r0, #256	; 0x100
   27f12:	4770      	bx	lr

00027f14 <rpc_error_to_nrf_gai_errno>:
   27f14:	b508      	push	{r3, lr}
   27f16:	1f03      	subs	r3, r0, #4
   27f18:	2b09      	cmp	r3, #9
   27f1a:	d80f      	bhi.n	27f3c <rpc_error_to_nrf_gai_errno+0x28>
   27f1c:	e8df f003 	tbb	[pc, r3]
   27f20:	0e051108 	.word	0x0e051108
   27f24:	0e0e0e0e 	.word	0x0e0e0e0e
   27f28:	050e      	.short	0x050e
   27f2a:	f06f 0001 	mvn.w	r0, #1
   27f2e:	bd08      	pop	{r3, pc}
   27f30:	2073      	movs	r0, #115	; 0x73
   27f32:	f7fe fd95 	bl	26a60 <nrf_modem_os_errno_set>
   27f36:	f06f 000a 	mvn.w	r0, #10
   27f3a:	e7f8      	b.n	27f2e <rpc_error_to_nrf_gai_errno+0x1a>
   27f3c:	f7fb f940 	bl	231c0 <rpc_error_to_nrf_errno>
   27f40:	e7f7      	b.n	27f32 <rpc_error_to_nrf_gai_errno+0x1e>
   27f42:	f06f 0063 	mvn.w	r0, #99	; 0x63
   27f46:	e7f2      	b.n	27f2e <rpc_error_to_nrf_gai_errno+0x1a>

00027f48 <req_forward>:
   27f48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   27f4a:	2300      	movs	r3, #0
   27f4c:	460a      	mov	r2, r1
   27f4e:	f04f 31ff 	mov.w	r1, #4294967295
   27f52:	9303      	str	r3, [sp, #12]
   27f54:	68d6      	ldr	r6, [r2, #12]
   27f56:	ac02      	add	r4, sp, #8
   27f58:	9302      	str	r3, [sp, #8]
   27f5a:	9101      	str	r1, [sp, #4]
   27f5c:	b18e      	cbz	r6, 27f82 <req_forward+0x3a>
   27f5e:	4634      	mov	r4, r6
   27f60:	b281      	uxth	r1, r0
   27f62:	6023      	str	r3, [r4, #0]
   27f64:	2004      	movs	r0, #4
   27f66:	f7ff fa0d 	bl	27384 <rpc_client_msg_send>
   27f6a:	6823      	ldr	r3, [r4, #0]
   27f6c:	b15b      	cbz	r3, 27f86 <req_forward+0x3e>
   27f6e:	6958      	ldr	r0, [r3, #20]
   27f70:	f7fb f926 	bl	231c0 <rpc_error_to_nrf_errno>
   27f74:	4605      	mov	r5, r0
   27f76:	b106      	cbz	r6, 27f7a <req_forward+0x32>
   27f78:	b170      	cbz	r0, 27f98 <req_forward+0x50>
   27f7a:	6820      	ldr	r0, [r4, #0]
   27f7c:	f7ff fa09 	bl	27392 <rpc_client_msg_rx_free>
   27f80:	e00a      	b.n	27f98 <req_forward+0x50>
   27f82:	60d4      	str	r4, [r2, #12]
   27f84:	e7ec      	b.n	27f60 <req_forward+0x18>
   27f86:	2002      	movs	r0, #2
   27f88:	a901      	add	r1, sp, #4
   27f8a:	f7f5 fee1 	bl	1dd50 <nrf_modem_os_timedwait>
   27f8e:	2800      	cmp	r0, #0
   27f90:	d0eb      	beq.n	27f6a <req_forward+0x22>
   27f92:	f000 fbe0 	bl	28756 <abs>
   27f96:	4605      	mov	r5, r0
   27f98:	4628      	mov	r0, r5
   27f9a:	b004      	add	sp, #16
   27f9c:	bd70      	pop	{r4, r5, r6, pc}

00027f9e <req_cookie_set>:
   27f9e:	60c1      	str	r1, [r0, #12]
   27fa0:	4770      	bx	lr

00027fa2 <res_cookie_get>:
   27fa2:	68c0      	ldr	r0, [r0, #12]
   27fa4:	4770      	bx	lr

00027fa6 <res_forward>:
   27fa6:	68c3      	ldr	r3, [r0, #12]
   27fa8:	6018      	str	r0, [r3, #0]
   27faa:	2001      	movs	r0, #1
   27fac:	4770      	bx	lr

00027fae <rpc_dfu_event_handler>:
   27fae:	b510      	push	{r4, lr}
   27fb0:	4604      	mov	r4, r0
   27fb2:	6800      	ldr	r0, [r0, #0]
   27fb4:	b108      	cbz	r0, 27fba <rpc_dfu_event_handler+0xc>
   27fb6:	f7ff f9ef 	bl	27398 <rpc_client_msg_data_rx_free>
   27fba:	68e0      	ldr	r0, [r4, #12]
   27fbc:	b108      	cbz	r0, 27fc2 <rpc_dfu_event_handler+0x14>
   27fbe:	6004      	str	r4, [r0, #0]
   27fc0:	2001      	movs	r0, #1
   27fc2:	bd10      	pop	{r4, pc}

00027fc4 <nrf_modem_is_initialized>:
   27fc4:	f7fb bc02 	b.w	237cc <nrf_modem_state_is_initialized>

00027fc8 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   27fc8:	4770      	bx	lr

00027fca <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   27fca:	b140      	cbz	r0, 27fde <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   27fcc:	68c3      	ldr	r3, [r0, #12]
   27fce:	7858      	ldrb	r0, [r3, #1]
   27fd0:	f010 0001 	ands.w	r0, r0, #1
   27fd4:	bf1e      	ittt	ne
   27fd6:	7818      	ldrbne	r0, [r3, #0]
   27fd8:	fab0 f080 	clzne	r0, r0
   27fdc:	0940      	lsrne	r0, r0, #5
}
   27fde:	4770      	bx	lr

00027fe0 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   27fe0:	f000 bbe8 	b.w	287b4 <memset>

00027fe4 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27fe4:	f000 bbd9 	b.w	2879a <memcpy>

00027fe8 <k_heap_init>:
{
   27fe8:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   27fea:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   27fee:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   27ff2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   27ff4:	f7fd bdf8 	b.w	25be8 <sys_heap_init>

00027ff8 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   27ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ffc:	b085      	sub	sp, #20
   27ffe:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   28002:	4607      	mov	r7, r0
   28004:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   28006:	4650      	mov	r0, sl
   28008:	4621      	mov	r1, r4
{
   2800a:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2800c:	f000 faa7 	bl	2855e <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   28010:	f1b4 3fff 	cmp.w	r4, #4294967295
   28014:	bf08      	it	eq
   28016:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2801a:	4605      	mov	r5, r0
   2801c:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2801e:	bf04      	itt	eq
   28020:	f04f 35ff 	moveq.w	r5, #4294967295
   28024:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   28028:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   2802c:	f04f 0320 	mov.w	r3, #32
   28030:	f3ef 8411 	mrs	r4, BASEPRI
   28034:	f383 8812 	msr	BASEPRI_MAX, r3
   28038:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2803c:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   28040:	464a      	mov	r2, r9
   28042:	4641      	mov	r1, r8
   28044:	4638      	mov	r0, r7
   28046:	f7fd fd68 	bl	25b1a <sys_heap_aligned_alloc>
   2804a:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2804c:	f7fc fda6 	bl	24b9c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   28050:	9b03      	ldr	r3, [sp, #12]
   28052:	b13b      	cbz	r3, 28064 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   28054:	f384 8811 	msr	BASEPRI, r4
   28058:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2805c:	4618      	mov	r0, r3
   2805e:	b005      	add	sp, #20
   28060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   28064:	1a28      	subs	r0, r5, r0
   28066:	eb66 0101 	sbc.w	r1, r6, r1
   2806a:	2801      	cmp	r0, #1
   2806c:	f171 0200 	sbcs.w	r2, r1, #0
   28070:	dbf0      	blt.n	28054 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   28072:	e9cd 0100 	strd	r0, r1, [sp]
   28076:	465a      	mov	r2, fp
   28078:	4621      	mov	r1, r4
   2807a:	4650      	mov	r0, sl
   2807c:	f7fc fa36 	bl	244ec <z_pend_curr>
	__asm__ volatile(
   28080:	f04f 0320 	mov.w	r3, #32
   28084:	f3ef 8411 	mrs	r4, BASEPRI
   28088:	f383 8812 	msr	BASEPRI_MAX, r3
   2808c:	f3bf 8f6f 	isb	sy
	return k;
   28090:	e7d6      	b.n	28040 <k_heap_aligned_alloc+0x48>

00028092 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   28092:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   28094:	e9cd 2300 	strd	r2, r3, [sp]
   28098:	460a      	mov	r2, r1
   2809a:	2104      	movs	r1, #4
   2809c:	f7ff ffac 	bl	27ff8 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   280a0:	b003      	add	sp, #12
   280a2:	f85d fb04 	ldr.w	pc, [sp], #4

000280a6 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   280a6:	b538      	push	{r3, r4, r5, lr}
   280a8:	4604      	mov	r4, r0
   280aa:	f04f 0320 	mov.w	r3, #32
   280ae:	f3ef 8511 	mrs	r5, BASEPRI
   280b2:	f383 8812 	msr	BASEPRI_MAX, r3
   280b6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   280ba:	f7fd fcf6 	bl	25aaa <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   280be:	f104 000c 	add.w	r0, r4, #12
   280c2:	f000 f9cd 	bl	28460 <z_unpend_all>
   280c6:	b130      	cbz	r0, 280d6 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   280c8:	4629      	mov	r1, r5
   280ca:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   280ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   280d2:	f7fc ba6f 	b.w	245b4 <z_reschedule>
	__asm__ volatile(
   280d6:	f385 8811 	msr	BASEPRI, r5
   280da:	f3bf 8f6f 	isb	sy
}
   280de:	bd38      	pop	{r3, r4, r5, pc}

000280e0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   280e0:	f3ef 8005 	mrs	r0, IPSR
}
   280e4:	3800      	subs	r0, #0
   280e6:	bf18      	it	ne
   280e8:	2001      	movne	r0, #1
   280ea:	4770      	bx	lr

000280ec <z_impl_k_thread_name_set>:
}
   280ec:	f06f 0057 	mvn.w	r0, #87	; 0x57
   280f0:	4770      	bx	lr

000280f2 <k_thread_name_get>:
}
   280f2:	2000      	movs	r0, #0
   280f4:	4770      	bx	lr

000280f6 <z_impl_k_thread_start>:
	z_sched_start(thread);
   280f6:	f7fc ba6f 	b.w	245d8 <z_sched_start>

000280fa <z_pm_save_idle_exit>:
{
   280fa:	b508      	push	{r3, lr}
	pm_system_resume();
   280fc:	f7f3 f910 	bl	1b320 <pm_system_resume>
}
   28100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   28104:	f7fe bc86 	b.w	26a14 <sys_clock_idle_exit>

00028108 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   28108:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2810c:	428b      	cmp	r3, r1
   2810e:	d001      	beq.n	28114 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   28110:	f7fc ba0a 	b.w	24528 <z_set_prio>
}
   28114:	2000      	movs	r0, #0
   28116:	4770      	bx	lr

00028118 <z_impl_k_mutex_init>:
{
   28118:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2811a:	2000      	movs	r0, #0
   2811c:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   28120:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   28124:	4770      	bx	lr

00028126 <queue_insert>:
{
   28126:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2812a:	4699      	mov	r9, r3
   2812c:	4604      	mov	r4, r0
   2812e:	460d      	mov	r5, r1
   28130:	4690      	mov	r8, r2
   28132:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   28136:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2813a:	f04f 0220 	mov.w	r2, #32
   2813e:	f3ef 8711 	mrs	r7, BASEPRI
   28142:	f382 8812 	msr	BASEPRI_MAX, r2
   28146:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2814a:	b103      	cbz	r3, 2814e <queue_insert+0x28>
	return list->tail;
   2814c:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2814e:	4630      	mov	r0, r6
   28150:	f000 f940 	bl	283d4 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   28154:	b158      	cbz	r0, 2816e <queue_insert+0x48>
   28156:	2300      	movs	r3, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   28158:	f8c0 8014 	str.w	r8, [r0, #20]
   2815c:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2815e:	f000 f902 	bl	28366 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   28162:	4630      	mov	r0, r6
   28164:	4639      	mov	r1, r7
   28166:	f7fc fa25 	bl	245b4 <z_reschedule>
		return 0;
   2816a:	2000      	movs	r0, #0
   2816c:	e00c      	b.n	28188 <queue_insert+0x62>
	if (alloc) {
   2816e:	f1b9 0f00 	cmp.w	r9, #0
   28172:	d01b      	beq.n	281ac <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   28174:	2108      	movs	r1, #8
   28176:	f7fc fe17 	bl	24da8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2817a:	b938      	cbnz	r0, 2818c <queue_insert+0x66>
	__asm__ volatile(
   2817c:	f387 8811 	msr	BASEPRI, r7
   28180:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   28184:	f06f 000b 	mvn.w	r0, #11
}
   28188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2818c:	2201      	movs	r2, #1
		anode->data = data;
   2818e:	f8c0 8004 	str.w	r8, [r0, #4]
   28192:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28194:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28196:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2819a:	b95d      	cbnz	r5, 281b4 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2819c:	6822      	ldr	r2, [r4, #0]
   2819e:	430a      	orrs	r2, r1
   281a0:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   281a2:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   281a4:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   281a6:	b96a      	cbnz	r2, 281c4 <queue_insert+0x9e>
	list->tail = node;
   281a8:	6060      	str	r0, [r4, #4]
}
   281aa:	e00b      	b.n	281c4 <queue_insert+0x9e>
}
   281ac:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   281ae:	f8c8 9000 	str.w	r9, [r8]
}
   281b2:	e7ef      	b.n	28194 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   281b4:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   281b6:	2a03      	cmp	r2, #3
   281b8:	d810      	bhi.n	281dc <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   281ba:	6001      	str	r1, [r0, #0]
	return list->tail;
   281bc:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   281be:	b939      	cbnz	r1, 281d0 <queue_insert+0xaa>
	list->head = node;
   281c0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   281c4:	2104      	movs	r1, #4
   281c6:	f104 0010 	add.w	r0, r4, #16
   281ca:	f000 fa7c 	bl	286c6 <z_handle_obj_poll_events>
   281ce:	e7c8      	b.n	28162 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   281d0:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   281d2:	f002 0203 	and.w	r2, r2, #3
   281d6:	4302      	orrs	r2, r0
   281d8:	600a      	str	r2, [r1, #0]
   281da:	e7e5      	b.n	281a8 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   281dc:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   281e0:	430a      	orrs	r2, r1
   281e2:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   281e4:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   281e6:	f002 0203 	and.w	r2, r2, #3
   281ea:	ea40 0302 	orr.w	r3, r0, r2
   281ee:	602b      	str	r3, [r5, #0]
}
   281f0:	e7e8      	b.n	281c4 <queue_insert+0x9e>

000281f2 <z_queue_node_peek>:
{
   281f2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   281f4:	4604      	mov	r4, r0
   281f6:	b130      	cbz	r0, 28206 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   281f8:	6802      	ldr	r2, [r0, #0]
   281fa:	0793      	lsls	r3, r2, #30
   281fc:	d003      	beq.n	28206 <z_queue_node_peek+0x14>
		ret = anode->data;
   281fe:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   28200:	b109      	cbz	r1, 28206 <z_queue_node_peek+0x14>
			k_free(anode);
   28202:	f000 fa8b 	bl	2871c <k_free>
}
   28206:	4620      	mov	r0, r4
   28208:	bd10      	pop	{r4, pc}

0002820a <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2820a:	2301      	movs	r3, #1
{
   2820c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2820e:	9300      	str	r3, [sp, #0]
   28210:	2300      	movs	r3, #0
{
   28212:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   28214:	4619      	mov	r1, r3
   28216:	f7ff ff86 	bl	28126 <queue_insert>
}
   2821a:	b003      	add	sp, #12
   2821c:	f85d fb04 	ldr.w	pc, [sp], #4

00028220 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   28220:	b15a      	cbz	r2, 2823a <z_impl_k_sem_init+0x1a>
   28222:	428a      	cmp	r2, r1
   28224:	d309      	bcc.n	2823a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   28226:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2822a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2822e:	e9c0 0000 	strd	r0, r0, [r0]
   28232:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   28236:	2000      	movs	r0, #0
   28238:	4770      	bx	lr
		return -EINVAL;
   2823a:	f06f 0015 	mvn.w	r0, #21
}
   2823e:	4770      	bx	lr

00028240 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   28240:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   28242:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   28244:	408b      	lsls	r3, r1
   28246:	ea22 0303 	bic.w	r3, r2, r3
   2824a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2824c:	fa22 f001 	lsr.w	r0, r2, r1
}
   28250:	f000 0001 	and.w	r0, r0, #1
   28254:	4770      	bx	lr

00028256 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   28256:	b120      	cbz	r0, 28262 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   28258:	2200      	movs	r2, #0
   2825a:	3090      	adds	r0, #144	; 0x90
   2825c:	4611      	mov	r1, r2
   2825e:	f000 b90f 	b.w	28480 <z_sched_wake>
}
   28262:	4770      	bx	lr

00028264 <z_work_submit_to_queue>:
{
   28264:	b513      	push	{r0, r1, r4, lr}
   28266:	9001      	str	r0, [sp, #4]
   28268:	4608      	mov	r0, r1
	__asm__ volatile(
   2826a:	f04f 0320 	mov.w	r3, #32
   2826e:	f3ef 8411 	mrs	r4, BASEPRI
   28272:	f383 8812 	msr	BASEPRI_MAX, r3
   28276:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2827a:	a901      	add	r1, sp, #4
   2827c:	f7fb ff5a 	bl	24134 <submit_to_queue_locked>
	__asm__ volatile(
   28280:	f384 8811 	msr	BASEPRI, r4
   28284:	f3bf 8f6f 	isb	sy
}
   28288:	b002      	add	sp, #8
   2828a:	bd10      	pop	{r4, pc}

0002828c <k_work_submit_to_queue>:
{
   2828c:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2828e:	f7ff ffe9 	bl	28264 <z_work_submit_to_queue>
	if (ret > 0) {
   28292:	1e04      	subs	r4, r0, #0
   28294:	dd09      	ble.n	282aa <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   28296:	f04f 0320 	mov.w	r3, #32
   2829a:	f3ef 8011 	mrs	r0, BASEPRI
   2829e:	f383 8812 	msr	BASEPRI_MAX, r3
   282a2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   282a6:	f000 f8c5 	bl	28434 <z_reschedule_irqlock>
}
   282aa:	4620      	mov	r0, r4
   282ac:	bd10      	pop	{r4, pc}

000282ae <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   282ae:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   282b2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   282b4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   282b6:	2300      	movs	r3, #0
	node->prev = NULL;
   282b8:	e9c0 3300 	strd	r3, r3, [r0]
}
   282bc:	4770      	bx	lr

000282be <unpend_thread_no_timeout>:
{
   282be:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   282c0:	f7ff fff5 	bl	282ae <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   282c4:	7b43      	ldrb	r3, [r0, #13]
   282c6:	f023 0302 	bic.w	r3, r3, #2
   282ca:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   282cc:	2300      	movs	r3, #0
   282ce:	6083      	str	r3, [r0, #8]
}
   282d0:	bd08      	pop	{r3, pc}

000282d2 <z_thread_timeout>:
{
   282d2:	4601      	mov	r1, r0
   282d4:	b510      	push	{r4, lr}
   282d6:	f04f 0320 	mov.w	r3, #32
   282da:	f3ef 8411 	mrs	r4, BASEPRI
   282de:	f383 8812 	msr	BASEPRI_MAX, r3
   282e2:	f3bf 8f6f 	isb	sy
		if (!killed) {
   282e6:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   282ea:	f013 0f28 	tst.w	r3, #40	; 0x28
   282ee:	d10d      	bne.n	2830c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   282f0:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   282f4:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   282f6:	b10b      	cbz	r3, 282fc <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   282f8:	f7ff ffe1 	bl	282be <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   282fc:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   28300:	f023 0314 	bic.w	r3, r3, #20
   28304:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   28308:	f7fc f818 	bl	2433c <ready_thread>
	__asm__ volatile(
   2830c:	f384 8811 	msr	BASEPRI, r4
   28310:	f3bf 8f6f 	isb	sy
}
   28314:	bd10      	pop	{r4, pc}

00028316 <add_to_waitq_locked>:
{
   28316:	b538      	push	{r3, r4, r5, lr}
   28318:	4604      	mov	r4, r0
   2831a:	460d      	mov	r5, r1
	unready_thread(thread);
   2831c:	f7fc f842 	bl	243a4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   28320:	7b63      	ldrb	r3, [r4, #13]
   28322:	f043 0302 	orr.w	r3, r3, #2
   28326:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   28328:	b1e5      	cbz	r5, 28364 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   2832a:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   2832c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2832e:	429d      	cmp	r5, r3
   28330:	d109      	bne.n	28346 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   28332:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   28334:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   28338:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2833a:	606c      	str	r4, [r5, #4]
}
   2833c:	e012      	b.n	28364 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   2833e:	686a      	ldr	r2, [r5, #4]
   28340:	4293      	cmp	r3, r2
   28342:	d0f6      	beq.n	28332 <add_to_waitq_locked+0x1c>
   28344:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28346:	2b00      	cmp	r3, #0
   28348:	d0f3      	beq.n	28332 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   2834a:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2834e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   28352:	428a      	cmp	r2, r1
   28354:	d0f3      	beq.n	2833e <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   28356:	4291      	cmp	r1, r2
   28358:	ddf1      	ble.n	2833e <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   2835a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2835c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   28360:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   28362:	605c      	str	r4, [r3, #4]
}
   28364:	bd38      	pop	{r3, r4, r5, pc}

00028366 <z_ready_thread>:
{
   28366:	b510      	push	{r4, lr}
	__asm__ volatile(
   28368:	f04f 0320 	mov.w	r3, #32
   2836c:	f3ef 8411 	mrs	r4, BASEPRI
   28370:	f383 8812 	msr	BASEPRI_MAX, r3
   28374:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   28378:	f7fb ffe0 	bl	2433c <ready_thread>
	__asm__ volatile(
   2837c:	f384 8811 	msr	BASEPRI, r4
   28380:	f3bf 8f6f 	isb	sy
}
   28384:	bd10      	pop	{r4, pc}

00028386 <z_unpend_thread_no_timeout>:
{
   28386:	b508      	push	{r3, lr}
	__asm__ volatile(
   28388:	f04f 0320 	mov.w	r3, #32
   2838c:	f3ef 8111 	mrs	r1, BASEPRI
   28390:	f383 8812 	msr	BASEPRI_MAX, r3
   28394:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   28398:	f7ff ff91 	bl	282be <unpend_thread_no_timeout>
	__asm__ volatile(
   2839c:	f381 8811 	msr	BASEPRI, r1
   283a0:	f3bf 8f6f 	isb	sy
}
   283a4:	bd08      	pop	{r3, pc}

000283a6 <z_unpend1_no_timeout>:
{
   283a6:	b508      	push	{r3, lr}
   283a8:	4603      	mov	r3, r0
	__asm__ volatile(
   283aa:	f04f 0220 	mov.w	r2, #32
   283ae:	f3ef 8111 	mrs	r1, BASEPRI
   283b2:	f382 8812 	msr	BASEPRI_MAX, r2
   283b6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   283ba:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   283bc:	4283      	cmp	r3, r0
   283be:	d007      	beq.n	283d0 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   283c0:	b108      	cbz	r0, 283c6 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   283c2:	f7ff ff7c 	bl	282be <unpend_thread_no_timeout>
	__asm__ volatile(
   283c6:	f381 8811 	msr	BASEPRI, r1
   283ca:	f3bf 8f6f 	isb	sy
}
   283ce:	bd08      	pop	{r3, pc}
   283d0:	2000      	movs	r0, #0
   283d2:	e7f8      	b.n	283c6 <z_unpend1_no_timeout+0x20>

000283d4 <z_unpend_first_thread>:
{
   283d4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   283d6:	f04f 0320 	mov.w	r3, #32
   283da:	f3ef 8511 	mrs	r5, BASEPRI
   283de:	f383 8812 	msr	BASEPRI_MAX, r3
   283e2:	f3bf 8f6f 	isb	sy
	return list->head == list;
   283e6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   283e8:	42a0      	cmp	r0, r4
   283ea:	d00d      	beq.n	28408 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   283ec:	b134      	cbz	r4, 283fc <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   283ee:	4620      	mov	r0, r4
   283f0:	f7ff ff65 	bl	282be <unpend_thread_no_timeout>
   283f4:	f104 0018 	add.w	r0, r4, #24
   283f8:	f000 f865 	bl	284c6 <z_abort_timeout>
	__asm__ volatile(
   283fc:	f385 8811 	msr	BASEPRI, r5
   28400:	f3bf 8f6f 	isb	sy
}
   28404:	4620      	mov	r0, r4
   28406:	bd38      	pop	{r3, r4, r5, pc}
   28408:	2400      	movs	r4, #0
   2840a:	e7f7      	b.n	283fc <z_unpend_first_thread+0x28>

0002840c <z_unpend_thread>:
{
   2840c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2840e:	f04f 0320 	mov.w	r3, #32
   28412:	f3ef 8411 	mrs	r4, BASEPRI
   28416:	f383 8812 	msr	BASEPRI_MAX, r3
   2841a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2841e:	f7ff ff4e 	bl	282be <unpend_thread_no_timeout>
	__asm__ volatile(
   28422:	f384 8811 	msr	BASEPRI, r4
   28426:	f3bf 8f6f 	isb	sy
}
   2842a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2842e:	3018      	adds	r0, #24
   28430:	f000 b849 	b.w	284c6 <z_abort_timeout>

00028434 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   28434:	4603      	mov	r3, r0
   28436:	b920      	cbnz	r0, 28442 <z_reschedule_irqlock+0xe>
   28438:	f3ef 8205 	mrs	r2, IPSR
   2843c:	b90a      	cbnz	r2, 28442 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2843e:	f7f3 b9af 	b.w	1b7a0 <arch_swap>
   28442:	f383 8811 	msr	BASEPRI, r3
   28446:	f3bf 8f6f 	isb	sy
}
   2844a:	4770      	bx	lr

0002844c <z_reschedule_unlocked>:
	__asm__ volatile(
   2844c:	f04f 0320 	mov.w	r3, #32
   28450:	f3ef 8011 	mrs	r0, BASEPRI
   28454:	f383 8812 	msr	BASEPRI_MAX, r3
   28458:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2845c:	f7ff bfea 	b.w	28434 <z_reschedule_irqlock>

00028460 <z_unpend_all>:
{
   28460:	b538      	push	{r3, r4, r5, lr}
   28462:	4605      	mov	r5, r0
	int need_sched = 0;
   28464:	2000      	movs	r0, #0
	return list->head == list;
   28466:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28468:	42a5      	cmp	r5, r4
   2846a:	d000      	beq.n	2846e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2846c:	b904      	cbnz	r4, 28470 <z_unpend_all+0x10>
}
   2846e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   28470:	4620      	mov	r0, r4
   28472:	f7ff ffcb 	bl	2840c <z_unpend_thread>
		z_ready_thread(thread);
   28476:	4620      	mov	r0, r4
   28478:	f7ff ff75 	bl	28366 <z_ready_thread>
		need_sched = 1;
   2847c:	2001      	movs	r0, #1
   2847e:	e7f2      	b.n	28466 <z_unpend_all+0x6>

00028480 <z_sched_wake>:
{
   28480:	b538      	push	{r3, r4, r5, lr}
   28482:	f04f 0320 	mov.w	r3, #32
   28486:	f3ef 8511 	mrs	r5, BASEPRI
   2848a:	f383 8812 	msr	BASEPRI_MAX, r3
   2848e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   28492:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28494:	42a0      	cmp	r0, r4
   28496:	d012      	beq.n	284be <z_sched_wake+0x3e>
		if (thread != NULL) {
   28498:	b19c      	cbz	r4, 284c2 <z_sched_wake+0x42>
   2849a:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   2849c:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   2849e:	4620      	mov	r0, r4
   284a0:	f7ff ff0d 	bl	282be <unpend_thread_no_timeout>
   284a4:	f104 0018 	add.w	r0, r4, #24
   284a8:	f000 f80d 	bl	284c6 <z_abort_timeout>
			ready_thread(thread);
   284ac:	4620      	mov	r0, r4
   284ae:	f7fb ff45 	bl	2433c <ready_thread>
			ret = true;
   284b2:	2001      	movs	r0, #1
	__asm__ volatile(
   284b4:	f385 8811 	msr	BASEPRI, r5
   284b8:	f3bf 8f6f 	isb	sy
}
   284bc:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   284be:	2000      	movs	r0, #0
   284c0:	e7f8      	b.n	284b4 <z_sched_wake+0x34>
   284c2:	4620      	mov	r0, r4
   284c4:	e7f6      	b.n	284b4 <z_sched_wake+0x34>

000284c6 <z_abort_timeout>:
{
   284c6:	b510      	push	{r4, lr}
	__asm__ volatile(
   284c8:	f04f 0220 	mov.w	r2, #32
   284cc:	f3ef 8411 	mrs	r4, BASEPRI
   284d0:	f382 8812 	msr	BASEPRI_MAX, r2
   284d4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   284d8:	6803      	ldr	r3, [r0, #0]
   284da:	b13b      	cbz	r3, 284ec <z_abort_timeout+0x26>
			remove_timeout(to);
   284dc:	f7fc fa68 	bl	249b0 <remove_timeout>
			ret = 0;
   284e0:	2000      	movs	r0, #0
	__asm__ volatile(
   284e2:	f384 8811 	msr	BASEPRI, r4
   284e6:	f3bf 8f6f 	isb	sy
}
   284ea:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   284ec:	f06f 0015 	mvn.w	r0, #21
   284f0:	e7f7      	b.n	284e2 <z_abort_timeout+0x1c>

000284f2 <z_get_next_timeout_expiry>:
{
   284f2:	b510      	push	{r4, lr}
	__asm__ volatile(
   284f4:	f04f 0320 	mov.w	r3, #32
   284f8:	f3ef 8411 	mrs	r4, BASEPRI
   284fc:	f383 8812 	msr	BASEPRI_MAX, r3
   28500:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   28504:	f7fc fa2c 	bl	24960 <next_timeout>
	__asm__ volatile(
   28508:	f384 8811 	msr	BASEPRI, r4
   2850c:	f3bf 8f6f 	isb	sy
}
   28510:	bd10      	pop	{r4, pc}

00028512 <z_set_timeout_expiry>:
{
   28512:	b570      	push	{r4, r5, r6, lr}
   28514:	4604      	mov	r4, r0
   28516:	460d      	mov	r5, r1
	__asm__ volatile(
   28518:	f04f 0320 	mov.w	r3, #32
   2851c:	f3ef 8611 	mrs	r6, BASEPRI
   28520:	f383 8812 	msr	BASEPRI_MAX, r3
   28524:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   28528:	f7fc fa1a 	bl	24960 <next_timeout>
			      || (ticks <= next_to);
   2852c:	2801      	cmp	r0, #1
   2852e:	dd07      	ble.n	28540 <z_set_timeout_expiry+0x2e>
   28530:	42a0      	cmp	r0, r4
   28532:	db05      	blt.n	28540 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   28534:	42a0      	cmp	r0, r4
   28536:	4629      	mov	r1, r5
   28538:	bfa8      	it	ge
   2853a:	4620      	movge	r0, r4
   2853c:	f7f5 fad0 	bl	1dae0 <sys_clock_set_timeout>
	__asm__ volatile(
   28540:	f386 8811 	msr	BASEPRI, r6
   28544:	f3bf 8f6f 	isb	sy
}
   28548:	bd70      	pop	{r4, r5, r6, pc}

0002854a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2854a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2854c:	f7fc fb26 	bl	24b9c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   28550:	bd08      	pop	{r3, pc}

00028552 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   28552:	f7fc bb23 	b.w	24b9c <sys_clock_tick_get>

00028556 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   28556:	b108      	cbz	r0, 2855c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   28558:	f7f2 b92e 	b.w	1a7b8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2855c:	4770      	bx	lr

0002855e <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2855e:	f1b1 3fff 	cmp.w	r1, #4294967295
   28562:	bf08      	it	eq
   28564:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   28568:	b538      	push	{r3, r4, r5, lr}
   2856a:	460c      	mov	r4, r1
   2856c:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2856e:	d014      	beq.n	2859a <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   28570:	4308      	orrs	r0, r1
   28572:	d103      	bne.n	2857c <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   28574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   28578:	f7fc bb10 	b.w	24b9c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2857c:	f06f 0001 	mvn.w	r0, #1
   28580:	f04f 33ff 	mov.w	r3, #4294967295
   28584:	1b40      	subs	r0, r0, r5
   28586:	eb63 0101 	sbc.w	r1, r3, r1
   2858a:	2900      	cmp	r1, #0
   2858c:	da04      	bge.n	28598 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2858e:	f7fc fb05 	bl	24b9c <sys_clock_tick_get>
   28592:	1940      	adds	r0, r0, r5
   28594:	eb41 0104 	adc.w	r1, r1, r4
}
   28598:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2859a:	f04f 30ff 	mov.w	r0, #4294967295
   2859e:	4601      	mov	r1, r0
   285a0:	e7fa      	b.n	28598 <sys_clock_timeout_end_calc+0x3a>

000285a2 <k_timer_init>:
	timer->status = 0U;
   285a2:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   285a4:	e9c0 1208 	strd	r1, r2, [r0, #32]
   285a8:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   285ac:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   285b0:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   285b4:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   285b6:	6343      	str	r3, [r0, #52]	; 0x34
}
   285b8:	4770      	bx	lr

000285ba <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   285ba:	b510      	push	{r4, lr}
   285bc:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   285be:	f7ff ff82 	bl	284c6 <z_abort_timeout>

	if (inactive) {
   285c2:	b9b0      	cbnz	r0, 285f2 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   285c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   285c6:	b10b      	cbz	r3, 285cc <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   285c8:	4620      	mov	r0, r4
   285ca:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   285cc:	f104 0018 	add.w	r0, r4, #24
   285d0:	f7ff fee9 	bl	283a6 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   285d4:	b168      	cbz	r0, 285f2 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   285d6:	f7ff fec6 	bl	28366 <z_ready_thread>
	__asm__ volatile(
   285da:	f04f 0320 	mov.w	r3, #32
   285de:	f3ef 8011 	mrs	r0, BASEPRI
   285e2:	f383 8812 	msr	BASEPRI_MAX, r3
   285e6:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   285ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   285ee:	f7ff bf21 	b.w	28434 <z_reschedule_irqlock>
   285f2:	bd10      	pop	{r4, pc}

000285f4 <signal_poll_event>:
{
   285f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   285f8:	6884      	ldr	r4, [r0, #8]
{
   285fa:	4605      	mov	r5, r0
   285fc:	460e      	mov	r6, r1
	if (poller != NULL) {
   285fe:	b144      	cbz	r4, 28612 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   28600:	7863      	ldrb	r3, [r4, #1]
   28602:	2b01      	cmp	r3, #1
   28604:	d12e      	bne.n	28664 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   28606:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2860a:	f013 0302 	ands.w	r3, r3, #2
   2860e:	d10a      	bne.n	28626 <signal_poll_event+0x32>
		poller->is_polling = false;
   28610:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   28612:	2000      	movs	r0, #0
	event->state |= state;
   28614:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   28616:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   28618:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2861c:	4316      	orrs	r6, r2
   2861e:	f366 3394 	bfi	r3, r6, #14, #7
   28622:	60eb      	str	r3, [r5, #12]
	return retcode;
   28624:	e03e      	b.n	286a4 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   28626:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2862a:	f1b3 3fff 	cmp.w	r3, #4294967295
   2862e:	bf08      	it	eq
   28630:	f112 0f02 	cmneq.w	r2, #2
   28634:	d032      	beq.n	2869c <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   28636:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2863a:	4640      	mov	r0, r8
   2863c:	f7ff fee6 	bl	2840c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   28640:	2e08      	cmp	r6, #8
   28642:	bf0c      	ite	eq
   28644:	f06f 0303 	mvneq.w	r3, #3
   28648:	2300      	movne	r3, #0
   2864a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2864c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   28650:	06db      	lsls	r3, r3, #27
   28652:	d109      	bne.n	28668 <signal_poll_event+0x74>
   28654:	f854 7c48 	ldr.w	r7, [r4, #-72]
   28658:	b937      	cbnz	r7, 28668 <signal_poll_event+0x74>
	z_ready_thread(thread);
   2865a:	4640      	mov	r0, r8
   2865c:	f7ff fe83 	bl	28366 <z_ready_thread>
		poller->is_polling = false;
   28660:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   28662:	e7d6      	b.n	28612 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   28664:	2b02      	cmp	r3, #2
   28666:	d001      	beq.n	2866c <signal_poll_event+0x78>
		poller->is_polling = false;
   28668:	2300      	movs	r3, #0
   2866a:	e7d1      	b.n	28610 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2866c:	7823      	ldrb	r3, [r4, #0]
   2866e:	2b00      	cmp	r3, #0
   28670:	d0cf      	beq.n	28612 <signal_poll_event+0x1e>
   28672:	f854 7c04 	ldr.w	r7, [r4, #-4]
   28676:	2f00      	cmp	r7, #0
   28678:	d0f2      	beq.n	28660 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2867a:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2867e:	f1a4 0914 	sub.w	r9, r4, #20
   28682:	f104 0014 	add.w	r0, r4, #20
   28686:	f7ff ff1e 	bl	284c6 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   2868a:	4649      	mov	r1, r9
   2868c:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2868e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   28692:	f7ff fde7 	bl	28264 <z_work_submit_to_queue>
		poller->is_polling = false;
   28696:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2869a:	e7ba      	b.n	28612 <signal_poll_event+0x1e>
		poller->is_polling = false;
   2869c:	2300      	movs	r3, #0
		return -EAGAIN;
   2869e:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   286a2:	7023      	strb	r3, [r4, #0]
}
   286a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000286a8 <k_poll_event_init>:
{
   286a8:	b510      	push	{r4, lr}
	event->poller = NULL;
   286aa:	2400      	movs	r4, #0
	event->type = type;
   286ac:	0552      	lsls	r2, r2, #21
   286ae:	0209      	lsls	r1, r1, #8
   286b0:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   286b4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   286b8:	430a      	orrs	r2, r1
   286ba:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   286bc:	6084      	str	r4, [r0, #8]
	event->type = type;
   286be:	430a      	orrs	r2, r1
	event->obj = obj;
   286c0:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   286c4:	bd10      	pop	{r4, pc}

000286c6 <z_handle_obj_poll_events>:
{
   286c6:	4603      	mov	r3, r0
	return list->head == list;
   286c8:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   286ca:	4283      	cmp	r3, r0
   286cc:	d008      	beq.n	286e0 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   286ce:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   286d2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   286d4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   286d6:	2300      	movs	r3, #0
	node->prev = NULL;
   286d8:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   286dc:	f7ff bf8a 	b.w	285f4 <signal_poll_event>
}
   286e0:	4770      	bx	lr

000286e2 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   286e2:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   286e4:	e9c0 0000 	strd	r0, r0, [r0]
   286e8:	6083      	str	r3, [r0, #8]
}
   286ea:	4770      	bx	lr

000286ec <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   286ec:	6883      	ldr	r3, [r0, #8]
   286ee:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   286f0:	68c3      	ldr	r3, [r0, #12]
   286f2:	6013      	str	r3, [r2, #0]
}
   286f4:	4770      	bx	lr

000286f6 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   286f6:	3204      	adds	r2, #4
{
   286f8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   286fa:	4604      	mov	r4, r0
   286fc:	d208      	bcs.n	28710 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   286fe:	2600      	movs	r6, #0
   28700:	2700      	movs	r7, #0
   28702:	f041 0104 	orr.w	r1, r1, #4
   28706:	e9cd 6700 	strd	r6, r7, [sp]
   2870a:	f7ff fc75 	bl	27ff8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2870e:	b910      	cbnz	r0, 28716 <z_heap_aligned_alloc+0x20>
		return NULL;
   28710:	2000      	movs	r0, #0
}
   28712:	b002      	add	sp, #8
   28714:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   28716:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   2871a:	e7fa      	b.n	28712 <z_heap_aligned_alloc+0x1c>

0002871c <k_free>:
	if (ptr != NULL) {
   2871c:	b120      	cbz	r0, 28728 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2871e:	1f01      	subs	r1, r0, #4
   28720:	f850 0c04 	ldr.w	r0, [r0, #-4]
   28724:	f7ff bcbf 	b.w	280a6 <k_heap_free>
}
   28728:	4770      	bx	lr

0002872a <k_malloc>:
{
   2872a:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2872c:	2004      	movs	r0, #4
   2872e:	f7fc bb2d 	b.w	24d8c <k_aligned_alloc>

00028732 <k_calloc>:
{
   28732:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   28734:	fba0 5401 	umull	r5, r4, r0, r1
   28738:	b924      	cbnz	r4, 28744 <k_calloc+0x12>
	ret = k_malloc(bounds);
   2873a:	4628      	mov	r0, r5
   2873c:	f7ff fff5 	bl	2872a <k_malloc>
	if (ret != NULL) {
   28740:	4606      	mov	r6, r0
   28742:	b910      	cbnz	r0, 2874a <k_calloc+0x18>
		return NULL;
   28744:	2600      	movs	r6, #0
}
   28746:	4630      	mov	r0, r6
   28748:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   2874a:	462a      	mov	r2, r5
   2874c:	4621      	mov	r1, r4
   2874e:	f000 f831 	bl	287b4 <memset>
   28752:	e7f8      	b.n	28746 <k_calloc+0x14>

00028754 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   28754:	4770      	bx	lr

00028756 <abs>:
   28756:	2800      	cmp	r0, #0
   28758:	bfb8      	it	lt
   2875a:	4240      	neglt	r0, r0
   2875c:	4770      	bx	lr

0002875e <memchr>:
   2875e:	b2c9      	uxtb	r1, r1
   28760:	4603      	mov	r3, r0
   28762:	4402      	add	r2, r0
   28764:	b510      	push	{r4, lr}
   28766:	4293      	cmp	r3, r2
   28768:	4618      	mov	r0, r3
   2876a:	d101      	bne.n	28770 <memchr+0x12>
   2876c:	2000      	movs	r0, #0
   2876e:	e003      	b.n	28778 <memchr+0x1a>
   28770:	7804      	ldrb	r4, [r0, #0]
   28772:	3301      	adds	r3, #1
   28774:	428c      	cmp	r4, r1
   28776:	d1f6      	bne.n	28766 <memchr+0x8>
   28778:	bd10      	pop	{r4, pc}

0002877a <memcmp>:
   2877a:	3901      	subs	r1, #1
   2877c:	4402      	add	r2, r0
   2877e:	b510      	push	{r4, lr}
   28780:	4290      	cmp	r0, r2
   28782:	d101      	bne.n	28788 <memcmp+0xe>
   28784:	2000      	movs	r0, #0
   28786:	e005      	b.n	28794 <memcmp+0x1a>
   28788:	7803      	ldrb	r3, [r0, #0]
   2878a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2878e:	42a3      	cmp	r3, r4
   28790:	d001      	beq.n	28796 <memcmp+0x1c>
   28792:	1b18      	subs	r0, r3, r4
   28794:	bd10      	pop	{r4, pc}
   28796:	3001      	adds	r0, #1
   28798:	e7f2      	b.n	28780 <memcmp+0x6>

0002879a <memcpy>:
   2879a:	440a      	add	r2, r1
   2879c:	1e43      	subs	r3, r0, #1
   2879e:	4291      	cmp	r1, r2
   287a0:	d100      	bne.n	287a4 <memcpy+0xa>
   287a2:	4770      	bx	lr
   287a4:	b510      	push	{r4, lr}
   287a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   287aa:	4291      	cmp	r1, r2
   287ac:	f803 4f01 	strb.w	r4, [r3, #1]!
   287b0:	d1f9      	bne.n	287a6 <memcpy+0xc>
   287b2:	bd10      	pop	{r4, pc}

000287b4 <memset>:
   287b4:	4402      	add	r2, r0
   287b6:	4603      	mov	r3, r0
   287b8:	4293      	cmp	r3, r2
   287ba:	d100      	bne.n	287be <memset+0xa>
   287bc:	4770      	bx	lr
   287be:	f803 1b01 	strb.w	r1, [r3], #1
   287c2:	e7f9      	b.n	287b8 <memset+0x4>

000287c4 <strchr>:
   287c4:	b2c9      	uxtb	r1, r1
   287c6:	4603      	mov	r3, r0
   287c8:	4618      	mov	r0, r3
   287ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   287ce:	b112      	cbz	r2, 287d6 <strchr+0x12>
   287d0:	428a      	cmp	r2, r1
   287d2:	d1f9      	bne.n	287c8 <strchr+0x4>
   287d4:	4770      	bx	lr
   287d6:	2900      	cmp	r1, #0
   287d8:	bf18      	it	ne
   287da:	2000      	movne	r0, #0
   287dc:	4770      	bx	lr

000287de <strcpy>:
   287de:	4603      	mov	r3, r0
   287e0:	f811 2b01 	ldrb.w	r2, [r1], #1
   287e4:	f803 2b01 	strb.w	r2, [r3], #1
   287e8:	2a00      	cmp	r2, #0
   287ea:	d1f9      	bne.n	287e0 <strcpy+0x2>
   287ec:	4770      	bx	lr

000287ee <strncmp>:
   287ee:	b510      	push	{r4, lr}
   287f0:	b16a      	cbz	r2, 2880e <strncmp+0x20>
   287f2:	3901      	subs	r1, #1
   287f4:	1884      	adds	r4, r0, r2
   287f6:	f810 2b01 	ldrb.w	r2, [r0], #1
   287fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   287fe:	429a      	cmp	r2, r3
   28800:	d103      	bne.n	2880a <strncmp+0x1c>
   28802:	42a0      	cmp	r0, r4
   28804:	d001      	beq.n	2880a <strncmp+0x1c>
   28806:	2a00      	cmp	r2, #0
   28808:	d1f5      	bne.n	287f6 <strncmp+0x8>
   2880a:	1ad0      	subs	r0, r2, r3
   2880c:	bd10      	pop	{r4, pc}
   2880e:	4610      	mov	r0, r2
   28810:	e7fc      	b.n	2880c <strncmp+0x1e>

00028812 <strncpy>:
   28812:	3901      	subs	r1, #1
   28814:	4603      	mov	r3, r0
   28816:	b510      	push	{r4, lr}
   28818:	b132      	cbz	r2, 28828 <strncpy+0x16>
   2881a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2881e:	3a01      	subs	r2, #1
   28820:	f803 4b01 	strb.w	r4, [r3], #1
   28824:	2c00      	cmp	r4, #0
   28826:	d1f7      	bne.n	28818 <strncpy+0x6>
   28828:	441a      	add	r2, r3
   2882a:	2100      	movs	r1, #0
   2882c:	4293      	cmp	r3, r2
   2882e:	d100      	bne.n	28832 <strncpy+0x20>
   28830:	bd10      	pop	{r4, pc}
   28832:	f803 1b01 	strb.w	r1, [r3], #1
   28836:	e7f9      	b.n	2882c <strncpy+0x1a>

00028838 <strnlen>:
   28838:	4602      	mov	r2, r0
   2883a:	4401      	add	r1, r0
   2883c:	b510      	push	{r4, lr}
   2883e:	428a      	cmp	r2, r1
   28840:	4613      	mov	r3, r2
   28842:	d003      	beq.n	2884c <strnlen+0x14>
   28844:	781c      	ldrb	r4, [r3, #0]
   28846:	3201      	adds	r2, #1
   28848:	2c00      	cmp	r4, #0
   2884a:	d1f8      	bne.n	2883e <strnlen+0x6>
   2884c:	1a18      	subs	r0, r3, r0
   2884e:	bd10      	pop	{r4, pc}

00028850 <strstr>:
   28850:	780a      	ldrb	r2, [r1, #0]
   28852:	b570      	push	{r4, r5, r6, lr}
   28854:	b96a      	cbnz	r2, 28872 <strstr+0x22>
   28856:	bd70      	pop	{r4, r5, r6, pc}
   28858:	429a      	cmp	r2, r3
   2885a:	d109      	bne.n	28870 <strstr+0x20>
   2885c:	460c      	mov	r4, r1
   2885e:	4605      	mov	r5, r0
   28860:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   28864:	2b00      	cmp	r3, #0
   28866:	d0f6      	beq.n	28856 <strstr+0x6>
   28868:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   2886c:	429e      	cmp	r6, r3
   2886e:	d0f7      	beq.n	28860 <strstr+0x10>
   28870:	3001      	adds	r0, #1
   28872:	7803      	ldrb	r3, [r0, #0]
   28874:	2b00      	cmp	r3, #0
   28876:	d1ef      	bne.n	28858 <strstr+0x8>
   28878:	4618      	mov	r0, r3
   2887a:	e7ec      	b.n	28856 <strstr+0x6>

0002887c <_vsniprintf_r>:
   2887c:	b530      	push	{r4, r5, lr}
   2887e:	4614      	mov	r4, r2
   28880:	b09b      	sub	sp, #108	; 0x6c
   28882:	4605      	mov	r5, r0
   28884:	461a      	mov	r2, r3
   28886:	2c00      	cmp	r4, #0
   28888:	da05      	bge.n	28896 <_vsniprintf_r+0x1a>
   2888a:	238b      	movs	r3, #139	; 0x8b
   2888c:	6003      	str	r3, [r0, #0]
   2888e:	f04f 30ff 	mov.w	r0, #4294967295
   28892:	b01b      	add	sp, #108	; 0x6c
   28894:	bd30      	pop	{r4, r5, pc}
   28896:	f44f 7302 	mov.w	r3, #520	; 0x208
   2889a:	9100      	str	r1, [sp, #0]
   2889c:	9104      	str	r1, [sp, #16]
   2889e:	4669      	mov	r1, sp
   288a0:	f8ad 300c 	strh.w	r3, [sp, #12]
   288a4:	bf14      	ite	ne
   288a6:	f104 33ff 	addne.w	r3, r4, #4294967295
   288aa:	4623      	moveq	r3, r4
   288ac:	9302      	str	r3, [sp, #8]
   288ae:	9305      	str	r3, [sp, #20]
   288b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   288b4:	f8ad 300e 	strh.w	r3, [sp, #14]
   288b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   288ba:	f7fc fd1d 	bl	252f8 <_svfiprintf_r>
   288be:	1c43      	adds	r3, r0, #1
   288c0:	bfbc      	itt	lt
   288c2:	238b      	movlt	r3, #139	; 0x8b
   288c4:	602b      	strlt	r3, [r5, #0]
   288c6:	2c00      	cmp	r4, #0
   288c8:	d0e3      	beq.n	28892 <_vsniprintf_r+0x16>
   288ca:	9b00      	ldr	r3, [sp, #0]
   288cc:	2200      	movs	r2, #0
   288ce:	701a      	strb	r2, [r3, #0]
   288d0:	e7df      	b.n	28892 <_vsniprintf_r+0x16>

000288d2 <__ssputs_r>:
   288d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   288d6:	461f      	mov	r7, r3
   288d8:	688e      	ldr	r6, [r1, #8]
   288da:	4682      	mov	sl, r0
   288dc:	460c      	mov	r4, r1
   288de:	42be      	cmp	r6, r7
   288e0:	4690      	mov	r8, r2
   288e2:	680b      	ldr	r3, [r1, #0]
   288e4:	d82d      	bhi.n	28942 <__ssputs_r+0x70>
   288e6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   288ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
   288ee:	d026      	beq.n	2893e <__ssputs_r+0x6c>
   288f0:	6965      	ldr	r5, [r4, #20]
   288f2:	6909      	ldr	r1, [r1, #16]
   288f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   288f8:	eba3 0901 	sub.w	r9, r3, r1
   288fc:	1c7b      	adds	r3, r7, #1
   288fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   28902:	444b      	add	r3, r9
   28904:	106d      	asrs	r5, r5, #1
   28906:	429d      	cmp	r5, r3
   28908:	bf38      	it	cc
   2890a:	461d      	movcc	r5, r3
   2890c:	0553      	lsls	r3, r2, #21
   2890e:	d527      	bpl.n	28960 <__ssputs_r+0x8e>
   28910:	4629      	mov	r1, r5
   28912:	f7fc facb 	bl	24eac <_malloc_r>
   28916:	4606      	mov	r6, r0
   28918:	b360      	cbz	r0, 28974 <__ssputs_r+0xa2>
   2891a:	464a      	mov	r2, r9
   2891c:	6921      	ldr	r1, [r4, #16]
   2891e:	f7ff ff3c 	bl	2879a <memcpy>
   28922:	89a3      	ldrh	r3, [r4, #12]
   28924:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   28928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2892c:	81a3      	strh	r3, [r4, #12]
   2892e:	6126      	str	r6, [r4, #16]
   28930:	444e      	add	r6, r9
   28932:	6165      	str	r5, [r4, #20]
   28934:	eba5 0509 	sub.w	r5, r5, r9
   28938:	6026      	str	r6, [r4, #0]
   2893a:	463e      	mov	r6, r7
   2893c:	60a5      	str	r5, [r4, #8]
   2893e:	42be      	cmp	r6, r7
   28940:	d900      	bls.n	28944 <__ssputs_r+0x72>
   28942:	463e      	mov	r6, r7
   28944:	4632      	mov	r2, r6
   28946:	4641      	mov	r1, r8
   28948:	6820      	ldr	r0, [r4, #0]
   2894a:	f000 f88f 	bl	28a6c <memmove>
   2894e:	68a3      	ldr	r3, [r4, #8]
   28950:	2000      	movs	r0, #0
   28952:	1b9b      	subs	r3, r3, r6
   28954:	60a3      	str	r3, [r4, #8]
   28956:	6823      	ldr	r3, [r4, #0]
   28958:	4433      	add	r3, r6
   2895a:	6023      	str	r3, [r4, #0]
   2895c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28960:	462a      	mov	r2, r5
   28962:	f000 f89d 	bl	28aa0 <_realloc_r>
   28966:	4606      	mov	r6, r0
   28968:	2800      	cmp	r0, #0
   2896a:	d1e0      	bne.n	2892e <__ssputs_r+0x5c>
   2896c:	6921      	ldr	r1, [r4, #16]
   2896e:	4650      	mov	r0, sl
   28970:	f7fc fa52 	bl	24e18 <_free_r>
   28974:	230c      	movs	r3, #12
   28976:	f04f 30ff 	mov.w	r0, #4294967295
   2897a:	f8ca 3000 	str.w	r3, [sl]
   2897e:	89a3      	ldrh	r3, [r4, #12]
   28980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   28984:	81a3      	strh	r3, [r4, #12]
   28986:	e7e9      	b.n	2895c <__ssputs_r+0x8a>

00028988 <_printf_common>:
   28988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2898c:	4616      	mov	r6, r2
   2898e:	4698      	mov	r8, r3
   28990:	688a      	ldr	r2, [r1, #8]
   28992:	4607      	mov	r7, r0
   28994:	690b      	ldr	r3, [r1, #16]
   28996:	460c      	mov	r4, r1
   28998:	f8dd 9020 	ldr.w	r9, [sp, #32]
   2899c:	4293      	cmp	r3, r2
   2899e:	bfb8      	it	lt
   289a0:	4613      	movlt	r3, r2
   289a2:	6033      	str	r3, [r6, #0]
   289a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   289a8:	b10a      	cbz	r2, 289ae <_printf_common+0x26>
   289aa:	3301      	adds	r3, #1
   289ac:	6033      	str	r3, [r6, #0]
   289ae:	6823      	ldr	r3, [r4, #0]
   289b0:	0699      	lsls	r1, r3, #26
   289b2:	bf42      	ittt	mi
   289b4:	6833      	ldrmi	r3, [r6, #0]
   289b6:	3302      	addmi	r3, #2
   289b8:	6033      	strmi	r3, [r6, #0]
   289ba:	6825      	ldr	r5, [r4, #0]
   289bc:	f015 0506 	ands.w	r5, r5, #6
   289c0:	d106      	bne.n	289d0 <_printf_common+0x48>
   289c2:	f104 0a19 	add.w	sl, r4, #25
   289c6:	68e3      	ldr	r3, [r4, #12]
   289c8:	6832      	ldr	r2, [r6, #0]
   289ca:	1a9b      	subs	r3, r3, r2
   289cc:	42ab      	cmp	r3, r5
   289ce:	dc2b      	bgt.n	28a28 <_printf_common+0xa0>
   289d0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   289d4:	6822      	ldr	r2, [r4, #0]
   289d6:	3b00      	subs	r3, #0
   289d8:	bf18      	it	ne
   289da:	2301      	movne	r3, #1
   289dc:	0692      	lsls	r2, r2, #26
   289de:	d430      	bmi.n	28a42 <_printf_common+0xba>
   289e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   289e4:	4641      	mov	r1, r8
   289e6:	4638      	mov	r0, r7
   289e8:	47c8      	blx	r9
   289ea:	3001      	adds	r0, #1
   289ec:	d023      	beq.n	28a36 <_printf_common+0xae>
   289ee:	6823      	ldr	r3, [r4, #0]
   289f0:	341a      	adds	r4, #26
   289f2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   289f6:	f003 0306 	and.w	r3, r3, #6
   289fa:	2b04      	cmp	r3, #4
   289fc:	bf0a      	itet	eq
   289fe:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   28a02:	2500      	movne	r5, #0
   28a04:	6833      	ldreq	r3, [r6, #0]
   28a06:	f04f 0600 	mov.w	r6, #0
   28a0a:	bf08      	it	eq
   28a0c:	1aed      	subeq	r5, r5, r3
   28a0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
   28a12:	bf08      	it	eq
   28a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   28a18:	4293      	cmp	r3, r2
   28a1a:	bfc4      	itt	gt
   28a1c:	1a9b      	subgt	r3, r3, r2
   28a1e:	18ed      	addgt	r5, r5, r3
   28a20:	42b5      	cmp	r5, r6
   28a22:	d11a      	bne.n	28a5a <_printf_common+0xd2>
   28a24:	2000      	movs	r0, #0
   28a26:	e008      	b.n	28a3a <_printf_common+0xb2>
   28a28:	2301      	movs	r3, #1
   28a2a:	4652      	mov	r2, sl
   28a2c:	4641      	mov	r1, r8
   28a2e:	4638      	mov	r0, r7
   28a30:	47c8      	blx	r9
   28a32:	3001      	adds	r0, #1
   28a34:	d103      	bne.n	28a3e <_printf_common+0xb6>
   28a36:	f04f 30ff 	mov.w	r0, #4294967295
   28a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28a3e:	3501      	adds	r5, #1
   28a40:	e7c1      	b.n	289c6 <_printf_common+0x3e>
   28a42:	18e1      	adds	r1, r4, r3
   28a44:	1c5a      	adds	r2, r3, #1
   28a46:	2030      	movs	r0, #48	; 0x30
   28a48:	3302      	adds	r3, #2
   28a4a:	4422      	add	r2, r4
   28a4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   28a50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   28a54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   28a58:	e7c2      	b.n	289e0 <_printf_common+0x58>
   28a5a:	2301      	movs	r3, #1
   28a5c:	4622      	mov	r2, r4
   28a5e:	4641      	mov	r1, r8
   28a60:	4638      	mov	r0, r7
   28a62:	47c8      	blx	r9
   28a64:	3001      	adds	r0, #1
   28a66:	d0e6      	beq.n	28a36 <_printf_common+0xae>
   28a68:	3601      	adds	r6, #1
   28a6a:	e7d9      	b.n	28a20 <_printf_common+0x98>

00028a6c <memmove>:
   28a6c:	4288      	cmp	r0, r1
   28a6e:	b510      	push	{r4, lr}
   28a70:	eb01 0402 	add.w	r4, r1, r2
   28a74:	d902      	bls.n	28a7c <memmove+0x10>
   28a76:	4284      	cmp	r4, r0
   28a78:	4623      	mov	r3, r4
   28a7a:	d807      	bhi.n	28a8c <memmove+0x20>
   28a7c:	1e43      	subs	r3, r0, #1
   28a7e:	42a1      	cmp	r1, r4
   28a80:	d008      	beq.n	28a94 <memmove+0x28>
   28a82:	f811 2b01 	ldrb.w	r2, [r1], #1
   28a86:	f803 2f01 	strb.w	r2, [r3, #1]!
   28a8a:	e7f8      	b.n	28a7e <memmove+0x12>
   28a8c:	4402      	add	r2, r0
   28a8e:	4601      	mov	r1, r0
   28a90:	428a      	cmp	r2, r1
   28a92:	d100      	bne.n	28a96 <memmove+0x2a>
   28a94:	bd10      	pop	{r4, pc}
   28a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   28a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   28a9e:	e7f7      	b.n	28a90 <memmove+0x24>

00028aa0 <_realloc_r>:
   28aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28aa2:	4607      	mov	r7, r0
   28aa4:	4615      	mov	r5, r2
   28aa6:	460c      	mov	r4, r1
   28aa8:	b921      	cbnz	r1, 28ab4 <_realloc_r+0x14>
   28aaa:	4611      	mov	r1, r2
   28aac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   28ab0:	f7fc b9fc 	b.w	24eac <_malloc_r>
   28ab4:	b922      	cbnz	r2, 28ac0 <_realloc_r+0x20>
   28ab6:	f7fc f9af 	bl	24e18 <_free_r>
   28aba:	2400      	movs	r4, #0
   28abc:	4620      	mov	r0, r4
   28abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28ac0:	f000 f813 	bl	28aea <_malloc_usable_size_r>
   28ac4:	42a8      	cmp	r0, r5
   28ac6:	d2f9      	bcs.n	28abc <_realloc_r+0x1c>
   28ac8:	4629      	mov	r1, r5
   28aca:	4638      	mov	r0, r7
   28acc:	f7fc f9ee 	bl	24eac <_malloc_r>
   28ad0:	4606      	mov	r6, r0
   28ad2:	2800      	cmp	r0, #0
   28ad4:	d0f1      	beq.n	28aba <_realloc_r+0x1a>
   28ad6:	4621      	mov	r1, r4
   28ad8:	462a      	mov	r2, r5
   28ada:	f7ff fe5e 	bl	2879a <memcpy>
   28ade:	4621      	mov	r1, r4
   28ae0:	4638      	mov	r0, r7
   28ae2:	4634      	mov	r4, r6
   28ae4:	f7fc f998 	bl	24e18 <_free_r>
   28ae8:	e7e8      	b.n	28abc <_realloc_r+0x1c>

00028aea <_malloc_usable_size_r>:
   28aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
   28aee:	1f18      	subs	r0, r3, #4
   28af0:	2b00      	cmp	r3, #0
   28af2:	bfbc      	itt	lt
   28af4:	580b      	ldrlt	r3, [r1, r0]
   28af6:	18c0      	addlt	r0, r0, r3
   28af8:	4770      	bx	lr
	...
