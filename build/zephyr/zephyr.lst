
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00018000 <_vector_table>:
   18000:	38 fb 00 20 e5 bd 01 00 f9 61 02 00 b9 bd 01 00     8.. .....a......
   18010:	b9 bd 01 00 b9 bd 01 00 b9 bd 01 00 b9 bd 01 00     ................
	...
   1802c:	0d b7 01 00 b9 bd 01 00 00 00 00 00 ad b6 01 00     ................
   1803c:	b9 bd 01 00                                         ....

00018040 <_irq_vector_table>:
   18040:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   18050:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   18060:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   18070:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   18080:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   18090:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   180a0:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   180b0:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   180c0:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   180d0:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   180e0:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   180f0:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   18100:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   18110:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   18120:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   18130:	95 b7 01 00 95 b7 01 00 95 b7 01 00 95 b7 01 00     ................
   18140:	95 b7 01 00                                         ....

Disassembly of section text:

00018148 <__aeabi_fmul>:
   18148:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1814c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18150:	bf1e      	ittt	ne
   18152:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18156:	ea92 0f0c 	teqne	r2, ip
   1815a:	ea93 0f0c 	teqne	r3, ip
   1815e:	d06f      	beq.n	18240 <__aeabi_fmul+0xf8>
   18160:	441a      	add	r2, r3
   18162:	ea80 0c01 	eor.w	ip, r0, r1
   18166:	0240      	lsls	r0, r0, #9
   18168:	bf18      	it	ne
   1816a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1816e:	d01e      	beq.n	181ae <__aeabi_fmul+0x66>
   18170:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18174:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18178:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1817c:	fba0 3101 	umull	r3, r1, r0, r1
   18180:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18184:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18188:	bf3e      	ittt	cc
   1818a:	0049      	lslcc	r1, r1, #1
   1818c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18190:	005b      	lslcc	r3, r3, #1
   18192:	ea40 0001 	orr.w	r0, r0, r1
   18196:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1819a:	2afd      	cmp	r2, #253	; 0xfd
   1819c:	d81d      	bhi.n	181da <__aeabi_fmul+0x92>
   1819e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   181a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   181a6:	bf08      	it	eq
   181a8:	f020 0001 	biceq.w	r0, r0, #1
   181ac:	4770      	bx	lr
   181ae:	f090 0f00 	teq	r0, #0
   181b2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   181b6:	bf08      	it	eq
   181b8:	0249      	lsleq	r1, r1, #9
   181ba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   181be:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   181c2:	3a7f      	subs	r2, #127	; 0x7f
   181c4:	bfc2      	ittt	gt
   181c6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   181ca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   181ce:	4770      	bxgt	lr
   181d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   181d4:	f04f 0300 	mov.w	r3, #0
   181d8:	3a01      	subs	r2, #1
   181da:	dc5d      	bgt.n	18298 <__aeabi_fmul+0x150>
   181dc:	f112 0f19 	cmn.w	r2, #25
   181e0:	bfdc      	itt	le
   181e2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   181e6:	4770      	bxle	lr
   181e8:	f1c2 0200 	rsb	r2, r2, #0
   181ec:	0041      	lsls	r1, r0, #1
   181ee:	fa21 f102 	lsr.w	r1, r1, r2
   181f2:	f1c2 0220 	rsb	r2, r2, #32
   181f6:	fa00 fc02 	lsl.w	ip, r0, r2
   181fa:	ea5f 0031 	movs.w	r0, r1, rrx
   181fe:	f140 0000 	adc.w	r0, r0, #0
   18202:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   18206:	bf08      	it	eq
   18208:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1820c:	4770      	bx	lr
   1820e:	f092 0f00 	teq	r2, #0
   18212:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18216:	bf02      	ittt	eq
   18218:	0040      	lsleq	r0, r0, #1
   1821a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1821e:	3a01      	subeq	r2, #1
   18220:	d0f9      	beq.n	18216 <__aeabi_fmul+0xce>
   18222:	ea40 000c 	orr.w	r0, r0, ip
   18226:	f093 0f00 	teq	r3, #0
   1822a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1822e:	bf02      	ittt	eq
   18230:	0049      	lsleq	r1, r1, #1
   18232:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18236:	3b01      	subeq	r3, #1
   18238:	d0f9      	beq.n	1822e <__aeabi_fmul+0xe6>
   1823a:	ea41 010c 	orr.w	r1, r1, ip
   1823e:	e78f      	b.n	18160 <__aeabi_fmul+0x18>
   18240:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18244:	ea92 0f0c 	teq	r2, ip
   18248:	bf18      	it	ne
   1824a:	ea93 0f0c 	teqne	r3, ip
   1824e:	d00a      	beq.n	18266 <__aeabi_fmul+0x11e>
   18250:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18254:	bf18      	it	ne
   18256:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1825a:	d1d8      	bne.n	1820e <__aeabi_fmul+0xc6>
   1825c:	ea80 0001 	eor.w	r0, r0, r1
   18260:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18264:	4770      	bx	lr
   18266:	f090 0f00 	teq	r0, #0
   1826a:	bf17      	itett	ne
   1826c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18270:	4608      	moveq	r0, r1
   18272:	f091 0f00 	teqne	r1, #0
   18276:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1827a:	d014      	beq.n	182a6 <__aeabi_fmul+0x15e>
   1827c:	ea92 0f0c 	teq	r2, ip
   18280:	d101      	bne.n	18286 <__aeabi_fmul+0x13e>
   18282:	0242      	lsls	r2, r0, #9
   18284:	d10f      	bne.n	182a6 <__aeabi_fmul+0x15e>
   18286:	ea93 0f0c 	teq	r3, ip
   1828a:	d103      	bne.n	18294 <__aeabi_fmul+0x14c>
   1828c:	024b      	lsls	r3, r1, #9
   1828e:	bf18      	it	ne
   18290:	4608      	movne	r0, r1
   18292:	d108      	bne.n	182a6 <__aeabi_fmul+0x15e>
   18294:	ea80 0001 	eor.w	r0, r0, r1
   18298:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1829c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   182a4:	4770      	bx	lr
   182a6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182aa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   182ae:	4770      	bx	lr

000182b0 <__aeabi_drsub>:
   182b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   182b4:	e002      	b.n	182bc <__adddf3>
   182b6:	bf00      	nop

000182b8 <__aeabi_dsub>:
   182b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000182bc <__adddf3>:
   182bc:	b530      	push	{r4, r5, lr}
   182be:	ea4f 0441 	mov.w	r4, r1, lsl #1
   182c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   182c6:	ea94 0f05 	teq	r4, r5
   182ca:	bf08      	it	eq
   182cc:	ea90 0f02 	teqeq	r0, r2
   182d0:	bf1f      	itttt	ne
   182d2:	ea54 0c00 	orrsne.w	ip, r4, r0
   182d6:	ea55 0c02 	orrsne.w	ip, r5, r2
   182da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   182de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   182e2:	f000 80e2 	beq.w	184aa <__adddf3+0x1ee>
   182e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   182ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   182ee:	bfb8      	it	lt
   182f0:	426d      	neglt	r5, r5
   182f2:	dd0c      	ble.n	1830e <__adddf3+0x52>
   182f4:	442c      	add	r4, r5
   182f6:	ea80 0202 	eor.w	r2, r0, r2
   182fa:	ea81 0303 	eor.w	r3, r1, r3
   182fe:	ea82 0000 	eor.w	r0, r2, r0
   18302:	ea83 0101 	eor.w	r1, r3, r1
   18306:	ea80 0202 	eor.w	r2, r0, r2
   1830a:	ea81 0303 	eor.w	r3, r1, r3
   1830e:	2d36      	cmp	r5, #54	; 0x36
   18310:	bf88      	it	hi
   18312:	bd30      	pophi	{r4, r5, pc}
   18314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18318:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1831c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   18320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   18324:	d002      	beq.n	1832c <__adddf3+0x70>
   18326:	4240      	negs	r0, r0
   18328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1832c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   18330:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   18338:	d002      	beq.n	18340 <__adddf3+0x84>
   1833a:	4252      	negs	r2, r2
   1833c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18340:	ea94 0f05 	teq	r4, r5
   18344:	f000 80a7 	beq.w	18496 <__adddf3+0x1da>
   18348:	f1a4 0401 	sub.w	r4, r4, #1
   1834c:	f1d5 0e20 	rsbs	lr, r5, #32
   18350:	db0d      	blt.n	1836e <__adddf3+0xb2>
   18352:	fa02 fc0e 	lsl.w	ip, r2, lr
   18356:	fa22 f205 	lsr.w	r2, r2, r5
   1835a:	1880      	adds	r0, r0, r2
   1835c:	f141 0100 	adc.w	r1, r1, #0
   18360:	fa03 f20e 	lsl.w	r2, r3, lr
   18364:	1880      	adds	r0, r0, r2
   18366:	fa43 f305 	asr.w	r3, r3, r5
   1836a:	4159      	adcs	r1, r3
   1836c:	e00e      	b.n	1838c <__adddf3+0xd0>
   1836e:	f1a5 0520 	sub.w	r5, r5, #32
   18372:	f10e 0e20 	add.w	lr, lr, #32
   18376:	2a01      	cmp	r2, #1
   18378:	fa03 fc0e 	lsl.w	ip, r3, lr
   1837c:	bf28      	it	cs
   1837e:	f04c 0c02 	orrcs.w	ip, ip, #2
   18382:	fa43 f305 	asr.w	r3, r3, r5
   18386:	18c0      	adds	r0, r0, r3
   18388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1838c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18390:	d507      	bpl.n	183a2 <__adddf3+0xe6>
   18392:	f04f 0e00 	mov.w	lr, #0
   18396:	f1dc 0c00 	rsbs	ip, ip, #0
   1839a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1839e:	eb6e 0101 	sbc.w	r1, lr, r1
   183a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   183a6:	d31b      	bcc.n	183e0 <__adddf3+0x124>
   183a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   183ac:	d30c      	bcc.n	183c8 <__adddf3+0x10c>
   183ae:	0849      	lsrs	r1, r1, #1
   183b0:	ea5f 0030 	movs.w	r0, r0, rrx
   183b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   183b8:	f104 0401 	add.w	r4, r4, #1
   183bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   183c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   183c4:	f080 809a 	bcs.w	184fc <__adddf3+0x240>
   183c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   183cc:	bf08      	it	eq
   183ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   183d2:	f150 0000 	adcs.w	r0, r0, #0
   183d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   183da:	ea41 0105 	orr.w	r1, r1, r5
   183de:	bd30      	pop	{r4, r5, pc}
   183e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   183e4:	4140      	adcs	r0, r0
   183e6:	eb41 0101 	adc.w	r1, r1, r1
   183ea:	3c01      	subs	r4, #1
   183ec:	bf28      	it	cs
   183ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   183f2:	d2e9      	bcs.n	183c8 <__adddf3+0x10c>
   183f4:	f091 0f00 	teq	r1, #0
   183f8:	bf04      	itt	eq
   183fa:	4601      	moveq	r1, r0
   183fc:	2000      	moveq	r0, #0
   183fe:	fab1 f381 	clz	r3, r1
   18402:	bf08      	it	eq
   18404:	3320      	addeq	r3, #32
   18406:	f1a3 030b 	sub.w	r3, r3, #11
   1840a:	f1b3 0220 	subs.w	r2, r3, #32
   1840e:	da0c      	bge.n	1842a <__adddf3+0x16e>
   18410:	320c      	adds	r2, #12
   18412:	dd08      	ble.n	18426 <__adddf3+0x16a>
   18414:	f102 0c14 	add.w	ip, r2, #20
   18418:	f1c2 020c 	rsb	r2, r2, #12
   1841c:	fa01 f00c 	lsl.w	r0, r1, ip
   18420:	fa21 f102 	lsr.w	r1, r1, r2
   18424:	e00c      	b.n	18440 <__adddf3+0x184>
   18426:	f102 0214 	add.w	r2, r2, #20
   1842a:	bfd8      	it	le
   1842c:	f1c2 0c20 	rsble	ip, r2, #32
   18430:	fa01 f102 	lsl.w	r1, r1, r2
   18434:	fa20 fc0c 	lsr.w	ip, r0, ip
   18438:	bfdc      	itt	le
   1843a:	ea41 010c 	orrle.w	r1, r1, ip
   1843e:	4090      	lslle	r0, r2
   18440:	1ae4      	subs	r4, r4, r3
   18442:	bfa2      	ittt	ge
   18444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   18448:	4329      	orrge	r1, r5
   1844a:	bd30      	popge	{r4, r5, pc}
   1844c:	ea6f 0404 	mvn.w	r4, r4
   18450:	3c1f      	subs	r4, #31
   18452:	da1c      	bge.n	1848e <__adddf3+0x1d2>
   18454:	340c      	adds	r4, #12
   18456:	dc0e      	bgt.n	18476 <__adddf3+0x1ba>
   18458:	f104 0414 	add.w	r4, r4, #20
   1845c:	f1c4 0220 	rsb	r2, r4, #32
   18460:	fa20 f004 	lsr.w	r0, r0, r4
   18464:	fa01 f302 	lsl.w	r3, r1, r2
   18468:	ea40 0003 	orr.w	r0, r0, r3
   1846c:	fa21 f304 	lsr.w	r3, r1, r4
   18470:	ea45 0103 	orr.w	r1, r5, r3
   18474:	bd30      	pop	{r4, r5, pc}
   18476:	f1c4 040c 	rsb	r4, r4, #12
   1847a:	f1c4 0220 	rsb	r2, r4, #32
   1847e:	fa20 f002 	lsr.w	r0, r0, r2
   18482:	fa01 f304 	lsl.w	r3, r1, r4
   18486:	ea40 0003 	orr.w	r0, r0, r3
   1848a:	4629      	mov	r1, r5
   1848c:	bd30      	pop	{r4, r5, pc}
   1848e:	fa21 f004 	lsr.w	r0, r1, r4
   18492:	4629      	mov	r1, r5
   18494:	bd30      	pop	{r4, r5, pc}
   18496:	f094 0f00 	teq	r4, #0
   1849a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1849e:	bf06      	itte	eq
   184a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   184a4:	3401      	addeq	r4, #1
   184a6:	3d01      	subne	r5, #1
   184a8:	e74e      	b.n	18348 <__adddf3+0x8c>
   184aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   184ae:	bf18      	it	ne
   184b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   184b4:	d029      	beq.n	1850a <__adddf3+0x24e>
   184b6:	ea94 0f05 	teq	r4, r5
   184ba:	bf08      	it	eq
   184bc:	ea90 0f02 	teqeq	r0, r2
   184c0:	d005      	beq.n	184ce <__adddf3+0x212>
   184c2:	ea54 0c00 	orrs.w	ip, r4, r0
   184c6:	bf04      	itt	eq
   184c8:	4619      	moveq	r1, r3
   184ca:	4610      	moveq	r0, r2
   184cc:	bd30      	pop	{r4, r5, pc}
   184ce:	ea91 0f03 	teq	r1, r3
   184d2:	bf1e      	ittt	ne
   184d4:	2100      	movne	r1, #0
   184d6:	2000      	movne	r0, #0
   184d8:	bd30      	popne	{r4, r5, pc}
   184da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   184de:	d105      	bne.n	184ec <__adddf3+0x230>
   184e0:	0040      	lsls	r0, r0, #1
   184e2:	4149      	adcs	r1, r1
   184e4:	bf28      	it	cs
   184e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   184ea:	bd30      	pop	{r4, r5, pc}
   184ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   184f0:	bf3c      	itt	cc
   184f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   184f6:	bd30      	popcc	{r4, r5, pc}
   184f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   184fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   18500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18504:	f04f 0000 	mov.w	r0, #0
   18508:	bd30      	pop	{r4, r5, pc}
   1850a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1850e:	bf1a      	itte	ne
   18510:	4619      	movne	r1, r3
   18512:	4610      	movne	r0, r2
   18514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18518:	bf1c      	itt	ne
   1851a:	460b      	movne	r3, r1
   1851c:	4602      	movne	r2, r0
   1851e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18522:	bf06      	itte	eq
   18524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18528:	ea91 0f03 	teqeq	r1, r3
   1852c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   18530:	bd30      	pop	{r4, r5, pc}
   18532:	bf00      	nop

00018534 <__aeabi_ui2d>:
   18534:	f090 0f00 	teq	r0, #0
   18538:	bf04      	itt	eq
   1853a:	2100      	moveq	r1, #0
   1853c:	4770      	bxeq	lr
   1853e:	b530      	push	{r4, r5, lr}
   18540:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18544:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18548:	f04f 0500 	mov.w	r5, #0
   1854c:	f04f 0100 	mov.w	r1, #0
   18550:	e750      	b.n	183f4 <__adddf3+0x138>
   18552:	bf00      	nop

00018554 <__aeabi_i2d>:
   18554:	f090 0f00 	teq	r0, #0
   18558:	bf04      	itt	eq
   1855a:	2100      	moveq	r1, #0
   1855c:	4770      	bxeq	lr
   1855e:	b530      	push	{r4, r5, lr}
   18560:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18564:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1856c:	bf48      	it	mi
   1856e:	4240      	negmi	r0, r0
   18570:	f04f 0100 	mov.w	r1, #0
   18574:	e73e      	b.n	183f4 <__adddf3+0x138>
   18576:	bf00      	nop

00018578 <__aeabi_f2d>:
   18578:	0042      	lsls	r2, r0, #1
   1857a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1857e:	ea4f 0131 	mov.w	r1, r1, rrx
   18582:	ea4f 7002 	mov.w	r0, r2, lsl #28
   18586:	bf1f      	itttt	ne
   18588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1858c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   18590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   18594:	4770      	bxne	lr
   18596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1859a:	bf08      	it	eq
   1859c:	4770      	bxeq	lr
   1859e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   185a2:	bf04      	itt	eq
   185a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   185a8:	4770      	bxeq	lr
   185aa:	b530      	push	{r4, r5, lr}
   185ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   185b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   185b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   185b8:	e71c      	b.n	183f4 <__adddf3+0x138>
   185ba:	bf00      	nop

000185bc <__aeabi_ul2d>:
   185bc:	ea50 0201 	orrs.w	r2, r0, r1
   185c0:	bf08      	it	eq
   185c2:	4770      	bxeq	lr
   185c4:	b530      	push	{r4, r5, lr}
   185c6:	f04f 0500 	mov.w	r5, #0
   185ca:	e00a      	b.n	185e2 <__aeabi_l2d+0x16>

000185cc <__aeabi_l2d>:
   185cc:	ea50 0201 	orrs.w	r2, r0, r1
   185d0:	bf08      	it	eq
   185d2:	4770      	bxeq	lr
   185d4:	b530      	push	{r4, r5, lr}
   185d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   185da:	d502      	bpl.n	185e2 <__aeabi_l2d+0x16>
   185dc:	4240      	negs	r0, r0
   185de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   185e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   185e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   185ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   185ee:	f43f aed8 	beq.w	183a2 <__adddf3+0xe6>
   185f2:	f04f 0203 	mov.w	r2, #3
   185f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   185fa:	bf18      	it	ne
   185fc:	3203      	addne	r2, #3
   185fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18602:	bf18      	it	ne
   18604:	3203      	addne	r2, #3
   18606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1860a:	f1c2 0320 	rsb	r3, r2, #32
   1860e:	fa00 fc03 	lsl.w	ip, r0, r3
   18612:	fa20 f002 	lsr.w	r0, r0, r2
   18616:	fa01 fe03 	lsl.w	lr, r1, r3
   1861a:	ea40 000e 	orr.w	r0, r0, lr
   1861e:	fa21 f102 	lsr.w	r1, r1, r2
   18622:	4414      	add	r4, r2
   18624:	e6bd      	b.n	183a2 <__adddf3+0xe6>
   18626:	bf00      	nop

00018628 <__aeabi_dmul>:
   18628:	b570      	push	{r4, r5, r6, lr}
   1862a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1862e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18636:	bf1d      	ittte	ne
   18638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1863c:	ea94 0f0c 	teqne	r4, ip
   18640:	ea95 0f0c 	teqne	r5, ip
   18644:	f000 f8de 	bleq	18804 <__aeabi_dmul+0x1dc>
   18648:	442c      	add	r4, r5
   1864a:	ea81 0603 	eor.w	r6, r1, r3
   1864e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   18652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   18656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1865a:	bf18      	it	ne
   1865c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   18660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18668:	d038      	beq.n	186dc <__aeabi_dmul+0xb4>
   1866a:	fba0 ce02 	umull	ip, lr, r0, r2
   1866e:	f04f 0500 	mov.w	r5, #0
   18672:	fbe1 e502 	umlal	lr, r5, r1, r2
   18676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1867a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1867e:	f04f 0600 	mov.w	r6, #0
   18682:	fbe1 5603 	umlal	r5, r6, r1, r3
   18686:	f09c 0f00 	teq	ip, #0
   1868a:	bf18      	it	ne
   1868c:	f04e 0e01 	orrne.w	lr, lr, #1
   18690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   18694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   18698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1869c:	d204      	bcs.n	186a8 <__aeabi_dmul+0x80>
   1869e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   186a2:	416d      	adcs	r5, r5
   186a4:	eb46 0606 	adc.w	r6, r6, r6
   186a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   186ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   186b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   186b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   186b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   186bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   186c0:	bf88      	it	hi
   186c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   186c6:	d81e      	bhi.n	18706 <__aeabi_dmul+0xde>
   186c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   186cc:	bf08      	it	eq
   186ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   186d2:	f150 0000 	adcs.w	r0, r0, #0
   186d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   186da:	bd70      	pop	{r4, r5, r6, pc}
   186dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   186e0:	ea46 0101 	orr.w	r1, r6, r1
   186e4:	ea40 0002 	orr.w	r0, r0, r2
   186e8:	ea81 0103 	eor.w	r1, r1, r3
   186ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   186f0:	bfc2      	ittt	gt
   186f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   186f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   186fa:	bd70      	popgt	{r4, r5, r6, pc}
   186fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18700:	f04f 0e00 	mov.w	lr, #0
   18704:	3c01      	subs	r4, #1
   18706:	f300 80ab 	bgt.w	18860 <__aeabi_dmul+0x238>
   1870a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1870e:	bfde      	ittt	le
   18710:	2000      	movle	r0, #0
   18712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   18716:	bd70      	pople	{r4, r5, r6, pc}
   18718:	f1c4 0400 	rsb	r4, r4, #0
   1871c:	3c20      	subs	r4, #32
   1871e:	da35      	bge.n	1878c <__aeabi_dmul+0x164>
   18720:	340c      	adds	r4, #12
   18722:	dc1b      	bgt.n	1875c <__aeabi_dmul+0x134>
   18724:	f104 0414 	add.w	r4, r4, #20
   18728:	f1c4 0520 	rsb	r5, r4, #32
   1872c:	fa00 f305 	lsl.w	r3, r0, r5
   18730:	fa20 f004 	lsr.w	r0, r0, r4
   18734:	fa01 f205 	lsl.w	r2, r1, r5
   18738:	ea40 0002 	orr.w	r0, r0, r2
   1873c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   18740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18748:	fa21 f604 	lsr.w	r6, r1, r4
   1874c:	eb42 0106 	adc.w	r1, r2, r6
   18750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18754:	bf08      	it	eq
   18756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1875a:	bd70      	pop	{r4, r5, r6, pc}
   1875c:	f1c4 040c 	rsb	r4, r4, #12
   18760:	f1c4 0520 	rsb	r5, r4, #32
   18764:	fa00 f304 	lsl.w	r3, r0, r4
   18768:	fa20 f005 	lsr.w	r0, r0, r5
   1876c:	fa01 f204 	lsl.w	r2, r1, r4
   18770:	ea40 0002 	orr.w	r0, r0, r2
   18774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1877c:	f141 0100 	adc.w	r1, r1, #0
   18780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18784:	bf08      	it	eq
   18786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1878a:	bd70      	pop	{r4, r5, r6, pc}
   1878c:	f1c4 0520 	rsb	r5, r4, #32
   18790:	fa00 f205 	lsl.w	r2, r0, r5
   18794:	ea4e 0e02 	orr.w	lr, lr, r2
   18798:	fa20 f304 	lsr.w	r3, r0, r4
   1879c:	fa01 f205 	lsl.w	r2, r1, r5
   187a0:	ea43 0302 	orr.w	r3, r3, r2
   187a4:	fa21 f004 	lsr.w	r0, r1, r4
   187a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   187ac:	fa21 f204 	lsr.w	r2, r1, r4
   187b0:	ea20 0002 	bic.w	r0, r0, r2
   187b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   187b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   187bc:	bf08      	it	eq
   187be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   187c2:	bd70      	pop	{r4, r5, r6, pc}
   187c4:	f094 0f00 	teq	r4, #0
   187c8:	d10f      	bne.n	187ea <__aeabi_dmul+0x1c2>
   187ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   187ce:	0040      	lsls	r0, r0, #1
   187d0:	eb41 0101 	adc.w	r1, r1, r1
   187d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   187d8:	bf08      	it	eq
   187da:	3c01      	subeq	r4, #1
   187dc:	d0f7      	beq.n	187ce <__aeabi_dmul+0x1a6>
   187de:	ea41 0106 	orr.w	r1, r1, r6
   187e2:	f095 0f00 	teq	r5, #0
   187e6:	bf18      	it	ne
   187e8:	4770      	bxne	lr
   187ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   187ee:	0052      	lsls	r2, r2, #1
   187f0:	eb43 0303 	adc.w	r3, r3, r3
   187f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   187f8:	bf08      	it	eq
   187fa:	3d01      	subeq	r5, #1
   187fc:	d0f7      	beq.n	187ee <__aeabi_dmul+0x1c6>
   187fe:	ea43 0306 	orr.w	r3, r3, r6
   18802:	4770      	bx	lr
   18804:	ea94 0f0c 	teq	r4, ip
   18808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1880c:	bf18      	it	ne
   1880e:	ea95 0f0c 	teqne	r5, ip
   18812:	d00c      	beq.n	1882e <__aeabi_dmul+0x206>
   18814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18818:	bf18      	it	ne
   1881a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1881e:	d1d1      	bne.n	187c4 <__aeabi_dmul+0x19c>
   18820:	ea81 0103 	eor.w	r1, r1, r3
   18824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18828:	f04f 0000 	mov.w	r0, #0
   1882c:	bd70      	pop	{r4, r5, r6, pc}
   1882e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18832:	bf06      	itte	eq
   18834:	4610      	moveq	r0, r2
   18836:	4619      	moveq	r1, r3
   18838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1883c:	d019      	beq.n	18872 <__aeabi_dmul+0x24a>
   1883e:	ea94 0f0c 	teq	r4, ip
   18842:	d102      	bne.n	1884a <__aeabi_dmul+0x222>
   18844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   18848:	d113      	bne.n	18872 <__aeabi_dmul+0x24a>
   1884a:	ea95 0f0c 	teq	r5, ip
   1884e:	d105      	bne.n	1885c <__aeabi_dmul+0x234>
   18850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   18854:	bf1c      	itt	ne
   18856:	4610      	movne	r0, r2
   18858:	4619      	movne	r1, r3
   1885a:	d10a      	bne.n	18872 <__aeabi_dmul+0x24a>
   1885c:	ea81 0103 	eor.w	r1, r1, r3
   18860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1886c:	f04f 0000 	mov.w	r0, #0
   18870:	bd70      	pop	{r4, r5, r6, pc}
   18872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1887a:	bd70      	pop	{r4, r5, r6, pc}

0001887c <__aeabi_ddiv>:
   1887c:	b570      	push	{r4, r5, r6, lr}
   1887e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1888a:	bf1d      	ittte	ne
   1888c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18890:	ea94 0f0c 	teqne	r4, ip
   18894:	ea95 0f0c 	teqne	r5, ip
   18898:	f000 f8a7 	bleq	189ea <__aeabi_ddiv+0x16e>
   1889c:	eba4 0405 	sub.w	r4, r4, r5
   188a0:	ea81 0e03 	eor.w	lr, r1, r3
   188a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   188a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   188ac:	f000 8088 	beq.w	189c0 <__aeabi_ddiv+0x144>
   188b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   188b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   188b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   188bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   188c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   188c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   188c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   188cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   188d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   188d4:	429d      	cmp	r5, r3
   188d6:	bf08      	it	eq
   188d8:	4296      	cmpeq	r6, r2
   188da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   188de:	f504 7440 	add.w	r4, r4, #768	; 0x300
   188e2:	d202      	bcs.n	188ea <__aeabi_ddiv+0x6e>
   188e4:	085b      	lsrs	r3, r3, #1
   188e6:	ea4f 0232 	mov.w	r2, r2, rrx
   188ea:	1ab6      	subs	r6, r6, r2
   188ec:	eb65 0503 	sbc.w	r5, r5, r3
   188f0:	085b      	lsrs	r3, r3, #1
   188f2:	ea4f 0232 	mov.w	r2, r2, rrx
   188f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   188fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   188fe:	ebb6 0e02 	subs.w	lr, r6, r2
   18902:	eb75 0e03 	sbcs.w	lr, r5, r3
   18906:	bf22      	ittt	cs
   18908:	1ab6      	subcs	r6, r6, r2
   1890a:	4675      	movcs	r5, lr
   1890c:	ea40 000c 	orrcs.w	r0, r0, ip
   18910:	085b      	lsrs	r3, r3, #1
   18912:	ea4f 0232 	mov.w	r2, r2, rrx
   18916:	ebb6 0e02 	subs.w	lr, r6, r2
   1891a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1891e:	bf22      	ittt	cs
   18920:	1ab6      	subcs	r6, r6, r2
   18922:	4675      	movcs	r5, lr
   18924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18928:	085b      	lsrs	r3, r3, #1
   1892a:	ea4f 0232 	mov.w	r2, r2, rrx
   1892e:	ebb6 0e02 	subs.w	lr, r6, r2
   18932:	eb75 0e03 	sbcs.w	lr, r5, r3
   18936:	bf22      	ittt	cs
   18938:	1ab6      	subcs	r6, r6, r2
   1893a:	4675      	movcs	r5, lr
   1893c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18940:	085b      	lsrs	r3, r3, #1
   18942:	ea4f 0232 	mov.w	r2, r2, rrx
   18946:	ebb6 0e02 	subs.w	lr, r6, r2
   1894a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1894e:	bf22      	ittt	cs
   18950:	1ab6      	subcs	r6, r6, r2
   18952:	4675      	movcs	r5, lr
   18954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18958:	ea55 0e06 	orrs.w	lr, r5, r6
   1895c:	d018      	beq.n	18990 <__aeabi_ddiv+0x114>
   1895e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18966:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1896a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1896e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1897a:	d1c0      	bne.n	188fe <__aeabi_ddiv+0x82>
   1897c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18980:	d10b      	bne.n	1899a <__aeabi_ddiv+0x11e>
   18982:	ea41 0100 	orr.w	r1, r1, r0
   18986:	f04f 0000 	mov.w	r0, #0
   1898a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1898e:	e7b6      	b.n	188fe <__aeabi_ddiv+0x82>
   18990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18994:	bf04      	itt	eq
   18996:	4301      	orreq	r1, r0
   18998:	2000      	moveq	r0, #0
   1899a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1899e:	bf88      	it	hi
   189a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   189a4:	f63f aeaf 	bhi.w	18706 <__aeabi_dmul+0xde>
   189a8:	ebb5 0c03 	subs.w	ip, r5, r3
   189ac:	bf04      	itt	eq
   189ae:	ebb6 0c02 	subseq.w	ip, r6, r2
   189b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   189b6:	f150 0000 	adcs.w	r0, r0, #0
   189ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   189be:	bd70      	pop	{r4, r5, r6, pc}
   189c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   189c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   189c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   189cc:	bfc2      	ittt	gt
   189ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   189d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   189d6:	bd70      	popgt	{r4, r5, r6, pc}
   189d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   189dc:	f04f 0e00 	mov.w	lr, #0
   189e0:	3c01      	subs	r4, #1
   189e2:	e690      	b.n	18706 <__aeabi_dmul+0xde>
   189e4:	ea45 0e06 	orr.w	lr, r5, r6
   189e8:	e68d      	b.n	18706 <__aeabi_dmul+0xde>
   189ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   189ee:	ea94 0f0c 	teq	r4, ip
   189f2:	bf08      	it	eq
   189f4:	ea95 0f0c 	teqeq	r5, ip
   189f8:	f43f af3b 	beq.w	18872 <__aeabi_dmul+0x24a>
   189fc:	ea94 0f0c 	teq	r4, ip
   18a00:	d10a      	bne.n	18a18 <__aeabi_ddiv+0x19c>
   18a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18a06:	f47f af34 	bne.w	18872 <__aeabi_dmul+0x24a>
   18a0a:	ea95 0f0c 	teq	r5, ip
   18a0e:	f47f af25 	bne.w	1885c <__aeabi_dmul+0x234>
   18a12:	4610      	mov	r0, r2
   18a14:	4619      	mov	r1, r3
   18a16:	e72c      	b.n	18872 <__aeabi_dmul+0x24a>
   18a18:	ea95 0f0c 	teq	r5, ip
   18a1c:	d106      	bne.n	18a2c <__aeabi_ddiv+0x1b0>
   18a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18a22:	f43f aefd 	beq.w	18820 <__aeabi_dmul+0x1f8>
   18a26:	4610      	mov	r0, r2
   18a28:	4619      	mov	r1, r3
   18a2a:	e722      	b.n	18872 <__aeabi_dmul+0x24a>
   18a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18a30:	bf18      	it	ne
   18a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18a36:	f47f aec5 	bne.w	187c4 <__aeabi_dmul+0x19c>
   18a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18a3e:	f47f af0d 	bne.w	1885c <__aeabi_dmul+0x234>
   18a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18a46:	f47f aeeb 	bne.w	18820 <__aeabi_dmul+0x1f8>
   18a4a:	e712      	b.n	18872 <__aeabi_dmul+0x24a>

00018a4c <__aeabi_d2f>:
   18a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18a54:	bf24      	itt	cs
   18a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   18a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18a5e:	d90d      	bls.n	18a7c <__aeabi_d2f+0x30>
   18a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18a74:	bf08      	it	eq
   18a76:	f020 0001 	biceq.w	r0, r0, #1
   18a7a:	4770      	bx	lr
   18a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18a80:	d121      	bne.n	18ac6 <__aeabi_d2f+0x7a>
   18a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18a86:	bfbc      	itt	lt
   18a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18a8c:	4770      	bxlt	lr
   18a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18a96:	f1c2 0218 	rsb	r2, r2, #24
   18a9a:	f1c2 0c20 	rsb	ip, r2, #32
   18a9e:	fa10 f30c 	lsls.w	r3, r0, ip
   18aa2:	fa20 f002 	lsr.w	r0, r0, r2
   18aa6:	bf18      	it	ne
   18aa8:	f040 0001 	orrne.w	r0, r0, #1
   18aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
   18ab8:	ea40 000c 	orr.w	r0, r0, ip
   18abc:	fa23 f302 	lsr.w	r3, r3, r2
   18ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18ac4:	e7cc      	b.n	18a60 <__aeabi_d2f+0x14>
   18ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18aca:	d107      	bne.n	18adc <__aeabi_d2f+0x90>
   18acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18ad0:	bf1e      	ittt	ne
   18ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18ada:	4770      	bxne	lr
   18adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18ae8:	4770      	bx	lr
   18aea:	bf00      	nop

00018aec <__aeabi_frsub>:
   18aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18af0:	e002      	b.n	18af8 <__addsf3>
   18af2:	bf00      	nop

00018af4 <__aeabi_fsub>:
   18af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018af8 <__addsf3>:
   18af8:	0042      	lsls	r2, r0, #1
   18afa:	bf1f      	itttt	ne
   18afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18b00:	ea92 0f03 	teqne	r2, r3
   18b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18b0c:	d06a      	beq.n	18be4 <__addsf3+0xec>
   18b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   18b16:	bfc1      	itttt	gt
   18b18:	18d2      	addgt	r2, r2, r3
   18b1a:	4041      	eorgt	r1, r0
   18b1c:	4048      	eorgt	r0, r1
   18b1e:	4041      	eorgt	r1, r0
   18b20:	bfb8      	it	lt
   18b22:	425b      	neglt	r3, r3
   18b24:	2b19      	cmp	r3, #25
   18b26:	bf88      	it	hi
   18b28:	4770      	bxhi	lr
   18b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18b36:	bf18      	it	ne
   18b38:	4240      	negne	r0, r0
   18b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18b46:	bf18      	it	ne
   18b48:	4249      	negne	r1, r1
   18b4a:	ea92 0f03 	teq	r2, r3
   18b4e:	d03f      	beq.n	18bd0 <__addsf3+0xd8>
   18b50:	f1a2 0201 	sub.w	r2, r2, #1
   18b54:	fa41 fc03 	asr.w	ip, r1, r3
   18b58:	eb10 000c 	adds.w	r0, r0, ip
   18b5c:	f1c3 0320 	rsb	r3, r3, #32
   18b60:	fa01 f103 	lsl.w	r1, r1, r3
   18b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18b68:	d502      	bpl.n	18b70 <__addsf3+0x78>
   18b6a:	4249      	negs	r1, r1
   18b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18b74:	d313      	bcc.n	18b9e <__addsf3+0xa6>
   18b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18b7a:	d306      	bcc.n	18b8a <__addsf3+0x92>
   18b7c:	0840      	lsrs	r0, r0, #1
   18b7e:	ea4f 0131 	mov.w	r1, r1, rrx
   18b82:	f102 0201 	add.w	r2, r2, #1
   18b86:	2afe      	cmp	r2, #254	; 0xfe
   18b88:	d251      	bcs.n	18c2e <__addsf3+0x136>
   18b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18b92:	bf08      	it	eq
   18b94:	f020 0001 	biceq.w	r0, r0, #1
   18b98:	ea40 0003 	orr.w	r0, r0, r3
   18b9c:	4770      	bx	lr
   18b9e:	0049      	lsls	r1, r1, #1
   18ba0:	eb40 0000 	adc.w	r0, r0, r0
   18ba4:	3a01      	subs	r2, #1
   18ba6:	bf28      	it	cs
   18ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   18bac:	d2ed      	bcs.n	18b8a <__addsf3+0x92>
   18bae:	fab0 fc80 	clz	ip, r0
   18bb2:	f1ac 0c08 	sub.w	ip, ip, #8
   18bb6:	ebb2 020c 	subs.w	r2, r2, ip
   18bba:	fa00 f00c 	lsl.w	r0, r0, ip
   18bbe:	bfaa      	itet	ge
   18bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18bc4:	4252      	neglt	r2, r2
   18bc6:	4318      	orrge	r0, r3
   18bc8:	bfbc      	itt	lt
   18bca:	40d0      	lsrlt	r0, r2
   18bcc:	4318      	orrlt	r0, r3
   18bce:	4770      	bx	lr
   18bd0:	f092 0f00 	teq	r2, #0
   18bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18bd8:	bf06      	itte	eq
   18bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18bde:	3201      	addeq	r2, #1
   18be0:	3b01      	subne	r3, #1
   18be2:	e7b5      	b.n	18b50 <__addsf3+0x58>
   18be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18bec:	bf18      	it	ne
   18bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18bf2:	d021      	beq.n	18c38 <__addsf3+0x140>
   18bf4:	ea92 0f03 	teq	r2, r3
   18bf8:	d004      	beq.n	18c04 <__addsf3+0x10c>
   18bfa:	f092 0f00 	teq	r2, #0
   18bfe:	bf08      	it	eq
   18c00:	4608      	moveq	r0, r1
   18c02:	4770      	bx	lr
   18c04:	ea90 0f01 	teq	r0, r1
   18c08:	bf1c      	itt	ne
   18c0a:	2000      	movne	r0, #0
   18c0c:	4770      	bxne	lr
   18c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18c12:	d104      	bne.n	18c1e <__addsf3+0x126>
   18c14:	0040      	lsls	r0, r0, #1
   18c16:	bf28      	it	cs
   18c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18c1c:	4770      	bx	lr
   18c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18c22:	bf3c      	itt	cc
   18c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18c28:	4770      	bxcc	lr
   18c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18c36:	4770      	bx	lr
   18c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18c3c:	bf16      	itet	ne
   18c3e:	4608      	movne	r0, r1
   18c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18c44:	4601      	movne	r1, r0
   18c46:	0242      	lsls	r2, r0, #9
   18c48:	bf06      	itte	eq
   18c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18c4e:	ea90 0f01 	teqeq	r0, r1
   18c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18c56:	4770      	bx	lr

00018c58 <__aeabi_ui2f>:
   18c58:	f04f 0300 	mov.w	r3, #0
   18c5c:	e004      	b.n	18c68 <__aeabi_i2f+0x8>
   18c5e:	bf00      	nop

00018c60 <__aeabi_i2f>:
   18c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18c64:	bf48      	it	mi
   18c66:	4240      	negmi	r0, r0
   18c68:	ea5f 0c00 	movs.w	ip, r0
   18c6c:	bf08      	it	eq
   18c6e:	4770      	bxeq	lr
   18c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18c74:	4601      	mov	r1, r0
   18c76:	f04f 0000 	mov.w	r0, #0
   18c7a:	e01c      	b.n	18cb6 <__aeabi_l2f+0x2a>

00018c7c <__aeabi_ul2f>:
   18c7c:	ea50 0201 	orrs.w	r2, r0, r1
   18c80:	bf08      	it	eq
   18c82:	4770      	bxeq	lr
   18c84:	f04f 0300 	mov.w	r3, #0
   18c88:	e00a      	b.n	18ca0 <__aeabi_l2f+0x14>
   18c8a:	bf00      	nop

00018c8c <__aeabi_l2f>:
   18c8c:	ea50 0201 	orrs.w	r2, r0, r1
   18c90:	bf08      	it	eq
   18c92:	4770      	bxeq	lr
   18c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18c98:	d502      	bpl.n	18ca0 <__aeabi_l2f+0x14>
   18c9a:	4240      	negs	r0, r0
   18c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18ca0:	ea5f 0c01 	movs.w	ip, r1
   18ca4:	bf02      	ittt	eq
   18ca6:	4684      	moveq	ip, r0
   18ca8:	4601      	moveq	r1, r0
   18caa:	2000      	moveq	r0, #0
   18cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18cb0:	bf08      	it	eq
   18cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18cba:	fabc f28c 	clz	r2, ip
   18cbe:	3a08      	subs	r2, #8
   18cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18cc4:	db10      	blt.n	18ce8 <__aeabi_l2f+0x5c>
   18cc6:	fa01 fc02 	lsl.w	ip, r1, r2
   18cca:	4463      	add	r3, ip
   18ccc:	fa00 fc02 	lsl.w	ip, r0, r2
   18cd0:	f1c2 0220 	rsb	r2, r2, #32
   18cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18cd8:	fa20 f202 	lsr.w	r2, r0, r2
   18cdc:	eb43 0002 	adc.w	r0, r3, r2
   18ce0:	bf08      	it	eq
   18ce2:	f020 0001 	biceq.w	r0, r0, #1
   18ce6:	4770      	bx	lr
   18ce8:	f102 0220 	add.w	r2, r2, #32
   18cec:	fa01 fc02 	lsl.w	ip, r1, r2
   18cf0:	f1c2 0220 	rsb	r2, r2, #32
   18cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18cf8:	fa21 f202 	lsr.w	r2, r1, r2
   18cfc:	eb43 0002 	adc.w	r0, r3, r2
   18d00:	bf08      	it	eq
   18d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18d06:	4770      	bx	lr

00018d08 <__aeabi_uldivmod>:
   18d08:	b953      	cbnz	r3, 18d20 <__aeabi_uldivmod+0x18>
   18d0a:	b94a      	cbnz	r2, 18d20 <__aeabi_uldivmod+0x18>
   18d0c:	2900      	cmp	r1, #0
   18d0e:	bf08      	it	eq
   18d10:	2800      	cmpeq	r0, #0
   18d12:	bf1c      	itt	ne
   18d14:	f04f 31ff 	movne.w	r1, #4294967295
   18d18:	f04f 30ff 	movne.w	r0, #4294967295
   18d1c:	f000 b80c 	b.w	18d38 <__aeabi_idiv0>
   18d20:	f1ad 0c08 	sub.w	ip, sp, #8
   18d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18d28:	f000 f808 	bl	18d3c <__udivmoddi4>
   18d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d34:	b004      	add	sp, #16
   18d36:	4770      	bx	lr

00018d38 <__aeabi_idiv0>:
   18d38:	4770      	bx	lr
   18d3a:	bf00      	nop

00018d3c <__udivmoddi4>:
   18d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18d40:	4686      	mov	lr, r0
   18d42:	468c      	mov	ip, r1
   18d44:	4608      	mov	r0, r1
   18d46:	9e08      	ldr	r6, [sp, #32]
   18d48:	4615      	mov	r5, r2
   18d4a:	4674      	mov	r4, lr
   18d4c:	4619      	mov	r1, r3
   18d4e:	2b00      	cmp	r3, #0
   18d50:	f040 80c1 	bne.w	18ed6 <__udivmoddi4+0x19a>
   18d54:	4285      	cmp	r5, r0
   18d56:	fab2 f282 	clz	r2, r2
   18d5a:	d945      	bls.n	18de8 <__udivmoddi4+0xac>
   18d5c:	b14a      	cbz	r2, 18d72 <__udivmoddi4+0x36>
   18d5e:	f1c2 0320 	rsb	r3, r2, #32
   18d62:	fa00 fc02 	lsl.w	ip, r0, r2
   18d66:	4095      	lsls	r5, r2
   18d68:	4094      	lsls	r4, r2
   18d6a:	fa2e f303 	lsr.w	r3, lr, r3
   18d6e:	ea43 0c0c 	orr.w	ip, r3, ip
   18d72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18d76:	b2a8      	uxth	r0, r5
   18d78:	0c23      	lsrs	r3, r4, #16
   18d7a:	fbbc f8fe 	udiv	r8, ip, lr
   18d7e:	fb0e cc18 	mls	ip, lr, r8, ip
   18d82:	fb08 f900 	mul.w	r9, r8, r0
   18d86:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   18d8a:	4599      	cmp	r9, r3
   18d8c:	d928      	bls.n	18de0 <__udivmoddi4+0xa4>
   18d8e:	18eb      	adds	r3, r5, r3
   18d90:	f108 37ff 	add.w	r7, r8, #4294967295
   18d94:	d204      	bcs.n	18da0 <__udivmoddi4+0x64>
   18d96:	4599      	cmp	r9, r3
   18d98:	d902      	bls.n	18da0 <__udivmoddi4+0x64>
   18d9a:	f1a8 0702 	sub.w	r7, r8, #2
   18d9e:	442b      	add	r3, r5
   18da0:	eba3 0309 	sub.w	r3, r3, r9
   18da4:	b2a4      	uxth	r4, r4
   18da6:	fbb3 fcfe 	udiv	ip, r3, lr
   18daa:	fb0e 331c 	mls	r3, lr, ip, r3
   18dae:	fb0c f000 	mul.w	r0, ip, r0
   18db2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   18db6:	42a0      	cmp	r0, r4
   18db8:	d914      	bls.n	18de4 <__udivmoddi4+0xa8>
   18dba:	192c      	adds	r4, r5, r4
   18dbc:	f10c 33ff 	add.w	r3, ip, #4294967295
   18dc0:	d204      	bcs.n	18dcc <__udivmoddi4+0x90>
   18dc2:	42a0      	cmp	r0, r4
   18dc4:	d902      	bls.n	18dcc <__udivmoddi4+0x90>
   18dc6:	f1ac 0302 	sub.w	r3, ip, #2
   18dca:	442c      	add	r4, r5
   18dcc:	1a24      	subs	r4, r4, r0
   18dce:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   18dd2:	b11e      	cbz	r6, 18ddc <__udivmoddi4+0xa0>
   18dd4:	40d4      	lsrs	r4, r2
   18dd6:	2300      	movs	r3, #0
   18dd8:	6034      	str	r4, [r6, #0]
   18dda:	6073      	str	r3, [r6, #4]
   18ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18de0:	4647      	mov	r7, r8
   18de2:	e7dd      	b.n	18da0 <__udivmoddi4+0x64>
   18de4:	4663      	mov	r3, ip
   18de6:	e7f1      	b.n	18dcc <__udivmoddi4+0x90>
   18de8:	bb92      	cbnz	r2, 18e50 <__udivmoddi4+0x114>
   18dea:	1b43      	subs	r3, r0, r5
   18dec:	2101      	movs	r1, #1
   18dee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18df2:	b2af      	uxth	r7, r5
   18df4:	0c20      	lsrs	r0, r4, #16
   18df6:	fbb3 fcfe 	udiv	ip, r3, lr
   18dfa:	fb0e 331c 	mls	r3, lr, ip, r3
   18dfe:	fb0c f807 	mul.w	r8, ip, r7
   18e02:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   18e06:	4598      	cmp	r8, r3
   18e08:	d961      	bls.n	18ece <__udivmoddi4+0x192>
   18e0a:	18eb      	adds	r3, r5, r3
   18e0c:	f10c 30ff 	add.w	r0, ip, #4294967295
   18e10:	d204      	bcs.n	18e1c <__udivmoddi4+0xe0>
   18e12:	4598      	cmp	r8, r3
   18e14:	d902      	bls.n	18e1c <__udivmoddi4+0xe0>
   18e16:	f1ac 0002 	sub.w	r0, ip, #2
   18e1a:	442b      	add	r3, r5
   18e1c:	eba3 0308 	sub.w	r3, r3, r8
   18e20:	b2a4      	uxth	r4, r4
   18e22:	fbb3 fcfe 	udiv	ip, r3, lr
   18e26:	fb0e 331c 	mls	r3, lr, ip, r3
   18e2a:	fb0c f707 	mul.w	r7, ip, r7
   18e2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   18e32:	42a7      	cmp	r7, r4
   18e34:	d94d      	bls.n	18ed2 <__udivmoddi4+0x196>
   18e36:	192c      	adds	r4, r5, r4
   18e38:	f10c 33ff 	add.w	r3, ip, #4294967295
   18e3c:	d204      	bcs.n	18e48 <__udivmoddi4+0x10c>
   18e3e:	42a7      	cmp	r7, r4
   18e40:	d902      	bls.n	18e48 <__udivmoddi4+0x10c>
   18e42:	f1ac 0302 	sub.w	r3, ip, #2
   18e46:	442c      	add	r4, r5
   18e48:	1be4      	subs	r4, r4, r7
   18e4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   18e4e:	e7c0      	b.n	18dd2 <__udivmoddi4+0x96>
   18e50:	f1c2 0320 	rsb	r3, r2, #32
   18e54:	4095      	lsls	r5, r2
   18e56:	4094      	lsls	r4, r2
   18e58:	fa20 f103 	lsr.w	r1, r0, r3
   18e5c:	fa2e f303 	lsr.w	r3, lr, r3
   18e60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18e64:	4090      	lsls	r0, r2
   18e66:	b2af      	uxth	r7, r5
   18e68:	4303      	orrs	r3, r0
   18e6a:	fbb1 fcfe 	udiv	ip, r1, lr
   18e6e:	fb0e 101c 	mls	r0, lr, ip, r1
   18e72:	0c19      	lsrs	r1, r3, #16
   18e74:	fb0c f807 	mul.w	r8, ip, r7
   18e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   18e7c:	4588      	cmp	r8, r1
   18e7e:	d922      	bls.n	18ec6 <__udivmoddi4+0x18a>
   18e80:	1869      	adds	r1, r5, r1
   18e82:	f10c 30ff 	add.w	r0, ip, #4294967295
   18e86:	d204      	bcs.n	18e92 <__udivmoddi4+0x156>
   18e88:	4588      	cmp	r8, r1
   18e8a:	d902      	bls.n	18e92 <__udivmoddi4+0x156>
   18e8c:	f1ac 0002 	sub.w	r0, ip, #2
   18e90:	4429      	add	r1, r5
   18e92:	eba1 0108 	sub.w	r1, r1, r8
   18e96:	b29b      	uxth	r3, r3
   18e98:	fbb1 fcfe 	udiv	ip, r1, lr
   18e9c:	fb0e 111c 	mls	r1, lr, ip, r1
   18ea0:	fb0c f707 	mul.w	r7, ip, r7
   18ea4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   18ea8:	429f      	cmp	r7, r3
   18eaa:	d90e      	bls.n	18eca <__udivmoddi4+0x18e>
   18eac:	18eb      	adds	r3, r5, r3
   18eae:	f10c 31ff 	add.w	r1, ip, #4294967295
   18eb2:	d204      	bcs.n	18ebe <__udivmoddi4+0x182>
   18eb4:	429f      	cmp	r7, r3
   18eb6:	d902      	bls.n	18ebe <__udivmoddi4+0x182>
   18eb8:	f1ac 0102 	sub.w	r1, ip, #2
   18ebc:	442b      	add	r3, r5
   18ebe:	1bdb      	subs	r3, r3, r7
   18ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   18ec4:	e793      	b.n	18dee <__udivmoddi4+0xb2>
   18ec6:	4660      	mov	r0, ip
   18ec8:	e7e3      	b.n	18e92 <__udivmoddi4+0x156>
   18eca:	4661      	mov	r1, ip
   18ecc:	e7f7      	b.n	18ebe <__udivmoddi4+0x182>
   18ece:	4660      	mov	r0, ip
   18ed0:	e7a4      	b.n	18e1c <__udivmoddi4+0xe0>
   18ed2:	4663      	mov	r3, ip
   18ed4:	e7b8      	b.n	18e48 <__udivmoddi4+0x10c>
   18ed6:	4283      	cmp	r3, r0
   18ed8:	d906      	bls.n	18ee8 <__udivmoddi4+0x1ac>
   18eda:	b916      	cbnz	r6, 18ee2 <__udivmoddi4+0x1a6>
   18edc:	2100      	movs	r1, #0
   18ede:	4608      	mov	r0, r1
   18ee0:	e77c      	b.n	18ddc <__udivmoddi4+0xa0>
   18ee2:	e9c6 e000 	strd	lr, r0, [r6]
   18ee6:	e7f9      	b.n	18edc <__udivmoddi4+0x1a0>
   18ee8:	fab3 f783 	clz	r7, r3
   18eec:	b98f      	cbnz	r7, 18f12 <__udivmoddi4+0x1d6>
   18eee:	4283      	cmp	r3, r0
   18ef0:	d301      	bcc.n	18ef6 <__udivmoddi4+0x1ba>
   18ef2:	4572      	cmp	r2, lr
   18ef4:	d808      	bhi.n	18f08 <__udivmoddi4+0x1cc>
   18ef6:	ebbe 0402 	subs.w	r4, lr, r2
   18efa:	eb60 0303 	sbc.w	r3, r0, r3
   18efe:	2001      	movs	r0, #1
   18f00:	469c      	mov	ip, r3
   18f02:	b91e      	cbnz	r6, 18f0c <__udivmoddi4+0x1d0>
   18f04:	2100      	movs	r1, #0
   18f06:	e769      	b.n	18ddc <__udivmoddi4+0xa0>
   18f08:	4638      	mov	r0, r7
   18f0a:	e7fa      	b.n	18f02 <__udivmoddi4+0x1c6>
   18f0c:	e9c6 4c00 	strd	r4, ip, [r6]
   18f10:	e7f8      	b.n	18f04 <__udivmoddi4+0x1c8>
   18f12:	f1c7 0c20 	rsb	ip, r7, #32
   18f16:	40bb      	lsls	r3, r7
   18f18:	fa0e f507 	lsl.w	r5, lr, r7
   18f1c:	fa22 f40c 	lsr.w	r4, r2, ip
   18f20:	fa2e f10c 	lsr.w	r1, lr, ip
   18f24:	40ba      	lsls	r2, r7
   18f26:	431c      	orrs	r4, r3
   18f28:	fa20 f30c 	lsr.w	r3, r0, ip
   18f2c:	40b8      	lsls	r0, r7
   18f2e:	ea4f 4914 	mov.w	r9, r4, lsr #16
   18f32:	4301      	orrs	r1, r0
   18f34:	fa1f fe84 	uxth.w	lr, r4
   18f38:	fbb3 f8f9 	udiv	r8, r3, r9
   18f3c:	fb09 3018 	mls	r0, r9, r8, r3
   18f40:	0c0b      	lsrs	r3, r1, #16
   18f42:	fb08 fa0e 	mul.w	sl, r8, lr
   18f46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   18f4a:	459a      	cmp	sl, r3
   18f4c:	d940      	bls.n	18fd0 <__udivmoddi4+0x294>
   18f4e:	18e3      	adds	r3, r4, r3
   18f50:	f108 30ff 	add.w	r0, r8, #4294967295
   18f54:	d204      	bcs.n	18f60 <__udivmoddi4+0x224>
   18f56:	459a      	cmp	sl, r3
   18f58:	d902      	bls.n	18f60 <__udivmoddi4+0x224>
   18f5a:	f1a8 0002 	sub.w	r0, r8, #2
   18f5e:	4423      	add	r3, r4
   18f60:	eba3 030a 	sub.w	r3, r3, sl
   18f64:	b289      	uxth	r1, r1
   18f66:	fbb3 f8f9 	udiv	r8, r3, r9
   18f6a:	fb09 3318 	mls	r3, r9, r8, r3
   18f6e:	fb08 fe0e 	mul.w	lr, r8, lr
   18f72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   18f76:	458e      	cmp	lr, r1
   18f78:	d92c      	bls.n	18fd4 <__udivmoddi4+0x298>
   18f7a:	1861      	adds	r1, r4, r1
   18f7c:	f108 33ff 	add.w	r3, r8, #4294967295
   18f80:	d204      	bcs.n	18f8c <__udivmoddi4+0x250>
   18f82:	458e      	cmp	lr, r1
   18f84:	d902      	bls.n	18f8c <__udivmoddi4+0x250>
   18f86:	f1a8 0302 	sub.w	r3, r8, #2
   18f8a:	4421      	add	r1, r4
   18f8c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   18f90:	eba1 010e 	sub.w	r1, r1, lr
   18f94:	fba0 9802 	umull	r9, r8, r0, r2
   18f98:	4541      	cmp	r1, r8
   18f9a:	46ce      	mov	lr, r9
   18f9c:	4643      	mov	r3, r8
   18f9e:	d302      	bcc.n	18fa6 <__udivmoddi4+0x26a>
   18fa0:	d106      	bne.n	18fb0 <__udivmoddi4+0x274>
   18fa2:	454d      	cmp	r5, r9
   18fa4:	d204      	bcs.n	18fb0 <__udivmoddi4+0x274>
   18fa6:	3801      	subs	r0, #1
   18fa8:	ebb9 0e02 	subs.w	lr, r9, r2
   18fac:	eb68 0304 	sbc.w	r3, r8, r4
   18fb0:	2e00      	cmp	r6, #0
   18fb2:	d0a7      	beq.n	18f04 <__udivmoddi4+0x1c8>
   18fb4:	ebb5 020e 	subs.w	r2, r5, lr
   18fb8:	eb61 0103 	sbc.w	r1, r1, r3
   18fbc:	fa01 fc0c 	lsl.w	ip, r1, ip
   18fc0:	fa22 f307 	lsr.w	r3, r2, r7
   18fc4:	40f9      	lsrs	r1, r7
   18fc6:	ea4c 0303 	orr.w	r3, ip, r3
   18fca:	e9c6 3100 	strd	r3, r1, [r6]
   18fce:	e799      	b.n	18f04 <__udivmoddi4+0x1c8>
   18fd0:	4640      	mov	r0, r8
   18fd2:	e7c5      	b.n	18f60 <__udivmoddi4+0x224>
   18fd4:	4643      	mov	r3, r8
   18fd6:	e7d9      	b.n	18f8c <__udivmoddi4+0x250>

00018fd8 <strcmp>:
   18fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
   18fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
   18fe0:	2a01      	cmp	r2, #1
   18fe2:	bf28      	it	cs
   18fe4:	429a      	cmpcs	r2, r3
   18fe6:	d0f7      	beq.n	18fd8 <strcmp>
   18fe8:	1ad0      	subs	r0, r2, r3
   18fea:	4770      	bx	lr

00018fec <strlen>:
   18fec:	4603      	mov	r3, r0
   18fee:	f813 2b01 	ldrb.w	r2, [r3], #1
   18ff2:	2a00      	cmp	r2, #0
   18ff4:	d1fb      	bne.n	18fee <strlen+0x2>
   18ff6:	1a18      	subs	r0, r3, r0
   18ff8:	3801      	subs	r0, #1
   18ffa:	4770      	bx	lr
   18ffc:	0000      	movs	r0, r0
	...

00019000 <parse_edrx>:

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   19000:	2300      	movs	r3, #0
{
   19002:	b5f0      	push	{r4, r5, r6, r7, lr}
   19004:	b08d      	sub	sp, #52	; 0x34
   19006:	af00      	add	r7, sp, #0
	struct at_param_list resp_list = {0};
   19008:	e9c7 3304 	strd	r3, r3, [r7, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1900c:	2304      	movs	r3, #4
{
   1900e:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   19010:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
   19012:	607b      	str	r3, [r7, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   19014:	2800      	cmp	r0, #0
   19016:	f000 80d5 	beq.w	191c4 <parse_edrx+0x1c4>
   1901a:	2900      	cmp	r1, #0
   1901c:	f000 80d2 	beq.w	191c4 <parse_edrx+0x1c4>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   19020:	2106      	movs	r1, #6
   19022:	f107 0010 	add.w	r0, r7, #16
   19026:	f00d fe1b 	bl	26c60 <at_params_list_init>
	if (err) {
   1902a:	4604      	mov	r4, r0
   1902c:	b190      	cbz	r0, 19054 <parse_edrx+0x54>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1902e:	466d      	mov	r5, sp
   19030:	b088      	sub	sp, #32
   19032:	466a      	mov	r2, sp
   19034:	4b68      	ldr	r3, [pc, #416]	; (191d8 <parse_edrx+0x1d8>)
   19036:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1903a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1903e:	2303      	movs	r3, #3
   19040:	4866      	ldr	r0, [pc, #408]	; (191dc <parse_edrx+0x1dc>)
   19042:	f842 3f10 	str.w	r3, [r2, #16]!
   19046:	f00d ff4b 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   1904a:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1904c:	4620      	mov	r0, r4
   1904e:	3734      	adds	r7, #52	; 0x34
   19050:	46bd      	mov	sp, r7
   19052:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   19054:	4601      	mov	r1, r0
   19056:	f107 0210 	add.w	r2, r7, #16
   1905a:	4630      	mov	r0, r6
   1905c:	f00d fde7 	bl	26c2e <at_parser_params_from_str>
	if (err) {
   19060:	4604      	mov	r4, r0
   19062:	b198      	cbz	r0, 1908c <parse_edrx+0x8c>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   19064:	466d      	mov	r5, sp
   19066:	b088      	sub	sp, #32
   19068:	466a      	mov	r2, sp
   1906a:	4b5d      	ldr	r3, [pc, #372]	; (191e0 <parse_edrx+0x1e0>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1906c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   19070:	2303      	movs	r3, #3
   19072:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19076:	4859      	ldr	r0, [pc, #356]	; (191dc <parse_edrx+0x1dc>)
   19078:	f842 3f10 	str.w	r3, [r2, #16]!
   1907c:	f00d ff30 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   19080:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   19082:	f107 0010 	add.w	r0, r7, #16
   19086:	f00d fe15 	bl	26cb4 <at_params_list_free>
	return err;
   1908a:	e7df      	b.n	1904c <parse_edrx+0x4c>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1908c:	2103      	movs	r1, #3
   1908e:	1d3b      	adds	r3, r7, #4
   19090:	f107 0208 	add.w	r2, r7, #8
   19094:	f107 0010 	add.w	r0, r7, #16
   19098:	f00d feea 	bl	26e70 <at_params_string_get>
	if (err) {
   1909c:	4604      	mov	r4, r0
   1909e:	b120      	cbz	r0, 190aa <parse_edrx+0xaa>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   190a0:	466d      	mov	r5, sp
   190a2:	b088      	sub	sp, #32
   190a4:	466a      	mov	r2, sp
   190a6:	4b4f      	ldr	r3, [pc, #316]	; (191e4 <parse_edrx+0x1e4>)
   190a8:	e7e0      	b.n	1906c <parse_edrx+0x6c>
	tmp_buf[len] = '\0';
   190aa:	687b      	ldr	r3, [r7, #4]
	idx = strtoul(tmp_buf, NULL, 2);
   190ac:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   190ae:	3330      	adds	r3, #48	; 0x30
   190b0:	443b      	add	r3, r7
   190b2:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
   190b6:	2202      	movs	r2, #2
   190b8:	f107 0008 	add.w	r0, r7, #8
   190bc:	f00b ffd4 	bl	25068 <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   190c0:	463a      	mov	r2, r7
   190c2:	2101      	movs	r1, #1
	idx = strtoul(tmp_buf, NULL, 2);
   190c4:	b2c6      	uxtb	r6, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   190c6:	f107 0010 	add.w	r0, r7, #16
   190ca:	f00d fea5 	bl	26e18 <at_params_int_get>
	if (err) {
   190ce:	4604      	mov	r4, r0
   190d0:	b120      	cbz	r0, 190dc <parse_edrx+0xdc>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   190d2:	466d      	mov	r5, sp
   190d4:	b088      	sub	sp, #32
   190d6:	466a      	mov	r2, sp
   190d8:	4b43      	ldr	r3, [pc, #268]	; (191e8 <parse_edrx+0x1e8>)
   190da:	e7c7      	b.n	1906c <parse_edrx+0x6c>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   190dc:	683b      	ldr	r3, [r7, #0]
   190de:	2b04      	cmp	r3, #4
   190e0:	d028      	beq.n	19134 <parse_edrx+0x134>
   190e2:	2b05      	cmp	r3, #5
   190e4:	d00e      	beq.n	19104 <parse_edrx+0x104>
   190e6:	7028      	strb	r0, [r5, #0]
		LOG_WRN("Active LTE mode could not be determined");
   190e8:	4b40      	ldr	r3, [pc, #256]	; (191ec <parse_edrx+0x1ec>)
   190ea:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   190ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   190f0:	2302      	movs	r3, #2
   190f2:	483a      	ldr	r0, [pc, #232]	; (191dc <parse_edrx+0x1dc>)
   190f4:	62bb      	str	r3, [r7, #40]	; 0x28
   190f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   190fa:	f00d fef1 	bl	26ee0 <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   190fe:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   19102:	e7be      	b.n	19082 <parse_edrx+0x82>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19104:	2309      	movs	r3, #9
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   19106:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19108:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1910a:	d936      	bls.n	1917a <parse_edrx+0x17a>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1910c:	466c      	mov	r4, sp
   1910e:	b088      	sub	sp, #32
   19110:	466a      	mov	r2, sp
   19112:	4b37      	ldr	r3, [pc, #220]	; (191f0 <parse_edrx+0x1f0>)
   19114:	6153      	str	r3, [r2, #20]
   19116:	f06f 0315 	mvn.w	r3, #21
   1911a:	6193      	str	r3, [r2, #24]
   1911c:	2303      	movs	r3, #3
   1911e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19122:	482e      	ldr	r0, [pc, #184]	; (191dc <parse_edrx+0x1dc>)
   19124:	f842 3f10 	str.w	r3, [r2, #16]!
   19128:	f00d feda 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   1912c:	46a5      	mov	sp, r4
		return -ENOTCONN;
   1912e:	f06f 0415 	mvn.w	r4, #21
   19132:	e7a6      	b.n	19082 <parse_edrx+0x82>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19134:	2307      	movs	r3, #7
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   19136:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19138:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1913a:	d8e7      	bhi.n	1910c <parse_edrx+0x10c>
		multiplier = edrx_lookup_ltem[idx];
   1913c:	4b2d      	ldr	r3, [pc, #180]	; (191f4 <parse_edrx+0x1f4>)
   1913e:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
		*ptw_multiplier = 1.28;
   19142:	4e2d      	ldr	r6, [pc, #180]	; (191f8 <parse_edrx+0x1f8>)
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   19144:	b1f0      	cbz	r0, 19184 <parse_edrx+0x184>
   19146:	f7ff fa05 	bl	18554 <__aeabi_i2d>
   1914a:	a321      	add	r3, pc, #132	; (adr r3, 191d0 <parse_edrx+0x1d0>)
   1914c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19150:	f7ff fa6a 	bl	18628 <__aeabi_dmul>
   19154:	f7ff fc7a 	bl	18a4c <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   19158:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1915a:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1915c:	187b      	adds	r3, r7, r1
   1915e:	f107 0208 	add.w	r2, r7, #8
   19162:	f107 0010 	add.w	r0, r7, #16
	len = sizeof(tmp_buf) - 1;
   19166:	6079      	str	r1, [r7, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   19168:	f00d fe82 	bl	26e70 <at_params_string_get>
	if (err) {
   1916c:	4604      	mov	r4, r0
   1916e:	b158      	cbz	r0, 19188 <parse_edrx+0x188>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   19170:	466d      	mov	r5, sp
   19172:	b088      	sub	sp, #32
   19174:	466a      	mov	r2, sp
   19176:	4b21      	ldr	r3, [pc, #132]	; (191fc <parse_edrx+0x1fc>)
   19178:	e778      	b.n	1906c <parse_edrx+0x6c>
		multiplier = edrx_lookup_nbiot[idx];
   1917a:	4b21      	ldr	r3, [pc, #132]	; (19200 <parse_edrx+0x200>)
   1917c:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
		*ptw_multiplier = 2.56;
   19180:	4e20      	ldr	r6, [pc, #128]	; (19204 <parse_edrx+0x204>)
		break;
   19182:	e7df      	b.n	19144 <parse_edrx+0x144>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   19184:	4820      	ldr	r0, [pc, #128]	; (19208 <parse_edrx+0x208>)
   19186:	e7e7      	b.n	19158 <parse_edrx+0x158>
	tmp_buf[len] = '\0';
   19188:	687b      	ldr	r3, [r7, #4]
	idx = strtoul(tmp_buf, NULL, 2);
   1918a:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   1918c:	3330      	adds	r3, #48	; 0x30
   1918e:	443b      	add	r3, r7
   19190:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
   19194:	2202      	movs	r2, #2
   19196:	f107 0008 	add.w	r0, r7, #8
   1919a:	f00b ff65 	bl	25068 <strtoul>
   1919e:	b2c0      	uxtb	r0, r0
	if (idx > 15) {
   191a0:	280f      	cmp	r0, #15
   191a2:	d906      	bls.n	191b2 <parse_edrx+0x1b2>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   191a4:	466c      	mov	r4, sp
   191a6:	b088      	sub	sp, #32
   191a8:	466a      	mov	r2, sp
   191aa:	4b18      	ldr	r3, [pc, #96]	; (1920c <parse_edrx+0x20c>)
   191ac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   191b0:	e7b4      	b.n	1911c <parse_edrx+0x11c>
	idx += 1;
   191b2:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   191b4:	b2c0      	uxtb	r0, r0
   191b6:	f7ff fd53 	bl	18c60 <__aeabi_i2f>
   191ba:	4631      	mov	r1, r6
   191bc:	f7fe ffc4 	bl	18148 <__aeabi_fmul>
   191c0:	60a8      	str	r0, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   191c2:	e75e      	b.n	19082 <parse_edrx+0x82>
		return -EINVAL;
   191c4:	f06f 0415 	mvn.w	r4, #21
   191c8:	e740      	b.n	1904c <parse_edrx+0x4c>
   191ca:	bf00      	nop
   191cc:	f3af 8000 	nop.w
   191d0:	47ae147b 	.word	0x47ae147b
   191d4:	40247ae1 	.word	0x40247ae1
   191d8:	0002a5fa 	.word	0x0002a5fa
   191dc:	00028c80 	.word	0x00028c80
   191e0:	0002a623 	.word	0x0002a623
   191e4:	0002a64f 	.word	0x0002a64f
   191e8:	0002a67b 	.word	0x0002a67b
   191ec:	0002a69d 	.word	0x0002a69d
   191f0:	0002a6c5 	.word	0x0002a6c5
   191f4:	000293d4 	.word	0x000293d4
   191f8:	3fa3d70a 	.word	0x3fa3d70a
   191fc:	0002a6e9 	.word	0x0002a6e9
   19200:	000293b4 	.word	0x000293b4
   19204:	4023d70a 	.word	0x4023d70a
   19208:	40a3d70a 	.word	0x40a3d70a
   1920c:	0002a714 	.word	0x0002a714

00019210 <motion_detected>:

/********************************************************************************
 * Define the callback function
 ********************************************************************************/
void motion_detected(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
   19210:	b507      	push	{r0, r1, r2, lr}
	buzzer_state = ON;
	gpio_pin_set(gpio_dev, WATER_VALVE, OPEN_VALVE);
   19212:	4b09      	ldr	r3, [pc, #36]	; (19238 <motion_detected+0x28>)
   19214:	2201      	movs	r2, #1
   19216:	2110      	movs	r1, #16
   19218:	6818      	ldr	r0, [r3, #0]
   1921a:	f00c f973 	bl	25504 <gpio_pin_set.isra.0>
		(void) arch_syscall_invoke5(parm0.x, parm1.split.lo, parm1.split.hi, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
   1921e:	2200      	movs	r2, #0
   19220:	2300      	movs	r3, #0
   19222:	4806      	ldr	r0, [pc, #24]	; (1923c <motion_detected+0x2c>)
   19224:	e9cd 2300 	strd	r2, r3, [sp]
   19228:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1922c:	2300      	movs	r3, #0
   1922e:	f00b fc15 	bl	24a5c <z_impl_k_timer_start>
	/* start periodic timer that expires once every second */
	k_timer_start(&my_timer, K_SECONDS(10), K_NO_WAIT);
}
   19232:	b003      	add	sp, #12
   19234:	f85d fb04 	ldr.w	pc, [sp], #4
   19238:	2000c580 	.word	0x2000c580
   1923c:	2000c938 	.word	0x2000c938

00019240 <my_expiry_function>:
 * Define a variable of type static struct gpio_callback
 ********************************************************************************/
void my_expiry_function(struct k_timer *timer_id)
{
	buzzer_state = OFF;
	gpio_pin_set(gpio_dev, WATER_VALVE, CLOSE_VALVE);
   19240:	4b02      	ldr	r3, [pc, #8]	; (1924c <my_expiry_function+0xc>)
   19242:	2200      	movs	r2, #0
   19244:	2110      	movs	r1, #16
   19246:	6818      	ldr	r0, [r3, #0]
   19248:	f00c b95c 	b.w	25504 <gpio_pin_set.isra.0>
   1924c:	2000c580 	.word	0x2000c580

00019250 <beep_buzzer>:
	for (long i = 0; i < duration * 1000L; i += tone * 2)
   19250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
   19254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19258:	4604      	mov	r4, r0
	for (long i = 0; i < duration * 1000L; i += tone * 2)
   1925a:	2500      	movs	r5, #0
   1925c:	fb03 f601 	mul.w	r6, r3, r1
		gpio_pin_set(gpio_dev, BUZZER, HIGH);
   19260:	4f0c      	ldr	r7, [pc, #48]	; (19294 <beep_buzzer+0x44>)
	for (long i = 0; i < duration * 1000L; i += tone * 2)
   19262:	ea4f 0840 	mov.w	r8, r0, lsl #1
   19266:	42ae      	cmp	r6, r5
   19268:	dc01      	bgt.n	1926e <beep_buzzer+0x1e>
}
   1926a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		gpio_pin_set(gpio_dev, BUZZER, HIGH);
   1926e:	2201      	movs	r2, #1
   19270:	211c      	movs	r1, #28
   19272:	6838      	ldr	r0, [r7, #0]
   19274:	f00c f946 	bl	25504 <gpio_pin_set.isra.0>
		k_msleep(tone);
   19278:	4620      	mov	r0, r4
   1927a:	f00c f953 	bl	25524 <k_msleep.isra.0>
		gpio_pin_set(gpio_dev, BUZZER, LOW);
   1927e:	2200      	movs	r2, #0
   19280:	211c      	movs	r1, #28
   19282:	6838      	ldr	r0, [r7, #0]
   19284:	f00c f93e 	bl	25504 <gpio_pin_set.isra.0>
		k_msleep(tone);
   19288:	4620      	mov	r0, r4
   1928a:	f00c f94b 	bl	25524 <k_msleep.isra.0>
	for (long i = 0; i < duration * 1000L; i += tone * 2)
   1928e:	4445      	add	r5, r8
   19290:	e7e9      	b.n	19266 <beep_buzzer+0x16>
   19292:	bf00      	nop
   19294:	2000c580 	.word	0x2000c580

00019298 <configuer_all_output>:
{
   19298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (uint32_t i = 0; i < MAX_OUTPUTS; i++)
   1929a:	2400      	movs	r4, #0
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1929c:	2701      	movs	r7, #1
   1929e:	4d0f      	ldr	r5, [pc, #60]	; (192dc <configuer_all_output+0x44>)
		if (!device_is_ready(gpio_dev))
   192a0:	4e0f      	ldr	r6, [pc, #60]	; (192e0 <configuer_all_output+0x48>)
   192a2:	6830      	ldr	r0, [r6, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   192a4:	f00e fd3f 	bl	27d26 <z_device_is_ready>
   192a8:	b1b0      	cbz	r0, 192d8 <configuer_all_output+0x40>
		err = gpio_pin_configure(gpio_dev, output_gpio[i], GPIO_OUTPUT_INACTIVE);
   192aa:	6830      	ldr	r0, [r6, #0]
   192ac:	f855 1b04 	ldr.w	r1, [r5], #4
	struct gpio_driver_data *data =
   192b0:	6902      	ldr	r2, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   192b2:	b2c9      	uxtb	r1, r1
   192b4:	6813      	ldr	r3, [r2, #0]
   192b6:	fa07 fe01 	lsl.w	lr, r7, r1
	const struct gpio_driver_api *api =
   192ba:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   192be:	ea23 030e 	bic.w	r3, r3, lr
   192c2:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
   192c4:	f8dc 3000 	ldr.w	r3, [ip]
   192c8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   192cc:	4798      	blx	r3
		if (err < 0)
   192ce:	2800      	cmp	r0, #0
   192d0:	db02      	blt.n	192d8 <configuer_all_output+0x40>
	for (uint32_t i = 0; i < MAX_OUTPUTS; i++)
   192d2:	3401      	adds	r4, #1
   192d4:	2c05      	cmp	r4, #5
   192d6:	d1e4      	bne.n	192a2 <configuer_all_output+0xa>
}
   192d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   192da:	bf00      	nop
   192dc:	00028d58 	.word	0x00028d58
   192e0:	2000c580 	.word	0x2000c580

000192e4 <configuer_all_input>:
{
   192e4:	b510      	push	{r4, lr}
		if (!device_is_ready(gpio_dev))
   192e6:	4c09      	ldr	r4, [pc, #36]	; (1930c <configuer_all_input+0x28>)
   192e8:	6820      	ldr	r0, [r4, #0]
   192ea:	f00e fd1c 	bl	27d26 <z_device_is_ready>
   192ee:	b160      	cbz	r0, 1930a <configuer_all_input+0x26>
		err = gpio_pin_configure(gpio_dev, input_gpio[i], GPIO_INPUT | GPIO_PULL_DOWN);
   192f0:	6820      	ldr	r0, [r4, #0]
	struct gpio_driver_data *data =
   192f2:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   192f4:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   192f6:	6813      	ldr	r3, [r2, #0]
   192f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   192fc:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   192fe:	680b      	ldr	r3, [r1, #0]
   19300:	4a03      	ldr	r2, [pc, #12]	; (19310 <configuer_all_input+0x2c>)
   19302:	210d      	movs	r1, #13
}
   19304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19308:	4718      	bx	r3
   1930a:	bd10      	pop	{r4, pc}
   1930c:	2000c580 	.word	0x2000c580
   19310:	00010020 	.word	0x00010020

00019314 <main>:

/********************************************************************************
 *
 ********************************************************************************/
void main(void)
{
   19314:	b570      	push	{r4, r5, r6, lr}
	int err;
	uint32_t connect_attempt = 0;
	k_msleep(SLEEP_TIME_MS * 10);
   19316:	f242 7010 	movw	r0, #10000	; 0x2710
{
   1931a:	b086      	sub	sp, #24
	k_msleep(SLEEP_TIME_MS * 10);
   1931c:	f00c f902 	bl	25524 <k_msleep.isra.0>
	LOG_INF("A Smart Water Tap Leakage Controller IoT Project/n/r");
   19320:	4b24      	ldr	r3, [pc, #144]	; (193b4 <main+0xa0>)
   19322:	9305      	str	r3, [sp, #20]
   19324:	2302      	movs	r3, #2
   19326:	9304      	str	r3, [sp, #16]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   19328:	2300      	movs	r3, #0
   1932a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1932e:	4822      	ldr	r0, [pc, #136]	; (193b8 <main+0xa4>)
   19330:	aa04      	add	r2, sp, #16

	configuer_all_output();
	configuer_all_input();

	/* Configure the interrupt on the button's pin */
	err = gpio_pin_interrupt_configure(gpio_dev, MOTION_DETECTOR, GPIO_INT_EDGE_TO_ACTIVE);
   19332:	4c22      	ldr	r4, [pc, #136]	; (193bc <main+0xa8>)
   19334:	f001 fc3e 	bl	1abb4 <z_impl_z_log_msg_static_create>
	configuer_all_output();
   19338:	f7ff ffae 	bl	19298 <configuer_all_output>
	configuer_all_input();
   1933c:	f7ff ffd2 	bl	192e4 <configuer_all_input>
	err = gpio_pin_interrupt_configure(gpio_dev, MOTION_DETECTOR, GPIO_INT_EDGE_TO_ACTIVE);
   19340:	6820      	ldr	r0, [r4, #0]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   19342:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   19344:	6883      	ldr	r3, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   19346:	6812      	ldr	r2, [r2, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   19348:	699d      	ldr	r5, [r3, #24]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1934a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1934e:	bf14      	ite	ne
   19350:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
   19354:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
   19358:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   1935c:	210d      	movs	r1, #13
   1935e:	47a8      	blx	r5
	if (err < 0)
   19360:	2800      	cmp	r0, #0
   19362:	db25      	blt.n	193b0 <main+0x9c>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   19364:	4916      	ldr	r1, [pc, #88]	; (193c0 <main+0xac>)
   19366:	4b17      	ldr	r3, [pc, #92]	; (193c4 <main+0xb0>)
	}

	/* Initialize the static struct gpio_callback variable */
	gpio_init_callback(&motion_cb_data, motion_detected, BIT(13));
	/* Add the callback function by calling gpio_add_callback() */
	gpio_add_callback(gpio_dev, &motion_cb_data);
   19368:	6820      	ldr	r0, [r4, #0]
   1936a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   1936c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   19370:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   19372:	6883      	ldr	r3, [r0, #8]
   19374:	69db      	ldr	r3, [r3, #28]
   19376:	b10b      	cbz	r3, 1937c <main+0x68>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   19378:	2201      	movs	r2, #1
   1937a:	4798      	blx	r3

	//
	k_timer_init(&my_timer, my_expiry_function, NULL);
   1937c:	2200      	movs	r2, #0
   1937e:	4912      	ldr	r1, [pc, #72]	; (193c8 <main+0xb4>)
   19380:	4812      	ldr	r0, [pc, #72]	; (193cc <main+0xb8>)
   19382:	f00e ffbc 	bl	282fe <k_timer_init>
	{
		/*if(buzzer_state == ON) {
			beep_buzzer(3, 1);
			k_msleep(SLEEP_TIME_MS);
		}*/
		LOG_INF("Beep Buzzer!");
   19386:	2502      	movs	r5, #2
   19388:	4e11      	ldr	r6, [pc, #68]	; (193d0 <main+0xbc>)
   1938a:	4c0b      	ldr	r4, [pc, #44]	; (193b8 <main+0xa4>)
   1938c:	e9cd 5604 	strd	r5, r6, [sp, #16]
   19390:	2300      	movs	r3, #0
   19392:	4620      	mov	r0, r4
   19394:	aa04      	add	r2, sp, #16
   19396:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1939a:	f001 fc0b 	bl	1abb4 <z_impl_z_log_msg_static_create>
		beep_buzzer(3, 1);
   1939e:	2101      	movs	r1, #1
   193a0:	2003      	movs	r0, #3
   193a2:	f7ff ff55 	bl	19250 <beep_buzzer>
		k_msleep(SLEEP_TIME_MS);
   193a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   193aa:	f00c f8bb 	bl	25524 <k_msleep.isra.0>
	while (1)
   193ae:	e7ed      	b.n	1938c <main+0x78>
	if (err)
	{
		LOG_ERR("Could not disconnect MQTT client: %d", err);
	}
	goto do_connect;
   193b0:	b006      	add	sp, #24
   193b2:	bd70      	pop	{r4, r5, r6, pc}
   193b4:	000293f4 	.word	0x000293f4
   193b8:	00028c18 	.word	0x00028c18
   193bc:	2000c580 	.word	0x2000c580
   193c0:	2000d048 	.word	0x2000d048
   193c4:	00019211 	.word	0x00019211
   193c8:	00019241 	.word	0x00019241
   193cc:	2000c938 	.word	0x2000c938
   193d0:	00029429 	.word	0x00029429

000193d4 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   193d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193d8:	b091      	sub	sp, #68	; 0x44
   193da:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   193dc:	f002 0304 	and.w	r3, r2, #4
   193e0:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   193e2:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   193e6:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   193e8:	0784      	lsls	r4, r0, #30
{
   193ea:	4605      	mov	r5, r0
   193ec:	460e      	mov	r6, r1
   193ee:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   193f2:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   193f4:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   193f6:	f040 81bd 	bne.w	19774 <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   193fa:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   193fc:	b130      	cbz	r0, 1940c <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   193fe:	2907      	cmp	r1, #7
   19400:	d809      	bhi.n	19416 <cbvprintf_package+0x42>
		return -ENOSPC;
   19402:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   19406:	b011      	add	sp, #68	; 0x44
   19408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   1940c:	f001 0607 	and.w	r6, r1, #7
   19410:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   19412:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   19416:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   19418:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
   1941c:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
   19420:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   19422:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   19426:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   19428:	9301      	str	r3, [sp, #4]
	bool parsing = false;
   1942a:	46cb      	mov	fp, r9
	size = sizeof(char *);
   1942c:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   1942e:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
   19432:	b10d      	cbz	r5, 19438 <cbvprintf_package+0x64>
				*(const char **)buf = s;
   19434:	9a00      	ldr	r2, [sp, #0]
   19436:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   19438:	9805      	ldr	r0, [sp, #20]
   1943a:	2800      	cmp	r0, #0
   1943c:	f300 80eb 	bgt.w	19616 <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   19440:	4899      	ldr	r0, [pc, #612]	; (196a8 <cbvprintf_package+0x2d4>)
   19442:	9a00      	ldr	r2, [sp, #0]
   19444:	4282      	cmp	r2, r0
   19446:	d303      	bcc.n	19450 <cbvprintf_package+0x7c>
   19448:	4898      	ldr	r0, [pc, #608]	; (196ac <cbvprintf_package+0x2d8>)
   1944a:	4282      	cmp	r2, r0
   1944c:	f0c0 80e3 	bcc.w	19616 <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   19450:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   19452:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   19456:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   19458:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   1945c:	f100 8106 	bmi.w	1966c <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   19460:	2f0f      	cmp	r7, #15
   19462:	f200 80b4 	bhi.w	195ce <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
   19466:	2d00      	cmp	r5, #0
   19468:	f000 8108 	beq.w	1967c <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
   1946c:	f107 0240 	add.w	r2, r7, #64	; 0x40
   19470:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   19474:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   19476:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   1947a:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   1947e:	9804      	ldr	r0, [sp, #16]
   19480:	3001      	adds	r0, #1
   19482:	9004      	str	r0, [sp, #16]
   19484:	e0ea      	b.n	1965c <cbvprintf_package+0x288>
			switch (*fmt) {
   19486:	287a      	cmp	r0, #122	; 0x7a
   19488:	d860      	bhi.n	1954c <cbvprintf_package+0x178>
   1948a:	284b      	cmp	r0, #75	; 0x4b
   1948c:	d80e      	bhi.n	194ac <cbvprintf_package+0xd8>
   1948e:	2847      	cmp	r0, #71	; 0x47
   19490:	d85c      	bhi.n	1954c <cbvprintf_package+0x178>
   19492:	2829      	cmp	r0, #41	; 0x29
   19494:	d82f      	bhi.n	194f6 <cbvprintf_package+0x122>
   19496:	2825      	cmp	r0, #37	; 0x25
   19498:	d055      	beq.n	19546 <cbvprintf_package+0x172>
   1949a:	d857      	bhi.n	1954c <cbvprintf_package+0x178>
   1949c:	2820      	cmp	r0, #32
   1949e:	d07d      	beq.n	1959c <cbvprintf_package+0x1c8>
   194a0:	3823      	subs	r0, #35	; 0x23
   194a2:	f1d0 0b00 	rsbs	fp, r0, #0
   194a6:	eb4b 0b00 	adc.w	fp, fp, r0
   194aa:	e077      	b.n	1959c <cbvprintf_package+0x1c8>
   194ac:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   194b0:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   194b4:	d84a      	bhi.n	1954c <cbvprintf_package+0x178>
   194b6:	e8df f00c 	tbb	[pc, ip]
   194ba:	4971      	.short	0x4971
   194bc:	49494949 	.word	0x49494949
   194c0:	49494949 	.word	0x49494949
   194c4:	494c4949 	.word	0x494c4949
   194c8:	49494949 	.word	0x49494949
   194cc:	5a494949 	.word	0x5a494949
   194d0:	5a4c4c49 	.word	0x5a4c4c49
   194d4:	4c715a5a 	.word	0x4c715a5a
   194d8:	4971496e 	.word	0x4971496e
   194dc:	49184c18 	.word	0x49184c18
   194e0:	4c808349 	.word	0x4c808349
   194e4:	494c4949 	.word	0x494c4949
   194e8:	80          	.byte	0x80
   194e9:	00          	.byte	0x00
   194ea:	2000      	movs	r0, #0
   194ec:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   194f0:	f04f 0a04 	mov.w	sl, #4
   194f4:	e039      	b.n	1956a <cbvprintf_package+0x196>
   194f6:	2201      	movs	r2, #1
			switch (*fmt) {
   194f8:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   194fc:	fa5f fc8c 	uxtb.w	ip, ip
   19500:	fa02 fc0c 	lsl.w	ip, r2, ip
   19504:	ea1c 0f0e 	tst.w	ip, lr
   19508:	d148      	bne.n	1959c <cbvprintf_package+0x1c8>
   1950a:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   1950e:	d12e      	bne.n	1956e <cbvprintf_package+0x19a>
   19510:	ea1c 0b02 	ands.w	fp, ip, r2
   19514:	d042      	beq.n	1959c <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
   19516:	3c01      	subs	r4, #1
   19518:	4454      	add	r4, sl
   1951a:	f1ca 0c00 	rsb	ip, sl, #0
   1951e:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   19522:	2d00      	cmp	r5, #0
   19524:	d061      	beq.n	195ea <cbvprintf_package+0x216>
   19526:	eba3 0c05 	sub.w	ip, r3, r5
   1952a:	44a4      	add	ip, r4
   1952c:	4566      	cmp	r6, ip
   1952e:	f4ff af68 	bcc.w	19402 <cbvprintf_package+0x2e>
		if (is_str_arg) {
   19532:	2800      	cmp	r0, #0
   19534:	d168      	bne.n	19608 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
   19536:	2b04      	cmp	r3, #4
   19538:	d147      	bne.n	195ca <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
   1953a:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   1953e:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   19540:	2304      	movs	r3, #4
   19542:	3404      	adds	r4, #4
   19544:	e02a      	b.n	1959c <cbvprintf_package+0x1c8>
				arg_idx--;
   19546:	9a01      	ldr	r2, [sp, #4]
   19548:	3a01      	subs	r2, #1
   1954a:	9201      	str	r2, [sp, #4]
				parsing = false;
   1954c:	f04f 0b00 	mov.w	fp, #0
				continue;
   19550:	e024      	b.n	1959c <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
   19552:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   19556:	286c      	cmp	r0, #108	; 0x6c
   19558:	d134      	bne.n	195c4 <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
   1955a:	2000      	movs	r0, #0
   1955c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
   19560:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   19562:	2b6c      	cmp	r3, #108	; 0x6c
   19564:	d1c4      	bne.n	194f0 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
   19566:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   1956a:	4653      	mov	r3, sl
   1956c:	e7d3      	b.n	19516 <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
   1956e:	f108 0807 	add.w	r8, r8, #7
   19572:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   19576:	3407      	adds	r4, #7
   19578:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
   1957c:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
   19580:	b135      	cbz	r5, 19590 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
   19582:	9806      	ldr	r0, [sp, #24]
   19584:	4420      	add	r0, r4
   19586:	42b0      	cmp	r0, r6
   19588:	f63f af3b 	bhi.w	19402 <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
   1958c:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
   19590:	f04f 0b00 	mov.w	fp, #0
				buf += size;
   19594:	3408      	adds	r4, #8
			switch (*fmt) {
   19596:	f04f 0a08 	mov.w	sl, #8
   1959a:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   1959c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   195a0:	2800      	cmp	r0, #0
   195a2:	d078      	beq.n	19696 <cbvprintf_package+0x2c2>
			if (!parsing) {
   195a4:	f1bb 0f00 	cmp.w	fp, #0
   195a8:	f47f af6d 	bne.w	19486 <cbvprintf_package+0xb2>
				if (*fmt == '%') {
   195ac:	2825      	cmp	r0, #37	; 0x25
   195ae:	d1f5      	bne.n	1959c <cbvprintf_package+0x1c8>
					parsing = true;
   195b0:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
   195b4:	9b01      	ldr	r3, [sp, #4]
   195b6:	3301      	adds	r3, #1
   195b8:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
   195ba:	f04f 0a04 	mov.w	sl, #4
   195be:	e7ec      	b.n	1959a <cbvprintf_package+0x1c6>
			switch (*fmt) {
   195c0:	4658      	mov	r0, fp
   195c2:	e793      	b.n	194ec <cbvprintf_package+0x118>
   195c4:	2000      	movs	r0, #0
				parsing = false;
   195c6:	4683      	mov	fp, r0
   195c8:	e7a5      	b.n	19516 <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
   195ca:	2b08      	cmp	r3, #8
   195cc:	d002      	beq.n	195d4 <cbvprintf_package+0x200>
					return -EINVAL;
   195ce:	f06f 0015 	mvn.w	r0, #21
   195d2:	e718      	b.n	19406 <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
   195d4:	f108 0807 	add.w	r8, r8, #7
   195d8:	f028 0807 	bic.w	r8, r8, #7
   195dc:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   195e0:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   195e4:	2308      	movs	r3, #8
   195e6:	3408      	adds	r4, #8
   195e8:	e7d8      	b.n	1959c <cbvprintf_package+0x1c8>
		if (is_str_arg) {
   195ea:	b968      	cbnz	r0, 19608 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
   195ec:	2b04      	cmp	r3, #4
   195ee:	d102      	bne.n	195f6 <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
   195f0:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   195f4:	e7a4      	b.n	19540 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
   195f6:	2b08      	cmp	r3, #8
   195f8:	d1e9      	bne.n	195ce <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
   195fa:	f108 0807 	add.w	r8, r8, #7
   195fe:	f028 0807 	bic.w	r8, r8, #7
   19602:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   19606:	e7ed      	b.n	195e4 <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   19608:	9a05      	ldr	r2, [sp, #20]
   1960a:	3a01      	subs	r2, #1
   1960c:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   1960e:	f858 2b04 	ldr.w	r2, [r8], #4
   19612:	9200      	str	r2, [sp, #0]
   19614:	e70d      	b.n	19432 <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
   19616:	9a03      	ldr	r2, [sp, #12]
   19618:	0790      	lsls	r0, r2, #30
   1961a:	d520      	bpl.n	1965e <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1961c:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   19620:	eba4 0e05 	sub.w	lr, r4, r5
   19624:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   19628:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1962c:	d2cf      	bcs.n	195ce <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   1962e:	2f0f      	cmp	r7, #15
   19630:	d8cd      	bhi.n	195ce <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
   19632:	b1f5      	cbz	r5, 19672 <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
   19634:	f107 0240 	add.w	r2, r7, #64	; 0x40
   19638:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   1963c:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   1963e:	b2c0      	uxtb	r0, r0
   19640:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   19644:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   19648:	f1bc 0f00 	cmp.w	ip, #0
   1964c:	f43f af17 	beq.w	1947e <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   19650:	f060 007f 	orn	r0, r0, #127	; 0x7f
   19654:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   19658:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   1965c:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   1965e:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
   19662:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
   19666:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   19668:	9206      	str	r2, [sp, #24]
   1966a:	e797      	b.n	1959c <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1966c:	f04f 0c00 	mov.w	ip, #0
   19670:	e7da      	b.n	19628 <cbvprintf_package+0x254>
				} else if (is_ro) {
   19672:	f1bc 0f00 	cmp.w	ip, #0
   19676:	d001      	beq.n	1967c <cbvprintf_package+0x2a8>
					len += 1;
   19678:	3601      	adds	r6, #1
   1967a:	e7ef      	b.n	1965c <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
   1967c:	9802      	ldr	r0, [sp, #8]
					len += 2;
   1967e:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   19680:	2800      	cmp	r0, #0
   19682:	d1eb      	bne.n	1965c <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
   19684:	9800      	ldr	r0, [sp, #0]
   19686:	e9cd 3106 	strd	r3, r1, [sp, #24]
   1968a:	f7ff fcaf 	bl	18fec <strlen>
   1968e:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   19692:	4406      	add	r6, r0
   19694:	e7e2      	b.n	1965c <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
   19696:	1b63      	subs	r3, r4, r5
   19698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1969c:	d297      	bcs.n	195ce <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
   1969e:	b93d      	cbnz	r5, 196b0 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   196a0:	f1a6 0408 	sub.w	r4, r6, #8
   196a4:	18e0      	adds	r0, r4, r3
   196a6:	e6ae      	b.n	19406 <cbvprintf_package+0x32>
   196a8:	00028860 	.word	0x00028860
   196ac:	0002b324 	.word	0x0002b324
	if (rws_pos_en) {
   196b0:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   196b2:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
   196b4:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   196b6:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   196b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   196bc:	b1c2      	cbz	r2, 196f0 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   196be:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   196c0:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   196c4:	f1b9 0f00 	cmp.w	r9, #0
   196c8:	d005      	beq.n	196d6 <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
   196ca:	2200      	movs	r2, #0
   196cc:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
   196ce:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   196d2:	4297      	cmp	r7, r2
   196d4:	d10e      	bne.n	196f4 <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
   196d6:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   196da:	f1c5 0301 	rsb	r3, r5, #1
   196de:	f10d 0820 	add.w	r8, sp, #32
   196e2:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   196e4:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   196e8:	4557      	cmp	r7, sl
   196ea:	d112      	bne.n	19712 <cbvprintf_package+0x33e>
	return BUF_OFFSET;
   196ec:	1b60      	subs	r0, r4, r5
   196ee:	e68a      	b.n	19406 <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   196f0:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   196f2:	e7e5      	b.n	196c0 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   196f4:	f810 3b01 	ldrb.w	r3, [r0], #1
   196f8:	0619      	lsls	r1, r3, #24
   196fa:	d508      	bpl.n	1970e <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
   196fc:	eb04 0e0c 	add.w	lr, r4, ip
   19700:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   19702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   19706:	f4ff ae7c 	bcc.w	19402 <cbvprintf_package+0x2e>
			*buf++ = pos;
   1970a:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   1970e:	3201      	adds	r2, #1
   19710:	e7df      	b.n	196d2 <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   19712:	f1b9 0f00 	cmp.w	r9, #0
   19716:	d003      	beq.n	19720 <cbvprintf_package+0x34c>
   19718:	f998 2000 	ldrsb.w	r2, [r8]
   1971c:	2a00      	cmp	r2, #0
   1971e:	db17      	blt.n	19750 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
   19720:	9b02      	ldr	r3, [sp, #8]
   19722:	b1d3      	cbz	r3, 1975a <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
   19724:	f81a 200b 	ldrb.w	r2, [sl, fp]
   19728:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   1972c:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   1972e:	9b01      	ldr	r3, [sp, #4]
   19730:	1898      	adds	r0, r3, r2
   19732:	4420      	add	r0, r4
   19734:	4286      	cmp	r6, r0
   19736:	f4ff ae64 	bcc.w	19402 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
   1973a:	f898 0000 	ldrb.w	r0, [r8]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1973e:	9900      	ldr	r1, [sp, #0]
   19740:	f804 0b01 	strb.w	r0, [r4], #1
   19744:	4620      	mov	r0, r4
   19746:	9203      	str	r2, [sp, #12]
   19748:	f00e fed5 	bl	284f6 <memcpy>
		buf += size;
   1974c:	9a03      	ldr	r2, [sp, #12]
   1974e:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   19750:	f10a 0a01 	add.w	sl, sl, #1
   19754:	f108 0801 	add.w	r8, r8, #1
   19758:	e7c6      	b.n	196e8 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   1975a:	f898 2000 	ldrb.w	r2, [r8]
   1975e:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   19762:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   19764:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
   19766:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   19768:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   1976c:	f7ff fc3e 	bl	18fec <strlen>
   19770:	1c42      	adds	r2, r0, #1
   19772:	e7dc      	b.n	1972e <cbvprintf_package+0x35a>
		return -EFAULT;
   19774:	f06f 000d 	mvn.w	r0, #13
   19778:	e645      	b.n	19406 <cbvprintf_package+0x32>
   1977a:	bf00      	nop

0001977c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   1977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19780:	b095      	sub	sp, #84	; 0x54
   19782:	af00      	add	r7, sp, #0
   19784:	61bb      	str	r3, [r7, #24]
   19786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19788:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   1978a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   1978e:	4688      	mov	r8, r1
{
   19790:	627a      	str	r2, [r7, #36]	; 0x24
   19792:	60fb      	str	r3, [r7, #12]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   19794:	b949      	cbnz	r1, 197aa <cbprintf_package_convert+0x2e>
	buf += ros_nbr;
   19796:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   19798:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
   1979a:	7880      	ldrb	r0, [r0, #2]
   1979c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   197a0:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   197a2:	4545      	cmp	r5, r8
   197a4:	d819      	bhi.n	197da <cbprintf_package_convert+0x5e>
	return (size_t)(uintptr_t)(buf - start);
   197a6:	eba0 0804 	sub.w	r8, r0, r4
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   197aa:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
   197ac:	f894 b002 	ldrb.w	fp, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
   197b0:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
   197b2:	f1bb 0f00 	cmp.w	fp, #0
   197b6:	d002      	beq.n	197be <cbprintf_package_convert+0x42>
   197b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   197ba:	07d8      	lsls	r0, r3, #31
   197bc:	d416      	bmi.n	197ec <cbprintf_package_convert+0x70>
	rw_cpy = rws_nbr > 0 &&
   197be:	697b      	ldr	r3, [r7, #20]
   197c0:	bb53      	cbnz	r3, 19818 <cbprintf_package_convert+0x9c>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   197c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   197c4:	b11b      	cbz	r3, 197ce <cbprintf_package_convert+0x52>
			cb(in_packaged, in_len, ctx);
   197c6:	4641      	mov	r1, r8
   197c8:	4620      	mov	r0, r4
   197ca:	69ba      	ldr	r2, [r7, #24]
   197cc:	4798      	blx	r3
		}

		return in_len;
   197ce:	4645      	mov	r5, r8

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   197d0:	4628      	mov	r0, r5
   197d2:	3754      	adds	r7, #84	; 0x54
   197d4:	46bd      	mov	sp, r7
   197d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   197da:	1c46      	adds	r6, r0, #1
		buf += strlen((const char *)buf) + 1;
   197dc:	4630      	mov	r0, r6
   197de:	f7ff fc05 	bl	18fec <strlen>
   197e2:	3001      	adds	r0, #1
   197e4:	4430      	add	r0, r6
	for (int i = 0; i < s_nbr; i++) {
   197e6:	f108 0801 	add.w	r8, r8, #1
   197ea:	e7da      	b.n	197a2 <cbprintf_package_convert+0x26>
	rw_cpy = rws_nbr > 0 &&
   197ec:	7823      	ldrb	r3, [r4, #0]
   197ee:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
   197f0:	623b      	str	r3, [r7, #32]
   197f2:	009b      	lsls	r3, r3, #2
   197f4:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
   197f6:	6a3b      	ldr	r3, [r7, #32]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   197f8:	61fa      	str	r2, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
   197fa:	eb04 0a83 	add.w	sl, r4, r3, lsl #2
	if (cb == NULL) {
   197fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19800:	2b00      	cmp	r3, #0
   19802:	f040 80ff 	bne.w	19a04 <cbprintf_package_convert+0x288>
		out_len = (int)in_len;
   19806:	4645      	mov	r5, r8
	size_t strl_cnt = 0;
   19808:	2600      	movs	r6, #0
   1980a:	46d0      	mov	r8, sl
   1980c:	eb0b 090a 	add.w	r9, fp, sl
			for (int i = 0; i < ros_nbr; i++) {
   19810:	45c1      	cmp	r9, r8
   19812:	d151      	bne.n	198b8 <cbprintf_package_convert+0x13c>
   19814:	44da      	add	sl, fp
   19816:	e013      	b.n	19840 <cbprintf_package_convert+0xc4>
	rw_cpy = rws_nbr > 0 &&
   19818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1981a:	0799      	lsls	r1, r3, #30
   1981c:	d5d1      	bpl.n	197c2 <cbprintf_package_convert+0x46>
	args_size = in_desc->len * sizeof(int);
   1981e:	7823      	ldrb	r3, [r4, #0]
   19820:	469a      	mov	sl, r3
   19822:	623b      	str	r3, [r7, #32]
   19824:	009b      	lsls	r3, r3, #2
   19826:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   19828:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
   1982a:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
   1982e:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   19830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19832:	2b00      	cmp	r3, #0
   19834:	d17a      	bne.n	1992c <cbprintf_package_convert+0x1b0>
		out_len = (int)in_len;
   19836:	4645      	mov	r5, r8
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   19838:	f1bb 0f00 	cmp.w	fp, #0
   1983c:	d14f      	bne.n	198de <cbprintf_package_convert+0x162>
	size_t strl_cnt = 0;
   1983e:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
   19840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19842:	f013 0f05 	tst.w	r3, #5
   19846:	bf0c      	ite	eq
   19848:	f04f 0b02 	moveq.w	fp, #2
   1984c:	f04f 0b01 	movne.w	fp, #1
   19850:	697b      	ldr	r3, [r7, #20]
   19852:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   19856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19858:	f003 0302 	and.w	r3, r3, #2
   1985c:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0; i < rws_nbr; i++) {
   1985e:	45ca      	cmp	sl, r9
   19860:	d0b6      	beq.n	197d0 <cbprintf_package_convert+0x54>
			uint8_t arg_idx = *str_pos++;
   19862:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
   19866:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   1986a:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
   1986e:	4bab      	ldr	r3, [pc, #684]	; (19b1c <cbprintf_package_convert+0x3a0>)
   19870:	4598      	cmp	r8, r3
   19872:	d302      	bcc.n	1987a <cbprintf_package_convert+0xfe>
   19874:	4baa      	ldr	r3, [pc, #680]	; (19b20 <cbprintf_package_convert+0x3a4>)
   19876:	4598      	cmp	r8, r3
   19878:	d338      	bcc.n	198ec <cbprintf_package_convert+0x170>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   1987a:	68fb      	ldr	r3, [r7, #12]
   1987c:	2b00      	cmp	r3, #0
   1987e:	d042      	beq.n	19906 <cbprintf_package_convert+0x18a>
   19880:	69f8      	ldr	r0, [r7, #28]
   19882:	f00b fe93 	bl	255ac <is_ptr>
   19886:	2800      	cmp	r0, #0
   19888:	d03d      	beq.n	19906 <cbprintf_package_convert+0x18a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   1988a:	46e8      	mov	r8, sp
   1988c:	b08a      	sub	sp, #40	; 0x28
   1988e:	466a      	mov	r2, sp
   19890:	4ba4      	ldr	r3, [pc, #656]	; (19b24 <cbprintf_package_convert+0x3a8>)
   19892:	6153      	str	r3, [r2, #20]
   19894:	69fb      	ldr	r3, [r7, #28]
   19896:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1989a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1989e:	8413      	strh	r3, [r2, #32]
   198a0:	4ba1      	ldr	r3, [pc, #644]	; (19b28 <cbprintf_package_convert+0x3ac>)
   198a2:	f842 3f10 	str.w	r3, [r2, #16]!
   198a6:	2300      	movs	r3, #0
   198a8:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   198ac:	489f      	ldr	r0, [pc, #636]	; (19b2c <cbprintf_package_convert+0x3b0>)
   198ae:	f001 f981 	bl	1abb4 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   198b2:	3d02      	subs	r5, #2
   198b4:	46c5      	mov	sp, r8
				continue;
   198b6:	e7d2      	b.n	1985e <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
   198b8:	f818 3b01 	ldrb.w	r3, [r8], #1
		return 1 + strlen(str);
   198bc:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   198c0:	f7ff fb94 	bl	18fec <strlen>
				if (strl && strl_cnt < strl_len) {
   198c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   198c6:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   198c8:	b13b      	cbz	r3, 198da <cbprintf_package_convert+0x15e>
   198ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   198ce:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   198d0:	bf3e      	ittt	cc
   198d2:	6ffb      	ldrcc	r3, [r7, #124]	; 0x7c
   198d4:	f823 0016 	strhcc.w	r0, [r3, r6, lsl #1]
   198d8:	3601      	addcc	r6, #1
				out_len += len;
   198da:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
   198dc:	e798      	b.n	19810 <cbprintf_package_convert+0x94>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   198de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   198e0:	f013 0604 	ands.w	r6, r3, #4
	size_t strl_cnt = 0;
   198e4:	bf1c      	itt	ne
   198e6:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   198e8:	44da      	addne	sl, fp
   198ea:	e7a9      	b.n	19840 <cbprintf_package_convert+0xc4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   198ec:	68fb      	ldr	r3, [r7, #12]
   198ee:	b123      	cbz	r3, 198fa <cbprintf_package_convert+0x17e>
   198f0:	69f8      	ldr	r0, [r7, #28]
   198f2:	f00b fe5b 	bl	255ac <is_ptr>
   198f6:	2800      	cmp	r0, #0
   198f8:	d1c7      	bne.n	1988a <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   198fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   198fc:	07da      	lsls	r2, r3, #31
   198fe:	d405      	bmi.n	1990c <cbprintf_package_convert+0x190>
					out_len -= drop_ro_str_pos ? 2 : 1;
   19900:	eba5 050b 	sub.w	r5, r5, fp
   19904:	e7ab      	b.n	1985e <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   19906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19908:	2b00      	cmp	r3, #0
   1990a:	d0a8      	beq.n	1985e <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
   1990c:	4640      	mov	r0, r8
   1990e:	f7ff fb6d 	bl	18fec <strlen>
				if (strl && strl_cnt < strl_len) {
   19912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   19914:	b143      	cbz	r3, 19928 <cbprintf_package_convert+0x1ac>
   19916:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1991a:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   1991c:	bf3f      	itttt	cc
   1991e:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   19920:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   19922:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   19926:	3601      	addcc	r6, #1
				out_len += (len - 1);
   19928:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
   1992a:	e798      	b.n	1985e <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   1992c:	f1bb 0f00 	cmp.w	fp, #0
   19930:	d06e      	beq.n	19a10 <cbprintf_package_convert+0x294>
   19932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19934:	f013 0604 	ands.w	r6, r3, #4
   19938:	d06d      	beq.n	19a16 <cbprintf_package_convert+0x29a>
		keep_cnt = ros_nbr;
   1993a:	46d9      	mov	r9, fp
		scpy_cnt = 0;
   1993c:	2600      	movs	r6, #0
		dst = keep_str_pos;
   1993e:	f107 0040 	add.w	r0, r7, #64	; 0x40
   19942:	465a      	mov	r2, fp
   19944:	4651      	mov	r1, sl
   19946:	f00e fdd6 	bl	284f6 <memcpy>
	str_pos += ros_nbr;
   1994a:	697b      	ldr	r3, [r7, #20]
   1994c:	44da      	add	sl, fp
	for (int i = 0; i < rws_nbr; i++) {
   1994e:	005b      	lsls	r3, r3, #1
   19950:	607b      	str	r3, [r7, #4]
   19952:	697b      	ldr	r3, [r7, #20]
   19954:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
   19958:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   1995a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1995c:	f003 0302 	and.w	r3, r3, #2
   19960:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < rws_nbr; i++) {
   19962:	68bb      	ldr	r3, [r7, #8]
   19964:	4553      	cmp	r3, sl
   19966:	d158      	bne.n	19a1a <cbprintf_package_convert+0x29e>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   19968:	6fb9      	ldr	r1, [r7, #120]	; 0x78
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1996a:	7863      	ldrb	r3, [r4, #1]
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1996c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   1996e:	0789      	lsls	r1, r1, #30
   19970:	bf48      	it	mi
   19972:	2100      	movmi	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   19974:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   19978:	bf58      	it	pl
   1997a:	ea4f 0159 	movpl.w	r1, r9, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1997e:	07c5      	lsls	r5, r0, #31
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   19980:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   19982:	f100 809a 	bmi.w	19aba <cbprintf_package_convert+0x33e>
   19986:	f010 0f04 	tst.w	r0, #4
   1998a:	bf14      	ite	ne
   1998c:	4648      	movne	r0, r9
   1998e:	2000      	moveq	r0, #0
   19990:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
   19992:	7062      	strb	r2, [r4, #1]
   19994:	70a0      	strb	r0, [r4, #2]
   19996:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   19998:	4620      	mov	r0, r4
   1999a:	69ba      	ldr	r2, [r7, #24]
   1999c:	6939      	ldr	r1, [r7, #16]
   1999e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   199a0:	4798      	blx	r3
	if (rv < 0) {
   199a2:	1e05      	subs	r5, r0, #0
   199a4:	f6ff af14 	blt.w	197d0 <cbprintf_package_convert+0x54>
	*in_desc = in_desc_backup;
   199a8:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   199aa:	4649      	mov	r1, r9
	*in_desc = in_desc_backup;
   199ac:	7023      	strb	r3, [r4, #0]
   199ae:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   199b0:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
   199b2:	7063      	strb	r3, [r4, #1]
   199b4:	697b      	ldr	r3, [r7, #20]
   199b6:	f884 b002 	strb.w	fp, [r4, #2]
   199ba:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   199bc:	f107 0040 	add.w	r0, r7, #64	; 0x40
   199c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   199c2:	4798      	blx	r3
	if (rv < 0) {
   199c4:	f1b0 0900 	subs.w	r9, r0, #0
   199c8:	f2c0 80a4 	blt.w	19b14 <cbprintf_package_convert+0x398>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   199cc:	693b      	ldr	r3, [r7, #16]
   199ce:	eba8 010b 	sub.w	r1, r8, fp
   199d2:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   199d4:	687b      	ldr	r3, [r7, #4]
   199d6:	4650      	mov	r0, sl
   199d8:	1ac9      	subs	r1, r1, r3
   199da:	69ba      	ldr	r2, [r7, #24]
   199dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   199de:	4798      	blx	r3
	if (rv < 0) {
   199e0:	2800      	cmp	r0, #0
   199e2:	f2c0 8099 	blt.w	19b18 <cbprintf_package_convert+0x39c>
	for (int i = 0; i < scpy_cnt; i++) {
   199e6:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
   199ea:	44a9      	add	r9, r5
	out_len += rv;
   199ec:	eb09 0500 	add.w	r5, r9, r0
		uint8_t loc = cpy_str_pos[i];
   199f0:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
   199f4:	45b3      	cmp	fp, r6
   199f6:	db62      	blt.n	19abe <cbprintf_package_convert+0x342>
	(void)cb(NULL, 0, ctx);
   199f8:	2100      	movs	r1, #0
   199fa:	69ba      	ldr	r2, [r7, #24]
   199fc:	4608      	mov	r0, r1
   199fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19a00:	4798      	blx	r3
	return out_len;
   19a02:	e6e5      	b.n	197d0 <cbprintf_package_convert+0x54>
	if (cb == NULL) {
   19a04:	465e      	mov	r6, fp
   19a06:	f04f 0900 	mov.w	r9, #0
   19a0a:	f107 0030 	add.w	r0, r7, #48	; 0x30
   19a0e:	e798      	b.n	19942 <cbprintf_package_convert+0x1c6>
		scpy_cnt = 0;
   19a10:	465e      	mov	r6, fp
		keep_cnt = 0;
   19a12:	46d9      	mov	r9, fp
   19a14:	e799      	b.n	1994a <cbprintf_package_convert+0x1ce>
   19a16:	46b1      	mov	r9, r6
   19a18:	e797      	b.n	1994a <cbprintf_package_convert+0x1ce>
		uint8_t arg_idx = *str_pos++;
   19a1a:	f81a 1b02 	ldrb.w	r1, [sl], #2
   19a1e:	4b3f      	ldr	r3, [pc, #252]	; (19b1c <cbprintf_package_convert+0x3a0>)
		uint8_t arg_pos = *str_pos++;
   19a20:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   19a24:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   19a28:	4298      	cmp	r0, r3
   19a2a:	d302      	bcc.n	19a32 <cbprintf_package_convert+0x2b6>
   19a2c:	4b3c      	ldr	r3, [pc, #240]	; (19b20 <cbprintf_package_convert+0x3a4>)
   19a2e:	4298      	cmp	r0, r3
   19a30:	d31d      	bcc.n	19a6e <cbprintf_package_convert+0x2f2>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   19a32:	68fb      	ldr	r3, [r7, #12]
   19a34:	b123      	cbz	r3, 19a40 <cbprintf_package_convert+0x2c4>
   19a36:	69f8      	ldr	r0, [r7, #28]
   19a38:	f00b fdb8 	bl	255ac <is_ptr>
   19a3c:	2800      	cmp	r0, #0
   19a3e:	d190      	bne.n	19962 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   19a40:	683b      	ldr	r3, [r7, #0]
   19a42:	b9fb      	cbnz	r3, 19a84 <cbprintf_package_convert+0x308>
				keep_str_pos[keep_cnt++] = arg_idx;
   19a44:	f109 0328 	add.w	r3, r9, #40	; 0x28
   19a48:	f107 0228 	add.w	r2, r7, #40	; 0x28
   19a4c:	f109 0001 	add.w	r0, r9, #1
   19a50:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
   19a54:	f107 0350 	add.w	r3, r7, #80	; 0x50
   19a58:	f109 0902 	add.w	r9, r9, #2
   19a5c:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
   19a60:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   19a64:	fa5f f989 	uxtb.w	r9, r9
   19a68:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
   19a6c:	e779      	b.n	19962 <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   19a6e:	68fb      	ldr	r3, [r7, #12]
   19a70:	b12b      	cbz	r3, 19a7e <cbprintf_package_convert+0x302>
   19a72:	69f8      	ldr	r0, [r7, #28]
   19a74:	f00b fd9a 	bl	255ac <is_ptr>
   19a78:	2800      	cmp	r0, #0
   19a7a:	f47f af72 	bne.w	19962 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   19a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19a80:	07db      	lsls	r3, r3, #31
   19a82:	d509      	bpl.n	19a98 <cbprintf_package_convert+0x31c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   19a84:	f106 0328 	add.w	r3, r6, #40	; 0x28
   19a88:	f107 0228 	add.w	r2, r7, #40	; 0x28
   19a8c:	1c71      	adds	r1, r6, #1
   19a8e:	189e      	adds	r6, r3, r2
   19a90:	f806 5c20 	strb.w	r5, [r6, #-32]
   19a94:	b2ce      	uxtb	r6, r1
   19a96:	e764      	b.n	19962 <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   19a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19a9a:	0758      	lsls	r0, r3, #29
   19a9c:	f57f af61 	bpl.w	19962 <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
   19aa0:	f109 0328 	add.w	r3, r9, #40	; 0x28
   19aa4:	f107 0228 	add.w	r2, r7, #40	; 0x28
   19aa8:	f109 0101 	add.w	r1, r9, #1
   19aac:	eb03 0902 	add.w	r9, r3, r2
   19ab0:	f809 5c10 	strb.w	r5, [r9, #-16]
   19ab4:	fa5f f981 	uxtb.w	r9, r1
   19ab8:	e753      	b.n	19962 <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   19aba:	2000      	movs	r0, #0
   19abc:	e768      	b.n	19990 <cbprintf_package_convert+0x214>
		uint8_t loc = cpy_str_pos[i];
   19abe:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
   19ac2:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
   19ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
   19aca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   19acc:	b1fb      	cbz	r3, 19b0e <cbprintf_package_convert+0x392>
   19ace:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   19ad2:	2101      	movs	r1, #1
   19ad4:	69ba      	ldr	r2, [r7, #24]
   19ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19ad8:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   19adc:	4798      	blx	r3
		if (rv < 0) {
   19ade:	2800      	cmp	r0, #0
   19ae0:	db1a      	blt.n	19b18 <cbprintf_package_convert+0x39c>
		out_len += rv;
   19ae2:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   19ae4:	f1b8 0f00 	cmp.w	r8, #0
   19ae8:	d106      	bne.n	19af8 <cbprintf_package_convert+0x37c>
   19aea:	4648      	mov	r0, r9
   19aec:	f7ff fa7e 	bl	18fec <strlen>
   19af0:	f100 0801 	add.w	r8, r0, #1
   19af4:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   19af8:	4641      	mov	r1, r8
   19afa:	4648      	mov	r0, r9
   19afc:	69ba      	ldr	r2, [r7, #24]
   19afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b00:	4798      	blx	r3
		if (rv < 0) {
   19b02:	2800      	cmp	r0, #0
   19b04:	db08      	blt.n	19b18 <cbprintf_package_convert+0x39c>
		out_len += rv;
   19b06:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   19b08:	f10b 0b01 	add.w	fp, fp, #1
   19b0c:	e772      	b.n	199f4 <cbprintf_package_convert+0x278>
		uint16_t str_len = strl ? strl[i] : 0;
   19b0e:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   19b12:	e7de      	b.n	19ad2 <cbprintf_package_convert+0x356>
   19b14:	464d      	mov	r5, r9
   19b16:	e65b      	b.n	197d0 <cbprintf_package_convert+0x54>
   19b18:	4605      	mov	r5, r0
   19b1a:	e659      	b.n	197d0 <cbprintf_package_convert+0x54>
   19b1c:	00028860 	.word	0x00028860
   19b20:	0002b324 	.word	0x0002b324
   19b24:	0002944b 	.word	0x0002944b
   19b28:	01000004 	.word	0x01000004
   19b2c:	00028c30 	.word	0x00028c30

00019b30 <z_reserve_fd>:

	return entry->obj;
}

int z_reserve_fd(void)
{
   19b30:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   19b32:	2400      	movs	r4, #0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   19b34:	f04f 33ff 	mov.w	r3, #4294967295
   19b38:	f04f 32ff 	mov.w	r2, #4294967295
   19b3c:	4814      	ldr	r0, [pc, #80]	; (19b90 <z_reserve_fd+0x60>)
   19b3e:	f00a f801 	bl	23b44 <z_impl_k_mutex_lock>
   19b42:	4b14      	ldr	r3, [pc, #80]	; (19b94 <z_reserve_fd+0x64>)
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19b44:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   19b48:	b17a      	cbz	r2, 19b6a <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   19b4a:	3401      	adds	r4, #1
   19b4c:	2c04      	cmp	r4, #4
   19b4e:	f103 0320 	add.w	r3, r3, #32
   19b52:	d1f7      	bne.n	19b44 <z_reserve_fd+0x14>
	errno = ENFILE;
   19b54:	f00c fb96 	bl	26284 <__errno>
   19b58:	2317      	movs	r3, #23
	return -1;
   19b5a:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   19b5e:	6003      	str	r3, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   19b60:	480b      	ldr	r0, [pc, #44]	; (19b90 <z_reserve_fd+0x60>)
   19b62:	f00a f869 	bl	23c38 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   19b66:	4620      	mov	r0, r4
   19b68:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   19b6a:	e8d3 0fef 	ldaex	r0, [r3]
   19b6e:	3001      	adds	r0, #1
   19b70:	e8c3 0fe1 	stlex	r1, r0, [r3]
   19b74:	2900      	cmp	r1, #0
   19b76:	d1f8      	bne.n	19b6a <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   19b78:	4807      	ldr	r0, [pc, #28]	; (19b98 <z_reserve_fd+0x68>)
   19b7a:	0163      	lsls	r3, r4, #5
   19b7c:	eb00 1144 	add.w	r1, r0, r4, lsl #5
   19b80:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
   19b82:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
   19b84:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   19b86:	4418      	add	r0, r3
   19b88:	f00e f974 	bl	27e74 <z_impl_k_mutex_init>
   19b8c:	e7e8      	b.n	19b60 <z_reserve_fd+0x30>
   19b8e:	bf00      	nop
   19b90:	2000c864 	.word	0x2000c864
   19b94:	2000d05c 	.word	0x2000d05c
   19b98:	2000d054 	.word	0x2000d054

00019b9c <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   19b9c:	b410      	push	{r4}
   19b9e:	4604      	mov	r4, r0
   19ba0:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   19ba2:	4b09      	ldr	r3, [pc, #36]	; (19bc8 <z_finalize_fd+0x2c>)
   19ba4:	0162      	lsls	r2, r4, #5
   19ba6:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   19baa:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   19bac:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   19bae:	b140      	cbz	r0, 19bc2 <z_finalize_fd+0x26>
   19bb0:	68c4      	ldr	r4, [r0, #12]
   19bb2:	b134      	cbz	r4, 19bc2 <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   19bb4:	320c      	adds	r2, #12
   19bb6:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   19bb8:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   19bba:	f240 1205 	movw	r2, #261	; 0x105
   19bbe:	f00b bd1a 	b.w	255f6 <z_fdtable_call_ioctl.constprop.0>
}
   19bc2:	bc10      	pop	{r4}
   19bc4:	4770      	bx	lr
   19bc6:	bf00      	nop
   19bc8:	2000d054 	.word	0x2000d054

00019bcc <z_free_fd>:

void z_free_fd(int fd)
{
   19bcc:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   19bce:	490d      	ldr	r1, [pc, #52]	; (19c04 <z_free_fd+0x38>)
   19bd0:	0140      	lsls	r0, r0, #5
   19bd2:	f100 0308 	add.w	r3, r0, #8
   19bd6:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19bd8:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
   19bdc:	b182      	cbz	r2, 19c00 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   19bde:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19be0:	e8d3 5fef 	ldaex	r5, [r3]
   19be4:	4295      	cmp	r5, r2
   19be6:	d104      	bne.n	19bf2 <z_free_fd+0x26>
   19be8:	e8c3 4fec 	stlex	ip, r4, [r3]
   19bec:	f1bc 0f00 	cmp.w	ip, #0
   19bf0:	d1f6      	bne.n	19be0 <z_free_fd+0x14>
   19bf2:	d1f1      	bne.n	19bd8 <z_free_fd+0xc>
	if (old_rc != 1) {
   19bf4:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
   19bf6:	bf01      	itttt	eq
   19bf8:	2300      	moveq	r3, #0
   19bfa:	180a      	addeq	r2, r1, r0
   19bfc:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
   19bfe:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   19c00:	bd30      	pop	{r4, r5, pc}
   19c02:	bf00      	nop
   19c04:	2000d054 	.word	0x2000d054

00019c08 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   19c08:	4b01      	ldr	r3, [pc, #4]	; (19c10 <__printk_hook_install+0x8>)
   19c0a:	6018      	str	r0, [r3, #0]
}
   19c0c:	4770      	bx	lr
   19c0e:	bf00      	nop
   19c10:	2000c584 	.word	0x2000c584

00019c14 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   19c14:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   19c16:	2500      	movs	r5, #0
{
   19c18:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   19c1a:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   19c1e:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   19c20:	9500      	str	r5, [sp, #0]
   19c22:	a903      	add	r1, sp, #12
   19c24:	4805      	ldr	r0, [pc, #20]	; (19c3c <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   19c26:	9505      	str	r5, [sp, #20]
   19c28:	f000 f97a 	bl	19f20 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   19c2c:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   19c30:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   19c32:	bfb8      	it	lt
   19c34:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   19c36:	b007      	add	sp, #28
   19c38:	bd30      	pop	{r4, r5, pc}
   19c3a:	bf00      	nop
   19c3c:	00025619 	.word	0x00025619

00019c40 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   19c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19c44:	8b05      	ldrh	r5, [r0, #24]
{
   19c46:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   19c48:	0728      	lsls	r0, r5, #28
{
   19c4a:	4690      	mov	r8, r2
	if (processing) {
   19c4c:	d411      	bmi.n	19c72 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   19c4e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19c50:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   19c54:	f040 80cd 	bne.w	19df2 <process_event+0x1b2>
			evt = process_recheck(mgr);
   19c58:	4620      	mov	r0, r4
   19c5a:	f00b fed9 	bl	25a10 <process_recheck>
		}

		if (evt == EVT_NOP) {
   19c5e:	b178      	cbz	r0, 19c80 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   19c60:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19c62:	8b21      	ldrh	r1, [r4, #24]
   19c64:	2804      	cmp	r0, #4
   19c66:	d811      	bhi.n	19c8c <process_event+0x4c>
   19c68:	e8df f000 	tbb	[pc, r0]
   19c6c:	856d10c3 	.word	0x856d10c3
   19c70:	95          	.byte	0x95
   19c71:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   19c72:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   19c74:	bf0c      	ite	eq
   19c76:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19c7a:	f045 0520 	orrne.w	r5, r5, #32
   19c7e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   19c80:	f388 8811 	msr	BASEPRI, r8
   19c84:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   19c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19c8c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   19c90:	45aa      	cmp	sl, r5
   19c92:	f000 80a6 	beq.w	19de2 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   19c96:	2700      	movs	r7, #0
   19c98:	46b9      	mov	r9, r7
   19c9a:	463e      	mov	r6, r7
   19c9c:	68a3      	ldr	r3, [r4, #8]
   19c9e:	2b00      	cmp	r3, #0
   19ca0:	f000 80bd 	beq.w	19e1e <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   19ca4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   19ca8:	8321      	strh	r1, [r4, #24]
   19caa:	f388 8811 	msr	BASEPRI, r8
   19cae:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   19cb2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19cb4:	2900      	cmp	r1, #0
   19cb6:	f000 80bb 	beq.w	19e30 <process_event+0x1f0>
	return node->next;
   19cba:	680d      	ldr	r5, [r1, #0]
   19cbc:	2900      	cmp	r1, #0
   19cbe:	f000 80b7 	beq.w	19e30 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   19cc2:	4633      	mov	r3, r6
   19cc4:	4652      	mov	r2, sl
   19cc6:	4620      	mov	r0, r4
   19cc8:	f8d1 8004 	ldr.w	r8, [r1, #4]
   19ccc:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19cce:	2d00      	cmp	r5, #0
   19cd0:	d076      	beq.n	19dc0 <process_event+0x180>
   19cd2:	682b      	ldr	r3, [r5, #0]
   19cd4:	4629      	mov	r1, r5
   19cd6:	461d      	mov	r5, r3
   19cd8:	e7f0      	b.n	19cbc <process_event+0x7c>
   19cda:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   19cde:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   19ce0:	2a01      	cmp	r2, #1
   19ce2:	d81b      	bhi.n	19d1c <process_event+0xdc>
	list->head = NULL;
   19ce4:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19ce6:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   19cea:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   19cec:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19cee:	b289      	uxth	r1, r1
	list->tail = NULL;
   19cf0:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   19cf4:	d109      	bne.n	19d0a <process_event+0xca>
   19cf6:	463b      	mov	r3, r7
   19cf8:	e003      	b.n	19d02 <process_event+0xc2>
				mgr->refs += 1U;
   19cfa:	8b62      	ldrh	r2, [r4, #26]
   19cfc:	3201      	adds	r2, #1
   19cfe:	8362      	strh	r2, [r4, #26]
	return node->next;
   19d00:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   19d02:	2b00      	cmp	r3, #0
   19d04:	d1f9      	bne.n	19cfa <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19d06:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   19d0a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   19d0c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   19d0e:	f00b fe7f 	bl	25a10 <process_recheck>
   19d12:	2800      	cmp	r0, #0
   19d14:	d07b      	beq.n	19e0e <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19d16:	f041 0120 	orr.w	r1, r1, #32
   19d1a:	e077      	b.n	19e0c <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   19d1c:	2b04      	cmp	r3, #4
   19d1e:	d10a      	bne.n	19d36 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19d20:	f021 0107 	bic.w	r1, r1, #7
   19d24:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   19d26:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   19d28:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   19d2a:	f00b fe71 	bl	25a10 <process_recheck>
   19d2e:	b110      	cbz	r0, 19d36 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19d30:	f041 0120 	orr.w	r1, r1, #32
   19d34:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19d36:	8b21      	ldrh	r1, [r4, #24]
   19d38:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   19d3c:	45aa      	cmp	sl, r5
   19d3e:	d050      	beq.n	19de2 <process_event+0x1a2>
   19d40:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   19d42:	46b9      	mov	r9, r7
   19d44:	e7aa      	b.n	19c9c <process_event+0x5c>
			transit = mgr->transitions->start;
   19d46:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19d48:	f021 0107 	bic.w	r1, r1, #7
   19d4c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   19d50:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   19d52:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   19d56:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   19d58:	d12d      	bne.n	19db6 <process_event+0x176>
		    || (transit != NULL)) {
   19d5a:	f1b9 0f00 	cmp.w	r9, #0
   19d5e:	d040      	beq.n	19de2 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   19d60:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   19d64:	8321      	strh	r1, [r4, #24]
   19d66:	f388 8811 	msr	BASEPRI, r8
   19d6a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   19d6e:	4620      	mov	r0, r4
   19d70:	4939      	ldr	r1, [pc, #228]	; (19e58 <process_event+0x218>)
   19d72:	47c8      	blx	r9
   19d74:	e029      	b.n	19dca <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19d76:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   19d7a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19d7c:	f041 0104 	orr.w	r1, r1, #4
   19d80:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   19d82:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   19d84:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   19d88:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   19d8a:	d0e6      	beq.n	19d5a <process_event+0x11a>
   19d8c:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19d8e:	f04f 0a04 	mov.w	sl, #4
		res = 0;
   19d92:	463e      	mov	r6, r7
   19d94:	e782      	b.n	19c9c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19d96:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   19d9a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19d9c:	f041 0105 	orr.w	r1, r1, #5
   19da0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   19da2:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   19da4:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   19da8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   19daa:	d0d6      	beq.n	19d5a <process_event+0x11a>
   19dac:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19dae:	f04f 0a05 	mov.w	sl, #5
		res = 0;
   19db2:	463e      	mov	r6, r7
   19db4:	e772      	b.n	19c9c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   19db6:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19db8:	f04f 0a06 	mov.w	sl, #6
		res = 0;
   19dbc:	463e      	mov	r6, r7
   19dbe:	e76d      	b.n	19c9c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19dc0:	462b      	mov	r3, r5
   19dc2:	e787      	b.n	19cd4 <process_event+0x94>
			if (transit != NULL) {
   19dc4:	f1b9 0f00 	cmp.w	r9, #0
   19dc8:	d1d1      	bne.n	19d6e <process_event+0x12e>
	__asm__ volatile(
   19dca:	f04f 0320 	mov.w	r3, #32
   19dce:	f3ef 8811 	mrs	r8, BASEPRI
   19dd2:	f383 8812 	msr	BASEPRI_MAX, r3
   19dd6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   19dda:	8b23      	ldrh	r3, [r4, #24]
   19ddc:	f023 0308 	bic.w	r3, r3, #8
   19de0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   19de2:	8b25      	ldrh	r5, [r4, #24]
   19de4:	06ea      	lsls	r2, r5, #27
   19de6:	d52e      	bpl.n	19e46 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   19de8:	f025 0310 	bic.w	r3, r5, #16
   19dec:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   19dee:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   19df2:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19df4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   19df6:	2e00      	cmp	r6, #0
   19df8:	f6bf af6f 	bge.w	19cda <process_event+0x9a>
	list->head = NULL;
   19dfc:	2300      	movs	r3, #0
		*clients = mgr->clients;
   19dfe:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   19e00:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19e04:	f021 0107 	bic.w	r1, r1, #7
   19e08:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19e0c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19e0e:	8b21      	ldrh	r1, [r4, #24]
   19e10:	f04f 0900 	mov.w	r9, #0
   19e14:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   19e18:	45aa      	cmp	sl, r5
   19e1a:	f47f af3f 	bne.w	19c9c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   19e1e:	2f00      	cmp	r7, #0
   19e20:	d09b      	beq.n	19d5a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   19e22:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   19e26:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   19e28:	f388 8811 	msr	BASEPRI, r8
   19e2c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   19e30:	2f00      	cmp	r7, #0
   19e32:	d0c7      	beq.n	19dc4 <process_event+0x184>
	return node->next;
   19e34:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   19e36:	4639      	mov	r1, r7
   19e38:	4633      	mov	r3, r6
   19e3a:	4652      	mov	r2, sl
   19e3c:	4620      	mov	r0, r4
   19e3e:	f00b fe13 	bl	25a68 <notify_one>
	list->head = node;
   19e42:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   19e44:	e7f4      	b.n	19e30 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   19e46:	06ab      	lsls	r3, r5, #26
   19e48:	f57f af1a 	bpl.w	19c80 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   19e4c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   19e50:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   19e52:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   19e56:	e6ff      	b.n	19c58 <process_event+0x18>
   19e58:	00025a95 	.word	0x00025a95

00019e5c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   19e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e5e:	4602      	mov	r2, r0
   19e60:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   19e62:	270a      	movs	r7, #10
	size_t val = 0;
   19e64:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   19e66:	4e07      	ldr	r6, [pc, #28]	; (19e84 <extract_decimal+0x28>)
   19e68:	460b      	mov	r3, r1
   19e6a:	781c      	ldrb	r4, [r3, #0]
   19e6c:	3101      	adds	r1, #1
   19e6e:	5d35      	ldrb	r5, [r6, r4]
   19e70:	076d      	lsls	r5, r5, #29
   19e72:	d401      	bmi.n	19e78 <extract_decimal+0x1c>
	}
	*str = sp;
   19e74:	6013      	str	r3, [r2, #0]
	return val;
}
   19e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   19e78:	fb07 4300 	mla	r3, r7, r0, r4
   19e7c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   19e80:	e7f2      	b.n	19e68 <extract_decimal+0xc>
   19e82:	bf00      	nop
   19e84:	0002b1d7 	.word	0x0002b1d7

00019e88 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   19e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e8c:	4615      	mov	r5, r2
   19e8e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   19e90:	78d3      	ldrb	r3, [r2, #3]
   19e92:	4a22      	ldr	r2, [pc, #136]	; (19f1c <encode_uint+0x94>)
	switch (specifier) {
   19e94:	2b6f      	cmp	r3, #111	; 0x6f
   19e96:	f812 b003 	ldrb.w	fp, [r2, r3]
{
   19e9a:	4680      	mov	r8, r0
   19e9c:	460f      	mov	r7, r1
   19e9e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   19ea2:	d029      	beq.n	19ef8 <encode_uint+0x70>
   19ea4:	d824      	bhi.n	19ef0 <encode_uint+0x68>
		return 10;
   19ea6:	2b58      	cmp	r3, #88	; 0x58
   19ea8:	bf0c      	ite	eq
   19eaa:	2610      	moveq	r6, #16
   19eac:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   19eae:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   19eb2:	4632      	mov	r2, r6
   19eb4:	2300      	movs	r3, #0
   19eb6:	4640      	mov	r0, r8
   19eb8:	4639      	mov	r1, r7
   19eba:	f7fe ff25 	bl	18d08 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   19ebe:	2a09      	cmp	r2, #9
   19ec0:	b2d4      	uxtb	r4, r2
   19ec2:	d81e      	bhi.n	19f02 <encode_uint+0x7a>
   19ec4:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   19ec6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19ec8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   19eca:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19ece:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   19ed2:	d301      	bcc.n	19ed8 <encode_uint+0x50>
   19ed4:	45d1      	cmp	r9, sl
   19ed6:	d811      	bhi.n	19efc <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   19ed8:	782b      	ldrb	r3, [r5, #0]
   19eda:	069b      	lsls	r3, r3, #26
   19edc:	d505      	bpl.n	19eea <encode_uint+0x62>
		if (radix == 8) {
   19ede:	2e08      	cmp	r6, #8
   19ee0:	d115      	bne.n	19f0e <encode_uint+0x86>
			conv->altform_0 = true;
   19ee2:	78ab      	ldrb	r3, [r5, #2]
   19ee4:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   19ee8:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
   19eea:	4648      	mov	r0, r9
   19eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   19ef0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   19ef4:	2b70      	cmp	r3, #112	; 0x70
   19ef6:	e7d7      	b.n	19ea8 <encode_uint+0x20>
	switch (specifier) {
   19ef8:	2608      	movs	r6, #8
   19efa:	e7d8      	b.n	19eae <encode_uint+0x26>
		value /= radix;
   19efc:	4680      	mov	r8, r0
   19efe:	460f      	mov	r7, r1
   19f00:	e7d7      	b.n	19eb2 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19f02:	f1bb 0f01 	cmp.w	fp, #1
   19f06:	bf0c      	ite	eq
   19f08:	3437      	addeq	r4, #55	; 0x37
   19f0a:	3457      	addne	r4, #87	; 0x57
   19f0c:	e7db      	b.n	19ec6 <encode_uint+0x3e>
		} else if (radix == 16) {
   19f0e:	2e10      	cmp	r6, #16
   19f10:	d1eb      	bne.n	19eea <encode_uint+0x62>
			conv->altform_0c = true;
   19f12:	78ab      	ldrb	r3, [r5, #2]
   19f14:	f043 0310 	orr.w	r3, r3, #16
   19f18:	e7e6      	b.n	19ee8 <encode_uint+0x60>
   19f1a:	bf00      	nop
   19f1c:	0002b1d7 	.word	0x0002b1d7

00019f20 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   19f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f24:	4682      	mov	sl, r0
   19f26:	4617      	mov	r7, r2
   19f28:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   19f2a:	2500      	movs	r5, #0
{
   19f2c:	b097      	sub	sp, #92	; 0x5c
   19f2e:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   19f30:	7838      	ldrb	r0, [r7, #0]
   19f32:	b908      	cbnz	r0, 19f38 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   19f34:	4628      	mov	r0, r5
   19f36:	e349      	b.n	1a5cc <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
   19f38:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   19f3a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   19f3c:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
   19f3e:	d006      	beq.n	19f4e <z_cbvprintf_impl+0x2e>
			OUTC('%');
   19f40:	9903      	ldr	r1, [sp, #12]
   19f42:	47d0      	blx	sl
   19f44:	2800      	cmp	r0, #0
   19f46:	f2c0 8341 	blt.w	1a5cc <z_cbvprintf_impl+0x6ac>
   19f4a:	3501      	adds	r5, #1
		if (bps == NULL) {
   19f4c:	e1f0      	b.n	1a330 <z_cbvprintf_impl+0x410>
		} state = {
   19f4e:	2218      	movs	r2, #24
   19f50:	2100      	movs	r1, #0
   19f52:	a810      	add	r0, sp, #64	; 0x40
   19f54:	f00e fadc 	bl	28510 <memset>
	if (*sp == '%') {
   19f58:	787b      	ldrb	r3, [r7, #1]
   19f5a:	2b25      	cmp	r3, #37	; 0x25
   19f5c:	f000 80a3 	beq.w	1a0a6 <z_cbvprintf_impl+0x186>
   19f60:	2300      	movs	r3, #0
   19f62:	4698      	mov	r8, r3
   19f64:	469e      	mov	lr, r3
   19f66:	469c      	mov	ip, r3
   19f68:	4618      	mov	r0, r3
   19f6a:	1c79      	adds	r1, r7, #1
   19f6c:	460e      	mov	r6, r1
		switch (*sp) {
   19f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
   19f72:	2a2b      	cmp	r2, #43	; 0x2b
   19f74:	f000 80c6 	beq.w	1a104 <z_cbvprintf_impl+0x1e4>
   19f78:	f200 80bd 	bhi.w	1a0f6 <z_cbvprintf_impl+0x1d6>
   19f7c:	2a20      	cmp	r2, #32
   19f7e:	f000 80c4 	beq.w	1a10a <z_cbvprintf_impl+0x1ea>
   19f82:	2a23      	cmp	r2, #35	; 0x23
   19f84:	f000 80c4 	beq.w	1a110 <z_cbvprintf_impl+0x1f0>
   19f88:	b12b      	cbz	r3, 19f96 <z_cbvprintf_impl+0x76>
   19f8a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   19f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19f92:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   19f96:	f1b8 0f00 	cmp.w	r8, #0
   19f9a:	d005      	beq.n	19fa8 <z_cbvprintf_impl+0x88>
   19f9c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   19fa0:	f043 0320 	orr.w	r3, r3, #32
   19fa4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   19fa8:	f1be 0f00 	cmp.w	lr, #0
   19fac:	d005      	beq.n	19fba <z_cbvprintf_impl+0x9a>
   19fae:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   19fb2:	f043 0310 	orr.w	r3, r3, #16
   19fb6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   19fba:	f1bc 0f00 	cmp.w	ip, #0
   19fbe:	d005      	beq.n	19fcc <z_cbvprintf_impl+0xac>
   19fc0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   19fc4:	f043 0308 	orr.w	r3, r3, #8
   19fc8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   19fcc:	b128      	cbz	r0, 19fda <z_cbvprintf_impl+0xba>
   19fce:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   19fd2:	f043 0304 	orr.w	r3, r3, #4
   19fd6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   19fda:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   19fde:	f003 0144 	and.w	r1, r3, #68	; 0x44
   19fe2:	2944      	cmp	r1, #68	; 0x44
   19fe4:	d103      	bne.n	19fee <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
   19fe6:	f36f 1386 	bfc	r3, #6, #1
   19fea:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   19fee:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   19ff2:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   19ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19ff8:	9609      	str	r6, [sp, #36]	; 0x24
   19ffa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   19ffe:	f040 808c 	bne.w	1a11a <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
   1a002:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1a006:	f043 0301 	orr.w	r3, r3, #1
   1a00a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
   1a00e:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
   1a010:	781a      	ldrb	r2, [r3, #0]
   1a012:	2a2e      	cmp	r2, #46	; 0x2e
   1a014:	bf0c      	ite	eq
   1a016:	2101      	moveq	r1, #1
   1a018:	2100      	movne	r1, #0
   1a01a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a01e:	f361 0241 	bfi	r2, r1, #1, #1
   1a022:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   1a026:	d10c      	bne.n	1a042 <z_cbvprintf_impl+0x122>
	++sp;
   1a028:	1c5a      	adds	r2, r3, #1
   1a02a:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
   1a02c:	785a      	ldrb	r2, [r3, #1]
   1a02e:	2a2a      	cmp	r2, #42	; 0x2a
   1a030:	f040 8083 	bne.w	1a13a <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
   1a034:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   1a038:	3302      	adds	r3, #2
		conv->prec_star = true;
   1a03a:	f042 0204 	orr.w	r2, r2, #4
   1a03e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
   1a042:	781a      	ldrb	r2, [r3, #0]
   1a044:	2a6c      	cmp	r2, #108	; 0x6c
   1a046:	f000 80a4 	beq.w	1a192 <z_cbvprintf_impl+0x272>
   1a04a:	f200 8086 	bhi.w	1a15a <z_cbvprintf_impl+0x23a>
   1a04e:	2a68      	cmp	r2, #104	; 0x68
   1a050:	f000 808c 	beq.w	1a16c <z_cbvprintf_impl+0x24c>
   1a054:	2a6a      	cmp	r2, #106	; 0x6a
   1a056:	f000 80a5 	beq.w	1a1a4 <z_cbvprintf_impl+0x284>
   1a05a:	2a4c      	cmp	r2, #76	; 0x4c
   1a05c:	f000 80aa 	beq.w	1a1b4 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
   1a060:	461a      	mov	r2, r3
   1a062:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
   1a066:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
   1a068:	9204      	str	r2, [sp, #16]
   1a06a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a06e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
   1a072:	f200 8117 	bhi.w	1a2a4 <z_cbvprintf_impl+0x384>
   1a076:	2b6d      	cmp	r3, #109	; 0x6d
   1a078:	f200 80a9 	bhi.w	1a1ce <z_cbvprintf_impl+0x2ae>
   1a07c:	2b69      	cmp	r3, #105	; 0x69
   1a07e:	f200 8111 	bhi.w	1a2a4 <z_cbvprintf_impl+0x384>
   1a082:	2b57      	cmp	r3, #87	; 0x57
   1a084:	f200 80be 	bhi.w	1a204 <z_cbvprintf_impl+0x2e4>
   1a088:	2b41      	cmp	r3, #65	; 0x41
   1a08a:	d003      	beq.n	1a094 <z_cbvprintf_impl+0x174>
   1a08c:	3b45      	subs	r3, #69	; 0x45
   1a08e:	2b02      	cmp	r3, #2
   1a090:	f200 8108 	bhi.w	1a2a4 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
   1a094:	2204      	movs	r2, #4
   1a096:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a09a:	f362 0302 	bfi	r3, r2, #0, #3
   1a09e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
   1a0a2:	2301      	movs	r3, #1
			break;
   1a0a4:	e0ca      	b.n	1a23c <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
   1a0a6:	1cba      	adds	r2, r7, #2
   1a0a8:	9204      	str	r2, [sp, #16]
   1a0aa:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   1a0ae:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1a0b2:	07da      	lsls	r2, r3, #31
   1a0b4:	f140 80fd 	bpl.w	1a2b2 <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
   1a0b8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   1a0bc:	f1b9 0f00 	cmp.w	r9, #0
   1a0c0:	da07      	bge.n	1a0d2 <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
   1a0c2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
   1a0c6:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
   1a0ca:	f042 0204 	orr.w	r2, r2, #4
   1a0ce:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
   1a0d2:	075e      	lsls	r6, r3, #29
   1a0d4:	f140 80f6 	bpl.w	1a2c4 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
   1a0d8:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
   1a0dc:	f1bb 0f00 	cmp.w	fp, #0
   1a0e0:	f280 80f5 	bge.w	1a2ce <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
   1a0e4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1a0e8:	f36f 0341 	bfc	r3, #1, #1
   1a0ec:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   1a0f0:	f04f 3bff 	mov.w	fp, #4294967295
   1a0f4:	e0eb      	b.n	1a2ce <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
   1a0f6:	2a2d      	cmp	r2, #45	; 0x2d
   1a0f8:	d00d      	beq.n	1a116 <z_cbvprintf_impl+0x1f6>
   1a0fa:	2a30      	cmp	r2, #48	; 0x30
   1a0fc:	f47f af44 	bne.w	19f88 <z_cbvprintf_impl+0x68>
   1a100:	2301      	movs	r3, #1
	} while (loop);
   1a102:	e733      	b.n	19f6c <z_cbvprintf_impl+0x4c>
		switch (*sp) {
   1a104:	f04f 0c01 	mov.w	ip, #1
   1a108:	e730      	b.n	19f6c <z_cbvprintf_impl+0x4c>
   1a10a:	f04f 0e01 	mov.w	lr, #1
   1a10e:	e72d      	b.n	19f6c <z_cbvprintf_impl+0x4c>
   1a110:	f04f 0801 	mov.w	r8, #1
   1a114:	e72a      	b.n	19f6c <z_cbvprintf_impl+0x4c>
   1a116:	2001      	movs	r0, #1
   1a118:	e728      	b.n	19f6c <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
   1a11a:	a809      	add	r0, sp, #36	; 0x24
   1a11c:	f7ff fe9e 	bl	19e5c <extract_decimal>
	if (sp != wp) {
   1a120:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a122:	42b3      	cmp	r3, r6
   1a124:	f43f af74 	beq.w	1a010 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
   1a128:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
   1a12c:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   1a12e:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
   1a130:	f360 0241 	bfi	r2, r0, #1, #1
   1a134:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1a138:	e76a      	b.n	1a010 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
   1a13a:	a809      	add	r0, sp, #36	; 0x24
   1a13c:	f7ff fe8e 	bl	19e5c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1a140:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
   1a144:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   1a146:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1a14a:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   1a14e:	f362 0341 	bfi	r3, r2, #1, #1
   1a152:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
   1a156:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a158:	e773      	b.n	1a042 <z_cbvprintf_impl+0x122>
	switch (*sp) {
   1a15a:	2a74      	cmp	r2, #116	; 0x74
   1a15c:	d026      	beq.n	1a1ac <z_cbvprintf_impl+0x28c>
   1a15e:	2a7a      	cmp	r2, #122	; 0x7a
   1a160:	f47f af7e 	bne.w	1a060 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
   1a164:	2106      	movs	r1, #6
   1a166:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a16a:	e00c      	b.n	1a186 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
   1a16c:	785a      	ldrb	r2, [r3, #1]
   1a16e:	2a68      	cmp	r2, #104	; 0x68
   1a170:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a174:	d106      	bne.n	1a184 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
   1a176:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1a178:	f361 02c6 	bfi	r2, r1, #3, #4
   1a17c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   1a180:	3302      	adds	r3, #2
   1a182:	e76d      	b.n	1a060 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
   1a184:	2102      	movs	r1, #2
   1a186:	f361 02c6 	bfi	r2, r1, #3, #4
   1a18a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   1a18e:	3301      	adds	r3, #1
   1a190:	e766      	b.n	1a060 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
   1a192:	785a      	ldrb	r2, [r3, #1]
   1a194:	2a6c      	cmp	r2, #108	; 0x6c
   1a196:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a19a:	d101      	bne.n	1a1a0 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
   1a19c:	2104      	movs	r1, #4
   1a19e:	e7eb      	b.n	1a178 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
   1a1a0:	2103      	movs	r1, #3
   1a1a2:	e7f0      	b.n	1a186 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
   1a1a4:	2105      	movs	r1, #5
   1a1a6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a1aa:	e7ec      	b.n	1a186 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
   1a1ac:	2107      	movs	r1, #7
   1a1ae:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a1b2:	e7e8      	b.n	1a186 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
   1a1b4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1a1b8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   1a1bc:	f022 0202 	bic.w	r2, r2, #2
   1a1c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1a1c4:	f042 0202 	orr.w	r2, r2, #2
   1a1c8:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   1a1cc:	e7df      	b.n	1a18e <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
   1a1ce:	3b6e      	subs	r3, #110	; 0x6e
   1a1d0:	b2d9      	uxtb	r1, r3
   1a1d2:	2301      	movs	r3, #1
   1a1d4:	408b      	lsls	r3, r1
   1a1d6:	f240 4182 	movw	r1, #1154	; 0x482
   1a1da:	420b      	tst	r3, r1
   1a1dc:	d138      	bne.n	1a250 <z_cbvprintf_impl+0x330>
   1a1de:	f013 0f24 	tst.w	r3, #36	; 0x24
   1a1e2:	d152      	bne.n	1a28a <z_cbvprintf_impl+0x36a>
   1a1e4:	07d8      	lsls	r0, r3, #31
   1a1e6:	d55d      	bpl.n	1a2a4 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
   1a1e8:	2103      	movs	r1, #3
   1a1ea:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a1ee:	f361 0302 	bfi	r3, r1, #0, #3
   1a1f2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a1f6:	f002 0378 	and.w	r3, r2, #120	; 0x78
   1a1fa:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   1a1fe:	424b      	negs	r3, r1
   1a200:	414b      	adcs	r3, r1
   1a202:	e01b      	b.n	1a23c <z_cbvprintf_impl+0x31c>
   1a204:	2001      	movs	r0, #1
	switch (conv->specifier) {
   1a206:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   1a20a:	b2c9      	uxtb	r1, r1
   1a20c:	fa00 f101 	lsl.w	r1, r0, r1
   1a210:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   1a214:	f47f af3e 	bne.w	1a094 <z_cbvprintf_impl+0x174>
   1a218:	f640 0601 	movw	r6, #2049	; 0x801
   1a21c:	4231      	tst	r1, r6
   1a21e:	d11d      	bne.n	1a25c <z_cbvprintf_impl+0x33c>
   1a220:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   1a224:	d03e      	beq.n	1a2a4 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
   1a226:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a22a:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a22e:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1a232:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   1a234:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a238:	d034      	beq.n	1a2a4 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
   1a23a:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   1a23c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   1a240:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1a244:	430b      	orrs	r3, r1
   1a246:	f363 0241 	bfi	r2, r3, #1, #1
   1a24a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   1a24e:	e72e      	b.n	1a0ae <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
   1a250:	2102      	movs	r1, #2
   1a252:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a256:	f361 0302 	bfi	r3, r1, #0, #3
   1a25a:	e7e8      	b.n	1a22e <z_cbvprintf_impl+0x30e>
   1a25c:	2002      	movs	r0, #2
   1a25e:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a262:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1a266:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a26a:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   1a26c:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   1a270:	bf02      	ittt	eq
   1a272:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   1a276:	f041 0101 	orreq.w	r1, r1, #1
   1a27a:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   1a27e:	2b63      	cmp	r3, #99	; 0x63
   1a280:	d1db      	bne.n	1a23a <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1a282:	1e13      	subs	r3, r2, #0
   1a284:	bf18      	it	ne
   1a286:	2301      	movne	r3, #1
   1a288:	e7d8      	b.n	1a23c <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
   1a28a:	2103      	movs	r1, #3
   1a28c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   1a290:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1a294:	f361 0302 	bfi	r3, r1, #0, #3
   1a298:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   1a29c:	bf14      	ite	ne
   1a29e:	2301      	movne	r3, #1
   1a2a0:	2300      	moveq	r3, #0
   1a2a2:	e7cb      	b.n	1a23c <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
   1a2a4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a2a8:	f043 0301 	orr.w	r3, r3, #1
   1a2ac:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   1a2b0:	e7c3      	b.n	1a23a <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
   1a2b2:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   1a2b6:	2a00      	cmp	r2, #0
		int width = -1;
   1a2b8:	bfac      	ite	ge
   1a2ba:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
   1a2be:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
   1a2c2:	e706      	b.n	1a0d2 <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
   1a2c4:	0798      	lsls	r0, r3, #30
   1a2c6:	f57f af13 	bpl.w	1a0f0 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
   1a2ca:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   1a2ce:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1a2d0:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
   1a2d4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
   1a2d8:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
   1a2dc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1a2e0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1a2e2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1a2e6:	d133      	bne.n	1a350 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
   1a2e8:	1ecb      	subs	r3, r1, #3
   1a2ea:	2b04      	cmp	r3, #4
   1a2ec:	d804      	bhi.n	1a2f8 <z_cbvprintf_impl+0x3d8>
   1a2ee:	e8df f003 	tbb	[pc, r3]
   1a2f2:	4621      	.short	0x4621
   1a2f4:	2146      	.short	0x2146
   1a2f6:	21          	.byte	0x21
   1a2f7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   1a2f8:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   1a2fa:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   1a2fc:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1a300:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   1a304:	d11c      	bne.n	1a340 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
   1a306:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   1a30a:	17da      	asrs	r2, r3, #31
   1a30c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   1a310:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   1a312:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a316:	f013 0603 	ands.w	r6, r3, #3
   1a31a:	d050      	beq.n	1a3be <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
   1a31c:	463a      	mov	r2, r7
   1a31e:	4650      	mov	r0, sl
   1a320:	9b04      	ldr	r3, [sp, #16]
   1a322:	9903      	ldr	r1, [sp, #12]
   1a324:	f00b fc5c 	bl	25be0 <outs>
   1a328:	2800      	cmp	r0, #0
   1a32a:	f2c0 814f 	blt.w	1a5cc <z_cbvprintf_impl+0x6ac>
   1a32e:	4405      	add	r5, r0
			continue;
   1a330:	9f04      	ldr	r7, [sp, #16]
   1a332:	e5fd      	b.n	19f30 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1a334:	f854 3b04 	ldr.w	r3, [r4], #4
   1a338:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   1a33a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
   1a33e:	e7e8      	b.n	1a312 <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
   1a340:	2902      	cmp	r1, #2
   1a342:	d1e5      	bne.n	1a310 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
   1a344:	b21a      	sxth	r2, r3
   1a346:	f343 33c0 	sbfx	r3, r3, #15, #1
   1a34a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1a34e:	e7df      	b.n	1a310 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1a350:	2b02      	cmp	r3, #2
   1a352:	d124      	bne.n	1a39e <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
   1a354:	1ecb      	subs	r3, r1, #3
   1a356:	2b04      	cmp	r3, #4
   1a358:	d804      	bhi.n	1a364 <z_cbvprintf_impl+0x444>
   1a35a:	e8df f003 	tbb	[pc, r3]
   1a35e:	1018      	.short	0x1018
   1a360:	1810      	.short	0x1810
   1a362:	18          	.byte	0x18
   1a363:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   1a364:	2901      	cmp	r1, #1
   1a366:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
   1a36a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1a36e:	d014      	beq.n	1a39a <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
   1a370:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   1a372:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   1a376:	d1cc      	bne.n	1a312 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
   1a378:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   1a37a:	9310      	str	r3, [sp, #64]	; 0x40
   1a37c:	e7c9      	b.n	1a312 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
   1a37e:	3407      	adds	r4, #7
   1a380:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   1a384:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1a388:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   1a38c:	e7c1      	b.n	1a312 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
   1a38e:	f854 3b04 	ldr.w	r3, [r4], #4
   1a392:	9310      	str	r3, [sp, #64]	; 0x40
   1a394:	2300      	movs	r3, #0
   1a396:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   1a398:	e7bb      	b.n	1a312 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
   1a39a:	b2db      	uxtb	r3, r3
   1a39c:	e7cd      	b.n	1a33a <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
   1a39e:	2b04      	cmp	r3, #4
   1a3a0:	d108      	bne.n	1a3b4 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
   1a3a2:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   1a3a4:	f024 0407 	bic.w	r4, r4, #7
   1a3a8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a3ac:	3408      	adds	r4, #8
   1a3ae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1a3b2:	e7ae      	b.n	1a312 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1a3b4:	2b03      	cmp	r3, #3
   1a3b6:	d1ac      	bne.n	1a312 <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
   1a3b8:	f854 3b04 	ldr.w	r3, [r4], #4
   1a3bc:	e7dd      	b.n	1a37a <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
   1a3be:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1a3c2:	2878      	cmp	r0, #120	; 0x78
   1a3c4:	d8b4      	bhi.n	1a330 <z_cbvprintf_impl+0x410>
   1a3c6:	2862      	cmp	r0, #98	; 0x62
   1a3c8:	d81c      	bhi.n	1a404 <z_cbvprintf_impl+0x4e4>
   1a3ca:	2825      	cmp	r0, #37	; 0x25
   1a3cc:	f43f adb8 	beq.w	19f40 <z_cbvprintf_impl+0x20>
   1a3d0:	2858      	cmp	r0, #88	; 0x58
   1a3d2:	d1ad      	bne.n	1a330 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
   1a3d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1a3d8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1a3dc:	9300      	str	r3, [sp, #0]
   1a3de:	aa12      	add	r2, sp, #72	; 0x48
   1a3e0:	ab0a      	add	r3, sp, #40	; 0x28
   1a3e2:	f7ff fd51 	bl	19e88 <encode_uint>
			if (precision >= 0) {
   1a3e6:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   1a3ea:	4607      	mov	r7, r0
			if (precision >= 0) {
   1a3ec:	f280 8097 	bge.w	1a51e <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
   1a3f0:	2f00      	cmp	r7, #0
   1a3f2:	d09d      	beq.n	1a330 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
   1a3f4:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
   1a3f8:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
   1a3fc:	2e00      	cmp	r6, #0
   1a3fe:	d04e      	beq.n	1a49e <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
   1a400:	3001      	adds	r0, #1
   1a402:	e04c      	b.n	1a49e <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
   1a404:	3863      	subs	r0, #99	; 0x63
   1a406:	2815      	cmp	r0, #21
   1a408:	d892      	bhi.n	1a330 <z_cbvprintf_impl+0x410>
   1a40a:	a201      	add	r2, pc, #4	; (adr r2, 1a410 <z_cbvprintf_impl+0x4f0>)
   1a40c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1a410:	0001a48f 	.word	0x0001a48f
   1a414:	0001a4f5 	.word	0x0001a4f5
   1a418:	0001a331 	.word	0x0001a331
   1a41c:	0001a331 	.word	0x0001a331
   1a420:	0001a331 	.word	0x0001a331
   1a424:	0001a331 	.word	0x0001a331
   1a428:	0001a4f5 	.word	0x0001a4f5
   1a42c:	0001a331 	.word	0x0001a331
   1a430:	0001a331 	.word	0x0001a331
   1a434:	0001a331 	.word	0x0001a331
   1a438:	0001a331 	.word	0x0001a331
   1a43c:	0001a57d 	.word	0x0001a57d
   1a440:	0001a519 	.word	0x0001a519
   1a444:	0001a53f 	.word	0x0001a53f
   1a448:	0001a331 	.word	0x0001a331
   1a44c:	0001a331 	.word	0x0001a331
   1a450:	0001a469 	.word	0x0001a469
   1a454:	0001a331 	.word	0x0001a331
   1a458:	0001a519 	.word	0x0001a519
   1a45c:	0001a331 	.word	0x0001a331
   1a460:	0001a331 	.word	0x0001a331
   1a464:	0001a519 	.word	0x0001a519
			if (precision >= 0) {
   1a468:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
   1a46c:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
   1a46e:	db0a      	blt.n	1a486 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
   1a470:	4659      	mov	r1, fp
   1a472:	4638      	mov	r0, r7
   1a474:	f00e f88e 	bl	28594 <strnlen>
			bpe = bps + len;
   1a478:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
   1a47c:	2f00      	cmp	r7, #0
   1a47e:	f43f af57 	beq.w	1a330 <z_cbvprintf_impl+0x410>
		char sign = 0;
   1a482:	2600      	movs	r6, #0
   1a484:	e00b      	b.n	1a49e <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
   1a486:	4638      	mov	r0, r7
   1a488:	f7fe fdb0 	bl	18fec <strlen>
   1a48c:	e7f4      	b.n	1a478 <z_cbvprintf_impl+0x558>
		char sign = 0;
   1a48e:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
   1a490:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1a492:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
   1a494:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1a498:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
   1a49c:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
   1a49e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a4a2:	f013 0210 	ands.w	r2, r3, #16
   1a4a6:	9205      	str	r2, [sp, #20]
   1a4a8:	f000 8083 	beq.w	1a5b2 <z_cbvprintf_impl+0x692>
			nj_len += 2U;
   1a4ac:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   1a4ae:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   1a4b0:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
   1a4b4:	bf48      	it	mi
   1a4b6:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   1a4b8:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
   1a4ba:	bf48      	it	mi
   1a4bc:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   1a4be:	f1b9 0f00 	cmp.w	r9, #0
   1a4c2:	f340 8090 	ble.w	1a5e6 <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
   1a4c6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   1a4ca:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
   1a4ce:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1a4d2:	0750      	lsls	r0, r2, #29
   1a4d4:	9306      	str	r3, [sp, #24]
   1a4d6:	f100 8086 	bmi.w	1a5e6 <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
   1a4da:	0651      	lsls	r1, r2, #25
   1a4dc:	d579      	bpl.n	1a5d2 <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
   1a4de:	b13e      	cbz	r6, 1a4f0 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   1a4e0:	4630      	mov	r0, r6
   1a4e2:	9903      	ldr	r1, [sp, #12]
   1a4e4:	47d0      	blx	sl
   1a4e6:	2800      	cmp	r0, #0
   1a4e8:	db70      	blt.n	1a5cc <z_cbvprintf_impl+0x6ac>
   1a4ea:	9b06      	ldr	r3, [sp, #24]
   1a4ec:	3501      	adds	r5, #1
   1a4ee:	461e      	mov	r6, r3
					pad = '0';
   1a4f0:	2230      	movs	r2, #48	; 0x30
   1a4f2:	e06f      	b.n	1a5d4 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
   1a4f4:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   1a4f6:	bf5a      	itte	pl
   1a4f8:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   1a4fc:	015e      	lslpl	r6, r3, #5
				sign = '+';
   1a4fe:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
   1a500:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
   1a504:	2b00      	cmp	r3, #0
   1a506:	f6bf af65 	bge.w	1a3d4 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
   1a50a:	4252      	negs	r2, r2
   1a50c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   1a510:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1a512:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1a516:	e75d      	b.n	1a3d4 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
   1a518:	2600      	movs	r6, #0
   1a51a:	e75b      	b.n	1a3d4 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
   1a51c:	2600      	movs	r6, #0
				conv->flag_zero = false;
   1a51e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   1a522:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1a526:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   1a528:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1a52c:	459b      	cmp	fp, r3
				conv->flag_zero = false;
   1a52e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   1a532:	f67f af5d 	bls.w	1a3f0 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
   1a536:	ebab 0303 	sub.w	r3, fp, r3
   1a53a:	9313      	str	r3, [sp, #76]	; 0x4c
   1a53c:	e758      	b.n	1a3f0 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
   1a53e:	9810      	ldr	r0, [sp, #64]	; 0x40
   1a540:	b380      	cbz	r0, 1a5a4 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1a542:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
   1a546:	ab0a      	add	r3, sp, #40	; 0x28
   1a548:	2100      	movs	r1, #0
   1a54a:	f8cd 8000 	str.w	r8, [sp]
   1a54e:	aa12      	add	r2, sp, #72	; 0x48
   1a550:	f7ff fc9a 	bl	19e88 <encode_uint>
				conv->altform_0c = true;
   1a554:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
   1a558:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
   1a55c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1a560:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1a564:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1a568:	4607      	mov	r7, r0
				conv->altform_0c = true;
   1a56a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
   1a56e:	dad5      	bge.n	1a51c <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
   1a570:	2800      	cmp	r0, #0
   1a572:	f43f aedd 	beq.w	1a330 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
   1a576:	eba8 0000 	sub.w	r0, r8, r0
   1a57a:	e782      	b.n	1a482 <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
   1a57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   1a57e:	2907      	cmp	r1, #7
   1a580:	f63f aed6 	bhi.w	1a330 <z_cbvprintf_impl+0x410>
   1a584:	e8df f001 	tbb	[pc, r1]
   1a588:	0c06040c 	.word	0x0c06040c
   1a58c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   1a590:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   1a592:	e6cd      	b.n	1a330 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
   1a594:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   1a596:	e6cb      	b.n	1a330 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
   1a598:	17ea      	asrs	r2, r5, #31
   1a59a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   1a59e:	e6c7      	b.n	1a330 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1a5a0:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   1a5a2:	e6c5      	b.n	1a330 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
   1a5a4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1a664 <z_cbvprintf_impl+0x744>
		char sign = 0;
   1a5a8:	4606      	mov	r6, r0
   1a5aa:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
   1a5ae:	2005      	movs	r0, #5
   1a5b0:	e775      	b.n	1a49e <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
   1a5b2:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   1a5b4:	bf48      	it	mi
   1a5b6:	3001      	addmi	r0, #1
   1a5b8:	e779      	b.n	1a4ae <z_cbvprintf_impl+0x58e>
					OUTC(pad);
   1a5ba:	4610      	mov	r0, r2
   1a5bc:	9307      	str	r3, [sp, #28]
   1a5be:	9206      	str	r2, [sp, #24]
   1a5c0:	9903      	ldr	r1, [sp, #12]
   1a5c2:	47d0      	blx	sl
   1a5c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a5c8:	2800      	cmp	r0, #0
   1a5ca:	da04      	bge.n	1a5d6 <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
   1a5cc:	b017      	add	sp, #92	; 0x5c
   1a5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1a5d2:	2220      	movs	r2, #32
					pad = '0';
   1a5d4:	464b      	mov	r3, r9
				while (width-- > 0) {
   1a5d6:	4619      	mov	r1, r3
   1a5d8:	2900      	cmp	r1, #0
   1a5da:	f103 33ff 	add.w	r3, r3, #4294967295
   1a5de:	dcec      	bgt.n	1a5ba <z_cbvprintf_impl+0x69a>
   1a5e0:	444d      	add	r5, r9
   1a5e2:	4699      	mov	r9, r3
   1a5e4:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
   1a5e6:	b12e      	cbz	r6, 1a5f4 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
   1a5e8:	4630      	mov	r0, r6
   1a5ea:	9903      	ldr	r1, [sp, #12]
   1a5ec:	47d0      	blx	sl
   1a5ee:	2800      	cmp	r0, #0
   1a5f0:	dbec      	blt.n	1a5cc <z_cbvprintf_impl+0x6ac>
   1a5f2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1a5f4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a5f8:	06da      	lsls	r2, r3, #27
   1a5fa:	d401      	bmi.n	1a600 <z_cbvprintf_impl+0x6e0>
   1a5fc:	071b      	lsls	r3, r3, #28
   1a5fe:	d505      	bpl.n	1a60c <z_cbvprintf_impl+0x6ec>
				OUTC('0');
   1a600:	2030      	movs	r0, #48	; 0x30
   1a602:	9903      	ldr	r1, [sp, #12]
   1a604:	47d0      	blx	sl
   1a606:	2800      	cmp	r0, #0
   1a608:	dbe0      	blt.n	1a5cc <z_cbvprintf_impl+0x6ac>
   1a60a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1a60c:	9b05      	ldr	r3, [sp, #20]
   1a60e:	b133      	cbz	r3, 1a61e <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
   1a610:	9903      	ldr	r1, [sp, #12]
   1a612:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1a616:	47d0      	blx	sl
   1a618:	2800      	cmp	r0, #0
   1a61a:	dbd7      	blt.n	1a5cc <z_cbvprintf_impl+0x6ac>
   1a61c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1a61e:	44ab      	add	fp, r5
   1a620:	e005      	b.n	1a62e <z_cbvprintf_impl+0x70e>
				OUTC('0');
   1a622:	2030      	movs	r0, #48	; 0x30
   1a624:	9903      	ldr	r1, [sp, #12]
   1a626:	47d0      	blx	sl
   1a628:	2800      	cmp	r0, #0
   1a62a:	dbcf      	blt.n	1a5cc <z_cbvprintf_impl+0x6ac>
   1a62c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1a62e:	ebab 0305 	sub.w	r3, fp, r5
   1a632:	2b00      	cmp	r3, #0
   1a634:	dcf5      	bgt.n	1a622 <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
   1a636:	4643      	mov	r3, r8
   1a638:	463a      	mov	r2, r7
   1a63a:	4650      	mov	r0, sl
   1a63c:	9903      	ldr	r1, [sp, #12]
   1a63e:	f00b facf 	bl	25be0 <outs>
   1a642:	2800      	cmp	r0, #0
   1a644:	dbc2      	blt.n	1a5cc <z_cbvprintf_impl+0x6ac>
   1a646:	4405      	add	r5, r0
		while (width > 0) {
   1a648:	44a9      	add	r9, r5
   1a64a:	eba9 0305 	sub.w	r3, r9, r5
   1a64e:	2b00      	cmp	r3, #0
   1a650:	f77f ae6e 	ble.w	1a330 <z_cbvprintf_impl+0x410>
			OUTC(' ');
   1a654:	2020      	movs	r0, #32
   1a656:	9903      	ldr	r1, [sp, #12]
   1a658:	47d0      	blx	sl
   1a65a:	2800      	cmp	r0, #0
   1a65c:	dbb6      	blt.n	1a5cc <z_cbvprintf_impl+0x6ac>
   1a65e:	3501      	adds	r5, #1
			--width;
   1a660:	e7f3      	b.n	1a64a <z_cbvprintf_impl+0x72a>
   1a662:	bf00      	nop
   1a664:	00029504 	.word	0x00029504

0001a668 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   1a668:	f04f 0220 	mov.w	r2, #32
   1a66c:	f3ef 8311 	mrs	r3, BASEPRI
   1a670:	f382 8812 	msr	BASEPRI_MAX, r2
   1a674:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1a678:	2101      	movs	r1, #1
   1a67a:	4a04      	ldr	r2, [pc, #16]	; (1a68c <nordicsemi_nrf91_init+0x24>)
   1a67c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   1a680:	f383 8811 	msr	BASEPRI, r3
   1a684:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1a688:	2000      	movs	r0, #0
   1a68a:	4770      	bx	lr
   1a68c:	40039000 	.word	0x40039000

0001a690 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1a690:	b120      	cbz	r0, 1a69c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1a692:	4b03      	ldr	r3, [pc, #12]	; (1a6a0 <arch_busy_wait+0x10>)
   1a694:	0180      	lsls	r0, r0, #6
   1a696:	f043 0301 	orr.w	r3, r3, #1
   1a69a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1a69c:	4770      	bx	lr
   1a69e:	bf00      	nop
   1a6a0:	00028d50 	.word	0x00028d50

0001a6a4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1a6a4:	f005 bff4 	b.w	20690 <SystemInit>

0001a6a8 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   1a6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a6ac:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
   1a6ae:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
   1a6b0:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1a6b4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1a708 <activate_foreach_backend+0x60>
	while (mask_cpy) {
   1a6b8:	b914      	cbnz	r4, 1a6c0 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   1a6ba:	4638      	mov	r0, r7
   1a6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   1a6c0:	fa94 f5a4 	rbit	r5, r4
   1a6c4:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   1a6c8:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1a6cc:	012e      	lsls	r6, r5, #4
   1a6ce:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   1a6d2:	ea6f 0a03 	mvn.w	sl, r3
   1a6d6:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1a6da:	7b2b      	ldrb	r3, [r5, #12]
   1a6dc:	2b00      	cmp	r3, #0
   1a6de:	d0eb      	beq.n	1a6b8 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   1a6e0:	f858 3006 	ldr.w	r3, [r8, r6]
   1a6e4:	691b      	ldr	r3, [r3, #16]
   1a6e6:	b94b      	cbnz	r3, 1a6fc <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   1a6e8:	4446      	add	r6, r8
			log_backend_enable(backend,
   1a6ea:	6873      	ldr	r3, [r6, #4]
   1a6ec:	2204      	movs	r2, #4
   1a6ee:	4628      	mov	r0, r5
   1a6f0:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   1a6f2:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   1a6f6:	f000 fa49 	bl	1ab8c <log_backend_enable>
   1a6fa:	e7dd      	b.n	1a6b8 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   1a6fc:	4628      	mov	r0, r5
   1a6fe:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1a700:	2800      	cmp	r0, #0
   1a702:	d1d9      	bne.n	1a6b8 <activate_foreach_backend+0x10>
   1a704:	e7f0      	b.n	1a6e8 <activate_foreach_backend+0x40>
   1a706:	bf00      	nop
   1a708:	00028d28 	.word	0x00028d28

0001a70c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1a70c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1a70e:	2200      	movs	r2, #0
{
   1a710:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   1a712:	490f      	ldr	r1, [pc, #60]	; (1a750 <enable_logger+0x44>)
   1a714:	480f      	ldr	r0, [pc, #60]	; (1a754 <enable_logger+0x48>)
   1a716:	f00d fdf2 	bl	282fe <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a71a:	2200      	movs	r2, #0
   1a71c:	2300      	movs	r3, #0
   1a71e:	2400      	movs	r4, #0
   1a720:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a724:	230e      	movs	r3, #14
   1a726:	4d0c      	ldr	r5, [pc, #48]	; (1a758 <enable_logger+0x4c>)
   1a728:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1a72c:	f44f 7240 	mov.w	r2, #768	; 0x300
   1a730:	4628      	mov	r0, r5
   1a732:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1a736:	4b09      	ldr	r3, [pc, #36]	; (1a75c <enable_logger+0x50>)
   1a738:	4909      	ldr	r1, [pc, #36]	; (1a760 <enable_logger+0x54>)
   1a73a:	9400      	str	r4, [sp, #0]
   1a73c:	f009 f95e 	bl	239fc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1a740:	4908      	ldr	r1, [pc, #32]	; (1a764 <enable_logger+0x58>)
   1a742:	4628      	mov	r0, r5
   1a744:	f00d fb80 	bl	27e48 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   1a748:	4620      	mov	r0, r4
   1a74a:	b009      	add	sp, #36	; 0x24
   1a74c:	bd30      	pop	{r4, r5, pc}
   1a74e:	bf00      	nop
   1a750:	0001a769 	.word	0x0001a769
   1a754:	2000ce00 	.word	0x2000ce00
   1a758:	2000c970 	.word	0x2000c970
   1a75c:	0001aa39 	.word	0x0001aa39
   1a760:	2000ddf8 	.word	0x2000ddf8
   1a764:	00029509 	.word	0x00029509

0001a768 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1a768:	4801      	ldr	r0, [pc, #4]	; (1a770 <log_process_thread_timer_expiry_fn+0x8>)
   1a76a:	f009 bad5 	b.w	23d18 <z_impl_k_sem_give>
   1a76e:	bf00      	nop
   1a770:	2000c8dc 	.word	0x2000c8dc

0001a774 <z_log_init>:
{
   1a774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a778:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   1a77a:	481f      	ldr	r0, [pc, #124]	; (1a7f8 <z_log_init+0x84>)
{
   1a77c:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   1a77e:	f00b fc68 	bl	26052 <atomic_inc>
   1a782:	4606      	mov	r6, r0
   1a784:	2800      	cmp	r0, #0
   1a786:	d030      	beq.n	1a7ea <z_log_init+0x76>
	uint32_t mask = 0;
   1a788:	2500      	movs	r5, #0
}
   1a78a:	4628      	mov	r0, r5
   1a78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   1a790:	7b23      	ldrb	r3, [r4, #12]
   1a792:	b173      	cbz	r3, 1a7b2 <z_log_init+0x3e>
	if (backend->api->init) {
   1a794:	6823      	ldr	r3, [r4, #0]
   1a796:	68db      	ldr	r3, [r3, #12]
   1a798:	b10b      	cbz	r3, 1a79e <z_log_init+0x2a>
		backend->api->init(backend);
   1a79a:	4620      	mov	r0, r4
   1a79c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   1a79e:	6823      	ldr	r3, [r4, #0]
   1a7a0:	691b      	ldr	r3, [r3, #16]
   1a7a2:	b9d3      	cbnz	r3, 1a7da <z_log_init+0x66>
				log_backend_enable(backend,
   1a7a4:	6863      	ldr	r3, [r4, #4]
   1a7a6:	2204      	movs	r2, #4
   1a7a8:	4620      	mov	r0, r4
   1a7aa:	6819      	ldr	r1, [r3, #0]
   1a7ac:	f000 f9ee 	bl	1ab8c <log_backend_enable>
			i++;
   1a7b0:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1a7b2:	3410      	adds	r4, #16
   1a7b4:	454c      	cmp	r4, r9
   1a7b6:	d3eb      	bcc.n	1a790 <z_log_init+0x1c>
	if (blocking) {
   1a7b8:	f1b8 0f00 	cmp.w	r8, #0
   1a7bc:	d0e5      	beq.n	1a78a <z_log_init+0x16>
		while (mask) {
   1a7be:	2d00      	cmp	r5, #0
   1a7c0:	d0e2      	beq.n	1a788 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   1a7c2:	4628      	mov	r0, r5
   1a7c4:	f7ff ff70 	bl	1a6a8 <activate_foreach_backend>
   1a7c8:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   1a7ca:	2f00      	cmp	r7, #0
   1a7cc:	d0f7      	beq.n	1a7be <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   1a7ce:	2100      	movs	r1, #0
   1a7d0:	f44f 70a4 	mov.w	r0, #328	; 0x148
   1a7d4:	f009 feea 	bl	245ac <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a7d8:	e7f1      	b.n	1a7be <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   1a7da:	4620      	mov	r0, r4
   1a7dc:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   1a7de:	2800      	cmp	r0, #0
   1a7e0:	d0e0      	beq.n	1a7a4 <z_log_init+0x30>
				mask |= BIT(i);
   1a7e2:	fa0a f306 	lsl.w	r3, sl, r6
   1a7e6:	431d      	orrs	r5, r3
   1a7e8:	e7e2      	b.n	1a7b0 <z_log_init+0x3c>
	uint32_t mask = 0;
   1a7ea:	4605      	mov	r5, r0
				mask |= BIT(i);
   1a7ec:	f04f 0a01 	mov.w	sl, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1a7f0:	4c02      	ldr	r4, [pc, #8]	; (1a7fc <z_log_init+0x88>)
   1a7f2:	f8df 900c 	ldr.w	r9, [pc, #12]	; 1a800 <z_log_init+0x8c>
   1a7f6:	e7dd      	b.n	1a7b4 <z_log_init+0x40>
   1a7f8:	2000d0e4 	.word	0x2000d0e4
   1a7fc:	00028d28 	.word	0x00028d28
   1a800:	00028d38 	.word	0x00028d38

0001a804 <log_format_func_t_get>:
}
   1a804:	4b01      	ldr	r3, [pc, #4]	; (1a80c <log_format_func_t_get+0x8>)
   1a806:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a80a:	4770      	bx	lr
   1a80c:	00028d80 	.word	0x00028d80

0001a810 <log_set_timestamp_func>:
{
   1a810:	b508      	push	{r3, lr}
   1a812:	4603      	mov	r3, r0
   1a814:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   1a816:	b12b      	cbz	r3, 1a824 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   1a818:	4a04      	ldr	r2, [pc, #16]	; (1a82c <log_set_timestamp_func+0x1c>)
   1a81a:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   1a81c:	f000 fc3e 	bl	1b09c <log_output_timestamp_freq_set>
	return 0;
   1a820:	2000      	movs	r0, #0
}
   1a822:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1a824:	f06f 0015 	mvn.w	r0, #21
   1a828:	e7fb      	b.n	1a822 <log_set_timestamp_func+0x12>
   1a82a:	bf00      	nop
   1a82c:	2000c588 	.word	0x2000c588

0001a830 <z_log_notify_backend_enabled>:
{
   1a830:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   1a832:	4c04      	ldr	r4, [pc, #16]	; (1a844 <z_log_notify_backend_enabled+0x14>)
   1a834:	7823      	ldrb	r3, [r4, #0]
   1a836:	b913      	cbnz	r3, 1a83e <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   1a838:	4803      	ldr	r0, [pc, #12]	; (1a848 <z_log_notify_backend_enabled+0x18>)
   1a83a:	f009 fa6d 	bl	23d18 <z_impl_k_sem_give>
	backend_attached = true;
   1a83e:	2301      	movs	r3, #1
   1a840:	7023      	strb	r3, [r4, #0]
}
   1a842:	bd10      	pop	{r4, pc}
   1a844:	2000d89a 	.word	0x2000d89a
   1a848:	2000c8dc 	.word	0x2000c8dc

0001a84c <z_log_dropped>:
{
   1a84c:	b510      	push	{r4, lr}
   1a84e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   1a850:	4806      	ldr	r0, [pc, #24]	; (1a86c <z_log_dropped+0x20>)
   1a852:	f00b fbfe 	bl	26052 <atomic_inc>
	if (buffered) {
   1a856:	b13c      	cbz	r4, 1a868 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a858:	4b05      	ldr	r3, [pc, #20]	; (1a870 <z_log_dropped+0x24>)
   1a85a:	e8d3 1fef 	ldaex	r1, [r3]
   1a85e:	3901      	subs	r1, #1
   1a860:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1a864:	2a00      	cmp	r2, #0
   1a866:	d1f8      	bne.n	1a85a <z_log_dropped+0xe>
}
   1a868:	bd10      	pop	{r4, pc}
   1a86a:	bf00      	nop
   1a86c:	2000d0dc 	.word	0x2000d0dc
   1a870:	2000d0e0 	.word	0x2000d0e0

0001a874 <z_log_dropped_read_and_clear>:
}
   1a874:	2000      	movs	r0, #0
   1a876:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a878:	4b03      	ldr	r3, [pc, #12]	; (1a888 <z_log_dropped_read_and_clear+0x14>)
   1a87a:	e8d3 0fef 	ldaex	r0, [r3]
   1a87e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1a882:	2a00      	cmp	r2, #0
   1a884:	d1f9      	bne.n	1a87a <z_log_dropped_read_and_clear+0x6>
   1a886:	4770      	bx	lr
   1a888:	2000d0dc 	.word	0x2000d0dc

0001a88c <dropped_notify>:
{
   1a88c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   1a88e:	f7ff fff1 	bl	1a874 <z_log_dropped_read_and_clear>
   1a892:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1a894:	4c07      	ldr	r4, [pc, #28]	; (1a8b4 <dropped_notify+0x28>)
   1a896:	4e08      	ldr	r6, [pc, #32]	; (1a8b8 <dropped_notify+0x2c>)
   1a898:	42b4      	cmp	r4, r6
   1a89a:	d300      	bcc.n	1a89e <dropped_notify+0x12>
}
   1a89c:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1a89e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1a8a0:	795b      	ldrb	r3, [r3, #5]
   1a8a2:	b12b      	cbz	r3, 1a8b0 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   1a8a4:	6823      	ldr	r3, [r4, #0]
   1a8a6:	685b      	ldr	r3, [r3, #4]
   1a8a8:	b113      	cbz	r3, 1a8b0 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   1a8aa:	4629      	mov	r1, r5
   1a8ac:	4620      	mov	r0, r4
   1a8ae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1a8b0:	3410      	adds	r4, #16
   1a8b2:	e7f1      	b.n	1a898 <dropped_notify+0xc>
   1a8b4:	00028d28 	.word	0x00028d28
   1a8b8:	00028d38 	.word	0x00028d38

0001a8bc <z_log_msg_init>:
{
   1a8bc:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   1a8be:	4c04      	ldr	r4, [pc, #16]	; (1a8d0 <z_log_msg_init+0x14>)
   1a8c0:	4904      	ldr	r1, [pc, #16]	; (1a8d4 <z_log_msg_init+0x18>)
   1a8c2:	4620      	mov	r0, r4
   1a8c4:	f00b fa50 	bl	25d68 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   1a8c8:	4b03      	ldr	r3, [pc, #12]	; (1a8d8 <z_log_msg_init+0x1c>)
   1a8ca:	601c      	str	r4, [r3, #0]
}
   1a8cc:	bd10      	pop	{r4, pc}
   1a8ce:	bf00      	nop
   1a8d0:	2000c7d0 	.word	0x2000c7d0
   1a8d4:	00028d6c 	.word	0x00028d6c
   1a8d8:	2000d0d4 	.word	0x2000d0d4

0001a8dc <log_core_init>:
{
   1a8dc:	b508      	push	{r3, lr}
	panic_mode = false;
   1a8de:	2300      	movs	r3, #0
   1a8e0:	4a06      	ldr	r2, [pc, #24]	; (1a8fc <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
   1a8e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
   1a8e6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   1a8e8:	4a05      	ldr	r2, [pc, #20]	; (1a900 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   1a8ea:	4806      	ldr	r0, [pc, #24]	; (1a904 <log_core_init+0x28>)
	dropped_cnt = 0;
   1a8ec:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   1a8ee:	f7ff ff8f 	bl	1a810 <log_set_timestamp_func>
}
   1a8f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   1a8f6:	f7ff bfe1 	b.w	1a8bc <z_log_msg_init>
   1a8fa:	bf00      	nop
   1a8fc:	2000d89b 	.word	0x2000d89b
   1a900:	2000d0dc 	.word	0x2000d0dc
   1a904:	0002604f 	.word	0x0002604f

0001a908 <z_log_msg_alloc>:
{
   1a908:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   1a90a:	2200      	movs	r2, #0
   1a90c:	2300      	movs	r3, #0
   1a90e:	4801      	ldr	r0, [pc, #4]	; (1a914 <z_log_msg_alloc+0xc>)
   1a910:	f00b ba4b 	b.w	25daa <mpsc_pbuf_alloc>
   1a914:	2000c7d0 	.word	0x2000c7d0

0001a918 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   1a918:	4801      	ldr	r0, [pc, #4]	; (1a920 <z_log_msg_local_claim+0x8>)
   1a91a:	f00b bae4 	b.w	25ee6 <mpsc_pbuf_claim>
   1a91e:	bf00      	nop
   1a920:	2000c7d0 	.word	0x2000c7d0

0001a924 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   1a924:	4b02      	ldr	r3, [pc, #8]	; (1a930 <z_log_msg_free+0xc>)
{
   1a926:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   1a928:	6818      	ldr	r0, [r3, #0]
   1a92a:	f00b bb2c 	b.w	25f86 <mpsc_pbuf_free>
   1a92e:	bf00      	nop
   1a930:	2000d0d4 	.word	0x2000d0d4

0001a934 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   1a934:	4801      	ldr	r0, [pc, #4]	; (1a93c <z_log_msg_pending+0x8>)
   1a936:	f00b bb5a 	b.w	25fee <mpsc_pbuf_is_pending>
   1a93a:	bf00      	nop
   1a93c:	2000c7d0 	.word	0x2000c7d0

0001a940 <z_impl_log_process>:
{
   1a940:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   1a942:	4b26      	ldr	r3, [pc, #152]	; (1a9dc <z_impl_log_process+0x9c>)
   1a944:	7818      	ldrb	r0, [r3, #0]
   1a946:	2800      	cmp	r0, #0
   1a948:	d047      	beq.n	1a9da <z_impl_log_process+0x9a>
	return z_log_msg_local_claim();
   1a94a:	f7ff ffe5 	bl	1a918 <z_log_msg_local_claim>
	if (msg) {
   1a94e:	4605      	mov	r5, r0
   1a950:	b170      	cbz	r0, 1a970 <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a952:	4b23      	ldr	r3, [pc, #140]	; (1a9e0 <z_impl_log_process+0xa0>)
   1a954:	e8d3 1fef 	ldaex	r1, [r3]
   1a958:	3901      	subs	r1, #1
   1a95a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1a95e:	2a00      	cmp	r2, #0
   1a960:	d1f8      	bne.n	1a954 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1a962:	4c20      	ldr	r4, [pc, #128]	; (1a9e4 <z_impl_log_process+0xa4>)
   1a964:	4e20      	ldr	r6, [pc, #128]	; (1a9e8 <z_impl_log_process+0xa8>)
   1a966:	42b4      	cmp	r4, r6
   1a968:	d32d      	bcc.n	1a9c6 <z_impl_log_process+0x86>
		z_log_msg_free(msg);
   1a96a:	4628      	mov	r0, r5
   1a96c:	f7ff ffda 	bl	1a924 <z_log_msg_free>
	return dropped_cnt > 0;
   1a970:	4b1e      	ldr	r3, [pc, #120]	; (1a9ec <z_impl_log_process+0xac>)
   1a972:	4c1f      	ldr	r4, [pc, #124]	; (1a9f0 <z_impl_log_process+0xb0>)
		if ((dropped_pend || unordered_pend) &&
   1a974:	681b      	ldr	r3, [r3, #0]
   1a976:	2b00      	cmp	r3, #0
   1a978:	dd19      	ble.n	1a9ae <z_impl_log_process+0x6e>
	return z_impl_k_uptime_ticks();
   1a97a:	f00d fc98 	bl	282ae <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1a97e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a982:	fba0 0302 	umull	r0, r3, r0, r2
   1a986:	fb02 3101 	mla	r1, r2, r1, r3
   1a98a:	0bc3      	lsrs	r3, r0, #15
   1a98c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   1a990:	e9d4 2000 	ldrd	r2, r0, [r4]
   1a994:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
   1a996:	f240 32e9 	movw	r2, #1001	; 0x3e9
   1a99a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   1a99e:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   1a9a2:	4293      	cmp	r3, r2
   1a9a4:	f171 0100 	sbcs.w	r1, r1, #0
   1a9a8:	d301      	bcc.n	1a9ae <z_impl_log_process+0x6e>
				dropped_notify();
   1a9aa:	f7ff ff6f 	bl	1a88c <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   1a9ae:	e9d4 3200 	ldrd	r3, r2, [r4]
   1a9b2:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   1a9b6:	f142 0200 	adc.w	r2, r2, #0
   1a9ba:	e9c4 3200 	strd	r3, r2, [r4]
}
   1a9be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   1a9c2:	f7ff bfb7 	b.w	1a934 <z_log_msg_pending>
	return backend->cb->active;
   1a9c6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   1a9c8:	795b      	ldrb	r3, [r3, #5]
   1a9ca:	b123      	cbz	r3, 1a9d6 <z_impl_log_process+0x96>
	backend->api->process(backend, msg);
   1a9cc:	6823      	ldr	r3, [r4, #0]
   1a9ce:	4629      	mov	r1, r5
   1a9d0:	4620      	mov	r0, r4
   1a9d2:	681b      	ldr	r3, [r3, #0]
   1a9d4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1a9d6:	3410      	adds	r4, #16
   1a9d8:	e7c5      	b.n	1a966 <z_impl_log_process+0x26>
}
   1a9da:	bd70      	pop	{r4, r5, r6, pc}
   1a9dc:	2000d89a 	.word	0x2000d89a
   1a9e0:	2000d0e0 	.word	0x2000d0e0
   1a9e4:	00028d28 	.word	0x00028d28
   1a9e8:	00028d38 	.word	0x00028d38
   1a9ec:	2000d0dc 	.word	0x2000d0dc
   1a9f0:	2000cdf8 	.word	0x2000cdf8

0001a9f4 <z_impl_log_panic>:
{
   1a9f4:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   1a9f6:	4d0d      	ldr	r5, [pc, #52]	; (1aa2c <z_impl_log_panic+0x38>)
   1a9f8:	7829      	ldrb	r1, [r5, #0]
   1a9fa:	b961      	cbnz	r1, 1aa16 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   1a9fc:	2001      	movs	r0, #1
   1a9fe:	f7ff feb9 	bl	1a774 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1aa02:	4c0b      	ldr	r4, [pc, #44]	; (1aa30 <z_impl_log_panic+0x3c>)
   1aa04:	4e0b      	ldr	r6, [pc, #44]	; (1aa34 <z_impl_log_panic+0x40>)
   1aa06:	42b4      	cmp	r4, r6
   1aa08:	d306      	bcc.n	1aa18 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   1aa0a:	f7ff ff99 	bl	1a940 <z_impl_log_process>
		while (log_process() == true) {
   1aa0e:	2800      	cmp	r0, #0
   1aa10:	d1fb      	bne.n	1aa0a <z_impl_log_panic+0x16>
	panic_mode = true;
   1aa12:	2301      	movs	r3, #1
   1aa14:	702b      	strb	r3, [r5, #0]
}
   1aa16:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   1aa18:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1aa1a:	795b      	ldrb	r3, [r3, #5]
   1aa1c:	b11b      	cbz	r3, 1aa26 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   1aa1e:	6823      	ldr	r3, [r4, #0]
   1aa20:	4620      	mov	r0, r4
   1aa22:	689b      	ldr	r3, [r3, #8]
   1aa24:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1aa26:	3410      	adds	r4, #16
   1aa28:	e7ed      	b.n	1aa06 <z_impl_log_panic+0x12>
   1aa2a:	bf00      	nop
   1aa2c:	2000d89b 	.word	0x2000d89b
   1aa30:	00028d28 	.word	0x00028d28
   1aa34:	00028d38 	.word	0x00028d38

0001aa38 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   1aa38:	2100      	movs	r1, #0
{
   1aa3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   1aa3e:	4608      	mov	r0, r1
   1aa40:	f7ff fe98 	bl	1a774 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1aa44:	4604      	mov	r4, r0
   1aa46:	b348      	cbz	r0, 1aa9c <log_process_thread_func+0x64>
   1aa48:	f240 6867 	movw	r8, #1639	; 0x667
   1aa4c:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   1aa50:	f009 fdc6 	bl	245e0 <z_impl_z_current_get>
	proc_tid = process_tid;
   1aa54:	4b1a      	ldr	r3, [pc, #104]	; (1aac0 <log_process_thread_func+0x88>)
   1aa56:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1aa58:	b130      	cbz	r0, 1aa68 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   1aa5a:	4b1a      	ldr	r3, [pc, #104]	; (1aac4 <log_process_thread_func+0x8c>)
	    process_tid &&
   1aa5c:	681b      	ldr	r3, [r3, #0]
   1aa5e:	2b09      	cmp	r3, #9
   1aa60:	dd02      	ble.n	1aa68 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   1aa62:	4819      	ldr	r0, [pc, #100]	; (1aac8 <log_process_thread_func+0x90>)
   1aa64:	f009 f958 	bl	23d18 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1aa68:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1aa6a:	4f18      	ldr	r7, [pc, #96]	; (1aacc <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   1aa6c:	f8df a058 	ldr.w	sl, [pc, #88]	; 1aac8 <log_process_thread_func+0x90>
		if (activate_mask) {
   1aa70:	b144      	cbz	r4, 1aa84 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   1aa72:	4620      	mov	r0, r4
   1aa74:	f7ff fe18 	bl	1a6a8 <activate_foreach_backend>
			if (!activate_mask) {
   1aa78:	4604      	mov	r4, r0
   1aa7a:	b918      	cbnz	r0, 1aa84 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   1aa7c:	f04f 38ff 	mov.w	r8, #4294967295
   1aa80:	f04f 39ff 	mov.w	r9, #4294967295
   1aa84:	f7ff ff5c 	bl	1a940 <z_impl_log_process>
		if (log_process() == false) {
   1aa88:	4606      	mov	r6, r0
   1aa8a:	b928      	cbnz	r0, 1aa98 <log_process_thread_func+0x60>
			if (processed_any) {
   1aa8c:	b9b5      	cbnz	r5, 1aabc <log_process_thread_func+0x84>
   1aa8e:	4642      	mov	r2, r8
   1aa90:	464b      	mov	r3, r9
   1aa92:	4650      	mov	r0, sl
   1aa94:	f009 f966 	bl	23d64 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1aa98:	4635      	mov	r5, r6
   1aa9a:	e7e9      	b.n	1aa70 <log_process_thread_func+0x38>
   1aa9c:	f04f 38ff 	mov.w	r8, #4294967295
   1aaa0:	f04f 39ff 	mov.w	r9, #4294967295
   1aaa4:	e7d4      	b.n	1aa50 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   1aaa6:	682b      	ldr	r3, [r5, #0]
   1aaa8:	699b      	ldr	r3, [r3, #24]
   1aaaa:	b11b      	cbz	r3, 1aab4 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   1aaac:	2200      	movs	r2, #0
   1aaae:	4628      	mov	r0, r5
   1aab0:	4611      	mov	r1, r2
   1aab2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1aab4:	3510      	adds	r5, #16
   1aab6:	42bd      	cmp	r5, r7
   1aab8:	d3f5      	bcc.n	1aaa6 <log_process_thread_func+0x6e>
   1aaba:	e7e8      	b.n	1aa8e <log_process_thread_func+0x56>
   1aabc:	4d04      	ldr	r5, [pc, #16]	; (1aad0 <log_process_thread_func+0x98>)
   1aabe:	e7fa      	b.n	1aab6 <log_process_thread_func+0x7e>
   1aac0:	2000d0d8 	.word	0x2000d0d8
   1aac4:	2000d0e0 	.word	0x2000d0e0
   1aac8:	2000c8dc 	.word	0x2000c8dc
   1aacc:	00028d38 	.word	0x00028d38
   1aad0:	00028d28 	.word	0x00028d28

0001aad4 <z_log_msg_post_finalize>:
{
   1aad4:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   1aad6:	4818      	ldr	r0, [pc, #96]	; (1ab38 <z_log_msg_post_finalize+0x64>)
   1aad8:	f00b fabb 	bl	26052 <atomic_inc>
	if (panic_mode) {
   1aadc:	4b17      	ldr	r3, [pc, #92]	; (1ab3c <z_log_msg_post_finalize+0x68>)
   1aade:	781b      	ldrb	r3, [r3, #0]
   1aae0:	b17b      	cbz	r3, 1ab02 <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
   1aae2:	f04f 0320 	mov.w	r3, #32
   1aae6:	f3ef 8411 	mrs	r4, BASEPRI
   1aaea:	f383 8812 	msr	BASEPRI_MAX, r3
   1aaee:	f3bf 8f6f 	isb	sy
   1aaf2:	f7ff ff25 	bl	1a940 <z_impl_log_process>
	__asm__ volatile(
   1aaf6:	f384 8811 	msr	BASEPRI, r4
   1aafa:	f3bf 8f6f 	isb	sy
}
   1aafe:	b002      	add	sp, #8
   1ab00:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   1ab02:	4b0f      	ldr	r3, [pc, #60]	; (1ab40 <z_log_msg_post_finalize+0x6c>)
   1ab04:	681b      	ldr	r3, [r3, #0]
   1ab06:	2b00      	cmp	r3, #0
   1ab08:	d0f9      	beq.n	1aafe <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   1ab0a:	b950      	cbnz	r0, 1ab22 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   1ab0c:	2200      	movs	r2, #0
   1ab0e:	2300      	movs	r3, #0
   1ab10:	480c      	ldr	r0, [pc, #48]	; (1ab44 <z_log_msg_post_finalize+0x70>)
   1ab12:	e9cd 2300 	strd	r2, r3, [sp]
   1ab16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1ab1a:	2300      	movs	r3, #0
   1ab1c:	f009 ff9e 	bl	24a5c <z_impl_k_timer_start>
   1ab20:	e7ed      	b.n	1aafe <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1ab22:	280a      	cmp	r0, #10
   1ab24:	d1eb      	bne.n	1aafe <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   1ab26:	4807      	ldr	r0, [pc, #28]	; (1ab44 <z_log_msg_post_finalize+0x70>)
   1ab28:	f00d fbf5 	bl	28316 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1ab2c:	4806      	ldr	r0, [pc, #24]	; (1ab48 <z_log_msg_post_finalize+0x74>)
}
   1ab2e:	b002      	add	sp, #8
   1ab30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ab34:	f009 b8f0 	b.w	23d18 <z_impl_k_sem_give>
   1ab38:	2000d0e0 	.word	0x2000d0e0
   1ab3c:	2000d89b 	.word	0x2000d89b
   1ab40:	2000d0d8 	.word	0x2000d0d8
   1ab44:	2000ce00 	.word	0x2000ce00
   1ab48:	2000c8dc 	.word	0x2000c8dc

0001ab4c <z_log_msg_commit>:
{
   1ab4c:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   1ab4e:	4b06      	ldr	r3, [pc, #24]	; (1ab68 <z_log_msg_commit+0x1c>)
{
   1ab50:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1ab52:	681b      	ldr	r3, [r3, #0]
   1ab54:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   1ab56:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   1ab58:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   1ab5a:	4804      	ldr	r0, [pc, #16]	; (1ab6c <z_log_msg_commit+0x20>)
   1ab5c:	f00b f9a3 	bl	25ea6 <mpsc_pbuf_commit>
}
   1ab60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   1ab64:	f7ff bfb6 	b.w	1aad4 <z_log_msg_post_finalize>
   1ab68:	2000c588 	.word	0x2000c588
   1ab6c:	2000c7d0 	.word	0x2000c7d0

0001ab70 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   1ab70:	4a04      	ldr	r2, [pc, #16]	; (1ab84 <log_source_name_get+0x14>)
   1ab72:	4b05      	ldr	r3, [pc, #20]	; (1ab88 <log_source_name_get+0x18>)
   1ab74:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   1ab76:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   1ab7a:	bf34      	ite	cc
   1ab7c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   1ab80:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   1ab82:	4770      	bx	lr
   1ab84:	00028bf0 	.word	0x00028bf0
   1ab88:	00028d28 	.word	0x00028d28

0001ab8c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1ab8c:	4b08      	ldr	r3, [pc, #32]	; (1abb0 <log_backend_enable+0x24>)
{
   1ab8e:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   1ab90:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
   1ab92:	6844      	ldr	r4, [r0, #4]
   1ab94:	111b      	asrs	r3, r3, #4
   1ab96:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   1ab98:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   1ab9a:	6843      	ldr	r3, [r0, #4]
   1ab9c:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
   1ab9e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   1aba0:	6843      	ldr	r3, [r0, #4]
   1aba2:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   1aba4:	6843      	ldr	r3, [r0, #4]
   1aba6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   1aba8:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
   1abaa:	f7ff be41 	b.w	1a830 <z_log_notify_backend_enabled>
   1abae:	bf00      	nop
   1abb0:	00028d28 	.word	0x00028d28

0001abb4 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   1abb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1abb8:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   1abbc:	b08f      	sub	sp, #60	; 0x3c
   1abbe:	f3c1 2649 	ubfx	r6, r1, #9, #10
   1abc2:	460d      	mov	r5, r1
   1abc4:	4690      	mov	r8, r2
   1abc6:	4699      	mov	r9, r3
   1abc8:	9005      	str	r0, [sp, #20]
   1abca:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   1abcc:	2e00      	cmp	r6, #0
   1abce:	d03c      	beq.n	1ac4a <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
   1abd0:	f04f 0b04 	mov.w	fp, #4
   1abd4:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
   1abd8:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
   1abda:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   1abdc:	4631      	mov	r1, r6
   1abde:	ab0b      	add	r3, sp, #44	; 0x2c
   1abe0:	4640      	mov	r0, r8
   1abe2:	f8cd b008 	str.w	fp, [sp, #8]
   1abe6:	9701      	str	r7, [sp, #4]
   1abe8:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
   1abec:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
   1abf0:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   1abf2:	9607      	str	r6, [sp, #28]
   1abf4:	f7fe fdc2 	bl	1977c <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   1abf8:	f3c0 0309 	ubfx	r3, r0, #0, #10
   1abfc:	1918      	adds	r0, r3, r4
   1abfe:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1ac02:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   1ac04:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1ac06:	f363 2552 	bfi	r5, r3, #9, #10
   1ac0a:	9306      	str	r3, [sp, #24]
   1ac0c:	f7ff fe7c 	bl	1a908 <z_log_msg_alloc>
		if (msg) {
   1ac10:	4604      	mov	r4, r0
   1ac12:	b178      	cbz	r0, 1ac34 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
   1ac14:	2200      	movs	r2, #0
   1ac16:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   1ac18:	3010      	adds	r0, #16
   1ac1a:	900b      	str	r0, [sp, #44]	; 0x2c
   1ac1c:	930c      	str	r3, [sp, #48]	; 0x30
   1ac1e:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   1ac20:	4640      	mov	r0, r8
   1ac22:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   1ac26:	4a0c      	ldr	r2, [pc, #48]	; (1ac58 <z_impl_z_log_msg_static_create+0xa4>)
   1ac28:	9907      	ldr	r1, [sp, #28]
   1ac2a:	f8cd a000 	str.w	sl, [sp]
   1ac2e:	ab0b      	add	r3, sp, #44	; 0x2c
   1ac30:	f7fe fda4 	bl	1977c <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   1ac34:	f366 2552 	bfi	r5, r6, #9, #10
   1ac38:	464b      	mov	r3, r9
   1ac3a:	462a      	mov	r2, r5
   1ac3c:	4620      	mov	r0, r4
   1ac3e:	9905      	ldr	r1, [sp, #20]
}
   1ac40:	b00f      	add	sp, #60	; 0x3c
   1ac42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   1ac46:	f00b ba36 	b.w	260b6 <z_log_msg_finalize>
   1ac4a:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1ac4e:	0880      	lsrs	r0, r0, #2
   1ac50:	f7ff fe5a 	bl	1a908 <z_log_msg_alloc>
   1ac54:	4604      	mov	r4, r0
   1ac56:	e7ed      	b.n	1ac34 <z_impl_z_log_msg_static_create+0x80>
   1ac58:	0002608b 	.word	0x0002608b

0001ac5c <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   1ac5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac60:	b087      	sub	sp, #28
   1ac62:	4604      	mov	r4, r0
   1ac64:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   1ac68:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   1ac6c:	460f      	mov	r7, r1
   1ac6e:	4693      	mov	fp, r2
   1ac70:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   1ac72:	b3b6      	cbz	r6, 1ace2 <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   1ac74:	2110      	movs	r1, #16
   1ac76:	4633      	mov	r3, r6
   1ac78:	4652      	mov	r2, sl
   1ac7a:	2000      	movs	r0, #0
   1ac7c:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
   1ac80:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   1ac84:	f7fe fba6 	bl	193d4 <cbvprintf_package>
   1ac88:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   1ac8a:	4b17      	ldr	r3, [pc, #92]	; (1ace8 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
   1ac8c:	f004 0407 	and.w	r4, r4, #7
   1ac90:	f00b 0b07 	and.w	fp, fp, #7
   1ac94:	00e4      	lsls	r4, r4, #3
   1ac96:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1ac9a:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
   1ac9e:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
   1aca2:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1aca4:	4408      	add	r0, r1
	struct log_msg_desc desc =
   1aca6:	4b11      	ldr	r3, [pc, #68]	; (1acec <z_impl_z_log_msg_runtime_vcreate+0x90>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1aca8:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   1acac:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   1acb0:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   1acb2:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1acb4:	9103      	str	r1, [sp, #12]
		msg = z_log_msg_alloc(msg_wlen);
   1acb6:	f7ff fe27 	bl	1a908 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   1acba:	4605      	mov	r5, r0
   1acbc:	b140      	cbz	r0, 1acd0 <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   1acbe:	b13e      	cbz	r6, 1acd0 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   1acc0:	4633      	mov	r3, r6
   1acc2:	4652      	mov	r2, sl
   1acc4:	9903      	ldr	r1, [sp, #12]
   1acc6:	f8cd 9000 	str.w	r9, [sp]
   1acca:	3010      	adds	r0, #16
   1accc:	f7fe fb82 	bl	193d4 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   1acd0:	4643      	mov	r3, r8
   1acd2:	4622      	mov	r2, r4
   1acd4:	4639      	mov	r1, r7
   1acd6:	4628      	mov	r0, r5
	}
}
   1acd8:	b007      	add	sp, #28
   1acda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   1acde:	f00b b9ea 	b.w	260b6 <z_log_msg_finalize>
		plen = 0;
   1ace2:	4631      	mov	r1, r6
   1ace4:	e7d1      	b.n	1ac8a <z_impl_z_log_msg_runtime_vcreate+0x2e>
   1ace6:	bf00      	nop
   1ace8:	0007fe00 	.word	0x0007fe00
   1acec:	7ff80000 	.word	0x7ff80000

0001acf0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1acf0:	b40e      	push	{r1, r2, r3}
   1acf2:	b503      	push	{r0, r1, lr}
   1acf4:	ab03      	add	r3, sp, #12
   1acf6:	f853 2b04 	ldr.w	r2, [r3], #4
   1acfa:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1acfc:	4804      	ldr	r0, [pc, #16]	; (1ad10 <print_formatted+0x20>)
	va_start(args, fmt);
   1acfe:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1ad00:	f00b fa00 	bl	26104 <cbvprintf>
	va_end(args);

	return length;
}
   1ad04:	b002      	add	sp, #8
   1ad06:	f85d eb04 	ldr.w	lr, [sp], #4
   1ad0a:	b003      	add	sp, #12
   1ad0c:	4770      	bx	lr
   1ad0e:	bf00      	nop
   1ad10:	0002612d 	.word	0x0002612d

0001ad14 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1ad14:	06ca      	lsls	r2, r1, #27
   1ad16:	d405      	bmi.n	1ad24 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1ad18:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   1ad1a:	bf4c      	ite	mi
   1ad1c:	4902      	ldrmi	r1, [pc, #8]	; (1ad28 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   1ad1e:	4903      	ldrpl	r1, [pc, #12]	; (1ad2c <newline_print+0x18>)
   1ad20:	f7ff bfe6 	b.w	1acf0 <print_formatted>
	}
}
   1ad24:	4770      	bx	lr
   1ad26:	bf00      	nop
   1ad28:	0002af37 	.word	0x0002af37
   1ad2c:	0002af36 	.word	0x0002af36

0001ad30 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   1ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad34:	b089      	sub	sp, #36	; 0x24
   1ad36:	469a      	mov	sl, r3
   1ad38:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
   1ad3c:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
   1ad40:	9305      	str	r3, [sp, #20]
   1ad42:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ad44:	4604      	mov	r4, r0
   1ad46:	460d      	mov	r5, r1
   1ad48:	9e16      	ldr	r6, [sp, #88]	; 0x58
   1ad4a:	9206      	str	r2, [sp, #24]
   1ad4c:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   1ad4e:	f1bb 0f00 	cmp.w	fp, #0
   1ad52:	f000 8085 	beq.w	1ae60 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1ad56:	f006 0308 	and.w	r3, r6, #8
   1ad5a:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   1ad5c:	f00b f993 	bl	26086 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   1ad60:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
   1ad64:	4602      	mov	r2, r0
   1ad66:	2800      	cmp	r0, #0
   1ad68:	d049      	beq.n	1adfe <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
   1ad6a:	4620      	mov	r0, r4
   1ad6c:	4985      	ldr	r1, [pc, #532]	; (1af84 <log_output_process+0x254>)
   1ad6e:	f7ff ffbf 	bl	1acf0 <print_formatted>
   1ad72:	4680      	mov	r8, r0
	if (stamp) {
   1ad74:	f1b9 0f00 	cmp.w	r9, #0
   1ad78:	d008      	beq.n	1ad8c <log_output_process+0x5c>
	if (!format) {
   1ad7a:	f016 0f44 	tst.w	r6, #68	; 0x44
   1ad7e:	d140      	bne.n	1ae02 <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
   1ad80:	462a      	mov	r2, r5
   1ad82:	4620      	mov	r0, r4
   1ad84:	4980      	ldr	r1, [pc, #512]	; (1af88 <log_output_process+0x258>)
   1ad86:	f7ff ffb3 	bl	1acf0 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   1ad8a:	4480      	add	r8, r0
	if (color) {
   1ad8c:	f006 0301 	and.w	r3, r6, #1
   1ad90:	b153      	cbz	r3, 1ada8 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
   1ad92:	4b7e      	ldr	r3, [pc, #504]	; (1af8c <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
   1ad94:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
   1ad96:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
   1ad9a:	4b7d      	ldr	r3, [pc, #500]	; (1af90 <log_output_process+0x260>)
   1ad9c:	497d      	ldr	r1, [pc, #500]	; (1af94 <log_output_process+0x264>)
   1ad9e:	2a00      	cmp	r2, #0
   1ada0:	bf08      	it	eq
   1ada2:	461a      	moveq	r2, r3
   1ada4:	f7ff ffa4 	bl	1acf0 <print_formatted>
	if (level_on) {
   1ada8:	f006 0308 	and.w	r3, r6, #8
   1adac:	2b00      	cmp	r3, #0
   1adae:	d054      	beq.n	1ae5a <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
   1adb0:	4b79      	ldr	r3, [pc, #484]	; (1af98 <log_output_process+0x268>)
   1adb2:	4620      	mov	r0, r4
   1adb4:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
   1adb8:	4978      	ldr	r1, [pc, #480]	; (1af9c <log_output_process+0x26c>)
   1adba:	f7ff ff99 	bl	1acf0 <print_formatted>
   1adbe:	4605      	mov	r5, r0
	if (domain) {
   1adc0:	9b06      	ldr	r3, [sp, #24]
   1adc2:	b12b      	cbz	r3, 1add0 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
   1adc4:	461a      	mov	r2, r3
   1adc6:	4620      	mov	r0, r4
   1adc8:	4975      	ldr	r1, [pc, #468]	; (1afa0 <log_output_process+0x270>)
   1adca:	f7ff ff91 	bl	1acf0 <print_formatted>
   1adce:	4405      	add	r5, r0
	if (source) {
   1add0:	f1ba 0f00 	cmp.w	sl, #0
   1add4:	d005      	beq.n	1ade2 <log_output_process+0xb2>
		total += print_formatted(output,
   1add6:	4652      	mov	r2, sl
   1add8:	4620      	mov	r0, r4
   1adda:	4972      	ldr	r1, [pc, #456]	; (1afa4 <log_output_process+0x274>)
   1addc:	f7ff ff88 	bl	1acf0 <print_formatted>
   1ade0:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   1ade2:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   1ade4:	2f00      	cmp	r7, #0
   1ade6:	d149      	bne.n	1ae7c <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   1ade8:	9b04      	ldr	r3, [sp, #16]
   1adea:	2b00      	cmp	r3, #0
   1adec:	d14f      	bne.n	1ae8e <log_output_process+0x15e>
	if (color) {
   1adee:	07f3      	lsls	r3, r6, #31
   1adf0:	f100 80c1 	bmi.w	1af76 <log_output_process+0x246>
	newline_print(output, flags);
   1adf4:	4631      	mov	r1, r6
   1adf6:	4620      	mov	r0, r4
   1adf8:	f7ff ff8c 	bl	1ad14 <newline_print>
}
   1adfc:	e0b5      	b.n	1af6a <log_output_process+0x23a>
	uint32_t length = 0U;
   1adfe:	4680      	mov	r8, r0
   1ae00:	e7b8      	b.n	1ad74 <log_output_process+0x44>
	} else if (freq != 0U) {
   1ae02:	4b69      	ldr	r3, [pc, #420]	; (1afa8 <log_output_process+0x278>)
   1ae04:	6818      	ldr	r0, [r3, #0]
   1ae06:	2800      	cmp	r0, #0
   1ae08:	d0bf      	beq.n	1ad8a <log_output_process+0x5a>
		timestamp /= timestamp_div;
   1ae0a:	4b68      	ldr	r3, [pc, #416]	; (1afac <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   1ae0c:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
   1ae10:	681b      	ldr	r3, [r3, #0]
   1ae12:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1ae16:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   1ae1a:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   1ae1e:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
   1ae22:	fb09 f505 	mul.w	r5, r9, r5
   1ae26:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1ae2a:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
   1ae2e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   1ae32:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1ae36:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
   1ae3a:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1ae3e:	fb09 f505 	mul.w	r5, r9, r5
   1ae42:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   1ae46:	fb0c 1113 	mls	r1, ip, r3, r1
   1ae4a:	4620      	mov	r0, r4
   1ae4c:	9100      	str	r1, [sp, #0]
   1ae4e:	e9cd e501 	strd	lr, r5, [sp, #4]
   1ae52:	4957      	ldr	r1, [pc, #348]	; (1afb0 <log_output_process+0x280>)
   1ae54:	f7ff ff4c 	bl	1acf0 <print_formatted>
   1ae58:	e797      	b.n	1ad8a <log_output_process+0x5a>
	int total = 0;
   1ae5a:	f006 0508 	and.w	r5, r6, #8
   1ae5e:	e7af      	b.n	1adc0 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1ae60:	f1ba 0f01 	cmp.w	sl, #1
   1ae64:	d106      	bne.n	1ae74 <log_output_process+0x144>
	if (package) {
   1ae66:	2f00      	cmp	r7, #0
   1ae68:	d165      	bne.n	1af36 <log_output_process+0x206>
	if (data_len) {
   1ae6a:	9b04      	ldr	r3, [sp, #16]
   1ae6c:	2b00      	cmp	r3, #0
   1ae6e:	d07c      	beq.n	1af6a <log_output_process+0x23a>
		prefix_offset = 0;
   1ae70:	2500      	movs	r5, #0
   1ae72:	e00c      	b.n	1ae8e <log_output_process+0x15e>
	if (package) {
   1ae74:	2f00      	cmp	r7, #0
   1ae76:	d0f8      	beq.n	1ae6a <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1ae78:	484e      	ldr	r0, [pc, #312]	; (1afb4 <log_output_process+0x284>)
   1ae7a:	e05d      	b.n	1af38 <log_output_process+0x208>
		cb = out_func;
   1ae7c:	484e      	ldr	r0, [pc, #312]	; (1afb8 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   1ae7e:	463b      	mov	r3, r7
   1ae80:	4622      	mov	r2, r4
   1ae82:	494e      	ldr	r1, [pc, #312]	; (1afbc <log_output_process+0x28c>)
   1ae84:	f00a fb61 	bl	2554a <cbpprintf_external>
	if (data_len) {
   1ae88:	9b04      	ldr	r3, [sp, #16]
   1ae8a:	2b00      	cmp	r3, #0
   1ae8c:	d069      	beq.n	1af62 <log_output_process+0x232>
		print_formatted(output, " ");
   1ae8e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1afc0 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
   1ae92:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1afc4 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1ae96:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
   1ae98:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1ae9a:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   1ae9c:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1ae9e:	bf28      	it	cs
   1aea0:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
   1aea2:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
   1aea6:	f7ff ff35 	bl	1ad14 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   1aeaa:	4555      	cmp	r5, sl
   1aeac:	dc46      	bgt.n	1af3c <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
   1aeae:	9b05      	ldr	r3, [sp, #20]
   1aeb0:	4649      	mov	r1, r9
   1aeb2:	4620      	mov	r0, r4
   1aeb4:	781a      	ldrb	r2, [r3, #0]
   1aeb6:	f7ff ff1b 	bl	1acf0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1aeba:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
   1aebe:	f01a 0f07 	tst.w	sl, #7
   1aec2:	d103      	bne.n	1aecc <log_output_process+0x19c>
			print_formatted(output, " ");
   1aec4:	4641      	mov	r1, r8
   1aec6:	4620      	mov	r0, r4
   1aec8:	f7ff ff12 	bl	1acf0 <print_formatted>
		if (i < length) {
   1aecc:	4557      	cmp	r7, sl
   1aece:	d93c      	bls.n	1af4a <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
   1aed0:	9b05      	ldr	r3, [sp, #20]
   1aed2:	4649      	mov	r1, r9
   1aed4:	4620      	mov	r0, r4
   1aed6:	f813 200a 	ldrb.w	r2, [r3, sl]
   1aeda:	f7ff ff09 	bl	1acf0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1aede:	f10a 0a01 	add.w	sl, sl, #1
   1aee2:	f1ba 0f10 	cmp.w	sl, #16
   1aee6:	d1ea      	bne.n	1aebe <log_output_process+0x18e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1aee8:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
   1aeec:	4620      	mov	r0, r4
   1aeee:	4936      	ldr	r1, [pc, #216]	; (1afc8 <log_output_process+0x298>)
   1aef0:	f7ff fefe 	bl	1acf0 <print_formatted>
		if (i < length) {
   1aef4:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
   1aef6:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
   1aef8:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
   1aefa:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
   1aefc:	4b33      	ldr	r3, [pc, #204]	; (1afcc <log_output_process+0x29c>)
   1aefe:	5c99      	ldrb	r1, [r3, r2]
   1af00:	f011 0f97 	tst.w	r1, #151	; 0x97
   1af04:	bf08      	it	eq
   1af06:	222e      	moveq	r2, #46	; 0x2e
   1af08:	4931      	ldr	r1, [pc, #196]	; (1afd0 <log_output_process+0x2a0>)
   1af0a:	f7ff fef1 	bl	1acf0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1af0e:	f10a 0a01 	add.w	sl, sl, #1
   1af12:	f1ba 0f10 	cmp.w	sl, #16
   1af16:	d01d      	beq.n	1af54 <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
   1af18:	f01a 0f07 	tst.w	sl, #7
   1af1c:	d103      	bne.n	1af26 <log_output_process+0x1f6>
			print_formatted(output, " ");
   1af1e:	4641      	mov	r1, r8
   1af20:	4620      	mov	r0, r4
   1af22:	f7ff fee5 	bl	1acf0 <print_formatted>
		if (i < length) {
   1af26:	4557      	cmp	r7, sl
   1af28:	4652      	mov	r2, sl
   1af2a:	d8e4      	bhi.n	1aef6 <log_output_process+0x1c6>
			print_formatted(output, " ");
   1af2c:	4641      	mov	r1, r8
   1af2e:	4620      	mov	r0, r4
   1af30:	f7ff fede 	bl	1acf0 <print_formatted>
   1af34:	e7eb      	b.n	1af0e <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1af36:	4820      	ldr	r0, [pc, #128]	; (1afb8 <log_output_process+0x288>)
		prefix_offset = 0;
   1af38:	465d      	mov	r5, fp
   1af3a:	e7a0      	b.n	1ae7e <log_output_process+0x14e>
		print_formatted(output, " ");
   1af3c:	4641      	mov	r1, r8
   1af3e:	4620      	mov	r0, r4
   1af40:	f7ff fed6 	bl	1acf0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1af44:	f10a 0a01 	add.w	sl, sl, #1
   1af48:	e7af      	b.n	1aeaa <log_output_process+0x17a>
			print_formatted(output, "   ");
   1af4a:	4620      	mov	r0, r4
   1af4c:	4921      	ldr	r1, [pc, #132]	; (1afd4 <log_output_process+0x2a4>)
   1af4e:	f7ff fecf 	bl	1acf0 <print_formatted>
   1af52:	e7c4      	b.n	1aede <log_output_process+0x1ae>
		data += length;
   1af54:	9b05      	ldr	r3, [sp, #20]
   1af56:	443b      	add	r3, r7
   1af58:	9305      	str	r3, [sp, #20]
	} while (len);
   1af5a:	9b04      	ldr	r3, [sp, #16]
   1af5c:	1bdb      	subs	r3, r3, r7
   1af5e:	9304      	str	r3, [sp, #16]
   1af60:	d199      	bne.n	1ae96 <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   1af62:	f1bb 0f00 	cmp.w	fp, #0
   1af66:	f47f af42 	bne.w	1adee <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   1af6a:	4620      	mov	r0, r4
}
   1af6c:	b009      	add	sp, #36	; 0x24
   1af6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   1af72:	f00b b8ce 	b.w	26112 <log_output_flush>
		print_formatted(output, "%s", log_color);
   1af76:	4620      	mov	r0, r4
   1af78:	4a05      	ldr	r2, [pc, #20]	; (1af90 <log_output_process+0x260>)
   1af7a:	4906      	ldr	r1, [pc, #24]	; (1af94 <log_output_process+0x264>)
   1af7c:	f7ff feb8 	bl	1acf0 <print_formatted>
}
   1af80:	e738      	b.n	1adf4 <log_output_process+0xc4>
   1af82:	bf00      	nop
   1af84:	00029523 	.word	0x00029523
   1af88:	00029527 	.word	0x00029527
   1af8c:	00028d90 	.word	0x00028d90
   1af90:	0002951e 	.word	0x0002951e
   1af94:	0002a4b7 	.word	0x0002a4b7
   1af98:	00028da4 	.word	0x00028da4
   1af9c:	0002954c 	.word	0x0002954c
   1afa0:	00029552 	.word	0x00029552
   1afa4:	00029556 	.word	0x00029556
   1afa8:	2000d0ec 	.word	0x2000d0ec
   1afac:	2000d0e8 	.word	0x2000d0e8
   1afb0:	00029530 	.word	0x00029530
   1afb4:	0002615b 	.word	0x0002615b
   1afb8:	0002612d 	.word	0x0002612d
   1afbc:	00026105 	.word	0x00026105
   1afc0:	00029563 	.word	0x00029563
   1afc4:	0002955b 	.word	0x0002955b
   1afc8:	00029565 	.word	0x00029565
   1afcc:	0002b1d7 	.word	0x0002b1d7
   1afd0:	00029567 	.word	0x00029567
   1afd4:	00029561 	.word	0x00029561

0001afd8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   1afd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   1afdc:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   1afde:	684b      	ldr	r3, [r1, #4]
   1afe0:	4605      	mov	r5, r0
   1afe2:	460c      	mov	r4, r1
   1afe4:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   1afe6:	688e      	ldr	r6, [r1, #8]
   1afe8:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
   1afea:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   1afee:	b15b      	cbz	r3, 1b008 <log_output_msg_process+0x30>
   1aff0:	4a13      	ldr	r2, [pc, #76]	; (1b040 <log_output_msg_process+0x68>)
   1aff2:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   1aff4:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1aff8:	2900      	cmp	r1, #0
   1affa:	db1f      	blt.n	1b03c <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   1affc:	7820      	ldrb	r0, [r4, #0]
   1affe:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   1b002:	f7ff fdb5 	bl	1ab70 <log_source_name_get>
   1b006:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   1b008:	4621      	mov	r1, r4
   1b00a:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
   1b00e:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   1b010:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   1b014:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   1b016:	eb01 0402 	add.w	r4, r1, r2
   1b01a:	bf08      	it	eq
   1b01c:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
   1b01e:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   1b022:	e9cd 0803 	strd	r0, r8, [sp, #12]
   1b026:	e9cd 1401 	strd	r1, r4, [sp, #4]
   1b02a:	2200      	movs	r2, #0
   1b02c:	4631      	mov	r1, r6
   1b02e:	4628      	mov	r0, r5
   1b030:	9700      	str	r7, [sp, #0]
   1b032:	f7ff fe7d 	bl	1ad30 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   1b036:	b006      	add	sp, #24
   1b038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1b03c:	2300      	movs	r3, #0
   1b03e:	e7e3      	b.n	1b008 <log_output_msg_process+0x30>
   1b040:	00028bf0 	.word	0x00028bf0

0001b044 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1b044:	f242 730f 	movw	r3, #9999	; 0x270f
{
   1b048:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1b04a:	428b      	cmp	r3, r1
   1b04c:	bf28      	it	cs
   1b04e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   1b050:	6805      	ldr	r5, [r0, #0]
{
   1b052:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1b054:	2105      	movs	r1, #5
   1b056:	4668      	mov	r0, sp
   1b058:	4a0d      	ldr	r2, [pc, #52]	; (1b090 <log_output_dropped_process+0x4c>)
   1b05a:	f00a fafd 	bl	25658 <snprintk>
   1b05e:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1b060:	6863      	ldr	r3, [r4, #4]
   1b062:	4628      	mov	r0, r5
   1b064:	220b      	movs	r2, #11
   1b066:	685b      	ldr	r3, [r3, #4]
   1b068:	490a      	ldr	r1, [pc, #40]	; (1b094 <log_output_dropped_process+0x50>)
   1b06a:	f00b f83e 	bl	260ea <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   1b06e:	6863      	ldr	r3, [r4, #4]
   1b070:	4632      	mov	r2, r6
   1b072:	4669      	mov	r1, sp
   1b074:	4628      	mov	r0, r5
   1b076:	685b      	ldr	r3, [r3, #4]
   1b078:	f00b f837 	bl	260ea <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1b07c:	6863      	ldr	r3, [r4, #4]
   1b07e:	221b      	movs	r2, #27
   1b080:	4628      	mov	r0, r5
   1b082:	685b      	ldr	r3, [r3, #4]
   1b084:	4904      	ldr	r1, [pc, #16]	; (1b098 <log_output_dropped_process+0x54>)
   1b086:	f00b f830 	bl	260ea <buffer_write>
		     output->control_block->ctx);
}
   1b08a:	b002      	add	sp, #8
   1b08c:	bd70      	pop	{r4, r5, r6, pc}
   1b08e:	bf00      	nop
   1b090:	0002a822 	.word	0x0002a822
   1b094:	00029586 	.word	0x00029586
   1b098:	0002956a 	.word	0x0002956a

0001b09c <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1b09c:	2100      	movs	r1, #0
   1b09e:	2301      	movs	r3, #1
   1b0a0:	4a06      	ldr	r2, [pc, #24]	; (1b0bc <log_output_timestamp_freq_set+0x20>)
   1b0a2:	4290      	cmp	r0, r2
   1b0a4:	d806      	bhi.n	1b0b4 <log_output_timestamp_freq_set+0x18>
   1b0a6:	4a06      	ldr	r2, [pc, #24]	; (1b0c0 <log_output_timestamp_freq_set+0x24>)
   1b0a8:	b901      	cbnz	r1, 1b0ac <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   1b0aa:	2301      	movs	r3, #1
   1b0ac:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1b0ae:	4b05      	ldr	r3, [pc, #20]	; (1b0c4 <log_output_timestamp_freq_set+0x28>)
   1b0b0:	6018      	str	r0, [r3, #0]
}
   1b0b2:	4770      	bx	lr
		timestamp_div *= 2U;
   1b0b4:	2101      	movs	r1, #1
		frequency /= 2U;
   1b0b6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1b0b8:	005b      	lsls	r3, r3, #1
   1b0ba:	e7f2      	b.n	1b0a2 <log_output_timestamp_freq_set+0x6>
   1b0bc:	000f4240 	.word	0x000f4240
   1b0c0:	2000d0e8 	.word	0x2000d0e8
   1b0c4:	2000d0ec 	.word	0x2000d0ec

0001b0c8 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   1b0c8:	4b01      	ldr	r3, [pc, #4]	; (1b0d0 <format_set+0x8>)
	return 0;
}
   1b0ca:	2000      	movs	r0, #0
	log_format_current = log_type;
   1b0cc:	6019      	str	r1, [r3, #0]
}
   1b0ce:	4770      	bx	lr
   1b0d0:	2000d104 	.word	0x2000d104

0001b0d4 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   1b0d4:	2201      	movs	r2, #1
   1b0d6:	4b02      	ldr	r3, [pc, #8]	; (1b0e0 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   1b0d8:	4802      	ldr	r0, [pc, #8]	; (1b0e4 <panic+0x10>)
   1b0da:	701a      	strb	r2, [r3, #0]
   1b0dc:	f00b b819 	b.w	26112 <log_output_flush>
   1b0e0:	2000d89d 	.word	0x2000d89d
   1b0e4:	00028dd4 	.word	0x00028dd4

0001b0e8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   1b0e8:	4801      	ldr	r0, [pc, #4]	; (1b0f0 <dropped+0x8>)
   1b0ea:	f7ff bfab 	b.w	1b044 <log_output_dropped_process>
   1b0ee:	bf00      	nop
   1b0f0:	00028dd4 	.word	0x00028dd4

0001b0f4 <process>:
{
   1b0f4:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1b0f6:	4b06      	ldr	r3, [pc, #24]	; (1b110 <process+0x1c>)
{
   1b0f8:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1b0fa:	6818      	ldr	r0, [r3, #0]
   1b0fc:	f7ff fb82 	bl	1a804 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   1b100:	4621      	mov	r1, r4
}
   1b102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1b106:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
   1b108:	220f      	movs	r2, #15
   1b10a:	4802      	ldr	r0, [pc, #8]	; (1b114 <process+0x20>)
   1b10c:	4718      	bx	r3
   1b10e:	bf00      	nop
   1b110:	2000d104 	.word	0x2000d104
   1b114:	00028dd4 	.word	0x00028dd4

0001b118 <char_out>:
{
   1b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b11a:	460d      	mov	r5, r1
   1b11c:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1b11e:	4f06      	ldr	r7, [pc, #24]	; (1b138 <char_out+0x20>)
   1b120:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   1b122:	42b4      	cmp	r4, r6
   1b124:	d101      	bne.n	1b12a <char_out+0x12>
}
   1b126:	4628      	mov	r0, r5
   1b128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   1b12a:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b12e:	68bb      	ldr	r3, [r7, #8]
   1b130:	4801      	ldr	r0, [pc, #4]	; (1b138 <char_out+0x20>)
   1b132:	685b      	ldr	r3, [r3, #4]
   1b134:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   1b136:	e7f4      	b.n	1b122 <char_out+0xa>
   1b138:	00028948 	.word	0x00028948

0001b13c <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   1b13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b140:	4605      	mov	r5, r0
   1b142:	460e      	mov	r6, r1
   1b144:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1b146:	4c10      	ldr	r4, [pc, #64]	; (1b188 <z_impl_zsock_socket+0x4c>)
   1b148:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1b18c <z_impl_zsock_socket+0x50>
   1b14c:	4544      	cmp	r4, r8
   1b14e:	d307      	bcc.n	1b160 <z_impl_zsock_socket+0x24>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   1b150:	f00b f898 	bl	26284 <__errno>
   1b154:	236a      	movs	r3, #106	; 0x6a
   1b156:	6003      	str	r3, [r0, #0]
	return -1;
}
   1b158:	f04f 30ff 	mov.w	r0, #4294967295
   1b15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sock_family->family != family &&
   1b160:	6823      	ldr	r3, [r4, #0]
   1b162:	42ab      	cmp	r3, r5
   1b164:	d000      	beq.n	1b168 <z_impl_zsock_socket+0x2c>
   1b166:	b963      	cbnz	r3, 1b182 <z_impl_zsock_socket+0x46>
		if (!sock_family->is_supported(family, type, proto)) {
   1b168:	463a      	mov	r2, r7
   1b16a:	4631      	mov	r1, r6
   1b16c:	4628      	mov	r0, r5
   1b16e:	68a3      	ldr	r3, [r4, #8]
   1b170:	4798      	blx	r3
   1b172:	b130      	cbz	r0, 1b182 <z_impl_zsock_socket+0x46>
		return sock_family->handler(family, type, proto);
   1b174:	463a      	mov	r2, r7
   1b176:	4631      	mov	r1, r6
   1b178:	4628      	mov	r0, r5
   1b17a:	68e3      	ldr	r3, [r4, #12]
}
   1b17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
   1b180:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1b182:	3410      	adds	r4, #16
   1b184:	e7e2      	b.n	1b14c <z_impl_zsock_socket+0x10>
   1b186:	bf00      	nop
   1b188:	00028be0 	.word	0x00028be0
   1b18c:	00028bf0 	.word	0x00028bf0

0001b190 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   1b190:	4b01      	ldr	r3, [pc, #4]	; (1b198 <socket_offload_dns_register+0x8>)
   1b192:	6018      	str	r0, [r3, #0]
}
   1b194:	4770      	bx	lr
   1b196:	bf00      	nop
   1b198:	2000d108 	.word	0x2000d108

0001b19c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   1b19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b1a0:	4605      	mov	r5, r0
	__asm__ volatile(
   1b1a2:	f04f 0320 	mov.w	r3, #32
   1b1a6:	f3ef 8611 	mrs	r6, BASEPRI
   1b1aa:	f383 8812 	msr	BASEPRI_MAX, r3
   1b1ae:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1b1b2:	f04f 090c 	mov.w	r9, #12
	return list->head;
   1b1b6:	4b0d      	ldr	r3, [pc, #52]	; (1b1ec <pm_state_notify+0x50>)
   1b1b8:	4f0d      	ldr	r7, [pc, #52]	; (1b1f0 <pm_state_notify+0x54>)
   1b1ba:	681c      	ldr	r4, [r3, #0]
   1b1bc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1b1f4 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1b1c0:	b92c      	cbnz	r4, 1b1ce <pm_state_notify+0x32>
	__asm__ volatile(
   1b1c2:	f386 8811 	msr	BASEPRI, r6
   1b1c6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1b1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   1b1ce:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   1b1d2:	2d00      	cmp	r5, #0
   1b1d4:	bf18      	it	ne
   1b1d6:	4613      	movne	r3, r2
		if (callback) {
   1b1d8:	b12b      	cbz	r3, 1b1e6 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1b1da:	f898 2014 	ldrb.w	r2, [r8, #20]
   1b1de:	fb09 f202 	mul.w	r2, r9, r2
   1b1e2:	5cb8      	ldrb	r0, [r7, r2]
   1b1e4:	4798      	blx	r3
	return node->next;
   1b1e6:	6824      	ldr	r4, [r4, #0]
   1b1e8:	e7ea      	b.n	1b1c0 <pm_state_notify+0x24>
   1b1ea:	bf00      	nop
   1b1ec:	2000d124 	.word	0x2000d124
   1b1f0:	2000d118 	.word	0x2000d118
   1b1f4:	2000d848 	.word	0x2000d848

0001b1f8 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b1f8:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   1b1fa:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1b1fc:	4b16      	ldr	r3, [pc, #88]	; (1b258 <pm_system_resume+0x60>)
   1b1fe:	7d1c      	ldrb	r4, [r3, #20]
   1b200:	f004 031f 	and.w	r3, r4, #31
   1b204:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b206:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b208:	4b14      	ldr	r3, [pc, #80]	; (1b25c <pm_system_resume+0x64>)
   1b20a:	0961      	lsrs	r1, r4, #5
   1b20c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1b210:	e8d3 1fef 	ldaex	r1, [r3]
   1b214:	ea01 0500 	and.w	r5, r1, r0
   1b218:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1b21c:	2e00      	cmp	r6, #0
   1b21e:	d1f7      	bne.n	1b210 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1b220:	420a      	tst	r2, r1
   1b222:	d013      	beq.n	1b24c <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   1b224:	4b0e      	ldr	r3, [pc, #56]	; (1b260 <pm_system_resume+0x68>)
   1b226:	4d0f      	ldr	r5, [pc, #60]	; (1b264 <pm_system_resume+0x6c>)
   1b228:	b18b      	cbz	r3, 1b24e <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1b22a:	230c      	movs	r3, #12
   1b22c:	4363      	muls	r3, r4
   1b22e:	18ea      	adds	r2, r5, r3
   1b230:	7851      	ldrb	r1, [r2, #1]
   1b232:	5ce8      	ldrb	r0, [r5, r3]
   1b234:	f00a fef2 	bl	2601c <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   1b238:	2000      	movs	r0, #0
   1b23a:	f7ff ffaf 	bl	1b19c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1b23e:	230c      	movs	r3, #12
   1b240:	435c      	muls	r4, r3
   1b242:	2300      	movs	r3, #0
   1b244:	192a      	adds	r2, r5, r4
   1b246:	512b      	str	r3, [r5, r4]
   1b248:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   1b24c:	bd70      	pop	{r4, r5, r6, pc}
   1b24e:	f383 8811 	msr	BASEPRI, r3
   1b252:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1b256:	e7ef      	b.n	1b238 <pm_system_resume+0x40>
   1b258:	2000d848 	.word	0x2000d848
   1b25c:	2000d12c 	.word	0x2000d12c
   1b260:	0002601d 	.word	0x0002601d
   1b264:	2000d118 	.word	0x2000d118

0001b268 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   1b268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   1b26c:	4b32      	ldr	r3, [pc, #200]	; (1b338 <pm_system_suspend+0xd0>)
{
   1b26e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   1b270:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   1b272:	f04f 0320 	mov.w	r3, #32
   1b276:	f3ef 8811 	mrs	r8, BASEPRI
   1b27a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b27e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   1b282:	240c      	movs	r4, #12
   1b284:	436c      	muls	r4, r5
   1b286:	4b2d      	ldr	r3, [pc, #180]	; (1b33c <pm_system_suspend+0xd4>)
   1b288:	4e2d      	ldr	r6, [pc, #180]	; (1b340 <pm_system_suspend+0xd8>)
   1b28a:	5d19      	ldrb	r1, [r3, r4]
   1b28c:	191a      	adds	r2, r3, r4
   1b28e:	2900      	cmp	r1, #0
   1b290:	d047      	beq.n	1b322 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   1b292:	ca07      	ldmia	r2, {r0, r1, r2}
   1b294:	eb06 0c04 	add.w	ip, r6, r4
   1b298:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   1b29c:	2200      	movs	r2, #0
   1b29e:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   1b2a0:	f388 8811 	msr	BASEPRI, r8
   1b2a4:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   1b2a8:	230c      	movs	r3, #12
   1b2aa:	436b      	muls	r3, r5
   1b2ac:	5cf0      	ldrb	r0, [r6, r3]
   1b2ae:	18f2      	adds	r2, r6, r3
   1b2b0:	b3a8      	cbz	r0, 1b31e <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1b2b2:	1c7b      	adds	r3, r7, #1
   1b2b4:	d010      	beq.n	1b2d8 <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b2b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1b2ba:	2100      	movs	r1, #0
   1b2bc:	f8d2 c008 	ldr.w	ip, [r2, #8]
   1b2c0:	4c20      	ldr	r4, [pc, #128]	; (1b344 <pm_system_suspend+0xdc>)
   1b2c2:	2300      	movs	r3, #0
   1b2c4:	fbec 4100 	umlal	r4, r1, ip, r0
   1b2c8:	4a1f      	ldr	r2, [pc, #124]	; (1b348 <pm_system_suspend+0xe0>)
   1b2ca:	4620      	mov	r0, r4
   1b2cc:	f7fd fd1c 	bl	18d08 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1b2d0:	2101      	movs	r1, #1
   1b2d2:	1a38      	subs	r0, r7, r0
   1b2d4:	f00c ffcb 	bl	2826e <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1b2d8:	f009 f8aa 	bl	24430 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1b2dc:	2001      	movs	r0, #1
   1b2de:	f7ff ff5d 	bl	1b19c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b2e2:	4b1a      	ldr	r3, [pc, #104]	; (1b34c <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b2e4:	096a      	lsrs	r2, r5, #5
   1b2e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b2ea:	2201      	movs	r2, #1
   1b2ec:	f005 011f 	and.w	r1, r5, #31
   1b2f0:	408a      	lsls	r2, r1
   1b2f2:	e8d3 0fef 	ldaex	r0, [r3]
   1b2f6:	4310      	orrs	r0, r2
   1b2f8:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1b2fc:	2900      	cmp	r1, #0
   1b2fe:	d1f8      	bne.n	1b2f2 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
   1b300:	4b13      	ldr	r3, [pc, #76]	; (1b350 <pm_system_suspend+0xe8>)
   1b302:	b13b      	cbz	r3, 1b314 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
   1b304:	230c      	movs	r3, #12
   1b306:	fb03 f005 	mul.w	r0, r3, r5
   1b30a:	1833      	adds	r3, r6, r0
   1b30c:	7859      	ldrb	r1, [r3, #1]
   1b30e:	5c30      	ldrb	r0, [r6, r0]
   1b310:	f00a fe78 	bl	26004 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   1b314:	f7ff ff70 	bl	1b1f8 <pm_system_resume>
	k_sched_unlock();
   1b318:	f009 f89e 	bl	24458 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   1b31c:	2001      	movs	r0, #1
}
   1b31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   1b322:	4601      	mov	r1, r0
   1b324:	4628      	mov	r0, r5
   1b326:	f000 f815 	bl	1b354 <pm_policy_next_state>
		if (info != NULL) {
   1b32a:	2800      	cmp	r0, #0
   1b32c:	d0b8      	beq.n	1b2a0 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   1b32e:	c807      	ldmia	r0, {r0, r1, r2}
   1b330:	4434      	add	r4, r6
   1b332:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   1b336:	e7b3      	b.n	1b2a0 <pm_system_suspend+0x38>
   1b338:	2000d848 	.word	0x2000d848
   1b33c:	2000d10c 	.word	0x2000d10c
   1b340:	2000d118 	.word	0x2000d118
   1b344:	000f423f 	.word	0x000f423f
   1b348:	000f4240 	.word	0x000f4240
   1b34c:	2000d12c 	.word	0x2000d12c
   1b350:	00026005 	.word	0x00026005

0001b354 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   1b354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b358:	b085      	sub	sp, #20
   1b35a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   1b35c:	a903      	add	r1, sp, #12
   1b35e:	f000 f843 	bl	1b3e8 <pm_state_cpu_get_all>
   1b362:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1b366:	4604      	mov	r4, r0
   1b368:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1b36c:	4b1b      	ldr	r3, [pc, #108]	; (1b3dc <pm_policy_next_state+0x88>)
   1b36e:	9d03      	ldr	r5, [sp, #12]
   1b370:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1b374:	1e43      	subs	r3, r0, #1
   1b376:	b21b      	sxth	r3, r3
   1b378:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b37c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1b3e0 <pm_policy_next_state+0x8c>
   1b380:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1b384:	b924      	cbnz	r4, 1b390 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   1b386:	46a1      	mov	r9, r4
}
   1b388:	4648      	mov	r0, r9
   1b38a:	b005      	add	sp, #20
   1b38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b390:	46c4      	mov	ip, r8
   1b392:	4659      	mov	r1, fp
   1b394:	6868      	ldr	r0, [r5, #4]
   1b396:	2300      	movs	r3, #0
   1b398:	fbe0 c107 	umlal	ip, r1, r0, r7
   1b39c:	4a11      	ldr	r2, [pc, #68]	; (1b3e4 <pm_policy_next_state+0x90>)
   1b39e:	4660      	mov	r0, ip
   1b3a0:	f7fd fcb2 	bl	18d08 <__aeabi_uldivmod>
   1b3a4:	46c4      	mov	ip, r8
   1b3a6:	4659      	mov	r1, fp
   1b3a8:	9001      	str	r0, [sp, #4]
   1b3aa:	68a8      	ldr	r0, [r5, #8]
   1b3ac:	2300      	movs	r3, #0
   1b3ae:	fbe0 c107 	umlal	ip, r1, r0, r7
   1b3b2:	4a0c      	ldr	r2, [pc, #48]	; (1b3e4 <pm_policy_next_state+0x90>)
   1b3b4:	4660      	mov	r0, ip
   1b3b6:	f7fd fca7 	bl	18d08 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1b3ba:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   1b3be:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1b3c0:	d001      	beq.n	1b3c6 <pm_policy_next_state+0x72>
   1b3c2:	4582      	cmp	sl, r0
   1b3c4:	d905      	bls.n	1b3d2 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   1b3c6:	1c73      	adds	r3, r6, #1
   1b3c8:	d0de      	beq.n	1b388 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   1b3ca:	9b01      	ldr	r3, [sp, #4]
   1b3cc:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1b3ce:	42b0      	cmp	r0, r6
   1b3d0:	d9da      	bls.n	1b388 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1b3d2:	3c01      	subs	r4, #1
   1b3d4:	b2a4      	uxth	r4, r4
   1b3d6:	3d0c      	subs	r5, #12
   1b3d8:	e7d4      	b.n	1b384 <pm_policy_next_state+0x30>
   1b3da:	bf00      	nop
   1b3dc:	2000c58c 	.word	0x2000c58c
   1b3e0:	000f423f 	.word	0x000f423f
   1b3e4:	000f4240 	.word	0x000f4240

0001b3e8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   1b3e8:	b908      	cbnz	r0, 1b3ee <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1b3ea:	4b02      	ldr	r3, [pc, #8]	; (1b3f4 <pm_state_cpu_get_all+0xc>)
   1b3ec:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1b3ee:	2000      	movs	r0, #0
   1b3f0:	4770      	bx	lr
   1b3f2:	bf00      	nop
   1b3f4:	00028de4 	.word	0x00028de4

0001b3f8 <adp536x_reg_read>:
#define ADP536X_FUEL_GAUGE_EN_FG(x)			((x) & 0x01)

static const struct device *i2c_dev;

static int adp536x_reg_read(uint8_t reg, uint8_t *buff)
{
   1b3f8:	4603      	mov	r3, r0
   1b3fa:	b510      	push	{r4, lr}
   1b3fc:	b088      	sub	sp, #32
   1b3fe:	f88d 3007 	strb.w	r3, [sp, #7]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   1b402:	f10d 0307 	add.w	r3, sp, #7
   1b406:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
   1b408:	2301      	movs	r3, #1
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
   1b40a:	4a09      	ldr	r2, [pc, #36]	; (1b430 <adp536x_reg_read+0x38>)
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
   1b40c:	e9cd 1305 	strd	r1, r3, [sp, #20]
   1b410:	6810      	ldr	r0, [r2, #0]
	msg[0].len = num_write;
   1b412:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1b414:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b416:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   1b418:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b41c:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1b420:	6883      	ldr	r3, [r0, #8]
   1b422:	2202      	movs	r2, #2
   1b424:	689c      	ldr	r4, [r3, #8]
   1b426:	a902      	add	r1, sp, #8
   1b428:	2346      	movs	r3, #70	; 0x46
   1b42a:	47a0      	blx	r4
}
   1b42c:	b008      	add	sp, #32
   1b42e:	bd10      	pop	{r4, pc}
   1b430:	2000d130 	.word	0x2000d130

0001b434 <adp536x_reg_write_mask>:
}

static int adp536x_reg_write_mask(uint8_t reg_addr,
			       uint32_t mask,
			       uint8_t data)
{
   1b434:	b570      	push	{r4, r5, r6, lr}
   1b436:	b086      	sub	sp, #24
   1b438:	460e      	mov	r6, r1
	int err;
	uint8_t tmp;

	err = adp536x_reg_read(reg_addr, &tmp);
   1b43a:	f10d 0107 	add.w	r1, sp, #7
{
   1b43e:	4605      	mov	r5, r0
   1b440:	4614      	mov	r4, r2
	err = adp536x_reg_read(reg_addr, &tmp);
   1b442:	f7ff ffd9 	bl	1b3f8 <adp536x_reg_read>
	if (err) {
   1b446:	b9c8      	cbnz	r0, 1b47c <adp536x_reg_write_mask+0x48>
		return err;
	}

	tmp &= ~mask;
   1b448:	f89d 3007 	ldrb.w	r3, [sp, #7]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   1b44c:	f88d 5008 	strb.w	r5, [sp, #8]
   1b450:	ea23 0106 	bic.w	r1, r3, r6
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
   1b454:	4b0a      	ldr	r3, [pc, #40]	; (1b480 <adp536x_reg_write_mask+0x4c>)
	tmp |= data;
   1b456:	ea44 0201 	orr.w	r2, r4, r1
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
   1b45a:	6818      	ldr	r0, [r3, #0]
	msg.buf = (uint8_t *)buf;
   1b45c:	ab02      	add	r3, sp, #8
   1b45e:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   1b460:	2302      	movs	r3, #2
	tmp |= data;
   1b462:	f88d 2007 	strb.w	r2, [sp, #7]
	uint8_t tx_buf[2] = {reg_addr, value};
   1b466:	f88d 2009 	strb.w	r2, [sp, #9]
	msg.len = num_bytes;
   1b46a:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1b46c:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1b470:	6883      	ldr	r3, [r0, #8]
   1b472:	2201      	movs	r2, #1
   1b474:	689c      	ldr	r4, [r3, #8]
   1b476:	a903      	add	r1, sp, #12
   1b478:	2346      	movs	r3, #70	; 0x46
   1b47a:	47a0      	blx	r4

	return adp536x_reg_write(reg_addr, tmp);
}
   1b47c:	b006      	add	sp, #24
   1b47e:	bd70      	pop	{r4, r5, r6, pc}
   1b480:	2000d130 	.word	0x2000d130

0001b484 <adp536x_init>:

	return 0;
}

int adp536x_init(const struct device *dev)
{
   1b484:	b510      	push	{r4, lr}
   1b486:	4604      	mov	r4, r0
   1b488:	f00c fc4d 	bl	27d26 <z_device_is_ready>
	if (!device_is_ready(dev)) {
   1b48c:	b118      	cbz	r0, 1b496 <adp536x_init+0x12>
		return -ENODEV;
	}

	i2c_dev = dev;

	return 0;
   1b48e:	2000      	movs	r0, #0
	i2c_dev = dev;
   1b490:	4b02      	ldr	r3, [pc, #8]	; (1b49c <adp536x_init+0x18>)
   1b492:	601c      	str	r4, [r3, #0]
}
   1b494:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1b496:	f06f 0012 	mvn.w	r0, #18
   1b49a:	e7fb      	b.n	1b494 <adp536x_init+0x10>
   1b49c:	2000d130 	.word	0x2000d130

0001b4a0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1b4a0:	4901      	ldr	r1, [pc, #4]	; (1b4a8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1b4a2:	2210      	movs	r2, #16
	str	r2, [r1]
   1b4a4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1b4a6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1b4a8:	e000ed10 	.word	0xe000ed10

0001b4ac <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1b4ac:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1b4ae:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1b4b0:	f380 8811 	msr	BASEPRI, r0
	isb
   1b4b4:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   1b4b8:	f3bf 8f4f 	dsb	sy
   1b4bc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1b4be:	b662      	cpsie	i
	isb
   1b4c0:	f3bf 8f6f 	isb	sy

	bx	lr
   1b4c4:	4770      	bx	lr
   1b4c6:	bf00      	nop

0001b4c8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1b4c8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1b4ca:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1b4cc:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   1b4d0:	f3bf 8f4f 	dsb	sy
   1b4d4:	bf20      	wfe

	msr	BASEPRI, r0
   1b4d6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1b4da:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1b4dc:	4770      	bx	lr
   1b4de:	bf00      	nop

0001b4e0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1b4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b4e4:	4681      	mov	r9, r0

	if (esf != NULL) {
   1b4e6:	460c      	mov	r4, r1
{
   1b4e8:	af00      	add	r7, sp, #0
	if (esf != NULL) {
   1b4ea:	2900      	cmp	r1, #0
   1b4ec:	d04c      	beq.n	1b588 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1b4ee:	e9d1 1200 	ldrd	r1, r2, [r1]
   1b4f2:	466e      	mov	r6, sp
   1b4f4:	b08a      	sub	sp, #40	; 0x28
   1b4f6:	68a3      	ldr	r3, [r4, #8]
   1b4f8:	466d      	mov	r5, sp
   1b4fa:	f04f 0a05 	mov.w	sl, #5
   1b4fe:	46a8      	mov	r8, r5
   1b500:	4825      	ldr	r0, [pc, #148]	; (1b598 <z_arm_fatal_error+0xb8>)
   1b502:	e9c5 2307 	strd	r2, r3, [r5, #28]
   1b506:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1b50a:	f848 af10 	str.w	sl, [r8, #16]!
   1b50e:	2300      	movs	r3, #0
   1b510:	4642      	mov	r2, r8
   1b512:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1b516:	4821      	ldr	r0, [pc, #132]	; (1b59c <z_arm_fatal_error+0xbc>)
   1b518:	f7ff fb4c 	bl	1abb4 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1b51c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1b520:	46b5      	mov	sp, r6
   1b522:	6963      	ldr	r3, [r4, #20]
   1b524:	46ad      	mov	sp, r5
   1b526:	481e      	ldr	r0, [pc, #120]	; (1b5a0 <z_arm_fatal_error+0xc0>)
   1b528:	e9c5 2307 	strd	r2, r3, [r5, #28]
   1b52c:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1b530:	f8c5 a010 	str.w	sl, [r5, #16]
   1b534:	2300      	movs	r3, #0
   1b536:	4642      	mov	r2, r8
   1b538:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1b53c:	4817      	ldr	r0, [pc, #92]	; (1b59c <z_arm_fatal_error+0xbc>)
   1b53e:	f7ff fb39 	bl	1abb4 <z_impl_z_log_msg_static_create>
   1b542:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1b544:	b088      	sub	sp, #32
   1b546:	69e3      	ldr	r3, [r4, #28]
   1b548:	466d      	mov	r5, sp
   1b54a:	f04f 0a03 	mov.w	sl, #3
   1b54e:	46a8      	mov	r8, r5
   1b550:	4a14      	ldr	r2, [pc, #80]	; (1b5a4 <z_arm_fatal_error+0xc4>)
   1b552:	e9c5 2305 	strd	r2, r3, [r5, #20]
   1b556:	f848 af10 	str.w	sl, [r8, #16]!
   1b55a:	2300      	movs	r3, #0
   1b55c:	4642      	mov	r2, r8
   1b55e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b562:	480e      	ldr	r0, [pc, #56]	; (1b59c <z_arm_fatal_error+0xbc>)
   1b564:	f7ff fb26 	bl	1abb4 <z_impl_z_log_msg_static_create>
   1b568:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1b56a:	69a3      	ldr	r3, [r4, #24]
   1b56c:	46ad      	mov	sp, r5
   1b56e:	4a0e      	ldr	r2, [pc, #56]	; (1b5a8 <z_arm_fatal_error+0xc8>)
   1b570:	f8c5 a010 	str.w	sl, [r5, #16]
   1b574:	e9c5 2305 	strd	r2, r3, [r5, #20]
   1b578:	2300      	movs	r3, #0
   1b57a:	4642      	mov	r2, r8
   1b57c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b580:	4806      	ldr	r0, [pc, #24]	; (1b59c <z_arm_fatal_error+0xbc>)
   1b582:	f7ff fb17 	bl	1abb4 <z_impl_z_log_msg_static_create>
   1b586:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1b588:	4621      	mov	r1, r4
   1b58a:	4648      	mov	r0, r9
   1b58c:	f008 f888 	bl	236a0 <z_fatal_error>
}
   1b590:	46bd      	mov	sp, r7
   1b592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b596:	bf00      	nop
   1b598:	00029651 	.word	0x00029651
   1b59c:	00028d00 	.word	0x00028d00
   1b5a0:	00029680 	.word	0x00029680
   1b5a4:	000296af 	.word	0x000296af
   1b5a8:	000296be 	.word	0x000296be

0001b5ac <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1b5ac:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1b5ae:	2800      	cmp	r0, #0
   1b5b0:	db07      	blt.n	1b5c2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b5b2:	2301      	movs	r3, #1
   1b5b4:	0941      	lsrs	r1, r0, #5
   1b5b6:	4a03      	ldr	r2, [pc, #12]	; (1b5c4 <arch_irq_enable+0x18>)
   1b5b8:	f000 001f 	and.w	r0, r0, #31
   1b5bc:	4083      	lsls	r3, r0
   1b5be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   1b5c2:	4770      	bx	lr
   1b5c4:	e000e100 	.word	0xe000e100

0001b5c8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1b5c8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1b5ca:	2800      	cmp	r0, #0
   1b5cc:	db0c      	blt.n	1b5e8 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b5ce:	2201      	movs	r2, #1
   1b5d0:	4906      	ldr	r1, [pc, #24]	; (1b5ec <arch_irq_disable+0x24>)
   1b5d2:	0943      	lsrs	r3, r0, #5
   1b5d4:	f000 001f 	and.w	r0, r0, #31
   1b5d8:	4082      	lsls	r2, r0
   1b5da:	3320      	adds	r3, #32
   1b5dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1b5e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b5e4:	f3bf 8f6f 	isb	sy
}
   1b5e8:	4770      	bx	lr
   1b5ea:	bf00      	nop
   1b5ec:	e000e100 	.word	0xe000e100

0001b5f0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1b5f0:	4b05      	ldr	r3, [pc, #20]	; (1b608 <arch_irq_is_enabled+0x18>)
   1b5f2:	0942      	lsrs	r2, r0, #5
   1b5f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1b5f8:	2301      	movs	r3, #1
   1b5fa:	f000 001f 	and.w	r0, r0, #31
   1b5fe:	fa03 f000 	lsl.w	r0, r3, r0
}
   1b602:	4010      	ands	r0, r2
   1b604:	4770      	bx	lr
   1b606:	bf00      	nop
   1b608:	e000e100 	.word	0xe000e100

0001b60c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1b60c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1b60e:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
   1b610:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b614:	bfac      	ite	ge
   1b616:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b61a:	4b06      	ldrlt	r3, [pc, #24]	; (1b634 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b61c:	ea4f 1141 	mov.w	r1, r1, lsl #5
   1b620:	b2c9      	uxtb	r1, r1
   1b622:	bfab      	itete	ge
   1b624:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b628:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b62c:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b630:	5419      	strblt	r1, [r3, r0]
}
   1b632:	4770      	bx	lr
   1b634:	e000ed14 	.word	0xe000ed14

0001b638 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1b638:	bf30      	wfi
    b z_SysNmiOnReset
   1b63a:	f7ff bffd 	b.w	1b638 <z_SysNmiOnReset>
   1b63e:	bf00      	nop

0001b640 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1b640:	4a0b      	ldr	r2, [pc, #44]	; (1b670 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1b642:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1b644:	4b0b      	ldr	r3, [pc, #44]	; (1b674 <z_arm_prep_c+0x34>)
   1b646:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1b64a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1b64c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b650:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1b654:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1b658:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1b65c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1b660:	f008 f8d8 	bl	23814 <z_bss_zero>
	z_data_copy();
   1b664:	f009 f834 	bl	246d0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1b668:	f000 fbb0 	bl	1bdcc <z_arm_interrupt_init>
	z_cstart();
   1b66c:	f008 f912 	bl	23894 <z_cstart>
   1b670:	00018000 	.word	0x00018000
   1b674:	e000ed00 	.word	0xe000ed00

0001b678 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1b678:	4a09      	ldr	r2, [pc, #36]	; (1b6a0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1b67a:	490a      	ldr	r1, [pc, #40]	; (1b6a4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1b67c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1b67e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1b680:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   1b682:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1b684:	4908      	ldr	r1, [pc, #32]	; (1b6a8 <arch_swap+0x30>)
   1b686:	684b      	ldr	r3, [r1, #4]
   1b688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1b68c:	604b      	str	r3, [r1, #4]
   1b68e:	2300      	movs	r3, #0
   1b690:	f383 8811 	msr	BASEPRI, r3
   1b694:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1b698:	6893      	ldr	r3, [r2, #8]
}
   1b69a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1b69c:	4770      	bx	lr
   1b69e:	bf00      	nop
   1b6a0:	2000d848 	.word	0x2000d848
   1b6a4:	00029324 	.word	0x00029324
   1b6a8:	e000ed00 	.word	0xe000ed00

0001b6ac <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1b6ac:	4915      	ldr	r1, [pc, #84]	; (1b704 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1b6ae:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   1b6b0:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1b6b4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1b6b8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1b6ba:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1b6be:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1b6c2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   1b6c4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1b6c8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1b6cc:	4f0e      	ldr	r7, [pc, #56]	; (1b708 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1b6ce:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1b6d2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1b6d4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1b6d6:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   1b6d8:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1b6dc:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1b6de:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1b6e0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1b6e2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1b6e6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1b6ea:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1b6ee:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1b6f2:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1b6f6:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1b6f8:	f00a fd85 	bl	26206 <configure_builtin_stack_guard>
    pop {r2, lr}
   1b6fc:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1b700:	4770      	bx	lr
   1b702:	0000      	.short	0x0000
    ldr r1, =_kernel
   1b704:	2000d848 	.word	0x2000d848
    ldr v4, =_SCS_ICSR
   1b708:	e000ed04 	.word	0xe000ed04

0001b70c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1b70c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1b710:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1b712:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1b716:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1b71a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1b71c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1b720:	2902      	cmp	r1, #2
    beq _oops
   1b722:	d0ff      	beq.n	1b724 <_oops>

0001b724 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1b724:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1b726:	f00a fd5f 	bl	261e8 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   1b72a:	bd01      	pop	{r0, pc}

0001b72c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1b72c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1b730:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   1b732:	490d      	ldr	r1, [pc, #52]	; (1b768 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   1b734:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1b738:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1b73a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   1b73e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1b742:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   1b744:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1b748:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1b74c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1b750:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1b754:	2300      	movs	r3, #0
   1b756:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   1b758:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1b75c:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1b75e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   1b760:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1b764:	4770      	bx	lr
   1b766:	bf00      	nop
   1b768:	00025673 	.word	0x00025673

0001b76c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1b76c:	4b08      	ldr	r3, [pc, #32]	; (1b790 <arch_switch_to_main_thread+0x24>)
   1b76e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1b770:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1b772:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1b776:	4610      	mov	r0, r2
   1b778:	f381 8809 	msr	PSP, r1
   1b77c:	2100      	movs	r1, #0
   1b77e:	b663      	cpsie	if
   1b780:	f381 8811 	msr	BASEPRI, r1
   1b784:	f3bf 8f6f 	isb	sy
   1b788:	2200      	movs	r2, #0
   1b78a:	2300      	movs	r3, #0
   1b78c:	f009 ff71 	bl	25672 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1b790:	2000d848 	.word	0x2000d848

0001b794 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1b794:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1b796:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1b798:	4a0b      	ldr	r2, [pc, #44]	; (1b7c8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1b79a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   1b79c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1b79e:	bf1e      	ittt	ne
	movne	r1, #0
   1b7a0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1b7a2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   1b7a4:	f00c fb57 	blne	27e56 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1b7a8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1b7aa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1b7ae:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1b7b2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1b7b6:	4905      	ldr	r1, [pc, #20]	; (1b7cc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1b7b8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1b7ba:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1b7bc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1b7be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1b7c2:	4903      	ldr	r1, [pc, #12]	; (1b7d0 <_isr_wrapper+0x3c>)
	bx r1
   1b7c4:	4708      	bx	r1
   1b7c6:	0000      	.short	0x0000
	ldr r2, =_kernel
   1b7c8:	2000d848 	.word	0x2000d848
	ldr r1, =_sw_isr_table
   1b7cc:	000289a8 	.word	0x000289a8
	ldr r1, =z_arm_int_exit
   1b7d0:	0001b7d5 	.word	0x0001b7d5

0001b7d4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1b7d4:	4b04      	ldr	r3, [pc, #16]	; (1b7e8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1b7d6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1b7d8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1b7da:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1b7dc:	d003      	beq.n	1b7e6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1b7de:	4903      	ldr	r1, [pc, #12]	; (1b7ec <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1b7e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1b7e4:	600a      	str	r2, [r1, #0]

0001b7e6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1b7e6:	4770      	bx	lr
	ldr r3, =_kernel
   1b7e8:	2000d848 	.word	0x2000d848
	ldr r1, =_SCS_ICSR
   1b7ec:	e000ed04 	.word	0xe000ed04

0001b7f0 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1b7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b7f4:	b086      	sub	sp, #24
   1b7f6:	4606      	mov	r6, r0
   1b7f8:	460d      	mov	r5, r1
   1b7fa:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   1b7fc:	2402      	movs	r4, #2
   1b7fe:	4b41      	ldr	r3, [pc, #260]	; (1b904 <mem_manage_fault.constprop.0+0x114>)
   1b800:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b804:	617b      	str	r3, [r7, #20]
   1b806:	4840      	ldr	r0, [pc, #256]	; (1b908 <mem_manage_fault.constprop.0+0x118>)
   1b808:	613c      	str	r4, [r7, #16]
   1b80a:	f107 0210 	add.w	r2, r7, #16
   1b80e:	f00a fcfe 	bl	2620e <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1b812:	4b3e      	ldr	r3, [pc, #248]	; (1b90c <mem_manage_fault.constprop.0+0x11c>)
   1b814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b816:	06db      	lsls	r3, r3, #27
   1b818:	d509      	bpl.n	1b82e <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1b81a:	4b3d      	ldr	r3, [pc, #244]	; (1b910 <mem_manage_fault.constprop.0+0x120>)
   1b81c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b820:	e9c7 4304 	strd	r4, r3, [r7, #16]
   1b824:	4838      	ldr	r0, [pc, #224]	; (1b908 <mem_manage_fault.constprop.0+0x118>)
   1b826:	f107 0210 	add.w	r2, r7, #16
   1b82a:	f00a fcf0 	bl	2620e <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1b82e:	4b37      	ldr	r3, [pc, #220]	; (1b90c <mem_manage_fault.constprop.0+0x11c>)
   1b830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b832:	0718      	lsls	r0, r3, #28
   1b834:	d50a      	bpl.n	1b84c <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1b836:	4b37      	ldr	r3, [pc, #220]	; (1b914 <mem_manage_fault.constprop.0+0x124>)
   1b838:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b83c:	617b      	str	r3, [r7, #20]
   1b83e:	2302      	movs	r3, #2
   1b840:	4831      	ldr	r0, [pc, #196]	; (1b908 <mem_manage_fault.constprop.0+0x118>)
   1b842:	613b      	str	r3, [r7, #16]
   1b844:	f107 0210 	add.w	r2, r7, #16
   1b848:	f00a fce1 	bl	2620e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1b84c:	4c2f      	ldr	r4, [pc, #188]	; (1b90c <mem_manage_fault.constprop.0+0x11c>)
   1b84e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b850:	0799      	lsls	r1, r3, #30
   1b852:	d522      	bpl.n	1b89a <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
   1b854:	46e8      	mov	r8, sp
   1b856:	4b30      	ldr	r3, [pc, #192]	; (1b918 <mem_manage_fault.constprop.0+0x128>)
   1b858:	f107 0210 	add.w	r2, r7, #16
   1b85c:	617b      	str	r3, [r7, #20]
   1b85e:	2302      	movs	r3, #2
   1b860:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b864:	613b      	str	r3, [r7, #16]
   1b866:	4828      	ldr	r0, [pc, #160]	; (1b908 <mem_manage_fault.constprop.0+0x118>)
   1b868:	f00a fcd1 	bl	2620e <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   1b86c:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1b86e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1b870:	0612      	lsls	r2, r2, #24
   1b872:	d512      	bpl.n	1b89a <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1b874:	b088      	sub	sp, #32
   1b876:	466a      	mov	r2, sp
   1b878:	4928      	ldr	r1, [pc, #160]	; (1b91c <mem_manage_fault.constprop.0+0x12c>)
   1b87a:	4823      	ldr	r0, [pc, #140]	; (1b908 <mem_manage_fault.constprop.0+0x118>)
   1b87c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1b880:	2303      	movs	r3, #3
   1b882:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b886:	f842 3f10 	str.w	r3, [r2, #16]!
   1b88a:	f00a fcc0 	bl	2620e <z_log_msg_static_create.constprop.0>
   1b88e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   1b890:	b11e      	cbz	r6, 1b89a <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1b892:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1b898:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1b89a:	4b1c      	ldr	r3, [pc, #112]	; (1b90c <mem_manage_fault.constprop.0+0x11c>)
   1b89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b89e:	07dc      	lsls	r4, r3, #31
   1b8a0:	d50a      	bpl.n	1b8b8 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
   1b8a2:	4b1f      	ldr	r3, [pc, #124]	; (1b920 <mem_manage_fault.constprop.0+0x130>)
   1b8a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b8a8:	617b      	str	r3, [r7, #20]
   1b8aa:	2302      	movs	r3, #2
   1b8ac:	4816      	ldr	r0, [pc, #88]	; (1b908 <mem_manage_fault.constprop.0+0x118>)
   1b8ae:	613b      	str	r3, [r7, #16]
   1b8b0:	f107 0210 	add.w	r2, r7, #16
   1b8b4:	f00a fcab 	bl	2620e <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1b8b8:	4b14      	ldr	r3, [pc, #80]	; (1b90c <mem_manage_fault.constprop.0+0x11c>)
   1b8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b8bc:	0698      	lsls	r0, r3, #26
   1b8be:	d50a      	bpl.n	1b8d6 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
   1b8c0:	4b18      	ldr	r3, [pc, #96]	; (1b924 <mem_manage_fault.constprop.0+0x134>)
   1b8c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b8c6:	617b      	str	r3, [r7, #20]
   1b8c8:	2302      	movs	r3, #2
   1b8ca:	480f      	ldr	r0, [pc, #60]	; (1b908 <mem_manage_fault.constprop.0+0x118>)
   1b8cc:	613b      	str	r3, [r7, #16]
   1b8ce:	f107 0210 	add.w	r2, r7, #16
   1b8d2:	f00a fc9c 	bl	2620e <z_log_msg_static_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1b8d6:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1b8d8:	4b0c      	ldr	r3, [pc, #48]	; (1b90c <mem_manage_fault.constprop.0+0x11c>)

	return reason;
}
   1b8da:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1b8dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b8de:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1b8e0:	bf58      	it	pl
   1b8e2:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1b8e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b8e6:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1b8e8:	bf42      	ittt	mi
   1b8ea:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   1b8ec:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   1b8f0:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1b8f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b8f4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1b8f8:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1b8fa:	7028      	strb	r0, [r5, #0]
}
   1b8fc:	46bd      	mov	sp, r7
   1b8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b902:	bf00      	nop
   1b904:	000296ec 	.word	0x000296ec
   1b908:	00028d00 	.word	0x00028d00
   1b90c:	e000ed00 	.word	0xe000ed00
   1b910:	00029702 	.word	0x00029702
   1b914:	00029735 	.word	0x00029735
   1b918:	00029748 	.word	0x00029748
   1b91c:	00029760 	.word	0x00029760
   1b920:	00029776 	.word	0x00029776
   1b924:	00029795 	.word	0x00029795

0001b928 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1b928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b92c:	b086      	sub	sp, #24
   1b92e:	4606      	mov	r6, r0
   1b930:	460d      	mov	r5, r1
   1b932:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   1b934:	2402      	movs	r4, #2
   1b936:	4b3e      	ldr	r3, [pc, #248]	; (1ba30 <bus_fault.constprop.0+0x108>)
   1b938:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b93c:	617b      	str	r3, [r7, #20]
   1b93e:	483d      	ldr	r0, [pc, #244]	; (1ba34 <bus_fault.constprop.0+0x10c>)
   1b940:	613c      	str	r4, [r7, #16]
   1b942:	f107 0210 	add.w	r2, r7, #16
   1b946:	f00a fc62 	bl	2620e <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1b94a:	4b3b      	ldr	r3, [pc, #236]	; (1ba38 <bus_fault.constprop.0+0x110>)
   1b94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b94e:	04d9      	lsls	r1, r3, #19
   1b950:	d509      	bpl.n	1b966 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   1b952:	4b3a      	ldr	r3, [pc, #232]	; (1ba3c <bus_fault.constprop.0+0x114>)
   1b954:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b958:	e9c7 4304 	strd	r4, r3, [r7, #16]
   1b95c:	4835      	ldr	r0, [pc, #212]	; (1ba34 <bus_fault.constprop.0+0x10c>)
   1b95e:	f107 0210 	add.w	r2, r7, #16
   1b962:	f00a fc54 	bl	2620e <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1b966:	4b34      	ldr	r3, [pc, #208]	; (1ba38 <bus_fault.constprop.0+0x110>)
   1b968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b96a:	051a      	lsls	r2, r3, #20
   1b96c:	d50a      	bpl.n	1b984 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1b96e:	4b34      	ldr	r3, [pc, #208]	; (1ba40 <bus_fault.constprop.0+0x118>)
   1b970:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b974:	617b      	str	r3, [r7, #20]
   1b976:	2302      	movs	r3, #2
   1b978:	482e      	ldr	r0, [pc, #184]	; (1ba34 <bus_fault.constprop.0+0x10c>)
   1b97a:	613b      	str	r3, [r7, #16]
   1b97c:	f107 0210 	add.w	r2, r7, #16
   1b980:	f00a fc45 	bl	2620e <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1b984:	4c2c      	ldr	r4, [pc, #176]	; (1ba38 <bus_fault.constprop.0+0x110>)
   1b986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b988:	059b      	lsls	r3, r3, #22
   1b98a:	d522      	bpl.n	1b9d2 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   1b98c:	46e8      	mov	r8, sp
   1b98e:	4b2d      	ldr	r3, [pc, #180]	; (1ba44 <bus_fault.constprop.0+0x11c>)
   1b990:	4828      	ldr	r0, [pc, #160]	; (1ba34 <bus_fault.constprop.0+0x10c>)
   1b992:	617b      	str	r3, [r7, #20]
   1b994:	2302      	movs	r3, #2
   1b996:	f107 0210 	add.w	r2, r7, #16
   1b99a:	613b      	str	r3, [r7, #16]
   1b99c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b9a0:	f00a fc35 	bl	2620e <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1b9a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1b9a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1b9a8:	0410      	lsls	r0, r2, #16
   1b9aa:	d512      	bpl.n	1b9d2 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1b9ac:	b088      	sub	sp, #32
   1b9ae:	466a      	mov	r2, sp
   1b9b0:	4925      	ldr	r1, [pc, #148]	; (1ba48 <bus_fault.constprop.0+0x120>)
   1b9b2:	4820      	ldr	r0, [pc, #128]	; (1ba34 <bus_fault.constprop.0+0x10c>)
   1b9b4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1b9b8:	2303      	movs	r3, #3
   1b9ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b9be:	f842 3f10 	str.w	r3, [r2, #16]!
   1b9c2:	f00a fc24 	bl	2620e <z_log_msg_static_create.constprop.0>
   1b9c6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   1b9c8:	b11e      	cbz	r6, 1b9d2 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1b9ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b9cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1b9d0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1b9d2:	4b19      	ldr	r3, [pc, #100]	; (1ba38 <bus_fault.constprop.0+0x110>)
   1b9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b9d6:	0559      	lsls	r1, r3, #21
   1b9d8:	d50a      	bpl.n	1b9f0 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   1b9da:	4b1c      	ldr	r3, [pc, #112]	; (1ba4c <bus_fault.constprop.0+0x124>)
   1b9dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b9e0:	617b      	str	r3, [r7, #20]
   1b9e2:	2302      	movs	r3, #2
   1b9e4:	4813      	ldr	r0, [pc, #76]	; (1ba34 <bus_fault.constprop.0+0x10c>)
   1b9e6:	613b      	str	r3, [r7, #16]
   1b9e8:	f107 0210 	add.w	r2, r7, #16
   1b9ec:	f00a fc0f 	bl	2620e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1b9f0:	4b11      	ldr	r3, [pc, #68]	; (1ba38 <bus_fault.constprop.0+0x110>)
   1b9f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b9f4:	05d2      	lsls	r2, r2, #23
   1b9f6:	d515      	bpl.n	1ba24 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   1b9f8:	4b15      	ldr	r3, [pc, #84]	; (1ba50 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1b9fa:	617b      	str	r3, [r7, #20]
   1b9fc:	2302      	movs	r3, #2
   1b9fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ba02:	480c      	ldr	r0, [pc, #48]	; (1ba34 <bus_fault.constprop.0+0x10c>)
   1ba04:	613b      	str	r3, [r7, #16]
   1ba06:	f107 0210 	add.w	r2, r7, #16
   1ba0a:	f00a fc00 	bl	2620e <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   1ba0e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1ba10:	4a09      	ldr	r2, [pc, #36]	; (1ba38 <bus_fault.constprop.0+0x110>)

	return reason;
}
   1ba12:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1ba14:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1ba16:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1ba1a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1ba1c:	7028      	strb	r0, [r5, #0]
}
   1ba1e:	46bd      	mov	sp, r7
   1ba20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1ba24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ba26:	049b      	lsls	r3, r3, #18
   1ba28:	d5f1      	bpl.n	1ba0e <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1ba2a:	4b0a      	ldr	r3, [pc, #40]	; (1ba54 <bus_fault.constprop.0+0x12c>)
   1ba2c:	e7e5      	b.n	1b9fa <bus_fault.constprop.0+0xd2>
   1ba2e:	bf00      	nop
   1ba30:	000297c4 	.word	0x000297c4
   1ba34:	00028d00 	.word	0x00028d00
   1ba38:	e000ed00 	.word	0xe000ed00
   1ba3c:	000297da 	.word	0x000297da
   1ba40:	00029735 	.word	0x00029735
   1ba44:	000297eb 	.word	0x000297eb
   1ba48:	00029804 	.word	0x00029804
   1ba4c:	00029819 	.word	0x00029819
   1ba50:	00029834 	.word	0x00029834
   1ba54:	00029795 	.word	0x00029795

0001ba58 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1ba58:	b510      	push	{r4, lr}
   1ba5a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1ba5c:	2402      	movs	r4, #2
   1ba5e:	4b3a      	ldr	r3, [pc, #232]	; (1bb48 <usage_fault.constprop.0+0xf0>)
   1ba60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ba64:	4839      	ldr	r0, [pc, #228]	; (1bb4c <usage_fault.constprop.0+0xf4>)
   1ba66:	aa04      	add	r2, sp, #16
   1ba68:	9305      	str	r3, [sp, #20]
   1ba6a:	9404      	str	r4, [sp, #16]
   1ba6c:	f00a fbcf 	bl	2620e <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1ba70:	4b37      	ldr	r3, [pc, #220]	; (1bb50 <usage_fault.constprop.0+0xf8>)
   1ba72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ba74:	019b      	lsls	r3, r3, #6
   1ba76:	d508      	bpl.n	1ba8a <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   1ba78:	4b36      	ldr	r3, [pc, #216]	; (1bb54 <usage_fault.constprop.0+0xfc>)
   1ba7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ba7e:	4833      	ldr	r0, [pc, #204]	; (1bb4c <usage_fault.constprop.0+0xf4>)
   1ba80:	aa04      	add	r2, sp, #16
   1ba82:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1ba86:	f00a fbc2 	bl	2620e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1ba8a:	4b31      	ldr	r3, [pc, #196]	; (1bb50 <usage_fault.constprop.0+0xf8>)
   1ba8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ba8e:	01dc      	lsls	r4, r3, #7
   1ba90:	d509      	bpl.n	1baa6 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   1ba92:	4b31      	ldr	r3, [pc, #196]	; (1bb58 <usage_fault.constprop.0+0x100>)
   1ba94:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ba98:	9305      	str	r3, [sp, #20]
   1ba9a:	2302      	movs	r3, #2
   1ba9c:	482b      	ldr	r0, [pc, #172]	; (1bb4c <usage_fault.constprop.0+0xf4>)
   1ba9e:	aa04      	add	r2, sp, #16
   1baa0:	9304      	str	r3, [sp, #16]
   1baa2:	f00a fbb4 	bl	2620e <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1baa6:	4b2a      	ldr	r3, [pc, #168]	; (1bb50 <usage_fault.constprop.0+0xf8>)
   1baa8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1baaa:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   1baae:	d009      	beq.n	1bac4 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1bab0:	2402      	movs	r4, #2
   1bab2:	4b2a      	ldr	r3, [pc, #168]	; (1bb5c <usage_fault.constprop.0+0x104>)
   1bab4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bab8:	4824      	ldr	r0, [pc, #144]	; (1bb4c <usage_fault.constprop.0+0xf4>)
   1baba:	aa04      	add	r2, sp, #16
   1babc:	9305      	str	r3, [sp, #20]
   1babe:	9404      	str	r4, [sp, #16]
   1bac0:	f00a fba5 	bl	2620e <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1bac4:	4b22      	ldr	r3, [pc, #136]	; (1bb50 <usage_fault.constprop.0+0xf8>)
   1bac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bac8:	0318      	lsls	r0, r3, #12
   1baca:	d509      	bpl.n	1bae0 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
   1bacc:	4b24      	ldr	r3, [pc, #144]	; (1bb60 <usage_fault.constprop.0+0x108>)
   1bace:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bad2:	9305      	str	r3, [sp, #20]
   1bad4:	2302      	movs	r3, #2
   1bad6:	481d      	ldr	r0, [pc, #116]	; (1bb4c <usage_fault.constprop.0+0xf4>)
   1bad8:	aa04      	add	r2, sp, #16
   1bada:	9304      	str	r3, [sp, #16]
   1badc:	f00a fb97 	bl	2620e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1bae0:	4b1b      	ldr	r3, [pc, #108]	; (1bb50 <usage_fault.constprop.0+0xf8>)
   1bae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bae4:	0359      	lsls	r1, r3, #13
   1bae6:	d509      	bpl.n	1bafc <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1bae8:	4b1e      	ldr	r3, [pc, #120]	; (1bb64 <usage_fault.constprop.0+0x10c>)
   1baea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1baee:	9305      	str	r3, [sp, #20]
   1baf0:	2302      	movs	r3, #2
   1baf2:	4816      	ldr	r0, [pc, #88]	; (1bb4c <usage_fault.constprop.0+0xf4>)
   1baf4:	aa04      	add	r2, sp, #16
   1baf6:	9304      	str	r3, [sp, #16]
   1baf8:	f00a fb89 	bl	2620e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1bafc:	4b14      	ldr	r3, [pc, #80]	; (1bb50 <usage_fault.constprop.0+0xf8>)
   1bafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bb00:	039a      	lsls	r2, r3, #14
   1bb02:	d509      	bpl.n	1bb18 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1bb04:	4b18      	ldr	r3, [pc, #96]	; (1bb68 <usage_fault.constprop.0+0x110>)
   1bb06:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bb0a:	9305      	str	r3, [sp, #20]
   1bb0c:	2302      	movs	r3, #2
   1bb0e:	480f      	ldr	r0, [pc, #60]	; (1bb4c <usage_fault.constprop.0+0xf4>)
   1bb10:	aa04      	add	r2, sp, #16
   1bb12:	9304      	str	r3, [sp, #16]
   1bb14:	f00a fb7b 	bl	2620e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1bb18:	4b0d      	ldr	r3, [pc, #52]	; (1bb50 <usage_fault.constprop.0+0xf8>)
   1bb1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bb1c:	03db      	lsls	r3, r3, #15
   1bb1e:	d509      	bpl.n	1bb34 <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1bb20:	4b12      	ldr	r3, [pc, #72]	; (1bb6c <usage_fault.constprop.0+0x114>)
   1bb22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bb26:	9305      	str	r3, [sp, #20]
   1bb28:	2302      	movs	r3, #2
   1bb2a:	4808      	ldr	r0, [pc, #32]	; (1bb4c <usage_fault.constprop.0+0xf4>)
   1bb2c:	aa04      	add	r2, sp, #16
   1bb2e:	9304      	str	r3, [sp, #16]
   1bb30:	f00a fb6d 	bl	2620e <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1bb34:	4a06      	ldr	r2, [pc, #24]	; (1bb50 <usage_fault.constprop.0+0xf8>)

	return reason;
}
   1bb36:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1bb38:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1bb3a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1bb3e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1bb42:	6293      	str	r3, [r2, #40]	; 0x28
}
   1bb44:	b006      	add	sp, #24
   1bb46:	bd10      	pop	{r4, pc}
   1bb48:	0002984c 	.word	0x0002984c
   1bb4c:	00028d00 	.word	0x00028d00
   1bb50:	e000ed00 	.word	0xe000ed00
   1bb54:	00029864 	.word	0x00029864
   1bb58:	00029877 	.word	0x00029877
   1bb5c:	00029891 	.word	0x00029891
   1bb60:	000298bb 	.word	0x000298bb
   1bb64:	000298d9 	.word	0x000298d9
   1bb68:	000298fe 	.word	0x000298fe
   1bb6c:	00029918 	.word	0x00029918

0001bb70 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1bb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bb74:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1bb76:	4b7d      	ldr	r3, [pc, #500]	; (1bd6c <z_arm_fault+0x1fc>)
{
   1bb78:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1bb7a:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
   1bb7e:	468a      	mov	sl, r1
   1bb80:	4616      	mov	r6, r2
   1bb82:	2500      	movs	r5, #0
   1bb84:	af00      	add	r7, sp, #0
   1bb86:	f3c9 0808 	ubfx	r8, r9, #0, #9
   1bb8a:	f385 8811 	msr	BASEPRI, r5
   1bb8e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1bb92:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1bb96:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1bb9a:	d125      	bne.n	1bbe8 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1bb9c:	07d3      	lsls	r3, r2, #31
   1bb9e:	d423      	bmi.n	1bbe8 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1bba0:	0650      	lsls	r0, r2, #25
   1bba2:	d403      	bmi.n	1bbac <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1bba4:	0711      	lsls	r1, r2, #28
   1bba6:	d40f      	bmi.n	1bbc8 <z_arm_fault+0x58>
			*nested_exc = true;
   1bba8:	2501      	movs	r5, #1
   1bbaa:	e00f      	b.n	1bbcc <z_arm_fault+0x5c>
		PR_FAULT_INFO("Exception occurred in Secure State");
   1bbac:	4b70      	ldr	r3, [pc, #448]	; (1bd70 <z_arm_fault+0x200>)
   1bbae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bbb2:	61fb      	str	r3, [r7, #28]
   1bbb4:	2302      	movs	r3, #2
   1bbb6:	486f      	ldr	r0, [pc, #444]	; (1bd74 <z_arm_fault+0x204>)
   1bbb8:	61bb      	str	r3, [r7, #24]
   1bbba:	f107 0218 	add.w	r2, r7, #24
   1bbbe:	f00a fb26 	bl	2620e <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1bbc2:	f016 0604 	ands.w	r6, r6, #4
   1bbc6:	d000      	beq.n	1bbca <z_arm_fault+0x5a>
			ptr_esf = (z_arch_esf_t *)psp;
   1bbc8:	4654      	mov	r4, sl
	*nested_exc = false;
   1bbca:	2500      	movs	r5, #0
	*recoverable = false;
   1bbcc:	2300      	movs	r3, #0
   1bbce:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   1bbd0:	f1a8 0303 	sub.w	r3, r8, #3
   1bbd4:	2b09      	cmp	r3, #9
   1bbd6:	f200 80a8 	bhi.w	1bd2a <z_arm_fault+0x1ba>
   1bbda:	e8df f003 	tbb	[pc, r3]
   1bbde:	9b07      	.short	0x9b07
   1bbe0:	a6a6979e 	.word	0xa6a6979e
   1bbe4:	a1a6a6a6 	.word	0xa1a6a6a6
		return NULL;
   1bbe8:	462c      	mov	r4, r5
   1bbea:	e7ef      	b.n	1bbcc <z_arm_fault+0x5c>
	PR_FAULT_INFO("***** HARD FAULT *****");
   1bbec:	46e9      	mov	r9, sp
   1bbee:	f04f 0802 	mov.w	r8, #2
   1bbf2:	4b61      	ldr	r3, [pc, #388]	; (1bd78 <z_arm_fault+0x208>)
   1bbf4:	f107 0218 	add.w	r2, r7, #24
   1bbf8:	61fb      	str	r3, [r7, #28]
   1bbfa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bbfe:	485d      	ldr	r0, [pc, #372]	; (1bd74 <z_arm_fault+0x204>)
   1bc00:	f8c7 8018 	str.w	r8, [r7, #24]
   1bc04:	f00a fb03 	bl	2620e <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   1bc08:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1bc0a:	4e58      	ldr	r6, [pc, #352]	; (1bd6c <z_arm_fault+0x1fc>)
	*recoverable = false;
   1bc0c:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1bc0e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1bc10:	079a      	lsls	r2, r3, #30
   1bc12:	d50b      	bpl.n	1bc2c <z_arm_fault+0xbc>
		PR_EXC("  Bus fault on vector table read");
   1bc14:	4b59      	ldr	r3, [pc, #356]	; (1bd7c <z_arm_fault+0x20c>)
		PR_EXC("  Debug event");
   1bc16:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   1bc1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc1e:	4855      	ldr	r0, [pc, #340]	; (1bd74 <z_arm_fault+0x204>)
   1bc20:	f107 0218 	add.w	r2, r7, #24
   1bc24:	f00a faf3 	bl	2620e <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1bc28:	2300      	movs	r3, #0
   1bc2a:	e038      	b.n	1bc9e <z_arm_fault+0x12e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1bc2c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1bc2e:	2b00      	cmp	r3, #0
   1bc30:	da01      	bge.n	1bc36 <z_arm_fault+0xc6>
		PR_EXC("  Debug event");
   1bc32:	4b53      	ldr	r3, [pc, #332]	; (1bd80 <z_arm_fault+0x210>)
   1bc34:	e7ef      	b.n	1bc16 <z_arm_fault+0xa6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1bc36:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1bc38:	005b      	lsls	r3, r3, #1
   1bc3a:	d5f5      	bpl.n	1bc28 <z_arm_fault+0xb8>
		PR_EXC("  Fault escalation (see below)");
   1bc3c:	4b51      	ldr	r3, [pc, #324]	; (1bd84 <z_arm_fault+0x214>)
   1bc3e:	f107 0218 	add.w	r2, r7, #24
   1bc42:	e9c7 8306 	strd	r8, r3, [r7, #24]
   1bc46:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc4a:	484a      	ldr	r0, [pc, #296]	; (1bd74 <z_arm_fault+0x204>)
   1bc4c:	f00a fadf 	bl	2620e <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1bc50:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   1bc52:	69a2      	ldr	r2, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1bc54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1bc58:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1bc5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bc5e:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1bc62:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1bc64:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1bc68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1bc6c:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1bc6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bc72:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1bc76:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1bc7a:	429a      	cmp	r2, r3
   1bc7c:	d131      	bne.n	1bce2 <z_arm_fault+0x172>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1bc7e:	b088      	sub	sp, #32
   1bc80:	6823      	ldr	r3, [r4, #0]
   1bc82:	466a      	mov	r2, sp
   1bc84:	4940      	ldr	r1, [pc, #256]	; (1bd88 <z_arm_fault+0x218>)
   1bc86:	483b      	ldr	r0, [pc, #236]	; (1bd74 <z_arm_fault+0x204>)
   1bc88:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1bc8c:	2303      	movs	r3, #3
   1bc8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bc92:	f842 3f10 	str.w	r3, [r2, #16]!
   1bc96:	f00a faba 	bl	2620e <z_log_msg_static_create.constprop.0>
   1bc9a:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   1bc9c:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1bc9e:	79fa      	ldrb	r2, [r7, #7]
   1bca0:	b9da      	cbnz	r2, 1bcda <z_arm_fault+0x16a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1bca2:	f107 0608 	add.w	r6, r7, #8
   1bca6:	f104 0c20 	add.w	ip, r4, #32
   1bcaa:	4632      	mov	r2, r6
   1bcac:	6820      	ldr	r0, [r4, #0]
   1bcae:	6861      	ldr	r1, [r4, #4]
   1bcb0:	3408      	adds	r4, #8
   1bcb2:	c203      	stmia	r2!, {r0, r1}
   1bcb4:	4564      	cmp	r4, ip
   1bcb6:	4616      	mov	r6, r2
   1bcb8:	d1f7      	bne.n	1bcaa <z_arm_fault+0x13a>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1bcba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1bcbc:	2d00      	cmp	r5, #0
   1bcbe:	d050      	beq.n	1bd62 <z_arm_fault+0x1f2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1bcc0:	f3c2 0108 	ubfx	r1, r2, #0, #9
   1bcc4:	b921      	cbnz	r1, 1bcd0 <z_arm_fault+0x160>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1bcc6:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   1bcca:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1bcce:	627a      	str	r2, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1bcd0:	4618      	mov	r0, r3
   1bcd2:	f107 0108 	add.w	r1, r7, #8
   1bcd6:	f7ff fc03 	bl	1b4e0 <z_arm_fatal_error>
}
   1bcda:	3728      	adds	r7, #40	; 0x28
   1bcdc:	46bd      	mov	sp, r7
   1bcde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1bce2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1bce4:	b2db      	uxtb	r3, r3
   1bce6:	b123      	cbz	r3, 1bcf2 <z_arm_fault+0x182>
			reason = mem_manage_fault(esf, 1, recoverable);
   1bce8:	2001      	movs	r0, #1
   1bcea:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1bcec:	f7ff fd80 	bl	1b7f0 <mem_manage_fault.constprop.0>
   1bcf0:	e00e      	b.n	1bd10 <z_arm_fault+0x1a0>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1bcf2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1bcf4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   1bcf8:	d004      	beq.n	1bd04 <z_arm_fault+0x194>
			reason = bus_fault(esf, 1, recoverable);
   1bcfa:	2001      	movs	r0, #1
   1bcfc:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
   1bcfe:	f7ff fe13 	bl	1b928 <bus_fault.constprop.0>
   1bd02:	e005      	b.n	1bd10 <z_arm_fault+0x1a0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1bd04:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1bd06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1bd0a:	d38d      	bcc.n	1bc28 <z_arm_fault+0xb8>
			reason = usage_fault(esf);
   1bd0c:	f7ff fea4 	bl	1ba58 <usage_fault.constprop.0>
   1bd10:	4603      	mov	r3, r0
   1bd12:	e7c4      	b.n	1bc9e <z_arm_fault+0x12e>
		reason = mem_manage_fault(esf, 0, recoverable);
   1bd14:	2000      	movs	r0, #0
   1bd16:	1df9      	adds	r1, r7, #7
   1bd18:	e7e8      	b.n	1bcec <z_arm_fault+0x17c>
		reason = bus_fault(esf, 0, recoverable);
   1bd1a:	2000      	movs	r0, #0
   1bd1c:	1df9      	adds	r1, r7, #7
   1bd1e:	e7ee      	b.n	1bcfe <z_arm_fault+0x18e>
	PR_FAULT_INFO(
   1bd20:	4b1a      	ldr	r3, [pc, #104]	; (1bd8c <z_arm_fault+0x21c>)
   1bd22:	61fb      	str	r3, [r7, #28]
   1bd24:	2302      	movs	r3, #2
   1bd26:	61bb      	str	r3, [r7, #24]
   1bd28:	e777      	b.n	1bc1a <z_arm_fault+0xaa>
	PR_FAULT_INFO("***** %s %d) *****",
   1bd2a:	4a19      	ldr	r2, [pc, #100]	; (1bd90 <z_arm_fault+0x220>)
   1bd2c:	466e      	mov	r6, sp
   1bd2e:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
   1bd32:	b08a      	sub	sp, #40	; 0x28
   1bd34:	4b17      	ldr	r3, [pc, #92]	; (1bd94 <z_arm_fault+0x224>)
   1bd36:	bf18      	it	ne
   1bd38:	4613      	movne	r3, r2
   1bd3a:	466a      	mov	r2, sp
   1bd3c:	4916      	ldr	r1, [pc, #88]	; (1bd98 <z_arm_fault+0x228>)
   1bd3e:	480d      	ldr	r0, [pc, #52]	; (1bd74 <z_arm_fault+0x204>)
   1bd40:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1bd44:	f1a8 0310 	sub.w	r3, r8, #16
   1bd48:	61d3      	str	r3, [r2, #28]
   1bd4a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1bd4e:	8413      	strh	r3, [r2, #32]
   1bd50:	4b12      	ldr	r3, [pc, #72]	; (1bd9c <z_arm_fault+0x22c>)
   1bd52:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1bd56:	f842 3f10 	str.w	r3, [r2, #16]!
   1bd5a:	f00a fa58 	bl	2620e <z_log_msg_static_create.constprop.0>
   1bd5e:	46b5      	mov	sp, r6
}
   1bd60:	e762      	b.n	1bc28 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1bd62:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
   1bd66:	f022 0201 	bic.w	r2, r2, #1
   1bd6a:	e7b0      	b.n	1bcce <z_arm_fault+0x15e>
   1bd6c:	e000ed00 	.word	0xe000ed00
   1bd70:	00029971 	.word	0x00029971
   1bd74:	00028d00 	.word	0x00028d00
   1bd78:	00029994 	.word	0x00029994
   1bd7c:	000299ab 	.word	0x000299ab
   1bd80:	000299cc 	.word	0x000299cc
   1bd84:	000299da 	.word	0x000299da
   1bd88:	000299f9 	.word	0x000299f9
   1bd8c:	00029a15 	.word	0x00029a15
   1bd90:	00029958 	.word	0x00029958
   1bd94:	00029943 	.word	0x00029943
   1bd98:	00029a39 	.word	0x00029a39
   1bd9c:	01000004 	.word	0x01000004

0001bda0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1bda0:	4b04      	ldr	r3, [pc, #16]	; (1bdb4 <z_arm_fault_init+0x14>)
   1bda2:	695a      	ldr	r2, [r3, #20]
   1bda4:	f042 0210 	orr.w	r2, r2, #16
   1bda8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1bdaa:	695a      	ldr	r2, [r3, #20]
   1bdac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1bdb0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1bdb2:	4770      	bx	lr
   1bdb4:	e000ed00 	.word	0xe000ed00

0001bdb8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1bdb8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1bdbc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1bdc0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1bdc2:	4672      	mov	r2, lr
	bl z_arm_fault
   1bdc4:	f7ff fed4 	bl	1bb70 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1bdc8:	bd01      	pop	{r0, pc}
   1bdca:	bf00      	nop

0001bdcc <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1bdcc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bdce:	2120      	movs	r1, #32
   1bdd0:	4803      	ldr	r0, [pc, #12]	; (1bde0 <z_arm_interrupt_init+0x14>)
   1bdd2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1bdd4:	3301      	adds	r3, #1
   1bdd6:	2b41      	cmp	r3, #65	; 0x41
   1bdd8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1bddc:	d1f9      	bne.n	1bdd2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1bdde:	4770      	bx	lr
   1bde0:	e000e100 	.word	0xe000e100

0001bde4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1bde4:	2000      	movs	r0, #0
    msr CONTROL, r0
   1bde6:	f380 8814 	msr	CONTROL, r0
    isb
   1bdea:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   1bdee:	2000      	movs	r0, #0
    msr MSPLIM, r0
   1bdf0:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   1bdf4:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1bdf8:	f7fe fc54 	bl	1a6a4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1bdfc:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1bdfe:	490e      	ldr	r1, [pc, #56]	; (1be38 <__start+0x54>)
    str r0, [r1]
   1be00:	6008      	str	r0, [r1, #0]
    dsb
   1be02:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1be06:	480d      	ldr	r0, [pc, #52]	; (1be3c <__start+0x58>)
    msr msp, r0
   1be08:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1be0c:	f000 f83e 	bl	1be8c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1be10:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1be12:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1be16:	480a      	ldr	r0, [pc, #40]	; (1be40 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1be18:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1be1c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1be1e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1be22:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1be26:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1be28:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1be2a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1be2e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1be32:	f7ff fc05 	bl	1b640 <z_arm_prep_c>
   1be36:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   1be38:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1be3c:	2000fb38 	.word	0x2000fb38
    ldr r0, =z_interrupt_stacks
   1be40:	2000e1f8 	.word	0x2000e1f8

0001be44 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1be44:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1be48:	4905      	ldr	r1, [pc, #20]	; (1be60 <sys_arch_reboot+0x1c>)
   1be4a:	4b06      	ldr	r3, [pc, #24]	; (1be64 <sys_arch_reboot+0x20>)
   1be4c:	68ca      	ldr	r2, [r1, #12]
   1be4e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1be52:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1be54:	60cb      	str	r3, [r1, #12]
   1be56:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1be5a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1be5c:	e7fd      	b.n	1be5a <sys_arch_reboot+0x16>
   1be5e:	bf00      	nop
   1be60:	e000ed00 	.word	0xe000ed00
   1be64:	05fa0004 	.word	0x05fa0004

0001be68 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   1be68:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   1be6a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1be6c:	4906      	ldr	r1, [pc, #24]	; (1be88 <z_arm_clear_arm_mpu_config+0x20>)
   1be6e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   1be72:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   1be76:	4293      	cmp	r3, r2
   1be78:	db00      	blt.n	1be7c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1be7a:	4770      	bx	lr
  mpu->RNR = rnr;
   1be7c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   1be80:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   1be84:	3301      	adds	r3, #1
   1be86:	e7f6      	b.n	1be76 <z_arm_clear_arm_mpu_config+0xe>
   1be88:	e000ed00 	.word	0xe000ed00

0001be8c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1be8c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1be8e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1be90:	2400      	movs	r4, #0
   1be92:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1be96:	f7ff ffe7 	bl	1be68 <z_arm_clear_arm_mpu_config>
   1be9a:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1be9c:	f04f 30ff 	mov.w	r0, #4294967295
   1bea0:	4a0c      	ldr	r2, [pc, #48]	; (1bed4 <z_arm_init_arch_hw_at_boot+0x48>)
   1bea2:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1bea6:	3301      	adds	r3, #1
   1bea8:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   1beaa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1beae:	d1f8      	bne.n	1bea2 <z_arm_init_arch_hw_at_boot+0x16>
   1beb0:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1beb2:	f04f 30ff 	mov.w	r0, #4294967295
   1beb6:	4a07      	ldr	r2, [pc, #28]	; (1bed4 <z_arm_init_arch_hw_at_boot+0x48>)
   1beb8:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1bebc:	3301      	adds	r3, #1
   1bebe:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1bec0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1bec4:	d1f8      	bne.n	1beb8 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1bec6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1bec8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1becc:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1bed0:	bd10      	pop	{r4, pc}
   1bed2:	bf00      	nop
   1bed4:	e000e100 	.word	0xe000e100

0001bed8 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1bed8:	4b08      	ldr	r3, [pc, #32]	; (1befc <z_impl_k_thread_abort+0x24>)
   1beda:	689b      	ldr	r3, [r3, #8]
   1bedc:	4283      	cmp	r3, r0
   1bede:	d10b      	bne.n	1bef8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1bee0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1bee4:	b143      	cbz	r3, 1bef8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1bee6:	4b06      	ldr	r3, [pc, #24]	; (1bf00 <z_impl_k_thread_abort+0x28>)
   1bee8:	685a      	ldr	r2, [r3, #4]
   1beea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1beee:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1bef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1bef2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1bef6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   1bef8:	f008 bb78 	b.w	245ec <z_thread_abort>
   1befc:	2000d848 	.word	0x2000d848
   1bf00:	e000ed00 	.word	0xe000ed00

0001bf04 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1bf04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1bf06:	4c09      	ldr	r4, [pc, #36]	; (1bf2c <z_arm_configure_static_mpu_regions+0x28>)
   1bf08:	4a09      	ldr	r2, [pc, #36]	; (1bf30 <z_arm_configure_static_mpu_regions+0x2c>)
   1bf0a:	4623      	mov	r3, r4
   1bf0c:	2101      	movs	r1, #1
   1bf0e:	4809      	ldr	r0, [pc, #36]	; (1bf34 <z_arm_configure_static_mpu_regions+0x30>)
   1bf10:	f000 f92a 	bl	1c168 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1bf14:	2300      	movs	r3, #0
   1bf16:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1bf18:	4b07      	ldr	r3, [pc, #28]	; (1bf38 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1bf1a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1bf1c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1bf1e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1bf20:	9301      	str	r3, [sp, #4]
   1bf22:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1bf24:	f000 f92a 	bl	1c17c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1bf28:	b004      	add	sp, #16
   1bf2a:	bd10      	pop	{r4, pc}
   1bf2c:	20040000 	.word	0x20040000
   1bf30:	2000c580 	.word	0x2000c580
   1bf34:	00028de4 	.word	0x00028de4
   1bf38:	2000c938 	.word	0x2000c938

0001bf3c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   1bf3c:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   1bf3e:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1bf40:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1bf42:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1bf46:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   1bf4a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1bf4c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1bf4e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1bf50:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   1bf54:	4905      	ldr	r1, [pc, #20]	; (1bf6c <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1bf56:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1bf5a:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   1bf5e:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   1bf62:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   1bf66:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1bf6a:	bd10      	pop	{r4, pc}
   1bf6c:	e000ed00 	.word	0xe000ed00

0001bf70 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   1bf70:	b580      	push	{r7, lr}
   1bf72:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1bf74:	b088      	sub	sp, #32
   1bf76:	466a      	mov	r2, sp
   1bf78:	4b07      	ldr	r3, [pc, #28]	; (1bf98 <region_allocate_and_init.part.0+0x28>)
   1bf7a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bf7e:	2303      	movs	r3, #3
   1bf80:	f842 3f10 	str.w	r3, [r2, #16]!
   1bf84:	2300      	movs	r3, #0
   1bf86:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bf8a:	4804      	ldr	r0, [pc, #16]	; (1bf9c <region_allocate_and_init.part.0+0x2c>)
   1bf8c:	f7fe fe12 	bl	1abb4 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   1bf90:	f06f 0015 	mvn.w	r0, #21
   1bf94:	46bd      	mov	sp, r7
   1bf96:	bd80      	pop	{r7, pc}
   1bf98:	00029a50 	.word	0x00029a50
   1bf9c:	00028c90 	.word	0x00028c90

0001bfa0 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1bfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfa4:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1bfa6:	4606      	mov	r6, r0
   1bfa8:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1bfac:	b087      	sub	sp, #28
	MPU->RNR = rnr;
   1bfae:	4d5f      	ldr	r5, [pc, #380]	; (1c12c <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1bfb0:	af00      	add	r7, sp, #0
   1bfb2:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
   1bfb4:	687b      	ldr	r3, [r7, #4]
   1bfb6:	4599      	cmp	r9, r3
   1bfb8:	da35      	bge.n	1c026 <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
   1bfba:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1bfbe:	f1b8 0f00 	cmp.w	r8, #0
   1bfc2:	d054      	beq.n	1c06e <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
   1bfc4:	f1b8 0f1f 	cmp.w	r8, #31
   1bfc8:	d91b      	bls.n	1c002 <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
   1bfca:	f018 0f1f 	tst.w	r8, #31
   1bfce:	d118      	bne.n	1c002 <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
   1bfd0:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   1bfd4:	f01b 0f1f 	tst.w	fp, #31
   1bfd8:	d113      	bne.n	1c002 <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1bfda:	4658      	mov	r0, fp
   1bfdc:	f00a f91c 	bl	26218 <arm_cmse_mpu_region_get>
   1bfe0:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1bfe2:	eb08 000b 	add.w	r0, r8, fp
   1bfe6:	3801      	subs	r0, #1
   1bfe8:	f00a f916 	bl	26218 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1bfec:	4582      	cmp	sl, r0
   1bfee:	d01f      	beq.n	1c030 <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   1bff0:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1bff4:	466c      	mov	r4, sp
   1bff6:	b088      	sub	sp, #32
   1bff8:	466a      	mov	r2, sp
   1bffa:	494d      	ldr	r1, [pc, #308]	; (1c130 <mpu_configure_regions_and_partition.constprop.0+0x190>)
   1bffc:	e9c2 1a05 	strd	r1, sl, [r2, #20]
   1c000:	e005      	b.n	1c00e <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1c002:	466c      	mov	r4, sp
   1c004:	b088      	sub	sp, #32
   1c006:	466a      	mov	r2, sp
   1c008:	4b4a      	ldr	r3, [pc, #296]	; (1c134 <mpu_configure_regions_and_partition.constprop.0+0x194>)
   1c00a:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
   1c00e:	2303      	movs	r3, #3
   1c010:	f842 3f10 	str.w	r3, [r2, #16]!
   1c014:	2300      	movs	r3, #0
   1c016:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c01a:	4847      	ldr	r0, [pc, #284]	; (1c138 <mpu_configure_regions_and_partition.constprop.0+0x198>)
   1c01c:	f7fe fdca 	bl	1abb4 <z_impl_z_log_msg_static_create>
   1c020:	46a5      	mov	sp, r4
			return -EINVAL;
   1c022:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1c026:	4620      	mov	r0, r4
   1c028:	371c      	adds	r7, #28
   1c02a:	46bd      	mov	sp, r7
   1c02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   1c030:	f11a 0f16 	cmn.w	sl, #22
   1c034:	d0de      	beq.n	1bff4 <mpu_configure_regions_and_partition.constprop.0+0x54>
   1c036:	4554      	cmp	r4, sl
   1c038:	dddc      	ble.n	1bff4 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
   1c03a:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1c03e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   1c042:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
   1c046:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1c04a:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1c04e:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1c052:	e9d6 2100 	ldrd	r2, r1, [r6]
   1c056:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
   1c058:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1c05a:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
   1c05e:	d11e      	bne.n	1c09e <mpu_configure_regions_and_partition.constprop.0+0xfe>
   1c060:	45d8      	cmp	r8, fp
   1c062:	d108      	bne.n	1c076 <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
   1c064:	4631      	mov	r1, r6
   1c066:	fa5f f08a 	uxtb.w	r0, sl
   1c06a:	f00a f8de 	bl	2622a <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1c06e:	f109 0901 	add.w	r9, r9, #1
   1c072:	360c      	adds	r6, #12
   1c074:	e79e      	b.n	1bfb4 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
   1c076:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1c07a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   1c07e:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   1c082:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   1c086:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
   1c088:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
   1c08a:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   1c08e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   1c090:	f00a f8cb 	bl	2622a <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1c094:	f110 0f16 	cmn.w	r0, #22
   1c098:	d0c3      	beq.n	1c022 <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
   1c09a:	1c44      	adds	r4, r0, #1
   1c09c:	e7e7      	b.n	1c06e <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
   1c09e:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
   1c0a0:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
   1c0a2:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1c0a4:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   1c0a8:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   1c0ac:	d108      	bne.n	1c0c0 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
   1c0ae:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1c0b2:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   1c0b4:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1c0b8:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   1c0ba:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   1c0be:	e7e7      	b.n	1c090 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
   1c0c0:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   1c0c4:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1c0c8:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
   1c0ca:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1c0ce:	4631      	mov	r1, r6
   1c0d0:	f00a f8ab 	bl	2622a <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1c0d4:	f110 0f16 	cmn.w	r0, #22
   1c0d8:	d0a3      	beq.n	1c022 <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
   1c0da:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1c0de:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1c0e2:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   1c0e4:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
   1c0e8:	f362 0304 	bfi	r3, r2, #0, #5
   1c0ec:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
   1c0ee:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1c0f2:	7c3a      	ldrb	r2, [r7, #16]
   1c0f4:	085b      	lsrs	r3, r3, #1
   1c0f6:	f363 1247 	bfi	r2, r3, #5, #3
   1c0fa:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
   1c0fc:	e9d6 3200 	ldrd	r3, r2, [r6]
   1c100:	4413      	add	r3, r2
   1c102:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   1c104:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   1c108:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1c10a:	4443      	add	r3, r8
   1c10c:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
   1c110:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   1c112:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1c116:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   1c118:	617b      	str	r3, [r7, #20]
   1c11a:	d902      	bls.n	1c122 <mpu_configure_regions_and_partition.constprop.0+0x182>
   1c11c:	f7ff ff28 	bl	1bf70 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   1c120:	e7b8      	b.n	1c094 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
   1c122:	f107 0108 	add.w	r1, r7, #8
   1c126:	f7ff ff09 	bl	1bf3c <region_init>
   1c12a:	e7b6      	b.n	1c09a <mpu_configure_regions_and_partition.constprop.0+0xfa>
   1c12c:	e000ed00 	.word	0xe000ed00
   1c130:	00029a99 	.word	0x00029a99
   1c134:	00029a76 	.word	0x00029a76
   1c138:	00028c90 	.word	0x00028c90

0001c13c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1c13c:	2205      	movs	r2, #5
   1c13e:	4b04      	ldr	r3, [pc, #16]	; (1c150 <arm_core_mpu_enable+0x14>)
   1c140:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1c144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c148:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1c14c:	4770      	bx	lr
   1c14e:	bf00      	nop
   1c150:	e000ed00 	.word	0xe000ed00

0001c154 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1c154:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1c158:	2200      	movs	r2, #0
   1c15a:	4b02      	ldr	r3, [pc, #8]	; (1c164 <arm_core_mpu_disable+0x10>)
   1c15c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   1c160:	4770      	bx	lr
   1c162:	bf00      	nop
   1c164:	e000ed00 	.word	0xe000ed00

0001c168 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1c168:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1c16a:	4c03      	ldr	r4, [pc, #12]	; (1c178 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1c16c:	7822      	ldrb	r2, [r4, #0]
   1c16e:	f7ff ff17 	bl	1bfa0 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1c172:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1c174:	bd10      	pop	{r4, pc}
   1c176:	bf00      	nop
   1c178:	2000d89e 	.word	0x2000d89e

0001c17c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   1c17c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c180:	4d29      	ldr	r5, [pc, #164]	; (1c228 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
   1c182:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
   1c184:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1c186:	f04f 0800 	mov.w	r8, #0
   1c18a:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
   1c18c:	4f27      	ldr	r7, [pc, #156]	; (1c22c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1c18e:	45d0      	cmp	r8, sl
   1c190:	da1b      	bge.n	1c1ca <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   1c192:	f8d6 9004 	ldr.w	r9, [r6, #4]
   1c196:	f1b9 0f00 	cmp.w	r9, #0
   1c19a:	d03f      	beq.n	1c21c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1c19c:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1c19e:	4608      	mov	r0, r1
   1c1a0:	9101      	str	r1, [sp, #4]
   1c1a2:	f00a f839 	bl	26218 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1c1a6:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1c1a8:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1c1aa:	eb09 0001 	add.w	r0, r9, r1
   1c1ae:	3801      	subs	r0, #1
   1c1b0:	f00a f832 	bl	26218 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1c1b4:	4284      	cmp	r4, r0
   1c1b6:	f04f 0214 	mov.w	r2, #20
   1c1ba:	4b1d      	ldr	r3, [pc, #116]	; (1c230 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
   1c1bc:	d008      	beq.n	1c1d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   1c1be:	fb02 f308 	mul.w	r3, r2, r8
   1c1c2:	f06f 0215 	mvn.w	r2, #21
   1c1c6:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   1c1ca:	b003      	add	sp, #12
   1c1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1c1d0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   1c1d4:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1c1d6:	d0f8      	beq.n	1c1ca <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1c1d8:	7819      	ldrb	r1, [r3, #0]
   1c1da:	42a1      	cmp	r1, r4
   1c1dc:	ddf5      	ble.n	1c1ca <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
   1c1de:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   1c1e2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   1c1e6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   1c1ea:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1c1ee:	f100 0108 	add.w	r1, r0, #8
   1c1f2:	7b00      	ldrb	r0, [r0, #12]
   1c1f4:	f364 0004 	bfi	r0, r4, #0, #5
   1c1f8:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   1c1fa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1c1fe:	790c      	ldrb	r4, [r1, #4]
   1c200:	0840      	lsrs	r0, r0, #1
   1c202:	f360 1447 	bfi	r4, r0, #5, #3
   1c206:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   1c208:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1c20c:	f021 011f 	bic.w	r1, r1, #31
   1c210:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
   1c212:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   1c216:	f021 011f 	bic.w	r1, r1, #31
   1c21a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1c21c:	f108 0801 	add.w	r8, r8, #1
   1c220:	3514      	adds	r5, #20
   1c222:	360c      	adds	r6, #12
   1c224:	e7b3      	b.n	1c18e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1c226:	bf00      	nop
   1c228:	2000d134 	.word	0x2000d134
   1c22c:	e000ed00 	.word	0xe000ed00
   1c230:	2000d89e 	.word	0x2000d89e

0001c234 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   1c234:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1c236:	4d0e      	ldr	r5, [pc, #56]	; (1c270 <z_arm_mpu_init+0x3c>)
   1c238:	682c      	ldr	r4, [r5, #0]
   1c23a:	2c10      	cmp	r4, #16
   1c23c:	d815      	bhi.n	1c26a <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1c23e:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   1c240:	f7ff ff88 	bl	1c154 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   1c244:	4b0b      	ldr	r3, [pc, #44]	; (1c274 <z_arm_mpu_init+0x40>)
   1c246:	4a0c      	ldr	r2, [pc, #48]	; (1c278 <z_arm_mpu_init+0x44>)
   1c248:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1c24c:	4284      	cmp	r4, r0
   1c24e:	d105      	bne.n	1c25c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1c250:	4b0a      	ldr	r3, [pc, #40]	; (1c27c <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1c252:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
   1c254:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   1c256:	f7ff ff71 	bl	1c13c <arm_core_mpu_enable>
}
   1c25a:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1c25c:	6869      	ldr	r1, [r5, #4]
   1c25e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1c262:	f7ff fe6b 	bl	1bf3c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1c266:	3001      	adds	r0, #1
   1c268:	e7f0      	b.n	1c24c <z_arm_mpu_init+0x18>
		return -1;
   1c26a:	f04f 30ff 	mov.w	r0, #4294967295
   1c26e:	e7f4      	b.n	1c25a <z_arm_mpu_init+0x26>
   1c270:	00028df0 	.word	0x00028df0
   1c274:	e000ed00 	.word	0xe000ed00
   1c278:	0044ffaa 	.word	0x0044ffaa
   1c27c:	2000d89e 	.word	0x2000d89e

0001c280 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1c280:	4b01      	ldr	r3, [pc, #4]	; (1c288 <__stdout_hook_install+0x8>)
   1c282:	6018      	str	r0, [r3, #0]
}
   1c284:	4770      	bx	lr
   1c286:	bf00      	nop
   1c288:	2000c590 	.word	0x2000c590

0001c28c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   1c28c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   1c28e:	4c07      	ldr	r4, [pc, #28]	; (1c2ac <_sbrk+0x20>)
   1c290:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1c292:	18c2      	adds	r2, r0, r3
   1c294:	4806      	ldr	r0, [pc, #24]	; (1c2b0 <_sbrk+0x24>)
   1c296:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1c29a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1c29e:	428a      	cmp	r2, r1
		heap_sz += count;
   1c2a0:	bf36      	itet	cc
   1c2a2:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   1c2a4:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1c2a8:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   1c2aa:	bd10      	pop	{r4, pc}
   1c2ac:	2000d148 	.word	0x2000d148
   1c2b0:	200107b8 	.word	0x200107b8

0001c2b4 <thingy91_board_init>:

	return 0;
}

static int thingy91_board_init(const struct device *dev)
{
   1c2b4:	b5b0      	push	{r4, r5, r7, lr}
	err = adp536x_init(ADP536X_I2C_DEVICE);
   1c2b6:	483e      	ldr	r0, [pc, #248]	; (1c3b0 <thingy91_board_init+0xfc>)
{
   1c2b8:	af00      	add	r7, sp, #0
	err = adp536x_init(ADP536X_I2C_DEVICE);
   1c2ba:	f7ff f8e3 	bl	1b484 <adp536x_init>
	if (err) {
   1c2be:	4604      	mov	r4, r0
   1c2c0:	b300      	cbz	r0, 1c304 <thingy91_board_init+0x50>
		LOG_ERR("ADP536X failed to initialize, error: %d\n", err);
   1c2c2:	466d      	mov	r5, sp
   1c2c4:	b088      	sub	sp, #32
   1c2c6:	466a      	mov	r2, sp
   1c2c8:	4b3a      	ldr	r3, [pc, #232]	; (1c3b4 <thingy91_board_init+0x100>)
		LOG_ERR("Could not enable fuel gauge: %d", err);
   1c2ca:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c2ce:	2303      	movs	r3, #3
   1c2d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c2d4:	4838      	ldr	r0, [pc, #224]	; (1c3b8 <thingy91_board_init+0x104>)
   1c2d6:	f842 3f10 	str.w	r3, [r2, #16]!
   1c2da:	f009 ffd5 	bl	26288 <z_log_msg_static_create.constprop.0>
   1c2de:	46ad      	mov	sp, r5
	int err;

	err = power_mgmt_init();
	if (err) {
		LOG_ERR("power_mgmt_init failed with error: %d", err);
   1c2e0:	466d      	mov	r5, sp
   1c2e2:	b088      	sub	sp, #32
   1c2e4:	466a      	mov	r2, sp
   1c2e6:	4b35      	ldr	r3, [pc, #212]	; (1c3bc <thingy91_board_init+0x108>)
   1c2e8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c2ec:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c2f0:	2303      	movs	r3, #3
   1c2f2:	4831      	ldr	r0, [pc, #196]	; (1c3b8 <thingy91_board_init+0x104>)
   1c2f4:	f842 3f10 	str.w	r3, [r2, #16]!
   1c2f8:	f009 ffc6 	bl	26288 <z_log_msg_static_create.constprop.0>
   1c2fc:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   1c2fe:	4620      	mov	r0, r4
   1c300:	46bd      	mov	sp, r7
   1c302:	bdb0      	pop	{r4, r5, r7, pc}
	err = adp536x_buck_1v8_set();
   1c304:	f009 ff50 	bl	261a8 <adp536x_buck_1v8_set>
	if (err) {
   1c308:	4604      	mov	r4, r0
   1c30a:	b120      	cbz	r0, 1c316 <thingy91_board_init+0x62>
		LOG_ERR("Could not set buck to 1.8 V, error: %d\n", err);
   1c30c:	466d      	mov	r5, sp
   1c30e:	b088      	sub	sp, #32
   1c310:	466a      	mov	r2, sp
   1c312:	4b2b      	ldr	r3, [pc, #172]	; (1c3c0 <thingy91_board_init+0x10c>)
   1c314:	e7d9      	b.n	1c2ca <thingy91_board_init+0x16>
	err = adp536x_buckbst_3v3_set();
   1c316:	f009 ff53 	bl	261c0 <adp536x_buckbst_3v3_set>
	if (err) {
   1c31a:	4604      	mov	r4, r0
   1c31c:	b120      	cbz	r0, 1c328 <thingy91_board_init+0x74>
		LOG_ERR("Could not set buck/boost to 3.3 V, error: %d\n", err);
   1c31e:	466d      	mov	r5, sp
   1c320:	b088      	sub	sp, #32
   1c322:	466a      	mov	r2, sp
   1c324:	4b27      	ldr	r3, [pc, #156]	; (1c3c4 <thingy91_board_init+0x110>)
   1c326:	e7d0      	b.n	1c2ca <thingy91_board_init+0x16>
	err = adp536x_buckbst_enable(true);
   1c328:	2001      	movs	r0, #1
   1c32a:	f009 ff4e 	bl	261ca <adp536x_buckbst_enable>
	if (err) {
   1c32e:	4604      	mov	r4, r0
   1c330:	b120      	cbz	r0, 1c33c <thingy91_board_init+0x88>
		LOG_ERR("Could not enable buck/boost output, error: %d\n", err);
   1c332:	466d      	mov	r5, sp
   1c334:	b088      	sub	sp, #32
   1c336:	466a      	mov	r2, sp
   1c338:	4b23      	ldr	r3, [pc, #140]	; (1c3c8 <thingy91_board_init+0x114>)
   1c33a:	e7c6      	b.n	1c2ca <thingy91_board_init+0x16>
	err = adp536x_buck_discharge_set(true);
   1c33c:	2001      	movs	r0, #1
   1c33e:	f009 ff38 	bl	261b2 <adp536x_buck_discharge_set>
	if (err) {
   1c342:	4604      	mov	r4, r0
   1c344:	2800      	cmp	r0, #0
   1c346:	d1cb      	bne.n	1c2e0 <thingy91_board_init+0x2c>
	err = adp536x_vbus_current_set(ADP536X_VBUS_ILIM_500mA);
   1c348:	2007      	movs	r0, #7
   1c34a:	f009 ff1b 	bl	26184 <adp536x_vbus_current_set>
	if (err) {
   1c34e:	4604      	mov	r4, r0
   1c350:	b120      	cbz	r0, 1c35c <thingy91_board_init+0xa8>
		LOG_ERR("Could not set VBUS current limit, error: %d\n", err);
   1c352:	466d      	mov	r5, sp
   1c354:	b088      	sub	sp, #32
   1c356:	466a      	mov	r2, sp
   1c358:	4b1c      	ldr	r3, [pc, #112]	; (1c3cc <thingy91_board_init+0x118>)
   1c35a:	e7b6      	b.n	1c2ca <thingy91_board_init+0x16>
	err = adp536x_charger_current_set(ADP536X_CHG_CURRENT_320mA);
   1c35c:	201f      	movs	r0, #31
   1c35e:	f009 ff0b 	bl	26178 <adp536x_charger_current_set>
	if (err) {
   1c362:	4604      	mov	r4, r0
   1c364:	b120      	cbz	r0, 1c370 <thingy91_board_init+0xbc>
		LOG_ERR("Could not set charging current, error: %d\n", err);
   1c366:	466d      	mov	r5, sp
   1c368:	b088      	sub	sp, #32
   1c36a:	466a      	mov	r2, sp
   1c36c:	4b18      	ldr	r3, [pc, #96]	; (1c3d0 <thingy91_board_init+0x11c>)
   1c36e:	e7ac      	b.n	1c2ca <thingy91_board_init+0x16>
	err = adp536x_oc_chg_current_set(ADP536X_OC_CHG_THRESHOLD_400mA);
   1c370:	2007      	movs	r0, #7
   1c372:	f009 ff12 	bl	2619a <adp536x_oc_chg_current_set>
	if (err) {
   1c376:	4604      	mov	r4, r0
   1c378:	b120      	cbz	r0, 1c384 <thingy91_board_init+0xd0>
		LOG_ERR("Could not set charge current protection, error: %d\n",
   1c37a:	466d      	mov	r5, sp
   1c37c:	b088      	sub	sp, #32
   1c37e:	466a      	mov	r2, sp
   1c380:	4b14      	ldr	r3, [pc, #80]	; (1c3d4 <thingy91_board_init+0x120>)
   1c382:	e7a2      	b.n	1c2ca <thingy91_board_init+0x16>
	err = adp536x_charging_enable(true);
   1c384:	2001      	movs	r0, #1
   1c386:	f009 ff03 	bl	26190 <adp536x_charging_enable>
	if (err) {
   1c38a:	4604      	mov	r4, r0
   1c38c:	b120      	cbz	r0, 1c398 <thingy91_board_init+0xe4>
		LOG_ERR("Could not enable charging: %d\n", err);
   1c38e:	466d      	mov	r5, sp
   1c390:	b088      	sub	sp, #32
   1c392:	466a      	mov	r2, sp
   1c394:	4b10      	ldr	r3, [pc, #64]	; (1c3d8 <thingy91_board_init+0x124>)
   1c396:	e798      	b.n	1c2ca <thingy91_board_init+0x16>
	err = adp536x_fg_set_mode(ADP566X_FG_ENABLED, ADP566X_FG_MODE_SLEEP);
   1c398:	2101      	movs	r1, #1
   1c39a:	4608      	mov	r0, r1
   1c39c:	f009 ff1a 	bl	261d4 <adp536x_fg_set_mode>
	if (err) {
   1c3a0:	4604      	mov	r4, r0
   1c3a2:	2800      	cmp	r0, #0
   1c3a4:	d0ab      	beq.n	1c2fe <thingy91_board_init+0x4a>
		LOG_ERR("Could not enable fuel gauge: %d", err);
   1c3a6:	466d      	mov	r5, sp
   1c3a8:	b088      	sub	sp, #32
   1c3aa:	466a      	mov	r2, sp
   1c3ac:	4b0b      	ldr	r3, [pc, #44]	; (1c3dc <thingy91_board_init+0x128>)
   1c3ae:	e78c      	b.n	1c2ca <thingy91_board_init+0x16>
   1c3b0:	00028978 	.word	0x00028978
   1c3b4:	00029acb 	.word	0x00029acb
   1c3b8:	00028c28 	.word	0x00028c28
   1c3bc:	00029c44 	.word	0x00029c44
   1c3c0:	00029af4 	.word	0x00029af4
   1c3c4:	00029b1c 	.word	0x00029b1c
   1c3c8:	00029b4a 	.word	0x00029b4a
   1c3cc:	00029b79 	.word	0x00029b79
   1c3d0:	00029ba6 	.word	0x00029ba6
   1c3d4:	00029bd1 	.word	0x00029bd1
   1c3d8:	00029c05 	.word	0x00029c05
   1c3dc:	00029c24 	.word	0x00029c24

0001c3e0 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   1c3e0:	4602      	mov	r2, r0
   1c3e2:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1c3e4:	4801      	ldr	r0, [pc, #4]	; (1c3ec <k_mutex_lock.constprop.0.isra.0+0xc>)
   1c3e6:	f007 bbad 	b.w	23b44 <z_impl_k_mutex_lock>
   1c3ea:	bf00      	nop
   1c3ec:	2000c8a0 	.word	0x2000c8a0

0001c3f0 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1c3f0:	4801      	ldr	r0, [pc, #4]	; (1c3f8 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1c3f2:	f007 bc21 	b.w	23c38 <z_impl_k_mutex_unlock>
   1c3f6:	bf00      	nop
   1c3f8:	2000c8a0 	.word	0x2000c8a0

0001c3fc <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1c3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   1c3fe:	f04f 30ff 	mov.w	r0, #4294967295
   1c402:	f04f 31ff 	mov.w	r1, #4294967295
   1c406:	f7ff ffeb 	bl	1c3e0 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   1c40a:	4c0c      	ldr	r4, [pc, #48]	; (1c43c <net_if_init+0x40>)
   1c40c:	4e0c      	ldr	r6, [pc, #48]	; (1c440 <net_if_init+0x44>)
   1c40e:	42b4      	cmp	r4, r6
   1c410:	4627      	mov	r7, r4
   1c412:	d303      	bcc.n	1c41c <net_if_init+0x20>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   1c414:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   1c418:	f7ff bfea 	b.w	1c3f0 <k_mutex_unlock.constprop.0.isra.0>
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   1c41c:	f854 0b04 	ldr.w	r0, [r4], #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1c420:	6803      	ldr	r3, [r0, #0]
   1c422:	689d      	ldr	r5, [r3, #8]
	if (!api || !api->init) {
   1c424:	2d00      	cmp	r5, #0
   1c426:	d0f2      	beq.n	1c40e <net_if_init+0x12>
   1c428:	682b      	ldr	r3, [r5, #0]
   1c42a:	2b00      	cmp	r3, #0
   1c42c:	d0ef      	beq.n	1c40e <net_if_init+0x12>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
   1c42e:	2109      	movs	r1, #9
   1c430:	f009 ffac 	bl	2638c <net_if_flag_test_and_set.isra.0>
	api->init(iface);
   1c434:	4638      	mov	r0, r7
   1c436:	682b      	ldr	r3, [r5, #0]
   1c438:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1c43a:	e7e8      	b.n	1c40e <net_if_init+0x12>
   1c43c:	2000c90c 	.word	0x2000c90c
   1c440:	2000c910 	.word	0x2000c910

0001c444 <net_if_post_init>:

void net_if_post_init(void)
{
   1c444:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1c446:	4c07      	ldr	r4, [pc, #28]	; (1c464 <net_if_post_init+0x20>)
   1c448:	4d07      	ldr	r5, [pc, #28]	; (1c468 <net_if_post_init+0x24>)
   1c44a:	42ac      	cmp	r4, r5
   1c44c:	d300      	bcc.n	1c450 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1c44e:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1c450:	2103      	movs	r1, #3
   1c452:	4620      	mov	r0, r4
   1c454:	f009 ff46 	bl	262e4 <net_if_flag_is_set>
   1c458:	b910      	cbnz	r0, 1c460 <net_if_post_init+0x1c>
			net_if_up(iface);
   1c45a:	4620      	mov	r0, r4
   1c45c:	f009 ffa8 	bl	263b0 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1c460:	3404      	adds	r4, #4
   1c462:	e7f2      	b.n	1c44a <net_if_post_init+0x6>
   1c464:	2000c90c 	.word	0x2000c90c
   1c468:	2000c910 	.word	0x2000c910

0001c46c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1c46c:	4b08      	ldr	r3, [pc, #32]	; (1c490 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1c46e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1c470:	1ac3      	subs	r3, r0, r3
{
   1c472:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c474:	4907      	ldr	r1, [pc, #28]	; (1c494 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1c476:	109b      	asrs	r3, r3, #2
{
   1c478:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c47a:	4359      	muls	r1, r3
   1c47c:	2240      	movs	r2, #64	; 0x40
   1c47e:	4806      	ldr	r0, [pc, #24]	; (1c498 <onoff_stop+0x2c>)
   1c480:	f009 ffde 	bl	26440 <stop>
	notify(mgr, res);
   1c484:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c486:	4601      	mov	r1, r0
	notify(mgr, res);
   1c488:	4620      	mov	r0, r4
}
   1c48a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1c48e:	4718      	bx	r3
   1c490:	2000d160 	.word	0x2000d160
   1c494:	b6db6db7 	.word	0xb6db6db7
   1c498:	00028900 	.word	0x00028900

0001c49c <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c49c:	2340      	movs	r3, #64	; 0x40
{
   1c49e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1c4a0:	4c0b      	ldr	r4, [pc, #44]	; (1c4d0 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c4a2:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1c4a4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c4a6:	460b      	mov	r3, r1
{
   1c4a8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c4aa:	490a      	ldr	r1, [pc, #40]	; (1c4d4 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   1c4ac:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c4ae:	4361      	muls	r1, r4
{
   1c4b0:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c4b2:	4a09      	ldr	r2, [pc, #36]	; (1c4d8 <onoff_start+0x3c>)
   1c4b4:	4809      	ldr	r0, [pc, #36]	; (1c4dc <onoff_start+0x40>)
   1c4b6:	f009 ffef 	bl	26498 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1c4ba:	1e01      	subs	r1, r0, #0
   1c4bc:	da05      	bge.n	1c4ca <onoff_start+0x2e>
		notify(mgr, err);
   1c4be:	4630      	mov	r0, r6
   1c4c0:	462b      	mov	r3, r5
	}
}
   1c4c2:	b002      	add	sp, #8
   1c4c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1c4c8:	4718      	bx	r3
}
   1c4ca:	b002      	add	sp, #8
   1c4cc:	bd70      	pop	{r4, r5, r6, pc}
   1c4ce:	bf00      	nop
   1c4d0:	2000d160 	.word	0x2000d160
   1c4d4:	b6db6db7 	.word	0xb6db6db7
   1c4d8:	00026503 	.word	0x00026503
   1c4dc:	00028900 	.word	0x00028900

0001c4e0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1c4e0:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c4e2:	2200      	movs	r2, #0
   1c4e4:	2101      	movs	r1, #1
{
   1c4e6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c4e8:	2005      	movs	r0, #5
   1c4ea:	f7ff f88f 	bl	1b60c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1c4ee:	480f      	ldr	r0, [pc, #60]	; (1c52c <clk_init+0x4c>)
   1c4f0:	f004 f968 	bl	207c4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1c4f4:	4b0e      	ldr	r3, [pc, #56]	; (1c530 <clk_init+0x50>)
   1c4f6:	4298      	cmp	r0, r3
   1c4f8:	d115      	bne.n	1c526 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1c4fa:	f004 f973 	bl	207e4 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1c4fe:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c500:	490c      	ldr	r1, [pc, #48]	; (1c534 <clk_init+0x54>)
   1c502:	4630      	mov	r0, r6
   1c504:	f009 fad4 	bl	25ab0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1c508:	2800      	cmp	r0, #0
   1c50a:	db0b      	blt.n	1c524 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c50c:	2501      	movs	r5, #1
   1c50e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   1c510:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c512:	4908      	ldr	r1, [pc, #32]	; (1c534 <clk_init+0x54>)
   1c514:	f104 001c 	add.w	r0, r4, #28
   1c518:	f009 faca 	bl	25ab0 <onoff_manager_init>
		if (err < 0) {
   1c51c:	2800      	cmp	r0, #0
   1c51e:	db01      	blt.n	1c524 <clk_init+0x44>
	}

	return 0;
   1c520:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c522:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   1c524:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1c526:	f06f 0004 	mvn.w	r0, #4
   1c52a:	e7fb      	b.n	1c524 <clk_init+0x44>
   1c52c:	0001c56d 	.word	0x0001c56d
   1c530:	0bad0000 	.word	0x0bad0000
   1c534:	00028e18 	.word	0x00028e18

0001c538 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1c538:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1c53a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1c53c:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   1c53e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1c540:	434b      	muls	r3, r1
   1c542:	4808      	ldr	r0, [pc, #32]	; (1c564 <clkstarted_handle.constprop.0+0x2c>)
   1c544:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1c546:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   1c548:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1c54c:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1c54e:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1c550:	f009 ff63 	bl	2641a <set_on_state>
	if (callback) {
   1c554:	b12d      	cbz	r5, 1c562 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c556:	4632      	mov	r2, r6
   1c558:	462b      	mov	r3, r5
}
   1c55a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c55e:	4802      	ldr	r0, [pc, #8]	; (1c568 <clkstarted_handle.constprop.0+0x30>)
   1c560:	4718      	bx	r3
}
   1c562:	bd70      	pop	{r4, r5, r6, pc}
   1c564:	2000d160 	.word	0x2000d160
   1c568:	00028900 	.word	0x00028900

0001c56c <clock_event_handler>:
	switch (event) {
   1c56c:	b110      	cbz	r0, 1c574 <clock_event_handler+0x8>
   1c56e:	2801      	cmp	r0, #1
   1c570:	d004      	beq.n	1c57c <clock_event_handler+0x10>
   1c572:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1c574:	4b03      	ldr	r3, [pc, #12]	; (1c584 <clock_event_handler+0x18>)
   1c576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c578:	075b      	lsls	r3, r3, #29
   1c57a:	d101      	bne.n	1c580 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1c57c:	f7ff bfdc 	b.w	1c538 <clkstarted_handle.constprop.0>
}
   1c580:	4770      	bx	lr
   1c582:	bf00      	nop
   1c584:	2000d160 	.word	0x2000d160

0001c588 <generic_hfclk_start>:
{
   1c588:	b508      	push	{r3, lr}
	__asm__ volatile(
   1c58a:	f04f 0320 	mov.w	r3, #32
   1c58e:	f3ef 8111 	mrs	r1, BASEPRI
   1c592:	f383 8812 	msr	BASEPRI_MAX, r3
   1c596:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1c59a:	4a11      	ldr	r2, [pc, #68]	; (1c5e0 <generic_hfclk_start+0x58>)
   1c59c:	6813      	ldr	r3, [r2, #0]
   1c59e:	f043 0002 	orr.w	r0, r3, #2
   1c5a2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1c5a4:	07da      	lsls	r2, r3, #31
   1c5a6:	d408      	bmi.n	1c5ba <generic_hfclk_start+0x32>
	__asm__ volatile(
   1c5a8:	f381 8811 	msr	BASEPRI, r1
   1c5ac:	f3bf 8f6f 	isb	sy
}
   1c5b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1c5b4:	2001      	movs	r0, #1
   1c5b6:	f004 b925 	b.w	20804 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c5ba:	4b0a      	ldr	r3, [pc, #40]	; (1c5e4 <generic_hfclk_start+0x5c>)
   1c5bc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c5c0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1c5c4:	07d3      	lsls	r3, r2, #31
   1c5c6:	d5ef      	bpl.n	1c5a8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1c5c8:	4807      	ldr	r0, [pc, #28]	; (1c5e8 <generic_hfclk_start+0x60>)
   1c5ca:	f009 ff26 	bl	2641a <set_on_state>
   1c5ce:	f381 8811 	msr	BASEPRI, r1
   1c5d2:	f3bf 8f6f 	isb	sy
}
   1c5d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1c5da:	2000      	movs	r0, #0
   1c5dc:	f7ff bfac 	b.w	1c538 <clkstarted_handle.constprop.0>
   1c5e0:	2000d1b0 	.word	0x2000d1b0
   1c5e4:	40005000 	.word	0x40005000
   1c5e8:	2000d1a0 	.word	0x2000d1a0

0001c5ec <api_blocking_start>:
{
   1c5ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c5ee:	2200      	movs	r2, #0
   1c5f0:	2301      	movs	r3, #1
   1c5f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c5f6:	ab04      	add	r3, sp, #16
   1c5f8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c5fc:	4a09      	ldr	r2, [pc, #36]	; (1c624 <api_blocking_start+0x38>)
   1c5fe:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c600:	f8cd d000 	str.w	sp, [sp]
   1c604:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c608:	f009 ff74 	bl	264f4 <api_start>
	if (err < 0) {
   1c60c:	2800      	cmp	r0, #0
   1c60e:	db05      	blt.n	1c61c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1c610:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1c614:	2300      	movs	r3, #0
   1c616:	4668      	mov	r0, sp
   1c618:	f007 fba4 	bl	23d64 <z_impl_k_sem_take>
}
   1c61c:	b007      	add	sp, #28
   1c61e:	f85d fb04 	ldr.w	pc, [sp], #4
   1c622:	bf00      	nop
   1c624:	00026521 	.word	0x00026521

0001c628 <generic_hfclk_stop>:
{
   1c628:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c62a:	f04f 0320 	mov.w	r3, #32
   1c62e:	f3ef 8411 	mrs	r4, BASEPRI
   1c632:	f383 8812 	msr	BASEPRI_MAX, r3
   1c636:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1c63a:	4a07      	ldr	r2, [pc, #28]	; (1c658 <generic_hfclk_stop+0x30>)
   1c63c:	6813      	ldr	r3, [r2, #0]
   1c63e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1c642:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1c644:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1c646:	d402      	bmi.n	1c64e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1c648:	2001      	movs	r0, #1
   1c64a:	f00a fc9a 	bl	26f82 <nrfx_clock_stop>
	__asm__ volatile(
   1c64e:	f384 8811 	msr	BASEPRI, r4
   1c652:	f3bf 8f6f 	isb	sy
}
   1c656:	bd10      	pop	{r4, pc}
   1c658:	2000d1b0 	.word	0x2000d1b0

0001c65c <z_nrf_clock_control_lf_on>:
{
   1c65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c660:	2201      	movs	r2, #1
   1c662:	4607      	mov	r7, r0
   1c664:	4935      	ldr	r1, [pc, #212]	; (1c73c <z_nrf_clock_control_lf_on+0xe0>)
   1c666:	e8d1 3fef 	ldaex	r3, [r1]
   1c66a:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1c66e:	2800      	cmp	r0, #0
   1c670:	d1f9      	bne.n	1c666 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1c672:	b933      	cbnz	r3, 1c682 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1c674:	4932      	ldr	r1, [pc, #200]	; (1c740 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   1c676:	4833      	ldr	r0, [pc, #204]	; (1c744 <z_nrf_clock_control_lf_on+0xe8>)
   1c678:	604b      	str	r3, [r1, #4]
   1c67a:	60cb      	str	r3, [r1, #12]
   1c67c:	608a      	str	r2, [r1, #8]
   1c67e:	f009 fa2a 	bl	25ad6 <onoff_request>
	switch (start_mode) {
   1c682:	1e7b      	subs	r3, r7, #1
   1c684:	2b01      	cmp	r3, #1
   1c686:	d828      	bhi.n	1c6da <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1c688:	2f01      	cmp	r7, #1
   1c68a:	d106      	bne.n	1c69a <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1c68c:	4b2e      	ldr	r3, [pc, #184]	; (1c748 <z_nrf_clock_control_lf_on+0xec>)
   1c68e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1c692:	f003 0303 	and.w	r3, r3, #3
   1c696:	2b02      	cmp	r3, #2
   1c698:	d01f      	beq.n	1c6da <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c69a:	f00b fbcf 	bl	27e3c <k_is_in_isr>
   1c69e:	4605      	mov	r5, r0
   1c6a0:	b9e8      	cbnz	r0, 1c6de <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1c6a2:	4b2a      	ldr	r3, [pc, #168]	; (1c74c <z_nrf_clock_control_lf_on+0xf0>)
   1c6a4:	781b      	ldrb	r3, [r3, #0]
   1c6a6:	b1d3      	cbz	r3, 1c6de <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   1c6a8:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1c6aa:	4606      	mov	r6, r0
   1c6ac:	4b26      	ldr	r3, [pc, #152]	; (1c748 <z_nrf_clock_control_lf_on+0xec>)
   1c6ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c6b2:	4c25      	ldr	r4, [pc, #148]	; (1c748 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c6b4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1c750 <z_nrf_clock_control_lf_on+0xf4>
   1c6b8:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c6bc:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1c6c0:	03d2      	lsls	r2, r2, #15
   1c6c2:	d516      	bpl.n	1c6f2 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1c6c4:	f003 0303 	and.w	r3, r3, #3
   1c6c8:	2b02      	cmp	r3, #2
   1c6ca:	d001      	beq.n	1c6d0 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1c6cc:	2f01      	cmp	r7, #1
   1c6ce:	d110      	bne.n	1c6f2 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   1c6d0:	b375      	cbz	r5, 1c730 <z_nrf_clock_control_lf_on+0xd4>
   1c6d2:	f386 8811 	msr	BASEPRI, r6
   1c6d6:	f3bf 8f6f 	isb	sy
}
   1c6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c6de:	f04f 0320 	mov.w	r3, #32
   1c6e2:	f3ef 8611 	mrs	r6, BASEPRI
   1c6e6:	f383 8812 	msr	BASEPRI_MAX, r3
   1c6ea:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c6ee:	2501      	movs	r5, #1
   1c6f0:	e7df      	b.n	1c6b2 <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c6f2:	b1c5      	cbz	r5, 1c726 <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1c6f4:	4630      	mov	r0, r6
   1c6f6:	f7fe fee7 	bl	1b4c8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1c6fa:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1c6fe:	b2db      	uxtb	r3, r3
   1c700:	2b01      	cmp	r3, #1
   1c702:	d1d9      	bne.n	1c6b8 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c704:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1c708:	2a00      	cmp	r2, #0
   1c70a:	d0d5      	beq.n	1c6b8 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c70c:	2200      	movs	r2, #0
   1c70e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1c712:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c716:	2202      	movs	r2, #2
   1c718:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1c71c:	2220      	movs	r2, #32
   1c71e:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c722:	60a3      	str	r3, [r4, #8]
}
   1c724:	e7c8      	b.n	1c6b8 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   1c726:	2100      	movs	r1, #0
   1c728:	2021      	movs	r0, #33	; 0x21
   1c72a:	f007 ff3f 	bl	245ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c72e:	e7e4      	b.n	1c6fa <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   1c730:	2202      	movs	r2, #2
   1c732:	4b05      	ldr	r3, [pc, #20]	; (1c748 <z_nrf_clock_control_lf_on+0xec>)
   1c734:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c738:	e7cf      	b.n	1c6da <z_nrf_clock_control_lf_on+0x7e>
   1c73a:	bf00      	nop
   1c73c:	2000d15c 	.word	0x2000d15c
   1c740:	2000d14c 	.word	0x2000d14c
   1c744:	2000d17c 	.word	0x2000d17c
   1c748:	40005000 	.word	0x40005000
   1c74c:	2000ddf2 	.word	0x2000ddf2
   1c750:	e000e100 	.word	0xe000e100

0001c754 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1c754:	b508      	push	{r3, lr}
   1c756:	4807      	ldr	r0, [pc, #28]	; (1c774 <uart_console_init+0x20>)
   1c758:	f00b fae5 	bl	27d26 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1c75c:	b138      	cbz	r0, 1c76e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1c75e:	4806      	ldr	r0, [pc, #24]	; (1c778 <uart_console_init+0x24>)
   1c760:	f7ff fd8e 	bl	1c280 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1c764:	4804      	ldr	r0, [pc, #16]	; (1c778 <uart_console_init+0x24>)
   1c766:	f7fd fa4f 	bl	19c08 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1c76a:	2000      	movs	r0, #0
}
   1c76c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1c76e:	f06f 0012 	mvn.w	r0, #18
   1c772:	e7fb      	b.n	1c76c <uart_console_init+0x18>
   1c774:	00028948 	.word	0x00028948
   1c778:	0001c77d 	.word	0x0001c77d

0001c77c <console_out>:
	if ('\n' == c) {
   1c77c:	280a      	cmp	r0, #10
{
   1c77e:	b538      	push	{r3, r4, r5, lr}
   1c780:	4604      	mov	r4, r0
   1c782:	4d07      	ldr	r5, [pc, #28]	; (1c7a0 <console_out+0x24>)
	if ('\n' == c) {
   1c784:	d104      	bne.n	1c790 <console_out+0x14>
   1c786:	68ab      	ldr	r3, [r5, #8]
   1c788:	210d      	movs	r1, #13
   1c78a:	4628      	mov	r0, r5
   1c78c:	685b      	ldr	r3, [r3, #4]
   1c78e:	4798      	blx	r3
   1c790:	68ab      	ldr	r3, [r5, #8]
   1c792:	4803      	ldr	r0, [pc, #12]	; (1c7a0 <console_out+0x24>)
   1c794:	685b      	ldr	r3, [r3, #4]
   1c796:	b2e1      	uxtb	r1, r4
   1c798:	4798      	blx	r3
}
   1c79a:	4620      	mov	r0, r4
   1c79c:	bd38      	pop	{r3, r4, r5, pc}
   1c79e:	bf00      	nop
   1c7a0:	00028948 	.word	0x00028948

0001c7a4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1c7a4:	b530      	push	{r4, r5, lr}
	return port->config;
   1c7a6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c7a8:	f001 041f 	and.w	r4, r1, #31
   1c7ac:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1c7ae:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1c7b2:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c7b4:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c7b8:	d105      	bne.n	1c7c6 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1c7ba:	4620      	mov	r0, r4
   1c7bc:	f004 fae6 	bl	20d8c <nrfx_gpiote_trigger_disable>

		return 0;
   1c7c0:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   1c7c2:	b005      	add	sp, #20
   1c7c4:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c7c6:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c7c8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c7cc:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c7d0:	d114      	bne.n	1c7fc <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1c7d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c7d6:	bf0c      	ite	eq
   1c7d8:	2304      	moveq	r3, #4
   1c7da:	2305      	movne	r3, #5
   1c7dc:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c7e0:	2300      	movs	r3, #0
   1c7e2:	4620      	mov	r0, r4
   1c7e4:	4619      	mov	r1, r3
   1c7e6:	aa02      	add	r2, sp, #8
   1c7e8:	f004 f906 	bl	209f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c7ec:	4b1c      	ldr	r3, [pc, #112]	; (1c860 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1c7ee:	4298      	cmp	r0, r3
   1c7f0:	d133      	bne.n	1c85a <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1c7f2:	2101      	movs	r1, #1
   1c7f4:	4620      	mov	r0, r4
   1c7f6:	f004 fa85 	bl	20d04 <nrfx_gpiote_trigger_enable>
	return 0;
   1c7fa:	e7e1      	b.n	1c7c0 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c7fc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1c800:	d020      	beq.n	1c844 <gpio_nrfx_pin_interrupt_configure+0xa0>
   1c802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1c806:	bf14      	ite	ne
   1c808:	2301      	movne	r3, #1
   1c80a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c80c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1c810:	6883      	ldr	r3, [r0, #8]
   1c812:	40cb      	lsrs	r3, r1
   1c814:	07d9      	lsls	r1, r3, #31
   1c816:	d4e3      	bmi.n	1c7e0 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1c818:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1c81c:	d1e0      	bne.n	1c7e0 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c81e:	4a11      	ldr	r2, [pc, #68]	; (1c864 <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1c820:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c824:	3380      	adds	r3, #128	; 0x80
   1c826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1c82a:	07db      	lsls	r3, r3, #31
   1c82c:	d4d8      	bmi.n	1c7e0 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c82e:	f10d 0507 	add.w	r5, sp, #7
   1c832:	4629      	mov	r1, r5
   1c834:	4620      	mov	r0, r4
   1c836:	f004 fa11 	bl	20c5c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1c83a:	4b0b      	ldr	r3, [pc, #44]	; (1c868 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1c83c:	4298      	cmp	r0, r3
   1c83e:	d003      	beq.n	1c848 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
   1c840:	9503      	str	r5, [sp, #12]
   1c842:	e7cd      	b.n	1c7e0 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c844:	2303      	movs	r3, #3
   1c846:	e7e1      	b.n	1c80c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   1c848:	4628      	mov	r0, r5
   1c84a:	f004 fa55 	bl	20cf8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1c84e:	4b04      	ldr	r3, [pc, #16]	; (1c860 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1c850:	4298      	cmp	r0, r3
   1c852:	d0f5      	beq.n	1c840 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   1c854:	f06f 000b 	mvn.w	r0, #11
   1c858:	e7b3      	b.n	1c7c2 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1c85a:	f06f 0015 	mvn.w	r0, #21
   1c85e:	e7b0      	b.n	1c7c2 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1c860:	0bad0000 	.word	0x0bad0000
   1c864:	40842500 	.word	0x40842500
   1c868:	0bad0004 	.word	0x0bad0004

0001c86c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1c86c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1c86e:	f004 fa33 	bl	20cd8 <nrfx_gpiote_is_init>
   1c872:	4604      	mov	r4, r0
   1c874:	b968      	cbnz	r0, 1c892 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1c876:	f004 fa07 	bl	20c88 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1c87a:	4b08      	ldr	r3, [pc, #32]	; (1c89c <gpio_nrfx_init+0x30>)
   1c87c:	4298      	cmp	r0, r3
   1c87e:	d10a      	bne.n	1c896 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1c880:	4621      	mov	r1, r4
   1c882:	4807      	ldr	r0, [pc, #28]	; (1c8a0 <gpio_nrfx_init+0x34>)
   1c884:	f004 f9e4 	bl	20c50 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c888:	4622      	mov	r2, r4
   1c88a:	2105      	movs	r1, #5
   1c88c:	2031      	movs	r0, #49	; 0x31
   1c88e:	f7fe febd 	bl	1b60c <z_arm_irq_priority_set>
		return 0;
   1c892:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1c894:	bd10      	pop	{r4, pc}
		return -EIO;
   1c896:	f06f 0004 	mvn.w	r0, #4
   1c89a:	e7fb      	b.n	1c894 <gpio_nrfx_init+0x28>
   1c89c:	0bad0000 	.word	0x0bad0000
   1c8a0:	0001c8a5 	.word	0x0001c8a5

0001c8a4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c8a4:	0943      	lsrs	r3, r0, #5
{
   1c8a6:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c8a8:	d107      	bne.n	1c8ba <nrfx_gpio_handler+0x16>
	return list->head;
   1c8aa:	4b0b      	ldr	r3, [pc, #44]	; (1c8d8 <nrfx_gpio_handler+0x34>)
   1c8ac:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c8ae:	b121      	cbz	r1, 1c8ba <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   1c8b0:	2501      	movs	r5, #1
	return node->next;
   1c8b2:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1c8b4:	4e09      	ldr	r6, [pc, #36]	; (1c8dc <nrfx_gpio_handler+0x38>)
   1c8b6:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c8b8:	b901      	cbnz	r1, 1c8bc <nrfx_gpio_handler+0x18>
}
   1c8ba:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   1c8bc:	688a      	ldr	r2, [r1, #8]
   1c8be:	402a      	ands	r2, r5
   1c8c0:	d002      	beq.n	1c8c8 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   1c8c2:	4630      	mov	r0, r6
   1c8c4:	684b      	ldr	r3, [r1, #4]
   1c8c6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c8c8:	b11c      	cbz	r4, 1c8d2 <nrfx_gpio_handler+0x2e>
   1c8ca:	6823      	ldr	r3, [r4, #0]
   1c8cc:	4621      	mov	r1, r4
   1c8ce:	461c      	mov	r4, r3
   1c8d0:	e7f2      	b.n	1c8b8 <nrfx_gpio_handler+0x14>
   1c8d2:	4623      	mov	r3, r4
   1c8d4:	e7fa      	b.n	1c8cc <nrfx_gpio_handler+0x28>
   1c8d6:	bf00      	nop
   1c8d8:	2000d1b4 	.word	0x2000d1b4
   1c8dc:	00028918 	.word	0x00028918

0001c8e0 <gpio_nrfx_pin_configure>:
{
   1c8e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1c8e4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c8e6:	f001 051f 	and.w	r5, r1, #31
   1c8ea:	7b3b      	ldrb	r3, [r7, #12]
{
   1c8ec:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c8ee:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1c8f2:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c8f4:	4628      	mov	r0, r5
   1c8f6:	f10d 0103 	add.w	r1, sp, #3
   1c8fa:	f004 f9af 	bl	20c5c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c8fe:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c902:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c904:	d10b      	bne.n	1c91e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1c906:	4628      	mov	r0, r5
   1c908:	f004 fa68 	bl	20ddc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1c90c:	4b3c      	ldr	r3, [pc, #240]	; (1ca00 <gpio_nrfx_pin_configure+0x120>)
   1c90e:	4598      	cmp	r8, r3
   1c910:	d103      	bne.n	1c91a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   1c912:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c916:	f004 f9e9 	bl	20cec <nrfx_gpiote_channel_free>
		return 0;
   1c91a:	2000      	movs	r0, #0
   1c91c:	e00c      	b.n	1c938 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c91e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c920:	4628      	mov	r0, r5
   1c922:	4619      	mov	r1, r3
   1c924:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c926:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c92a:	f004 f865 	bl	209f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c92e:	4b34      	ldr	r3, [pc, #208]	; (1ca00 <gpio_nrfx_pin_configure+0x120>)
   1c930:	4298      	cmp	r0, r3
   1c932:	d004      	beq.n	1c93e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   1c934:	f06f 0015 	mvn.w	r0, #21
}
   1c938:	b004      	add	sp, #16
   1c93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1c93e:	4580      	cmp	r8, r0
   1c940:	d103      	bne.n	1c94a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1c942:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c946:	f004 f9d1 	bl	20cec <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1c94a:	03a3      	lsls	r3, r4, #14
   1c94c:	d549      	bpl.n	1c9e2 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c94e:	f240 3306 	movw	r3, #774	; 0x306
   1c952:	4023      	ands	r3, r4
   1c954:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1c958:	d019      	beq.n	1c98e <gpio_nrfx_pin_configure+0xae>
   1c95a:	d80c      	bhi.n	1c976 <gpio_nrfx_pin_configure+0x96>
   1c95c:	2b06      	cmp	r3, #6
   1c95e:	d017      	beq.n	1c990 <gpio_nrfx_pin_configure+0xb0>
   1c960:	d804      	bhi.n	1c96c <gpio_nrfx_pin_configure+0x8c>
   1c962:	b1ab      	cbz	r3, 1c990 <gpio_nrfx_pin_configure+0xb0>
   1c964:	2b02      	cmp	r3, #2
   1c966:	d1e5      	bne.n	1c934 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   1c968:	2304      	movs	r3, #4
   1c96a:	e011      	b.n	1c990 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c96c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1c970:	d1e0      	bne.n	1c934 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   1c972:	2301      	movs	r3, #1
   1c974:	e00c      	b.n	1c990 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c976:	f240 2202 	movw	r2, #514	; 0x202
   1c97a:	4293      	cmp	r3, r2
   1c97c:	d026      	beq.n	1c9cc <gpio_nrfx_pin_configure+0xec>
   1c97e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1c982:	d025      	beq.n	1c9d0 <gpio_nrfx_pin_configure+0xf0>
   1c984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1c988:	d1d4      	bne.n	1c934 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   1c98a:	2302      	movs	r3, #2
   1c98c:	e000      	b.n	1c990 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   1c98e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1c990:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1c994:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1c998:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1c99c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1c99e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1c9a2:	bf4c      	ite	mi
   1c9a4:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1c9a6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c9aa:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1c9ac:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c9b0:	d510      	bpl.n	1c9d4 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1c9b2:	2301      	movs	r3, #1
   1c9b4:	687a      	ldr	r2, [r7, #4]
   1c9b6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1c9b8:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1c9ba:	2200      	movs	r2, #0
   1c9bc:	4628      	mov	r0, r5
   1c9be:	a901      	add	r1, sp, #4
   1c9c0:	f004 f8c6 	bl	20b50 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1c9c4:	4b0e      	ldr	r3, [pc, #56]	; (1ca00 <gpio_nrfx_pin_configure+0x120>)
   1c9c6:	4298      	cmp	r0, r3
   1c9c8:	d0a7      	beq.n	1c91a <gpio_nrfx_pin_configure+0x3a>
   1c9ca:	e7b3      	b.n	1c934 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   1c9cc:	2305      	movs	r3, #5
   1c9ce:	e7df      	b.n	1c990 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c9d0:	2303      	movs	r3, #3
   1c9d2:	e7dd      	b.n	1c990 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1c9d4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1c9d6:	bf41      	itttt	mi
   1c9d8:	2301      	movmi	r3, #1
   1c9da:	687a      	ldrmi	r2, [r7, #4]
   1c9dc:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   1c9de:	60d3      	strmi	r3, [r2, #12]
}
   1c9e0:	e7eb      	b.n	1c9ba <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   1c9e2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c9e4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1c9e8:	bf4c      	ite	mi
   1c9ea:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1c9ec:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c9f0:	461a      	mov	r2, r3
   1c9f2:	4628      	mov	r0, r5
   1c9f4:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1c9f6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c9fa:	f003 fffd 	bl	209f8 <nrfx_gpiote_input_configure>
   1c9fe:	e7e1      	b.n	1c9c4 <gpio_nrfx_pin_configure+0xe4>
   1ca00:	0bad0000 	.word	0x0bad0000

0001ca04 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
   1ca04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1ca06:	6844      	ldr	r4, [r0, #4]
{
   1ca08:	af00      	add	r7, sp, #0
	struct i2c_nrfx_twim_data *dev_data = dev->data;

	dev_config->irq_connect();
   1ca0a:	69e3      	ldr	r3, [r4, #28]
{
   1ca0c:	4605      	mov	r5, r0
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1ca0e:	6906      	ldr	r6, [r0, #16]
	dev_config->irq_connect();
   1ca10:	4798      	blx	r3

#ifdef CONFIG_PINCTRL
	int err = pinctrl_apply_state(dev_config->pcfg,
   1ca12:	6a20      	ldr	r0, [r4, #32]
   1ca14:	f009 fdd9 	bl	265ca <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
   1ca18:	2800      	cmp	r0, #0
   1ca1a:	db1f      	blt.n	1ca5c <i2c_nrfx_twim_init+0x58>
		return err;
	}
#endif

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
   1ca1c:	4633      	mov	r3, r6
   1ca1e:	4620      	mov	r0, r4
   1ca20:	4a12      	ldr	r2, [pc, #72]	; (1ca6c <i2c_nrfx_twim_init+0x68>)
   1ca22:	f104 0108 	add.w	r1, r4, #8
   1ca26:	f004 fcdd 	bl	213e4 <nrfx_twim_init>
   1ca2a:	4b11      	ldr	r3, [pc, #68]	; (1ca70 <i2c_nrfx_twim_init+0x6c>)
   1ca2c:	4298      	cmp	r0, r3
   1ca2e:	d017      	beq.n	1ca60 <i2c_nrfx_twim_init+0x5c>
			   event_handler, dev_data) != NRFX_SUCCESS) {
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1ca30:	466c      	mov	r4, sp
   1ca32:	b088      	sub	sp, #32
   1ca34:	682b      	ldr	r3, [r5, #0]
   1ca36:	466a      	mov	r2, sp
   1ca38:	490e      	ldr	r1, [pc, #56]	; (1ca74 <i2c_nrfx_twim_init+0x70>)
   1ca3a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ca3e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ca42:	8393      	strh	r3, [r2, #28]
   1ca44:	4b0c      	ldr	r3, [pc, #48]	; (1ca78 <i2c_nrfx_twim_init+0x74>)
   1ca46:	f842 3f10 	str.w	r3, [r2, #16]!
   1ca4a:	480c      	ldr	r0, [pc, #48]	; (1ca7c <i2c_nrfx_twim_init+0x78>)
   1ca4c:	2300      	movs	r3, #0
   1ca4e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1ca52:	f7fe f8af 	bl	1abb4 <z_impl_z_log_msg_static_create>
		return -EIO;
   1ca56:	f06f 0004 	mvn.w	r0, #4
   1ca5a:	46a5      	mov	sp, r4
#else
	nrfx_twim_enable(&dev_config->twim);
#endif

	return 0;
}
   1ca5c:	46bd      	mov	sp, r7
   1ca5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_twim_enable(&dev_config->twim);
   1ca60:	4620      	mov	r0, r4
   1ca62:	f004 fd11 	bl	21488 <nrfx_twim_enable>
	return 0;
   1ca66:	2000      	movs	r0, #0
   1ca68:	e7f8      	b.n	1ca5c <i2c_nrfx_twim_init+0x58>
   1ca6a:	bf00      	nop
   1ca6c:	0001cabd 	.word	0x0001cabd
   1ca70:	0bad0000 	.word	0x0bad0000
   1ca74:	00029d47 	.word	0x00029d47
   1ca78:	01000003 	.word	0x01000003
   1ca7c:	00028c58 	.word	0x00028c58

0001ca80 <i2c_nrfx_twim_recover_bus>:
{
   1ca80:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1ca82:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
   1ca84:	6823      	ldr	r3, [r4, #0]
		nrfx_twim_disable(&dev_config->twim);
   1ca86:	4620      	mov	r0, r4
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
   1ca88:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
   1ca8c:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
   1ca90:	f004 fd0a 	bl	214a8 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1ca94:	4631      	mov	r1, r6
   1ca96:	4628      	mov	r0, r5
   1ca98:	f004 ff70 	bl	2197c <nrfx_twi_twim_bus_recover>
   1ca9c:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
   1ca9e:	6a20      	ldr	r0, [r4, #32]
   1caa0:	f009 fd93 	bl	265ca <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
   1caa4:	4620      	mov	r0, r4
   1caa6:	f004 fcef 	bl	21488 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1caaa:	4b03      	ldr	r3, [pc, #12]	; (1cab8 <i2c_nrfx_twim_recover_bus+0x38>)
   1caac:	429d      	cmp	r5, r3
}
   1caae:	bf14      	ite	ne
   1cab0:	f06f 000f 	mvnne.w	r0, #15
   1cab4:	2000      	moveq	r0, #0
   1cab6:	bd70      	pop	{r4, r5, r6, pc}
   1cab8:	0bad0000 	.word	0x0bad0000

0001cabc <event_handler>:
	switch (p_event->type) {
   1cabc:	7803      	ldrb	r3, [r0, #0]
   1cabe:	2b01      	cmp	r3, #1
   1cac0:	d008      	beq.n	1cad4 <event_handler+0x18>
   1cac2:	2b02      	cmp	r3, #2
   1cac4:	d008      	beq.n	1cad8 <event_handler+0x1c>
   1cac6:	b94b      	cbnz	r3, 1cadc <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1cac8:	4b05      	ldr	r3, [pc, #20]	; (1cae0 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1caca:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1cacc:	f101 0018 	add.w	r0, r1, #24
   1cad0:	f007 b922 	b.w	23d18 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1cad4:	4b03      	ldr	r3, [pc, #12]	; (1cae4 <event_handler+0x28>)
   1cad6:	e7f8      	b.n	1caca <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1cad8:	4b03      	ldr	r3, [pc, #12]	; (1cae8 <event_handler+0x2c>)
   1cada:	e7f6      	b.n	1caca <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1cadc:	4b03      	ldr	r3, [pc, #12]	; (1caec <event_handler+0x30>)
   1cade:	e7f4      	b.n	1caca <event_handler+0xe>
   1cae0:	0bad0000 	.word	0x0bad0000
   1cae4:	0bae0001 	.word	0x0bae0001
   1cae8:	0bae0002 	.word	0x0bae0002
   1caec:	0bad0001 	.word	0x0bad0001

0001caf0 <i2c_nrfx_twim_configure>:
{
   1caf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   1caf2:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1caf6:	6842      	ldr	r2, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
   1caf8:	d10f      	bne.n	1cb1a <i2c_nrfx_twim_configure+0x2a>
	switch (I2C_SPEED_GET(i2c_config)) {
   1cafa:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1cafe:	2901      	cmp	r1, #1
   1cb00:	d00e      	beq.n	1cb20 <i2c_nrfx_twim_configure+0x30>
   1cb02:	2902      	cmp	r1, #2
   1cb04:	d015      	beq.n	1cb32 <i2c_nrfx_twim_configure+0x42>
		LOG_ERR("unsupported speed");
   1cb06:	4a0d      	ldr	r2, [pc, #52]	; (1cb3c <i2c_nrfx_twim_configure+0x4c>)
   1cb08:	9205      	str	r2, [sp, #20]
   1cb0a:	2202      	movs	r2, #2
   1cb0c:	9204      	str	r2, [sp, #16]
   1cb0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cb12:	480b      	ldr	r0, [pc, #44]	; (1cb40 <i2c_nrfx_twim_configure+0x50>)
   1cb14:	aa04      	add	r2, sp, #16
   1cb16:	f7fe f84d 	bl	1abb4 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1cb1a:	f06f 0015 	mvn.w	r0, #21
   1cb1e:	e005      	b.n	1cb2c <i2c_nrfx_twim_configure+0x3c>
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1cb20:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1cb22:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
	return 0;
   1cb26:	2000      	movs	r0, #0
   1cb28:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
   1cb2c:	b007      	add	sp, #28
   1cb2e:	f85d fb04 	ldr.w	pc, [sp], #4
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1cb32:	6813      	ldr	r3, [r2, #0]
   1cb34:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1cb38:	e7f5      	b.n	1cb26 <i2c_nrfx_twim_configure+0x36>
   1cb3a:	bf00      	nop
   1cb3c:	00029d67 	.word	0x00029d67
   1cb40:	00028c58 	.word	0x00028c58

0001cb44 <i2c_nrfx_twim_transfer>:
{
   1cb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb48:	b08d      	sub	sp, #52	; 0x34
   1cb4a:	461d      	mov	r5, r3
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1cb4c:	f8d0 b004 	ldr.w	fp, [r0, #4]
{
   1cb50:	af00      	add	r7, sp, #0
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1cb52:	f8d0 9010 	ldr.w	r9, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1cb56:	f8bb 3018 	ldrh.w	r3, [fp, #24]
{
   1cb5a:	613a      	str	r2, [r7, #16]
   1cb5c:	4606      	mov	r6, r0
   1cb5e:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   1cb60:	2214      	movs	r2, #20
   1cb62:	2100      	movs	r1, #0
   1cb64:	f107 001c 	add.w	r0, r7, #28
	uint8_t *msg_buf = dev_data->msg_buf;
   1cb68:	f8d9 a034 	ldr.w	sl, [r9, #52]	; 0x34
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1cb6c:	617b      	str	r3, [r7, #20]
	nrfx_twim_xfer_desc_t cur_xfer = {
   1cb6e:	f00b fccf 	bl	28510 <memset>
   1cb72:	777d      	strb	r5, [r7, #29]
	return z_impl_k_sem_take(sem, timeout);
   1cb74:	f04f 32ff 	mov.w	r2, #4294967295
   1cb78:	f04f 33ff 	mov.w	r3, #4294967295
   1cb7c:	4648      	mov	r0, r9
   1cb7e:	f007 f8f1 	bl	23d64 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   1cb82:	f109 0318 	add.w	r3, r9, #24
   1cb86:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < num_msgs; i++) {
   1cb88:	f04f 0800 	mov.w	r8, #0
   1cb8c:	2200      	movs	r2, #0
   1cb8e:	2300      	movs	r3, #0
   1cb90:	f109 0018 	add.w	r0, r9, #24
   1cb94:	f007 f8e6 	bl	23d64 <z_impl_k_sem_take>
	uint16_t msg_buf_used = 0;
   1cb98:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   1cb9a:	693b      	ldr	r3, [r7, #16]
   1cb9c:	4598      	cmp	r8, r3
   1cb9e:	d301      	bcc.n	1cba4 <i2c_nrfx_twim_transfer+0x60>
   1cba0:	2400      	movs	r4, #0
   1cba2:	e038      	b.n	1cc16 <i2c_nrfx_twim_transfer+0xd2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1cba4:	7a20      	ldrb	r0, [r4, #8]
   1cba6:	0702      	lsls	r2, r0, #28
   1cba8:	f100 80eb 	bmi.w	1cd82 <i2c_nrfx_twim_transfer+0x23e>
				&& ((msgs[i].flags & I2C_MSG_READ)
   1cbac:	693a      	ldr	r2, [r7, #16]
		bool concat_next = ((i + 1) < num_msgs)
   1cbae:	f108 0301 	add.w	r3, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   1cbb2:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
   1cbb4:	60bb      	str	r3, [r7, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
   1cbb6:	d20a      	bcs.n	1cbce <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   1cbb8:	0783      	lsls	r3, r0, #30
   1cbba:	d408      	bmi.n	1cbce <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1cbbc:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   1cbbe:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   1cbc2:	f002 0201 	and.w	r2, r2, #1
   1cbc6:	f003 0304 	and.w	r3, r3, #4
   1cbca:	431a      	orrs	r2, r3
   1cbcc:	d02b      	beq.n	1cc26 <i2c_nrfx_twim_transfer+0xe2>
		if (concat_next || (msg_buf_used != 0)) {
   1cbce:	2d00      	cmp	r5, #0
   1cbd0:	d03f      	beq.n	1cc52 <i2c_nrfx_twim_transfer+0x10e>
		bool concat_next = ((i + 1) < num_msgs)
   1cbd2:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   1cbd4:	6862      	ldr	r2, [r4, #4]
   1cbd6:	f8d7 c014 	ldr.w	ip, [r7, #20]
   1cbda:	18a9      	adds	r1, r5, r2
   1cbdc:	4561      	cmp	r1, ip
   1cbde:	d924      	bls.n	1cc2a <i2c_nrfx_twim_transfer+0xe6>
				LOG_ERR("Need to use concatenation buffer and "
   1cbe0:	466c      	mov	r4, sp
   1cbe2:	b08c      	sub	sp, #48	; 0x30
   1cbe4:	6831      	ldr	r1, [r6, #0]
   1cbe6:	466b      	mov	r3, sp
   1cbe8:	61da      	str	r2, [r3, #28]
   1cbea:	697a      	ldr	r2, [r7, #20]
   1cbec:	4866      	ldr	r0, [pc, #408]	; (1cd88 <i2c_nrfx_twim_transfer+0x244>)
   1cbee:	e9c3 2108 	strd	r2, r1, [r3, #32]
   1cbf2:	f240 5203 	movw	r2, #1283	; 0x503
   1cbf6:	851a      	strh	r2, [r3, #40]	; 0x28
   1cbf8:	461a      	mov	r2, r3
   1cbfa:	e9c3 0505 	strd	r0, r5, [r3, #20]
   1cbfe:	4b63      	ldr	r3, [pc, #396]	; (1cd8c <i2c_nrfx_twim_transfer+0x248>)
   1cc00:	f842 3f10 	str.w	r3, [r2, #16]!
   1cc04:	2300      	movs	r3, #0
   1cc06:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   1cc0a:	4861      	ldr	r0, [pc, #388]	; (1cd90 <i2c_nrfx_twim_transfer+0x24c>)
   1cc0c:	f7fd ffd2 	bl	1abb4 <z_impl_z_log_msg_static_create>
   1cc10:	46a5      	mov	sp, r4
				ret = -ENOSPC;
   1cc12:	f06f 041b 	mvn.w	r4, #27
	z_impl_k_sem_give(sem);
   1cc16:	4648      	mov	r0, r9
   1cc18:	f007 f87e 	bl	23d18 <z_impl_k_sem_give>
}
   1cc1c:	4620      	mov	r0, r4
   1cc1e:	3734      	adds	r7, #52	; 0x34
   1cc20:	46bd      	mov	sp, r7
   1cc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bool concat_next = ((i + 1) < num_msgs)
   1cc26:	2301      	movs	r3, #1
   1cc28:	e7d4      	b.n	1cbd4 <i2c_nrfx_twim_transfer+0x90>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   1cc2a:	07c1      	lsls	r1, r0, #31
   1cc2c:	d406      	bmi.n	1cc3c <i2c_nrfx_twim_transfer+0xf8>
   1cc2e:	6821      	ldr	r1, [r4, #0]
   1cc30:	eb0a 0005 	add.w	r0, sl, r5
   1cc34:	607b      	str	r3, [r7, #4]
   1cc36:	f00b fc5e 	bl	284f6 <memcpy>
   1cc3a:	687b      	ldr	r3, [r7, #4]
			msg_buf_used += msgs[i].len;
   1cc3c:	6862      	ldr	r2, [r4, #4]
   1cc3e:	442a      	add	r2, r5
   1cc40:	b295      	uxth	r5, r2
		if (concat_next) {
   1cc42:	2b00      	cmp	r3, #0
   1cc44:	f040 8085 	bne.w	1cd52 <i2c_nrfx_twim_transfer+0x20e>
		if (msg_buf_used == 0) {
   1cc48:	b13d      	cbz	r5, 1cc5a <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.primary_length = msg_buf_used;
   1cc4a:	462b      	mov	r3, r5
			cur_xfer.p_primary_buf = msg_buf;
   1cc4c:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
   1cc50:	e007      	b.n	1cc62 <i2c_nrfx_twim_transfer+0x11e>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1cc52:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
   1cc54:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1cc58:	d51b      	bpl.n	1cc92 <i2c_nrfx_twim_transfer+0x14e>
			cur_xfer.p_primary_buf = msgs[i].buf;
   1cc5a:	2500      	movs	r5, #0
   1cc5c:	6823      	ldr	r3, [r4, #0]
   1cc5e:	62bb      	str	r3, [r7, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
   1cc60:	6863      	ldr	r3, [r4, #4]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1cc62:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
   1cc64:	623b      	str	r3, [r7, #32]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   1cc66:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1cc6a:	f082 0202 	eor.w	r2, r2, #2
   1cc6e:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1cc72:	4658      	mov	r0, fp
   1cc74:	0152      	lsls	r2, r2, #5
   1cc76:	f107 011c 	add.w	r1, r7, #28
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1cc7a:	773b      	strb	r3, [r7, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1cc7c:	f004 fc32 	bl	214e4 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1cc80:	4b44      	ldr	r3, [pc, #272]	; (1cd94 <i2c_nrfx_twim_transfer+0x250>)
   1cc82:	4298      	cmp	r0, r3
   1cc84:	d02c      	beq.n	1cce0 <i2c_nrfx_twim_transfer+0x19c>
			if (res == NRFX_ERROR_BUSY) {
   1cc86:	330b      	adds	r3, #11
   1cc88:	4298      	cmp	r0, r3
   1cc8a:	d144      	bne.n	1cd16 <i2c_nrfx_twim_transfer+0x1d2>
				ret = -EBUSY;
   1cc8c:	f06f 040f 	mvn.w	r4, #15
   1cc90:	e7c1      	b.n	1cc16 <i2c_nrfx_twim_transfer+0xd2>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1cc92:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1cc96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1cc9a:	d0de      	beq.n	1cc5a <i2c_nrfx_twim_transfer+0x116>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   1cc9c:	f8bb 301a 	ldrh.w	r3, [fp, #26]
   1cca0:	4293      	cmp	r3, r2
   1cca2:	d218      	bcs.n	1ccd6 <i2c_nrfx_twim_transfer+0x192>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   1cca4:	466c      	mov	r4, sp
   1cca6:	b08a      	sub	sp, #40	; 0x28
   1cca8:	466b      	mov	r3, sp
   1ccaa:	6831      	ldr	r1, [r6, #0]
   1ccac:	483a      	ldr	r0, [pc, #232]	; (1cd98 <i2c_nrfx_twim_transfer+0x254>)
   1ccae:	61d9      	str	r1, [r3, #28]
   1ccb0:	e9c3 0205 	strd	r0, r2, [r3, #20]
   1ccb4:	f240 3201 	movw	r2, #769	; 0x301
   1ccb8:	841a      	strh	r2, [r3, #32]
   1ccba:	461a      	mov	r2, r3
   1ccbc:	4b37      	ldr	r3, [pc, #220]	; (1cd9c <i2c_nrfx_twim_transfer+0x258>)
   1ccbe:	f842 3f10 	str.w	r3, [r2, #16]!
   1ccc2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1ccc6:	462b      	mov	r3, r5
   1ccc8:	4831      	ldr	r0, [pc, #196]	; (1cd90 <i2c_nrfx_twim_transfer+0x24c>)
   1ccca:	f7fd ff73 	bl	1abb4 <z_impl_z_log_msg_static_create>
   1ccce:	46a5      	mov	sp, r4
				ret = -EINVAL;
   1ccd0:	f06f 0415 	mvn.w	r4, #21
				break;
   1ccd4:	e79f      	b.n	1cc16 <i2c_nrfx_twim_transfer+0xd2>
   1ccd6:	4650      	mov	r0, sl
   1ccd8:	f00b fc0d 	bl	284f6 <memcpy>
			msg_buf_used = msgs[i].len;
   1ccdc:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
   1ccde:	e7b3      	b.n	1cc48 <i2c_nrfx_twim_transfer+0x104>
	return z_impl_k_sem_take(sem, timeout);
   1cce0:	2300      	movs	r3, #0
   1cce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1cce6:	68f8      	ldr	r0, [r7, #12]
   1cce8:	f007 f83c 	bl	23d64 <z_impl_k_sem_take>
		if (ret != 0) {
   1ccec:	4603      	mov	r3, r0
   1ccee:	b1a8      	cbz	r0, 1cd1c <i2c_nrfx_twim_transfer+0x1d8>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1ccf0:	466c      	mov	r4, sp
   1ccf2:	b088      	sub	sp, #32
   1ccf4:	466a      	mov	r2, sp
   1ccf6:	4b2a      	ldr	r3, [pc, #168]	; (1cda0 <i2c_nrfx_twim_transfer+0x25c>)
   1ccf8:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1ccfc:	2303      	movs	r3, #3
   1ccfe:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd02:	4823      	ldr	r0, [pc, #140]	; (1cd90 <i2c_nrfx_twim_transfer+0x24c>)
   1cd04:	2300      	movs	r3, #0
   1cd06:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cd0a:	f7fd ff53 	bl	1abb4 <z_impl_z_log_msg_static_create>
			(void)i2c_nrfx_twim_recover_bus(dev);
   1cd0e:	4630      	mov	r0, r6
   1cd10:	46a5      	mov	sp, r4
   1cd12:	f7ff feb5 	bl	1ca80 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
   1cd16:	f06f 0404 	mvn.w	r4, #4
   1cd1a:	e77c      	b.n	1cc16 <i2c_nrfx_twim_transfer+0xd2>
		res = dev_data->res;
   1cd1c:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1cd20:	4a1c      	ldr	r2, [pc, #112]	; (1cd94 <i2c_nrfx_twim_transfer+0x250>)
   1cd22:	4291      	cmp	r1, r2
   1cd24:	d011      	beq.n	1cd4a <i2c_nrfx_twim_transfer+0x206>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1cd26:	466c      	mov	r4, sp
   1cd28:	b088      	sub	sp, #32
   1cd2a:	466a      	mov	r2, sp
   1cd2c:	481d      	ldr	r0, [pc, #116]	; (1cda4 <i2c_nrfx_twim_transfer+0x260>)
   1cd2e:	f8c2 801c 	str.w	r8, [r2, #28]
   1cd32:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1cd36:	2104      	movs	r1, #4
   1cd38:	f842 1f10 	str.w	r1, [r2, #16]!
   1cd3c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cd40:	4813      	ldr	r0, [pc, #76]	; (1cd90 <i2c_nrfx_twim_transfer+0x24c>)
   1cd42:	f7fd ff37 	bl	1abb4 <z_impl_z_log_msg_static_create>
   1cd46:	46a5      	mov	sp, r4
			break;
   1cd48:	e7e5      	b.n	1cd16 <i2c_nrfx_twim_transfer+0x1d2>
		if ((msgs[i].flags & I2C_MSG_READ)
   1cd4a:	7a23      	ldrb	r3, [r4, #8]
   1cd4c:	07db      	lsls	r3, r3, #31
   1cd4e:	d404      	bmi.n	1cd5a <i2c_nrfx_twim_transfer+0x216>
		msg_buf_used = 0;
   1cd50:	2500      	movs	r5, #0
   1cd52:	f8d7 8008 	ldr.w	r8, [r7, #8]
   1cd56:	340c      	adds	r4, #12
   1cd58:	e71f      	b.n	1cb9a <i2c_nrfx_twim_transfer+0x56>
		    && cur_xfer.p_primary_buf == msg_buf) {
   1cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd5c:	459a      	cmp	sl, r3
   1cd5e:	d1f7      	bne.n	1cd50 <i2c_nrfx_twim_transfer+0x20c>
   1cd60:	46a0      	mov	r8, r4
   1cd62:	e007      	b.n	1cd74 <i2c_nrfx_twim_transfer+0x230>
				msg_buf_used -= msgs[j].len;
   1cd64:	1aa9      	subs	r1, r5, r2
   1cd66:	b28d      	uxth	r5, r1
   1cd68:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1cd6c:	fa1a f181 	uxtah	r1, sl, r1
   1cd70:	f00b fbc1 	bl	284f6 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   1cd74:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1cd78:	f1a8 080c 	sub.w	r8, r8, #12
   1cd7c:	4295      	cmp	r5, r2
   1cd7e:	d2f1      	bcs.n	1cd64 <i2c_nrfx_twim_transfer+0x220>
   1cd80:	e7e6      	b.n	1cd50 <i2c_nrfx_twim_transfer+0x20c>
			ret = -ENOTSUP;
   1cd82:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1cd86:	e746      	b.n	1cc16 <i2c_nrfx_twim_transfer+0xd2>
   1cd88:	00029d79 	.word	0x00029d79
   1cd8c:	01000006 	.word	0x01000006
   1cd90:	00028c58 	.word	0x00028c58
   1cd94:	0bad0000 	.word	0x0bad0000
   1cd98:	00029e09 	.word	0x00029e09
   1cd9c:	01000004 	.word	0x01000004
   1cda0:	00029e6f 	.word	0x00029e6f
   1cda4:	00029e99 	.word	0x00029e99

0001cda8 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   1cda8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cdac:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1cdae:	6844      	ldr	r4, [r0, #4]
{
   1cdb0:	af00      	add	r7, sp, #0
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1cdb2:	6a66      	ldr	r6, [r4, #36]	; 0x24
	struct spi_nrfx_data *dev_data = dev->data;
   1cdb4:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1cdb6:	2100      	movs	r1, #0
   1cdb8:	4630      	mov	r0, r6
   1cdba:	1d3a      	adds	r2, r7, #4
   1cdbc:	f009 fd17 	bl	267ee <pinctrl_lookup_state>
	if (ret < 0) {
   1cdc0:	2800      	cmp	r0, #0
   1cdc2:	db32      	blt.n	1ce2a <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1cdc4:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1cdc6:	6832      	ldr	r2, [r6, #0]
   1cdc8:	7919      	ldrb	r1, [r3, #4]
   1cdca:	6818      	ldr	r0, [r3, #0]
   1cdcc:	f000 fe30 	bl	1da30 <pinctrl_configure_pins>
	if (err < 0) {
   1cdd0:	2800      	cmp	r0, #0
   1cdd2:	db2a      	blt.n	1ce2a <spi_nrfx_init+0x82>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1cdd4:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   1cdd6:	6a23      	ldr	r3, [r4, #32]
   1cdd8:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1cdda:	68ac      	ldr	r4, [r5, #8]
   1cddc:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1cde0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1cde4:	429c      	cmp	r4, r3
   1cde6:	d304      	bcc.n	1cdf2 <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1cde8:	4628      	mov	r0, r5
   1cdea:	f009 fc4f 	bl	2668c <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   1cdee:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   1cdf0:	e01b      	b.n	1ce2a <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
   1cdf2:	6820      	ldr	r0, [r4, #0]
   1cdf4:	f00a ff97 	bl	27d26 <z_device_is_ready>
   1cdf8:	b9d8      	cbnz	r0, 1ce32 <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1cdfa:	6823      	ldr	r3, [r4, #0]
   1cdfc:	6819      	ldr	r1, [r3, #0]
   1cdfe:	7923      	ldrb	r3, [r4, #4]
   1ce00:	466c      	mov	r4, sp
   1ce02:	b08a      	sub	sp, #40	; 0x28
   1ce04:	466a      	mov	r2, sp
   1ce06:	61d3      	str	r3, [r2, #28]
   1ce08:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ce0c:	481a      	ldr	r0, [pc, #104]	; (1ce78 <spi_nrfx_init+0xd0>)
   1ce0e:	8413      	strh	r3, [r2, #32]
   1ce10:	4b1a      	ldr	r3, [pc, #104]	; (1ce7c <spi_nrfx_init+0xd4>)
   1ce12:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1ce16:	481a      	ldr	r0, [pc, #104]	; (1ce80 <spi_nrfx_init+0xd8>)
   1ce18:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1ce1c:	f842 3f10 	str.w	r3, [r2, #16]!
   1ce20:	f009 fbfb 	bl	2661a <z_log_msg_static_create.constprop.0>
			return -ENODEV;
   1ce24:	f06f 0012 	mvn.w	r0, #18
   1ce28:	46a5      	mov	sp, r4
#endif
}
   1ce2a:	370c      	adds	r7, #12
   1ce2c:	46bd      	mov	sp, r7
   1ce2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
   1ce32:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1ce34:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1ce36:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   1ce38:	f8d0 e010 	ldr.w	lr, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1ce3c:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   1ce3e:	bf54      	ite	pl
   1ce40:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1ce44:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ce48:	f8de c000 	ldr.w	ip, [lr]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1ce4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ce50:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1ce54:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ce56:	bf4c      	ite	mi
   1ce58:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ce5c:	ea2c 0308 	bicpl.w	r3, ip, r8
	const struct gpio_driver_api *api =
   1ce60:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ce64:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   1ce68:	f8d9 3000 	ldr.w	r3, [r9]
   1ce6c:	4798      	blx	r3
		if (ret < 0) {
   1ce6e:	2800      	cmp	r0, #0
   1ce70:	dbdb      	blt.n	1ce2a <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1ce72:	3408      	adds	r4, #8
   1ce74:	e7b2      	b.n	1cddc <spi_nrfx_init+0x34>
   1ce76:	bf00      	nop
   1ce78:	00029ed5 	.word	0x00029ed5
   1ce7c:	01000004 	.word	0x01000004
   1ce80:	00028d18 	.word	0x00028d18

0001ce84 <transfer_next_chunk>:
{
   1ce84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1ce86:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1ce88:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1ce8a:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1ce8c:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1ce8e:	b98d      	cbnz	r5, 1ceb4 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   1ce90:	2b00      	cmp	r3, #0
   1ce92:	d137      	bne.n	1cf04 <transfer_next_chunk+0x80>
	int error = 0;
   1ce94:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   1ce96:	2200      	movs	r2, #0
   1ce98:	4620      	mov	r0, r4
   1ce9a:	4611      	mov	r1, r2
   1ce9c:	f009 fbd4 	bl	26648 <_spi_context_cs_control>
	ctx->sync_status = status;
   1cea0:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1cea2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1cea6:	f006 ff37 	bl	23d18 <z_impl_k_sem_give>
	dev_data->busy = false;
   1ceaa:	2300      	movs	r3, #0
   1ceac:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1ceb0:	b004      	add	sp, #16
   1ceb2:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1ceb4:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1ceb6:	bb0b      	cbnz	r3, 1cefc <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   1ceb8:	bb39      	cbnz	r1, 1cf0a <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1ceba:	f641 72ff 	movw	r2, #8191	; 0x1fff
   1cebe:	42aa      	cmp	r2, r5
   1cec0:	bf28      	it	cs
   1cec2:	462a      	movcs	r2, r5
   1cec4:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   1cec6:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1cec8:	9100      	str	r1, [sp, #0]
   1ceca:	b11b      	cbz	r3, 1ced4 <transfer_next_chunk+0x50>
   1cecc:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1cece:	2b00      	cmp	r3, #0
   1ced0:	bf18      	it	ne
   1ced2:	4613      	movne	r3, r2
   1ced4:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1ced6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1ced8:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1ceda:	b11b      	cbz	r3, 1cee4 <transfer_next_chunk+0x60>
   1cedc:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1cede:	2b00      	cmp	r3, #0
   1cee0:	bf18      	it	ne
   1cee2:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1cee4:	2200      	movs	r2, #0
   1cee6:	4669      	mov	r1, sp
   1cee8:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1ceea:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1ceec:	f004 f9e0 	bl	212b0 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1cef0:	4b0d      	ldr	r3, [pc, #52]	; (1cf28 <transfer_next_chunk+0xa4>)
   1cef2:	4298      	cmp	r0, r3
   1cef4:	d0dc      	beq.n	1ceb0 <transfer_next_chunk+0x2c>
			error = -EIO;
   1cef6:	f06f 0504 	mvn.w	r5, #4
   1cefa:	e7cc      	b.n	1ce96 <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1cefc:	429d      	cmp	r5, r3
   1cefe:	bf28      	it	cs
   1cf00:	461d      	movcs	r5, r3
   1cf02:	e7d9      	b.n	1ceb8 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   1cf04:	461d      	mov	r5, r3
   1cf06:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1cf08:	e7d7      	b.n	1ceba <transfer_next_chunk+0x36>
   1cf0a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1cf0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1cf12:	d0d2      	beq.n	1ceba <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1cf14:	2d08      	cmp	r5, #8
   1cf16:	bf28      	it	cs
   1cf18:	2508      	movcs	r5, #8
   1cf1a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1cf1c:	462a      	mov	r2, r5
   1cf1e:	f00b faea 	bl	284f6 <memcpy>
			tx_buf = dev_data->buffer;
   1cf22:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1cf24:	e7c9      	b.n	1ceba <transfer_next_chunk+0x36>
   1cf26:	bf00      	nop
   1cf28:	0bad0000 	.word	0x0bad0000

0001cf2c <event_handler>:
{
   1cf2c:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1cf2e:	7803      	ldrb	r3, [r0, #0]
{
   1cf30:	460c      	mov	r4, r1
   1cf32:	b086      	sub	sp, #24
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1cf34:	2b00      	cmp	r3, #0
   1cf36:	d154      	bne.n	1cfe2 <event_handler+0xb6>
	if (!ctx->tx_len) {
   1cf38:	6d8b      	ldr	r3, [r1, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1cf3a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   1cf3c:	b15b      	cbz	r3, 1cf56 <event_handler+0x2a>
	if (len > ctx->tx_len) {
   1cf3e:	429a      	cmp	r2, r3
   1cf40:	d91e      	bls.n	1cf80 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
   1cf42:	4b29      	ldr	r3, [pc, #164]	; (1cfe8 <event_handler+0xbc>)
   1cf44:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cf48:	9305      	str	r3, [sp, #20]
   1cf4a:	2302      	movs	r3, #2
   1cf4c:	4827      	ldr	r0, [pc, #156]	; (1cfec <event_handler+0xc0>)
   1cf4e:	aa04      	add	r2, sp, #16
   1cf50:	9304      	str	r3, [sp, #16]
   1cf52:	f009 fb62 	bl	2661a <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
   1cf56:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1cf58:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1cf5a:	b15b      	cbz	r3, 1cf74 <event_handler+0x48>
	if (len > ctx->rx_len) {
   1cf5c:	429a      	cmp	r2, r3
   1cf5e:	d927      	bls.n	1cfb0 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
   1cf60:	4b21      	ldr	r3, [pc, #132]	; (1cfe8 <event_handler+0xbc>)
   1cf62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cf66:	9305      	str	r3, [sp, #20]
   1cf68:	2302      	movs	r3, #2
   1cf6a:	4820      	ldr	r0, [pc, #128]	; (1cfec <event_handler+0xc0>)
   1cf6c:	aa04      	add	r2, sp, #16
   1cf6e:	9304      	str	r3, [sp, #16]
   1cf70:	f009 fb53 	bl	2661a <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1cf74:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1cf76:	b006      	add	sp, #24
   1cf78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1cf7c:	f7ff bf82 	b.w	1ce84 <transfer_next_chunk>
	ctx->tx_len -= len;
   1cf80:	1a9b      	subs	r3, r3, r2
   1cf82:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1cf84:	b973      	cbnz	r3, 1cfa4 <event_handler+0x78>
		++ctx->current_tx;
   1cf86:	6c4b      	ldr	r3, [r1, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1cf88:	f101 0258 	add.w	r2, r1, #88	; 0x58
		++ctx->current_tx;
   1cf8c:	3308      	adds	r3, #8
   1cf8e:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1cf90:	6c8b      	ldr	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1cf92:	f104 0044 	add.w	r0, r4, #68	; 0x44
		--ctx->tx_count;
   1cf96:	3b01      	subs	r3, #1
   1cf98:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1cf9a:	3148      	adds	r1, #72	; 0x48
   1cf9c:	f009 fb2a 	bl	265f4 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1cfa0:	6560      	str	r0, [r4, #84]	; 0x54
   1cfa2:	e7d8      	b.n	1cf56 <event_handler+0x2a>
	} else if (ctx->tx_buf) {
   1cfa4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1cfa6:	2b00      	cmp	r3, #0
   1cfa8:	d0d5      	beq.n	1cf56 <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
   1cfaa:	4413      	add	r3, r2
   1cfac:	654b      	str	r3, [r1, #84]	; 0x54
   1cfae:	e7d2      	b.n	1cf56 <event_handler+0x2a>
	ctx->rx_len -= len;
   1cfb0:	1a9b      	subs	r3, r3, r2
   1cfb2:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1cfb4:	b97b      	cbnz	r3, 1cfd6 <event_handler+0xaa>
		++ctx->current_rx;
   1cfb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1cfb8:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1cfbc:	3308      	adds	r3, #8
   1cfbe:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1cfc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1cfc2:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1cfc6:	3b01      	subs	r3, #1
   1cfc8:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1cfca:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1cfce:	f009 fb11 	bl	265f4 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1cfd2:	65e0      	str	r0, [r4, #92]	; 0x5c
   1cfd4:	e7ce      	b.n	1cf74 <event_handler+0x48>
	} else if (ctx->rx_buf) {
   1cfd6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1cfd8:	2b00      	cmp	r3, #0
   1cfda:	d0cb      	beq.n	1cf74 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1cfdc:	4413      	add	r3, r2
   1cfde:	65e3      	str	r3, [r4, #92]	; 0x5c
   1cfe0:	e7c8      	b.n	1cf74 <event_handler+0x48>
}
   1cfe2:	b006      	add	sp, #24
   1cfe4:	bd10      	pop	{r4, pc}
   1cfe6:	bf00      	nop
   1cfe8:	00029ef9 	.word	0x00029ef9
   1cfec:	00028d18 	.word	0x00028d18

0001cff0 <spi_nrfx_transceive>:
{
   1cff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cff4:	b08b      	sub	sp, #44	; 0x2c
   1cff6:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1cff8:	888b      	ldrh	r3, [r1, #4]
   1cffa:	af00      	add	r7, sp, #0
   1cffc:	049b      	lsls	r3, r3, #18
   1cffe:	4680      	mov	r8, r0
   1d000:	460e      	mov	r6, r1
	struct spi_nrfx_data *dev_data = dev->data;
   1d002:	6904      	ldr	r4, [r0, #16]
{
   1d004:	60ba      	str	r2, [r7, #8]
   1d006:	d439      	bmi.n	1d07c <spi_nrfx_transceive+0x8c>
	return z_impl_k_sem_take(sem, timeout);
   1d008:	f04f 32ff 	mov.w	r2, #4294967295
   1d00c:	f04f 33ff 	mov.w	r3, #4294967295
   1d010:	f104 0010 	add.w	r0, r4, #16
   1d014:	f006 fea6 	bl	23d64 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1d018:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1d01a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1d01e:	f8d8 9010 	ldr.w	r9, [r8, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1d022:	60fb      	str	r3, [r7, #12]
	uint32_t max_freq = dev_config->max_freq;
   1d024:	689b      	ldr	r3, [r3, #8]
   1d026:	603b      	str	r3, [r7, #0]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1d028:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
   1d02c:	607b      	str	r3, [r7, #4]
   1d02e:	b123      	cbz	r3, 1d03a <spi_nrfx_transceive+0x4a>
   1d030:	f8d9 3000 	ldr.w	r3, [r9]
   1d034:	429e      	cmp	r6, r3
   1d036:	f000 80d0 	beq.w	1d1da <spi_nrfx_transceive+0x1ea>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1d03a:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   1d03e:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   1d042:	d022      	beq.n	1d08a <spi_nrfx_transceive+0x9a>
		LOG_ERR("Half-duplex not supported");
   1d044:	4b9b      	ldr	r3, [pc, #620]	; (1d2b4 <spi_nrfx_transceive+0x2c4>)
		return -ENOTSUP;
   1d046:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
   1d04a:	627b      	str	r3, [r7, #36]	; 0x24
   1d04c:	2302      	movs	r3, #2
   1d04e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d052:	4899      	ldr	r0, [pc, #612]	; (1d2b8 <spi_nrfx_transceive+0x2c8>)
   1d054:	623b      	str	r3, [r7, #32]
   1d056:	f107 0220 	add.w	r2, r7, #32
   1d05a:	f009 fade 	bl	2661a <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1d05e:	6823      	ldr	r3, [r4, #0]
   1d060:	889b      	ldrh	r3, [r3, #4]
   1d062:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1d066:	d104      	bne.n	1d072 <spi_nrfx_transceive+0x82>
		ctx->owner = NULL;
   1d068:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1d06a:	f104 0010 	add.w	r0, r4, #16
   1d06e:	f006 fe53 	bl	23d18 <z_impl_k_sem_give>
}
   1d072:	4628      	mov	r0, r5
   1d074:	372c      	adds	r7, #44	; 0x2c
   1d076:	46bd      	mov	sp, r7
   1d078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1d07c:	69a3      	ldr	r3, [r4, #24]
   1d07e:	2b00      	cmp	r3, #0
   1d080:	d1c2      	bne.n	1d008 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1d082:	6863      	ldr	r3, [r4, #4]
   1d084:	4299      	cmp	r1, r3
   1d086:	d1bf      	bne.n	1d008 <spi_nrfx_transceive+0x18>
   1d088:	e7c7      	b.n	1d01a <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1d08a:	f01c 0f01 	tst.w	ip, #1
   1d08e:	d016      	beq.n	1d0be <spi_nrfx_transceive+0xce>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1d090:	466d      	mov	r5, sp
   1d092:	b088      	sub	sp, #32
   1d094:	f8d8 3000 	ldr.w	r3, [r8]
   1d098:	466a      	mov	r2, sp
   1d09a:	4988      	ldr	r1, [pc, #544]	; (1d2bc <spi_nrfx_transceive+0x2cc>)
   1d09c:	4886      	ldr	r0, [pc, #536]	; (1d2b8 <spi_nrfx_transceive+0x2c8>)
   1d09e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1d0a2:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d0a6:	8393      	strh	r3, [r2, #28]
   1d0a8:	4b85      	ldr	r3, [pc, #532]	; (1d2c0 <spi_nrfx_transceive+0x2d0>)
   1d0aa:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1d0ae:	f842 3f10 	str.w	r3, [r2, #16]!
   1d0b2:	f009 fab2 	bl	2661a <z_log_msg_static_create.constprop.0>
   1d0b6:	46ad      	mov	sp, r5
		return -EINVAL;
   1d0b8:	f06f 0515 	mvn.w	r5, #21
   1d0bc:	e7cf      	b.n	1d05e <spi_nrfx_transceive+0x6e>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1d0be:	f01c 0f08 	tst.w	ip, #8
   1d0c2:	d00b      	beq.n	1d0dc <spi_nrfx_transceive+0xec>
		LOG_ERR("Loopback mode is not supported");
   1d0c4:	4b7f      	ldr	r3, [pc, #508]	; (1d2c4 <spi_nrfx_transceive+0x2d4>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1d0c6:	627b      	str	r3, [r7, #36]	; 0x24
   1d0c8:	2302      	movs	r3, #2
   1d0ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d0ce:	487a      	ldr	r0, [pc, #488]	; (1d2b8 <spi_nrfx_transceive+0x2c8>)
   1d0d0:	623b      	str	r3, [r7, #32]
   1d0d2:	f107 0220 	add.w	r2, r7, #32
   1d0d6:	f009 faa0 	bl	2661a <z_log_msg_static_create.constprop.0>
	if (error == 0) {
   1d0da:	e7ed      	b.n	1d0b8 <spi_nrfx_transceive+0xc8>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1d0dc:	f3cc 1345 	ubfx	r3, ip, #5, #6
   1d0e0:	2b08      	cmp	r3, #8
   1d0e2:	d001      	beq.n	1d0e8 <spi_nrfx_transceive+0xf8>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1d0e4:	4b78      	ldr	r3, [pc, #480]	; (1d2c8 <spi_nrfx_transceive+0x2d8>)
   1d0e6:	e7ee      	b.n	1d0c6 <spi_nrfx_transceive+0xd6>
	if (spi_cfg->frequency < 125000) {
   1d0e8:	6835      	ldr	r5, [r6, #0]
   1d0ea:	4b78      	ldr	r3, [pc, #480]	; (1d2cc <spi_nrfx_transceive+0x2dc>)
   1d0ec:	429d      	cmp	r5, r3
   1d0ee:	d801      	bhi.n	1d0f4 <spi_nrfx_transceive+0x104>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1d0f0:	4b77      	ldr	r3, [pc, #476]	; (1d2d0 <spi_nrfx_transceive+0x2e0>)
   1d0f2:	e7e8      	b.n	1d0c6 <spi_nrfx_transceive+0xd6>
	config = dev_config->def_config;
   1d0f4:	68fb      	ldr	r3, [r7, #12]
   1d0f6:	f107 0e10 	add.w	lr, r7, #16
   1d0fa:	f103 0b0c 	add.w	fp, r3, #12
   1d0fe:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   1d102:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1d106:	f8db 3000 	ldr.w	r3, [fp]
   1d10a:	f8ce 3000 	str.w	r3, [lr]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1d10e:	683b      	ldr	r3, [r7, #0]
   1d110:	42ab      	cmp	r3, r5
   1d112:	bf28      	it	cs
   1d114:	462b      	movcs	r3, r5
   1d116:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1d118:	4b6e      	ldr	r3, [pc, #440]	; (1d2d4 <spi_nrfx_transceive+0x2e4>)
   1d11a:	429d      	cmp	r5, r3
   1d11c:	d945      	bls.n	1d1aa <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 500000) {
   1d11e:	4b6e      	ldr	r3, [pc, #440]	; (1d2d8 <spi_nrfx_transceive+0x2e8>)
   1d120:	429d      	cmp	r5, r3
   1d122:	d945      	bls.n	1d1b0 <spi_nrfx_transceive+0x1c0>
	} else if (frequency < 1000000) {
   1d124:	4b6d      	ldr	r3, [pc, #436]	; (1d2dc <spi_nrfx_transceive+0x2ec>)
   1d126:	429d      	cmp	r5, r3
   1d128:	d945      	bls.n	1d1b6 <spi_nrfx_transceive+0x1c6>
	} else if (frequency < 2000000) {
   1d12a:	4b6d      	ldr	r3, [pc, #436]	; (1d2e0 <spi_nrfx_transceive+0x2f0>)
   1d12c:	429d      	cmp	r5, r3
   1d12e:	d945      	bls.n	1d1bc <spi_nrfx_transceive+0x1cc>
	} else if (frequency < 4000000) {
   1d130:	4b6c      	ldr	r3, [pc, #432]	; (1d2e4 <spi_nrfx_transceive+0x2f4>)
   1d132:	429d      	cmp	r5, r3
   1d134:	d945      	bls.n	1d1c2 <spi_nrfx_transceive+0x1d2>
		return NRF_SPIM_FREQ_4M;
   1d136:	4b6c      	ldr	r3, [pc, #432]	; (1d2e8 <spi_nrfx_transceive+0x2f8>)
   1d138:	429d      	cmp	r5, r3
   1d13a:	bf2c      	ite	cs
   1d13c:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
   1d140:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1d144:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1d148:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1d14a:	f00c 0304 	and.w	r3, ip, #4
   1d14e:	d03b      	beq.n	1d1c8 <spi_nrfx_transceive+0x1d8>
			return NRF_SPIM_MODE_2;
   1d150:	2b00      	cmp	r3, #0
   1d152:	bf14      	ite	ne
   1d154:	2303      	movne	r3, #3
   1d156:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1d158:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   1d15a:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1d15c:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1d160:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   1d164:	b12b      	cbz	r3, 1d172 <spi_nrfx_transceive+0x182>
		nrfx_spim_uninit(&dev_config->spim);
   1d166:	68f8      	ldr	r0, [r7, #12]
   1d168:	f004 f85a 	bl	21220 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1d16c:	2300      	movs	r3, #0
   1d16e:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1d172:	464b      	mov	r3, r9
   1d174:	4a5d      	ldr	r2, [pc, #372]	; (1d2ec <spi_nrfx_transceive+0x2fc>)
   1d176:	68f8      	ldr	r0, [r7, #12]
   1d178:	f107 0110 	add.w	r1, r7, #16
   1d17c:	f003 ffa8 	bl	210d0 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1d180:	4b5b      	ldr	r3, [pc, #364]	; (1d2f0 <spi_nrfx_transceive+0x300>)
   1d182:	4298      	cmp	r0, r3
   1d184:	d024      	beq.n	1d1d0 <spi_nrfx_transceive+0x1e0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1d186:	466d      	mov	r5, sp
   1d188:	b088      	sub	sp, #32
   1d18a:	466a      	mov	r2, sp
   1d18c:	4b59      	ldr	r3, [pc, #356]	; (1d2f4 <spi_nrfx_transceive+0x304>)
   1d18e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d192:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d196:	2303      	movs	r3, #3
   1d198:	4847      	ldr	r0, [pc, #284]	; (1d2b8 <spi_nrfx_transceive+0x2c8>)
   1d19a:	f842 3f10 	str.w	r3, [r2, #16]!
   1d19e:	f009 fa3c 	bl	2661a <z_log_msg_static_create.constprop.0>
   1d1a2:	46ad      	mov	sp, r5
		return -EIO;
   1d1a4:	f06f 0504 	mvn.w	r5, #4
   1d1a8:	e759      	b.n	1d05e <spi_nrfx_transceive+0x6e>
		return NRF_SPIM_FREQ_125K;
   1d1aa:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1d1ae:	e7c9      	b.n	1d144 <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_250K;
   1d1b0:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1d1b4:	e7c6      	b.n	1d144 <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_500K;
   1d1b6:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1d1ba:	e7c3      	b.n	1d144 <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_1M;
   1d1bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1d1c0:	e7c0      	b.n	1d144 <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_2M;
   1d1c2:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1d1c6:	e7bd      	b.n	1d144 <spi_nrfx_transceive+0x154>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1d1c8:	3b00      	subs	r3, #0
   1d1ca:	bf18      	it	ne
   1d1cc:	2301      	movne	r3, #1
   1d1ce:	e7c3      	b.n	1d158 <spi_nrfx_transceive+0x168>
	dev_data->initialized = true;
   1d1d0:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1d1d2:	f8c9 6000 	str.w	r6, [r9]
	dev_data->initialized = true;
   1d1d6:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
		dev_data->busy = true;
   1d1da:	2301      	movs	r3, #1
   1d1dc:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1d1e0:	68bb      	ldr	r3, [r7, #8]
   1d1e2:	2b00      	cmp	r3, #0
   1d1e4:	d154      	bne.n	1d290 <spi_nrfx_transceive+0x2a0>
   1d1e6:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1d1e8:	2300      	movs	r3, #0
   1d1ea:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1d1ec:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1d1f0:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1d1f4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1d1f8:	f009 f9fc 	bl	265f4 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1d1fc:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1d1fe:	f1ba 0f00 	cmp.w	sl, #0
   1d202:	d14d      	bne.n	1d2a0 <spi_nrfx_transceive+0x2b0>
   1d204:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1d208:	2300      	movs	r3, #0
   1d20a:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1d20c:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1d210:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1d214:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1d218:	f009 f9ec 	bl	265f4 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1d21c:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1d21e:	2101      	movs	r1, #1
   1d220:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1d222:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1d224:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1d226:	4620      	mov	r0, r4
   1d228:	f009 fa0e 	bl	26648 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1d22c:	4640      	mov	r0, r8
   1d22e:	f7ff fe29 	bl	1ce84 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1d232:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1d234:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1d236:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1d238:	429d      	cmp	r5, r3
   1d23a:	bf38      	it	cc
   1d23c:	461d      	movcc	r5, r3
   1d23e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1d242:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1d244:	f858 3b28 	ldr.w	r3, [r8], #40
			return ((t * to_hz + off) / from_hz);
   1d248:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1d24c:	681b      	ldr	r3, [r3, #0]
   1d24e:	4631      	mov	r1, r6
   1d250:	fbb5 f5f3 	udiv	r5, r5, r3
   1d254:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1d258:	35c8      	adds	r5, #200	; 0xc8
   1d25a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d25e:	2300      	movs	r3, #0
   1d260:	fbe5 010c 	umlal	r0, r1, r5, ip
   1d264:	f7fb fd50 	bl	18d08 <__aeabi_uldivmod>
   1d268:	4602      	mov	r2, r0
   1d26a:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1d26c:	4640      	mov	r0, r8
   1d26e:	f006 fd79 	bl	23d64 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1d272:	b1e8      	cbz	r0, 1d2b0 <spi_nrfx_transceive+0x2c0>
		LOG_ERR("Timeout waiting for transfer complete");
   1d274:	4b20      	ldr	r3, [pc, #128]	; (1d2f8 <spi_nrfx_transceive+0x308>)
   1d276:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d27a:	627b      	str	r3, [r7, #36]	; 0x24
   1d27c:	2302      	movs	r3, #2
   1d27e:	480e      	ldr	r0, [pc, #56]	; (1d2b8 <spi_nrfx_transceive+0x2c8>)
   1d280:	623b      	str	r3, [r7, #32]
   1d282:	f107 0220 	add.w	r2, r7, #32
   1d286:	f009 f9c8 	bl	2661a <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
   1d28a:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1d28e:	e6e6      	b.n	1d05e <spi_nrfx_transceive+0x6e>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1d290:	68bb      	ldr	r3, [r7, #8]
   1d292:	681b      	ldr	r3, [r3, #0]
   1d294:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1d296:	2b00      	cmp	r3, #0
   1d298:	d0a6      	beq.n	1d1e8 <spi_nrfx_transceive+0x1f8>
   1d29a:	68bb      	ldr	r3, [r7, #8]
   1d29c:	685b      	ldr	r3, [r3, #4]
   1d29e:	e7a4      	b.n	1d1ea <spi_nrfx_transceive+0x1fa>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1d2a0:	f8da 3000 	ldr.w	r3, [sl]
   1d2a4:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1d2a6:	2b00      	cmp	r3, #0
   1d2a8:	d0ae      	beq.n	1d208 <spi_nrfx_transceive+0x218>
   1d2aa:	f8da 3004 	ldr.w	r3, [sl, #4]
   1d2ae:	e7ac      	b.n	1d20a <spi_nrfx_transceive+0x21a>
	status = ctx->sync_status;
   1d2b0:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1d2b2:	e6d4      	b.n	1d05e <spi_nrfx_transceive+0x6e>
   1d2b4:	00029f17 	.word	0x00029f17
   1d2b8:	00028d18 	.word	0x00028d18
   1d2bc:	00029f31 	.word	0x00029f31
   1d2c0:	01000003 	.word	0x01000003
   1d2c4:	00029f53 	.word	0x00029f53
   1d2c8:	00029f72 	.word	0x00029f72
   1d2cc:	0001e847 	.word	0x0001e847
   1d2d0:	00029fa1 	.word	0x00029fa1
   1d2d4:	0003d08f 	.word	0x0003d08f
   1d2d8:	0007a11f 	.word	0x0007a11f
   1d2dc:	000f423f 	.word	0x000f423f
   1d2e0:	001e847f 	.word	0x001e847f
   1d2e4:	003d08ff 	.word	0x003d08ff
   1d2e8:	007a1200 	.word	0x007a1200
   1d2ec:	0001cf2d 	.word	0x0001cf2d
   1d2f0:	0bad0000 	.word	0x0bad0000
   1d2f4:	00029fd2 	.word	0x00029fd2
   1d2f8:	00029ff9 	.word	0x00029ff9

0001d2fc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1d2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1d2fe:	794b      	ldrb	r3, [r1, #5]
   1d300:	2b01      	cmp	r3, #1
   1d302:	d026      	beq.n	1d352 <uarte_nrfx_configure+0x56>
   1d304:	2b03      	cmp	r3, #3
   1d306:	d121      	bne.n	1d34c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1d308:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1d30a:	798b      	ldrb	r3, [r1, #6]
   1d30c:	2b03      	cmp	r3, #3
   1d30e:	d11d      	bne.n	1d34c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1d310:	79ce      	ldrb	r6, [r1, #7]
   1d312:	b10e      	cbz	r6, 1d318 <uarte_nrfx_configure+0x1c>
   1d314:	2e01      	cmp	r6, #1
   1d316:	d119      	bne.n	1d34c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1d318:	790a      	ldrb	r2, [r1, #4]
   1d31a:	b112      	cbz	r2, 1d322 <uarte_nrfx_configure+0x26>
   1d31c:	2a02      	cmp	r2, #2
   1d31e:	d115      	bne.n	1d34c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1d320:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1d322:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1d324:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1d326:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1d32a:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   1d32c:	d067      	beq.n	1d3fe <uarte_nrfx_configure+0x102>
   1d32e:	d82d      	bhi.n	1d38c <uarte_nrfx_configure+0x90>
   1d330:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1d334:	d066      	beq.n	1d404 <uarte_nrfx_configure+0x108>
   1d336:	d816      	bhi.n	1d366 <uarte_nrfx_configure+0x6a>
   1d338:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1d33c:	d064      	beq.n	1d408 <uarte_nrfx_configure+0x10c>
   1d33e:	d80a      	bhi.n	1d356 <uarte_nrfx_configure+0x5a>
   1d340:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1d344:	d063      	beq.n	1d40e <uarte_nrfx_configure+0x112>
   1d346:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1d34a:	d063      	beq.n	1d414 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   1d34c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d350:	e054      	b.n	1d3fc <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1d352:	2500      	movs	r5, #0
   1d354:	e7d9      	b.n	1d30a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1d356:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1d35a:	d05e      	beq.n	1d41a <uarte_nrfx_configure+0x11e>
   1d35c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1d360:	d1f4      	bne.n	1d34c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1d362:	4b38      	ldr	r3, [pc, #224]	; (1d444 <uarte_nrfx_configure+0x148>)
   1d364:	e03c      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d366:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1d36a:	d059      	beq.n	1d420 <uarte_nrfx_configure+0x124>
   1d36c:	d807      	bhi.n	1d37e <uarte_nrfx_configure+0x82>
   1d36e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1d372:	d057      	beq.n	1d424 <uarte_nrfx_configure+0x128>
   1d374:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1d378:	d1e8      	bne.n	1d34c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1d37a:	4b33      	ldr	r3, [pc, #204]	; (1d448 <uarte_nrfx_configure+0x14c>)
   1d37c:	e030      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d37e:	f647 2412 	movw	r4, #31250	; 0x7a12
   1d382:	42a3      	cmp	r3, r4
   1d384:	d1e2      	bne.n	1d34c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1d386:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1d38a:	e029      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d38c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1d390:	d04a      	beq.n	1d428 <uarte_nrfx_configure+0x12c>
   1d392:	d813      	bhi.n	1d3bc <uarte_nrfx_configure+0xc0>
   1d394:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1d398:	d049      	beq.n	1d42e <uarte_nrfx_configure+0x132>
   1d39a:	d809      	bhi.n	1d3b0 <uarte_nrfx_configure+0xb4>
   1d39c:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1d3a0:	42a3      	cmp	r3, r4
   1d3a2:	d046      	beq.n	1d432 <uarte_nrfx_configure+0x136>
   1d3a4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1d3a8:	d1d0      	bne.n	1d34c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1d3aa:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1d3ae:	e017      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d3b0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1d3b4:	d1ca      	bne.n	1d34c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1d3b6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1d3ba:	e011      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d3bc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1d3c0:	d03a      	beq.n	1d438 <uarte_nrfx_configure+0x13c>
   1d3c2:	d808      	bhi.n	1d3d6 <uarte_nrfx_configure+0xda>
   1d3c4:	4c21      	ldr	r4, [pc, #132]	; (1d44c <uarte_nrfx_configure+0x150>)
   1d3c6:	42a3      	cmp	r3, r4
   1d3c8:	d039      	beq.n	1d43e <uarte_nrfx_configure+0x142>
   1d3ca:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1d3ce:	d1bd      	bne.n	1d34c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1d3d0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1d3d4:	e004      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d3d6:	4c1e      	ldr	r4, [pc, #120]	; (1d450 <uarte_nrfx_configure+0x154>)
   1d3d8:	42a3      	cmp	r3, r4
   1d3da:	d1b7      	bne.n	1d34c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1d3dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1d3e0:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1d3e2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   1d3e6:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   1d3e8:	4335      	orrs	r5, r6
   1d3ea:	681b      	ldr	r3, [r3, #0]
   1d3ec:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1d3ee:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1d3f2:	1d23      	adds	r3, r4, #4
   1d3f4:	c903      	ldmia	r1, {r0, r1}
   1d3f6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1d3fa:	2000      	movs	r0, #0
}
   1d3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1d3fe:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1d402:	e7ed      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1d404:	4b13      	ldr	r3, [pc, #76]	; (1d454 <uarte_nrfx_configure+0x158>)
   1d406:	e7eb      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1d408:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1d40c:	e7e8      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1d40e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1d412:	e7e5      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d414:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1d418:	e7e2      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1d41a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1d41e:	e7df      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1d420:	4b0d      	ldr	r3, [pc, #52]	; (1d458 <uarte_nrfx_configure+0x15c>)
   1d422:	e7dd      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1d424:	4b0d      	ldr	r3, [pc, #52]	; (1d45c <uarte_nrfx_configure+0x160>)
   1d426:	e7db      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1d428:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1d42c:	e7d8      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1d42e:	4b0c      	ldr	r3, [pc, #48]	; (1d460 <uarte_nrfx_configure+0x164>)
   1d430:	e7d6      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1d432:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1d436:	e7d3      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1d438:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d43c:	e7d0      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1d43e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d442:	e7cd      	b.n	1d3e0 <uarte_nrfx_configure+0xe4>
   1d444:	0013b000 	.word	0x0013b000
   1d448:	004ea000 	.word	0x004ea000
   1d44c:	0003d090 	.word	0x0003d090
   1d450:	000f4240 	.word	0x000f4240
   1d454:	00275000 	.word	0x00275000
   1d458:	0075c000 	.word	0x0075c000
   1d45c:	003af000 	.word	0x003af000
   1d460:	013a9000 	.word	0x013a9000

0001d464 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1d464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d468:	4680      	mov	r8, r0
   1d46a:	b087      	sub	sp, #28
   1d46c:	2200      	movs	r2, #0
   1d46e:	2101      	movs	r1, #1
   1d470:	2008      	movs	r0, #8
   1d472:	f7fe f8cb 	bl	1b60c <z_arm_irq_priority_set>
   1d476:	2008      	movs	r0, #8
   1d478:	f7fe f898 	bl	1b5ac <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d47c:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   1d47e:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d482:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   1d486:	683c      	ldr	r4, [r7, #0]
	ret = pinctrl_lookup_state(config, id, &state);
   1d488:	466a      	mov	r2, sp
   1d48a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1d48e:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1d492:	f8d7 900c 	ldr.w	r9, [r7, #12]
   1d496:	4648      	mov	r0, r9
   1d498:	f009 f9a9 	bl	267ee <pinctrl_lookup_state>
	if (ret < 0) {
   1d49c:	1e05      	subs	r5, r0, #0
   1d49e:	db25      	blt.n	1d4ec <uarte_0_init+0x88>
	return pinctrl_apply_state_direct(config, state);
   1d4a0:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1d4a2:	f8d9 2000 	ldr.w	r2, [r9]
   1d4a6:	7919      	ldrb	r1, [r3, #4]
   1d4a8:	6818      	ldr	r0, [r3, #0]
   1d4aa:	f000 fac1 	bl	1da30 <pinctrl_configure_pins>
	if (err < 0) {
   1d4ae:	1e05      	subs	r5, r0, #0
   1d4b0:	db1c      	blt.n	1d4ec <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1d4b2:	4640      	mov	r0, r8
   1d4b4:	1d31      	adds	r1, r6, #4
   1d4b6:	f7ff ff21 	bl	1d2fc <uarte_nrfx_configure>
	if (err) {
   1d4ba:	4605      	mov	r5, r0
   1d4bc:	b9b0      	cbnz	r0, 1d4ec <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1d4be:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1d4c0:	0799      	lsls	r1, r3, #30
   1d4c2:	d524      	bpl.n	1d50e <uarte_0_init+0xaa>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1d4c4:	f106 0018 	add.w	r0, r6, #24
   1d4c8:	f003 fa10 	bl	208ec <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1d4cc:	4b24      	ldr	r3, [pc, #144]	; (1d560 <uarte_0_init+0xfc>)
   1d4ce:	4298      	cmp	r0, r3
   1d4d0:	d010      	beq.n	1d4f4 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   1d4d2:	4b24      	ldr	r3, [pc, #144]	; (1d564 <uarte_0_init+0x100>)
   1d4d4:	9305      	str	r3, [sp, #20]
   1d4d6:	2302      	movs	r3, #2
   1d4d8:	9304      	str	r3, [sp, #16]
   1d4da:	462b      	mov	r3, r5
		return -EIO;
   1d4dc:	f06f 0504 	mvn.w	r5, #4
   1d4e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d4e4:	4820      	ldr	r0, [pc, #128]	; (1d568 <uarte_0_init+0x104>)
   1d4e6:	aa04      	add	r2, sp, #16
   1d4e8:	f7fd fb64 	bl	1abb4 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   1d4ec:	4628      	mov	r0, r5
   1d4ee:	b007      	add	sp, #28
   1d4f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1d4f4:	7e33      	ldrb	r3, [r6, #24]
   1d4f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d4fa:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1d4fe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1d502:	2301      	movs	r3, #1
   1d504:	7e32      	ldrb	r2, [r6, #24]
   1d506:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1d508:	4a18      	ldr	r2, [pc, #96]	; (1d56c <uarte_0_init+0x108>)
   1d50a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d50e:	2308      	movs	r3, #8
   1d510:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1d514:	7a3b      	ldrb	r3, [r7, #8]
   1d516:	b953      	cbnz	r3, 1d52e <uarte_0_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d518:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d51c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d520:	6973      	ldr	r3, [r6, #20]
   1d522:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d526:	2301      	movs	r3, #1
   1d528:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d52c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1d52e:	687b      	ldr	r3, [r7, #4]
   1d530:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1d532:	bf5c      	itt	pl
   1d534:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1d538:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d53c:	687b      	ldr	r3, [r7, #4]
   1d53e:	06db      	lsls	r3, r3, #27
   1d540:	bf44      	itt	mi
   1d542:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1d546:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d54a:	6933      	ldr	r3, [r6, #16]
   1d54c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d550:	2300      	movs	r3, #0
   1d552:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d556:	2301      	movs	r3, #1
   1d558:	60a3      	str	r3, [r4, #8]
   1d55a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1d55c:	e7c6      	b.n	1d4ec <uarte_0_init+0x88>
   1d55e:	bf00      	nop
   1d560:	0bad0000 	.word	0x0bad0000
   1d564:	0002a036 	.word	0x0002a036
   1d568:	00028d20 	.word	0x00028d20
   1d56c:	40017000 	.word	0x40017000

0001d570 <uarte_nrfx_poll_out>:
{
   1d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d572:	4604      	mov	r4, r0
   1d574:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   1d576:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d578:	f00a fc60 	bl	27e3c <k_is_in_isr>
   1d57c:	b9b0      	cbnz	r0, 1d5ac <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   1d57e:	4b2e      	ldr	r3, [pc, #184]	; (1d638 <uarte_nrfx_poll_out+0xc8>)
   1d580:	781b      	ldrb	r3, [r3, #0]
   1d582:	b19b      	cbz	r3, 1d5ac <uarte_nrfx_poll_out+0x3c>
{
   1d584:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1d586:	6860      	ldr	r0, [r4, #4]
   1d588:	f009 f8c5 	bl	26716 <is_tx_ready.isra.0>
   1d58c:	bb00      	cbnz	r0, 1d5d0 <uarte_nrfx_poll_out+0x60>
   1d58e:	2001      	movs	r0, #1
   1d590:	f009 fcf5 	bl	26f7e <nrfx_busy_wait>
   1d594:	3e01      	subs	r6, #1
   1d596:	d1f6      	bne.n	1d586 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   1d598:	2100      	movs	r1, #0
   1d59a:	2021      	movs	r0, #33	; 0x21
   1d59c:	f007 f806 	bl	245ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d5a0:	e7f0      	b.n	1d584 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   1d5a2:	f386 8811 	msr	BASEPRI, r6
   1d5a6:	f3bf 8f6f 	isb	sy
}
   1d5aa:	e7f5      	b.n	1d598 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   1d5ac:	f04f 0320 	mov.w	r3, #32
   1d5b0:	f3ef 8611 	mrs	r6, BASEPRI
   1d5b4:	f383 8812 	msr	BASEPRI_MAX, r3
   1d5b8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d5bc:	6860      	ldr	r0, [r4, #4]
   1d5be:	4631      	mov	r1, r6
   1d5c0:	f009 f8a9 	bl	26716 <is_tx_ready.isra.0>
   1d5c4:	b990      	cbnz	r0, 1d5ec <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1d5c6:	f386 8811 	msr	BASEPRI, r6
   1d5ca:	f3bf 8f6f 	isb	sy
}
   1d5ce:	e7ed      	b.n	1d5ac <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   1d5d0:	f04f 0320 	mov.w	r3, #32
   1d5d4:	f3ef 8611 	mrs	r6, BASEPRI
   1d5d8:	f383 8812 	msr	BASEPRI_MAX, r3
   1d5dc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d5e0:	6860      	ldr	r0, [r4, #4]
   1d5e2:	4631      	mov	r1, r6
   1d5e4:	f009 f897 	bl	26716 <is_tx_ready.isra.0>
   1d5e8:	2800      	cmp	r0, #0
   1d5ea:	d0da      	beq.n	1d5a2 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   1d5ec:	693b      	ldr	r3, [r7, #16]
   1d5ee:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   1d5f0:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d5f2:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   1d5f4:	6813      	ldr	r3, [r2, #0]
   1d5f6:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d5fa:	2001      	movs	r0, #1
   1d5fc:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d600:	2000      	movs	r0, #0
   1d602:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1d606:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   1d60a:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d60e:	6852      	ldr	r2, [r2, #4]
   1d610:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   1d614:	06d2      	lsls	r2, r2, #27
   1d616:	d508      	bpl.n	1d62a <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d618:	2008      	movs	r0, #8
	return config->uarte_regs;
   1d61a:	6862      	ldr	r2, [r4, #4]
   1d61c:	6812      	ldr	r2, [r2, #0]
   1d61e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1d622:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1d626:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d62a:	2201      	movs	r2, #1
   1d62c:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1d62e:	f381 8811 	msr	BASEPRI, r1
   1d632:	f3bf 8f6f 	isb	sy
}
   1d636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d638:	2000ddf2 	.word	0x2000ddf2

0001d63c <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1d63c:	2301      	movs	r3, #1
   1d63e:	4083      	lsls	r3, r0
{
   1d640:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1d642:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d644:	4a0b      	ldr	r2, [pc, #44]	; (1d674 <compare_int_lock+0x38>)
   1d646:	e8d2 1fef 	ldaex	r1, [r2]
   1d64a:	ea01 0504 	and.w	r5, r1, r4
   1d64e:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1d652:	2e00      	cmp	r6, #0
   1d654:	d1f7      	bne.n	1d646 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d656:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1d65a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1d65c:	4806      	ldr	r0, [pc, #24]	; (1d678 <compare_int_lock+0x3c>)
   1d65e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1d662:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1d666:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1d66a:	420b      	tst	r3, r1
}
   1d66c:	bf14      	ite	ne
   1d66e:	2001      	movne	r0, #1
   1d670:	2000      	moveq	r0, #0
   1d672:	bd70      	pop	{r4, r5, r6, pc}
   1d674:	2000d1c4 	.word	0x2000d1c4
   1d678:	40015000 	.word	0x40015000

0001d67c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1d67c:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1d67e:	490e      	ldr	r1, [pc, #56]	; (1d6b8 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
   1d680:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1d684:	e9d1 3400 	ldrd	r3, r4, [r1]
   1d688:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1d68a:	18c3      	adds	r3, r0, r3
   1d68c:	f144 0400 	adc.w	r4, r4, #0
   1d690:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1d694:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1d698:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1d69c:	d209      	bcs.n	1d6b2 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1d69e:	4b07      	ldr	r3, [pc, #28]	; (1d6bc <sys_clock_timeout_handler+0x40>)
   1d6a0:	681b      	ldr	r3, [r3, #0]
   1d6a2:	0a1a      	lsrs	r2, r3, #8
   1d6a4:	061b      	lsls	r3, r3, #24
   1d6a6:	199c      	adds	r4, r3, r6
   1d6a8:	4b05      	ldr	r3, [pc, #20]	; (1d6c0 <sys_clock_timeout_handler+0x44>)
   1d6aa:	f142 0500 	adc.w	r5, r2, #0
   1d6ae:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1d6b2:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1d6b4:	f007 b8f2 	b.w	2489c <sys_clock_announce>
   1d6b8:	2000ce48 	.word	0x2000ce48
   1d6bc:	2000d1c8 	.word	0x2000d1c8
   1d6c0:	2000ce50 	.word	0x2000ce50

0001d6c4 <compare_int_unlock>:
	if (key) {
   1d6c4:	b1d9      	cbz	r1, 1d6fe <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1d6c6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d6c8:	4a0d      	ldr	r2, [pc, #52]	; (1d700 <compare_int_unlock+0x3c>)
   1d6ca:	4083      	lsls	r3, r0
   1d6cc:	e8d2 cfef 	ldaex	ip, [r2]
   1d6d0:	ea4c 0c03 	orr.w	ip, ip, r3
   1d6d4:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1d6d8:	2900      	cmp	r1, #0
   1d6da:	d1f7      	bne.n	1d6cc <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d6dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1d6e0:	4a08      	ldr	r2, [pc, #32]	; (1d704 <compare_int_unlock+0x40>)
   1d6e2:	4083      	lsls	r3, r0
   1d6e4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d6e8:	4b07      	ldr	r3, [pc, #28]	; (1d708 <compare_int_unlock+0x44>)
   1d6ea:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1d6ee:	40c3      	lsrs	r3, r0
   1d6f0:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d6f2:	bf42      	ittt	mi
   1d6f4:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1d6f8:	4b04      	ldrmi	r3, [pc, #16]	; (1d70c <compare_int_unlock+0x48>)
   1d6fa:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1d6fe:	4770      	bx	lr
   1d700:	2000d1c4 	.word	0x2000d1c4
   1d704:	40015000 	.word	0x40015000
   1d708:	2000d1c0 	.word	0x2000d1c0
   1d70c:	e000e100 	.word	0xe000e100

0001d710 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1d710:	4b0d      	ldr	r3, [pc, #52]	; (1d748 <z_nrf_rtc_timer_read+0x38>)
   1d712:	6818      	ldr	r0, [r3, #0]
   1d714:	0a01      	lsrs	r1, r0, #8
   1d716:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1d718:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1d71c:	4b0b      	ldr	r3, [pc, #44]	; (1d74c <z_nrf_rtc_timer_read+0x3c>)
   1d71e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1d722:	1818      	adds	r0, r3, r0
   1d724:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1d728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d72c:	d20a      	bcs.n	1d744 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1d72e:	4b08      	ldr	r3, [pc, #32]	; (1d750 <z_nrf_rtc_timer_read+0x40>)
   1d730:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d734:	4290      	cmp	r0, r2
   1d736:	eb71 0303 	sbcs.w	r3, r1, r3
   1d73a:	d203      	bcs.n	1d744 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1d73c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1d740:	f141 0100 	adc.w	r1, r1, #0
}
   1d744:	4770      	bx	lr
   1d746:	bf00      	nop
   1d748:	2000d1c8 	.word	0x2000d1c8
   1d74c:	40015000 	.word	0x40015000
   1d750:	2000ce50 	.word	0x2000ce50

0001d754 <compare_set>:
{
   1d754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d758:	4616      	mov	r6, r2
   1d75a:	461f      	mov	r7, r3
   1d75c:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   1d75e:	f7ff ff6d 	bl	1d63c <compare_int_lock>
   1d762:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1d764:	f7ff ffd4 	bl	1d710 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1d768:	42b0      	cmp	r0, r6
   1d76a:	eb71 0307 	sbcs.w	r3, r1, r7
   1d76e:	d250      	bcs.n	1d812 <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1d770:	4b38      	ldr	r3, [pc, #224]	; (1d854 <compare_set+0x100>)
   1d772:	1a30      	subs	r0, r6, r0
   1d774:	eb67 0101 	sbc.w	r1, r7, r1
   1d778:	4298      	cmp	r0, r3
   1d77a:	f171 0100 	sbcs.w	r1, r1, #0
   1d77e:	d265      	bcs.n	1d84c <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
   1d780:	4b35      	ldr	r3, [pc, #212]	; (1d858 <compare_set+0x104>)
   1d782:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1d786:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1d78a:	429f      	cmp	r7, r3
   1d78c:	bf08      	it	eq
   1d78e:	4296      	cmpeq	r6, r2
   1d790:	d049      	beq.n	1d826 <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d792:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1d796:	4931      	ldr	r1, [pc, #196]	; (1d85c <compare_set+0x108>)
   1d798:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
   1d79c:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
   1d79e:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   1d7a2:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   1d7a6:	f009 f812 	bl	267ce <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1d7aa:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
   1d7ae:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1d7b0:	f104 0550 	add.w	r5, r4, #80	; 0x50
   1d7b4:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d7b6:	b2ad      	uxth	r5, r5
   1d7b8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   1d7bc:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1d7c0:	4a27      	ldr	r2, [pc, #156]	; (1d860 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d7c2:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
   1d7c6:	9301      	str	r3, [sp, #4]
   1d7c8:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1d7cc:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   1d7d0:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
   1d7d4:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   1d7d8:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d7dc:	eba0 0008 	sub.w	r0, r0, r8
   1d7e0:	3803      	subs	r0, #3
   1d7e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1d7e6:	4290      	cmp	r0, r2
   1d7e8:	d91d      	bls.n	1d826 <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d7ea:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   1d7ec:	b160      	cbz	r0, 1d808 <compare_set+0xb4>
     return p_reg->COUNTER;
   1d7ee:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d7f2:	eba8 000b 	sub.w	r0, r8, fp
   1d7f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1d7fa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d7fe:	d912      	bls.n	1d826 <compare_set+0xd2>
					event_clear(chan);
   1d800:	4620      	mov	r0, r4
   1d802:	f008 ffe4 	bl	267ce <event_clear>
   1d806:	4a16      	ldr	r2, [pc, #88]	; (1d860 <compare_set+0x10c>)
			cc_val = now + cc_inc;
   1d808:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
   1d80c:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   1d810:	e7da      	b.n	1d7c8 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1d812:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d814:	4a13      	ldr	r2, [pc, #76]	; (1d864 <compare_set+0x110>)
   1d816:	40a3      	lsls	r3, r4
   1d818:	e8d2 0fef 	ldaex	r0, [r2]
   1d81c:	4318      	orrs	r0, r3
   1d81e:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1d822:	2900      	cmp	r1, #0
   1d824:	d1f8      	bne.n	1d818 <compare_set+0xc4>
	return ret;
   1d826:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
   1d828:	490b      	ldr	r1, [pc, #44]	; (1d858 <compare_set+0x104>)
	cc_data[chan].callback = handler;
   1d82a:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   1d82c:	0123      	lsls	r3, r4, #4
   1d82e:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
   1d832:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   1d834:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
   1d838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d83a:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1d83c:	4620      	mov	r0, r4
   1d83e:	9900      	ldr	r1, [sp, #0]
   1d840:	f7ff ff40 	bl	1d6c4 <compare_int_unlock>
}
   1d844:	4628      	mov	r0, r5
   1d846:	b003      	add	sp, #12
   1d848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   1d84c:	f06f 0515 	mvn.w	r5, #21
   1d850:	e7f4      	b.n	1d83c <compare_set+0xe8>
   1d852:	bf00      	nop
   1d854:	00800001 	.word	0x00800001
   1d858:	2000ce38 	.word	0x2000ce38
   1d85c:	40015000 	.word	0x40015000
   1d860:	007ffffd 	.word	0x007ffffd
   1d864:	2000d1c0 	.word	0x2000d1c0

0001d868 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1d868:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   1d86a:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d86c:	f04f 30ff 	mov.w	r0, #4294967295
   1d870:	f04f 31ff 	mov.w	r1, #4294967295
   1d874:	4d16      	ldr	r5, [pc, #88]	; (1d8d0 <sys_clock_driver_init+0x68>)
   1d876:	4b17      	ldr	r3, [pc, #92]	; (1d8d4 <sys_clock_driver_init+0x6c>)
   1d878:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1d87c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1d880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d884:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d886:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1d88a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   1d88e:	4b12      	ldr	r3, [pc, #72]	; (1d8d8 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1d890:	2101      	movs	r1, #1
   1d892:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1d896:	2015      	movs	r0, #21
   1d898:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1d89c:	4622      	mov	r2, r4
   1d89e:	f7fd feb5 	bl	1b60c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1d8a2:	2015      	movs	r0, #21
   1d8a4:	f7fd fe82 	bl	1b5ac <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1d8a8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1d8aa:	4a0c      	ldr	r2, [pc, #48]	; (1d8dc <sys_clock_driver_init+0x74>)
   1d8ac:	60ab      	str	r3, [r5, #8]
   1d8ae:	602b      	str	r3, [r5, #0]
   1d8b0:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1d8b2:	4b0b      	ldr	r3, [pc, #44]	; (1d8e0 <sys_clock_driver_init+0x78>)
   1d8b4:	4a0b      	ldr	r2, [pc, #44]	; (1d8e4 <sys_clock_driver_init+0x7c>)
   1d8b6:	9300      	str	r3, [sp, #0]
   1d8b8:	4620      	mov	r0, r4
   1d8ba:	2300      	movs	r3, #0
   1d8bc:	9401      	str	r4, [sp, #4]
   1d8be:	f7ff ff49 	bl	1d754 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1d8c2:	4630      	mov	r0, r6
   1d8c4:	f7fe feca 	bl	1c65c <z_nrf_clock_control_lf_on>

	return 0;
}
   1d8c8:	4620      	mov	r0, r4
   1d8ca:	b002      	add	sp, #8
   1d8cc:	bd70      	pop	{r4, r5, r6, pc}
   1d8ce:	bf00      	nop
   1d8d0:	40015000 	.word	0x40015000
   1d8d4:	2000ce38 	.word	0x2000ce38
   1d8d8:	e000e100 	.word	0xe000e100
   1d8dc:	2000d1c4 	.word	0x2000d1c4
   1d8e0:	0001d67d 	.word	0x0001d67d
   1d8e4:	007fffff 	.word	0x007fffff

0001d8e8 <rtc_nrf_isr>:
{
   1d8e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1d8ec:	4b2e      	ldr	r3, [pc, #184]	; (1d9a8 <rtc_nrf_isr+0xc0>)
   1d8ee:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1d8f2:	0790      	lsls	r0, r2, #30
   1d8f4:	d50b      	bpl.n	1d90e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d8f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1d8fa:	b142      	cbz	r2, 1d90e <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d8fc:	2200      	movs	r2, #0
   1d8fe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1d902:	4a2a      	ldr	r2, [pc, #168]	; (1d9ac <rtc_nrf_isr+0xc4>)
   1d904:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1d908:	6813      	ldr	r3, [r2, #0]
   1d90a:	3301      	adds	r3, #1
   1d90c:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1d90e:	4a26      	ldr	r2, [pc, #152]	; (1d9a8 <rtc_nrf_isr+0xc0>)
   1d910:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1d914:	03d9      	lsls	r1, r3, #15
   1d916:	d527      	bpl.n	1d968 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d918:	4b25      	ldr	r3, [pc, #148]	; (1d9b0 <rtc_nrf_isr+0xc8>)
   1d91a:	e8d3 1fef 	ldaex	r1, [r3]
   1d91e:	f021 0001 	bic.w	r0, r1, #1
   1d922:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1d926:	2c00      	cmp	r4, #0
   1d928:	d1f7      	bne.n	1d91a <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1d92a:	07cb      	lsls	r3, r1, #31
   1d92c:	d402      	bmi.n	1d934 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d92e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   1d932:	b1cb      	cbz	r3, 1d968 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d934:	2500      	movs	r5, #0
   1d936:	4c1c      	ldr	r4, [pc, #112]	; (1d9a8 <rtc_nrf_isr+0xc0>)
   1d938:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1d93c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1d940:	f7ff fee6 	bl	1d710 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1d944:	f04f 0320 	mov.w	r3, #32
   1d948:	f3ef 8211 	mrs	r2, BASEPRI
   1d94c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d950:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1d954:	4b17      	ldr	r3, [pc, #92]	; (1d9b4 <rtc_nrf_isr+0xcc>)
   1d956:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1d95a:	42b0      	cmp	r0, r6
   1d95c:	41b9      	sbcs	r1, r7
   1d95e:	d206      	bcs.n	1d96e <rtc_nrf_isr+0x86>
	__asm__ volatile(
   1d960:	f382 8811 	msr	BASEPRI, r2
   1d964:	f3bf 8f6f 	isb	sy
}
   1d968:	b003      	add	sp, #12
   1d96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d96e:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
   1d972:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d976:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   1d97a:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d97c:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
   1d980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d984:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d988:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1d98c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1d990:	f382 8811 	msr	BASEPRI, r2
   1d994:	f3bf 8f6f 	isb	sy
		if (handler) {
   1d998:	2900      	cmp	r1, #0
   1d99a:	d0e5      	beq.n	1d968 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
   1d99c:	9000      	str	r0, [sp, #0]
   1d99e:	4632      	mov	r2, r6
   1d9a0:	463b      	mov	r3, r7
   1d9a2:	4628      	mov	r0, r5
   1d9a4:	4788      	blx	r1
   1d9a6:	e7df      	b.n	1d968 <rtc_nrf_isr+0x80>
   1d9a8:	40015000 	.word	0x40015000
   1d9ac:	2000d1c8 	.word	0x2000d1c8
   1d9b0:	2000d1c0 	.word	0x2000d1c0
   1d9b4:	2000ce38 	.word	0x2000ce38

0001d9b8 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1d9b8:	1c43      	adds	r3, r0, #1
{
   1d9ba:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1d9bc:	d021      	beq.n	1da02 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1d9be:	2801      	cmp	r0, #1
   1d9c0:	dd21      	ble.n	1da06 <sys_clock_set_timeout+0x4e>
   1d9c2:	4a12      	ldr	r2, [pc, #72]	; (1da0c <sys_clock_set_timeout+0x54>)
   1d9c4:	4b12      	ldr	r3, [pc, #72]	; (1da10 <sys_clock_set_timeout+0x58>)
   1d9c6:	4290      	cmp	r0, r2
   1d9c8:	bfd4      	ite	le
   1d9ca:	4604      	movle	r4, r0
   1d9cc:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1d9ce:	f7ff fe9f 	bl	1d710 <z_nrf_rtc_timer_read>
   1d9d2:	4b10      	ldr	r3, [pc, #64]	; (1da14 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   1d9d4:	490e      	ldr	r1, [pc, #56]	; (1da10 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d9da:	1a80      	subs	r0, r0, r2
		cyc = 0;
   1d9dc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d9e0:	bf28      	it	cs
   1d9e2:	2400      	movcs	r4, #0
	cyc += unannounced;
   1d9e4:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1d9e6:	428c      	cmp	r4, r1
   1d9e8:	bf28      	it	cs
   1d9ea:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   1d9ec:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1d9ee:	490a      	ldr	r1, [pc, #40]	; (1da18 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
   1d9f0:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1d9f2:	9001      	str	r0, [sp, #4]
   1d9f4:	9100      	str	r1, [sp, #0]
   1d9f6:	f143 0300 	adc.w	r3, r3, #0
   1d9fa:	f7ff feab 	bl	1d754 <compare_set>
}
   1d9fe:	b002      	add	sp, #8
   1da00:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   1da02:	4c03      	ldr	r4, [pc, #12]	; (1da10 <sys_clock_set_timeout+0x58>)
   1da04:	e7e3      	b.n	1d9ce <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1da06:	2401      	movs	r4, #1
   1da08:	e7e1      	b.n	1d9ce <sys_clock_set_timeout+0x16>
   1da0a:	bf00      	nop
   1da0c:	007ffffe 	.word	0x007ffffe
   1da10:	007fffff 	.word	0x007fffff
   1da14:	2000ce48 	.word	0x2000ce48
   1da18:	0001d67d 	.word	0x0001d67d

0001da1c <sys_clock_elapsed>:
{
   1da1c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1da1e:	f7ff fe77 	bl	1d710 <z_nrf_rtc_timer_read>
   1da22:	4b02      	ldr	r3, [pc, #8]	; (1da2c <sys_clock_elapsed+0x10>)
   1da24:	681b      	ldr	r3, [r3, #0]
}
   1da26:	1ac0      	subs	r0, r0, r3
   1da28:	bd08      	pop	{r3, pc}
   1da2a:	bf00      	nop
   1da2c:	2000ce48 	.word	0x2000ce48

0001da30 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1da30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1da34:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
   1da36:	4e3f      	ldr	r6, [pc, #252]	; (1db34 <pinctrl_configure_pins+0x104>)
   1da38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1da3c:	4281      	cmp	r1, r0
   1da3e:	d102      	bne.n	1da46 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1da40:	2000      	movs	r0, #0
}
   1da42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1da46:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1da48:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1da4c:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
   1da50:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1da52:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   1da56:	bf08      	it	eq
   1da58:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1da5c:	2d19      	cmp	r5, #25
   1da5e:	d866      	bhi.n	1db2e <pinctrl_configure_pins+0xfe>
   1da60:	e8df f005 	tbb	[pc, r5]
   1da64:	1e1b160d 	.word	0x1e1b160d
   1da68:	651e2d21 	.word	0x651e2d21
   1da6c:	31656565 	.word	0x31656565
   1da70:	65656551 	.word	0x65656551
   1da74:	65656565 	.word	0x65656565
   1da78:	5c546565 	.word	0x5c546565
   1da7c:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
   1da7e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   1da82:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1da86:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
   1da8a:	60b5      	str	r5, [r6, #8]
}
   1da8c:	2501      	movs	r5, #1
   1da8e:	e002      	b.n	1da96 <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
   1da90:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1da94:	2500      	movs	r5, #0
   1da96:	46ac      	mov	ip, r5
   1da98:	e01c      	b.n	1dad4 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
   1da9a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   1da9e:	e7f0      	b.n	1da82 <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
   1daa0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   1daa4:	e7f6      	b.n	1da94 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1daa6:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1daa8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   1daac:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1dab0:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   1dab4:	f8c6 c00c 	str.w	ip, [r6, #12]
}
   1dab8:	f04f 0c01 	mov.w	ip, #1
   1dabc:	e00a      	b.n	1dad4 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1dabe:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   1dac2:	2501      	movs	r5, #1
   1dac4:	e7f2      	b.n	1daac <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1dac6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1daca:	2c00      	cmp	r4, #0
   1dacc:	d1e2      	bne.n	1da94 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1dace:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
   1dad0:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1dad2:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1dad4:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1dad8:	0224      	lsls	r4, r4, #8
   1dada:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1dade:	f1b8 0f00 	cmp.w	r8, #0
   1dae2:	bf1c      	itt	ne
   1dae4:	f04f 0c00 	movne.w	ip, #0
   1dae8:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1daea:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
   1daee:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
   1daf2:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1daf6:	ea44 040c 	orr.w	r4, r4, ip
   1dafa:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1dafe:	3380      	adds	r3, #128	; 0x80
   1db00:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1db04:	e79a      	b.n	1da3c <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1db06:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1db0a:	e7de      	b.n	1daca <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1db0c:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1db10:	6805      	ldr	r5, [r0, #0]
   1db12:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
   1db16:	2d00      	cmp	r5, #0
   1db18:	d0d3      	beq.n	1dac2 <pinctrl_configure_pins+0x92>
   1db1a:	e7b2      	b.n	1da82 <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1db1c:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1db20:	e7f6      	b.n	1db10 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1db22:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1db26:	e7f3      	b.n	1db10 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1db28:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   1db2c:	e7f0      	b.n	1db10 <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
   1db2e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1db32:	e786      	b.n	1da42 <pinctrl_configure_pins+0x12>
   1db34:	40842500 	.word	0x40842500

0001db38 <_nrf_modem_lib_init>:
			nrf_modem_at_err(err), nrf_modem_at_err_type(err));
	}
}

static int _nrf_modem_lib_init(const struct device *unused)
{
   1db38:	b570      	push	{r4, r5, r6, lr}
	int err;
	(void) err;

	if (!first_time_init) {
   1db3a:	4d1a      	ldr	r5, [pc, #104]	; (1dba4 <_nrf_modem_lib_init+0x6c>)
   1db3c:	4c1a      	ldr	r4, [pc, #104]	; (1dba8 <_nrf_modem_lib_init+0x70>)
   1db3e:	782b      	ldrb	r3, [r5, #0]
   1db40:	b933      	cbnz	r3, 1db50 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   1db42:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   1db46:	4819      	ldr	r0, [pc, #100]	; (1dbac <_nrf_modem_lib_init+0x74>)
   1db48:	f00a f994 	bl	27e74 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   1db4c:	2301      	movs	r3, #1
   1db4e:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
   1db50:	2200      	movs	r2, #0
   1db52:	2101      	movs	r1, #1
   1db54:	202a      	movs	r0, #42	; 0x2a
   1db56:	f7fd fd59 	bl	1b60c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params);
   1db5a:	4815      	ldr	r0, [pc, #84]	; (1dbb0 <_nrf_modem_lib_init+0x78>)
   1db5c:	f005 fcba 	bl	234d4 <nrf_modem_init>
   1db60:	4d14      	ldr	r5, [pc, #80]	; (1dbb4 <_nrf_modem_lib_init+0x7c>)
   1db62:	6028      	str	r0, [r5, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1db64:	f04f 32ff 	mov.w	r2, #4294967295
   1db68:	f04f 33ff 	mov.w	r3, #4294967295
   1db6c:	480f      	ldr	r0, [pc, #60]	; (1dbac <_nrf_modem_lib_init+0x74>)
   1db6e:	f005 ffe9 	bl	23b44 <z_impl_k_mutex_lock>
	return list->head;
   1db72:	6820      	ldr	r0, [r4, #0]
	if (IS_ENABLED(CONFIG_NRF_MODEM_LIB_LOG_FW_VERSION_UUID)) {
		log_fw_version_uuid();
	}

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   1db74:	b120      	cbz	r0, 1db80 <_nrf_modem_lib_init+0x48>
	return node->next;
   1db76:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   1db78:	3004      	adds	r0, #4
   1db7a:	f006 f8cd 	bl	23d18 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   1db7e:	b944      	cbnz	r4, 1db92 <_nrf_modem_lib_init+0x5a>
	return z_impl_k_mutex_unlock(mutex);
   1db80:	480a      	ldr	r0, [pc, #40]	; (1dbac <_nrf_modem_lib_init+0x74>)
   1db82:	f006 f859 	bl	23c38 <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&slist_mutex);

	LOG_DBG("Modem library has initialized, ret %d", init_ret);
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   1db86:	4c0c      	ldr	r4, [pc, #48]	; (1dbb8 <_nrf_modem_lib_init+0x80>)
   1db88:	4e0c      	ldr	r6, [pc, #48]	; (1dbbc <_nrf_modem_lib_init+0x84>)
   1db8a:	42b4      	cmp	r4, r6
   1db8c:	d304      	bcc.n	1db98 <_nrf_modem_lib_init+0x60>
		 */
		return 0;
	}

	return init_ret;
}
   1db8e:	2000      	movs	r0, #0
   1db90:	bd70      	pop	{r4, r5, r6, pc}
   1db92:	4620      	mov	r0, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   1db94:	6824      	ldr	r4, [r4, #0]
   1db96:	e7ef      	b.n	1db78 <_nrf_modem_lib_init+0x40>
		e->callback(init_ret, e->context);
   1db98:	e9d4 3100 	ldrd	r3, r1, [r4]
   1db9c:	6828      	ldr	r0, [r5, #0]
   1db9e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   1dba0:	3408      	adds	r4, #8
   1dba2:	e7f2      	b.n	1db8a <_nrf_modem_lib_init+0x52>
   1dba4:	2000d8b9 	.word	0x2000d8b9
   1dba8:	2000d1e4 	.word	0x2000d1e4
   1dbac:	2000d1d0 	.word	0x2000d1d0
   1dbb0:	00028f94 	.word	0x00028f94
   1dbb4:	2000d1cc 	.word	0x2000d1cc
   1dbb8:	0002b30c 	.word	0x0002b30c
   1dbbc:	0002b31c 	.word	0x0002b31c

0001dbc0 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   1dbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1dbc2:	4b0f      	ldr	r3, [pc, #60]	; (1dc00 <thread_monitor_entry_get+0x40>)
{
   1dbc4:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   1dbc6:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1dbc8:	4b0e      	ldr	r3, [pc, #56]	; (1dc04 <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1dbca:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
   1dbcc:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1dbce:	4618      	mov	r0, r3
   1dbd0:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1dbd2:	42b8      	cmp	r0, r7
   1dbd4:	d301      	bcc.n	1dbda <thread_monitor_entry_get+0x1a>
   1dbd6:	3d01      	subs	r5, #1
   1dbd8:	d104      	bne.n	1dbe4 <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   1dbda:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   1dbdc:	3a01      	subs	r2, #1
	new_entry->id = id;
   1dbde:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1dbe0:	605a      	str	r2, [r3, #4]
}
   1dbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
   1dbe4:	6804      	ldr	r4, [r0, #0]
   1dbe6:	428c      	cmp	r4, r1
   1dbe8:	d0fb      	beq.n	1dbe2 <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
   1dbea:	b13c      	cbz	r4, 1dbfc <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
   1dbec:	6844      	ldr	r4, [r0, #4]
   1dbee:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   1dbf0:	42a6      	cmp	r6, r4
   1dbf2:	bfbc      	itt	lt
   1dbf4:	4603      	movlt	r3, r0
   1dbf6:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1dbf8:	3008      	adds	r0, #8
   1dbfa:	e7ea      	b.n	1dbd2 <thread_monitor_entry_get+0x12>
   1dbfc:	4603      	mov	r3, r0
   1dbfe:	e7ec      	b.n	1dbda <thread_monitor_entry_get+0x1a>
   1dc00:	2000d294 	.word	0x2000d294
   1dc04:	2000d2a0 	.word	0x2000d2a0

0001dc08 <on_init>:
	list->head = NULL;
   1dc08:	2000      	movs	r0, #0
   1dc0a:	4b05      	ldr	r3, [pc, #20]	; (1dc20 <on_init+0x18>)
	list->tail = NULL;
   1dc0c:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1dc10:	4b04      	ldr	r3, [pc, #16]	; (1dc24 <on_init+0x1c>)
   1dc12:	e8d3 2fef 	ldaex	r2, [r3]
   1dc16:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1dc1a:	2900      	cmp	r1, #0
   1dc1c:	d1f9      	bne.n	1dc12 <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   1dc1e:	4770      	bx	lr
   1dc20:	2000d298 	.word	0x2000d298
   1dc24:	2000d294 	.word	0x2000d294

0001dc28 <nrf_modem_os_timedwait>:
{
   1dc28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dc2c:	b088      	sub	sp, #32
   1dc2e:	4605      	mov	r5, r0
   1dc30:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
   1dc32:	f00a f875 	bl	27d20 <nrf_modem_is_initialized>
   1dc36:	b920      	cbnz	r0, 1dc42 <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
   1dc38:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   1dc3c:	b008      	add	sp, #32
   1dc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   1dc42:	f00a fb34 	bl	282ae <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1dc46:	6833      	ldr	r3, [r6, #0]
   1dc48:	4604      	mov	r4, r0
   1dc4a:	2b00      	cmp	r3, #0
   1dc4c:	460f      	mov	r7, r1
   1dc4e:	d104      	bne.n	1dc5a <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
   1dc50:	f006 fc2a 	bl	244a8 <z_impl_k_yield>
		return -NRF_EAGAIN;
   1dc54:	f06f 000a 	mvn.w	r0, #10
   1dc58:	e7f0      	b.n	1dc3c <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
   1dc5a:	bfbc      	itt	lt
   1dc5c:	f04f 33ff 	movlt.w	r3, #4294967295
   1dc60:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1dc62:	2201      	movs	r2, #1
   1dc64:	2100      	movs	r1, #0
   1dc66:	a801      	add	r0, sp, #4
   1dc68:	f00a f988 	bl	27f7c <z_impl_k_sem_init>
   1dc6c:	46e8      	mov	r8, sp
	thread->context = context;
   1dc6e:	9507      	str	r5, [sp, #28]
	__asm__ volatile(
   1dc70:	f04f 0320 	mov.w	r3, #32
   1dc74:	f3ef 8a11 	mrs	sl, BASEPRI
   1dc78:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc7c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1dc80:	f006 fcae 	bl	245e0 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1dc84:	f7ff ff9c 	bl	1dbc0 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1dc88:	f8df 9118 	ldr.w	r9, [pc, #280]	; 1dda4 <nrf_modem_os_timedwait+0x17c>
   1dc8c:	6842      	ldr	r2, [r0, #4]
   1dc8e:	f8d9 3000 	ldr.w	r3, [r9]
   1dc92:	429a      	cmp	r2, r3
   1dc94:	d16d      	bne.n	1dd72 <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
   1dc96:	2300      	movs	r3, #0
	return list->tail;
   1dc98:	4d43      	ldr	r5, [pc, #268]	; (1dda8 <nrf_modem_os_timedwait+0x180>)
	parent->next = child;
   1dc9a:	9300      	str	r3, [sp, #0]
	return list->tail;
   1dc9c:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1dc9e:	2b00      	cmp	r3, #0
   1dca0:	d16e      	bne.n	1dd80 <nrf_modem_os_timedwait+0x158>
	list->head = node;
   1dca2:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
   1dca6:	f38a 8811 	msr	BASEPRI, sl
   1dcaa:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1dcae:	6833      	ldr	r3, [r6, #0]
   1dcb0:	1c5a      	adds	r2, r3, #1
   1dcb2:	d06a      	beq.n	1dd8a <nrf_modem_os_timedwait+0x162>
   1dcb4:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1dcb8:	f240 30e7 	movw	r0, #999	; 0x3e7
   1dcbc:	2100      	movs	r1, #0
   1dcbe:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   1dcc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1dcc6:	2300      	movs	r3, #0
   1dcc8:	fbcc 010e 	smlal	r0, r1, ip, lr
   1dccc:	f7fb f81c 	bl	18d08 <__aeabi_uldivmod>
   1dcd0:	4602      	mov	r2, r0
   1dcd2:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1dcd4:	a801      	add	r0, sp, #4
   1dcd6:	f006 f845 	bl	23d64 <z_impl_k_sem_take>
	__asm__ volatile(
   1dcda:	f04f 0320 	mov.w	r3, #32
   1dcde:	f3ef 8a11 	mrs	sl, BASEPRI
   1dce2:	f383 8812 	msr	BASEPRI_MAX, r3
   1dce6:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dcea:	2200      	movs	r2, #0
	return list->head;
   1dcec:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dcee:	b15b      	cbz	r3, 1dd08 <nrf_modem_os_timedwait+0xe0>
   1dcf0:	4543      	cmp	r3, r8
   1dcf2:	d154      	bne.n	1dd9e <nrf_modem_os_timedwait+0x176>
	return node->next;
   1dcf4:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dcf6:	2a00      	cmp	r2, #0
   1dcf8:	d14b      	bne.n	1dd92 <nrf_modem_os_timedwait+0x16a>
   1dcfa:	686a      	ldr	r2, [r5, #4]
	list->head = node;
   1dcfc:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dcfe:	429a      	cmp	r2, r3
   1dd00:	d100      	bne.n	1dd04 <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
   1dd02:	6069      	str	r1, [r5, #4]
	parent->next = child;
   1dd04:	2300      	movs	r3, #0
   1dd06:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
   1dd08:	f006 fc6a 	bl	245e0 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1dd0c:	f7ff ff58 	bl	1dbc0 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1dd10:	f8d9 3000 	ldr.w	r3, [r9]
   1dd14:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1dd16:	f38a 8811 	msr	BASEPRI, sl
   1dd1a:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   1dd1e:	f009 ffff 	bl	27d20 <nrf_modem_is_initialized>
   1dd22:	2800      	cmp	r0, #0
   1dd24:	d088      	beq.n	1dc38 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
   1dd26:	6835      	ldr	r5, [r6, #0]
   1dd28:	1c6b      	adds	r3, r5, #1
   1dd2a:	d027      	beq.n	1dd7c <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
   1dd2c:	f00a fabf 	bl	282ae <z_impl_k_uptime_ticks>
   1dd30:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   1dd34:	fba0 320e 	umull	r3, r2, r0, lr
   1dd38:	fb0e 2101 	mla	r1, lr, r1, r2
   1dd3c:	fba4 420e 	umull	r4, r2, r4, lr
   1dd40:	fb0e 2207 	mla	r2, lr, r7, r2
   1dd44:	0bdb      	lsrs	r3, r3, #15
   1dd46:	0be4      	lsrs	r4, r4, #15
   1dd48:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1dd4c:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
   1dd50:	1b1b      	subs	r3, r3, r4
   1dd52:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   1dd56:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   1dd5a:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
   1dd5e:	1aed      	subs	r5, r5, r3
   1dd60:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   1dd64:	f1bc 0f00 	cmp.w	ip, #0
   1dd68:	bfb8      	it	lt
   1dd6a:	2500      	movlt	r5, #0
   1dd6c:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
   1dd6e:	b92d      	cbnz	r5, 1dd7c <nrf_modem_os_timedwait+0x154>
   1dd70:	e770      	b.n	1dc54 <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
   1dd72:	6043      	str	r3, [r0, #4]
   1dd74:	f38a 8811 	msr	BASEPRI, sl
   1dd78:	f3bf 8f6f 	isb	sy
		return 0;
   1dd7c:	2000      	movs	r0, #0
   1dd7e:	e75d      	b.n	1dc3c <nrf_modem_os_timedwait+0x14>
   1dd80:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   1dd84:	f8c5 8004 	str.w	r8, [r5, #4]
   1dd88:	e78d      	b.n	1dca6 <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1dd8a:	f04f 32ff 	mov.w	r2, #4294967295
   1dd8e:	4613      	mov	r3, r2
   1dd90:	e7a0      	b.n	1dcd4 <nrf_modem_os_timedwait+0xac>
	parent->next = child;
   1dd92:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dd94:	6869      	ldr	r1, [r5, #4]
   1dd96:	4299      	cmp	r1, r3
	list->tail = node;
   1dd98:	bf08      	it	eq
   1dd9a:	606a      	streq	r2, [r5, #4]
}
   1dd9c:	e7b2      	b.n	1dd04 <nrf_modem_os_timedwait+0xdc>
	return node->next;
   1dd9e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dda0:	681b      	ldr	r3, [r3, #0]
   1dda2:	e7a4      	b.n	1dcee <nrf_modem_os_timedwait+0xc6>
   1dda4:	2000d294 	.word	0x2000d294
   1dda8:	2000d298 	.word	0x2000d298

0001ddac <nrf_modem_os_sem_init>:
{
   1ddac:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   1ddae:	6804      	ldr	r4, [r0, #0]
   1ddb0:	4b0a      	ldr	r3, [pc, #40]	; (1dddc <nrf_modem_os_sem_init+0x30>)
   1ddb2:	b12c      	cbz	r4, 1ddc0 <nrf_modem_os_sem_init+0x14>
   1ddb4:	429c      	cmp	r4, r3
   1ddb6:	d303      	bcc.n	1ddc0 <nrf_modem_os_sem_init+0x14>
   1ddb8:	f103 05a8 	add.w	r5, r3, #168	; 0xa8
   1ddbc:	42ac      	cmp	r4, r5
   1ddbe:	d308      	bcc.n	1ddd2 <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
   1ddc0:	4d07      	ldr	r5, [pc, #28]	; (1dde0 <nrf_modem_os_sem_init+0x34>)
   1ddc2:	782c      	ldrb	r4, [r5, #0]
   1ddc4:	1c66      	adds	r6, r4, #1
   1ddc6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1ddca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ddce:	702e      	strb	r6, [r5, #0]
   1ddd0:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   1ddd2:	6800      	ldr	r0, [r0, #0]
}
   1ddd4:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ddd6:	f00a b8d1 	b.w	27f7c <z_impl_k_sem_init>
   1ddda:	bf00      	nop
   1dddc:	2000d1ec 	.word	0x2000d1ec
   1dde0:	2000d8ba 	.word	0x2000d8ba

0001dde4 <nrf_modem_os_event_notify>:
{
   1dde4:	b538      	push	{r3, r4, r5, lr}
   1dde6:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1dde8:	4b0a      	ldr	r3, [pc, #40]	; (1de14 <nrf_modem_os_event_notify+0x30>)
   1ddea:	e8d3 1fef 	ldaex	r1, [r3]
   1ddee:	3101      	adds	r1, #1
   1ddf0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1ddf4:	2a00      	cmp	r2, #0
   1ddf6:	d1f8      	bne.n	1ddea <nrf_modem_os_event_notify+0x6>
	return list->head;
   1ddf8:	4b07      	ldr	r3, [pc, #28]	; (1de18 <nrf_modem_os_event_notify+0x34>)
   1ddfa:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1ddfc:	b904      	cbnz	r4, 1de00 <nrf_modem_os_event_notify+0x1c>
}
   1ddfe:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
   1de00:	69e3      	ldr	r3, [r4, #28]
   1de02:	42ab      	cmp	r3, r5
   1de04:	d000      	beq.n	1de08 <nrf_modem_os_event_notify+0x24>
   1de06:	b915      	cbnz	r5, 1de0e <nrf_modem_os_event_notify+0x2a>
	z_impl_k_sem_give(sem);
   1de08:	1d20      	adds	r0, r4, #4
   1de0a:	f005 ff85 	bl	23d18 <z_impl_k_sem_give>
	return node->next;
   1de0e:	6824      	ldr	r4, [r4, #0]
   1de10:	e7f4      	b.n	1ddfc <nrf_modem_os_event_notify+0x18>
   1de12:	bf00      	nop
   1de14:	2000d294 	.word	0x2000d294
   1de18:	2000d298 	.word	0x2000d298

0001de1c <nrf_modem_os_alloc>:
{
   1de1c:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
   1de1e:	2200      	movs	r2, #0
   1de20:	2300      	movs	r3, #0
   1de22:	4801      	ldr	r0, [pc, #4]	; (1de28 <nrf_modem_os_alloc+0xc>)
   1de24:	f009 bfe3 	b.w	27dee <k_heap_alloc>
   1de28:	2000d2f0 	.word	0x2000d2f0

0001de2c <nrf_modem_os_free>:
{
   1de2c:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
   1de2e:	4801      	ldr	r0, [pc, #4]	; (1de34 <nrf_modem_os_free+0x8>)
   1de30:	f009 bfe7 	b.w	27e02 <k_heap_free>
   1de34:	2000d2f0 	.word	0x2000d2f0

0001de38 <nrf_modem_os_shm_tx_alloc>:
{
   1de38:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
   1de3a:	2200      	movs	r2, #0
   1de3c:	2300      	movs	r3, #0
   1de3e:	4801      	ldr	r0, [pc, #4]	; (1de44 <nrf_modem_os_shm_tx_alloc+0xc>)
   1de40:	f009 bfd5 	b.w	27dee <k_heap_alloc>
   1de44:	2000d304 	.word	0x2000d304

0001de48 <nrf_modem_os_shm_tx_free>:
{
   1de48:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
   1de4a:	4801      	ldr	r0, [pc, #4]	; (1de50 <nrf_modem_os_shm_tx_free+0x8>)
   1de4c:	f009 bfd9 	b.w	27e02 <k_heap_free>
   1de50:	2000d304 	.word	0x2000d304

0001de54 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   1de54:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
   1de56:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1de5a:	4906      	ldr	r1, [pc, #24]	; (1de74 <nrf_modem_os_init+0x20>)
   1de5c:	4806      	ldr	r0, [pc, #24]	; (1de78 <nrf_modem_os_init+0x24>)
   1de5e:	f009 ff71 	bl	27d44 <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
   1de62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
   1de66:	f44f 5202 	mov.w	r2, #8320	; 0x2080
   1de6a:	4904      	ldr	r1, [pc, #16]	; (1de7c <nrf_modem_os_init+0x28>)
   1de6c:	4804      	ldr	r0, [pc, #16]	; (1de80 <nrf_modem_os_init+0x2c>)
   1de6e:	f009 bf69 	b.w	27d44 <k_heap_init>
   1de72:	bf00      	nop
   1de74:	2000d8bb 	.word	0x2000d8bb
   1de78:	2000d2f0 	.word	0x2000d2f0
   1de7c:	200084e8 	.word	0x200084e8
   1de80:	2000d304 	.word	0x2000d304

0001de84 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1de84:	2801      	cmp	r0, #1
   1de86:	d00e      	beq.n	1dea6 <z_to_nrf_optname+0x22>
   1de88:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1de8c:	d113      	bne.n	1deb6 <z_to_nrf_optname+0x32>
	case SOL_TLS:
		switch (z_in_optname) {
   1de8e:	1e4b      	subs	r3, r1, #1
   1de90:	2b0d      	cmp	r3, #13
   1de92:	d810      	bhi.n	1deb6 <z_to_nrf_optname+0x32>
   1de94:	e8df f003 	tbb	[pc, r3]
   1de98:	0f626262 	.word	0x0f626262
   1de9c:	0f0f6262 	.word	0x0f0f6262
   1dea0:	620f0f0f 	.word	0x620f0f0f
   1dea4:	6262      	.short	0x6262
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   1dea6:	2937      	cmp	r1, #55	; 0x37
   1dea8:	dc05      	bgt.n	1deb6 <z_to_nrf_optname+0x32>
   1deaa:	2913      	cmp	r1, #19
   1deac:	dc06      	bgt.n	1debc <z_to_nrf_optname+0x38>
   1deae:	2902      	cmp	r1, #2
   1deb0:	d054      	beq.n	1df5c <z_to_nrf_optname+0xd8>
   1deb2:	2904      	cmp	r1, #4
   1deb4:	d052      	beq.n	1df5c <z_to_nrf_optname+0xd8>
   1deb6:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   1deba:	4770      	bx	lr
   1debc:	f1a1 0314 	sub.w	r3, r1, #20
   1dec0:	2b23      	cmp	r3, #35	; 0x23
   1dec2:	d8f8      	bhi.n	1deb6 <z_to_nrf_optname+0x32>
   1dec4:	a001      	add	r0, pc, #4	; (adr r0, 1decc <z_to_nrf_optname+0x48>)
   1dec6:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1deca:	bf00      	nop
   1decc:	0001df5d 	.word	0x0001df5d
   1ded0:	0001df5d 	.word	0x0001df5d
   1ded4:	0001deb7 	.word	0x0001deb7
   1ded8:	0001deb7 	.word	0x0001deb7
   1dedc:	0001deb7 	.word	0x0001deb7
   1dee0:	0001df5d 	.word	0x0001df5d
   1dee4:	0001deb7 	.word	0x0001deb7
   1dee8:	0001deb7 	.word	0x0001deb7
   1deec:	0001deb7 	.word	0x0001deb7
   1def0:	0001deb7 	.word	0x0001deb7
   1def4:	0001df5d 	.word	0x0001df5d
   1def8:	0001df5d 	.word	0x0001df5d
   1defc:	0001df5d 	.word	0x0001df5d
   1df00:	0001deb7 	.word	0x0001deb7
   1df04:	0001deb7 	.word	0x0001deb7
   1df08:	0001deb7 	.word	0x0001deb7
   1df0c:	0001deb7 	.word	0x0001deb7
   1df10:	0001deb7 	.word	0x0001deb7
   1df14:	0001deb7 	.word	0x0001deb7
   1df18:	0001deb7 	.word	0x0001deb7
   1df1c:	0001deb7 	.word	0x0001deb7
   1df20:	0001deb7 	.word	0x0001deb7
   1df24:	0001deb7 	.word	0x0001deb7
   1df28:	0001deb7 	.word	0x0001deb7
   1df2c:	0001deb7 	.word	0x0001deb7
   1df30:	0001deb7 	.word	0x0001deb7
   1df34:	0001deb7 	.word	0x0001deb7
   1df38:	0001deb7 	.word	0x0001deb7
   1df3c:	0001deb7 	.word	0x0001deb7
   1df40:	0001deb7 	.word	0x0001deb7
   1df44:	0001df5d 	.word	0x0001df5d
   1df48:	0001df5d 	.word	0x0001df5d
   1df4c:	0001df5d 	.word	0x0001df5d
   1df50:	0001df5d 	.word	0x0001df5d
   1df54:	0001df5d 	.word	0x0001df5d
   1df58:	0001df5d 	.word	0x0001df5d
	int retval = 0;
   1df5c:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   1df5e:	6011      	str	r1, [r2, #0]
   1df60:	4770      	bx	lr
   1df62:	bf00      	nop

0001df64 <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   1df64:	f04f 32ff 	mov.w	r2, #4294967295
   1df68:	4b06      	ldr	r3, [pc, #24]	; (1df84 <nrf91_nrf_modem_lib_socket_offload_init+0x20>)
	}

	return 0;
}
   1df6a:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   1df6c:	601a      	str	r2, [r3, #0]
   1df6e:	619a      	str	r2, [r3, #24]
   1df70:	631a      	str	r2, [r3, #48]	; 0x30
   1df72:	649a      	str	r2, [r3, #72]	; 0x48
   1df74:	661a      	str	r2, [r3, #96]	; 0x60
   1df76:	679a      	str	r2, [r3, #120]	; 0x78
   1df78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   1df7c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
   1df80:	4770      	bx	lr
   1df82:	bf00      	nop
   1df84:	2000d31c 	.word	0x2000d31c

0001df88 <nrf91_socket_iface_init>:
	struct net_if *iface;
} nrf91_socket_iface_data;

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;
   1df88:	4b03      	ldr	r3, [pc, #12]	; (1df98 <nrf91_socket_iface_init+0x10>)

	iface->if_dev->socket_offload = nrf91_socket_create;
   1df8a:	4a04      	ldr	r2, [pc, #16]	; (1df9c <nrf91_socket_iface_init+0x14>)
	nrf91_socket_iface_data.iface = iface;
   1df8c:	6018      	str	r0, [r3, #0]
	iface->if_dev->socket_offload = nrf91_socket_create;
   1df8e:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1df90:	4803      	ldr	r0, [pc, #12]	; (1dfa0 <nrf91_socket_iface_init+0x18>)
	iface->if_dev->socket_offload = nrf91_socket_create;
   1df92:	61da      	str	r2, [r3, #28]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1df94:	f7fd b8fc 	b.w	1b190 <socket_offload_dns_register>
   1df98:	2000d318 	.word	0x2000d318
   1df9c:	0001e471 	.word	0x0001e471
   1dfa0:	00028fbc 	.word	0x00028fbc

0001dfa4 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   1dfa4:	490b      	ldr	r1, [pc, #44]	; (1dfd4 <nrf91_socket_is_supported+0x30>)
{
   1dfa6:	4603      	mov	r3, r0
	if (offload_disabled) {
   1dfa8:	7808      	ldrb	r0, [r1, #0]
   1dfaa:	b980      	cbnz	r0, 1dfce <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   1dfac:	490a      	ldr	r1, [pc, #40]	; (1dfd8 <nrf91_socket_is_supported+0x34>)
   1dfae:	7809      	ldrb	r1, [r1, #0]
   1dfb0:	b139      	cbz	r1, 1dfc2 <nrf91_socket_is_supported+0x1e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1dfb2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
   1dfb6:	2902      	cmp	r1, #2
   1dfb8:	d90a      	bls.n	1dfd0 <nrf91_socket_is_supported+0x2c>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   1dfba:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1dfbe:	2a01      	cmp	r2, #1
   1dfc0:	d906      	bls.n	1dfd0 <nrf91_socket_is_supported+0x2c>
	return (family == AF_PACKET) || (family == AF_INET) || (family == AF_INET6);
   1dfc2:	3b01      	subs	r3, #1
   1dfc4:	2b02      	cmp	r3, #2
   1dfc6:	bf8c      	ite	hi
   1dfc8:	2000      	movhi	r0, #0
   1dfca:	2001      	movls	r0, #1
	return af_is_supported(family);
   1dfcc:	4770      	bx	lr
		return false;
   1dfce:	2000      	movs	r0, #0
}
   1dfd0:	4770      	bx	lr
   1dfd2:	bf00      	nop
   1dfd4:	2000dd3c 	.word	0x2000dd3c
   1dfd8:	2000dd3b 	.word	0x2000dd3b

0001dfdc <pollcb>:
{
   1dfdc:	b470      	push	{r4, r5, r6}
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1dfde:	2300      	movs	r3, #0
   1dfe0:	2518      	movs	r5, #24
	ctx = find_ctx(pollfd->fd);
   1dfe2:	6801      	ldr	r1, [r0, #0]
		if (offload_ctx[i].nrf_fd == fd) {
   1dfe4:	4c08      	ldr	r4, [pc, #32]	; (1e008 <pollcb+0x2c>)
   1dfe6:	fb05 f203 	mul.w	r2, r5, r3
   1dfea:	58a6      	ldr	r6, [r4, r2]
   1dfec:	42b1      	cmp	r1, r6
   1dfee:	d106      	bne.n	1dffe <pollcb+0x22>
	k_poll_signal_raise(&ctx->poll, pollfd->revents);
   1dff0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   1dff4:	3208      	adds	r2, #8
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1dff6:	18a0      	adds	r0, r4, r2
}
   1dff8:	bc70      	pop	{r4, r5, r6}
   1dffa:	f006 bd7b 	b.w	24af4 <z_impl_k_poll_signal_raise>
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1dffe:	3301      	adds	r3, #1
   1e000:	2b08      	cmp	r3, #8
   1e002:	d1f0      	bne.n	1dfe6 <pollcb+0xa>
}
   1e004:	bc70      	pop	{r4, r5, r6}
   1e006:	4770      	bx	lr
   1e008:	2000d31c 	.word	0x2000d31c

0001e00c <nrf91_socket_offload_getaddrinfo>:
{
   1e00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e010:	4614      	mov	r4, r2
   1e012:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1e014:	2100      	movs	r1, #0
{
   1e016:	b08b      	sub	sp, #44	; 0x2c
   1e018:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e01a:	2220      	movs	r2, #32
   1e01c:	a802      	add	r0, sp, #8
{
   1e01e:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1e020:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e022:	f00a fa75 	bl	28510 <memset>
	if (hints != NULL) {
   1e026:	b15c      	cbz	r4, 1e040 <nrf91_socket_offload_getaddrinfo+0x34>
	nrf_out->ai_flags = z_in->ai_flags;
   1e028:	6863      	ldr	r3, [r4, #4]
   1e02a:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_in->ai_socktype;
   1e02c:	68e3      	ldr	r3, [r4, #12]
   1e02e:	9304      	str	r3, [sp, #16]
	nrf_out->ai_family = z_in->ai_family;
   1e030:	68a3      	ldr	r3, [r4, #8]
   1e032:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_in->ai_protocol;
   1e034:	6923      	ldr	r3, [r4, #16]
   1e036:	9305      	str	r3, [sp, #20]
	if (z_in->ai_canonname != NULL) {
   1e038:	69e3      	ldr	r3, [r4, #28]
   1e03a:	b103      	cbz	r3, 1e03e <nrf91_socket_offload_getaddrinfo+0x32>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1e03c:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   1e03e:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   1e040:	f04f 32ff 	mov.w	r2, #4294967295
   1e044:	f04f 33ff 	mov.w	r3, #4294967295
   1e048:	4834      	ldr	r0, [pc, #208]	; (1e11c <nrf91_socket_offload_getaddrinfo+0x110>)
   1e04a:	f008 fd5f 	bl	26b0c <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1e04e:	4631      	mov	r1, r6
   1e050:	4622      	mov	r2, r4
   1e052:	4628      	mov	r0, r5
   1e054:	ab01      	add	r3, sp, #4
   1e056:	f004 f8bf 	bl	221d8 <nrf_getaddrinfo>
	if (retval != 0) {
   1e05a:	4606      	mov	r6, r0
   1e05c:	b948      	cbnz	r0, 1e072 <nrf91_socket_offload_getaddrinfo+0x66>
	struct zsock_addrinfo *latest_z_res = NULL;
   1e05e:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   1e060:	4681      	mov	r9, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1e062:	f04f 0a18 	mov.w	sl, #24
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1e066:	9d01      	ldr	r5, [sp, #4]
	*res = NULL;
   1e068:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1e06a:	b94d      	cbnz	r5, 1e080 <nrf91_socket_offload_getaddrinfo+0x74>
	nrf_freeaddrinfo(nrf_res);
   1e06c:	9801      	ldr	r0, [sp, #4]
   1e06e:	f009 f9e1 	bl	27434 <nrf_freeaddrinfo>
	k_mutex_unlock(&getaddrinfo_lock);
   1e072:	482a      	ldr	r0, [pc, #168]	; (1e11c <nrf91_socket_offload_getaddrinfo+0x110>)
   1e074:	f008 fd4c 	bl	26b10 <k_mutex_unlock.isra.0>
}
   1e078:	4630      	mov	r0, r6
   1e07a:	b00b      	add	sp, #44	; 0x2c
   1e07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					k_malloc(sizeof(struct zsock_addrinfo));
   1e080:	2050      	movs	r0, #80	; 0x50
   1e082:	f00a fa00 	bl	28486 <k_malloc>
		if (next_z_res == NULL) {
   1e086:	4604      	mov	r4, r0
   1e088:	2800      	cmp	r0, #0
   1e08a:	d040      	beq.n	1e10e <nrf91_socket_offload_getaddrinfo+0x102>
	z_out->ai_next = NULL;
   1e08c:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1e090:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_in->ai_flags;
   1e094:	682b      	ldr	r3, [r5, #0]
   1e096:	6043      	str	r3, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1e098:	68ab      	ldr	r3, [r5, #8]
   1e09a:	60c3      	str	r3, [r0, #12]
	z_out->ai_family = nrf_in->ai_family;
   1e09c:	686b      	ldr	r3, [r5, #4]
   1e09e:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_in->ai_protocol;
   1e0a0:	68eb      	ldr	r3, [r5, #12]
   1e0a2:	6103      	str	r3, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1e0a4:	f8d5 b004 	ldr.w	fp, [r5, #4]
   1e0a8:	f1bb 0f01 	cmp.w	fp, #1
   1e0ac:	d114      	bne.n	1e0d8 <nrf91_socket_offload_getaddrinfo+0xcc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1e0ae:	2008      	movs	r0, #8
   1e0b0:	f00a f9e9 	bl	28486 <k_malloc>
   1e0b4:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1e0b6:	b338      	cbz	r0, 1e108 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1e0b8:	2308      	movs	r3, #8
   1e0ba:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1e0bc:	696b      	ldr	r3, [r5, #20]
	ptr->sin_port = nrf_in->sin_port;
   1e0be:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_family = AF_INET;
   1e0c0:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_port = nrf_in->sin_port;
   1e0c4:	8042      	strh	r2, [r0, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e0c6:	68db      	ldr	r3, [r3, #12]
   1e0c8:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   1e0ca:	f1b8 0f00 	cmp.w	r8, #0
   1e0ce:	d121      	bne.n	1e114 <nrf91_socket_offload_getaddrinfo+0x108>
			*res = next_z_res;
   1e0d0:	603c      	str	r4, [r7, #0]
					k_malloc(sizeof(struct zsock_addrinfo));
   1e0d2:	46a0      	mov	r8, r4
		next_nrf_res = next_nrf_res->ai_next;
   1e0d4:	69ed      	ldr	r5, [r5, #28]
   1e0d6:	e7c8      	b.n	1e06a <nrf91_socket_offload_getaddrinfo+0x5e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1e0d8:	f1bb 0f02 	cmp.w	fp, #2
   1e0dc:	d009      	beq.n	1e0f2 <nrf91_socket_offload_getaddrinfo+0xe6>
			k_free(next_z_res);
   1e0de:	f00a f9cb 	bl	28478 <k_free>
			retval = DNS_EAI_FAMILY;
   1e0e2:	f06f 0605 	mvn.w	r6, #5
		nrf91_socket_offload_freeaddrinfo(*res);
   1e0e6:	6838      	ldr	r0, [r7, #0]
   1e0e8:	f008 fc45 	bl	26976 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1e0ec:	2300      	movs	r3, #0
   1e0ee:	603b      	str	r3, [r7, #0]
   1e0f0:	e7bc      	b.n	1e06c <nrf91_socket_offload_getaddrinfo+0x60>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1e0f2:	2018      	movs	r0, #24
   1e0f4:	f00a f9c7 	bl	28486 <k_malloc>
   1e0f8:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1e0fa:	b128      	cbz	r0, 1e108 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1e0fc:	f8c4 a014 	str.w	sl, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   1e100:	6969      	ldr	r1, [r5, #20]
   1e102:	f008 fc45 	bl	26990 <nrf_to_z_ipv6>
		if (err == -ENOMEM) {
   1e106:	e7e0      	b.n	1e0ca <nrf91_socket_offload_getaddrinfo+0xbe>
			k_free(next_z_res);
   1e108:	4620      	mov	r0, r4
   1e10a:	f00a f9b5 	bl	28478 <k_free>
					k_malloc(sizeof(struct zsock_addrinfo));
   1e10e:	f06f 0609 	mvn.w	r6, #9
   1e112:	e7e8      	b.n	1e0e6 <nrf91_socket_offload_getaddrinfo+0xda>
			latest_z_res->ai_next = next_z_res;
   1e114:	f8c8 4000 	str.w	r4, [r8]
   1e118:	e7db      	b.n	1e0d2 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e11a:	bf00      	nop
   1e11c:	2000c878 	.word	0x2000c878

0001e120 <nrf91_socket_offload_sendmsg>:
{
   1e120:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1e124:	4607      	mov	r7, r0
   1e126:	4690      	mov	r8, r2
	if (msg == NULL) {
   1e128:	460c      	mov	r4, r1
   1e12a:	b379      	cbz	r1, 1e18c <nrf91_socket_offload_sendmsg+0x6c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e12c:	2300      	movs	r3, #0
	ssize_t len = 0;
   1e12e:	461a      	mov	r2, r3
   1e130:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e132:	4283      	cmp	r3, r0
   1e134:	d134      	bne.n	1e1a0 <nrf91_socket_offload_sendmsg+0x80>
	if (len <= sizeof(buf)) {
   1e136:	2a80      	cmp	r2, #128	; 0x80
   1e138:	d871      	bhi.n	1e21e <nrf91_socket_offload_sendmsg+0xfe>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1e13a:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   1e13c:	f04f 32ff 	mov.w	r2, #4294967295
   1e140:	f04f 33ff 	mov.w	r3, #4294967295
   1e144:	4838      	ldr	r0, [pc, #224]	; (1e228 <nrf91_socket_offload_sendmsg+0x108>)
   1e146:	f008 fce1 	bl	26b0c <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   1e14a:	46a9      	mov	r9, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1e14c:	4e37      	ldr	r6, [pc, #220]	; (1e22c <nrf91_socket_offload_sendmsg+0x10c>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   1e14e:	68e3      	ldr	r3, [r4, #12]
   1e150:	429d      	cmp	r5, r3
   1e152:	d32c      	bcc.n	1e1ae <nrf91_socket_offload_sendmsg+0x8e>
		offset = 0;
   1e154:	2600      	movs	r6, #0
		ret = 0;
   1e156:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   1e158:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1e22c <nrf91_socket_offload_sendmsg+0x10c>
		while ((offset < len) && (ret >= 0)) {
   1e15c:	45b1      	cmp	r9, r6
   1e15e:	dd11      	ble.n	1e184 <nrf91_socket_offload_sendmsg+0x64>
   1e160:	b985      	cbnz	r5, 1e184 <nrf91_socket_offload_sendmsg+0x64>
			ret = nrf91_socket_offload_sendto(obj,
   1e162:	6863      	ldr	r3, [r4, #4]
   1e164:	4638      	mov	r0, r7
   1e166:	9301      	str	r3, [sp, #4]
   1e168:	6823      	ldr	r3, [r4, #0]
   1e16a:	eba9 0206 	sub.w	r2, r9, r6
   1e16e:	9300      	str	r3, [sp, #0]
   1e170:	eb0a 0106 	add.w	r1, sl, r6
   1e174:	4643      	mov	r3, r8
   1e176:	f008 fc38 	bl	269ea <nrf91_socket_offload_sendto>
			if (ret > 0) {
   1e17a:	1e05      	subs	r5, r0, #0
   1e17c:	ddee      	ble.n	1e15c <nrf91_socket_offload_sendmsg+0x3c>
				offset += ret;
   1e17e:	442e      	add	r6, r5
		while ((offset < len) && (ret >= 0)) {
   1e180:	45b1      	cmp	r9, r6
   1e182:	dcee      	bgt.n	1e162 <nrf91_socket_offload_sendmsg+0x42>
		k_mutex_unlock(&sendmsg_lock);
   1e184:	4828      	ldr	r0, [pc, #160]	; (1e228 <nrf91_socket_offload_sendmsg+0x108>)
   1e186:	f008 fcc3 	bl	26b10 <k_mutex_unlock.isra.0>
		return ret;
   1e18a:	e005      	b.n	1e198 <nrf91_socket_offload_sendmsg+0x78>
		errno = EINVAL;
   1e18c:	f008 f87a 	bl	26284 <__errno>
   1e190:	2316      	movs	r3, #22
		return -1;
   1e192:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   1e196:	6003      	str	r3, [r0, #0]
}
   1e198:	4628      	mov	r0, r5
   1e19a:	b002      	add	sp, #8
   1e19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   1e1a0:	68a1      	ldr	r1, [r4, #8]
   1e1a2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1e1a6:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e1a8:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   1e1aa:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e1ac:	e7c1      	b.n	1e132 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1e1ae:	68a3      	ldr	r3, [r4, #8]
   1e1b0:	eb06 0009 	add.w	r0, r6, r9
   1e1b4:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
   1e1b8:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   1e1bc:	6852      	ldr	r2, [r2, #4]
   1e1be:	f00a f99a 	bl	284f6 <memcpy>
			len += msg->msg_iov[i].iov_len;
   1e1c2:	68a3      	ldr	r3, [r4, #8]
   1e1c4:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   1e1c8:	4453      	add	r3, sl
   1e1ca:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   1e1cc:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   1e1ce:	4499      	add	r9, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   1e1d0:	e7bd      	b.n	1e14e <nrf91_socket_offload_sendmsg+0x2e>
		if (msg->msg_iov[i].iov_len == 0) {
   1e1d2:	68a3      	ldr	r3, [r4, #8]
   1e1d4:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   1e1d8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1e1dc:	685b      	ldr	r3, [r3, #4]
   1e1de:	b13b      	cbz	r3, 1e1f0 <nrf91_socket_offload_sendmsg+0xd0>
		offset = 0;
   1e1e0:	f04f 0900 	mov.w	r9, #0
		while (offset < msg->msg_iov[i].iov_len) {
   1e1e4:	68a3      	ldr	r3, [r4, #8]
   1e1e6:	eb03 020a 	add.w	r2, r3, sl
   1e1ea:	6852      	ldr	r2, [r2, #4]
   1e1ec:	4591      	cmp	r9, r2
   1e1ee:	d304      	bcc.n	1e1fa <nrf91_socket_offload_sendmsg+0xda>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e1f0:	3601      	adds	r6, #1
   1e1f2:	68e3      	ldr	r3, [r4, #12]
   1e1f4:	429e      	cmp	r6, r3
   1e1f6:	d3ec      	bcc.n	1e1d2 <nrf91_socket_offload_sendmsg+0xb2>
   1e1f8:	e7ce      	b.n	1e198 <nrf91_socket_offload_sendmsg+0x78>
			ret = nrf91_socket_offload_sendto(obj,
   1e1fa:	f853 100a 	ldr.w	r1, [r3, sl]
   1e1fe:	6863      	ldr	r3, [r4, #4]
   1e200:	4449      	add	r1, r9
   1e202:	9301      	str	r3, [sp, #4]
   1e204:	6823      	ldr	r3, [r4, #0]
   1e206:	4638      	mov	r0, r7
   1e208:	9300      	str	r3, [sp, #0]
   1e20a:	eba2 0209 	sub.w	r2, r2, r9
   1e20e:	4643      	mov	r3, r8
   1e210:	f008 fbeb 	bl	269ea <nrf91_socket_offload_sendto>
			if (ret < 0) {
   1e214:	1e01      	subs	r1, r0, #0
   1e216:	db05      	blt.n	1e224 <nrf91_socket_offload_sendmsg+0x104>
			offset += ret;
   1e218:	4489      	add	r9, r1
			len += ret;
   1e21a:	440d      	add	r5, r1
   1e21c:	e7e2      	b.n	1e1e4 <nrf91_socket_offload_sendmsg+0xc4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e21e:	2600      	movs	r6, #0
	len = 0;
   1e220:	4635      	mov	r5, r6
   1e222:	e7e6      	b.n	1e1f2 <nrf91_socket_offload_sendmsg+0xd2>
			ret = nrf91_socket_offload_sendto(obj,
   1e224:	460d      	mov	r5, r1
   1e226:	e7b7      	b.n	1e198 <nrf91_socket_offload_sendmsg+0x78>
   1e228:	2000c8b4 	.word	0x2000c8b4
   1e22c:	2000dcbb 	.word	0x2000dcbb

0001e230 <allocate_ctx>:
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1e230:	f04f 32ff 	mov.w	r2, #4294967295
   1e234:	f04f 33ff 	mov.w	r3, #4294967295
{
   1e238:	b570      	push	{r4, r5, r6, lr}
   1e23a:	4605      	mov	r5, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1e23c:	480b      	ldr	r0, [pc, #44]	; (1e26c <allocate_ctx+0x3c>)
   1e23e:	f008 fc65 	bl	26b0c <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1e242:	2300      	movs	r3, #0
   1e244:	2018      	movs	r0, #24
		if (offload_ctx[i].nrf_fd == -1) {
   1e246:	4a0a      	ldr	r2, [pc, #40]	; (1e270 <allocate_ctx+0x40>)
   1e248:	fb00 f103 	mul.w	r1, r0, r3
   1e24c:	5856      	ldr	r6, [r2, r1]
   1e24e:	188c      	adds	r4, r1, r2
   1e250:	3601      	adds	r6, #1
   1e252:	d105      	bne.n	1e260 <allocate_ctx+0x30>
			ctx->nrf_fd = nrf_fd;
   1e254:	5055      	str	r5, [r2, r1]
	k_mutex_unlock(&ctx_lock);
   1e256:	4805      	ldr	r0, [pc, #20]	; (1e26c <allocate_ctx+0x3c>)
   1e258:	f008 fc5a 	bl	26b10 <k_mutex_unlock.isra.0>
}
   1e25c:	4620      	mov	r0, r4
   1e25e:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1e260:	3301      	adds	r3, #1
   1e262:	2b08      	cmp	r3, #8
   1e264:	d1f0      	bne.n	1e248 <allocate_ctx+0x18>
	struct nrf_sock_ctx *ctx = NULL;
   1e266:	2400      	movs	r4, #0
   1e268:	e7f5      	b.n	1e256 <allocate_ctx+0x26>
   1e26a:	bf00      	nop
   1e26c:	2000c850 	.word	0x2000c850
   1e270:	2000d31c 	.word	0x2000d31c

0001e274 <release_ctx>:
{
   1e274:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1e276:	4d09      	ldr	r5, [pc, #36]	; (1e29c <release_ctx+0x28>)
{
   1e278:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1e27a:	f04f 32ff 	mov.w	r2, #4294967295
   1e27e:	4628      	mov	r0, r5
   1e280:	f04f 33ff 	mov.w	r3, #4294967295
   1e284:	f008 fc42 	bl	26b0c <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   1e288:	2300      	movs	r3, #0
   1e28a:	f04f 32ff 	mov.w	r2, #4294967295
   1e28e:	e9c4 2300 	strd	r2, r3, [r4]
	k_mutex_unlock(&ctx_lock);
   1e292:	4628      	mov	r0, r5
}
   1e294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   1e298:	f008 bc3a 	b.w	26b10 <k_mutex_unlock.isra.0>
   1e29c:	2000c850 	.word	0x2000c850

0001e2a0 <nrf91_socket_offload_accept>:
{
   1e2a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e2a4:	b08b      	sub	sp, #44	; 0x2c
   1e2a6:	4607      	mov	r7, r0
   1e2a8:	460c      	mov	r4, r1
   1e2aa:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   1e2ac:	f7fb fc40 	bl	19b30 <z_reserve_fd>
   1e2b0:	4606      	mov	r6, r0
	if (fd < 0) {
   1e2b2:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   1e2b4:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   1e2b6:	db1e      	blt.n	1e2f6 <nrf91_socket_offload_accept+0x56>
	if ((addr != NULL) && (addrlen != NULL)) {
   1e2b8:	b304      	cbz	r4, 1e2fc <nrf91_socket_offload_accept+0x5c>
   1e2ba:	b315      	cbz	r5, 1e302 <nrf91_socket_offload_accept+0x62>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1e2bc:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1e2be:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1e2c0:	2b08      	cmp	r3, #8
   1e2c2:	bf14      	ite	ne
   1e2c4:	2324      	movne	r3, #36	; 0x24
   1e2c6:	2310      	moveq	r3, #16
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1e2c8:	f10d 0904 	add.w	r9, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1e2cc:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1e2ce:	4649      	mov	r1, r9
   1e2d0:	f009 fa2f 	bl	27732 <nrf_accept>
	if (new_sd < 0) {
   1e2d4:	f1b0 0800 	subs.w	r8, r0, #0
   1e2d8:	db0a      	blt.n	1e2f0 <nrf91_socket_offload_accept+0x50>
	ctx = allocate_ctx(new_sd);
   1e2da:	f7ff ffa9 	bl	1e230 <allocate_ctx>
	if (ctx == NULL) {
   1e2de:	4607      	mov	r7, r0
   1e2e0:	b990      	cbnz	r0, 1e308 <nrf91_socket_offload_accept+0x68>
		errno = ENOMEM;
   1e2e2:	f007 ffcf 	bl	26284 <__errno>
   1e2e6:	230c      	movs	r3, #12
   1e2e8:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1e2ea:	4640      	mov	r0, r8
   1e2ec:	f004 fa2a 	bl	22744 <nrf_close>
	z_free_fd(fd);
   1e2f0:	4630      	mov	r0, r6
   1e2f2:	f7fb fc6b 	bl	19bcc <z_free_fd>
		return -1;
   1e2f6:	f04f 36ff 	mov.w	r6, #4294967295
   1e2fa:	e018      	b.n	1e32e <nrf91_socket_offload_accept+0x8e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1e2fc:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1e2fe:	46a1      	mov	r9, r4
   1e300:	e7e5      	b.n	1e2ce <nrf91_socket_offload_accept+0x2e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1e302:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1e304:	46a9      	mov	r9, r5
   1e306:	e7e2      	b.n	1e2ce <nrf91_socket_offload_accept+0x2e>
	if ((addr != NULL) && (addrlen != NULL)) {
   1e308:	b164      	cbz	r4, 1e324 <nrf91_socket_offload_accept+0x84>
   1e30a:	b15d      	cbz	r5, 1e324 <nrf91_socket_offload_accept+0x84>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1e30c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e310:	2b01      	cmp	r3, #1
   1e312:	d110      	bne.n	1e336 <nrf91_socket_offload_accept+0x96>
			*addrlen = sizeof(struct sockaddr_in);
   1e314:	2208      	movs	r2, #8
   1e316:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   1e318:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   1e31c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e31e:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   1e320:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e322:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   1e324:	4639      	mov	r1, r7
   1e326:	4630      	mov	r0, r6
   1e328:	4a0d      	ldr	r2, [pc, #52]	; (1e360 <nrf91_socket_offload_accept+0xc0>)
   1e32a:	f7fb fc37 	bl	19b9c <z_finalize_fd>
}
   1e32e:	4630      	mov	r0, r6
   1e330:	b00b      	add	sp, #44	; 0x2c
   1e332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   1e336:	2b02      	cmp	r3, #2
   1e338:	d106      	bne.n	1e348 <nrf91_socket_offload_accept+0xa8>
			*addrlen = sizeof(struct sockaddr_in6);
   1e33a:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1e33c:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   1e33e:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1e340:	a901      	add	r1, sp, #4
   1e342:	f008 fb25 	bl	26990 <nrf_to_z_ipv6>
   1e346:	e7ed      	b.n	1e324 <nrf91_socket_offload_accept+0x84>
			errno = ENOTSUP;
   1e348:	f007 ff9c 	bl	26284 <__errno>
   1e34c:	2386      	movs	r3, #134	; 0x86
   1e34e:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1e350:	4640      	mov	r0, r8
   1e352:	f004 f9f7 	bl	22744 <nrf_close>
		release_ctx(ctx);
   1e356:	4638      	mov	r0, r7
   1e358:	f7ff ff8c 	bl	1e274 <release_ctx>
   1e35c:	e7c8      	b.n	1e2f0 <nrf91_socket_offload_accept+0x50>
   1e35e:	bf00      	nop
   1e360:	00028fc4 	.word	0x00028fc4

0001e364 <nrf91_socket_offload_ioctl>:
{
   1e364:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (request) {
   1e366:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
	int sd = OBJ_TO_SD(obj);
   1e36a:	6804      	ldr	r4, [r0, #0]
{
   1e36c:	b087      	sub	sp, #28
	switch (request) {
   1e36e:	2b03      	cmp	r3, #3
   1e370:	d857      	bhi.n	1e422 <nrf91_socket_offload_ioctl+0xbe>
   1e372:	e8df f003 	tbb	[pc, r3]
   1e376:	4002      	.short	0x4002
   1e378:	5377      	.short	0x5377
	struct nrf_modem_pollcb pcb = {
   1e37a:	2701      	movs	r7, #1
		pev_end = va_arg(args, struct k_poll_event *);
   1e37c:	e9d2 6101 	ldrd	r6, r1, [r2, #4]
		return nrf91_poll_prepare(obj, pfd, pev, pev_end);
   1e380:	6813      	ldr	r3, [r2, #0]
	struct nrf_modem_pollcb pcb = {
   1e382:	4a3a      	ldr	r2, [pc, #232]	; (1e46c <nrf91_socket_offload_ioctl+0x108>)
   1e384:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1e388:	9204      	str	r2, [sp, #16]
   1e38a:	f8ad 3014 	strh.w	r3, [sp, #20]
   1e38e:	f88d 7016 	strb.w	r7, [sp, #22]
	if (*pev == pev_end) {
   1e392:	6833      	ldr	r3, [r6, #0]
   1e394:	4299      	cmp	r1, r3
   1e396:	d104      	bne.n	1e3a2 <nrf91_socket_offload_ioctl+0x3e>
		errno = ENOMEM;
   1e398:	f007 ff74 	bl	26284 <__errno>
   1e39c:	230c      	movs	r3, #12
		errno = EINVAL;
   1e39e:	6003      	str	r3, [r0, #0]
   1e3a0:	e014      	b.n	1e3cc <nrf91_socket_offload_ioctl+0x68>
	k_poll_signal_init(&ctx->poll);
   1e3a2:	f100 0508 	add.w	r5, r0, #8
	z_impl_k_poll_signal_init(sig);
   1e3a6:	4628      	mov	r0, r5
   1e3a8:	f00a f849 	bl	2843e <z_impl_k_poll_signal_init>
	k_poll_event_init(*pev, K_POLL_TYPE_SIGNAL, K_POLL_MODE_NOTIFY_ONLY, &ctx->poll);
   1e3ac:	462b      	mov	r3, r5
   1e3ae:	2200      	movs	r2, #0
   1e3b0:	4639      	mov	r1, r7
   1e3b2:	6830      	ldr	r0, [r6, #0]
   1e3b4:	f00a f826 	bl	28404 <k_poll_event_init>
	err = nrf_setsockopt(fd, NRF_SOL_SOCKET, NRF_SO_POLLCB, &pcb, sizeof(pcb));
   1e3b8:	2308      	movs	r3, #8
   1e3ba:	4620      	mov	r0, r4
   1e3bc:	9300      	str	r3, [sp, #0]
   1e3be:	223c      	movs	r2, #60	; 0x3c
   1e3c0:	4639      	mov	r1, r7
   1e3c2:	ab04      	add	r3, sp, #16
   1e3c4:	f004 fafe 	bl	229c4 <nrf_setsockopt>
	if (err) {
   1e3c8:	4604      	mov	r4, r0
   1e3ca:	b110      	cbz	r0, 1e3d2 <nrf91_socket_offload_ioctl+0x6e>
		retval = -1;
   1e3cc:	f04f 34ff 	mov.w	r4, #4294967295
		return nrf91_socket_offload_fcntl(sd, request, args);
   1e3d0:	e00e      	b.n	1e3f0 <nrf91_socket_offload_ioctl+0x8c>
	(*pev)++;
   1e3d2:	6833      	ldr	r3, [r6, #0]
   1e3d4:	3314      	adds	r3, #20
   1e3d6:	6033      	str	r3, [r6, #0]
	flags = 0;
   1e3d8:	e9cd 0002 	strd	r0, r0, [sp, #8]
	z_impl_k_poll_signal_check(sig, signaled, result);
   1e3dc:	4628      	mov	r0, r5
   1e3de:	aa02      	add	r2, sp, #8
   1e3e0:	a903      	add	r1, sp, #12
   1e3e2:	f00a f831 	bl	28448 <z_impl_k_poll_signal_check>
	if (!signaled) {
   1e3e6:	9b03      	ldr	r3, [sp, #12]
	return -EALREADY;
   1e3e8:	2b00      	cmp	r3, #0
   1e3ea:	bf18      	it	ne
   1e3ec:	f06f 0477 	mvnne.w	r4, #119	; 0x77
}
   1e3f0:	4620      	mov	r0, r4
   1e3f2:	b007      	add	sp, #28
   1e3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pev = va_arg(args, struct k_poll_event **);
   1e3f6:	e9d2 4200 	ldrd	r4, r2, [r2]
	(*pev)++;
   1e3fa:	6813      	ldr	r3, [r2, #0]
   1e3fc:	3314      	adds	r3, #20
   1e3fe:	6013      	str	r3, [r2, #0]
	signaled = 0;
   1e400:	2300      	movs	r3, #0
	flags = 0;
   1e402:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1e406:	aa03      	add	r2, sp, #12
   1e408:	a904      	add	r1, sp, #16
   1e40a:	3008      	adds	r0, #8
   1e40c:	f00a f81c 	bl	28448 <z_impl_k_poll_signal_check>
	if (!signaled) {
   1e410:	9b04      	ldr	r3, [sp, #16]
   1e412:	b10b      	cbz	r3, 1e418 <nrf91_socket_offload_ioctl+0xb4>
	pfd->revents = flags;
   1e414:	9b03      	ldr	r3, [sp, #12]
   1e416:	80e3      	strh	r3, [r4, #6]
		return nrf91_poll_update(obj, pfd, pev);
   1e418:	2400      	movs	r4, #0
   1e41a:	e7e9      	b.n	1e3f0 <nrf91_socket_offload_ioctl+0x8c>
		ctx->lock = va_arg(args, struct k_mutex *);
   1e41c:	6813      	ldr	r3, [r2, #0]
   1e41e:	6043      	str	r3, [r0, #4]
		return 0;
   1e420:	e7fa      	b.n	1e418 <nrf91_socket_offload_ioctl+0xb4>
	switch (cmd) {
   1e422:	2903      	cmp	r1, #3
   1e424:	d012      	beq.n	1e44c <nrf91_socket_offload_ioctl+0xe8>
   1e426:	2904      	cmp	r1, #4
   1e428:	d118      	bne.n	1e45c <nrf91_socket_offload_ioctl+0xf8>
		flags = va_arg(args, int);
   1e42a:	6815      	ldr	r5, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK) {
   1e42c:	f435 4380 	bics.w	r3, r5, #16384	; 0x4000
   1e430:	d003      	beq.n	1e43a <nrf91_socket_offload_ioctl+0xd6>
			errno = EINVAL;
   1e432:	f007 ff27 	bl	26284 <__errno>
   1e436:	2316      	movs	r3, #22
   1e438:	6003      	str	r3, [r0, #0]
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1e43a:	2104      	movs	r1, #4
   1e43c:	4620      	mov	r0, r4
   1e43e:	f3c5 3280 	ubfx	r2, r5, #14, #1
}
   1e442:	b007      	add	sp, #28
   1e444:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1e448:	f009 bbb3 	b.w	27bb2 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1e44c:	4620      	mov	r0, r4
   1e44e:	2200      	movs	r2, #0
   1e450:	f009 fbaf 	bl	27bb2 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1e454:	0384      	lsls	r4, r0, #14
   1e456:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
   1e45a:	e7c9      	b.n	1e3f0 <nrf91_socket_offload_ioctl+0x8c>
		errno = EINVAL;
   1e45c:	f007 ff12 	bl	26284 <__errno>
   1e460:	2316      	movs	r3, #22
   1e462:	e79c      	b.n	1e39e <nrf91_socket_offload_ioctl+0x3a>
	switch (request) {
   1e464:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1e468:	e7c2      	b.n	1e3f0 <nrf91_socket_offload_ioctl+0x8c>
   1e46a:	bf00      	nop
   1e46c:	0001dfdd 	.word	0x0001dfdd

0001e470 <nrf91_socket_create>:
{
   1e470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
   1e474:	1e0d      	subs	r5, r1, #0
{
   1e476:	4607      	mov	r7, r0
   1e478:	4690      	mov	r8, r2
	if (type & SOCK_NATIVE) {
   1e47a:	da12      	bge.n	1e4a2 <nrf91_socket_create+0x32>
	k_sched_lock();
   1e47c:	f005 ffd8 	bl	24430 <k_sched_lock>
	*offload_lock = true;
   1e480:	4e1c      	ldr	r6, [pc, #112]	; (1e4f4 <nrf91_socket_create+0x84>)
   1e482:	2301      	movs	r3, #1
   1e484:	7033      	strb	r3, [r6, #0]
		union { uintptr_t x; int val; } parm2 = { .val = proto };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_SOCKET);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_socket(family, type, proto);
   1e486:	4642      	mov	r2, r8
   1e488:	4638      	mov	r0, r7
   1e48a:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
   1e48e:	f7fc fe55 	bl	1b13c <z_impl_zsock_socket>
	*offload_lock = false;
   1e492:	2300      	movs	r3, #0
   1e494:	7033      	strb	r3, [r6, #0]
   1e496:	4604      	mov	r4, r0
	k_sched_unlock();
   1e498:	f005 ffde 	bl	24458 <k_sched_unlock>
}
   1e49c:	4620      	mov	r0, r4
   1e49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   1e4a2:	006b      	lsls	r3, r5, #1
   1e4a4:	d503      	bpl.n	1e4ae <nrf91_socket_create+0x3e>
	k_sched_lock();
   1e4a6:	f005 ffc3 	bl	24430 <k_sched_lock>
	*offload_lock = true;
   1e4aa:	4e13      	ldr	r6, [pc, #76]	; (1e4f8 <nrf91_socket_create+0x88>)
   1e4ac:	e7e9      	b.n	1e482 <nrf91_socket_create+0x12>
	fd = z_reserve_fd();
   1e4ae:	f7fb fb3f 	bl	19b30 <z_reserve_fd>
	if (fd < 0) {
   1e4b2:	1e04      	subs	r4, r0, #0
   1e4b4:	db09      	blt.n	1e4ca <nrf91_socket_create+0x5a>
	retval = nrf_socket(family, type, proto);
   1e4b6:	4629      	mov	r1, r5
   1e4b8:	4642      	mov	r2, r8
   1e4ba:	4638      	mov	r0, r7
   1e4bc:	f008 ffcd 	bl	2745a <nrf_socket>
	if (sd < 0) {
   1e4c0:	1e05      	subs	r5, r0, #0
   1e4c2:	da05      	bge.n	1e4d0 <nrf91_socket_create+0x60>
		z_free_fd(fd);
   1e4c4:	4620      	mov	r0, r4
   1e4c6:	f7fb fb81 	bl	19bcc <z_free_fd>
		return -1;
   1e4ca:	f04f 34ff 	mov.w	r4, #4294967295
   1e4ce:	e7e5      	b.n	1e49c <nrf91_socket_create+0x2c>
	ctx = allocate_ctx(sd);
   1e4d0:	f7ff feae 	bl	1e230 <allocate_ctx>
	if (ctx == NULL) {
   1e4d4:	4601      	mov	r1, r0
   1e4d6:	b938      	cbnz	r0, 1e4e8 <nrf91_socket_create+0x78>
		errno = ENOMEM;
   1e4d8:	f007 fed4 	bl	26284 <__errno>
   1e4dc:	230c      	movs	r3, #12
   1e4de:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   1e4e0:	4628      	mov	r0, r5
   1e4e2:	f004 f92f 	bl	22744 <nrf_close>
		z_free_fd(fd);
   1e4e6:	e7ed      	b.n	1e4c4 <nrf91_socket_create+0x54>
	z_finalize_fd(fd, ctx,
   1e4e8:	4620      	mov	r0, r4
   1e4ea:	4a04      	ldr	r2, [pc, #16]	; (1e4fc <nrf91_socket_create+0x8c>)
   1e4ec:	f7fb fb56 	bl	19b9c <z_finalize_fd>
	return fd;
   1e4f0:	e7d4      	b.n	1e49c <nrf91_socket_create+0x2c>
   1e4f2:	bf00      	nop
   1e4f4:	2000dd3c 	.word	0x2000dd3c
   1e4f8:	2000dd3b 	.word	0x2000dd3b
   1e4fc:	00028fc4 	.word	0x00028fc4

0001e500 <nrf_modem_fault_handler>:

LOG_MODULE_DECLARE(nrf_modem, CONFIG_NRF_MODEM_LIB_LOG_LEVEL);

#if CONFIG_NRF_MODEM_LIB_ON_FAULT_DO_NOTHING
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault_info)
{
   1e500:	b580      	push	{r7, lr}
   1e502:	af00      	add	r7, sp, #0
	LOG_ERR("Modem error: 0x%x, PC: 0x%x", fault_info->reason, fault_info->program_counter);
   1e504:	b088      	sub	sp, #32
   1e506:	466a      	mov	r2, sp
   1e508:	e9d0 1300 	ldrd	r1, r3, [r0]
   1e50c:	61d3      	str	r3, [r2, #28]
   1e50e:	2304      	movs	r3, #4
   1e510:	4806      	ldr	r0, [pc, #24]	; (1e52c <nrf_modem_fault_handler+0x2c>)
   1e512:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1e516:	f842 3f10 	str.w	r3, [r2, #16]!
   1e51a:	2300      	movs	r3, #0
   1e51c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e520:	4803      	ldr	r0, [pc, #12]	; (1e530 <nrf_modem_fault_handler+0x30>)
   1e522:	f7fc fb47 	bl	1abb4 <z_impl_z_log_msg_static_create>
}
   1e526:	46bd      	mov	sp, r7
   1e528:	bd80      	pop	{r7, pc}
   1e52a:	bf00      	nop
   1e52c:	0002a08e 	.word	0x0002a08e
   1e530:	00028cf8 	.word	0x00028cf8

0001e534 <at_monitor_dispatch>:
/* Dispatch AT notifications immediately, or schedules a workqueue task to do that.
 * Keep this function public so that it can be called by tests.
 * This function is called from an ISR.
 */
void at_monitor_dispatch(const char *notif)
{
   1e534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e538:	4604      	mov	r4, r0
	struct at_notif_fifo *at_notif;
	size_t sz_needed;

	__ASSERT_NO_MSG(notif != NULL);

	monitored = false;
   1e53a:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e53c:	4d24      	ldr	r5, [pc, #144]	; (1e5d0 <at_monitor_dispatch+0x9c>)
   1e53e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1e5d4 <at_monitor_dispatch+0xa0>
{
   1e542:	af00      	add	r7, sp, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e544:	4545      	cmp	r5, r8
   1e546:	d321      	bcc.n	1e58c <at_monitor_dispatch+0x58>
				monitored = true;
			}
		}
	}

	if (!monitored) {
   1e548:	b1ee      	cbz	r6, 1e586 <at_monitor_dispatch+0x52>
		/* Only copy monitored notifications to save heap */
		return;
	}

	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   1e54a:	4620      	mov	r0, r4
   1e54c:	f7fa fd4e 	bl	18fec <strlen>

	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   1e550:	2200      	movs	r2, #0
   1e552:	1d41      	adds	r1, r0, #5
   1e554:	2300      	movs	r3, #0
   1e556:	4820      	ldr	r0, [pc, #128]	; (1e5d8 <at_monitor_dispatch+0xa4>)
   1e558:	f009 fc49 	bl	27dee <k_heap_alloc>
	if (!at_notif) {
   1e55c:	4605      	mov	r5, r0
   1e55e:	bb50      	cbnz	r0, 1e5b6 <at_monitor_dispatch+0x82>
		LOG_WRN("No heap space for incoming notification: %s",
   1e560:	466e      	mov	r6, sp
   1e562:	b088      	sub	sp, #32
   1e564:	466a      	mov	r2, sp
   1e566:	4b1d      	ldr	r3, [pc, #116]	; (1e5dc <at_monitor_dispatch+0xa8>)
   1e568:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1e56c:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e570:	8393      	strh	r3, [r2, #28]
   1e572:	4b1b      	ldr	r3, [pc, #108]	; (1e5e0 <at_monitor_dispatch+0xac>)
   1e574:	f842 3f10 	str.w	r3, [r2, #16]!
   1e578:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1e57c:	4603      	mov	r3, r0
   1e57e:	4819      	ldr	r0, [pc, #100]	; (1e5e4 <at_monitor_dispatch+0xb0>)
   1e580:	f7fc fb18 	bl	1abb4 <z_impl_z_log_msg_static_create>
   1e584:	46b5      	mov	sp, r6

	strcpy(at_notif->data, notif);

	k_fifo_put(&at_monitor_fifo, at_notif);
	k_work_submit(&at_monitor_work);
}
   1e586:	46bd      	mov	sp, r7
   1e588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return mon->flags.paused;
   1e58c:	7a2b      	ldrb	r3, [r5, #8]
		if (!is_paused(e) && has_match(e, notif)) {
   1e58e:	07da      	lsls	r2, r3, #31
   1e590:	d405      	bmi.n	1e59e <at_monitor_dispatch+0x6a>
   1e592:	6829      	ldr	r1, [r5, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1e594:	b929      	cbnz	r1, 1e5a2 <at_monitor_dispatch+0x6e>
	return mon->flags.direct;
   1e596:	7a2b      	ldrb	r3, [r5, #8]
			if (is_direct(e)) {
   1e598:	079b      	lsls	r3, r3, #30
   1e59a:	d408      	bmi.n	1e5ae <at_monitor_dispatch+0x7a>
				monitored = true;
   1e59c:	2601      	movs	r6, #1
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e59e:	350c      	adds	r5, #12
   1e5a0:	e7d0      	b.n	1e544 <at_monitor_dispatch+0x10>
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1e5a2:	4620      	mov	r0, r4
   1e5a4:	f00a f802 	bl	285ac <strstr>
   1e5a8:	2800      	cmp	r0, #0
   1e5aa:	d1f4      	bne.n	1e596 <at_monitor_dispatch+0x62>
   1e5ac:	e7f7      	b.n	1e59e <at_monitor_dispatch+0x6a>
				e->handler(notif);
   1e5ae:	4620      	mov	r0, r4
   1e5b0:	686b      	ldr	r3, [r5, #4]
   1e5b2:	4798      	blx	r3
   1e5b4:	e7f3      	b.n	1e59e <at_monitor_dispatch+0x6a>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1e5b6:	4621      	mov	r1, r4
   1e5b8:	3004      	adds	r0, #4
   1e5ba:	f009 ffbe 	bl	2853a <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   1e5be:	4629      	mov	r1, r5
   1e5c0:	4809      	ldr	r0, [pc, #36]	; (1e5e8 <at_monitor_dispatch+0xb4>)
   1e5c2:	f009 fcd0 	bl	27f66 <k_queue_append>
	k_work_submit(&at_monitor_work);
   1e5c6:	4809      	ldr	r0, [pc, #36]	; (1e5ec <at_monitor_dispatch+0xb8>)
   1e5c8:	f005 fcea 	bl	23fa0 <k_work_submit>
   1e5cc:	e7db      	b.n	1e586 <at_monitor_dispatch+0x52>
   1e5ce:	bf00      	nop
   1e5d0:	2000c76c 	.word	0x2000c76c
   1e5d4:	2000c7c0 	.word	0x2000c7c0
   1e5d8:	2000c828 	.word	0x2000c828
   1e5dc:	0002a0be 	.word	0x0002a0be
   1e5e0:	01000003 	.word	0x01000003
   1e5e4:	00028c20 	.word	0x00028c20
   1e5e8:	2000c8f4 	.word	0x2000c8f4
   1e5ec:	2000c660 	.word	0x2000c660

0001e5f0 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   1e5f0:	b598      	push	{r3, r4, r7, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1e5f2:	480c      	ldr	r0, [pc, #48]	; (1e624 <at_monitor_sys_init+0x34>)
{
   1e5f4:	af00      	add	r7, sp, #0
	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1e5f6:	f004 fd51 	bl	2309c <nrf_modem_at_notif_handler_set>
	if (err) {
   1e5fa:	b178      	cbz	r0, 1e61c <at_monitor_sys_init+0x2c>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   1e5fc:	466c      	mov	r4, sp
   1e5fe:	b088      	sub	sp, #32
   1e600:	466a      	mov	r2, sp
   1e602:	4b09      	ldr	r3, [pc, #36]	; (1e628 <at_monitor_sys_init+0x38>)
   1e604:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e608:	2303      	movs	r3, #3
   1e60a:	f842 3f10 	str.w	r3, [r2, #16]!
   1e60e:	2300      	movs	r3, #0
   1e610:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e614:	4805      	ldr	r0, [pc, #20]	; (1e62c <at_monitor_sys_init+0x3c>)
   1e616:	f7fc facd 	bl	1abb4 <z_impl_z_log_msg_static_create>
   1e61a:	46a5      	mov	sp, r4
	}

	return 0;
}
   1e61c:	2000      	movs	r0, #0
   1e61e:	46bd      	mov	sp, r7
   1e620:	bd98      	pop	{r3, r4, r7, pc}
   1e622:	bf00      	nop
   1e624:	0001e535 	.word	0x0001e535
   1e628:	0002a0ea 	.word	0x0002a0ea
   1e62c:	00028c20 	.word	0x00028c20

0001e630 <at_monitor_task>:
{
   1e630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   1e634:	4e14      	ldr	r6, [pc, #80]	; (1e688 <at_monitor_task+0x58>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e636:	4f15      	ldr	r7, [pc, #84]	; (1e68c <at_monitor_task+0x5c>)
		k_heap_free(&at_monitor_heap, at_notif);
   1e638:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1e690 <at_monitor_task+0x60>
   1e63c:	2200      	movs	r2, #0
   1e63e:	2300      	movs	r3, #0
   1e640:	4630      	mov	r0, r6
   1e642:	f005 fb35 	bl	23cb0 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   1e646:	4605      	mov	r5, r0
   1e648:	b9c8      	cbnz	r0, 1e67e <at_monitor_task+0x4e>
}
   1e64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
   1e64e:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   1e650:	07da      	lsls	r2, r3, #31
   1e652:	d406      	bmi.n	1e662 <at_monitor_task+0x32>
   1e654:	079b      	lsls	r3, r3, #30
   1e656:	d404      	bmi.n	1e662 <at_monitor_task+0x32>
   1e658:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1e65a:	b951      	cbnz	r1, 1e672 <at_monitor_task+0x42>
				e->handler(at_notif->data);
   1e65c:	4648      	mov	r0, r9
   1e65e:	6863      	ldr	r3, [r4, #4]
   1e660:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e662:	340c      	adds	r4, #12
   1e664:	42bc      	cmp	r4, r7
   1e666:	d3f2      	bcc.n	1e64e <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
   1e668:	4629      	mov	r1, r5
   1e66a:	4640      	mov	r0, r8
   1e66c:	f009 fbc9 	bl	27e02 <k_heap_free>
   1e670:	e7e4      	b.n	1e63c <at_monitor_task+0xc>
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1e672:	4648      	mov	r0, r9
   1e674:	f009 ff9a 	bl	285ac <strstr>
   1e678:	2800      	cmp	r0, #0
   1e67a:	d1ef      	bne.n	1e65c <at_monitor_task+0x2c>
   1e67c:	e7f1      	b.n	1e662 <at_monitor_task+0x32>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e67e:	4c05      	ldr	r4, [pc, #20]	; (1e694 <at_monitor_task+0x64>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   1e680:	f105 0904 	add.w	r9, r5, #4
   1e684:	e7ee      	b.n	1e664 <at_monitor_task+0x34>
   1e686:	bf00      	nop
   1e688:	2000c8f4 	.word	0x2000c8f4
   1e68c:	2000c7c0 	.word	0x2000c7c0
   1e690:	2000c828 	.word	0x2000c828
   1e694:	2000c76c 	.word	0x2000c76c

0001e698 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   1e698:	4b09      	ldr	r3, [pc, #36]	; (1e6c0 <is_valid_notification_char+0x28>)
   1e69a:	5c1b      	ldrb	r3, [r3, r0]
   1e69c:	f003 0303 	and.w	r3, r3, #3
   1e6a0:	2b02      	cmp	r3, #2
   1e6a2:	bf08      	it	eq
   1e6a4:	3820      	subeq	r0, #32
   1e6a6:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
   1e6a8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1e6ac:	2b19      	cmp	r3, #25
   1e6ae:	d904      	bls.n	1e6ba <is_valid_notification_char+0x22>
   1e6b0:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   1e6b4:	4258      	negs	r0, r3
   1e6b6:	4158      	adcs	r0, r3
   1e6b8:	4770      	bx	lr
		return true;
   1e6ba:	2001      	movs	r0, #1
	}

	return false;
}
   1e6bc:	4770      	bx	lr
   1e6be:	bf00      	nop
   1e6c0:	0002b1d7 	.word	0x0002b1d7

0001e6c4 <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1e6c4:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
   1e6c8:	b2db      	uxtb	r3, r3
   1e6ca:	2b11      	cmp	r3, #17
   1e6cc:	bf9d      	ittte	ls
   1e6ce:	4803      	ldrls	r0, [pc, #12]	; (1e6dc <is_separator+0x18>)
   1e6d0:	40d8      	lsrls	r0, r3
   1e6d2:	f000 0001 	andls.w	r0, r0, #1
{
   1e6d6:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
   1e6d8:	4770      	bx	lr
   1e6da:	bf00      	nop
   1e6dc:	00024001 	.word	0x00024001

0001e6e0 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   1e6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e6e2:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1e6e4:	2400      	movs	r4, #0
   1e6e6:	4e09      	ldr	r6, [pc, #36]	; (1e70c <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   1e6e8:	f856 7b04 	ldr.w	r7, [r6], #4
   1e6ec:	4638      	mov	r0, r7
   1e6ee:	f7fa fc7d 	bl	18fec <strlen>
   1e6f2:	4639      	mov	r1, r7
   1e6f4:	4602      	mov	r2, r0
   1e6f6:	4628      	mov	r0, r5
   1e6f8:	f009 ff27 	bl	2854a <strncmp>
		if (!diff) {
   1e6fc:	b120      	cbz	r0, 1e708 <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1e6fe:	3401      	adds	r4, #1
   1e700:	2c04      	cmp	r4, #4
   1e702:	d1f1      	bne.n	1e6e8 <is_result+0x8>
			return true;
		}
	}

	return false;
   1e704:	2000      	movs	r0, #0
}
   1e706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
   1e708:	2001      	movs	r0, #1
   1e70a:	e7fc      	b.n	1e706 <is_result+0x26>
   1e70c:	00029004 	.word	0x00029004

0001e710 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   1e710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   1e714:	6804      	ldr	r4, [r0, #0]
{
   1e716:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e718:	7823      	ldrb	r3, [r4, #0]
   1e71a:	4680      	mov	r8, r0
   1e71c:	460e      	mov	r6, r1
   1e71e:	4615      	mov	r5, r2
	const char *tmpstr = *str;
   1e720:	9400      	str	r4, [sp, #0]
   1e722:	2b00      	cmp	r3, #0
   1e724:	f000 80cd 	beq.w	1e8c2 <at_parse_process_element+0x1b2>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1e728:	4b67      	ldr	r3, [pc, #412]	; (1e8c8 <at_parse_process_element+0x1b8>)
   1e72a:	781b      	ldrb	r3, [r3, #0]
   1e72c:	2b06      	cmp	r3, #6
   1e72e:	d113      	bne.n	1e758 <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
   1e730:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
   1e732:	1c62      	adds	r2, r4, #1
   1e734:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
   1e736:	4611      	mov	r1, r2
   1e738:	4607      	mov	r7, r0
   1e73a:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e73e:	f7ff ffab 	bl	1e698 <is_valid_notification_char>
   1e742:	2800      	cmp	r0, #0
   1e744:	d1f7      	bne.n	1e736 <at_parse_process_element+0x26>
   1e746:	b107      	cbz	r7, 1e74a <at_parse_process_element+0x3a>
   1e748:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1e74a:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1e74c:	4622      	mov	r2, r4
   1e74e:	4631      	mov	r1, r6
   1e750:	4628      	mov	r0, r5
   1e752:	f008 fae7 	bl	26d24 <at_params_string_put>
   1e756:	e046      	b.n	1e7e6 <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
   1e758:	3b01      	subs	r3, #1
   1e75a:	2b08      	cmp	r3, #8
   1e75c:	d843      	bhi.n	1e7e6 <at_parse_process_element+0xd6>
   1e75e:	e8df f003 	tbb	[pc, r3]
   1e762:	4964      	.short	0x4964
   1e764:	420da05a 	.word	0x420da05a
   1e768:	3f1c      	.short	0x3f1c
   1e76a:	05          	.byte	0x05
   1e76b:	00          	.byte	0x00
   1e76c:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
   1e76e:	2100      	movs	r1, #0
   1e770:	4613      	mov	r3, r2
   1e772:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e776:	b160      	cbz	r0, 1e792 <at_parse_process_element+0x82>
   1e778:	2101      	movs	r1, #1
   1e77a:	e7f9      	b.n	1e770 <at_parse_process_element+0x60>
   1e77c:	4622      	mov	r2, r4
   1e77e:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
   1e780:	4f52      	ldr	r7, [pc, #328]	; (1e8cc <at_parse_process_element+0x1bc>)
   1e782:	4613      	mov	r3, r2
   1e784:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e788:	5c38      	ldrb	r0, [r7, r0]
   1e78a:	f010 0f44 	tst.w	r0, #68	; 0x44
   1e78e:	f040 8096 	bne.w	1e8be <at_parse_process_element+0x1ae>
   1e792:	b101      	cbz	r1, 1e796 <at_parse_process_element+0x86>
   1e794:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1e796:	1b1b      	subs	r3, r3, r4
   1e798:	e7d8      	b.n	1e74c <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
   1e79a:	4668      	mov	r0, sp
   1e79c:	f008 fa39 	bl	26c12 <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
   1e7a0:	2200      	movs	r2, #0
   1e7a2:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   1e7a4:	4849      	ldr	r0, [pc, #292]	; (1e8cc <at_parse_process_element+0x1bc>)
   1e7a6:	461f      	mov	r7, r3
   1e7a8:	f813 1b01 	ldrb.w	r1, [r3], #1
   1e7ac:	5c41      	ldrb	r1, [r0, r1]
   1e7ae:	0749      	lsls	r1, r1, #29
   1e7b0:	d110      	bne.n	1e7d4 <at_parse_process_element+0xc4>
   1e7b2:	b102      	cbz	r2, 1e7b6 <at_parse_process_element+0xa6>
   1e7b4:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1e7b6:	1b3b      	subs	r3, r7, r4
   1e7b8:	4622      	mov	r2, r4
   1e7ba:	4631      	mov	r1, r6
   1e7bc:	4628      	mov	r0, r5
   1e7be:	f008 fab1 	bl	26d24 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1e7c2:	783b      	ldrb	r3, [r7, #0]
   1e7c4:	2b3d      	cmp	r3, #61	; 0x3d
   1e7c6:	d107      	bne.n	1e7d8 <at_parse_process_element+0xc8>
   1e7c8:	787b      	ldrb	r3, [r7, #1]
   1e7ca:	2b3f      	cmp	r3, #63	; 0x3f
   1e7cc:	d10b      	bne.n	1e7e6 <at_parse_process_element+0xd6>
			tmpstr += 2;
   1e7ce:	3702      	adds	r7, #2
		tmpstr++;
   1e7d0:	9700      	str	r7, [sp, #0]
   1e7d2:	e008      	b.n	1e7e6 <at_parse_process_element+0xd6>
   1e7d4:	2201      	movs	r2, #1
   1e7d6:	e7e6      	b.n	1e7a6 <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1e7d8:	2b3f      	cmp	r3, #63	; 0x3f
   1e7da:	d104      	bne.n	1e7e6 <at_parse_process_element+0xd6>
			tmpstr++;
   1e7dc:	3701      	adds	r7, #1
   1e7de:	e7f7      	b.n	1e7d0 <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
   1e7e0:	4628      	mov	r0, r5
   1e7e2:	f008 fa75 	bl	26cd0 <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1e7e6:	2000      	movs	r0, #0
	*str = tmpstr;
   1e7e8:	9b00      	ldr	r3, [sp, #0]
   1e7ea:	f8c8 3000 	str.w	r3, [r8]
}
   1e7ee:	b023      	add	sp, #140	; 0x8c
   1e7f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
   1e7f4:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1e7f6:	783a      	ldrb	r2, [r7, #0]
   1e7f8:	4610      	mov	r0, r2
   1e7fa:	f008 fa01 	bl	26c00 <is_lfcr>
   1e7fe:	463b      	mov	r3, r7
			tmpstr++;
   1e800:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1e802:	b908      	cbnz	r0, 1e808 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e804:	2a00      	cmp	r2, #0
   1e806:	d1f6      	bne.n	1e7f6 <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
   1e808:	4622      	mov	r2, r4
   1e80a:	4631      	mov	r1, r6
   1e80c:	4628      	mov	r0, r5
   1e80e:	1b1b      	subs	r3, r3, r4
   1e810:	f008 fa88 	bl	26d24 <at_params_string_put>
   1e814:	e7dc      	b.n	1e7d0 <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
   1e816:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   1e818:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   1e81a:	463b      	mov	r3, r7
   1e81c:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
   1e81e:	f107 0701 	add.w	r7, r7, #1
   1e822:	d0f1      	beq.n	1e808 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e824:	2a00      	cmp	r2, #0
   1e826:	d1f7      	bne.n	1e818 <at_parse_process_element+0x108>
   1e828:	e7ee      	b.n	1e808 <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1e82a:	4620      	mov	r0, r4
   1e82c:	220a      	movs	r2, #10
   1e82e:	a901      	add	r1, sp, #4
   1e830:	f006 fc1a 	bl	25068 <strtoul>
   1e834:	2401      	movs	r4, #1
		tmpstr = next;
   1e836:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1e838:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1e83a:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   1e83c:	9b00      	ldr	r3, [sp, #0]
   1e83e:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   1e840:	2829      	cmp	r0, #41	; 0x29
   1e842:	d023      	beq.n	1e88c <at_parse_process_element+0x17c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e844:	b310      	cbz	r0, 1e88c <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1e846:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
   1e84a:	f7ff ff3b 	bl	1e6c4 <is_separator>
				tmparray[i++] =
   1e84e:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
   1e852:	b908      	cbnz	r0, 1e858 <at_parse_process_element+0x148>
					tmpstr = next;
   1e854:	4627      	mov	r7, r4
   1e856:	e017      	b.n	1e888 <at_parse_process_element+0x178>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1e858:	220a      	movs	r2, #10
   1e85a:	a901      	add	r1, sp, #4
   1e85c:	4648      	mov	r0, r9
   1e85e:	f006 fc03 	bl	25068 <strtoul>
				tmparray[i++] =
   1e862:	ab22      	add	r3, sp, #136	; 0x88
   1e864:	1c67      	adds	r7, r4, #1
   1e866:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1e86a:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1e86e:	4648      	mov	r0, r9
   1e870:	f7fa fbbc 	bl	18fec <strlen>
   1e874:	4604      	mov	r4, r0
   1e876:	9801      	ldr	r0, [sp, #4]
   1e878:	f7fa fbb8 	bl	18fec <strlen>
   1e87c:	4284      	cmp	r4, r0
   1e87e:	d006      	beq.n	1e88e <at_parse_process_element+0x17e>
					tmpstr = next;
   1e880:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1e882:	2f20      	cmp	r7, #32
					tmpstr = next;
   1e884:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1e886:	d002      	beq.n	1e88e <at_parse_process_element+0x17e>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1e888:	463c      	mov	r4, r7
   1e88a:	e7d7      	b.n	1e83c <at_parse_process_element+0x12c>
   1e88c:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   1e88e:	00bb      	lsls	r3, r7, #2
   1e890:	4631      	mov	r1, r6
   1e892:	4628      	mov	r0, r5
   1e894:	aa02      	add	r2, sp, #8
   1e896:	f008 fa68 	bl	26d6a <at_params_array_put>
		tmpstr++;
   1e89a:	9b00      	ldr	r3, [sp, #0]
   1e89c:	3301      	adds	r3, #1
   1e89e:	9300      	str	r3, [sp, #0]
   1e8a0:	e7a1      	b.n	1e7e6 <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1e8a2:	220a      	movs	r2, #10
   1e8a4:	4620      	mov	r0, r4
   1e8a6:	a902      	add	r1, sp, #8
   1e8a8:	f006 fb62 	bl	24f70 <strtoll>
   1e8ac:	460b      	mov	r3, r1
		tmpstr = next;
   1e8ae:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1e8b0:	4602      	mov	r2, r0
		tmpstr = next;
   1e8b2:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   1e8b4:	4628      	mov	r0, r5
   1e8b6:	4631      	mov	r1, r6
   1e8b8:	f008 fa1f 	bl	26cfa <at_params_int_put>
   1e8bc:	e793      	b.n	1e7e6 <at_parse_process_element+0xd6>
   1e8be:	2101      	movs	r1, #1
   1e8c0:	e75f      	b.n	1e782 <at_parse_process_element+0x72>
		return -1;
   1e8c2:	f04f 30ff 	mov.w	r0, #4294967295
   1e8c6:	e792      	b.n	1e7ee <at_parse_process_element+0xde>
   1e8c8:	2000dd3e 	.word	0x2000dd3e
   1e8cc:	0002b1d7 	.word	0x0002b1d7

0001e8d0 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1e8d0:	b510      	push	{r4, lr}
   1e8d2:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1e8d4:	f7fa fb8a 	bl	18fec <strlen>
   1e8d8:	2801      	cmp	r0, #1
   1e8da:	d921      	bls.n	1e920 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   1e8dc:	7823      	ldrb	r3, [r4, #0]
   1e8de:	4912      	ldr	r1, [pc, #72]	; (1e928 <is_command+0x58>)
   1e8e0:	5cca      	ldrb	r2, [r1, r3]
   1e8e2:	f002 0203 	and.w	r2, r2, #3
   1e8e6:	2a02      	cmp	r2, #2
   1e8e8:	bf08      	it	eq
   1e8ea:	3b20      	subeq	r3, #32
   1e8ec:	2b41      	cmp	r3, #65	; 0x41
   1e8ee:	d117      	bne.n	1e920 <is_command+0x50>
   1e8f0:	7863      	ldrb	r3, [r4, #1]
   1e8f2:	5cca      	ldrb	r2, [r1, r3]
   1e8f4:	f002 0203 	and.w	r2, r2, #3
   1e8f8:	2a02      	cmp	r2, #2
   1e8fa:	bf08      	it	eq
   1e8fc:	3b20      	subeq	r3, #32
   1e8fe:	2b54      	cmp	r3, #84	; 0x54
   1e900:	d10e      	bne.n	1e920 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1e902:	78a2      	ldrb	r2, [r4, #2]
   1e904:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1e908:	2b23      	cmp	r3, #35	; 0x23
   1e90a:	d00b      	beq.n	1e924 <is_command+0x54>
   1e90c:	2a25      	cmp	r2, #37	; 0x25
   1e90e:	d009      	beq.n	1e924 <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1e910:	4610      	mov	r0, r2
   1e912:	f008 f975 	bl	26c00 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1e916:	b910      	cbnz	r0, 1e91e <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e918:	fab2 f082 	clz	r0, r2
   1e91c:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1e91e:	bd10      	pop	{r4, pc}
		return false;
   1e920:	2000      	movs	r0, #0
   1e922:	e7fc      	b.n	1e91e <is_command+0x4e>
		return true;
   1e924:	2001      	movs	r0, #1
   1e926:	e7fa      	b.n	1e91e <is_command+0x4e>
   1e928:	0002b1d7 	.word	0x0002b1d7

0001e92c <at_parse_detect_type>:
{
   1e92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e930:	4606      	mov	r6, r0
	const char *tmpstr = *str;
   1e932:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1e934:	f8df 818c 	ldr.w	r8, [pc, #396]	; 1eac4 <at_parse_detect_type+0x198>
   1e938:	2900      	cmp	r1, #0
   1e93a:	d13d      	bne.n	1e9b8 <at_parse_detect_type+0x8c>
   1e93c:	7820      	ldrb	r0, [r4, #0]
   1e93e:	f008 f953 	bl	26be8 <is_notification>
   1e942:	4f61      	ldr	r7, [pc, #388]	; (1eac8 <at_parse_detect_type+0x19c>)
   1e944:	4605      	mov	r5, r0
   1e946:	b360      	cbz	r0, 1e9a2 <at_parse_detect_type+0x76>
	state = new_state;
   1e948:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1e94a:	2205      	movs	r2, #5
   1e94c:	4620      	mov	r0, r4
   1e94e:	495f      	ldr	r1, [pc, #380]	; (1eacc <at_parse_detect_type+0x1a0>)
	state = new_state;
   1e950:	703b      	strb	r3, [r7, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1e952:	f009 fdfa 	bl	2854a <strncmp>
   1e956:	b1f8      	cbz	r0, 1e998 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1e958:	2205      	movs	r2, #5
   1e95a:	4620      	mov	r0, r4
   1e95c:	495c      	ldr	r1, [pc, #368]	; (1ead0 <at_parse_detect_type+0x1a4>)
   1e95e:	f009 fdf4 	bl	2854a <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1e962:	b1c8      	cbz	r0, 1e998 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1e964:	220b      	movs	r2, #11
   1e966:	4620      	mov	r0, r4
   1e968:	495a      	ldr	r1, [pc, #360]	; (1ead4 <at_parse_detect_type+0x1a8>)
   1e96a:	f009 fdee 	bl	2854a <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1e96e:	b198      	cbz	r0, 1e998 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1e970:	220a      	movs	r2, #10
   1e972:	4620      	mov	r0, r4
   1e974:	4958      	ldr	r1, [pc, #352]	; (1ead8 <at_parse_detect_type+0x1ac>)
   1e976:	f009 fde8 	bl	2854a <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1e97a:	b168      	cbz	r0, 1e998 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1e97c:	220b      	movs	r2, #11
   1e97e:	4620      	mov	r0, r4
   1e980:	4956      	ldr	r1, [pc, #344]	; (1eadc <at_parse_detect_type+0x1b0>)
   1e982:	f009 fde2 	bl	2854a <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1e986:	b138      	cbz	r0, 1e998 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   1e988:	2207      	movs	r2, #7
   1e98a:	4620      	mov	r0, r4
   1e98c:	4954      	ldr	r1, [pc, #336]	; (1eae0 <at_parse_detect_type+0x1b4>)
   1e98e:	f009 fddc 	bl	2854a <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1e992:	fab0 f580 	clz	r5, r0
   1e996:	096d      	lsrs	r5, r5, #5
		set_type_string = check_response_for_forced_string(tmpstr);
   1e998:	f888 5000 	strb.w	r5, [r8]
	return 0;
   1e99c:	2000      	movs	r0, #0
	*str = tmpstr;
   1e99e:	6034      	str	r4, [r6, #0]
	return 0;
   1e9a0:	e04c      	b.n	1ea3c <at_parse_detect_type+0x110>
	} else if (set_type_string) {
   1e9a2:	f898 3000 	ldrb.w	r3, [r8]
   1e9a6:	b953      	cbnz	r3, 1e9be <at_parse_detect_type+0x92>
	} else if ((index == 0) && is_command(tmpstr)) {
   1e9a8:	4620      	mov	r0, r4
   1e9aa:	f7ff ff91 	bl	1e8d0 <is_command>
   1e9ae:	2800      	cmp	r0, #0
   1e9b0:	d04e      	beq.n	1ea50 <at_parse_detect_type+0x124>
	state = new_state;
   1e9b2:	2307      	movs	r3, #7
   1e9b4:	703b      	strb	r3, [r7, #0]
}
   1e9b6:	e7f1      	b.n	1e99c <at_parse_detect_type+0x70>
	} else if (set_type_string) {
   1e9b8:	f898 3000 	ldrb.w	r3, [r8]
   1e9bc:	b11b      	cbz	r3, 1e9c6 <at_parse_detect_type+0x9a>
	state = new_state;
   1e9be:	2202      	movs	r2, #2
   1e9c0:	4b41      	ldr	r3, [pc, #260]	; (1eac8 <at_parse_detect_type+0x19c>)
   1e9c2:	701a      	strb	r2, [r3, #0]
}
   1e9c4:	e7ea      	b.n	1e99c <at_parse_detect_type+0x70>
	} else if ((index > 0) && is_clac(tmpstr)) {
   1e9c6:	2900      	cmp	r1, #0
   1e9c8:	dd44      	ble.n	1ea54 <at_parse_detect_type+0x128>
   1e9ca:	4622      	mov	r2, r4
   1e9cc:	4615      	mov	r5, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   1e9ce:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e9d2:	f008 f915 	bl	26c00 <is_lfcr>
   1e9d6:	2800      	cmp	r0, #0
   1e9d8:	d1f8      	bne.n	1e9cc <at_parse_detect_type+0xa0>
		str++;
	}

	if (strlen(str) < 4) {
   1e9da:	4628      	mov	r0, r5
   1e9dc:	f7fa fb06 	bl	18fec <strlen>
   1e9e0:	2803      	cmp	r0, #3
   1e9e2:	d92d      	bls.n	1ea40 <at_parse_detect_type+0x114>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1e9e4:	782b      	ldrb	r3, [r5, #0]
   1e9e6:	4a3f      	ldr	r2, [pc, #252]	; (1eae4 <at_parse_detect_type+0x1b8>)
   1e9e8:	5cd1      	ldrb	r1, [r2, r3]
   1e9ea:	f001 0103 	and.w	r1, r1, #3
   1e9ee:	2902      	cmp	r1, #2
   1e9f0:	bf08      	it	eq
   1e9f2:	3b20      	subeq	r3, #32
   1e9f4:	2b41      	cmp	r3, #65	; 0x41
   1e9f6:	d123      	bne.n	1ea40 <at_parse_detect_type+0x114>
   1e9f8:	786b      	ldrb	r3, [r5, #1]
   1e9fa:	5cd1      	ldrb	r1, [r2, r3]
   1e9fc:	f001 0103 	and.w	r1, r1, #3
   1ea00:	2902      	cmp	r1, #2
   1ea02:	bf08      	it	eq
   1ea04:	3b20      	subeq	r3, #32
   1ea06:	2b54      	cmp	r3, #84	; 0x54
   1ea08:	d11a      	bne.n	1ea40 <at_parse_detect_type+0x114>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   1ea0a:	78ab      	ldrb	r3, [r5, #2]
   1ea0c:	5cd1      	ldrb	r1, [r2, r3]
   1ea0e:	f001 0103 	and.w	r1, r1, #3
   1ea12:	2902      	cmp	r1, #2
   1ea14:	bf08      	it	eq
   1ea16:	3b20      	subeq	r3, #32
   1ea18:	2b2b      	cmp	r3, #43	; 0x2b
   1ea1a:	d00a      	beq.n	1ea32 <at_parse_detect_type+0x106>
   1ea1c:	2b25      	cmp	r3, #37	; 0x25
   1ea1e:	d10f      	bne.n	1ea40 <at_parse_detect_type+0x114>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   1ea20:	78eb      	ldrb	r3, [r5, #3]
   1ea22:	5cd2      	ldrb	r2, [r2, r3]
   1ea24:	f002 0203 	and.w	r2, r2, #3
   1ea28:	2a02      	cmp	r2, #2
   1ea2a:	bf08      	it	eq
   1ea2c:	3b20      	subeq	r3, #32
   1ea2e:	2b58      	cmp	r3, #88	; 0x58
   1ea30:	d006      	beq.n	1ea40 <at_parse_detect_type+0x114>
	state = new_state;
   1ea32:	2209      	movs	r2, #9
		return -2;
   1ea34:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   1ea38:	4b23      	ldr	r3, [pc, #140]	; (1eac8 <at_parse_detect_type+0x19c>)
   1ea3a:	701a      	strb	r2, [r3, #0]
}
   1ea3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1ea40:	7820      	ldrb	r0, [r4, #0]
   1ea42:	f008 f8d1 	bl	26be8 <is_notification>
   1ea46:	b128      	cbz	r0, 1ea54 <at_parse_detect_type+0x128>
		return -1;
   1ea48:	f04f 30ff 	mov.w	r0, #4294967295
		*str = tmpstr;
   1ea4c:	6034      	str	r4, [r6, #0]
   1ea4e:	e7f5      	b.n	1ea3c <at_parse_detect_type+0x110>
	state = new_state;
   1ea50:	2302      	movs	r3, #2
   1ea52:	e7af      	b.n	1e9b4 <at_parse_detect_type+0x88>
	} else if (is_number(*tmpstr)) {
   1ea54:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   1ea56:	4b23      	ldr	r3, [pc, #140]	; (1eae4 <at_parse_detect_type+0x1b8>)
   1ea58:	5c9b      	ldrb	r3, [r3, r2]
   1ea5a:	075b      	lsls	r3, r3, #29
   1ea5c:	d40a      	bmi.n	1ea74 <at_parse_detect_type+0x148>
   1ea5e:	2a2d      	cmp	r2, #45	; 0x2d
   1ea60:	d008      	beq.n	1ea74 <at_parse_detect_type+0x148>
   1ea62:	2a2b      	cmp	r2, #43	; 0x2b
   1ea64:	d006      	beq.n	1ea74 <at_parse_detect_type+0x148>
	if (chr == '"') {
   1ea66:	2a22      	cmp	r2, #34	; 0x22
   1ea68:	d107      	bne.n	1ea7a <at_parse_detect_type+0x14e>
	state = new_state;
   1ea6a:	2203      	movs	r2, #3
   1ea6c:	4b16      	ldr	r3, [pc, #88]	; (1eac8 <at_parse_detect_type+0x19c>)
		tmpstr++;
   1ea6e:	3401      	adds	r4, #1
	state = new_state;
   1ea70:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1ea72:	e793      	b.n	1e99c <at_parse_detect_type+0x70>
	state = new_state;
   1ea74:	2204      	movs	r2, #4
   1ea76:	4b14      	ldr	r3, [pc, #80]	; (1eac8 <at_parse_detect_type+0x19c>)
   1ea78:	e7a3      	b.n	1e9c2 <at_parse_detect_type+0x96>
	if (chr == '(') {
   1ea7a:	2a28      	cmp	r2, #40	; 0x28
   1ea7c:	d104      	bne.n	1ea88 <at_parse_detect_type+0x15c>
   1ea7e:	2201      	movs	r2, #1
   1ea80:	4b11      	ldr	r3, [pc, #68]	; (1eac8 <at_parse_detect_type+0x19c>)
		tmpstr++;
   1ea82:	4414      	add	r4, r2
	state = new_state;
   1ea84:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1ea86:	e789      	b.n	1e99c <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1ea88:	4610      	mov	r0, r2
   1ea8a:	f008 f8b9 	bl	26c00 <is_lfcr>
   1ea8e:	b188      	cbz	r0, 1eab4 <at_parse_detect_type+0x188>
   1ea90:	490d      	ldr	r1, [pc, #52]	; (1eac8 <at_parse_detect_type+0x19c>)
   1ea92:	780b      	ldrb	r3, [r1, #0]
   1ea94:	2b04      	cmp	r3, #4
   1ea96:	d10a      	bne.n	1eaae <at_parse_detect_type+0x182>
   1ea98:	4622      	mov	r2, r4
   1ea9a:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
   1ea9c:	f812 0b01 	ldrb.w	r0, [r2], #1
   1eaa0:	f008 f8ae 	bl	26c00 <is_lfcr>
   1eaa4:	2800      	cmp	r0, #0
   1eaa6:	d1f8      	bne.n	1ea9a <at_parse_detect_type+0x16e>
	state = new_state;
   1eaa8:	2305      	movs	r3, #5
   1eaaa:	700b      	strb	r3, [r1, #0]
}
   1eaac:	e776      	b.n	1e99c <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1eaae:	2b08      	cmp	r3, #8
   1eab0:	f43f af74 	beq.w	1e99c <at_parse_detect_type+0x70>
	} else if (is_separator(*tmpstr)) {
   1eab4:	4610      	mov	r0, r2
   1eab6:	f7ff fe05 	bl	1e6c4 <is_separator>
   1eaba:	2800      	cmp	r0, #0
   1eabc:	d0c4      	beq.n	1ea48 <at_parse_detect_type+0x11c>
	state = new_state;
   1eabe:	2208      	movs	r2, #8
   1eac0:	4b01      	ldr	r3, [pc, #4]	; (1eac8 <at_parse_detect_type+0x19c>)
   1eac2:	e77e      	b.n	1e9c2 <at_parse_detect_type+0x96>
   1eac4:	2000dd3d 	.word	0x2000dd3d
   1eac8:	2000dd3e 	.word	0x2000dd3e
   1eacc:	0002a122 	.word	0x0002a122
   1ead0:	0002a128 	.word	0x0002a128
   1ead4:	0002a12e 	.word	0x0002a12e
   1ead8:	0002a13a 	.word	0x0002a13a
   1eadc:	0002a145 	.word	0x0002a145
   1eae0:	0002a151 	.word	0x0002a151
   1eae4:	0002b1d7 	.word	0x0002b1d7

0001eae8 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   1eae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eaec:	4689      	mov	r9, r1
   1eaee:	4616      	mov	r6, r2
   1eaf0:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1eaf2:	4680      	mov	r8, r0
   1eaf4:	2800      	cmp	r0, #0
   1eaf6:	f000 809a 	beq.w	1ec2e <at_parser_max_params_from_str+0x146>
   1eafa:	2a00      	cmp	r2, #0
   1eafc:	f000 8097 	beq.w	1ec2e <at_parser_max_params_from_str+0x146>
   1eb00:	6853      	ldr	r3, [r2, #4]
   1eb02:	2b00      	cmp	r3, #0
   1eb04:	f000 8093 	beq.w	1ec2e <at_parser_max_params_from_str+0x146>
	state = IDLE;
   1eb08:	2400      	movs	r4, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   1eb0a:	4610      	mov	r0, r2
   1eb0c:	f008 f8bb 	bl	26c86 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1eb10:	4642      	mov	r2, r8
   1eb12:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   1eb14:	f8cd 8004 	str.w	r8, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   1eb18:	429f      	cmp	r7, r3
   1eb1a:	bf28      	it	cs
   1eb1c:	461f      	movcs	r7, r3
	state = IDLE;
   1eb1e:	4b45      	ldr	r3, [pc, #276]	; (1ec34 <at_parser_max_params_from_str+0x14c>)
   1eb20:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
   1eb22:	4b45      	ldr	r3, [pc, #276]	; (1ec38 <at_parser_max_params_from_str+0x150>)
   1eb24:	701c      	strb	r4, [r3, #0]
   1eb26:	4611      	mov	r1, r2
	while (is_lfcr(*str)) {
   1eb28:	7808      	ldrb	r0, [r1, #0]
   1eb2a:	f008 f869 	bl	26c00 <is_lfcr>
   1eb2e:	4625      	mov	r5, r4
   1eb30:	3201      	adds	r2, #1
   1eb32:	4604      	mov	r4, r0
   1eb34:	2800      	cmp	r0, #0
   1eb36:	d1f6      	bne.n	1eb26 <at_parser_max_params_from_str+0x3e>
   1eb38:	b105      	cbz	r5, 1eb3c <at_parser_max_params_from_str+0x54>
   1eb3a:	9101      	str	r1, [sp, #4]
	int index = 0;
   1eb3c:	2500      	movs	r5, #0
		if (isspace((int)*str)) {
   1eb3e:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 1ec3c <at_parser_max_params_from_str+0x154>
	while ((!is_terminated(*str)) && (index < max_params)) {
   1eb42:	9b01      	ldr	r3, [sp, #4]
   1eb44:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1eb46:	2a00      	cmp	r2, #0
   1eb48:	d048      	beq.n	1ebdc <at_parser_max_params_from_str+0xf4>
   1eb4a:	42af      	cmp	r7, r5
   1eb4c:	d946      	bls.n	1ebdc <at_parser_max_params_from_str+0xf4>
		if (isspace((int)*str)) {
   1eb4e:	f81b 2002 	ldrb.w	r2, [fp, r2]
		ret = at_parse_detect_type(&str, index);
   1eb52:	4629      	mov	r1, r5
		if (isspace((int)*str)) {
   1eb54:	0712      	lsls	r2, r2, #28
			str++;
   1eb56:	bf48      	it	mi
   1eb58:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   1eb5a:	a801      	add	r0, sp, #4
			str++;
   1eb5c:	bf48      	it	mi
   1eb5e:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
   1eb60:	f7ff fee4 	bl	1e92c <at_parse_detect_type>
		if (ret == -1) {
   1eb64:	1c43      	adds	r3, r0, #1
   1eb66:	d039      	beq.n	1ebdc <at_parser_max_params_from_str+0xf4>
		if (ret == -2) {
   1eb68:	3002      	adds	r0, #2
			index = 0;
   1eb6a:	bf08      	it	eq
   1eb6c:	2500      	moveq	r5, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   1eb6e:	4632      	mov	r2, r6
   1eb70:	4629      	mov	r1, r5
   1eb72:	a801      	add	r0, sp, #4
			str = *at_params_str;
   1eb74:	bf08      	it	eq
   1eb76:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
   1eb7a:	f7ff fdc9 	bl	1e710 <at_parse_process_element>
   1eb7e:	3001      	adds	r0, #1
   1eb80:	d02c      	beq.n	1ebdc <at_parser_max_params_from_str+0xf4>
		if (is_separator(*str)) {
   1eb82:	9a01      	ldr	r2, [sp, #4]
   1eb84:	7810      	ldrb	r0, [r2, #0]
   1eb86:	f7ff fd9d 	bl	1e6c4 <is_separator>
   1eb8a:	b1b0      	cbz	r0, 1ebba <at_parser_max_params_from_str+0xd2>
			if (is_lfcr(*(str + 1))) {
   1eb8c:	7850      	ldrb	r0, [r2, #1]
   1eb8e:	f008 f837 	bl	26c00 <is_lfcr>
   1eb92:	b178      	cbz	r0, 1ebb4 <at_parser_max_params_from_str+0xcc>
				index++;
   1eb94:	3501      	adds	r5, #1
				if (index == max_params) {
   1eb96:	42bd      	cmp	r5, r7
   1eb98:	d03c      	beq.n	1ec14 <at_parser_max_params_from_str+0x12c>
				if (at_parse_detect_type(&str, index) == -1) {
   1eb9a:	4629      	mov	r1, r5
   1eb9c:	a801      	add	r0, sp, #4
   1eb9e:	f7ff fec5 	bl	1e92c <at_parse_detect_type>
   1eba2:	3001      	adds	r0, #1
   1eba4:	d01a      	beq.n	1ebdc <at_parser_max_params_from_str+0xf4>
				if (at_parse_process_element(&str, index,
   1eba6:	4632      	mov	r2, r6
   1eba8:	4629      	mov	r1, r5
   1ebaa:	a801      	add	r0, sp, #4
   1ebac:	f7ff fdb0 	bl	1e710 <at_parse_process_element>
   1ebb0:	3001      	adds	r0, #1
   1ebb2:	d013      	beq.n	1ebdc <at_parser_max_params_from_str+0xf4>
			str++;
   1ebb4:	9b01      	ldr	r3, [sp, #4]
   1ebb6:	3301      	adds	r3, #1
   1ebb8:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   1ebba:	9a01      	ldr	r2, [sp, #4]
   1ebbc:	7810      	ldrb	r0, [r2, #0]
   1ebbe:	f008 f81f 	bl	26c00 <is_lfcr>
   1ebc2:	b310      	cbz	r0, 1ec0a <at_parser_max_params_from_str+0x122>
   1ebc4:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   1ebc6:	7811      	ldrb	r1, [r2, #0]
   1ebc8:	4692      	mov	sl, r2
   1ebca:	4608      	mov	r0, r1
   1ebcc:	3201      	adds	r2, #1
   1ebce:	f008 f817 	bl	26c00 <is_lfcr>
   1ebd2:	2800      	cmp	r0, #0
   1ebd4:	d1f7      	bne.n	1ebc6 <at_parser_max_params_from_str+0xde>
   1ebd6:	b971      	cbnz	r1, 1ebf6 <at_parser_max_params_from_str+0x10e>
				str += i;
   1ebd8:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   1ebdc:	9d01      	ldr	r5, [sp, #4]
	if (oversized) {
   1ebde:	bb1c      	cbnz	r4, 1ec28 <at_parser_max_params_from_str+0x140>
   1ebe0:	782b      	ldrb	r3, [r5, #0]
   1ebe2:	b9cb      	cbnz	r3, 1ec18 <at_parser_max_params_from_str+0x130>
	return 0;
   1ebe4:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1ebe6:	f1b9 0f00 	cmp.w	r9, #0
   1ebea:	d001      	beq.n	1ebf0 <at_parser_max_params_from_str+0x108>
		*next_param_str = (char *)at_params_str;
   1ebec:	f8c9 5000 	str.w	r5, [r9]
	}

	return err;
}
   1ebf0:	b003      	add	sp, #12
   1ebf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1ebf6:	4608      	mov	r0, r1
   1ebf8:	f007 fff6 	bl	26be8 <is_notification>
   1ebfc:	2800      	cmp	r0, #0
   1ebfe:	d1eb      	bne.n	1ebd8 <at_parser_max_params_from_str+0xf0>
			    is_result(str + i)) {
   1ec00:	4650      	mov	r0, sl
   1ec02:	f7ff fd6d 	bl	1e6e0 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1ec06:	2800      	cmp	r0, #0
   1ec08:	d1e6      	bne.n	1ebd8 <at_parser_max_params_from_str+0xf0>
		index++;
   1ec0a:	3501      	adds	r5, #1
			oversized = true;
   1ec0c:	42bd      	cmp	r5, r7
   1ec0e:	bf08      	it	eq
   1ec10:	2401      	moveq	r4, #1
   1ec12:	e796      	b.n	1eb42 <at_parser_max_params_from_str+0x5a>
					oversized = true;
   1ec14:	4604      	mov	r4, r0
   1ec16:	e7e1      	b.n	1ebdc <at_parser_max_params_from_str+0xf4>
	if (!is_terminated(*str) && !is_result(str)) {
   1ec18:	4628      	mov	r0, r5
   1ec1a:	f7ff fd61 	bl	1e6e0 <is_result>
   1ec1e:	2800      	cmp	r0, #0
   1ec20:	d1e0      	bne.n	1ebe4 <at_parser_max_params_from_str+0xfc>
		return -EAGAIN;
   1ec22:	f06f 000a 	mvn.w	r0, #10
   1ec26:	e7de      	b.n	1ebe6 <at_parser_max_params_from_str+0xfe>
		return -E2BIG;
   1ec28:	f06f 0006 	mvn.w	r0, #6
   1ec2c:	e7db      	b.n	1ebe6 <at_parser_max_params_from_str+0xfe>
		return -EINVAL;
   1ec2e:	f06f 0015 	mvn.w	r0, #21
   1ec32:	e7dd      	b.n	1ebf0 <at_parser_max_params_from_str+0x108>
   1ec34:	2000dd3e 	.word	0x2000dd3e
   1ec38:	2000dd3d 	.word	0x2000dd3d
   1ec3c:	0002b1d7 	.word	0x0002b1d7

0001ec40 <enable_notifications>:

	event_handler_list_dispatch(&evt);
}

static int enable_notifications(void)
{
   1ec40:	b5b0      	push	{r4, r5, r7, lr}
   1ec42:	b08e      	sub	sp, #56	; 0x38
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   1ec44:	482c      	ldr	r0, [pc, #176]	; (1ecf8 <enable_notifications+0xb8>)
{
   1ec46:	af00      	add	r7, sp, #0
	err = nrf_modem_at_printf(AT_CEREG_5);
   1ec48:	f004 fa2e 	bl	230a8 <nrf_modem_at_printf>
	if (err) {
   1ec4c:	4604      	mov	r4, r0
   1ec4e:	b1a0      	cbz	r0, 1ec7a <enable_notifications+0x3a>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   1ec50:	466d      	mov	r5, sp
   1ec52:	b088      	sub	sp, #32
   1ec54:	466a      	mov	r2, sp
   1ec56:	4b29      	ldr	r3, [pc, #164]	; (1ecfc <enable_notifications+0xbc>)
   1ec58:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ec5c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ec60:	2303      	movs	r3, #3
   1ec62:	4827      	ldr	r0, [pc, #156]	; (1ed00 <enable_notifications+0xc0>)
   1ec64:	f842 3f10 	str.w	r3, [r2, #16]!
   1ec68:	f008 f937 	bl	26eda <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1ec6c:	f06f 040d 	mvn.w	r4, #13
   1ec70:	46ad      	mov	sp, r5
			LOG_WRN("Current modem firmware version: %s", buf);
		}
	}

	return 0;
}
   1ec72:	4620      	mov	r0, r4
   1ec74:	3738      	adds	r7, #56	; 0x38
   1ec76:	46bd      	mov	sp, r7
   1ec78:	bdb0      	pop	{r4, r5, r7, pc}
	err = nrf_modem_at_printf(cscon);
   1ec7a:	4822      	ldr	r0, [pc, #136]	; (1ed04 <enable_notifications+0xc4>)
   1ec7c:	f004 fa14 	bl	230a8 <nrf_modem_at_printf>
	if (err) {
   1ec80:	2800      	cmp	r0, #0
   1ec82:	d0f6      	beq.n	1ec72 <enable_notifications+0x32>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   1ec84:	466d      	mov	r5, sp
   1ec86:	b088      	sub	sp, #32
   1ec88:	466a      	mov	r2, sp
   1ec8a:	4b1f      	ldr	r3, [pc, #124]	; (1ed08 <enable_notifications+0xc8>)
   1ec8c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1ec90:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ec94:	2303      	movs	r3, #3
   1ec96:	481a      	ldr	r0, [pc, #104]	; (1ed00 <enable_notifications+0xc0>)
   1ec98:	f842 3f10 	str.w	r3, [r2, #16]!
   1ec9c:	f008 f91d 	bl	26eda <z_log_msg_static_create.constprop.0>
   1eca0:	46ad      	mov	sp, r5
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   1eca2:	4b1a      	ldr	r3, [pc, #104]	; (1ed0c <enable_notifications+0xcc>)
   1eca4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1eca8:	617b      	str	r3, [r7, #20]
   1ecaa:	2302      	movs	r3, #2
   1ecac:	4814      	ldr	r0, [pc, #80]	; (1ed00 <enable_notifications+0xc0>)
   1ecae:	f107 0210 	add.w	r2, r7, #16
   1ecb2:	613b      	str	r3, [r7, #16]
   1ecb4:	f008 f911 	bl	26eda <z_log_msg_static_create.constprop.0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   1ecb8:	2132      	movs	r1, #50	; 0x32
   1ecba:	4638      	mov	r0, r7
   1ecbc:	4a14      	ldr	r2, [pc, #80]	; (1ed10 <enable_notifications+0xd0>)
   1ecbe:	f004 fa3f 	bl	23140 <nrf_modem_at_cmd>
		if (err == 0) {
   1ecc2:	2800      	cmp	r0, #0
   1ecc4:	d1d5      	bne.n	1ec72 <enable_notifications+0x32>
			char *end = strstr(buf, "\r\nOK");
   1ecc6:	4638      	mov	r0, r7
   1ecc8:	4912      	ldr	r1, [pc, #72]	; (1ed14 <enable_notifications+0xd4>)
   1ecca:	f009 fc6f 	bl	285ac <strstr>
			if (end) {
   1ecce:	b100      	cbz	r0, 1ecd2 <enable_notifications+0x92>
				*end = '\0';
   1ecd0:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", buf);
   1ecd2:	466d      	mov	r5, sp
   1ecd4:	b088      	sub	sp, #32
   1ecd6:	466a      	mov	r2, sp
   1ecd8:	4b0f      	ldr	r3, [pc, #60]	; (1ed18 <enable_notifications+0xd8>)
   1ecda:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1ecde:	e9c2 3705 	strd	r3, r7, [r2, #20]
   1ece2:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ece6:	8393      	strh	r3, [r2, #28]
   1ece8:	4b0c      	ldr	r3, [pc, #48]	; (1ed1c <enable_notifications+0xdc>)
   1ecea:	4805      	ldr	r0, [pc, #20]	; (1ed00 <enable_notifications+0xc0>)
   1ecec:	f842 3f10 	str.w	r3, [r2, #16]!
   1ecf0:	f008 f8f3 	bl	26eda <z_log_msg_static_create.constprop.0>
   1ecf4:	46ad      	mov	sp, r5
   1ecf6:	e7bc      	b.n	1ec72 <enable_notifications+0x32>
   1ecf8:	0002a17c 	.word	0x0002a17c
   1ecfc:	0002a187 	.word	0x0002a187
   1ed00:	00028c78 	.word	0x00028c78
   1ed04:	0002a5d6 	.word	0x0002a5d6
   1ed08:	0002a1bd 	.word	0x0002a1bd
   1ed0c:	0002a1f5 	.word	0x0002a1f5
   1ed10:	0002a226 	.word	0x0002a226
   1ed14:	0002a22e 	.word	0x0002a22e
   1ed18:	0002a233 	.word	0x0002a233
   1ed1c:	01000003 	.word	0x01000003

0001ed20 <at_handler_mdmev>:
{
   1ed20:	b590      	push	{r4, r7, lr}
   1ed22:	4604      	mov	r4, r0
   1ed24:	b093      	sub	sp, #76	; 0x4c
   1ed26:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1ed28:	2100      	movs	r1, #0
   1ed2a:	2248      	movs	r2, #72	; 0x48
   1ed2c:	4638      	mov	r0, r7
   1ed2e:	f009 fbef 	bl	28510 <memset>
	err = parse_mdmev(response, &evt.modem_evt);
   1ed32:	4620      	mov	r0, r4
   1ed34:	f107 0108 	add.w	r1, r7, #8
   1ed38:	f001 fbac 	bl	20494 <parse_mdmev>
	if (err) {
   1ed3c:	b188      	cbz	r0, 1ed62 <at_handler_mdmev+0x42>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   1ed3e:	466c      	mov	r4, sp
   1ed40:	b088      	sub	sp, #32
   1ed42:	466a      	mov	r2, sp
   1ed44:	4b0a      	ldr	r3, [pc, #40]	; (1ed70 <at_handler_mdmev+0x50>)
   1ed46:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ed4a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ed4e:	2303      	movs	r3, #3
   1ed50:	4808      	ldr	r0, [pc, #32]	; (1ed74 <at_handler_mdmev+0x54>)
   1ed52:	f842 3f10 	str.w	r3, [r2, #16]!
   1ed56:	f008 f8c0 	bl	26eda <z_log_msg_static_create.constprop.0>
   1ed5a:	46a5      	mov	sp, r4
}
   1ed5c:	374c      	adds	r7, #76	; 0x4c
   1ed5e:	46bd      	mov	sp, r7
   1ed60:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1ed62:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   1ed64:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1ed66:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1ed68:	f000 fbb0 	bl	1f4cc <event_handler_list_dispatch>
   1ed6c:	e7f6      	b.n	1ed5c <at_handler_mdmev+0x3c>
   1ed6e:	bf00      	nop
   1ed70:	0002a256 	.word	0x0002a256
   1ed74:	00028c78 	.word	0x00028c78

0001ed78 <at_handler_xmodemsleep>:
{
   1ed78:	b590      	push	{r4, r7, lr}
   1ed7a:	4604      	mov	r4, r0
   1ed7c:	b093      	sub	sp, #76	; 0x4c
   1ed7e:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1ed80:	2100      	movs	r1, #0
   1ed82:	2248      	movs	r2, #72	; 0x48
   1ed84:	4638      	mov	r0, r7
   1ed86:	f009 fbc3 	bl	28510 <memset>
	err = parse_xmodemsleep(response, &evt.modem_sleep);
   1ed8a:	4620      	mov	r0, r4
   1ed8c:	f107 0108 	add.w	r1, r7, #8
   1ed90:	f001 fb06 	bl	203a0 <parse_xmodemsleep>
	if (err) {
   1ed94:	b188      	cbz	r0, 1edba <at_handler_xmodemsleep+0x42>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   1ed96:	466c      	mov	r4, sp
   1ed98:	b088      	sub	sp, #32
   1ed9a:	466a      	mov	r2, sp
   1ed9c:	4b13      	ldr	r3, [pc, #76]	; (1edec <at_handler_xmodemsleep+0x74>)
   1ed9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1eda2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1eda6:	2303      	movs	r3, #3
   1eda8:	4811      	ldr	r0, [pc, #68]	; (1edf0 <at_handler_xmodemsleep+0x78>)
   1edaa:	f842 3f10 	str.w	r3, [r2, #16]!
   1edae:	f008 f894 	bl	26eda <z_log_msg_static_create.constprop.0>
   1edb2:	46a5      	mov	sp, r4
}
   1edb4:	374c      	adds	r7, #76	; 0x4c
   1edb6:	46bd      	mov	sp, r7
   1edb8:	bd90      	pop	{r4, r7, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   1edba:	7a3b      	ldrb	r3, [r7, #8]
   1edbc:	1e5a      	subs	r2, r3, #1
   1edbe:	2a01      	cmp	r2, #1
   1edc0:	d901      	bls.n	1edc6 <at_handler_xmodemsleep+0x4e>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   1edc2:	2b04      	cmp	r3, #4
   1edc4:	d1f6      	bne.n	1edb4 <at_handler_xmodemsleep+0x3c>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   1edc6:	e9d7 2104 	ldrd	r2, r1, [r7, #16]
   1edca:	f5a2 539c 	sub.w	r3, r2, #4992	; 0x1380
   1edce:	3b08      	subs	r3, #8
   1edd0:	430b      	orrs	r3, r1
   1edd2:	d007      	beq.n	1ede4 <at_handler_xmodemsleep+0x6c>
	} else if (evt.modem_sleep.time == 0) {
   1edd4:	430a      	orrs	r2, r1
   1edd6:	d007      	beq.n	1ede8 <at_handler_xmodemsleep+0x70>
   1edd8:	230a      	movs	r3, #10
	event_handler_list_dispatch(&evt);
   1edda:	4638      	mov	r0, r7
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   1eddc:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1edde:	f000 fb75 	bl	1f4cc <event_handler_list_dispatch>
   1ede2:	e7e7      	b.n	1edb4 <at_handler_xmodemsleep+0x3c>
   1ede4:	2308      	movs	r3, #8
   1ede6:	e7f8      	b.n	1edda <at_handler_xmodemsleep+0x62>
   1ede8:	2309      	movs	r3, #9
   1edea:	e7f6      	b.n	1edda <at_handler_xmodemsleep+0x62>
   1edec:	0002a286 	.word	0x0002a286
   1edf0:	00028c78 	.word	0x00028c78

0001edf4 <at_handler_ncellmeas>:
{
   1edf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1edf6:	b0ab      	sub	sp, #172	; 0xac
   1edf8:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1edfa:	2100      	movs	r1, #0
   1edfc:	2248      	movs	r2, #72	; 0x48
{
   1edfe:	4606      	mov	r6, r0
	struct lte_lc_evt evt = {0};
   1ee00:	f107 0018 	add.w	r0, r7, #24
   1ee04:	f009 fb84 	bl	28510 <memset>
	if (event_handler_list_is_empty() || !ncellmeas_ongoing) {
   1ee08:	f000 fb58 	bl	1f4bc <event_handler_list_is_empty>
   1ee0c:	4d5e      	ldr	r5, [pc, #376]	; (1ef88 <at_handler_ncellmeas+0x194>)
   1ee0e:	4601      	mov	r1, r0
   1ee10:	b9e0      	cbnz	r0, 1ee4c <at_handler_ncellmeas+0x58>
   1ee12:	782b      	ldrb	r3, [r5, #0]
   1ee14:	b1d3      	cbz	r3, 1ee4c <at_handler_ncellmeas+0x58>
	if (ncellmeas_params.search_type > LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   1ee16:	4c5d      	ldr	r4, [pc, #372]	; (1ef8c <at_handler_ncellmeas+0x198>)
   1ee18:	7823      	ldrb	r3, [r4, #0]
   1ee1a:	2b03      	cmp	r3, #3
   1ee1c:	d962      	bls.n	1eee4 <at_handler_ncellmeas+0xf0>
	struct lte_lc_evt evt = {0};
   1ee1e:	2248      	movs	r2, #72	; 0x48
   1ee20:	f107 0060 	add.w	r0, r7, #96	; 0x60
   1ee24:	f009 fb74 	bl	28510 <memset>
	int max_cell_count = ncellmeas_params.gci_count;
   1ee28:	7860      	ldrb	r0, [r4, #1]
	if (max_cell_count != 0) {
   1ee2a:	b1a0      	cbz	r0, 1ee56 <at_handler_ncellmeas+0x62>
		cells = k_calloc(max_cell_count, sizeof(struct lte_lc_cell));
   1ee2c:	2130      	movs	r1, #48	; 0x30
   1ee2e:	f009 fb2e 	bl	2848e <k_calloc>
		if (cells == NULL) {
   1ee32:	4604      	mov	r4, r0
   1ee34:	b980      	cbnz	r0, 1ee58 <at_handler_ncellmeas+0x64>
			LOG_ERR("Failed to allocate memory for the GCI cells");
   1ee36:	4b56      	ldr	r3, [pc, #344]	; (1ef90 <at_handler_ncellmeas+0x19c>)
   1ee38:	f107 0210 	add.w	r2, r7, #16
   1ee3c:	617b      	str	r3, [r7, #20]
   1ee3e:	2302      	movs	r3, #2
   1ee40:	613b      	str	r3, [r7, #16]
			LOG_ERR("Failed to allocate memory for neighbor cells");
   1ee42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ee46:	4853      	ldr	r0, [pc, #332]	; (1ef94 <at_handler_ncellmeas+0x1a0>)
   1ee48:	f008 f847 	bl	26eda <z_log_msg_static_create.constprop.0>
	ncellmeas_ongoing = false;
   1ee4c:	2300      	movs	r3, #0
}
   1ee4e:	37ac      	adds	r7, #172	; 0xac
	ncellmeas_ongoing = false;
   1ee50:	702b      	strb	r3, [r5, #0]
}
   1ee52:	46bd      	mov	sp, r7
   1ee54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct lte_lc_cell *cells = NULL;
   1ee56:	4604      	mov	r4, r0
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   1ee58:	f107 0268 	add.w	r2, r7, #104	; 0x68
   1ee5c:	4631      	mov	r1, r6
   1ee5e:	484b      	ldr	r0, [pc, #300]	; (1ef8c <at_handler_ncellmeas+0x198>)
	evt.cells_info.gci_cells = cells;
   1ee60:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   1ee64:	f000 ffd0 	bl	1fe08 <parse_ncellmeas_gci>
	switch (err) {
   1ee68:	1dc2      	adds	r2, r0, #7
   1ee6a:	d011      	beq.n	1ee90 <at_handler_ncellmeas+0x9c>
   1ee6c:	2801      	cmp	r0, #1
   1ee6e:	d92a      	bls.n	1eec6 <at_handler_ncellmeas+0xd2>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1ee70:	466e      	mov	r6, sp
   1ee72:	b088      	sub	sp, #32
   1ee74:	466a      	mov	r2, sp
   1ee76:	4b48      	ldr	r3, [pc, #288]	; (1ef98 <at_handler_ncellmeas+0x1a4>)
   1ee78:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ee7c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ee80:	2303      	movs	r3, #3
   1ee82:	4844      	ldr	r0, [pc, #272]	; (1ef94 <at_handler_ncellmeas+0x1a0>)
   1ee84:	f842 3f10 	str.w	r3, [r2, #16]!
   1ee88:	f008 f827 	bl	26eda <z_log_msg_static_create.constprop.0>
   1ee8c:	46b5      	mov	sp, r6
   1ee8e:	e021      	b.n	1eed4 <at_handler_ncellmeas+0xe0>
		LOG_WRN("Not all neighbor cells could be parsed");
   1ee90:	466e      	mov	r6, sp
   1ee92:	4b42      	ldr	r3, [pc, #264]	; (1ef9c <at_handler_ncellmeas+0x1a8>)
   1ee94:	f107 0210 	add.w	r2, r7, #16
   1ee98:	617b      	str	r3, [r7, #20]
   1ee9a:	2302      	movs	r3, #2
   1ee9c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1eea0:	483c      	ldr	r0, [pc, #240]	; (1ef94 <at_handler_ncellmeas+0x1a0>)
   1eea2:	613b      	str	r3, [r7, #16]
   1eea4:	f008 f819 	bl	26eda <z_log_msg_static_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   1eea8:	b088      	sub	sp, #32
   1eeaa:	466a      	mov	r2, sp
   1eeac:	4b3c      	ldr	r3, [pc, #240]	; (1efa0 <at_handler_ncellmeas+0x1ac>)
   1eeae:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1eeb2:	6153      	str	r3, [r2, #20]
   1eeb4:	230a      	movs	r3, #10
   1eeb6:	6193      	str	r3, [r2, #24]
   1eeb8:	2303      	movs	r3, #3
   1eeba:	4836      	ldr	r0, [pc, #216]	; (1ef94 <at_handler_ncellmeas+0x1a0>)
   1eebc:	f842 3f10 	str.w	r3, [r2, #16]!
   1eec0:	f008 f80b 	bl	26eda <z_log_msg_static_create.constprop.0>
   1eec4:	46b5      	mov	sp, r6
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1eec6:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1eec8:	f107 0060 	add.w	r0, r7, #96	; 0x60
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1eecc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   1eed0:	f000 fafc 	bl	1f4cc <event_handler_list_dispatch>
	k_free(cells);
   1eed4:	4620      	mov	r0, r4
   1eed6:	f009 facf 	bl	28478 <k_free>
	k_free(evt.cells_info.neighbor_cells);
   1eeda:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
		k_free(neighbor_cells);
   1eede:	f009 facb 	bl	28478 <k_free>
   1eee2:	e7b3      	b.n	1ee4c <at_handler_ncellmeas+0x58>
	int ncell_count = neighborcell_count_get(response);
   1eee4:	4630      	mov	r0, r6
   1eee6:	f000 fdcf 	bl	1fa88 <neighborcell_count_get>
   1eeea:	4604      	mov	r4, r0
	if (ncell_count != 0) {
   1eeec:	b158      	cbz	r0, 1ef06 <at_handler_ncellmeas+0x112>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   1eeee:	2110      	movs	r1, #16
   1eef0:	f009 facd 	bl	2848e <k_calloc>
		if (neighbor_cells == NULL) {
   1eef4:	4604      	mov	r4, r0
   1eef6:	b930      	cbnz	r0, 1ef06 <at_handler_ncellmeas+0x112>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   1eef8:	4b2a      	ldr	r3, [pc, #168]	; (1efa4 <at_handler_ncellmeas+0x1b0>)
   1eefa:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1eefe:	677b      	str	r3, [r7, #116]	; 0x74
   1ef00:	2302      	movs	r3, #2
   1ef02:	673b      	str	r3, [r7, #112]	; 0x70
   1ef04:	e79d      	b.n	1ee42 <at_handler_ncellmeas+0x4e>
	err = parse_ncellmeas(response, &evt.cells_info);
   1ef06:	4630      	mov	r0, r6
   1ef08:	f107 0120 	add.w	r1, r7, #32
	evt.cells_info.neighbor_cells = neighbor_cells;
   1ef0c:	657c      	str	r4, [r7, #84]	; 0x54
	err = parse_ncellmeas(response, &evt.cells_info);
   1ef0e:	f000 fde1 	bl	1fad4 <parse_ncellmeas>
	switch (err) {
   1ef12:	1dc3      	adds	r3, r0, #7
   1ef14:	d011      	beq.n	1ef3a <at_handler_ncellmeas+0x146>
   1ef16:	2801      	cmp	r0, #1
   1ef18:	d92a      	bls.n	1ef70 <at_handler_ncellmeas+0x17c>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1ef1a:	466e      	mov	r6, sp
   1ef1c:	b088      	sub	sp, #32
   1ef1e:	466a      	mov	r2, sp
   1ef20:	4b1d      	ldr	r3, [pc, #116]	; (1ef98 <at_handler_ncellmeas+0x1a4>)
   1ef22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ef26:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ef2a:	2303      	movs	r3, #3
   1ef2c:	4819      	ldr	r0, [pc, #100]	; (1ef94 <at_handler_ncellmeas+0x1a0>)
   1ef2e:	f842 3f10 	str.w	r3, [r2, #16]!
   1ef32:	f007 ffd2 	bl	26eda <z_log_msg_static_create.constprop.0>
   1ef36:	46b5      	mov	sp, r6
   1ef38:	e020      	b.n	1ef7c <at_handler_ncellmeas+0x188>
		LOG_WRN("Not all neighbor cells could be parsed");
   1ef3a:	466e      	mov	r6, sp
   1ef3c:	4b17      	ldr	r3, [pc, #92]	; (1ef9c <at_handler_ncellmeas+0x1a8>)
   1ef3e:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1ef42:	677b      	str	r3, [r7, #116]	; 0x74
   1ef44:	2302      	movs	r3, #2
   1ef46:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ef4a:	4812      	ldr	r0, [pc, #72]	; (1ef94 <at_handler_ncellmeas+0x1a0>)
   1ef4c:	673b      	str	r3, [r7, #112]	; 0x70
   1ef4e:	f007 ffc4 	bl	26eda <z_log_msg_static_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   1ef52:	b088      	sub	sp, #32
   1ef54:	466a      	mov	r2, sp
   1ef56:	4b12      	ldr	r3, [pc, #72]	; (1efa0 <at_handler_ncellmeas+0x1ac>)
   1ef58:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1ef5c:	6153      	str	r3, [r2, #20]
   1ef5e:	230a      	movs	r3, #10
   1ef60:	6193      	str	r3, [r2, #24]
   1ef62:	2303      	movs	r3, #3
   1ef64:	480b      	ldr	r0, [pc, #44]	; (1ef94 <at_handler_ncellmeas+0x1a0>)
   1ef66:	f842 3f10 	str.w	r3, [r2, #16]!
   1ef6a:	f007 ffb6 	bl	26eda <z_log_msg_static_create.constprop.0>
   1ef6e:	46b5      	mov	sp, r6
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1ef70:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1ef72:	f107 0018 	add.w	r0, r7, #24
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1ef76:	763b      	strb	r3, [r7, #24]
		event_handler_list_dispatch(&evt);
   1ef78:	f000 faa8 	bl	1f4cc <event_handler_list_dispatch>
	if (neighbor_cells) {
   1ef7c:	2c00      	cmp	r4, #0
   1ef7e:	f43f af65 	beq.w	1ee4c <at_handler_ncellmeas+0x58>
		k_free(neighbor_cells);
   1ef82:	4620      	mov	r0, r4
   1ef84:	e7ab      	b.n	1eede <at_handler_ncellmeas+0xea>
   1ef86:	bf00      	nop
   1ef88:	2000dde1 	.word	0x2000dde1
   1ef8c:	2000dde2 	.word	0x2000dde2
   1ef90:	0002a2c2 	.word	0x0002a2c2
   1ef94:	00028c78 	.word	0x00028c78
   1ef98:	0002a34f 	.word	0x0002a34f
   1ef9c:	0002a2ee 	.word	0x0002a2ee
   1efa0:	0002a315 	.word	0x0002a315
   1efa4:	0002a379 	.word	0x0002a379

0001efa8 <at_handler_xt3412>:
{
   1efa8:	b590      	push	{r4, r7, lr}
   1efaa:	4604      	mov	r4, r0
   1efac:	b093      	sub	sp, #76	; 0x4c
   1efae:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1efb0:	2100      	movs	r1, #0
   1efb2:	2248      	movs	r2, #72	; 0x48
   1efb4:	4638      	mov	r0, r7
   1efb6:	f009 faab 	bl	28510 <memset>
	err = parse_xt3412(response, &evt.time);
   1efba:	4620      	mov	r0, r4
   1efbc:	f107 0108 	add.w	r1, r7, #8
   1efc0:	f000 fcf2 	bl	1f9a8 <parse_xt3412>
	if (err) {
   1efc4:	b188      	cbz	r0, 1efea <at_handler_xt3412+0x42>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   1efc6:	466c      	mov	r4, sp
   1efc8:	b088      	sub	sp, #32
   1efca:	466a      	mov	r2, sp
   1efcc:	4b0d      	ldr	r3, [pc, #52]	; (1f004 <at_handler_xt3412+0x5c>)
   1efce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1efd2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1efd6:	2303      	movs	r3, #3
   1efd8:	480b      	ldr	r0, [pc, #44]	; (1f008 <at_handler_xt3412+0x60>)
   1efda:	f842 3f10 	str.w	r3, [r2, #16]!
   1efde:	f007 ff7c 	bl	26eda <z_log_msg_static_create.constprop.0>
   1efe2:	46a5      	mov	sp, r4
}
   1efe4:	374c      	adds	r7, #76	; 0x4c
   1efe6:	46bd      	mov	sp, r7
   1efe8:	bd90      	pop	{r4, r7, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   1efea:	68bb      	ldr	r3, [r7, #8]
   1efec:	68fa      	ldr	r2, [r7, #12]
   1efee:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   1eff2:	3b08      	subs	r3, #8
   1eff4:	4313      	orrs	r3, r2
   1eff6:	d1f5      	bne.n	1efe4 <at_handler_xt3412+0x3c>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1eff8:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   1effa:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1effc:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1effe:	f000 fa65 	bl	1f4cc <event_handler_list_dispatch>
   1f002:	e7ef      	b.n	1efe4 <at_handler_xt3412+0x3c>
   1f004:	0002a3a6 	.word	0x0002a3a6
   1f008:	00028c78 	.word	0x00028c78

0001f00c <at_handler_cedrxp>:
{
   1f00c:	b590      	push	{r4, r7, lr}
   1f00e:	4604      	mov	r4, r0
   1f010:	b093      	sub	sp, #76	; 0x4c
   1f012:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f014:	2100      	movs	r1, #0
   1f016:	2248      	movs	r2, #72	; 0x48
   1f018:	4638      	mov	r0, r7
   1f01a:	f009 fa79 	bl	28510 <memset>
	err = parse_edrx(response, &evt.edrx_cfg);
   1f01e:	4620      	mov	r0, r4
   1f020:	f107 0108 	add.w	r1, r7, #8
   1f024:	f7f9 ffec 	bl	19000 <parse_edrx>
	if (err) {
   1f028:	b188      	cbz	r0, 1f04e <at_handler_cedrxp+0x42>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   1f02a:	466c      	mov	r4, sp
   1f02c:	b088      	sub	sp, #32
   1f02e:	466a      	mov	r2, sp
   1f030:	4b0a      	ldr	r3, [pc, #40]	; (1f05c <at_handler_cedrxp+0x50>)
   1f032:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f036:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f03a:	2303      	movs	r3, #3
   1f03c:	4808      	ldr	r0, [pc, #32]	; (1f060 <at_handler_cedrxp+0x54>)
   1f03e:	f842 3f10 	str.w	r3, [r2, #16]!
   1f042:	f007 ff4a 	bl	26eda <z_log_msg_static_create.constprop.0>
   1f046:	46a5      	mov	sp, r4
}
   1f048:	374c      	adds	r7, #76	; 0x4c
   1f04a:	46bd      	mov	sp, r7
   1f04c:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1f04e:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   1f050:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1f052:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1f054:	f000 fa3a 	bl	1f4cc <event_handler_list_dispatch>
   1f058:	e7f6      	b.n	1f048 <at_handler_cedrxp+0x3c>
   1f05a:	bf00      	nop
   1f05c:	0002a3da 	.word	0x0002a3da
   1f060:	00028c78 	.word	0x00028c78

0001f064 <at_handler_cscon>:
{
   1f064:	b590      	push	{r4, r7, lr}
   1f066:	4604      	mov	r4, r0
   1f068:	b093      	sub	sp, #76	; 0x4c
   1f06a:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f06c:	2248      	movs	r2, #72	; 0x48
   1f06e:	2100      	movs	r1, #0
   1f070:	4638      	mov	r0, r7
   1f072:	f009 fa4d 	bl	28510 <memset>
	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   1f076:	2201      	movs	r2, #1
   1f078:	4620      	mov	r0, r4
   1f07a:	f107 0108 	add.w	r1, r7, #8
   1f07e:	f000 fb03 	bl	1f688 <parse_rrc_mode>
	if (err) {
   1f082:	b188      	cbz	r0, 1f0a8 <at_handler_cscon+0x44>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   1f084:	466c      	mov	r4, sp
   1f086:	b088      	sub	sp, #32
   1f088:	466a      	mov	r2, sp
   1f08a:	4b0a      	ldr	r3, [pc, #40]	; (1f0b4 <at_handler_cscon+0x50>)
   1f08c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f090:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f094:	2303      	movs	r3, #3
   1f096:	4808      	ldr	r0, [pc, #32]	; (1f0b8 <at_handler_cscon+0x54>)
   1f098:	f842 3f10 	str.w	r3, [r2, #16]!
   1f09c:	f007 ff1d 	bl	26eda <z_log_msg_static_create.constprop.0>
   1f0a0:	46a5      	mov	sp, r4
}
   1f0a2:	374c      	adds	r7, #76	; 0x4c
   1f0a4:	46bd      	mov	sp, r7
   1f0a6:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1f0a8:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   1f0aa:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1f0ac:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1f0ae:	f000 fa0d 	bl	1f4cc <event_handler_list_dispatch>
   1f0b2:	e7f6      	b.n	1f0a2 <at_handler_cscon+0x3e>
   1f0b4:	0002a3f6 	.word	0x0002a3f6
   1f0b8:	00028c78 	.word	0x00028c78

0001f0bc <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   1f0bc:	2300      	movs	r3, #0
{
   1f0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f0c2:	b090      	sub	sp, #64	; 0x40
   1f0c4:	af00      	add	r7, sp, #0
   1f0c6:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   1f0c8:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   1f0ca:	e9c7 3301 	strd	r3, r3, [r7, #4]
	char tau_ext_str[9] = {0};
   1f0ce:	e9c7 3304 	strd	r3, r3, [r7, #16]
	char tau_legacy_str[9] = {0};
   1f0d2:	e9c7 3307 	strd	r3, r3, [r7, #28]
	char active_time_str[9] = {0};
   1f0d6:	733b      	strb	r3, [r7, #12]
	char tau_ext_str[9] = {0};
   1f0d8:	763b      	strb	r3, [r7, #24]
	char tau_legacy_str[9] = {0};
   1f0da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if ((tau == NULL) || (active_time == NULL)) {
   1f0de:	2800      	cmp	r0, #0
   1f0e0:	d07e      	beq.n	1f1e0 <lte_lc_psm_get+0x124>
   1f0e2:	2900      	cmp	r1, #0
   1f0e4:	d07c      	beq.n	1f1e0 <lte_lc_psm_get+0x124>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   1f0e6:	4c40      	ldr	r4, [pc, #256]	; (1f1e8 <lte_lc_psm_get+0x12c>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1f0e8:	21a0      	movs	r1, #160	; 0xa0
   1f0ea:	4620      	mov	r0, r4
   1f0ec:	4a3f      	ldr	r2, [pc, #252]	; (1f1ec <lte_lc_psm_get+0x130>)
	response[0] = '\0';
   1f0ee:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1f0f0:	f004 f826 	bl	23140 <nrf_modem_at_cmd>
	if (err) {
   1f0f4:	b1a8      	cbz	r0, 1f122 <lte_lc_psm_get+0x66>
		LOG_ERR("AT command failed, error: %d", err);
   1f0f6:	466c      	mov	r4, sp
   1f0f8:	b088      	sub	sp, #32
   1f0fa:	466a      	mov	r2, sp
   1f0fc:	4b3c      	ldr	r3, [pc, #240]	; (1f1f0 <lte_lc_psm_get+0x134>)
   1f0fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f102:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f106:	2303      	movs	r3, #3
   1f108:	483a      	ldr	r0, [pc, #232]	; (1f1f4 <lte_lc_psm_get+0x138>)
   1f10a:	f842 3f10 	str.w	r3, [r2, #16]!
   1f10e:	f007 fee4 	bl	26eda <z_log_msg_static_create.constprop.0>
   1f112:	46a5      	mov	sp, r4
		return -EFAULT;
   1f114:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec", *tau, *active_time);

	return 0;
}
   1f118:	4620      	mov	r0, r4
   1f11a:	3740      	adds	r7, #64	; 0x40
   1f11c:	46bd      	mov	sp, r7
   1f11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	comma_ptr = strchr(response, ch);
   1f122:	4620      	mov	r0, r4
   1f124:	212c      	movs	r1, #44	; 0x2c
   1f126:	f009 f9fb 	bl	28520 <strchr>
	if (!comma_ptr) {
   1f12a:	4604      	mov	r4, r0
   1f12c:	2800      	cmp	r0, #0
   1f12e:	d048      	beq.n	1f1c2 <lte_lc_psm_get+0x106>
   1f130:	f04f 080c 	mov.w	r8, #12
			comma_ptr = strchr(comma_ptr + 1, ch);
   1f134:	1c60      	adds	r0, r4, #1
   1f136:	212c      	movs	r1, #44	; 0x2c
   1f138:	f009 f9f2 	bl	28520 <strchr>
	for (int i = 0; i < 12; i++) {
   1f13c:	f1b8 0801 	subs.w	r8, r8, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   1f140:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   1f142:	d131      	bne.n	1f1a8 <lte_lc_psm_get+0xec>
	if (comma_ptr) {
   1f144:	b390      	cbz	r0, 1f1ac <lte_lc_psm_get+0xf0>
		strncpy(active_time_str, comma_ptr + 2, 8);
   1f146:	1c81      	adds	r1, r0, #2
   1f148:	2208      	movs	r2, #8
   1f14a:	1d38      	adds	r0, r7, #4
   1f14c:	f009 fa0f 	bl	2856e <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1f150:	1c60      	adds	r0, r4, #1
   1f152:	212c      	movs	r1, #44	; 0x2c
   1f154:	f009 f9e4 	bl	28520 <strchr>
	if (comma_ptr) {
   1f158:	4604      	mov	r4, r0
   1f15a:	b338      	cbz	r0, 1f1ac <lte_lc_psm_get+0xf0>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   1f15c:	1c81      	adds	r1, r0, #2
   1f15e:	2208      	movs	r2, #8
   1f160:	f107 0010 	add.w	r0, r7, #16
   1f164:	f009 fa03 	bl	2856e <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1f168:	212c      	movs	r1, #44	; 0x2c
   1f16a:	1c60      	adds	r0, r4, #1
   1f16c:	f009 f9d8 	bl	28520 <strchr>
	if (comma_ptr) {
   1f170:	bb50      	cbnz	r0, 1f1c8 <lte_lc_psm_get+0x10c>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   1f172:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1f176:	f107 021c 	add.w	r2, r7, #28
   1f17a:	f107 0110 	add.w	r1, r7, #16
   1f17e:	1d38      	adds	r0, r7, #4
   1f180:	f000 f9ee 	bl	1f560 <parse_psm>
	if (err) {
   1f184:	4604      	mov	r4, r0
   1f186:	b330      	cbz	r0, 1f1d6 <lte_lc_psm_get+0x11a>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   1f188:	466d      	mov	r5, sp
   1f18a:	b088      	sub	sp, #32
   1f18c:	466a      	mov	r2, sp
   1f18e:	4b1a      	ldr	r3, [pc, #104]	; (1f1f8 <lte_lc_psm_get+0x13c>)
   1f190:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f194:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f198:	2303      	movs	r3, #3
   1f19a:	4816      	ldr	r0, [pc, #88]	; (1f1f4 <lte_lc_psm_get+0x138>)
   1f19c:	f842 3f10 	str.w	r3, [r2, #16]!
   1f1a0:	f007 fe9b 	bl	26eda <z_log_msg_static_create.constprop.0>
   1f1a4:	46ad      	mov	sp, r5
		return err;
   1f1a6:	e7b7      	b.n	1f118 <lte_lc_psm_get+0x5c>
		if (comma_ptr) {
   1f1a8:	2c00      	cmp	r4, #0
   1f1aa:	d1c3      	bne.n	1f134 <lte_lc_psm_get+0x78>
		LOG_ERR("AT command parsing failed");
   1f1ac:	4b13      	ldr	r3, [pc, #76]	; (1f1fc <lte_lc_psm_get+0x140>)
   1f1ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   1f1b4:	2302      	movs	r3, #2
   1f1b6:	480f      	ldr	r0, [pc, #60]	; (1f1f4 <lte_lc_psm_get+0x138>)
   1f1b8:	63bb      	str	r3, [r7, #56]	; 0x38
   1f1ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1f1be:	f007 fe8c 	bl	26eda <z_log_msg_static_create.constprop.0>
		return -EBADMSG;
   1f1c2:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   1f1c6:	e7a7      	b.n	1f118 <lte_lc_psm_get+0x5c>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   1f1c8:	1c81      	adds	r1, r0, #2
   1f1ca:	2208      	movs	r2, #8
   1f1cc:	f107 001c 	add.w	r0, r7, #28
   1f1d0:	f009 f9cd 	bl	2856e <strncpy>
   1f1d4:	e7cd      	b.n	1f172 <lte_lc_psm_get+0xb6>
	*tau = psm_cfg.tau;
   1f1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f1d8:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   1f1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f1dc:	602b      	str	r3, [r5, #0]
	return 0;
   1f1de:	e79b      	b.n	1f118 <lte_lc_psm_get+0x5c>
		return -EINVAL;
   1f1e0:	f06f 0415 	mvn.w	r4, #21
   1f1e4:	e798      	b.n	1f118 <lte_lc_psm_get+0x5c>
   1f1e6:	bf00      	nop
   1f1e8:	2000dd3f 	.word	0x2000dd3f
   1f1ec:	0002a41d 	.word	0x0002a41d
   1f1f0:	0002a42a 	.word	0x0002a42a
   1f1f4:	00028c78 	.word	0x00028c78
   1f1f8:	0002a461 	.word	0x0002a461
   1f1fc:	0002a447 	.word	0x0002a447

0001f200 <at_handler_cereg>:
{
   1f200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	enum lte_lc_nw_reg_status reg_status = 0;
   1f204:	2500      	movs	r5, #0
{
   1f206:	4604      	mov	r4, r0
   1f208:	b0aa      	sub	sp, #168	; 0xa8
   1f20a:	af02      	add	r7, sp, #8
	struct lte_lc_evt evt = {0};
   1f20c:	2248      	movs	r2, #72	; 0x48
   1f20e:	2100      	movs	r1, #0
   1f210:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1f214:	f009 f97c 	bl	28510 <memset>
	struct lte_lc_cell cell = {0};
   1f218:	2230      	movs	r2, #48	; 0x30
   1f21a:	4629      	mov	r1, r5
   1f21c:	f107 0028 	add.w	r0, r7, #40	; 0x28
	enum lte_lc_nw_reg_status reg_status = 0;
   1f220:	71bd      	strb	r5, [r7, #6]
	struct lte_lc_psm_cfg psm_cfg = {0};
   1f222:	f107 0808 	add.w	r8, r7, #8
	struct lte_lc_cell cell = {0};
   1f226:	f009 f973 	bl	28510 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1f22a:	1dfb      	adds	r3, r7, #7
	struct lte_lc_psm_cfg psm_cfg = {0};
   1f22c:	60bd      	str	r5, [r7, #8]
   1f22e:	f8c8 5004 	str.w	r5, [r8, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1f232:	2101      	movs	r1, #1
   1f234:	9300      	str	r3, [sp, #0]
   1f236:	4620      	mov	r0, r4
   1f238:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1f23c:	1dba      	adds	r2, r7, #6
   1f23e:	f000 fa95 	bl	1f76c <parse_cereg>
	if (err) {
   1f242:	b1b0      	cbz	r0, 1f272 <at_handler_cereg+0x72>
		LOG_ERR("Failed to parse notification (error %d): %s",
   1f244:	466d      	mov	r5, sp
   1f246:	b08a      	sub	sp, #40	; 0x28
   1f248:	aa02      	add	r2, sp, #8
   1f24a:	4b4e      	ldr	r3, [pc, #312]	; (1f384 <at_handler_cereg+0x184>)
   1f24c:	61d4      	str	r4, [r2, #28]
   1f24e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f252:	f240 3301 	movw	r3, #769	; 0x301
   1f256:	8413      	strh	r3, [r2, #32]
   1f258:	4b4b      	ldr	r3, [pc, #300]	; (1f388 <at_handler_cereg+0x188>)
   1f25a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f25e:	484b      	ldr	r0, [pc, #300]	; (1f38c <at_handler_cereg+0x18c>)
   1f260:	f842 3f10 	str.w	r3, [r2, #16]!
   1f264:	f007 fe39 	bl	26eda <z_log_msg_static_create.constprop.0>
   1f268:	46ad      	mov	sp, r5
}
   1f26a:	37a0      	adds	r7, #160	; 0xa0
   1f26c:	46bd      	mov	sp, r7
   1f26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1f272:	79bb      	ldrb	r3, [r7, #6]
   1f274:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1f278:	2b01      	cmp	r3, #1
   1f27a:	d104      	bne.n	1f286 <at_handler_cereg+0x86>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   1f27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f27e:	3301      	adds	r3, #1
   1f280:	d162      	bne.n	1f348 <at_handler_cereg+0x148>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   1f282:	2304      	movs	r3, #4
   1f284:	71bb      	strb	r3, [r7, #6]
	if (event_handler_list_is_empty()) {
   1f286:	f000 f919 	bl	1f4bc <event_handler_list_is_empty>
   1f28a:	2800      	cmp	r0, #0
   1f28c:	d1ed      	bne.n	1f26a <at_handler_cereg+0x6a>
	if (reg_status != prev_reg_status) {
   1f28e:	4a40      	ldr	r2, [pc, #256]	; (1f390 <at_handler_cereg+0x190>)
   1f290:	79bb      	ldrb	r3, [r7, #6]
   1f292:	7811      	ldrb	r1, [r2, #0]
   1f294:	4299      	cmp	r1, r3
   1f296:	d008      	beq.n	1f2aa <at_handler_cereg+0xaa>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1f298:	f887 0058 	strb.w	r0, [r7, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   1f29c:	f107 0058 	add.w	r0, r7, #88	; 0x58
		prev_reg_status = reg_status;
   1f2a0:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   1f2a2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   1f2a6:	f000 f911 	bl	1f4cc <event_handler_list_dispatch>
	if ((cell.id != prev_cell.id) || (cell.tac != prev_cell.tac)) {
   1f2aa:	4b3a      	ldr	r3, [pc, #232]	; (1f394 <at_handler_cereg+0x194>)
   1f2ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1f2ae:	689a      	ldr	r2, [r3, #8]
   1f2b0:	4291      	cmp	r1, r2
   1f2b2:	d103      	bne.n	1f2bc <at_handler_cereg+0xbc>
   1f2b4:	68db      	ldr	r3, [r3, #12]
   1f2b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1f2b8:	429a      	cmp	r2, r3
   1f2ba:	d01d      	beq.n	1f2f8 <at_handler_cereg+0xf8>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   1f2bc:	2304      	movs	r3, #4
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1f2be:	4d35      	ldr	r5, [pc, #212]	; (1f394 <at_handler_cereg+0x194>)
   1f2c0:	f107 0428 	add.w	r4, r7, #40	; 0x28
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   1f2c4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1f2c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f2ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f2cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f2ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f2d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1f2d4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   1f2d8:	f107 0660 	add.w	r6, r7, #96	; 0x60
   1f2dc:	f107 0528 	add.w	r5, r7, #40	; 0x28
   1f2e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f2e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1f2e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f2e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1f2e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1f2ec:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   1f2f0:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1f2f4:	f000 f8ea 	bl	1f4cc <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   1f2f8:	4a27      	ldr	r2, [pc, #156]	; (1f398 <at_handler_cereg+0x198>)
   1f2fa:	79fb      	ldrb	r3, [r7, #7]
   1f2fc:	7811      	ldrb	r1, [r2, #0]
   1f2fe:	4299      	cmp	r1, r3
   1f300:	d009      	beq.n	1f316 <at_handler_cereg+0x116>
		prev_lte_mode = lte_mode;
   1f302:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1f304:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   1f306:	f107 0058 	add.w	r0, r7, #88	; 0x58
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1f30a:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
		evt.lte_mode = lte_mode;
   1f30e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   1f312:	f000 f8db 	bl	1f4cc <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   1f316:	79bb      	ldrb	r3, [r7, #6]
   1f318:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1f31c:	2b01      	cmp	r3, #1
   1f31e:	d1a4      	bne.n	1f26a <at_handler_cereg+0x6a>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   1f320:	4640      	mov	r0, r8
   1f322:	f107 010c 	add.w	r1, r7, #12
   1f326:	f7ff fec9 	bl	1f0bc <lte_lc_psm_get>
	if (err) {
   1f32a:	b188      	cbz	r0, 1f350 <at_handler_cereg+0x150>
		if (err != -EBADMSG) {
   1f32c:	304d      	adds	r0, #77	; 0x4d
   1f32e:	d09c      	beq.n	1f26a <at_handler_cereg+0x6a>
			LOG_ERR("Failed to get PSM information");
   1f330:	4b1a      	ldr	r3, [pc, #104]	; (1f39c <at_handler_cereg+0x19c>)
   1f332:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f336:	627b      	str	r3, [r7, #36]	; 0x24
   1f338:	2302      	movs	r3, #2
   1f33a:	4814      	ldr	r0, [pc, #80]	; (1f38c <at_handler_cereg+0x18c>)
   1f33c:	623b      	str	r3, [r7, #32]
   1f33e:	f107 0220 	add.w	r2, r7, #32
   1f342:	f007 fdca 	bl	26eda <z_log_msg_static_create.constprop.0>
   1f346:	e790      	b.n	1f26a <at_handler_cereg+0x6a>
	z_impl_k_sem_give(sem);
   1f348:	4815      	ldr	r0, [pc, #84]	; (1f3a0 <at_handler_cereg+0x1a0>)
   1f34a:	f004 fce5 	bl	23d18 <z_impl_k_sem_give>
}
   1f34e:	e79a      	b.n	1f286 <at_handler_cereg+0x86>
	if ((psm_cfg.tau != prev_psm_cfg.tau) ||
   1f350:	4b14      	ldr	r3, [pc, #80]	; (1f3a4 <at_handler_cereg+0x1a4>)
   1f352:	68b9      	ldr	r1, [r7, #8]
   1f354:	681a      	ldr	r2, [r3, #0]
   1f356:	4291      	cmp	r1, r2
   1f358:	461a      	mov	r2, r3
   1f35a:	d103      	bne.n	1f364 <at_handler_cereg+0x164>
   1f35c:	685b      	ldr	r3, [r3, #4]
   1f35e:	68f9      	ldr	r1, [r7, #12]
   1f360:	4299      	cmp	r1, r3
   1f362:	d082      	beq.n	1f26a <at_handler_cereg+0x6a>
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f364:	e898 0003 	ldmia.w	r8, {r0, r1}
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   1f368:	2301      	movs	r3, #1
   1f36a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f36e:	f107 0360 	add.w	r3, r7, #96	; 0x60
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f372:	e882 0003 	stmia.w	r2, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f376:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   1f37a:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1f37e:	f000 f8a5 	bl	1f4cc <event_handler_list_dispatch>
   1f382:	e772      	b.n	1f26a <at_handler_cereg+0x6a>
   1f384:	0002a48e 	.word	0x0002a48e
   1f388:	01000004 	.word	0x01000004
   1f38c:	00028c78 	.word	0x00028c78
   1f390:	2000dde0 	.word	0x2000dde0
   1f394:	2000ce58 	.word	0x2000ce58
   1f398:	2000dddf 	.word	0x2000dddf
   1f39c:	0002a4ba 	.word	0x0002a4ba
   1f3a0:	2000d3e4 	.word	0x2000d3e4
   1f3a4:	2000d3dc 	.word	0x2000d3dc

0001f3a8 <lte_lc_func_mode_set>:

	return 0;
}

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   1f3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	switch (mode) {
   1f3ac:	2804      	cmp	r0, #4
{
   1f3ae:	b086      	sub	sp, #24
   1f3b0:	4604      	mov	r4, r0
   1f3b2:	af00      	add	r7, sp, #0
	switch (mode) {
   1f3b4:	d826      	bhi.n	1f404 <lte_lc_func_mode_set+0x5c>
   1f3b6:	2804      	cmp	r0, #4
   1f3b8:	d829      	bhi.n	1f40e <lte_lc_func_mode_set+0x66>
   1f3ba:	e8df f000 	tbb	[pc, r0]
   1f3be:	0a3a      	.short	0x0a3a
   1f3c0:	283a      	.short	0x283a
   1f3c2:	3a          	.byte	0x3a
   1f3c3:	00          	.byte	0x00
   1f3c4:	2201      	movs	r2, #1
   1f3c6:	492a      	ldr	r1, [pc, #168]	; (1f470 <lte_lc_func_mode_set+0xc8>)
   1f3c8:	409a      	lsls	r2, r3
   1f3ca:	420a      	tst	r2, r1
   1f3cc:	d131      	bne.n	1f432 <lte_lc_func_mode_set+0x8a>
   1f3ce:	2b01      	cmp	r3, #1
   1f3d0:	d11d      	bne.n	1f40e <lte_lc_func_mode_set+0x66>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   1f3d2:	f7ff fc35 	bl	1ec40 <enable_notifications>
		if (err) {
   1f3d6:	b360      	cbz	r0, 1f432 <lte_lc_func_mode_set+0x8a>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   1f3d8:	466c      	mov	r4, sp
   1f3da:	b088      	sub	sp, #32
   1f3dc:	466a      	mov	r2, sp
   1f3de:	4b25      	ldr	r3, [pc, #148]	; (1f474 <lte_lc_func_mode_set+0xcc>)
   1f3e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f3e4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f3e8:	2303      	movs	r3, #3
   1f3ea:	4823      	ldr	r0, [pc, #140]	; (1f478 <lte_lc_func_mode_set+0xd0>)
   1f3ec:	f842 3f10 	str.w	r3, [r2, #16]!
   1f3f0:	f007 fd73 	bl	26eda <z_log_msg_static_create.constprop.0>
   1f3f4:	46a5      	mov	sp, r4
			return -EFAULT;
   1f3f6:	f06f 050d 	mvn.w	r5, #13
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   1f3fa:	4628      	mov	r0, r5
   1f3fc:	3718      	adds	r7, #24
   1f3fe:	46bd      	mov	sp, r7
   1f400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (mode) {
   1f404:	f1a0 0314 	sub.w	r3, r0, #20
   1f408:	b2db      	uxtb	r3, r3
   1f40a:	2b18      	cmp	r3, #24
   1f40c:	d9da      	bls.n	1f3c4 <lte_lc_func_mode_set+0x1c>
		LOG_ERR("Invalid functional mode: %d", mode);
   1f40e:	466d      	mov	r5, sp
   1f410:	b088      	sub	sp, #32
   1f412:	466a      	mov	r2, sp
   1f414:	4b19      	ldr	r3, [pc, #100]	; (1f47c <lte_lc_func_mode_set+0xd4>)
   1f416:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f41a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f41e:	2303      	movs	r3, #3
   1f420:	4815      	ldr	r0, [pc, #84]	; (1f478 <lte_lc_func_mode_set+0xd0>)
   1f422:	f842 3f10 	str.w	r3, [r2, #16]!
   1f426:	f007 fd58 	bl	26eda <z_log_msg_static_create.constprop.0>
   1f42a:	46ad      	mov	sp, r5
		return -EINVAL;
   1f42c:	f06f 0515 	mvn.w	r5, #21
   1f430:	e7e3      	b.n	1f3fa <lte_lc_func_mode_set+0x52>
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   1f432:	4621      	mov	r1, r4
   1f434:	4812      	ldr	r0, [pc, #72]	; (1f480 <lte_lc_func_mode_set+0xd8>)
   1f436:	f003 fe37 	bl	230a8 <nrf_modem_at_printf>
	if (err) {
   1f43a:	4605      	mov	r5, r0
   1f43c:	b198      	cbz	r0, 1f466 <lte_lc_func_mode_set+0xbe>
		LOG_ERR("Failed to set functional mode. Please check XSYSTEMMODE.");
   1f43e:	4b11      	ldr	r3, [pc, #68]	; (1f484 <lte_lc_func_mode_set+0xdc>)
   1f440:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f444:	617b      	str	r3, [r7, #20]
   1f446:	2302      	movs	r3, #2
   1f448:	480b      	ldr	r0, [pc, #44]	; (1f478 <lte_lc_func_mode_set+0xd0>)
   1f44a:	613b      	str	r3, [r7, #16]
   1f44c:	f107 0210 	add.w	r2, r7, #16
   1f450:	f007 fd43 	bl	26eda <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1f454:	e7cf      	b.n	1f3f6 <lte_lc_func_mode_set+0x4e>
		e->callback(mode, e->context);
   1f456:	e9d6 3100 	ldrd	r3, r1, [r6]
   1f45a:	4620      	mov	r0, r4
   1f45c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   1f45e:	3608      	adds	r6, #8
   1f460:	4546      	cmp	r6, r8
   1f462:	d3f8      	bcc.n	1f456 <lte_lc_func_mode_set+0xae>
   1f464:	e7c9      	b.n	1f3fa <lte_lc_func_mode_set+0x52>
   1f466:	4e08      	ldr	r6, [pc, #32]	; (1f488 <lte_lc_func_mode_set+0xe0>)
   1f468:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1f48c <lte_lc_func_mode_set+0xe4>
   1f46c:	e7f8      	b.n	1f460 <lte_lc_func_mode_set+0xb8>
   1f46e:	bf00      	nop
   1f470:	01300c01 	.word	0x01300c01
   1f474:	0002a4d8 	.word	0x0002a4d8
   1f478:	00028c78 	.word	0x00028c78
   1f47c:	0002a502 	.word	0x0002a502
   1f480:	0002a51e 	.word	0x0002a51e
   1f484:	0002a529 	.word	0x0002a529
   1f488:	0002b30c 	.word	0x0002b30c
   1f48c:	0002b30c 	.word	0x0002b30c

0001f490 <lte_lc_deinit>:
{
   1f490:	b508      	push	{r3, lr}
	if (is_initialized) {
   1f492:	4b06      	ldr	r3, [pc, #24]	; (1f4ac <lte_lc_deinit+0x1c>)
   1f494:	781a      	ldrb	r2, [r3, #0]
   1f496:	b122      	cbz	r2, 1f4a2 <lte_lc_deinit+0x12>
		is_initialized = false;
   1f498:	2000      	movs	r0, #0
   1f49a:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   1f49c:	f7ff ff84 	bl	1f3a8 <lte_lc_func_mode_set>
   1f4a0:	b908      	cbnz	r0, 1f4a6 <lte_lc_deinit+0x16>
   1f4a2:	2000      	movs	r0, #0
}
   1f4a4:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   1f4a6:	f06f 000d 	mvn.w	r0, #13
   1f4aa:	e7fb      	b.n	1f4a4 <lte_lc_deinit+0x14>
   1f4ac:	2000dde4 	.word	0x2000dde4

0001f4b0 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1f4b0:	4801      	ldr	r0, [pc, #4]	; (1f4b8 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1f4b2:	f004 bbc1 	b.w	23c38 <z_impl_k_mutex_unlock>
   1f4b6:	bf00      	nop
   1f4b8:	2000c88c 	.word	0x2000c88c

0001f4bc <event_handler_list_is_empty>:
	return list->head;
   1f4bc:	4b02      	ldr	r3, [pc, #8]	; (1f4c8 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   1f4be:	6818      	ldr	r0, [r3, #0]
}
   1f4c0:	fab0 f080 	clz	r0, r0
   1f4c4:	0940      	lsrs	r0, r0, #5
   1f4c6:	4770      	bx	lr
   1f4c8:	2000d3fc 	.word	0x2000d3fc

0001f4cc <event_handler_list_dispatch>:
{
   1f4cc:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1f4ce:	4c0f      	ldr	r4, [pc, #60]	; (1f50c <event_handler_list_dispatch+0x40>)
   1f4d0:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   1f4d2:	6823      	ldr	r3, [r4, #0]
   1f4d4:	b1c3      	cbz	r3, 1f508 <event_handler_list_dispatch+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   1f4d6:	f04f 33ff 	mov.w	r3, #4294967295
   1f4da:	f04f 32ff 	mov.w	r2, #4294967295
   1f4de:	480c      	ldr	r0, [pc, #48]	; (1f510 <event_handler_list_dispatch+0x44>)
   1f4e0:	f004 fb30 	bl	23b44 <z_impl_k_mutex_lock>
   1f4e4:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1f4e6:	b10b      	cbz	r3, 1f4ec <event_handler_list_dispatch+0x20>
	return node->next;
   1f4e8:	681c      	ldr	r4, [r3, #0]
   1f4ea:	b91b      	cbnz	r3, 1f4f4 <event_handler_list_dispatch+0x28>
}
   1f4ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   1f4f0:	f7ff bfde 	b.w	1f4b0 <k_mutex_unlock.constprop.0.isra.0>
		curr->handler(evt);
   1f4f4:	4628      	mov	r0, r5
   1f4f6:	685b      	ldr	r3, [r3, #4]
   1f4f8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1f4fa:	b11c      	cbz	r4, 1f504 <event_handler_list_dispatch+0x38>
   1f4fc:	6822      	ldr	r2, [r4, #0]
   1f4fe:	4623      	mov	r3, r4
   1f500:	4614      	mov	r4, r2
   1f502:	e7f2      	b.n	1f4ea <event_handler_list_dispatch+0x1e>
   1f504:	4622      	mov	r2, r4
   1f506:	e7fa      	b.n	1f4fe <event_handler_list_dispatch+0x32>
}
   1f508:	bd38      	pop	{r3, r4, r5, pc}
   1f50a:	bf00      	nop
   1f50c:	2000d3fc 	.word	0x2000d3fc
   1f510:	2000c88c 	.word	0x2000c88c

0001f514 <response_is_valid>:
{
   1f514:	b570      	push	{r4, r5, r6, lr}
   1f516:	460e      	mov	r6, r1
   1f518:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   1f51a:	4605      	mov	r5, r0
{
   1f51c:	b086      	sub	sp, #24
	if ((response == NULL) || (check == NULL)) {
   1f51e:	b100      	cbz	r0, 1f522 <response_is_valid+0xe>
   1f520:	b962      	cbnz	r2, 1f53c <response_is_valid+0x28>
		LOG_ERR("Invalid pointer provided");
   1f522:	4b0d      	ldr	r3, [pc, #52]	; (1f558 <response_is_valid+0x44>)
   1f524:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f528:	9305      	str	r3, [sp, #20]
   1f52a:	2302      	movs	r3, #2
   1f52c:	480b      	ldr	r0, [pc, #44]	; (1f55c <response_is_valid+0x48>)
   1f52e:	aa04      	add	r2, sp, #16
   1f530:	9304      	str	r3, [sp, #16]
   1f532:	f007 fcd5 	bl	26ee0 <z_log_msg_static_create.constprop.0>
		return false;
   1f536:	2000      	movs	r0, #0
}
   1f538:	b006      	add	sp, #24
   1f53a:	bd70      	pop	{r4, r5, r6, pc}
	if ((response_len < strlen(check)) ||
   1f53c:	4610      	mov	r0, r2
   1f53e:	f7f9 fd55 	bl	18fec <strlen>
   1f542:	42b0      	cmp	r0, r6
   1f544:	d8f7      	bhi.n	1f536 <response_is_valid+0x22>
	    (memcmp(response, check, response_len) != 0)) {
   1f546:	4632      	mov	r2, r6
   1f548:	4621      	mov	r1, r4
   1f54a:	4628      	mov	r0, r5
   1f54c:	f008 ffc3 	bl	284d6 <memcmp>
	if ((response_len < strlen(check)) ||
   1f550:	fab0 f080 	clz	r0, r0
   1f554:	0940      	lsrs	r0, r0, #5
   1f556:	e7ef      	b.n	1f538 <response_is_valid+0x24>
   1f558:	0002a5e1 	.word	0x0002a5e1
   1f55c:	00028c80 	.word	0x00028c80

0001f560 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   1f560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   1f564:	f04f 0900 	mov.w	r9, #0
{
   1f568:	b089      	sub	sp, #36	; 0x24
   1f56a:	4607      	mov	r7, r0
   1f56c:	460e      	mov	r6, r1
   1f56e:	4614      	mov	r4, r2
   1f570:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   1f572:	f8cd 9004 	str.w	r9, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   1f576:	f7f9 fd39 	bl	18fec <strlen>
   1f57a:	2808      	cmp	r0, #8
   1f57c:	d11b      	bne.n	1f5b6 <parse_psm+0x56>
   1f57e:	4630      	mov	r0, r6
   1f580:	f7f9 fd34 	bl	18fec <strlen>
   1f584:	2808      	cmp	r0, #8
   1f586:	d116      	bne.n	1f5b6 <parse_psm+0x56>
		return -EINVAL;
	}

	/* Parse T3412-extended (periodic TAU) timer */
	memcpy(unit_str, tau_ext_str, unit_str_len);
   1f588:	8832      	ldrh	r2, [r6, #0]
   1f58a:	78b3      	ldrb	r3, [r6, #2]
   1f58c:	f8ad 2004 	strh.w	r2, [sp, #4]

	lut_idx = strtoul(unit_str, NULL, 2);
   1f590:	4649      	mov	r1, r9
   1f592:	2202      	movs	r2, #2
   1f594:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   1f596:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   1f59a:	f005 fd65 	bl	25068 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   1f59e:	2807      	cmp	r0, #7
   1f5a0:	d90e      	bls.n	1f5c0 <parse_psm+0x60>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   1f5a2:	4b32      	ldr	r3, [pc, #200]	; (1f66c <parse_psm+0x10c>)
   1f5a4:	9307      	str	r3, [sp, #28]
   1f5a6:	2302      	movs	r3, #2
   1f5a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f5ac:	4830      	ldr	r0, [pc, #192]	; (1f670 <parse_psm+0x110>)
   1f5ae:	aa06      	add	r2, sp, #24
   1f5b0:	9306      	str	r3, [sp, #24]
   1f5b2:	f007 fc95 	bl	26ee0 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1f5b6:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   1f5ba:	b009      	add	sp, #36	; 0x24
   1f5bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	timer_unit = t3412_ext_lookup[lut_idx];
   1f5c0:	4b2c      	ldr	r3, [pc, #176]	; (1f674 <parse_psm+0x114>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   1f5c2:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   1f5c4:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   1f5c8:	4649      	mov	r1, r9
   1f5ca:	1cf0      	adds	r0, r6, #3
   1f5cc:	f005 fd4c 	bl	25068 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1f5d0:	f1b8 0f00 	cmp.w	r8, #0
   1f5d4:	d117      	bne.n	1f606 <parse_psm+0xa6>
   1f5d6:	f04f 33ff 	mov.w	r3, #4294967295
   1f5da:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   1f5dc:	b1c4      	cbz	r4, 1f610 <parse_psm+0xb0>
   1f5de:	4620      	mov	r0, r4
   1f5e0:	f7f9 fd04 	bl	18fec <strlen>
   1f5e4:	2808      	cmp	r0, #8
   1f5e6:	d113      	bne.n	1f610 <parse_psm+0xb0>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   1f5e8:	8822      	ldrh	r2, [r4, #0]
   1f5ea:	78a3      	ldrb	r3, [r4, #2]
   1f5ec:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   1f5f0:	2100      	movs	r1, #0
   1f5f2:	2202      	movs	r2, #2
   1f5f4:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   1f5f6:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   1f5fa:	f005 fd35 	bl	25068 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   1f5fe:	2807      	cmp	r0, #7
   1f600:	d915      	bls.n	1f62e <parse_psm+0xce>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   1f602:	4b1d      	ldr	r3, [pc, #116]	; (1f678 <parse_psm+0x118>)
   1f604:	e7ce      	b.n	1f5a4 <parse_psm+0x44>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1f606:	fb00 f008 	mul.w	r0, r0, r8
   1f60a:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   1f60c:	3001      	adds	r0, #1
   1f60e:	d0e5      	beq.n	1f5dc <parse_psm+0x7c>
	memcpy(unit_str, active_time_str, unit_str_len);
   1f610:	883a      	ldrh	r2, [r7, #0]
   1f612:	78bb      	ldrb	r3, [r7, #2]
   1f614:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   1f618:	2100      	movs	r1, #0
   1f61a:	2202      	movs	r2, #2
   1f61c:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   1f61e:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   1f622:	f005 fd21 	bl	25068 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   1f626:	2807      	cmp	r0, #7
   1f628:	d910      	bls.n	1f64c <parse_psm+0xec>
		LOG_ERR("Unable to parse active time string");
   1f62a:	4b14      	ldr	r3, [pc, #80]	; (1f67c <parse_psm+0x11c>)
   1f62c:	e7ba      	b.n	1f5a4 <parse_psm+0x44>
		timer_unit = t3412_lookup[lut_idx];
   1f62e:	4b14      	ldr	r3, [pc, #80]	; (1f680 <parse_psm+0x120>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   1f630:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   1f632:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   1f636:	2100      	movs	r1, #0
   1f638:	1ce0      	adds	r0, r4, #3
   1f63a:	f005 fd15 	bl	25068 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1f63e:	b116      	cbz	r6, 1f646 <parse_psm+0xe6>
   1f640:	4370      	muls	r0, r6
   1f642:	6028      	str	r0, [r5, #0]
   1f644:	e7e4      	b.n	1f610 <parse_psm+0xb0>
   1f646:	f04f 30ff 	mov.w	r0, #4294967295
   1f64a:	e7fa      	b.n	1f642 <parse_psm+0xe2>
	timer_unit = t3324_lookup[lut_idx];
   1f64c:	4b0d      	ldr	r3, [pc, #52]	; (1f684 <parse_psm+0x124>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   1f64e:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   1f650:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   1f654:	2100      	movs	r1, #0
   1f656:	1cf8      	adds	r0, r7, #3
   1f658:	f005 fd06 	bl	25068 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1f65c:	b11c      	cbz	r4, 1f666 <parse_psm+0x106>
   1f65e:	4360      	muls	r0, r4
   1f660:	6068      	str	r0, [r5, #4]
	return 0;
   1f662:	2000      	movs	r0, #0
   1f664:	e7a9      	b.n	1f5ba <parse_psm+0x5a>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1f666:	f04f 30ff 	mov.w	r0, #4294967295
   1f66a:	e7f9      	b.n	1f660 <parse_psm+0x100>
   1f66c:	0002a731 	.word	0x0002a731
   1f670:	00028c80 	.word	0x00028c80
   1f674:	00029048 	.word	0x00029048
   1f678:	0002a766 	.word	0x0002a766
   1f67c:	0002a792 	.word	0x0002a792
   1f680:	00029028 	.word	0x00029028
   1f684:	00029028 	.word	0x00029028

0001f688 <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   1f688:	2300      	movs	r3, #0
{
   1f68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f68e:	b084      	sub	sp, #16
   1f690:	af00      	add	r7, sp, #0
   1f692:	4680      	mov	r8, r0
   1f694:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1f696:	f107 0008 	add.w	r0, r7, #8
   1f69a:	2104      	movs	r1, #4
{
   1f69c:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   1f69e:	e9c7 3302 	strd	r3, r3, [r7, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1f6a2:	f007 fadd 	bl	26c60 <at_params_list_init>
	if (err) {
   1f6a6:	4604      	mov	r4, r0
   1f6a8:	b198      	cbz	r0, 1f6d2 <parse_rrc_mode+0x4a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1f6aa:	466d      	mov	r5, sp
   1f6ac:	b088      	sub	sp, #32
   1f6ae:	466a      	mov	r2, sp
   1f6b0:	4b29      	ldr	r3, [pc, #164]	; (1f758 <parse_rrc_mode+0xd0>)
   1f6b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f6b6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f6ba:	2303      	movs	r3, #3
   1f6bc:	4827      	ldr	r0, [pc, #156]	; (1f75c <parse_rrc_mode+0xd4>)
   1f6be:	f842 3f10 	str.w	r3, [r2, #16]!
   1f6c2:	f007 fc0d 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   1f6c6:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1f6c8:	4620      	mov	r0, r4
   1f6ca:	3710      	adds	r7, #16
   1f6cc:	46bd      	mov	sp, r7
   1f6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
   1f6d2:	4601      	mov	r1, r0
   1f6d4:	f107 0208 	add.w	r2, r7, #8
   1f6d8:	4640      	mov	r0, r8
   1f6da:	f007 faa8 	bl	26c2e <at_parser_params_from_str>
	if (err) {
   1f6de:	4604      	mov	r4, r0
   1f6e0:	b198      	cbz	r0, 1f70a <parse_rrc_mode+0x82>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   1f6e2:	466d      	mov	r5, sp
   1f6e4:	b088      	sub	sp, #32
   1f6e6:	466a      	mov	r2, sp
   1f6e8:	4b1d      	ldr	r3, [pc, #116]	; (1f760 <parse_rrc_mode+0xd8>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1f6ea:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f6ee:	2303      	movs	r3, #3
   1f6f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f6f4:	4819      	ldr	r0, [pc, #100]	; (1f75c <parse_rrc_mode+0xd4>)
   1f6f6:	f842 3f10 	str.w	r3, [r2, #16]!
   1f6fa:	f007 fbf1 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   1f6fe:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1f700:	f107 0008 	add.w	r0, r7, #8
   1f704:	f007 fad6 	bl	26cb4 <at_params_list_free>
	return err;
   1f708:	e7de      	b.n	1f6c8 <parse_rrc_mode+0x40>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   1f70a:	4631      	mov	r1, r6
   1f70c:	1d3a      	adds	r2, r7, #4
   1f70e:	f107 0008 	add.w	r0, r7, #8
   1f712:	f007 fb81 	bl	26e18 <at_params_int_get>
	if (err) {
   1f716:	4604      	mov	r4, r0
   1f718:	b120      	cbz	r0, 1f724 <parse_rrc_mode+0x9c>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1f71a:	466d      	mov	r5, sp
   1f71c:	b088      	sub	sp, #32
   1f71e:	466a      	mov	r2, sp
   1f720:	4b10      	ldr	r3, [pc, #64]	; (1f764 <parse_rrc_mode+0xdc>)
   1f722:	e7e2      	b.n	1f6ea <parse_rrc_mode+0x62>
	if (temp_mode == 0) {
   1f724:	687b      	ldr	r3, [r7, #4]
   1f726:	b11b      	cbz	r3, 1f730 <parse_rrc_mode+0xa8>
	} else if (temp_mode == 1) {
   1f728:	2b01      	cmp	r3, #1
   1f72a:	d103      	bne.n	1f734 <parse_rrc_mode+0xac>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   1f72c:	702b      	strb	r3, [r5, #0]
   1f72e:	e7e7      	b.n	1f700 <parse_rrc_mode+0x78>
   1f730:	4603      	mov	r3, r0
   1f732:	e7fb      	b.n	1f72c <parse_rrc_mode+0xa4>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   1f734:	466c      	mov	r4, sp
   1f736:	b088      	sub	sp, #32
   1f738:	466a      	mov	r2, sp
   1f73a:	490b      	ldr	r1, [pc, #44]	; (1f768 <parse_rrc_mode+0xe0>)
   1f73c:	4807      	ldr	r0, [pc, #28]	; (1f75c <parse_rrc_mode+0xd4>)
   1f73e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1f742:	2303      	movs	r3, #3
   1f744:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f748:	f842 3f10 	str.w	r3, [r2, #16]!
   1f74c:	f007 fbc8 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   1f750:	46a5      	mov	sp, r4
		err = -EINVAL;
   1f752:	f06f 0415 	mvn.w	r4, #21
   1f756:	e7d3      	b.n	1f700 <parse_rrc_mode+0x78>
   1f758:	0002a5fa 	.word	0x0002a5fa
   1f75c:	00028c80 	.word	0x00028c80
   1f760:	0002a7b5 	.word	0x0002a7b5
   1f764:	0002a7e0 	.word	0x0002a7e0
   1f768:	0002a809 	.word	0x0002a809

0001f76c <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   1f76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f770:	461d      	mov	r5, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   1f772:	2300      	movs	r3, #0
{
   1f774:	b08a      	sub	sp, #40	; 0x28
   1f776:	af00      	add	r7, sp, #0
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   1f778:	60fb      	str	r3, [r7, #12]
   1f77a:	823b      	strh	r3, [r7, #16]
   1f77c:	74bb      	strb	r3, [r7, #18]
{
   1f77e:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   1f780:	2309      	movs	r3, #9
   1f782:	2207      	movs	r2, #7
{
   1f784:	4680      	mov	r8, r0
   1f786:	4689      	mov	r9, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1f788:	f107 0014 	add.w	r0, r7, #20
   1f78c:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   1f78e:	e9c7 2300 	strd	r2, r3, [r7]
{
   1f792:	f8d7 a048 	ldr.w	sl, [r7, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1f796:	f007 fa63 	bl	26c60 <at_params_list_init>
	if (err) {
   1f79a:	4604      	mov	r4, r0
   1f79c:	b198      	cbz	r0, 1f7c6 <parse_cereg+0x5a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1f79e:	466d      	mov	r5, sp
   1f7a0:	b088      	sub	sp, #32
   1f7a2:	466a      	mov	r2, sp
   1f7a4:	4b77      	ldr	r3, [pc, #476]	; (1f984 <parse_cereg+0x218>)
   1f7a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f7aa:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f7ae:	2303      	movs	r3, #3
   1f7b0:	4875      	ldr	r0, [pc, #468]	; (1f988 <parse_cereg+0x21c>)
   1f7b2:	f842 3f10 	str.w	r3, [r2, #16]!
   1f7b6:	f007 fb93 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   1f7ba:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1f7bc:	4620      	mov	r0, r4
   1f7be:	3728      	adds	r7, #40	; 0x28
   1f7c0:	46bd      	mov	sp, r7
   1f7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   1f7c6:	4601      	mov	r1, r0
   1f7c8:	f107 0214 	add.w	r2, r7, #20
   1f7cc:	4640      	mov	r0, r8
   1f7ce:	f007 fa2e 	bl	26c2e <at_parser_params_from_str>
	if (err) {
   1f7d2:	4604      	mov	r4, r0
   1f7d4:	b198      	cbz	r0, 1f7fe <parse_cereg+0x92>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   1f7d6:	466d      	mov	r5, sp
   1f7d8:	b088      	sub	sp, #32
   1f7da:	466a      	mov	r2, sp
   1f7dc:	4b6b      	ldr	r3, [pc, #428]	; (1f98c <parse_cereg+0x220>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   1f7de:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f7e2:	2303      	movs	r3, #3
   1f7e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f7e8:	4867      	ldr	r0, [pc, #412]	; (1f988 <parse_cereg+0x21c>)
   1f7ea:	f842 3f10 	str.w	r3, [r2, #16]!
   1f7ee:	f007 fb77 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   1f7f2:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1f7f4:	f107 0014 	add.w	r0, r7, #20
   1f7f8:	f007 fa5c 	bl	26cb4 <at_params_list_free>
	return err;
   1f7fc:	e7de      	b.n	1f7bc <parse_cereg+0x50>
	err = at_params_string_get(&resp_list,
   1f7fe:	4601      	mov	r1, r0
   1f800:	463b      	mov	r3, r7
   1f802:	f107 020c 	add.w	r2, r7, #12
   1f806:	f107 0014 	add.w	r0, r7, #20
   1f80a:	f007 fb31 	bl	26e70 <at_params_string_get>
	if (err) {
   1f80e:	4604      	mov	r4, r0
   1f810:	b120      	cbz	r0, 1f81c <parse_cereg+0xb0>
		LOG_ERR("Could not get response prefix, error: %d", err);
   1f812:	466d      	mov	r5, sp
   1f814:	b088      	sub	sp, #32
   1f816:	466a      	mov	r2, sp
   1f818:	4b5d      	ldr	r3, [pc, #372]	; (1f990 <parse_cereg+0x224>)
   1f81a:	e7e0      	b.n	1f7de <parse_cereg+0x72>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1f81c:	4a5d      	ldr	r2, [pc, #372]	; (1f994 <parse_cereg+0x228>)
   1f81e:	6839      	ldr	r1, [r7, #0]
   1f820:	f107 000c 	add.w	r0, r7, #12
   1f824:	f7ff fe76 	bl	1f514 <response_is_valid>
   1f828:	2800      	cmp	r0, #0
   1f82a:	d0e3      	beq.n	1f7f4 <parse_cereg+0x88>
	err = at_params_int_get(list, reg_status_index, &reg_status);
   1f82c:	f107 021c 	add.w	r2, r7, #28
   1f830:	f1c9 0102 	rsb	r1, r9, #2
   1f834:	f107 0014 	add.w	r0, r7, #20
   1f838:	f007 faee 	bl	26e18 <at_params_int_get>
	if (err) {
   1f83c:	f1b0 0800 	subs.w	r8, r0, #0
   1f840:	d165      	bne.n	1f90e <parse_cereg+0x1a2>
	switch (reg_status) {
   1f842:	69fb      	ldr	r3, [r7, #28]
   1f844:	2b08      	cmp	r3, #8
   1f846:	d03b      	beq.n	1f8c0 <parse_cereg+0x154>
   1f848:	dc23      	bgt.n	1f892 <parse_cereg+0x126>
   1f84a:	2b05      	cmp	r3, #5
   1f84c:	d938      	bls.n	1f8c0 <parse_cereg+0x154>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   1f84e:	466c      	mov	r4, sp
   1f850:	b088      	sub	sp, #32
   1f852:	466a      	mov	r2, sp
   1f854:	4950      	ldr	r1, [pc, #320]	; (1f998 <parse_cereg+0x22c>)
   1f856:	484c      	ldr	r0, [pc, #304]	; (1f988 <parse_cereg+0x21c>)
   1f858:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1f85c:	2303      	movs	r3, #3
   1f85e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f862:	f842 3f10 	str.w	r3, [r2, #16]!
   1f866:	f007 fb3b 	bl	26ee0 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1f86a:	f06f 0815 	mvn.w	r8, #21
   1f86e:	46a5      	mov	sp, r4
		LOG_ERR("Could not get registration status, error: %d", status);
   1f870:	466c      	mov	r4, sp
   1f872:	b088      	sub	sp, #32
   1f874:	466a      	mov	r2, sp
   1f876:	4b49      	ldr	r3, [pc, #292]	; (1f99c <parse_cereg+0x230>)
   1f878:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f87c:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1f880:	2303      	movs	r3, #3
   1f882:	4841      	ldr	r0, [pc, #260]	; (1f988 <parse_cereg+0x21c>)
   1f884:	f842 3f10 	str.w	r3, [r2, #16]!
   1f888:	f007 fb2a 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   1f88c:	46a5      	mov	sp, r4
		goto clean_exit;
   1f88e:	4644      	mov	r4, r8
   1f890:	e7b0      	b.n	1f7f4 <parse_cereg+0x88>
	switch (reg_status) {
   1f892:	2b5a      	cmp	r3, #90	; 0x5a
   1f894:	d1db      	bne.n	1f84e <parse_cereg+0xe2>
	if (reg_status) {
   1f896:	b106      	cbz	r6, 1f89a <parse_cereg+0x12e>
		*reg_status = status;
   1f898:	7033      	strb	r3, [r6, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1f89a:	2d00      	cmp	r5, #0
   1f89c:	d140      	bne.n	1f920 <parse_cereg+0x1b4>
	if (lte_mode) {
   1f89e:	f1ba 0f00 	cmp.w	sl, #0
   1f8a2:	d0a7      	beq.n	1f7f4 <parse_cereg+0x88>
		err = at_params_int_get(&resp_list,
   1f8a4:	f107 0208 	add.w	r2, r7, #8
   1f8a8:	f1c9 0105 	rsb	r1, r9, #5
   1f8ac:	f107 0014 	add.w	r0, r7, #20
   1f8b0:	f007 fab2 	bl	26e18 <at_params_int_get>
		if (err) {
   1f8b4:	2800      	cmp	r0, #0
   1f8b6:	d163      	bne.n	1f980 <parse_cereg+0x214>
			*lte_mode = mode;
   1f8b8:	7a3b      	ldrb	r3, [r7, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   1f8ba:	f88a 3000 	strb.w	r3, [sl]
   1f8be:	e799      	b.n	1f7f4 <parse_cereg+0x88>
	if (reg_status) {
   1f8c0:	bb1e      	cbnz	r6, 1f90a <parse_cereg+0x19e>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1f8c2:	2d00      	cmp	r5, #0
   1f8c4:	d0eb      	beq.n	1f89e <parse_cereg+0x132>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   1f8c6:	f107 0014 	add.w	r0, r7, #20
   1f8ca:	f007 faf1 	bl	26eb0 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1f8ce:	2803      	cmp	r0, #3
   1f8d0:	d926      	bls.n	1f920 <parse_cereg+0x1b4>
		err = at_params_string_get(
   1f8d2:	1d3b      	adds	r3, r7, #4
   1f8d4:	f107 021c 	add.w	r2, r7, #28
   1f8d8:	f1c9 0103 	rsb	r1, r9, #3
   1f8dc:	f107 0014 	add.w	r0, r7, #20
   1f8e0:	f007 fac6 	bl	26e70 <at_params_string_get>
		if (err) {
   1f8e4:	4606      	mov	r6, r0
   1f8e6:	b300      	cbz	r0, 1f92a <parse_cereg+0x1be>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   1f8e8:	466c      	mov	r4, sp
   1f8ea:	b088      	sub	sp, #32
   1f8ec:	466a      	mov	r2, sp
   1f8ee:	4b2c      	ldr	r3, [pc, #176]	; (1f9a0 <parse_cereg+0x234>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   1f8f0:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1f8f4:	2303      	movs	r3, #3
   1f8f6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f8fa:	4823      	ldr	r0, [pc, #140]	; (1f988 <parse_cereg+0x21c>)
   1f8fc:	f842 3f10 	str.w	r3, [r2, #16]!
   1f900:	f007 faee 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   1f904:	46a5      	mov	sp, r4
			goto clean_exit;
   1f906:	4634      	mov	r4, r6
   1f908:	e774      	b.n	1f7f4 <parse_cereg+0x88>
		*reg_status = status;
   1f90a:	7033      	strb	r3, [r6, #0]
   1f90c:	e7d9      	b.n	1f8c2 <parse_cereg+0x156>
	if (status < 0) {
   1f90e:	dbaf      	blt.n	1f870 <parse_cereg+0x104>
	if (reg_status) {
   1f910:	b10e      	cbz	r6, 1f916 <parse_cereg+0x1aa>
		*reg_status = status;
   1f912:	f886 8000 	strb.w	r8, [r6]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1f916:	2d00      	cmp	r5, #0
   1f918:	d0c1      	beq.n	1f89e <parse_cereg+0x132>
   1f91a:	f1b8 0f5a 	cmp.w	r8, #90	; 0x5a
   1f91e:	d1d2      	bne.n	1f8c6 <parse_cereg+0x15a>
		cell->tac = UINT32_MAX;
   1f920:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1f924:	e9c5 3302 	strd	r3, r3, [r5, #8]
   1f928:	e7b9      	b.n	1f89e <parse_cereg+0x132>
		str_buf[len] = '\0';
   1f92a:	687b      	ldr	r3, [r7, #4]
		cell->tac = strtoul(str_buf, NULL, 16);
   1f92c:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   1f92e:	3328      	adds	r3, #40	; 0x28
   1f930:	443b      	add	r3, r7
   1f932:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   1f936:	2210      	movs	r2, #16
   1f938:	f107 001c 	add.w	r0, r7, #28
   1f93c:	f005 fb94 	bl	25068 <strtoul>
		len = sizeof(str_buf) - 1;
   1f940:	2309      	movs	r3, #9
		cell->tac = strtoul(str_buf, NULL, 16);
   1f942:	60e8      	str	r0, [r5, #12]
		len = sizeof(str_buf) - 1;
   1f944:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&resp_list,
   1f946:	f107 021c 	add.w	r2, r7, #28
   1f94a:	1d3b      	adds	r3, r7, #4
   1f94c:	f1c9 0104 	rsb	r1, r9, #4
   1f950:	f107 0014 	add.w	r0, r7, #20
   1f954:	f007 fa8c 	bl	26e70 <at_params_string_get>
		if (err) {
   1f958:	4606      	mov	r6, r0
   1f95a:	b120      	cbz	r0, 1f966 <parse_cereg+0x1fa>
			LOG_ERR("Could not get cell ID, error: %d", err);
   1f95c:	466c      	mov	r4, sp
   1f95e:	b088      	sub	sp, #32
   1f960:	466a      	mov	r2, sp
   1f962:	4b10      	ldr	r3, [pc, #64]	; (1f9a4 <parse_cereg+0x238>)
   1f964:	e7c4      	b.n	1f8f0 <parse_cereg+0x184>
		str_buf[len] = '\0';
   1f966:	687b      	ldr	r3, [r7, #4]
		cell->id = strtoul(str_buf, NULL, 16);
   1f968:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   1f96a:	3328      	adds	r3, #40	; 0x28
   1f96c:	443b      	add	r3, r7
   1f96e:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   1f972:	2210      	movs	r2, #16
   1f974:	f107 001c 	add.w	r0, r7, #28
   1f978:	f005 fb76 	bl	25068 <strtoul>
   1f97c:	60a8      	str	r0, [r5, #8]
   1f97e:	e78e      	b.n	1f89e <parse_cereg+0x132>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   1f980:	2300      	movs	r3, #0
   1f982:	e79a      	b.n	1f8ba <parse_cereg+0x14e>
   1f984:	0002a5fa 	.word	0x0002a5fa
   1f988:	00028c80 	.word	0x00028c80
   1f98c:	0002a825 	.word	0x0002a825
   1f990:	0002a852 	.word	0x0002a852
   1f994:	0002a598 	.word	0x0002a598
   1f998:	0002a87b 	.word	0x0002a87b
   1f99c:	0002a8a3 	.word	0x0002a8a3
   1f9a0:	0002a8d0 	.word	0x0002a8d0
   1f9a4:	0002a8fc 	.word	0x0002a8fc

0001f9a8 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   1f9a8:	2300      	movs	r3, #0
{
   1f9aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f9ac:	b089      	sub	sp, #36	; 0x24
   1f9ae:	af00      	add	r7, sp, #0
   1f9b0:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   1f9b2:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   1f9b4:	e9c7 3300 	strd	r3, r3, [r7]
	if (time == NULL || at_response == NULL) {
   1f9b8:	2900      	cmp	r1, #0
   1f9ba:	d056      	beq.n	1fa6a <parse_xt3412+0xc2>
   1f9bc:	2800      	cmp	r0, #0
   1f9be:	d054      	beq.n	1fa6a <parse_xt3412+0xc2>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   1f9c0:	2104      	movs	r1, #4
   1f9c2:	4638      	mov	r0, r7
   1f9c4:	f007 f94c 	bl	26c60 <at_params_list_init>
	if (err) {
   1f9c8:	4604      	mov	r4, r0
   1f9ca:	b190      	cbz	r0, 1f9f2 <parse_xt3412+0x4a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1f9cc:	466d      	mov	r5, sp
   1f9ce:	b088      	sub	sp, #32
   1f9d0:	466a      	mov	r2, sp
   1f9d2:	4b27      	ldr	r3, [pc, #156]	; (1fa70 <parse_xt3412+0xc8>)
   1f9d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f9d8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f9dc:	2303      	movs	r3, #3
   1f9de:	4825      	ldr	r0, [pc, #148]	; (1fa74 <parse_xt3412+0xcc>)
   1f9e0:	f842 3f10 	str.w	r3, [r2, #16]!
   1f9e4:	f007 fa7c 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   1f9e8:	46ad      	mov	sp, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   1f9ea:	4620      	mov	r0, r4
   1f9ec:	3724      	adds	r7, #36	; 0x24
   1f9ee:	46bd      	mov	sp, r7
   1f9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   1f9f2:	4601      	mov	r1, r0
   1f9f4:	463a      	mov	r2, r7
   1f9f6:	4630      	mov	r0, r6
   1f9f8:	f007 f919 	bl	26c2e <at_parser_params_from_str>
	if (err) {
   1f9fc:	4604      	mov	r4, r0
   1f9fe:	b190      	cbz	r0, 1fa26 <parse_xt3412+0x7e>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   1fa00:	466d      	mov	r5, sp
   1fa02:	b088      	sub	sp, #32
   1fa04:	466a      	mov	r2, sp
   1fa06:	4b1c      	ldr	r3, [pc, #112]	; (1fa78 <parse_xt3412+0xd0>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   1fa08:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1fa0c:	2303      	movs	r3, #3
   1fa0e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fa12:	4818      	ldr	r0, [pc, #96]	; (1fa74 <parse_xt3412+0xcc>)
   1fa14:	f842 3f10 	str.w	r3, [r2, #16]!
   1fa18:	f007 fa62 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   1fa1c:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1fa1e:	4638      	mov	r0, r7
   1fa20:	f007 f948 	bl	26cb4 <at_params_list_free>
	return err;
   1fa24:	e7e1      	b.n	1f9ea <parse_xt3412+0x42>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   1fa26:	462a      	mov	r2, r5
   1fa28:	2102      	movs	r1, #2
   1fa2a:	4638      	mov	r0, r7
   1fa2c:	f007 fa0c 	bl	26e48 <at_params_int64_get>
	if (err) {
   1fa30:	4604      	mov	r4, r0
   1fa32:	b120      	cbz	r0, 1fa3e <parse_xt3412+0x96>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   1fa34:	466d      	mov	r5, sp
   1fa36:	b088      	sub	sp, #32
   1fa38:	466a      	mov	r2, sp
   1fa3a:	4b10      	ldr	r3, [pc, #64]	; (1fa7c <parse_xt3412+0xd4>)
   1fa3c:	e7e4      	b.n	1fa08 <parse_xt3412+0x60>
	if ((*time > T3412_MAX) || *time < 0) {
   1fa3e:	4910      	ldr	r1, [pc, #64]	; (1fa80 <parse_xt3412+0xd8>)
   1fa40:	e9d5 3200 	ldrd	r3, r2, [r5]
   1fa44:	4299      	cmp	r1, r3
   1fa46:	f04f 0308 	mov.w	r3, #8
   1fa4a:	4193      	sbcs	r3, r2
   1fa4c:	d2e7      	bcs.n	1fa1e <parse_xt3412+0x76>
		LOG_WRN("Parsed time parameter not within valid range");
   1fa4e:	4b0d      	ldr	r3, [pc, #52]	; (1fa84 <parse_xt3412+0xdc>)
   1fa50:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1fa54:	61fb      	str	r3, [r7, #28]
   1fa56:	2302      	movs	r3, #2
   1fa58:	4806      	ldr	r0, [pc, #24]	; (1fa74 <parse_xt3412+0xcc>)
   1fa5a:	61bb      	str	r3, [r7, #24]
   1fa5c:	f107 0218 	add.w	r2, r7, #24
   1fa60:	f007 fa3e 	bl	26ee0 <z_log_msg_static_create.constprop.0>
		err = -EINVAL;
   1fa64:	f06f 0415 	mvn.w	r4, #21
   1fa68:	e7d9      	b.n	1fa1e <parse_xt3412+0x76>
		return -EINVAL;
   1fa6a:	f06f 0415 	mvn.w	r4, #21
   1fa6e:	e7bc      	b.n	1f9ea <parse_xt3412+0x42>
   1fa70:	0002a5fa 	.word	0x0002a5fa
   1fa74:	00028c80 	.word	0x00028c80
   1fa78:	0002a91d 	.word	0x0002a91d
   1fa7c:	0002a94a 	.word	0x0002a94a
   1fa80:	5099e000 	.word	0x5099e000
   1fa84:	0002a977 	.word	0x0002a977

0001fa88 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   1fa88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   1fa8a:	b968      	cbnz	r0, 1faa8 <neighborcell_count_get+0x20>
		LOG_ERR("at_response is NULL, can't get cell count");
   1fa8c:	4b0f      	ldr	r3, [pc, #60]	; (1facc <neighborcell_count_get+0x44>)
   1fa8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1fa92:	9305      	str	r3, [sp, #20]
   1fa94:	2302      	movs	r3, #2
   1fa96:	480e      	ldr	r0, [pc, #56]	; (1fad0 <neighborcell_count_get+0x48>)
   1fa98:	aa04      	add	r2, sp, #16
   1fa9a:	9304      	str	r3, [sp, #16]
   1fa9c:	f007 fa20 	bl	26ee0 <z_log_msg_static_create.constprop.0>
		return 0;
   1faa0:	2000      	movs	r0, #0
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   1faa2:	b007      	add	sp, #28
   1faa4:	f85d fb04 	ldr.w	pc, [sp], #4
	uint32_t count = 0;
   1faa8:	2300      	movs	r3, #0
   1faaa:	3801      	subs	r0, #1
		if (*str == c) {
   1faac:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1fab0:	2a2c      	cmp	r2, #44	; 0x2c
   1fab2:	d101      	bne.n	1fab8 <neighborcell_count_get+0x30>
			count++;
   1fab4:	3301      	adds	r3, #1
	} while (*(str++) != '\0');
   1fab6:	e7f9      	b.n	1faac <neighborcell_count_get+0x24>
   1fab8:	2a00      	cmp	r2, #0
   1faba:	d1f7      	bne.n	1faac <neighborcell_count_get+0x24>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   1fabc:	2b0a      	cmp	r3, #10
   1fabe:	d9ef      	bls.n	1faa0 <neighborcell_count_get+0x18>
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   1fac0:	f1a3 0009 	sub.w	r0, r3, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   1fac4:	2305      	movs	r3, #5
   1fac6:	fbb0 f0f3 	udiv	r0, r0, r3
	return ncell_count;
   1faca:	e7ea      	b.n	1faa2 <neighborcell_count_get+0x1a>
   1facc:	0002a9a4 	.word	0x0002a9a4
   1fad0:	00028c80 	.word	0x00028c80

0001fad4 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   1fad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   1fad8:	230b      	movs	r3, #11
{
   1fada:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1fadc:	2100      	movs	r1, #0
{
   1fade:	4680      	mov	r8, r0
   1fae0:	b08c      	sub	sp, #48	; 0x30
   1fae2:	af00      	add	r7, sp, #0
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1fae4:	e9c7 1109 	strd	r1, r1, [r7, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   1fae8:	613b      	str	r3, [r7, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1faea:	f8c7 102b 	str.w	r1, [r7, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   1faee:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   1faf0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1faf4:	2b2c      	cmp	r3, #44	; 0x2c
   1faf6:	d101      	bne.n	1fafc <parse_ncellmeas+0x28>
			count++;
   1faf8:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   1fafa:	e7f9      	b.n	1faf0 <parse_ncellmeas+0x1c>
   1fafc:	2b00      	cmp	r3, #0
   1fafe:	d1f7      	bne.n	1faf0 <parse_ncellmeas+0x1c>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   1fb00:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fb04:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   1fb08:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fb0a:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   1fb0c:	f107 001c 	add.w	r0, r7, #28
   1fb10:	f007 f8a6 	bl	26c60 <at_params_list_init>
	if (err) {
   1fb14:	4604      	mov	r4, r0
   1fb16:	b198      	cbz	r0, 1fb40 <parse_ncellmeas+0x6c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1fb18:	466d      	mov	r5, sp
   1fb1a:	b088      	sub	sp, #32
   1fb1c:	466a      	mov	r2, sp
   1fb1e:	4bb5      	ldr	r3, [pc, #724]	; (1fdf4 <parse_ncellmeas+0x320>)
   1fb20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fb24:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1fb28:	2303      	movs	r3, #3
   1fb2a:	48b3      	ldr	r0, [pc, #716]	; (1fdf8 <parse_ncellmeas+0x324>)
   1fb2c:	f842 3f10 	str.w	r3, [r2, #16]!
   1fb30:	f007 f9d6 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   1fb34:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1fb36:	4620      	mov	r0, r4
   1fb38:	3730      	adds	r7, #48	; 0x30
   1fb3a:	46bd      	mov	sp, r7
   1fb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   1fb40:	4601      	mov	r1, r0
   1fb42:	f107 021c 	add.w	r2, r7, #28
   1fb46:	4640      	mov	r0, r8
   1fb48:	f007 f871 	bl	26c2e <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   1fb4c:	4604      	mov	r4, r0
   1fb4e:	b1a8      	cbz	r0, 1fb7c <parse_ncellmeas+0xa8>
   1fb50:	1dc3      	adds	r3, r0, #7
   1fb52:	d024      	beq.n	1fb9e <parse_ncellmeas+0xca>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   1fb54:	466d      	mov	r5, sp
   1fb56:	b088      	sub	sp, #32
   1fb58:	466a      	mov	r2, sp
   1fb5a:	4ba8      	ldr	r3, [pc, #672]	; (1fdfc <parse_ncellmeas+0x328>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   1fb5c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1fb60:	2303      	movs	r3, #3
   1fb62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fb66:	48a4      	ldr	r0, [pc, #656]	; (1fdf8 <parse_ncellmeas+0x324>)
   1fb68:	f842 3f10 	str.w	r3, [r2, #16]!
   1fb6c:	f007 f9b8 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   1fb70:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1fb72:	f107 001c 	add.w	r0, r7, #28
   1fb76:	f007 f89d 	bl	26cb4 <at_params_list_free>
	return err;
   1fb7a:	e7dc      	b.n	1fb36 <parse_ncellmeas+0x62>
	bool incomplete = false;
   1fb7c:	4606      	mov	r6, r0
	err = at_params_string_get(&resp_list,
   1fb7e:	2100      	movs	r1, #0
   1fb80:	f107 0310 	add.w	r3, r7, #16
   1fb84:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1fb88:	f107 001c 	add.w	r0, r7, #28
   1fb8c:	f007 f970 	bl	26e70 <at_params_string_get>
	if (err) {
   1fb90:	4604      	mov	r4, r0
   1fb92:	b130      	cbz	r0, 1fba2 <parse_ncellmeas+0xce>
		LOG_ERR("Could not get response prefix, error: %d", err);
   1fb94:	466d      	mov	r5, sp
   1fb96:	b088      	sub	sp, #32
   1fb98:	466a      	mov	r2, sp
   1fb9a:	4b99      	ldr	r3, [pc, #612]	; (1fe00 <parse_ncellmeas+0x32c>)
   1fb9c:	e7de      	b.n	1fb5c <parse_ncellmeas+0x88>
		incomplete = true;
   1fb9e:	2601      	movs	r6, #1
   1fba0:	e7ed      	b.n	1fb7e <parse_ncellmeas+0xaa>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1fba2:	4a98      	ldr	r2, [pc, #608]	; (1fe04 <parse_ncellmeas+0x330>)
   1fba4:	6939      	ldr	r1, [r7, #16]
   1fba6:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1fbaa:	f7ff fcb3 	bl	1f514 <response_is_valid>
   1fbae:	2800      	cmp	r0, #0
   1fbb0:	f000 80b9 	beq.w	1fd26 <parse_ncellmeas+0x252>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   1fbb4:	2101      	movs	r1, #1
   1fbb6:	1d3a      	adds	r2, r7, #4
   1fbb8:	f107 001c 	add.w	r0, r7, #28
   1fbbc:	f007 f92c 	bl	26e18 <at_params_int_get>
	if (err) {
   1fbc0:	4604      	mov	r4, r0
   1fbc2:	2800      	cmp	r0, #0
   1fbc4:	d1d5      	bne.n	1fb72 <parse_ncellmeas+0x9e>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   1fbc6:	687b      	ldr	r3, [r7, #4]
   1fbc8:	2b00      	cmp	r3, #0
   1fbca:	f040 8110 	bne.w	1fdee <parse_ncellmeas+0x31a>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   1fbce:	2102      	movs	r1, #2
   1fbd0:	f107 0208 	add.w	r2, r7, #8
   1fbd4:	f107 001c 	add.w	r0, r7, #28
   1fbd8:	f007 f9ab 	bl	26f32 <string_param_to_int.constprop.0>
	if (err) {
   1fbdc:	4604      	mov	r4, r0
   1fbde:	2800      	cmp	r0, #0
   1fbe0:	d1c7      	bne.n	1fb72 <parse_ncellmeas+0x9e>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   1fbe2:	68bb      	ldr	r3, [r7, #8]
	len = sizeof(tmp_str);
   1fbe4:	f04f 0907 	mov.w	r9, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   1fbe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fbec:	bfa4      	itt	ge
   1fbee:	f04f 33ff 	movge.w	r3, #4294967295
   1fbf2:	60bb      	strge	r3, [r7, #8]
	cells->current_cell.id = tmp;
   1fbf4:	68bb      	ldr	r3, [r7, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1fbf6:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   1fbf8:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1fbfa:	f107 0214 	add.w	r2, r7, #20
   1fbfe:	f107 030c 	add.w	r3, r7, #12
   1fc02:	f107 001c 	add.w	r0, r7, #28
	len = sizeof(tmp_str);
   1fc06:	f8c7 900c 	str.w	r9, [r7, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1fc0a:	f007 f931 	bl	26e70 <at_params_string_get>
	if (err) {
   1fc0e:	4604      	mov	r4, r0
   1fc10:	2800      	cmp	r0, #0
   1fc12:	d1ae      	bne.n	1fb72 <parse_ncellmeas+0x9e>
	tmp_str[len] = '\0';
   1fc14:	68fb      	ldr	r3, [r7, #12]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   1fc16:	210a      	movs	r1, #10
	tmp_str[len] = '\0';
   1fc18:	3330      	adds	r3, #48	; 0x30
   1fc1a:	443b      	add	r3, r7
   1fc1c:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   1fc20:	1d2a      	adds	r2, r5, #4
   1fc22:	f107 0017 	add.w	r0, r7, #23
   1fc26:	f007 f95e 	bl	26ee6 <string_to_int>
	if (err) {
   1fc2a:	4604      	mov	r4, r0
   1fc2c:	2800      	cmp	r0, #0
   1fc2e:	d1a0      	bne.n	1fb72 <parse_ncellmeas+0x9e>
	tmp_str[3] = '\0';
   1fc30:	75f8      	strb	r0, [r7, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   1fc32:	462a      	mov	r2, r5
   1fc34:	210a      	movs	r1, #10
   1fc36:	f107 0014 	add.w	r0, r7, #20
   1fc3a:	f007 f954 	bl	26ee6 <string_to_int>
	if (err) {
   1fc3e:	4604      	mov	r4, r0
   1fc40:	2800      	cmp	r0, #0
   1fc42:	d196      	bne.n	1fb72 <parse_ncellmeas+0x9e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   1fc44:	2104      	movs	r1, #4
   1fc46:	f107 0208 	add.w	r2, r7, #8
   1fc4a:	f107 001c 	add.w	r0, r7, #28
   1fc4e:	f007 f970 	bl	26f32 <string_param_to_int.constprop.0>
	if (err) {
   1fc52:	4604      	mov	r4, r0
   1fc54:	2800      	cmp	r0, #0
   1fc56:	d18c      	bne.n	1fb72 <parse_ncellmeas+0x9e>
	cells->current_cell.tac = tmp;
   1fc58:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   1fc5a:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   1fc5c:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   1fc5e:	f107 0208 	add.w	r2, r7, #8
   1fc62:	f107 001c 	add.w	r0, r7, #28
   1fc66:	f007 f8d7 	bl	26e18 <at_params_int_get>
	if (err) {
   1fc6a:	4604      	mov	r4, r0
   1fc6c:	2800      	cmp	r0, #0
   1fc6e:	d180      	bne.n	1fb72 <parse_ncellmeas+0x9e>
	cells->current_cell.timing_advance = tmp;
   1fc70:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   1fc72:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   1fc74:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   1fc76:	f105 0210 	add.w	r2, r5, #16
   1fc7a:	f107 001c 	add.w	r0, r7, #28
   1fc7e:	f007 f8cb 	bl	26e18 <at_params_int_get>
	if (err) {
   1fc82:	4604      	mov	r4, r0
   1fc84:	2800      	cmp	r0, #0
   1fc86:	f47f af74 	bne.w	1fb72 <parse_ncellmeas+0x9e>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   1fc8a:	4649      	mov	r1, r9
   1fc8c:	f105 0228 	add.w	r2, r5, #40	; 0x28
   1fc90:	f107 001c 	add.w	r0, r7, #28
   1fc94:	f007 f88c 	bl	26db0 <at_params_short_get>
	if (err) {
   1fc98:	4604      	mov	r4, r0
   1fc9a:	2800      	cmp	r0, #0
   1fc9c:	f47f af69 	bne.w	1fb72 <parse_ncellmeas+0x9e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   1fca0:	2108      	movs	r1, #8
   1fca2:	f107 0208 	add.w	r2, r7, #8
   1fca6:	f107 001c 	add.w	r0, r7, #28
   1fcaa:	f007 f8b5 	bl	26e18 <at_params_int_get>
	if (err) {
   1fcae:	4604      	mov	r4, r0
   1fcb0:	2800      	cmp	r0, #0
   1fcb2:	f47f af5e 	bne.w	1fb72 <parse_ncellmeas+0x9e>
	cells->current_cell.rsrp = tmp;
   1fcb6:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   1fcb8:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   1fcba:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   1fcbc:	f107 0208 	add.w	r2, r7, #8
   1fcc0:	f107 001c 	add.w	r0, r7, #28
   1fcc4:	f007 f8a8 	bl	26e18 <at_params_int_get>
	if (err) {
   1fcc8:	4604      	mov	r4, r0
   1fcca:	2800      	cmp	r0, #0
   1fccc:	f47f af51 	bne.w	1fb72 <parse_ncellmeas+0x9e>
	cells->current_cell.rsrq = tmp;
   1fcd0:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   1fcd2:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   1fcd4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   1fcd6:	f105 0220 	add.w	r2, r5, #32
   1fcda:	f107 001c 	add.w	r0, r7, #28
   1fcde:	f007 f8b3 	bl	26e48 <at_params_int64_get>
	if (err) {
   1fce2:	4604      	mov	r4, r0
   1fce4:	2800      	cmp	r0, #0
   1fce6:	f47f af44 	bne.w	1fb72 <parse_ncellmeas+0x9e>
	cells->ncells_count = neighborcell_count_get(at_response);
   1fcea:	4640      	mov	r0, r8
   1fcec:	f7ff fecc 	bl	1fa88 <neighborcell_count_get>
   1fcf0:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   1fcf4:	b2c0      	uxtb	r0, r0
   1fcf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   1fcfa:	f100 040b 	add.w	r4, r0, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   1fcfe:	f107 001c 	add.w	r0, r7, #28
   1fd02:	f007 f8d5 	bl	26eb0 <at_params_valid_count_get>
   1fd06:	4284      	cmp	r4, r0
   1fd08:	d20f      	bcs.n	1fd2a <parse_ncellmeas+0x256>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   1fd0a:	4621      	mov	r1, r4
   1fd0c:	f105 0218 	add.w	r2, r5, #24
   1fd10:	f107 001c 	add.w	r0, r7, #28
   1fd14:	f007 f898 	bl	26e48 <at_params_int64_get>
		if (err) {
   1fd18:	4604      	mov	r4, r0
   1fd1a:	2800      	cmp	r0, #0
   1fd1c:	f47f af29 	bne.w	1fb72 <parse_ncellmeas+0x9e>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   1fd20:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1fd24:	b933      	cbnz	r3, 1fd34 <parse_ncellmeas+0x260>
	err = at_params_string_get(&resp_list,
   1fd26:	2400      	movs	r4, #0
   1fd28:	e723      	b.n	1fb72 <parse_ncellmeas+0x9e>
		cells->current_cell.timing_advance_meas_time = 0;
   1fd2a:	2200      	movs	r2, #0
   1fd2c:	2300      	movs	r3, #0
   1fd2e:	e9c5 2306 	strd	r2, r3, [r5, #24]
   1fd32:	e7f5      	b.n	1fd20 <parse_ncellmeas+0x24c>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   1fd34:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1fd36:	2b00      	cmp	r3, #0
   1fd38:	d0f5      	beq.n	1fd26 <parse_ncellmeas+0x252>
   1fd3a:	f04f 080f 	mov.w	r8, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   1fd3e:	f04f 0900 	mov.w	r9, #0
   1fd42:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1fd46:	4599      	cmp	r9, r3
   1fd48:	d304      	bcc.n	1fd54 <parse_ncellmeas+0x280>
	if (incomplete) {
   1fd4a:	2e00      	cmp	r6, #0
   1fd4c:	d0eb      	beq.n	1fd26 <parse_ncellmeas+0x252>
		err = -E2BIG;
   1fd4e:	f06f 0406 	mvn.w	r4, #6
   1fd52:	e70e      	b.n	1fb72 <parse_ncellmeas+0x9e>
					&cells->neighbor_cells[i].earfcn);
   1fd54:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   1fd56:	f1a8 0104 	sub.w	r1, r8, #4
   1fd5a:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   1fd5e:	f107 001c 	add.w	r0, r7, #28
   1fd62:	f007 f859 	bl	26e18 <at_params_int_get>
		if (err) {
   1fd66:	ea4f 1a09 	mov.w	sl, r9, lsl #4
   1fd6a:	4604      	mov	r4, r0
   1fd6c:	2800      	cmp	r0, #0
   1fd6e:	f47f af00 	bne.w	1fb72 <parse_ncellmeas+0x9e>
					  &cells->neighbor_cells[i].phys_cell_id);
   1fd72:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   1fd74:	f1a8 0103 	sub.w	r1, r8, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   1fd78:	4452      	add	r2, sl
		err = at_params_short_get(&resp_list,
   1fd7a:	3208      	adds	r2, #8
   1fd7c:	f107 001c 	add.w	r0, r7, #28
   1fd80:	f007 f816 	bl	26db0 <at_params_short_get>
		if (err) {
   1fd84:	4604      	mov	r4, r0
   1fd86:	2800      	cmp	r0, #0
   1fd88:	f47f aef3 	bne.w	1fb72 <parse_ncellmeas+0x9e>
		err = at_params_int_get(&resp_list,
   1fd8c:	f107 0208 	add.w	r2, r7, #8
   1fd90:	f1a8 0102 	sub.w	r1, r8, #2
   1fd94:	f107 001c 	add.w	r0, r7, #28
   1fd98:	f007 f83e 	bl	26e18 <at_params_int_get>
		if (err) {
   1fd9c:	4604      	mov	r4, r0
   1fd9e:	2800      	cmp	r0, #0
   1fda0:	f47f aee7 	bne.w	1fb72 <parse_ncellmeas+0x9e>
		cells->neighbor_cells[i].rsrp = tmp;
   1fda4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1fda6:	68ba      	ldr	r2, [r7, #8]
   1fda8:	4453      	add	r3, sl
   1fdaa:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   1fdac:	f108 31ff 	add.w	r1, r8, #4294967295
   1fdb0:	f107 0208 	add.w	r2, r7, #8
   1fdb4:	f107 001c 	add.w	r0, r7, #28
   1fdb8:	f007 f82e 	bl	26e18 <at_params_int_get>
		if (err) {
   1fdbc:	4604      	mov	r4, r0
   1fdbe:	2800      	cmp	r0, #0
   1fdc0:	f47f aed7 	bne.w	1fb72 <parse_ncellmeas+0x9e>
		cells->neighbor_cells[i].rsrq = tmp;
   1fdc4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1fdc6:	68ba      	ldr	r2, [r7, #8]
   1fdc8:	4453      	add	r3, sl
   1fdca:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   1fdcc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   1fdce:	4641      	mov	r1, r8
					&cells->neighbor_cells[i].time_diff);
   1fdd0:	4452      	add	r2, sl
		err = at_params_int_get(&resp_list,
   1fdd2:	3204      	adds	r2, #4
   1fdd4:	f107 001c 	add.w	r0, r7, #28
   1fdd8:	f007 f81e 	bl	26e18 <at_params_int_get>
		if (err) {
   1fddc:	f108 0805 	add.w	r8, r8, #5
   1fde0:	4604      	mov	r4, r0
   1fde2:	2800      	cmp	r0, #0
   1fde4:	f47f aec5 	bne.w	1fb72 <parse_ncellmeas+0x9e>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   1fde8:	f109 0901 	add.w	r9, r9, #1
   1fdec:	e7a9      	b.n	1fd42 <parse_ncellmeas+0x26e>
		err = 1;
   1fdee:	2401      	movs	r4, #1
   1fdf0:	e6bf      	b.n	1fb72 <parse_ncellmeas+0x9e>
   1fdf2:	bf00      	nop
   1fdf4:	0002a5fa 	.word	0x0002a5fa
   1fdf8:	00028c80 	.word	0x00028c80
   1fdfc:	0002a9ce 	.word	0x0002a9ce
   1fe00:	0002a852 	.word	0x0002a852
   1fe04:	0002a576 	.word	0x0002a576

0001fe08 <parse_ncellmeas_gci>:
{
	struct at_param_list resp_list;
	struct lte_lc_ncell *ncells = NULL;
	int err, status, tmp_int, len;
	int16_t tmp_short;
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1fe08:	2300      	movs	r3, #0
{
   1fe0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe0e:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
   1fe10:	220b      	movs	r2, #11
{
   1fe12:	460d      	mov	r5, r1
	uint32_t count = 0;
   1fe14:	4699      	mov	r9, r3
{
   1fe16:	b0a5      	sub	sp, #148	; 0x94
   1fe18:	af00      	add	r7, sp, #0
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1fe1a:	e9c7 330f 	strd	r3, r3, [r7, #60]	; 0x3c
	size_t response_prefix_len = sizeof(response_prefix);
   1fe1e:	62ba      	str	r2, [r7, #40]	; 0x28
{
   1fe20:	60f8      	str	r0, [r7, #12]
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1fe22:	f8c7 3043 	str.w	r3, [r7, #67]	; 0x43
static uint32_t get_char_frequency(const char *str, char c)
   1fe26:	1e4a      	subs	r2, r1, #1
		if (*str == c) {
   1fe28:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1fe2c:	2b2c      	cmp	r3, #44	; 0x2c
   1fe2e:	d102      	bne.n	1fe36 <parse_ncellmeas_gci+0x2e>
			count++;
   1fe30:	f109 0901 	add.w	r9, r9, #1
	} while (*(str++) != '\0');
   1fe34:	e7f8      	b.n	1fe28 <parse_ncellmeas_gci+0x20>
   1fe36:	2b00      	cmp	r3, #0
   1fe38:	d1f6      	bne.n	1fe28 <parse_ncellmeas_gci+0x20>
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	/* Fill the defaults */
	cells->gci_cells_count = 0;
	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fe3a:	f04f 32ff 	mov.w	r2, #4294967295
   1fe3e:	2430      	movs	r4, #48	; 0x30
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   1fe40:	f109 0803 	add.w	r8, r9, #3
	cells->gci_cells_count = 0;
   1fe44:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	cells->ncells_count = 0;
   1fe48:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fe4c:	60b2      	str	r2, [r6, #8]

	for (i = 0; i < params->gci_count; i++) {
   1fe4e:	68f9      	ldr	r1, [r7, #12]
   1fe50:	7849      	ldrb	r1, [r1, #1]
   1fe52:	4299      	cmp	r1, r3
   1fe54:	d812      	bhi.n	1fe7c <parse_ncellmeas_gci+0x74>
	 *		<meas_time>,<serving>,<neighbor_count>
	 *	[,<n_earfcn1>,<n_phys_cell_id1>,<n_rsrp1>,<n_rsrq1>,<time_diff1>]
	 *	[,<n_earfcn2>,<n_phys_cell_id2>,<n_rsrp2>,<n_rsrq2>,<time_diff2>]...]...
	 */

	err = at_params_list_init(&resp_list, param_count);
   1fe56:	4641      	mov	r1, r8
   1fe58:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1fe5c:	f006 ff00 	bl	26c60 <at_params_list_init>
	if (err) {
   1fe60:	4604      	mov	r4, r0
   1fe62:	b1a8      	cbz	r0, 1fe90 <parse_ncellmeas_gci+0x88>
		LOG_ERR("Could not init AT params list for cell_list, error: %d", err);
   1fe64:	466d      	mov	r5, sp
   1fe66:	b088      	sub	sp, #32
   1fe68:	466a      	mov	r2, sp
   1fe6a:	4bb1      	ldr	r3, [pc, #708]	; (20130 <parse_ncellmeas_gci+0x328>)

				/* <n_rsrq[j]> */
				curr_index++;
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
				if (err) {
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   1fe6c:	6153      	str	r3, [r2, #20]
		}
	}

	if (incomplete) {
		err = -E2BIG;
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   1fe6e:	2303      	movs	r3, #3
   1fe70:	6194      	str	r4, [r2, #24]
   1fe72:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fe76:	f842 3f10 	str.w	r3, [r2, #16]!
   1fe7a:	e0a7      	b.n	1ffcc <parse_ncellmeas_gci+0x1c4>
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fe7c:	fb04 f003 	mul.w	r0, r4, r3
   1fe80:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
	for (i = 0; i < params->gci_count; i++) {
   1fe82:	3301      	adds	r3, #1
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fe84:	4401      	add	r1, r0
   1fe86:	608a      	str	r2, [r1, #8]
		cells->gci_cells[i].timing_advance = LTE_LC_CELL_TIMING_ADVANCE_INVALID;
   1fe88:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   1fe8a:	4401      	add	r1, r0
   1fe8c:	828a      	strh	r2, [r1, #20]
	for (i = 0; i < params->gci_count; i++) {
   1fe8e:	e7de      	b.n	1fe4e <parse_ncellmeas_gci+0x46>
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   1fe90:	4601      	mov	r1, r0
   1fe92:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1fe96:	4628      	mov	r0, r5
   1fe98:	f006 fec9 	bl	26c2e <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   1fe9c:	4604      	mov	r4, r0
   1fe9e:	b360      	cbz	r0, 1fefa <parse_ncellmeas_gci+0xf2>
   1fea0:	1dc3      	adds	r3, r0, #7
   1fea2:	d004      	beq.n	1feae <parse_ncellmeas_gci+0xa6>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   1fea4:	466d      	mov	r5, sp
   1fea6:	b088      	sub	sp, #32
   1fea8:	466a      	mov	r2, sp
   1feaa:	4ba2      	ldr	r3, [pc, #648]	; (20134 <parse_ncellmeas_gci+0x32c>)
   1feac:	e7de      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
		LOG_WRN("E2BIG was returned, continue. param_count %d, err %d, str %s",
   1feae:	46ea      	mov	sl, sp
   1feb0:	b08a      	sub	sp, #40	; 0x28
   1feb2:	466a      	mov	r2, sp
   1feb4:	4ba0      	ldr	r3, [pc, #640]	; (20138 <parse_ncellmeas_gci+0x330>)
   1feb6:	e9c2 0507 	strd	r0, r5, [r2, #28]
   1feba:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1febe:	f240 4302 	movw	r3, #1026	; 0x402
   1fec2:	8493      	strh	r3, [r2, #36]	; 0x24
   1fec4:	4b9d      	ldr	r3, [pc, #628]	; (2013c <parse_ncellmeas_gci+0x334>)
   1fec6:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   1feca:	f842 3f10 	str.w	r3, [r2, #16]!
   1fece:	489c      	ldr	r0, [pc, #624]	; (20140 <parse_ncellmeas_gci+0x338>)
   1fed0:	f007 f806 	bl	26ee0 <z_log_msg_static_create.constprop.0>
		incomplete = true;
   1fed4:	2301      	movs	r3, #1
   1fed6:	46d5      	mov	sp, sl
   1fed8:	617b      	str	r3, [r7, #20]
	err = at_params_string_get(&resp_list,
   1feda:	2100      	movs	r1, #0
   1fedc:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1fee0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1fee4:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1fee8:	f006 ffc2 	bl	26e70 <at_params_string_get>
	if (err) {
   1feec:	4604      	mov	r4, r0
   1feee:	b130      	cbz	r0, 1fefe <parse_ncellmeas_gci+0xf6>
		LOG_ERR("Could not get response prefix, error: %d", err);
   1fef0:	466d      	mov	r5, sp
   1fef2:	b088      	sub	sp, #32
   1fef4:	466a      	mov	r2, sp
   1fef6:	4b93      	ldr	r3, [pc, #588]	; (20144 <parse_ncellmeas_gci+0x33c>)
   1fef8:	e7b8      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
	bool incomplete = false;
   1fefa:	6178      	str	r0, [r7, #20]
   1fefc:	e7ed      	b.n	1feda <parse_ncellmeas_gci+0xd2>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1fefe:	4a92      	ldr	r2, [pc, #584]	; (20148 <parse_ncellmeas_gci+0x340>)
   1ff00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1ff02:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   1ff06:	f7ff fb05 	bl	1f514 <response_is_valid>
   1ff0a:	6138      	str	r0, [r7, #16]
   1ff0c:	b9a0      	cbnz	r0, 1ff38 <parse_ncellmeas_gci+0x130>
		LOG_ERR("Not a valid NCELLMEAS response");
   1ff0e:	4b8f      	ldr	r3, [pc, #572]	; (2014c <parse_ncellmeas_gci+0x344>)
   1ff10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ff14:	677b      	str	r3, [r7, #116]	; 0x74
   1ff16:	2302      	movs	r3, #2
   1ff18:	4889      	ldr	r0, [pc, #548]	; (20140 <parse_ncellmeas_gci+0x338>)
   1ff1a:	673b      	str	r3, [r7, #112]	; 0x70
   1ff1c:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1ff20:	f006 ffde 	bl	26ee0 <z_log_msg_static_create.constprop.0>
	err = at_params_string_get(&resp_list,
   1ff24:	2400      	movs	r4, #0
	}

clean_exit:
	at_params_list_free(&resp_list);
   1ff26:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1ff2a:	f006 fec3 	bl	26cb4 <at_params_list_free>

	return err;
}
   1ff2e:	4620      	mov	r0, r4
   1ff30:	3794      	adds	r7, #148	; 0x94
   1ff32:	46bd      	mov	sp, r7
   1ff34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = at_params_int_get(&resp_list, curr_index, &status);
   1ff38:	2101      	movs	r1, #1
   1ff3a:	f107 021c 	add.w	r2, r7, #28
   1ff3e:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1ff42:	f006 ff69 	bl	26e18 <at_params_int_get>
	if (err) {
   1ff46:	4604      	mov	r4, r0
   1ff48:	2800      	cmp	r0, #0
   1ff4a:	d1ec      	bne.n	1ff26 <parse_ncellmeas_gci+0x11e>
	if (status == AT_NCELLMEAS_STATUS_VALUE_FAIL) {
   1ff4c:	69fc      	ldr	r4, [r7, #28]
   1ff4e:	2c01      	cmp	r4, #1
   1ff50:	d0e9      	beq.n	1ff26 <parse_ncellmeas_gci+0x11e>
	} else if (status == AT_NCELLMEAS_STATUS_VALUE_INCOMPLETE) {
   1ff52:	2c02      	cmp	r4, #2
   1ff54:	d109      	bne.n	1ff6a <parse_ncellmeas_gci+0x162>
		LOG_WRN("NCELLMEAS measurements interrupted; results incomplete");
   1ff56:	4b7e      	ldr	r3, [pc, #504]	; (20150 <parse_ncellmeas_gci+0x348>)
   1ff58:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ff5c:	e9c7 431c 	strd	r4, r3, [r7, #112]	; 0x70
   1ff60:	4877      	ldr	r0, [pc, #476]	; (20140 <parse_ncellmeas_gci+0x338>)
   1ff62:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1ff66:	f006 ffbb 	bl	26ee0 <z_log_msg_static_create.constprop.0>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   1ff6a:	f04f 0a00 	mov.w	sl, #0
   1ff6e:	2501      	movs	r5, #1
   1ff70:	46d0      	mov	r8, sl
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   1ff72:	f1a9 030a 	sub.w	r3, r9, #10
   1ff76:	607b      	str	r3, [r7, #4]
   1ff78:	687b      	ldr	r3, [r7, #4]
   1ff7a:	42ab      	cmp	r3, r5
   1ff7c:	d903      	bls.n	1ff86 <parse_ncellmeas_gci+0x17e>
			i < params->gci_count; i++) {
   1ff7e:	68fb      	ldr	r3, [r7, #12]
   1ff80:	785b      	ldrb	r3, [r3, #1]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   1ff82:	4543      	cmp	r3, r8
   1ff84:	d80a      	bhi.n	1ff9c <parse_ncellmeas_gci+0x194>
	if (incomplete) {
   1ff86:	697b      	ldr	r3, [r7, #20]
   1ff88:	2b00      	cmp	r3, #0
   1ff8a:	d0cb      	beq.n	1ff24 <parse_ncellmeas_gci+0x11c>
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   1ff8c:	466d      	mov	r5, sp
   1ff8e:	b088      	sub	sp, #32
   1ff90:	466a      	mov	r2, sp
   1ff92:	4b70      	ldr	r3, [pc, #448]	; (20154 <parse_ncellmeas_gci+0x34c>)
   1ff94:	f06f 0406 	mvn.w	r4, #6
   1ff98:	6153      	str	r3, [r2, #20]
   1ff9a:	e768      	b.n	1fe6e <parse_ncellmeas_gci+0x66>
		curr_index++;
   1ff9c:	f105 0901 	add.w	r9, r5, #1
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   1ffa0:	4649      	mov	r1, r9
   1ffa2:	f107 0220 	add.w	r2, r7, #32
   1ffa6:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1ffaa:	f006 ffc2 	bl	26f32 <string_param_to_int.constprop.0>
		if (err) {
   1ffae:	4604      	mov	r4, r0
   1ffb0:	b188      	cbz	r0, 1ffd6 <parse_ncellmeas_gci+0x1ce>
			LOG_ERR("Could not parse cell_id, index %d, i %d error: %d",
   1ffb2:	466d      	mov	r5, sp
   1ffb4:	b08a      	sub	sp, #40	; 0x28
   1ffb6:	466a      	mov	r2, sp
   1ffb8:	4b67      	ldr	r3, [pc, #412]	; (20158 <parse_ncellmeas_gci+0x350>)
   1ffba:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1ffbe:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1ffc2:	2305      	movs	r3, #5
   1ffc4:	e9c2 8007 	strd	r8, r0, [r2, #28]
   1ffc8:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   1ffcc:	485c      	ldr	r0, [pc, #368]	; (20140 <parse_ncellmeas_gci+0x338>)
   1ffce:	f006 ff87 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   1ffd2:	46ad      	mov	sp, r5
   1ffd4:	e7a7      	b.n	1ff26 <parse_ncellmeas_gci+0x11e>
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   1ffd6:	6a3b      	ldr	r3, [r7, #32]
   1ffd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   1ffdc:	db11      	blt.n	20002 <parse_ncellmeas_gci+0x1fa>
			LOG_WRN("cell_id = %d which is > LTE_LC_CELL_EUTRAN_ID_MAX; "
   1ffde:	466c      	mov	r4, sp
   1ffe0:	b088      	sub	sp, #32
   1ffe2:	466a      	mov	r2, sp
   1ffe4:	495d      	ldr	r1, [pc, #372]	; (2015c <parse_ncellmeas_gci+0x354>)
   1ffe6:	4856      	ldr	r0, [pc, #344]	; (20140 <parse_ncellmeas_gci+0x338>)
   1ffe8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ffec:	2303      	movs	r3, #3
   1ffee:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1fff2:	f842 3f10 	str.w	r3, [r2, #16]!
   1fff6:	f006 ff73 	bl	26ee0 <z_log_msg_static_create.constprop.0>
			tmp_int = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fffa:	f04f 33ff 	mov.w	r3, #4294967295
   1fffe:	46a5      	mov	sp, r4
   20000:	623b      	str	r3, [r7, #32]
		parsed_cell.id = tmp_int;
   20002:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   20004:	f107 022c 	add.w	r2, r7, #44	; 0x2c
		parsed_cell.id = tmp_int;
   20008:	66bb      	str	r3, [r7, #104]	; 0x68
		len = sizeof(tmp_str);
   2000a:	2307      	movs	r3, #7
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   2000c:	1ca9      	adds	r1, r5, #2
		len = sizeof(tmp_str);
   2000e:	627b      	str	r3, [r7, #36]	; 0x24
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   20010:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20014:	f107 0324 	add.w	r3, r7, #36	; 0x24
   20018:	f006 ff2a 	bl	26e70 <at_params_string_get>
		if (err) {
   2001c:	4604      	mov	r4, r0
   2001e:	b120      	cbz	r0, 2002a <parse_ncellmeas_gci+0x222>
			LOG_ERR("Could not parse plmn, error: %d", err);
   20020:	466d      	mov	r5, sp
   20022:	b088      	sub	sp, #32
   20024:	466a      	mov	r2, sp
   20026:	4b4e      	ldr	r3, [pc, #312]	; (20160 <parse_ncellmeas_gci+0x358>)
   20028:	e720      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
		tmp_str[len] = '\0';
   2002a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2002c:	f107 0218 	add.w	r2, r7, #24
   20030:	3378      	adds	r3, #120	; 0x78
   20032:	4413      	add	r3, r2
   20034:	f803 0c64 	strb.w	r0, [r3, #-100]
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
   20038:	210a      	movs	r1, #10
   2003a:	f107 0264 	add.w	r2, r7, #100	; 0x64
   2003e:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   20042:	f006 ff50 	bl	26ee6 <string_to_int>
		if (err) {
   20046:	4604      	mov	r4, r0
   20048:	b120      	cbz	r0, 20054 <parse_ncellmeas_gci+0x24c>
			LOG_ERR("string_to_int, error: %d", err);
   2004a:	466d      	mov	r5, sp
   2004c:	b088      	sub	sp, #32
   2004e:	466a      	mov	r2, sp
   20050:	4b44      	ldr	r3, [pc, #272]	; (20164 <parse_ncellmeas_gci+0x35c>)
   20052:	e70b      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
		tmp_str[3] = '\0';
   20054:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
		err = string_to_int(tmp_str, 10, &parsed_cell.mcc);
   20058:	210a      	movs	r1, #10
   2005a:	f107 0260 	add.w	r2, r7, #96	; 0x60
   2005e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   20062:	f006 ff40 	bl	26ee6 <string_to_int>
		if (err) {
   20066:	4604      	mov	r4, r0
   20068:	2800      	cmp	r0, #0
   2006a:	d1ee      	bne.n	2004a <parse_ncellmeas_gci+0x242>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   2006c:	f107 0220 	add.w	r2, r7, #32
   20070:	1ce9      	adds	r1, r5, #3
   20072:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20076:	f006 ff5c 	bl	26f32 <string_param_to_int.constprop.0>
		if (err) {
   2007a:	4604      	mov	r4, r0
   2007c:	b160      	cbz	r0, 20098 <parse_ncellmeas_gci+0x290>
			LOG_ERR("Could not parse tracking_area_code in i %d, error: %d", i, err);
   2007e:	466d      	mov	r5, sp
   20080:	b088      	sub	sp, #32
   20082:	466a      	mov	r2, sp
   20084:	4b38      	ldr	r3, [pc, #224]	; (20168 <parse_ncellmeas_gci+0x360>)
   20086:	61d0      	str	r0, [r2, #28]
   20088:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2008c:	2304      	movs	r3, #4
   2008e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20092:	f842 3f10 	str.w	r3, [r2, #16]!
   20096:	e799      	b.n	1ffcc <parse_ncellmeas_gci+0x1c4>
		parsed_cell.tac = tmp_int;
   20098:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   2009a:	f107 0220 	add.w	r2, r7, #32
		parsed_cell.tac = tmp_int;
   2009e:	66fb      	str	r3, [r7, #108]	; 0x6c
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   200a0:	1d29      	adds	r1, r5, #4
   200a2:	f107 0034 	add.w	r0, r7, #52	; 0x34
   200a6:	f006 feb7 	bl	26e18 <at_params_int_get>
		if (err) {
   200aa:	4604      	mov	r4, r0
   200ac:	b120      	cbz	r0, 200b8 <parse_ncellmeas_gci+0x2b0>
			LOG_ERR("Could not parse timing_advance, error: %d", err);
   200ae:	466d      	mov	r5, sp
   200b0:	b088      	sub	sp, #32
   200b2:	466a      	mov	r2, sp
   200b4:	4b2d      	ldr	r3, [pc, #180]	; (2016c <parse_ncellmeas_gci+0x364>)
   200b6:	e6d9      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
		parsed_cell.timing_advance = tmp_int;
   200b8:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_int64_get(&resp_list, curr_index,
   200ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
		parsed_cell.timing_advance = tmp_int;
   200be:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		err = at_params_int64_get(&resp_list, curr_index,
   200c2:	1d69      	adds	r1, r5, #5
   200c4:	f107 0034 	add.w	r0, r7, #52	; 0x34
   200c8:	f006 febe 	bl	26e48 <at_params_int64_get>
		if (err) {
   200cc:	4604      	mov	r4, r0
   200ce:	b120      	cbz	r0, 200da <parse_ncellmeas_gci+0x2d2>
			LOG_ERR("Could not parse timing_advance_meas_time, error: %d", err);
   200d0:	466d      	mov	r5, sp
   200d2:	b088      	sub	sp, #32
   200d4:	466a      	mov	r2, sp
   200d6:	4b26      	ldr	r3, [pc, #152]	; (20170 <parse_ncellmeas_gci+0x368>)
   200d8:	e6c8      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
		err = at_params_int_get(&resp_list, curr_index, &parsed_cell.earfcn);
   200da:	f107 0270 	add.w	r2, r7, #112	; 0x70
   200de:	1da9      	adds	r1, r5, #6
   200e0:	f107 0034 	add.w	r0, r7, #52	; 0x34
   200e4:	f006 fe98 	bl	26e18 <at_params_int_get>
		if (err) {
   200e8:	4604      	mov	r4, r0
   200ea:	b120      	cbz	r0, 200f6 <parse_ncellmeas_gci+0x2ee>
			LOG_ERR("Could not parse earfcn, error: %d", err);
   200ec:	466d      	mov	r5, sp
   200ee:	b088      	sub	sp, #32
   200f0:	466a      	mov	r2, sp
   200f2:	4b20      	ldr	r3, [pc, #128]	; (20174 <parse_ncellmeas_gci+0x36c>)
   200f4:	e6ba      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.phys_cell_id);
   200f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
   200fa:	1de9      	adds	r1, r5, #7
   200fc:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20100:	f006 fe56 	bl	26db0 <at_params_short_get>
		if (err) {
   20104:	4604      	mov	r4, r0
   20106:	b120      	cbz	r0, 20112 <parse_ncellmeas_gci+0x30a>
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   20108:	466d      	mov	r5, sp
   2010a:	b088      	sub	sp, #32
   2010c:	466a      	mov	r2, sp
   2010e:	4b1a      	ldr	r3, [pc, #104]	; (20178 <parse_ncellmeas_gci+0x370>)
   20110:	e6ac      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrp);
   20112:	f107 028a 	add.w	r2, r7, #138	; 0x8a
   20116:	f105 0108 	add.w	r1, r5, #8
   2011a:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2011e:	f006 fe47 	bl	26db0 <at_params_short_get>
		if (err) {
   20122:	4604      	mov	r4, r0
   20124:	b360      	cbz	r0, 20180 <parse_ncellmeas_gci+0x378>
			LOG_ERR("Could not parse rsrp, error: %d", err);
   20126:	466d      	mov	r5, sp
   20128:	b088      	sub	sp, #32
   2012a:	466a      	mov	r2, sp
   2012c:	4b13      	ldr	r3, [pc, #76]	; (2017c <parse_ncellmeas_gci+0x374>)
   2012e:	e69d      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
   20130:	0002aa00 	.word	0x0002aa00
   20134:	0002a9ce 	.word	0x0002a9ce
   20138:	0002aa37 	.word	0x0002aa37
   2013c:	01000005 	.word	0x01000005
   20140:	00028c80 	.word	0x00028c80
   20144:	0002a852 	.word	0x0002a852
   20148:	0002a576 	.word	0x0002a576
   2014c:	0002aa74 	.word	0x0002aa74
   20150:	0002aa93 	.word	0x0002aa93
   20154:	0002ae4b 	.word	0x0002ae4b
   20158:	0002aaca 	.word	0x0002aaca
   2015c:	0002aafc 	.word	0x0002aafc
   20160:	0002ab3f 	.word	0x0002ab3f
   20164:	0002ab5f 	.word	0x0002ab5f
   20168:	0002ab78 	.word	0x0002ab78
   2016c:	0002abae 	.word	0x0002abae
   20170:	0002abd8 	.word	0x0002abd8
   20174:	0002ac0c 	.word	0x0002ac0c
   20178:	0002ac2e 	.word	0x0002ac2e
   2017c:	0002ac56 	.word	0x0002ac56
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrq);
   20180:	f107 028c 	add.w	r2, r7, #140	; 0x8c
   20184:	f105 0109 	add.w	r1, r5, #9
   20188:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2018c:	f006 fe10 	bl	26db0 <at_params_short_get>
		if (err) {
   20190:	4604      	mov	r4, r0
   20192:	b120      	cbz	r0, 2019e <parse_ncellmeas_gci+0x396>
			LOG_ERR("Could not parse rsrq, error: %d", err);
   20194:	466d      	mov	r5, sp
   20196:	b088      	sub	sp, #32
   20198:	466a      	mov	r2, sp
   2019a:	4b75      	ldr	r3, [pc, #468]	; (20370 <parse_ncellmeas_gci+0x568>)
   2019c:	e666      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
		err = at_params_int64_get(&resp_list, curr_index, &parsed_cell.measurement_time);
   2019e:	f107 0280 	add.w	r2, r7, #128	; 0x80
   201a2:	f105 010a 	add.w	r1, r5, #10
   201a6:	f107 0034 	add.w	r0, r7, #52	; 0x34
   201aa:	f006 fe4d 	bl	26e48 <at_params_int64_get>
		if (err) {
   201ae:	4604      	mov	r4, r0
   201b0:	b120      	cbz	r0, 201bc <parse_ncellmeas_gci+0x3b4>
			LOG_ERR("Could not parse meas_time, error: %d", err);
   201b2:	466d      	mov	r5, sp
   201b4:	b088      	sub	sp, #32
   201b6:	466a      	mov	r2, sp
   201b8:	4b6e      	ldr	r3, [pc, #440]	; (20374 <parse_ncellmeas_gci+0x56c>)
   201ba:	e657      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   201bc:	f107 021a 	add.w	r2, r7, #26
   201c0:	f105 010b 	add.w	r1, r5, #11
   201c4:	f107 0034 	add.w	r0, r7, #52	; 0x34
   201c8:	f006 fdf2 	bl	26db0 <at_params_short_get>
		if (err) {
   201cc:	4604      	mov	r4, r0
   201ce:	b120      	cbz	r0, 201da <parse_ncellmeas_gci+0x3d2>
			LOG_ERR("Could not parse serving, error: %d", err);
   201d0:	466d      	mov	r5, sp
   201d2:	b088      	sub	sp, #32
   201d4:	466a      	mov	r2, sp
   201d6:	4b68      	ldr	r3, [pc, #416]	; (20378 <parse_ncellmeas_gci+0x570>)
   201d8:	e648      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
		curr_index++;
   201da:	350c      	adds	r5, #12
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   201dc:	4629      	mov	r1, r5
   201de:	f107 021a 	add.w	r2, r7, #26
   201e2:	f107 0034 	add.w	r0, r7, #52	; 0x34
		is_serving_cell = tmp_short;
   201e6:	f9b7 901a 	ldrsh.w	r9, [r7, #26]
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   201ea:	f006 fde1 	bl	26db0 <at_params_short_get>
		if (err) {
   201ee:	4604      	mov	r4, r0
   201f0:	b120      	cbz	r0, 201fc <parse_ncellmeas_gci+0x3f4>
			LOG_ERR("Could not parse neighbor_count, error: %d", err);
   201f2:	466d      	mov	r5, sp
   201f4:	b088      	sub	sp, #32
   201f6:	466a      	mov	r2, sp
   201f8:	4b60      	ldr	r3, [pc, #384]	; (2037c <parse_ncellmeas_gci+0x574>)
   201fa:	e637      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
		if (is_serving_cell) {
   201fc:	f1b9 0f00 	cmp.w	r9, #0
   20200:	f000 809e 	beq.w	20340 <parse_ncellmeas_gci+0x538>
			cells->current_cell = parsed_cell;
   20204:	46b4      	mov	ip, r6
   20206:	f107 0e60 	add.w	lr, r7, #96	; 0x60
   2020a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2020e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20212:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   20216:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2021a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
		parsed_ncells_count = tmp_short;
   2021e:	f897 901a 	ldrb.w	r9, [r7, #26]
			cells->current_cell = parsed_cell;
   20222:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			if (parsed_ncells_count != 0) {
   20226:	f1b9 0f00 	cmp.w	r9, #0
   2022a:	d02c      	beq.n	20286 <parse_ncellmeas_gci+0x47e>
				if (parsed_ncells_count > CONFIG_LTE_NEIGHBOR_CELLS_MAX) {
   2022c:	f1b9 0f0a 	cmp.w	r9, #10
   20230:	d924      	bls.n	2027c <parse_ncellmeas_gci+0x474>
					LOG_WRN("Cutting response, because received neigbor cell"
   20232:	46e9      	mov	r9, sp
   20234:	b088      	sub	sp, #32
   20236:	466a      	mov	r2, sp
   20238:	4b51      	ldr	r3, [pc, #324]	; (20380 <parse_ncellmeas_gci+0x578>)
   2023a:	240a      	movs	r4, #10
   2023c:	6153      	str	r3, [r2, #20]
   2023e:	2303      	movs	r3, #3
   20240:	6194      	str	r4, [r2, #24]
   20242:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   20246:	f842 3f10 	str.w	r3, [r2, #16]!
   2024a:	484e      	ldr	r0, [pc, #312]	; (20384 <parse_ncellmeas_gci+0x57c>)
   2024c:	f006 fe48 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   20250:	46cd      	mov	sp, r9
					incomplete = true;
   20252:	693b      	ldr	r3, [r7, #16]
   20254:	617b      	str	r3, [r7, #20]
				ncells = k_calloc(
   20256:	2110      	movs	r1, #16
   20258:	4620      	mov	r0, r4
   2025a:	f008 f918 	bl	2848e <k_calloc>
				if (ncells == NULL) {
   2025e:	b978      	cbnz	r0, 20280 <parse_ncellmeas_gci+0x478>
					LOG_WRN("Failed to allocate memory for the ncells"
   20260:	4b49      	ldr	r3, [pc, #292]	; (20388 <parse_ncellmeas_gci+0x580>)
   20262:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   20266:	65fb      	str	r3, [r7, #92]	; 0x5c
   20268:	2302      	movs	r3, #2
   2026a:	4846      	ldr	r0, [pc, #280]	; (20384 <parse_ncellmeas_gci+0x57c>)
   2026c:	65bb      	str	r3, [r7, #88]	; 0x58
   2026e:	f107 0258 	add.w	r2, r7, #88	; 0x58
   20272:	f006 fe35 	bl	26ee0 <z_log_msg_static_create.constprop.0>
			i < params->gci_count; i++) {
   20276:	f108 0801 	add.w	r8, r8, #1
   2027a:	e67d      	b.n	1ff78 <parse_ncellmeas_gci+0x170>
					to_be_parsed_ncell_count = parsed_ncells_count;
   2027c:	464c      	mov	r4, r9
   2027e:	e7ea      	b.n	20256 <parse_ncellmeas_gci+0x44e>
				cells->neighbor_cells = ncells;
   20280:	6370      	str	r0, [r6, #52]	; 0x34
				cells->ncells_count = to_be_parsed_ncell_count;
   20282:	f886 4030 	strb.w	r4, [r6, #48]	; 0x30
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   20286:	f04f 0900 	mov.w	r9, #0
   2028a:	60bc      	str	r4, [r7, #8]
   2028c:	68bb      	ldr	r3, [r7, #8]
   2028e:	454b      	cmp	r3, r9
   20290:	d0f1      	beq.n	20276 <parse_ncellmeas_gci+0x46e>
							&cells->neighbor_cells[j].earfcn);
   20292:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_int_get(&resp_list,
   20294:	1c69      	adds	r1, r5, #1
   20296:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   2029a:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2029e:	f006 fdbb 	bl	26e18 <at_params_int_get>
				if (err) {
   202a2:	ea4f 1b09 	mov.w	fp, r9, lsl #4
   202a6:	4604      	mov	r4, r0
   202a8:	b120      	cbz	r0, 202b4 <parse_ncellmeas_gci+0x4ac>
					LOG_ERR("Could not parse n_earfcn, error: %d", err);
   202aa:	466d      	mov	r5, sp
   202ac:	b088      	sub	sp, #32
   202ae:	466a      	mov	r2, sp
   202b0:	4b36      	ldr	r3, [pc, #216]	; (2038c <parse_ncellmeas_gci+0x584>)
   202b2:	e5db      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
							  &cells->neighbor_cells[j].phys_cell_id);
   202b4:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_short_get(&resp_list,
   202b6:	1ca9      	adds	r1, r5, #2
							  &cells->neighbor_cells[j].phys_cell_id);
   202b8:	445a      	add	r2, fp
				err = at_params_short_get(&resp_list,
   202ba:	3208      	adds	r2, #8
   202bc:	f107 0034 	add.w	r0, r7, #52	; 0x34
   202c0:	f006 fd76 	bl	26db0 <at_params_short_get>
				if (err) {
   202c4:	4604      	mov	r4, r0
   202c6:	b120      	cbz	r0, 202d2 <parse_ncellmeas_gci+0x4ca>
					LOG_ERR("Could not parse n_phys_cell_id, error: %d", err);
   202c8:	466d      	mov	r5, sp
   202ca:	b088      	sub	sp, #32
   202cc:	466a      	mov	r2, sp
   202ce:	4b30      	ldr	r3, [pc, #192]	; (20390 <parse_ncellmeas_gci+0x588>)
   202d0:	e5cc      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   202d2:	f107 0220 	add.w	r2, r7, #32
   202d6:	1ce9      	adds	r1, r5, #3
   202d8:	f107 0034 	add.w	r0, r7, #52	; 0x34
   202dc:	f006 fd9c 	bl	26e18 <at_params_int_get>
				if (err) {
   202e0:	4604      	mov	r4, r0
   202e2:	b120      	cbz	r0, 202ee <parse_ncellmeas_gci+0x4e6>
					LOG_ERR("Could not parse n_rsrp, error: %d", err);
   202e4:	466d      	mov	r5, sp
   202e6:	b088      	sub	sp, #32
   202e8:	466a      	mov	r2, sp
   202ea:	4b2a      	ldr	r3, [pc, #168]	; (20394 <parse_ncellmeas_gci+0x58c>)
   202ec:	e5be      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
				cells->neighbor_cells[j].rsrp = tmp_int;
   202ee:	6b73      	ldr	r3, [r6, #52]	; 0x34
   202f0:	6a3a      	ldr	r2, [r7, #32]
   202f2:	445b      	add	r3, fp
   202f4:	815a      	strh	r2, [r3, #10]
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   202f6:	1d29      	adds	r1, r5, #4
   202f8:	f107 0220 	add.w	r2, r7, #32
   202fc:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20300:	f006 fd8a 	bl	26e18 <at_params_int_get>
				if (err) {
   20304:	4604      	mov	r4, r0
   20306:	b120      	cbz	r0, 20312 <parse_ncellmeas_gci+0x50a>
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   20308:	466d      	mov	r5, sp
   2030a:	b088      	sub	sp, #32
   2030c:	466a      	mov	r2, sp
   2030e:	4b22      	ldr	r3, [pc, #136]	; (20398 <parse_ncellmeas_gci+0x590>)
   20310:	e5ac      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
				cells->neighbor_cells[j].rsrq = tmp_int;
   20312:	6b73      	ldr	r3, [r6, #52]	; 0x34
   20314:	6a3a      	ldr	r2, [r7, #32]
   20316:	445b      	add	r3, fp
   20318:	819a      	strh	r2, [r3, #12]
							&cells->neighbor_cells[j].time_diff);
   2031a:	6b72      	ldr	r2, [r6, #52]	; 0x34
				curr_index++;
   2031c:	3505      	adds	r5, #5
							&cells->neighbor_cells[j].time_diff);
   2031e:	445a      	add	r2, fp
				err = at_params_int_get(&resp_list,
   20320:	4629      	mov	r1, r5
   20322:	3204      	adds	r2, #4
   20324:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20328:	f006 fd76 	bl	26e18 <at_params_int_get>
				if (err) {
   2032c:	4604      	mov	r4, r0
   2032e:	b120      	cbz	r0, 2033a <parse_ncellmeas_gci+0x532>
					LOG_ERR("Could not parse time_diff, error: %d", err);
   20330:	466d      	mov	r5, sp
   20332:	b088      	sub	sp, #32
   20334:	466a      	mov	r2, sp
   20336:	4b19      	ldr	r3, [pc, #100]	; (2039c <parse_ncellmeas_gci+0x594>)
   20338:	e598      	b.n	1fe6c <parse_ncellmeas_gci+0x64>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   2033a:	f109 0901 	add.w	r9, r9, #1
   2033e:	e7a5      	b.n	2028c <parse_ncellmeas_gci+0x484>
			cells->gci_cells[k] = parsed_cell;
   20340:	2330      	movs	r3, #48	; 0x30
   20342:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
   20344:	f107 0c60 	add.w	ip, r7, #96	; 0x60
   20348:	fb03 440a 	mla	r4, r3, sl, r4
   2034c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   20350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20352:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   20356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20358:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   2035c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   20360:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
			k++;
   20364:	f10a 0a01 	add.w	sl, sl, #1
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   20368:	3301      	adds	r3, #1
   2036a:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
			k++;
   2036e:	e782      	b.n	20276 <parse_ncellmeas_gci+0x46e>
   20370:	0002ac76 	.word	0x0002ac76
   20374:	0002ac96 	.word	0x0002ac96
   20378:	0002acbb 	.word	0x0002acbb
   2037c:	0002acde 	.word	0x0002acde
   20380:	0002ad08 	.word	0x0002ad08
   20384:	00028c80 	.word	0x00028c80
   20388:	0002ad60 	.word	0x0002ad60
   2038c:	0002ad94 	.word	0x0002ad94
   20390:	0002adb8 	.word	0x0002adb8
   20394:	0002ade2 	.word	0x0002ade2
   20398:	0002ae04 	.word	0x0002ae04
   2039c:	0002ae26 	.word	0x0002ae26

000203a0 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
	int err;
	struct at_param_list resp_list = {0};
   203a0:	2300      	movs	r3, #0
{
   203a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   203a4:	b085      	sub	sp, #20
   203a6:	af00      	add	r7, sp, #0
   203a8:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   203aa:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   203ac:	e9c7 3302 	strd	r3, r3, [r7, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   203b0:	2900      	cmp	r1, #0
   203b2:	d062      	beq.n	2047a <parse_xmodemsleep+0xda>
   203b4:	2800      	cmp	r0, #0
   203b6:	d060      	beq.n	2047a <parse_xmodemsleep+0xda>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   203b8:	2104      	movs	r1, #4
   203ba:	f107 0008 	add.w	r0, r7, #8
   203be:	f006 fc4f 	bl	26c60 <at_params_list_init>
	if (err) {
   203c2:	4604      	mov	r4, r0
   203c4:	b190      	cbz	r0, 203ec <parse_xmodemsleep+0x4c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   203c6:	466d      	mov	r5, sp
   203c8:	b088      	sub	sp, #32
   203ca:	466a      	mov	r2, sp
   203cc:	4b2c      	ldr	r3, [pc, #176]	; (20480 <parse_xmodemsleep+0xe0>)
   203ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   203d2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   203d6:	2303      	movs	r3, #3
   203d8:	482a      	ldr	r0, [pc, #168]	; (20484 <parse_xmodemsleep+0xe4>)
   203da:	f842 3f10 	str.w	r3, [r2, #16]!
   203de:	f006 fd7f 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   203e2:	46ad      	mov	sp, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   203e4:	4620      	mov	r0, r4
   203e6:	3714      	adds	r7, #20
   203e8:	46bd      	mov	sp, r7
   203ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   203ec:	4601      	mov	r1, r0
   203ee:	f107 0208 	add.w	r2, r7, #8
   203f2:	4630      	mov	r0, r6
   203f4:	f006 fc1b 	bl	26c2e <at_parser_params_from_str>
	if (err) {
   203f8:	4604      	mov	r4, r0
   203fa:	b178      	cbz	r0, 2041c <parse_xmodemsleep+0x7c>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   203fc:	466d      	mov	r5, sp
   203fe:	b088      	sub	sp, #32
   20400:	466a      	mov	r2, sp
   20402:	4b21      	ldr	r3, [pc, #132]	; (20488 <parse_xmodemsleep+0xe8>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   20404:	e9c2 3405 	strd	r3, r4, [r2, #20]
   20408:	2303      	movs	r3, #3
   2040a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2040e:	481d      	ldr	r0, [pc, #116]	; (20484 <parse_xmodemsleep+0xe4>)
   20410:	f842 3f10 	str.w	r3, [r2, #16]!
   20414:	f006 fd64 	bl	26ee0 <z_log_msg_static_create.constprop.0>
   20418:	46ad      	mov	sp, r5
		goto clean_exit;
   2041a:	e01a      	b.n	20452 <parse_xmodemsleep+0xb2>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   2041c:	2101      	movs	r1, #1
   2041e:	1dba      	adds	r2, r7, #6
   20420:	f107 0008 	add.w	r0, r7, #8
   20424:	f006 fce0 	bl	26de8 <at_params_unsigned_short_get>
	if (err) {
   20428:	4604      	mov	r4, r0
   2042a:	b120      	cbz	r0, 20436 <parse_xmodemsleep+0x96>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   2042c:	466d      	mov	r5, sp
   2042e:	b088      	sub	sp, #32
   20430:	466a      	mov	r2, sp
   20432:	4b16      	ldr	r3, [pc, #88]	; (2048c <parse_xmodemsleep+0xec>)
   20434:	e7e6      	b.n	20404 <parse_xmodemsleep+0x64>
	modem_sleep->type = type;
   20436:	88fb      	ldrh	r3, [r7, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   20438:	f107 0008 	add.w	r0, r7, #8
	modem_sleep->type = type;
   2043c:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   2043e:	f006 fd37 	bl	26eb0 <at_params_valid_count_get>
   20442:	2802      	cmp	r0, #2
   20444:	d80a      	bhi.n	2045c <parse_xmodemsleep+0xbc>
		modem_sleep->time = -1;
   20446:	f04f 32ff 	mov.w	r2, #4294967295
   2044a:	f04f 33ff 	mov.w	r3, #4294967295
   2044e:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   20452:	f107 0008 	add.w	r0, r7, #8
   20456:	f006 fc2d 	bl	26cb4 <at_params_list_free>
	return err;
   2045a:	e7c3      	b.n	203e4 <parse_xmodemsleep+0x44>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   2045c:	2102      	movs	r1, #2
   2045e:	f105 0208 	add.w	r2, r5, #8
   20462:	f107 0008 	add.w	r0, r7, #8
   20466:	f006 fcef 	bl	26e48 <at_params_int64_get>
	if (err) {
   2046a:	4604      	mov	r4, r0
   2046c:	2800      	cmp	r0, #0
   2046e:	d0f0      	beq.n	20452 <parse_xmodemsleep+0xb2>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   20470:	466d      	mov	r5, sp
   20472:	b088      	sub	sp, #32
   20474:	466a      	mov	r2, sp
   20476:	4b06      	ldr	r3, [pc, #24]	; (20490 <parse_xmodemsleep+0xf0>)
   20478:	e7c4      	b.n	20404 <parse_xmodemsleep+0x64>
		return -EINVAL;
   2047a:	f06f 0415 	mvn.w	r4, #21
   2047e:	e7b1      	b.n	203e4 <parse_xmodemsleep+0x44>
   20480:	0002a5fa 	.word	0x0002a5fa
   20484:	00028c80 	.word	0x00028c80
   20488:	0002ae77 	.word	0x0002ae77
   2048c:	0002aea9 	.word	0x0002aea9
   20490:	0002aed2 	.word	0x0002aed2

00020494 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   20494:	b5f0      	push	{r4, r5, r6, r7, lr}
   20496:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   20498:	4604      	mov	r4, r0
{
   2049a:	b087      	sub	sp, #28
	if (at_response == NULL || modem_evt == NULL) {
   2049c:	b320      	cbz	r0, 204e8 <parse_mdmev+0x54>
   2049e:	b319      	cbz	r1, 204e8 <parse_mdmev+0x54>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   204a0:	2108      	movs	r1, #8
   204a2:	4a13      	ldr	r2, [pc, #76]	; (204f0 <parse_mdmev+0x5c>)
   204a4:	f7ff f836 	bl	1f514 <response_is_valid>
   204a8:	b968      	cbnz	r0, 204c6 <parse_mdmev+0x32>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   204aa:	4b12      	ldr	r3, [pc, #72]	; (204f4 <parse_mdmev+0x60>)
   204ac:	4812      	ldr	r0, [pc, #72]	; (204f8 <parse_mdmev+0x64>)
   204ae:	9305      	str	r3, [sp, #20]
   204b0:	2302      	movs	r3, #2
   204b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   204b6:	aa04      	add	r2, sp, #16
   204b8:	9304      	str	r3, [sp, #16]
   204ba:	f006 fd11 	bl	26ee0 <z_log_msg_static_create.constprop.0>
		return -EIO;
   204be:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", at_response);

	return -ENODATA;
}
   204c2:	b007      	add	sp, #28
   204c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   204c6:	2500      	movs	r5, #0
   204c8:	4f0c      	ldr	r7, [pc, #48]	; (204fc <parse_mdmev+0x68>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   204ca:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   204cc:	4621      	mov	r1, r4
   204ce:	f857 0b04 	ldr.w	r0, [r7], #4
   204d2:	f7f8 fd81 	bl	18fd8 <strcmp>
   204d6:	b908      	cbnz	r0, 204dc <parse_mdmev+0x48>
			*modem_evt = i;
   204d8:	7035      	strb	r5, [r6, #0]
			return 0;
   204da:	e7f2      	b.n	204c2 <parse_mdmev+0x2e>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   204dc:	3501      	adds	r5, #1
   204de:	2d05      	cmp	r5, #5
   204e0:	d1f4      	bne.n	204cc <parse_mdmev+0x38>
	return -ENODATA;
   204e2:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   204e6:	e7ec      	b.n	204c2 <parse_mdmev+0x2e>
		return -EINVAL;
   204e8:	f06f 0015 	mvn.w	r0, #21
   204ec:	e7e9      	b.n	204c2 <parse_mdmev+0x2e>
   204ee:	bf00      	nop
   204f0:	0002af07 	.word	0x0002af07
   204f4:	0002af10 	.word	0x0002af10
   204f8:	00028c80 	.word	0x00028c80
   204fc:	00029014 	.word	0x00029014

00020500 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   20500:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   20502:	f7fa fa77 	bl	1a9f4 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   20506:	4b07      	ldr	r3, [pc, #28]	; (20524 <k_sys_fatal_error_handler+0x24>)
   20508:	9305      	str	r3, [sp, #20]
   2050a:	2302      	movs	r3, #2
   2050c:	9304      	str	r3, [sp, #16]
   2050e:	4806      	ldr	r0, [pc, #24]	; (20528 <k_sys_fatal_error_handler+0x28>)
   20510:	2300      	movs	r3, #0
   20512:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20516:	aa04      	add	r2, sp, #16
   20518:	f7fa fb4c 	bl	1abb4 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   2051c:	2000      	movs	r0, #0
   2051e:	f7fb fc91 	bl	1be44 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   20522:	bf00      	nop
   20524:	0002af88 	.word	0x0002af88
   20528:	00028c48 	.word	0x00028c48

0002052c <on_modem_lib_init.part.0>:

LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
   2052c:	b598      	push	{r3, r4, r7, lr}

	if (ret != 0) {
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   2052e:	481a      	ldr	r0, [pc, #104]	; (20598 <on_modem_lib_init.part.0+0x6c>)
static void on_modem_lib_init(int ret, void *ctx)
   20530:	af00      	add	r7, sp, #0
	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   20532:	f7f8 fd5b 	bl	18fec <strlen>
   20536:	b1a0      	cbz	r0, 20562 <on_modem_lib_init.part.0+0x36>
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   20538:	4917      	ldr	r1, [pc, #92]	; (20598 <on_modem_lib_init.part.0+0x6c>)
   2053a:	4818      	ldr	r0, [pc, #96]	; (2059c <on_modem_lib_init.part.0+0x70>)
   2053c:	f002 fdb4 	bl	230a8 <nrf_modem_at_printf>
		if (err) {
   20540:	b178      	cbz	r0, 20562 <on_modem_lib_init.part.0+0x36>
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
   20542:	466c      	mov	r4, sp
   20544:	b088      	sub	sp, #32
   20546:	466a      	mov	r2, sp
   20548:	4b15      	ldr	r3, [pc, #84]	; (205a0 <on_modem_lib_init.part.0+0x74>)
   2054a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2054e:	2303      	movs	r3, #3
   20550:	f842 3f10 	str.w	r3, [r2, #16]!
   20554:	2300      	movs	r3, #0
   20556:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2055a:	4812      	ldr	r0, [pc, #72]	; (205a4 <on_modem_lib_init.part.0+0x78>)
   2055c:	f7fa fb2a 	bl	1abb4 <z_impl_z_log_msg_static_create>
   20560:	46a5      	mov	sp, r4
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
   20562:	4811      	ldr	r0, [pc, #68]	; (205a8 <on_modem_lib_init.part.0+0x7c>)
   20564:	f7f8 fd42 	bl	18fec <strlen>
   20568:	b1a0      	cbz	r0, 20594 <on_modem_lib_init.part.0+0x68>
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
   2056a:	490f      	ldr	r1, [pc, #60]	; (205a8 <on_modem_lib_init.part.0+0x7c>)
   2056c:	480b      	ldr	r0, [pc, #44]	; (2059c <on_modem_lib_init.part.0+0x70>)
   2056e:	f002 fd9b 	bl	230a8 <nrf_modem_at_printf>
		if (err) {
   20572:	b178      	cbz	r0, 20594 <on_modem_lib_init.part.0+0x68>
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
   20574:	466c      	mov	r4, sp
   20576:	b088      	sub	sp, #32
   20578:	466a      	mov	r2, sp
   2057a:	4b0c      	ldr	r3, [pc, #48]	; (205ac <on_modem_lib_init.part.0+0x80>)
   2057c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20580:	2303      	movs	r3, #3
   20582:	f842 3f10 	str.w	r3, [r2, #16]!
   20586:	2300      	movs	r3, #0
   20588:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2058c:	4805      	ldr	r0, [pc, #20]	; (205a4 <on_modem_lib_init.part.0+0x78>)
   2058e:	f7fa fb11 	bl	1abb4 <z_impl_z_log_msg_static_create>
   20592:	46a5      	mov	sp, r4
		}
	}
}
   20594:	46bd      	mov	sp, r7
   20596:	bd98      	pop	{r3, r4, r7, pc}
   20598:	0002afa5 	.word	0x0002afa5
   2059c:	0002a4b7 	.word	0x0002a4b7
   205a0:	0002b002 	.word	0x0002b002
   205a4:	00028c88 	.word	0x00028c88
   205a8:	0002b02f 	.word	0x0002b02f
   205ac:	0002b047 	.word	0x0002b047

000205b0 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   205b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   205b4:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   205b6:	4b15      	ldr	r3, [pc, #84]	; (2060c <tfm_ns_interface_dispatch+0x5c>)
   205b8:	4604      	mov	r4, r0
   205ba:	f893 8000 	ldrb.w	r8, [r3]
   205be:	460d      	mov	r5, r1
   205c0:	4616      	mov	r6, r2
   205c2:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   205c4:	f1b8 0f00 	cmp.w	r8, #0
   205c8:	d115      	bne.n	205f6 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   205ca:	4668      	mov	r0, sp
   205cc:	f005 fe22 	bl	26214 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   205d0:	463a      	mov	r2, r7
   205d2:	4631      	mov	r1, r6
   205d4:	4628      	mov	r0, r5
   205d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   205d8:	47a0      	blx	r4
   205da:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   205dc:	4668      	mov	r0, sp
   205de:	f005 fe1a 	bl	26216 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   205e2:	f1b8 0f00 	cmp.w	r8, #0
   205e6:	d002      	beq.n	205ee <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   205e8:	4809      	ldr	r0, [pc, #36]	; (20610 <tfm_ns_interface_dispatch+0x60>)
   205ea:	f003 fb25 	bl	23c38 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   205ee:	4620      	mov	r0, r4
   205f0:	b022      	add	sp, #136	; 0x88
   205f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   205f6:	f04f 32ff 	mov.w	r2, #4294967295
   205fa:	f04f 33ff 	mov.w	r3, #4294967295
   205fe:	4804      	ldr	r0, [pc, #16]	; (20610 <tfm_ns_interface_dispatch+0x60>)
   20600:	f003 faa0 	bl	23b44 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   20604:	2800      	cmp	r0, #0
   20606:	d0e0      	beq.n	205ca <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   20608:	241f      	movs	r4, #31
   2060a:	e7f0      	b.n	205ee <tfm_ns_interface_dispatch+0x3e>
   2060c:	2000ddf2 	.word	0x2000ddf2
   20610:	2000c8c8 	.word	0x2000c8c8

00020614 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   20614:	b530      	push	{r4, r5, lr}
   20616:	b095      	sub	sp, #84	; 0x54
   20618:	4605      	mov	r5, r0
   2061a:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   2061c:	2230      	movs	r2, #48	; 0x30
   2061e:	2100      	movs	r1, #0
   20620:	a808      	add	r0, sp, #32
   20622:	f007 ff75 	bl	28510 <memset>
   20626:	233f      	movs	r3, #63	; 0x3f
   20628:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   2062a:	ab07      	add	r3, sp, #28
   2062c:	9303      	str	r3, [sp, #12]
   2062e:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   20630:	9406      	str	r4, [sp, #24]
   20632:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   20636:	b154      	cbz	r4, 2064e <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   20638:	2301      	movs	r3, #1
   2063a:	aa05      	add	r2, sp, #20
   2063c:	9200      	str	r2, [sp, #0]
   2063e:	2100      	movs	r1, #0
   20640:	4804      	ldr	r0, [pc, #16]	; (20654 <psa_generate_random+0x40>)
   20642:	9301      	str	r3, [sp, #4]
   20644:	aa03      	add	r2, sp, #12
   20646:	f000 f807 	bl	20658 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   2064a:	b015      	add	sp, #84	; 0x54
   2064c:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   2064e:	4620      	mov	r0, r4
   20650:	e7fb      	b.n	2064a <psa_generate_random+0x36>
   20652:	bf00      	nop
   20654:	40000100 	.word	0x40000100

00020658 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   20658:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   2065a:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   2065e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   20662:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   20664:	d20d      	bcs.n	20682 <psa_call+0x2a>
        (type < INT16_MIN) ||
   20666:	ea43 0504 	orr.w	r5, r3, r4
   2066a:	2dff      	cmp	r5, #255	; 0xff
   2066c:	d809      	bhi.n	20682 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   2066e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   20672:	4613      	mov	r3, r2
   20674:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   20678:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   2067a:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   2067c:	4803      	ldr	r0, [pc, #12]	; (2068c <psa_call+0x34>)
   2067e:	f7ff bf97 	b.w	205b0 <tfm_ns_interface_dispatch>
}
   20682:	f06f 0080 	mvn.w	r0, #128	; 0x80
   20686:	bc30      	pop	{r4, r5}
   20688:	4770      	bx	lr
   2068a:	bf00      	nop
   2068c:	00017c21 	.word	0x00017c21

00020690 <SystemInit>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   20690:	4b01      	ldr	r3, [pc, #4]	; (20698 <SystemInit+0x8>)
   20692:	4a02      	ldr	r2, [pc, #8]	; (2069c <SystemInit+0xc>)
   20694:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   20696:	4770      	bx	lr
   20698:	2000c670 	.word	0x2000c670
   2069c:	03d09000 	.word	0x03d09000

000206a0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   206a0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   206a2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   206a4:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   206a6:	fab2 f382 	clz	r3, r2
   206aa:	f1c3 031f 	rsb	r3, r3, #31
   206ae:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   206b0:	fa05 f403 	lsl.w	r4, r5, r3
   206b4:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   206b8:	e8d0 6fef 	ldaex	r6, [r0]
   206bc:	4296      	cmp	r6, r2
   206be:	d104      	bne.n	206ca <nrfx_flag32_alloc+0x2a>
   206c0:	e8c0 4fec 	stlex	ip, r4, [r0]
   206c4:	f1bc 0f00 	cmp.w	ip, #0
   206c8:	d1f6      	bne.n	206b8 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   206ca:	d1eb      	bne.n	206a4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   206cc:	4801      	ldr	r0, [pc, #4]	; (206d4 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   206ce:	700b      	strb	r3, [r1, #0]
}
   206d0:	bd70      	pop	{r4, r5, r6, pc}
   206d2:	bf00      	nop
   206d4:	0bad0000 	.word	0x0bad0000

000206d8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   206d8:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   206da:	6803      	ldr	r3, [r0, #0]
   206dc:	40cb      	lsrs	r3, r1
   206de:	07db      	lsls	r3, r3, #31
   206e0:	d410      	bmi.n	20704 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   206e2:	2301      	movs	r3, #1
   206e4:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   206e6:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   206e8:	ea43 0102 	orr.w	r1, r3, r2
   206ec:	e8d0 4fef 	ldaex	r4, [r0]
   206f0:	4294      	cmp	r4, r2
   206f2:	d104      	bne.n	206fe <nrfx_flag32_free+0x26>
   206f4:	e8c0 1fec 	stlex	ip, r1, [r0]
   206f8:	f1bc 0f00 	cmp.w	ip, #0
   206fc:	d1f6      	bne.n	206ec <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   206fe:	d1f2      	bne.n	206e6 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   20700:	4801      	ldr	r0, [pc, #4]	; (20708 <nrfx_flag32_free+0x30>)
}
   20702:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   20704:	4801      	ldr	r0, [pc, #4]	; (2070c <nrfx_flag32_free+0x34>)
   20706:	e7fc      	b.n	20702 <nrfx_flag32_free+0x2a>
   20708:	0bad0000 	.word	0x0bad0000
   2070c:	0bad0004 	.word	0x0bad0004

00020710 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   20710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   20712:	4604      	mov	r4, r0
   20714:	b118      	cbz	r0, 2071e <clock_stop+0xe>
   20716:	2801      	cmp	r0, #1
   20718:	d01e      	beq.n	20758 <clock_stop+0x48>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   2071a:	b003      	add	sp, #12
   2071c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   2071e:	2202      	movs	r2, #2
   20720:	4b27      	ldr	r3, [pc, #156]	; (207c0 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   20722:	4607      	mov	r7, r0
   20724:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20728:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   2072c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20730:	2201      	movs	r2, #1
   20732:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   20734:	2301      	movs	r3, #1
   20736:	f242 7510 	movw	r5, #10000	; 0x2710
   2073a:	4e21      	ldr	r6, [pc, #132]	; (207c0 <clock_stop+0xb0>)
   2073c:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   20740:	b1b4      	cbz	r4, 20770 <clock_stop+0x60>
   20742:	2c01      	cmp	r4, #1
   20744:	d1e9      	bne.n	2071a <clock_stop+0xa>
            if (p_clk_src != NULL)
   20746:	b387      	cbz	r7, 207aa <clock_stop+0x9a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   20748:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   2074c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   20750:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   20752:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   20756:	e013      	b.n	20780 <clock_stop+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20758:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   2075a:	4b19      	ldr	r3, [pc, #100]	; (207c0 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2075c:	f10d 0707 	add.w	r7, sp, #7
   20760:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20764:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   20768:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2076c:	6058      	str	r0, [r3, #4]
   2076e:	e7e1      	b.n	20734 <clock_stop+0x24>
            if (p_clk_src != NULL)
   20770:	b18f      	cbz	r7, 20796 <clock_stop+0x86>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20772:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   20776:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   2077a:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2077c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   20780:	03da      	lsls	r2, r3, #15
   20782:	d5ca      	bpl.n	2071a <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   20784:	f89d 0007 	ldrb.w	r0, [sp, #7]
   20788:	2801      	cmp	r0, #1
   2078a:	d1c6      	bne.n	2071a <clock_stop+0xa>
   2078c:	f006 fbf7 	bl	26f7e <nrfx_busy_wait>
   20790:	3d01      	subs	r5, #1
   20792:	d1d5      	bne.n	20740 <clock_stop+0x30>
   20794:	e7c1      	b.n	2071a <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20796:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   2079a:	03d9      	lsls	r1, r3, #15
   2079c:	d5bd      	bpl.n	2071a <clock_stop+0xa>
   2079e:	2001      	movs	r0, #1
   207a0:	f006 fbed 	bl	26f7e <nrfx_busy_wait>
   207a4:	3d01      	subs	r5, #1
   207a6:	d1f6      	bne.n	20796 <clock_stop+0x86>
   207a8:	e7b7      	b.n	2071a <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   207aa:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   207ae:	03db      	lsls	r3, r3, #15
   207b0:	d5b3      	bpl.n	2071a <clock_stop+0xa>
   207b2:	2001      	movs	r0, #1
   207b4:	f006 fbe3 	bl	26f7e <nrfx_busy_wait>
   207b8:	3d01      	subs	r5, #1
   207ba:	d1f6      	bne.n	207aa <clock_stop+0x9a>
   207bc:	e7ad      	b.n	2071a <clock_stop+0xa>
   207be:	bf00      	nop
   207c0:	40005000 	.word	0x40005000

000207c4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   207c4:	4b04      	ldr	r3, [pc, #16]	; (207d8 <nrfx_clock_init+0x14>)
   207c6:	791a      	ldrb	r2, [r3, #4]
   207c8:	b922      	cbnz	r2, 207d4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   207ca:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   207cc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   207ce:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   207d0:	4802      	ldr	r0, [pc, #8]	; (207dc <nrfx_clock_init+0x18>)
   207d2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   207d4:	4802      	ldr	r0, [pc, #8]	; (207e0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   207d6:	4770      	bx	lr
   207d8:	2000d404 	.word	0x2000d404
   207dc:	0bad0000 	.word	0x0bad0000
   207e0:	0bad000c 	.word	0x0bad000c

000207e4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   207e4:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   207e6:	2005      	movs	r0, #5
   207e8:	f7fa ff02 	bl	1b5f0 <arch_irq_is_enabled>
   207ec:	b910      	cbnz	r0, 207f4 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   207ee:	2005      	movs	r0, #5
   207f0:	f7fa fedc 	bl	1b5ac <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   207f4:	2201      	movs	r2, #1
   207f6:	4b02      	ldr	r3, [pc, #8]	; (20800 <nrfx_clock_enable+0x1c>)
   207f8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   207fc:	bd08      	pop	{r3, pc}
   207fe:	bf00      	nop
   20800:	40005000 	.word	0x40005000

00020804 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   20804:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   20806:	b110      	cbz	r0, 2080e <nrfx_clock_start+0xa>
   20808:	2801      	cmp	r0, #1
   2080a:	d02e      	beq.n	2086a <nrfx_clock_start+0x66>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   2080c:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2080e:	4a1c      	ldr	r2, [pc, #112]	; (20880 <nrfx_clock_start+0x7c>)
   20810:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20814:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   20818:	03c9      	lsls	r1, r1, #15
   2081a:	d40e      	bmi.n	2083a <nrfx_clock_start+0x36>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   2081c:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   20820:	07db      	lsls	r3, r3, #31
   20822:	d513      	bpl.n	2084c <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   20824:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   20828:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   2082c:	3b01      	subs	r3, #1
   2082e:	2b01      	cmp	r3, #1
   20830:	d809      	bhi.n	20846 <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
   20832:	2302      	movs	r3, #2
   20834:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   20838:	e7e8      	b.n	2080c <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2083a:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   2083e:	2b02      	cmp	r3, #2
   20840:	d005      	beq.n	2084e <nrfx_clock_start+0x4a>
   20842:	2b01      	cmp	r3, #1
   20844:	d002      	beq.n	2084c <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   20846:	2000      	movs	r0, #0
   20848:	f7ff ff62 	bl	20710 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   2084c:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   2084e:	4a0c      	ldr	r2, [pc, #48]	; (20880 <nrfx_clock_start+0x7c>)
   20850:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20854:	2300      	movs	r3, #0
   20856:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   2085a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   2085e:	2302      	movs	r3, #2
   20860:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20864:	2301      	movs	r3, #1
   20866:	6093      	str	r3, [r2, #8]
}
   20868:	e7d0      	b.n	2080c <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2086a:	2200      	movs	r2, #0
   2086c:	4b04      	ldr	r3, [pc, #16]	; (20880 <nrfx_clock_start+0x7c>)
   2086e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   20872:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   20876:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2087a:	6018      	str	r0, [r3, #0]
}
   2087c:	e7c6      	b.n	2080c <nrfx_clock_start+0x8>
   2087e:	bf00      	nop
   20880:	40005000 	.word	0x40005000

00020884 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   20884:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20886:	4b17      	ldr	r3, [pc, #92]	; (208e4 <nrfx_power_clock_irq_handler+0x60>)
   20888:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2088c:	b152      	cbz	r2, 208a4 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2088e:	2000      	movs	r0, #0
   20890:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   20894:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   20898:	2201      	movs	r2, #1
   2089a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2089e:	4b12      	ldr	r3, [pc, #72]	; (208e8 <nrfx_power_clock_irq_handler+0x64>)
   208a0:	681b      	ldr	r3, [r3, #0]
   208a2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   208a4:	4b0f      	ldr	r3, [pc, #60]	; (208e4 <nrfx_power_clock_irq_handler+0x60>)
   208a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   208aa:	b18a      	cbz	r2, 208d0 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   208ac:	2200      	movs	r2, #0
   208ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   208b2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   208b6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   208ba:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   208be:	f002 0203 	and.w	r2, r2, #3
   208c2:	2a01      	cmp	r2, #1
   208c4:	f04f 0102 	mov.w	r1, #2
   208c8:	d103      	bne.n	208d2 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   208ca:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   208ce:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   208d0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   208d2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   208d6:	4b04      	ldr	r3, [pc, #16]	; (208e8 <nrfx_power_clock_irq_handler+0x64>)
   208d8:	2001      	movs	r0, #1
}
   208da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   208de:	681b      	ldr	r3, [r3, #0]
   208e0:	4718      	bx	r3
   208e2:	bf00      	nop
   208e4:	40005000 	.word	0x40005000
   208e8:	2000d404 	.word	0x2000d404

000208ec <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   208ec:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   208ee:	4801      	ldr	r0, [pc, #4]	; (208f4 <nrfx_dppi_channel_alloc+0x8>)
   208f0:	f7ff bed6 	b.w	206a0 <nrfx_flag32_alloc>
   208f4:	2000c674 	.word	0x2000c674

000208f8 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
   208f8:	4a06      	ldr	r2, [pc, #24]	; (20914 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   208fa:	f000 001f 	and.w	r0, r0, #31
   208fe:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20902:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
   20906:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2090a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   2090e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
   20912:	4770      	bx	lr
   20914:	40842500 	.word	0x40842500

00020918 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   20918:	4b03      	ldr	r3, [pc, #12]	; (20928 <pin_in_use_by_te+0x10>)
   2091a:	3008      	adds	r0, #8
   2091c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20920:	f3c0 1040 	ubfx	r0, r0, #5, #1
   20924:	4770      	bx	lr
   20926:	bf00      	nop
   20928:	2000c678 	.word	0x2000c678

0002092c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   2092c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2092e:	4c0d      	ldr	r4, [pc, #52]	; (20964 <call_handler+0x38>)
   20930:	f100 0308 	add.w	r3, r0, #8
   20934:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   20938:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2093a:	05da      	lsls	r2, r3, #23
{
   2093c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2093e:	d507      	bpl.n	20950 <call_handler+0x24>
   20940:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   20944:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   20948:	6852      	ldr	r2, [r2, #4]
   2094a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   2094e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   20950:	68a3      	ldr	r3, [r4, #8]
   20952:	b12b      	cbz	r3, 20960 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   20954:	4631      	mov	r1, r6
   20956:	4628      	mov	r0, r5
   20958:	68e2      	ldr	r2, [r4, #12]
    }
}
   2095a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2095e:	4718      	bx	r3
}
   20960:	bd70      	pop	{r4, r5, r6, pc}
   20962:	bf00      	nop
   20964:	2000c678 	.word	0x2000c678

00020968 <release_handler>:
{
   20968:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2096a:	4a12      	ldr	r2, [pc, #72]	; (209b4 <release_handler+0x4c>)
   2096c:	3008      	adds	r0, #8
   2096e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   20972:	05d9      	lsls	r1, r3, #23
   20974:	d51b      	bpl.n	209ae <release_handler+0x46>
   20976:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   2097a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2097e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   20982:	2000      	movs	r0, #0
   20984:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   20988:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   2098c:	f413 7f80 	tst.w	r3, #256	; 0x100
   20990:	d003      	beq.n	2099a <release_handler+0x32>
   20992:	f3c3 2343 	ubfx	r3, r3, #9, #4
   20996:	4299      	cmp	r1, r3
   20998:	d009      	beq.n	209ae <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2099a:	3001      	adds	r0, #1
   2099c:	2820      	cmp	r0, #32
   2099e:	d1f3      	bne.n	20988 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   209a0:	2300      	movs	r3, #0
   209a2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   209a6:	4804      	ldr	r0, [pc, #16]	; (209b8 <release_handler+0x50>)
}
   209a8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   209aa:	f7ff be95 	b.w	206d8 <nrfx_flag32_free>
}
   209ae:	bc10      	pop	{r4}
   209b0:	4770      	bx	lr
   209b2:	bf00      	nop
   209b4:	2000c678 	.word	0x2000c678
   209b8:	2000c6cc 	.word	0x2000c6cc

000209bc <pin_handler_trigger_uninit>:
{
   209bc:	b538      	push	{r3, r4, r5, lr}
   209be:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   209c0:	f7ff ffaa 	bl	20918 <pin_in_use_by_te>
   209c4:	4c0b      	ldr	r4, [pc, #44]	; (209f4 <pin_handler_trigger_uninit+0x38>)
   209c6:	f102 0508 	add.w	r5, r2, #8
   209ca:	b160      	cbz	r0, 209e6 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   209cc:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   209ce:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   209d2:	0b5b      	lsrs	r3, r3, #13
   209d4:	009b      	lsls	r3, r3, #2
   209d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   209da:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   209de:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   209e2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   209e6:	4610      	mov	r0, r2
   209e8:	f7ff ffbe 	bl	20968 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   209ec:	2300      	movs	r3, #0
   209ee:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   209f2:	bd38      	pop	{r3, r4, r5, pc}
   209f4:	2000c678 	.word	0x2000c678

000209f8 <nrfx_gpiote_input_configure>:
{
   209f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   209fc:	4604      	mov	r4, r0
   209fe:	461d      	mov	r5, r3
    if (p_input_config)
   20a00:	b309      	cbz	r1, 20a46 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20a02:	4f4e      	ldr	r7, [pc, #312]	; (20b3c <nrfx_gpiote_input_configure+0x144>)
   20a04:	f100 0808 	add.w	r8, r0, #8
   20a08:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   20a0c:	07b3      	lsls	r3, r6, #30
   20a0e:	d506      	bpl.n	20a1e <nrfx_gpiote_input_configure+0x26>
   20a10:	f7ff ff82 	bl	20918 <pin_in_use_by_te>
   20a14:	b118      	cbz	r0, 20a1e <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   20a16:	484a      	ldr	r0, [pc, #296]	; (20b40 <nrfx_gpiote_input_configure+0x148>)
}
   20a18:	b002      	add	sp, #8
   20a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20a1e:	4849      	ldr	r0, [pc, #292]	; (20b44 <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
   20a20:	f004 031f 	and.w	r3, r4, #31
   20a24:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20a28:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   20a2c:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   20a2e:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   20a32:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20a36:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   20a3a:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
   20a3e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   20a42:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
   20a46:	b19a      	cbz	r2, 20a70 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20a48:	4e3c      	ldr	r6, [pc, #240]	; (20b3c <nrfx_gpiote_input_configure+0x144>)
   20a4a:	f104 0708 	add.w	r7, r4, #8
   20a4e:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   20a52:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
   20a54:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   20a58:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
   20a5a:	d00c      	beq.n	20a76 <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
   20a5c:	2800      	cmp	r0, #0
   20a5e:	d1da      	bne.n	20a16 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   20a60:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
   20a64:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   20a68:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
   20a6c:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   20a70:	bbd5      	cbnz	r5, 20ae8 <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
   20a72:	4835      	ldr	r0, [pc, #212]	; (20b48 <nrfx_gpiote_input_configure+0x150>)
   20a74:	e7d0      	b.n	20a18 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   20a76:	f021 0120 	bic.w	r1, r1, #32
   20a7a:	04c9      	lsls	r1, r1, #19
   20a7c:	0cc9      	lsrs	r1, r1, #19
   20a7e:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   20a82:	2800      	cmp	r0, #0
   20a84:	d0ec      	beq.n	20a60 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   20a86:	2b03      	cmp	r3, #3
   20a88:	d8c5      	bhi.n	20a16 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   20a8a:	6852      	ldr	r2, [r2, #4]
   20a8c:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   20a90:	4662      	mov	r2, ip
   20a92:	0092      	lsls	r2, r2, #2
   20a94:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   20a98:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   20a9c:	b923      	cbnz	r3, 20aa8 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
   20a9e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   20aa2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
   20aa6:	e7db      	b.n	20a60 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   20aa8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   20aac:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   20ab0:	f020 0003 	bic.w	r0, r0, #3
   20ab4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   20ab8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   20abc:	f041 0120 	orr.w	r1, r1, #32
   20ac0:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   20ac4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   20ac8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20acc:	0220      	lsls	r0, r4, #8
   20ace:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   20ad2:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   20ad6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   20ada:	ea40 000e 	orr.w	r0, r0, lr
   20ade:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   20ae2:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   20ae6:	e7bb      	b.n	20a60 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
   20ae8:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   20aea:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   20aee:	f7ff ff3b 	bl	20968 <release_handler>
    if (!handler)
   20af2:	2e00      	cmp	r6, #0
   20af4:	d0bd      	beq.n	20a72 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   20af6:	4d11      	ldr	r5, [pc, #68]	; (20b3c <nrfx_gpiote_input_configure+0x144>)
   20af8:	e9d5 2300 	ldrd	r2, r3, [r5]
   20afc:	4296      	cmp	r6, r2
   20afe:	d101      	bne.n	20b04 <nrfx_gpiote_input_configure+0x10c>
   20b00:	429f      	cmp	r7, r3
   20b02:	d018      	beq.n	20b36 <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   20b04:	4811      	ldr	r0, [pc, #68]	; (20b4c <nrfx_gpiote_input_configure+0x154>)
   20b06:	f10d 0107 	add.w	r1, sp, #7
   20b0a:	f7ff fdc9 	bl	206a0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   20b0e:	4b0e      	ldr	r3, [pc, #56]	; (20b48 <nrfx_gpiote_input_configure+0x150>)
   20b10:	4298      	cmp	r0, r3
   20b12:	d181      	bne.n	20a18 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   20b14:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
   20b18:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20b1c:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   20b1e:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20b20:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   20b24:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20b28:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   20b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   20b30:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   20b34:	e79d      	b.n	20a72 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   20b36:	2200      	movs	r2, #0
   20b38:	e7ee      	b.n	20b18 <nrfx_gpiote_input_configure+0x120>
   20b3a:	bf00      	nop
   20b3c:	2000c678 	.word	0x2000c678
   20b40:	0bad0004 	.word	0x0bad0004
   20b44:	40842500 	.word	0x40842500
   20b48:	0bad0000 	.word	0x0bad0000
   20b4c:	2000c6cc 	.word	0x2000c6cc

00020b50 <nrfx_gpiote_output_configure>:
{
   20b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b52:	4604      	mov	r4, r0
    if (p_config)
   20b54:	b379      	cbz	r1, 20bb6 <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20b56:	4e3a      	ldr	r6, [pc, #232]	; (20c40 <nrfx_gpiote_output_configure+0xf0>)
   20b58:	f100 0708 	add.w	r7, r0, #8
   20b5c:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   20b60:	07ab      	lsls	r3, r5, #30
   20b62:	d404      	bmi.n	20b6e <nrfx_gpiote_output_configure+0x1e>
   20b64:	f7ff fed8 	bl	20918 <pin_in_use_by_te>
   20b68:	b108      	cbz	r0, 20b6e <nrfx_gpiote_output_configure+0x1e>
{
   20b6a:	4836      	ldr	r0, [pc, #216]	; (20c44 <nrfx_gpiote_output_configure+0xf4>)
}
   20b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   20b6e:	f015 0f1c 	tst.w	r5, #28
   20b72:	784b      	ldrb	r3, [r1, #1]
   20b74:	d122      	bne.n	20bbc <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
   20b76:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20b7a:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 20c48 <nrfx_gpiote_output_configure+0xf8>
   20b7e:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   20b82:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   20b86:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   20b8a:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   20b8c:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   20b90:	7809      	ldrb	r1, [r1, #0]
   20b92:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
   20b96:	f02c 0c07 	bic.w	ip, ip, #7
   20b9a:	ea43 030c 	orr.w	r3, r3, ip
   20b9e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   20ba2:	4929      	ldr	r1, [pc, #164]	; (20c48 <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20ba4:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   20ba8:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   20baa:	f045 0503 	orr.w	r5, r5, #3
   20bae:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   20bb2:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
   20bb6:	b922      	cbnz	r2, 20bc2 <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
   20bb8:	4824      	ldr	r0, [pc, #144]	; (20c4c <nrfx_gpiote_output_configure+0xfc>)
   20bba:	e7d7      	b.n	20b6c <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   20bbc:	2b01      	cmp	r3, #1
   20bbe:	d1da      	bne.n	20b76 <nrfx_gpiote_output_configure+0x26>
   20bc0:	e7d3      	b.n	20b6a <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20bc2:	4e1f      	ldr	r6, [pc, #124]	; (20c40 <nrfx_gpiote_output_configure+0xf0>)
   20bc4:	f104 0708 	add.w	r7, r4, #8
   20bc8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   20bcc:	0783      	lsls	r3, r0, #30
   20bce:	d5cc      	bpl.n	20b6a <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   20bd0:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   20bd4:	2300      	movs	r3, #0
   20bd6:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   20bd8:	f020 0020 	bic.w	r0, r0, #32
   20bdc:	0089      	lsls	r1, r1, #2
   20bde:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   20be2:	04c0      	lsls	r0, r0, #19
   20be4:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   20be8:	0cc0      	lsrs	r0, r0, #19
   20bea:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   20bee:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   20bf2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   20bf6:	7855      	ldrb	r5, [r2, #1]
   20bf8:	2d00      	cmp	r5, #0
   20bfa:	d0dd      	beq.n	20bb8 <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   20bfc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   20c00:	7892      	ldrb	r2, [r2, #2]
   20c02:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   20c06:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   20c0a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20c0e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   20c12:	0223      	lsls	r3, r4, #8
   20c14:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   20c18:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20c1a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   20c1e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   20c22:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20c24:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   20c26:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   20c2a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20c2e:	4313      	orrs	r3, r2
   20c30:	f040 0020 	orr.w	r0, r0, #32
   20c34:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   20c38:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   20c3c:	e7bc      	b.n	20bb8 <nrfx_gpiote_output_configure+0x68>
   20c3e:	bf00      	nop
   20c40:	2000c678 	.word	0x2000c678
   20c44:	0bad0004 	.word	0x0bad0004
   20c48:	40842500 	.word	0x40842500
   20c4c:	0bad0000 	.word	0x0bad0000

00020c50 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   20c50:	4b01      	ldr	r3, [pc, #4]	; (20c58 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   20c52:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   20c56:	4770      	bx	lr
   20c58:	2000c678 	.word	0x2000c678

00020c5c <nrfx_gpiote_channel_get>:
{
   20c5c:	b508      	push	{r3, lr}
   20c5e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   20c60:	f7ff fe5a 	bl	20918 <pin_in_use_by_te>
   20c64:	b138      	cbz	r0, 20c76 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20c66:	4b05      	ldr	r3, [pc, #20]	; (20c7c <nrfx_gpiote_channel_get+0x20>)
   20c68:	3208      	adds	r2, #8
   20c6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   20c6e:	4804      	ldr	r0, [pc, #16]	; (20c80 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20c70:	0b5b      	lsrs	r3, r3, #13
   20c72:	700b      	strb	r3, [r1, #0]
}
   20c74:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   20c76:	4803      	ldr	r0, [pc, #12]	; (20c84 <nrfx_gpiote_channel_get+0x28>)
   20c78:	e7fc      	b.n	20c74 <nrfx_gpiote_channel_get+0x18>
   20c7a:	bf00      	nop
   20c7c:	2000c678 	.word	0x2000c678
   20c80:	0bad0000 	.word	0x0bad0000
   20c84:	0bad0004 	.word	0x0bad0004

00020c88 <nrfx_gpiote_init>:
{
   20c88:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   20c8a:	4c0f      	ldr	r4, [pc, #60]	; (20cc8 <nrfx_gpiote_init+0x40>)
   20c8c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   20c90:	b9bd      	cbnz	r5, 20cc2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   20c92:	2240      	movs	r2, #64	; 0x40
   20c94:	4629      	mov	r1, r5
   20c96:	f104 0010 	add.w	r0, r4, #16
   20c9a:	f007 fc39 	bl	28510 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   20c9e:	2031      	movs	r0, #49	; 0x31
   20ca0:	f7fa fc84 	bl	1b5ac <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20ca4:	4b09      	ldr	r3, [pc, #36]	; (20ccc <nrfx_gpiote_init+0x44>)
    return err_code;
   20ca6:	480a      	ldr	r0, [pc, #40]	; (20cd0 <nrfx_gpiote_init+0x48>)
   20ca8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   20cac:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   20cb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   20cb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   20cb8:	2301      	movs	r3, #1
   20cba:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   20cbe:	6563      	str	r3, [r4, #84]	; 0x54
}
   20cc0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   20cc2:	4804      	ldr	r0, [pc, #16]	; (20cd4 <nrfx_gpiote_init+0x4c>)
   20cc4:	e7fc      	b.n	20cc0 <nrfx_gpiote_init+0x38>
   20cc6:	bf00      	nop
   20cc8:	2000c678 	.word	0x2000c678
   20ccc:	40031000 	.word	0x40031000
   20cd0:	0bad0000 	.word	0x0bad0000
   20cd4:	0bad0005 	.word	0x0bad0005

00020cd8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   20cd8:	4b03      	ldr	r3, [pc, #12]	; (20ce8 <nrfx_gpiote_is_init+0x10>)
   20cda:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   20cde:	3800      	subs	r0, #0
   20ce0:	bf18      	it	ne
   20ce2:	2001      	movne	r0, #1
   20ce4:	4770      	bx	lr
   20ce6:	bf00      	nop
   20ce8:	2000c678 	.word	0x2000c678

00020cec <nrfx_gpiote_channel_free>:
{
   20cec:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   20cee:	4801      	ldr	r0, [pc, #4]	; (20cf4 <nrfx_gpiote_channel_free+0x8>)
   20cf0:	f7ff bcf2 	b.w	206d8 <nrfx_flag32_free>
   20cf4:	2000c6c8 	.word	0x2000c6c8

00020cf8 <nrfx_gpiote_channel_alloc>:
{
   20cf8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   20cfa:	4801      	ldr	r0, [pc, #4]	; (20d00 <nrfx_gpiote_channel_alloc+0x8>)
   20cfc:	f7ff bcd0 	b.w	206a0 <nrfx_flag32_alloc>
   20d00:	2000c6c8 	.word	0x2000c6c8

00020d04 <nrfx_gpiote_trigger_enable>:
{
   20d04:	4602      	mov	r2, r0
   20d06:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20d08:	f7ff fe06 	bl	20918 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20d0c:	4b1b      	ldr	r3, [pc, #108]	; (20d7c <nrfx_gpiote_trigger_enable+0x78>)
   20d0e:	f102 0408 	add.w	r4, r2, #8
   20d12:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20d16:	b1c8      	cbz	r0, 20d4c <nrfx_gpiote_trigger_enable+0x48>
   20d18:	f013 0402 	ands.w	r4, r3, #2
   20d1c:	d116      	bne.n	20d4c <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
   20d1e:	4818      	ldr	r0, [pc, #96]	; (20d80 <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20d20:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   20d22:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20d24:	5084      	str	r4, [r0, r2]
   20d26:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   20d28:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   20d2c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   20d30:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   20d34:	f040 0001 	orr.w	r0, r0, #1
   20d38:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   20d3c:	b129      	cbz	r1, 20d4a <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   20d3e:	2201      	movs	r2, #1
   20d40:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   20d44:	4a0f      	ldr	r2, [pc, #60]	; (20d84 <nrfx_gpiote_trigger_enable+0x80>)
   20d46:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   20d4a:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20d4c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   20d50:	2b04      	cmp	r3, #4
   20d52:	d00e      	beq.n	20d72 <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   20d54:	2b05      	cmp	r3, #5
   20d56:	d00e      	beq.n	20d76 <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
   20d58:	4b0b      	ldr	r3, [pc, #44]	; (20d88 <nrfx_gpiote_trigger_enable+0x84>)
   20d5a:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
   20d5c:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   20d60:	40d9      	lsrs	r1, r3
   20d62:	f001 0101 	and.w	r1, r1, #1
   20d66:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   20d68:	4610      	mov	r0, r2
}
   20d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   20d6e:	f7ff bdc3 	b.w	208f8 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   20d72:	2103      	movs	r1, #3
   20d74:	e7f8      	b.n	20d68 <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   20d76:	2102      	movs	r1, #2
   20d78:	e7f6      	b.n	20d68 <nrfx_gpiote_trigger_enable+0x64>
   20d7a:	bf00      	nop
   20d7c:	2000c678 	.word	0x2000c678
   20d80:	40031100 	.word	0x40031100
   20d84:	40031000 	.word	0x40031000
   20d88:	40842500 	.word	0x40842500

00020d8c <nrfx_gpiote_trigger_disable>:
{
   20d8c:	b508      	push	{r3, lr}
   20d8e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20d90:	f7ff fdc2 	bl	20918 <pin_in_use_by_te>
   20d94:	b1c0      	cbz	r0, 20dc8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20d96:	4b0f      	ldr	r3, [pc, #60]	; (20dd4 <nrfx_gpiote_trigger_disable+0x48>)
   20d98:	f102 0108 	add.w	r1, r2, #8
   20d9c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20da0:	0799      	lsls	r1, r3, #30
   20da2:	d411      	bmi.n	20dc8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   20da4:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20da6:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   20da8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   20daa:	490b      	ldr	r1, [pc, #44]	; (20dd8 <nrfx_gpiote_trigger_disable+0x4c>)
   20dac:	009b      	lsls	r3, r3, #2
   20dae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20db2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   20db6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   20dba:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   20dbe:	f022 0203 	bic.w	r2, r2, #3
   20dc2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   20dc6:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   20dc8:	2100      	movs	r1, #0
}
   20dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   20dce:	4610      	mov	r0, r2
   20dd0:	f7ff bd92 	b.w	208f8 <nrf_gpio_cfg_sense_set>
   20dd4:	2000c678 	.word	0x2000c678
   20dd8:	40031000 	.word	0x40031000

00020ddc <nrfx_gpiote_pin_uninit>:
{
   20ddc:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   20dde:	4b0c      	ldr	r3, [pc, #48]	; (20e10 <nrfx_gpiote_pin_uninit+0x34>)
   20de0:	f100 0208 	add.w	r2, r0, #8
   20de4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   20de8:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   20dea:	07db      	lsls	r3, r3, #31
   20dec:	d50d      	bpl.n	20e0a <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
   20dee:	f7ff ffcd 	bl	20d8c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   20df2:	4620      	mov	r0, r4
   20df4:	f7ff fde2 	bl	209bc <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   20df8:	2202      	movs	r2, #2
   20dfa:	4b06      	ldr	r3, [pc, #24]	; (20e14 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
   20dfc:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   20e00:	3480      	adds	r4, #128	; 0x80
   20e02:	4805      	ldr	r0, [pc, #20]	; (20e18 <nrfx_gpiote_pin_uninit+0x3c>)
   20e04:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   20e08:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   20e0a:	4804      	ldr	r0, [pc, #16]	; (20e1c <nrfx_gpiote_pin_uninit+0x40>)
   20e0c:	e7fc      	b.n	20e08 <nrfx_gpiote_pin_uninit+0x2c>
   20e0e:	bf00      	nop
   20e10:	2000c678 	.word	0x2000c678
   20e14:	40842500 	.word	0x40842500
   20e18:	0bad0000 	.word	0x0bad0000
   20e1c:	0bad0004 	.word	0x0bad0004

00020e20 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   20e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   20e24:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   20e26:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20e28:	462c      	mov	r4, r5
{
   20e2a:	4b4d      	ldr	r3, [pc, #308]	; (20f60 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   20e2c:	484d      	ldr	r0, [pc, #308]	; (20f64 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20e2e:	494e      	ldr	r1, [pc, #312]	; (20f68 <nrfx_gpiote_irq_handler+0x148>)
{
   20e30:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20e32:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   20e34:	b136      	cbz	r6, 20e44 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   20e36:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   20e3a:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20e3c:	bf1e      	ittt	ne
   20e3e:	601c      	strne	r4, [r3, #0]
   20e40:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   20e42:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20e44:	3304      	adds	r3, #4
   20e46:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   20e48:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20e4c:	d1f1      	bne.n	20e32 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20e4e:	4f45      	ldr	r7, [pc, #276]	; (20f64 <nrfx_gpiote_irq_handler+0x144>)
   20e50:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   20e54:	b193      	cbz	r3, 20e7c <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
   20e56:	4e45      	ldr	r6, [pc, #276]	; (20f6c <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   20e58:	f10d 090c 	add.w	r9, sp, #12
   20e5c:	6a33      	ldr	r3, [r6, #32]
   20e5e:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   20e60:	6233      	str	r3, [r6, #32]
   20e62:	f04f 0a01 	mov.w	sl, #1
            while (latch[i])
   20e66:	9803      	ldr	r0, [sp, #12]
   20e68:	b970      	cbnz	r0, 20e88 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20e6a:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
   20e6e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   20e72:	6a33      	ldr	r3, [r6, #32]
   20e74:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   20e76:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
   20e78:	2b00      	cmp	r3, #0
   20e7a:	d1f2      	bne.n	20e62 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   20e7c:	2401      	movs	r4, #1
    while (mask)
   20e7e:	2d00      	cmp	r5, #0
   20e80:	d156      	bne.n	20f30 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   20e82:	b005      	add	sp, #20
   20e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   20e88:	fa90 fba0 	rbit	fp, r0
   20e8c:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20e90:	4a37      	ldr	r2, [pc, #220]	; (20f70 <nrfx_gpiote_irq_handler+0x150>)
   20e92:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   20e96:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
   20e9a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   20e9e:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   20ea2:	f819 300c 	ldrb.w	r3, [r9, ip]
   20ea6:	fa0a f404 	lsl.w	r4, sl, r4
   20eaa:	ea23 0304 	bic.w	r3, r3, r4
   20eae:	f809 300c 	strb.w	r3, [r9, ip]
   20eb2:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   20eb6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   20eba:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
   20ebe:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20ec0:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   20ec2:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
   20ec6:	d518      	bpl.n	20efa <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
   20ec8:	4611      	mov	r1, r2
   20eca:	4658      	mov	r0, fp
   20ecc:	9301      	str	r3, [sp, #4]
   20ece:	f7ff fd2d 	bl	2092c <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   20ed2:	9b01      	ldr	r3, [sp, #4]
   20ed4:	b2e4      	uxtb	r4, r4
   20ed6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
   20eda:	f3c3 4301 	ubfx	r3, r3, #16, #2
   20ede:	429c      	cmp	r4, r3
   20ee0:	d107      	bne.n	20ef2 <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   20ee2:	2100      	movs	r1, #0
   20ee4:	4658      	mov	r0, fp
   20ee6:	f7ff fd07 	bl	208f8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   20eea:	4621      	mov	r1, r4
   20eec:	4658      	mov	r0, fp
   20eee:	f7ff fd03 	bl	208f8 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   20ef2:	fa0a f00b 	lsl.w	r0, sl, fp
   20ef6:	6230      	str	r0, [r6, #32]
}
   20ef8:	e7b5      	b.n	20e66 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20efa:	2c02      	cmp	r4, #2
   20efc:	d10c      	bne.n	20f18 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   20efe:	2103      	movs	r1, #3
   20f00:	4658      	mov	r0, fp
   20f02:	f7ff fcf9 	bl	208f8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   20f06:	f008 0305 	and.w	r3, r8, #5
   20f0a:	2b01      	cmp	r3, #1
   20f0c:	d1f1      	bne.n	20ef2 <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
   20f0e:	4641      	mov	r1, r8
   20f10:	4658      	mov	r0, fp
   20f12:	f7ff fd0b 	bl	2092c <call_handler>
   20f16:	e7ec      	b.n	20ef2 <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   20f18:	2102      	movs	r1, #2
   20f1a:	4658      	mov	r0, fp
   20f1c:	9201      	str	r2, [sp, #4]
   20f1e:	f7ff fceb 	bl	208f8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   20f22:	9a01      	ldr	r2, [sp, #4]
   20f24:	2a03      	cmp	r2, #3
   20f26:	d0f2      	beq.n	20f0e <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   20f28:	2c03      	cmp	r4, #3
   20f2a:	d1e2      	bne.n	20ef2 <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   20f2c:	428a      	cmp	r2, r1
   20f2e:	e7ed      	b.n	20f0c <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
   20f30:	fa95 f3a5 	rbit	r3, r5
   20f34:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   20f38:	fa04 f203 	lsl.w	r2, r4, r3
   20f3c:	009b      	lsls	r3, r3, #2
   20f3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20f42:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   20f46:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   20f4a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   20f4e:	f3c0 2004 	ubfx	r0, r0, #8, #5
   20f52:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   20f56:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   20f5a:	f7ff fce7 	bl	2092c <call_handler>
   20f5e:	e78e      	b.n	20e7e <nrfx_gpiote_irq_handler+0x5e>
   20f60:	40031100 	.word	0x40031100
   20f64:	40031000 	.word	0x40031000
   20f68:	40031120 	.word	0x40031120
   20f6c:	40842500 	.word	0x40842500
   20f70:	2000c678 	.word	0x2000c678

00020f74 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   20f74:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   20f76:	4c08      	ldr	r4, [pc, #32]	; (20f98 <nrfx_ipc_init+0x24>)
{
   20f78:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   20f7a:	7923      	ldrb	r3, [r4, #4]
{
   20f7c:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   20f7e:	b943      	cbnz	r3, 20f92 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   20f80:	202a      	movs	r0, #42	; 0x2a
   20f82:	f7fa fb13 	bl	1b5ac <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   20f86:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   20f88:	4804      	ldr	r0, [pc, #16]	; (20f9c <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   20f8a:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   20f8c:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   20f8e:	60a5      	str	r5, [r4, #8]
}
   20f90:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   20f92:	4803      	ldr	r0, [pc, #12]	; (20fa0 <nrfx_ipc_init+0x2c>)
   20f94:	e7fc      	b.n	20f90 <nrfx_ipc_init+0x1c>
   20f96:	bf00      	nop
   20f98:	2000d40c 	.word	0x2000d40c
   20f9c:	0bad0000 	.word	0x0bad0000
   20fa0:	0bad000c 	.word	0x0bad000c

00020fa4 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   20fa4:	2300      	movs	r3, #0
{
   20fa6:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   20fa8:	4a0d      	ldr	r2, [pc, #52]	; (20fe0 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   20faa:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   20fae:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   20fb2:	3301      	adds	r3, #1
   20fb4:	2b08      	cmp	r3, #8
   20fb6:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   20fba:	d1f6      	bne.n	20faa <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   20fbc:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   20fbe:	4a08      	ldr	r2, [pc, #32]	; (20fe0 <nrfx_ipc_config_load+0x3c>)
   20fc0:	f100 011c 	add.w	r1, r0, #28
   20fc4:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   20fc8:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   20fcc:	3301      	adds	r3, #1
   20fce:	2b08      	cmp	r3, #8
   20fd0:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   20fd4:	d1f6      	bne.n	20fc4 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   20fd6:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   20fd8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   20fdc:	bd30      	pop	{r4, r5, pc}
   20fde:	bf00      	nop
   20fe0:	4002a000 	.word	0x4002a000

00020fe4 <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   20fe4:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   20fe6:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   20fea:	4a13      	ldr	r2, [pc, #76]	; (21038 <nrfx_ipc_uninit+0x54>)
   20fec:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   20ff0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   20ff4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   20ff8:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   20ffc:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   21000:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   21004:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   21008:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   2100c:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   21010:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   21014:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   21018:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   2101c:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   21020:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   21024:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   21028:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   2102c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   21030:	4a02      	ldr	r2, [pc, #8]	; (2103c <nrfx_ipc_uninit+0x58>)
   21032:	7113      	strb	r3, [r2, #4]
}
   21034:	4770      	bx	lr
   21036:	bf00      	nop
   21038:	4002a000 	.word	0x4002a000
   2103c:	2000d40c 	.word	0x2000d40c

00021040 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   21040:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   21042:	4a02      	ldr	r2, [pc, #8]	; (2104c <nrfx_ipc_receive_event_enable+0xc>)
   21044:	4083      	lsls	r3, r0
   21046:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2104a:	4770      	bx	lr
   2104c:	4002a000 	.word	0x4002a000

00021050 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   21050:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   21052:	4a02      	ldr	r2, [pc, #8]	; (2105c <nrfx_ipc_receive_event_disable+0xc>)
   21054:	4083      	lsls	r3, r0
   21056:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   2105a:	4770      	bx	lr
   2105c:	4002a000 	.word	0x4002a000

00021060 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   21060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   21062:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21064:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   21066:	4b0b      	ldr	r3, [pc, #44]	; (21094 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   21068:	4d0b      	ldr	r5, [pc, #44]	; (21098 <nrfx_ipc_irq_handler+0x38>)
   2106a:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   2106e:	b904      	cbnz	r4, 21072 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   21070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   21072:	fa94 f0a4 	rbit	r0, r4
   21076:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   2107a:	fa06 f300 	lsl.w	r3, r6, r0
   2107e:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21082:	4b06      	ldr	r3, [pc, #24]	; (2109c <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   21084:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21086:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   21088:	682b      	ldr	r3, [r5, #0]
   2108a:	2b00      	cmp	r3, #0
   2108c:	d0ef      	beq.n	2106e <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   2108e:	68a9      	ldr	r1, [r5, #8]
   21090:	4798      	blx	r3
   21092:	e7ec      	b.n	2106e <nrfx_ipc_irq_handler+0xe>
   21094:	4002a000 	.word	0x4002a000
   21098:	2000d40c 	.word	0x2000d40c
   2109c:	4002a100 	.word	0x4002a100

000210a0 <spim_pin_uninit>:
    return err_code;
}

static void spim_pin_uninit(uint32_t pin)
{
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   210a0:	1c43      	adds	r3, r0, #1
   210a2:	d006      	beq.n	210b2 <spim_pin_uninit+0x12>
    reg->PIN_CNF[pin_number] = cnf;
   210a4:	2202      	movs	r2, #2
   210a6:	4b03      	ldr	r3, [pc, #12]	; (210b4 <spim_pin_uninit+0x14>)
    *p_pin = pin_number & 0x1F;
   210a8:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
   210ac:	3080      	adds	r0, #128	; 0x80
   210ae:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    {
        return;
    }

    nrf_gpio_cfg_default(pin);
}
   210b2:	4770      	bx	lr
   210b4:	40842500 	.word	0x40842500

000210b8 <nrf_gpio_pin_write>:
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   210b8:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
   210ba:	f000 001f 	and.w	r0, r0, #31
   210be:	4a03      	ldr	r2, [pc, #12]	; (210cc <nrf_gpio_pin_write+0x14>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   210c0:	4083      	lsls	r3, r0
    if (value == 0)
   210c2:	b909      	cbnz	r1, 210c8 <nrf_gpio_pin_write+0x10>
    p_reg->OUTCLR = clr_mask;
   210c4:	60d3      	str	r3, [r2, #12]
}
   210c6:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
   210c8:	6093      	str	r3, [r2, #8]
}
   210ca:	4770      	bx	lr
   210cc:	40842500 	.word	0x40842500

000210d0 <nrfx_spim_init>:
{
   210d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   210d4:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   210d6:	4d4e      	ldr	r5, [pc, #312]	; (21210 <nrfx_spim_init+0x140>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   210d8:	7901      	ldrb	r1, [r0, #4]
{
   210da:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   210dc:	014f      	lsls	r7, r1, #5
   210de:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   210e2:	7f08      	ldrb	r0, [r1, #28]
   210e4:	2800      	cmp	r0, #0
   210e6:	f040 8090 	bne.w	2120a <nrfx_spim_init+0x13a>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   210ea:	f8d6 8000 	ldr.w	r8, [r6]
    p_cb->handler = handler;
   210ee:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
   210f0:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   210f2:	7be0      	ldrb	r0, [r4, #15]
   210f4:	7f8a      	ldrb	r2, [r1, #30]
   210f6:	f360 0200 	bfi	r2, r0, #0, #1
   210fa:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   210fc:	7920      	ldrb	r0, [r4, #4]
   210fe:	b2d2      	uxtb	r2, r2
   21100:	f360 0241 	bfi	r2, r0, #1, #1
   21104:	778a      	strb	r2, [r1, #30]
    p_cb->ss_pin = p_config->ss_pin;
   21106:	78e3      	ldrb	r3, [r4, #3]
   21108:	77cb      	strb	r3, [r1, #31]
    if (!p_config->skip_gpio_cfg)
   2110a:	7be3      	ldrb	r3, [r4, #15]
   2110c:	f8d6 a000 	ldr.w	sl, [r6]
   21110:	2b00      	cmp	r3, #0
   21112:	d138      	bne.n	21186 <nrfx_spim_init+0xb6>
        nrf_gpio_pin_write(p_config->sck_pin,
   21114:	7b21      	ldrb	r1, [r4, #12]
   21116:	7820      	ldrb	r0, [r4, #0]
   21118:	2901      	cmp	r1, #1
   2111a:	bf94      	ite	ls
   2111c:	2100      	movls	r1, #0
   2111e:	2101      	movhi	r1, #1
   21120:	f7ff ffca 	bl	210b8 <nrf_gpio_pin_write>
    reg->PIN_CNF[pin_number] = cnf;
   21124:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   21126:	7823      	ldrb	r3, [r4, #0]
    reg->PIN_CNF[pin_number] = cnf;
   21128:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 21214 <nrfx_spim_init+0x144>
    *p_pin = pin_number & 0x1F;
   2112c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   21130:	3380      	adds	r3, #128	; 0x80
   21132:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   21136:	7863      	ldrb	r3, [r4, #1]
   21138:	2bff      	cmp	r3, #255	; 0xff
   2113a:	d00b      	beq.n	21154 <nrfx_spim_init+0x84>
    *p_pin = pin_number & 0x1F;
   2113c:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21140:	409a      	lsls	r2, r3
    p_reg->OUTCLR = clr_mask;
   21142:	f8c9 200c 	str.w	r2, [r9, #12]
    reg->PIN_CNF[pin_number] = cnf;
   21146:	2203      	movs	r2, #3
    *p_pin = pin_number & 0x1F;
   21148:	7863      	ldrb	r3, [r4, #1]
   2114a:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   2114e:	3380      	adds	r3, #128	; 0x80
   21150:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   21154:	78a3      	ldrb	r3, [r4, #2]
   21156:	2bff      	cmp	r3, #255	; 0xff
   21158:	d006      	beq.n	21168 <nrfx_spim_init+0x98>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2115a:	7ba2      	ldrb	r2, [r4, #14]
    *p_pin = pin_number & 0x1F;
   2115c:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   21160:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
   21162:	3380      	adds	r3, #128	; 0x80
   21164:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   21168:	78e0      	ldrb	r0, [r4, #3]
   2116a:	28ff      	cmp	r0, #255	; 0xff
   2116c:	d00b      	beq.n	21186 <nrfx_spim_init+0xb6>
                               p_config->ss_active_high ? 0 : 1);
   2116e:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
   21170:	f081 0101 	eor.w	r1, r1, #1
   21174:	f7ff ffa0 	bl	210b8 <nrf_gpio_pin_write>
   21178:	2203      	movs	r2, #3
    *p_pin = pin_number & 0x1F;
   2117a:	78e3      	ldrb	r3, [r4, #3]
   2117c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   21180:	3380      	adds	r3, #128	; 0x80
   21182:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   21186:	7c23      	ldrb	r3, [r4, #16]
   21188:	b993      	cbnz	r3, 211b0 <nrfx_spim_init+0xe0>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   2118a:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   2118c:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   2118e:	2bff      	cmp	r3, #255	; 0xff
   21190:	bf18      	it	ne
   21192:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   21194:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   21196:	bf08      	it	eq
   21198:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   2119c:	2bff      	cmp	r3, #255	; 0xff
   2119e:	bf08      	it	eq
   211a0:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   211a4:	f8ca 1508 	str.w	r1, [sl, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   211a8:	f8ca 250c 	str.w	r2, [sl, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   211ac:	f8ca 3510 	str.w	r3, [sl, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   211b0:	68a3      	ldr	r3, [r4, #8]
   211b2:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   211b6:	7b63      	ldrb	r3, [r4, #13]
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   211b8:	7b22      	ldrb	r2, [r4, #12]
   211ba:	3b00      	subs	r3, #0
   211bc:	bf18      	it	ne
   211be:	2301      	movne	r3, #1
    switch (spi_mode)
   211c0:	2a02      	cmp	r2, #2
   211c2:	d01c      	beq.n	211fe <nrfx_spim_init+0x12e>
   211c4:	2a03      	cmp	r2, #3
   211c6:	d01d      	beq.n	21204 <nrfx_spim_init+0x134>
   211c8:	2a01      	cmp	r2, #1
   211ca:	d101      	bne.n	211d0 <nrfx_spim_init+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   211cc:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   211d0:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   211d4:	79a3      	ldrb	r3, [r4, #6]
   211d6:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   211da:	2307      	movs	r3, #7
   211dc:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    if (p_cb->handler)
   211e0:	59eb      	ldr	r3, [r5, r7]
   211e2:	b123      	cbz	r3, 211ee <nrfx_spim_init+0x11e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   211e4:	6830      	ldr	r0, [r6, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   211e6:	f340 3007 	sbfx	r0, r0, #12, #8
   211ea:	f7fa f9df 	bl	1b5ac <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   211ee:	2300      	movs	r3, #0
   211f0:	443d      	add	r5, r7
   211f2:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   211f4:	2301      	movs	r3, #1
    return err_code;
   211f6:	4808      	ldr	r0, [pc, #32]	; (21218 <nrfx_spim_init+0x148>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   211f8:	772b      	strb	r3, [r5, #28]
}
   211fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   211fe:	f043 0304 	orr.w	r3, r3, #4
        break;
   21202:	e7e5      	b.n	211d0 <nrfx_spim_init+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   21204:	f043 0306 	orr.w	r3, r3, #6
        break;
   21208:	e7e2      	b.n	211d0 <nrfx_spim_init+0x100>
        return err_code;
   2120a:	4804      	ldr	r0, [pc, #16]	; (2121c <nrfx_spim_init+0x14c>)
   2120c:	e7f5      	b.n	211fa <nrfx_spim_init+0x12a>
   2120e:	bf00      	nop
   21210:	2000d418 	.word	0x2000d418
   21214:	40842500 	.word	0x40842500
   21218:	0bad0000 	.word	0x0bad0000
   2121c:	0bad0005 	.word	0x0bad0005

00021220 <nrfx_spim_uninit>:

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   21220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21222:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   21224:	4d1f      	ldr	r5, [pc, #124]	; (212a4 <nrfx_spim_uninit+0x84>)
   21226:	015e      	lsls	r6, r3, #5
   21228:	eb05 1743 	add.w	r7, r5, r3, lsl #5
   2122c:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   2122e:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   21230:	b1b3      	cbz	r3, 21260 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   21232:	f344 3007 	sbfx	r0, r4, #12, #8
   21236:	f7fa f9c7 	bl	1b5c8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   2123a:	4b1b      	ldr	r3, [pc, #108]	; (212a8 <nrfx_spim_uninit+0x88>)
   2123c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   21240:	7f7b      	ldrb	r3, [r7, #29]
   21242:	b16b      	cbz	r3, 21260 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21244:	2301      	movs	r3, #1
   21246:	2764      	movs	r7, #100	; 0x64
   21248:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2124a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   2124e:	b923      	cbnz	r3, 2125a <nrfx_spim_uninit+0x3a>
   21250:	2001      	movs	r0, #1
   21252:	f005 fe94 	bl	26f7e <nrfx_busy_wait>
   21256:	3f01      	subs	r7, #1
   21258:	d1f7      	bne.n	2124a <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
   2125a:	2200      	movs	r2, #0
   2125c:	19ab      	adds	r3, r5, r6
   2125e:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   21260:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   21262:	19a9      	adds	r1, r5, r6
   21264:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   21268:	7f8b      	ldrb	r3, [r1, #30]
   2126a:	07db      	lsls	r3, r3, #31
   2126c:	d415      	bmi.n	2129a <nrfx_spim_uninit+0x7a>
    return p_reg->PSEL.SCK;
   2126e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   21272:	f7ff ff15 	bl	210a0 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   21276:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   2127a:	f7ff ff11 	bl	210a0 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   2127e:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   21282:	f7ff ff0d 	bl	210a0 <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   21286:	7fcb      	ldrb	r3, [r1, #31]
   21288:	2bff      	cmp	r3, #255	; 0xff
   2128a:	d006      	beq.n	2129a <nrfx_spim_uninit+0x7a>
   2128c:	2102      	movs	r1, #2
   2128e:	4a07      	ldr	r2, [pc, #28]	; (212ac <nrfx_spim_uninit+0x8c>)
    *p_pin = pin_number & 0x1F;
   21290:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   21294:	3380      	adds	r3, #128	; 0x80
   21296:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   2129a:	2300      	movs	r3, #0
   2129c:	4435      	add	r5, r6
   2129e:	772b      	strb	r3, [r5, #28]
}
   212a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   212a2:	bf00      	nop
   212a4:	2000d418 	.word	0x2000d418
   212a8:	00080152 	.word	0x00080152
   212ac:	40842500 	.word	0x40842500

000212b0 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   212b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   212b4:	4f38      	ldr	r7, [pc, #224]	; (21398 <nrfx_spim_xfer+0xe8>)
   212b6:	7903      	ldrb	r3, [r0, #4]
{
   212b8:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   212ba:	eb07 1843 	add.w	r8, r7, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   212be:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   212c2:	4681      	mov	r9, r0
   212c4:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
   212c6:	015e      	lsls	r6, r3, #5
   212c8:	2a00      	cmp	r2, #0
   212ca:	d163      	bne.n	21394 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   212cc:	59ba      	ldr	r2, [r7, r6]
   212ce:	b12a      	cbz	r2, 212dc <nrfx_spim_xfer+0x2c>
   212d0:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   212d4:	bf04      	itt	eq
   212d6:	2201      	moveq	r2, #1
   212d8:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   212dc:	eb07 0c06 	add.w	ip, r7, r6
   212e0:	f10c 0c0c 	add.w	ip, ip, #12
   212e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   212e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   212ec:	2101      	movs	r1, #1
   212ee:	4640      	mov	r0, r8
   212f0:	f005 fe49 	bl	26f86 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   212f4:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   212f6:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   212fa:	b121      	cbz	r1, 21306 <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   212fc:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   21300:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   21304:	d106      	bne.n	21314 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   21306:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   21308:	b152      	cbz	r2, 21320 <nrfx_spim_xfer+0x70>
   2130a:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2130e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   21312:	d005      	beq.n	21320 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
   21314:	2300      	movs	r3, #0
   21316:	443e      	add	r6, r7
        return err_code;
   21318:	4820      	ldr	r0, [pc, #128]	; (2139c <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
   2131a:	7773      	strb	r3, [r6, #29]
}
   2131c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   21320:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21322:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21326:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2132a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   2132e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   21332:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21336:	2200      	movs	r2, #0
   21338:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   2133c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   21340:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   21344:	bf18      	it	ne
   21346:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   21348:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   2134c:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   21350:	bf18      	it	ne
   21352:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   21354:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   21358:	072a      	lsls	r2, r5, #28
   2135a:	d507      	bpl.n	2136c <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
   2135c:	59ba      	ldr	r2, [r7, r6]
   2135e:	b972      	cbnz	r2, 2137e <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
   21360:	2100      	movs	r1, #0
   21362:	4640      	mov	r0, r8
   21364:	f005 fe0f 	bl	26f86 <set_ss_pin_state>
    return err_code;
   21368:	480d      	ldr	r0, [pc, #52]	; (213a0 <nrfx_spim_xfer+0xf0>)
   2136a:	e7d7      	b.n	2131c <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2136c:	2201      	movs	r2, #1
   2136e:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   21370:	59ba      	ldr	r2, [r7, r6]
   21372:	b922      	cbnz	r2, 2137e <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21374:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   21378:	2a00      	cmp	r2, #0
   2137a:	d0fb      	beq.n	21374 <nrfx_spim_xfer+0xc4>
   2137c:	e7f0      	b.n	21360 <nrfx_spim_xfer+0xb0>
    if (!enable)
   2137e:	f015 0f04 	tst.w	r5, #4
   21382:	f04f 0240 	mov.w	r2, #64	; 0x40
   21386:	d002      	beq.n	2138e <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
   21388:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2138c:	e7ec      	b.n	21368 <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
   2138e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   21392:	e7e9      	b.n	21368 <nrfx_spim_xfer+0xb8>
        return err_code;
   21394:	4803      	ldr	r0, [pc, #12]	; (213a4 <nrfx_spim_xfer+0xf4>)
   21396:	e7c1      	b.n	2131c <nrfx_spim_xfer+0x6c>
   21398:	2000d418 	.word	0x2000d418
   2139c:	0bad000a 	.word	0x0bad000a
   213a0:	0bad0000 	.word	0x0bad0000
   213a4:	0bad000b 	.word	0x0bad000b

000213a8 <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   213a8:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   213aa:	4b0c      	ldr	r3, [pc, #48]	; (213dc <nrfx_spim_3_irq_handler+0x34>)
   213ac:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   213b0:	b192      	cbz	r2, 213d8 <nrfx_spim_3_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   213b2:	2500      	movs	r5, #0
    set_ss_pin_state(p_cb, false);
   213b4:	4c0a      	ldr	r4, [pc, #40]	; (213e0 <nrfx_spim_3_irq_handler+0x38>)
   213b6:	4629      	mov	r1, r5
   213b8:	4620      	mov	r0, r4
   213ba:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   213be:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   213c2:	f005 fde0 	bl	26f86 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   213c6:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   213ca:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   213cc:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   213ce:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   213d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   213d6:	4718      	bx	r3
}
   213d8:	bd70      	pop	{r4, r5, r6, pc}
   213da:	bf00      	nop
   213dc:	4000b000 	.word	0x4000b000
   213e0:	2000d418 	.word	0x2000d418

000213e4 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   213e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   213e6:	f04f 0e34 	mov.w	lr, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   213ea:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   213ec:	4d22      	ldr	r5, [pc, #136]	; (21478 <nrfx_twim_init+0x94>)
   213ee:	fb0e fe06 	mul.w	lr, lr, r6
   213f2:	eb05 040e 	add.w	r4, r5, lr
   213f6:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   213fa:	2f00      	cmp	r7, #0
   213fc:	d139      	bne.n	21472 <nrfx_twim_init+0x8e>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   213fe:	f8d0 c000 	ldr.w	ip, [r0]
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   21402:	60a7      	str	r7, [r4, #8]
    p_cb->handler         = event_handler;
   21404:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->p_context       = p_context;
   21408:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
   2140a:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   2140e:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   21412:	7b4b      	ldrb	r3, [r1, #13]
   21414:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   21418:	7b8b      	ldrb	r3, [r1, #14]
   2141a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   2141e:	b1c3      	cbz	r3, 21452 <nrfx_twim_init+0x6e>
   21420:	7bcb      	ldrb	r3, [r1, #15]
   21422:	b92b      	cbnz	r3, 21430 <nrfx_twim_init+0x4c>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   21424:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   21428:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   2142c:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   21430:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   21432:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524

    if (p_cb->handler)
   21436:	b122      	cbz	r2, 21442 <nrfx_twim_init+0x5e>
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   21438:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   2143a:	f340 3007 	sbfx	r0, r0, #12, #8
   2143e:	f7fa f8b5 	bl	1b5ac <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   21442:	2334      	movs	r3, #52	; 0x34
   21444:	fb03 5506 	mla	r5, r3, r6, r5
   21448:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2144a:	480c      	ldr	r0, [pc, #48]	; (2147c <nrfx_twim_init+0x98>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2144c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   21450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21452:	f240 670c 	movw	r7, #1548	; 0x60c
    *p_pin = pin_number & 0x1F;
   21456:	680b      	ldr	r3, [r1, #0]
    reg->PIN_CNF[pin_number] = cnf;
   21458:	4c09      	ldr	r4, [pc, #36]	; (21480 <nrfx_twim_init+0x9c>)
    *p_pin = pin_number & 0x1F;
   2145a:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   2145e:	3380      	adds	r3, #128	; 0x80
   21460:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   21464:	684b      	ldr	r3, [r1, #4]
   21466:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   2146a:	3380      	adds	r3, #128	; 0x80
   2146c:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   21470:	e7d6      	b.n	21420 <nrfx_twim_init+0x3c>
        return err_code;
   21472:	4804      	ldr	r0, [pc, #16]	; (21484 <nrfx_twim_init+0xa0>)
   21474:	e7ec      	b.n	21450 <nrfx_twim_init+0x6c>
   21476:	bf00      	nop
   21478:	2000d438 	.word	0x2000d438
   2147c:	0bad0000 	.word	0x0bad0000
   21480:	40842500 	.word	0x40842500
   21484:	0bad0005 	.word	0x0bad0005

00021488 <nrfx_twim_enable>:
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   21488:	2106      	movs	r1, #6
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
   2148a:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2148c:	7902      	ldrb	r2, [r0, #4]
   2148e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   21492:	2134      	movs	r1, #52	; 0x34
   21494:	4b03      	ldr	r3, [pc, #12]	; (214a4 <nrfx_twim_enable+0x1c>)
   21496:	fb01 3302 	mla	r3, r1, r2, r3
   2149a:	2202      	movs	r2, #2
   2149c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   214a0:	4770      	bx	lr
   214a2:	bf00      	nop
   214a4:	2000d438 	.word	0x2000d438

000214a8 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   214a8:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   214aa:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   214ac:	2034      	movs	r0, #52	; 0x34
   214ae:	4b0b      	ldr	r3, [pc, #44]	; (214dc <nrfx_twim_disable+0x34>)
   214b0:	fb00 3301 	mla	r3, r0, r1, r3
   214b4:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   214b6:	480a      	ldr	r0, [pc, #40]	; (214e0 <nrfx_twim_disable+0x38>)
   214b8:	6099      	str	r1, [r3, #8]
   214ba:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   214be:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   214c2:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   214c6:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   214ca:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   214ce:	2201      	movs	r2, #1
    p_cb->busy = false;
   214d0:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   214d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   214d8:	4770      	bx	lr
   214da:	bf00      	nop
   214dc:	2000d438 	.word	0x2000d438
   214e0:	019c0202 	.word	0x019c0202

000214e4 <nrfx_twim_xfer>:
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
   214e4:	2334      	movs	r3, #52	; 0x34


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   214e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   214ea:	4617      	mov	r7, r2
    p_cb->error = false;
   214ec:	2200      	movs	r2, #0
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   214ee:	f890 e004 	ldrb.w	lr, [r0, #4]
    p_cb->error = false;
   214f2:	f8df c2e4 	ldr.w	ip, [pc, #740]	; 217d8 <nrfx_twim_xfer+0x2f4>
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   214f6:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   214f8:	fb03 c30e 	mla	r3, r3, lr, ip
   214fc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   21500:	684b      	ldr	r3, [r1, #4]
{
   21502:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   21504:	b14b      	cbz	r3, 2151a <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   21506:	68cb      	ldr	r3, [r1, #12]
   21508:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   2150c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   21510:	d003      	beq.n	2151a <nrfx_twim_xfer+0x36>
        return err_code;
   21512:	4eb2      	ldr	r6, [pc, #712]	; (217dc <nrfx_twim_xfer+0x2f8>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21514:	4630      	mov	r0, r6
   21516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   2151a:	2634      	movs	r6, #52	; 0x34
   2151c:	fb06 c60e 	mla	r6, r6, lr, ip
    p_reg->INTENCLR = mask;
   21520:	4baf      	ldr	r3, [pc, #700]	; (217e0 <nrfx_twim_xfer+0x2fc>)
   21522:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   21526:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   2152a:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   2152e:	b123      	cbz	r3, 2153a <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   21530:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   21532:	4eac      	ldr	r6, [pc, #688]	; (217e4 <nrfx_twim_xfer+0x300>)
    p_reg->INTENSET = mask;
   21534:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   21538:	e7ec      	b.n	21514 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   2153a:	f017 0f14 	tst.w	r7, #20
   2153e:	bf0c      	ite	eq
   21540:	2301      	moveq	r3, #1
   21542:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   21544:	46a9      	mov	r9, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   21546:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   2154a:	f106 080c 	add.w	r8, r6, #12
   2154e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   21552:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   21556:	f8d9 3000 	ldr.w	r3, [r9]
    p_cb->flags = flags;
   2155a:	6237      	str	r7, [r6, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   2155c:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   21560:	f3c7 1300 	ubfx	r3, r7, #4, #1
   21564:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   21568:	786b      	ldrb	r3, [r5, #1]
   2156a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2156e:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   21572:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   21576:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   2157a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2157e:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   21582:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   21586:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   2158a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   2158e:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   21592:	bf18      	it	ne
   21594:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   21596:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   2159a:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   2159e:	bf18      	it	ne
   215a0:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   215a2:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   215a6:	782b      	ldrb	r3, [r5, #0]
   215a8:	2b03      	cmp	r3, #3
   215aa:	f200 80b9 	bhi.w	21720 <nrfx_twim_xfer+0x23c>
   215ae:	e8df f003 	tbb	[pc, r3]
   215b2:	a48b      	.short	0xa48b
   215b4:	026d      	.short	0x026d
   215b6:	692b      	ldr	r3, [r5, #16]
   215b8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   215bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   215c0:	d1a7      	bne.n	21512 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   215c2:	f44f 7380 	mov.w	r3, #256	; 0x100
   215c6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   215ca:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   215cc:	68ea      	ldr	r2, [r5, #12]
   215ce:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   215d2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   215d6:	2300      	movs	r3, #0
   215d8:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   215dc:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   215e0:	2201      	movs	r2, #1
   215e2:	6222      	str	r2, [r4, #32]
   215e4:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   215e6:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   215ea:	2a00      	cmp	r2, #0
   215ec:	d0fb      	beq.n	215e6 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   215ee:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   215f2:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   215f6:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   215f8:	68ab      	ldr	r3, [r5, #8]
   215fa:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   215fe:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   21602:	2334      	movs	r3, #52	; 0x34
   21604:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   21608:	fb03 c30e 	mla	r3, r3, lr, ip
   2160c:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   2160e:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   21610:	4e75      	ldr	r6, [pc, #468]	; (217e8 <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   21612:	0738      	lsls	r0, r7, #28
   21614:	d407      	bmi.n	21626 <nrfx_twim_xfer+0x142>
   21616:	782a      	ldrb	r2, [r5, #0]
   21618:	2a03      	cmp	r2, #3
   2161a:	d004      	beq.n	21626 <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2161c:	2201      	movs	r2, #1
   2161e:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   21620:	686b      	ldr	r3, [r5, #4]
   21622:	b903      	cbnz	r3, 21626 <nrfx_twim_xfer+0x142>
   21624:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   21626:	2334      	movs	r3, #52	; 0x34
   21628:	fb03 f30e 	mul.w	r3, r3, lr
   2162c:	f85c 1003 	ldr.w	r1, [ip, r3]
   21630:	eb0c 0203 	add.w	r2, ip, r3
   21634:	2900      	cmp	r1, #0
   21636:	d176      	bne.n	21726 <nrfx_twim_xfer+0x242>
   21638:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2163a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   2163e:	2b00      	cmp	r3, #0
   21640:	f000 8089 	beq.w	21756 <nrfx_twim_xfer+0x272>
   21644:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   21648:	2b00      	cmp	r3, #0
   2164a:	f040 8087 	bne.w	2175c <nrfx_twim_xfer+0x278>
   2164e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   21652:	2b00      	cmp	r3, #0
   21654:	f000 8095 	beq.w	21782 <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
   21658:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2165a:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   2165e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21662:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   21666:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   2166a:	2d00      	cmp	r5, #0
   2166c:	f000 8081 	beq.w	21772 <nrfx_twim_xfer+0x28e>
   21670:	f412 7f00 	tst.w	r2, #512	; 0x200
   21674:	f402 7280 	and.w	r2, r2, #256	; 0x100
   21678:	d17e      	bne.n	21778 <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2167a:	6220      	str	r0, [r4, #32]
   2167c:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   2167e:	2a00      	cmp	r2, #0
   21680:	d0db      	beq.n	2163a <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21682:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
   21686:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   2168a:	e7d6      	b.n	2163a <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2168c:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2168e:	68ea      	ldr	r2, [r5, #12]
   21690:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21694:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   21698:	692b      	ldr	r3, [r5, #16]
   2169a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   2169e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   216a2:	f47f af36 	bne.w	21512 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   216a6:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   216a8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   216ac:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   216b0:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   216b4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   216b8:	2334      	movs	r3, #52	; 0x34
   216ba:	2202      	movs	r2, #2
   216bc:	fb03 c30e 	mla	r3, r3, lr, ip
   216c0:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   216c2:	2301      	movs	r3, #1
   216c4:	6223      	str	r3, [r4, #32]
   216c6:	e7a2      	b.n	2160e <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   216c8:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   216ca:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   216cc:	f017 0f20 	tst.w	r7, #32
   216d0:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   216d4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   216d8:	f04f 0334 	mov.w	r3, #52	; 0x34
   216dc:	d008      	beq.n	216f0 <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
   216de:	f44f 7280 	mov.w	r2, #256	; 0x100
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   216e2:	fb03 c30e 	mla	r3, r3, lr, ip
   216e6:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   216ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   216ee:	e7e7      	b.n	216c0 <nrfx_twim_xfer+0x1dc>
   216f0:	f44f 7200 	mov.w	r2, #512	; 0x200
   216f4:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   216f8:	e7df      	b.n	216ba <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   216fa:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   216fc:	68ea      	ldr	r2, [r5, #12]
   216fe:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   21702:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   21706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   2170a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2170e:	2334      	movs	r3, #52	; 0x34
   21710:	2202      	movs	r2, #2
   21712:	fb03 c30e 	mla	r3, r3, lr, ip
   21716:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21718:	2301      	movs	r3, #1
   2171a:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   2171c:	2300      	movs	r3, #0
   2171e:	e777      	b.n	21610 <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
   21720:	2308      	movs	r3, #8
   21722:	4e32      	ldr	r6, [pc, #200]	; (217ec <nrfx_twim_xfer+0x308>)
   21724:	e775      	b.n	21612 <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   21726:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
   21728:	bf44      	itt	mi
   2172a:	2300      	movmi	r3, #0
   2172c:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   2172e:	067a      	lsls	r2, r7, #25
   21730:	d406      	bmi.n	21740 <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   21732:	2334      	movs	r3, #52	; 0x34
   21734:	fb03 c30e 	mla	r3, r3, lr, ip
   21738:	689a      	ldr	r2, [r3, #8]
   2173a:	f042 0202 	orr.w	r2, r2, #2
   2173e:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   21740:	2334      	movs	r3, #52	; 0x34
   21742:	fb03 c30e 	mla	r3, r3, lr, ip
   21746:	689a      	ldr	r2, [r3, #8]
   21748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2174c:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2174e:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
   21750:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   21754:	e6de      	b.n	21514 <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21756:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2175a:	b123      	cbz	r3, 21766 <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2175c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   21760:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21764:	e773      	b.n	2164e <nrfx_twim_xfer+0x16a>
   21766:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   2176a:	2a00      	cmp	r2, #0
   2176c:	f43f af65 	beq.w	2163a <nrfx_twim_xfer+0x156>
   21770:	e773      	b.n	2165a <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21772:	6220      	str	r0, [r4, #32]
   21774:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   21776:	e760      	b.n	2163a <nrfx_twim_xfer+0x156>
   21778:	2a00      	cmp	r2, #0
   2177a:	d182      	bne.n	21682 <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
   2177c:	2b00      	cmp	r3, #0
   2177e:	f43f af5c 	beq.w	2163a <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
   21782:	2134      	movs	r1, #52	; 0x34
   21784:	2000      	movs	r0, #0
   21786:	fb01 c20e 	mla	r2, r1, lr, ip
    uint32_t error_source = p_reg->ERRORSRC;
   2178a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   2178e:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   21792:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   21796:	b18b      	cbz	r3, 217bc <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   21798:	4a15      	ldr	r2, [pc, #84]	; (217f0 <nrfx_twim_xfer+0x30c>)
   2179a:	f013 0f01 	tst.w	r3, #1
   2179e:	4e15      	ldr	r6, [pc, #84]	; (217f4 <nrfx_twim_xfer+0x310>)
   217a0:	bf18      	it	ne
   217a2:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   217a4:	f013 0f02 	tst.w	r3, #2
   217a8:	f102 0201 	add.w	r2, r2, #1
   217ac:	bf18      	it	ne
   217ae:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   217b0:	f013 0f04 	tst.w	r3, #4
   217b4:	4b10      	ldr	r3, [pc, #64]	; (217f8 <nrfx_twim_xfer+0x314>)
   217b6:	bf18      	it	ne
   217b8:	461e      	movne	r6, r3
   217ba:	e6ab      	b.n	21514 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   217bc:	067b      	lsls	r3, r7, #25
   217be:	f53f aea9 	bmi.w	21514 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   217c2:	4620      	mov	r0, r4
   217c4:	fb0e c101 	mla	r1, lr, r1, ip
   217c8:	f005 fbe9 	bl	26f9e <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   217cc:	4b09      	ldr	r3, [pc, #36]	; (217f4 <nrfx_twim_xfer+0x310>)
   217ce:	2800      	cmp	r0, #0
   217d0:	bf08      	it	eq
   217d2:	461e      	moveq	r6, r3
   217d4:	e69e      	b.n	21514 <nrfx_twim_xfer+0x30>
   217d6:	bf00      	nop
   217d8:	2000d438 	.word	0x2000d438
   217dc:	0bad000a 	.word	0x0bad000a
   217e0:	019c0202 	.word	0x019c0202
   217e4:	0bad000b 	.word	0x0bad000b
   217e8:	0bad0000 	.word	0x0bad0000
   217ec:	0bad0004 	.word	0x0bad0004
   217f0:	0bae0000 	.word	0x0bae0000
   217f4:	0bad0001 	.word	0x0bad0001
   217f8:	0bae0002 	.word	0x0bae0002

000217fc <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   217fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   217fe:	4d5a      	ldr	r5, [pc, #360]	; (21968 <nrfx_twim_2_irq_handler+0x16c>)
   21800:	4c5a      	ldr	r4, [pc, #360]	; (2196c <nrfx_twim_2_irq_handler+0x170>)
   21802:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   21806:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   21808:	b1fb      	cbz	r3, 2184a <nrfx_twim_2_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2180a:	2300      	movs	r3, #0
   2180c:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   21810:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21814:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   21818:	b9bb      	cbnz	r3, 2184a <nrfx_twim_2_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   2181a:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   2181c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   21820:	2302      	movs	r3, #2
   21822:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   21824:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   21826:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2182a:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   2182e:	b11b      	cbz	r3, 21838 <nrfx_twim_2_irq_handler+0x3c>
    return p_reg->SHORTS;
   21830:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   21834:	059e      	lsls	r6, r3, #22
   21836:	d403      	bmi.n	21840 <nrfx_twim_2_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21838:	2201      	movs	r2, #1
   2183a:	4b4b      	ldr	r3, [pc, #300]	; (21968 <nrfx_twim_2_irq_handler+0x16c>)
   2183c:	621a      	str	r2, [r3, #32]
   2183e:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   21840:	2301      	movs	r3, #1
   21842:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   21846:	b007      	add	sp, #28
   21848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2184a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2184e:	2b00      	cmp	r3, #0
   21850:	d05a      	beq.n	21908 <nrfx_twim_2_irq_handler+0x10c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21852:	2300      	movs	r3, #0
   21854:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   21858:	6a27      	ldr	r7, [r4, #32]
   2185a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   2185e:	067d      	lsls	r5, r7, #25
   21860:	d40a      	bmi.n	21878 <nrfx_twim_2_irq_handler+0x7c>
   21862:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   21866:	b93b      	cbnz	r3, 21878 <nrfx_twim_2_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   21868:	4940      	ldr	r1, [pc, #256]	; (2196c <nrfx_twim_2_irq_handler+0x170>)
   2186a:	483f      	ldr	r0, [pc, #252]	; (21968 <nrfx_twim_2_irq_handler+0x16c>)
   2186c:	f005 fb97 	bl	26f9e <xfer_completeness_check>
   21870:	f080 0001 	eor.w	r0, r0, #1
   21874:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   21878:	f017 0704 	ands.w	r7, r7, #4
            if (!p_cb->repeated || p_cb->error)
   2187c:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   21880:	d120      	bne.n	218c4 <nrfx_twim_2_irq_handler+0xc8>
            event.xfer_desc = p_cb->xfer_desc;
   21882:	4e3b      	ldr	r6, [pc, #236]	; (21970 <nrfx_twim_2_irq_handler+0x174>)
   21884:	ad01      	add	r5, sp, #4
   21886:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2188a:	6833      	ldr	r3, [r6, #0]
   2188c:	602b      	str	r3, [r5, #0]
   2188e:	4b36      	ldr	r3, [pc, #216]	; (21968 <nrfx_twim_2_irq_handler+0x16c>)
   21890:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   21894:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   21898:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   2189c:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   218a0:	f1bc 0f00 	cmp.w	ip, #0
   218a4:	d002      	beq.n	218ac <nrfx_twim_2_irq_handler+0xb0>
   218a6:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   218aa:	b15a      	cbz	r2, 218c4 <nrfx_twim_2_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   218ac:	2200      	movs	r2, #0
   218ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   218b2:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   218b4:	4a2f      	ldr	r2, [pc, #188]	; (21974 <nrfx_twim_2_irq_handler+0x178>)
   218b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   218ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
   218be:	4b2e      	ldr	r3, [pc, #184]	; (21978 <nrfx_twim_2_irq_handler+0x17c>)
   218c0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   218c4:	4a28      	ldr	r2, [pc, #160]	; (21968 <nrfx_twim_2_irq_handler+0x16c>)
   218c6:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   218ca:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   218cc:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   218d0:	d443      	bmi.n	2195a <nrfx_twim_2_irq_handler+0x15e>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   218d2:	0759      	lsls	r1, r3, #29
   218d4:	d443      	bmi.n	2195e <nrfx_twim_2_irq_handler+0x162>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   218d6:	07da      	lsls	r2, r3, #31
   218d8:	d443      	bmi.n	21962 <nrfx_twim_2_irq_handler+0x166>
    else if (p_cb->error)
   218da:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   218de:	009b      	lsls	r3, r3, #2
   218e0:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   218e2:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   218e6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   218ea:	b90b      	cbnz	r3, 218f0 <nrfx_twim_2_irq_handler+0xf4>
        p_cb->busy = false;
   218ec:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   218f0:	6a23      	ldr	r3, [r4, #32]
   218f2:	075b      	lsls	r3, r3, #29
   218f4:	d503      	bpl.n	218fe <nrfx_twim_2_irq_handler+0x102>
   218f6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   218fa:	2b00      	cmp	r3, #0
   218fc:	d0a3      	beq.n	21846 <nrfx_twim_2_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
   218fe:	e9d4 3100 	ldrd	r3, r1, [r4]
   21902:	4668      	mov	r0, sp
   21904:	4798      	blx	r3
}
   21906:	e79e      	b.n	21846 <nrfx_twim_2_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21908:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   2190c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   21910:	7b23      	ldrb	r3, [r4, #12]
   21912:	b983      	cbnz	r3, 21936 <nrfx_twim_2_irq_handler+0x13a>
            event.xfer_desc = p_cb->xfer_desc;
   21914:	4f16      	ldr	r7, [pc, #88]	; (21970 <nrfx_twim_2_irq_handler+0x174>)
   21916:	ae01      	add	r6, sp, #4
   21918:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2191a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2191c:	683b      	ldr	r3, [r7, #0]
   2191e:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   21920:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   21924:	2b00      	cmp	r3, #0
   21926:	d1cd      	bne.n	218c4 <nrfx_twim_2_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   21928:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   2192c:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   2192e:	4b11      	ldr	r3, [pc, #68]	; (21974 <nrfx_twim_2_irq_handler+0x178>)
   21930:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   21934:	e7c1      	b.n	218ba <nrfx_twim_2_irq_handler+0xbe>
    p_reg->SHORTS = mask;
   21936:	f44f 7300 	mov.w	r3, #512	; 0x200
   2193a:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   2193e:	f240 2302 	movw	r3, #514	; 0x202
   21942:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   21944:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   21948:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2194c:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   2194e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21952:	2301      	movs	r3, #1
   21954:	60ab      	str	r3, [r5, #8]
   21956:	622b      	str	r3, [r5, #32]
            return;
   21958:	e775      	b.n	21846 <nrfx_twim_2_irq_handler+0x4a>
   2195a:	2301      	movs	r3, #1
   2195c:	e7c1      	b.n	218e2 <nrfx_twim_2_irq_handler+0xe6>
   2195e:	2302      	movs	r3, #2
   21960:	e7bf      	b.n	218e2 <nrfx_twim_2_irq_handler+0xe6>
   21962:	2303      	movs	r3, #3
   21964:	e7bd      	b.n	218e2 <nrfx_twim_2_irq_handler+0xe6>
   21966:	bf00      	nop
   21968:	4000a000 	.word	0x4000a000
   2196c:	2000d438 	.word	0x2000d438
   21970:	2000d444 	.word	0x2000d444
   21974:	019c0202 	.word	0x019c0202
   21978:	e000e100 	.word	0xe000e100

0002197c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   2197c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21980:	2501      	movs	r5, #1
    reg->PIN_CNF[pin_number] = cnf;
   21982:	f240 630d 	movw	r3, #1549	; 0x60d
    p_reg->OUTSET = set_mask;
   21986:	4c1b      	ldr	r4, [pc, #108]	; (219f4 <nrfx_twi_twim_bus_recover+0x78>)
    *p_pin = pin_number & 0x1F;
   21988:	f001 061f 	and.w	r6, r1, #31
   2198c:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21990:	fa05 f800 	lsl.w	r8, r5, r0
    reg->PIN_CNF[pin_number] = cnf;
   21994:	f106 0280 	add.w	r2, r6, #128	; 0x80
   21998:	3080      	adds	r0, #128	; 0x80
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2199a:	40b5      	lsls	r5, r6
    p_reg->OUTSET = set_mask;
   2199c:	f8c4 8008 	str.w	r8, [r4, #8]
   219a0:	60a5      	str	r5, [r4, #8]
    reg->PIN_CNF[pin_number] = cnf;
   219a2:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   219a6:	2004      	movs	r0, #4
   219a8:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
   219ac:	f005 fae7 	bl	26f7e <nrfx_busy_wait>
   219b0:	2709      	movs	r7, #9
    return p_reg->IN;
   219b2:	6923      	ldr	r3, [r4, #16]

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   219b4:	421d      	tst	r5, r3
   219b6:	d10d      	bne.n	219d4 <nrfx_twi_twim_bus_recover+0x58>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   219b8:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   219ba:	f8c4 800c 	str.w	r8, [r4, #12]
   219be:	f005 fade 	bl	26f7e <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   219c2:	3f01      	subs	r7, #1
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   219c4:	2004      	movs	r0, #4
    p_reg->OUTSET = set_mask;
   219c6:	f8c4 8008 	str.w	r8, [r4, #8]
   219ca:	f005 fad8 	bl	26f7e <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   219ce:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   219d2:	d1ee      	bne.n	219b2 <nrfx_twi_twim_bus_recover+0x36>
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   219d4:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   219d6:	60e5      	str	r5, [r4, #12]
   219d8:	f005 fad1 	bl	26f7e <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   219dc:	2004      	movs	r0, #4
    p_reg->OUTSET = set_mask;
   219de:	60a5      	str	r5, [r4, #8]
   219e0:	f005 facd 	bl	26f7e <nrfx_busy_wait>
    return p_reg->IN;
   219e4:	6923      	ldr	r3, [r4, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   219e6:	4804      	ldr	r0, [pc, #16]	; (219f8 <nrfx_twi_twim_bus_recover+0x7c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   219e8:	40f3      	lsrs	r3, r6
   219ea:	f003 0301 	and.w	r3, r3, #1
   219ee:	1ac0      	subs	r0, r0, r3
   219f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   219f4:	40842500 	.word	0x40842500
   219f8:	0bad0001 	.word	0x0bad0001

000219fc <rpc_handle_data_message>:
   219fc:	b570      	push	{r4, r5, r6, lr}
   219fe:	6803      	ldr	r3, [r0, #0]
   21a00:	4604      	mov	r4, r0
   21a02:	b2db      	uxtb	r3, r3
   21a04:	2b04      	cmp	r3, #4
   21a06:	d009      	beq.n	21a1c <rpc_handle_data_message+0x20>
   21a08:	2b03      	cmp	r3, #3
   21a0a:	d015      	beq.n	21a38 <rpc_handle_data_message+0x3c>
   21a0c:	2b06      	cmp	r3, #6
   21a0e:	d015      	beq.n	21a3c <rpc_handle_data_message+0x40>
   21a10:	2b07      	cmp	r3, #7
   21a12:	d015      	beq.n	21a40 <rpc_handle_data_message+0x44>
   21a14:	6880      	ldr	r0, [r0, #8]
   21a16:	b9a8      	cbnz	r0, 21a44 <rpc_handle_data_message+0x48>
   21a18:	2000      	movs	r0, #0
   21a1a:	bd70      	pop	{r4, r5, r6, pc}
   21a1c:	2300      	movs	r3, #0
   21a1e:	4a0b      	ldr	r2, [pc, #44]	; (21a4c <rpc_handle_data_message+0x50>)
   21a20:	4620      	mov	r0, r4
   21a22:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   21a26:	685d      	ldr	r5, [r3, #4]
   21a28:	f005 fb3c 	bl	270a4 <rpc_client_msg_from_rpc_msg_get>
   21a2c:	6821      	ldr	r1, [r4, #0]
   21a2e:	462b      	mov	r3, r5
   21a30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21a34:	0c09      	lsrs	r1, r1, #16
   21a36:	4718      	bx	r3
   21a38:	2301      	movs	r3, #1
   21a3a:	e7f0      	b.n	21a1e <rpc_handle_data_message+0x22>
   21a3c:	2302      	movs	r3, #2
   21a3e:	e7ee      	b.n	21a1e <rpc_handle_data_message+0x22>
   21a40:	2303      	movs	r3, #3
   21a42:	e7ec      	b.n	21a1e <rpc_handle_data_message+0x22>
   21a44:	f000 f81c 	bl	21a80 <rpc_transport_msg_data_rx_free>
   21a48:	e7e6      	b.n	21a18 <rpc_handle_data_message+0x1c>
   21a4a:	bf00      	nop
   21a4c:	00029068 	.word	0x00029068

00021a50 <rpc_transport_init>:
   21a50:	4b01      	ldr	r3, [pc, #4]	; (21a58 <rpc_transport_init+0x8>)
   21a52:	699b      	ldr	r3, [r3, #24]
   21a54:	4718      	bx	r3
   21a56:	bf00      	nop
   21a58:	2000c6d4 	.word	0x2000c6d4

00021a5c <rpc_transport_msg_alloc>:
   21a5c:	4b01      	ldr	r3, [pc, #4]	; (21a64 <rpc_transport_msg_alloc+0x8>)
   21a5e:	681b      	ldr	r3, [r3, #0]
   21a60:	4718      	bx	r3
   21a62:	bf00      	nop
   21a64:	2000c6d4 	.word	0x2000c6d4

00021a68 <rpc_transport_msg_data_tx_size>:
   21a68:	4b01      	ldr	r3, [pc, #4]	; (21a70 <rpc_transport_msg_data_tx_size+0x8>)
   21a6a:	685b      	ldr	r3, [r3, #4]
   21a6c:	4718      	bx	r3
   21a6e:	bf00      	nop
   21a70:	2000c6d4 	.word	0x2000c6d4

00021a74 <rpc_transport_msg_rx_free>:
   21a74:	4b01      	ldr	r3, [pc, #4]	; (21a7c <rpc_transport_msg_rx_free+0x8>)
   21a76:	68db      	ldr	r3, [r3, #12]
   21a78:	4718      	bx	r3
   21a7a:	bf00      	nop
   21a7c:	2000c6d4 	.word	0x2000c6d4

00021a80 <rpc_transport_msg_data_rx_free>:
   21a80:	4b01      	ldr	r3, [pc, #4]	; (21a88 <rpc_transport_msg_data_rx_free+0x8>)
   21a82:	695b      	ldr	r3, [r3, #20]
   21a84:	4718      	bx	r3
   21a86:	bf00      	nop
   21a88:	2000c6d4 	.word	0x2000c6d4

00021a8c <rpc_transport_msg_send>:
   21a8c:	4b01      	ldr	r3, [pc, #4]	; (21a94 <rpc_transport_msg_send+0x8>)
   21a8e:	689b      	ldr	r3, [r3, #8]
   21a90:	4718      	bx	r3
   21a92:	bf00      	nop
   21a94:	2000c6d4 	.word	0x2000c6d4

00021a98 <rpc_transport_data_rx_suspend>:
   21a98:	4b01      	ldr	r3, [pc, #4]	; (21aa0 <rpc_transport_data_rx_suspend+0x8>)
   21a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21a9c:	4718      	bx	r3
   21a9e:	bf00      	nop
   21aa0:	2000c6d4 	.word	0x2000c6d4

00021aa4 <rpc_transport_data_rx_resume>:
   21aa4:	4b01      	ldr	r3, [pc, #4]	; (21aac <rpc_transport_data_rx_resume+0x8>)
   21aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21aa8:	4718      	bx	r3
   21aaa:	bf00      	nop
   21aac:	2000c6d4 	.word	0x2000c6d4

00021ab0 <rpc_transport_ipc_msg_data_tx_size>:
   21ab0:	4b01      	ldr	r3, [pc, #4]	; (21ab8 <rpc_transport_ipc_msg_data_tx_size+0x8>)
   21ab2:	681b      	ldr	r3, [r3, #0]
   21ab4:	68d8      	ldr	r0, [r3, #12]
   21ab6:	4770      	bx	lr
   21ab8:	2000d46c 	.word	0x2000d46c

00021abc <rpc_transport_ipc_msg_rx_free>:
   21abc:	2300      	movs	r3, #0
   21abe:	b530      	push	{r4, r5, lr}
   21ac0:	4910      	ldr	r1, [pc, #64]	; (21b04 <rpc_transport_ipc_msg_rx_free+0x48>)
   21ac2:	680a      	ldr	r2, [r1, #0]
   21ac4:	6814      	ldr	r4, [r2, #0]
   21ac6:	42a3      	cmp	r3, r4
   21ac8:	d10b      	bne.n	21ae2 <rpc_transport_ipc_msg_rx_free+0x26>
   21aca:	2300      	movs	r3, #0
   21acc:	684a      	ldr	r2, [r1, #4]
   21ace:	6811      	ldr	r1, [r2, #0]
   21ad0:	428b      	cmp	r3, r1
   21ad2:	d015      	beq.n	21b00 <rpc_transport_ipc_msg_rx_free+0x44>
   21ad4:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   21ad8:	68a4      	ldr	r4, [r4, #8]
   21ada:	42a0      	cmp	r0, r4
   21adc:	d008      	beq.n	21af0 <rpc_transport_ipc_msg_rx_free+0x34>
   21ade:	3301      	adds	r3, #1
   21ae0:	e7f6      	b.n	21ad0 <rpc_transport_ipc_msg_rx_free+0x14>
   21ae2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   21ae6:	68ad      	ldr	r5, [r5, #8]
   21ae8:	42a8      	cmp	r0, r5
   21aea:	d001      	beq.n	21af0 <rpc_transport_ipc_msg_rx_free+0x34>
   21aec:	3301      	adds	r3, #1
   21aee:	e7ea      	b.n	21ac6 <rpc_transport_ipc_msg_rx_free+0xa>
   21af0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   21af4:	6853      	ldr	r3, [r2, #4]
   21af6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   21afa:	f043 0303 	orr.w	r3, r3, #3
   21afe:	6053      	str	r3, [r2, #4]
   21b00:	bd30      	pop	{r4, r5, pc}
   21b02:	bf00      	nop
   21b04:	2000d48c 	.word	0x2000d48c

00021b08 <rpc_transport_ipc_msg_tx_free>:
   21b08:	2200      	movs	r2, #0
   21b0a:	b530      	push	{r4, r5, lr}
   21b0c:	4b0b      	ldr	r3, [pc, #44]	; (21b3c <rpc_transport_ipc_msg_tx_free+0x34>)
   21b0e:	6819      	ldr	r1, [r3, #0]
   21b10:	680c      	ldr	r4, [r1, #0]
   21b12:	4294      	cmp	r4, r2
   21b14:	d00f      	beq.n	21b36 <rpc_transport_ipc_msg_tx_free+0x2e>
   21b16:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   21b1a:	689d      	ldr	r5, [r3, #8]
   21b1c:	42a8      	cmp	r0, r5
   21b1e:	d10b      	bne.n	21b38 <rpc_transport_ipc_msg_tx_free+0x30>
   21b20:	f04f 0203 	mov.w	r2, #3
   21b24:	3304      	adds	r3, #4
   21b26:	e8d3 1fcf 	ldaexb	r1, [r3]
   21b2a:	2900      	cmp	r1, #0
   21b2c:	d103      	bne.n	21b36 <rpc_transport_ipc_msg_tx_free+0x2e>
   21b2e:	e8c3 2fc0 	stlexb	r0, r2, [r3]
   21b32:	2800      	cmp	r0, #0
   21b34:	d1f7      	bne.n	21b26 <rpc_transport_ipc_msg_tx_free+0x1e>
   21b36:	bd30      	pop	{r4, r5, pc}
   21b38:	3201      	adds	r2, #1
   21b3a:	e7ea      	b.n	21b12 <rpc_transport_ipc_msg_tx_free+0xa>
   21b3c:	2000d484 	.word	0x2000d484

00021b40 <handle_modem_rpc_msg>:
   21b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b44:	2500      	movs	r5, #0
   21b46:	4606      	mov	r6, r0
   21b48:	460f      	mov	r7, r1
   21b4a:	4628      	mov	r0, r5
   21b4c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 21bb4 <handle_modem_rpc_msg+0x74>
   21b50:	6833      	ldr	r3, [r6, #0]
   21b52:	42ab      	cmp	r3, r5
   21b54:	d801      	bhi.n	21b5a <handle_modem_rpc_msg+0x1a>
   21b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21b5a:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   21b5e:	6863      	ldr	r3, [r4, #4]
   21b60:	b2db      	uxtb	r3, r3
   21b62:	2b01      	cmp	r3, #1
   21b64:	d117      	bne.n	21b96 <handle_modem_rpc_msg+0x56>
   21b66:	6862      	ldr	r2, [r4, #4]
   21b68:	f8b8 3000 	ldrh.w	r3, [r8]
   21b6c:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   21b70:	d111      	bne.n	21b96 <handle_modem_rpc_msg+0x56>
   21b72:	2f02      	cmp	r7, #2
   21b74:	68a0      	ldr	r0, [r4, #8]
   21b76:	d110      	bne.n	21b9a <handle_modem_rpc_msg+0x5a>
   21b78:	f7ff ff40 	bl	219fc <rpc_handle_data_message>
   21b7c:	b990      	cbnz	r0, 21ba4 <handle_modem_rpc_msg+0x64>
   21b7e:	6863      	ldr	r3, [r4, #4]
   21b80:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   21b84:	f043 0303 	orr.w	r3, r3, #3
   21b88:	6063      	str	r3, [r4, #4]
   21b8a:	2001      	movs	r0, #1
   21b8c:	f8b8 3000 	ldrh.w	r3, [r8]
   21b90:	3301      	adds	r3, #1
   21b92:	f8a8 3000 	strh.w	r3, [r8]
   21b96:	3501      	adds	r5, #1
   21b98:	e7da      	b.n	21b50 <handle_modem_rpc_msg+0x10>
   21b9a:	6801      	ldr	r1, [r0, #0]
   21b9c:	0c09      	lsrs	r1, r1, #16
   21b9e:	f005 fa2e 	bl	26ffe <rpc_handle_ctrl_message>
   21ba2:	e7eb      	b.n	21b7c <handle_modem_rpc_msg+0x3c>
   21ba4:	2801      	cmp	r0, #1
   21ba6:	d1f0      	bne.n	21b8a <handle_modem_rpc_msg+0x4a>
   21ba8:	6863      	ldr	r3, [r4, #4]
   21baa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   21bae:	f043 0302 	orr.w	r3, r3, #2
   21bb2:	e7e9      	b.n	21b88 <handle_modem_rpc_msg+0x48>
   21bb4:	2000d894 	.word	0x2000d894

00021bb8 <rpc_message_handler>:
   21bb8:	b538      	push	{r3, r4, r5, lr}
   21bba:	4d07      	ldr	r5, [pc, #28]	; (21bd8 <rpc_message_handler+0x20>)
   21bbc:	2101      	movs	r1, #1
   21bbe:	6828      	ldr	r0, [r5, #0]
   21bc0:	f7ff ffbe 	bl	21b40 <handle_modem_rpc_msg>
   21bc4:	2102      	movs	r1, #2
   21bc6:	4604      	mov	r4, r0
   21bc8:	6868      	ldr	r0, [r5, #4]
   21bca:	f7ff ffb9 	bl	21b40 <handle_modem_rpc_msg>
   21bce:	2800      	cmp	r0, #0
   21bd0:	d1f4      	bne.n	21bbc <rpc_message_handler+0x4>
   21bd2:	2c00      	cmp	r4, #0
   21bd4:	d1f2      	bne.n	21bbc <rpc_message_handler+0x4>
   21bd6:	bd38      	pop	{r3, r4, r5, pc}
   21bd8:	2000d48c 	.word	0x2000d48c

00021bdc <ipc_irq_handler>:
   21bdc:	b570      	push	{r4, r5, r6, lr}
   21bde:	2807      	cmp	r0, #7
   21be0:	d868      	bhi.n	21cb4 <ipc_irq_handler+0xd8>
   21be2:	e8df f000 	tbb	[pc, r0]
   21be6:	670b      	.short	0x670b
   21be8:	674b674f 	.word	0x674b674f
   21bec:	0440      	.short	0x0440
   21bee:	f001 fced 	bl	235cc <ipc_trace_handler>
   21bf2:	2003      	movs	r0, #3
   21bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21bf8:	f7fc b8f4 	b.w	1dde4 <nrf_modem_os_event_notify>
   21bfc:	2003      	movs	r0, #3
   21bfe:	4b2e      	ldr	r3, [pc, #184]	; (21cb8 <ipc_irq_handler+0xdc>)
   21c00:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
   21c04:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
   21c08:	4b2c      	ldr	r3, [pc, #176]	; (21cbc <ipc_irq_handler+0xe0>)
   21c0a:	781d      	ldrb	r5, [r3, #0]
   21c0c:	7018      	strb	r0, [r3, #0]
   21c0e:	f001 fcb3 	bl	23578 <nrf_modem_state_set>
   21c12:	4b2b      	ldr	r3, [pc, #172]	; (21cc0 <ipc_irq_handler+0xe4>)
   21c14:	b2ed      	uxtb	r5, r5
   21c16:	6818      	ldr	r0, [r3, #0]
   21c18:	f004 fe06 	bl	26828 <nrf_modem_os_sem_give>
   21c1c:	2d01      	cmp	r5, #1
   21c1e:	d11c      	bne.n	21c5a <ipc_irq_handler+0x7e>
   21c20:	4b28      	ldr	r3, [pc, #160]	; (21cc4 <ipc_irq_handler+0xe8>)
   21c22:	429c      	cmp	r4, r3
   21c24:	d010      	beq.n	21c48 <ipc_irq_handler+0x6c>
   21c26:	d809      	bhi.n	21c3c <ipc_irq_handler+0x60>
   21c28:	3b02      	subs	r3, #2
   21c2a:	429c      	cmp	r4, r3
   21c2c:	d00f      	beq.n	21c4e <ipc_irq_handler+0x72>
   21c2e:	3301      	adds	r3, #1
   21c30:	429c      	cmp	r4, r3
   21c32:	d00f      	beq.n	21c54 <ipc_irq_handler+0x78>
   21c34:	4b24      	ldr	r3, [pc, #144]	; (21cc8 <ipc_irq_handler+0xec>)
   21c36:	601c      	str	r4, [r3, #0]
   21c38:	2000      	movs	r0, #0
   21c3a:	e7db      	b.n	21bf4 <ipc_irq_handler+0x18>
   21c3c:	4b23      	ldr	r3, [pc, #140]	; (21ccc <ipc_irq_handler+0xf0>)
   21c3e:	429c      	cmp	r4, r3
   21c40:	d1f8      	bne.n	21c34 <ipc_irq_handler+0x58>
   21c42:	f06f 040c 	mvn.w	r4, #12
   21c46:	e7f5      	b.n	21c34 <ipc_irq_handler+0x58>
   21c48:	f06f 040b 	mvn.w	r4, #11
   21c4c:	e7f2      	b.n	21c34 <ipc_irq_handler+0x58>
   21c4e:	f06f 0415 	mvn.w	r4, #21
   21c52:	e7ef      	b.n	21c34 <ipc_irq_handler+0x58>
   21c54:	f06f 0485 	mvn.w	r4, #133	; 0x85
   21c58:	e7ec      	b.n	21c34 <ipc_irq_handler+0x58>
   21c5a:	4631      	mov	r1, r6
   21c5c:	f3c4 000b 	ubfx	r0, r4, #0, #12
   21c60:	f001 fc7e 	bl	23560 <nrf_modem_fault_handler_internal>
   21c64:	e7e8      	b.n	21c38 <ipc_irq_handler+0x5c>
   21c66:	2202      	movs	r2, #2
   21c68:	4b14      	ldr	r3, [pc, #80]	; (21cbc <ipc_irq_handler+0xe0>)
   21c6a:	2000      	movs	r0, #0
   21c6c:	701a      	strb	r2, [r3, #0]
   21c6e:	f001 fc83 	bl	23578 <nrf_modem_state_set>
   21c72:	4b13      	ldr	r3, [pc, #76]	; (21cc0 <ipc_irq_handler+0xe4>)
   21c74:	6818      	ldr	r0, [r3, #0]
   21c76:	f004 fdd7 	bl	26828 <nrf_modem_os_sem_give>
   21c7a:	e7dd      	b.n	21c38 <ipc_irq_handler+0x5c>
   21c7c:	f7ff ff9c 	bl	21bb8 <rpc_message_handler>
   21c80:	2002      	movs	r0, #2
   21c82:	e7b7      	b.n	21bf4 <ipc_irq_handler+0x18>
   21c84:	4b0d      	ldr	r3, [pc, #52]	; (21cbc <ipc_irq_handler+0xe0>)
   21c86:	781a      	ldrb	r2, [r3, #0]
   21c88:	2a01      	cmp	r2, #1
   21c8a:	b2d0      	uxtb	r0, r2
   21c8c:	d10e      	bne.n	21cac <ipc_irq_handler+0xd0>
   21c8e:	4a10      	ldr	r2, [pc, #64]	; (21cd0 <ipc_irq_handler+0xf4>)
   21c90:	6811      	ldr	r1, [r2, #0]
   21c92:	4a10      	ldr	r2, [pc, #64]	; (21cd4 <ipc_irq_handler+0xf8>)
   21c94:	688c      	ldr	r4, [r1, #8]
   21c96:	6054      	str	r4, [r2, #4]
   21c98:	6849      	ldr	r1, [r1, #4]
   21c9a:	6011      	str	r1, [r2, #0]
   21c9c:	2200      	movs	r2, #0
   21c9e:	701a      	strb	r2, [r3, #0]
   21ca0:	f001 fc6a 	bl	23578 <nrf_modem_state_set>
   21ca4:	4b06      	ldr	r3, [pc, #24]	; (21cc0 <ipc_irq_handler+0xe4>)
   21ca6:	6818      	ldr	r0, [r3, #0]
   21ca8:	f004 fdbe 	bl	26828 <nrf_modem_os_sem_give>
   21cac:	f7ff ff84 	bl	21bb8 <rpc_message_handler>
   21cb0:	2001      	movs	r0, #1
   21cb2:	e79f      	b.n	21bf4 <ipc_irq_handler+0x18>
   21cb4:	bd70      	pop	{r4, r5, r6, pc}
   21cb6:	bf00      	nop
   21cb8:	4002a000 	.word	0x4002a000
   21cbc:	2000dde6 	.word	0x2000dde6
   21cc0:	2000d474 	.word	0x2000d474
   21cc4:	00010022 	.word	0x00010022
   21cc8:	2000d488 	.word	0x2000d488
   21ccc:	00013032 	.word	0x00013032
   21cd0:	2000d470 	.word	0x2000d470
   21cd4:	2000d48c 	.word	0x2000d48c

00021cd8 <rpc_transport_ipc_data_msg_send>:
   21cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21cda:	4b16      	ldr	r3, [pc, #88]	; (21d34 <rpc_transport_ipc_data_msg_send+0x5c>)
   21cdc:	6842      	ldr	r2, [r0, #4]
   21cde:	681b      	ldr	r3, [r3, #0]
   21ce0:	4c15      	ldr	r4, [pc, #84]	; (21d38 <rpc_transport_ipc_data_msg_send+0x60>)
   21ce2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   21ce6:	f042 0202 	orr.w	r2, r2, #2
   21cea:	1ac3      	subs	r3, r0, r3
   21cec:	6042      	str	r2, [r0, #4]
   21cee:	6821      	ldr	r1, [r4, #0]
   21cf0:	4a12      	ldr	r2, [pc, #72]	; (21d3c <rpc_transport_ipc_data_msg_send+0x64>)
   21cf2:	f3c3 1389 	ubfx	r3, r3, #6, #10
   21cf6:	e8d2 5fdf 	ldaexh	r5, [r2]
   21cfa:	1c6e      	adds	r6, r5, #1
   21cfc:	e8c2 6fd7 	stlexh	r7, r6, [r2]
   21d00:	2f00      	cmp	r7, #0
   21d02:	d1f8      	bne.n	21cf6 <rpc_transport_ipc_data_msg_send+0x1e>
   21d04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   21d08:	684a      	ldr	r2, [r1, #4]
   21d0a:	b292      	uxth	r2, r2
   21d0c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   21d10:	604a      	str	r2, [r1, #4]
   21d12:	6822      	ldr	r2, [r4, #0]
   21d14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   21d18:	6098      	str	r0, [r3, #8]
   21d1a:	685a      	ldr	r2, [r3, #4]
   21d1c:	2003      	movs	r0, #3
   21d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   21d22:	f042 0201 	orr.w	r2, r2, #1
   21d26:	605a      	str	r2, [r3, #4]
   21d28:	f004 fd74 	bl	26814 <nrf_modem_os_busywait>
   21d2c:	2201      	movs	r2, #1
   21d2e:	4b04      	ldr	r3, [pc, #16]	; (21d40 <rpc_transport_ipc_data_msg_send+0x68>)
   21d30:	60da      	str	r2, [r3, #12]
   21d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d34:	2000d47c 	.word	0x2000d47c
   21d38:	2000d484 	.word	0x2000d484
   21d3c:	2000d896 	.word	0x2000d896
   21d40:	4002a000 	.word	0x4002a000

00021d44 <rpc_transport_ipc_ctrl_msg_alloc>:
   21d44:	230a      	movs	r3, #10
   21d46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21d48:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   21d4c:	4e0c      	ldr	r6, [pc, #48]	; (21d80 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   21d4e:	4f0d      	ldr	r7, [pc, #52]	; (21d84 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   21d50:	9301      	str	r3, [sp, #4]
   21d52:	6831      	ldr	r1, [r6, #0]
   21d54:	6838      	ldr	r0, [r7, #0]
   21d56:	f005 f984 	bl	27062 <rpc_transport_ipc_msg_alloc>
   21d5a:	4604      	mov	r4, r0
   21d5c:	b940      	cbnz	r0, 21d70 <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
   21d5e:	f004 fd61 	bl	26824 <nrf_modem_os_is_in_isr>
   21d62:	b940      	cbnz	r0, 21d76 <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   21d64:	2001      	movs	r0, #1
   21d66:	a901      	add	r1, sp, #4
   21d68:	f7fb ff5e 	bl	1dc28 <nrf_modem_os_timedwait>
   21d6c:	306e      	adds	r0, #110	; 0x6e
   21d6e:	d1f0      	bne.n	21d52 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   21d70:	4620      	mov	r0, r4
   21d72:	b003      	add	sp, #12
   21d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21d76:	9801      	ldr	r0, [sp, #4]
   21d78:	4368      	muls	r0, r5
   21d7a:	f004 fd4b 	bl	26814 <nrf_modem_os_busywait>
   21d7e:	e7e8      	b.n	21d52 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   21d80:	2000d478 	.word	0x2000d478
   21d84:	2000d480 	.word	0x2000d480

00021d88 <rpc_transport_ipc_data_msg_alloc>:
   21d88:	4b05      	ldr	r3, [pc, #20]	; (21da0 <rpc_transport_ipc_data_msg_alloc+0x18>)
   21d8a:	781b      	ldrb	r3, [r3, #0]
   21d8c:	b92b      	cbnz	r3, 21d9a <rpc_transport_ipc_data_msg_alloc+0x12>
   21d8e:	4b05      	ldr	r3, [pc, #20]	; (21da4 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   21d90:	6819      	ldr	r1, [r3, #0]
   21d92:	4b05      	ldr	r3, [pc, #20]	; (21da8 <rpc_transport_ipc_data_msg_alloc+0x20>)
   21d94:	6818      	ldr	r0, [r3, #0]
   21d96:	f005 b964 	b.w	27062 <rpc_transport_ipc_msg_alloc>
   21d9a:	2000      	movs	r0, #0
   21d9c:	4770      	bx	lr
   21d9e:	bf00      	nop
   21da0:	2000dde5 	.word	0x2000dde5
   21da4:	2000d47c 	.word	0x2000d47c
   21da8:	2000d484 	.word	0x2000d484

00021dac <rpc_transport_ipc_init>:
   21dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21db0:	b095      	sub	sp, #84	; 0x54
   21db2:	2238      	movs	r2, #56	; 0x38
   21db4:	2100      	movs	r1, #0
   21db6:	4606      	mov	r6, r0
   21db8:	a803      	add	r0, sp, #12
   21dba:	f006 fba9 	bl	28510 <memset>
   21dbe:	2302      	movs	r3, #2
   21dc0:	9304      	str	r3, [sp, #16]
   21dc2:	2308      	movs	r3, #8
   21dc4:	9306      	str	r3, [sp, #24]
   21dc6:	2320      	movs	r3, #32
   21dc8:	9308      	str	r3, [sp, #32]
   21dca:	2304      	movs	r3, #4
   21dcc:	930d      	str	r3, [sp, #52]	; 0x34
   21dce:	2310      	movs	r3, #16
   21dd0:	2540      	movs	r5, #64	; 0x40
   21dd2:	930f      	str	r3, [sp, #60]	; 0x3c
   21dd4:	2380      	movs	r3, #128	; 0x80
   21dd6:	2201      	movs	r2, #1
   21dd8:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
   21ddc:	23d5      	movs	r3, #213	; 0xd5
   21dde:	2100      	movs	r1, #0
   21de0:	4855      	ldr	r0, [pc, #340]	; (21f38 <rpc_transport_ipc_init+0x18c>)
   21de2:	920b      	str	r2, [sp, #44]	; 0x2c
   21de4:	9313      	str	r3, [sp, #76]	; 0x4c
   21de6:	f7fb ffe1 	bl	1ddac <nrf_modem_os_sem_init>
   21dea:	4605      	mov	r5, r0
   21dec:	2800      	cmp	r0, #0
   21dee:	f040 809f 	bne.w	21f30 <rpc_transport_ipc_init+0x184>
   21df2:	4602      	mov	r2, r0
   21df4:	4951      	ldr	r1, [pc, #324]	; (21f3c <rpc_transport_ipc_init+0x190>)
   21df6:	7930      	ldrb	r0, [r6, #4]
   21df8:	f7ff f8bc 	bl	20f74 <nrfx_ipc_init>
   21dfc:	a803      	add	r0, sp, #12
   21dfe:	f7ff f8d1 	bl	20fa4 <nrfx_ipc_config_load>
   21e02:	6834      	ldr	r4, [r6, #0]
   21e04:	6862      	ldr	r2, [r4, #4]
   21e06:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   21e0a:	f040 8089 	bne.w	21f20 <rpc_transport_ipc_init+0x174>
   21e0e:	6961      	ldr	r1, [r4, #20]
   21e10:	68e3      	ldr	r3, [r4, #12]
   21e12:	440b      	add	r3, r1
   21e14:	69e1      	ldr	r1, [r4, #28]
   21e16:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   21e1a:	440b      	add	r3, r1
   21e1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   21e20:	d87e      	bhi.n	21f20 <rpc_transport_ipc_init+0x174>
   21e22:	6820      	ldr	r0, [r4, #0]
   21e24:	4629      	mov	r1, r5
   21e26:	f006 fb73 	bl	28510 <memset>
   21e2a:	6833      	ldr	r3, [r6, #0]
   21e2c:	681c      	ldr	r4, [r3, #0]
   21e2e:	f8d3 901c 	ldr.w	r9, [r3, #28]
   21e32:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   21e36:	9201      	str	r2, [sp, #4]
   21e38:	f104 0760 	add.w	r7, r4, #96	; 0x60
   21e3c:	4a40      	ldr	r2, [pc, #256]	; (21f40 <rpc_transport_ipc_init+0x194>)
   21e3e:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
   21e42:	f104 0b20 	add.w	fp, r4, #32
   21e46:	f1b9 0f00 	cmp.w	r9, #0
   21e4a:	d15c      	bne.n	21f06 <rpc_transport_ipc_init+0x15a>
   21e4c:	f8c2 b000 	str.w	fp, [r2]
   21e50:	2500      	movs	r5, #0
   21e52:	f04f 0a01 	mov.w	sl, #1
   21e56:	7025      	strb	r5, [r4, #0]
   21e58:	7065      	strb	r5, [r4, #1]
   21e5a:	f884 a002 	strb.w	sl, [r4, #2]
   21e5e:	70e5      	strb	r5, [r4, #3]
   21e60:	6833      	ldr	r3, [r6, #0]
   21e62:	4640      	mov	r0, r8
   21e64:	691b      	ldr	r3, [r3, #16]
   21e66:	6063      	str	r3, [r4, #4]
   21e68:	6833      	ldr	r3, [r6, #0]
   21e6a:	695b      	ldr	r3, [r3, #20]
   21e6c:	f8c4 b014 	str.w	fp, [r4, #20]
   21e70:	60a3      	str	r3, [r4, #8]
   21e72:	4b34      	ldr	r3, [pc, #208]	; (21f44 <rpc_transport_ipc_init+0x198>)
   21e74:	f8c4 9018 	str.w	r9, [r4, #24]
   21e78:	f8c3 8000 	str.w	r8, [r3]
   21e7c:	4b32      	ldr	r3, [pc, #200]	; (21f48 <rpc_transport_ipc_init+0x19c>)
   21e7e:	60e7      	str	r7, [r4, #12]
   21e80:	601f      	str	r7, [r3, #0]
   21e82:	2308      	movs	r3, #8
   21e84:	f8c4 8010 	str.w	r8, [r4, #16]
   21e88:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
   21e8c:	f888 5001 	strb.w	r5, [r8, #1]
   21e90:	f888 5002 	strb.w	r5, [r8, #2]
   21e94:	f888 5003 	strb.w	r5, [r8, #3]
   21e98:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   21e9c:	707d      	strb	r5, [r7, #1]
   21e9e:	70bd      	strb	r5, [r7, #2]
   21ea0:	70fd      	strb	r5, [r7, #3]
   21ea2:	f005 f8c6 	bl	27032 <rpc_list_preambles_init>
   21ea6:	4638      	mov	r0, r7
   21ea8:	f005 f8c3 	bl	27032 <rpc_list_preambles_init>
   21eac:	4b27      	ldr	r3, [pc, #156]	; (21f4c <rpc_transport_ipc_init+0x1a0>)
   21eae:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   21eb2:	601a      	str	r2, [r3, #0]
   21eb4:	4b26      	ldr	r3, [pc, #152]	; (21f50 <rpc_transport_ipc_init+0x1a4>)
   21eb6:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
   21eba:	601a      	str	r2, [r3, #0]
   21ebc:	6831      	ldr	r1, [r6, #0]
   21ebe:	4b25      	ldr	r3, [pc, #148]	; (21f54 <rpc_transport_ipc_init+0x1a8>)
   21ec0:	6019      	str	r1, [r3, #0]
   21ec2:	4b25      	ldr	r3, [pc, #148]	; (21f58 <rpc_transport_ipc_init+0x1ac>)
   21ec4:	4925      	ldr	r1, [pc, #148]	; (21f5c <rpc_transport_ipc_init+0x1b0>)
   21ec6:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
   21eca:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
   21ece:	4b24      	ldr	r3, [pc, #144]	; (21f60 <rpc_transport_ipc_init+0x1b4>)
   21ed0:	4c24      	ldr	r4, [pc, #144]	; (21f64 <rpc_transport_ipc_init+0x1b8>)
   21ed2:	801d      	strh	r5, [r3, #0]
   21ed4:	4b24      	ldr	r3, [pc, #144]	; (21f68 <rpc_transport_ipc_init+0x1bc>)
   21ed6:	6025      	str	r5, [r4, #0]
   21ed8:	801d      	strh	r5, [r3, #0]
   21eda:	4b24      	ldr	r3, [pc, #144]	; (21f6c <rpc_transport_ipc_init+0x1c0>)
   21edc:	f883 a000 	strb.w	sl, [r3]
   21ee0:	4b23      	ldr	r3, [pc, #140]	; (21f70 <rpc_transport_ipc_init+0x1c4>)
   21ee2:	9502      	str	r5, [sp, #8]
   21ee4:	611d      	str	r5, [r3, #16]
   21ee6:	691b      	ldr	r3, [r3, #16]
   21ee8:	9302      	str	r3, [sp, #8]
   21eea:	9b02      	ldr	r3, [sp, #8]
   21eec:	4b12      	ldr	r3, [pc, #72]	; (21f38 <rpc_transport_ipc_init+0x18c>)
   21eee:	6818      	ldr	r0, [r3, #0]
   21ef0:	f004 fc9c 	bl	2682c <nrf_modem_os_sem_take>
   21ef4:	b9c8      	cbnz	r0, 21f2a <rpc_transport_ipc_init+0x17e>
   21ef6:	6824      	ldr	r4, [r4, #0]
   21ef8:	b9a4      	cbnz	r4, 21f24 <rpc_transport_ipc_init+0x178>
   21efa:	4b1e      	ldr	r3, [pc, #120]	; (21f74 <rpc_transport_ipc_init+0x1c8>)
   21efc:	701c      	strb	r4, [r3, #0]
   21efe:	4620      	mov	r0, r4
   21f00:	b015      	add	sp, #84	; 0x54
   21f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f06:	699b      	ldr	r3, [r3, #24]
   21f08:	f104 0940 	add.w	r9, r4, #64	; 0x40
   21f0c:	6463      	str	r3, [r4, #68]	; 0x44
   21f0e:	6833      	ldr	r3, [r6, #0]
   21f10:	4648      	mov	r0, r9
   21f12:	69db      	ldr	r3, [r3, #28]
   21f14:	f8c2 b000 	str.w	fp, [r2]
   21f18:	6423      	str	r3, [r4, #64]	; 0x40
   21f1a:	f001 fb3b 	bl	23594 <ipc_trace_init>
   21f1e:	e797      	b.n	21e50 <rpc_transport_ipc_init+0xa4>
   21f20:	f06f 0415 	mvn.w	r4, #21
   21f24:	f7ff f85e 	bl	20fe4 <nrfx_ipc_uninit>
   21f28:	e7e9      	b.n	21efe <rpc_transport_ipc_init+0x152>
   21f2a:	f06f 0473 	mvn.w	r4, #115	; 0x73
   21f2e:	e7f9      	b.n	21f24 <rpc_transport_ipc_init+0x178>
   21f30:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   21f34:	e7e3      	b.n	21efe <rpc_transport_ipc_init+0x152>
   21f36:	bf00      	nop
   21f38:	2000d474 	.word	0x2000d474
   21f3c:	00021bdd 	.word	0x00021bdd
   21f40:	2000d470 	.word	0x2000d470
   21f44:	2000d484 	.word	0x2000d484
   21f48:	2000d480 	.word	0x2000d480
   21f4c:	2000d47c 	.word	0x2000d47c
   21f50:	2000d478 	.word	0x2000d478
   21f54:	2000d46c 	.word	0x2000d46c
   21f58:	4002a000 	.word	0x4002a000
   21f5c:	000249f0 	.word	0x000249f0
   21f60:	2000d896 	.word	0x2000d896
   21f64:	2000d488 	.word	0x2000d488
   21f68:	2000d894 	.word	0x2000d894
   21f6c:	2000dde6 	.word	0x2000dde6
   21f70:	40005600 	.word	0x40005600
   21f74:	2000dde5 	.word	0x2000dde5

00021f78 <rpc_transport_ipc_ctrl_msg_send>:
   21f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f7a:	4b16      	ldr	r3, [pc, #88]	; (21fd4 <rpc_transport_ipc_ctrl_msg_send+0x5c>)
   21f7c:	6842      	ldr	r2, [r0, #4]
   21f7e:	681b      	ldr	r3, [r3, #0]
   21f80:	4c15      	ldr	r4, [pc, #84]	; (21fd8 <rpc_transport_ipc_ctrl_msg_send+0x60>)
   21f82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   21f86:	f042 0201 	orr.w	r2, r2, #1
   21f8a:	1ac3      	subs	r3, r0, r3
   21f8c:	6042      	str	r2, [r0, #4]
   21f8e:	6821      	ldr	r1, [r4, #0]
   21f90:	4a12      	ldr	r2, [pc, #72]	; (21fdc <rpc_transport_ipc_ctrl_msg_send+0x64>)
   21f92:	f3c3 1389 	ubfx	r3, r3, #6, #10
   21f96:	e8d2 5fdf 	ldaexh	r5, [r2]
   21f9a:	1c6e      	adds	r6, r5, #1
   21f9c:	e8c2 6fd7 	stlexh	r7, r6, [r2]
   21fa0:	2f00      	cmp	r7, #0
   21fa2:	d1f8      	bne.n	21f96 <rpc_transport_ipc_ctrl_msg_send+0x1e>
   21fa4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   21fa8:	684a      	ldr	r2, [r1, #4]
   21faa:	b292      	uxth	r2, r2
   21fac:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   21fb0:	604a      	str	r2, [r1, #4]
   21fb2:	6822      	ldr	r2, [r4, #0]
   21fb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   21fb8:	6098      	str	r0, [r3, #8]
   21fba:	685a      	ldr	r2, [r3, #4]
   21fbc:	2003      	movs	r0, #3
   21fbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   21fc2:	f042 0201 	orr.w	r2, r2, #1
   21fc6:	605a      	str	r2, [r3, #4]
   21fc8:	f004 fc24 	bl	26814 <nrf_modem_os_busywait>
   21fcc:	2201      	movs	r2, #1
   21fce:	4b04      	ldr	r3, [pc, #16]	; (21fe0 <rpc_transport_ipc_ctrl_msg_send+0x68>)
   21fd0:	605a      	str	r2, [r3, #4]
   21fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21fd4:	2000d478 	.word	0x2000d478
   21fd8:	2000d480 	.word	0x2000d480
   21fdc:	2000d896 	.word	0x2000d896
   21fe0:	4002a000 	.word	0x4002a000

00021fe4 <rpc_transport_ipc_request_shutdown>:
   21fe4:	b510      	push	{r4, lr}
   21fe6:	f7ff fead 	bl	21d44 <rpc_transport_ipc_ctrl_msg_alloc>
   21fea:	2401      	movs	r4, #1
   21fec:	2200      	movs	r2, #0
   21fee:	2103      	movs	r1, #3
   21ff0:	7004      	strb	r4, [r0, #0]
   21ff2:	7081      	strb	r1, [r0, #2]
   21ff4:	7042      	strb	r2, [r0, #1]
   21ff6:	70c2      	strb	r2, [r0, #3]
   21ff8:	f7ff ffbe 	bl	21f78 <rpc_transport_ipc_ctrl_msg_send>
   21ffc:	4b05      	ldr	r3, [pc, #20]	; (22014 <rpc_transport_ipc_request_shutdown+0x30>)
   21ffe:	701c      	strb	r4, [r3, #0]
   22000:	f005 f82a 	bl	27058 <rpc_transport_ipc_data_rx_suspend>
   22004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22008:	4b03      	ldr	r3, [pc, #12]	; (22018 <rpc_transport_ipc_request_shutdown+0x34>)
   2200a:	f247 5130 	movw	r1, #30000	; 0x7530
   2200e:	6818      	ldr	r0, [r3, #0]
   22010:	f004 bc0c 	b.w	2682c <nrf_modem_os_sem_take>
   22014:	2000dde5 	.word	0x2000dde5
   22018:	2000d474 	.word	0x2000d474

0002201c <rpc_transport_ipc_msg_data_rx_free>:
   2201c:	b510      	push	{r4, lr}
   2201e:	4b0a      	ldr	r3, [pc, #40]	; (22048 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
   22020:	4604      	mov	r4, r0
   22022:	781b      	ldrb	r3, [r3, #0]
   22024:	2b03      	cmp	r3, #3
   22026:	d00e      	beq.n	22046 <rpc_transport_ipc_msg_data_rx_free+0x2a>
   22028:	f7ff fe8c 	bl	21d44 <rpc_transport_ipc_ctrl_msg_alloc>
   2202c:	b158      	cbz	r0, 22046 <rpc_transport_ipc_msg_data_rx_free+0x2a>
   2202e:	2101      	movs	r1, #1
   22030:	2200      	movs	r2, #0
   22032:	7001      	strb	r1, [r0, #0]
   22034:	2102      	movs	r1, #2
   22036:	6084      	str	r4, [r0, #8]
   22038:	7042      	strb	r2, [r0, #1]
   2203a:	7081      	strb	r1, [r0, #2]
   2203c:	70c2      	strb	r2, [r0, #3]
   2203e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22042:	f7ff bf99 	b.w	21f78 <rpc_transport_ipc_ctrl_msg_send>
   22046:	bd10      	pop	{r4, pc}
   22048:	2000dde6 	.word	0x2000dde6

0002204c <sock_init>:
   2204c:	f44f 7250 	mov.w	r2, #832	; 0x340
   22050:	2100      	movs	r1, #0
   22052:	b508      	push	{r3, lr}
   22054:	4808      	ldr	r0, [pc, #32]	; (22078 <sock_init+0x2c>)
   22056:	f006 fa5b 	bl	28510 <memset>
   2205a:	2300      	movs	r3, #0
   2205c:	4619      	mov	r1, r3
   2205e:	4a07      	ldr	r2, [pc, #28]	; (2207c <sock_init+0x30>)
   22060:	4807      	ldr	r0, [pc, #28]	; (22080 <sock_init+0x34>)
   22062:	7013      	strb	r3, [r2, #0]
   22064:	4a04      	ldr	r2, [pc, #16]	; (22078 <sock_init+0x2c>)
   22066:	3301      	adds	r3, #1
   22068:	2b08      	cmp	r3, #8
   2206a:	e9c2 0100 	strd	r0, r1, [r2]
   2206e:	6091      	str	r1, [r2, #8]
   22070:	f102 0268 	add.w	r2, r2, #104	; 0x68
   22074:	d1f7      	bne.n	22066 <sock_init+0x1a>
   22076:	bd08      	pop	{r3, pc}
   22078:	2000d494 	.word	0x2000d494
   2207c:	2000dde7 	.word	0x2000dde7
   22080:	1badf11e 	.word	0x1badf11e

00022084 <sock_open>:
   22084:	b570      	push	{r4, r5, r6, lr}
   22086:	2300      	movs	r3, #0
   22088:	2468      	movs	r4, #104	; 0x68
   2208a:	4a0e      	ldr	r2, [pc, #56]	; (220c4 <sock_open+0x40>)
   2208c:	4d0e      	ldr	r5, [pc, #56]	; (220c8 <sock_open+0x44>)
   2208e:	fb04 f103 	mul.w	r1, r4, r3
   22092:	5856      	ldr	r6, [r2, r1]
   22094:	1888      	adds	r0, r1, r2
   22096:	42ae      	cmp	r6, r5
   22098:	d10e      	bne.n	220b8 <sock_open+0x34>
   2209a:	f04f 33ff 	mov.w	r3, #4294967295
   2209e:	5053      	str	r3, [r2, r1]
   220a0:	4a0a      	ldr	r2, [pc, #40]	; (220cc <sock_open+0x48>)
   220a2:	7f03      	ldrb	r3, [r0, #28]
   220a4:	7812      	ldrb	r2, [r2, #0]
   220a6:	f362 1386 	bfi	r3, r2, #6, #1
   220aa:	7703      	strb	r3, [r0, #28]
   220ac:	2302      	movs	r3, #2
   220ae:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   220b2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   220b6:	bd70      	pop	{r4, r5, r6, pc}
   220b8:	3301      	adds	r3, #1
   220ba:	2b08      	cmp	r3, #8
   220bc:	d1e7      	bne.n	2208e <sock_open+0xa>
   220be:	2000      	movs	r0, #0
   220c0:	e7f9      	b.n	220b6 <sock_open+0x32>
   220c2:	bf00      	nop
   220c4:	2000d494 	.word	0x2000d494
   220c8:	1badf11e 	.word	0x1badf11e
   220cc:	2000dde7 	.word	0x2000dde7

000220d0 <sock_find>:
   220d0:	b530      	push	{r4, r5, lr}
   220d2:	4602      	mov	r2, r0
   220d4:	2300      	movs	r3, #0
   220d6:	2568      	movs	r5, #104	; 0x68
   220d8:	4905      	ldr	r1, [pc, #20]	; (220f0 <sock_find+0x20>)
   220da:	fb05 f403 	mul.w	r4, r5, r3
   220de:	1860      	adds	r0, r4, r1
   220e0:	590c      	ldr	r4, [r1, r4]
   220e2:	4294      	cmp	r4, r2
   220e4:	d003      	beq.n	220ee <sock_find+0x1e>
   220e6:	3301      	adds	r3, #1
   220e8:	2b08      	cmp	r3, #8
   220ea:	d1f6      	bne.n	220da <sock_find+0xa>
   220ec:	2000      	movs	r0, #0
   220ee:	bd30      	pop	{r4, r5, pc}
   220f0:	2000d494 	.word	0x2000d494

000220f4 <_sock_close>:
   220f4:	b538      	push	{r3, r4, r5, lr}
   220f6:	f7ff ffeb 	bl	220d0 <sock_find>
   220fa:	4604      	mov	r4, r0
   220fc:	1d05      	adds	r5, r0, #4
   220fe:	4628      	mov	r0, r5
   22100:	f005 f988 	bl	27414 <pkt_flush>
   22104:	6c20      	ldr	r0, [r4, #64]	; 0x40
   22106:	b108      	cbz	r0, 2210c <_sock_close+0x18>
   22108:	f7fb fe90 	bl	1de2c <nrf_modem_os_free>
   2210c:	2264      	movs	r2, #100	; 0x64
   2210e:	2100      	movs	r1, #0
   22110:	4628      	mov	r0, r5
   22112:	f006 f9fd 	bl	28510 <memset>
   22116:	4b01      	ldr	r3, [pc, #4]	; (2211c <_sock_close+0x28>)
   22118:	6023      	str	r3, [r4, #0]
   2211a:	bd38      	pop	{r3, r4, r5, pc}
   2211c:	1badf11e 	.word	0x1badf11e

00022120 <sock_flow_control_set>:
   22120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22124:	1e02      	subs	r2, r0, #0
   22126:	4c10      	ldr	r4, [pc, #64]	; (22168 <sock_flow_control_set+0x48>)
   22128:	bf18      	it	ne
   2212a:	2201      	movne	r2, #1
   2212c:	4606      	mov	r6, r0
   2212e:	2500      	movs	r5, #0
   22130:	46a0      	mov	r8, r4
   22132:	f04f 0968 	mov.w	r9, #104	; 0x68
   22136:	4b0d      	ldr	r3, [pc, #52]	; (2216c <sock_flow_control_set+0x4c>)
   22138:	4f0d      	ldr	r7, [pc, #52]	; (22170 <sock_flow_control_set+0x50>)
   2213a:	701a      	strb	r2, [r3, #0]
   2213c:	6823      	ldr	r3, [r4, #0]
   2213e:	42bb      	cmp	r3, r7
   22140:	d00a      	beq.n	22158 <sock_flow_control_set+0x38>
   22142:	fb09 8305 	mla	r3, r9, r5, r8
   22146:	7f1a      	ldrb	r2, [r3, #28]
   22148:	f366 1286 	bfi	r2, r6, #6, #1
   2214c:	771a      	strb	r2, [r3, #28]
   2214e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22150:	b113      	cbz	r3, 22158 <sock_flow_control_set+0x38>
   22152:	4620      	mov	r0, r4
   22154:	f005 f815 	bl	27182 <sock_pollcb>
   22158:	3501      	adds	r5, #1
   2215a:	2d08      	cmp	r5, #8
   2215c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   22160:	d1ec      	bne.n	2213c <sock_flow_control_set+0x1c>
   22162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22166:	bf00      	nop
   22168:	2000d494 	.word	0x2000d494
   2216c:	2000dde7 	.word	0x2000dde7
   22170:	1badf11e 	.word	0x1badf11e

00022174 <sock_proto_is_valid>:
   22174:	2811      	cmp	r0, #17
   22176:	dc06      	bgt.n	22186 <sock_proto_is_valid+0x12>
   22178:	2800      	cmp	r0, #0
   2217a:	db0d      	blt.n	22198 <sock_proto_is_valid+0x24>
   2217c:	4b08      	ldr	r3, [pc, #32]	; (221a0 <sock_proto_is_valid+0x2c>)
   2217e:	40c3      	lsrs	r3, r0
   22180:	f003 0001 	and.w	r0, r3, #1
   22184:	4770      	bx	lr
   22186:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2218a:	d007      	beq.n	2219c <sock_proto_is_valid+0x28>
   2218c:	f240 1311 	movw	r3, #273	; 0x111
   22190:	1ac3      	subs	r3, r0, r3
   22192:	4258      	negs	r0, r3
   22194:	4158      	adcs	r0, r3
   22196:	4770      	bx	lr
   22198:	2000      	movs	r0, #0
   2219a:	4770      	bx	lr
   2219c:	2001      	movs	r0, #1
   2219e:	4770      	bx	lr
   221a0:	00020041 	.word	0x00020041

000221a4 <on_getaddrinfo_res>:
   221a4:	2301      	movs	r3, #1
   221a6:	4a03      	ldr	r2, [pc, #12]	; (221b4 <on_getaddrinfo_res+0x10>)
   221a8:	7013      	strb	r3, [r2, #0]
   221aa:	4a03      	ldr	r2, [pc, #12]	; (221b8 <on_getaddrinfo_res+0x14>)
   221ac:	6010      	str	r0, [r2, #0]
   221ae:	4618      	mov	r0, r3
   221b0:	4770      	bx	lr
   221b2:	bf00      	nop
   221b4:	2000dde8 	.word	0x2000dde8
   221b8:	2000d7d4 	.word	0x2000d7d4

000221bc <addrinfo_init>:
   221bc:	2201      	movs	r2, #1
   221be:	b508      	push	{r3, lr}
   221c0:	4611      	mov	r1, r2
   221c2:	4804      	ldr	r0, [pc, #16]	; (221d4 <addrinfo_init+0x18>)
   221c4:	f7fb fdf2 	bl	1ddac <nrf_modem_os_sem_init>
   221c8:	2800      	cmp	r0, #0
   221ca:	bf18      	it	ne
   221cc:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   221d0:	bd08      	pop	{r3, pc}
   221d2:	bf00      	nop
   221d4:	2000d7d8 	.word	0x2000d7d8

000221d8 <nrf_getaddrinfo>:
   221d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221dc:	b085      	sub	sp, #20
   221de:	4680      	mov	r8, r0
   221e0:	460f      	mov	r7, r1
   221e2:	4616      	mov	r6, r2
   221e4:	461d      	mov	r5, r3
   221e6:	f001 f9cd 	bl	23584 <nrf_modem_state_is_initialized>
   221ea:	b928      	cbnz	r0, 221f8 <nrf_getaddrinfo+0x20>
   221ec:	2001      	movs	r0, #1
   221ee:	f004 fb13 	bl	26818 <nrf_modem_os_errno_set>
   221f2:	f06f 040a 	mvn.w	r4, #10
   221f6:	e01c      	b.n	22232 <nrf_getaddrinfo+0x5a>
   221f8:	ea58 0307 	orrs.w	r3, r8, r7
   221fc:	f000 8164 	beq.w	224c8 <nrf_getaddrinfo+0x2f0>
   22200:	b31e      	cbz	r6, 2224a <nrf_getaddrinfo+0x72>
   22202:	6833      	ldr	r3, [r6, #0]
   22204:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   22208:	f023 0302 	bic.w	r3, r3, #2
   2220c:	2b00      	cmp	r3, #0
   2220e:	f040 815e 	bne.w	224ce <nrf_getaddrinfo+0x2f6>
   22212:	6870      	ldr	r0, [r6, #4]
   22214:	b938      	cbnz	r0, 22226 <nrf_getaddrinfo+0x4e>
   22216:	68b0      	ldr	r0, [r6, #8]
   22218:	b178      	cbz	r0, 2223a <nrf_getaddrinfo+0x62>
   2221a:	f005 f898 	bl	2734e <sock_type_is_valid>
   2221e:	b960      	cbnz	r0, 2223a <nrf_getaddrinfo+0x62>
   22220:	f06f 0406 	mvn.w	r4, #6
   22224:	e005      	b.n	22232 <nrf_getaddrinfo+0x5a>
   22226:	f005 f88c 	bl	27342 <sock_family_is_valid>
   2222a:	2800      	cmp	r0, #0
   2222c:	d1f3      	bne.n	22216 <nrf_getaddrinfo+0x3e>
   2222e:	f06f 0405 	mvn.w	r4, #5
   22232:	4620      	mov	r0, r4
   22234:	b005      	add	sp, #20
   22236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2223a:	68f0      	ldr	r0, [r6, #12]
   2223c:	b128      	cbz	r0, 2224a <nrf_getaddrinfo+0x72>
   2223e:	68b1      	ldr	r1, [r6, #8]
   22240:	f005 f88b 	bl	2735a <sock_proto_supports_type>
   22244:	b908      	cbnz	r0, 2224a <nrf_getaddrinfo+0x72>
   22246:	206b      	movs	r0, #107	; 0x6b
   22248:	e7d1      	b.n	221ee <nrf_getaddrinfo+0x16>
   2224a:	4ba4      	ldr	r3, [pc, #656]	; (224dc <nrf_getaddrinfo+0x304>)
   2224c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   22250:	6818      	ldr	r0, [r3, #0]
   22252:	f004 faeb 	bl	2682c <nrf_modem_os_sem_take>
   22256:	4604      	mov	r4, r0
   22258:	2800      	cmp	r0, #0
   2225a:	f040 813b 	bne.w	224d4 <nrf_getaddrinfo+0x2fc>
   2225e:	2f00      	cmp	r7, #0
   22260:	d057      	beq.n	22312 <nrf_getaddrinfo+0x13a>
   22262:	b326      	cbz	r6, 222ae <nrf_getaddrinfo+0xd6>
   22264:	6833      	ldr	r3, [r6, #0]
   22266:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   2226a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2226e:	d11e      	bne.n	222ae <nrf_getaddrinfo+0xd6>
   22270:	6833      	ldr	r3, [r6, #0]
   22272:	04db      	lsls	r3, r3, #19
   22274:	d551      	bpl.n	2231a <nrf_getaddrinfo+0x142>
   22276:	213a      	movs	r1, #58	; 0x3a
   22278:	4638      	mov	r0, r7
   2227a:	f006 f951 	bl	28520 <strchr>
   2227e:	4682      	mov	sl, r0
   22280:	b120      	cbz	r0, 2228c <nrf_getaddrinfo+0xb4>
   22282:	4897      	ldr	r0, [pc, #604]	; (224e0 <nrf_getaddrinfo+0x308>)
   22284:	f7f6 feb2 	bl	18fec <strlen>
   22288:	eb0a 0700 	add.w	r7, sl, r0
   2228c:	4638      	mov	r0, r7
   2228e:	4995      	ldr	r1, [pc, #596]	; (224e4 <nrf_getaddrinfo+0x30c>)
   22290:	f006 f98c 	bl	285ac <strstr>
   22294:	4682      	mov	sl, r0
   22296:	2800      	cmp	r0, #0
   22298:	d037      	beq.n	2230a <nrf_getaddrinfo+0x132>
   2229a:	4892      	ldr	r0, [pc, #584]	; (224e4 <nrf_getaddrinfo+0x30c>)
   2229c:	f7f6 fea6 	bl	18fec <strlen>
   222a0:	220a      	movs	r2, #10
   222a2:	2100      	movs	r1, #0
   222a4:	4450      	add	r0, sl
   222a6:	f002 fdc5 	bl	24e34 <strtol>
   222aa:	4682      	mov	sl, r0
   222ac:	e037      	b.n	2231e <nrf_getaddrinfo+0x146>
   222ae:	220a      	movs	r2, #10
   222b0:	2100      	movs	r1, #0
   222b2:	4638      	mov	r0, r7
   222b4:	f002 fed8 	bl	25068 <strtoul>
   222b8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   222bc:	1e42      	subs	r2, r0, #1
   222be:	429a      	cmp	r2, r3
   222c0:	f200 80ff 	bhi.w	224c2 <nrf_getaddrinfo+0x2ea>
   222c4:	4a88      	ldr	r2, [pc, #544]	; (224e8 <nrf_getaddrinfo+0x310>)
   222c6:	0203      	lsls	r3, r0, #8
   222c8:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   222cc:	8013      	strh	r3, [r2, #0]
   222ce:	2e00      	cmp	r6, #0
   222d0:	d1ce      	bne.n	22270 <nrf_getaddrinfo+0x98>
   222d2:	2300      	movs	r3, #0
   222d4:	2101      	movs	r1, #1
   222d6:	4a85      	ldr	r2, [pc, #532]	; (224ec <nrf_getaddrinfo+0x314>)
   222d8:	f04f 3aff 	mov.w	sl, #4294967295
   222dc:	6013      	str	r3, [r2, #0]
   222de:	4a84      	ldr	r2, [pc, #528]	; (224f0 <nrf_getaddrinfo+0x318>)
   222e0:	6011      	str	r1, [r2, #0]
   222e2:	2106      	movs	r1, #6
   222e4:	4a83      	ldr	r2, [pc, #524]	; (224f4 <nrf_getaddrinfo+0x31c>)
   222e6:	6011      	str	r1, [r2, #0]
   222e8:	4f83      	ldr	r7, [pc, #524]	; (224f8 <nrf_getaddrinfo+0x320>)
   222ea:	4640      	mov	r0, r8
   222ec:	603b      	str	r3, [r7, #0]
   222ee:	f1b8 0f00 	cmp.w	r8, #0
   222f2:	d173      	bne.n	223dc <nrf_getaddrinfo+0x204>
   222f4:	f004 fed8 	bl	270a8 <rpc_client_msg_alloc>
   222f8:	4606      	mov	r6, r0
   222fa:	bb20      	cbnz	r0, 22346 <nrf_getaddrinfo+0x16e>
   222fc:	f06f 0409 	mvn.w	r4, #9
   22300:	4b76      	ldr	r3, [pc, #472]	; (224dc <nrf_getaddrinfo+0x304>)
   22302:	6818      	ldr	r0, [r3, #0]
   22304:	f004 fa90 	bl	26828 <nrf_modem_os_sem_give>
   22308:	e793      	b.n	22232 <nrf_getaddrinfo+0x5a>
   2230a:	4601      	mov	r1, r0
   2230c:	220a      	movs	r2, #10
   2230e:	4638      	mov	r0, r7
   22310:	e7c9      	b.n	222a6 <nrf_getaddrinfo+0xce>
   22312:	4b75      	ldr	r3, [pc, #468]	; (224e8 <nrf_getaddrinfo+0x310>)
   22314:	8018      	strh	r0, [r3, #0]
   22316:	2e00      	cmp	r6, #0
   22318:	d0db      	beq.n	222d2 <nrf_getaddrinfo+0xfa>
   2231a:	f04f 3aff 	mov.w	sl, #4294967295
   2231e:	6870      	ldr	r0, [r6, #4]
   22320:	b108      	cbz	r0, 22326 <nrf_getaddrinfo+0x14e>
   22322:	f000 fe15 	bl	22f50 <nrf_af_to_rpc_af>
   22326:	4b71      	ldr	r3, [pc, #452]	; (224ec <nrf_getaddrinfo+0x314>)
   22328:	4a71      	ldr	r2, [pc, #452]	; (224f0 <nrf_getaddrinfo+0x318>)
   2232a:	6018      	str	r0, [r3, #0]
   2232c:	68b3      	ldr	r3, [r6, #8]
   2232e:	2b00      	cmp	r3, #0
   22330:	bf08      	it	eq
   22332:	2301      	moveq	r3, #1
   22334:	6013      	str	r3, [r2, #0]
   22336:	68f3      	ldr	r3, [r6, #12]
   22338:	4a6e      	ldr	r2, [pc, #440]	; (224f4 <nrf_getaddrinfo+0x31c>)
   2233a:	2b00      	cmp	r3, #0
   2233c:	bf08      	it	eq
   2233e:	2306      	moveq	r3, #6
   22340:	6013      	str	r3, [r2, #0]
   22342:	6833      	ldr	r3, [r6, #0]
   22344:	e7d0      	b.n	222e8 <nrf_getaddrinfo+0x110>
   22346:	f8c0 a010 	str.w	sl, [r0, #16]
   2234a:	4b68      	ldr	r3, [pc, #416]	; (224ec <nrf_getaddrinfo+0x314>)
   2234c:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 224f0 <nrf_getaddrinfo+0x318>
   22350:	681b      	ldr	r3, [r3, #0]
   22352:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 224f4 <nrf_getaddrinfo+0x31c>
   22356:	61b3      	str	r3, [r6, #24]
   22358:	f8db 3000 	ldr.w	r3, [fp]
   2235c:	4632      	mov	r2, r6
   2235e:	61f3      	str	r3, [r6, #28]
   22360:	f8da 3000 	ldr.w	r3, [sl]
   22364:	f247 010d 	movw	r1, #28685	; 0x700d
   22368:	6233      	str	r3, [r6, #32]
   2236a:	683b      	ldr	r3, [r7, #0]
   2236c:	2004      	movs	r0, #4
   2236e:	6173      	str	r3, [r6, #20]
   22370:	f004 feb6 	bl	270e0 <rpc_client_msg_send>
   22374:	2300      	movs	r3, #0
   22376:	4e61      	ldr	r6, [pc, #388]	; (224fc <nrf_getaddrinfo+0x324>)
   22378:	7033      	strb	r3, [r6, #0]
   2237a:	f04f 33ff 	mov.w	r3, #4294967295
   2237e:	9303      	str	r3, [sp, #12]
   22380:	7833      	ldrb	r3, [r6, #0]
   22382:	2b01      	cmp	r3, #1
   22384:	d13e      	bne.n	22404 <nrf_getaddrinfo+0x22c>
   22386:	f8df 8178 	ldr.w	r8, [pc, #376]	; 22500 <nrf_getaddrinfo+0x328>
   2238a:	f8d8 3000 	ldr.w	r3, [r8]
   2238e:	6958      	ldr	r0, [r3, #20]
   22390:	2800      	cmp	r0, #0
   22392:	f040 8092 	bne.w	224ba <nrf_getaddrinfo+0x2e2>
   22396:	2020      	movs	r0, #32
   22398:	f8d3 9000 	ldr.w	r9, [r3]
   2239c:	f7fb fd3e 	bl	1de1c <nrf_modem_os_alloc>
   223a0:	6028      	str	r0, [r5, #0]
   223a2:	b170      	cbz	r0, 223c2 <nrf_getaddrinfo+0x1ea>
   223a4:	f109 0318 	add.w	r3, r9, #24
   223a8:	4a4f      	ldr	r2, [pc, #316]	; (224e8 <nrf_getaddrinfo+0x310>)
   223aa:	9301      	str	r3, [sp, #4]
   223ac:	4618      	mov	r0, r3
   223ae:	8812      	ldrh	r2, [r2, #0]
   223b0:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   223b4:	f004 feac 	bl	27110 <sockaddr_init>
   223b8:	4606      	mov	r6, r0
   223ba:	bb78      	cbnz	r0, 2241c <nrf_getaddrinfo+0x244>
   223bc:	6828      	ldr	r0, [r5, #0]
   223be:	f7fb fd35 	bl	1de2c <nrf_modem_os_free>
   223c2:	f06f 0409 	mvn.w	r4, #9
   223c6:	f8d8 3000 	ldr.w	r3, [r8]
   223ca:	6818      	ldr	r0, [r3, #0]
   223cc:	b108      	cbz	r0, 223d2 <nrf_getaddrinfo+0x1fa>
   223ce:	f004 fe91 	bl	270f4 <rpc_client_msg_data_rx_free>
   223d2:	f8d8 0000 	ldr.w	r0, [r8]
   223d6:	f004 fe8a 	bl	270ee <rpc_client_msg_rx_free>
   223da:	e791      	b.n	22300 <nrf_getaddrinfo+0x128>
   223dc:	f7f6 fe06 	bl	18fec <strlen>
   223e0:	f004 fe62 	bl	270a8 <rpc_client_msg_alloc>
   223e4:	4606      	mov	r6, r0
   223e6:	2800      	cmp	r0, #0
   223e8:	d088      	beq.n	222fc <nrf_getaddrinfo+0x124>
   223ea:	f8c0 a010 	str.w	sl, [r0, #16]
   223ee:	f8d0 a000 	ldr.w	sl, [r0]
   223f2:	4640      	mov	r0, r8
   223f4:	f7f6 fdfa 	bl	18fec <strlen>
   223f8:	4641      	mov	r1, r8
   223fa:	4602      	mov	r2, r0
   223fc:	4650      	mov	r0, sl
   223fe:	f006 f87a 	bl	284f6 <memcpy>
   22402:	e7a2      	b.n	2234a <nrf_getaddrinfo+0x172>
   22404:	2002      	movs	r0, #2
   22406:	a903      	add	r1, sp, #12
   22408:	f7fb fc0e 	bl	1dc28 <nrf_modem_os_timedwait>
   2240c:	2800      	cmp	r0, #0
   2240e:	d0b7      	beq.n	22380 <nrf_getaddrinfo+0x1a8>
   22410:	206e      	movs	r0, #110	; 0x6e
   22412:	f004 fa01 	bl	26818 <nrf_modem_os_errno_set>
   22416:	f06f 040a 	mvn.w	r4, #10
   2241a:	e771      	b.n	22300 <nrf_getaddrinfo+0x128>
   2241c:	f8d9 2008 	ldr.w	r2, [r9, #8]
   22420:	2a01      	cmp	r2, #1
   22422:	d004      	beq.n	2242e <nrf_getaddrinfo+0x256>
   22424:	2a02      	cmp	r2, #2
   22426:	d01a      	beq.n	2245e <nrf_getaddrinfo+0x286>
   22428:	f06f 0405 	mvn.w	r4, #5
   2242c:	e7cb      	b.n	223c6 <nrf_getaddrinfo+0x1ee>
   2242e:	2110      	movs	r1, #16
   22430:	682a      	ldr	r2, [r5, #0]
   22432:	6111      	str	r1, [r2, #16]
   22434:	683a      	ldr	r2, [r7, #0]
   22436:	6829      	ldr	r1, [r5, #0]
   22438:	f012 0202 	ands.w	r2, r2, #2
   2243c:	d03b      	beq.n	224b6 <nrf_getaddrinfo+0x2de>
   2243e:	9101      	str	r1, [sp, #4]
   22440:	f8b9 0016 	ldrh.w	r0, [r9, #22]
   22444:	3001      	adds	r0, #1
   22446:	f7fb fce9 	bl	1de1c <nrf_modem_os_alloc>
   2244a:	9901      	ldr	r1, [sp, #4]
   2244c:	6188      	str	r0, [r1, #24]
   2244e:	682a      	ldr	r2, [r5, #0]
   22450:	6990      	ldr	r0, [r2, #24]
   22452:	b938      	cbnz	r0, 22464 <nrf_getaddrinfo+0x28c>
   22454:	4628      	mov	r0, r5
   22456:	f7fb fce9 	bl	1de2c <nrf_modem_os_free>
   2245a:	4630      	mov	r0, r6
   2245c:	e7af      	b.n	223be <nrf_getaddrinfo+0x1e6>
   2245e:	2124      	movs	r1, #36	; 0x24
   22460:	682a      	ldr	r2, [r5, #0]
   22462:	e7e6      	b.n	22432 <nrf_getaddrinfo+0x25a>
   22464:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   22468:	f109 0318 	add.w	r3, r9, #24
   2246c:	440b      	add	r3, r1
   2246e:	4619      	mov	r1, r3
   22470:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   22474:	f006 f83f 	bl	284f6 <memcpy>
   22478:	2000      	movs	r0, #0
   2247a:	6829      	ldr	r1, [r5, #0]
   2247c:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   22480:	6989      	ldr	r1, [r1, #24]
   22482:	5488      	strb	r0, [r1, r2]
   22484:	682a      	ldr	r2, [r5, #0]
   22486:	9201      	str	r2, [sp, #4]
   22488:	f8d9 0008 	ldr.w	r0, [r9, #8]
   2248c:	f005 fbaa 	bl	27be4 <rpc_af_to_nrf_af>
   22490:	9a01      	ldr	r2, [sp, #4]
   22492:	6050      	str	r0, [r2, #4]
   22494:	682b      	ldr	r3, [r5, #0]
   22496:	f8db 2000 	ldr.w	r2, [fp]
   2249a:	609a      	str	r2, [r3, #8]
   2249c:	682b      	ldr	r3, [r5, #0]
   2249e:	f8da 2000 	ldr.w	r2, [sl]
   224a2:	60da      	str	r2, [r3, #12]
   224a4:	682b      	ldr	r3, [r5, #0]
   224a6:	683a      	ldr	r2, [r7, #0]
   224a8:	601a      	str	r2, [r3, #0]
   224aa:	2200      	movs	r2, #0
   224ac:	682b      	ldr	r3, [r5, #0]
   224ae:	615e      	str	r6, [r3, #20]
   224b0:	682b      	ldr	r3, [r5, #0]
   224b2:	61da      	str	r2, [r3, #28]
   224b4:	e787      	b.n	223c6 <nrf_getaddrinfo+0x1ee>
   224b6:	618a      	str	r2, [r1, #24]
   224b8:	e7e4      	b.n	22484 <nrf_getaddrinfo+0x2ac>
   224ba:	f005 fbd9 	bl	27c70 <rpc_error_to_nrf_gai_errno>
   224be:	4604      	mov	r4, r0
   224c0:	e781      	b.n	223c6 <nrf_getaddrinfo+0x1ee>
   224c2:	f06f 0407 	mvn.w	r4, #7
   224c6:	e71b      	b.n	22300 <nrf_getaddrinfo+0x128>
   224c8:	f06f 0401 	mvn.w	r4, #1
   224cc:	e6b1      	b.n	22232 <nrf_getaddrinfo+0x5a>
   224ce:	f04f 34ff 	mov.w	r4, #4294967295
   224d2:	e6ae      	b.n	22232 <nrf_getaddrinfo+0x5a>
   224d4:	f06f 0402 	mvn.w	r4, #2
   224d8:	e6ab      	b.n	22232 <nrf_getaddrinfo+0x5a>
   224da:	bf00      	nop
   224dc:	2000d7d8 	.word	0x2000d7d8
   224e0:	0002b0c8 	.word	0x0002b0c8
   224e4:	0002b0b6 	.word	0x0002b0b6
   224e8:	2000d898 	.word	0x2000d898
   224ec:	2000d7e4 	.word	0x2000d7e4
   224f0:	2000d7e0 	.word	0x2000d7e0
   224f4:	2000d7dc 	.word	0x2000d7dc
   224f8:	2000d7e8 	.word	0x2000d7e8
   224fc:	2000dde8 	.word	0x2000dde8
   22500:	2000d7d4 	.word	0x2000d7d4

00022504 <rpc_ip_event_handler>:
   22504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22506:	f248 030f 	movw	r3, #32783	; 0x800f
   2250a:	4299      	cmp	r1, r3
   2250c:	4606      	mov	r6, r0
   2250e:	460d      	mov	r5, r1
   22510:	d03b      	beq.n	2258a <rpc_ip_event_handler+0x86>
   22512:	d822      	bhi.n	2255a <rpc_ip_event_handler+0x56>
   22514:	f248 030d 	movw	r3, #32781	; 0x800d
   22518:	4299      	cmp	r1, r3
   2251a:	d02f      	beq.n	2257c <rpc_ip_event_handler+0x78>
   2251c:	f248 030e 	movw	r3, #32782	; 0x800e
   22520:	4299      	cmp	r1, r3
   22522:	d02f      	beq.n	22584 <rpc_ip_event_handler+0x80>
   22524:	6900      	ldr	r0, [r0, #16]
   22526:	f7ff fdd3 	bl	220d0 <sock_find>
   2252a:	4604      	mov	r4, r0
   2252c:	b308      	cbz	r0, 22572 <rpc_ip_event_handler+0x6e>
   2252e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   22532:	d91e      	bls.n	22572 <rpc_ip_event_handler+0x6e>
   22534:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
   22538:	3d01      	subs	r5, #1
   2253a:	2d0b      	cmp	r5, #11
   2253c:	d819      	bhi.n	22572 <rpc_ip_event_handler+0x6e>
   2253e:	e8df f015 	tbh	[pc, r5, lsl #1]
   22542:	0090      	.short	0x0090
   22544:	009400b3 	.word	0x009400b3
   22548:	00940094 	.word	0x00940094
   2254c:	00ee00ee 	.word	0x00ee00ee
   22550:	00990094 	.word	0x00990094
   22554:	00180018 	.word	0x00180018
   22558:	00d2      	.short	0x00d2
   2255a:	f249 0304 	movw	r3, #36868	; 0x9004
   2255e:	4299      	cmp	r1, r3
   22560:	d016      	beq.n	22590 <rpc_ip_event_handler+0x8c>
   22562:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   22566:	d924      	bls.n	225b2 <rpc_ip_event_handler+0xae>
   22568:	68c0      	ldr	r0, [r0, #12]
   2256a:	f7ff fdb1 	bl	220d0 <sock_find>
   2256e:	4604      	mov	r4, r0
   22570:	bb70      	cbnz	r0, 225d0 <rpc_ip_event_handler+0xcc>
   22572:	6830      	ldr	r0, [r6, #0]
   22574:	b1b0      	cbz	r0, 225a4 <rpc_ip_event_handler+0xa0>
   22576:	f004 fdbd 	bl	270f4 <rpc_client_msg_data_rx_free>
   2257a:	e013      	b.n	225a4 <rpc_ip_event_handler+0xa0>
   2257c:	f7ff fe12 	bl	221a4 <on_getaddrinfo_res>
   22580:	b2c0      	uxtb	r0, r0
   22582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22584:	f004 ff67 	bl	27456 <on_getifaddrs_res>
   22588:	e7fa      	b.n	22580 <rpc_ip_event_handler+0x7c>
   2258a:	f004 ff51 	bl	27430 <on_conf_dnssrv_res>
   2258e:	e7f7      	b.n	22580 <rpc_ip_event_handler+0x7c>
   22590:	6903      	ldr	r3, [r0, #16]
   22592:	2b03      	cmp	r3, #3
   22594:	d806      	bhi.n	225a4 <rpc_ip_event_handler+0xa0>
   22596:	e8df f003 	tbb	[pc, r3]
   2259a:	0a02      	.short	0x0a02
   2259c:	0702      	.short	0x0702
   2259e:	2000      	movs	r0, #0
   225a0:	f7ff fdbe 	bl	22120 <sock_flow_control_set>
   225a4:	2000      	movs	r0, #0
   225a6:	e7ec      	b.n	22582 <rpc_ip_event_handler+0x7e>
   225a8:	2201      	movs	r2, #1
   225aa:	4b65      	ldr	r3, [pc, #404]	; (22740 <rpc_ip_event_handler+0x23c>)
   225ac:	701a      	strb	r2, [r3, #0]
   225ae:	2001      	movs	r0, #1
   225b0:	e7f6      	b.n	225a0 <rpc_ip_event_handler+0x9c>
   225b2:	6900      	ldr	r0, [r0, #16]
   225b4:	f7ff fd8c 	bl	220d0 <sock_find>
   225b8:	4604      	mov	r4, r0
   225ba:	2800      	cmp	r0, #0
   225bc:	d0d9      	beq.n	22572 <rpc_ip_event_handler+0x6e>
   225be:	f248 0381 	movw	r3, #32897	; 0x8081
   225c2:	429d      	cmp	r5, r3
   225c4:	d1d5      	bne.n	22572 <rpc_ip_event_handler+0x6e>
   225c6:	4601      	mov	r1, r0
   225c8:	4630      	mov	r0, r6
   225ca:	f000 fc1d 	bl	22e08 <on_tls_attach_res>
   225ce:	e04f      	b.n	22670 <rpc_ip_event_handler+0x16c>
   225d0:	f249 0302 	movw	r3, #36866	; 0x9002
   225d4:	429d      	cmp	r5, r3
   225d6:	f000 809e 	beq.w	22716 <rpc_ip_event_handler+0x212>
   225da:	d835      	bhi.n	22648 <rpc_ip_event_handler+0x144>
   225dc:	f004 fe4c 	bl	27278 <sock_has_stream_error>
   225e0:	4607      	mov	r7, r0
   225e2:	b9e0      	cbnz	r0, 2261e <rpc_ip_event_handler+0x11a>
   225e4:	2010      	movs	r0, #16
   225e6:	f7fb fc19 	bl	1de1c <nrf_modem_os_alloc>
   225ea:	4605      	mov	r5, r0
   225ec:	b1b8      	cbz	r0, 2261e <rpc_ip_event_handler+0x11a>
   225ee:	4639      	mov	r1, r7
   225f0:	2210      	movs	r2, #16
   225f2:	f005 ff8d 	bl	28510 <memset>
   225f6:	6833      	ldr	r3, [r6, #0]
   225f8:	606b      	str	r3, [r5, #4]
   225fa:	6873      	ldr	r3, [r6, #4]
   225fc:	812b      	strh	r3, [r5, #8]
   225fe:	8a71      	ldrh	r1, [r6, #18]
   22600:	2900      	cmp	r1, #0
   22602:	f000 8097 	beq.w	22734 <rpc_ip_event_handler+0x230>
   22606:	8a32      	ldrh	r2, [r6, #16]
   22608:	f106 0014 	add.w	r0, r6, #20
   2260c:	f004 fd80 	bl	27110 <sockaddr_init>
   22610:	60e8      	str	r0, [r5, #12]
   22612:	2800      	cmp	r0, #0
   22614:	f040 808e 	bne.w	22734 <rpc_ip_event_handler+0x230>
   22618:	4628      	mov	r0, r5
   2261a:	f7fb fc07 	bl	1de2c <nrf_modem_os_free>
   2261e:	6830      	ldr	r0, [r6, #0]
   22620:	f004 fd68 	bl	270f4 <rpc_client_msg_data_rx_free>
   22624:	4620      	mov	r0, r4
   22626:	f004 fde9 	bl	271fc <sock_is_stream>
   2262a:	b148      	cbz	r0, 22640 <rpc_ip_event_handler+0x13c>
   2262c:	4620      	mov	r0, r4
   2262e:	f004 fe23 	bl	27278 <sock_has_stream_error>
   22632:	b928      	cbnz	r0, 22640 <rpc_ip_event_handler+0x13c>
   22634:	230c      	movs	r3, #12
   22636:	61a3      	str	r3, [r4, #24]
   22638:	7f23      	ldrb	r3, [r4, #28]
   2263a:	f063 037e 	orn	r3, r3, #126	; 0x7e
   2263e:	7723      	strb	r3, [r4, #28]
   22640:	4620      	mov	r0, r4
   22642:	f004 fde0 	bl	27206 <sock_is_datagram>
   22646:	e025      	b.n	22694 <rpc_ip_event_handler+0x190>
   22648:	f249 0303 	movw	r3, #36867	; 0x9003
   2264c:	429d      	cmp	r5, r3
   2264e:	d018      	beq.n	22682 <rpc_ip_event_handler+0x17e>
   22650:	f249 0382 	movw	r3, #36994	; 0x9082
   22654:	429d      	cmp	r5, r3
   22656:	d18c      	bne.n	22572 <rpc_ip_event_handler+0x6e>
   22658:	4601      	mov	r1, r0
   2265a:	4630      	mov	r0, r6
   2265c:	f000 fbe8 	bl	22e30 <on_tls_handshake_ntf>
   22660:	e006      	b.n	22670 <rpc_ip_event_handler+0x16c>
   22662:	6973      	ldr	r3, [r6, #20]
   22664:	b90b      	cbnz	r3, 2266a <rpc_ip_event_handler+0x166>
   22666:	69b3      	ldr	r3, [r6, #24]
   22668:	6003      	str	r3, [r0, #0]
   2266a:	4630      	mov	r0, r6
   2266c:	f005 fb49 	bl	27d02 <res_forward>
   22670:	4605      	mov	r5, r0
   22672:	e010      	b.n	22696 <rpc_ip_event_handler+0x192>
   22674:	7f03      	ldrb	r3, [r0, #28]
   22676:	f023 0303 	bic.w	r3, r3, #3
   2267a:	f043 0303 	orr.w	r3, r3, #3
   2267e:	7703      	strb	r3, [r0, #28]
   22680:	e7f3      	b.n	2266a <rpc_ip_event_handler+0x166>
   22682:	7f03      	ldrb	r3, [r0, #28]
   22684:	f043 0301 	orr.w	r3, r3, #1
   22688:	7703      	strb	r3, [r0, #28]
   2268a:	6930      	ldr	r0, [r6, #16]
   2268c:	2869      	cmp	r0, #105	; 0x69
   2268e:	d112      	bne.n	226b6 <rpc_ip_event_handler+0x1b2>
   22690:	2368      	movs	r3, #104	; 0x68
   22692:	61a3      	str	r3, [r4, #24]
   22694:	2500      	movs	r5, #0
   22696:	4620      	mov	r0, r4
   22698:	f004 fdfc 	bl	27294 <sock_has_pollcb>
   2269c:	b110      	cbz	r0, 226a4 <rpc_ip_event_handler+0x1a0>
   2269e:	4620      	mov	r0, r4
   226a0:	f004 fd6f 	bl	27182 <sock_pollcb>
   226a4:	b2e8      	uxtb	r0, r5
   226a6:	e76c      	b.n	22582 <rpc_ip_event_handler+0x7e>
   226a8:	7f03      	ldrb	r3, [r0, #28]
   226aa:	68f5      	ldr	r5, [r6, #12]
   226ac:	f36f 0382 	bfc	r3, #2, #1
   226b0:	7703      	strb	r3, [r0, #28]
   226b2:	6970      	ldr	r0, [r6, #20]
   226b4:	b118      	cbz	r0, 226be <rpc_ip_event_handler+0x1ba>
   226b6:	f000 fc5f 	bl	22f78 <rpc_error_to_nrf_errno>
   226ba:	61a0      	str	r0, [r4, #24]
   226bc:	e7ea      	b.n	22694 <rpc_ip_event_handler+0x190>
   226be:	4620      	mov	r0, r4
   226c0:	f004 fdab 	bl	2721a <sock_proto_is_secure>
   226c4:	b918      	cbnz	r0, 226ce <rpc_ip_event_handler+0x1ca>
   226c6:	7f23      	ldrb	r3, [r4, #28]
   226c8:	f043 0308 	orr.w	r3, r3, #8
   226cc:	7723      	strb	r3, [r4, #28]
   226ce:	4620      	mov	r0, r4
   226d0:	f004 fda3 	bl	2721a <sock_proto_is_secure>
   226d4:	2800      	cmp	r0, #0
   226d6:	d0cb      	beq.n	22670 <rpc_ip_event_handler+0x16c>
   226d8:	2d00      	cmp	r5, #0
   226da:	d0dc      	beq.n	22696 <rpc_ip_event_handler+0x192>
   226dc:	2100      	movs	r1, #0
   226de:	4620      	mov	r0, r4
   226e0:	f000 fbc0 	bl	22e64 <tls_attach>
   226e4:	e7d6      	b.n	22694 <rpc_ip_event_handler+0x190>
   226e6:	7f43      	ldrb	r3, [r0, #29]
   226e8:	3b01      	subs	r3, #1
   226ea:	7743      	strb	r3, [r0, #29]
   226ec:	6973      	ldr	r3, [r6, #20]
   226ee:	2b00      	cmp	r3, #0
   226f0:	d1bb      	bne.n	2266a <rpc_ip_event_handler+0x166>
   226f2:	4630      	mov	r0, r6
   226f4:	f005 fb03 	bl	27cfe <res_cookie_get>
   226f8:	69b2      	ldr	r2, [r6, #24]
   226fa:	6843      	ldr	r3, [r0, #4]
   226fc:	601a      	str	r2, [r3, #0]
   226fe:	6842      	ldr	r2, [r0, #4]
   22700:	7f13      	ldrb	r3, [r2, #28]
   22702:	f043 0308 	orr.w	r3, r3, #8
   22706:	7713      	strb	r3, [r2, #28]
   22708:	6843      	ldr	r3, [r0, #4]
   2270a:	6922      	ldr	r2, [r4, #16]
   2270c:	611a      	str	r2, [r3, #16]
   2270e:	6843      	ldr	r3, [r0, #4]
   22710:	6962      	ldr	r2, [r4, #20]
   22712:	615a      	str	r2, [r3, #20]
   22714:	e7a9      	b.n	2266a <rpc_ip_event_handler+0x166>
   22716:	7f43      	ldrb	r3, [r0, #29]
   22718:	3301      	adds	r3, #1
   2271a:	7743      	strb	r3, [r0, #29]
   2271c:	e7ba      	b.n	22694 <rpc_ip_event_handler+0x190>
   2271e:	4630      	mov	r0, r6
   22720:	f005 faed 	bl	27cfe <res_cookie_get>
   22724:	6973      	ldr	r3, [r6, #20]
   22726:	b913      	cbnz	r3, 2272e <rpc_ip_event_handler+0x22a>
   22728:	69b3      	ldr	r3, [r6, #24]
   2272a:	6043      	str	r3, [r0, #4]
   2272c:	e79d      	b.n	2266a <rpc_ip_event_handler+0x166>
   2272e:	f04f 33ff 	mov.w	r3, #4294967295
   22732:	e7fa      	b.n	2272a <rpc_ip_event_handler+0x226>
   22734:	4629      	mov	r1, r5
   22736:	4620      	mov	r0, r4
   22738:	f004 fd40 	bl	271bc <sock_pkt_append>
   2273c:	e7aa      	b.n	22694 <rpc_ip_event_handler+0x190>
   2273e:	bf00      	nop
   22740:	2000dde9 	.word	0x2000dde9

00022744 <nrf_close>:
   22744:	b570      	push	{r4, r5, r6, lr}
   22746:	4604      	mov	r4, r0
   22748:	f7ff fcc2 	bl	220d0 <sock_find>
   2274c:	4605      	mov	r5, r0
   2274e:	b930      	cbnz	r0, 2275e <nrf_close+0x1a>
   22750:	2009      	movs	r0, #9
   22752:	f004 f861 	bl	26818 <nrf_modem_os_errno_set>
   22756:	f04f 36ff 	mov.w	r6, #4294967295
   2275a:	4630      	mov	r0, r6
   2275c:	bd70      	pop	{r4, r5, r6, pc}
   2275e:	f000 ff11 	bl	23584 <nrf_modem_state_is_initialized>
   22762:	b960      	cbnz	r0, 2277e <nrf_close+0x3a>
   22764:	2600      	movs	r6, #0
   22766:	4628      	mov	r0, r5
   22768:	f004 fd6b 	bl	27242 <sock_is_attaching>
   2276c:	b118      	cbz	r0, 22776 <nrf_close+0x32>
   2276e:	4b0e      	ldr	r3, [pc, #56]	; (227a8 <nrf_close+0x64>)
   22770:	6818      	ldr	r0, [r3, #0]
   22772:	f004 f859 	bl	26828 <nrf_modem_os_sem_give>
   22776:	4620      	mov	r0, r4
   22778:	f7ff fcbc 	bl	220f4 <_sock_close>
   2277c:	e7ed      	b.n	2275a <nrf_close+0x16>
   2277e:	2000      	movs	r0, #0
   22780:	f004 fc92 	bl	270a8 <rpc_client_msg_alloc>
   22784:	4601      	mov	r1, r0
   22786:	b908      	cbnz	r0, 2278c <nrf_close+0x48>
   22788:	2069      	movs	r0, #105	; 0x69
   2278a:	e7e2      	b.n	22752 <nrf_close+0xe>
   2278c:	6104      	str	r4, [r0, #16]
   2278e:	f247 0009 	movw	r0, #28681	; 0x7009
   22792:	f005 fa87 	bl	27ca4 <req_forward>
   22796:	2800      	cmp	r0, #0
   22798:	d0e4      	beq.n	22764 <nrf_close+0x20>
   2279a:	2816      	cmp	r0, #22
   2279c:	d0e2      	beq.n	22764 <nrf_close+0x20>
   2279e:	f004 f83b 	bl	26818 <nrf_modem_os_errno_set>
   227a2:	f04f 36ff 	mov.w	r6, #4294967295
   227a6:	e7de      	b.n	22766 <nrf_close+0x22>
   227a8:	2000d7ec 	.word	0x2000d7ec

000227ac <nrf_sendto>:
   227ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227b0:	4698      	mov	r8, r3
   227b2:	2300      	movs	r3, #0
   227b4:	b085      	sub	sp, #20
   227b6:	4682      	mov	sl, r0
   227b8:	4689      	mov	r9, r1
   227ba:	4616      	mov	r6, r2
   227bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   227c0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   227c2:	f7ff fc85 	bl	220d0 <sock_find>
   227c6:	4605      	mov	r5, r0
   227c8:	b940      	cbnz	r0, 227dc <nrf_sendto+0x30>
   227ca:	2009      	movs	r0, #9
   227cc:	f004 f824 	bl	26818 <nrf_modem_os_errno_set>
   227d0:	f04f 34ff 	mov.w	r4, #4294967295
   227d4:	4620      	mov	r0, r4
   227d6:	b005      	add	sp, #20
   227d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   227dc:	f038 0340 	bics.w	r3, r8, #64	; 0x40
   227e0:	d001      	beq.n	227e6 <nrf_sendto+0x3a>
   227e2:	205f      	movs	r0, #95	; 0x5f
   227e4:	e7f2      	b.n	227cc <nrf_sendto+0x20>
   227e6:	f004 fd5a 	bl	2729e <sock_has_rai_no_data>
   227ea:	b128      	cbz	r0, 227f8 <nrf_sendto+0x4c>
   227ec:	4628      	mov	r0, r5
   227ee:	f004 fd46 	bl	2727e <sock_has_error>
   227f2:	b128      	cbz	r0, 22800 <nrf_sendto+0x54>
   227f4:	69a8      	ldr	r0, [r5, #24]
   227f6:	e7e9      	b.n	227cc <nrf_sendto+0x20>
   227f8:	4628      	mov	r0, r5
   227fa:	f004 fd2a 	bl	27252 <sock_is_closed>
   227fe:	e7f8      	b.n	227f2 <nrf_sendto+0x46>
   22800:	4628      	mov	r0, r5
   22802:	b1d7      	cbz	r7, 2283a <nrf_sendto+0x8e>
   22804:	f004 fcfa 	bl	271fc <sock_is_stream>
   22808:	bb00      	cbnz	r0, 2284c <nrf_sendto+0xa0>
   2280a:	4639      	mov	r1, r7
   2280c:	4628      	mov	r0, r5
   2280e:	f004 fdd2 	bl	273b6 <sock_sockaddr_fam_is_valid>
   22812:	b908      	cbnz	r0, 22818 <nrf_sendto+0x6c>
   22814:	206a      	movs	r0, #106	; 0x6a
   22816:	e7d9      	b.n	227cc <nrf_sendto+0x20>
   22818:	4638      	mov	r0, r7
   2281a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2281c:	f004 fdb7 	bl	2738e <sock_sockaddr_len_is_valid>
   22820:	b908      	cbnz	r0, 22826 <nrf_sendto+0x7a>
   22822:	2016      	movs	r0, #22
   22824:	e7d2      	b.n	227cc <nrf_sendto+0x20>
   22826:	4628      	mov	r0, r5
   22828:	f004 fced 	bl	27206 <sock_is_datagram>
   2282c:	b170      	cbz	r0, 2284c <nrf_sendto+0xa0>
   2282e:	4628      	mov	r0, r5
   22830:	f004 fcf3 	bl	2721a <sock_proto_is_secure>
   22834:	b150      	cbz	r0, 2284c <nrf_sendto+0xa0>
   22836:	207f      	movs	r0, #127	; 0x7f
   22838:	e7c8      	b.n	227cc <nrf_sendto+0x20>
   2283a:	f004 fce4 	bl	27206 <sock_is_datagram>
   2283e:	b128      	cbz	r0, 2284c <nrf_sendto+0xa0>
   22840:	4628      	mov	r0, r5
   22842:	f004 fcfa 	bl	2723a <sock_is_connected>
   22846:	b908      	cbnz	r0, 2284c <nrf_sendto+0xa0>
   22848:	2079      	movs	r0, #121	; 0x79
   2284a:	e7bf      	b.n	227cc <nrf_sendto+0x20>
   2284c:	4628      	mov	r0, r5
   2284e:	f004 fd66 	bl	2731e <sock_sndtimeo_ms_get>
   22852:	9001      	str	r0, [sp, #4]
   22854:	4628      	mov	r0, r5
   22856:	f004 fcf8 	bl	2724a <sock_is_nonblock>
   2285a:	bb78      	cbnz	r0, 228bc <nrf_sendto+0x110>
   2285c:	f3c8 1880 	ubfx	r8, r8, #6, #1
   22860:	4628      	mov	r0, r5
   22862:	f004 fccb 	bl	271fc <sock_is_stream>
   22866:	b140      	cbz	r0, 2287a <nrf_sendto+0xce>
   22868:	4628      	mov	r0, r5
   2286a:	f004 fcd6 	bl	2721a <sock_proto_is_secure>
   2286e:	b120      	cbz	r0, 2287a <nrf_sendto+0xce>
   22870:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
   22874:	bf28      	it	cs
   22876:	f44f 6600 	movcs.w	r6, #2048	; 0x800
   2287a:	f004 fc3d 	bl	270f8 <rpc_client_msg_data_tx_size>
   2287e:	42b0      	cmp	r0, r6
   22880:	d206      	bcs.n	22890 <nrf_sendto+0xe4>
   22882:	4628      	mov	r0, r5
   22884:	f004 fcba 	bl	271fc <sock_is_stream>
   22888:	b1d8      	cbz	r0, 228c2 <nrf_sendto+0x116>
   2288a:	f004 fc35 	bl	270f8 <rpc_client_msg_data_tx_size>
   2288e:	4606      	mov	r6, r0
   22890:	4628      	mov	r0, r5
   22892:	f004 fcfb 	bl	2728c <sock_has_flow_control>
   22896:	b118      	cbz	r0, 228a0 <nrf_sendto+0xf4>
   22898:	4628      	mov	r0, r5
   2289a:	f004 fcda 	bl	27252 <sock_is_closed>
   2289e:	b190      	cbz	r0, 228c6 <nrf_sendto+0x11a>
   228a0:	4630      	mov	r0, r6
   228a2:	f004 fc01 	bl	270a8 <rpc_client_msg_alloc>
   228a6:	4604      	mov	r4, r0
   228a8:	b9d8      	cbnz	r0, 228e2 <nrf_sendto+0x136>
   228aa:	2001      	movs	r0, #1
   228ac:	a901      	add	r1, sp, #4
   228ae:	f7fb f9bb 	bl	1dc28 <nrf_modem_os_timedwait>
   228b2:	b998      	cbnz	r0, 228dc <nrf_sendto+0x130>
   228b4:	f1b8 0f00 	cmp.w	r8, #0
   228b8:	d0f2      	beq.n	228a0 <nrf_sendto+0xf4>
   228ba:	e007      	b.n	228cc <nrf_sendto+0x120>
   228bc:	f04f 0801 	mov.w	r8, #1
   228c0:	e7ce      	b.n	22860 <nrf_sendto+0xb4>
   228c2:	207a      	movs	r0, #122	; 0x7a
   228c4:	e782      	b.n	227cc <nrf_sendto+0x20>
   228c6:	f1b8 0f00 	cmp.w	r8, #0
   228ca:	d001      	beq.n	228d0 <nrf_sendto+0x124>
   228cc:	200b      	movs	r0, #11
   228ce:	e77d      	b.n	227cc <nrf_sendto+0x20>
   228d0:	2002      	movs	r0, #2
   228d2:	a901      	add	r1, sp, #4
   228d4:	f7fb f9a8 	bl	1dc28 <nrf_modem_os_timedwait>
   228d8:	2800      	cmp	r0, #0
   228da:	d0d9      	beq.n	22890 <nrf_sendto+0xe4>
   228dc:	f005 fde9 	bl	284b2 <abs>
   228e0:	e774      	b.n	227cc <nrf_sendto+0x20>
   228e2:	f8c0 a010 	str.w	sl, [r0, #16]
   228e6:	f1b9 0f00 	cmp.w	r9, #0
   228ea:	d004      	beq.n	228f6 <nrf_sendto+0x14a>
   228ec:	4632      	mov	r2, r6
   228ee:	4649      	mov	r1, r9
   228f0:	6800      	ldr	r0, [r0, #0]
   228f2:	f005 fe00 	bl	284f6 <memcpy>
   228f6:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
   228fa:	f1bb 0f00 	cmp.w	fp, #0
   228fe:	d001      	beq.n	22904 <nrf_sendto+0x158>
   22900:	2300      	movs	r3, #0
   22902:	632b      	str	r3, [r5, #48]	; 0x30
   22904:	b3cf      	cbz	r7, 2297a <nrf_sendto+0x1ce>
   22906:	4628      	mov	r0, r5
   22908:	f004 fc78 	bl	271fc <sock_is_stream>
   2290c:	bba8      	cbnz	r0, 2297a <nrf_sendto+0x1ce>
   2290e:	2318      	movs	r3, #24
   22910:	7260      	strb	r0, [r4, #9]
   22912:	7223      	strb	r3, [r4, #8]
   22914:	72a0      	strb	r0, [r4, #10]
   22916:	72e0      	strb	r0, [r4, #11]
   22918:	f8c4 b014 	str.w	fp, [r4, #20]
   2291c:	687b      	ldr	r3, [r7, #4]
   2291e:	2b01      	cmp	r3, #1
   22920:	d012      	beq.n	22948 <nrf_sendto+0x19c>
   22922:	2b02      	cmp	r3, #2
   22924:	d018      	beq.n	22958 <nrf_sendto+0x1ac>
   22926:	f247 0b07 	movw	fp, #28679	; 0x7007
   2292a:	4620      	mov	r0, r4
   2292c:	a902      	add	r1, sp, #8
   2292e:	f005 f9e4 	bl	27cfa <req_cookie_set>
   22932:	4621      	mov	r1, r4
   22934:	4658      	mov	r0, fp
   22936:	f005 f9b5 	bl	27ca4 <req_forward>
   2293a:	4603      	mov	r3, r0
   2293c:	bb40      	cbnz	r0, 22990 <nrf_sendto+0x1e4>
   2293e:	e9dd 0402 	ldrd	r0, r4, [sp, #8]
   22942:	f004 fbd4 	bl	270ee <rpc_client_msg_rx_free>
   22946:	e745      	b.n	227d4 <nrf_sendto+0x28>
   22948:	893b      	ldrh	r3, [r7, #8]
   2294a:	76e0      	strb	r0, [r4, #27]
   2294c:	8323      	strh	r3, [r4, #24]
   2294e:	2304      	movs	r3, #4
   22950:	76a3      	strb	r3, [r4, #26]
   22952:	68fb      	ldr	r3, [r7, #12]
   22954:	61e3      	str	r3, [r4, #28]
   22956:	e7e6      	b.n	22926 <nrf_sendto+0x17a>
   22958:	893b      	ldrh	r3, [r7, #8]
   2295a:	f104 021c 	add.w	r2, r4, #28
   2295e:	8323      	strh	r3, [r4, #24]
   22960:	2310      	movs	r3, #16
   22962:	76e0      	strb	r0, [r4, #27]
   22964:	76a3      	strb	r3, [r4, #26]
   22966:	f107 0120 	add.w	r1, r7, #32
   2296a:	18fb      	adds	r3, r7, r3
   2296c:	f853 0b04 	ldr.w	r0, [r3], #4
   22970:	428b      	cmp	r3, r1
   22972:	f842 0b04 	str.w	r0, [r2], #4
   22976:	d1f9      	bne.n	2296c <nrf_sendto+0x1c0>
   22978:	e7d5      	b.n	22926 <nrf_sendto+0x17a>
   2297a:	2300      	movs	r3, #0
   2297c:	2204      	movs	r2, #4
   2297e:	f8c4 b014 	str.w	fp, [r4, #20]
   22982:	7222      	strb	r2, [r4, #8]
   22984:	f247 0b06 	movw	fp, #28678	; 0x7006
   22988:	7263      	strb	r3, [r4, #9]
   2298a:	72a3      	strb	r3, [r4, #10]
   2298c:	72e3      	strb	r3, [r4, #11]
   2298e:	e7cc      	b.n	2292a <nrf_sendto+0x17e>
   22990:	280c      	cmp	r0, #12
   22992:	dc0f      	bgt.n	229b4 <nrf_sendto+0x208>
   22994:	280a      	cmp	r0, #10
   22996:	dd10      	ble.n	229ba <nrf_sendto+0x20e>
   22998:	4b09      	ldr	r3, [pc, #36]	; (229c0 <nrf_sendto+0x214>)
   2299a:	781b      	ldrb	r3, [r3, #0]
   2299c:	b92b      	cbnz	r3, 229aa <nrf_sendto+0x1fe>
   2299e:	2001      	movs	r0, #1
   229a0:	a901      	add	r1, sp, #4
   229a2:	f7fb f941 	bl	1dc28 <nrf_modem_os_timedwait>
   229a6:	2800      	cmp	r0, #0
   229a8:	d198      	bne.n	228dc <nrf_sendto+0x130>
   229aa:	f1b8 0f00 	cmp.w	r8, #0
   229ae:	f43f af6f 	beq.w	22890 <nrf_sendto+0xe4>
   229b2:	e78b      	b.n	228cc <nrf_sendto+0x120>
   229b4:	288c      	cmp	r0, #140	; 0x8c
   229b6:	f43f af09 	beq.w	227cc <nrf_sendto+0x20>
   229ba:	4618      	mov	r0, r3
   229bc:	e706      	b.n	227cc <nrf_sendto+0x20>
   229be:	bf00      	nop
   229c0:	2000dde9 	.word	0x2000dde9

000229c4 <nrf_setsockopt>:
   229c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   229c8:	b085      	sub	sp, #20
   229ca:	4681      	mov	r9, r0
   229cc:	4688      	mov	r8, r1
   229ce:	4617      	mov	r7, r2
   229d0:	461e      	mov	r6, r3
   229d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   229d4:	f7ff fb7c 	bl	220d0 <sock_find>
   229d8:	4604      	mov	r4, r0
   229da:	b938      	cbnz	r0, 229ec <nrf_setsockopt+0x28>
   229dc:	2009      	movs	r0, #9
   229de:	f003 ff1b 	bl	26818 <nrf_modem_os_errno_set>
   229e2:	f04f 30ff 	mov.w	r0, #4294967295
   229e6:	b005      	add	sp, #20
   229e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   229ec:	b916      	cbnz	r6, 229f4 <nrf_setsockopt+0x30>
   229ee:	b10d      	cbz	r5, 229f4 <nrf_setsockopt+0x30>
   229f0:	2016      	movs	r0, #22
   229f2:	e7f4      	b.n	229de <nrf_setsockopt+0x1a>
   229f4:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   229f8:	f000 80fe 	beq.w	22bf8 <nrf_setsockopt+0x234>
   229fc:	dc0c      	bgt.n	22a18 <nrf_setsockopt+0x54>
   229fe:	f1b8 0f01 	cmp.w	r8, #1
   22a02:	d012      	beq.n	22a2a <nrf_setsockopt+0x66>
   22a04:	f1b8 0f06 	cmp.w	r8, #6
   22a08:	f000 80f0 	beq.w	22bec <nrf_setsockopt+0x228>
   22a0c:	f1b8 0f00 	cmp.w	r8, #0
   22a10:	f000 80f0 	beq.w	22bf4 <nrf_setsockopt+0x230>
   22a14:	206d      	movs	r0, #109	; 0x6d
   22a16:	e7e2      	b.n	229de <nrf_setsockopt+0x1a>
   22a18:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   22a1c:	f000 809b 	beq.w	22b56 <nrf_setsockopt+0x192>
   22a20:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   22a24:	d1f6      	bne.n	22a14 <nrf_setsockopt+0x50>
   22a26:	2f1e      	cmp	r7, #30
   22a28:	e0e1      	b.n	22bee <nrf_setsockopt+0x22a>
   22a2a:	2f3c      	cmp	r7, #60	; 0x3c
   22a2c:	dcf2      	bgt.n	22a14 <nrf_setsockopt+0x50>
   22a2e:	2f31      	cmp	r7, #49	; 0x31
   22a30:	dc0f      	bgt.n	22a52 <nrf_setsockopt+0x8e>
   22a32:	2f15      	cmp	r7, #21
   22a34:	d04c      	beq.n	22ad0 <nrf_setsockopt+0x10c>
   22a36:	dc29      	bgt.n	22a8c <nrf_setsockopt+0xc8>
   22a38:	2f02      	cmp	r7, #2
   22a3a:	d040      	beq.n	22abe <nrf_setsockopt+0xfa>
   22a3c:	2f14      	cmp	r7, #20
   22a3e:	d1e9      	bne.n	22a14 <nrf_setsockopt+0x50>
   22a40:	f104 0020 	add.w	r0, r4, #32
   22a44:	2d00      	cmp	r5, #0
   22a46:	d149      	bne.n	22adc <nrf_setsockopt+0x118>
   22a48:	2300      	movs	r3, #0
   22a4a:	6223      	str	r3, [r4, #32]
   22a4c:	6043      	str	r3, [r0, #4]
   22a4e:	2000      	movs	r0, #0
   22a50:	e7c9      	b.n	229e6 <nrf_setsockopt+0x22>
   22a52:	3f32      	subs	r7, #50	; 0x32
   22a54:	2f0a      	cmp	r7, #10
   22a56:	d8dd      	bhi.n	22a14 <nrf_setsockopt+0x50>
   22a58:	a301      	add	r3, pc, #4	; (adr r3, 22a60 <nrf_setsockopt+0x9c>)
   22a5a:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
   22a5e:	bf00      	nop
   22a60:	00022b37 	.word	0x00022b37
   22a64:	00022b1d 	.word	0x00022b1d
   22a68:	00022b25 	.word	0x00022b25
   22a6c:	00022b2b 	.word	0x00022b2b
   22a70:	00022b31 	.word	0x00022b31
   22a74:	00022a15 	.word	0x00022a15
   22a78:	00022a15 	.word	0x00022a15
   22a7c:	00022a15 	.word	0x00022a15
   22a80:	00022a15 	.word	0x00022a15
   22a84:	00022a15 	.word	0x00022a15
   22a88:	00022aed 	.word	0x00022aed
   22a8c:	2f19      	cmp	r7, #25
   22a8e:	d1c1      	bne.n	22a14 <nrf_setsockopt+0x50>
   22a90:	2e00      	cmp	r6, #0
   22a92:	d0ad      	beq.n	229f0 <nrf_setsockopt+0x2c>
   22a94:	4869      	ldr	r0, [pc, #420]	; (22c3c <nrf_setsockopt+0x278>)
   22a96:	f7f6 faa9 	bl	18fec <strlen>
   22a9a:	4968      	ldr	r1, [pc, #416]	; (22c3c <nrf_setsockopt+0x278>)
   22a9c:	4602      	mov	r2, r0
   22a9e:	4630      	mov	r0, r6
   22aa0:	f005 fd19 	bl	284d6 <memcmp>
   22aa4:	2800      	cmp	r0, #0
   22aa6:	d152      	bne.n	22b4e <nrf_setsockopt+0x18a>
   22aa8:	4864      	ldr	r0, [pc, #400]	; (22c3c <nrf_setsockopt+0x278>)
   22aaa:	f7f6 fa9f 	bl	18fec <strlen>
   22aae:	220a      	movs	r2, #10
   22ab0:	2100      	movs	r1, #0
   22ab2:	4430      	add	r0, r6
   22ab4:	f002 fad8 	bl	25068 <strtoul>
   22ab8:	2504      	movs	r5, #4
   22aba:	9003      	str	r0, [sp, #12]
   22abc:	ae03      	add	r6, sp, #12
   22abe:	4628      	mov	r0, r5
   22ac0:	f004 faf2 	bl	270a8 <rpc_client_msg_alloc>
   22ac4:	4604      	mov	r4, r0
   22ac6:	2800      	cmp	r0, #0
   22ac8:	f040 8098 	bne.w	22bfc <nrf_setsockopt+0x238>
   22acc:	2069      	movs	r0, #105	; 0x69
   22ace:	e786      	b.n	229de <nrf_setsockopt+0x1a>
   22ad0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   22ad4:	b915      	cbnz	r5, 22adc <nrf_setsockopt+0x118>
   22ad6:	62a5      	str	r5, [r4, #40]	; 0x28
   22ad8:	6045      	str	r5, [r0, #4]
   22ada:	e7b8      	b.n	22a4e <nrf_setsockopt+0x8a>
   22adc:	2d08      	cmp	r5, #8
   22ade:	462a      	mov	r2, r5
   22ae0:	4631      	mov	r1, r6
   22ae2:	bf28      	it	cs
   22ae4:	2208      	movcs	r2, #8
   22ae6:	f005 fd06 	bl	284f6 <memcpy>
   22aea:	e7b0      	b.n	22a4e <nrf_setsockopt+0x8a>
   22aec:	b186      	cbz	r6, 22b10 <nrf_setsockopt+0x14c>
   22aee:	2d08      	cmp	r5, #8
   22af0:	f47f af7e 	bne.w	229f0 <nrf_setsockopt+0x2c>
   22af4:	f7fe ffd0 	bl	21a98 <rpc_transport_data_rx_suspend>
   22af8:	e896 0003 	ldmia.w	r6, {r0, r1}
   22afc:	f104 0334 	add.w	r3, r4, #52	; 0x34
   22b00:	e883 0003 	stmia.w	r3, {r0, r1}
   22b04:	4620      	mov	r0, r4
   22b06:	f004 fb3c 	bl	27182 <sock_pollcb>
   22b0a:	f7fe ffcb 	bl	21aa4 <rpc_transport_data_rx_resume>
   22b0e:	e79e      	b.n	22a4e <nrf_setsockopt+0x8a>
   22b10:	2d00      	cmp	r5, #0
   22b12:	f47f af6d 	bne.w	229f0 <nrf_setsockopt+0x2c>
   22b16:	6365      	str	r5, [r4, #52]	; 0x34
   22b18:	63a5      	str	r5, [r4, #56]	; 0x38
   22b1a:	e798      	b.n	22a4e <nrf_setsockopt+0x8a>
   22b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   22b20:	6323      	str	r3, [r4, #48]	; 0x30
   22b22:	e794      	b.n	22a4e <nrf_setsockopt+0x8a>
   22b24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   22b28:	e7fa      	b.n	22b20 <nrf_setsockopt+0x15c>
   22b2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   22b2e:	e7f7      	b.n	22b20 <nrf_setsockopt+0x15c>
   22b30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22b34:	e7f4      	b.n	22b20 <nrf_setsockopt+0x15c>
   22b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   22b3a:	6323      	str	r3, [r4, #48]	; 0x30
   22b3c:	2300      	movs	r3, #0
   22b3e:	4648      	mov	r0, r9
   22b40:	461a      	mov	r2, r3
   22b42:	4619      	mov	r1, r3
   22b44:	e9cd 3300 	strd	r3, r3, [sp]
   22b48:	f7ff fe30 	bl	227ac <nrf_sendto>
   22b4c:	e74b      	b.n	229e6 <nrf_setsockopt+0x22>
   22b4e:	220a      	movs	r2, #10
   22b50:	2100      	movs	r1, #0
   22b52:	4630      	mov	r0, r6
   22b54:	e7ae      	b.n	22ab4 <nrf_setsockopt+0xf0>
   22b56:	1e7b      	subs	r3, r7, #1
   22b58:	2b0d      	cmp	r3, #13
   22b5a:	f63f af5b 	bhi.w	22a14 <nrf_setsockopt+0x50>
   22b5e:	a201      	add	r2, pc, #4	; (adr r2, 22b64 <nrf_setsockopt+0x1a0>)
   22b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22b64:	00022bad 	.word	0x00022bad
   22b68:	00022bdd 	.word	0x00022bdd
   22b6c:	00022abf 	.word	0x00022abf
   22b70:	00022a15 	.word	0x00022a15
   22b74:	00022bcd 	.word	0x00022bcd
   22b78:	00022b9d 	.word	0x00022b9d
   22b7c:	00022a15 	.word	0x00022a15
   22b80:	00022a15 	.word	0x00022a15
   22b84:	00022a15 	.word	0x00022a15
   22b88:	00022a15 	.word	0x00022a15
   22b8c:	00022a15 	.word	0x00022a15
   22b90:	00022bbd 	.word	0x00022bbd
   22b94:	00022abf 	.word	0x00022abf
   22b98:	00022abf 	.word	0x00022abf
   22b9c:	462a      	mov	r2, r5
   22b9e:	4631      	mov	r1, r6
   22ba0:	4620      	mov	r0, r4
   22ba2:	b005      	add	sp, #20
   22ba4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22ba8:	f004 bf4b 	b.w	27a42 <tls_setopt_role>
   22bac:	462a      	mov	r2, r5
   22bae:	4631      	mov	r1, r6
   22bb0:	4620      	mov	r0, r4
   22bb2:	b005      	add	sp, #20
   22bb4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22bb8:	f004 bf57 	b.w	27a6a <tls_setopt_taglist>
   22bbc:	462a      	mov	r2, r5
   22bbe:	4631      	mov	r1, r6
   22bc0:	4620      	mov	r0, r4
   22bc2:	b005      	add	sp, #20
   22bc4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22bc8:	f004 bf62 	b.w	27a90 <tls_setopt_sess_cache>
   22bcc:	462a      	mov	r2, r5
   22bce:	4631      	mov	r1, r6
   22bd0:	4620      	mov	r0, r4
   22bd2:	b005      	add	sp, #20
   22bd4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22bd8:	f004 bf6c 	b.w	27ab4 <tls_setopt_peer_verify>
   22bdc:	462a      	mov	r2, r5
   22bde:	4631      	mov	r1, r6
   22be0:	4620      	mov	r0, r4
   22be2:	b005      	add	sp, #20
   22be4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22be8:	f004 bf73 	b.w	27ad2 <tls_setopt_hostname>
   22bec:	2f37      	cmp	r7, #55	; 0x37
   22bee:	f43f af66 	beq.w	22abe <nrf_setsockopt+0xfa>
   22bf2:	e70f      	b.n	22a14 <nrf_setsockopt+0x50>
   22bf4:	2f1f      	cmp	r7, #31
   22bf6:	e7fa      	b.n	22bee <nrf_setsockopt+0x22a>
   22bf8:	2f20      	cmp	r7, #32
   22bfa:	e7f8      	b.n	22bee <nrf_setsockopt+0x22a>
   22bfc:	2300      	movs	r3, #0
   22bfe:	2208      	movs	r2, #8
   22c00:	7243      	strb	r3, [r0, #9]
   22c02:	7202      	strb	r2, [r0, #8]
   22c04:	7283      	strb	r3, [r0, #10]
   22c06:	72c3      	strb	r3, [r0, #11]
   22c08:	f8c0 9010 	str.w	r9, [r0, #16]
   22c0c:	4640      	mov	r0, r8
   22c0e:	f005 f812 	bl	27c36 <nrf_sol_to_rpc_sol>
   22c12:	6160      	str	r0, [r4, #20]
   22c14:	4638      	mov	r0, r7
   22c16:	f000 f9a3 	bl	22f60 <nrf_so_to_rpc_so>
   22c1a:	4631      	mov	r1, r6
   22c1c:	61a0      	str	r0, [r4, #24]
   22c1e:	462a      	mov	r2, r5
   22c20:	6820      	ldr	r0, [r4, #0]
   22c22:	f005 fc68 	bl	284f6 <memcpy>
   22c26:	4621      	mov	r1, r4
   22c28:	f247 0003 	movw	r0, #28675	; 0x7003
   22c2c:	6065      	str	r5, [r4, #4]
   22c2e:	f005 f839 	bl	27ca4 <req_forward>
   22c32:	2800      	cmp	r0, #0
   22c34:	f43f af0b 	beq.w	22a4e <nrf_setsockopt+0x8a>
   22c38:	e6d1      	b.n	229de <nrf_setsockopt+0x1a>
   22c3a:	bf00      	nop
   22c3c:	0002b0b6 	.word	0x0002b0b6

00022c40 <nrf_getsockopt>:
   22c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22c44:	9c08      	ldr	r4, [sp, #32]
   22c46:	4681      	mov	r9, r0
   22c48:	4688      	mov	r8, r1
   22c4a:	4617      	mov	r7, r2
   22c4c:	461e      	mov	r6, r3
   22c4e:	f7ff fa3f 	bl	220d0 <sock_find>
   22c52:	4605      	mov	r5, r0
   22c54:	b930      	cbnz	r0, 22c64 <nrf_getsockopt+0x24>
   22c56:	2009      	movs	r0, #9
   22c58:	f003 fdde 	bl	26818 <nrf_modem_os_errno_set>
   22c5c:	f04f 30ff 	mov.w	r0, #4294967295
   22c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22c64:	b106      	cbz	r6, 22c68 <nrf_getsockopt+0x28>
   22c66:	b90c      	cbnz	r4, 22c6c <nrf_getsockopt+0x2c>
   22c68:	200e      	movs	r0, #14
   22c6a:	e7f5      	b.n	22c58 <nrf_getsockopt+0x18>
   22c6c:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   22c70:	f000 808a 	beq.w	22d88 <nrf_getsockopt+0x148>
   22c74:	dc0a      	bgt.n	22c8c <nrf_getsockopt+0x4c>
   22c76:	f1b8 0f01 	cmp.w	r8, #1
   22c7a:	d00f      	beq.n	22c9c <nrf_getsockopt+0x5c>
   22c7c:	f1b8 0f06 	cmp.w	r8, #6
   22c80:	d077      	beq.n	22d72 <nrf_getsockopt+0x132>
   22c82:	f1b8 0f00 	cmp.w	r8, #0
   22c86:	d07d      	beq.n	22d84 <nrf_getsockopt+0x144>
   22c88:	206d      	movs	r0, #109	; 0x6d
   22c8a:	e7e5      	b.n	22c58 <nrf_getsockopt+0x18>
   22c8c:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   22c90:	d024      	beq.n	22cdc <nrf_getsockopt+0x9c>
   22c92:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   22c96:	d1f7      	bne.n	22c88 <nrf_getsockopt+0x48>
   22c98:	2f1e      	cmp	r7, #30
   22c9a:	e06b      	b.n	22d74 <nrf_getsockopt+0x134>
   22c9c:	2f14      	cmp	r7, #20
   22c9e:	d00a      	beq.n	22cb6 <nrf_getsockopt+0x76>
   22ca0:	2f15      	cmp	r7, #21
   22ca2:	d013      	beq.n	22ccc <nrf_getsockopt+0x8c>
   22ca4:	2f04      	cmp	r7, #4
   22ca6:	d1ef      	bne.n	22c88 <nrf_getsockopt+0x48>
   22ca8:	6983      	ldr	r3, [r0, #24]
   22caa:	6027      	str	r7, [r4, #0]
   22cac:	6033      	str	r3, [r6, #0]
   22cae:	2300      	movs	r3, #0
   22cb0:	6183      	str	r3, [r0, #24]
   22cb2:	2000      	movs	r0, #0
   22cb4:	e7d4      	b.n	22c60 <nrf_getsockopt+0x20>
   22cb6:	6822      	ldr	r2, [r4, #0]
   22cb8:	f100 0120 	add.w	r1, r0, #32
   22cbc:	2a08      	cmp	r2, #8
   22cbe:	bf28      	it	cs
   22cc0:	2208      	movcs	r2, #8
   22cc2:	6022      	str	r2, [r4, #0]
   22cc4:	4630      	mov	r0, r6
   22cc6:	f005 fc16 	bl	284f6 <memcpy>
   22cca:	e7f2      	b.n	22cb2 <nrf_getsockopt+0x72>
   22ccc:	6822      	ldr	r2, [r4, #0]
   22cce:	f100 0128 	add.w	r1, r0, #40	; 0x28
   22cd2:	2a08      	cmp	r2, #8
   22cd4:	bf28      	it	cs
   22cd6:	2208      	movcs	r2, #8
   22cd8:	6022      	str	r2, [r4, #0]
   22cda:	e7f3      	b.n	22cc4 <nrf_getsockopt+0x84>
   22cdc:	1e7b      	subs	r3, r7, #1
   22cde:	2b0d      	cmp	r3, #13
   22ce0:	d8d2      	bhi.n	22c88 <nrf_getsockopt+0x48>
   22ce2:	a201      	add	r2, pc, #4	; (adr r2, 22ce8 <nrf_getsockopt+0xa8>)
   22ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22ce8:	00022d41 	.word	0x00022d41
   22cec:	00022d57 	.word	0x00022d57
   22cf0:	00022d77 	.word	0x00022d77
   22cf4:	00022c89 	.word	0x00022c89
   22cf8:	00022d37 	.word	0x00022d37
   22cfc:	00022d21 	.word	0x00022d21
   22d00:	00022c89 	.word	0x00022c89
   22d04:	00022c89 	.word	0x00022c89
   22d08:	00022c89 	.word	0x00022c89
   22d0c:	00022c89 	.word	0x00022c89
   22d10:	00022c89 	.word	0x00022c89
   22d14:	00022d2d 	.word	0x00022d2d
   22d18:	00022c89 	.word	0x00022c89
   22d1c:	00022d77 	.word	0x00022d77
   22d20:	2304      	movs	r3, #4
   22d22:	6023      	str	r3, [r4, #0]
   22d24:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   22d28:	6033      	str	r3, [r6, #0]
   22d2a:	e7c2      	b.n	22cb2 <nrf_getsockopt+0x72>
   22d2c:	2304      	movs	r3, #4
   22d2e:	6023      	str	r3, [r4, #0]
   22d30:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
   22d34:	e7f8      	b.n	22d28 <nrf_getsockopt+0xe8>
   22d36:	2304      	movs	r3, #4
   22d38:	6023      	str	r3, [r4, #0]
   22d3a:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   22d3e:	e7f3      	b.n	22d28 <nrf_getsockopt+0xe8>
   22d40:	f890 2047 	ldrb.w	r2, [r0, #71]	; 0x47
   22d44:	6823      	ldr	r3, [r4, #0]
   22d46:	0092      	lsls	r2, r2, #2
   22d48:	429a      	cmp	r2, r3
   22d4a:	bf28      	it	cs
   22d4c:	461a      	movcs	r2, r3
   22d4e:	f100 0148 	add.w	r1, r0, #72	; 0x48
   22d52:	6022      	str	r2, [r4, #0]
   22d54:	e7b6      	b.n	22cc4 <nrf_getsockopt+0x84>
   22d56:	6c00      	ldr	r0, [r0, #64]	; 0x40
   22d58:	f7f6 f948 	bl	18fec <strlen>
   22d5c:	6822      	ldr	r2, [r4, #0]
   22d5e:	3001      	adds	r0, #1
   22d60:	4290      	cmp	r0, r2
   22d62:	d203      	bcs.n	22d6c <nrf_getsockopt+0x12c>
   22d64:	6c28      	ldr	r0, [r5, #64]	; 0x40
   22d66:	f7f6 f941 	bl	18fec <strlen>
   22d6a:	1c42      	adds	r2, r0, #1
   22d6c:	6c29      	ldr	r1, [r5, #64]	; 0x40
   22d6e:	6022      	str	r2, [r4, #0]
   22d70:	e7a8      	b.n	22cc4 <nrf_getsockopt+0x84>
   22d72:	2f37      	cmp	r7, #55	; 0x37
   22d74:	d188      	bne.n	22c88 <nrf_getsockopt+0x48>
   22d76:	6820      	ldr	r0, [r4, #0]
   22d78:	f004 f996 	bl	270a8 <rpc_client_msg_alloc>
   22d7c:	4605      	mov	r5, r0
   22d7e:	b928      	cbnz	r0, 22d8c <nrf_getsockopt+0x14c>
   22d80:	2069      	movs	r0, #105	; 0x69
   22d82:	e769      	b.n	22c58 <nrf_getsockopt+0x18>
   22d84:	2f1f      	cmp	r7, #31
   22d86:	e7f5      	b.n	22d74 <nrf_getsockopt+0x134>
   22d88:	2f20      	cmp	r7, #32
   22d8a:	e7f3      	b.n	22d74 <nrf_getsockopt+0x134>
   22d8c:	2300      	movs	r3, #0
   22d8e:	2208      	movs	r2, #8
   22d90:	7243      	strb	r3, [r0, #9]
   22d92:	7202      	strb	r2, [r0, #8]
   22d94:	7283      	strb	r3, [r0, #10]
   22d96:	72c3      	strb	r3, [r0, #11]
   22d98:	f8c0 9010 	str.w	r9, [r0, #16]
   22d9c:	4640      	mov	r0, r8
   22d9e:	f004 ff4a 	bl	27c36 <nrf_sol_to_rpc_sol>
   22da2:	6168      	str	r0, [r5, #20]
   22da4:	4638      	mov	r0, r7
   22da6:	f000 f8db 	bl	22f60 <nrf_so_to_rpc_so>
   22daa:	4629      	mov	r1, r5
   22dac:	61a8      	str	r0, [r5, #24]
   22dae:	f247 0004 	movw	r0, #28676	; 0x7004
   22db2:	682f      	ldr	r7, [r5, #0]
   22db4:	f004 ff76 	bl	27ca4 <req_forward>
   22db8:	2800      	cmp	r0, #0
   22dba:	f47f af4d 	bne.w	22c58 <nrf_getsockopt+0x18>
   22dbe:	686a      	ldr	r2, [r5, #4]
   22dc0:	6823      	ldr	r3, [r4, #0]
   22dc2:	4639      	mov	r1, r7
   22dc4:	429a      	cmp	r2, r3
   22dc6:	bf28      	it	cs
   22dc8:	461a      	movcs	r2, r3
   22dca:	4630      	mov	r0, r6
   22dcc:	6022      	str	r2, [r4, #0]
   22dce:	f005 fb92 	bl	284f6 <memcpy>
   22dd2:	4638      	mov	r0, r7
   22dd4:	f004 f994 	bl	27100 <rpc_client_msg_data_tx_free>
   22dd8:	e76b      	b.n	22cb2 <nrf_getsockopt+0x72>
   22dda:	bf00      	nop

00022ddc <rpc_ip_init>:
   22ddc:	b508      	push	{r3, lr}
   22dde:	f7ff f935 	bl	2204c <sock_init>
   22de2:	f7ff f9eb 	bl	221bc <addrinfo_init>
   22de6:	2200      	movs	r2, #0
   22de8:	4b05      	ldr	r3, [pc, #20]	; (22e00 <rpc_ip_init+0x24>)
   22dea:	4806      	ldr	r0, [pc, #24]	; (22e04 <rpc_ip_init+0x28>)
   22dec:	701a      	strb	r2, [r3, #0]
   22dee:	2201      	movs	r2, #1
   22df0:	4611      	mov	r1, r2
   22df2:	f7fa ffdb 	bl	1ddac <nrf_modem_os_sem_init>
   22df6:	2800      	cmp	r0, #0
   22df8:	bf18      	it	ne
   22dfa:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   22dfe:	bd08      	pop	{r3, pc}
   22e00:	2000dde9 	.word	0x2000dde9
   22e04:	2000d7ec 	.word	0x2000d7ec

00022e08 <on_tls_attach_res>:
   22e08:	b510      	push	{r4, lr}
   22e0a:	6943      	ldr	r3, [r0, #20]
   22e0c:	460c      	mov	r4, r1
   22e0e:	b15b      	cbz	r3, 22e28 <on_tls_attach_res+0x20>
   22e10:	7f0b      	ldrb	r3, [r1, #28]
   22e12:	f36f 1304 	bfc	r3, #4, #1
   22e16:	770b      	strb	r3, [r1, #28]
   22e18:	6940      	ldr	r0, [r0, #20]
   22e1a:	f000 f8ad 	bl	22f78 <rpc_error_to_nrf_errno>
   22e1e:	4b03      	ldr	r3, [pc, #12]	; (22e2c <on_tls_attach_res+0x24>)
   22e20:	61a0      	str	r0, [r4, #24]
   22e22:	6818      	ldr	r0, [r3, #0]
   22e24:	f003 fd00 	bl	26828 <nrf_modem_os_sem_give>
   22e28:	2000      	movs	r0, #0
   22e2a:	bd10      	pop	{r4, pc}
   22e2c:	2000d7ec 	.word	0x2000d7ec

00022e30 <on_tls_handshake_ntf>:
   22e30:	b510      	push	{r4, lr}
   22e32:	7f0b      	ldrb	r3, [r1, #28]
   22e34:	460c      	mov	r4, r1
   22e36:	f36f 1304 	bfc	r3, #4, #1
   22e3a:	770b      	strb	r3, [r1, #28]
   22e3c:	6900      	ldr	r0, [r0, #16]
   22e3e:	b958      	cbnz	r0, 22e58 <on_tls_handshake_ntf+0x28>
   22e40:	b2db      	uxtb	r3, r3
   22e42:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   22e46:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   22e4a:	770b      	strb	r3, [r1, #28]
   22e4c:	4b04      	ldr	r3, [pc, #16]	; (22e60 <on_tls_handshake_ntf+0x30>)
   22e4e:	6818      	ldr	r0, [r3, #0]
   22e50:	f003 fcea 	bl	26828 <nrf_modem_os_sem_give>
   22e54:	2000      	movs	r0, #0
   22e56:	bd10      	pop	{r4, pc}
   22e58:	f000 f88e 	bl	22f78 <rpc_error_to_nrf_errno>
   22e5c:	61a0      	str	r0, [r4, #24]
   22e5e:	e7f5      	b.n	22e4c <on_tls_handshake_ntf+0x1c>
   22e60:	2000d7ec 	.word	0x2000d7ec

00022e64 <tls_attach>:
   22e64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22e68:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 22f4c <tls_attach+0xe8>
   22e6c:	4605      	mov	r5, r0
   22e6e:	f8d8 0000 	ldr.w	r0, [r8]
   22e72:	9101      	str	r1, [sp, #4]
   22e74:	f003 fcda 	bl	2682c <nrf_modem_os_sem_take>
   22e78:	4607      	mov	r7, r0
   22e7a:	b150      	cbz	r0, 22e92 <tls_attach+0x2e>
   22e7c:	9b01      	ldr	r3, [sp, #4]
   22e7e:	2b00      	cmp	r3, #0
   22e80:	d162      	bne.n	22f48 <tls_attach+0xe4>
   22e82:	2310      	movs	r3, #16
   22e84:	61ab      	str	r3, [r5, #24]
   22e86:	f04f 37ff 	mov.w	r7, #4294967295
   22e8a:	4638      	mov	r0, r7
   22e8c:	b002      	add	sp, #8
   22e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22e92:	6c28      	ldr	r0, [r5, #64]	; 0x40
   22e94:	b1a8      	cbz	r0, 22ec2 <tls_attach+0x5e>
   22e96:	f7f6 f8a9 	bl	18fec <strlen>
   22e9a:	1c46      	adds	r6, r0, #1
   22e9c:	4630      	mov	r0, r6
   22e9e:	f004 f903 	bl	270a8 <rpc_client_msg_alloc>
   22ea2:	4604      	mov	r4, r0
   22ea4:	b978      	cbnz	r0, 22ec6 <tls_attach+0x62>
   22ea6:	4628      	mov	r0, r5
   22ea8:	f004 f9cf 	bl	2724a <sock_is_nonblock>
   22eac:	b108      	cbz	r0, 22eb2 <tls_attach+0x4e>
   22eae:	2369      	movs	r3, #105	; 0x69
   22eb0:	61ab      	str	r3, [r5, #24]
   22eb2:	f8d8 0000 	ldr.w	r0, [r8]
   22eb6:	f003 fcb7 	bl	26828 <nrf_modem_os_sem_give>
   22eba:	2069      	movs	r0, #105	; 0x69
   22ebc:	f003 fcac 	bl	26818 <nrf_modem_os_errno_set>
   22ec0:	e7e1      	b.n	22e86 <tls_attach+0x22>
   22ec2:	463e      	mov	r6, r7
   22ec4:	e7ea      	b.n	22e9c <tls_attach+0x38>
   22ec6:	682b      	ldr	r3, [r5, #0]
   22ec8:	2204      	movs	r2, #4
   22eca:	6103      	str	r3, [r0, #16]
   22ecc:	2300      	movs	r3, #0
   22ece:	7202      	strb	r2, [r0, #8]
   22ed0:	7243      	strb	r3, [r0, #9]
   22ed2:	7283      	strb	r3, [r0, #10]
   22ed4:	72c3      	strb	r3, [r0, #11]
   22ed6:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
   22eda:	f105 0144 	add.w	r1, r5, #68	; 0x44
   22ede:	3201      	adds	r2, #1
   22ee0:	0092      	lsls	r2, r2, #2
   22ee2:	6082      	str	r2, [r0, #8]
   22ee4:	3014      	adds	r0, #20
   22ee6:	f005 fb06 	bl	284f6 <memcpy>
   22eea:	b1e6      	cbz	r6, 22f26 <tls_attach+0xc2>
   22eec:	4632      	mov	r2, r6
   22eee:	6c29      	ldr	r1, [r5, #64]	; 0x40
   22ef0:	6820      	ldr	r0, [r4, #0]
   22ef2:	f005 fb3c 	bl	2856e <strncpy>
   22ef6:	6066      	str	r6, [r4, #4]
   22ef8:	7f2b      	ldrb	r3, [r5, #28]
   22efa:	2004      	movs	r0, #4
   22efc:	f043 0310 	orr.w	r3, r3, #16
   22f00:	4622      	mov	r2, r4
   22f02:	f247 0181 	movw	r1, #28801	; 0x7081
   22f06:	772b      	strb	r3, [r5, #28]
   22f08:	f004 f8ea 	bl	270e0 <rpc_client_msg_send>
   22f0c:	4628      	mov	r0, r5
   22f0e:	f004 f99c 	bl	2724a <sock_is_nonblock>
   22f12:	2800      	cmp	r0, #0
   22f14:	d1b9      	bne.n	22e8a <tls_attach+0x26>
   22f16:	4628      	mov	r0, r5
   22f18:	f004 f993 	bl	27242 <sock_is_attaching>
   22f1c:	b940      	cbnz	r0, 22f30 <tls_attach+0xcc>
   22f1e:	69a8      	ldr	r0, [r5, #24]
   22f20:	2800      	cmp	r0, #0
   22f22:	d0b2      	beq.n	22e8a <tls_attach+0x26>
   22f24:	e7ca      	b.n	22ebc <tls_attach+0x58>
   22f26:	7026      	strb	r6, [r4, #0]
   22f28:	7066      	strb	r6, [r4, #1]
   22f2a:	70a6      	strb	r6, [r4, #2]
   22f2c:	70e6      	strb	r6, [r4, #3]
   22f2e:	e7e2      	b.n	22ef6 <tls_attach+0x92>
   22f30:	2002      	movs	r0, #2
   22f32:	a901      	add	r1, sp, #4
   22f34:	f7fa fe78 	bl	1dc28 <nrf_modem_os_timedwait>
   22f38:	f110 0f0b 	cmn.w	r0, #11
   22f3c:	d004      	beq.n	22f48 <tls_attach+0xe4>
   22f3e:	2800      	cmp	r0, #0
   22f40:	d0e9      	beq.n	22f16 <tls_attach+0xb2>
   22f42:	f005 fab6 	bl	284b2 <abs>
   22f46:	e7b9      	b.n	22ebc <tls_attach+0x58>
   22f48:	2074      	movs	r0, #116	; 0x74
   22f4a:	e7b7      	b.n	22ebc <tls_attach+0x58>
   22f4c:	2000d7ec 	.word	0x2000d7ec

00022f50 <nrf_af_to_rpc_af>:
   22f50:	2803      	cmp	r0, #3
   22f52:	bf9c      	itt	ls
   22f54:	4b01      	ldrls	r3, [pc, #4]	; (22f5c <nrf_af_to_rpc_af+0xc>)
   22f56:	5618      	ldrsbls	r0, [r3, r0]
   22f58:	4770      	bx	lr
   22f5a:	bf00      	nop
   22f5c:	0002b0ba 	.word	0x0002b0ba

00022f60 <nrf_so_to_rpc_so>:
   22f60:	3802      	subs	r0, #2
   22f62:	2835      	cmp	r0, #53	; 0x35
   22f64:	bf9a      	itte	ls
   22f66:	4b03      	ldrls	r3, [pc, #12]	; (22f74 <nrf_so_to_rpc_so+0x14>)
   22f68:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   22f6c:	f04f 30ff 	movhi.w	r0, #4294967295
   22f70:	4770      	bx	lr
   22f72:	bf00      	nop
   22f74:	0002923c 	.word	0x0002923c

00022f78 <rpc_error_to_nrf_errno>:
   22f78:	286c      	cmp	r0, #108	; 0x6c
   22f7a:	bf9a      	itte	ls
   22f7c:	4b02      	ldrls	r3, [pc, #8]	; (22f88 <rpc_error_to_nrf_errno+0x10>)
   22f7e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   22f82:	4802      	ldrhi	r0, [pc, #8]	; (22f8c <rpc_error_to_nrf_errno+0x14>)
   22f84:	4770      	bx	lr
   22f86:	bf00      	nop
   22f88:	00029088 	.word	0x00029088
   22f8c:	baadbaad 	.word	0xbaadbaad

00022f90 <at_cmd_send>:
   22f90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22f94:	4605      	mov	r5, r0
   22f96:	2000      	movs	r0, #0
   22f98:	4617      	mov	r7, r2
   22f9a:	4688      	mov	r8, r1
   22f9c:	461e      	mov	r6, r3
   22f9e:	f004 f883 	bl	270a8 <rpc_client_msg_alloc>
   22fa2:	4602      	mov	r2, r0
   22fa4:	b940      	cbnz	r0, 22fb8 <at_cmd_send+0x28>
   22fa6:	b115      	cbz	r5, 22fae <at_cmd_send+0x1e>
   22fa8:	4628      	mov	r0, r5
   22faa:	f004 f8a9 	bl	27100 <rpc_client_msg_data_tx_free>
   22fae:	f06f 000b 	mvn.w	r0, #11
   22fb2:	b002      	add	sp, #8
   22fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22fb8:	f06f 0358 	mvn.w	r3, #88	; 0x58
   22fbc:	2400      	movs	r4, #0
   22fbe:	7303      	strb	r3, [r0, #12]
   22fc0:	2304      	movs	r3, #4
   22fc2:	6005      	str	r5, [r0, #0]
   22fc4:	4d0e      	ldr	r5, [pc, #56]	; (23000 <at_cmd_send+0x70>)
   22fc6:	7203      	strb	r3, [r0, #8]
   22fc8:	7344      	strb	r4, [r0, #13]
   22fca:	7384      	strb	r4, [r0, #14]
   22fcc:	73c4      	strb	r4, [r0, #15]
   22fce:	7244      	strb	r4, [r0, #9]
   22fd0:	7284      	strb	r4, [r0, #10]
   22fd2:	72c4      	strb	r4, [r0, #11]
   22fd4:	f8c0 8004 	str.w	r8, [r0, #4]
   22fd8:	4639      	mov	r1, r7
   22fda:	2003      	movs	r0, #3
   22fdc:	702c      	strb	r4, [r5, #0]
   22fde:	f004 f87f 	bl	270e0 <rpc_client_msg_send>
   22fe2:	f04f 33ff 	mov.w	r3, #4294967295
   22fe6:	9301      	str	r3, [sp, #4]
   22fe8:	782b      	ldrb	r3, [r5, #0]
   22fea:	42b3      	cmp	r3, r6
   22fec:	d101      	bne.n	22ff2 <at_cmd_send+0x62>
   22fee:	2000      	movs	r0, #0
   22ff0:	e7df      	b.n	22fb2 <at_cmd_send+0x22>
   22ff2:	2002      	movs	r0, #2
   22ff4:	a901      	add	r1, sp, #4
   22ff6:	f7fa fe17 	bl	1dc28 <nrf_modem_os_timedwait>
   22ffa:	2800      	cmp	r0, #0
   22ffc:	d0f4      	beq.n	22fe8 <at_cmd_send+0x58>
   22ffe:	e7d8      	b.n	22fb2 <at_cmd_send+0x22>
   23000:	2000ddea 	.word	0x2000ddea

00023004 <at_response_match>:
   23004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23006:	4605      	mov	r5, r0
   23008:	2400      	movs	r4, #0
   2300a:	4f0f      	ldr	r7, [pc, #60]	; (23048 <at_response_match+0x44>)
   2300c:	f857 6b04 	ldr.w	r6, [r7], #4
   23010:	4628      	mov	r0, r5
   23012:	4631      	mov	r1, r6
   23014:	f005 faca 	bl	285ac <strstr>
   23018:	b928      	cbnz	r0, 23026 <at_response_match+0x22>
   2301a:	3401      	adds	r4, #1
   2301c:	2c04      	cmp	r4, #4
   2301e:	d1f5      	bne.n	2300c <at_response_match+0x8>
   23020:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   23024:	e00d      	b.n	23042 <at_response_match+0x3e>
   23026:	b16c      	cbz	r4, 23044 <at_response_match+0x40>
   23028:	1ea3      	subs	r3, r4, #2
   2302a:	2b01      	cmp	r3, #1
   2302c:	d8f8      	bhi.n	23020 <at_response_match+0x1c>
   2302e:	4630      	mov	r0, r6
   23030:	f7f5 ffdc 	bl	18fec <strlen>
   23034:	220a      	movs	r2, #10
   23036:	2100      	movs	r1, #0
   23038:	4428      	add	r0, r5
   2303a:	f001 fefb 	bl	24e34 <strtol>
   2303e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   23042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23044:	4620      	mov	r0, r4
   23046:	e7fc      	b.n	23042 <at_response_match+0x3e>
   23048:	00029314 	.word	0x00029314

0002304c <at_vsprintf>:
   2304c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23050:	2500      	movs	r5, #0
   23052:	4681      	mov	r9, r0
   23054:	460f      	mov	r7, r1
   23056:	4810      	ldr	r0, [pc, #64]	; (23098 <at_vsprintf+0x4c>)
   23058:	4629      	mov	r1, r5
   2305a:	4690      	mov	r8, r2
   2305c:	461e      	mov	r6, r3
   2305e:	9301      	str	r3, [sp, #4]
   23060:	f002 f80c 	bl	2507c <vsniprintf>
   23064:	1e04      	subs	r4, r0, #0
   23066:	db11      	blt.n	2308c <at_vsprintf+0x40>
   23068:	3401      	adds	r4, #1
   2306a:	4620      	mov	r0, r4
   2306c:	f004 f846 	bl	270fc <rpc_client_msg_data_tx_alloc>
   23070:	f8c9 0000 	str.w	r0, [r9]
   23074:	b168      	cbz	r0, 23092 <at_vsprintf+0x46>
   23076:	4633      	mov	r3, r6
   23078:	4642      	mov	r2, r8
   2307a:	4621      	mov	r1, r4
   2307c:	9601      	str	r6, [sp, #4]
   2307e:	f001 fffd 	bl	2507c <vsniprintf>
   23082:	4628      	mov	r0, r5
   23084:	603c      	str	r4, [r7, #0]
   23086:	b003      	add	sp, #12
   23088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2308c:	f06f 0015 	mvn.w	r0, #21
   23090:	e7f9      	b.n	23086 <at_vsprintf+0x3a>
   23092:	f06f 000b 	mvn.w	r0, #11
   23096:	e7f6      	b.n	23086 <at_vsprintf+0x3a>
   23098:	00028d40 	.word	0x00028d40

0002309c <nrf_modem_at_notif_handler_set>:
   2309c:	4b01      	ldr	r3, [pc, #4]	; (230a4 <nrf_modem_at_notif_handler_set+0x8>)
   2309e:	6018      	str	r0, [r3, #0]
   230a0:	2000      	movs	r0, #0
   230a2:	4770      	bx	lr
   230a4:	2000d7fc 	.word	0x2000d7fc

000230a8 <nrf_modem_at_printf>:
   230a8:	b40f      	push	{r0, r1, r2, r3}
   230aa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   230ac:	9c08      	ldr	r4, [sp, #32]
   230ae:	f000 fa69 	bl	23584 <nrf_modem_state_is_initialized>
   230b2:	2800      	cmp	r0, #0
   230b4:	d039      	beq.n	2312a <nrf_modem_at_printf+0x82>
   230b6:	2c00      	cmp	r4, #0
   230b8:	d03a      	beq.n	23130 <nrf_modem_at_printf+0x88>
   230ba:	4622      	mov	r2, r4
   230bc:	ab09      	add	r3, sp, #36	; 0x24
   230be:	a903      	add	r1, sp, #12
   230c0:	a802      	add	r0, sp, #8
   230c2:	9301      	str	r3, [sp, #4]
   230c4:	f7ff ffc2 	bl	2304c <at_vsprintf>
   230c8:	4604      	mov	r4, r0
   230ca:	b960      	cbnz	r0, 230e6 <nrf_modem_at_printf+0x3e>
   230cc:	4e1a      	ldr	r6, [pc, #104]	; (23138 <nrf_modem_at_printf+0x90>)
   230ce:	f04f 31ff 	mov.w	r1, #4294967295
   230d2:	6830      	ldr	r0, [r6, #0]
   230d4:	f003 fbaa 	bl	2682c <nrf_modem_os_sem_take>
   230d8:	4603      	mov	r3, r0
   230da:	9802      	ldr	r0, [sp, #8]
   230dc:	b14b      	cbz	r3, 230f2 <nrf_modem_at_printf+0x4a>
   230de:	f004 f80f 	bl	27100 <rpc_client_msg_data_tx_free>
   230e2:	f06f 040a 	mvn.w	r4, #10
   230e6:	4620      	mov	r0, r4
   230e8:	b004      	add	sp, #16
   230ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   230ee:	b004      	add	sp, #16
   230f0:	4770      	bx	lr
   230f2:	2302      	movs	r3, #2
   230f4:	2201      	movs	r2, #1
   230f6:	9903      	ldr	r1, [sp, #12]
   230f8:	f7ff ff4a 	bl	22f90 <at_cmd_send>
   230fc:	4604      	mov	r4, r0
   230fe:	b118      	cbz	r0, 23108 <nrf_modem_at_printf+0x60>
   23100:	6830      	ldr	r0, [r6, #0]
   23102:	f003 fb91 	bl	26828 <nrf_modem_os_sem_give>
   23106:	e7ee      	b.n	230e6 <nrf_modem_at_printf+0x3e>
   23108:	4d0c      	ldr	r5, [pc, #48]	; (2313c <nrf_modem_at_printf+0x94>)
   2310a:	682b      	ldr	r3, [r5, #0]
   2310c:	6818      	ldr	r0, [r3, #0]
   2310e:	f7ff ff79 	bl	23004 <at_response_match>
   23112:	4604      	mov	r4, r0
   23114:	6830      	ldr	r0, [r6, #0]
   23116:	f003 fb87 	bl	26828 <nrf_modem_os_sem_give>
   2311a:	682b      	ldr	r3, [r5, #0]
   2311c:	6818      	ldr	r0, [r3, #0]
   2311e:	f003 ffe9 	bl	270f4 <rpc_client_msg_data_rx_free>
   23122:	6828      	ldr	r0, [r5, #0]
   23124:	f003 ffe3 	bl	270ee <rpc_client_msg_rx_free>
   23128:	e7dd      	b.n	230e6 <nrf_modem_at_printf+0x3e>
   2312a:	f04f 34ff 	mov.w	r4, #4294967295
   2312e:	e7da      	b.n	230e6 <nrf_modem_at_printf+0x3e>
   23130:	f06f 040d 	mvn.w	r4, #13
   23134:	e7d7      	b.n	230e6 <nrf_modem_at_printf+0x3e>
   23136:	bf00      	nop
   23138:	2000d804 	.word	0x2000d804
   2313c:	2000d800 	.word	0x2000d800

00023140 <nrf_modem_at_cmd>:
   23140:	b40c      	push	{r2, r3}
   23142:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23146:	b085      	sub	sp, #20
   23148:	4606      	mov	r6, r0
   2314a:	460d      	mov	r5, r1
   2314c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   2314e:	f000 fa19 	bl	23584 <nrf_modem_state_is_initialized>
   23152:	2800      	cmp	r0, #0
   23154:	f000 8081 	beq.w	2325a <nrf_modem_at_cmd+0x11a>
   23158:	2e00      	cmp	r6, #0
   2315a:	f000 8081 	beq.w	23260 <nrf_modem_at_cmd+0x120>
   2315e:	2c00      	cmp	r4, #0
   23160:	d07e      	beq.n	23260 <nrf_modem_at_cmd+0x120>
   23162:	2d00      	cmp	r5, #0
   23164:	d07f      	beq.n	23266 <nrf_modem_at_cmd+0x126>
   23166:	4622      	mov	r2, r4
   23168:	ab0f      	add	r3, sp, #60	; 0x3c
   2316a:	a903      	add	r1, sp, #12
   2316c:	a802      	add	r0, sp, #8
   2316e:	9301      	str	r3, [sp, #4]
   23170:	f7ff ff6c 	bl	2304c <at_vsprintf>
   23174:	4604      	mov	r4, r0
   23176:	2800      	cmp	r0, #0
   23178:	d13c      	bne.n	231f4 <nrf_modem_at_cmd+0xb4>
   2317a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 2326c <nrf_modem_at_cmd+0x12c>
   2317e:	9f02      	ldr	r7, [sp, #8]
   23180:	f8d8 3000 	ldr.w	r3, [r8]
   23184:	b1c3      	cbz	r3, 231b8 <nrf_modem_at_cmd+0x78>
   23186:	f04f 0b0c 	mov.w	fp, #12
   2318a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 23270 <nrf_modem_at_cmd+0x130>
   2318e:	f8da 3000 	ldr.w	r3, [sl]
   23192:	429c      	cmp	r4, r3
   23194:	d210      	bcs.n	231b8 <nrf_modem_at_cmd+0x78>
   23196:	fb0b f904 	mul.w	r9, fp, r4
   2319a:	f8d8 3000 	ldr.w	r3, [r8]
   2319e:	4638      	mov	r0, r7
   231a0:	f853 1009 	ldr.w	r1, [r3, r9]
   231a4:	f005 fa02 	bl	285ac <strstr>
   231a8:	b1a8      	cbz	r0, 231d6 <nrf_modem_at_cmd+0x96>
   231aa:	f8d8 3000 	ldr.w	r3, [r8]
   231ae:	444b      	add	r3, r9
   231b0:	7a1a      	ldrb	r2, [r3, #8]
   231b2:	b982      	cbnz	r2, 231d6 <nrf_modem_at_cmd+0x96>
   231b4:	685b      	ldr	r3, [r3, #4]
   231b6:	b983      	cbnz	r3, 231da <nrf_modem_at_cmd+0x9a>
   231b8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 23274 <nrf_modem_at_cmd+0x134>
   231bc:	f04f 31ff 	mov.w	r1, #4294967295
   231c0:	f8d8 0000 	ldr.w	r0, [r8]
   231c4:	f003 fb32 	bl	2682c <nrf_modem_os_sem_take>
   231c8:	b1d0      	cbz	r0, 23200 <nrf_modem_at_cmd+0xc0>
   231ca:	4638      	mov	r0, r7
   231cc:	f003 ff98 	bl	27100 <rpc_client_msg_data_tx_free>
   231d0:	f06f 040a 	mvn.w	r4, #10
   231d4:	e00e      	b.n	231f4 <nrf_modem_at_cmd+0xb4>
   231d6:	3401      	adds	r4, #1
   231d8:	e7d9      	b.n	2318e <nrf_modem_at_cmd+0x4e>
   231da:	463a      	mov	r2, r7
   231dc:	4629      	mov	r1, r5
   231de:	4630      	mov	r0, r6
   231e0:	4798      	blx	r3
   231e2:	4604      	mov	r4, r0
   231e4:	b918      	cbnz	r0, 231ee <nrf_modem_at_cmd+0xae>
   231e6:	4630      	mov	r0, r6
   231e8:	f7ff ff0c 	bl	23004 <at_response_match>
   231ec:	4604      	mov	r4, r0
   231ee:	4638      	mov	r0, r7
   231f0:	f003 ff86 	bl	27100 <rpc_client_msg_data_tx_free>
   231f4:	4620      	mov	r0, r4
   231f6:	b005      	add	sp, #20
   231f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   231fc:	b002      	add	sp, #8
   231fe:	4770      	bx	lr
   23200:	2302      	movs	r3, #2
   23202:	2201      	movs	r2, #1
   23204:	4638      	mov	r0, r7
   23206:	9903      	ldr	r1, [sp, #12]
   23208:	f7ff fec2 	bl	22f90 <at_cmd_send>
   2320c:	4604      	mov	r4, r0
   2320e:	b120      	cbz	r0, 2321a <nrf_modem_at_cmd+0xda>
   23210:	f8d8 0000 	ldr.w	r0, [r8]
   23214:	f003 fb08 	bl	26828 <nrf_modem_os_sem_give>
   23218:	e7ec      	b.n	231f4 <nrf_modem_at_cmd+0xb4>
   2321a:	4f17      	ldr	r7, [pc, #92]	; (23278 <nrf_modem_at_cmd+0x138>)
   2321c:	4630      	mov	r0, r6
   2321e:	683c      	ldr	r4, [r7, #0]
   23220:	6862      	ldr	r2, [r4, #4]
   23222:	6821      	ldr	r1, [r4, #0]
   23224:	42aa      	cmp	r2, r5
   23226:	bf28      	it	cs
   23228:	462a      	movcs	r2, r5
   2322a:	f005 f964 	bl	284f6 <memcpy>
   2322e:	6863      	ldr	r3, [r4, #4]
   23230:	42ab      	cmp	r3, r5
   23232:	d80f      	bhi.n	23254 <nrf_modem_at_cmd+0x114>
   23234:	6820      	ldr	r0, [r4, #0]
   23236:	f7ff fee5 	bl	23004 <at_response_match>
   2323a:	4604      	mov	r4, r0
   2323c:	f8d8 0000 	ldr.w	r0, [r8]
   23240:	f003 faf2 	bl	26828 <nrf_modem_os_sem_give>
   23244:	683b      	ldr	r3, [r7, #0]
   23246:	6818      	ldr	r0, [r3, #0]
   23248:	f003 ff54 	bl	270f4 <rpc_client_msg_data_rx_free>
   2324c:	6838      	ldr	r0, [r7, #0]
   2324e:	f003 ff4e 	bl	270ee <rpc_client_msg_rx_free>
   23252:	e7cf      	b.n	231f4 <nrf_modem_at_cmd+0xb4>
   23254:	f06f 0406 	mvn.w	r4, #6
   23258:	e7f0      	b.n	2323c <nrf_modem_at_cmd+0xfc>
   2325a:	f04f 34ff 	mov.w	r4, #4294967295
   2325e:	e7c9      	b.n	231f4 <nrf_modem_at_cmd+0xb4>
   23260:	f06f 040d 	mvn.w	r4, #13
   23264:	e7c6      	b.n	231f4 <nrf_modem_at_cmd+0xb4>
   23266:	f06f 0415 	mvn.w	r4, #21
   2326a:	e7c3      	b.n	231f4 <nrf_modem_at_cmd+0xb4>
   2326c:	2000d7f4 	.word	0x2000d7f4
   23270:	2000d7f0 	.word	0x2000d7f0
   23274:	2000d804 	.word	0x2000d804
   23278:	2000d800 	.word	0x2000d800

0002327c <rpc_at_event_handler>:
   2327c:	b538      	push	{r3, r4, r5, lr}
   2327e:	68c3      	ldr	r3, [r0, #12]
   23280:	4604      	mov	r4, r0
   23282:	2ba7      	cmp	r3, #167	; 0xa7
   23284:	d003      	beq.n	2328e <rpc_at_event_handler+0x12>
   23286:	6820      	ldr	r0, [r4, #0]
   23288:	f003 ff34 	bl	270f4 <rpc_client_msg_data_rx_free>
   2328c:	e008      	b.n	232a0 <rpc_at_event_handler+0x24>
   2328e:	2903      	cmp	r1, #3
   23290:	d008      	beq.n	232a4 <rpc_at_event_handler+0x28>
   23292:	2904      	cmp	r1, #4
   23294:	d021      	beq.n	232da <rpc_at_event_handler+0x5e>
   23296:	2902      	cmp	r1, #2
   23298:	bf02      	ittt	eq
   2329a:	2201      	moveq	r2, #1
   2329c:	4b12      	ldreq	r3, [pc, #72]	; (232e8 <rpc_at_event_handler+0x6c>)
   2329e:	701a      	strbeq	r2, [r3, #0]
   232a0:	2000      	movs	r0, #0
   232a2:	bd38      	pop	{r3, r4, r5, pc}
   232a4:	4d11      	ldr	r5, [pc, #68]	; (232ec <rpc_at_event_handler+0x70>)
   232a6:	682b      	ldr	r3, [r5, #0]
   232a8:	b13b      	cbz	r3, 232ba <rpc_at_event_handler+0x3e>
   232aa:	6800      	ldr	r0, [r0, #0]
   232ac:	4798      	blx	r3
   232ae:	2300      	movs	r3, #0
   232b0:	6820      	ldr	r0, [r4, #0]
   232b2:	602b      	str	r3, [r5, #0]
   232b4:	f003 ff1e 	bl	270f4 <rpc_client_msg_data_rx_free>
   232b8:	e006      	b.n	232c8 <rpc_at_event_handler+0x4c>
   232ba:	4b0b      	ldr	r3, [pc, #44]	; (232e8 <rpc_at_event_handler+0x6c>)
   232bc:	781a      	ldrb	r2, [r3, #0]
   232be:	2a02      	cmp	r2, #2
   232c0:	d105      	bne.n	232ce <rpc_at_event_handler+0x52>
   232c2:	6800      	ldr	r0, [r0, #0]
   232c4:	2800      	cmp	r0, #0
   232c6:	d1f5      	bne.n	232b4 <rpc_at_event_handler+0x38>
   232c8:	2000      	movs	r0, #0
   232ca:	b2c0      	uxtb	r0, r0
   232cc:	e7e9      	b.n	232a2 <rpc_at_event_handler+0x26>
   232ce:	4a08      	ldr	r2, [pc, #32]	; (232f0 <rpc_at_event_handler+0x74>)
   232d0:	6010      	str	r0, [r2, #0]
   232d2:	2202      	movs	r2, #2
   232d4:	2001      	movs	r0, #1
   232d6:	701a      	strb	r2, [r3, #0]
   232d8:	e7f7      	b.n	232ca <rpc_at_event_handler+0x4e>
   232da:	4b06      	ldr	r3, [pc, #24]	; (232f4 <rpc_at_event_handler+0x78>)
   232dc:	681b      	ldr	r3, [r3, #0]
   232de:	2b00      	cmp	r3, #0
   232e0:	d0d1      	beq.n	23286 <rpc_at_event_handler+0xa>
   232e2:	6800      	ldr	r0, [r0, #0]
   232e4:	4798      	blx	r3
   232e6:	e7ce      	b.n	23286 <rpc_at_event_handler+0xa>
   232e8:	2000ddea 	.word	0x2000ddea
   232ec:	2000d7f8 	.word	0x2000d7f8
   232f0:	2000d800 	.word	0x2000d800
   232f4:	2000d7fc 	.word	0x2000d7fc

000232f8 <rpc_at_init>:
   232f8:	2201      	movs	r2, #1
   232fa:	b510      	push	{r4, lr}
   232fc:	4611      	mov	r1, r2
   232fe:	4807      	ldr	r0, [pc, #28]	; (2331c <rpc_at_init+0x24>)
   23300:	f7fa fd54 	bl	1ddac <nrf_modem_os_sem_init>
   23304:	4601      	mov	r1, r0
   23306:	b928      	cbnz	r0, 23314 <rpc_at_init+0x1c>
   23308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2330c:	2301      	movs	r3, #1
   2330e:	2205      	movs	r2, #5
   23310:	f7ff be3e 	b.w	22f90 <at_cmd_send>
   23314:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   23318:	bd10      	pop	{r4, pc}
   2331a:	bf00      	nop
   2331c:	2000d804 	.word	0x2000d804

00023320 <rpc_gnss_event_handler>:
   23320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23322:	6804      	ldr	r4, [r0, #0]
   23324:	4606      	mov	r6, r0
   23326:	b13c      	cbz	r4, 23338 <rpc_gnss_event_handler+0x18>
   23328:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   2332c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   23330:	d104      	bne.n	2333c <rpc_gnss_event_handler+0x1c>
   23332:	4b41      	ldr	r3, [pc, #260]	; (23438 <rpc_gnss_event_handler+0x118>)
   23334:	e9c3 1400 	strd	r1, r4, [r3]
   23338:	2000      	movs	r0, #0
   2333a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2333c:	4d3f      	ldr	r5, [pc, #252]	; (2343c <rpc_gnss_event_handler+0x11c>)
   2333e:	682b      	ldr	r3, [r5, #0]
   23340:	2b00      	cmp	r3, #0
   23342:	d06f      	beq.n	23424 <rpc_gnss_event_handler+0x104>
   23344:	f244 0204 	movw	r2, #16388	; 0x4004
   23348:	4291      	cmp	r1, r2
   2334a:	d80b      	bhi.n	23364 <rpc_gnss_event_handler+0x44>
   2334c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   23350:	d968      	bls.n	23424 <rpc_gnss_event_handler+0x104>
   23352:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
   23356:	3902      	subs	r1, #2
   23358:	2902      	cmp	r1, #2
   2335a:	d82a      	bhi.n	233b2 <rpc_gnss_event_handler+0x92>
   2335c:	e8df f001 	tbb	[pc, r1]
   23360:	5047      	.short	0x5047
   23362:	59          	.byte	0x59
   23363:	00          	.byte	0x00
   23364:	f244 1301 	movw	r3, #16641	; 0x4101
   23368:	4299      	cmp	r1, r3
   2336a:	d02e      	beq.n	233ca <rpc_gnss_event_handler+0xaa>
   2336c:	f244 2301 	movw	r3, #16897	; 0x4201
   23370:	4299      	cmp	r1, r3
   23372:	d157      	bne.n	23424 <rpc_gnss_event_handler+0x104>
   23374:	4e32      	ldr	r6, [pc, #200]	; (23440 <rpc_gnss_event_handler+0x120>)
   23376:	6830      	ldr	r0, [r6, #0]
   23378:	b108      	cbz	r0, 2337e <rpc_gnss_event_handler+0x5e>
   2337a:	f003 febb 	bl	270f4 <rpc_client_msg_data_rx_free>
   2337e:	2202      	movs	r2, #2
   23380:	4b30      	ldr	r3, [pc, #192]	; (23444 <rpc_gnss_event_handler+0x124>)
   23382:	6034      	str	r4, [r6, #0]
   23384:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   23388:	701a      	strb	r2, [r3, #0]
   2338a:	4e2f      	ldr	r6, [pc, #188]	; (23448 <rpc_gnss_event_handler+0x128>)
   2338c:	f014 0708 	ands.w	r7, r4, #8
   23390:	682b      	ldr	r3, [r5, #0]
   23392:	7832      	ldrb	r2, [r6, #0]
   23394:	d025      	beq.n	233e2 <rpc_gnss_event_handler+0xc2>
   23396:	b91a      	cbnz	r2, 233a0 <rpc_gnss_event_handler+0x80>
   23398:	2005      	movs	r0, #5
   2339a:	4798      	blx	r3
   2339c:	2301      	movs	r3, #1
   2339e:	7033      	strb	r3, [r6, #0]
   233a0:	07e3      	lsls	r3, r4, #31
   233a2:	d502      	bpl.n	233aa <rpc_gnss_event_handler+0x8a>
   233a4:	2002      	movs	r0, #2
   233a6:	682b      	ldr	r3, [r5, #0]
   233a8:	4798      	blx	r3
   233aa:	2001      	movs	r0, #1
   233ac:	682b      	ldr	r3, [r5, #0]
   233ae:	4798      	blx	r3
   233b0:	e7c2      	b.n	23338 <rpc_gnss_event_handler+0x18>
   233b2:	4e23      	ldr	r6, [pc, #140]	; (23440 <rpc_gnss_event_handler+0x120>)
   233b4:	6830      	ldr	r0, [r6, #0]
   233b6:	b108      	cbz	r0, 233bc <rpc_gnss_event_handler+0x9c>
   233b8:	f003 fe9c 	bl	270f4 <rpc_client_msg_data_rx_free>
   233bc:	2200      	movs	r2, #0
   233be:	4b21      	ldr	r3, [pc, #132]	; (23444 <rpc_gnss_event_handler+0x124>)
   233c0:	6034      	str	r4, [r6, #0]
   233c2:	701a      	strb	r2, [r3, #0]
   233c4:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
   233c8:	e7df      	b.n	2338a <rpc_gnss_event_handler+0x6a>
   233ca:	4e1d      	ldr	r6, [pc, #116]	; (23440 <rpc_gnss_event_handler+0x120>)
   233cc:	6830      	ldr	r0, [r6, #0]
   233ce:	b108      	cbz	r0, 233d4 <rpc_gnss_event_handler+0xb4>
   233d0:	f003 fe90 	bl	270f4 <rpc_client_msg_data_rx_free>
   233d4:	2201      	movs	r2, #1
   233d6:	4b1b      	ldr	r3, [pc, #108]	; (23444 <rpc_gnss_event_handler+0x124>)
   233d8:	6034      	str	r4, [r6, #0]
   233da:	701a      	strb	r2, [r3, #0]
   233dc:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
   233e0:	e7d3      	b.n	2338a <rpc_gnss_event_handler+0x6a>
   233e2:	2a00      	cmp	r2, #0
   233e4:	d0dc      	beq.n	233a0 <rpc_gnss_event_handler+0x80>
   233e6:	2006      	movs	r0, #6
   233e8:	4798      	blx	r3
   233ea:	7037      	strb	r7, [r6, #0]
   233ec:	e7d8      	b.n	233a0 <rpc_gnss_event_handler+0x80>
   233ee:	4e17      	ldr	r6, [pc, #92]	; (2344c <rpc_gnss_event_handler+0x12c>)
   233f0:	6830      	ldr	r0, [r6, #0]
   233f2:	b108      	cbz	r0, 233f8 <rpc_gnss_event_handler+0xd8>
   233f4:	f003 fe7e 	bl	270f4 <rpc_client_msg_data_rx_free>
   233f8:	2003      	movs	r0, #3
   233fa:	682b      	ldr	r3, [r5, #0]
   233fc:	6034      	str	r4, [r6, #0]
   233fe:	e7d6      	b.n	233ae <rpc_gnss_event_handler+0x8e>
   23400:	4e13      	ldr	r6, [pc, #76]	; (23450 <rpc_gnss_event_handler+0x130>)
   23402:	6830      	ldr	r0, [r6, #0]
   23404:	b108      	cbz	r0, 2340a <rpc_gnss_event_handler+0xea>
   23406:	f003 fe75 	bl	270f4 <rpc_client_msg_data_rx_free>
   2340a:	2004      	movs	r0, #4
   2340c:	682b      	ldr	r3, [r5, #0]
   2340e:	6034      	str	r4, [r6, #0]
   23410:	e7cd      	b.n	233ae <rpc_gnss_event_handler+0x8e>
   23412:	7822      	ldrb	r2, [r4, #0]
   23414:	2a03      	cmp	r2, #3
   23416:	d805      	bhi.n	23424 <rpc_gnss_event_handler+0x104>
   23418:	e8df f002 	tbb	[pc, r2]
   2341c:	0c0a0802 	.word	0x0c0a0802
   23420:	2007      	movs	r0, #7
   23422:	4798      	blx	r3
   23424:	6830      	ldr	r0, [r6, #0]
   23426:	f003 fe65 	bl	270f4 <rpc_client_msg_data_rx_free>
   2342a:	e785      	b.n	23338 <rpc_gnss_event_handler+0x18>
   2342c:	2008      	movs	r0, #8
   2342e:	e7f8      	b.n	23422 <rpc_gnss_event_handler+0x102>
   23430:	2009      	movs	r0, #9
   23432:	e7f6      	b.n	23422 <rpc_gnss_event_handler+0x102>
   23434:	200a      	movs	r0, #10
   23436:	e7f4      	b.n	23422 <rpc_gnss_event_handler+0x102>
   23438:	2000d818 	.word	0x2000d818
   2343c:	2000d808 	.word	0x2000d808
   23440:	2000d814 	.word	0x2000d814
   23444:	2000ddeb 	.word	0x2000ddeb
   23448:	2000ddec 	.word	0x2000ddec
   2344c:	2000d810 	.word	0x2000d810
   23450:	2000d80c 	.word	0x2000d80c

00023454 <rpc_gnss_init>:
   23454:	b508      	push	{r3, lr}
   23456:	2300      	movs	r3, #0
   23458:	4a09      	ldr	r2, [pc, #36]	; (23480 <rpc_gnss_init+0x2c>)
   2345a:	480a      	ldr	r0, [pc, #40]	; (23484 <rpc_gnss_init+0x30>)
   2345c:	7013      	strb	r3, [r2, #0]
   2345e:	4a0a      	ldr	r2, [pc, #40]	; (23488 <rpc_gnss_init+0x34>)
   23460:	7013      	strb	r3, [r2, #0]
   23462:	4a0a      	ldr	r2, [pc, #40]	; (2348c <rpc_gnss_init+0x38>)
   23464:	7013      	strb	r3, [r2, #0]
   23466:	4a0a      	ldr	r2, [pc, #40]	; (23490 <rpc_gnss_init+0x3c>)
   23468:	7013      	strb	r3, [r2, #0]
   2346a:	4a0a      	ldr	r2, [pc, #40]	; (23494 <rpc_gnss_init+0x40>)
   2346c:	6013      	str	r3, [r2, #0]
   2346e:	2201      	movs	r2, #1
   23470:	4611      	mov	r1, r2
   23472:	f7fa fc9b 	bl	1ddac <nrf_modem_os_sem_init>
   23476:	2800      	cmp	r0, #0
   23478:	bf18      	it	ne
   2347a:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   2347e:	bd08      	pop	{r3, pc}
   23480:	2000ddec 	.word	0x2000ddec
   23484:	2000d820 	.word	0x2000d820
   23488:	2000ddee 	.word	0x2000ddee
   2348c:	2000dded 	.word	0x2000dded
   23490:	2000ddeb 	.word	0x2000ddeb
   23494:	2000d808 	.word	0x2000d808

00023498 <modem_off>:
   23498:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2349a:	2501      	movs	r5, #1
   2349c:	4c07      	ldr	r4, [pc, #28]	; (234bc <modem_off+0x24>)
   2349e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   234a2:	6165      	str	r5, [r4, #20]
   234a4:	f003 f9b6 	bl	26814 <nrf_modem_os_busywait>
   234a8:	2300      	movs	r3, #0
   234aa:	6163      	str	r3, [r4, #20]
   234ac:	9301      	str	r3, [sp, #4]
   234ae:	6125      	str	r5, [r4, #16]
   234b0:	6923      	ldr	r3, [r4, #16]
   234b2:	9301      	str	r3, [sp, #4]
   234b4:	9b01      	ldr	r3, [sp, #4]
   234b6:	b003      	add	sp, #12
   234b8:	bd30      	pop	{r4, r5, pc}
   234ba:	bf00      	nop
   234bc:	40005600 	.word	0x40005600

000234c0 <atomic_set.constprop.0.isra.0>:
   234c0:	4b03      	ldr	r3, [pc, #12]	; (234d0 <atomic_set.constprop.0.isra.0+0x10>)
   234c2:	e8d3 2fef 	ldaex	r2, [r3]
   234c6:	e8c3 0fe1 	stlex	r1, r0, [r3]
   234ca:	2900      	cmp	r1, #0
   234cc:	d1f9      	bne.n	234c2 <atomic_set.constprop.0.isra.0+0x2>
   234ce:	4770      	bx	lr
   234d0:	2000d824 	.word	0x2000d824

000234d4 <nrf_modem_init>:
   234d4:	b513      	push	{r0, r1, r4, lr}
   234d6:	4604      	mov	r4, r0
   234d8:	b380      	cbz	r0, 2353c <nrf_modem_init+0x68>
   234da:	6a43      	ldr	r3, [r0, #36]	; 0x24
   234dc:	b38b      	cbz	r3, 23542 <nrf_modem_init+0x6e>
   234de:	2201      	movs	r2, #1
   234e0:	4b1b      	ldr	r3, [pc, #108]	; (23550 <nrf_modem_init+0x7c>)
   234e2:	e8d3 1fef 	ldaex	r1, [r3]
   234e6:	2900      	cmp	r1, #0
   234e8:	d103      	bne.n	234f2 <nrf_modem_init+0x1e>
   234ea:	e8c3 2fe0 	stlex	r0, r2, [r3]
   234ee:	2800      	cmp	r0, #0
   234f0:	d1f7      	bne.n	234e2 <nrf_modem_init+0xe>
   234f2:	d129      	bne.n	23548 <nrf_modem_init+0x74>
   234f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   234f6:	f000 f82d 	bl	23554 <nrf_modem_fault_handler_set>
   234fa:	f7fa fcab 	bl	1de54 <nrf_modem_os_init>
   234fe:	6a23      	ldr	r3, [r4, #32]
   23500:	4668      	mov	r0, sp
   23502:	9400      	str	r4, [sp, #0]
   23504:	f88d 3004 	strb.w	r3, [sp, #4]
   23508:	f003 fd91 	bl	2702e <rpc_init>
   2350c:	4604      	mov	r4, r0
   2350e:	b958      	cbnz	r0, 23528 <nrf_modem_init+0x54>
   23510:	f7ff fef2 	bl	232f8 <rpc_at_init>
   23514:	4604      	mov	r4, r0
   23516:	b938      	cbnz	r0, 23528 <nrf_modem_init+0x54>
   23518:	f7ff fc60 	bl	22ddc <rpc_ip_init>
   2351c:	4604      	mov	r4, r0
   2351e:	b918      	cbnz	r0, 23528 <nrf_modem_init+0x54>
   23520:	f7ff ff98 	bl	23454 <rpc_gnss_init>
   23524:	4604      	mov	r4, r0
   23526:	b138      	cbz	r0, 23538 <nrf_modem_init+0x64>
   23528:	f7ff ffb6 	bl	23498 <modem_off>
   2352c:	2000      	movs	r0, #0
   2352e:	f7ff ffc7 	bl	234c0 <atomic_set.constprop.0.isra.0>
   23532:	4620      	mov	r0, r4
   23534:	b002      	add	sp, #8
   23536:	bd10      	pop	{r4, pc}
   23538:	2002      	movs	r0, #2
   2353a:	e7f8      	b.n	2352e <nrf_modem_init+0x5a>
   2353c:	f06f 040d 	mvn.w	r4, #13
   23540:	e7f7      	b.n	23532 <nrf_modem_init+0x5e>
   23542:	f06f 0415 	mvn.w	r4, #21
   23546:	e7f4      	b.n	23532 <nrf_modem_init+0x5e>
   23548:	f04f 34ff 	mov.w	r4, #4294967295
   2354c:	e7f1      	b.n	23532 <nrf_modem_init+0x5e>
   2354e:	bf00      	nop
   23550:	2000d824 	.word	0x2000d824

00023554 <nrf_modem_fault_handler_set>:
   23554:	4b01      	ldr	r3, [pc, #4]	; (2355c <nrf_modem_fault_handler_set+0x8>)
   23556:	6018      	str	r0, [r3, #0]
   23558:	4770      	bx	lr
   2355a:	bf00      	nop
   2355c:	2000d828 	.word	0x2000d828

00023560 <nrf_modem_fault_handler_internal>:
   23560:	b507      	push	{r0, r1, r2, lr}
   23562:	4b04      	ldr	r3, [pc, #16]	; (23574 <nrf_modem_fault_handler_internal+0x14>)
   23564:	e9cd 0100 	strd	r0, r1, [sp]
   23568:	681b      	ldr	r3, [r3, #0]
   2356a:	4668      	mov	r0, sp
   2356c:	4798      	blx	r3
   2356e:	b003      	add	sp, #12
   23570:	f85d fb04 	ldr.w	pc, [sp], #4
   23574:	2000d828 	.word	0x2000d828

00023578 <nrf_modem_state_set>:
   23578:	4b01      	ldr	r3, [pc, #4]	; (23580 <nrf_modem_state_set+0x8>)
   2357a:	7018      	strb	r0, [r3, #0]
   2357c:	4770      	bx	lr
   2357e:	bf00      	nop
   23580:	2000ddef 	.word	0x2000ddef

00023584 <nrf_modem_state_is_initialized>:
   23584:	4b02      	ldr	r3, [pc, #8]	; (23590 <nrf_modem_state_is_initialized+0xc>)
   23586:	7818      	ldrb	r0, [r3, #0]
   23588:	1e43      	subs	r3, r0, #1
   2358a:	4258      	negs	r0, r3
   2358c:	4158      	adcs	r0, r3
   2358e:	4770      	bx	lr
   23590:	2000ddef 	.word	0x2000ddef

00023594 <ipc_trace_init>:
   23594:	2100      	movs	r1, #0
   23596:	4b07      	ldr	r3, [pc, #28]	; (235b4 <ipc_trace_init+0x20>)
   23598:	2201      	movs	r2, #1
   2359a:	7019      	strb	r1, [r3, #0]
   2359c:	4b06      	ldr	r3, [pc, #24]	; (235b8 <ipc_trace_init+0x24>)
   2359e:	7019      	strb	r1, [r3, #0]
   235a0:	4b06      	ldr	r3, [pc, #24]	; (235bc <ipc_trace_init+0x28>)
   235a2:	6019      	str	r1, [r3, #0]
   235a4:	4b06      	ldr	r3, [pc, #24]	; (235c0 <ipc_trace_init+0x2c>)
   235a6:	6019      	str	r1, [r3, #0]
   235a8:	4b06      	ldr	r3, [pc, #24]	; (235c4 <ipc_trace_init+0x30>)
   235aa:	6018      	str	r0, [r3, #0]
   235ac:	4806      	ldr	r0, [pc, #24]	; (235c8 <ipc_trace_init+0x34>)
   235ae:	f7fa bbfd 	b.w	1ddac <nrf_modem_os_sem_init>
   235b2:	bf00      	nop
   235b4:	2000ddf0 	.word	0x2000ddf0
   235b8:	2000ddf1 	.word	0x2000ddf1
   235bc:	2000d830 	.word	0x2000d830
   235c0:	2000d834 	.word	0x2000d834
   235c4:	2000d844 	.word	0x2000d844
   235c8:	2000d82c 	.word	0x2000d82c

000235cc <ipc_trace_handler>:
   235cc:	b470      	push	{r4, r5, r6}
   235ce:	4b2d      	ldr	r3, [pc, #180]	; (23684 <ipc_trace_handler+0xb8>)
   235d0:	681b      	ldr	r3, [r3, #0]
   235d2:	6919      	ldr	r1, [r3, #16]
   235d4:	6958      	ldr	r0, [r3, #20]
   235d6:	7c1a      	ldrb	r2, [r3, #16]
   235d8:	2200      	movs	r2, #0
   235da:	741a      	strb	r2, [r3, #16]
   235dc:	7c5c      	ldrb	r4, [r3, #17]
   235de:	745a      	strb	r2, [r3, #17]
   235e0:	7c9c      	ldrb	r4, [r3, #18]
   235e2:	749a      	strb	r2, [r3, #18]
   235e4:	7cdc      	ldrb	r4, [r3, #19]
   235e6:	74da      	strb	r2, [r3, #19]
   235e8:	7d1c      	ldrb	r4, [r3, #20]
   235ea:	751a      	strb	r2, [r3, #20]
   235ec:	7d5c      	ldrb	r4, [r3, #21]
   235ee:	755a      	strb	r2, [r3, #21]
   235f0:	7d9c      	ldrb	r4, [r3, #22]
   235f2:	2903      	cmp	r1, #3
   235f4:	759a      	strb	r2, [r3, #22]
   235f6:	7ddc      	ldrb	r4, [r3, #23]
   235f8:	75da      	strb	r2, [r3, #23]
   235fa:	d029      	beq.n	23650 <ipc_trace_handler+0x84>
   235fc:	2904      	cmp	r1, #4
   235fe:	d033      	beq.n	23668 <ipc_trace_handler+0x9c>
   23600:	2901      	cmp	r1, #1
   23602:	d12f      	bne.n	23664 <ipc_trace_handler+0x98>
   23604:	6885      	ldr	r5, [r0, #8]
   23606:	4e20      	ldr	r6, [pc, #128]	; (23688 <ipc_trace_handler+0xbc>)
   23608:	4295      	cmp	r5, r2
   2360a:	d110      	bne.n	2362e <ipc_trace_handler+0x62>
   2360c:	2101      	movs	r1, #1
   2360e:	7a1a      	ldrb	r2, [r3, #8]
   23610:	2200      	movs	r2, #0
   23612:	7219      	strb	r1, [r3, #8]
   23614:	7a59      	ldrb	r1, [r3, #9]
   23616:	725a      	strb	r2, [r3, #9]
   23618:	7a99      	ldrb	r1, [r3, #10]
   2361a:	729a      	strb	r2, [r3, #10]
   2361c:	7ada      	ldrb	r2, [r3, #11]
   2361e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   23622:	72da      	strb	r2, [r3, #11]
   23624:	4b19      	ldr	r3, [pc, #100]	; (2368c <ipc_trace_handler+0xc0>)
   23626:	bc70      	pop	{r4, r5, r6}
   23628:	6818      	ldr	r0, [r3, #0]
   2362a:	f003 b8fd 	b.w	26828 <nrf_modem_os_sem_give>
   2362e:	1c91      	adds	r1, r2, #2
   23630:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   23634:	684c      	ldr	r4, [r1, #4]
   23636:	7821      	ldrb	r1, [r4, #0]
   23638:	2962      	cmp	r1, #98	; 0x62
   2363a:	d007      	beq.n	2364c <ipc_trace_handler+0x80>
   2363c:	3963      	subs	r1, #99	; 0x63
   2363e:	bf18      	it	ne
   23640:	2101      	movne	r1, #1
   23642:	0049      	lsls	r1, r1, #1
   23644:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
   23648:	3201      	adds	r2, #1
   2364a:	e7dd      	b.n	23608 <ipc_trace_handler+0x3c>
   2364c:	2101      	movs	r1, #1
   2364e:	e7f9      	b.n	23644 <ipc_trace_handler+0x78>
   23650:	7a18      	ldrb	r0, [r3, #8]
   23652:	7219      	strb	r1, [r3, #8]
   23654:	7a59      	ldrb	r1, [r3, #9]
   23656:	725a      	strb	r2, [r3, #9]
   23658:	7a99      	ldrb	r1, [r3, #10]
   2365a:	729a      	strb	r2, [r3, #10]
   2365c:	7ada      	ldrb	r2, [r3, #11]
   2365e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   23662:	72da      	strb	r2, [r3, #11]
   23664:	bc70      	pop	{r4, r5, r6}
   23666:	4770      	bx	lr
   23668:	7a18      	ldrb	r0, [r3, #8]
   2366a:	7219      	strb	r1, [r3, #8]
   2366c:	7a59      	ldrb	r1, [r3, #9]
   2366e:	725a      	strb	r2, [r3, #9]
   23670:	7a99      	ldrb	r1, [r3, #10]
   23672:	729a      	strb	r2, [r3, #10]
   23674:	7ada      	ldrb	r2, [r3, #11]
   23676:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   2367a:	72da      	strb	r2, [r3, #11]
   2367c:	2201      	movs	r2, #1
   2367e:	4b04      	ldr	r3, [pc, #16]	; (23690 <ipc_trace_handler+0xc4>)
   23680:	701a      	strb	r2, [r3, #0]
   23682:	e7ef      	b.n	23664 <ipc_trace_handler+0x98>
   23684:	2000d844 	.word	0x2000d844
   23688:	2000d838 	.word	0x2000d838
   2368c:	2000d82c 	.word	0x2000d82c
   23690:	2000ddf1 	.word	0x2000ddf1

00023694 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   23694:	4b01      	ldr	r3, [pc, #4]	; (2369c <z_impl_z_errno+0x8>)
   23696:	6898      	ldr	r0, [r3, #8]
}
   23698:	3064      	adds	r0, #100	; 0x64
   2369a:	4770      	bx	lr
   2369c:	2000d848 	.word	0x2000d848

000236a0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   236a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   236a4:	b086      	sub	sp, #24
   236a6:	4605      	mov	r5, r0
   236a8:	460e      	mov	r6, r1
   236aa:	af00      	add	r7, sp, #0
	__asm__ volatile(
   236ac:	f04f 0320 	mov.w	r3, #32
   236b0:	f3ef 8811 	mrs	r8, BASEPRI
   236b4:	f383 8812 	msr	BASEPRI_MAX, r3
   236b8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   236bc:	f000 ff90 	bl	245e0 <z_impl_z_current_get>
   236c0:	2d04      	cmp	r5, #4
   236c2:	bf98      	it	ls
   236c4:	4b2c      	ldrls	r3, [pc, #176]	; (23778 <z_fatal_error+0xd8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   236c6:	46e9      	mov	r9, sp
   236c8:	b08a      	sub	sp, #40	; 0x28
   236ca:	4604      	mov	r4, r0
   236cc:	466a      	mov	r2, sp
   236ce:	bf94      	ite	ls
   236d0:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   236d4:	4b29      	ldrhi	r3, [pc, #164]	; (2377c <z_fatal_error+0xdc>)
   236d6:	61d3      	str	r3, [r2, #28]
   236d8:	f240 3301 	movw	r3, #769	; 0x301
   236dc:	f04f 0a00 	mov.w	sl, #0
   236e0:	8493      	strh	r3, [r2, #36]	; 0x24
   236e2:	4927      	ldr	r1, [pc, #156]	; (23780 <z_fatal_error+0xe0>)
   236e4:	4b27      	ldr	r3, [pc, #156]	; (23784 <z_fatal_error+0xe4>)
   236e6:	e9c2 1505 	strd	r1, r5, [r2, #20]
   236ea:	f8c2 a020 	str.w	sl, [r2, #32]
   236ee:	f842 3f10 	str.w	r3, [r2, #16]!
   236f2:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   236f6:	4653      	mov	r3, sl
   236f8:	4823      	ldr	r0, [pc, #140]	; (23788 <z_fatal_error+0xe8>)
   236fa:	f7f7 fa5b 	bl	1abb4 <z_impl_z_log_msg_static_create>
   236fe:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   23700:	b17e      	cbz	r6, 23722 <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   23702:	69f3      	ldr	r3, [r6, #28]
   23704:	f3c3 0308 	ubfx	r3, r3, #0, #9
   23708:	b15b      	cbz	r3, 23722 <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   2370a:	4b20      	ldr	r3, [pc, #128]	; (2378c <z_fatal_error+0xec>)
   2370c:	617b      	str	r3, [r7, #20]
   2370e:	2302      	movs	r3, #2
   23710:	613b      	str	r3, [r7, #16]
   23712:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   23716:	4653      	mov	r3, sl
   23718:	481b      	ldr	r0, [pc, #108]	; (23788 <z_fatal_error+0xe8>)
   2371a:	f107 0210 	add.w	r2, r7, #16
   2371e:	f7f7 fa49 	bl	1abb4 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   23722:	b12c      	cbz	r4, 23730 <z_fatal_error+0x90>
   23724:	4620      	mov	r0, r4
   23726:	f004 fb92 	bl	27e4e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2372a:	b108      	cbz	r0, 23730 <z_fatal_error+0x90>
   2372c:	7803      	ldrb	r3, [r0, #0]
   2372e:	b903      	cbnz	r3, 23732 <z_fatal_error+0x92>
		thread_name = "unknown";
   23730:	4817      	ldr	r0, [pc, #92]	; (23790 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   23732:	46e9      	mov	r9, sp
   23734:	b08a      	sub	sp, #40	; 0x28
   23736:	466a      	mov	r2, sp
   23738:	4b16      	ldr	r3, [pc, #88]	; (23794 <z_fatal_error+0xf4>)
   2373a:	61d0      	str	r0, [r2, #28]
   2373c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   23740:	f240 3301 	movw	r3, #769	; 0x301
   23744:	8413      	strh	r3, [r2, #32]
   23746:	4b14      	ldr	r3, [pc, #80]	; (23798 <z_fatal_error+0xf8>)
   23748:	f842 3f10 	str.w	r3, [r2, #16]!
   2374c:	2300      	movs	r3, #0
   2374e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   23752:	480d      	ldr	r0, [pc, #52]	; (23788 <z_fatal_error+0xe8>)
   23754:	f7f7 fa2e 	bl	1abb4 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   23758:	4631      	mov	r1, r6
   2375a:	46cd      	mov	sp, r9
   2375c:	4628      	mov	r0, r5
   2375e:	f7fc fecf 	bl	20500 <k_sys_fatal_error_handler>
	__asm__ volatile(
   23762:	f388 8811 	msr	BASEPRI, r8
   23766:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2376a:	4620      	mov	r0, r4
   2376c:	f7f8 fbb4 	bl	1bed8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   23770:	3718      	adds	r7, #24
   23772:	46bd      	mov	sp, r7
   23774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23778:	00029328 	.word	0x00029328
   2377c:	0002b0d6 	.word	0x0002b0d6
   23780:	0002b0ec 	.word	0x0002b0ec
   23784:	01000005 	.word	0x01000005
   23788:	00028d00 	.word	0x00028d00
   2378c:	0002b114 	.word	0x0002b114
   23790:	0002b0e4 	.word	0x0002b0e4
   23794:	0002b135 	.word	0x0002b135
   23798:	01000004 	.word	0x01000004

0002379c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2379c:	4b0f      	ldr	r3, [pc, #60]	; (237dc <z_sys_init_run_level+0x40>)
{
   2379e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   237a0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   237a4:	3001      	adds	r0, #1
   237a6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   237aa:	42a6      	cmp	r6, r4
   237ac:	d800      	bhi.n	237b0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   237ae:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   237b0:	e9d4 3500 	ldrd	r3, r5, [r4]
   237b4:	4628      	mov	r0, r5
   237b6:	4798      	blx	r3
		if (dev != NULL) {
   237b8:	b16d      	cbz	r5, 237d6 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   237ba:	b138      	cbz	r0, 237cc <z_sys_init_run_level+0x30>
				if (rc < 0) {
   237bc:	2800      	cmp	r0, #0
   237be:	bfb8      	it	lt
   237c0:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   237c2:	28ff      	cmp	r0, #255	; 0xff
   237c4:	bfa8      	it	ge
   237c6:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   237c8:	68eb      	ldr	r3, [r5, #12]
   237ca:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   237cc:	68ea      	ldr	r2, [r5, #12]
   237ce:	7853      	ldrb	r3, [r2, #1]
   237d0:	f043 0301 	orr.w	r3, r3, #1
   237d4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   237d6:	3408      	adds	r4, #8
   237d8:	e7e7      	b.n	237aa <z_sys_init_run_level+0xe>
   237da:	bf00      	nop
   237dc:	0002933c 	.word	0x0002933c

000237e0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   237e0:	2201      	movs	r2, #1
{
   237e2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   237e4:	4b09      	ldr	r3, [pc, #36]	; (2380c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   237e6:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   237e8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   237ea:	f7ff ffd7 	bl	2379c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   237ee:	f001 f9cf 	bl	24b90 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   237f2:	2004      	movs	r0, #4
   237f4:	f7ff ffd2 	bl	2379c <z_sys_init_run_level>

	z_init_static_threads();
   237f8:	f000 f92c 	bl	23a54 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   237fc:	f7f5 fd8a 	bl	19314 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   23800:	4a03      	ldr	r2, [pc, #12]	; (23810 <bg_thread_main+0x30>)
   23802:	7b13      	ldrb	r3, [r2, #12]
   23804:	f023 0301 	bic.w	r3, r3, #1
   23808:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2380a:	bd08      	pop	{r3, pc}
   2380c:	2000ddf2 	.word	0x2000ddf2
   23810:	2000cf10 	.word	0x2000cf10

00023814 <z_bss_zero>:
{
   23814:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   23816:	4803      	ldr	r0, [pc, #12]	; (23824 <z_bss_zero+0x10>)
   23818:	4a03      	ldr	r2, [pc, #12]	; (23828 <z_bss_zero+0x14>)
   2381a:	2100      	movs	r1, #0
   2381c:	1a12      	subs	r2, r2, r0
   2381e:	f004 fa8d 	bl	27d3c <z_early_memset>
}
   23822:	bd08      	pop	{r3, pc}
   23824:	2000c938 	.word	0x2000c938
   23828:	2000ddf4 	.word	0x2000ddf4

0002382c <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   2382c:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   2382e:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   23830:	4e13      	ldr	r6, [pc, #76]	; (23880 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   23832:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   23834:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   23838:	2300      	movs	r3, #0
{
   2383a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   2383c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   23840:	220f      	movs	r2, #15
   23842:	9301      	str	r3, [sp, #4]
   23844:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   23848:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   2384a:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2384e:	4d0d      	ldr	r5, [pc, #52]	; (23884 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   23850:	490d      	ldr	r1, [pc, #52]	; (23888 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   23852:	fb03 5500 	mla	r5, r3, r0, r5
{
   23856:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   23858:	fb02 1100 	mla	r1, r2, r0, r1
   2385c:	4b0b      	ldr	r3, [pc, #44]	; (2388c <z_init_cpu+0x60>)
   2385e:	4630      	mov	r0, r6
   23860:	9500      	str	r5, [sp, #0]
   23862:	f000 f89b 	bl	2399c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23866:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   23868:	752c      	strb	r4, [r5, #20]
   2386a:	f023 0304 	bic.w	r3, r3, #4
   2386e:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   23870:	4b07      	ldr	r3, [pc, #28]	; (23890 <z_init_cpu+0x64>)
   23872:	3401      	adds	r4, #1
   23874:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   23878:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   2387a:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   2387c:	b006      	add	sp, #24
   2387e:	bd70      	pop	{r4, r5, r6, pc}
   23880:	2000ce88 	.word	0x2000ce88
   23884:	2000d848 	.word	0x2000d848
   23888:	2000e9f8 	.word	0x2000e9f8
   2388c:	00023b0d 	.word	0x00023b0d
   23890:	2000e1f8 	.word	0x2000e1f8

00023894 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   23894:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   23896:	2000      	movs	r0, #0
{
   23898:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   2389a:	f7ff ff7f 	bl	2379c <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   2389e:	4b2f      	ldr	r3, [pc, #188]	; (2395c <z_cstart+0xc8>)
	uint32_t msp =
   238a0:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   238a4:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   238a8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   238ac:	2400      	movs	r4, #0
   238ae:	23e0      	movs	r3, #224	; 0xe0
   238b0:	4d2b      	ldr	r5, [pc, #172]	; (23960 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   238b2:	4e2c      	ldr	r6, [pc, #176]	; (23964 <z_cstart+0xd0>)
   238b4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   238b8:	77ec      	strb	r4, [r5, #31]
   238ba:	762c      	strb	r4, [r5, #24]
   238bc:	766c      	strb	r4, [r5, #25]
   238be:	76ac      	strb	r4, [r5, #26]
   238c0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   238c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   238c6:	4f28      	ldr	r7, [pc, #160]	; (23968 <z_cstart+0xd4>)
   238c8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   238cc:	626b      	str	r3, [r5, #36]	; 0x24
   238ce:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   238d2:	f7f8 fa65 	bl	1bda0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   238d6:	f7f7 fde3 	bl	1b4a0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   238da:	f04f 33ff 	mov.w	r3, #4294967295
   238de:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   238e0:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   238e2:	f7f8 fca7 	bl	1c234 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   238e6:	f7f8 fb0d 	bl	1bf04 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   238ea:	f7f6 fff7 	bl	1a8dc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   238ee:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   238f2:	ad06      	add	r5, sp, #24
   238f4:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   238f6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   238fa:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   238fe:	f001 f929 	bl	24b54 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   23902:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   23904:	f004 fa0e 	bl	27d24 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   23908:	2001      	movs	r0, #1
   2390a:	f7ff ff47 	bl	2379c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2390e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   23910:	4d16      	ldr	r5, [pc, #88]	; (2396c <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   23912:	f7ff ff43 	bl	2379c <z_sys_init_run_level>
	z_sched_init();
   23916:	f000 fdbb 	bl	24490 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2391a:	4b15      	ldr	r3, [pc, #84]	; (23970 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   2391c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2391e:	9305      	str	r3, [sp, #20]
   23920:	2301      	movs	r3, #1
   23922:	4914      	ldr	r1, [pc, #80]	; (23974 <z_cstart+0xe0>)
   23924:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   23928:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2392c:	4628      	mov	r0, r5
   2392e:	463b      	mov	r3, r7
   23930:	e9cd 4401 	strd	r4, r4, [sp, #4]
   23934:	9400      	str	r4, [sp, #0]
   23936:	f000 f831 	bl	2399c <z_setup_new_thread>
   2393a:	4606      	mov	r6, r0
   2393c:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   2393e:	4628      	mov	r0, r5
   23940:	f022 0204 	bic.w	r2, r2, #4
   23944:	736a      	strb	r2, [r5, #13]
   23946:	f004 fbbc 	bl	280c2 <z_ready_thread>
	z_init_cpu(0);
   2394a:	4620      	mov	r0, r4
   2394c:	f7ff ff6e 	bl	2382c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   23950:	463a      	mov	r2, r7
   23952:	4631      	mov	r1, r6
   23954:	4628      	mov	r0, r5
   23956:	f7f7 ff09 	bl	1b76c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2395a:	bf00      	nop
   2395c:	2000e1f8 	.word	0x2000e1f8
   23960:	e000ed00 	.word	0xe000ed00
   23964:	2000d848 	.word	0x2000d848
   23968:	000237e1 	.word	0x000237e1
   2396c:	2000cf10 	.word	0x2000cf10
   23970:	0002b197 	.word	0x0002b197
   23974:	2000eb38 	.word	0x2000eb38

00023978 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   23978:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2397a:	4c06      	ldr	r4, [pc, #24]	; (23994 <statics_init+0x1c>)
   2397c:	4d06      	ldr	r5, [pc, #24]	; (23998 <statics_init+0x20>)
   2397e:	42ac      	cmp	r4, r5
   23980:	d301      	bcc.n	23986 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   23982:	2000      	movs	r0, #0
   23984:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   23986:	4620      	mov	r0, r4
   23988:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2398c:	f004 f9da 	bl	27d44 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   23990:	3414      	adds	r4, #20
   23992:	e7f4      	b.n	2397e <statics_init+0x6>
   23994:	2000c814 	.word	0x2000c814
   23998:	2000c83c 	.word	0x2000c83c

0002399c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2399c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   239a0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   239a2:	f100 0558 	add.w	r5, r0, #88	; 0x58
   239a6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   239a8:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   239aa:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   239ae:	2500      	movs	r5, #0
{
   239b0:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   239b2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   239b4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   239b6:	e9c0 5506 	strd	r5, r5, [r0, #24]
   239ba:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   239bc:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   239be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   239c0:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   239c4:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   239c8:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   239ca:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   239cc:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   239ce:	9202      	str	r2, [sp, #8]
   239d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   239d2:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   239d6:	9201      	str	r2, [sp, #4]
   239d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   239da:	9200      	str	r2, [sp, #0]
   239dc:	4642      	mov	r2, r8
   239de:	f7f7 fea5 	bl	1b72c <arch_new_thread>
	if (!_current) {
   239e2:	4b05      	ldr	r3, [pc, #20]	; (239f8 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   239e4:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   239e6:	689b      	ldr	r3, [r3, #8]
   239e8:	b103      	cbz	r3, 239ec <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   239ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   239ec:	4640      	mov	r0, r8
   239ee:	6763      	str	r3, [r4, #116]	; 0x74
   239f0:	b004      	add	sp, #16
   239f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   239f6:	bf00      	nop
   239f8:	2000d848 	.word	0x2000d848

000239fc <z_impl_k_thread_create>:
{
   239fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   239fe:	2500      	movs	r5, #0
{
   23a00:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23a02:	9505      	str	r5, [sp, #20]
   23a04:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   23a06:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23a0a:	9504      	str	r5, [sp, #16]
   23a0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   23a0e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23a10:	9503      	str	r5, [sp, #12]
   23a12:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23a14:	9502      	str	r5, [sp, #8]
   23a16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23a18:	9501      	str	r5, [sp, #4]
   23a1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23a1c:	9500      	str	r5, [sp, #0]
   23a1e:	f7ff ffbd 	bl	2399c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   23a22:	f1b6 3fff 	cmp.w	r6, #4294967295
   23a26:	bf08      	it	eq
   23a28:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   23a2c:	d005      	beq.n	23a3a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23a2e:	ea56 0307 	orrs.w	r3, r6, r7
   23a32:	d105      	bne.n	23a40 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   23a34:	4620      	mov	r0, r4
   23a36:	f000 fcab 	bl	24390 <z_sched_start>
}
   23a3a:	4620      	mov	r0, r4
   23a3c:	b007      	add	sp, #28
   23a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23a40:	463a      	mov	r2, r7
   23a42:	4633      	mov	r3, r6
   23a44:	4902      	ldr	r1, [pc, #8]	; (23a50 <z_impl_k_thread_create+0x54>)
   23a46:	f104 0018 	add.w	r0, r4, #24
   23a4a:	f000 fea9 	bl	247a0 <z_add_timeout>
   23a4e:	e7f4      	b.n	23a3a <z_impl_k_thread_create+0x3e>
   23a50:	0002802f 	.word	0x0002802f

00023a54 <z_init_static_threads>:
{
   23a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23a58:	4c29      	ldr	r4, [pc, #164]	; (23b00 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   23a5a:	4d2a      	ldr	r5, [pc, #168]	; (23b04 <z_init_static_threads+0xb0>)
{
   23a5c:	b087      	sub	sp, #28
   23a5e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   23a60:	42ae      	cmp	r6, r5
   23a62:	f104 0430 	add.w	r4, r4, #48	; 0x30
   23a66:	d30f      	bcc.n	23a88 <z_init_static_threads+0x34>
	k_sched_lock();
   23a68:	f000 fce2 	bl	24430 <k_sched_lock>
   23a6c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   23a70:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   23a74:	4c22      	ldr	r4, [pc, #136]	; (23b00 <z_init_static_threads+0xac>)
   23a76:	f8df 9090 	ldr.w	r9, [pc, #144]	; 23b08 <z_init_static_threads+0xb4>
   23a7a:	42ac      	cmp	r4, r5
   23a7c:	d320      	bcc.n	23ac0 <z_init_static_threads+0x6c>
}
   23a7e:	b007      	add	sp, #28
   23a80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   23a84:	f000 bce8 	b.w	24458 <k_sched_unlock>
		z_setup_new_thread(
   23a88:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23a8c:	9305      	str	r3, [sp, #20]
   23a8e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   23a92:	9304      	str	r3, [sp, #16]
   23a94:	f854 3c14 	ldr.w	r3, [r4, #-20]
   23a98:	9303      	str	r3, [sp, #12]
   23a9a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   23a9e:	9302      	str	r3, [sp, #8]
   23aa0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   23aa4:	9301      	str	r3, [sp, #4]
   23aa6:	f854 3c20 	ldr.w	r3, [r4, #-32]
   23aaa:	9300      	str	r3, [sp, #0]
   23aac:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   23ab0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   23ab4:	f7ff ff72 	bl	2399c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   23ab8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   23abc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   23abe:	e7ce      	b.n	23a5e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   23ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23ac2:	1c5a      	adds	r2, r3, #1
   23ac4:	d00d      	beq.n	23ae2 <z_init_static_threads+0x8e>
   23ac6:	2100      	movs	r1, #0
   23ac8:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   23aca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23ace:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23ad2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   23ad6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23ada:	d104      	bne.n	23ae6 <z_init_static_threads+0x92>
	z_sched_start(thread);
   23adc:	4640      	mov	r0, r8
   23ade:	f000 fc57 	bl	24390 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   23ae2:	3430      	adds	r4, #48	; 0x30
   23ae4:	e7c9      	b.n	23a7a <z_init_static_threads+0x26>
   23ae6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23aea:	2300      	movs	r3, #0
   23aec:	f7f5 f90c 	bl	18d08 <__aeabi_uldivmod>
   23af0:	4602      	mov	r2, r0
   23af2:	460b      	mov	r3, r1
   23af4:	f108 0018 	add.w	r0, r8, #24
   23af8:	4649      	mov	r1, r9
   23afa:	f000 fe51 	bl	247a0 <z_add_timeout>
   23afe:	e7f0      	b.n	23ae2 <z_init_static_threads+0x8e>
   23b00:	00028bb0 	.word	0x00028bb0
   23b04:	00028bb0 	.word	0x00028bb0
   23b08:	0002802f 	.word	0x0002802f

00023b0c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   23b0c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   23b0e:	4c0b      	ldr	r4, [pc, #44]	; (23b3c <idle+0x30>)
   23b10:	4d0b      	ldr	r5, [pc, #44]	; (23b40 <idle+0x34>)
	__asm__ volatile(
   23b12:	f04f 0220 	mov.w	r2, #32
   23b16:	f3ef 8311 	mrs	r3, BASEPRI
   23b1a:	f382 8812 	msr	BASEPRI_MAX, r2
   23b1e:	f3bf 8f6f 	isb	sy
   23b22:	f004 fb94 	bl	2824e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   23b26:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   23b28:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   23b2a:	b913      	cbnz	r3, 23b32 <idle+0x26>
	arch_cpu_idle();
   23b2c:	f7f7 fcbe 	bl	1b4ac <arch_cpu_idle>
}
   23b30:	e7ef      	b.n	23b12 <idle+0x6>
   23b32:	f7f7 fb99 	bl	1b268 <pm_system_suspend>
   23b36:	2800      	cmp	r0, #0
   23b38:	d1eb      	bne.n	23b12 <idle+0x6>
   23b3a:	e7f7      	b.n	23b2c <idle+0x20>
   23b3c:	2000d848 	.word	0x2000d848
   23b40:	2000ddf2 	.word	0x2000ddf2

00023b44 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   23b44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23b48:	4604      	mov	r4, r0
   23b4a:	4617      	mov	r7, r2
   23b4c:	461e      	mov	r6, r3
   23b4e:	f04f 0320 	mov.w	r3, #32
   23b52:	f3ef 8811 	mrs	r8, BASEPRI
   23b56:	f383 8812 	msr	BASEPRI_MAX, r3
   23b5a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   23b5e:	68c3      	ldr	r3, [r0, #12]
   23b60:	4a33      	ldr	r2, [pc, #204]	; (23c30 <z_impl_k_mutex_lock+0xec>)
   23b62:	b17b      	cbz	r3, 23b84 <z_impl_k_mutex_lock+0x40>
   23b64:	6880      	ldr	r0, [r0, #8]
   23b66:	6891      	ldr	r1, [r2, #8]
   23b68:	4288      	cmp	r0, r1
   23b6a:	d019      	beq.n	23ba0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   23b6c:	ea57 0306 	orrs.w	r3, r7, r6
   23b70:	d118      	bne.n	23ba4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   23b72:	f388 8811 	msr	BASEPRI, r8
   23b76:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   23b7a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   23b7e:	b002      	add	sp, #8
   23b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   23b84:	6891      	ldr	r1, [r2, #8]
   23b86:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   23b8a:	3301      	adds	r3, #1
   23b8c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   23b8e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   23b90:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   23b92:	60a3      	str	r3, [r4, #8]
   23b94:	f388 8811 	msr	BASEPRI, r8
   23b98:	f3bf 8f6f 	isb	sy
		return 0;
   23b9c:	2000      	movs	r0, #0
   23b9e:	e7ee      	b.n	23b7e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   23ba0:	6921      	ldr	r1, [r4, #16]
   23ba2:	e7f2      	b.n	23b8a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   23ba4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   23ba8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   23bac:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   23bb0:	4299      	cmp	r1, r3
   23bb2:	bfa8      	it	ge
   23bb4:	4619      	movge	r1, r3
   23bb6:	4291      	cmp	r1, r2
   23bb8:	bfb8      	it	lt
   23bba:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   23bbc:	428b      	cmp	r3, r1
   23bbe:	dd2e      	ble.n	23c1e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   23bc0:	f004 f950 	bl	27e64 <adjust_owner_prio.isra.0>
   23bc4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   23bc6:	4622      	mov	r2, r4
   23bc8:	4641      	mov	r1, r8
   23bca:	e9cd 7600 	strd	r7, r6, [sp]
   23bce:	4819      	ldr	r0, [pc, #100]	; (23c34 <z_impl_k_mutex_lock+0xf0>)
   23bd0:	f000 fb68 	bl	242a4 <z_pend_curr>
	if (got_mutex == 0) {
   23bd4:	2800      	cmp	r0, #0
   23bd6:	d0e1      	beq.n	23b9c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   23bd8:	f04f 0320 	mov.w	r3, #32
   23bdc:	f3ef 8611 	mrs	r6, BASEPRI
   23be0:	f383 8812 	msr	BASEPRI_MAX, r3
   23be4:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   23be8:	68a0      	ldr	r0, [r4, #8]
   23bea:	b1d0      	cbz	r0, 23c22 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   23bec:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   23bee:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23bf0:	429c      	cmp	r4, r3
   23bf2:	d00a      	beq.n	23c0a <z_impl_k_mutex_lock+0xc6>
   23bf4:	b14b      	cbz	r3, 23c0a <z_impl_k_mutex_lock+0xc6>
   23bf6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   23bfa:	4299      	cmp	r1, r3
   23bfc:	bfa8      	it	ge
   23bfe:	4619      	movge	r1, r3
   23c00:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   23c04:	4299      	cmp	r1, r3
   23c06:	bfb8      	it	lt
   23c08:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   23c0a:	f004 f92b 	bl	27e64 <adjust_owner_prio.isra.0>
   23c0e:	b140      	cbz	r0, 23c22 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   23c10:	4631      	mov	r1, r6
   23c12:	4808      	ldr	r0, [pc, #32]	; (23c34 <z_impl_k_mutex_lock+0xf0>)
   23c14:	f000 fbaa 	bl	2436c <z_reschedule>
	return -EAGAIN;
   23c18:	f06f 000a 	mvn.w	r0, #10
   23c1c:	e7af      	b.n	23b7e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   23c1e:	2500      	movs	r5, #0
   23c20:	e7d1      	b.n	23bc6 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   23c22:	2d00      	cmp	r5, #0
   23c24:	d1f4      	bne.n	23c10 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   23c26:	f386 8811 	msr	BASEPRI, r6
   23c2a:	f3bf 8f6f 	isb	sy
   23c2e:	e7f3      	b.n	23c18 <z_impl_k_mutex_lock+0xd4>
   23c30:	2000d848 	.word	0x2000d848
   23c34:	2000ddf3 	.word	0x2000ddf3

00023c38 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   23c38:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   23c3a:	6883      	ldr	r3, [r0, #8]
{
   23c3c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   23c3e:	b36b      	cbz	r3, 23c9c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   23c40:	4a19      	ldr	r2, [pc, #100]	; (23ca8 <z_impl_k_mutex_unlock+0x70>)
   23c42:	6892      	ldr	r2, [r2, #8]
   23c44:	4293      	cmp	r3, r2
   23c46:	d12c      	bne.n	23ca2 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   23c48:	68c3      	ldr	r3, [r0, #12]
   23c4a:	2b01      	cmp	r3, #1
   23c4c:	d903      	bls.n	23c56 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   23c4e:	3b01      	subs	r3, #1
   23c50:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   23c52:	2000      	movs	r0, #0
}
   23c54:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   23c56:	f04f 0320 	mov.w	r3, #32
   23c5a:	f3ef 8511 	mrs	r5, BASEPRI
   23c5e:	f383 8812 	msr	BASEPRI_MAX, r3
   23c62:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   23c66:	6901      	ldr	r1, [r0, #16]
   23c68:	6880      	ldr	r0, [r0, #8]
   23c6a:	f004 f8fb 	bl	27e64 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   23c6e:	4620      	mov	r0, r4
   23c70:	f004 fa5e 	bl	28130 <z_unpend_first_thread>
	mutex->owner = new_owner;
   23c74:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   23c76:	b158      	cbz	r0, 23c90 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   23c78:	f990 200e 	ldrsb.w	r2, [r0, #14]
   23c7c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   23c7e:	2200      	movs	r2, #0
   23c80:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   23c82:	f004 fa1e 	bl	280c2 <z_ready_thread>
		z_reschedule(&lock, key);
   23c86:	4629      	mov	r1, r5
   23c88:	4808      	ldr	r0, [pc, #32]	; (23cac <z_impl_k_mutex_unlock+0x74>)
   23c8a:	f000 fb6f 	bl	2436c <z_reschedule>
   23c8e:	e7e0      	b.n	23c52 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   23c90:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   23c92:	f385 8811 	msr	BASEPRI, r5
   23c96:	f3bf 8f6f 	isb	sy
   23c9a:	e7da      	b.n	23c52 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   23c9c:	f06f 0015 	mvn.w	r0, #21
   23ca0:	e7d8      	b.n	23c54 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   23ca2:	f04f 30ff 	mov.w	r0, #4294967295
   23ca6:	e7d5      	b.n	23c54 <z_impl_k_mutex_unlock+0x1c>
   23ca8:	2000d848 	.word	0x2000d848
   23cac:	2000ddf3 	.word	0x2000ddf3

00023cb0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   23cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23cb2:	4611      	mov	r1, r2
	__asm__ volatile(
   23cb4:	f04f 0220 	mov.w	r2, #32
   23cb8:	f3ef 8511 	mrs	r5, BASEPRI
   23cbc:	f382 8812 	msr	BASEPRI_MAX, r2
   23cc0:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   23cc4:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   23cc6:	b19c      	cbz	r4, 23cf0 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23cc8:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23cca:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23ccc:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23cd0:	4294      	cmp	r4, r2
	list->head = node;
   23cd2:	6003      	str	r3, [r0, #0]
	list->tail = node;
   23cd4:	bf08      	it	eq
   23cd6:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   23cd8:	2101      	movs	r1, #1
   23cda:	4620      	mov	r0, r4
   23cdc:	f004 f937 	bl	27f4e <z_queue_node_peek>
   23ce0:	4604      	mov	r4, r0
	__asm__ volatile(
   23ce2:	f385 8811 	msr	BASEPRI, r5
   23ce6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   23cea:	4620      	mov	r0, r4
   23cec:	b003      	add	sp, #12
   23cee:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23cf0:	ea51 0203 	orrs.w	r2, r1, r3
   23cf4:	d0f5      	beq.n	23ce2 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23cf6:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   23cfa:	e9cd 1300 	strd	r1, r3, [sp]
   23cfe:	4610      	mov	r0, r2
   23d00:	4629      	mov	r1, r5
   23d02:	f000 facf 	bl	242a4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   23d06:	2800      	cmp	r0, #0
   23d08:	d1ef      	bne.n	23cea <z_impl_k_queue_get+0x3a>
   23d0a:	4b02      	ldr	r3, [pc, #8]	; (23d14 <z_impl_k_queue_get+0x64>)
   23d0c:	689b      	ldr	r3, [r3, #8]
   23d0e:	695c      	ldr	r4, [r3, #20]
   23d10:	e7eb      	b.n	23cea <z_impl_k_queue_get+0x3a>
   23d12:	bf00      	nop
   23d14:	2000d848 	.word	0x2000d848

00023d18 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   23d18:	b538      	push	{r3, r4, r5, lr}
   23d1a:	4604      	mov	r4, r0
	__asm__ volatile(
   23d1c:	f04f 0320 	mov.w	r3, #32
   23d20:	f3ef 8511 	mrs	r5, BASEPRI
   23d24:	f383 8812 	msr	BASEPRI_MAX, r3
   23d28:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   23d2c:	f004 fa00 	bl	28130 <z_unpend_first_thread>

	if (thread != NULL) {
   23d30:	b148      	cbz	r0, 23d46 <z_impl_k_sem_give+0x2e>
   23d32:	2200      	movs	r2, #0
   23d34:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   23d36:	f004 f9c4 	bl	280c2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   23d3a:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   23d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   23d40:	4807      	ldr	r0, [pc, #28]	; (23d60 <z_impl_k_sem_give+0x48>)
   23d42:	f000 bb13 	b.w	2436c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   23d46:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   23d4a:	429a      	cmp	r2, r3
   23d4c:	bf18      	it	ne
   23d4e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   23d50:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   23d52:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   23d54:	f104 0010 	add.w	r0, r4, #16
   23d58:	f004 fb63 	bl	28422 <z_handle_obj_poll_events>
}
   23d5c:	e7ed      	b.n	23d3a <z_impl_k_sem_give+0x22>
   23d5e:	bf00      	nop
   23d60:	2000ddf3 	.word	0x2000ddf3

00023d64 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   23d64:	b513      	push	{r0, r1, r4, lr}
   23d66:	f04f 0420 	mov.w	r4, #32
   23d6a:	f3ef 8111 	mrs	r1, BASEPRI
   23d6e:	f384 8812 	msr	BASEPRI_MAX, r4
   23d72:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   23d76:	6884      	ldr	r4, [r0, #8]
   23d78:	b144      	cbz	r4, 23d8c <z_impl_k_sem_take+0x28>
		sem->count--;
   23d7a:	3c01      	subs	r4, #1
   23d7c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   23d7e:	f381 8811 	msr	BASEPRI, r1
   23d82:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   23d86:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   23d88:	b002      	add	sp, #8
   23d8a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23d8c:	ea52 0403 	orrs.w	r4, r2, r3
   23d90:	d106      	bne.n	23da0 <z_impl_k_sem_take+0x3c>
   23d92:	f381 8811 	msr	BASEPRI, r1
   23d96:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   23d9a:	f06f 000f 	mvn.w	r0, #15
   23d9e:	e7f3      	b.n	23d88 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   23da0:	e9cd 2300 	strd	r2, r3, [sp]
   23da4:	4602      	mov	r2, r0
   23da6:	4802      	ldr	r0, [pc, #8]	; (23db0 <z_impl_k_sem_take+0x4c>)
   23da8:	f000 fa7c 	bl	242a4 <z_pend_curr>
	return ret;
   23dac:	e7ec      	b.n	23d88 <z_impl_k_sem_take+0x24>
   23dae:	bf00      	nop
   23db0:	2000ddf3 	.word	0x2000ddf3

00023db4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   23db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23db8:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   23dba:	f04f 38ff 	mov.w	r8, #4294967295
   23dbe:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
   23dc2:	4e48      	ldr	r6, [pc, #288]	; (23ee4 <work_queue_main+0x130>)
{
   23dc4:	b085      	sub	sp, #20
	__asm__ volatile(
   23dc6:	f04f 0320 	mov.w	r3, #32
   23dca:	f3ef 8711 	mrs	r7, BASEPRI
   23dce:	f383 8812 	msr	BASEPRI_MAX, r3
   23dd2:	f3bf 8f6f 	isb	sy
   23dd6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   23dda:	b98d      	cbnz	r5, 23e00 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   23ddc:	2102      	movs	r1, #2
   23dde:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   23de2:	f004 f8db 	bl	27f9c <flag_test_and_clear>
   23de6:	2800      	cmp	r0, #0
   23de8:	d143      	bne.n	23e72 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   23dea:	2300      	movs	r3, #0
   23dec:	4639      	mov	r1, r7
   23dee:	e9cd 8900 	strd	r8, r9, [sp]
   23df2:	9302      	str	r3, [sp, #8]
   23df4:	f104 0290 	add.w	r2, r4, #144	; 0x90
   23df8:	483b      	ldr	r0, [pc, #236]	; (23ee8 <work_queue_main+0x134>)
   23dfa:	f000 fc57 	bl	246ac <z_sched_wait>
			continue;
   23dfe:	e7e2      	b.n	23dc6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23e00:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   23e04:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23e06:	4295      	cmp	r5, r2
	list->head = node;
   23e08:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	list->tail = node;
   23e0c:	bf08      	it	eq
   23e0e:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	*flagp |= BIT(bit);
   23e12:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   23e16:	f043 0302 	orr.w	r3, r3, #2
   23e1a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   23e1e:	68eb      	ldr	r3, [r5, #12]
   23e20:	f023 0304 	bic.w	r3, r3, #4
   23e24:	f043 0301 	orr.w	r3, r3, #1
   23e28:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   23e2a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   23e2c:	f387 8811 	msr	BASEPRI, r7
   23e30:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   23e34:	4628      	mov	r0, r5
   23e36:	4798      	blx	r3
	__asm__ volatile(
   23e38:	f04f 0320 	mov.w	r3, #32
   23e3c:	f3ef 8b11 	mrs	fp, BASEPRI
   23e40:	f383 8812 	msr	BASEPRI_MAX, r3
   23e44:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   23e48:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23e4a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   23e4c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23e50:	d419      	bmi.n	23e86 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   23e52:	60ea      	str	r2, [r5, #12]
   23e54:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   23e58:	f023 0302 	bic.w	r3, r3, #2
   23e5c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	__asm__ volatile(
   23e60:	f38b 8811 	msr	BASEPRI, fp
   23e64:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   23e68:	05db      	lsls	r3, r3, #23
   23e6a:	d4ac      	bmi.n	23dc6 <work_queue_main+0x12>
	z_impl_k_yield();
   23e6c:	f000 fb1c 	bl	244a8 <z_impl_k_yield>
}
   23e70:	e7a9      	b.n	23dc6 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   23e72:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   23e76:	2200      	movs	r2, #0
   23e78:	2101      	movs	r1, #1
   23e7a:	4628      	mov	r0, r5
   23e7c:	f004 f9ae 	bl	281dc <z_sched_wake>
   23e80:	2800      	cmp	r0, #0
   23e82:	d1f8      	bne.n	23e76 <work_queue_main+0xc2>
   23e84:	e7b1      	b.n	23dea <work_queue_main+0x36>
	return list->head;
   23e86:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   23e88:	f023 0303 	bic.w	r3, r3, #3
   23e8c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   23e8e:	2800      	cmp	r0, #0
   23e90:	d0e0      	beq.n	23e54 <work_queue_main+0xa0>
	return node->next;
   23e92:	2700      	movs	r7, #0
	parent->next = child;
   23e94:	463b      	mov	r3, r7
	return node->next;
   23e96:	f8d0 a000 	ldr.w	sl, [r0]
   23e9a:	2800      	cmp	r0, #0
   23e9c:	d0da      	beq.n	23e54 <work_queue_main+0xa0>
		if (wc->work == work) {
   23e9e:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   23ea0:	4601      	mov	r1, r0
		if (wc->work == work) {
   23ea2:	4295      	cmp	r5, r2
   23ea4:	d10c      	bne.n	23ec0 <work_queue_main+0x10c>
   23ea6:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   23ea8:	b99f      	cbnz	r7, 23ed2 <work_queue_main+0x11e>
   23eaa:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   23eac:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   23eae:	4282      	cmp	r2, r0
   23eb0:	d100      	bne.n	23eb4 <work_queue_main+0x100>
	list->tail = node;
   23eb2:	6071      	str	r1, [r6, #4]
	parent->next = child;
   23eb4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   23eb8:	f7ff ff2e 	bl	23d18 <z_impl_k_sem_give>
}
   23ebc:	4639      	mov	r1, r7
   23ebe:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   23ec0:	f1ba 0f00 	cmp.w	sl, #0
   23ec4:	d00b      	beq.n	23ede <work_queue_main+0x12a>
	return node->next;
   23ec6:	f8da 2000 	ldr.w	r2, [sl]
   23eca:	4650      	mov	r0, sl
   23ecc:	460f      	mov	r7, r1
   23ece:	4692      	mov	sl, r2
   23ed0:	e7e3      	b.n	23e9a <work_queue_main+0xe6>
	parent->next = child;
   23ed2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   23ed4:	6872      	ldr	r2, [r6, #4]
   23ed6:	4282      	cmp	r2, r0
	list->tail = node;
   23ed8:	bf08      	it	eq
   23eda:	6077      	streq	r7, [r6, #4]
}
   23edc:	e7ea      	b.n	23eb4 <work_queue_main+0x100>
   23ede:	4652      	mov	r2, sl
   23ee0:	e7f3      	b.n	23eca <work_queue_main+0x116>
   23ee2:	bf00      	nop
   23ee4:	2000d870 	.word	0x2000d870
   23ee8:	2000ddf3 	.word	0x2000ddf3

00023eec <submit_to_queue_locked>:
{
   23eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   23eee:	68c3      	ldr	r3, [r0, #12]
{
   23ef0:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23ef2:	079a      	lsls	r2, r3, #30
{
   23ef4:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23ef6:	f3c3 0640 	ubfx	r6, r3, #1, #1
   23efa:	d42c      	bmi.n	23f56 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   23efc:	075b      	lsls	r3, r3, #29
   23efe:	d41a      	bmi.n	23f36 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   23f00:	680b      	ldr	r3, [r1, #0]
   23f02:	b90b      	cbnz	r3, 23f08 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   23f04:	6883      	ldr	r3, [r0, #8]
   23f06:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   23f08:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   23f0a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   23f0c:	bf42      	ittt	mi
   23f0e:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   23f10:	2602      	movmi	r6, #2
			*queuep = work->queue;
   23f12:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   23f14:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   23f16:	bf58      	it	pl
   23f18:	2601      	movpl	r6, #1
	if (queue == NULL) {
   23f1a:	2d00      	cmp	r5, #0
   23f1c:	d03a      	beq.n	23f94 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   23f1e:	4b1f      	ldr	r3, [pc, #124]	; (23f9c <submit_to_queue_locked+0xb0>)
   23f20:	689b      	ldr	r3, [r3, #8]
   23f22:	42ab      	cmp	r3, r5
   23f24:	d00a      	beq.n	23f3c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   23f26:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   23f2a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   23f2c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   23f30:	d414      	bmi.n	23f5c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   23f32:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   23f36:	2300      	movs	r3, #0
   23f38:	603b      	str	r3, [r7, #0]
	return ret;
   23f3a:	e025      	b.n	23f88 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   23f3c:	f003 ff7e 	bl	27e3c <k_is_in_isr>
   23f40:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   23f44:	2800      	cmp	r0, #0
   23f46:	d1f0      	bne.n	23f2a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   23f48:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   23f4a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   23f4e:	d5f0      	bpl.n	23f32 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   23f50:	b152      	cbz	r2, 23f68 <submit_to_queue_locked+0x7c>
   23f52:	075b      	lsls	r3, r3, #29
   23f54:	d408      	bmi.n	23f68 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   23f56:	f06f 060f 	mvn.w	r6, #15
   23f5a:	e7ec      	b.n	23f36 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   23f5c:	2a00      	cmp	r2, #0
   23f5e:	d1fa      	bne.n	23f56 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   23f60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   23f64:	2b00      	cmp	r3, #0
   23f66:	d1f6      	bne.n	23f56 <submit_to_queue_locked+0x6a>
	parent->next = child;
   23f68:	2300      	movs	r3, #0
   23f6a:	6023      	str	r3, [r4, #0]
	return list->tail;
   23f6c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   23f70:	b963      	cbnz	r3, 23f8c <submit_to_queue_locked+0xa0>
	list->head = node;
   23f72:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   23f76:	4628      	mov	r0, r5
   23f78:	f004 f81b 	bl	27fb2 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   23f7c:	68e3      	ldr	r3, [r4, #12]
   23f7e:	f043 0304 	orr.w	r3, r3, #4
   23f82:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   23f84:	683b      	ldr	r3, [r7, #0]
   23f86:	60a3      	str	r3, [r4, #8]
}
   23f88:	4630      	mov	r0, r6
   23f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   23f8c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23f8e:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   23f92:	e7f0      	b.n	23f76 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   23f94:	f06f 0615 	mvn.w	r6, #21
   23f98:	e7cd      	b.n	23f36 <submit_to_queue_locked+0x4a>
   23f9a:	bf00      	nop
   23f9c:	2000d848 	.word	0x2000d848

00023fa0 <k_work_submit>:
{
   23fa0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   23fa2:	4801      	ldr	r0, [pc, #4]	; (23fa8 <k_work_submit+0x8>)
   23fa4:	f004 b820 	b.w	27fe8 <k_work_submit_to_queue>
   23fa8:	2000cfa0 	.word	0x2000cfa0

00023fac <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   23fac:	b5f0      	push	{r4, r5, r6, r7, lr}
   23fae:	4604      	mov	r4, r0
	list->head = NULL;
   23fb0:	2000      	movs	r0, #0
   23fb2:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   23fb4:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   23fb8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23fba:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   23fbe:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   23fc2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   23fc6:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   23fca:	b31d      	cbz	r5, 24014 <k_work_queue_start+0x68>
   23fcc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   23fce:	2800      	cmp	r0, #0
   23fd0:	f240 1001 	movw	r0, #257	; 0x101
   23fd4:	bf08      	it	eq
   23fd6:	2001      	moveq	r0, #1
	*flagp = flags;
   23fd8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23fdc:	2000      	movs	r0, #0
   23fde:	f04f 36ff 	mov.w	r6, #4294967295
   23fe2:	f04f 37ff 	mov.w	r7, #4294967295
   23fe6:	e9cd 3003 	strd	r3, r0, [sp, #12]
   23fea:	e9cd 0001 	strd	r0, r0, [sp, #4]
   23fee:	e9cd 6706 	strd	r6, r7, [sp, #24]
   23ff2:	4620      	mov	r0, r4
   23ff4:	4b08      	ldr	r3, [pc, #32]	; (24018 <k_work_queue_start+0x6c>)
   23ff6:	9400      	str	r4, [sp, #0]
   23ff8:	f7ff fd00 	bl	239fc <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   23ffc:	b125      	cbz	r5, 24008 <k_work_queue_start+0x5c>
   23ffe:	6829      	ldr	r1, [r5, #0]
   24000:	b111      	cbz	r1, 24008 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   24002:	4620      	mov	r0, r4
   24004:	f003 ff20 	bl	27e48 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   24008:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   2400a:	b009      	add	sp, #36	; 0x24
   2400c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   24010:	f003 bf1f 	b.w	27e52 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   24014:	2001      	movs	r0, #1
   24016:	e7df      	b.n	23fd8 <k_work_queue_start+0x2c>
   24018:	00023db5 	.word	0x00023db5

0002401c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   2401c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   2401e:	4d07      	ldr	r5, [pc, #28]	; (2403c <z_reset_time_slice+0x20>)
   24020:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   24022:	b154      	cbz	r4, 2403a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   24024:	f7f9 fcfa 	bl	1da1c <sys_clock_elapsed>
   24028:	4b05      	ldr	r3, [pc, #20]	; (24040 <z_reset_time_slice+0x24>)
   2402a:	4404      	add	r4, r0
   2402c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   2402e:	6828      	ldr	r0, [r5, #0]
   24030:	2100      	movs	r1, #0
	}
}
   24032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   24036:	f004 b91a 	b.w	2826e <z_set_timeout_expiry>
}
   2403a:	bd38      	pop	{r3, r4, r5, pc}
   2403c:	2000d880 	.word	0x2000d880
   24040:	2000d848 	.word	0x2000d848

00024044 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   24044:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   24046:	4d0d      	ldr	r5, [pc, #52]	; (2407c <update_cache+0x38>)
   24048:	462b      	mov	r3, r5
   2404a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2404e:	429c      	cmp	r4, r3
   24050:	d000      	beq.n	24054 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   24052:	b904      	cbnz	r4, 24056 <update_cache+0x12>
   24054:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   24056:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   24058:	b938      	cbnz	r0, 2406a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   2405a:	7b5a      	ldrb	r2, [r3, #13]
   2405c:	06d2      	lsls	r2, r2, #27
   2405e:	d104      	bne.n	2406a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   24060:	69a2      	ldr	r2, [r4, #24]
   24062:	b912      	cbnz	r2, 2406a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   24064:	89da      	ldrh	r2, [r3, #14]
   24066:	2a7f      	cmp	r2, #127	; 0x7f
   24068:	d805      	bhi.n	24076 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   2406a:	429c      	cmp	r4, r3
   2406c:	d002      	beq.n	24074 <update_cache+0x30>
			z_reset_time_slice(thread);
   2406e:	4620      	mov	r0, r4
   24070:	f7ff ffd4 	bl	2401c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   24074:	4623      	mov	r3, r4
   24076:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   24078:	bd38      	pop	{r3, r4, r5, pc}
   2407a:	bf00      	nop
   2407c:	2000d848 	.word	0x2000d848

00024080 <move_thread_to_end_of_prio_q>:
{
   24080:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   24082:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   24086:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   24088:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   2408a:	7b43      	ldrb	r3, [r0, #13]
   2408c:	da04      	bge.n	24098 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2408e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24092:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   24094:	f003 ffb9 	bl	2800a <sys_dlist_remove>
	return list->head == list;
   24098:	4a15      	ldr	r2, [pc, #84]	; (240f0 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2409a:	7b4b      	ldrb	r3, [r1, #13]
   2409c:	4610      	mov	r0, r2
   2409e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   240a2:	734b      	strb	r3, [r1, #13]
   240a4:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   240a8:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   240aa:	4283      	cmp	r3, r0
   240ac:	bf08      	it	eq
   240ae:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   240b0:	b923      	cbnz	r3, 240bc <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   240b2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   240b6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   240b8:	6251      	str	r1, [r2, #36]	; 0x24
}
   240ba:	e00c      	b.n	240d6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   240bc:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   240c0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   240c4:	42b5      	cmp	r5, r6
   240c6:	d00e      	beq.n	240e6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   240c8:	42ae      	cmp	r6, r5
   240ca:	dd0c      	ble.n	240e6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   240cc:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   240ce:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   240d2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   240d4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   240d6:	6890      	ldr	r0, [r2, #8]
}
   240d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   240dc:	1a43      	subs	r3, r0, r1
   240de:	4258      	negs	r0, r3
   240e0:	4158      	adcs	r0, r3
   240e2:	f7ff bfaf 	b.w	24044 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   240e6:	429c      	cmp	r4, r3
   240e8:	d0e3      	beq.n	240b2 <move_thread_to_end_of_prio_q+0x32>
   240ea:	681b      	ldr	r3, [r3, #0]
   240ec:	e7e0      	b.n	240b0 <move_thread_to_end_of_prio_q+0x30>
   240ee:	bf00      	nop
   240f0:	2000d848 	.word	0x2000d848

000240f4 <ready_thread>:
{
   240f4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   240f6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   240fa:	7b42      	ldrb	r2, [r0, #13]
   240fc:	2b00      	cmp	r3, #0
   240fe:	db29      	blt.n	24154 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24100:	06d3      	lsls	r3, r2, #27
   24102:	d127      	bne.n	24154 <ready_thread+0x60>
	return node->next != NULL;
   24104:	6983      	ldr	r3, [r0, #24]
   24106:	bb2b      	cbnz	r3, 24154 <ready_thread+0x60>
	return list->head == list;
   24108:	4913      	ldr	r1, [pc, #76]	; (24158 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2410a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2410e:	7342      	strb	r2, [r0, #13]
   24110:	460a      	mov	r2, r1
   24112:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24116:	4294      	cmp	r4, r2
   24118:	bf18      	it	ne
   2411a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   2411c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2411e:	b923      	cbnz	r3, 2412a <ready_thread+0x36>
	node->prev = tail;
   24120:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   24124:	6020      	str	r0, [r4, #0]
	list->tail = node;
   24126:	6248      	str	r0, [r1, #36]	; 0x24
}
   24128:	e00c      	b.n	24144 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   2412a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2412e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   24132:	42b5      	cmp	r5, r6
   24134:	d00a      	beq.n	2414c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   24136:	42ae      	cmp	r6, r5
   24138:	dd08      	ble.n	2414c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   2413a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2413c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   24140:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   24142:	6058      	str	r0, [r3, #4]
		update_cache(0);
   24144:	2000      	movs	r0, #0
}
   24146:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   24148:	f7ff bf7c 	b.w	24044 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2414c:	42a3      	cmp	r3, r4
   2414e:	d0e7      	beq.n	24120 <ready_thread+0x2c>
   24150:	681b      	ldr	r3, [r3, #0]
   24152:	e7e4      	b.n	2411e <ready_thread+0x2a>
}
   24154:	bc70      	pop	{r4, r5, r6}
   24156:	4770      	bx	lr
   24158:	2000d848 	.word	0x2000d848

0002415c <unready_thread>:
{
   2415c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   2415e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   24162:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   24164:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   24166:	7b43      	ldrb	r3, [r0, #13]
   24168:	da04      	bge.n	24174 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2416a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2416e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24170:	f003 ff4b 	bl	2800a <sys_dlist_remove>
	update_cache(thread == _current);
   24174:	4b04      	ldr	r3, [pc, #16]	; (24188 <unready_thread+0x2c>)
   24176:	6898      	ldr	r0, [r3, #8]
   24178:	1a43      	subs	r3, r0, r1
   2417a:	4258      	negs	r0, r3
   2417c:	4158      	adcs	r0, r3
}
   2417e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   24182:	f7ff bf5f 	b.w	24044 <update_cache>
   24186:	bf00      	nop
   24188:	2000d848 	.word	0x2000d848

0002418c <pend_locked>:
{
   2418c:	b570      	push	{r4, r5, r6, lr}
   2418e:	4615      	mov	r5, r2
   24190:	461c      	mov	r4, r3
   24192:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   24194:	f003 ff6d 	bl	28072 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24198:	f1b4 3fff 	cmp.w	r4, #4294967295
   2419c:	bf08      	it	eq
   2419e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   241a2:	d008      	beq.n	241b6 <pend_locked+0x2a>
   241a4:	462a      	mov	r2, r5
   241a6:	4623      	mov	r3, r4
   241a8:	f106 0018 	add.w	r0, r6, #24
   241ac:	4902      	ldr	r1, [pc, #8]	; (241b8 <pend_locked+0x2c>)
}
   241ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   241b2:	f000 baf5 	b.w	247a0 <z_add_timeout>
   241b6:	bd70      	pop	{r4, r5, r6, pc}
   241b8:	0002802f 	.word	0x0002802f

000241bc <k_sched_time_slice_set>:
{
   241bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   241be:	4604      	mov	r4, r0
   241c0:	460d      	mov	r5, r1
	__asm__ volatile(
   241c2:	f04f 0320 	mov.w	r3, #32
   241c6:	f3ef 8711 	mrs	r7, BASEPRI
   241ca:	f383 8812 	msr	BASEPRI_MAX, r3
   241ce:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   241d2:	2600      	movs	r6, #0
   241d4:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   241d8:	f240 30e7 	movw	r0, #999	; 0x3e7
   241dc:	4631      	mov	r1, r6
   241de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   241e2:	2300      	movs	r3, #0
   241e4:	fbe4 010c 	umlal	r0, r1, r4, ip
   241e8:	f7f4 fd8e 	bl	18d08 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   241ec:	42b4      	cmp	r4, r6
   241ee:	dd02      	ble.n	241f6 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   241f0:	2802      	cmp	r0, #2
   241f2:	bfb8      	it	lt
   241f4:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   241f6:	4a07      	ldr	r2, [pc, #28]	; (24214 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   241f8:	4b07      	ldr	r3, [pc, #28]	; (24218 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   241fa:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   241fc:	4a07      	ldr	r2, [pc, #28]	; (2421c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   241fe:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   24200:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   24202:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   24204:	f7ff ff0a 	bl	2401c <z_reset_time_slice>
	__asm__ volatile(
   24208:	f387 8811 	msr	BASEPRI, r7
   2420c:	f3bf 8f6f 	isb	sy
}
   24210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24212:	bf00      	nop
   24214:	2000d880 	.word	0x2000d880
   24218:	2000d848 	.word	0x2000d848
   2421c:	2000d87c 	.word	0x2000d87c

00024220 <z_time_slice>:
{
   24220:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24222:	f04f 0320 	mov.w	r3, #32
   24226:	f3ef 8511 	mrs	r5, BASEPRI
   2422a:	f383 8812 	msr	BASEPRI_MAX, r3
   2422e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   24232:	4b17      	ldr	r3, [pc, #92]	; (24290 <z_time_slice+0x70>)
   24234:	4a17      	ldr	r2, [pc, #92]	; (24294 <z_time_slice+0x74>)
   24236:	689c      	ldr	r4, [r3, #8]
   24238:	6811      	ldr	r1, [r2, #0]
   2423a:	428c      	cmp	r4, r1
   2423c:	d107      	bne.n	2424e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   2423e:	4620      	mov	r0, r4
   24240:	f7ff feec 	bl	2401c <z_reset_time_slice>
	__asm__ volatile(
   24244:	f385 8811 	msr	BASEPRI, r5
   24248:	f3bf 8f6f 	isb	sy
}
   2424c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   2424e:	2100      	movs	r1, #0
   24250:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   24252:	4a11      	ldr	r2, [pc, #68]	; (24298 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   24254:	6812      	ldr	r2, [r2, #0]
   24256:	b1c2      	cbz	r2, 2428a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   24258:	89e2      	ldrh	r2, [r4, #14]
   2425a:	2a7f      	cmp	r2, #127	; 0x7f
   2425c:	d815      	bhi.n	2428a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   2425e:	7b62      	ldrb	r2, [r4, #13]
   24260:	06d2      	lsls	r2, r2, #27
   24262:	d112      	bne.n	2428a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   24264:	4a0d      	ldr	r2, [pc, #52]	; (2429c <z_time_slice+0x7c>)
   24266:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2426a:	6812      	ldr	r2, [r2, #0]
   2426c:	4291      	cmp	r1, r2
   2426e:	db0c      	blt.n	2428a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   24270:	4a0b      	ldr	r2, [pc, #44]	; (242a0 <z_time_slice+0x80>)
   24272:	4294      	cmp	r4, r2
   24274:	d009      	beq.n	2428a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   24276:	691a      	ldr	r2, [r3, #16]
   24278:	4282      	cmp	r2, r0
   2427a:	dc03      	bgt.n	24284 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   2427c:	4620      	mov	r0, r4
   2427e:	f7ff feff 	bl	24080 <move_thread_to_end_of_prio_q>
   24282:	e7dc      	b.n	2423e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   24284:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   24286:	611a      	str	r2, [r3, #16]
   24288:	e7dc      	b.n	24244 <z_time_slice+0x24>
   2428a:	2200      	movs	r2, #0
   2428c:	e7fb      	b.n	24286 <z_time_slice+0x66>
   2428e:	bf00      	nop
   24290:	2000d848 	.word	0x2000d848
   24294:	2000d878 	.word	0x2000d878
   24298:	2000d880 	.word	0x2000d880
   2429c:	2000d87c 	.word	0x2000d87c
   242a0:	2000ce88 	.word	0x2000ce88

000242a4 <z_pend_curr>:
{
   242a4:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   242a6:	480c      	ldr	r0, [pc, #48]	; (242d8 <z_pend_curr+0x34>)
   242a8:	4d0c      	ldr	r5, [pc, #48]	; (242dc <z_pend_curr+0x38>)
   242aa:	6886      	ldr	r6, [r0, #8]
{
   242ac:	460c      	mov	r4, r1
	pending_current = _current;
   242ae:	602e      	str	r6, [r5, #0]
{
   242b0:	4611      	mov	r1, r2
   242b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   242b6:	f04f 0620 	mov.w	r6, #32
   242ba:	f3ef 8511 	mrs	r5, BASEPRI
   242be:	f386 8812 	msr	BASEPRI_MAX, r6
   242c2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   242c6:	6880      	ldr	r0, [r0, #8]
   242c8:	f7ff ff60 	bl	2418c <pend_locked>
	ret = arch_swap(key);
   242cc:	4620      	mov	r0, r4
}
   242ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   242d2:	f7f7 b9d1 	b.w	1b678 <arch_swap>
   242d6:	bf00      	nop
   242d8:	2000d848 	.word	0x2000d848
   242dc:	2000d878 	.word	0x2000d878

000242e0 <z_set_prio>:
{
   242e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   242e2:	4604      	mov	r4, r0
   242e4:	f04f 0320 	mov.w	r3, #32
   242e8:	f3ef 8611 	mrs	r6, BASEPRI
   242ec:	f383 8812 	msr	BASEPRI_MAX, r3
   242f0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   242f4:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   242f6:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   242f8:	06da      	lsls	r2, r3, #27
   242fa:	d119      	bne.n	24330 <z_set_prio+0x50>
	return node->next != NULL;
   242fc:	6985      	ldr	r5, [r0, #24]
   242fe:	b9bd      	cbnz	r5, 24330 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24304:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24306:	f003 fe80 	bl	2800a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2430a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   2430c:	4a16      	ldr	r2, [pc, #88]	; (24368 <z_set_prio+0x88>)
   2430e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   24312:	7343      	strb	r3, [r0, #13]
   24314:	4613      	mov	r3, r2
				thread->base.prio = prio;
   24316:	7381      	strb	r1, [r0, #14]
   24318:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2431c:	4298      	cmp	r0, r3
   2431e:	bf18      	it	ne
   24320:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   24322:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24324:	b95d      	cbnz	r5, 2433e <z_set_prio+0x5e>
	node->prev = tail;
   24326:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   2432a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   2432c:	6254      	str	r4, [r2, #36]	; 0x24
}
   2432e:	e011      	b.n	24354 <z_set_prio+0x74>
   24330:	2000      	movs	r0, #0
			thread->base.prio = prio;
   24332:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   24334:	f386 8811 	msr	BASEPRI, r6
   24338:	f3bf 8f6f 	isb	sy
}
   2433c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   2433e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   24342:	42b9      	cmp	r1, r7
   24344:	d00b      	beq.n	2435e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   24346:	428f      	cmp	r7, r1
   24348:	dd09      	ble.n	2435e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   2434a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   2434c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   24350:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   24352:	606c      	str	r4, [r5, #4]
			update_cache(1);
   24354:	2001      	movs	r0, #1
   24356:	f7ff fe75 	bl	24044 <update_cache>
   2435a:	2001      	movs	r0, #1
   2435c:	e7ea      	b.n	24334 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   2435e:	42a8      	cmp	r0, r5
   24360:	d0e1      	beq.n	24326 <z_set_prio+0x46>
   24362:	682d      	ldr	r5, [r5, #0]
   24364:	e7de      	b.n	24324 <z_set_prio+0x44>
   24366:	bf00      	nop
   24368:	2000d848 	.word	0x2000d848

0002436c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2436c:	b949      	cbnz	r1, 24382 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2436e:	f3ef 8005 	mrs	r0, IPSR
   24372:	b930      	cbnz	r0, 24382 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   24374:	4b05      	ldr	r3, [pc, #20]	; (2438c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   24376:	69da      	ldr	r2, [r3, #28]
   24378:	689b      	ldr	r3, [r3, #8]
   2437a:	429a      	cmp	r2, r3
   2437c:	d001      	beq.n	24382 <z_reschedule+0x16>
   2437e:	f7f7 b97b 	b.w	1b678 <arch_swap>
   24382:	f381 8811 	msr	BASEPRI, r1
   24386:	f3bf 8f6f 	isb	sy
}
   2438a:	4770      	bx	lr
   2438c:	2000d848 	.word	0x2000d848

00024390 <z_sched_start>:
{
   24390:	b510      	push	{r4, lr}
	__asm__ volatile(
   24392:	f04f 0220 	mov.w	r2, #32
   24396:	f3ef 8411 	mrs	r4, BASEPRI
   2439a:	f382 8812 	msr	BASEPRI_MAX, r2
   2439e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   243a2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   243a4:	0751      	lsls	r1, r2, #29
   243a6:	d404      	bmi.n	243b2 <z_sched_start+0x22>
	__asm__ volatile(
   243a8:	f384 8811 	msr	BASEPRI, r4
   243ac:	f3bf 8f6f 	isb	sy
}
   243b0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   243b2:	f022 0204 	bic.w	r2, r2, #4
   243b6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   243b8:	f7ff fe9c 	bl	240f4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   243bc:	4621      	mov	r1, r4
}
   243be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   243c2:	4801      	ldr	r0, [pc, #4]	; (243c8 <z_sched_start+0x38>)
   243c4:	f7ff bfd2 	b.w	2436c <z_reschedule>
   243c8:	2000ddf3 	.word	0x2000ddf3

000243cc <z_impl_k_thread_suspend>:
{
   243cc:	b570      	push	{r4, r5, r6, lr}
   243ce:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   243d0:	3018      	adds	r0, #24
   243d2:	f003 ff26 	bl	28222 <z_abort_timeout>
	__asm__ volatile(
   243d6:	f04f 0320 	mov.w	r3, #32
   243da:	f3ef 8611 	mrs	r6, BASEPRI
   243de:	f383 8812 	msr	BASEPRI_MAX, r3
   243e2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   243e6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   243ea:	7b63      	ldrb	r3, [r4, #13]
   243ec:	2a00      	cmp	r2, #0
   243ee:	da05      	bge.n	243fc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   243f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   243f4:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   243f6:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   243f8:	f003 fe07 	bl	2800a <sys_dlist_remove>
		update_cache(thread == _current);
   243fc:	4d0b      	ldr	r5, [pc, #44]	; (2442c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   243fe:	7b63      	ldrb	r3, [r4, #13]
   24400:	68a8      	ldr	r0, [r5, #8]
   24402:	f043 0310 	orr.w	r3, r3, #16
   24406:	7363      	strb	r3, [r4, #13]
   24408:	1b03      	subs	r3, r0, r4
   2440a:	4258      	negs	r0, r3
   2440c:	4158      	adcs	r0, r3
   2440e:	f7ff fe19 	bl	24044 <update_cache>
	__asm__ volatile(
   24412:	f386 8811 	msr	BASEPRI, r6
   24416:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2441a:	68ab      	ldr	r3, [r5, #8]
   2441c:	42a3      	cmp	r3, r4
   2441e:	d103      	bne.n	24428 <z_impl_k_thread_suspend+0x5c>
}
   24420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   24424:	f003 bec0 	b.w	281a8 <z_reschedule_unlocked>
}
   24428:	bd70      	pop	{r4, r5, r6, pc}
   2442a:	bf00      	nop
   2442c:	2000d848 	.word	0x2000d848

00024430 <k_sched_lock>:
	__asm__ volatile(
   24430:	f04f 0320 	mov.w	r3, #32
   24434:	f3ef 8111 	mrs	r1, BASEPRI
   24438:	f383 8812 	msr	BASEPRI_MAX, r3
   2443c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   24440:	4b04      	ldr	r3, [pc, #16]	; (24454 <k_sched_lock+0x24>)
   24442:	689a      	ldr	r2, [r3, #8]
   24444:	7bd3      	ldrb	r3, [r2, #15]
   24446:	3b01      	subs	r3, #1
   24448:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2444a:	f381 8811 	msr	BASEPRI, r1
   2444e:	f3bf 8f6f 	isb	sy
}
   24452:	4770      	bx	lr
   24454:	2000d848 	.word	0x2000d848

00024458 <k_sched_unlock>:
{
   24458:	b510      	push	{r4, lr}
	__asm__ volatile(
   2445a:	f04f 0320 	mov.w	r3, #32
   2445e:	f3ef 8411 	mrs	r4, BASEPRI
   24462:	f383 8812 	msr	BASEPRI_MAX, r3
   24466:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2446a:	4b08      	ldr	r3, [pc, #32]	; (2448c <k_sched_unlock+0x34>)
		update_cache(0);
   2446c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2446e:	689a      	ldr	r2, [r3, #8]
   24470:	7bd3      	ldrb	r3, [r2, #15]
   24472:	3301      	adds	r3, #1
   24474:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   24476:	f7ff fde5 	bl	24044 <update_cache>
	__asm__ volatile(
   2447a:	f384 8811 	msr	BASEPRI, r4
   2447e:	f3bf 8f6f 	isb	sy
}
   24482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   24486:	f003 be8f 	b.w	281a8 <z_reschedule_unlocked>
   2448a:	bf00      	nop
   2448c:	2000d848 	.word	0x2000d848

00024490 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   24490:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   24492:	4b04      	ldr	r3, [pc, #16]	; (244a4 <z_sched_init+0x14>)
   24494:	4608      	mov	r0, r1
   24496:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   2449a:	e9c3 2208 	strd	r2, r2, [r3, #32]
   2449e:	f7ff be8d 	b.w	241bc <k_sched_time_slice_set>
   244a2:	bf00      	nop
   244a4:	2000d848 	.word	0x2000d848

000244a8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   244a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   244aa:	f04f 0320 	mov.w	r3, #32
   244ae:	f3ef 8511 	mrs	r5, BASEPRI
   244b2:	f383 8812 	msr	BASEPRI_MAX, r3
   244b6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   244ba:	4919      	ldr	r1, [pc, #100]	; (24520 <z_impl_k_yield+0x78>)
   244bc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   244be:	7b43      	ldrb	r3, [r0, #13]
   244c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   244c4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   244c6:	f003 fda0 	bl	2800a <sys_dlist_remove>
	return list->head == list;
   244ca:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   244cc:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   244ce:	7b5a      	ldrb	r2, [r3, #13]
   244d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   244d4:	735a      	strb	r2, [r3, #13]
   244d6:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   244da:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   244dc:	4282      	cmp	r2, r0
   244de:	bf08      	it	eq
   244e0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   244e2:	b922      	cbnz	r2, 244ee <z_impl_k_yield+0x46>
	node->prev = tail;
   244e4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   244e8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   244ea:	624b      	str	r3, [r1, #36]	; 0x24
}
   244ec:	e00c      	b.n	24508 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   244ee:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   244f2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   244f6:	42be      	cmp	r6, r7
   244f8:	d00e      	beq.n	24518 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   244fa:	42b7      	cmp	r7, r6
   244fc:	dd0c      	ble.n	24518 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   244fe:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   24500:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   24504:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   24506:	6053      	str	r3, [r2, #4]
	update_cache(1);
   24508:	2001      	movs	r0, #1
   2450a:	f7ff fd9b 	bl	24044 <update_cache>
   2450e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   24510:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   24514:	f7f7 b8b0 	b.w	1b678 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   24518:	42a2      	cmp	r2, r4
   2451a:	d0e3      	beq.n	244e4 <z_impl_k_yield+0x3c>
   2451c:	6812      	ldr	r2, [r2, #0]
   2451e:	e7e0      	b.n	244e2 <z_impl_k_yield+0x3a>
   24520:	2000d848 	.word	0x2000d848

00024524 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   24524:	ea50 0301 	orrs.w	r3, r0, r1
{
   24528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2452c:	4605      	mov	r5, r0
   2452e:	460e      	mov	r6, r1
	if (ticks == 0) {
   24530:	d103      	bne.n	2453a <z_tick_sleep+0x16>
	z_impl_k_yield();
   24532:	f7ff ffb9 	bl	244a8 <z_impl_k_yield>
		k_yield();
		return 0;
   24536:	2000      	movs	r0, #0
   24538:	e02c      	b.n	24594 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   2453a:	1c83      	adds	r3, r0, #2
   2453c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   24540:	db2a      	blt.n	24598 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   24542:	f003 feb0 	bl	282a6 <sys_clock_tick_get_32>
   24546:	182c      	adds	r4, r5, r0
   24548:	f04f 0320 	mov.w	r3, #32
   2454c:	f3ef 8811 	mrs	r8, BASEPRI
   24550:	f383 8812 	msr	BASEPRI_MAX, r3
   24554:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   24558:	4f11      	ldr	r7, [pc, #68]	; (245a0 <z_tick_sleep+0x7c>)
   2455a:	4b12      	ldr	r3, [pc, #72]	; (245a4 <z_tick_sleep+0x80>)
   2455c:	68b8      	ldr	r0, [r7, #8]
   2455e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   24560:	f7ff fdfc 	bl	2415c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   24564:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24566:	4910      	ldr	r1, [pc, #64]	; (245a8 <z_tick_sleep+0x84>)
   24568:	462a      	mov	r2, r5
   2456a:	4633      	mov	r3, r6
   2456c:	3018      	adds	r0, #24
   2456e:	f000 f917 	bl	247a0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   24572:	68ba      	ldr	r2, [r7, #8]
   24574:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   24576:	7b53      	ldrb	r3, [r2, #13]
   24578:	f043 0310 	orr.w	r3, r3, #16
   2457c:	7353      	strb	r3, [r2, #13]
   2457e:	f7f7 f87b 	bl	1b678 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   24582:	f003 fe90 	bl	282a6 <sys_clock_tick_get_32>
   24586:	1a20      	subs	r0, r4, r0
   24588:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2458c:	2801      	cmp	r0, #1
   2458e:	f173 0300 	sbcs.w	r3, r3, #0
   24592:	dbd0      	blt.n	24536 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   24594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   24598:	f06f 0401 	mvn.w	r4, #1
   2459c:	1a24      	subs	r4, r4, r0
   2459e:	e7d3      	b.n	24548 <z_tick_sleep+0x24>
   245a0:	2000d848 	.word	0x2000d848
   245a4:	2000d878 	.word	0x2000d878
   245a8:	0002802f 	.word	0x0002802f

000245ac <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   245ac:	f1b1 3fff 	cmp.w	r1, #4294967295
   245b0:	bf08      	it	eq
   245b2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   245b6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   245b8:	d106      	bne.n	245c8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   245ba:	4b08      	ldr	r3, [pc, #32]	; (245dc <z_impl_k_sleep+0x30>)
   245bc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   245be:	f7ff ff05 	bl	243cc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   245c2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   245c6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   245c8:	f7ff ffac 	bl	24524 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   245cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   245d0:	fb80 0303 	smull	r0, r3, r0, r3
   245d4:	0bc0      	lsrs	r0, r0, #15
   245d6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   245da:	e7f4      	b.n	245c6 <z_impl_k_sleep+0x1a>
   245dc:	2000d848 	.word	0x2000d848

000245e0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   245e0:	4b01      	ldr	r3, [pc, #4]	; (245e8 <z_impl_z_current_get+0x8>)
   245e2:	6898      	ldr	r0, [r3, #8]
   245e4:	4770      	bx	lr
   245e6:	bf00      	nop
   245e8:	2000d848 	.word	0x2000d848

000245ec <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   245ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   245f0:	4604      	mov	r4, r0
   245f2:	f04f 0320 	mov.w	r3, #32
   245f6:	f3ef 8611 	mrs	r6, BASEPRI
   245fa:	f383 8812 	msr	BASEPRI_MAX, r3
   245fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   24602:	7b03      	ldrb	r3, [r0, #12]
   24604:	07d9      	lsls	r1, r3, #31
   24606:	d50b      	bpl.n	24620 <z_thread_abort+0x34>
	__asm__ volatile(
   24608:	f386 8811 	msr	BASEPRI, r6
   2460c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   24610:	4040      	eors	r0, r0
   24612:	f380 8811 	msr	BASEPRI, r0
   24616:	f04f 0004 	mov.w	r0, #4
   2461a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2461c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   24620:	7b43      	ldrb	r3, [r0, #13]
   24622:	071a      	lsls	r2, r3, #28
   24624:	d504      	bpl.n	24630 <z_thread_abort+0x44>
   24626:	f386 8811 	msr	BASEPRI, r6
   2462a:	f3bf 8f6f 	isb	sy
   2462e:	e7f5      	b.n	2461c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   24630:	f023 0220 	bic.w	r2, r3, #32
   24634:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   24638:	09d2      	lsrs	r2, r2, #7
   2463a:	d120      	bne.n	2467e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2463c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   2463e:	68a3      	ldr	r3, [r4, #8]
   24640:	b113      	cbz	r3, 24648 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   24642:	4620      	mov	r0, r4
   24644:	f003 fce9 	bl	2801a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   24648:	f104 0018 	add.w	r0, r4, #24
   2464c:	f003 fde9 	bl	28222 <z_abort_timeout>
   24650:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   24654:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   24658:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2465a:	42bd      	cmp	r5, r7
   2465c:	d000      	beq.n	24660 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2465e:	b9b5      	cbnz	r5, 2468e <z_thread_abort+0xa2>
		update_cache(1);
   24660:	2001      	movs	r0, #1
   24662:	f7ff fcef 	bl	24044 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   24666:	4b10      	ldr	r3, [pc, #64]	; (246a8 <z_thread_abort+0xbc>)
   24668:	689b      	ldr	r3, [r3, #8]
   2466a:	42a3      	cmp	r3, r4
   2466c:	d1db      	bne.n	24626 <z_thread_abort+0x3a>
   2466e:	f3ef 8305 	mrs	r3, IPSR
   24672:	2b00      	cmp	r3, #0
   24674:	d1d7      	bne.n	24626 <z_thread_abort+0x3a>
   24676:	4630      	mov	r0, r6
   24678:	f7f6 fffe 	bl	1b678 <arch_swap>
	return ret;
   2467c:	e7d3      	b.n	24626 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2467e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   24682:	f043 0308 	orr.w	r3, r3, #8
   24686:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24688:	f003 fcbf 	bl	2800a <sys_dlist_remove>
}
   2468c:	e7d7      	b.n	2463e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   2468e:	4628      	mov	r0, r5
   24690:	f003 fcc3 	bl	2801a <unpend_thread_no_timeout>
   24694:	f105 0018 	add.w	r0, r5, #24
   24698:	f003 fdc3 	bl	28222 <z_abort_timeout>
		ready_thread(thread);
   2469c:	4628      	mov	r0, r5
   2469e:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   246a2:	f7ff fd27 	bl	240f4 <ready_thread>
   246a6:	e7d7      	b.n	24658 <z_thread_abort+0x6c>
   246a8:	2000d848 	.word	0x2000d848

000246ac <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   246ac:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   246ae:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   246b2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   246b4:	e9cd 6700 	strd	r6, r7, [sp]
   246b8:	f7ff fdf4 	bl	242a4 <z_pend_curr>

	if (data != NULL) {
   246bc:	b11c      	cbz	r4, 246c6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   246be:	4b03      	ldr	r3, [pc, #12]	; (246cc <z_sched_wait+0x20>)
   246c0:	689b      	ldr	r3, [r3, #8]
   246c2:	695b      	ldr	r3, [r3, #20]
   246c4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   246c6:	b002      	add	sp, #8
   246c8:	bdd0      	pop	{r4, r6, r7, pc}
   246ca:	bf00      	nop
   246cc:	2000d848 	.word	0x2000d848

000246d0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   246d0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   246d2:	4806      	ldr	r0, [pc, #24]	; (246ec <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   246d4:	4a06      	ldr	r2, [pc, #24]	; (246f0 <z_data_copy+0x20>)
   246d6:	4907      	ldr	r1, [pc, #28]	; (246f4 <z_data_copy+0x24>)
   246d8:	1a12      	subs	r2, r2, r0
   246da:	f003 fb31 	bl	27d40 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   246de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   246e2:	4a05      	ldr	r2, [pc, #20]	; (246f8 <z_data_copy+0x28>)
   246e4:	4905      	ldr	r1, [pc, #20]	; (246fc <z_data_copy+0x2c>)
   246e6:	4806      	ldr	r0, [pc, #24]	; (24700 <z_data_copy+0x30>)
   246e8:	f003 bb2a 	b.w	27d40 <z_early_memcpy>
   246ec:	2000c580 	.word	0x2000c580
   246f0:	2000c934 	.word	0x2000c934
   246f4:	0002b33c 	.word	0x0002b33c
   246f8:	00000000 	.word	0x00000000
   246fc:	0002b324 	.word	0x0002b324
   24700:	2000c580 	.word	0x2000c580

00024704 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   24704:	4b03      	ldr	r3, [pc, #12]	; (24714 <elapsed+0x10>)
   24706:	681b      	ldr	r3, [r3, #0]
   24708:	b90b      	cbnz	r3, 2470e <elapsed+0xa>
   2470a:	f7f9 b987 	b.w	1da1c <sys_clock_elapsed>
}
   2470e:	2000      	movs	r0, #0
   24710:	4770      	bx	lr
   24712:	bf00      	nop
   24714:	2000d884 	.word	0x2000d884

00024718 <next_timeout>:

static int32_t next_timeout(void)
{
   24718:	b510      	push	{r4, lr}
	return list->head == list;
   2471a:	4b11      	ldr	r3, [pc, #68]	; (24760 <next_timeout+0x48>)
   2471c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2471e:	429c      	cmp	r4, r3
   24720:	d10a      	bne.n	24738 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   24722:	f7ff ffef 	bl	24704 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   24726:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2472a:	4b0e      	ldr	r3, [pc, #56]	; (24764 <next_timeout+0x4c>)
   2472c:	691b      	ldr	r3, [r3, #16]
   2472e:	b113      	cbz	r3, 24736 <next_timeout+0x1e>
   24730:	4298      	cmp	r0, r3
   24732:	bfa8      	it	ge
   24734:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   24736:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   24738:	f7ff ffe4 	bl	24704 <elapsed>
	if ((to == NULL) ||
   2473c:	2c00      	cmp	r4, #0
   2473e:	d0f2      	beq.n	24726 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   24740:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   24744:	1a1b      	subs	r3, r3, r0
   24746:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   2474a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2474e:	f172 0100 	sbcs.w	r1, r2, #0
   24752:	dae8      	bge.n	24726 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   24754:	2a00      	cmp	r2, #0
   24756:	bfac      	ite	ge
   24758:	4618      	movge	r0, r3
   2475a:	2000      	movlt	r0, #0
   2475c:	e7e5      	b.n	2472a <next_timeout+0x12>
   2475e:	bf00      	nop
   24760:	2000c700 	.word	0x2000c700
   24764:	2000d848 	.word	0x2000d848

00024768 <remove_timeout>:
{
   24768:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2476a:	b170      	cbz	r0, 2478a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2476c:	4b0b      	ldr	r3, [pc, #44]	; (2479c <remove_timeout+0x34>)
   2476e:	685b      	ldr	r3, [r3, #4]
   24770:	4298      	cmp	r0, r3
   24772:	d00a      	beq.n	2478a <remove_timeout+0x22>
   24774:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   24776:	b143      	cbz	r3, 2478a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   24778:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2477c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   24780:	1912      	adds	r2, r2, r4
   24782:	eb41 0105 	adc.w	r1, r1, r5
   24786:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   2478a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   2478e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24790:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24792:	2300      	movs	r3, #0
	node->prev = NULL;
   24794:	e9c0 3300 	strd	r3, r3, [r0]
}
   24798:	bd30      	pop	{r4, r5, pc}
   2479a:	bf00      	nop
   2479c:	2000c700 	.word	0x2000c700

000247a0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   247a0:	f1b3 3fff 	cmp.w	r3, #4294967295
   247a4:	bf08      	it	eq
   247a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   247aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   247ac:	4604      	mov	r4, r0
   247ae:	461d      	mov	r5, r3
   247b0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   247b2:	d061      	beq.n	24878 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   247b4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   247b6:	f04f 0320 	mov.w	r3, #32
   247ba:	f3ef 8711 	mrs	r7, BASEPRI
   247be:	f383 8812 	msr	BASEPRI_MAX, r3
   247c2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   247c6:	3201      	adds	r2, #1
   247c8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   247cc:	da24      	bge.n	24818 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   247ce:	f06f 0301 	mvn.w	r3, #1
   247d2:	492f      	ldr	r1, [pc, #188]	; (24890 <z_add_timeout+0xf0>)
   247d4:	e9d1 2000 	ldrd	r2, r0, [r1]
   247d8:	1a9b      	subs	r3, r3, r2
   247da:	f04f 32ff 	mov.w	r2, #4294967295
   247de:	eb62 0000 	sbc.w	r0, r2, r0
   247e2:	1b9e      	subs	r6, r3, r6
   247e4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   247e8:	2e01      	cmp	r6, #1
   247ea:	f170 0300 	sbcs.w	r3, r0, #0
   247ee:	da01      	bge.n	247f4 <z_add_timeout+0x54>
   247f0:	2601      	movs	r6, #1
   247f2:	2000      	movs	r0, #0
   247f4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   247f8:	4e26      	ldr	r6, [pc, #152]	; (24894 <z_add_timeout+0xf4>)
   247fa:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   247fe:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24800:	45b4      	cmp	ip, r6
   24802:	bf08      	it	eq
   24804:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   24808:	f1bc 0f00 	cmp.w	ip, #0
   2480c:	d10d      	bne.n	2482a <z_add_timeout+0x8a>
	node->prev = tail;
   2480e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   24812:	602c      	str	r4, [r5, #0]
	list->tail = node;
   24814:	6074      	str	r4, [r6, #4]
}
   24816:	e01c      	b.n	24852 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   24818:	f7ff ff74 	bl	24704 <elapsed>
   2481c:	3601      	adds	r6, #1
   2481e:	f145 0500 	adc.w	r5, r5, #0
   24822:	1836      	adds	r6, r6, r0
   24824:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   24828:	e7e4      	b.n	247f4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   2482a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   2482e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   24832:	4293      	cmp	r3, r2
   24834:	eb71 0e00 	sbcs.w	lr, r1, r0
   24838:	da1f      	bge.n	2487a <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   2483a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   2483c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   24840:	eb60 0001 	sbc.w	r0, r0, r1
   24844:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   24848:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   2484c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2484e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   24852:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24854:	42b3      	cmp	r3, r6
   24856:	d00b      	beq.n	24870 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   24858:	429c      	cmp	r4, r3
   2485a:	d109      	bne.n	24870 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2485c:	f7ff ff5c 	bl	24718 <next_timeout>

			if (next_time == 0 ||
   24860:	b118      	cbz	r0, 2486a <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   24862:	4b0d      	ldr	r3, [pc, #52]	; (24898 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   24864:	691b      	ldr	r3, [r3, #16]
   24866:	4283      	cmp	r3, r0
   24868:	d002      	beq.n	24870 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   2486a:	2100      	movs	r1, #0
   2486c:	f7f9 f8a4 	bl	1d9b8 <sys_clock_set_timeout>
	__asm__ volatile(
   24870:	f387 8811 	msr	BASEPRI, r7
   24874:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   24878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   2487a:	1a9b      	subs	r3, r3, r2
   2487c:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   24880:	45ac      	cmp	ip, r5
   24882:	e9c4 3104 	strd	r3, r1, [r4, #16]
   24886:	d0c2      	beq.n	2480e <z_add_timeout+0x6e>
   24888:	f8dc c000 	ldr.w	ip, [ip]
   2488c:	e7bc      	b.n	24808 <z_add_timeout+0x68>
   2488e:	bf00      	nop
   24890:	2000cf98 	.word	0x2000cf98
   24894:	2000c700 	.word	0x2000c700
   24898:	2000d848 	.word	0x2000d848

0002489c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   2489c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   248a0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   248a2:	f7ff fcbd 	bl	24220 <z_time_slice>
	__asm__ volatile(
   248a6:	f04f 0320 	mov.w	r3, #32
   248aa:	f3ef 8611 	mrs	r6, BASEPRI
   248ae:	f383 8812 	msr	BASEPRI_MAX, r3
   248b2:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   248b6:	4f24      	ldr	r7, [pc, #144]	; (24948 <sys_clock_announce+0xac>)
	return list->head == list;
   248b8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2494c <sys_clock_announce+0xb0>
   248bc:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   248c0:	4a23      	ldr	r2, [pc, #140]	; (24950 <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   248c2:	4540      	cmp	r0, r8
	announce_remaining = ticks;
   248c4:	603c      	str	r4, [r7, #0]
	return list->head == list;
   248c6:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   248ca:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   248ce:	d00b      	beq.n	248e8 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   248d0:	b150      	cbz	r0, 248e8 <sys_clock_announce+0x4c>
   248d2:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   248d6:	42ac      	cmp	r4, r5
   248d8:	eb71 090c 	sbcs.w	r9, r1, ip
   248dc:	da17      	bge.n	2490e <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   248de:	1b2d      	subs	r5, r5, r4
   248e0:	eb6c 0c01 	sbc.w	ip, ip, r1
   248e4:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   248e8:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   248ea:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   248ee:	eb4e 0101 	adc.w	r1, lr, r1
   248f2:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   248f6:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   248f8:	f7ff ff0e 	bl	24718 <next_timeout>
   248fc:	4621      	mov	r1, r4
   248fe:	f7f9 f85b 	bl	1d9b8 <sys_clock_set_timeout>
	__asm__ volatile(
   24902:	f386 8811 	msr	BASEPRI, r6
   24906:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2490a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   2490e:	18eb      	adds	r3, r5, r3
   24910:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   24914:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   24918:	2200      	movs	r2, #0
   2491a:	2300      	movs	r3, #0
   2491c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   24920:	f7ff ff22 	bl	24768 <remove_timeout>
   24924:	f386 8811 	msr	BASEPRI, r6
   24928:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2492c:	6883      	ldr	r3, [r0, #8]
   2492e:	4798      	blx	r3
	__asm__ volatile(
   24930:	f04f 0320 	mov.w	r3, #32
   24934:	f3ef 8611 	mrs	r6, BASEPRI
   24938:	f383 8812 	msr	BASEPRI_MAX, r3
   2493c:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   24940:	683c      	ldr	r4, [r7, #0]
   24942:	1b64      	subs	r4, r4, r5
   24944:	e7ba      	b.n	248bc <sys_clock_announce+0x20>
   24946:	bf00      	nop
   24948:	2000d884 	.word	0x2000d884
   2494c:	2000c700 	.word	0x2000c700
   24950:	2000cf98 	.word	0x2000cf98

00024954 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   24954:	b510      	push	{r4, lr}
   24956:	f04f 0320 	mov.w	r3, #32
   2495a:	f3ef 8411 	mrs	r4, BASEPRI
   2495e:	f383 8812 	msr	BASEPRI_MAX, r3
   24962:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   24966:	f7ff fecd 	bl	24704 <elapsed>
   2496a:	4603      	mov	r3, r0
   2496c:	4a05      	ldr	r2, [pc, #20]	; (24984 <sys_clock_tick_get+0x30>)
   2496e:	e9d2 0100 	ldrd	r0, r1, [r2]
   24972:	1818      	adds	r0, r3, r0
   24974:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   24978:	f384 8811 	msr	BASEPRI, r4
   2497c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   24980:	bd10      	pop	{r4, pc}
   24982:	bf00      	nop
   24984:	2000cf98 	.word	0x2000cf98

00024988 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   24988:	b570      	push	{r4, r5, r6, lr}
   2498a:	4604      	mov	r4, r0
	__asm__ volatile(
   2498c:	f04f 0320 	mov.w	r3, #32
   24990:	f3ef 8511 	mrs	r5, BASEPRI
   24994:	f383 8812 	msr	BASEPRI_MAX, r3
   24998:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2499c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   249a0:	3301      	adds	r3, #1
   249a2:	f142 0200 	adc.w	r2, r2, #0
   249a6:	2b02      	cmp	r3, #2
   249a8:	f172 0200 	sbcs.w	r2, r2, #0
   249ac:	d322      	bcc.n	249f4 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   249ae:	f003 fc7e 	bl	282ae <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   249b2:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   249b6:	3001      	adds	r0, #1
   249b8:	f141 0100 	adc.w	r1, r1, #0
   249bc:	18c0      	adds	r0, r0, r3
   249be:	eb41 0102 	adc.w	r1, r1, r2
   249c2:	2801      	cmp	r0, #1
   249c4:	f171 0100 	sbcs.w	r1, r1, #0
   249c8:	db32      	blt.n	24a30 <z_timer_expiration_handler+0xa8>
   249ca:	f003 fc70 	bl	282ae <z_impl_k_uptime_ticks>
   249ce:	3001      	adds	r0, #1
   249d0:	f141 0300 	adc.w	r3, r1, #0
   249d4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   249d8:	1880      	adds	r0, r0, r2
   249da:	f06f 0201 	mvn.w	r2, #1
   249de:	eb43 0301 	adc.w	r3, r3, r1
   249e2:	f04f 31ff 	mov.w	r1, #4294967295
   249e6:	1a12      	subs	r2, r2, r0
   249e8:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   249ec:	4620      	mov	r0, r4
   249ee:	491a      	ldr	r1, [pc, #104]	; (24a58 <z_timer_expiration_handler+0xd0>)
   249f0:	f7ff fed6 	bl	247a0 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   249f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   249f6:	3301      	adds	r3, #1
   249f8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   249fa:	6a23      	ldr	r3, [r4, #32]
   249fc:	b173      	cbz	r3, 24a1c <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   249fe:	f385 8811 	msr	BASEPRI, r5
   24a02:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   24a06:	4620      	mov	r0, r4
   24a08:	6a23      	ldr	r3, [r4, #32]
   24a0a:	4798      	blx	r3
	__asm__ volatile(
   24a0c:	f04f 0320 	mov.w	r3, #32
   24a10:	f3ef 8511 	mrs	r5, BASEPRI
   24a14:	f383 8812 	msr	BASEPRI_MAX, r3
   24a18:	f3bf 8f6f 	isb	sy
	return list->head == list;
   24a1c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24a20:	42a6      	cmp	r6, r4
   24a22:	d000      	beq.n	24a26 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   24a24:	b94e      	cbnz	r6, 24a3a <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   24a26:	f385 8811 	msr	BASEPRI, r5
   24a2a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   24a2e:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   24a30:	f06f 0201 	mvn.w	r2, #1
   24a34:	f04f 33ff 	mov.w	r3, #4294967295
   24a38:	e7d8      	b.n	249ec <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   24a3a:	4630      	mov	r0, r6
   24a3c:	f003 fb51 	bl	280e2 <z_unpend_thread_no_timeout>
   24a40:	2300      	movs	r3, #0
   24a42:	67f3      	str	r3, [r6, #124]	; 0x7c
   24a44:	f385 8811 	msr	BASEPRI, r5
   24a48:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   24a4c:	4630      	mov	r0, r6
}
   24a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   24a52:	f003 bb36 	b.w	280c2 <z_ready_thread>
   24a56:	bf00      	nop
   24a58:	00024989 	.word	0x00024989

00024a5c <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   24a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
   24a60:	bf08      	it	eq
   24a62:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   24a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24a6a:	4619      	mov	r1, r3
   24a6c:	4605      	mov	r5, r0
   24a6e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   24a72:	4614      	mov	r4, r2
   24a74:	4691      	mov	r9, r2
   24a76:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   24a78:	d037      	beq.n	24aea <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   24a7a:	f1b0 3fff 	cmp.w	r0, #4294967295
   24a7e:	bf08      	it	eq
   24a80:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   24a84:	4637      	mov	r7, r6
   24a86:	4682      	mov	sl, r0
   24a88:	d011      	beq.n	24aae <z_impl_k_timer_start+0x52>
   24a8a:	ea50 0306 	orrs.w	r3, r0, r6
   24a8e:	d00e      	beq.n	24aae <z_impl_k_timer_start+0x52>
   24a90:	1c72      	adds	r2, r6, #1
   24a92:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   24a96:	db0a      	blt.n	24aae <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   24a98:	2e02      	cmp	r6, #2
   24a9a:	4684      	mov	ip, r0
   24a9c:	f170 0000 	sbcs.w	r0, r0, #0
   24aa0:	bfbc      	itt	lt
   24aa2:	2702      	movlt	r7, #2
   24aa4:	f04f 0c00 	movlt.w	ip, #0
   24aa8:	3f01      	subs	r7, #1
   24aaa:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   24aae:	1c63      	adds	r3, r4, #1
   24ab0:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   24ab4:	db0a      	blt.n	24acc <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   24ab6:	2c01      	cmp	r4, #1
   24ab8:	f171 0300 	sbcs.w	r3, r1, #0
   24abc:	4622      	mov	r2, r4
   24abe:	bfbc      	itt	lt
   24ac0:	2201      	movlt	r2, #1
   24ac2:	2100      	movlt	r1, #0
   24ac4:	f112 39ff 	adds.w	r9, r2, #4294967295
   24ac8:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   24acc:	4628      	mov	r0, r5
   24ace:	f003 fba8 	bl	28222 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   24ad2:	2300      	movs	r3, #0
	timer->period = period;
   24ad4:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   24ad8:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24ada:	464a      	mov	r2, r9
   24adc:	4643      	mov	r3, r8
   24ade:	4628      	mov	r0, r5
		     duration);
}
   24ae0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24ae4:	4902      	ldr	r1, [pc, #8]	; (24af0 <z_impl_k_timer_start+0x94>)
   24ae6:	f7ff be5b 	b.w	247a0 <z_add_timeout>
}
   24aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24aee:	bf00      	nop
   24af0:	00024989 	.word	0x00024989

00024af4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   24af4:	b538      	push	{r3, r4, r5, lr}
   24af6:	4603      	mov	r3, r0
	__asm__ volatile(
   24af8:	f04f 0220 	mov.w	r2, #32
   24afc:	f3ef 8511 	mrs	r5, BASEPRI
   24b00:	f382 8812 	msr	BASEPRI_MAX, r2
   24b04:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   24b08:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   24b0a:	2101      	movs	r1, #1
   24b0c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   24b0e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   24b10:	4283      	cmp	r3, r0
   24b12:	d106      	bne.n	24b22 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   24b14:	f385 8811 	msr	BASEPRI, r5
   24b18:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   24b1c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   24b1e:	4620      	mov	r0, r4
   24b20:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   24b22:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24b26:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24b28:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24b2a:	2300      	movs	r3, #0
	node->prev = NULL;
   24b2c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24b30:	f003 fc0e 	bl	28350 <signal_poll_event>
	z_reschedule(&lock, key);
   24b34:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24b36:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   24b38:	4801      	ldr	r0, [pc, #4]	; (24b40 <z_impl_k_poll_signal_raise+0x4c>)
   24b3a:	f7ff fc17 	bl	2436c <z_reschedule>
	return rc;
   24b3e:	e7ee      	b.n	24b1e <z_impl_k_poll_signal_raise+0x2a>
   24b40:	2000ddf3 	.word	0x2000ddf3

00024b44 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   24b44:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   24b46:	4601      	mov	r1, r0
   24b48:	4801      	ldr	r0, [pc, #4]	; (24b50 <k_aligned_alloc+0xc>)
   24b4a:	f003 bc82 	b.w	28452 <z_heap_aligned_alloc>
   24b4e:	bf00      	nop
   24b50:	2000c814 	.word	0x2000c814

00024b54 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   24b54:	4b01      	ldr	r3, [pc, #4]	; (24b5c <k_thread_system_pool_assign+0x8>)
   24b56:	6743      	str	r3, [r0, #116]	; 0x74
}
   24b58:	4770      	bx	lr
   24b5a:	bf00      	nop
   24b5c:	2000c814 	.word	0x2000c814

00024b60 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   24b60:	b538      	push	{r3, r4, r5, lr}
   24b62:	4604      	mov	r4, r0
   24b64:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   24b66:	f003 f969 	bl	27e3c <k_is_in_isr>
   24b6a:	b920      	cbnz	r0, 24b76 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   24b6c:	4b06      	ldr	r3, [pc, #24]	; (24b88 <z_thread_aligned_alloc+0x28>)
   24b6e:	689b      	ldr	r3, [r3, #8]
   24b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   24b72:	b90b      	cbnz	r3, 24b78 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   24b74:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   24b76:	4b05      	ldr	r3, [pc, #20]	; (24b8c <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   24b78:	462a      	mov	r2, r5
   24b7a:	4621      	mov	r1, r4
   24b7c:	4618      	mov	r0, r3
}
   24b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   24b82:	f003 bc66 	b.w	28452 <z_heap_aligned_alloc>
   24b86:	bf00      	nop
   24b88:	2000d848 	.word	0x2000d848
   24b8c:	2000c814 	.word	0x2000c814

00024b90 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   24b90:	4801      	ldr	r0, [pc, #4]	; (24b98 <boot_banner+0x8>)
   24b92:	f000 bd54 	b.w	2563e <printk>
   24b96:	bf00      	nop
   24b98:	0002b19f 	.word	0x0002b19f

00024b9c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   24b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   24b9e:	2400      	movs	r4, #0
   24ba0:	4b08      	ldr	r3, [pc, #32]	; (24bc4 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   24ba2:	f44f 6290 	mov.w	r2, #1152	; 0x480
	struct k_work_queue_config cfg = {
   24ba6:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   24ba8:	ab02      	add	r3, sp, #8
   24baa:	9300      	str	r3, [sp, #0]
   24bac:	4906      	ldr	r1, [pc, #24]	; (24bc8 <k_sys_work_q_init+0x2c>)
   24bae:	f04f 33ff 	mov.w	r3, #4294967295
   24bb2:	4806      	ldr	r0, [pc, #24]	; (24bcc <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   24bb4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   24bb8:	f7ff f9f8 	bl	23fac <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   24bbc:	4620      	mov	r0, r4
   24bbe:	b004      	add	sp, #16
   24bc0:	bd10      	pop	{r4, pc}
   24bc2:	bf00      	nop
   24bc4:	0002b1cd 	.word	0x0002b1cd
   24bc8:	20010338 	.word	0x20010338
   24bcc:	2000cfa0 	.word	0x2000cfa0

00024bd0 <_free_r>:
   24bd0:	b538      	push	{r3, r4, r5, lr}
   24bd2:	4605      	mov	r5, r0
   24bd4:	2900      	cmp	r1, #0
   24bd6:	d041      	beq.n	24c5c <_free_r+0x8c>
   24bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
   24bdc:	1f0c      	subs	r4, r1, #4
   24bde:	2b00      	cmp	r3, #0
   24be0:	bfb8      	it	lt
   24be2:	18e4      	addlt	r4, r4, r3
   24be4:	f000 fa58 	bl	25098 <__malloc_lock>
   24be8:	4a1d      	ldr	r2, [pc, #116]	; (24c60 <_free_r+0x90>)
   24bea:	6813      	ldr	r3, [r2, #0]
   24bec:	b933      	cbnz	r3, 24bfc <_free_r+0x2c>
   24bee:	6063      	str	r3, [r4, #4]
   24bf0:	6014      	str	r4, [r2, #0]
   24bf2:	4628      	mov	r0, r5
   24bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24bf8:	f000 ba54 	b.w	250a4 <__malloc_unlock>
   24bfc:	42a3      	cmp	r3, r4
   24bfe:	d908      	bls.n	24c12 <_free_r+0x42>
   24c00:	6820      	ldr	r0, [r4, #0]
   24c02:	1821      	adds	r1, r4, r0
   24c04:	428b      	cmp	r3, r1
   24c06:	bf01      	itttt	eq
   24c08:	6819      	ldreq	r1, [r3, #0]
   24c0a:	685b      	ldreq	r3, [r3, #4]
   24c0c:	1809      	addeq	r1, r1, r0
   24c0e:	6021      	streq	r1, [r4, #0]
   24c10:	e7ed      	b.n	24bee <_free_r+0x1e>
   24c12:	461a      	mov	r2, r3
   24c14:	685b      	ldr	r3, [r3, #4]
   24c16:	b10b      	cbz	r3, 24c1c <_free_r+0x4c>
   24c18:	42a3      	cmp	r3, r4
   24c1a:	d9fa      	bls.n	24c12 <_free_r+0x42>
   24c1c:	6811      	ldr	r1, [r2, #0]
   24c1e:	1850      	adds	r0, r2, r1
   24c20:	42a0      	cmp	r0, r4
   24c22:	d10b      	bne.n	24c3c <_free_r+0x6c>
   24c24:	6820      	ldr	r0, [r4, #0]
   24c26:	4401      	add	r1, r0
   24c28:	1850      	adds	r0, r2, r1
   24c2a:	6011      	str	r1, [r2, #0]
   24c2c:	4283      	cmp	r3, r0
   24c2e:	d1e0      	bne.n	24bf2 <_free_r+0x22>
   24c30:	6818      	ldr	r0, [r3, #0]
   24c32:	685b      	ldr	r3, [r3, #4]
   24c34:	4408      	add	r0, r1
   24c36:	6053      	str	r3, [r2, #4]
   24c38:	6010      	str	r0, [r2, #0]
   24c3a:	e7da      	b.n	24bf2 <_free_r+0x22>
   24c3c:	d902      	bls.n	24c44 <_free_r+0x74>
   24c3e:	230c      	movs	r3, #12
   24c40:	602b      	str	r3, [r5, #0]
   24c42:	e7d6      	b.n	24bf2 <_free_r+0x22>
   24c44:	6820      	ldr	r0, [r4, #0]
   24c46:	1821      	adds	r1, r4, r0
   24c48:	428b      	cmp	r3, r1
   24c4a:	bf02      	ittt	eq
   24c4c:	6819      	ldreq	r1, [r3, #0]
   24c4e:	685b      	ldreq	r3, [r3, #4]
   24c50:	1809      	addeq	r1, r1, r0
   24c52:	6063      	str	r3, [r4, #4]
   24c54:	bf08      	it	eq
   24c56:	6021      	streq	r1, [r4, #0]
   24c58:	6054      	str	r4, [r2, #4]
   24c5a:	e7ca      	b.n	24bf2 <_free_r+0x22>
   24c5c:	bd38      	pop	{r3, r4, r5, pc}
   24c5e:	bf00      	nop
   24c60:	2000d88c 	.word	0x2000d88c

00024c64 <_malloc_r>:
   24c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24c66:	1ccd      	adds	r5, r1, #3
   24c68:	4606      	mov	r6, r0
   24c6a:	f025 0503 	bic.w	r5, r5, #3
   24c6e:	3508      	adds	r5, #8
   24c70:	2d0c      	cmp	r5, #12
   24c72:	bf38      	it	cc
   24c74:	250c      	movcc	r5, #12
   24c76:	2d00      	cmp	r5, #0
   24c78:	db01      	blt.n	24c7e <_malloc_r+0x1a>
   24c7a:	42a9      	cmp	r1, r5
   24c7c:	d903      	bls.n	24c86 <_malloc_r+0x22>
   24c7e:	230c      	movs	r3, #12
   24c80:	6033      	str	r3, [r6, #0]
   24c82:	2000      	movs	r0, #0
   24c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24c86:	f000 fa07 	bl	25098 <__malloc_lock>
   24c8a:	4921      	ldr	r1, [pc, #132]	; (24d10 <_malloc_r+0xac>)
   24c8c:	680a      	ldr	r2, [r1, #0]
   24c8e:	4614      	mov	r4, r2
   24c90:	b99c      	cbnz	r4, 24cba <_malloc_r+0x56>
   24c92:	4f20      	ldr	r7, [pc, #128]	; (24d14 <_malloc_r+0xb0>)
   24c94:	683b      	ldr	r3, [r7, #0]
   24c96:	b923      	cbnz	r3, 24ca2 <_malloc_r+0x3e>
   24c98:	4621      	mov	r1, r4
   24c9a:	4630      	mov	r0, r6
   24c9c:	f000 f83c 	bl	24d18 <_sbrk_r>
   24ca0:	6038      	str	r0, [r7, #0]
   24ca2:	4629      	mov	r1, r5
   24ca4:	4630      	mov	r0, r6
   24ca6:	f000 f837 	bl	24d18 <_sbrk_r>
   24caa:	1c43      	adds	r3, r0, #1
   24cac:	d123      	bne.n	24cf6 <_malloc_r+0x92>
   24cae:	230c      	movs	r3, #12
   24cb0:	4630      	mov	r0, r6
   24cb2:	6033      	str	r3, [r6, #0]
   24cb4:	f000 f9f6 	bl	250a4 <__malloc_unlock>
   24cb8:	e7e3      	b.n	24c82 <_malloc_r+0x1e>
   24cba:	6823      	ldr	r3, [r4, #0]
   24cbc:	1b5b      	subs	r3, r3, r5
   24cbe:	d417      	bmi.n	24cf0 <_malloc_r+0x8c>
   24cc0:	2b0b      	cmp	r3, #11
   24cc2:	d903      	bls.n	24ccc <_malloc_r+0x68>
   24cc4:	6023      	str	r3, [r4, #0]
   24cc6:	441c      	add	r4, r3
   24cc8:	6025      	str	r5, [r4, #0]
   24cca:	e004      	b.n	24cd6 <_malloc_r+0x72>
   24ccc:	6863      	ldr	r3, [r4, #4]
   24cce:	42a2      	cmp	r2, r4
   24cd0:	bf0c      	ite	eq
   24cd2:	600b      	streq	r3, [r1, #0]
   24cd4:	6053      	strne	r3, [r2, #4]
   24cd6:	4630      	mov	r0, r6
   24cd8:	f000 f9e4 	bl	250a4 <__malloc_unlock>
   24cdc:	f104 000b 	add.w	r0, r4, #11
   24ce0:	1d23      	adds	r3, r4, #4
   24ce2:	f020 0007 	bic.w	r0, r0, #7
   24ce6:	1ac2      	subs	r2, r0, r3
   24ce8:	bf1c      	itt	ne
   24cea:	1a1b      	subne	r3, r3, r0
   24cec:	50a3      	strne	r3, [r4, r2]
   24cee:	e7c9      	b.n	24c84 <_malloc_r+0x20>
   24cf0:	4622      	mov	r2, r4
   24cf2:	6864      	ldr	r4, [r4, #4]
   24cf4:	e7cc      	b.n	24c90 <_malloc_r+0x2c>
   24cf6:	1cc4      	adds	r4, r0, #3
   24cf8:	f024 0403 	bic.w	r4, r4, #3
   24cfc:	42a0      	cmp	r0, r4
   24cfe:	d0e3      	beq.n	24cc8 <_malloc_r+0x64>
   24d00:	1a21      	subs	r1, r4, r0
   24d02:	4630      	mov	r0, r6
   24d04:	f000 f808 	bl	24d18 <_sbrk_r>
   24d08:	3001      	adds	r0, #1
   24d0a:	d1dd      	bne.n	24cc8 <_malloc_r+0x64>
   24d0c:	e7cf      	b.n	24cae <_malloc_r+0x4a>
   24d0e:	bf00      	nop
   24d10:	2000d88c 	.word	0x2000d88c
   24d14:	2000d888 	.word	0x2000d888

00024d18 <_sbrk_r>:
   24d18:	b538      	push	{r3, r4, r5, lr}
   24d1a:	2300      	movs	r3, #0
   24d1c:	4d05      	ldr	r5, [pc, #20]	; (24d34 <_sbrk_r+0x1c>)
   24d1e:	4604      	mov	r4, r0
   24d20:	4608      	mov	r0, r1
   24d22:	602b      	str	r3, [r5, #0]
   24d24:	f7f7 fab2 	bl	1c28c <_sbrk>
   24d28:	1c43      	adds	r3, r0, #1
   24d2a:	d102      	bne.n	24d32 <_sbrk_r+0x1a>
   24d2c:	682b      	ldr	r3, [r5, #0]
   24d2e:	b103      	cbz	r3, 24d32 <_sbrk_r+0x1a>
   24d30:	6023      	str	r3, [r4, #0]
   24d32:	bd38      	pop	{r3, r4, r5, pc}
   24d34:	2000d890 	.word	0x2000d890

00024d38 <_strtol_l.constprop.0>:
   24d38:	2b24      	cmp	r3, #36	; 0x24
   24d3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24d3e:	4686      	mov	lr, r0
   24d40:	4690      	mov	r8, r2
   24d42:	d801      	bhi.n	24d48 <_strtol_l.constprop.0+0x10>
   24d44:	2b01      	cmp	r3, #1
   24d46:	d106      	bne.n	24d56 <_strtol_l.constprop.0+0x1e>
   24d48:	f001 fa9c 	bl	26284 <__errno>
   24d4c:	2316      	movs	r3, #22
   24d4e:	6003      	str	r3, [r0, #0]
   24d50:	2000      	movs	r0, #0
   24d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24d56:	460d      	mov	r5, r1
   24d58:	4835      	ldr	r0, [pc, #212]	; (24e30 <_strtol_l.constprop.0+0xf8>)
   24d5a:	462a      	mov	r2, r5
   24d5c:	f815 4b01 	ldrb.w	r4, [r5], #1
   24d60:	5d06      	ldrb	r6, [r0, r4]
   24d62:	f016 0608 	ands.w	r6, r6, #8
   24d66:	d1f8      	bne.n	24d5a <_strtol_l.constprop.0+0x22>
   24d68:	2c2d      	cmp	r4, #45	; 0x2d
   24d6a:	d124      	bne.n	24db6 <_strtol_l.constprop.0+0x7e>
   24d6c:	782c      	ldrb	r4, [r5, #0]
   24d6e:	2601      	movs	r6, #1
   24d70:	1c95      	adds	r5, r2, #2
   24d72:	bb2b      	cbnz	r3, 24dc0 <_strtol_l.constprop.0+0x88>
   24d74:	2c30      	cmp	r4, #48	; 0x30
   24d76:	d030      	beq.n	24dda <_strtol_l.constprop.0+0xa2>
   24d78:	230a      	movs	r3, #10
   24d7a:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   24d7e:	2200      	movs	r2, #0
   24d80:	f10c 3cff 	add.w	ip, ip, #4294967295
   24d84:	4610      	mov	r0, r2
   24d86:	fbbc f9f3 	udiv	r9, ip, r3
   24d8a:	fb03 ca19 	mls	sl, r3, r9, ip
   24d8e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   24d92:	2f09      	cmp	r7, #9
   24d94:	d828      	bhi.n	24de8 <_strtol_l.constprop.0+0xb0>
   24d96:	463c      	mov	r4, r7
   24d98:	42a3      	cmp	r3, r4
   24d9a:	dd34      	ble.n	24e06 <_strtol_l.constprop.0+0xce>
   24d9c:	1c57      	adds	r7, r2, #1
   24d9e:	d007      	beq.n	24db0 <_strtol_l.constprop.0+0x78>
   24da0:	4581      	cmp	r9, r0
   24da2:	d32d      	bcc.n	24e00 <_strtol_l.constprop.0+0xc8>
   24da4:	d101      	bne.n	24daa <_strtol_l.constprop.0+0x72>
   24da6:	45a2      	cmp	sl, r4
   24da8:	db2a      	blt.n	24e00 <_strtol_l.constprop.0+0xc8>
   24daa:	fb00 4003 	mla	r0, r0, r3, r4
   24dae:	2201      	movs	r2, #1
   24db0:	f815 4b01 	ldrb.w	r4, [r5], #1
   24db4:	e7eb      	b.n	24d8e <_strtol_l.constprop.0+0x56>
   24db6:	2c2b      	cmp	r4, #43	; 0x2b
   24db8:	bf04      	itt	eq
   24dba:	782c      	ldrbeq	r4, [r5, #0]
   24dbc:	1c95      	addeq	r5, r2, #2
   24dbe:	e7d8      	b.n	24d72 <_strtol_l.constprop.0+0x3a>
   24dc0:	2b10      	cmp	r3, #16
   24dc2:	d1da      	bne.n	24d7a <_strtol_l.constprop.0+0x42>
   24dc4:	2c30      	cmp	r4, #48	; 0x30
   24dc6:	d1d8      	bne.n	24d7a <_strtol_l.constprop.0+0x42>
   24dc8:	782a      	ldrb	r2, [r5, #0]
   24dca:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   24dce:	2a58      	cmp	r2, #88	; 0x58
   24dd0:	d1d3      	bne.n	24d7a <_strtol_l.constprop.0+0x42>
   24dd2:	786c      	ldrb	r4, [r5, #1]
   24dd4:	2310      	movs	r3, #16
   24dd6:	3502      	adds	r5, #2
   24dd8:	e7cf      	b.n	24d7a <_strtol_l.constprop.0+0x42>
   24dda:	782b      	ldrb	r3, [r5, #0]
   24ddc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24de0:	2b58      	cmp	r3, #88	; 0x58
   24de2:	d0f6      	beq.n	24dd2 <_strtol_l.constprop.0+0x9a>
   24de4:	2308      	movs	r3, #8
   24de6:	e7c8      	b.n	24d7a <_strtol_l.constprop.0+0x42>
   24de8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   24dec:	2f19      	cmp	r7, #25
   24dee:	d801      	bhi.n	24df4 <_strtol_l.constprop.0+0xbc>
   24df0:	3c37      	subs	r4, #55	; 0x37
   24df2:	e7d1      	b.n	24d98 <_strtol_l.constprop.0+0x60>
   24df4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   24df8:	2f19      	cmp	r7, #25
   24dfa:	d804      	bhi.n	24e06 <_strtol_l.constprop.0+0xce>
   24dfc:	3c57      	subs	r4, #87	; 0x57
   24dfe:	e7cb      	b.n	24d98 <_strtol_l.constprop.0+0x60>
   24e00:	f04f 32ff 	mov.w	r2, #4294967295
   24e04:	e7d4      	b.n	24db0 <_strtol_l.constprop.0+0x78>
   24e06:	1c53      	adds	r3, r2, #1
   24e08:	d108      	bne.n	24e1c <_strtol_l.constprop.0+0xe4>
   24e0a:	2322      	movs	r3, #34	; 0x22
   24e0c:	4660      	mov	r0, ip
   24e0e:	f8ce 3000 	str.w	r3, [lr]
   24e12:	f1b8 0f00 	cmp.w	r8, #0
   24e16:	d09c      	beq.n	24d52 <_strtol_l.constprop.0+0x1a>
   24e18:	1e69      	subs	r1, r5, #1
   24e1a:	e006      	b.n	24e2a <_strtol_l.constprop.0+0xf2>
   24e1c:	b106      	cbz	r6, 24e20 <_strtol_l.constprop.0+0xe8>
   24e1e:	4240      	negs	r0, r0
   24e20:	f1b8 0f00 	cmp.w	r8, #0
   24e24:	d095      	beq.n	24d52 <_strtol_l.constprop.0+0x1a>
   24e26:	2a00      	cmp	r2, #0
   24e28:	d1f6      	bne.n	24e18 <_strtol_l.constprop.0+0xe0>
   24e2a:	f8c8 1000 	str.w	r1, [r8]
   24e2e:	e790      	b.n	24d52 <_strtol_l.constprop.0+0x1a>
   24e30:	0002b1d7 	.word	0x0002b1d7

00024e34 <strtol>:
   24e34:	4613      	mov	r3, r2
   24e36:	460a      	mov	r2, r1
   24e38:	4601      	mov	r1, r0
   24e3a:	4802      	ldr	r0, [pc, #8]	; (24e44 <strtol+0x10>)
   24e3c:	6800      	ldr	r0, [r0, #0]
   24e3e:	f7ff bf7b 	b.w	24d38 <_strtol_l.constprop.0>
   24e42:	bf00      	nop
   24e44:	2000c708 	.word	0x2000c708

00024e48 <_strtoll_l.constprop.0>:
   24e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e4c:	4690      	mov	r8, r2
   24e4e:	b085      	sub	sp, #20
   24e50:	4689      	mov	r9, r1
   24e52:	461e      	mov	r6, r3
   24e54:	460d      	mov	r5, r1
   24e56:	4a45      	ldr	r2, [pc, #276]	; (24f6c <_strtoll_l.constprop.0+0x124>)
   24e58:	9002      	str	r0, [sp, #8]
   24e5a:	462b      	mov	r3, r5
   24e5c:	f815 4b01 	ldrb.w	r4, [r5], #1
   24e60:	5d17      	ldrb	r7, [r2, r4]
   24e62:	f017 0708 	ands.w	r7, r7, #8
   24e66:	d1f8      	bne.n	24e5a <_strtoll_l.constprop.0+0x12>
   24e68:	2c2d      	cmp	r4, #45	; 0x2d
   24e6a:	d141      	bne.n	24ef0 <_strtoll_l.constprop.0+0xa8>
   24e6c:	782c      	ldrb	r4, [r5, #0]
   24e6e:	2701      	movs	r7, #1
   24e70:	1c9d      	adds	r5, r3, #2
   24e72:	2e00      	cmp	r6, #0
   24e74:	d141      	bne.n	24efa <_strtoll_l.constprop.0+0xb2>
   24e76:	2c30      	cmp	r4, #48	; 0x30
   24e78:	d04c      	beq.n	24f14 <_strtoll_l.constprop.0+0xcc>
   24e7a:	260a      	movs	r6, #10
   24e7c:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   24e80:	f107 3bff 	add.w	fp, r7, #4294967295
   24e84:	17f3      	asrs	r3, r6, #31
   24e86:	4632      	mov	r2, r6
   24e88:	f10a 3aff 	add.w	sl, sl, #4294967295
   24e8c:	4658      	mov	r0, fp
   24e8e:	9303      	str	r3, [sp, #12]
   24e90:	4651      	mov	r1, sl
   24e92:	f7f3 ff39 	bl	18d08 <__aeabi_uldivmod>
   24e96:	9201      	str	r2, [sp, #4]
   24e98:	2200      	movs	r2, #0
   24e9a:	468e      	mov	lr, r1
   24e9c:	4684      	mov	ip, r0
   24e9e:	4611      	mov	r1, r2
   24ea0:	4610      	mov	r0, r2
   24ea2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   24ea6:	2b09      	cmp	r3, #9
   24ea8:	d905      	bls.n	24eb6 <_strtoll_l.constprop.0+0x6e>
   24eaa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   24eae:	2b19      	cmp	r3, #25
   24eb0:	d837      	bhi.n	24f22 <_strtoll_l.constprop.0+0xda>
   24eb2:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   24eb6:	429e      	cmp	r6, r3
   24eb8:	dd3d      	ble.n	24f36 <_strtoll_l.constprop.0+0xee>
   24eba:	1c54      	adds	r4, r2, #1
   24ebc:	d015      	beq.n	24eea <_strtoll_l.constprop.0+0xa2>
   24ebe:	4584      	cmp	ip, r0
   24ec0:	eb7e 0201 	sbcs.w	r2, lr, r1
   24ec4:	d334      	bcc.n	24f30 <_strtoll_l.constprop.0+0xe8>
   24ec6:	458e      	cmp	lr, r1
   24ec8:	bf08      	it	eq
   24eca:	4584      	cmpeq	ip, r0
   24ecc:	d102      	bne.n	24ed4 <_strtoll_l.constprop.0+0x8c>
   24ece:	9a01      	ldr	r2, [sp, #4]
   24ed0:	429a      	cmp	r2, r3
   24ed2:	db2d      	blt.n	24f30 <_strtoll_l.constprop.0+0xe8>
   24ed4:	9a03      	ldr	r2, [sp, #12]
   24ed6:	4371      	muls	r1, r6
   24ed8:	fb00 1102 	mla	r1, r0, r2, r1
   24edc:	fba6 0200 	umull	r0, r2, r6, r0
   24ee0:	440a      	add	r2, r1
   24ee2:	1818      	adds	r0, r3, r0
   24ee4:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
   24ee8:	2201      	movs	r2, #1
   24eea:	f815 4b01 	ldrb.w	r4, [r5], #1
   24eee:	e7d8      	b.n	24ea2 <_strtoll_l.constprop.0+0x5a>
   24ef0:	2c2b      	cmp	r4, #43	; 0x2b
   24ef2:	bf04      	itt	eq
   24ef4:	782c      	ldrbeq	r4, [r5, #0]
   24ef6:	1c9d      	addeq	r5, r3, #2
   24ef8:	e7bb      	b.n	24e72 <_strtoll_l.constprop.0+0x2a>
   24efa:	2e10      	cmp	r6, #16
   24efc:	d1be      	bne.n	24e7c <_strtoll_l.constprop.0+0x34>
   24efe:	2c30      	cmp	r4, #48	; 0x30
   24f00:	d1bc      	bne.n	24e7c <_strtoll_l.constprop.0+0x34>
   24f02:	782b      	ldrb	r3, [r5, #0]
   24f04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24f08:	2b58      	cmp	r3, #88	; 0x58
   24f0a:	d1b7      	bne.n	24e7c <_strtoll_l.constprop.0+0x34>
   24f0c:	786c      	ldrb	r4, [r5, #1]
   24f0e:	2610      	movs	r6, #16
   24f10:	3502      	adds	r5, #2
   24f12:	e7b3      	b.n	24e7c <_strtoll_l.constprop.0+0x34>
   24f14:	782b      	ldrb	r3, [r5, #0]
   24f16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24f1a:	2b58      	cmp	r3, #88	; 0x58
   24f1c:	d0f6      	beq.n	24f0c <_strtoll_l.constprop.0+0xc4>
   24f1e:	2608      	movs	r6, #8
   24f20:	e7ac      	b.n	24e7c <_strtoll_l.constprop.0+0x34>
   24f22:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   24f26:	2b19      	cmp	r3, #25
   24f28:	d805      	bhi.n	24f36 <_strtoll_l.constprop.0+0xee>
   24f2a:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   24f2e:	e7c2      	b.n	24eb6 <_strtoll_l.constprop.0+0x6e>
   24f30:	f04f 32ff 	mov.w	r2, #4294967295
   24f34:	e7d9      	b.n	24eea <_strtoll_l.constprop.0+0xa2>
   24f36:	1c53      	adds	r3, r2, #1
   24f38:	d10a      	bne.n	24f50 <_strtoll_l.constprop.0+0x108>
   24f3a:	2322      	movs	r3, #34	; 0x22
   24f3c:	9a02      	ldr	r2, [sp, #8]
   24f3e:	4658      	mov	r0, fp
   24f40:	4651      	mov	r1, sl
   24f42:	6013      	str	r3, [r2, #0]
   24f44:	f1b8 0f00 	cmp.w	r8, #0
   24f48:	d10a      	bne.n	24f60 <_strtoll_l.constprop.0+0x118>
   24f4a:	b005      	add	sp, #20
   24f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f50:	b117      	cbz	r7, 24f58 <_strtoll_l.constprop.0+0x110>
   24f52:	4240      	negs	r0, r0
   24f54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   24f58:	f1b8 0f00 	cmp.w	r8, #0
   24f5c:	d0f5      	beq.n	24f4a <_strtoll_l.constprop.0+0x102>
   24f5e:	b10a      	cbz	r2, 24f64 <_strtoll_l.constprop.0+0x11c>
   24f60:	f105 39ff 	add.w	r9, r5, #4294967295
   24f64:	f8c8 9000 	str.w	r9, [r8]
   24f68:	e7ef      	b.n	24f4a <_strtoll_l.constprop.0+0x102>
   24f6a:	bf00      	nop
   24f6c:	0002b1d7 	.word	0x0002b1d7

00024f70 <strtoll>:
   24f70:	4613      	mov	r3, r2
   24f72:	460a      	mov	r2, r1
   24f74:	4601      	mov	r1, r0
   24f76:	4802      	ldr	r0, [pc, #8]	; (24f80 <strtoll+0x10>)
   24f78:	6800      	ldr	r0, [r0, #0]
   24f7a:	f7ff bf65 	b.w	24e48 <_strtoll_l.constprop.0>
   24f7e:	bf00      	nop
   24f80:	2000c708 	.word	0x2000c708

00024f84 <_strtoul_l.constprop.0>:
   24f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24f88:	4686      	mov	lr, r0
   24f8a:	460d      	mov	r5, r1
   24f8c:	4e35      	ldr	r6, [pc, #212]	; (25064 <_strtoul_l.constprop.0+0xe0>)
   24f8e:	4628      	mov	r0, r5
   24f90:	f815 4b01 	ldrb.w	r4, [r5], #1
   24f94:	5d37      	ldrb	r7, [r6, r4]
   24f96:	f017 0708 	ands.w	r7, r7, #8
   24f9a:	d1f8      	bne.n	24f8e <_strtoul_l.constprop.0+0xa>
   24f9c:	2c2d      	cmp	r4, #45	; 0x2d
   24f9e:	d126      	bne.n	24fee <_strtoul_l.constprop.0+0x6a>
   24fa0:	782c      	ldrb	r4, [r5, #0]
   24fa2:	2701      	movs	r7, #1
   24fa4:	1c85      	adds	r5, r0, #2
   24fa6:	bb3b      	cbnz	r3, 24ff8 <_strtoul_l.constprop.0+0x74>
   24fa8:	2c30      	cmp	r4, #48	; 0x30
   24faa:	d032      	beq.n	25012 <_strtoul_l.constprop.0+0x8e>
   24fac:	230a      	movs	r3, #10
   24fae:	f04f 38ff 	mov.w	r8, #4294967295
   24fb2:	2600      	movs	r6, #0
   24fb4:	fbb8 f8f3 	udiv	r8, r8, r3
   24fb8:	fb03 f908 	mul.w	r9, r3, r8
   24fbc:	4630      	mov	r0, r6
   24fbe:	ea6f 0909 	mvn.w	r9, r9
   24fc2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   24fc6:	f1bc 0f09 	cmp.w	ip, #9
   24fca:	d829      	bhi.n	25020 <_strtoul_l.constprop.0+0x9c>
   24fcc:	4664      	mov	r4, ip
   24fce:	42a3      	cmp	r3, r4
   24fd0:	dd37      	ble.n	25042 <_strtoul_l.constprop.0+0xbe>
   24fd2:	f1b6 3fff 	cmp.w	r6, #4294967295
   24fd6:	d007      	beq.n	24fe8 <_strtoul_l.constprop.0+0x64>
   24fd8:	4580      	cmp	r8, r0
   24fda:	d32f      	bcc.n	2503c <_strtoul_l.constprop.0+0xb8>
   24fdc:	d101      	bne.n	24fe2 <_strtoul_l.constprop.0+0x5e>
   24fde:	45a1      	cmp	r9, r4
   24fe0:	db2c      	blt.n	2503c <_strtoul_l.constprop.0+0xb8>
   24fe2:	fb00 4003 	mla	r0, r0, r3, r4
   24fe6:	2601      	movs	r6, #1
   24fe8:	f815 4b01 	ldrb.w	r4, [r5], #1
   24fec:	e7e9      	b.n	24fc2 <_strtoul_l.constprop.0+0x3e>
   24fee:	2c2b      	cmp	r4, #43	; 0x2b
   24ff0:	bf04      	itt	eq
   24ff2:	782c      	ldrbeq	r4, [r5, #0]
   24ff4:	1c85      	addeq	r5, r0, #2
   24ff6:	e7d6      	b.n	24fa6 <_strtoul_l.constprop.0+0x22>
   24ff8:	2b10      	cmp	r3, #16
   24ffa:	d1d8      	bne.n	24fae <_strtoul_l.constprop.0+0x2a>
   24ffc:	2c30      	cmp	r4, #48	; 0x30
   24ffe:	d1d6      	bne.n	24fae <_strtoul_l.constprop.0+0x2a>
   25000:	7828      	ldrb	r0, [r5, #0]
   25002:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   25006:	2858      	cmp	r0, #88	; 0x58
   25008:	d1d1      	bne.n	24fae <_strtoul_l.constprop.0+0x2a>
   2500a:	786c      	ldrb	r4, [r5, #1]
   2500c:	2310      	movs	r3, #16
   2500e:	3502      	adds	r5, #2
   25010:	e7cd      	b.n	24fae <_strtoul_l.constprop.0+0x2a>
   25012:	782b      	ldrb	r3, [r5, #0]
   25014:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25018:	2b58      	cmp	r3, #88	; 0x58
   2501a:	d0f6      	beq.n	2500a <_strtoul_l.constprop.0+0x86>
   2501c:	2308      	movs	r3, #8
   2501e:	e7c6      	b.n	24fae <_strtoul_l.constprop.0+0x2a>
   25020:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   25024:	f1bc 0f19 	cmp.w	ip, #25
   25028:	d801      	bhi.n	2502e <_strtoul_l.constprop.0+0xaa>
   2502a:	3c37      	subs	r4, #55	; 0x37
   2502c:	e7cf      	b.n	24fce <_strtoul_l.constprop.0+0x4a>
   2502e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   25032:	f1bc 0f19 	cmp.w	ip, #25
   25036:	d804      	bhi.n	25042 <_strtoul_l.constprop.0+0xbe>
   25038:	3c57      	subs	r4, #87	; 0x57
   2503a:	e7c8      	b.n	24fce <_strtoul_l.constprop.0+0x4a>
   2503c:	f04f 36ff 	mov.w	r6, #4294967295
   25040:	e7d2      	b.n	24fe8 <_strtoul_l.constprop.0+0x64>
   25042:	1c73      	adds	r3, r6, #1
   25044:	d106      	bne.n	25054 <_strtoul_l.constprop.0+0xd0>
   25046:	2322      	movs	r3, #34	; 0x22
   25048:	4630      	mov	r0, r6
   2504a:	f8ce 3000 	str.w	r3, [lr]
   2504e:	b932      	cbnz	r2, 2505e <_strtoul_l.constprop.0+0xda>
   25050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25054:	b107      	cbz	r7, 25058 <_strtoul_l.constprop.0+0xd4>
   25056:	4240      	negs	r0, r0
   25058:	2a00      	cmp	r2, #0
   2505a:	d0f9      	beq.n	25050 <_strtoul_l.constprop.0+0xcc>
   2505c:	b106      	cbz	r6, 25060 <_strtoul_l.constprop.0+0xdc>
   2505e:	1e69      	subs	r1, r5, #1
   25060:	6011      	str	r1, [r2, #0]
   25062:	e7f5      	b.n	25050 <_strtoul_l.constprop.0+0xcc>
   25064:	0002b1d7 	.word	0x0002b1d7

00025068 <strtoul>:
   25068:	4613      	mov	r3, r2
   2506a:	460a      	mov	r2, r1
   2506c:	4601      	mov	r1, r0
   2506e:	4802      	ldr	r0, [pc, #8]	; (25078 <strtoul+0x10>)
   25070:	6800      	ldr	r0, [r0, #0]
   25072:	f7ff bf87 	b.w	24f84 <_strtoul_l.constprop.0>
   25076:	bf00      	nop
   25078:	2000c708 	.word	0x2000c708

0002507c <vsniprintf>:
   2507c:	b507      	push	{r0, r1, r2, lr}
   2507e:	9300      	str	r3, [sp, #0]
   25080:	4613      	mov	r3, r2
   25082:	460a      	mov	r2, r1
   25084:	4601      	mov	r1, r0
   25086:	4803      	ldr	r0, [pc, #12]	; (25094 <vsniprintf+0x18>)
   25088:	6800      	ldr	r0, [r0, #0]
   2508a:	f003 faa5 	bl	285d8 <_vsniprintf_r>
   2508e:	b003      	add	sp, #12
   25090:	f85d fb04 	ldr.w	pc, [sp], #4
   25094:	2000c708 	.word	0x2000c708

00025098 <__malloc_lock>:
   25098:	4801      	ldr	r0, [pc, #4]	; (250a0 <__malloc_lock+0x8>)
   2509a:	f001 b8eb 	b.w	26274 <__retarget_lock_acquire_recursive>
   2509e:	bf00      	nop
   250a0:	2000c83c 	.word	0x2000c83c

000250a4 <__malloc_unlock>:
   250a4:	4801      	ldr	r0, [pc, #4]	; (250ac <__malloc_unlock+0x8>)
   250a6:	f001 b8eb 	b.w	26280 <__retarget_lock_release_recursive>
   250aa:	bf00      	nop
   250ac:	2000c83c 	.word	0x2000c83c

000250b0 <_svfiprintf_r>:
   250b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   250b4:	4698      	mov	r8, r3
   250b6:	898b      	ldrh	r3, [r1, #12]
   250b8:	b09d      	sub	sp, #116	; 0x74
   250ba:	4607      	mov	r7, r0
   250bc:	061b      	lsls	r3, r3, #24
   250be:	460d      	mov	r5, r1
   250c0:	4614      	mov	r4, r2
   250c2:	d510      	bpl.n	250e6 <_svfiprintf_r+0x36>
   250c4:	690b      	ldr	r3, [r1, #16]
   250c6:	b973      	cbnz	r3, 250e6 <_svfiprintf_r+0x36>
   250c8:	2140      	movs	r1, #64	; 0x40
   250ca:	f7ff fdcb 	bl	24c64 <_malloc_r>
   250ce:	6028      	str	r0, [r5, #0]
   250d0:	6128      	str	r0, [r5, #16]
   250d2:	b930      	cbnz	r0, 250e2 <_svfiprintf_r+0x32>
   250d4:	230c      	movs	r3, #12
   250d6:	603b      	str	r3, [r7, #0]
   250d8:	f04f 30ff 	mov.w	r0, #4294967295
   250dc:	b01d      	add	sp, #116	; 0x74
   250de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250e2:	2340      	movs	r3, #64	; 0x40
   250e4:	616b      	str	r3, [r5, #20]
   250e6:	2300      	movs	r3, #0
   250e8:	f8cd 800c 	str.w	r8, [sp, #12]
   250ec:	f04f 0901 	mov.w	r9, #1
   250f0:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 25294 <_svfiprintf_r+0x1e4>
   250f4:	9309      	str	r3, [sp, #36]	; 0x24
   250f6:	2320      	movs	r3, #32
   250f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   250fc:	2330      	movs	r3, #48	; 0x30
   250fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   25102:	4623      	mov	r3, r4
   25104:	469a      	mov	sl, r3
   25106:	f813 2b01 	ldrb.w	r2, [r3], #1
   2510a:	b10a      	cbz	r2, 25110 <_svfiprintf_r+0x60>
   2510c:	2a25      	cmp	r2, #37	; 0x25
   2510e:	d1f9      	bne.n	25104 <_svfiprintf_r+0x54>
   25110:	ebba 0b04 	subs.w	fp, sl, r4
   25114:	d00b      	beq.n	2512e <_svfiprintf_r+0x7e>
   25116:	465b      	mov	r3, fp
   25118:	4622      	mov	r2, r4
   2511a:	4629      	mov	r1, r5
   2511c:	4638      	mov	r0, r7
   2511e:	f003 fa86 	bl	2862e <__ssputs_r>
   25122:	3001      	adds	r0, #1
   25124:	f000 80a7 	beq.w	25276 <_svfiprintf_r+0x1c6>
   25128:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2512a:	445a      	add	r2, fp
   2512c:	9209      	str	r2, [sp, #36]	; 0x24
   2512e:	f89a 3000 	ldrb.w	r3, [sl]
   25132:	2b00      	cmp	r3, #0
   25134:	f000 809f 	beq.w	25276 <_svfiprintf_r+0x1c6>
   25138:	2300      	movs	r3, #0
   2513a:	f04f 32ff 	mov.w	r2, #4294967295
   2513e:	f10a 0a01 	add.w	sl, sl, #1
   25142:	9304      	str	r3, [sp, #16]
   25144:	9307      	str	r3, [sp, #28]
   25146:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2514a:	931a      	str	r3, [sp, #104]	; 0x68
   2514c:	e9cd 2305 	strd	r2, r3, [sp, #20]
   25150:	4654      	mov	r4, sl
   25152:	2205      	movs	r2, #5
   25154:	484f      	ldr	r0, [pc, #316]	; (25294 <_svfiprintf_r+0x1e4>)
   25156:	f814 1b01 	ldrb.w	r1, [r4], #1
   2515a:	f003 f9ae 	bl	284ba <memchr>
   2515e:	9a04      	ldr	r2, [sp, #16]
   25160:	b9d8      	cbnz	r0, 2519a <_svfiprintf_r+0xea>
   25162:	06d0      	lsls	r0, r2, #27
   25164:	bf44      	itt	mi
   25166:	2320      	movmi	r3, #32
   25168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2516c:	0711      	lsls	r1, r2, #28
   2516e:	bf44      	itt	mi
   25170:	232b      	movmi	r3, #43	; 0x2b
   25172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   25176:	f89a 3000 	ldrb.w	r3, [sl]
   2517a:	2b2a      	cmp	r3, #42	; 0x2a
   2517c:	d015      	beq.n	251aa <_svfiprintf_r+0xfa>
   2517e:	9a07      	ldr	r2, [sp, #28]
   25180:	4654      	mov	r4, sl
   25182:	2000      	movs	r0, #0
   25184:	f04f 0c0a 	mov.w	ip, #10
   25188:	4621      	mov	r1, r4
   2518a:	f811 3b01 	ldrb.w	r3, [r1], #1
   2518e:	3b30      	subs	r3, #48	; 0x30
   25190:	2b09      	cmp	r3, #9
   25192:	d94b      	bls.n	2522c <_svfiprintf_r+0x17c>
   25194:	b1b0      	cbz	r0, 251c4 <_svfiprintf_r+0x114>
   25196:	9207      	str	r2, [sp, #28]
   25198:	e014      	b.n	251c4 <_svfiprintf_r+0x114>
   2519a:	eba0 0308 	sub.w	r3, r0, r8
   2519e:	46a2      	mov	sl, r4
   251a0:	fa09 f303 	lsl.w	r3, r9, r3
   251a4:	4313      	orrs	r3, r2
   251a6:	9304      	str	r3, [sp, #16]
   251a8:	e7d2      	b.n	25150 <_svfiprintf_r+0xa0>
   251aa:	9b03      	ldr	r3, [sp, #12]
   251ac:	1d19      	adds	r1, r3, #4
   251ae:	681b      	ldr	r3, [r3, #0]
   251b0:	2b00      	cmp	r3, #0
   251b2:	9103      	str	r1, [sp, #12]
   251b4:	bfbb      	ittet	lt
   251b6:	425b      	neglt	r3, r3
   251b8:	f042 0202 	orrlt.w	r2, r2, #2
   251bc:	9307      	strge	r3, [sp, #28]
   251be:	9307      	strlt	r3, [sp, #28]
   251c0:	bfb8      	it	lt
   251c2:	9204      	strlt	r2, [sp, #16]
   251c4:	7823      	ldrb	r3, [r4, #0]
   251c6:	2b2e      	cmp	r3, #46	; 0x2e
   251c8:	d10a      	bne.n	251e0 <_svfiprintf_r+0x130>
   251ca:	7863      	ldrb	r3, [r4, #1]
   251cc:	2b2a      	cmp	r3, #42	; 0x2a
   251ce:	d132      	bne.n	25236 <_svfiprintf_r+0x186>
   251d0:	9b03      	ldr	r3, [sp, #12]
   251d2:	3402      	adds	r4, #2
   251d4:	1d1a      	adds	r2, r3, #4
   251d6:	681b      	ldr	r3, [r3, #0]
   251d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   251dc:	9203      	str	r2, [sp, #12]
   251de:	9305      	str	r3, [sp, #20]
   251e0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 25298 <_svfiprintf_r+0x1e8>
   251e4:	2203      	movs	r2, #3
   251e6:	7821      	ldrb	r1, [r4, #0]
   251e8:	4650      	mov	r0, sl
   251ea:	f003 f966 	bl	284ba <memchr>
   251ee:	b138      	cbz	r0, 25200 <_svfiprintf_r+0x150>
   251f0:	eba0 000a 	sub.w	r0, r0, sl
   251f4:	2240      	movs	r2, #64	; 0x40
   251f6:	9b04      	ldr	r3, [sp, #16]
   251f8:	3401      	adds	r4, #1
   251fa:	4082      	lsls	r2, r0
   251fc:	4313      	orrs	r3, r2
   251fe:	9304      	str	r3, [sp, #16]
   25200:	f814 1b01 	ldrb.w	r1, [r4], #1
   25204:	2206      	movs	r2, #6
   25206:	4825      	ldr	r0, [pc, #148]	; (2529c <_svfiprintf_r+0x1ec>)
   25208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2520c:	f003 f955 	bl	284ba <memchr>
   25210:	2800      	cmp	r0, #0
   25212:	d036      	beq.n	25282 <_svfiprintf_r+0x1d2>
   25214:	4b22      	ldr	r3, [pc, #136]	; (252a0 <_svfiprintf_r+0x1f0>)
   25216:	bb1b      	cbnz	r3, 25260 <_svfiprintf_r+0x1b0>
   25218:	9b03      	ldr	r3, [sp, #12]
   2521a:	3307      	adds	r3, #7
   2521c:	f023 0307 	bic.w	r3, r3, #7
   25220:	3308      	adds	r3, #8
   25222:	9303      	str	r3, [sp, #12]
   25224:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25226:	4433      	add	r3, r6
   25228:	9309      	str	r3, [sp, #36]	; 0x24
   2522a:	e76a      	b.n	25102 <_svfiprintf_r+0x52>
   2522c:	fb0c 3202 	mla	r2, ip, r2, r3
   25230:	460c      	mov	r4, r1
   25232:	2001      	movs	r0, #1
   25234:	e7a8      	b.n	25188 <_svfiprintf_r+0xd8>
   25236:	2300      	movs	r3, #0
   25238:	3401      	adds	r4, #1
   2523a:	f04f 0c0a 	mov.w	ip, #10
   2523e:	4619      	mov	r1, r3
   25240:	9305      	str	r3, [sp, #20]
   25242:	4620      	mov	r0, r4
   25244:	f810 2b01 	ldrb.w	r2, [r0], #1
   25248:	3a30      	subs	r2, #48	; 0x30
   2524a:	2a09      	cmp	r2, #9
   2524c:	d903      	bls.n	25256 <_svfiprintf_r+0x1a6>
   2524e:	2b00      	cmp	r3, #0
   25250:	d0c6      	beq.n	251e0 <_svfiprintf_r+0x130>
   25252:	9105      	str	r1, [sp, #20]
   25254:	e7c4      	b.n	251e0 <_svfiprintf_r+0x130>
   25256:	fb0c 2101 	mla	r1, ip, r1, r2
   2525a:	4604      	mov	r4, r0
   2525c:	2301      	movs	r3, #1
   2525e:	e7f0      	b.n	25242 <_svfiprintf_r+0x192>
   25260:	ab03      	add	r3, sp, #12
   25262:	462a      	mov	r2, r5
   25264:	a904      	add	r1, sp, #16
   25266:	4638      	mov	r0, r7
   25268:	9300      	str	r3, [sp, #0]
   2526a:	4b0e      	ldr	r3, [pc, #56]	; (252a4 <_svfiprintf_r+0x1f4>)
   2526c:	f3af 8000 	nop.w
   25270:	1c42      	adds	r2, r0, #1
   25272:	4606      	mov	r6, r0
   25274:	d1d6      	bne.n	25224 <_svfiprintf_r+0x174>
   25276:	89ab      	ldrh	r3, [r5, #12]
   25278:	065b      	lsls	r3, r3, #25
   2527a:	f53f af2d 	bmi.w	250d8 <_svfiprintf_r+0x28>
   2527e:	9809      	ldr	r0, [sp, #36]	; 0x24
   25280:	e72c      	b.n	250dc <_svfiprintf_r+0x2c>
   25282:	ab03      	add	r3, sp, #12
   25284:	462a      	mov	r2, r5
   25286:	a904      	add	r1, sp, #16
   25288:	4638      	mov	r0, r7
   2528a:	9300      	str	r3, [sp, #0]
   2528c:	4b05      	ldr	r3, [pc, #20]	; (252a4 <_svfiprintf_r+0x1f4>)
   2528e:	f000 f80b 	bl	252a8 <_printf_i>
   25292:	e7ed      	b.n	25270 <_svfiprintf_r+0x1c0>
   25294:	0002b2d7 	.word	0x0002b2d7
   25298:	0002b2dd 	.word	0x0002b2dd
   2529c:	0002b2e1 	.word	0x0002b2e1
   252a0:	00000000 	.word	0x00000000
   252a4:	0002862f 	.word	0x0002862f

000252a8 <_printf_i>:
   252a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   252ac:	7e0f      	ldrb	r7, [r1, #24]
   252ae:	4691      	mov	r9, r2
   252b0:	4680      	mov	r8, r0
   252b2:	460c      	mov	r4, r1
   252b4:	2f78      	cmp	r7, #120	; 0x78
   252b6:	469a      	mov	sl, r3
   252b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   252ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
   252be:	d807      	bhi.n	252d0 <_printf_i+0x28>
   252c0:	2f62      	cmp	r7, #98	; 0x62
   252c2:	d80a      	bhi.n	252da <_printf_i+0x32>
   252c4:	2f00      	cmp	r7, #0
   252c6:	f000 80e0 	beq.w	2548a <_printf_i+0x1e2>
   252ca:	2f58      	cmp	r7, #88	; 0x58
   252cc:	f000 80bb 	beq.w	25446 <_printf_i+0x19e>
   252d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
   252d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   252d8:	e03a      	b.n	25350 <_printf_i+0xa8>
   252da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   252de:	2b15      	cmp	r3, #21
   252e0:	d8f6      	bhi.n	252d0 <_printf_i+0x28>
   252e2:	a101      	add	r1, pc, #4	; (adr r1, 252e8 <_printf_i+0x40>)
   252e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   252e8:	00025341 	.word	0x00025341
   252ec:	00025355 	.word	0x00025355
   252f0:	000252d1 	.word	0x000252d1
   252f4:	000252d1 	.word	0x000252d1
   252f8:	000252d1 	.word	0x000252d1
   252fc:	000252d1 	.word	0x000252d1
   25300:	00025355 	.word	0x00025355
   25304:	000252d1 	.word	0x000252d1
   25308:	000252d1 	.word	0x000252d1
   2530c:	000252d1 	.word	0x000252d1
   25310:	000252d1 	.word	0x000252d1
   25314:	00025471 	.word	0x00025471
   25318:	000253e5 	.word	0x000253e5
   2531c:	00025427 	.word	0x00025427
   25320:	000252d1 	.word	0x000252d1
   25324:	000252d1 	.word	0x000252d1
   25328:	00025493 	.word	0x00025493
   2532c:	000252d1 	.word	0x000252d1
   25330:	000253e5 	.word	0x000253e5
   25334:	000252d1 	.word	0x000252d1
   25338:	000252d1 	.word	0x000252d1
   2533c:	0002542f 	.word	0x0002542f
   25340:	682b      	ldr	r3, [r5, #0]
   25342:	f104 0642 	add.w	r6, r4, #66	; 0x42
   25346:	1d1a      	adds	r2, r3, #4
   25348:	681b      	ldr	r3, [r3, #0]
   2534a:	602a      	str	r2, [r5, #0]
   2534c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   25350:	2301      	movs	r3, #1
   25352:	e0ab      	b.n	254ac <_printf_i+0x204>
   25354:	6823      	ldr	r3, [r4, #0]
   25356:	6829      	ldr	r1, [r5, #0]
   25358:	061f      	lsls	r7, r3, #24
   2535a:	f101 0004 	add.w	r0, r1, #4
   2535e:	6028      	str	r0, [r5, #0]
   25360:	d501      	bpl.n	25366 <_printf_i+0xbe>
   25362:	680d      	ldr	r5, [r1, #0]
   25364:	e003      	b.n	2536e <_printf_i+0xc6>
   25366:	065e      	lsls	r6, r3, #25
   25368:	d5fb      	bpl.n	25362 <_printf_i+0xba>
   2536a:	f9b1 5000 	ldrsh.w	r5, [r1]
   2536e:	2d00      	cmp	r5, #0
   25370:	6861      	ldr	r1, [r4, #4]
   25372:	da7a      	bge.n	2546a <_printf_i+0x1c2>
   25374:	202d      	movs	r0, #45	; 0x2d
   25376:	2900      	cmp	r1, #0
   25378:	60a1      	str	r1, [r4, #8]
   2537a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   2537e:	da2d      	bge.n	253dc <_printf_i+0x134>
   25380:	426d      	negs	r5, r5
   25382:	485e      	ldr	r0, [pc, #376]	; (254fc <_printf_i+0x254>)
   25384:	230a      	movs	r3, #10
   25386:	4616      	mov	r6, r2
   25388:	fbb5 f1f3 	udiv	r1, r5, r3
   2538c:	fb03 5711 	mls	r7, r3, r1, r5
   25390:	5dc7      	ldrb	r7, [r0, r7]
   25392:	f806 7d01 	strb.w	r7, [r6, #-1]!
   25396:	462f      	mov	r7, r5
   25398:	460d      	mov	r5, r1
   2539a:	42bb      	cmp	r3, r7
   2539c:	d9f4      	bls.n	25388 <_printf_i+0xe0>
   2539e:	2b08      	cmp	r3, #8
   253a0:	d10b      	bne.n	253ba <_printf_i+0x112>
   253a2:	6823      	ldr	r3, [r4, #0]
   253a4:	07df      	lsls	r7, r3, #31
   253a6:	d508      	bpl.n	253ba <_printf_i+0x112>
   253a8:	6923      	ldr	r3, [r4, #16]
   253aa:	6861      	ldr	r1, [r4, #4]
   253ac:	4299      	cmp	r1, r3
   253ae:	bfde      	ittt	le
   253b0:	2330      	movle	r3, #48	; 0x30
   253b2:	f806 3c01 	strble.w	r3, [r6, #-1]
   253b6:	f106 36ff 	addle.w	r6, r6, #4294967295
   253ba:	1b92      	subs	r2, r2, r6
   253bc:	6122      	str	r2, [r4, #16]
   253be:	464b      	mov	r3, r9
   253c0:	aa03      	add	r2, sp, #12
   253c2:	4621      	mov	r1, r4
   253c4:	4640      	mov	r0, r8
   253c6:	f8cd a000 	str.w	sl, [sp]
   253ca:	f003 f98b 	bl	286e4 <_printf_common>
   253ce:	3001      	adds	r0, #1
   253d0:	d171      	bne.n	254b6 <_printf_i+0x20e>
   253d2:	f04f 30ff 	mov.w	r0, #4294967295
   253d6:	b004      	add	sp, #16
   253d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   253dc:	f023 0304 	bic.w	r3, r3, #4
   253e0:	6023      	str	r3, [r4, #0]
   253e2:	e7cd      	b.n	25380 <_printf_i+0xd8>
   253e4:	682b      	ldr	r3, [r5, #0]
   253e6:	6820      	ldr	r0, [r4, #0]
   253e8:	1d19      	adds	r1, r3, #4
   253ea:	6029      	str	r1, [r5, #0]
   253ec:	0605      	lsls	r5, r0, #24
   253ee:	d501      	bpl.n	253f4 <_printf_i+0x14c>
   253f0:	681d      	ldr	r5, [r3, #0]
   253f2:	e002      	b.n	253fa <_printf_i+0x152>
   253f4:	0641      	lsls	r1, r0, #25
   253f6:	d5fb      	bpl.n	253f0 <_printf_i+0x148>
   253f8:	881d      	ldrh	r5, [r3, #0]
   253fa:	2f6f      	cmp	r7, #111	; 0x6f
   253fc:	483f      	ldr	r0, [pc, #252]	; (254fc <_printf_i+0x254>)
   253fe:	bf14      	ite	ne
   25400:	230a      	movne	r3, #10
   25402:	2308      	moveq	r3, #8
   25404:	2100      	movs	r1, #0
   25406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2540a:	6866      	ldr	r6, [r4, #4]
   2540c:	2e00      	cmp	r6, #0
   2540e:	60a6      	str	r6, [r4, #8]
   25410:	dbb9      	blt.n	25386 <_printf_i+0xde>
   25412:	6821      	ldr	r1, [r4, #0]
   25414:	f021 0104 	bic.w	r1, r1, #4
   25418:	6021      	str	r1, [r4, #0]
   2541a:	2d00      	cmp	r5, #0
   2541c:	d1b3      	bne.n	25386 <_printf_i+0xde>
   2541e:	2e00      	cmp	r6, #0
   25420:	d1b1      	bne.n	25386 <_printf_i+0xde>
   25422:	4616      	mov	r6, r2
   25424:	e7bb      	b.n	2539e <_printf_i+0xf6>
   25426:	6823      	ldr	r3, [r4, #0]
   25428:	f043 0320 	orr.w	r3, r3, #32
   2542c:	6023      	str	r3, [r4, #0]
   2542e:	2778      	movs	r7, #120	; 0x78
   25430:	4833      	ldr	r0, [pc, #204]	; (25500 <_printf_i+0x258>)
   25432:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   25436:	6829      	ldr	r1, [r5, #0]
   25438:	6823      	ldr	r3, [r4, #0]
   2543a:	1d0e      	adds	r6, r1, #4
   2543c:	602e      	str	r6, [r5, #0]
   2543e:	061e      	lsls	r6, r3, #24
   25440:	d503      	bpl.n	2544a <_printf_i+0x1a2>
   25442:	680d      	ldr	r5, [r1, #0]
   25444:	e004      	b.n	25450 <_printf_i+0x1a8>
   25446:	482d      	ldr	r0, [pc, #180]	; (254fc <_printf_i+0x254>)
   25448:	e7f3      	b.n	25432 <_printf_i+0x18a>
   2544a:	065d      	lsls	r5, r3, #25
   2544c:	d5f9      	bpl.n	25442 <_printf_i+0x19a>
   2544e:	880d      	ldrh	r5, [r1, #0]
   25450:	07d9      	lsls	r1, r3, #31
   25452:	bf44      	itt	mi
   25454:	f043 0320 	orrmi.w	r3, r3, #32
   25458:	6023      	strmi	r3, [r4, #0]
   2545a:	b10d      	cbz	r5, 25460 <_printf_i+0x1b8>
   2545c:	2310      	movs	r3, #16
   2545e:	e7d1      	b.n	25404 <_printf_i+0x15c>
   25460:	6823      	ldr	r3, [r4, #0]
   25462:	f023 0320 	bic.w	r3, r3, #32
   25466:	6023      	str	r3, [r4, #0]
   25468:	e7f8      	b.n	2545c <_printf_i+0x1b4>
   2546a:	4824      	ldr	r0, [pc, #144]	; (254fc <_printf_i+0x254>)
   2546c:	230a      	movs	r3, #10
   2546e:	e7cc      	b.n	2540a <_printf_i+0x162>
   25470:	682b      	ldr	r3, [r5, #0]
   25472:	6826      	ldr	r6, [r4, #0]
   25474:	1d18      	adds	r0, r3, #4
   25476:	6961      	ldr	r1, [r4, #20]
   25478:	6028      	str	r0, [r5, #0]
   2547a:	0635      	lsls	r5, r6, #24
   2547c:	681b      	ldr	r3, [r3, #0]
   2547e:	d501      	bpl.n	25484 <_printf_i+0x1dc>
   25480:	6019      	str	r1, [r3, #0]
   25482:	e002      	b.n	2548a <_printf_i+0x1e2>
   25484:	0670      	lsls	r0, r6, #25
   25486:	d5fb      	bpl.n	25480 <_printf_i+0x1d8>
   25488:	8019      	strh	r1, [r3, #0]
   2548a:	2300      	movs	r3, #0
   2548c:	4616      	mov	r6, r2
   2548e:	6123      	str	r3, [r4, #16]
   25490:	e795      	b.n	253be <_printf_i+0x116>
   25492:	682b      	ldr	r3, [r5, #0]
   25494:	2100      	movs	r1, #0
   25496:	1d1a      	adds	r2, r3, #4
   25498:	602a      	str	r2, [r5, #0]
   2549a:	681e      	ldr	r6, [r3, #0]
   2549c:	6862      	ldr	r2, [r4, #4]
   2549e:	4630      	mov	r0, r6
   254a0:	f003 f80b 	bl	284ba <memchr>
   254a4:	b108      	cbz	r0, 254aa <_printf_i+0x202>
   254a6:	1b80      	subs	r0, r0, r6
   254a8:	6060      	str	r0, [r4, #4]
   254aa:	6863      	ldr	r3, [r4, #4]
   254ac:	6123      	str	r3, [r4, #16]
   254ae:	2300      	movs	r3, #0
   254b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   254b4:	e783      	b.n	253be <_printf_i+0x116>
   254b6:	6923      	ldr	r3, [r4, #16]
   254b8:	4632      	mov	r2, r6
   254ba:	4649      	mov	r1, r9
   254bc:	4640      	mov	r0, r8
   254be:	47d0      	blx	sl
   254c0:	3001      	adds	r0, #1
   254c2:	d086      	beq.n	253d2 <_printf_i+0x12a>
   254c4:	6823      	ldr	r3, [r4, #0]
   254c6:	079b      	lsls	r3, r3, #30
   254c8:	d414      	bmi.n	254f4 <_printf_i+0x24c>
   254ca:	68e0      	ldr	r0, [r4, #12]
   254cc:	9b03      	ldr	r3, [sp, #12]
   254ce:	4298      	cmp	r0, r3
   254d0:	bfb8      	it	lt
   254d2:	4618      	movlt	r0, r3
   254d4:	e77f      	b.n	253d6 <_printf_i+0x12e>
   254d6:	2301      	movs	r3, #1
   254d8:	4632      	mov	r2, r6
   254da:	4649      	mov	r1, r9
   254dc:	4640      	mov	r0, r8
   254de:	47d0      	blx	sl
   254e0:	3001      	adds	r0, #1
   254e2:	f43f af76 	beq.w	253d2 <_printf_i+0x12a>
   254e6:	3501      	adds	r5, #1
   254e8:	68e3      	ldr	r3, [r4, #12]
   254ea:	9903      	ldr	r1, [sp, #12]
   254ec:	1a5b      	subs	r3, r3, r1
   254ee:	42ab      	cmp	r3, r5
   254f0:	dcf1      	bgt.n	254d6 <_printf_i+0x22e>
   254f2:	e7ea      	b.n	254ca <_printf_i+0x222>
   254f4:	2500      	movs	r5, #0
   254f6:	f104 0619 	add.w	r6, r4, #25
   254fa:	e7f5      	b.n	254e8 <_printf_i+0x240>
   254fc:	0002b2e8 	.word	0x0002b2e8
   25500:	0002b2f9 	.word	0x0002b2f9

00025504 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   25504:	2301      	movs	r3, #1
   25506:	fa03 f101 	lsl.w	r1, r3, r1
   2550a:	6903      	ldr	r3, [r0, #16]
   2550c:	681b      	ldr	r3, [r3, #0]
   2550e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   25510:	bf18      	it	ne
   25512:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   25516:	b112      	cbz	r2, 2551e <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   25518:	6883      	ldr	r3, [r0, #8]
   2551a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2551c:	4718      	bx	r3
   2551e:	6883      	ldr	r3, [r0, #8]
   25520:	691b      	ldr	r3, [r3, #16]
   25522:	e7fb      	b.n	2551c <gpio_pin_set.isra.0+0x18>

00025524 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   25524:	b538      	push	{r3, r4, r5, lr}
   25526:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
   25528:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   2552c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   25530:	f240 30e7 	movw	r0, #999	; 0x3e7
   25534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25538:	2300      	movs	r3, #0
   2553a:	fbc4 0105 	smlal	r0, r1, r4, r5
   2553e:	f7f3 fbe3 	bl	18d08 <__aeabi_uldivmod>
}
   25542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   25546:	f7ff b831 	b.w	245ac <z_impl_k_sleep>

0002554a <cbpprintf_external>:
{
   2554a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2554e:	4606      	mov	r6, r0
   25550:	460d      	mov	r5, r1
   25552:	4617      	mov	r7, r2
	if (buf == NULL) {
   25554:	4698      	mov	r8, r3
   25556:	b32b      	cbz	r3, 255a4 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   25558:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   2555c:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   25560:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   25564:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   25566:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   25568:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2556c:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   25570:	441c      	add	r4, r3
   25572:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   25574:	45ca      	cmp	sl, r9
   25576:	d309      	bcc.n	2558c <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   25578:	4639      	mov	r1, r7
   2557a:	4630      	mov	r0, r6
   2557c:	46ac      	mov	ip, r5
   2557e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   25582:	f108 0308 	add.w	r3, r8, #8
}
   25586:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2558a:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2558c:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   25590:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   25594:	4620      	mov	r0, r4
		*ps = s;
   25596:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2559a:	f7f3 fd27 	bl	18fec <strlen>
   2559e:	3001      	adds	r0, #1
   255a0:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   255a2:	e7e7      	b.n	25574 <cbpprintf_external+0x2a>
}
   255a4:	f06f 0015 	mvn.w	r0, #21
   255a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000255ac <is_ptr>:
{
   255ac:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   255ae:	2500      	movs	r5, #0
{
   255b0:	4602      	mov	r2, r0
	bool mod = false;
   255b2:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   255b4:	4614      	mov	r4, r2
   255b6:	f814 3b01 	ldrb.w	r3, [r4], #1
   255ba:	b90b      	cbnz	r3, 255c0 <is_ptr+0x14>
					return false;
   255bc:	4618      	mov	r0, r3
   255be:	e009      	b.n	255d4 <is_ptr+0x28>
		if (mod) {
   255c0:	b198      	cbz	r0, 255ea <is_ptr+0x3e>
			if (cnt == n) {
   255c2:	428d      	cmp	r5, r1
   255c4:	d107      	bne.n	255d6 <is_ptr+0x2a>
				if (c == 'p') {
   255c6:	2b70      	cmp	r3, #112	; 0x70
   255c8:	d004      	beq.n	255d4 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   255ca:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   255ce:	2a3a      	cmp	r2, #58	; 0x3a
   255d0:	d80b      	bhi.n	255ea <is_ptr+0x3e>
					return false;
   255d2:	2000      	movs	r0, #0
}
   255d4:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   255d6:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   255da:	2e3a      	cmp	r6, #58	; 0x3a
   255dc:	d805      	bhi.n	255ea <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   255de:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   255e0:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   255e2:	1c94      	adds	r4, r2, #2
   255e4:	2b00      	cmp	r3, #0
   255e6:	d0e9      	beq.n	255bc <is_ptr+0x10>
   255e8:	2000      	movs	r0, #0
		if (c == '%') {
   255ea:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   255ec:	4622      	mov	r2, r4
			mod = !mod;
   255ee:	bf08      	it	eq
   255f0:	f080 0001 	eoreq.w	r0, r0, #1
   255f4:	e7de      	b.n	255b4 <is_ptr+0x8>

000255f6 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   255f6:	b40c      	push	{r2, r3}
   255f8:	4603      	mov	r3, r0
   255fa:	b507      	push	{r0, r1, r2, lr}
   255fc:	4608      	mov	r0, r1
				       unsigned long request, ...)
{
	va_list args;
	int res;

	va_start(args, request);
   255fe:	aa05      	add	r2, sp, #20
	res = vtable->ioctl(obj, request, args);
   25600:	f240 1105 	movw	r1, #261	; 0x105
   25604:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   25606:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   25608:	4798      	blx	r3
	va_end(args);

	return res;
}
   2560a:	b003      	add	sp, #12
   2560c:	f85d eb04 	ldr.w	lr, [sp], #4
   25610:	b002      	add	sp, #8
   25612:	4770      	bx	lr

00025614 <arch_printk_char_out>:
}
   25614:	2000      	movs	r0, #0
   25616:	4770      	bx	lr

00025618 <str_out>:
{
   25618:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2561a:	688a      	ldr	r2, [r1, #8]
   2561c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2561e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25620:	b114      	cbz	r4, 25628 <str_out+0x10>
   25622:	684b      	ldr	r3, [r1, #4]
   25624:	4293      	cmp	r3, r2
   25626:	dc01      	bgt.n	2562c <str_out+0x14>
		ctx->count++;
   25628:	608d      	str	r5, [r1, #8]
}
   2562a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2562c:	3b01      	subs	r3, #1
   2562e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   25630:	bf08      	it	eq
   25632:	2200      	moveq	r2, #0
   25634:	608d      	str	r5, [r1, #8]
   25636:	bf0c      	ite	eq
   25638:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2563a:	54a0      	strbne	r0, [r4, r2]
   2563c:	e7f5      	b.n	2562a <str_out+0x12>

0002563e <printk>:
{
   2563e:	b40f      	push	{r0, r1, r2, r3}
   25640:	b507      	push	{r0, r1, r2, lr}
   25642:	a904      	add	r1, sp, #16
   25644:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   25648:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   2564a:	f000 fd0b 	bl	26064 <z_log_vprintk>
}
   2564e:	b003      	add	sp, #12
   25650:	f85d eb04 	ldr.w	lr, [sp], #4
   25654:	b004      	add	sp, #16
   25656:	4770      	bx	lr

00025658 <snprintk>:
{
   25658:	b40c      	push	{r2, r3}
   2565a:	b507      	push	{r0, r1, r2, lr}
   2565c:	ab04      	add	r3, sp, #16
   2565e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   25662:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   25664:	f7f4 fad6 	bl	19c14 <vsnprintk>
}
   25668:	b003      	add	sp, #12
   2566a:	f85d eb04 	ldr.w	lr, [sp], #4
   2566e:	b002      	add	sp, #8
   25670:	4770      	bx	lr

00025672 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   25672:	4604      	mov	r4, r0
   25674:	b508      	push	{r3, lr}
   25676:	4608      	mov	r0, r1
   25678:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2567a:	461a      	mov	r2, r3
   2567c:	47a0      	blx	r4
	return z_impl_z_current_get();
   2567e:	f7fe ffaf 	bl	245e0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   25682:	f7f6 fc29 	bl	1bed8 <z_impl_k_thread_abort>

00025686 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   25686:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2568a:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2568c:	0840      	lsrs	r0, r0, #1
   2568e:	4770      	bx	lr

00025690 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   25690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25692:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   25694:	f7ff fff7 	bl	25686 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   25698:	fab0 f080 	clz	r0, r0
   2569c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   256a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   256a4:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   256a8:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   256aa:	1d17      	adds	r7, r2, #4
{
   256ac:	460c      	mov	r4, r1
   256ae:	3206      	adds	r2, #6
   256b0:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   256b2:	b956      	cbnz	r6, 256ca <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   256b4:	2101      	movs	r1, #1
   256b6:	fa01 f000 	lsl.w	r0, r1, r0
   256ba:	68d9      	ldr	r1, [r3, #12]
   256bc:	4301      	orrs	r1, r0
   256be:	60d9      	str	r1, [r3, #12]
		b->next = c;
   256c0:	f8cc 4010 	str.w	r4, [ip, #16]
   256c4:	53dd      	strh	r5, [r3, r7]
   256c6:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   256c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   256ca:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   256cc:	3104      	adds	r1, #4
   256ce:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   256d0:	53d8      	strh	r0, [r3, r7]
   256d2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   256d6:	529e      	strh	r6, [r3, r2]
   256d8:	80c5      	strh	r5, [r0, #6]
   256da:	525d      	strh	r5, [r3, r1]
   256dc:	e7f4      	b.n	256c8 <free_list_add+0x38>

000256de <free_list_remove_bidx>:
{
   256de:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   256e0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   256e4:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   256e6:	4299      	cmp	r1, r3
   256e8:	f102 0104 	add.w	r1, r2, #4
   256ec:	d10a      	bne.n	25704 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   256ee:	2301      	movs	r3, #1
   256f0:	fa03 f202 	lsl.w	r2, r3, r2
   256f4:	68c3      	ldr	r3, [r0, #12]
   256f6:	ea23 0302 	bic.w	r3, r3, r2
   256fa:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   256fc:	2300      	movs	r3, #0
   256fe:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   25702:	bd10      	pop	{r4, pc}
   25704:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   25706:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2570a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2570e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   25712:	80cb      	strh	r3, [r1, #6]
   25714:	8082      	strh	r2, [r0, #4]
}
   25716:	e7f4      	b.n	25702 <free_list_remove_bidx+0x24>

00025718 <free_list_remove>:
{
   25718:	b508      	push	{r3, lr}
   2571a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2571c:	f7ff ffb3 	bl	25686 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   25720:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   25724:	4618      	mov	r0, r3
}
   25726:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2572a:	f1c2 021f 	rsb	r2, r2, #31
   2572e:	f7ff bfd6 	b.w	256de <free_list_remove_bidx>

00025732 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   25732:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25736:	fab1 f581 	clz	r5, r1
   2573a:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2573e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   25742:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   25746:	4603      	mov	r3, r0
   25748:	460e      	mov	r6, r1
	if (b->next) {
   2574a:	b1c2      	cbz	r2, 2577e <alloc_chunk+0x4c>
   2574c:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   2574e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   25752:	4618      	mov	r0, r3
   25754:	4621      	mov	r1, r4
   25756:	f7ff ff96 	bl	25686 <chunk_size>
   2575a:	42b0      	cmp	r0, r6
   2575c:	d306      	bcc.n	2576c <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2575e:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   25760:	4618      	mov	r0, r3
   25762:	f7ff ffbc 	bl	256de <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   25766:	4620      	mov	r0, r4
   25768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2576c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   25770:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   25772:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   25774:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   25778:	d001      	beq.n	2577e <alloc_chunk+0x4c>
   2577a:	4282      	cmp	r2, r0
   2577c:	d1e7      	bne.n	2574e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2577e:	f04f 34ff 	mov.w	r4, #4294967295
   25782:	f1c5 0220 	rsb	r2, r5, #32
   25786:	4094      	lsls	r4, r2
   25788:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2578a:	4014      	ands	r4, r2
   2578c:	d0eb      	beq.n	25766 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2578e:	fa94 f2a4 	rbit	r2, r4
   25792:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   25796:	1d11      	adds	r1, r2, #4
   25798:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2579c:	4621      	mov	r1, r4
   2579e:	e7df      	b.n	25760 <alloc_chunk+0x2e>

000257a0 <merge_chunks>:
{
   257a0:	b538      	push	{r3, r4, r5, lr}
   257a2:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   257a4:	f7ff ff6f 	bl	25686 <chunk_size>
{
   257a8:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   257aa:	4604      	mov	r4, r0
   257ac:	4611      	mov	r1, r2
   257ae:	4618      	mov	r0, r3
   257b0:	f7ff ff69 	bl	25686 <chunk_size>
   257b4:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   257b6:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   257b8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   257bc:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   257be:	4618      	mov	r0, r3
   257c0:	f7ff ff61 	bl	25686 <chunk_size>
	void *cmem = &buf[c];
   257c4:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   257c6:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   257ca:	bd38      	pop	{r3, r4, r5, pc}

000257cc <split_chunks>:
{
   257cc:	b538      	push	{r3, r4, r5, lr}
   257ce:	460c      	mov	r4, r1
   257d0:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   257d2:	f7ff ff58 	bl	25686 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   257d6:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   257d8:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   257da:	4405      	add	r5, r0
   257dc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   257e0:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   257e2:	8060      	strh	r0, [r4, #2]
   257e4:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   257e8:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   257ea:	8044      	strh	r4, [r0, #2]
   257ec:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   257f0:	4618      	mov	r0, r3
   257f2:	4611      	mov	r1, r2
   257f4:	f7ff ff47 	bl	25686 <chunk_size>
	void *cmem = &buf[c];
   257f8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   257fa:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   257fe:	bd38      	pop	{r3, r4, r5, pc}

00025800 <free_chunk>:
{
   25800:	b538      	push	{r3, r4, r5, lr}
   25802:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   25804:	f7ff ff3f 	bl	25686 <chunk_size>
   25808:	460c      	mov	r4, r1
   2580a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2580c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25810:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   25812:	07da      	lsls	r2, r3, #31
   25814:	d40a      	bmi.n	2582c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   25816:	4628      	mov	r0, r5
   25818:	f7ff ff7e 	bl	25718 <free_list_remove>
	return c + chunk_size(h, c);
   2581c:	4621      	mov	r1, r4
   2581e:	4628      	mov	r0, r5
   25820:	f7ff ff31 	bl	25686 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   25824:	1822      	adds	r2, r4, r0
   25826:	4628      	mov	r0, r5
   25828:	f7ff ffba 	bl	257a0 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2582c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25830:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   25832:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25836:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   25838:	07db      	lsls	r3, r3, #31
   2583a:	d40c      	bmi.n	25856 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2583c:	4628      	mov	r0, r5
   2583e:	f7ff ff6b 	bl	25718 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   25842:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   25846:	4622      	mov	r2, r4
   25848:	1a61      	subs	r1, r4, r1
   2584a:	4628      	mov	r0, r5
   2584c:	f7ff ffa8 	bl	257a0 <merge_chunks>
   25850:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25854:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   25856:	4621      	mov	r1, r4
   25858:	4628      	mov	r0, r5
}
   2585a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2585e:	f7ff bf17 	b.w	25690 <free_list_add>

00025862 <sys_heap_free>:
	if (mem == NULL) {
   25862:	b161      	cbz	r1, 2587e <sys_heap_free+0x1c>
   25864:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25866:	3904      	subs	r1, #4
   25868:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   2586a:	f021 0307 	bic.w	r3, r1, #7
   2586e:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   25870:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   25872:	08c9      	lsrs	r1, r1, #3
   25874:	f022 0201 	bic.w	r2, r2, #1
   25878:	805a      	strh	r2, [r3, #2]
   2587a:	f7ff bfc1 	b.w	25800 <free_chunk>
}
   2587e:	4770      	bx	lr

00025880 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   25880:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   25882:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   25884:	b909      	cbnz	r1, 2588a <sys_heap_alloc+0xa>
		return NULL;
   25886:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   25888:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2588a:	68ab      	ldr	r3, [r5, #8]
   2588c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   25890:	d9f9      	bls.n	25886 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25892:	310b      	adds	r1, #11
   25894:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   25896:	4621      	mov	r1, r4
   25898:	4628      	mov	r0, r5
   2589a:	f7ff ff4a 	bl	25732 <alloc_chunk>
	if (c == 0U) {
   2589e:	4606      	mov	r6, r0
   258a0:	2800      	cmp	r0, #0
   258a2:	d0f0      	beq.n	25886 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   258a4:	4601      	mov	r1, r0
   258a6:	4628      	mov	r0, r5
   258a8:	f7ff feed 	bl	25686 <chunk_size>
   258ac:	42a0      	cmp	r0, r4
   258ae:	d907      	bls.n	258c0 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   258b0:	4628      	mov	r0, r5
   258b2:	1932      	adds	r2, r6, r4
   258b4:	f7ff ff8a 	bl	257cc <split_chunks>
		free_list_add(h, c + chunk_sz);
   258b8:	4611      	mov	r1, r2
   258ba:	4628      	mov	r0, r5
   258bc:	f7ff fee8 	bl	25690 <free_list_add>
	void *cmem = &buf[c];
   258c0:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   258c4:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   258c6:	8853      	ldrh	r3, [r2, #2]
   258c8:	3004      	adds	r0, #4
   258ca:	f043 0301 	orr.w	r3, r3, #1
   258ce:	8053      	strh	r3, [r2, #2]
	return mem;
   258d0:	e7da      	b.n	25888 <sys_heap_alloc+0x8>

000258d2 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   258d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   258d6:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   258da:	ea19 0901 	ands.w	r9, r9, r1
{
   258de:	460f      	mov	r7, r1
   258e0:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   258e2:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   258e4:	d00c      	beq.n	25900 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   258e6:	424b      	negs	r3, r1
   258e8:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   258ea:	2b04      	cmp	r3, #4
   258ec:	461a      	mov	r2, r3
   258ee:	464f      	mov	r7, r9
   258f0:	bf28      	it	cs
   258f2:	2204      	movcs	r2, #4
	rew = align & -align;
   258f4:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   258f6:	b964      	cbnz	r4, 25912 <sys_heap_aligned_alloc+0x40>
		return NULL;
   258f8:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   258fa:	4628      	mov	r0, r5
   258fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   25900:	2904      	cmp	r1, #4
   25902:	d804      	bhi.n	2590e <sys_heap_aligned_alloc+0x3c>
}
   25904:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   25908:	4611      	mov	r1, r2
   2590a:	f7ff bfb9 	b.w	25880 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   2590e:	2204      	movs	r2, #4
   25910:	e7f1      	b.n	258f6 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   25912:	68b3      	ldr	r3, [r6, #8]
   25914:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   25918:	d9ee      	bls.n	258f8 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2591a:	f104 010b 	add.w	r1, r4, #11
   2591e:	4439      	add	r1, r7
   25920:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   25922:	4630      	mov	r0, r6
   25924:	08c9      	lsrs	r1, r1, #3
   25926:	f7ff ff04 	bl	25732 <alloc_chunk>
	if (c0 == 0) {
   2592a:	4680      	mov	r8, r0
   2592c:	2800      	cmp	r0, #0
   2592e:	d0e3      	beq.n	258f8 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   25930:	f109 0504 	add.w	r5, r9, #4
   25934:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   25938:	1e7b      	subs	r3, r7, #1
   2593a:	4435      	add	r5, r6
   2593c:	441d      	add	r5, r3
   2593e:	427f      	negs	r7, r7
   25940:	403d      	ands	r5, r7
   25942:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25946:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25948:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2594a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2594c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2594e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   25952:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   25954:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25958:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2595c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   25960:	d208      	bcs.n	25974 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   25962:	4601      	mov	r1, r0
   25964:	463a      	mov	r2, r7
   25966:	4630      	mov	r0, r6
   25968:	f7ff ff30 	bl	257cc <split_chunks>
		free_list_add(h, c0);
   2596c:	4641      	mov	r1, r8
   2596e:	4630      	mov	r0, r6
   25970:	f7ff fe8e 	bl	25690 <free_list_add>
	return c + chunk_size(h, c);
   25974:	4639      	mov	r1, r7
   25976:	4630      	mov	r0, r6
   25978:	f7ff fe85 	bl	25686 <chunk_size>
   2597c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2597e:	4284      	cmp	r4, r0
   25980:	d207      	bcs.n	25992 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   25982:	4630      	mov	r0, r6
   25984:	4622      	mov	r2, r4
   25986:	f7ff ff21 	bl	257cc <split_chunks>
		free_list_add(h, c_end);
   2598a:	4621      	mov	r1, r4
   2598c:	4630      	mov	r0, r6
   2598e:	f7ff fe7f 	bl	25690 <free_list_add>
	void *cmem = &buf[c];
   25992:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25996:	8873      	ldrh	r3, [r6, #2]
   25998:	f043 0301 	orr.w	r3, r3, #1
   2599c:	8073      	strh	r3, [r6, #2]
   2599e:	e7ac      	b.n	258fa <sys_heap_aligned_alloc+0x28>

000259a0 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   259a0:	b4f0      	push	{r4, r5, r6, r7}
   259a2:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   259a4:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   259a6:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   259a8:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   259aa:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   259ae:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   259b2:	1a0e      	subs	r6, r1, r0
   259b4:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   259b6:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   259ba:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   259bc:	2700      	movs	r7, #0
   259be:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   259c0:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   259c4:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   259c6:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   259c8:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   259ca:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   259ce:	f1c2 0220 	rsb	r2, r2, #32
   259d2:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   259d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   259d8:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   259dc:	4294      	cmp	r4, r2
   259de:	d1fb      	bne.n	259d8 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   259e0:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   259e2:	f042 0201 	orr.w	r2, r2, #1
   259e6:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   259e8:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   259ea:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   259ec:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   259f0:	8007      	strh	r7, [r0, #0]
   259f2:	8065      	strh	r5, [r4, #2]
   259f4:	1984      	adds	r4, r0, r6
   259f6:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   259fa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   259fe:	8067      	strh	r7, [r4, #2]
   25a00:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25a02:	885a      	ldrh	r2, [r3, #2]
   25a04:	f042 0201 	orr.w	r2, r2, #1
   25a08:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   25a0a:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   25a0c:	f7ff be40 	b.w	25690 <free_list_add>

00025a10 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25a10:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   25a12:	f013 0307 	ands.w	r3, r3, #7
   25a16:	d105      	bne.n	25a24 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   25a18:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   25a1a:	2b00      	cmp	r3, #0
   25a1c:	bf0c      	ite	eq
   25a1e:	2000      	moveq	r0, #0
   25a20:	2003      	movne	r0, #3
   25a22:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   25a24:	2b02      	cmp	r3, #2
   25a26:	d105      	bne.n	25a34 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   25a28:	8b40      	ldrh	r0, [r0, #26]
   25a2a:	fab0 f080 	clz	r0, r0
   25a2e:	0940      	lsrs	r0, r0, #5
   25a30:	0080      	lsls	r0, r0, #2
   25a32:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   25a34:	2b01      	cmp	r3, #1
   25a36:	d105      	bne.n	25a44 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   25a38:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   25a3a:	2b00      	cmp	r3, #0
   25a3c:	bf0c      	ite	eq
   25a3e:	2000      	moveq	r0, #0
   25a40:	2005      	movne	r0, #5
   25a42:	4770      	bx	lr
	int evt = EVT_NOP;
   25a44:	2000      	movs	r0, #0
}
   25a46:	4770      	bx	lr

00025a48 <validate_args>:
{
   25a48:	b510      	push	{r4, lr}
   25a4a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   25a4c:	b100      	cbz	r0, 25a50 <validate_args+0x8>
   25a4e:	b911      	cbnz	r1, 25a56 <validate_args+0xe>
		return -EINVAL;
   25a50:	f06f 0015 	mvn.w	r0, #21
}
   25a54:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   25a56:	1d08      	adds	r0, r1, #4
   25a58:	f000 f895 	bl	25b86 <sys_notify_validate>
	if ((rv == 0)
   25a5c:	2800      	cmp	r0, #0
   25a5e:	d1f9      	bne.n	25a54 <validate_args+0xc>
	    && ((cli->notify.flags
   25a60:	68a3      	ldr	r3, [r4, #8]
   25a62:	2b03      	cmp	r3, #3
   25a64:	d9f6      	bls.n	25a54 <validate_args+0xc>
   25a66:	e7f3      	b.n	25a50 <validate_args+0x8>

00025a68 <notify_one>:
{
   25a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25a6c:	460d      	mov	r5, r1
   25a6e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25a70:	4619      	mov	r1, r3
   25a72:	1d28      	adds	r0, r5, #4
{
   25a74:	4690      	mov	r8, r2
   25a76:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25a78:	f000 f899 	bl	25bae <sys_notify_finalize>
	if (cb) {
   25a7c:	4604      	mov	r4, r0
   25a7e:	b138      	cbz	r0, 25a90 <notify_one+0x28>
		cb(mgr, cli, state, res);
   25a80:	4633      	mov	r3, r6
   25a82:	4642      	mov	r2, r8
   25a84:	4629      	mov	r1, r5
   25a86:	4638      	mov	r0, r7
   25a88:	46a4      	mov	ip, r4
}
   25a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   25a8e:	4760      	bx	ip
}
   25a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025a94 <transition_complete>:
{
   25a94:	b410      	push	{r4}
	__asm__ volatile(
   25a96:	f04f 0420 	mov.w	r4, #32
   25a9a:	f3ef 8211 	mrs	r2, BASEPRI
   25a9e:	f384 8812 	msr	BASEPRI_MAX, r4
   25aa2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   25aa6:	6141      	str	r1, [r0, #20]
}
   25aa8:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   25aaa:	2101      	movs	r1, #1
   25aac:	f7f4 b8c8 	b.w	19c40 <process_event>

00025ab0 <onoff_manager_init>:
{
   25ab0:	b538      	push	{r3, r4, r5, lr}
   25ab2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   25ab4:	4605      	mov	r5, r0
   25ab6:	b158      	cbz	r0, 25ad0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   25ab8:	b151      	cbz	r1, 25ad0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   25aba:	680b      	ldr	r3, [r1, #0]
   25abc:	b143      	cbz	r3, 25ad0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   25abe:	684b      	ldr	r3, [r1, #4]
   25ac0:	b133      	cbz	r3, 25ad0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   25ac2:	221c      	movs	r2, #28
   25ac4:	2100      	movs	r1, #0
   25ac6:	f002 fd23 	bl	28510 <memset>
	return 0;
   25aca:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   25acc:	612c      	str	r4, [r5, #16]
}
   25ace:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25ad0:	f06f 0015 	mvn.w	r0, #21
   25ad4:	e7fb      	b.n	25ace <onoff_manager_init+0x1e>

00025ad6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   25ad6:	b570      	push	{r4, r5, r6, lr}
   25ad8:	4605      	mov	r5, r0
   25ada:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   25adc:	f7ff ffb4 	bl	25a48 <validate_args>

	if (rv < 0) {
   25ae0:	1e04      	subs	r4, r0, #0
   25ae2:	db15      	blt.n	25b10 <onoff_request+0x3a>
   25ae4:	f04f 0320 	mov.w	r3, #32
   25ae8:	f3ef 8211 	mrs	r2, BASEPRI
   25aec:	f383 8812 	msr	BASEPRI_MAX, r3
   25af0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   25af4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   25af8:	8b6b      	ldrh	r3, [r5, #26]
   25afa:	8b2c      	ldrh	r4, [r5, #24]
   25afc:	428b      	cmp	r3, r1
   25afe:	f004 0407 	and.w	r4, r4, #7
   25b02:	d107      	bne.n	25b14 <onoff_request+0x3e>
	__asm__ volatile(
   25b04:	f382 8811 	msr	BASEPRI, r2
   25b08:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   25b0c:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   25b10:	4620      	mov	r0, r4
   25b12:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   25b14:	2c02      	cmp	r4, #2
   25b16:	d10c      	bne.n	25b32 <onoff_request+0x5c>
		mgr->refs += 1U;
   25b18:	3301      	adds	r3, #1
   25b1a:	836b      	strh	r3, [r5, #26]
   25b1c:	f382 8811 	msr	BASEPRI, r2
   25b20:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   25b24:	2300      	movs	r3, #0
   25b26:	4622      	mov	r2, r4
   25b28:	4631      	mov	r1, r6
   25b2a:	4628      	mov	r0, r5
   25b2c:	f7ff ff9c 	bl	25a68 <notify_one>
   25b30:	e7ee      	b.n	25b10 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   25b32:	2c06      	cmp	r4, #6
   25b34:	d814      	bhi.n	25b60 <onoff_request+0x8a>
   25b36:	e8df f004 	tbb	[pc, r4]
   25b3a:	1304      	.short	0x1304
   25b3c:	1a041313 	.word	0x1a041313
   25b40:	04          	.byte	0x04
   25b41:	00          	.byte	0x00
	parent->next = child;
   25b42:	2300      	movs	r3, #0
   25b44:	6033      	str	r3, [r6, #0]
	return list->tail;
   25b46:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   25b48:	b93b      	cbnz	r3, 25b5a <onoff_request+0x84>
	list->head = node;
   25b4a:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   25b4e:	b9ac      	cbnz	r4, 25b7c <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   25b50:	2102      	movs	r1, #2
   25b52:	4628      	mov	r0, r5
   25b54:	f7f4 f874 	bl	19c40 <process_event>
   25b58:	e7da      	b.n	25b10 <onoff_request+0x3a>
	parent->next = child;
   25b5a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   25b5c:	606e      	str	r6, [r5, #4]
}
   25b5e:	e7f6      	b.n	25b4e <onoff_request+0x78>
   25b60:	f382 8811 	msr	BASEPRI, r2
   25b64:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   25b68:	f06f 0404 	mvn.w	r4, #4
   25b6c:	e7d0      	b.n	25b10 <onoff_request+0x3a>
   25b6e:	f382 8811 	msr	BASEPRI, r2
   25b72:	f3bf 8f6f 	isb	sy
   25b76:	f06f 0485 	mvn.w	r4, #133	; 0x85
   25b7a:	e7c9      	b.n	25b10 <onoff_request+0x3a>
   25b7c:	f382 8811 	msr	BASEPRI, r2
   25b80:	f3bf 8f6f 	isb	sy
		if (notify) {
   25b84:	e7c4      	b.n	25b10 <onoff_request+0x3a>

00025b86 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   25b86:	4603      	mov	r3, r0
   25b88:	b140      	cbz	r0, 25b9c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25b8a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   25b8c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   25b90:	2a02      	cmp	r2, #2
   25b92:	d006      	beq.n	25ba2 <sys_notify_validate+0x1c>
   25b94:	2a03      	cmp	r2, #3
   25b96:	d004      	beq.n	25ba2 <sys_notify_validate+0x1c>
   25b98:	2a01      	cmp	r2, #1
   25b9a:	d005      	beq.n	25ba8 <sys_notify_validate+0x22>
   25b9c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   25ba0:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   25ba2:	681a      	ldr	r2, [r3, #0]
   25ba4:	2a00      	cmp	r2, #0
   25ba6:	d0f9      	beq.n	25b9c <sys_notify_validate+0x16>
		notify->result = 0;
   25ba8:	2000      	movs	r0, #0
   25baa:	6098      	str	r0, [r3, #8]
   25bac:	4770      	bx	lr

00025bae <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   25bae:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25bb0:	6842      	ldr	r2, [r0, #4]
   25bb2:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   25bb4:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   25bb8:	2a02      	cmp	r2, #2
   25bba:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   25bbe:	6081      	str	r1, [r0, #8]
	switch (method) {
   25bc0:	d007      	beq.n	25bd2 <sys_notify_finalize+0x24>
   25bc2:	2a03      	cmp	r2, #3
   25bc4:	d002      	beq.n	25bcc <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   25bc6:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   25bc8:	2000      	movs	r0, #0
   25bca:	e001      	b.n	25bd0 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   25bcc:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   25bce:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   25bd0:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   25bd2:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   25bd4:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   25bd6:	2800      	cmp	r0, #0
   25bd8:	d0f6      	beq.n	25bc8 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   25bda:	f7fe ff8b 	bl	24af4 <z_impl_k_poll_signal_raise>
   25bde:	e7f3      	b.n	25bc8 <sys_notify_finalize+0x1a>

00025be0 <outs>:
{
   25be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25be4:	4607      	mov	r7, r0
   25be6:	4688      	mov	r8, r1
   25be8:	4615      	mov	r5, r2
   25bea:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   25bec:	4614      	mov	r4, r2
   25bee:	42b4      	cmp	r4, r6
   25bf0:	d305      	bcc.n	25bfe <outs+0x1e>
   25bf2:	b10e      	cbz	r6, 25bf8 <outs+0x18>
	return (int)count;
   25bf4:	1b60      	subs	r0, r4, r5
   25bf6:	e008      	b.n	25c0a <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   25bf8:	7823      	ldrb	r3, [r4, #0]
   25bfa:	2b00      	cmp	r3, #0
   25bfc:	d0fa      	beq.n	25bf4 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   25bfe:	4641      	mov	r1, r8
   25c00:	f814 0b01 	ldrb.w	r0, [r4], #1
   25c04:	47b8      	blx	r7
		if (rc < 0) {
   25c06:	2800      	cmp	r0, #0
   25c08:	daf1      	bge.n	25bee <outs+0xe>
}
   25c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025c0e <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   25c0e:	68c3      	ldr	r3, [r0, #12]
   25c10:	6802      	ldr	r2, [r0, #0]
   25c12:	4293      	cmp	r3, r2
   25c14:	d904      	bls.n	25c20 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   25c16:	3b01      	subs	r3, #1
   25c18:	1a9a      	subs	r2, r3, r2

		return false;
   25c1a:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   25c1c:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   25c1e:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   25c20:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
   25c22:	b913      	cbnz	r3, 25c2a <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   25c24:	3801      	subs	r0, #1
   25c26:	1a82      	subs	r2, r0, r2
		return false;
   25c28:	e7f7      	b.n	25c1a <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   25c2a:	1a82      	subs	r2, r0, r2
	return true;
   25c2c:	2001      	movs	r0, #1
   25c2e:	e7f5      	b.n	25c1c <free_space+0xe>

00025c30 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   25c30:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   25c32:	a901      	add	r1, sp, #4
{
   25c34:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   25c36:	f7ff ffea 	bl	25c0e <free_space>
   25c3a:	b120      	cbz	r0, 25c46 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   25c3c:	9b01      	ldr	r3, [sp, #4]
   25c3e:	68e2      	ldr	r2, [r4, #12]
   25c40:	3b01      	subs	r3, #1
   25c42:	4413      	add	r3, r2
   25c44:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   25c46:	6a20      	ldr	r0, [r4, #32]
   25c48:	9b01      	ldr	r3, [sp, #4]
   25c4a:	1ac0      	subs	r0, r0, r3
}
   25c4c:	3801      	subs	r0, #1
   25c4e:	b002      	add	sp, #8
   25c50:	bd10      	pop	{r4, pc}

00025c52 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   25c52:	b510      	push	{r4, lr}
   25c54:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   25c56:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   25c58:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   25c5a:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   25c5c:	07d2      	lsls	r2, r2, #31
   25c5e:	d502      	bpl.n	25c66 <idx_inc+0x14>
		return i & (buffer->size - 1);
   25c60:	3b01      	subs	r3, #1
   25c62:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   25c64:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   25c66:	4298      	cmp	r0, r3
   25c68:	bf28      	it	cs
   25c6a:	1ac0      	subcs	r0, r0, r3
   25c6c:	e7fa      	b.n	25c64 <idx_inc+0x12>

00025c6e <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   25c6e:	b538      	push	{r3, r4, r5, lr}
   25c70:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   25c72:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   25c74:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   25c76:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   25c78:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   25c7c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25c80:	6801      	ldr	r1, [r0, #0]
   25c82:	462a      	mov	r2, r5
{
   25c84:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25c86:	f7ff ffe4 	bl	25c52 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25c8a:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25c8c:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25c8e:	462a      	mov	r2, r5
   25c90:	4620      	mov	r0, r4
   25c92:	f7ff ffde 	bl	25c52 <idx_inc>
   25c96:	6060      	str	r0, [r4, #4]
}
   25c98:	bd38      	pop	{r3, r4, r5, pc}

00025c9a <max_utilization_update>:
{
   25c9a:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   25c9c:	6903      	ldr	r3, [r0, #16]
{
   25c9e:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   25ca0:	075b      	lsls	r3, r3, #29
   25ca2:	d506      	bpl.n	25cb2 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   25ca4:	6a45      	ldr	r5, [r0, #36]	; 0x24
   25ca6:	f7ff ffc3 	bl	25c30 <get_usage>
   25caa:	4285      	cmp	r5, r0
   25cac:	bf2c      	ite	cs
   25cae:	6265      	strcs	r5, [r4, #36]	; 0x24
   25cb0:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   25cb2:	bd38      	pop	{r3, r4, r5, pc}

00025cb4 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   25cb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25cb8:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   25cba:	2300      	movs	r3, #0
   25cbc:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   25cbe:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   25cc2:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   25cc6:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   25cc8:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   25ccc:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   25cce:	f003 0303 	and.w	r3, r3, #3
   25cd2:	2b02      	cmp	r3, #2
{
   25cd4:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   25cd6:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   25cda:	d103      	bne.n	25ce4 <drop_item_locked+0x30>
		return item->skip.len;
   25cdc:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   25ce0:	08ad      	lsrs	r5, r5, #2
   25ce2:	d12e      	bne.n	25d42 <drop_item_locked+0x8e>
   25ce4:	4630      	mov	r0, r6
   25ce6:	69a3      	ldr	r3, [r4, #24]
   25ce8:	4798      	blx	r3
   25cea:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   25cec:	f1b8 0f00 	cmp.w	r8, #0
   25cf0:	d038      	beq.n	25d64 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   25cf2:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   25cf6:	079b      	lsls	r3, r3, #30
   25cf8:	d531      	bpl.n	25d5e <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   25cfa:	4620      	mov	r0, r4
   25cfc:	f10b 0101 	add.w	r1, fp, #1
   25d00:	f7ff ffb5 	bl	25c6e <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   25d04:	6861      	ldr	r1, [r4, #4]
   25d06:	462a      	mov	r2, r5
   25d08:	4620      	mov	r0, r4
   25d0a:	f7ff ffa2 	bl	25c52 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   25d0e:	6821      	ldr	r1, [r4, #0]
   25d10:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   25d12:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   25d14:	4620      	mov	r0, r4
   25d16:	f7ff ff9c 	bl	25c52 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   25d1a:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   25d1c:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   25d1e:	68e1      	ldr	r1, [r4, #12]
   25d20:	4620      	mov	r0, r4
   25d22:	f7ff ff96 	bl	25c52 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   25d26:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   25d28:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   25d2c:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   25d30:	f002 0203 	and.w	r2, r2, #3
   25d34:	2a02      	cmp	r2, #2
   25d36:	d10e      	bne.n	25d56 <drop_item_locked+0xa2>
		return item->skip.len;
   25d38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   25d3c:	089b      	lsrs	r3, r3, #2
   25d3e:	d00a      	beq.n	25d56 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   25d40:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   25d42:	68e1      	ldr	r1, [r4, #12]
   25d44:	462a      	mov	r2, r5
   25d46:	4620      	mov	r0, r4
   25d48:	f7ff ff83 	bl	25c52 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   25d4c:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
   25d50:	4630      	mov	r0, r6
   25d52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   25d56:	4630      	mov	r0, r6
   25d58:	69a3      	ldr	r3, [r4, #24]
   25d5a:	4798      	blx	r3
   25d5c:	4405      	add	r5, r0
			*user_packet = true;
   25d5e:	2301      	movs	r3, #1
   25d60:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   25d62:	e7ee      	b.n	25d42 <drop_item_locked+0x8e>
		item = NULL;
   25d64:	4646      	mov	r6, r8
	return item;
   25d66:	e7f3      	b.n	25d50 <drop_item_locked+0x9c>

00025d68 <mpsc_pbuf_init>:
{
   25d68:	b538      	push	{r3, r4, r5, lr}
   25d6a:	460d      	mov	r5, r1
   25d6c:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   25d6e:	221c      	movs	r2, #28
   25d70:	2100      	movs	r1, #0
   25d72:	f002 fbcd 	bl	28510 <memset>
	buffer->max_usage = 0;
   25d76:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
   25d78:	68eb      	ldr	r3, [r5, #12]
   25d7a:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   25d7c:	68ab      	ldr	r3, [r5, #8]
   25d7e:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   25d80:	682b      	ldr	r3, [r5, #0]
   25d82:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   25d84:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
   25d86:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   25d88:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
   25d8a:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   25d8c:	b123      	cbz	r3, 25d98 <mpsc_pbuf_init+0x30>
   25d8e:	1e59      	subs	r1, r3, #1
   25d90:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   25d92:	bf08      	it	eq
   25d94:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   25d98:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   25d9a:	2201      	movs	r2, #1
   25d9c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   25da0:	2100      	movs	r1, #0
}
   25da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25da6:	f002 b8e9 	b.w	27f7c <z_impl_k_sem_init>

00025daa <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   25daa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   25dae:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   25db0:	6a03      	ldr	r3, [r0, #32]
{
   25db2:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
   25db4:	3b01      	subs	r3, #1
   25db6:	428b      	cmp	r3, r1
{
   25db8:	460e      	mov	r6, r1
   25dba:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
   25dbc:	d351      	bcc.n	25e62 <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
   25dbe:	2500      	movs	r5, #0
	__asm__ volatile(
   25dc0:	f04f 0320 	mov.w	r3, #32
   25dc4:	f3ef 8911 	mrs	r9, BASEPRI
   25dc8:	f383 8812 	msr	BASEPRI_MAX, r3
   25dcc:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
   25dd0:	4620      	mov	r0, r4
   25dd2:	a901      	add	r1, sp, #4
   25dd4:	f7ff ff1b 	bl	25c0e <free_space>

		if (free_wlen >= wlen) {
   25dd8:	f8dd a004 	ldr.w	sl, [sp, #4]
   25ddc:	45b2      	cmp	sl, r6
   25dde:	d317      	bcc.n	25e10 <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   25de0:	6822      	ldr	r2, [r4, #0]
			item =
   25de2:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   25de4:	4620      	mov	r0, r4
			item->hdr.valid = 0;
   25de6:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
   25dea:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.valid = 0;
   25dee:	f021 0103 	bic.w	r1, r1, #3
   25df2:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   25df6:	6821      	ldr	r1, [r4, #0]
   25df8:	4632      	mov	r2, r6
   25dfa:	f7ff ff2a 	bl	25c52 <idx_inc>
   25dfe:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   25e00:	f389 8811 	msr	BASEPRI, r9
   25e04:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   25e08:	4628      	mov	r0, r5
   25e0a:	b002      	add	sp, #8
   25e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
   25e10:	b150      	cbz	r0, 25e28 <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
   25e12:	4651      	mov	r1, sl
   25e14:	4620      	mov	r0, r4
   25e16:	f7ff ff2a 	bl	25c6e <add_skip_item>
   25e1a:	f389 8811 	msr	BASEPRI, r9
   25e1e:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   25e22:	2d00      	cmp	r5, #0
   25e24:	d0cb      	beq.n	25dbe <mpsc_pbuf_alloc+0x14>
   25e26:	e033      	b.n	25e90 <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   25e28:	ea57 0308 	orrs.w	r3, r7, r8
   25e2c:	d020      	beq.n	25e70 <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
   25e2e:	f002 f805 	bl	27e3c <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   25e32:	b9e8      	cbnz	r0, 25e70 <mpsc_pbuf_alloc+0xc6>
   25e34:	f389 8811 	msr	BASEPRI, r9
   25e38:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   25e3c:	463a      	mov	r2, r7
   25e3e:	4643      	mov	r3, r8
   25e40:	f104 0028 	add.w	r0, r4, #40	; 0x28
   25e44:	f7fd ff8e 	bl	23d64 <z_impl_k_sem_take>
	__asm__ volatile(
   25e48:	f04f 0220 	mov.w	r2, #32
   25e4c:	f3ef 8311 	mrs	r3, BASEPRI
   25e50:	f382 8812 	msr	BASEPRI_MAX, r2
   25e54:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   25e58:	b128      	cbz	r0, 25e66 <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
   25e5a:	f383 8811 	msr	BASEPRI, r3
   25e5e:	f3bf 8f6f 	isb	sy
		return NULL;
   25e62:	2500      	movs	r5, #0
   25e64:	e7d0      	b.n	25e08 <mpsc_pbuf_alloc+0x5e>
   25e66:	f383 8811 	msr	BASEPRI, r3
   25e6a:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   25e6e:	e7d8      	b.n	25e22 <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   25e70:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   25e72:	4651      	mov	r1, sl
   25e74:	4620      	mov	r0, r4
   25e76:	f10d 0303 	add.w	r3, sp, #3
   25e7a:	f3c2 0240 	ubfx	r2, r2, #1, #1
   25e7e:	f7ff ff19 	bl	25cb4 <drop_item_locked>
   25e82:	4605      	mov	r5, r0
   25e84:	f389 8811 	msr	BASEPRI, r9
   25e88:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   25e8c:	2800      	cmp	r0, #0
   25e8e:	d0e8      	beq.n	25e62 <mpsc_pbuf_alloc+0xb8>
   25e90:	f89d 3003 	ldrb.w	r3, [sp, #3]
   25e94:	2b00      	cmp	r3, #0
   25e96:	d093      	beq.n	25dc0 <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
   25e98:	6963      	ldr	r3, [r4, #20]
   25e9a:	2b00      	cmp	r3, #0
   25e9c:	d08f      	beq.n	25dbe <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
   25e9e:	4629      	mov	r1, r5
   25ea0:	4620      	mov	r0, r4
   25ea2:	4798      	blx	r3
   25ea4:	e78b      	b.n	25dbe <mpsc_pbuf_alloc+0x14>

00025ea6 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   25ea6:	b570      	push	{r4, r5, r6, lr}
   25ea8:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   25eaa:	6983      	ldr	r3, [r0, #24]
   25eac:	4608      	mov	r0, r1
{
   25eae:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   25eb0:	4798      	blx	r3
   25eb2:	4602      	mov	r2, r0
	__asm__ volatile(
   25eb4:	f04f 0320 	mov.w	r3, #32
   25eb8:	f3ef 8611 	mrs	r6, BASEPRI
   25ebc:	f383 8812 	msr	BASEPRI_MAX, r3
   25ec0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   25ec4:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25ec6:	4620      	mov	r0, r4
	item->hdr.valid = 1;
   25ec8:	f043 0301 	orr.w	r3, r3, #1
   25ecc:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25ece:	6861      	ldr	r1, [r4, #4]
   25ed0:	f7ff febf 	bl	25c52 <idx_inc>
   25ed4:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   25ed6:	4620      	mov	r0, r4
   25ed8:	f7ff fedf 	bl	25c9a <max_utilization_update>
	__asm__ volatile(
   25edc:	f386 8811 	msr	BASEPRI, r6
   25ee0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   25ee4:	bd70      	pop	{r4, r5, r6, pc}

00025ee6 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   25ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25ee8:	4604      	mov	r4, r0
	__asm__ volatile(
   25eea:	f04f 0320 	mov.w	r3, #32
   25eee:	f3ef 8611 	mrs	r6, BASEPRI
   25ef2:	f383 8812 	msr	BASEPRI_MAX, r3
   25ef6:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   25efa:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   25efe:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   25f00:	bf88      	it	hi
   25f02:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   25f04:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
   25f06:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   25f08:	b132      	cbz	r2, 25f18 <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
   25f0a:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
   25f0e:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   25f12:	f012 0003 	ands.w	r0, r2, #3
   25f16:	d105      	bne.n	25f24 <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
   25f18:	f386 8811 	msr	BASEPRI, r6
   25f1c:	f3bf 8f6f 	isb	sy
			item = NULL;
   25f20:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   25f22:	e02e      	b.n	25f82 <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
   25f24:	2802      	cmp	r0, #2
   25f26:	d103      	bne.n	25f30 <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
   25f28:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   25f2c:	08ad      	lsrs	r5, r5, #2
   25f2e:	d105      	bne.n	25f3c <mpsc_pbuf_claim+0x56>
   25f30:	07d0      	lsls	r0, r2, #31
   25f32:	d414      	bmi.n	25f5e <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
   25f34:	4638      	mov	r0, r7
   25f36:	69a3      	ldr	r3, [r4, #24]
   25f38:	4798      	blx	r3
   25f3a:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   25f3c:	68a1      	ldr	r1, [r4, #8]
   25f3e:	462a      	mov	r2, r5
   25f40:	4620      	mov	r0, r4
   25f42:	f7ff fe86 	bl	25c52 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   25f46:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   25f48:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   25f4a:	462a      	mov	r2, r5
   25f4c:	4620      	mov	r0, r4
   25f4e:	f7ff fe80 	bl	25c52 <idx_inc>
				buffer->rd_idx =
   25f52:	60e0      	str	r0, [r4, #12]
   25f54:	f386 8811 	msr	BASEPRI, r6
   25f58:	f3bf 8f6f 	isb	sy
	} while (cont);
   25f5c:	e7c5      	b.n	25eea <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   25f5e:	f042 0202 	orr.w	r2, r2, #2
   25f62:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   25f66:	69a3      	ldr	r3, [r4, #24]
   25f68:	4638      	mov	r0, r7
   25f6a:	68a5      	ldr	r5, [r4, #8]
   25f6c:	4798      	blx	r3
   25f6e:	4629      	mov	r1, r5
   25f70:	4602      	mov	r2, r0
   25f72:	4620      	mov	r0, r4
   25f74:	f7ff fe6d 	bl	25c52 <idx_inc>
				buffer->tmp_rd_idx =
   25f78:	60a0      	str	r0, [r4, #8]
   25f7a:	f386 8811 	msr	BASEPRI, r6
   25f7e:	f3bf 8f6f 	isb	sy
}
   25f82:	4638      	mov	r0, r7
   25f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025f86 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   25f86:	b570      	push	{r4, r5, r6, lr}
   25f88:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   25f8a:	6983      	ldr	r3, [r0, #24]
   25f8c:	4608      	mov	r0, r1
{
   25f8e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   25f90:	4798      	blx	r3
   25f92:	4602      	mov	r2, r0
	__asm__ volatile(
   25f94:	f04f 0320 	mov.w	r3, #32
   25f98:	f3ef 8611 	mrs	r6, BASEPRI
   25f9c:	f383 8812 	msr	BASEPRI_MAX, r3
   25fa0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   25fa4:	782b      	ldrb	r3, [r5, #0]
   25fa6:	f36f 0300 	bfc	r3, #0, #1
   25faa:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   25fac:	6923      	ldr	r3, [r4, #16]
   25fae:	079b      	lsls	r3, r3, #30
   25fb0:	d505      	bpl.n	25fbe <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   25fb2:	68e1      	ldr	r1, [r4, #12]
   25fb4:	69e3      	ldr	r3, [r4, #28]
   25fb6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   25fba:	429d      	cmp	r5, r3
   25fbc:	d112      	bne.n	25fe4 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   25fbe:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   25fc0:	4620      	mov	r0, r4
		witem->hdr.busy = 0;
   25fc2:	f36f 0341 	bfc	r3, #1, #1
   25fc6:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   25fc8:	68e1      	ldr	r1, [r4, #12]
   25fca:	f7ff fe42 	bl	25c52 <idx_inc>
   25fce:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   25fd0:	f386 8811 	msr	BASEPRI, r6
   25fd4:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   25fd8:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   25fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25fe0:	f7fd be9a 	b.w	23d18 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   25fe4:	682b      	ldr	r3, [r5, #0]
   25fe6:	f360 039f 	bfi	r3, r0, #2, #30
   25fea:	602b      	str	r3, [r5, #0]
   25fec:	e7f0      	b.n	25fd0 <mpsc_pbuf_free+0x4a>

00025fee <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   25fee:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   25ff2:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   25ff4:	bf88      	it	hi
   25ff6:	6a02      	ldrhi	r2, [r0, #32]
   25ff8:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   25ffa:	1e18      	subs	r0, r3, #0
   25ffc:	bf18      	it	ne
   25ffe:	2001      	movne	r0, #1
   26000:	4770      	bx	lr

00026002 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   26002:	4770      	bx	lr

00026004 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   26004:	2806      	cmp	r0, #6
   26006:	d108      	bne.n	2601a <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   26008:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2600c:	2201      	movs	r2, #1
   2600e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   26012:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   26016:	bf20      	wfe
    while (true)
   26018:	e7fd      	b.n	26016 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2601a:	4770      	bx	lr

0002601c <pm_state_exit_post_ops>:
   2601c:	2300      	movs	r3, #0
   2601e:	f383 8811 	msr	BASEPRI, r3
   26022:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   26026:	4770      	bx	lr

00026028 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   26028:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   2602a:	075b      	lsls	r3, r3, #29
   2602c:	d40b      	bmi.n	26046 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2602e:	6803      	ldr	r3, [r0, #0]
   26030:	8842      	ldrh	r2, [r0, #2]
   26032:	f3c3 2349 	ubfx	r3, r3, #9, #10
   26036:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   2603a:	1898      	adds	r0, r3, r2
   2603c:	3017      	adds	r0, #23
   2603e:	f020 0007 	bic.w	r0, r0, #7
   26042:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   26044:	4770      	bx	lr
	return 0;
   26046:	2000      	movs	r0, #0
}
   26048:	4770      	bx	lr

0002604a <dummy_timestamp>:
}
   2604a:	2000      	movs	r0, #0
   2604c:	4770      	bx	lr

0002604e <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   2604e:	f000 bbca 	b.w	267e6 <sys_clock_cycle_get_32>

00026052 <atomic_inc>:
{
   26052:	4603      	mov	r3, r0
}
   26054:	e8d3 0fef 	ldaex	r0, [r3]
   26058:	1c42      	adds	r2, r0, #1
   2605a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2605e:	2900      	cmp	r1, #0
   26060:	d1f8      	bne.n	26054 <atomic_inc+0x2>
   26062:	4770      	bx	lr

00026064 <z_log_vprintk>:
{
   26064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   26066:	2300      	movs	r3, #0
   26068:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2606c:	461a      	mov	r2, r3
   2606e:	4619      	mov	r1, r3
   26070:	4618      	mov	r0, r3
   26072:	e9cd 3300 	strd	r3, r3, [sp]
   26076:	f7f4 fdf1 	bl	1ac5c <z_impl_z_log_msg_runtime_vcreate>
}
   2607a:	b005      	add	sp, #20
   2607c:	f85d fb04 	ldr.w	pc, [sp], #4

00026080 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   26080:	2001      	movs	r0, #1
   26082:	f7f4 bbe3 	b.w	1a84c <z_log_dropped>

00026086 <z_log_get_tag>:
}
   26086:	2000      	movs	r0, #0
   26088:	4770      	bx	lr

0002608a <z_cbprintf_cpy>:
{
   2608a:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   2608c:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   26090:	1b9b      	subs	r3, r3, r6
   26092:	428b      	cmp	r3, r1
{
   26094:	460c      	mov	r4, r1
   26096:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   26098:	d30a      	bcc.n	260b0 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   2609a:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2609c:	460a      	mov	r2, r1
   2609e:	4601      	mov	r1, r0
   260a0:	1998      	adds	r0, r3, r6
   260a2:	f002 fa28 	bl	284f6 <memcpy>
	return len;
   260a6:	4620      	mov	r0, r4
	desc->off += len;
   260a8:	68ab      	ldr	r3, [r5, #8]
   260aa:	4423      	add	r3, r4
   260ac:	60ab      	str	r3, [r5, #8]
}
   260ae:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   260b0:	f06f 001b 	mvn.w	r0, #27
   260b4:	e7fb      	b.n	260ae <z_cbprintf_cpy+0x24>

000260b6 <z_log_msg_finalize>:
{
   260b6:	b570      	push	{r4, r5, r6, lr}
   260b8:	460e      	mov	r6, r1
   260ba:	4615      	mov	r5, r2
   260bc:	4619      	mov	r1, r3
	if (!msg) {
   260be:	4604      	mov	r4, r0
   260c0:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   260c4:	b918      	cbnz	r0, 260ce <z_log_msg_finalize+0x18>
}
   260c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   260ca:	f7f4 bbbf 	b.w	1a84c <z_log_dropped>
	if (data) {
   260ce:	b12b      	cbz	r3, 260dc <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   260d0:	3010      	adds	r0, #16
   260d2:	f3c5 2349 	ubfx	r3, r5, #9, #10
   260d6:	4418      	add	r0, r3
   260d8:	f002 fa0d 	bl	284f6 <memcpy>
	msg->hdr.source = source;
   260dc:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   260e0:	4620      	mov	r0, r4
}
   260e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   260e6:	f7f4 bd31 	b.w	1ab4c <z_log_msg_commit>

000260ea <buffer_write>:
{
   260ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   260ec:	4606      	mov	r6, r0
   260ee:	460d      	mov	r5, r1
   260f0:	4614      	mov	r4, r2
   260f2:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   260f4:	4621      	mov	r1, r4
   260f6:	4628      	mov	r0, r5
   260f8:	463a      	mov	r2, r7
   260fa:	47b0      	blx	r6
	} while (len != 0);
   260fc:	1a24      	subs	r4, r4, r0
		buf += processed;
   260fe:	4405      	add	r5, r0
	} while (len != 0);
   26100:	d1f8      	bne.n	260f4 <buffer_write+0xa>
}
   26102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026104 <cbvprintf>:
{
   26104:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   26106:	2400      	movs	r4, #0
   26108:	9400      	str	r4, [sp, #0]
   2610a:	f7f3 ff09 	bl	19f20 <z_cbvprintf_impl>
}
   2610e:	b002      	add	sp, #8
   26110:	bd10      	pop	{r4, pc}

00026112 <log_output_flush>:
{
   26112:	b510      	push	{r4, lr}
		     output->control_block->offset,
   26114:	6842      	ldr	r2, [r0, #4]
{
   26116:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   26118:	e9d2 2300 	ldrd	r2, r3, [r2]
   2611c:	6881      	ldr	r1, [r0, #8]
   2611e:	6800      	ldr	r0, [r0, #0]
   26120:	f7ff ffe3 	bl	260ea <buffer_write>
	output->control_block->offset = 0;
   26124:	2200      	movs	r2, #0
   26126:	6863      	ldr	r3, [r4, #4]
   26128:	601a      	str	r2, [r3, #0]
}
   2612a:	bd10      	pop	{r4, pc}

0002612c <out_func>:
{
   2612c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   2612e:	684b      	ldr	r3, [r1, #4]
{
   26130:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   26132:	681a      	ldr	r2, [r3, #0]
   26134:	68cb      	ldr	r3, [r1, #12]
{
   26136:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   26138:	429a      	cmp	r2, r3
   2613a:	d102      	bne.n	26142 <out_func+0x16>
		log_output_flush(out_ctx);
   2613c:	4608      	mov	r0, r1
   2613e:	f7ff ffe8 	bl	26112 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26142:	6863      	ldr	r3, [r4, #4]
   26144:	e8d3 2fef 	ldaex	r2, [r3]
   26148:	1c51      	adds	r1, r2, #1
   2614a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   2614e:	2800      	cmp	r0, #0
   26150:	d1f8      	bne.n	26144 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   26152:	68a3      	ldr	r3, [r4, #8]
}
   26154:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   26156:	549d      	strb	r5, [r3, r2]
}
   26158:	bd38      	pop	{r3, r4, r5, pc}

0002615a <cr_out_func>:
	if (c == '\n') {
   2615a:	280a      	cmp	r0, #10
{
   2615c:	b538      	push	{r3, r4, r5, lr}
   2615e:	4604      	mov	r4, r0
   26160:	460d      	mov	r5, r1
	if (c == '\n') {
   26162:	d102      	bne.n	2616a <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   26164:	200d      	movs	r0, #13
   26166:	f7ff ffe1 	bl	2612c <out_func>
	out_func(c, ctx);
   2616a:	4629      	mov	r1, r5
   2616c:	4620      	mov	r0, r4
   2616e:	f7ff ffdd 	bl	2612c <out_func>
}
   26172:	2000      	movs	r0, #0
   26174:	bd38      	pop	{r3, r4, r5, pc}

00026176 <log_backend_uart_init>:
}
   26176:	4770      	bx	lr

00026178 <adp536x_charger_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_CURRENT_SET,
   26178:	f000 021f 	and.w	r2, r0, #31
   2617c:	211f      	movs	r1, #31
   2617e:	2004      	movs	r0, #4
   26180:	f7f5 b958 	b.w	1b434 <adp536x_reg_write_mask>

00026184 <adp536x_vbus_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_VBUS_ILIM,
   26184:	f000 0207 	and.w	r2, r0, #7
   26188:	2107      	movs	r1, #7
   2618a:	2002      	movs	r0, #2
   2618c:	f7f5 b952 	b.w	1b434 <adp536x_reg_write_mask>

00026190 <adp536x_charging_enable>:
{
   26190:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_CHG_FUNC,
   26192:	2101      	movs	r1, #1
   26194:	2007      	movs	r0, #7
   26196:	f7f5 b94d 	b.w	1b434 <adp536x_reg_write_mask>

0002619a <adp536x_oc_chg_current_set>:
					ADP536X_BAT_OC_CHG_OC_CHG(value));
   2619a:	0142      	lsls	r2, r0, #5
	return adp536x_reg_write_mask(ADP536X_BAT_OC_CHG,
   2619c:	21e0      	movs	r1, #224	; 0xe0
   2619e:	2015      	movs	r0, #21
   261a0:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   261a4:	f7f5 b946 	b.w	1b434 <adp536x_reg_write_mask>

000261a8 <adp536x_buck_1v8_set>:
	return adp536x_reg_write_mask(ADP536X_BUCK_OUTPUT,
   261a8:	2218      	movs	r2, #24
   261aa:	213f      	movs	r1, #63	; 0x3f
   261ac:	202a      	movs	r0, #42	; 0x2a
   261ae:	f7f5 b941 	b.w	1b434 <adp536x_reg_write_mask>

000261b2 <adp536x_buck_discharge_set>:
				ADP536X_BUCK_CFG_DISCHG_BUCK(enable));
   261b2:	0042      	lsls	r2, r0, #1
	return adp536x_reg_write_mask(ADP536X_BUCK_CFG,
   261b4:	2102      	movs	r1, #2
   261b6:	2029      	movs	r0, #41	; 0x29
   261b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   261bc:	f7f5 b93a 	b.w	1b434 <adp536x_reg_write_mask>

000261c0 <adp536x_buckbst_3v3_set>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_OUTPUT,
   261c0:	2213      	movs	r2, #19
   261c2:	213f      	movs	r1, #63	; 0x3f
   261c4:	202c      	movs	r0, #44	; 0x2c
   261c6:	f7f5 b935 	b.w	1b434 <adp536x_reg_write_mask>

000261ca <adp536x_buckbst_enable>:
{
   261ca:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_BUCKBST_CFG,
   261cc:	2101      	movs	r1, #1
   261ce:	202b      	movs	r0, #43	; 0x2b
   261d0:	f7f5 b930 	b.w	1b434 <adp536x_reg_write_mask>

000261d4 <adp536x_fg_set_mode>:
int adp536x_fg_set_mode(enum adp536x_fg_enabled en, enum adp536x_fg_mode mode)
{
	return adp536x_reg_write_mask(
		ADP536X_FUEL_GAUGE_MODE,
		ADP536X_FUEL_GAUGE_MODE_FG_MODE_MSK | ADP536X_FUEL_GAUGE_EN_FG_MSK,
		ADP536X_FUEL_GAUGE_MODE_FG_MODE(mode) | ADP536X_FUEL_GAUGE_EN_FG(en));
   261d4:	0049      	lsls	r1, r1, #1
   261d6:	f001 0102 	and.w	r1, r1, #2
	return adp536x_reg_write_mask(
   261da:	f000 0201 	and.w	r2, r0, #1
   261de:	430a      	orrs	r2, r1
   261e0:	2027      	movs	r0, #39	; 0x27
   261e2:	2103      	movs	r1, #3
   261e4:	f7f5 b926 	b.w	1b434 <adp536x_reg_write_mask>

000261e8 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   261e8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   261ea:	6800      	ldr	r0, [r0, #0]
   261ec:	f7f5 b978 	b.w	1b4e0 <z_arm_fatal_error>

000261f0 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   261f0:	2100      	movs	r1, #0
   261f2:	2001      	movs	r0, #1
   261f4:	f7f5 b974 	b.w	1b4e0 <z_arm_fatal_error>

000261f8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   261f8:	b508      	push	{r3, lr}
	handler();
   261fa:	f7f5 fa1d 	bl	1b638 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   261fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   26202:	f7f5 bae7 	b.w	1b7d4 <z_arm_exc_exit>

00026206 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   26206:	6e83      	ldr	r3, [r0, #104]	; 0x68
   26208:	f383 880b 	msr	PSPLIM, r3
}
   2620c:	4770      	bx	lr

0002620e <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   2620e:	2300      	movs	r3, #0
   26210:	f7f4 bcd0 	b.w	1abb4 <z_impl_z_log_msg_static_create>

00026214 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   26214:	4770      	bx	lr

00026216 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   26216:	4770      	bx	lr

00026218 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   26218:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   2621c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   26220:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   26222:	bf08      	it	eq
   26224:	f06f 0015 	mvneq.w	r0, #21
   26228:	4770      	bx	lr

0002622a <mpu_configure_region>:
{
   2622a:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   2622c:	890a      	ldrh	r2, [r1, #8]
   2622e:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   26230:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   26232:	684c      	ldr	r4, [r1, #4]
   26234:	f002 021f 	and.w	r2, r2, #31
{
   26238:	b085      	sub	sp, #20
   2623a:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   2623e:	9300      	str	r3, [sp, #0]
   26240:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   26244:	f023 031f 	bic.w	r3, r3, #31
   26248:	1e62      	subs	r2, r4, #1
   2624a:	4413      	add	r3, r2
   2624c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   26250:	280f      	cmp	r0, #15
   26252:	9303      	str	r3, [sp, #12]
   26254:	d904      	bls.n	26260 <mpu_configure_region+0x36>
}
   26256:	b005      	add	sp, #20
   26258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2625c:	f7f5 be88 	b.w	1bf70 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   26260:	4669      	mov	r1, sp
   26262:	f7f5 fe6b 	bl	1bf3c <region_init>
}
   26266:	b005      	add	sp, #20
   26268:	bd30      	pop	{r4, r5, pc}

0002626a <malloc_prepare>:
}
   2626a:	2000      	movs	r0, #0
   2626c:	4770      	bx	lr

0002626e <_stdout_hook_default>:
}
   2626e:	f04f 30ff 	mov.w	r0, #4294967295
   26272:	4770      	bx	lr

00026274 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   26274:	f04f 32ff 	mov.w	r2, #4294967295
   26278:	f04f 33ff 	mov.w	r3, #4294967295
   2627c:	f7fd bc62 	b.w	23b44 <z_impl_k_mutex_lock>

00026280 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   26280:	f7fd bcda 	b.w	23c38 <z_impl_k_mutex_unlock>

00026284 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   26284:	f7fd ba06 	b.w	23694 <z_impl_z_errno>

00026288 <z_log_msg_static_create.constprop.0>:
   26288:	2300      	movs	r3, #0
   2628a:	f7f4 bc93 	b.w	1abb4 <z_impl_z_log_msg_static_create>

0002628e <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   2628e:	b508      	push	{r3, lr}
	net_if_init();
   26290:	f7f6 f8b4 	bl	1c3fc <net_if_init>
	net_if_post_init();
   26294:	f7f6 f8d6 	bl	1c444 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   26298:	2000      	movs	r0, #0
   2629a:	bd08      	pop	{r3, pc}

0002629c <net_if_l2>:
	if (!iface || !iface->if_dev) {
   2629c:	b110      	cbz	r0, 262a4 <net_if_l2+0x8>
   2629e:	6800      	ldr	r0, [r0, #0]
   262a0:	b100      	cbz	r0, 262a4 <net_if_l2+0x8>
	return iface->if_dev->l2;
   262a2:	6840      	ldr	r0, [r0, #4]
}
   262a4:	4770      	bx	lr

000262a6 <atomic_set_bit>:
   262a6:	2301      	movs	r3, #1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   262a8:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   262aa:	f001 011f 	and.w	r1, r1, #31
   262ae:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   262b0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   262b4:	e8d0 2fef 	ldaex	r2, [r0]
   262b8:	431a      	orrs	r2, r3
   262ba:	e8c0 2fe1 	stlex	r1, r2, [r0]
   262be:	2900      	cmp	r1, #0
   262c0:	d1f8      	bne.n	262b4 <atomic_set_bit+0xe>
}
   262c2:	4770      	bx	lr

000262c4 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   262c4:	2301      	movs	r3, #1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   262c6:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   262c8:	f001 011f 	and.w	r1, r1, #31
   262cc:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   262ce:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   262d0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   262d4:	e8d0 2fef 	ldaex	r2, [r0]
   262d8:	401a      	ands	r2, r3
   262da:	e8c0 2fe1 	stlex	r1, r2, [r0]
   262de:	2900      	cmp	r1, #0
   262e0:	d1f8      	bne.n	262d4 <atomic_clear_bit+0x10>
}
   262e2:	4770      	bx	lr

000262e4 <net_if_flag_is_set>:
	if (iface == NULL) {
   262e4:	b130      	cbz	r0, 262f4 <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   262e6:	6803      	ldr	r3, [r0, #0]
   262e8:	330c      	adds	r3, #12
   262ea:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   262ee:	4108      	asrs	r0, r1
   262f0:	f000 0001 	and.w	r0, r0, #1
}
   262f4:	4770      	bx	lr

000262f6 <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   262f6:	b510      	push	{r4, lr}
   262f8:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   262fa:	f7ff ffcf 	bl	2629c <net_if_l2>
   262fe:	b128      	cbz	r0, 2630c <l2_flags_get.isra.0+0x16>
   26300:	68c2      	ldr	r2, [r0, #12]
   26302:	b11a      	cbz	r2, 2630c <l2_flags_get.isra.0+0x16>
}
   26304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   26308:	4618      	mov	r0, r3
   2630a:	4710      	bx	r2
}
   2630c:	bd10      	pop	{r4, pc}

0002630e <update_operational_state>:
{
   2630e:	b510      	push	{r4, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   26310:	6803      	ldr	r3, [r0, #0]
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
   26312:	2100      	movs	r1, #0
{
   26314:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   26316:	f893 2020 	ldrb.w	r2, [r3, #32]
   2631a:	f7ff ffe3 	bl	262e4 <net_if_flag_is_set>
	if (!net_if_is_admin_up(iface)) {
   2631e:	b978      	cbnz	r0, 26340 <update_operational_state+0x32>
		iface->if_dev->oper_state = oper_state;
   26320:	2102      	movs	r1, #2
   26322:	6823      	ldr	r3, [r4, #0]
   26324:	f883 1020 	strb.w	r1, [r3, #32]
	return iface->if_dev->oper_state;
   26328:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   2632a:	f890 3020 	ldrb.w	r3, [r0, #32]
   2632e:	428b      	cmp	r3, r1
   26330:	d12b      	bne.n	2638a <update_operational_state+0x7c>
		if (prev_state == NET_IF_OPER_UP) {
   26332:	2a06      	cmp	r2, #6
   26334:	d129      	bne.n	2638a <update_operational_state+0x7c>
	atomic_clear_bit(iface->if_dev->flags, value);
   26336:	2108      	movs	r1, #8
   26338:	300c      	adds	r0, #12
   2633a:	f7ff ffc3 	bl	262c4 <atomic_clear_bit>
	return (iface->if_dev->socket_offload != NULL);
   2633e:	e01c      	b.n	2637a <update_operational_state+0x6c>
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
   26340:	2109      	movs	r1, #9
   26342:	4620      	mov	r0, r4
   26344:	f7ff ffce 	bl	262e4 <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
   26348:	2800      	cmp	r0, #0
   2634a:	d0e9      	beq.n	26320 <update_operational_state+0x12>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
   2634c:	210a      	movs	r1, #10
   2634e:	4620      	mov	r0, r4
   26350:	f7ff ffc8 	bl	262e4 <net_if_flag_is_set>
		iface->if_dev->oper_state = oper_state;
   26354:	6821      	ldr	r1, [r4, #0]
   26356:	f1c0 0306 	rsb	r3, r0, #6
   2635a:	b2db      	uxtb	r3, r3
   2635c:	f881 3020 	strb.w	r3, [r1, #32]
	return iface->if_dev->oper_state;
   26360:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   26362:	f890 1020 	ldrb.w	r1, [r0, #32]
   26366:	4299      	cmp	r1, r3
   26368:	d10f      	bne.n	2638a <update_operational_state+0x7c>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
   2636a:	2906      	cmp	r1, #6
   2636c:	d1e1      	bne.n	26332 <update_operational_state+0x24>
		if (prev_state != NET_IF_OPER_UP) {
   2636e:	2a06      	cmp	r2, #6
   26370:	d00b      	beq.n	2638a <update_operational_state+0x7c>
	atomic_set_bit(iface->if_dev->flags, value);
   26372:	2108      	movs	r1, #8
   26374:	300c      	adds	r0, #12
   26376:	f7ff ff96 	bl	262a6 <atomic_set_bit>
	return (iface->if_dev->socket_offload != NULL);
   2637a:	6823      	ldr	r3, [r4, #0]
	if (!is_iface_offloaded(iface) &&
   2637c:	69db      	ldr	r3, [r3, #28]
   2637e:	b923      	cbnz	r3, 2638a <update_operational_state+0x7c>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   26380:	4620      	mov	r0, r4
}
   26382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   26386:	f7ff bfb6 	b.w	262f6 <l2_flags_get.isra.0>
}
   2638a:	bd10      	pop	{r4, pc}

0002638c <net_if_flag_test_and_set.isra.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2638c:	2301      	movs	r3, #1
static inline bool net_if_flag_test_and_set(struct net_if *iface,
   2638e:	b510      	push	{r4, lr}
   26390:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26394:	300c      	adds	r0, #12
   26396:	e8d0 3fef 	ldaex	r3, [r0]
   2639a:	ea43 0201 	orr.w	r2, r3, r1
   2639e:	e8c0 2fe4 	stlex	r4, r2, [r0]
   263a2:	2c00      	cmp	r4, #0
   263a4:	d1f7      	bne.n	26396 <net_if_flag_test_and_set.isra.0+0xa>
	return (old & mask) != 0;
   263a6:	4219      	tst	r1, r3
}
   263a8:	bf14      	ite	ne
   263aa:	2001      	movne	r0, #1
   263ac:	2000      	moveq	r0, #0
   263ae:	bd10      	pop	{r4, pc}

000263b0 <net_if_up>:
{
   263b0:	b538      	push	{r3, r4, r5, lr}
   263b2:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   263b4:	f04f 31ff 	mov.w	r1, #4294967295
   263b8:	f04f 30ff 	mov.w	r0, #4294967295
   263bc:	f7f6 f810 	bl	1c3e0 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   263c0:	2100      	movs	r1, #0
   263c2:	4628      	mov	r0, r5
   263c4:	f7ff ff8e 	bl	262e4 <net_if_flag_is_set>
   263c8:	4604      	mov	r4, r0
   263ca:	b9d0      	cbnz	r0, 26402 <net_if_up+0x52>
	return (iface->if_dev->socket_offload != NULL);
   263cc:	682b      	ldr	r3, [r5, #0]
	if (is_iface_offloaded(iface)) {
   263ce:	69db      	ldr	r3, [r3, #28]
   263d0:	b95b      	cbnz	r3, 263ea <net_if_up+0x3a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   263d2:	4628      	mov	r0, r5
   263d4:	f7ff ff62 	bl	2629c <net_if_l2>
   263d8:	4604      	mov	r4, r0
   263da:	b130      	cbz	r0, 263ea <net_if_up+0x3a>
   263dc:	6884      	ldr	r4, [r0, #8]
   263de:	b124      	cbz	r4, 263ea <net_if_up+0x3a>
	status = net_if_l2(iface)->enable(iface, true);
   263e0:	2101      	movs	r1, #1
   263e2:	4628      	mov	r0, r5
   263e4:	47a0      	blx	r4
	if (status < 0) {
   263e6:	1e04      	subs	r4, r0, #0
   263e8:	db07      	blt.n	263fa <net_if_up+0x4a>
	atomic_set_bit(iface->if_dev->flags, value);
   263ea:	6828      	ldr	r0, [r5, #0]
   263ec:	2100      	movs	r1, #0
   263ee:	300c      	adds	r0, #12
   263f0:	f7ff ff59 	bl	262a6 <atomic_set_bit>
	update_operational_state(iface);
   263f4:	4628      	mov	r0, r5
   263f6:	f7ff ff8a 	bl	2630e <update_operational_state>
	k_mutex_unlock(&lock);
   263fa:	f7f5 fff9 	bl	1c3f0 <k_mutex_unlock.constprop.0.isra.0>
}
   263fe:	4620      	mov	r0, r4
   26400:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
   26402:	f06f 0477 	mvn.w	r4, #119	; 0x77
   26406:	e7f8      	b.n	263fa <net_if_up+0x4a>

00026408 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   26408:	220c      	movs	r2, #12
   2640a:	6903      	ldr	r3, [r0, #16]
   2640c:	b2c9      	uxtb	r1, r1
   2640e:	fb01 3302 	mla	r3, r1, r2, r3
   26412:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   26414:	f000 0007 	and.w	r0, r0, #7
   26418:	4770      	bx	lr

0002641a <set_on_state>:
	__asm__ volatile(
   2641a:	f04f 0320 	mov.w	r3, #32
   2641e:	f3ef 8211 	mrs	r2, BASEPRI
   26422:	f383 8812 	msr	BASEPRI_MAX, r3
   26426:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2642a:	6803      	ldr	r3, [r0, #0]
   2642c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   26430:	f043 0302 	orr.w	r3, r3, #2
   26434:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   26436:	f382 8811 	msr	BASEPRI, r2
   2643a:	f3bf 8f6f 	isb	sy
}
   2643e:	4770      	bx	lr

00026440 <stop>:
{
   26440:	b570      	push	{r4, r5, r6, lr}
   26442:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   26444:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   26446:	f04f 0420 	mov.w	r4, #32
   2644a:	f3ef 8511 	mrs	r5, BASEPRI
   2644e:	f384 8812 	msr	BASEPRI_MAX, r4
   26452:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   26456:	260c      	movs	r6, #12
   26458:	fb06 3401 	mla	r4, r6, r1, r3
   2645c:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2645e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   26462:	d008      	beq.n	26476 <stop+0x36>
   26464:	42a2      	cmp	r2, r4
   26466:	d006      	beq.n	26476 <stop+0x36>
	__asm__ volatile(
   26468:	f385 8811 	msr	BASEPRI, r5
   2646c:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   26470:	f04f 30ff 	mov.w	r0, #4294967295
}
   26474:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   26476:	2201      	movs	r2, #1
   26478:	4371      	muls	r1, r6
   2647a:	440b      	add	r3, r1
   2647c:	641a      	str	r2, [r3, #64]	; 0x40
   2647e:	f385 8811 	msr	BASEPRI, r5
   26482:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   26486:	6843      	ldr	r3, [r0, #4]
   26488:	440b      	add	r3, r1
   2648a:	685b      	ldr	r3, [r3, #4]
   2648c:	4798      	blx	r3
	return 0;
   2648e:	2000      	movs	r0, #0
   26490:	e7f0      	b.n	26474 <stop+0x34>

00026492 <api_stop>:
	return stop(dev, subsys, CTX_API);
   26492:	2280      	movs	r2, #128	; 0x80
   26494:	f7ff bfd4 	b.w	26440 <stop>

00026498 <async_start>:
{
   26498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2649a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2649c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2649e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   264a0:	f04f 0520 	mov.w	r5, #32
   264a4:	f3ef 8611 	mrs	r6, BASEPRI
   264a8:	f385 8812 	msr	BASEPRI_MAX, r5
   264ac:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   264b0:	250c      	movs	r5, #12
   264b2:	4369      	muls	r1, r5
   264b4:	440c      	add	r4, r1
   264b6:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   264b8:	f005 0c07 	and.w	ip, r5, #7
   264bc:	f1bc 0f01 	cmp.w	ip, #1
   264c0:	d10b      	bne.n	264da <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   264c2:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   264c4:	f386 8811 	msr	BASEPRI, r6
   264c8:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   264cc:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   264d0:	6843      	ldr	r3, [r0, #4]
   264d2:	585b      	ldr	r3, [r3, r1]
   264d4:	4798      	blx	r3
	return 0;
   264d6:	2000      	movs	r0, #0
}
   264d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   264da:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   264de:	42af      	cmp	r7, r5
   264e0:	f386 8811 	msr	BASEPRI, r6
   264e4:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   264e8:	bf0c      	ite	eq
   264ea:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   264ee:	f04f 30ff 	movne.w	r0, #4294967295
   264f2:	e7f1      	b.n	264d8 <async_start+0x40>

000264f4 <api_start>:
{
   264f4:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   264f6:	2480      	movs	r4, #128	; 0x80
   264f8:	9400      	str	r4, [sp, #0]
   264fa:	f7ff ffcd 	bl	26498 <async_start>
}
   264fe:	b002      	add	sp, #8
   26500:	bd10      	pop	{r4, pc}

00026502 <onoff_started_callback>:
{
   26502:	b410      	push	{r4}
	notify(mgr, 0);
   26504:	241c      	movs	r4, #28
	return &data->mgr[type];
   26506:	6900      	ldr	r0, [r0, #16]
   26508:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2650a:	fb03 0004 	mla	r0, r3, r4, r0
   2650e:	2100      	movs	r1, #0
}
   26510:	bc10      	pop	{r4}
	notify(mgr, 0);
   26512:	4710      	bx	r2

00026514 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   26514:	2000      	movs	r0, #0
   26516:	f7fa b975 	b.w	20804 <nrfx_clock_start>

0002651a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2651a:	2000      	movs	r0, #0
   2651c:	f000 bd31 	b.w	26f82 <nrfx_clock_stop>

00026520 <blocking_start_callback>:
{
   26520:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   26522:	f7fd bbf9 	b.w	23d18 <z_impl_k_sem_give>

00026526 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26526:	6843      	ldr	r3, [r0, #4]
}
   26528:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2652a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2652c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2652e:	600b      	str	r3, [r1, #0]
}
   26530:	4770      	bx	lr

00026532 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26532:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   26534:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26538:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   2653a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2653e:	6098      	str	r0, [r3, #8]
}
   26540:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   26542:	60d9      	str	r1, [r3, #12]
   26544:	4770      	bx	lr

00026546 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26546:	6843      	ldr	r3, [r0, #4]
}
   26548:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2654a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2654c:	6099      	str	r1, [r3, #8]
}
   2654e:	4770      	bx	lr

00026550 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26550:	6843      	ldr	r3, [r0, #4]
}
   26552:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26554:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   26556:	60d9      	str	r1, [r3, #12]
}
   26558:	4770      	bx	lr

0002655a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2655a:	6843      	ldr	r3, [r0, #4]
   2655c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2655e:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   26560:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   26564:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   26566:	6090      	str	r0, [r2, #8]
}
   26568:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2656a:	60d3      	str	r3, [r2, #12]
   2656c:	4770      	bx	lr

0002656e <gpio_nrfx_manage_callback>:
{
   2656e:	b510      	push	{r4, lr}
	return port->data;
   26570:	6903      	ldr	r3, [r0, #16]
	return list->head;
   26572:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   26574:	b1f8      	cbz	r0, 265b6 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26576:	4288      	cmp	r0, r1
   26578:	d119      	bne.n	265ae <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   2657a:	689c      	ldr	r4, [r3, #8]
	return node->next;
   2657c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2657e:	42a1      	cmp	r1, r4
	list->head = node;
   26580:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   26582:	d100      	bne.n	26586 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   26584:	6098      	str	r0, [r3, #8]
	parent->next = child;
   26586:	2000      	movs	r0, #0
   26588:	6008      	str	r0, [r1, #0]
	if (set) {
   2658a:	b12a      	cbz	r2, 26598 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   2658c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2658e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   26590:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   26592:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   26594:	b902      	cbnz	r2, 26598 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   26596:	6099      	str	r1, [r3, #8]
	return 0;
   26598:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2659a:	e010      	b.n	265be <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2659c:	4281      	cmp	r1, r0
   2659e:	d106      	bne.n	265ae <gpio_nrfx_manage_callback+0x40>
	return node->next;
   265a0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   265a2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   265a4:	6898      	ldr	r0, [r3, #8]
   265a6:	4281      	cmp	r1, r0
   265a8:	d1ed      	bne.n	26586 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   265aa:	609c      	str	r4, [r3, #8]
}
   265ac:	e7eb      	b.n	26586 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   265ae:	4604      	mov	r4, r0
   265b0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   265b2:	2800      	cmp	r0, #0
   265b4:	d1f2      	bne.n	2659c <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   265b6:	2a00      	cmp	r2, #0
   265b8:	d1e8      	bne.n	2658c <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   265ba:	f06f 0015 	mvn.w	r0, #21
}
   265be:	bd10      	pop	{r4, pc}

000265c0 <irq_connect2>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   265c0:	2200      	movs	r2, #0
   265c2:	2101      	movs	r1, #1
   265c4:	200a      	movs	r0, #10
   265c6:	f7f5 b821 	b.w	1b60c <z_arm_irq_priority_set>

000265ca <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   265ca:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   265cc:	2100      	movs	r1, #0
   265ce:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   265d0:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   265d2:	f000 f90c 	bl	267ee <pinctrl_lookup_state>
	if (ret < 0) {
   265d6:	2800      	cmp	r0, #0
   265d8:	db05      	blt.n	265e6 <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
   265da:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   265dc:	6822      	ldr	r2, [r4, #0]
   265de:	7919      	ldrb	r1, [r3, #4]
   265e0:	6818      	ldr	r0, [r3, #0]
   265e2:	f7f7 fa25 	bl	1da30 <pinctrl_configure_pins>
}
   265e6:	b002      	add	sp, #8
   265e8:	bd10      	pop	{r4, pc}

000265ea <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
   265ea:	2200      	movs	r2, #0
   265ec:	2101      	movs	r1, #1
   265ee:	200b      	movs	r0, #11
   265f0:	f7f5 b80c 	b.w	1b60c <z_arm_irq_priority_set>

000265f4 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   265f4:	b510      	push	{r4, lr}
	while (*count) {
   265f6:	680b      	ldr	r3, [r1, #0]
   265f8:	b913      	cbnz	r3, 26600 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   265fa:	4618      	mov	r0, r3
	*buf_len = 0;
   265fc:	6013      	str	r3, [r2, #0]
	return NULL;
   265fe:	e005      	b.n	2660c <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   26600:	6803      	ldr	r3, [r0, #0]
   26602:	685c      	ldr	r4, [r3, #4]
   26604:	b11c      	cbz	r4, 2660e <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   26606:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   26608:	6803      	ldr	r3, [r0, #0]
   2660a:	6818      	ldr	r0, [r3, #0]
}
   2660c:	bd10      	pop	{r4, pc}
		++(*current);
   2660e:	3308      	adds	r3, #8
   26610:	6003      	str	r3, [r0, #0]
		--(*count);
   26612:	680b      	ldr	r3, [r1, #0]
   26614:	3b01      	subs	r3, #1
   26616:	600b      	str	r3, [r1, #0]
   26618:	e7ed      	b.n	265f6 <spi_context_get_next_buf.constprop.0+0x2>

0002661a <z_log_msg_static_create.constprop.0>:
   2661a:	2300      	movs	r3, #0
   2661c:	f7f4 baca 	b.w	1abb4 <z_impl_z_log_msg_static_create>

00026620 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   26620:	4603      	mov	r3, r0
   26622:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   26624:	7919      	ldrb	r1, [r3, #4]
   26626:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   26628:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2662a:	fa03 f101 	lsl.w	r1, r3, r1
   2662e:	6903      	ldr	r3, [r0, #16]
   26630:	681b      	ldr	r3, [r3, #0]
   26632:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   26634:	bf18      	it	ne
   26636:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2663a:	b112      	cbz	r2, 26642 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   2663c:	6883      	ldr	r3, [r0, #8]
   2663e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   26640:	4718      	bx	r3
   26642:	6883      	ldr	r3, [r0, #8]
   26644:	691b      	ldr	r3, [r3, #16]
   26646:	e7fb      	b.n	26640 <gpio_pin_set_dt.isra.0+0x20>

00026648 <_spi_context_cs_control>:
{
   26648:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2664a:	6803      	ldr	r3, [r0, #0]
{
   2664c:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2664e:	b1e3      	cbz	r3, 2668a <_spi_context_cs_control+0x42>
   26650:	6898      	ldr	r0, [r3, #8]
   26652:	b1d0      	cbz	r0, 2668a <_spi_context_cs_control+0x42>
   26654:	6805      	ldr	r5, [r0, #0]
   26656:	b1c5      	cbz	r5, 2668a <_spi_context_cs_control+0x42>
		if (on) {
   26658:	b149      	cbz	r1, 2666e <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   2665a:	2101      	movs	r1, #1
   2665c:	f7ff ffe0 	bl	26620 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   26660:	6823      	ldr	r3, [r4, #0]
   26662:	689b      	ldr	r3, [r3, #8]
   26664:	6898      	ldr	r0, [r3, #8]
}
   26666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2666a:	f001 be22 	b.w	282b2 <z_impl_k_busy_wait>
			if (!force_off &&
   2666e:	b912      	cbnz	r2, 26676 <_spi_context_cs_control+0x2e>
   26670:	889b      	ldrh	r3, [r3, #4]
   26672:	04db      	lsls	r3, r3, #19
   26674:	d409      	bmi.n	2668a <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   26676:	6880      	ldr	r0, [r0, #8]
   26678:	f001 fe1b 	bl	282b2 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2667c:	6823      	ldr	r3, [r4, #0]
   2667e:	2100      	movs	r1, #0
   26680:	6898      	ldr	r0, [r3, #8]
}
   26682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   26686:	f7ff bfcb 	b.w	26620 <gpio_pin_set_dt.isra.0>
}
   2668a:	bd38      	pop	{r3, r4, r5, pc}

0002668c <spi_context_unlock_unconditionally>:
{
   2668c:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2668e:	2201      	movs	r2, #1
   26690:	2100      	movs	r1, #0
{
   26692:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   26694:	f7ff ffd8 	bl	26648 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   26698:	69a3      	ldr	r3, [r4, #24]
   2669a:	b933      	cbnz	r3, 266aa <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2669c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2669e:	f104 0010 	add.w	r0, r4, #16
}
   266a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   266a6:	f7fd bb37 	b.w	23d18 <z_impl_k_sem_give>
   266aa:	bd10      	pop	{r4, pc}

000266ac <spi_nrfx_release>:
{
   266ac:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   266ae:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   266b0:	6803      	ldr	r3, [r0, #0]
   266b2:	428b      	cmp	r3, r1
   266b4:	d106      	bne.n	266c4 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   266b6:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   266ba:	b934      	cbnz	r4, 266ca <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   266bc:	f7ff ffe6 	bl	2668c <spi_context_unlock_unconditionally>
	return 0;
   266c0:	4620      	mov	r0, r4
}
   266c2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   266c4:	f06f 0015 	mvn.w	r0, #21
   266c8:	e7fb      	b.n	266c2 <spi_nrfx_release+0x16>
		return -EBUSY;
   266ca:	f06f 000f 	mvn.w	r0, #15
   266ce:	e7f8      	b.n	266c2 <spi_nrfx_release+0x16>

000266d0 <uarte_nrfx_config_get>:
{
   266d0:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   266d2:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   266d4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   266d8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   266dc:	2000      	movs	r0, #0
   266de:	4770      	bx	lr

000266e0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   266e0:	6843      	ldr	r3, [r0, #4]
   266e2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   266e4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   266e8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   266ec:	4770      	bx	lr

000266ee <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   266ee:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   266f0:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   266f2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   266f4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   266f8:	b150      	cbz	r0, 26710 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   266fa:	2000      	movs	r0, #0
	*c = *data->rx_data;
   266fc:	6952      	ldr	r2, [r2, #20]
   266fe:	7812      	ldrb	r2, [r2, #0]
   26700:	700a      	strb	r2, [r1, #0]
   26702:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   26706:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2670a:	2201      	movs	r2, #1
   2670c:	601a      	str	r2, [r3, #0]
	return 0;
   2670e:	4770      	bx	lr
		return -1;
   26710:	f04f 30ff 	mov.w	r0, #4294967295
}
   26714:	4770      	bx	lr

00026716 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   26716:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   26718:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2671a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2671e:	b940      	cbnz	r0, 26732 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   26720:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   26722:	079b      	lsls	r3, r3, #30
   26724:	d406      	bmi.n	26734 <is_tx_ready.isra.0+0x1e>
   26726:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2672a:	3800      	subs	r0, #0
   2672c:	bf18      	it	ne
   2672e:	2001      	movne	r0, #1
   26730:	4770      	bx	lr
   26732:	2001      	movs	r0, #1
}
   26734:	4770      	bx	lr

00026736 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   26736:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   26738:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2673a:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2673e:	05c9      	lsls	r1, r1, #23
   26740:	d518      	bpl.n	26774 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26742:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   26746:	b1a9      	cbz	r1, 26774 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   26748:	f04f 0020 	mov.w	r0, #32
   2674c:	f3ef 8111 	mrs	r1, BASEPRI
   26750:	f380 8812 	msr	BASEPRI_MAX, r0
   26754:	f3bf 8f6f 	isb	sy
   26758:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2675c:	b130      	cbz	r0, 2676c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2675e:	2000      	movs	r0, #0
   26760:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   26764:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26768:	2001      	movs	r0, #1
   2676a:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   2676c:	f381 8811 	msr	BASEPRI, r1
   26770:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   26774:	6852      	ldr	r2, [r2, #4]
   26776:	06d2      	lsls	r2, r2, #27
   26778:	d515      	bpl.n	267a6 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   2677a:	f04f 0120 	mov.w	r1, #32
   2677e:	f3ef 8211 	mrs	r2, BASEPRI
   26782:	f381 8812 	msr	BASEPRI_MAX, r1
   26786:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2678a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2678e:	b111      	cbz	r1, 26796 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   26790:	2100      	movs	r1, #0
   26792:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   26796:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2679a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   2679e:	f382 8811 	msr	BASEPRI, r2
   267a2:	f3bf 8f6f 	isb	sy
}
   267a6:	4770      	bx	lr

000267a8 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   267a8:	4608      	mov	r0, r1
   267aa:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   267ac:	4611      	mov	r1, r2
   267ae:	f7f9 ff31 	bl	20614 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   267b2:	2800      	cmp	r0, #0
	}

	return 0;
}
   267b4:	bf18      	it	ne
   267b6:	f06f 0004 	mvnne.w	r0, #4
   267ba:	bd08      	pop	{r3, pc}

000267bc <entropy_psa_crypto_rng_init>:
{
   267bc:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   267be:	f000 fbdb 	bl	26f78 <psa_crypto_init>
		return -EIO;
   267c2:	2800      	cmp	r0, #0
}
   267c4:	bf18      	it	ne
   267c6:	f06f 0004 	mvnne.w	r0, #4
   267ca:	bd08      	pop	{r3, pc}

000267cc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   267cc:	4770      	bx	lr

000267ce <event_clear>:
   267ce:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   267d0:	f100 0350 	add.w	r3, r0, #80	; 0x50
   267d4:	009b      	lsls	r3, r3, #2
   267d6:	b29b      	uxth	r3, r3
   267d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   267dc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   267e0:	601a      	str	r2, [r3, #0]
   267e2:	681b      	ldr	r3, [r3, #0]
}
   267e4:	4770      	bx	lr

000267e6 <sys_clock_cycle_get_32>:
{
   267e6:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   267e8:	f7f6 ff92 	bl	1d710 <z_nrf_rtc_timer_read>
}
   267ec:	bd08      	pop	{r3, pc}

000267ee <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   267ee:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   267f0:	6843      	ldr	r3, [r0, #4]
   267f2:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   267f4:	7a05      	ldrb	r5, [r0, #8]
   267f6:	6844      	ldr	r4, [r0, #4]
   267f8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   267fc:	42a3      	cmp	r3, r4
   267fe:	d302      	bcc.n	26806 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   26800:	f06f 0001 	mvn.w	r0, #1
}
   26804:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   26806:	795c      	ldrb	r4, [r3, #5]
   26808:	428c      	cmp	r4, r1
   2680a:	d001      	beq.n	26810 <pinctrl_lookup_state+0x22>
		(*state)++;
   2680c:	3308      	adds	r3, #8
   2680e:	e7f0      	b.n	267f2 <pinctrl_lookup_state+0x4>
			return 0;
   26810:	2000      	movs	r0, #0
   26812:	e7f7      	b.n	26804 <pinctrl_lookup_state+0x16>

00026814 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   26814:	f001 bd4d 	b.w	282b2 <z_impl_k_busy_wait>

00026818 <nrf_modem_os_errno_set>:
{
   26818:	b510      	push	{r4, lr}
   2681a:	4604      	mov	r4, r0
	errno = err_code;
   2681c:	f7ff fd32 	bl	26284 <__errno>
   26820:	6004      	str	r4, [r0, #0]
}
   26822:	bd10      	pop	{r4, pc}

00026824 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   26824:	f001 bb0a 	b.w	27e3c <k_is_in_isr>

00026828 <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
   26828:	f7fd ba76 	b.w	23d18 <z_impl_k_sem_give>

0002682c <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   2682c:	1c4b      	adds	r3, r1, #1
{
   2682e:	b570      	push	{r4, r5, r6, lr}
   26830:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   26832:	d017      	beq.n	26864 <nrf_modem_os_sem_take+0x38>
   26834:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   26838:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2683c:	f240 30e7 	movw	r0, #999	; 0x3e7
   26840:	2100      	movs	r1, #0
   26842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26846:	2300      	movs	r3, #0
   26848:	fbc4 0106 	smlal	r0, r1, r4, r6
   2684c:	f7f2 fa5c 	bl	18d08 <__aeabi_uldivmod>
   26850:	4602      	mov	r2, r0
   26852:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   26854:	4628      	mov	r0, r5
   26856:	f7fd fa85 	bl	23d64 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   2685a:	2800      	cmp	r0, #0
}
   2685c:	bf18      	it	ne
   2685e:	f06f 000a 	mvnne.w	r0, #10
   26862:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   26864:	f04f 32ff 	mov.w	r2, #4294967295
   26868:	4613      	mov	r3, r2
   2686a:	e7f3      	b.n	26854 <nrf_modem_os_sem_take+0x28>

0002686c <nrf91_socket_offload_setsockopt>:
{
   2686c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2686e:	460d      	mov	r5, r1
   26870:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = { 0 };
   26872:	2300      	movs	r3, #0
{
   26874:	b087      	sub	sp, #28
   26876:	4611      	mov	r1, r2
	int sd = OBJ_TO_SD(obj);
   26878:	6807      	ldr	r7, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   2687a:	aa03      	add	r2, sp, #12
   2687c:	4628      	mov	r0, r5
	struct nrf_timeval nrf_timeo = { 0 };
   2687e:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   26882:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   26884:	f7f7 fafe 	bl	1de84 <z_to_nrf_optname>
   26888:	2800      	cmp	r0, #0
   2688a:	da07      	bge.n	2689c <nrf91_socket_offload_setsockopt+0x30>
		errno = ENOPROTOOPT;
   2688c:	f7ff fcfa 	bl	26284 <__errno>
   26890:	236d      	movs	r3, #109	; 0x6d
   26892:	6003      	str	r3, [r0, #0]
		return -1;
   26894:	f04f 30ff 	mov.w	r0, #4294967295
}
   26898:	b007      	add	sp, #28
   2689a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2689c:	2d01      	cmp	r5, #1
   2689e:	d112      	bne.n	268c6 <nrf91_socket_offload_setsockopt+0x5a>
   268a0:	f1a1 0214 	sub.w	r2, r1, #20
   268a4:	2a01      	cmp	r2, #1
   268a6:	d806      	bhi.n	268b6 <nrf91_socket_offload_setsockopt+0x4a>
		if (optval != NULL) {
   268a8:	b12c      	cbz	r4, 268b6 <nrf91_socket_offload_setsockopt+0x4a>
			nrf_optlen = sizeof(struct nrf_timeval);
   268aa:	2608      	movs	r6, #8
			nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   268ac:	6823      	ldr	r3, [r4, #0]
   268ae:	9304      	str	r3, [sp, #16]
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   268b0:	68a3      	ldr	r3, [r4, #8]
			nrf_optval = &nrf_timeo;
   268b2:	ac04      	add	r4, sp, #16
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   268b4:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   268b6:	4623      	mov	r3, r4
   268b8:	4629      	mov	r1, r5
   268ba:	4638      	mov	r0, r7
   268bc:	9a03      	ldr	r2, [sp, #12]
   268be:	9600      	str	r6, [sp, #0]
   268c0:	f7fc f880 	bl	229c4 <nrf_setsockopt>
	return retval;
   268c4:	e7e8      	b.n	26898 <nrf91_socket_offload_setsockopt+0x2c>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   268c6:	f5b5 7f8d 	cmp.w	r5, #282	; 0x11a
   268ca:	d1f4      	bne.n	268b6 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   268cc:	290c      	cmp	r1, #12
   268ce:	bf08      	it	eq
   268d0:	2604      	moveq	r6, #4
   268d2:	e7f0      	b.n	268b6 <nrf91_socket_offload_setsockopt+0x4a>

000268d4 <nrf91_socket_offload_getsockopt>:
{
   268d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268d8:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   268da:	2300      	movs	r3, #0
{
   268dc:	b086      	sub	sp, #24
   268de:	460f      	mov	r7, r1
   268e0:	4615      	mov	r5, r2
	struct nrf_timeval nrf_timeo = {0, 0};
   268e2:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   268e6:	2308      	movs	r3, #8
	int sd = OBJ_TO_SD(obj);
   268e8:	6806      	ldr	r6, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   268ea:	4629      	mov	r1, r5
   268ec:	4638      	mov	r0, r7
   268ee:	eb0d 0203 	add.w	r2, sp, r3
{
   268f2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   268f6:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   268f8:	f7f7 fac4 	bl	1de84 <z_to_nrf_optname>
   268fc:	2800      	cmp	r0, #0
   268fe:	da09      	bge.n	26914 <nrf91_socket_offload_getsockopt+0x40>
		errno = ENOPROTOOPT;
   26900:	f7ff fcc0 	bl	26284 <__errno>
   26904:	236d      	movs	r3, #109	; 0x6d
		return -1;
   26906:	f04f 36ff 	mov.w	r6, #4294967295
		errno = ENOPROTOOPT;
   2690a:	6003      	str	r3, [r0, #0]
}
   2690c:	4630      	mov	r0, r6
   2690e:	b006      	add	sp, #24
   26910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   26914:	2f01      	cmp	r7, #1
   26916:	d11c      	bne.n	26952 <nrf91_socket_offload_getsockopt+0x7e>
   26918:	f1a5 0314 	sub.w	r3, r5, #20
   2691c:	2b01      	cmp	r3, #1
   2691e:	d818      	bhi.n	26952 <nrf91_socket_offload_getsockopt+0x7e>
		nrf_optlen = &nrf_timeo_size;
   26920:	aa03      	add	r2, sp, #12
		nrf_optval = &nrf_timeo;
   26922:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   26924:	4630      	mov	r0, r6
   26926:	9200      	str	r2, [sp, #0]
   26928:	4639      	mov	r1, r7
   2692a:	9a02      	ldr	r2, [sp, #8]
   2692c:	f7fc f988 	bl	22c40 <nrf_getsockopt>
	if (retval == 0) {
   26930:	4606      	mov	r6, r0
   26932:	2800      	cmp	r0, #0
   26934:	d1ea      	bne.n	2690c <nrf91_socket_offload_getsockopt+0x38>
		if (level == SOL_SOCKET) {
   26936:	2f01      	cmp	r7, #1
   26938:	d1e8      	bne.n	2690c <nrf91_socket_offload_getsockopt+0x38>
			if (optname == SO_ERROR) {
   2693a:	2d04      	cmp	r5, #4
   2693c:	d10c      	bne.n	26958 <nrf91_socket_offload_getsockopt+0x84>
				if (*(int *)optval != 0) {
   2693e:	6820      	ldr	r0, [r4, #0]
   26940:	2800      	cmp	r0, #0
   26942:	d0e3      	beq.n	2690c <nrf91_socket_offload_getsockopt+0x38>
					nrf_modem_os_errno_set(*(int *)optval);
   26944:	f7ff ff68 	bl	26818 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   26948:	f7ff fc9c 	bl	26284 <__errno>
   2694c:	6803      	ldr	r3, [r0, #0]
   2694e:	6023      	str	r3, [r4, #0]
   26950:	e7dc      	b.n	2690c <nrf91_socket_offload_getsockopt+0x38>
	nrf_socklen_t *nrf_optlen = (nrf_socklen_t *)optlen;
   26952:	4642      	mov	r2, r8
   26954:	4623      	mov	r3, r4
   26956:	e7e5      	b.n	26924 <nrf91_socket_offload_getsockopt+0x50>
			} else if ((optname == SO_RCVTIMEO) ||
   26958:	3d14      	subs	r5, #20
   2695a:	2d01      	cmp	r5, #1
   2695c:	d8d6      	bhi.n	2690c <nrf91_socket_offload_getsockopt+0x38>
					nrf_timeo.tv_sec;
   2695e:	9b04      	ldr	r3, [sp, #16]
   26960:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   26964:	9b05      	ldr	r3, [sp, #20]
   26966:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   26968:	2310      	movs	r3, #16
   2696a:	f8c8 3000 	str.w	r3, [r8]
   2696e:	e7cd      	b.n	2690c <nrf91_socket_offload_getsockopt+0x38>

00026970 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   26970:	6800      	ldr	r0, [r0, #0]
   26972:	f000 beb3 	b.w	276dc <nrf_listen>

00026976 <nrf91_socket_offload_freeaddrinfo>:
{
   26976:	b538      	push	{r3, r4, r5, lr}
   26978:	4604      	mov	r4, r0
	while (next != NULL) {
   2697a:	b904      	cbnz	r4, 2697e <nrf91_socket_offload_freeaddrinfo+0x8>
}
   2697c:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   2697e:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   26980:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   26982:	f001 fd79 	bl	28478 <k_free>
		k_free(this);
   26986:	4620      	mov	r0, r4
   26988:	f001 fd76 	bl	28478 <k_free>
		next = next->ai_next;
   2698c:	462c      	mov	r4, r5
   2698e:	e7f4      	b.n	2697a <nrf91_socket_offload_freeaddrinfo+0x4>

00026990 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   26990:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   26992:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   26994:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   26996:	4603      	mov	r3, r0
{
   26998:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   2699a:	f823 2b04 	strh.w	r2, [r3], #4
   2699e:	f101 0420 	add.w	r4, r1, #32
   269a2:	f101 0210 	add.w	r2, r1, #16
   269a6:	f852 5b04 	ldr.w	r5, [r2], #4
   269aa:	42a2      	cmp	r2, r4
   269ac:	f843 5b04 	str.w	r5, [r3], #4
   269b0:	d1f9      	bne.n	269a6 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   269b2:	6a0b      	ldr	r3, [r1, #32]
   269b4:	7503      	strb	r3, [r0, #20]
}
   269b6:	bd30      	pop	{r4, r5, pc}

000269b8 <z_to_nrf_ipv6>:
{
   269b8:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   269ba:	2124      	movs	r1, #36	; 0x24
{
   269bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   269be:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   269c0:	8841      	ldrh	r1, [r0, #2]
{
   269c2:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   269c4:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   269c6:	2102      	movs	r1, #2
   269c8:	1d04      	adds	r4, r0, #4
   269ca:	6059      	str	r1, [r3, #4]
   269cc:	f103 0610 	add.w	r6, r3, #16
   269d0:	f100 0714 	add.w	r7, r0, #20
   269d4:	4635      	mov	r5, r6
   269d6:	6820      	ldr	r0, [r4, #0]
   269d8:	6861      	ldr	r1, [r4, #4]
   269da:	3408      	adds	r4, #8
   269dc:	c503      	stmia	r5!, {r0, r1}
   269de:	42bc      	cmp	r4, r7
   269e0:	462e      	mov	r6, r5
   269e2:	d1f7      	bne.n	269d4 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   269e4:	7d12      	ldrb	r2, [r2, #20]
   269e6:	621a      	str	r2, [r3, #32]
}
   269e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000269ea <nrf91_socket_offload_sendto>:
{
   269ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   269ee:	4604      	mov	r4, r0
   269f0:	b08c      	sub	sp, #48	; 0x30
   269f2:	9812      	ldr	r0, [sp, #72]	; 0x48
   269f4:	460d      	mov	r5, r1
   269f6:	4616      	mov	r6, r2
   269f8:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   269fa:	6824      	ldr	r4, [r4, #0]
	if (to == NULL) {
   269fc:	b930      	cbnz	r0, 26a0c <nrf91_socket_offload_sendto+0x22>
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   269fe:	9013      	str	r0, [sp, #76]	; 0x4c
   26a00:	4620      	mov	r0, r4
}
   26a02:	b00c      	add	sp, #48	; 0x30
   26a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   26a08:	f7fb bed0 	b.w	227ac <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   26a0c:	f8b0 c000 	ldrh.w	ip, [r0]
   26a10:	f1bc 0f01 	cmp.w	ip, #1
   26a14:	d112      	bne.n	26a3c <nrf91_socket_offload_sendto+0x52>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26a16:	2510      	movs	r5, #16
	nrf_out->sin_port = ptr->sin_port;
   26a18:	8846      	ldrh	r6, [r0, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26a1a:	6840      	ldr	r0, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26a1c:	f88d 500c 	strb.w	r5, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26a20:	9006      	str	r0, [sp, #24]
		retval = nrf_sendto(sd, buf, len, flags,
   26a22:	a803      	add	r0, sp, #12
	nrf_out->sin_port = ptr->sin_port;
   26a24:	f8ad 6014 	strh.w	r6, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   26a28:	f8cd c010 	str.w	ip, [sp, #16]
		retval = nrf_sendto(sd, buf, len, flags,
   26a2c:	9501      	str	r5, [sp, #4]
   26a2e:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, flags,
   26a30:	4620      	mov	r0, r4
   26a32:	f7fb febb 	bl	227ac <nrf_sendto>
}
   26a36:	b00c      	add	sp, #48	; 0x30
   26a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   26a3c:	f1bc 0f02 	cmp.w	ip, #2
   26a40:	d10b      	bne.n	26a5a <nrf91_socket_offload_sendto+0x70>
		z_to_nrf_ipv6(to, &ipv6);
   26a42:	f10d 080c 	add.w	r8, sp, #12
   26a46:	4641      	mov	r1, r8
   26a48:	f7ff ffb6 	bl	269b8 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, flags,
   26a4c:	2324      	movs	r3, #36	; 0x24
   26a4e:	4632      	mov	r2, r6
   26a50:	e9cd 8300 	strd	r8, r3, [sp]
   26a54:	4629      	mov	r1, r5
   26a56:	463b      	mov	r3, r7
   26a58:	e7ea      	b.n	26a30 <nrf91_socket_offload_sendto+0x46>
		errno = EAFNOSUPPORT;
   26a5a:	f7ff fc13 	bl	26284 <__errno>
   26a5e:	236a      	movs	r3, #106	; 0x6a
   26a60:	6003      	str	r3, [r0, #0]
		retval = -1;
   26a62:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   26a66:	e7e6      	b.n	26a36 <nrf91_socket_offload_sendto+0x4c>

00026a68 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   26a68:	2300      	movs	r3, #0
{
   26a6a:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   26a6c:	e9cd 3300 	strd	r3, r3, [sp]
   26a70:	f7ff ffbb 	bl	269ea <nrf91_socket_offload_sendto>
}
   26a74:	b003      	add	sp, #12
   26a76:	f85d fb04 	ldr.w	pc, [sp], #4

00026a7a <nrf91_socket_offload_connect>:
{
   26a7a:	4603      	mov	r3, r0
   26a7c:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   26a7e:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   26a80:	880b      	ldrh	r3, [r1, #0]
{
   26a82:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   26a84:	2b01      	cmp	r3, #1
{
   26a86:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   26a88:	d10e      	bne.n	26aa8 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26a8a:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   26a8c:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   26a8e:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26a90:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26a92:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   26a96:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26a9a:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   26a9c:	4620      	mov	r0, r4
   26a9e:	a901      	add	r1, sp, #4
   26aa0:	f000 fd3a 	bl	27518 <nrf_connect>
}
   26aa4:	b00a      	add	sp, #40	; 0x28
   26aa6:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   26aa8:	2b02      	cmp	r3, #2
   26aaa:	d104      	bne.n	26ab6 <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   26aac:	a901      	add	r1, sp, #4
   26aae:	f7ff ff83 	bl	269b8 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   26ab2:	2224      	movs	r2, #36	; 0x24
   26ab4:	e7f2      	b.n	26a9c <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   26ab6:	4620      	mov	r0, r4
}
   26ab8:	b00a      	add	sp, #40	; 0x28
   26aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = nrf_connect(sd, (void *)addr, addrlen);
   26abe:	f000 bd2b 	b.w	27518 <nrf_connect>

00026ac2 <nrf91_socket_offload_bind>:
{
   26ac2:	4603      	mov	r3, r0
   26ac4:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   26ac6:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   26ac8:	880b      	ldrh	r3, [r1, #0]
{
   26aca:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   26acc:	2b01      	cmp	r3, #1
{
   26ace:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   26ad0:	d10e      	bne.n	26af0 <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26ad2:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   26ad4:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   26ad6:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26ad8:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26ada:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   26ade:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26ae2:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   26ae4:	4620      	mov	r0, r4
   26ae6:	a901      	add	r1, sp, #4
   26ae8:	f000 fdaf 	bl	2764a <nrf_bind>
}
   26aec:	b00a      	add	sp, #40	; 0x28
   26aee:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   26af0:	2b02      	cmp	r3, #2
   26af2:	d104      	bne.n	26afe <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   26af4:	a901      	add	r1, sp, #4
   26af6:	f7ff ff5f 	bl	269b8 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   26afa:	2224      	movs	r2, #36	; 0x24
   26afc:	e7f2      	b.n	26ae4 <nrf91_socket_offload_bind+0x22>
		errno = EAFNOSUPPORT;
   26afe:	f7ff fbc1 	bl	26284 <__errno>
   26b02:	236a      	movs	r3, #106	; 0x6a
   26b04:	6003      	str	r3, [r0, #0]
		retval = -1;
   26b06:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   26b0a:	e7ef      	b.n	26aec <nrf91_socket_offload_bind+0x2a>

00026b0c <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   26b0c:	f7fd b81a 	b.w	23b44 <z_impl_k_mutex_lock>

00026b10 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   26b10:	f7fd b892 	b.w	23c38 <z_impl_k_mutex_unlock>

00026b14 <nrf91_socket_offload_recvfrom>:
{
   26b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b18:	4605      	mov	r5, r0
	if (ctx->lock) {
   26b1a:	6840      	ldr	r0, [r0, #4]
{
   26b1c:	b08d      	sub	sp, #52	; 0x34
   26b1e:	460c      	mov	r4, r1
   26b20:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   26b24:	4691      	mov	r9, r2
   26b26:	469a      	mov	sl, r3
	if (ctx->lock) {
   26b28:	b108      	cbz	r0, 26b2e <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   26b2a:	f7ff fff1 	bl	26b10 <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   26b2e:	f8d5 b000 	ldr.w	fp, [r5]
	if (from == NULL || fromlen == NULL) {
   26b32:	b106      	cbz	r6, 26b36 <nrf91_socket_offload_recvfrom+0x22>
   26b34:	b9af      	cbnz	r7, 26b62 <nrf91_socket_offload_recvfrom+0x4e>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   26b36:	2300      	movs	r3, #0
   26b38:	4621      	mov	r1, r4
   26b3a:	e9cd 3300 	strd	r3, r3, [sp]
   26b3e:	464a      	mov	r2, r9
   26b40:	4653      	mov	r3, sl
   26b42:	4658      	mov	r0, fp
   26b44:	f000 fe8f 	bl	27866 <nrf_recvfrom>
   26b48:	4604      	mov	r4, r0
	if (ctx->lock) {
   26b4a:	6868      	ldr	r0, [r5, #4]
   26b4c:	b128      	cbz	r0, 26b5a <nrf91_socket_offload_recvfrom+0x46>
		k_mutex_lock(ctx->lock, K_FOREVER);
   26b4e:	f04f 32ff 	mov.w	r2, #4294967295
   26b52:	f04f 33ff 	mov.w	r3, #4294967295
   26b56:	f7ff ffd9 	bl	26b0c <k_mutex_lock.constprop.0.isra.0>
}
   26b5a:	4620      	mov	r0, r4
   26b5c:	b00d      	add	sp, #52	; 0x34
   26b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   26b62:	f10d 080c 	add.w	r8, sp, #12
   26b66:	2224      	movs	r2, #36	; 0x24
   26b68:	2100      	movs	r1, #0
   26b6a:	4640      	mov	r0, r8
   26b6c:	f001 fcd0 	bl	28510 <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   26b70:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   26b72:	ab02      	add	r3, sp, #8
   26b74:	4621      	mov	r1, r4
   26b76:	e9cd 8300 	strd	r8, r3, [sp]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   26b7a:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   26b7c:	4653      	mov	r3, sl
   26b7e:	464a      	mov	r2, r9
   26b80:	4658      	mov	r0, fp
   26b82:	f000 fe70 	bl	27866 <nrf_recvfrom>
		if (retval < 0) {
   26b86:	1e04      	subs	r4, r0, #0
   26b88:	dbdf      	blt.n	26b4a <nrf91_socket_offload_recvfrom+0x36>
		if (cliaddr->sa_family == NRF_AF_INET &&
   26b8a:	9b04      	ldr	r3, [sp, #16]
   26b8c:	2b01      	cmp	r3, #1
   26b8e:	d10b      	bne.n	26ba8 <nrf91_socket_offload_recvfrom+0x94>
   26b90:	9a02      	ldr	r2, [sp, #8]
   26b92:	2a10      	cmp	r2, #16
   26b94:	d1d9      	bne.n	26b4a <nrf91_socket_offload_recvfrom+0x36>
	ptr->sin_family = AF_INET;
   26b96:	8033      	strh	r3, [r6, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   26b98:	9b06      	ldr	r3, [sp, #24]
	ptr->sin_port = nrf_in->sin_port;
   26b9a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   26b9e:	6073      	str	r3, [r6, #4]
			*fromlen = sizeof(struct sockaddr_in);
   26ba0:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   26ba2:	8072      	strh	r2, [r6, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   26ba4:	603b      	str	r3, [r7, #0]
   26ba6:	e7d0      	b.n	26b4a <nrf91_socket_offload_recvfrom+0x36>
		} else if (cliaddr->sa_family == NRF_AF_INET6 &&
   26ba8:	2b02      	cmp	r3, #2
   26baa:	d1ce      	bne.n	26b4a <nrf91_socket_offload_recvfrom+0x36>
   26bac:	9b02      	ldr	r3, [sp, #8]
   26bae:	2b24      	cmp	r3, #36	; 0x24
   26bb0:	d1cb      	bne.n	26b4a <nrf91_socket_offload_recvfrom+0x36>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   26bb2:	4641      	mov	r1, r8
   26bb4:	4630      	mov	r0, r6
   26bb6:	f7ff feeb 	bl	26990 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   26bba:	2318      	movs	r3, #24
   26bbc:	e7f2      	b.n	26ba4 <nrf91_socket_offload_recvfrom+0x90>

00026bbe <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   26bbe:	2300      	movs	r3, #0
{
   26bc0:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   26bc2:	e9cd 3300 	strd	r3, r3, [sp]
   26bc6:	f7ff ffa5 	bl	26b14 <nrf91_socket_offload_recvfrom>
}
   26bca:	b003      	add	sp, #12
   26bcc:	f85d fb04 	ldr.w	pc, [sp], #4

00026bd0 <nrf91_socket_offload_close>:
{
   26bd0:	b538      	push	{r3, r4, r5, lr}
   26bd2:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   26bd4:	6800      	ldr	r0, [r0, #0]
   26bd6:	f7fb fdb5 	bl	22744 <nrf_close>
	if (retval == 0) {
   26bda:	4604      	mov	r4, r0
   26bdc:	b910      	cbnz	r0, 26be4 <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   26bde:	4628      	mov	r0, r5
   26be0:	f7f7 fb48 	bl	1e274 <release_ctx>
}
   26be4:	4620      	mov	r0, r4
   26be6:	bd38      	pop	{r3, r4, r5, pc}

00026be8 <is_notification>:
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26be8:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
   26bec:	b2db      	uxtb	r3, r3
   26bee:	2b08      	cmp	r3, #8
   26bf0:	bf9d      	ittte	ls
   26bf2:	f240 1005 	movwls	r0, #261	; 0x105
   26bf6:	40d8      	lsrls	r0, r3
   26bf8:	f000 0001 	andls.w	r0, r0, #1
{
   26bfc:	2000      	movhi	r0, #0
}
   26bfe:	4770      	bx	lr

00026c00 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   26c00:	280d      	cmp	r0, #13
   26c02:	d004      	beq.n	26c0e <is_lfcr+0xe>
   26c04:	f1a0 030a 	sub.w	r3, r0, #10
   26c08:	4258      	negs	r0, r3
   26c0a:	4158      	adcs	r0, r3
   26c0c:	4770      	bx	lr
		return true;
   26c0e:	2001      	movs	r0, #1
}
   26c10:	4770      	bx	lr

00026c12 <skip_command_prefix>:
{
   26c12:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   26c14:	6801      	ldr	r1, [r0, #0]
{
   26c16:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   26c18:	1c8b      	adds	r3, r1, #2
   26c1a:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   26c1c:	788c      	ldrb	r4, [r1, #2]
   26c1e:	4620      	mov	r0, r4
   26c20:	f7ff ffee 	bl	26c00 <is_lfcr>
   26c24:	b910      	cbnz	r0, 26c2c <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26c26:	b10c      	cbz	r4, 26c2c <skip_command_prefix+0x1a>
	(*cmd)++;
   26c28:	3103      	adds	r1, #3
   26c2a:	6011      	str	r1, [r2, #0]
}
   26c2c:	bd10      	pop	{r4, pc}

00026c2e <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   26c2e:	6813      	ldr	r3, [r2, #0]
   26c30:	f7f7 bf5a 	b.w	1eae8 <at_parser_max_params_from_str>

00026c34 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   26c34:	6803      	ldr	r3, [r0, #0]
   26c36:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   26c38:	bf86      	itte	hi
   26c3a:	6840      	ldrhi	r0, [r0, #4]
   26c3c:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
		return NULL;
   26c40:	2000      	movls	r0, #0
}
   26c42:	4770      	bx	lr

00026c44 <at_param_clear>:
{
   26c44:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   26c46:	7803      	ldrb	r3, [r0, #0]
{
   26c48:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   26c4a:	3b02      	subs	r3, #2
   26c4c:	2b01      	cmp	r3, #1
   26c4e:	d802      	bhi.n	26c56 <at_param_clear+0x12>
		k_free(param->value.str_val);
   26c50:	6880      	ldr	r0, [r0, #8]
   26c52:	f001 fc11 	bl	28478 <k_free>
	param->value.int_val = 0;
   26c56:	2200      	movs	r2, #0
   26c58:	2300      	movs	r3, #0
   26c5a:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   26c5e:	bd10      	pop	{r4, pc}

00026c60 <at_params_list_init>:

	return 0;
}

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   26c60:	b538      	push	{r3, r4, r5, lr}
   26c62:	460d      	mov	r5, r1
	if (list == NULL) {
   26c64:	4604      	mov	r4, r0
   26c66:	b140      	cbz	r0, 26c7a <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   26c68:	2110      	movs	r1, #16
   26c6a:	4628      	mov	r0, r5
   26c6c:	f001 fc0f 	bl	2848e <k_calloc>
   26c70:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   26c72:	b128      	cbz	r0, 26c80 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   26c74:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   26c76:	6025      	str	r5, [r4, #0]
}
   26c78:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   26c7a:	f06f 0015 	mvn.w	r0, #21
   26c7e:	e7fb      	b.n	26c78 <at_params_list_init+0x18>
		return -ENOMEM;
   26c80:	f06f 000b 	mvn.w	r0, #11
   26c84:	e7f8      	b.n	26c78 <at_params_list_init+0x18>

00026c86 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   26c86:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   26c88:	4604      	mov	r4, r0
   26c8a:	b128      	cbz	r0, 26c98 <at_params_list_clear+0x12>
   26c8c:	6843      	ldr	r3, [r0, #4]
   26c8e:	b11b      	cbz	r3, 26c98 <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   26c90:	2500      	movs	r5, #0
   26c92:	6823      	ldr	r3, [r4, #0]
   26c94:	429d      	cmp	r5, r3
   26c96:	d300      	bcc.n	26c9a <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   26c98:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   26c9a:	6866      	ldr	r6, [r4, #4]
   26c9c:	eb06 1605 	add.w	r6, r6, r5, lsl #4
   26ca0:	4630      	mov	r0, r6
   26ca2:	f7ff ffcf 	bl	26c44 <at_param_clear>
__ssp_bos_icheck3(memset, void *, int)
   26ca6:	2210      	movs	r2, #16
   26ca8:	2100      	movs	r1, #0
   26caa:	4630      	mov	r0, r6
   26cac:	f001 fc30 	bl	28510 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   26cb0:	3501      	adds	r5, #1
   26cb2:	e7ee      	b.n	26c92 <at_params_list_clear+0xc>

00026cb4 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   26cb4:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   26cb6:	4604      	mov	r4, r0
   26cb8:	b148      	cbz	r0, 26cce <at_params_list_free+0x1a>
   26cba:	6843      	ldr	r3, [r0, #4]
   26cbc:	b13b      	cbz	r3, 26cce <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   26cbe:	2500      	movs	r5, #0
	at_params_list_clear(list);
   26cc0:	f7ff ffe1 	bl	26c86 <at_params_list_clear>
	k_free(list->params);
   26cc4:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   26cc6:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   26cc8:	f001 fbd6 	bl	28478 <k_free>
	list->params = NULL;
   26ccc:	6065      	str	r5, [r4, #4]
}
   26cce:	bd38      	pop	{r3, r4, r5, pc}

00026cd0 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   26cd0:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   26cd2:	b178      	cbz	r0, 26cf4 <at_params_empty_put+0x24>
   26cd4:	6843      	ldr	r3, [r0, #4]
   26cd6:	b16b      	cbz	r3, 26cf4 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26cd8:	f7ff ffac 	bl	26c34 <at_params_get>

	if (param == NULL) {
   26cdc:	4604      	mov	r4, r0
   26cde:	b148      	cbz	r0, 26cf4 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   26ce0:	f7ff ffb0 	bl	26c44 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   26ce4:	2304      	movs	r3, #4
	param->value.int_val = 0;
   26ce6:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   26ce8:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   26cea:	2300      	movs	r3, #0

	return 0;
   26cec:	2000      	movs	r0, #0
	param->value.int_val = 0;
   26cee:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   26cf2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   26cf4:	f06f 0015 	mvn.w	r0, #21
   26cf8:	e7fb      	b.n	26cf2 <at_params_empty_put+0x22>

00026cfa <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   26cfa:	b570      	push	{r4, r5, r6, lr}
   26cfc:	4616      	mov	r6, r2
   26cfe:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   26d00:	b168      	cbz	r0, 26d1e <at_params_int_put+0x24>
   26d02:	6843      	ldr	r3, [r0, #4]
   26d04:	b15b      	cbz	r3, 26d1e <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26d06:	f7ff ff95 	bl	26c34 <at_params_get>

	if (param == NULL) {
   26d0a:	4604      	mov	r4, r0
   26d0c:	b138      	cbz	r0, 26d1e <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   26d0e:	f7ff ff99 	bl	26c44 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   26d12:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   26d14:	2000      	movs	r0, #0
	param->value.int_val = value;
   26d16:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   26d1a:	7023      	strb	r3, [r4, #0]
}
   26d1c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   26d1e:	f06f 0015 	mvn.w	r0, #21
   26d22:	e7fb      	b.n	26d1c <at_params_int_put+0x22>

00026d24 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   26d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d26:	4617      	mov	r7, r2
   26d28:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   26d2a:	b1c0      	cbz	r0, 26d5e <at_params_string_put+0x3a>
   26d2c:	6843      	ldr	r3, [r0, #4]
   26d2e:	b1b3      	cbz	r3, 26d5e <at_params_string_put+0x3a>
   26d30:	b1aa      	cbz	r2, 26d5e <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26d32:	f7ff ff7f 	bl	26c34 <at_params_get>

	if (param == NULL) {
   26d36:	4604      	mov	r4, r0
   26d38:	b188      	cbz	r0, 26d5e <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   26d3a:	1c68      	adds	r0, r5, #1
   26d3c:	f001 fba3 	bl	28486 <k_malloc>

	if (param_value == NULL) {
   26d40:	4606      	mov	r6, r0
   26d42:	b178      	cbz	r0, 26d64 <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26d44:	462a      	mov	r2, r5
   26d46:	4639      	mov	r1, r7
   26d48:	f001 fbd5 	bl	284f6 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   26d4c:	4620      	mov	r0, r4
   26d4e:	f7ff ff79 	bl	26c44 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   26d52:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   26d54:	2000      	movs	r0, #0
	param->size = str_len;
   26d56:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   26d58:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   26d5a:	60a6      	str	r6, [r4, #8]
}
   26d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   26d5e:	f06f 0015 	mvn.w	r0, #21
   26d62:	e7fb      	b.n	26d5c <at_params_string_put+0x38>
		return -ENOMEM;
   26d64:	f06f 000b 	mvn.w	r0, #11
   26d68:	e7f8      	b.n	26d5c <at_params_string_put+0x38>

00026d6a <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   26d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d6c:	4617      	mov	r7, r2
   26d6e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   26d70:	b1c0      	cbz	r0, 26da4 <at_params_array_put+0x3a>
   26d72:	6843      	ldr	r3, [r0, #4]
   26d74:	b1b3      	cbz	r3, 26da4 <at_params_array_put+0x3a>
   26d76:	b1aa      	cbz	r2, 26da4 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26d78:	f7ff ff5c 	bl	26c34 <at_params_get>

	if (param == NULL) {
   26d7c:	4604      	mov	r4, r0
   26d7e:	b188      	cbz	r0, 26da4 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   26d80:	4628      	mov	r0, r5
   26d82:	f001 fb80 	bl	28486 <k_malloc>

	if (param_value == NULL) {
   26d86:	4606      	mov	r6, r0
   26d88:	b178      	cbz	r0, 26daa <at_params_array_put+0x40>
   26d8a:	462a      	mov	r2, r5
   26d8c:	4639      	mov	r1, r7
   26d8e:	f001 fbb2 	bl	284f6 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   26d92:	4620      	mov	r0, r4
   26d94:	f7ff ff56 	bl	26c44 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   26d98:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   26d9a:	2000      	movs	r0, #0
	param->size = array_len;
   26d9c:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   26d9e:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   26da0:	60a6      	str	r6, [r4, #8]
}
   26da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   26da4:	f06f 0015 	mvn.w	r0, #21
   26da8:	e7fb      	b.n	26da2 <at_params_array_put+0x38>
		return -ENOMEM;
   26daa:	f06f 000b 	mvn.w	r0, #11
   26dae:	e7f8      	b.n	26da2 <at_params_array_put+0x38>

00026db0 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   26db0:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   26db2:	b1b0      	cbz	r0, 26de2 <at_params_short_get+0x32>
   26db4:	6843      	ldr	r3, [r0, #4]
   26db6:	b1a3      	cbz	r3, 26de2 <at_params_short_get+0x32>
   26db8:	b19a      	cbz	r2, 26de2 <at_params_short_get+0x32>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26dba:	f7ff ff3b 	bl	26c34 <at_params_get>

	if (param == NULL) {
   26dbe:	b180      	cbz	r0, 26de2 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   26dc0:	7803      	ldrb	r3, [r0, #0]
   26dc2:	2b01      	cmp	r3, #1
   26dc4:	d10d      	bne.n	26de2 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   26dc6:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   26dca:	f513 4000 	adds.w	r0, r3, #32768	; 0x8000
   26dce:	f141 0100 	adc.w	r1, r1, #0
   26dd2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   26dd6:	f171 0100 	sbcs.w	r1, r1, #0
   26dda:	d202      	bcs.n	26de2 <at_params_short_get+0x32>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   26ddc:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   26dde:	8013      	strh	r3, [r2, #0]
}
   26de0:	bd08      	pop	{r3, pc}
		return -EINVAL;
   26de2:	f06f 0015 	mvn.w	r0, #21
   26de6:	e7fb      	b.n	26de0 <at_params_short_get+0x30>

00026de8 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   26de8:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   26dea:	b190      	cbz	r0, 26e12 <at_params_unsigned_short_get+0x2a>
   26dec:	6843      	ldr	r3, [r0, #4]
   26dee:	b183      	cbz	r3, 26e12 <at_params_unsigned_short_get+0x2a>
   26df0:	b17a      	cbz	r2, 26e12 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26df2:	f7ff ff1f 	bl	26c34 <at_params_get>

	if (param == NULL) {
   26df6:	b160      	cbz	r0, 26e12 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   26df8:	7803      	ldrb	r3, [r0, #0]
   26dfa:	2b01      	cmp	r3, #1
   26dfc:	d109      	bne.n	26e12 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   26dfe:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   26e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   26e06:	f171 0100 	sbcs.w	r1, r1, #0
   26e0a:	d202      	bcs.n	26e12 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
   26e0c:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   26e0e:	8013      	strh	r3, [r2, #0]
}
   26e10:	bd08      	pop	{r3, pc}
		return -EINVAL;
   26e12:	f06f 0015 	mvn.w	r0, #21
   26e16:	e7fb      	b.n	26e10 <at_params_unsigned_short_get+0x28>

00026e18 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   26e18:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   26e1a:	b190      	cbz	r0, 26e42 <at_params_int_get+0x2a>
   26e1c:	6843      	ldr	r3, [r0, #4]
   26e1e:	b183      	cbz	r3, 26e42 <at_params_int_get+0x2a>
   26e20:	b17a      	cbz	r2, 26e42 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26e22:	f7ff ff07 	bl	26c34 <at_params_get>

	if (param == NULL) {
   26e26:	b160      	cbz	r0, 26e42 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   26e28:	7803      	ldrb	r3, [r0, #0]
   26e2a:	2b01      	cmp	r3, #1
   26e2c:	d109      	bne.n	26e42 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   26e2e:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   26e32:	f113 4000 	adds.w	r0, r3, #2147483648	; 0x80000000
   26e36:	f141 0100 	adc.w	r1, r1, #0
   26e3a:	b911      	cbnz	r1, 26e42 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   26e3c:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   26e3e:	6013      	str	r3, [r2, #0]
}
   26e40:	bd08      	pop	{r3, pc}
		return -EINVAL;
   26e42:	f06f 0015 	mvn.w	r0, #21
   26e46:	e7fb      	b.n	26e40 <at_params_int_get+0x28>

00026e48 <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   26e48:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   26e4a:	b170      	cbz	r0, 26e6a <at_params_int64_get+0x22>
   26e4c:	6843      	ldr	r3, [r0, #4]
   26e4e:	b163      	cbz	r3, 26e6a <at_params_int64_get+0x22>
   26e50:	b15a      	cbz	r2, 26e6a <at_params_int64_get+0x22>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26e52:	f7ff feef 	bl	26c34 <at_params_get>

	if (param == NULL) {
   26e56:	b140      	cbz	r0, 26e6a <at_params_int64_get+0x22>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   26e58:	7803      	ldrb	r3, [r0, #0]
   26e5a:	2b01      	cmp	r3, #1
   26e5c:	d105      	bne.n	26e6a <at_params_int64_get+0x22>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   26e5e:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   26e62:	e9c2 0100 	strd	r0, r1, [r2]
	return 0;
   26e66:	2000      	movs	r0, #0
}
   26e68:	bd08      	pop	{r3, pc}
		return -EINVAL;
   26e6a:	f06f 0015 	mvn.w	r0, #21
   26e6e:	e7fb      	b.n	26e68 <at_params_int64_get+0x20>

00026e70 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   26e70:	b570      	push	{r4, r5, r6, lr}
   26e72:	4615      	mov	r5, r2
   26e74:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL || len == NULL) {
   26e76:	b1a8      	cbz	r0, 26ea4 <at_params_string_get+0x34>
   26e78:	6843      	ldr	r3, [r0, #4]
   26e7a:	b19b      	cbz	r3, 26ea4 <at_params_string_get+0x34>
   26e7c:	b192      	cbz	r2, 26ea4 <at_params_string_get+0x34>
   26e7e:	b18c      	cbz	r4, 26ea4 <at_params_string_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26e80:	f7ff fed8 	bl	26c34 <at_params_get>

	if (param == NULL) {
   26e84:	b170      	cbz	r0, 26ea4 <at_params_string_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   26e86:	7803      	ldrb	r3, [r0, #0]
   26e88:	2b02      	cmp	r3, #2
   26e8a:	d10b      	bne.n	26ea4 <at_params_string_get+0x34>
		return param->size;
   26e8c:	6846      	ldr	r6, [r0, #4]
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);

	if (*len < param_len) {
   26e8e:	6823      	ldr	r3, [r4, #0]
   26e90:	42b3      	cmp	r3, r6
   26e92:	d30a      	bcc.n	26eaa <at_params_string_get+0x3a>
   26e94:	6881      	ldr	r1, [r0, #8]
   26e96:	4632      	mov	r2, r6
   26e98:	4628      	mov	r0, r5
   26e9a:	f001 fb2c 	bl	284f6 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   26e9e:	2000      	movs	r0, #0
	*len = param_len;
   26ea0:	6026      	str	r6, [r4, #0]
}
   26ea2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   26ea4:	f06f 0015 	mvn.w	r0, #21
   26ea8:	e7fb      	b.n	26ea2 <at_params_string_get+0x32>
		return -ENOMEM;
   26eaa:	f06f 000b 	mvn.w	r0, #11
   26eae:	e7f8      	b.n	26ea2 <at_params_string_get+0x32>

00026eb0 <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   26eb0:	4602      	mov	r2, r0
{
   26eb2:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   26eb4:	b170      	cbz	r0, 26ed4 <at_params_valid_count_get+0x24>
   26eb6:	6840      	ldr	r0, [r0, #4]
   26eb8:	b160      	cbz	r0, 26ed4 <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   26eba:	6811      	ldr	r1, [r2, #0]
   26ebc:	b119      	cbz	r1, 26ec6 <at_params_valid_count_get+0x16>
   26ebe:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   26ec0:	b108      	cbz	r0, 26ec6 <at_params_valid_count_get+0x16>
   26ec2:	7803      	ldrb	r3, [r0, #0]
   26ec4:	b90b      	cbnz	r3, 26eca <at_params_valid_count_get+0x1a>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   26ec6:	4608      	mov	r0, r1
   26ec8:	bd08      	pop	{r3, pc}
		param = at_params_get(list, valid_i);
   26eca:	4610      	mov	r0, r2
		valid_i += 1;
   26ecc:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   26ece:	f7ff feb1 	bl	26c34 <at_params_get>
   26ed2:	e7f5      	b.n	26ec0 <at_params_valid_count_get+0x10>
		return -EINVAL;
   26ed4:	f06f 0115 	mvn.w	r1, #21
   26ed8:	e7f5      	b.n	26ec6 <at_params_valid_count_get+0x16>

00026eda <z_log_msg_static_create.constprop.0>:
   26eda:	2300      	movs	r3, #0
   26edc:	f7f3 be6a 	b.w	1abb4 <z_impl_z_log_msg_static_create>

00026ee0 <z_log_msg_static_create.constprop.0>:
   26ee0:	2300      	movs	r3, #0
   26ee2:	f7f3 be67 	b.w	1abb4 <z_impl_z_log_msg_static_create>

00026ee6 <string_to_int>:
{
   26ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26ee8:	460c      	mov	r4, r1
   26eea:	4605      	mov	r5, r0
   26eec:	4616      	mov	r6, r2
	errno = 0;
   26eee:	f7ff f9c9 	bl	26284 <__errno>
   26ef2:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   26ef4:	4622      	mov	r2, r4
	errno = 0;
   26ef6:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   26ef8:	a901      	add	r1, sp, #4
   26efa:	4628      	mov	r0, r5
   26efc:	f7fd ff9a 	bl	24e34 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   26f00:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   26f02:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   26f04:	42ab      	cmp	r3, r5
   26f06:	d103      	bne.n	26f10 <string_to_int+0x2a>
		return -ENODATA;
   26f08:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   26f0c:	b002      	add	sp, #8
   26f0e:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   26f10:	781b      	ldrb	r3, [r3, #0]
   26f12:	2b00      	cmp	r3, #0
   26f14:	d1f8      	bne.n	26f08 <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   26f16:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   26f1a:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   26f1c:	3303      	adds	r3, #3
   26f1e:	d802      	bhi.n	26f26 <string_to_int+0x40>
	return 0;
   26f20:	2000      	movs	r0, #0
	*output = temp;
   26f22:	6034      	str	r4, [r6, #0]
	return 0;
   26f24:	e7f2      	b.n	26f0c <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   26f26:	f7ff f9ad 	bl	26284 <__errno>
   26f2a:	6803      	ldr	r3, [r0, #0]
   26f2c:	2b22      	cmp	r3, #34	; 0x22
   26f2e:	d1f7      	bne.n	26f20 <string_to_int+0x3a>
   26f30:	e7ea      	b.n	26f08 <string_to_int+0x22>

00026f32 <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   26f32:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   26f34:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   26f36:	b087      	sub	sp, #28
   26f38:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   26f3a:	ab01      	add	r3, sp, #4
   26f3c:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   26f3e:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   26f40:	f7ff ff96 	bl	26e70 <at_params_string_get>
	if (err) {
   26f44:	b968      	cbnz	r0, 26f62 <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   26f46:	9b01      	ldr	r3, [sp, #4]
	if (string_to_int(str_buf, base, output)) {
   26f48:	4622      	mov	r2, r4
	str_buf[len] = '\0';
   26f4a:	3318      	adds	r3, #24
   26f4c:	446b      	add	r3, sp
   26f4e:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   26f52:	4629      	mov	r1, r5
   26f54:	a802      	add	r0, sp, #8
   26f56:	f7ff ffc6 	bl	26ee6 <string_to_int>
		return -ENODATA;
   26f5a:	2800      	cmp	r0, #0
   26f5c:	bf18      	it	ne
   26f5e:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   26f62:	b007      	add	sp, #28
   26f64:	bd30      	pop	{r4, r5, pc}

00026f66 <on_modem_init>:
	if (err) {
		LOG_ERR("Failed to unlock PLMN, err %d", err);
		return;
	}
#endif
}
   26f66:	4770      	bx	lr

00026f68 <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   26f68:	f7f8 ba92 	b.w	1f490 <lte_lc_deinit>

00026f6c <on_modem_lib_init>:
	if (ret != 0) {
   26f6c:	b908      	cbnz	r0, 26f72 <on_modem_lib_init+0x6>
   26f6e:	f7f9 badd 	b.w	2052c <on_modem_lib_init.part.0>
}
   26f72:	4770      	bx	lr

00026f74 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   26f74:	2000      	movs	r0, #0
   26f76:	4770      	bx	lr

00026f78 <psa_crypto_init>:
}
   26f78:	2000      	movs	r0, #0
   26f7a:	4770      	bx	lr

00026f7c <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   26f7c:	4700      	bx	r0

00026f7e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   26f7e:	f001 b998 	b.w	282b2 <z_impl_k_busy_wait>

00026f82 <nrfx_clock_stop>:
    clock_stop(domain);
   26f82:	f7f9 bbc5 	b.w	20710 <clock_stop>

00026f86 <set_ss_pin_state>:
{
   26f86:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   26f88:	7fc0      	ldrb	r0, [r0, #31]
   26f8a:	28ff      	cmp	r0, #255	; 0xff
   26f8c:	d006      	beq.n	26f9c <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
   26f8e:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
   26f90:	079b      	lsls	r3, r3, #30
   26f92:	bf58      	it	pl
   26f94:	f081 0101 	eorpl.w	r1, r1, #1
   26f98:	f7fa b88e 	b.w	210b8 <nrf_gpio_pin_write>
}
   26f9c:	4770      	bx	lr

00026f9e <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   26f9e:	7b0a      	ldrb	r2, [r1, #12]
{
   26fa0:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   26fa2:	2a03      	cmp	r2, #3
   26fa4:	d829      	bhi.n	26ffa <xfer_completeness_check+0x5c>
   26fa6:	e8df f002 	tbb	[pc, r2]
   26faa:	2521      	.short	0x2521
   26fac:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   26fae:	688a      	ldr	r2, [r1, #8]
   26fb0:	0350      	lsls	r0, r2, #13
   26fb2:	d504      	bpl.n	26fbe <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   26fb4:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   26fb8:	6908      	ldr	r0, [r1, #16]
   26fba:	4290      	cmp	r0, r2
   26fbc:	d107      	bne.n	26fce <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   26fbe:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   26fc0:	0352      	lsls	r2, r2, #13
   26fc2:	d41a      	bmi.n	26ffa <xfer_completeness_check+0x5c>
   26fc4:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   26fc8:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   26fca:	4291      	cmp	r1, r2
   26fcc:	d015      	beq.n	26ffa <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   26fce:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   26fd0:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   26fd2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   26fd6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   26fda:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   26fdc:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   26fe0:	6908      	ldr	r0, [r1, #16]
   26fe2:	4290      	cmp	r0, r2
   26fe4:	d1f3      	bne.n	26fce <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   26fe6:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   26fea:	e7ed      	b.n	26fc8 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   26fec:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   26ff0:	6909      	ldr	r1, [r1, #16]
   26ff2:	e7ea      	b.n	26fca <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   26ff4:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   26ff8:	e7fa      	b.n	26ff0 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   26ffa:	2001      	movs	r0, #1
}
   26ffc:	4770      	bx	lr

00026ffe <rpc_handle_ctrl_message>:
   26ffe:	2902      	cmp	r1, #2
   27000:	b510      	push	{r4, lr}
   27002:	4604      	mov	r4, r0
   27004:	d005      	beq.n	27012 <rpc_handle_ctrl_message+0x14>
   27006:	2904      	cmp	r1, #4
   27008:	d001      	beq.n	2700e <rpc_handle_ctrl_message+0x10>
   2700a:	2901      	cmp	r1, #1
   2700c:	d107      	bne.n	2701e <rpc_handle_ctrl_message+0x20>
   2700e:	2000      	movs	r0, #0
   27010:	bd10      	pop	{r4, pc}
   27012:	6880      	ldr	r0, [r0, #8]
   27014:	2800      	cmp	r0, #0
   27016:	d0fa      	beq.n	2700e <rpc_handle_ctrl_message+0x10>
   27018:	f7f6 ff16 	bl	1de48 <nrf_modem_os_shm_tx_free>
   2701c:	e7f7      	b.n	2700e <rpc_handle_ctrl_message+0x10>
   2701e:	6880      	ldr	r0, [r0, #8]
   27020:	b108      	cbz	r0, 27026 <rpc_handle_ctrl_message+0x28>
   27022:	f7f6 ff11 	bl	1de48 <nrf_modem_os_shm_tx_free>
   27026:	4620      	mov	r0, r4
   27028:	f7fa fd24 	bl	21a74 <rpc_transport_msg_rx_free>
   2702c:	e7ef      	b.n	2700e <rpc_handle_ctrl_message+0x10>

0002702e <rpc_init>:
   2702e:	f7fa bd0f 	b.w	21a50 <rpc_transport_init>

00027032 <rpc_list_preambles_init>:
   27032:	2200      	movs	r2, #0
   27034:	b510      	push	{r4, lr}
   27036:	6804      	ldr	r4, [r0, #0]
   27038:	4294      	cmp	r4, r2
   2703a:	d100      	bne.n	2703e <rpc_list_preambles_init+0xc>
   2703c:	bd10      	pop	{r4, pc}
   2703e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   27042:	684b      	ldr	r3, [r1, #4]
   27044:	3201      	adds	r2, #1
   27046:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2704a:	f043 0303 	orr.w	r3, r3, #3
   2704e:	604b      	str	r3, [r1, #4]
   27050:	e7f2      	b.n	27038 <rpc_list_preambles_init+0x6>

00027052 <rpc_transport_ipc_data_rx_resume>:
   27052:	2004      	movs	r0, #4
   27054:	f7f9 bff4 	b.w	21040 <nrfx_ipc_receive_event_enable>

00027058 <rpc_transport_ipc_data_rx_suspend>:
   27058:	2004      	movs	r0, #4
   2705a:	f7f9 bff9 	b.w	21050 <nrfx_ipc_receive_event_disable>

0002705e <rpc_transport_ipc_shutdown>:
   2705e:	f7f9 bfc1 	b.w	20fe4 <nrfx_ipc_uninit>

00027062 <rpc_transport_ipc_msg_alloc>:
   27062:	b538      	push	{r3, r4, r5, lr}
   27064:	2300      	movs	r3, #0
   27066:	1d02      	adds	r2, r0, #4
   27068:	6804      	ldr	r4, [r0, #0]
   2706a:	429c      	cmp	r4, r3
   2706c:	d801      	bhi.n	27072 <rpc_transport_ipc_msg_alloc+0x10>
   2706e:	2300      	movs	r3, #0
   27070:	e016      	b.n	270a0 <rpc_transport_ipc_msg_alloc+0x3e>
   27072:	f04f 0400 	mov.w	r4, #0
   27076:	e8d2 5fcf 	ldaexb	r5, [r2]
   2707a:	2d03      	cmp	r5, #3
   2707c:	d104      	bne.n	27088 <rpc_transport_ipc_msg_alloc+0x26>
   2707e:	e8c2 4fcc 	stlexb	ip, r4, [r2]
   27082:	f1bc 0f00 	cmp.w	ip, #0
   27086:	d1f6      	bne.n	27076 <rpc_transport_ipc_msg_alloc+0x14>
   27088:	d002      	beq.n	27090 <rpc_transport_ipc_msg_alloc+0x2e>
   2708a:	3208      	adds	r2, #8
   2708c:	3301      	adds	r3, #1
   2708e:	e7eb      	b.n	27068 <rpc_transport_ipc_msg_alloc+0x6>
   27090:	eb01 1383 	add.w	r3, r1, r3, lsl #6
   27094:	4618      	mov	r0, r3
   27096:	2240      	movs	r2, #64	; 0x40
   27098:	2100      	movs	r1, #0
   2709a:	f001 fa39 	bl	28510 <memset>
   2709e:	4603      	mov	r3, r0
   270a0:	4618      	mov	r0, r3
   270a2:	bd38      	pop	{r3, r4, r5, pc}

000270a4 <rpc_client_msg_from_rpc_msg_get>:
   270a4:	3008      	adds	r0, #8
   270a6:	4770      	bx	lr

000270a8 <rpc_client_msg_alloc>:
   270a8:	b538      	push	{r3, r4, r5, lr}
   270aa:	4605      	mov	r5, r0
   270ac:	b920      	cbnz	r0, 270b8 <rpc_client_msg_alloc+0x10>
   270ae:	f7fa fcd5 	bl	21a5c <rpc_transport_msg_alloc>
   270b2:	b980      	cbnz	r0, 270d6 <rpc_client_msg_alloc+0x2e>
   270b4:	2000      	movs	r0, #0
   270b6:	bd38      	pop	{r3, r4, r5, pc}
   270b8:	f7f6 febe 	bl	1de38 <nrf_modem_os_shm_tx_alloc>
   270bc:	4604      	mov	r4, r0
   270be:	2800      	cmp	r0, #0
   270c0:	d0f8      	beq.n	270b4 <rpc_client_msg_alloc+0xc>
   270c2:	f7fa fccb 	bl	21a5c <rpc_transport_msg_alloc>
   270c6:	b938      	cbnz	r0, 270d8 <rpc_client_msg_alloc+0x30>
   270c8:	4620      	mov	r0, r4
   270ca:	f7f6 febd 	bl	1de48 <nrf_modem_os_shm_tx_free>
   270ce:	2001      	movs	r0, #1
   270d0:	f7f6 fe88 	bl	1dde4 <nrf_modem_os_event_notify>
   270d4:	e7ee      	b.n	270b4 <rpc_client_msg_alloc+0xc>
   270d6:	462c      	mov	r4, r5
   270d8:	60c5      	str	r5, [r0, #12]
   270da:	f840 4f08 	str.w	r4, [r0, #8]!
   270de:	e7ea      	b.n	270b6 <rpc_client_msg_alloc+0xe>

000270e0 <rpc_client_msg_send>:
   270e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   270e4:	4610      	mov	r0, r2
   270e6:	f840 1d08 	str.w	r1, [r0, #-8]!
   270ea:	f7fa bccf 	b.w	21a8c <rpc_transport_msg_send>

000270ee <rpc_client_msg_rx_free>:
   270ee:	3808      	subs	r0, #8
   270f0:	f7fa bcc0 	b.w	21a74 <rpc_transport_msg_rx_free>

000270f4 <rpc_client_msg_data_rx_free>:
   270f4:	f7fa bcc4 	b.w	21a80 <rpc_transport_msg_data_rx_free>

000270f8 <rpc_client_msg_data_tx_size>:
   270f8:	f7fa bcb6 	b.w	21a68 <rpc_transport_msg_data_tx_size>

000270fc <rpc_client_msg_data_tx_alloc>:
   270fc:	f7f6 be9c 	b.w	1de38 <nrf_modem_os_shm_tx_alloc>

00027100 <rpc_client_msg_data_tx_free>:
   27100:	b508      	push	{r3, lr}
   27102:	f7f6 fea1 	bl	1de48 <nrf_modem_os_shm_tx_free>
   27106:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2710a:	2001      	movs	r0, #1
   2710c:	f7f6 be6a 	b.w	1dde4 <nrf_modem_os_event_notify>

00027110 <sockaddr_init>:
   27110:	2904      	cmp	r1, #4
   27112:	b570      	push	{r4, r5, r6, lr}
   27114:	4605      	mov	r5, r0
   27116:	4616      	mov	r6, r2
   27118:	d003      	beq.n	27122 <sockaddr_init+0x12>
   2711a:	2910      	cmp	r1, #16
   2711c:	d015      	beq.n	2714a <sockaddr_init+0x3a>
   2711e:	2400      	movs	r4, #0
   27120:	e011      	b.n	27146 <sockaddr_init+0x36>
   27122:	2010      	movs	r0, #16
   27124:	f7f6 fe7a 	bl	1de1c <nrf_modem_os_alloc>
   27128:	4604      	mov	r4, r0
   2712a:	2800      	cmp	r0, #0
   2712c:	d0f7      	beq.n	2711e <sockaddr_init+0xe>
   2712e:	220f      	movs	r2, #15
   27130:	2100      	movs	r1, #0
   27132:	3001      	adds	r0, #1
   27134:	f001 f9ec 	bl	28510 <memset>
   27138:	2310      	movs	r3, #16
   2713a:	7023      	strb	r3, [r4, #0]
   2713c:	2301      	movs	r3, #1
   2713e:	8126      	strh	r6, [r4, #8]
   27140:	6063      	str	r3, [r4, #4]
   27142:	682b      	ldr	r3, [r5, #0]
   27144:	60e3      	str	r3, [r4, #12]
   27146:	4620      	mov	r0, r4
   27148:	bd70      	pop	{r4, r5, r6, pc}
   2714a:	2024      	movs	r0, #36	; 0x24
   2714c:	f7f6 fe66 	bl	1de1c <nrf_modem_os_alloc>
   27150:	4604      	mov	r4, r0
   27152:	2800      	cmp	r0, #0
   27154:	d0e3      	beq.n	2711e <sockaddr_init+0xe>
   27156:	2223      	movs	r2, #35	; 0x23
   27158:	2100      	movs	r1, #0
   2715a:	3001      	adds	r0, #1
   2715c:	f001 f9d8 	bl	28510 <memset>
   27160:	2324      	movs	r3, #36	; 0x24
   27162:	7023      	strb	r3, [r4, #0]
   27164:	2302      	movs	r3, #2
   27166:	4628      	mov	r0, r5
   27168:	6063      	str	r3, [r4, #4]
   2716a:	8126      	strh	r6, [r4, #8]
   2716c:	f104 0310 	add.w	r3, r4, #16
   27170:	f105 0210 	add.w	r2, r5, #16
   27174:	f850 1b04 	ldr.w	r1, [r0], #4
   27178:	4290      	cmp	r0, r2
   2717a:	f843 1b04 	str.w	r1, [r3], #4
   2717e:	d1f9      	bne.n	27174 <sockaddr_init+0x64>
   27180:	e7e1      	b.n	27146 <sockaddr_init+0x36>

00027182 <sock_pollcb>:
   27182:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27184:	2500      	movs	r5, #0
   27186:	6803      	ldr	r3, [r0, #0]
   27188:	4604      	mov	r4, r0
   2718a:	9300      	str	r3, [sp, #0]
   2718c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   2718e:	4668      	mov	r0, sp
   27190:	f8ad 5006 	strh.w	r5, [sp, #6]
   27194:	f8ad 3004 	strh.w	r3, [sp, #4]
   27198:	f000 fcc2 	bl	27b20 <nrf_poll_one>
   2719c:	b138      	cbz	r0, 271ae <sock_pollcb+0x2c>
   2719e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   271a0:	4668      	mov	r0, sp
   271a2:	4798      	blx	r3
   271a4:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   271a8:	b10b      	cbz	r3, 271ae <sock_pollcb+0x2c>
   271aa:	6365      	str	r5, [r4, #52]	; 0x34
   271ac:	63a5      	str	r5, [r4, #56]	; 0x38
   271ae:	b003      	add	sp, #12
   271b0:	bd30      	pop	{r4, r5, pc}

000271b2 <sock_has_pkt>:
   271b2:	6840      	ldr	r0, [r0, #4]
   271b4:	3800      	subs	r0, #0
   271b6:	bf18      	it	ne
   271b8:	2001      	movne	r0, #1
   271ba:	4770      	bx	lr

000271bc <sock_pkt_append>:
   271bc:	2300      	movs	r3, #0
   271be:	600b      	str	r3, [r1, #0]
   271c0:	6883      	ldr	r3, [r0, #8]
   271c2:	b913      	cbnz	r3, 271ca <sock_pkt_append+0xe>
   271c4:	e9c0 1101 	strd	r1, r1, [r0, #4]
   271c8:	4770      	bx	lr
   271ca:	6019      	str	r1, [r3, #0]
   271cc:	6081      	str	r1, [r0, #8]
   271ce:	4770      	bx	lr

000271d0 <sock_pkt_remove>:
   271d0:	b538      	push	{r3, r4, r5, lr}
   271d2:	4605      	mov	r5, r0
   271d4:	460c      	mov	r4, r1
   271d6:	f7fa fc5f 	bl	21a98 <rpc_transport_data_rx_suspend>
   271da:	68aa      	ldr	r2, [r5, #8]
   271dc:	6823      	ldr	r3, [r4, #0]
   271de:	4294      	cmp	r4, r2
   271e0:	606b      	str	r3, [r5, #4]
   271e2:	bf08      	it	eq
   271e4:	60ab      	streq	r3, [r5, #8]
   271e6:	2300      	movs	r3, #0
   271e8:	4620      	mov	r0, r4
   271ea:	6023      	str	r3, [r4, #0]
   271ec:	f000 f904 	bl	273f8 <pkt_free>
   271f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   271f4:	f7fa bc56 	b.w	21aa4 <rpc_transport_data_rx_resume>

000271f8 <sock_pkt_peek_head>:
   271f8:	6840      	ldr	r0, [r0, #4]
   271fa:	4770      	bx	lr

000271fc <sock_is_stream>:
   271fc:	6900      	ldr	r0, [r0, #16]
   271fe:	1e43      	subs	r3, r0, #1
   27200:	4258      	negs	r0, r3
   27202:	4158      	adcs	r0, r3
   27204:	4770      	bx	lr

00027206 <sock_is_datagram>:
   27206:	6900      	ldr	r0, [r0, #16]
   27208:	1e83      	subs	r3, r0, #2
   2720a:	4258      	negs	r0, r3
   2720c:	4158      	adcs	r0, r3
   2720e:	4770      	bx	lr

00027210 <sock_is_raw>:
   27210:	6900      	ldr	r0, [r0, #16]
   27212:	1ec3      	subs	r3, r0, #3
   27214:	4258      	negs	r0, r3
   27216:	4158      	adcs	r0, r3
   27218:	4770      	bx	lr

0002721a <sock_proto_is_secure>:
   2721a:	6940      	ldr	r0, [r0, #20]
   2721c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   27220:	d005      	beq.n	2722e <sock_proto_is_secure+0x14>
   27222:	f240 1311 	movw	r3, #273	; 0x111
   27226:	1ac3      	subs	r3, r0, r3
   27228:	4258      	negs	r0, r3
   2722a:	4158      	adcs	r0, r3
   2722c:	4770      	bx	lr
   2722e:	2001      	movs	r0, #1
   27230:	4770      	bx	lr

00027232 <sock_is_connecting>:
   27232:	7f00      	ldrb	r0, [r0, #28]
   27234:	f3c0 0080 	ubfx	r0, r0, #2, #1
   27238:	4770      	bx	lr

0002723a <sock_is_connected>:
   2723a:	7f00      	ldrb	r0, [r0, #28]
   2723c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   27240:	4770      	bx	lr

00027242 <sock_is_attaching>:
   27242:	7f00      	ldrb	r0, [r0, #28]
   27244:	f3c0 1000 	ubfx	r0, r0, #4, #1
   27248:	4770      	bx	lr

0002724a <sock_is_nonblock>:
   2724a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   2724c:	f000 0001 	and.w	r0, r0, #1
   27250:	4770      	bx	lr

00027252 <sock_is_closed>:
   27252:	7f00      	ldrb	r0, [r0, #28]
   27254:	f000 0001 	and.w	r0, r0, #1
   27258:	4770      	bx	lr

0002725a <sock_is_local_closed>:
   2725a:	7f00      	ldrb	r0, [r0, #28]
   2725c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   27260:	4770      	bx	lr

00027262 <sock_is_eof>:
   27262:	6903      	ldr	r3, [r0, #16]
   27264:	2b01      	cmp	r3, #1
   27266:	d105      	bne.n	27274 <sock_is_eof+0x12>
   27268:	6980      	ldr	r0, [r0, #24]
   2726a:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   2726e:	4258      	negs	r0, r3
   27270:	4158      	adcs	r0, r3
   27272:	4770      	bx	lr
   27274:	2000      	movs	r0, #0
   27276:	4770      	bx	lr

00027278 <sock_has_stream_error>:
   27278:	7f00      	ldrb	r0, [r0, #28]
   2727a:	09c0      	lsrs	r0, r0, #7
   2727c:	4770      	bx	lr

0002727e <sock_has_error>:
   2727e:	6983      	ldr	r3, [r0, #24]
   27280:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   27284:	bf14      	ite	ne
   27286:	2001      	movne	r0, #1
   27288:	2000      	moveq	r0, #0
   2728a:	4770      	bx	lr

0002728c <sock_has_flow_control>:
   2728c:	7f00      	ldrb	r0, [r0, #28]
   2728e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   27292:	4770      	bx	lr

00027294 <sock_has_pollcb>:
   27294:	6b40      	ldr	r0, [r0, #52]	; 0x34
   27296:	3800      	subs	r0, #0
   27298:	bf18      	it	ne
   2729a:	2001      	movne	r0, #1
   2729c:	4770      	bx	lr

0002729e <sock_has_rai_no_data>:
   2729e:	6b00      	ldr	r0, [r0, #48]	; 0x30
   272a0:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
   272a4:	4258      	negs	r0, r3
   272a6:	4158      	adcs	r0, r3
   272a8:	4770      	bx	lr

000272aa <sock_can_read>:
   272aa:	6840      	ldr	r0, [r0, #4]
   272ac:	3800      	subs	r0, #0
   272ae:	bf18      	it	ne
   272b0:	2001      	movne	r0, #1
   272b2:	4770      	bx	lr

000272b4 <sock_can_accept>:
   272b4:	7f40      	ldrb	r0, [r0, #29]
   272b6:	3800      	subs	r0, #0
   272b8:	bf18      	it	ne
   272ba:	2001      	movne	r0, #1
   272bc:	4770      	bx	lr

000272be <sock_can_send>:
   272be:	b510      	push	{r4, lr}
   272c0:	4602      	mov	r2, r0
   272c2:	6904      	ldr	r4, [r0, #16]
   272c4:	f7ff ffa9 	bl	2721a <sock_proto_is_secure>
   272c8:	2c01      	cmp	r4, #1
   272ca:	4601      	mov	r1, r0
   272cc:	7f13      	ldrb	r3, [r2, #28]
   272ce:	d103      	bne.n	272d8 <sock_can_send+0x1a>
   272d0:	071c      	lsls	r4, r3, #28
   272d2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   272d6:	d50b      	bpl.n	272f0 <sock_can_send+0x32>
   272d8:	b931      	cbnz	r1, 272e8 <sock_can_send+0x2a>
   272da:	07d9      	lsls	r1, r3, #31
   272dc:	d40b      	bmi.n	272f6 <sock_can_send+0x38>
   272de:	f3c3 1380 	ubfx	r3, r3, #6, #1
   272e2:	f1c3 0001 	rsb	r0, r3, #1
   272e6:	e003      	b.n	272f0 <sock_can_send+0x32>
   272e8:	069a      	lsls	r2, r3, #26
   272ea:	f3c3 1040 	ubfx	r0, r3, #5, #1
   272ee:	d4f4      	bmi.n	272da <sock_can_send+0x1c>
   272f0:	f000 0001 	and.w	r0, r0, #1
   272f4:	bd10      	pop	{r4, pc}
   272f6:	2000      	movs	r0, #0
   272f8:	e7fa      	b.n	272f0 <sock_can_send+0x32>

000272fa <sock_rcvtimeo_ms_get>:
   272fa:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   272fe:	ea53 0102 	orrs.w	r1, r3, r2
   27302:	d009      	beq.n	27318 <sock_rcvtimeo_ms_get+0x1e>
   27304:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   27308:	fbb3 f0f1 	udiv	r0, r3, r1
   2730c:	fb01 0002 	mla	r0, r1, r2, r0
   27310:	2801      	cmp	r0, #1
   27312:	bfb8      	it	lt
   27314:	2001      	movlt	r0, #1
   27316:	4770      	bx	lr
   27318:	f04f 30ff 	mov.w	r0, #4294967295
   2731c:	4770      	bx	lr

0002731e <sock_sndtimeo_ms_get>:
   2731e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   27322:	ea53 0102 	orrs.w	r1, r3, r2
   27326:	d009      	beq.n	2733c <sock_sndtimeo_ms_get+0x1e>
   27328:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2732c:	fbb3 f0f1 	udiv	r0, r3, r1
   27330:	fb01 0002 	mla	r0, r1, r2, r0
   27334:	2801      	cmp	r0, #1
   27336:	bfb8      	it	lt
   27338:	2001      	movlt	r0, #1
   2733a:	4770      	bx	lr
   2733c:	f04f 30ff 	mov.w	r0, #4294967295
   27340:	4770      	bx	lr

00027342 <sock_family_is_valid>:
   27342:	3801      	subs	r0, #1
   27344:	2802      	cmp	r0, #2
   27346:	bf8c      	ite	hi
   27348:	2000      	movhi	r0, #0
   2734a:	2001      	movls	r0, #1
   2734c:	4770      	bx	lr

0002734e <sock_type_is_valid>:
   2734e:	3801      	subs	r0, #1
   27350:	2802      	cmp	r0, #2
   27352:	bf8c      	ite	hi
   27354:	2000      	movhi	r0, #0
   27356:	2001      	movls	r0, #1
   27358:	4770      	bx	lr

0002735a <sock_proto_supports_type>:
   2735a:	2903      	cmp	r1, #3
   2735c:	d015      	beq.n	2738a <sock_proto_supports_type+0x30>
   2735e:	2811      	cmp	r0, #17
   27360:	d00c      	beq.n	2737c <sock_proto_supports_type+0x22>
   27362:	dc04      	bgt.n	2736e <sock_proto_supports_type+0x14>
   27364:	b188      	cbz	r0, 2738a <sock_proto_supports_type+0x30>
   27366:	2806      	cmp	r0, #6
   27368:	d00a      	beq.n	27380 <sock_proto_supports_type+0x26>
   2736a:	2000      	movs	r0, #0
   2736c:	4770      	bx	lr
   2736e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   27372:	d005      	beq.n	27380 <sock_proto_supports_type+0x26>
   27374:	f240 1311 	movw	r3, #273	; 0x111
   27378:	4298      	cmp	r0, r3
   2737a:	d1f6      	bne.n	2736a <sock_proto_supports_type+0x10>
   2737c:	2902      	cmp	r1, #2
   2737e:	e000      	b.n	27382 <sock_proto_supports_type+0x28>
   27380:	2901      	cmp	r1, #1
   27382:	bf14      	ite	ne
   27384:	2000      	movne	r0, #0
   27386:	2001      	moveq	r0, #1
   27388:	4770      	bx	lr
   2738a:	2001      	movs	r0, #1
   2738c:	4770      	bx	lr

0002738e <sock_sockaddr_len_is_valid>:
   2738e:	6843      	ldr	r3, [r0, #4]
   27390:	2b01      	cmp	r3, #1
   27392:	d003      	beq.n	2739c <sock_sockaddr_len_is_valid+0xe>
   27394:	2b02      	cmp	r3, #2
   27396:	d009      	beq.n	273ac <sock_sockaddr_len_is_valid+0x1e>
   27398:	2000      	movs	r0, #0
   2739a:	4770      	bx	lr
   2739c:	7803      	ldrb	r3, [r0, #0]
   2739e:	2b10      	cmp	r3, #16
   273a0:	d1fa      	bne.n	27398 <sock_sockaddr_len_is_valid+0xa>
   273a2:	2910      	cmp	r1, #16
   273a4:	bf14      	ite	ne
   273a6:	2000      	movne	r0, #0
   273a8:	2001      	moveq	r0, #1
   273aa:	4770      	bx	lr
   273ac:	7803      	ldrb	r3, [r0, #0]
   273ae:	2b24      	cmp	r3, #36	; 0x24
   273b0:	d1f2      	bne.n	27398 <sock_sockaddr_len_is_valid+0xa>
   273b2:	2924      	cmp	r1, #36	; 0x24
   273b4:	e7f6      	b.n	273a4 <sock_sockaddr_len_is_valid+0x16>

000273b6 <sock_sockaddr_fam_is_valid>:
   273b6:	68c3      	ldr	r3, [r0, #12]
   273b8:	2b01      	cmp	r3, #1
   273ba:	d003      	beq.n	273c4 <sock_sockaddr_fam_is_valid+0xe>
   273bc:	2b02      	cmp	r3, #2
   273be:	d007      	beq.n	273d0 <sock_sockaddr_fam_is_valid+0x1a>
   273c0:	2001      	movs	r0, #1
   273c2:	4770      	bx	lr
   273c4:	6848      	ldr	r0, [r1, #4]
   273c6:	2801      	cmp	r0, #1
   273c8:	bf14      	ite	ne
   273ca:	2000      	movne	r0, #0
   273cc:	2001      	moveq	r0, #1
   273ce:	4770      	bx	lr
   273d0:	6848      	ldr	r0, [r1, #4]
   273d2:	2802      	cmp	r0, #2
   273d4:	e7f8      	b.n	273c8 <sock_sockaddr_fam_is_valid+0x12>

000273d6 <pkt_has_next>:
   273d6:	b100      	cbz	r0, 273da <pkt_has_next+0x4>
   273d8:	6800      	ldr	r0, [r0, #0]
   273da:	3800      	subs	r0, #0
   273dc:	bf18      	it	ne
   273de:	2001      	movne	r0, #1
   273e0:	4770      	bx	lr

000273e2 <pkt_peek_next>:
   273e2:	b100      	cbz	r0, 273e6 <pkt_peek_next+0x4>
   273e4:	6800      	ldr	r0, [r0, #0]
   273e6:	4770      	bx	lr

000273e8 <pkt_bytes_get>:
   273e8:	8943      	ldrh	r3, [r0, #10]
   273ea:	6840      	ldr	r0, [r0, #4]
   273ec:	4418      	add	r0, r3
   273ee:	4770      	bx	lr

000273f0 <pkt_bytes_left>:
   273f0:	8902      	ldrh	r2, [r0, #8]
   273f2:	8940      	ldrh	r0, [r0, #10]
   273f4:	1a10      	subs	r0, r2, r0
   273f6:	4770      	bx	lr

000273f8 <pkt_free>:
   273f8:	b510      	push	{r4, lr}
   273fa:	4604      	mov	r4, r0
   273fc:	6840      	ldr	r0, [r0, #4]
   273fe:	f7ff fe79 	bl	270f4 <rpc_client_msg_data_rx_free>
   27402:	68e0      	ldr	r0, [r4, #12]
   27404:	b108      	cbz	r0, 2740a <pkt_free+0x12>
   27406:	f7f6 fd11 	bl	1de2c <nrf_modem_os_free>
   2740a:	4620      	mov	r0, r4
   2740c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27410:	f7f6 bd0c 	b.w	1de2c <nrf_modem_os_free>

00027414 <pkt_flush>:
   27414:	b510      	push	{r4, lr}
   27416:	4604      	mov	r4, r0
   27418:	6820      	ldr	r0, [r4, #0]
   2741a:	b900      	cbnz	r0, 2741e <pkt_flush+0xa>
   2741c:	bd10      	pop	{r4, pc}
   2741e:	6862      	ldr	r2, [r4, #4]
   27420:	6803      	ldr	r3, [r0, #0]
   27422:	4290      	cmp	r0, r2
   27424:	6023      	str	r3, [r4, #0]
   27426:	bf08      	it	eq
   27428:	6063      	streq	r3, [r4, #4]
   2742a:	f7ff ffe5 	bl	273f8 <pkt_free>
   2742e:	e7f3      	b.n	27418 <pkt_flush+0x4>

00027430 <on_conf_dnssrv_res>:
   27430:	f000 bc67 	b.w	27d02 <res_forward>

00027434 <nrf_freeaddrinfo>:
   27434:	b510      	push	{r4, lr}
   27436:	4604      	mov	r4, r0
   27438:	b160      	cbz	r0, 27454 <nrf_freeaddrinfo+0x20>
   2743a:	6940      	ldr	r0, [r0, #20]
   2743c:	b108      	cbz	r0, 27442 <nrf_freeaddrinfo+0xe>
   2743e:	f7f6 fcf5 	bl	1de2c <nrf_modem_os_free>
   27442:	69a0      	ldr	r0, [r4, #24]
   27444:	b108      	cbz	r0, 2744a <nrf_freeaddrinfo+0x16>
   27446:	f7f6 fcf1 	bl	1de2c <nrf_modem_os_free>
   2744a:	4620      	mov	r0, r4
   2744c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27450:	f7f6 bcec 	b.w	1de2c <nrf_modem_os_free>
   27454:	bd10      	pop	{r4, pc}

00027456 <on_getifaddrs_res>:
   27456:	f000 bc54 	b.w	27d02 <res_forward>

0002745a <nrf_socket>:
   2745a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2745e:	4681      	mov	r9, r0
   27460:	460f      	mov	r7, r1
   27462:	4616      	mov	r6, r2
   27464:	f7ff ff6d 	bl	27342 <sock_family_is_valid>
   27468:	b930      	cbnz	r0, 27478 <nrf_socket+0x1e>
   2746a:	206a      	movs	r0, #106	; 0x6a
   2746c:	f7ff f9d4 	bl	26818 <nrf_modem_os_errno_set>
   27470:	f04f 30ff 	mov.w	r0, #4294967295
   27474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27478:	4630      	mov	r0, r6
   2747a:	f7fa fe7b 	bl	22174 <sock_proto_is_valid>
   2747e:	b908      	cbnz	r0, 27484 <nrf_socket+0x2a>
   27480:	207b      	movs	r0, #123	; 0x7b
   27482:	e7f3      	b.n	2746c <nrf_socket+0x12>
   27484:	4638      	mov	r0, r7
   27486:	f7ff ff62 	bl	2734e <sock_type_is_valid>
   2748a:	b908      	cbnz	r0, 27490 <nrf_socket+0x36>
   2748c:	206b      	movs	r0, #107	; 0x6b
   2748e:	e7ed      	b.n	2746c <nrf_socket+0x12>
   27490:	4639      	mov	r1, r7
   27492:	4630      	mov	r0, r6
   27494:	f7ff ff61 	bl	2735a <sock_proto_supports_type>
   27498:	2800      	cmp	r0, #0
   2749a:	d0f7      	beq.n	2748c <nrf_socket+0x32>
   2749c:	f7fa fdf2 	bl	22084 <sock_open>
   274a0:	4605      	mov	r5, r0
   274a2:	b908      	cbnz	r0, 274a8 <nrf_socket+0x4e>
   274a4:	2017      	movs	r0, #23
   274a6:	e7e1      	b.n	2746c <nrf_socket+0x12>
   274a8:	2000      	movs	r0, #0
   274aa:	f7ff fdfd 	bl	270a8 <rpc_client_msg_alloc>
   274ae:	4604      	mov	r4, r0
   274b0:	b920      	cbnz	r0, 274bc <nrf_socket+0x62>
   274b2:	6828      	ldr	r0, [r5, #0]
   274b4:	f7fa fe1e 	bl	220f4 <_sock_close>
   274b8:	2069      	movs	r0, #105	; 0x69
   274ba:	e7d7      	b.n	2746c <nrf_socket+0x12>
   274bc:	2300      	movs	r3, #0
   274be:	220c      	movs	r2, #12
   274c0:	f04f 38ff 	mov.w	r8, #4294967295
   274c4:	7202      	strb	r2, [r0, #8]
   274c6:	7243      	strb	r3, [r0, #9]
   274c8:	7283      	strb	r3, [r0, #10]
   274ca:	72c3      	strb	r3, [r0, #11]
   274cc:	f880 8010 	strb.w	r8, [r0, #16]
   274d0:	f880 8011 	strb.w	r8, [r0, #17]
   274d4:	f880 8012 	strb.w	r8, [r0, #18]
   274d8:	f880 8013 	strb.w	r8, [r0, #19]
   274dc:	4648      	mov	r0, r9
   274de:	f7fb fd37 	bl	22f50 <nrf_af_to_rpc_af>
   274e2:	6160      	str	r0, [r4, #20]
   274e4:	4638      	mov	r0, r7
   274e6:	f000 fb85 	bl	27bf4 <nrf_type_to_rpc_type>
   274ea:	4601      	mov	r1, r0
   274ec:	61a0      	str	r0, [r4, #24]
   274ee:	4630      	mov	r0, r6
   274f0:	f000 fb81 	bl	27bf6 <nrf_proto_to_rpc_proto>
   274f4:	4621      	mov	r1, r4
   274f6:	61e0      	str	r0, [r4, #28]
   274f8:	f247 0001 	movw	r0, #28673	; 0x7001
   274fc:	e9c5 9703 	strd	r9, r7, [r5, #12]
   27500:	616e      	str	r6, [r5, #20]
   27502:	f000 fbcf 	bl	27ca4 <req_forward>
   27506:	4604      	mov	r4, r0
   27508:	b120      	cbz	r0, 27514 <nrf_socket+0xba>
   2750a:	4640      	mov	r0, r8
   2750c:	f7fa fdf2 	bl	220f4 <_sock_close>
   27510:	4620      	mov	r0, r4
   27512:	e7ab      	b.n	2746c <nrf_socket+0x12>
   27514:	6828      	ldr	r0, [r5, #0]
   27516:	e7ad      	b.n	27474 <nrf_socket+0x1a>

00027518 <nrf_connect>:
   27518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2751a:	4607      	mov	r7, r0
   2751c:	460d      	mov	r5, r1
   2751e:	4616      	mov	r6, r2
   27520:	f7fa fdd6 	bl	220d0 <sock_find>
   27524:	4604      	mov	r4, r0
   27526:	b938      	cbnz	r0, 27538 <nrf_connect+0x20>
   27528:	2009      	movs	r0, #9
   2752a:	f7ff f975 	bl	26818 <nrf_modem_os_errno_set>
   2752e:	f04f 35ff 	mov.w	r5, #4294967295
   27532:	4628      	mov	r0, r5
   27534:	b003      	add	sp, #12
   27536:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27538:	f7ff fe8b 	bl	27252 <sock_is_closed>
   2753c:	b108      	cbz	r0, 27542 <nrf_connect+0x2a>
   2753e:	69a0      	ldr	r0, [r4, #24]
   27540:	e7f3      	b.n	2752a <nrf_connect+0x12>
   27542:	4620      	mov	r0, r4
   27544:	f7ff fe79 	bl	2723a <sock_is_connected>
   27548:	b108      	cbz	r0, 2754e <nrf_connect+0x36>
   2754a:	207f      	movs	r0, #127	; 0x7f
   2754c:	e7ed      	b.n	2752a <nrf_connect+0x12>
   2754e:	4620      	mov	r0, r4
   27550:	f7ff fe6f 	bl	27232 <sock_is_connecting>
   27554:	b108      	cbz	r0, 2755a <nrf_connect+0x42>
   27556:	2078      	movs	r0, #120	; 0x78
   27558:	e7e7      	b.n	2752a <nrf_connect+0x12>
   2755a:	b90d      	cbnz	r5, 27560 <nrf_connect+0x48>
   2755c:	200e      	movs	r0, #14
   2755e:	e7e4      	b.n	2752a <nrf_connect+0x12>
   27560:	4631      	mov	r1, r6
   27562:	4628      	mov	r0, r5
   27564:	f7ff ff13 	bl	2738e <sock_sockaddr_len_is_valid>
   27568:	b908      	cbnz	r0, 2756e <nrf_connect+0x56>
   2756a:	2016      	movs	r0, #22
   2756c:	e7dd      	b.n	2752a <nrf_connect+0x12>
   2756e:	4629      	mov	r1, r5
   27570:	4620      	mov	r0, r4
   27572:	f7ff ff20 	bl	273b6 <sock_sockaddr_fam_is_valid>
   27576:	b908      	cbnz	r0, 2757c <nrf_connect+0x64>
   27578:	206a      	movs	r0, #106	; 0x6a
   2757a:	e7d6      	b.n	2752a <nrf_connect+0x12>
   2757c:	4620      	mov	r0, r4
   2757e:	f7ff fe64 	bl	2724a <sock_is_nonblock>
   27582:	4606      	mov	r6, r0
   27584:	b118      	cbz	r0, 2758e <nrf_connect+0x76>
   27586:	6966      	ldr	r6, [r4, #20]
   27588:	3e11      	subs	r6, #17
   2758a:	bf18      	it	ne
   2758c:	2601      	movne	r6, #1
   2758e:	2000      	movs	r0, #0
   27590:	f7ff fd8a 	bl	270a8 <rpc_client_msg_alloc>
   27594:	4602      	mov	r2, r0
   27596:	b908      	cbnz	r0, 2759c <nrf_connect+0x84>
   27598:	2069      	movs	r0, #105	; 0x69
   2759a:	e7c6      	b.n	2752a <nrf_connect+0x12>
   2759c:	2300      	movs	r3, #0
   2759e:	2114      	movs	r1, #20
   275a0:	6107      	str	r7, [r0, #16]
   275a2:	7201      	strb	r1, [r0, #8]
   275a4:	7243      	strb	r3, [r0, #9]
   275a6:	7283      	strb	r3, [r0, #10]
   275a8:	72c3      	strb	r3, [r0, #11]
   275aa:	6869      	ldr	r1, [r5, #4]
   275ac:	2901      	cmp	r1, #1
   275ae:	d00e      	beq.n	275ce <nrf_connect+0xb6>
   275b0:	2902      	cmp	r1, #2
   275b2:	d014      	beq.n	275de <nrf_connect+0xc6>
   275b4:	7f23      	ldrb	r3, [r4, #28]
   275b6:	f247 0102 	movw	r1, #28674	; 0x7002
   275ba:	f043 0304 	orr.w	r3, r3, #4
   275be:	7723      	strb	r3, [r4, #28]
   275c0:	2004      	movs	r0, #4
   275c2:	60d6      	str	r6, [r2, #12]
   275c4:	f7ff fd8c 	bl	270e0 <rpc_client_msg_send>
   275c8:	b1ce      	cbz	r6, 275fe <nrf_connect+0xe6>
   275ca:	2077      	movs	r0, #119	; 0x77
   275cc:	e7ad      	b.n	2752a <nrf_connect+0x12>
   275ce:	8929      	ldrh	r1, [r5, #8]
   275d0:	75c3      	strb	r3, [r0, #23]
   275d2:	8281      	strh	r1, [r0, #20]
   275d4:	2104      	movs	r1, #4
   275d6:	7581      	strb	r1, [r0, #22]
   275d8:	68eb      	ldr	r3, [r5, #12]
   275da:	6183      	str	r3, [r0, #24]
   275dc:	e7ea      	b.n	275b4 <nrf_connect+0x9c>
   275de:	8929      	ldrh	r1, [r5, #8]
   275e0:	75c3      	strb	r3, [r0, #23]
   275e2:	8281      	strh	r1, [r0, #20]
   275e4:	2110      	movs	r1, #16
   275e6:	186b      	adds	r3, r5, r1
   275e8:	7581      	strb	r1, [r0, #22]
   275ea:	3520      	adds	r5, #32
   275ec:	f100 0118 	add.w	r1, r0, #24
   275f0:	f853 0b04 	ldr.w	r0, [r3], #4
   275f4:	42ab      	cmp	r3, r5
   275f6:	f841 0b04 	str.w	r0, [r1], #4
   275fa:	d1f9      	bne.n	275f0 <nrf_connect+0xd8>
   275fc:	e7da      	b.n	275b4 <nrf_connect+0x9c>
   275fe:	4620      	mov	r0, r4
   27600:	f7ff fe8d 	bl	2731e <sock_sndtimeo_ms_get>
   27604:	9001      	str	r0, [sp, #4]
   27606:	4620      	mov	r0, r4
   27608:	f7ff fe13 	bl	27232 <sock_is_connecting>
   2760c:	b918      	cbnz	r0, 27616 <nrf_connect+0xfe>
   2760e:	69a5      	ldr	r5, [r4, #24]
   27610:	b17d      	cbz	r5, 27632 <nrf_connect+0x11a>
   27612:	4628      	mov	r0, r5
   27614:	e789      	b.n	2752a <nrf_connect+0x12>
   27616:	2002      	movs	r0, #2
   27618:	a901      	add	r1, sp, #4
   2761a:	f7f6 fb05 	bl	1dc28 <nrf_modem_os_timedwait>
   2761e:	f110 0f0b 	cmn.w	r0, #11
   27622:	d004      	beq.n	2762e <nrf_connect+0x116>
   27624:	2800      	cmp	r0, #0
   27626:	d0ee      	beq.n	27606 <nrf_connect+0xee>
   27628:	f000 ff43 	bl	284b2 <abs>
   2762c:	e77d      	b.n	2752a <nrf_connect+0x12>
   2762e:	2074      	movs	r0, #116	; 0x74
   27630:	e77b      	b.n	2752a <nrf_connect+0x12>
   27632:	4620      	mov	r0, r4
   27634:	f7ff fdf1 	bl	2721a <sock_proto_is_secure>
   27638:	2800      	cmp	r0, #0
   2763a:	f43f af7a 	beq.w	27532 <nrf_connect+0x1a>
   2763e:	4620      	mov	r0, r4
   27640:	9901      	ldr	r1, [sp, #4]
   27642:	f7fb fc0f 	bl	22e64 <tls_attach>
   27646:	4605      	mov	r5, r0
   27648:	e773      	b.n	27532 <nrf_connect+0x1a>

0002764a <nrf_bind>:
   2764a:	b538      	push	{r3, r4, r5, lr}
   2764c:	4605      	mov	r5, r0
   2764e:	460c      	mov	r4, r1
   27650:	f7fa fd3e 	bl	220d0 <sock_find>
   27654:	b930      	cbnz	r0, 27664 <nrf_bind+0x1a>
   27656:	2009      	movs	r0, #9
   27658:	f7ff f8de 	bl	26818 <nrf_modem_os_errno_set>
   2765c:	f04f 33ff 	mov.w	r3, #4294967295
   27660:	4618      	mov	r0, r3
   27662:	bd38      	pop	{r3, r4, r5, pc}
   27664:	b90c      	cbnz	r4, 2766a <nrf_bind+0x20>
   27666:	200e      	movs	r0, #14
   27668:	e7f6      	b.n	27658 <nrf_bind+0xe>
   2766a:	4621      	mov	r1, r4
   2766c:	f7ff fea3 	bl	273b6 <sock_sockaddr_fam_is_valid>
   27670:	b908      	cbnz	r0, 27676 <nrf_bind+0x2c>
   27672:	206a      	movs	r0, #106	; 0x6a
   27674:	e7f0      	b.n	27658 <nrf_bind+0xe>
   27676:	2000      	movs	r0, #0
   27678:	f7ff fd16 	bl	270a8 <rpc_client_msg_alloc>
   2767c:	4601      	mov	r1, r0
   2767e:	b908      	cbnz	r0, 27684 <nrf_bind+0x3a>
   27680:	2069      	movs	r0, #105	; 0x69
   27682:	e7e9      	b.n	27658 <nrf_bind+0xe>
   27684:	2300      	movs	r3, #0
   27686:	2214      	movs	r2, #20
   27688:	6105      	str	r5, [r0, #16]
   2768a:	7202      	strb	r2, [r0, #8]
   2768c:	7243      	strb	r3, [r0, #9]
   2768e:	7283      	strb	r3, [r0, #10]
   27690:	72c3      	strb	r3, [r0, #11]
   27692:	6862      	ldr	r2, [r4, #4]
   27694:	2a01      	cmp	r2, #1
   27696:	d009      	beq.n	276ac <nrf_bind+0x62>
   27698:	2a02      	cmp	r2, #2
   2769a:	d00f      	beq.n	276bc <nrf_bind+0x72>
   2769c:	f247 0005 	movw	r0, #28677	; 0x7005
   276a0:	f000 fb00 	bl	27ca4 <req_forward>
   276a4:	4603      	mov	r3, r0
   276a6:	2800      	cmp	r0, #0
   276a8:	d0da      	beq.n	27660 <nrf_bind+0x16>
   276aa:	e7d5      	b.n	27658 <nrf_bind+0xe>
   276ac:	8922      	ldrh	r2, [r4, #8]
   276ae:	75c3      	strb	r3, [r0, #23]
   276b0:	8282      	strh	r2, [r0, #20]
   276b2:	2204      	movs	r2, #4
   276b4:	7582      	strb	r2, [r0, #22]
   276b6:	68e3      	ldr	r3, [r4, #12]
   276b8:	6183      	str	r3, [r0, #24]
   276ba:	e7ef      	b.n	2769c <nrf_bind+0x52>
   276bc:	8922      	ldrh	r2, [r4, #8]
   276be:	75c3      	strb	r3, [r0, #23]
   276c0:	8282      	strh	r2, [r0, #20]
   276c2:	2210      	movs	r2, #16
   276c4:	18a3      	adds	r3, r4, r2
   276c6:	7582      	strb	r2, [r0, #22]
   276c8:	3420      	adds	r4, #32
   276ca:	f100 0218 	add.w	r2, r0, #24
   276ce:	f853 0b04 	ldr.w	r0, [r3], #4
   276d2:	42a3      	cmp	r3, r4
   276d4:	f842 0b04 	str.w	r0, [r2], #4
   276d8:	d1f9      	bne.n	276ce <nrf_bind+0x84>
   276da:	e7df      	b.n	2769c <nrf_bind+0x52>

000276dc <nrf_listen>:
   276dc:	b538      	push	{r3, r4, r5, lr}
   276de:	4605      	mov	r5, r0
   276e0:	460c      	mov	r4, r1
   276e2:	f7fa fcf5 	bl	220d0 <sock_find>
   276e6:	b930      	cbnz	r0, 276f6 <nrf_listen+0x1a>
   276e8:	2009      	movs	r0, #9
   276ea:	f7ff f895 	bl	26818 <nrf_modem_os_errno_set>
   276ee:	f04f 33ff 	mov.w	r3, #4294967295
   276f2:	4618      	mov	r0, r3
   276f4:	bd38      	pop	{r3, r4, r5, pc}
   276f6:	f7ff fd81 	bl	271fc <sock_is_stream>
   276fa:	b908      	cbnz	r0, 27700 <nrf_listen+0x24>
   276fc:	205f      	movs	r0, #95	; 0x5f
   276fe:	e7f4      	b.n	276ea <nrf_listen+0xe>
   27700:	2000      	movs	r0, #0
   27702:	f7ff fcd1 	bl	270a8 <rpc_client_msg_alloc>
   27706:	4601      	mov	r1, r0
   27708:	b908      	cbnz	r0, 2770e <nrf_listen+0x32>
   2770a:	2069      	movs	r0, #105	; 0x69
   2770c:	e7ed      	b.n	276ea <nrf_listen+0xe>
   2770e:	2300      	movs	r3, #0
   27710:	2204      	movs	r2, #4
   27712:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   27716:	7243      	strb	r3, [r0, #9]
   27718:	7283      	strb	r3, [r0, #10]
   2771a:	72c3      	strb	r3, [r0, #11]
   2771c:	6105      	str	r5, [r0, #16]
   2771e:	7202      	strb	r2, [r0, #8]
   27720:	6144      	str	r4, [r0, #20]
   27722:	f247 0008 	movw	r0, #28680	; 0x7008
   27726:	f000 fabd 	bl	27ca4 <req_forward>
   2772a:	4603      	mov	r3, r0
   2772c:	2800      	cmp	r0, #0
   2772e:	d0e0      	beq.n	276f2 <nrf_listen+0x16>
   27730:	e7db      	b.n	276ea <nrf_listen+0xe>

00027732 <nrf_accept>:
   27732:	2300      	movs	r3, #0
   27734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27738:	b08d      	sub	sp, #52	; 0x34
   2773a:	4606      	mov	r6, r0
   2773c:	4688      	mov	r8, r1
   2773e:	4614      	mov	r4, r2
   27740:	e9cd 3301 	strd	r3, r3, [sp, #4]
   27744:	f7fa fcc4 	bl	220d0 <sock_find>
   27748:	4605      	mov	r5, r0
   2774a:	b938      	cbnz	r0, 2775c <nrf_accept+0x2a>
   2774c:	2009      	movs	r0, #9
   2774e:	f7ff f863 	bl	26818 <nrf_modem_os_errno_set>
   27752:	f04f 30ff 	mov.w	r0, #4294967295
   27756:	b00d      	add	sp, #52	; 0x34
   27758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2775c:	f1b8 0f00 	cmp.w	r8, #0
   27760:	d002      	beq.n	27768 <nrf_accept+0x36>
   27762:	b91c      	cbnz	r4, 2776c <nrf_accept+0x3a>
   27764:	200e      	movs	r0, #14
   27766:	e7f2      	b.n	2774e <nrf_accept+0x1c>
   27768:	2c00      	cmp	r4, #0
   2776a:	d1fb      	bne.n	27764 <nrf_accept+0x32>
   2776c:	4628      	mov	r0, r5
   2776e:	f7ff fd45 	bl	271fc <sock_is_stream>
   27772:	b908      	cbnz	r0, 27778 <nrf_accept+0x46>
   27774:	205f      	movs	r0, #95	; 0x5f
   27776:	e7ea      	b.n	2774e <nrf_accept+0x1c>
   27778:	4628      	mov	r0, r5
   2777a:	f7ff fd66 	bl	2724a <sock_is_nonblock>
   2777e:	b128      	cbz	r0, 2778c <nrf_accept+0x5a>
   27780:	4628      	mov	r0, r5
   27782:	f7ff fd97 	bl	272b4 <sock_can_accept>
   27786:	b908      	cbnz	r0, 2778c <nrf_accept+0x5a>
   27788:	200b      	movs	r0, #11
   2778a:	e7e0      	b.n	2774e <nrf_accept+0x1c>
   2778c:	f7fa fc7a 	bl	22084 <sock_open>
   27790:	4607      	mov	r7, r0
   27792:	b908      	cbnz	r0, 27798 <nrf_accept+0x66>
   27794:	2017      	movs	r0, #23
   27796:	e7da      	b.n	2774e <nrf_accept+0x1c>
   27798:	2000      	movs	r0, #0
   2779a:	f7ff fc85 	bl	270a8 <rpc_client_msg_alloc>
   2779e:	4605      	mov	r5, r0
   277a0:	b920      	cbnz	r0, 277ac <nrf_accept+0x7a>
   277a2:	6838      	ldr	r0, [r7, #0]
   277a4:	f7fa fca6 	bl	220f4 <_sock_close>
   277a8:	2069      	movs	r0, #105	; 0x69
   277aa:	e7d0      	b.n	2774e <nrf_accept+0x1c>
   277ac:	6106      	str	r6, [r0, #16]
   277ae:	a901      	add	r1, sp, #4
   277b0:	9702      	str	r7, [sp, #8]
   277b2:	f000 faa2 	bl	27cfa <req_cookie_set>
   277b6:	4629      	mov	r1, r5
   277b8:	f247 000c 	movw	r0, #28684	; 0x700c
   277bc:	f000 fa72 	bl	27ca4 <req_forward>
   277c0:	4606      	mov	r6, r0
   277c2:	b120      	cbz	r0, 277ce <nrf_accept+0x9c>
   277c4:	6838      	ldr	r0, [r7, #0]
   277c6:	f7fa fc95 	bl	220f4 <_sock_close>
   277ca:	4630      	mov	r0, r6
   277cc:	e7bf      	b.n	2774e <nrf_accept+0x1c>
   277ce:	9d01      	ldr	r5, [sp, #4]
   277d0:	f1b8 0f00 	cmp.w	r8, #0
   277d4:	d006      	beq.n	277e4 <nrf_accept+0xb2>
   277d6:	b12c      	cbz	r4, 277e4 <nrf_accept+0xb2>
   277d8:	8beb      	ldrh	r3, [r5, #30]
   277da:	2b04      	cmp	r3, #4
   277dc:	d007      	beq.n	277ee <nrf_accept+0xbc>
   277de:	2b10      	cmp	r3, #16
   277e0:	d01e      	beq.n	27820 <nrf_accept+0xee>
   277e2:	6026      	str	r6, [r4, #0]
   277e4:	4628      	mov	r0, r5
   277e6:	f7ff fc82 	bl	270ee <rpc_client_msg_rx_free>
   277ea:	6838      	ldr	r0, [r7, #0]
   277ec:	e7b3      	b.n	27756 <nrf_accept+0x24>
   277ee:	2310      	movs	r3, #16
   277f0:	9003      	str	r0, [sp, #12]
   277f2:	f88d 300c 	strb.w	r3, [sp, #12]
   277f6:	2301      	movs	r3, #1
   277f8:	6826      	ldr	r6, [r4, #0]
   277fa:	9005      	str	r0, [sp, #20]
   277fc:	2e10      	cmp	r6, #16
   277fe:	bf28      	it	cs
   27800:	2610      	movcs	r6, #16
   27802:	9304      	str	r3, [sp, #16]
   27804:	7f2b      	ldrb	r3, [r5, #28]
   27806:	7f6a      	ldrb	r2, [r5, #29]
   27808:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2780c:	f8ad 3014 	strh.w	r3, [sp, #20]
   27810:	6a2b      	ldr	r3, [r5, #32]
   27812:	9306      	str	r3, [sp, #24]
   27814:	4632      	mov	r2, r6
   27816:	4640      	mov	r0, r8
   27818:	a903      	add	r1, sp, #12
   2781a:	f000 fe6c 	bl	284f6 <memcpy>
   2781e:	e7e0      	b.n	277e2 <nrf_accept+0xb0>
   27820:	f04f 0924 	mov.w	r9, #36	; 0x24
   27824:	4601      	mov	r1, r0
   27826:	464a      	mov	r2, r9
   27828:	a803      	add	r0, sp, #12
   2782a:	f000 fe71 	bl	28510 <memset>
   2782e:	2302      	movs	r3, #2
   27830:	f88d 900c 	strb.w	r9, [sp, #12]
   27834:	9304      	str	r3, [sp, #16]
   27836:	7f2b      	ldrb	r3, [r5, #28]
   27838:	7f6a      	ldrb	r2, [r5, #29]
   2783a:	ae07      	add	r6, sp, #28
   2783c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   27840:	f8ad 3014 	strh.w	r3, [sp, #20]
   27844:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   27848:	f105 0320 	add.w	r3, r5, #32
   2784c:	4632      	mov	r2, r6
   2784e:	6818      	ldr	r0, [r3, #0]
   27850:	6859      	ldr	r1, [r3, #4]
   27852:	3308      	adds	r3, #8
   27854:	c203      	stmia	r2!, {r0, r1}
   27856:	4563      	cmp	r3, ip
   27858:	4616      	mov	r6, r2
   2785a:	d1f7      	bne.n	2784c <nrf_accept+0x11a>
   2785c:	6826      	ldr	r6, [r4, #0]
   2785e:	2e24      	cmp	r6, #36	; 0x24
   27860:	bf28      	it	cs
   27862:	2624      	movcs	r6, #36	; 0x24
   27864:	e7d6      	b.n	27814 <nrf_accept+0xe2>

00027866 <nrf_recvfrom>:
   27866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2786a:	b085      	sub	sp, #20
   2786c:	4690      	mov	r8, r2
   2786e:	e9dd b70e 	ldrd	fp, r7, [sp, #56]	; 0x38
   27872:	461e      	mov	r6, r3
   27874:	9101      	str	r1, [sp, #4]
   27876:	f403 7a80 	and.w	sl, r3, #256	; 0x100
   2787a:	f7fa fc29 	bl	220d0 <sock_find>
   2787e:	4604      	mov	r4, r0
   27880:	b940      	cbnz	r0, 27894 <nrf_recvfrom+0x2e>
   27882:	2009      	movs	r0, #9
   27884:	f7fe ffc8 	bl	26818 <nrf_modem_os_errno_set>
   27888:	f04f 39ff 	mov.w	r9, #4294967295
   2788c:	4648      	mov	r0, r9
   2788e:	b005      	add	sp, #20
   27890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27894:	f436 79a1 	bics.w	r9, r6, #322	; 0x142
   27898:	d001      	beq.n	2789e <nrf_recvfrom+0x38>
   2789a:	205f      	movs	r0, #95	; 0x5f
   2789c:	e7f2      	b.n	27884 <nrf_recvfrom+0x1e>
   2789e:	f1bb 0f00 	cmp.w	fp, #0
   278a2:	d002      	beq.n	278aa <nrf_recvfrom+0x44>
   278a4:	b91f      	cbnz	r7, 278ae <nrf_recvfrom+0x48>
   278a6:	200e      	movs	r0, #14
   278a8:	e7ec      	b.n	27884 <nrf_recvfrom+0x1e>
   278aa:	2f00      	cmp	r7, #0
   278ac:	d1fb      	bne.n	278a6 <nrf_recvfrom+0x40>
   278ae:	4620      	mov	r0, r4
   278b0:	f7ff fca4 	bl	271fc <sock_is_stream>
   278b4:	b128      	cbz	r0, 278c2 <nrf_recvfrom+0x5c>
   278b6:	4620      	mov	r0, r4
   278b8:	f7ff fcbf 	bl	2723a <sock_is_connected>
   278bc:	b908      	cbnz	r0, 278c2 <nrf_recvfrom+0x5c>
   278be:	2080      	movs	r0, #128	; 0x80
   278c0:	e7e0      	b.n	27884 <nrf_recvfrom+0x1e>
   278c2:	f1ba 0f00 	cmp.w	sl, #0
   278c6:	d117      	bne.n	278f8 <nrf_recvfrom+0x92>
   278c8:	4620      	mov	r0, r4
   278ca:	f7ff fcbe 	bl	2724a <sock_is_nonblock>
   278ce:	b9a8      	cbnz	r0, 278fc <nrf_recvfrom+0x96>
   278d0:	f3c6 1580 	ubfx	r5, r6, #6, #1
   278d4:	4620      	mov	r0, r4
   278d6:	f7ff fd10 	bl	272fa <sock_rcvtimeo_ms_get>
   278da:	9003      	str	r0, [sp, #12]
   278dc:	4620      	mov	r0, r4
   278de:	f7ff fcb8 	bl	27252 <sock_is_closed>
   278e2:	b1b0      	cbz	r0, 27912 <nrf_recvfrom+0xac>
   278e4:	4620      	mov	r0, r4
   278e6:	f7ff fc64 	bl	271b2 <sock_has_pkt>
   278ea:	bb70      	cbnz	r0, 2794a <nrf_recvfrom+0xe4>
   278ec:	4620      	mov	r0, r4
   278ee:	f7ff fcc6 	bl	2727e <sock_has_error>
   278f2:	b1b8      	cbz	r0, 27924 <nrf_recvfrom+0xbe>
   278f4:	69a0      	ldr	r0, [r4, #24]
   278f6:	e7c5      	b.n	27884 <nrf_recvfrom+0x1e>
   278f8:	2500      	movs	r5, #0
   278fa:	e7eb      	b.n	278d4 <nrf_recvfrom+0x6e>
   278fc:	2501      	movs	r5, #1
   278fe:	e7e9      	b.n	278d4 <nrf_recvfrom+0x6e>
   27900:	2002      	movs	r0, #2
   27902:	a903      	add	r1, sp, #12
   27904:	f7f6 f990 	bl	1dc28 <nrf_modem_os_timedwait>
   27908:	2800      	cmp	r0, #0
   2790a:	d0e7      	beq.n	278dc <nrf_recvfrom+0x76>
   2790c:	f000 fdd1 	bl	284b2 <abs>
   27910:	e7b8      	b.n	27884 <nrf_recvfrom+0x1e>
   27912:	4620      	mov	r0, r4
   27914:	f7ff fc4d 	bl	271b2 <sock_has_pkt>
   27918:	2800      	cmp	r0, #0
   2791a:	d1e3      	bne.n	278e4 <nrf_recvfrom+0x7e>
   2791c:	2d00      	cmp	r5, #0
   2791e:	d0ef      	beq.n	27900 <nrf_recvfrom+0x9a>
   27920:	200b      	movs	r0, #11
   27922:	e7af      	b.n	27884 <nrf_recvfrom+0x1e>
   27924:	4620      	mov	r0, r4
   27926:	f7ff fc9c 	bl	27262 <sock_is_eof>
   2792a:	2800      	cmp	r0, #0
   2792c:	d1ae      	bne.n	2788c <nrf_recvfrom+0x26>
   2792e:	4620      	mov	r0, r4
   27930:	f7ff fc93 	bl	2725a <sock_is_local_closed>
   27934:	b148      	cbz	r0, 2794a <nrf_recvfrom+0xe4>
   27936:	4620      	mov	r0, r4
   27938:	f7ff fc60 	bl	271fc <sock_is_stream>
   2793c:	2800      	cmp	r0, #0
   2793e:	d1a5      	bne.n	2788c <nrf_recvfrom+0x26>
   27940:	4620      	mov	r0, r4
   27942:	f7ff fc60 	bl	27206 <sock_is_datagram>
   27946:	2800      	cmp	r0, #0
   27948:	d19b      	bne.n	27882 <nrf_recvfrom+0x1c>
   2794a:	4620      	mov	r0, r4
   2794c:	f7ff fc54 	bl	271f8 <sock_pkt_peek_head>
   27950:	4605      	mov	r5, r0
   27952:	f1bb 0f00 	cmp.w	fp, #0
   27956:	d00a      	beq.n	2796e <nrf_recvfrom+0x108>
   27958:	68c1      	ldr	r1, [r0, #12]
   2795a:	b369      	cbz	r1, 279b8 <nrf_recvfrom+0x152>
   2795c:	780a      	ldrb	r2, [r1, #0]
   2795e:	683b      	ldr	r3, [r7, #0]
   27960:	4658      	mov	r0, fp
   27962:	429a      	cmp	r2, r3
   27964:	bf28      	it	cs
   27966:	461a      	movcs	r2, r3
   27968:	603a      	str	r2, [r7, #0]
   2796a:	f000 fdc4 	bl	284f6 <memcpy>
   2796e:	f006 0602 	and.w	r6, r6, #2
   27972:	4628      	mov	r0, r5
   27974:	f7ff fd3c 	bl	273f0 <pkt_bytes_left>
   27978:	4540      	cmp	r0, r8
   2797a:	d81f      	bhi.n	279bc <nrf_recvfrom+0x156>
   2797c:	4628      	mov	r0, r5
   2797e:	f7ff fd37 	bl	273f0 <pkt_bytes_left>
   27982:	4607      	mov	r7, r0
   27984:	2f00      	cmp	r7, #0
   27986:	d081      	beq.n	2788c <nrf_recvfrom+0x26>
   27988:	9b01      	ldr	r3, [sp, #4]
   2798a:	4628      	mov	r0, r5
   2798c:	eb03 0b09 	add.w	fp, r3, r9
   27990:	f7ff fd2a 	bl	273e8 <pkt_bytes_get>
   27994:	463a      	mov	r2, r7
   27996:	4601      	mov	r1, r0
   27998:	4658      	mov	r0, fp
   2799a:	f000 fdac 	bl	284f6 <memcpy>
   2799e:	4620      	mov	r0, r4
   279a0:	44b9      	add	r9, r7
   279a2:	f7ff fc30 	bl	27206 <sock_is_datagram>
   279a6:	b158      	cbz	r0, 279c0 <nrf_recvfrom+0x15a>
   279a8:	2e00      	cmp	r6, #0
   279aa:	f47f af6f 	bne.w	2788c <nrf_recvfrom+0x26>
   279ae:	4629      	mov	r1, r5
   279b0:	4620      	mov	r0, r4
   279b2:	f7ff fc0d 	bl	271d0 <sock_pkt_remove>
   279b6:	e769      	b.n	2788c <nrf_recvfrom+0x26>
   279b8:	6039      	str	r1, [r7, #0]
   279ba:	e7d8      	b.n	2796e <nrf_recvfrom+0x108>
   279bc:	4647      	mov	r7, r8
   279be:	e7e1      	b.n	27984 <nrf_recvfrom+0x11e>
   279c0:	4620      	mov	r0, r4
   279c2:	f7ff fc25 	bl	27210 <sock_is_raw>
   279c6:	2800      	cmp	r0, #0
   279c8:	d1ee      	bne.n	279a8 <nrf_recvfrom+0x142>
   279ca:	b956      	cbnz	r6, 279e2 <nrf_recvfrom+0x17c>
   279cc:	896b      	ldrh	r3, [r5, #10]
   279ce:	4628      	mov	r0, r5
   279d0:	443b      	add	r3, r7
   279d2:	816b      	strh	r3, [r5, #10]
   279d4:	f7ff fd0c 	bl	273f0 <pkt_bytes_left>
   279d8:	b918      	cbnz	r0, 279e2 <nrf_recvfrom+0x17c>
   279da:	4629      	mov	r1, r5
   279dc:	4620      	mov	r0, r4
   279de:	f7ff fbf7 	bl	271d0 <sock_pkt_remove>
   279e2:	45b8      	cmp	r8, r7
   279e4:	f43f af52 	beq.w	2788c <nrf_recvfrom+0x26>
   279e8:	f1ba 0f00 	cmp.w	sl, #0
   279ec:	d10a      	bne.n	27a04 <nrf_recvfrom+0x19e>
   279ee:	b976      	cbnz	r6, 27a0e <nrf_recvfrom+0x1a8>
   279f0:	4620      	mov	r0, r4
   279f2:	f7ff fc01 	bl	271f8 <sock_pkt_peek_head>
   279f6:	e00d      	b.n	27a14 <nrf_recvfrom+0x1ae>
   279f8:	4620      	mov	r0, r4
   279fa:	f7ff fc2a 	bl	27252 <sock_is_closed>
   279fe:	2800      	cmp	r0, #0
   27a00:	f47f af44 	bne.w	2788c <nrf_recvfrom+0x26>
   27a04:	b16e      	cbz	r6, 27a22 <nrf_recvfrom+0x1bc>
   27a06:	4628      	mov	r0, r5
   27a08:	f7ff fce5 	bl	273d6 <pkt_has_next>
   27a0c:	b170      	cbz	r0, 27a2c <nrf_recvfrom+0x1c6>
   27a0e:	4628      	mov	r0, r5
   27a10:	f7ff fce7 	bl	273e2 <pkt_peek_next>
   27a14:	4605      	mov	r5, r0
   27a16:	2800      	cmp	r0, #0
   27a18:	f43f af38 	beq.w	2788c <nrf_recvfrom+0x26>
   27a1c:	eba8 0807 	sub.w	r8, r8, r7
   27a20:	e7a7      	b.n	27972 <nrf_recvfrom+0x10c>
   27a22:	4620      	mov	r0, r4
   27a24:	f7ff fbc5 	bl	271b2 <sock_has_pkt>
   27a28:	2800      	cmp	r0, #0
   27a2a:	d1e1      	bne.n	279f0 <nrf_recvfrom+0x18a>
   27a2c:	2002      	movs	r0, #2
   27a2e:	a903      	add	r1, sp, #12
   27a30:	f7f6 f8fa 	bl	1dc28 <nrf_modem_os_timedwait>
   27a34:	2800      	cmp	r0, #0
   27a36:	d0df      	beq.n	279f8 <nrf_recvfrom+0x192>
   27a38:	f1b9 0f00 	cmp.w	r9, #0
   27a3c:	f47f af26 	bne.w	2788c <nrf_recvfrom+0x26>
   27a40:	e764      	b.n	2790c <nrf_recvfrom+0xa6>

00027a42 <tls_setopt_role>:
   27a42:	b508      	push	{r3, lr}
   27a44:	b109      	cbz	r1, 27a4a <tls_setopt_role+0x8>
   27a46:	2a04      	cmp	r2, #4
   27a48:	d005      	beq.n	27a56 <tls_setopt_role+0x14>
   27a4a:	2016      	movs	r0, #22
   27a4c:	f7fe fee4 	bl	26818 <nrf_modem_os_errno_set>
   27a50:	f04f 30ff 	mov.w	r0, #4294967295
   27a54:	e006      	b.n	27a64 <tls_setopt_role+0x22>
   27a56:	780b      	ldrb	r3, [r1, #0]
   27a58:	b12b      	cbz	r3, 27a66 <tls_setopt_role+0x24>
   27a5a:	2b01      	cmp	r3, #1
   27a5c:	d1f5      	bne.n	27a4a <tls_setopt_role+0x8>
   27a5e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   27a62:	2000      	movs	r0, #0
   27a64:	bd08      	pop	{r3, pc}
   27a66:	2302      	movs	r3, #2
   27a68:	e7f9      	b.n	27a5e <tls_setopt_role+0x1c>

00027a6a <tls_setopt_taglist>:
   27a6a:	b510      	push	{r4, lr}
   27a6c:	f012 0403 	ands.w	r4, r2, #3
   27a70:	d100      	bne.n	27a74 <tls_setopt_taglist+0xa>
   27a72:	b92a      	cbnz	r2, 27a80 <tls_setopt_taglist+0x16>
   27a74:	2016      	movs	r0, #22
   27a76:	f7fe fecf 	bl	26818 <nrf_modem_os_errno_set>
   27a7a:	f04f 30ff 	mov.w	r0, #4294967295
   27a7e:	bd10      	pop	{r4, pc}
   27a80:	0893      	lsrs	r3, r2, #2
   27a82:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   27a86:	3048      	adds	r0, #72	; 0x48
   27a88:	f000 fd35 	bl	284f6 <memcpy>
   27a8c:	4620      	mov	r0, r4
   27a8e:	e7f6      	b.n	27a7e <tls_setopt_taglist+0x14>

00027a90 <tls_setopt_sess_cache>:
   27a90:	b508      	push	{r3, lr}
   27a92:	b109      	cbz	r1, 27a98 <tls_setopt_sess_cache+0x8>
   27a94:	2a04      	cmp	r2, #4
   27a96:	d005      	beq.n	27aa4 <tls_setopt_sess_cache+0x14>
   27a98:	2016      	movs	r0, #22
   27a9a:	f7fe febd 	bl	26818 <nrf_modem_os_errno_set>
   27a9e:	f04f 30ff 	mov.w	r0, #4294967295
   27aa2:	bd08      	pop	{r3, pc}
   27aa4:	780b      	ldrb	r3, [r1, #0]
   27aa6:	3b00      	subs	r3, #0
   27aa8:	bf18      	it	ne
   27aaa:	2301      	movne	r3, #1
   27aac:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   27ab0:	2000      	movs	r0, #0
   27ab2:	e7f6      	b.n	27aa2 <tls_setopt_sess_cache+0x12>

00027ab4 <tls_setopt_peer_verify>:
   27ab4:	b508      	push	{r3, lr}
   27ab6:	b109      	cbz	r1, 27abc <tls_setopt_peer_verify+0x8>
   27ab8:	2a04      	cmp	r2, #4
   27aba:	d005      	beq.n	27ac8 <tls_setopt_peer_verify+0x14>
   27abc:	2016      	movs	r0, #22
   27abe:	f7fe feab 	bl	26818 <nrf_modem_os_errno_set>
   27ac2:	f04f 30ff 	mov.w	r0, #4294967295
   27ac6:	bd08      	pop	{r3, pc}
   27ac8:	680b      	ldr	r3, [r1, #0]
   27aca:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   27ace:	2000      	movs	r0, #0
   27ad0:	e7f9      	b.n	27ac6 <tls_setopt_peer_verify+0x12>

00027ad2 <tls_setopt_hostname>:
   27ad2:	b570      	push	{r4, r5, r6, lr}
   27ad4:	4605      	mov	r5, r0
   27ad6:	4614      	mov	r4, r2
   27ad8:	460e      	mov	r6, r1
   27ada:	b931      	cbnz	r1, 27aea <tls_setopt_hostname+0x18>
   27adc:	b192      	cbz	r2, 27b04 <tls_setopt_hostname+0x32>
   27ade:	2016      	movs	r0, #22
   27ae0:	f7fe fe9a 	bl	26818 <nrf_modem_os_errno_set>
   27ae4:	f04f 30ff 	mov.w	r0, #4294967295
   27ae8:	bd70      	pop	{r4, r5, r6, pc}
   27aea:	2a00      	cmp	r2, #0
   27aec:	d0f7      	beq.n	27ade <tls_setopt_hostname+0xc>
   27aee:	6c00      	ldr	r0, [r0, #64]	; 0x40
   27af0:	b108      	cbz	r0, 27af6 <tls_setopt_hostname+0x24>
   27af2:	f7f6 f99b 	bl	1de2c <nrf_modem_os_free>
   27af6:	1c60      	adds	r0, r4, #1
   27af8:	f7f6 f990 	bl	1de1c <nrf_modem_os_alloc>
   27afc:	6428      	str	r0, [r5, #64]	; 0x40
   27afe:	b938      	cbnz	r0, 27b10 <tls_setopt_hostname+0x3e>
   27b00:	2069      	movs	r0, #105	; 0x69
   27b02:	e7ed      	b.n	27ae0 <tls_setopt_hostname+0xe>
   27b04:	6c00      	ldr	r0, [r0, #64]	; 0x40
   27b06:	b108      	cbz	r0, 27b0c <tls_setopt_hostname+0x3a>
   27b08:	f7f6 f990 	bl	1de2c <nrf_modem_os_free>
   27b0c:	2000      	movs	r0, #0
   27b0e:	e7eb      	b.n	27ae8 <tls_setopt_hostname+0x16>
   27b10:	4622      	mov	r2, r4
   27b12:	4631      	mov	r1, r6
   27b14:	f000 fcef 	bl	284f6 <memcpy>
   27b18:	2200      	movs	r2, #0
   27b1a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   27b1c:	551a      	strb	r2, [r3, r4]
   27b1e:	e7f5      	b.n	27b0c <tls_setopt_hostname+0x3a>

00027b20 <nrf_poll_one>:
   27b20:	b538      	push	{r3, r4, r5, lr}
   27b22:	4604      	mov	r4, r0
   27b24:	6800      	ldr	r0, [r0, #0]
   27b26:	f7fa fad3 	bl	220d0 <sock_find>
   27b2a:	4605      	mov	r5, r0
   27b2c:	b928      	cbnz	r0, 27b3a <nrf_poll_one+0x1a>
   27b2e:	2001      	movs	r0, #1
   27b30:	88e3      	ldrh	r3, [r4, #6]
   27b32:	f043 0320 	orr.w	r3, r3, #32
   27b36:	80e3      	strh	r3, [r4, #6]
   27b38:	bd38      	pop	{r3, r4, r5, pc}
   27b3a:	f7ff fb8e 	bl	2725a <sock_is_local_closed>
   27b3e:	2800      	cmp	r0, #0
   27b40:	d1f5      	bne.n	27b2e <nrf_poll_one+0xe>
   27b42:	4628      	mov	r0, r5
   27b44:	f7ff fb9b 	bl	2727e <sock_has_error>
   27b48:	b1f8      	cbz	r0, 27b8a <nrf_poll_one+0x6a>
   27b4a:	88e3      	ldrh	r3, [r4, #6]
   27b4c:	f043 0308 	orr.w	r3, r3, #8
   27b50:	80e3      	strh	r3, [r4, #6]
   27b52:	88a3      	ldrh	r3, [r4, #4]
   27b54:	07da      	lsls	r2, r3, #31
   27b56:	d507      	bpl.n	27b68 <nrf_poll_one+0x48>
   27b58:	4628      	mov	r0, r5
   27b5a:	f7ff fba6 	bl	272aa <sock_can_read>
   27b5e:	b1e8      	cbz	r0, 27b9c <nrf_poll_one+0x7c>
   27b60:	88e3      	ldrh	r3, [r4, #6]
   27b62:	f043 0301 	orr.w	r3, r3, #1
   27b66:	80e3      	strh	r3, [r4, #6]
   27b68:	88a3      	ldrh	r3, [r4, #4]
   27b6a:	075b      	lsls	r3, r3, #29
   27b6c:	d507      	bpl.n	27b7e <nrf_poll_one+0x5e>
   27b6e:	4628      	mov	r0, r5
   27b70:	f7ff fba5 	bl	272be <sock_can_send>
   27b74:	b118      	cbz	r0, 27b7e <nrf_poll_one+0x5e>
   27b76:	88e3      	ldrh	r3, [r4, #6]
   27b78:	f043 0304 	orr.w	r3, r3, #4
   27b7c:	80e3      	strh	r3, [r4, #6]
   27b7e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   27b82:	3800      	subs	r0, #0
   27b84:	bf18      	it	ne
   27b86:	2001      	movne	r0, #1
   27b88:	e7d6      	b.n	27b38 <nrf_poll_one+0x18>
   27b8a:	4628      	mov	r0, r5
   27b8c:	f7ff fb69 	bl	27262 <sock_is_eof>
   27b90:	2800      	cmp	r0, #0
   27b92:	d0de      	beq.n	27b52 <nrf_poll_one+0x32>
   27b94:	88e3      	ldrh	r3, [r4, #6]
   27b96:	f043 0310 	orr.w	r3, r3, #16
   27b9a:	e7d9      	b.n	27b50 <nrf_poll_one+0x30>
   27b9c:	4628      	mov	r0, r5
   27b9e:	f7ff fb89 	bl	272b4 <sock_can_accept>
   27ba2:	2800      	cmp	r0, #0
   27ba4:	d1dc      	bne.n	27b60 <nrf_poll_one+0x40>
   27ba6:	4628      	mov	r0, r5
   27ba8:	f7ff fb5b 	bl	27262 <sock_is_eof>
   27bac:	2800      	cmp	r0, #0
   27bae:	d1d7      	bne.n	27b60 <nrf_poll_one+0x40>
   27bb0:	e7da      	b.n	27b68 <nrf_poll_one+0x48>

00027bb2 <nrf_fcntl>:
   27bb2:	b538      	push	{r3, r4, r5, lr}
   27bb4:	460d      	mov	r5, r1
   27bb6:	4614      	mov	r4, r2
   27bb8:	f7fa fa8a 	bl	220d0 <sock_find>
   27bbc:	b928      	cbnz	r0, 27bca <nrf_fcntl+0x18>
   27bbe:	2009      	movs	r0, #9
   27bc0:	f7fe fe2a 	bl	26818 <nrf_modem_os_errno_set>
   27bc4:	f04f 30ff 	mov.w	r0, #4294967295
   27bc8:	e006      	b.n	27bd8 <nrf_fcntl+0x26>
   27bca:	2d03      	cmp	r5, #3
   27bcc:	d003      	beq.n	27bd6 <nrf_fcntl+0x24>
   27bce:	2d04      	cmp	r5, #4
   27bd0:	d003      	beq.n	27bda <nrf_fcntl+0x28>
   27bd2:	2016      	movs	r0, #22
   27bd4:	e7f4      	b.n	27bc0 <nrf_fcntl+0xe>
   27bd6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   27bd8:	bd38      	pop	{r3, r4, r5, pc}
   27bda:	2c01      	cmp	r4, #1
   27bdc:	d8f9      	bhi.n	27bd2 <nrf_fcntl+0x20>
   27bde:	63c4      	str	r4, [r0, #60]	; 0x3c
   27be0:	2000      	movs	r0, #0
   27be2:	e7f9      	b.n	27bd8 <nrf_fcntl+0x26>

00027be4 <rpc_af_to_nrf_af>:
   27be4:	1f43      	subs	r3, r0, #5
   27be6:	2b00      	cmp	r3, #0
   27be8:	d803      	bhi.n	27bf2 <rpc_af_to_nrf_af+0xe>
   27bea:	e8df f003 	tbb	[pc, r3]
   27bee:	01          	.byte	0x01
   27bef:	00          	.byte	0x00
   27bf0:	2003      	movs	r0, #3
   27bf2:	4770      	bx	lr

00027bf4 <nrf_type_to_rpc_type>:
   27bf4:	4770      	bx	lr

00027bf6 <nrf_proto_to_rpc_proto>:
   27bf6:	2829      	cmp	r0, #41	; 0x29
   27bf8:	d015      	beq.n	27c26 <nrf_proto_to_rpc_proto+0x30>
   27bfa:	dc05      	bgt.n	27c08 <nrf_proto_to_rpc_proto+0x12>
   27bfc:	2806      	cmp	r0, #6
   27bfe:	d014      	beq.n	27c2a <nrf_proto_to_rpc_proto+0x34>
   27c00:	2811      	cmp	r0, #17
   27c02:	d014      	beq.n	27c2e <nrf_proto_to_rpc_proto+0x38>
   27c04:	b148      	cbz	r0, 27c1a <nrf_proto_to_rpc_proto+0x24>
   27c06:	4770      	bx	lr
   27c08:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   27c0c:	d00d      	beq.n	27c2a <nrf_proto_to_rpc_proto+0x34>
   27c0e:	f240 1311 	movw	r3, #273	; 0x111
   27c12:	4298      	cmp	r0, r3
   27c14:	d00b      	beq.n	27c2e <nrf_proto_to_rpc_proto+0x38>
   27c16:	28ff      	cmp	r0, #255	; 0xff
   27c18:	d10c      	bne.n	27c34 <nrf_proto_to_rpc_proto+0x3e>
   27c1a:	2901      	cmp	r1, #1
   27c1c:	d009      	beq.n	27c32 <nrf_proto_to_rpc_proto+0x3c>
   27c1e:	2902      	cmp	r1, #2
   27c20:	bf08      	it	eq
   27c22:	2002      	moveq	r0, #2
   27c24:	4770      	bx	lr
   27c26:	2006      	movs	r0, #6
   27c28:	4770      	bx	lr
   27c2a:	2001      	movs	r0, #1
   27c2c:	4770      	bx	lr
   27c2e:	2002      	movs	r0, #2
   27c30:	4770      	bx	lr
   27c32:	4608      	mov	r0, r1
   27c34:	4770      	bx	lr

00027c36 <nrf_sol_to_rpc_sol>:
   27c36:	2829      	cmp	r0, #41	; 0x29
   27c38:	d011      	beq.n	27c5e <nrf_sol_to_rpc_sol+0x28>
   27c3a:	dc0a      	bgt.n	27c52 <nrf_sol_to_rpc_sol+0x1c>
   27c3c:	2801      	cmp	r0, #1
   27c3e:	d010      	beq.n	27c62 <nrf_sol_to_rpc_sol+0x2c>
   27c40:	2806      	cmp	r0, #6
   27c42:	d010      	beq.n	27c66 <nrf_sol_to_rpc_sol+0x30>
   27c44:	2800      	cmp	r0, #0
   27c46:	bf08      	it	eq
   27c48:	2004      	moveq	r0, #4
   27c4a:	bf18      	it	ne
   27c4c:	f04f 30ff 	movne.w	r0, #4294967295
   27c50:	4770      	bx	lr
   27c52:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   27c56:	d008      	beq.n	27c6a <nrf_sol_to_rpc_sol+0x34>
   27c58:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   27c5c:	e7f5      	b.n	27c4a <nrf_sol_to_rpc_sol+0x14>
   27c5e:	2006      	movs	r0, #6
   27c60:	4770      	bx	lr
   27c62:	2008      	movs	r0, #8
   27c64:	4770      	bx	lr
   27c66:	2001      	movs	r0, #1
   27c68:	4770      	bx	lr
   27c6a:	f44f 7080 	mov.w	r0, #256	; 0x100
   27c6e:	4770      	bx	lr

00027c70 <rpc_error_to_nrf_gai_errno>:
   27c70:	b508      	push	{r3, lr}
   27c72:	1f03      	subs	r3, r0, #4
   27c74:	2b09      	cmp	r3, #9
   27c76:	d80f      	bhi.n	27c98 <rpc_error_to_nrf_gai_errno+0x28>
   27c78:	e8df f003 	tbb	[pc, r3]
   27c7c:	0e051108 	.word	0x0e051108
   27c80:	0e0e0e0e 	.word	0x0e0e0e0e
   27c84:	050e      	.short	0x050e
   27c86:	f06f 0001 	mvn.w	r0, #1
   27c8a:	bd08      	pop	{r3, pc}
   27c8c:	2073      	movs	r0, #115	; 0x73
   27c8e:	f7fe fdc3 	bl	26818 <nrf_modem_os_errno_set>
   27c92:	f06f 000a 	mvn.w	r0, #10
   27c96:	e7f8      	b.n	27c8a <rpc_error_to_nrf_gai_errno+0x1a>
   27c98:	f7fb f96e 	bl	22f78 <rpc_error_to_nrf_errno>
   27c9c:	e7f7      	b.n	27c8e <rpc_error_to_nrf_gai_errno+0x1e>
   27c9e:	f06f 0063 	mvn.w	r0, #99	; 0x63
   27ca2:	e7f2      	b.n	27c8a <rpc_error_to_nrf_gai_errno+0x1a>

00027ca4 <req_forward>:
   27ca4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   27ca6:	2300      	movs	r3, #0
   27ca8:	460a      	mov	r2, r1
   27caa:	f04f 31ff 	mov.w	r1, #4294967295
   27cae:	9303      	str	r3, [sp, #12]
   27cb0:	68d6      	ldr	r6, [r2, #12]
   27cb2:	ac02      	add	r4, sp, #8
   27cb4:	9302      	str	r3, [sp, #8]
   27cb6:	9101      	str	r1, [sp, #4]
   27cb8:	b18e      	cbz	r6, 27cde <req_forward+0x3a>
   27cba:	4634      	mov	r4, r6
   27cbc:	b281      	uxth	r1, r0
   27cbe:	6023      	str	r3, [r4, #0]
   27cc0:	2004      	movs	r0, #4
   27cc2:	f7ff fa0d 	bl	270e0 <rpc_client_msg_send>
   27cc6:	6823      	ldr	r3, [r4, #0]
   27cc8:	b15b      	cbz	r3, 27ce2 <req_forward+0x3e>
   27cca:	6958      	ldr	r0, [r3, #20]
   27ccc:	f7fb f954 	bl	22f78 <rpc_error_to_nrf_errno>
   27cd0:	4605      	mov	r5, r0
   27cd2:	b106      	cbz	r6, 27cd6 <req_forward+0x32>
   27cd4:	b170      	cbz	r0, 27cf4 <req_forward+0x50>
   27cd6:	6820      	ldr	r0, [r4, #0]
   27cd8:	f7ff fa09 	bl	270ee <rpc_client_msg_rx_free>
   27cdc:	e00a      	b.n	27cf4 <req_forward+0x50>
   27cde:	60d4      	str	r4, [r2, #12]
   27ce0:	e7ec      	b.n	27cbc <req_forward+0x18>
   27ce2:	2002      	movs	r0, #2
   27ce4:	a901      	add	r1, sp, #4
   27ce6:	f7f5 ff9f 	bl	1dc28 <nrf_modem_os_timedwait>
   27cea:	2800      	cmp	r0, #0
   27cec:	d0eb      	beq.n	27cc6 <req_forward+0x22>
   27cee:	f000 fbe0 	bl	284b2 <abs>
   27cf2:	4605      	mov	r5, r0
   27cf4:	4628      	mov	r0, r5
   27cf6:	b004      	add	sp, #16
   27cf8:	bd70      	pop	{r4, r5, r6, pc}

00027cfa <req_cookie_set>:
   27cfa:	60c1      	str	r1, [r0, #12]
   27cfc:	4770      	bx	lr

00027cfe <res_cookie_get>:
   27cfe:	68c0      	ldr	r0, [r0, #12]
   27d00:	4770      	bx	lr

00027d02 <res_forward>:
   27d02:	68c3      	ldr	r3, [r0, #12]
   27d04:	6018      	str	r0, [r3, #0]
   27d06:	2001      	movs	r0, #1
   27d08:	4770      	bx	lr

00027d0a <rpc_dfu_event_handler>:
   27d0a:	b510      	push	{r4, lr}
   27d0c:	4604      	mov	r4, r0
   27d0e:	6800      	ldr	r0, [r0, #0]
   27d10:	b108      	cbz	r0, 27d16 <rpc_dfu_event_handler+0xc>
   27d12:	f7ff f9ef 	bl	270f4 <rpc_client_msg_data_rx_free>
   27d16:	68e0      	ldr	r0, [r4, #12]
   27d18:	b108      	cbz	r0, 27d1e <rpc_dfu_event_handler+0x14>
   27d1a:	6004      	str	r4, [r0, #0]
   27d1c:	2001      	movs	r0, #1
   27d1e:	bd10      	pop	{r4, pc}

00027d20 <nrf_modem_is_initialized>:
   27d20:	f7fb bc30 	b.w	23584 <nrf_modem_state_is_initialized>

00027d24 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   27d24:	4770      	bx	lr

00027d26 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   27d26:	b140      	cbz	r0, 27d3a <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   27d28:	68c3      	ldr	r3, [r0, #12]
   27d2a:	7858      	ldrb	r0, [r3, #1]
   27d2c:	f010 0001 	ands.w	r0, r0, #1
   27d30:	bf1e      	ittt	ne
   27d32:	7818      	ldrbne	r0, [r3, #0]
   27d34:	fab0 f080 	clzne	r0, r0
   27d38:	0940      	lsrne	r0, r0, #5
}
   27d3a:	4770      	bx	lr

00027d3c <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   27d3c:	f000 bbe8 	b.w	28510 <memset>

00027d40 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27d40:	f000 bbd9 	b.w	284f6 <memcpy>

00027d44 <k_heap_init>:
{
   27d44:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   27d46:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   27d4a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   27d4e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   27d50:	f7fd be26 	b.w	259a0 <sys_heap_init>

00027d54 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   27d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d58:	b085      	sub	sp, #20
   27d5a:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   27d5e:	4607      	mov	r7, r0
   27d60:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   27d62:	4650      	mov	r0, sl
   27d64:	4621      	mov	r1, r4
{
   27d66:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   27d68:	f000 faa7 	bl	282ba <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   27d6c:	f1b4 3fff 	cmp.w	r4, #4294967295
   27d70:	bf08      	it	eq
   27d72:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   27d76:	4605      	mov	r5, r0
   27d78:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   27d7a:	bf04      	itt	eq
   27d7c:	f04f 35ff 	moveq.w	r5, #4294967295
   27d80:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   27d84:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   27d88:	f04f 0320 	mov.w	r3, #32
   27d8c:	f3ef 8411 	mrs	r4, BASEPRI
   27d90:	f383 8812 	msr	BASEPRI_MAX, r3
   27d94:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   27d98:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   27d9c:	464a      	mov	r2, r9
   27d9e:	4641      	mov	r1, r8
   27da0:	4638      	mov	r0, r7
   27da2:	f7fd fd96 	bl	258d2 <sys_heap_aligned_alloc>
   27da6:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   27da8:	f7fc fdd4 	bl	24954 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   27dac:	9b03      	ldr	r3, [sp, #12]
   27dae:	b13b      	cbz	r3, 27dc0 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   27db0:	f384 8811 	msr	BASEPRI, r4
   27db4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   27db8:	4618      	mov	r0, r3
   27dba:	b005      	add	sp, #20
   27dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   27dc0:	1a28      	subs	r0, r5, r0
   27dc2:	eb66 0101 	sbc.w	r1, r6, r1
   27dc6:	2801      	cmp	r0, #1
   27dc8:	f171 0200 	sbcs.w	r2, r1, #0
   27dcc:	dbf0      	blt.n	27db0 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   27dce:	e9cd 0100 	strd	r0, r1, [sp]
   27dd2:	465a      	mov	r2, fp
   27dd4:	4621      	mov	r1, r4
   27dd6:	4650      	mov	r0, sl
   27dd8:	f7fc fa64 	bl	242a4 <z_pend_curr>
	__asm__ volatile(
   27ddc:	f04f 0320 	mov.w	r3, #32
   27de0:	f3ef 8411 	mrs	r4, BASEPRI
   27de4:	f383 8812 	msr	BASEPRI_MAX, r3
   27de8:	f3bf 8f6f 	isb	sy
	return k;
   27dec:	e7d6      	b.n	27d9c <k_heap_aligned_alloc+0x48>

00027dee <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   27dee:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   27df0:	e9cd 2300 	strd	r2, r3, [sp]
   27df4:	460a      	mov	r2, r1
   27df6:	2104      	movs	r1, #4
   27df8:	f7ff ffac 	bl	27d54 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   27dfc:	b003      	add	sp, #12
   27dfe:	f85d fb04 	ldr.w	pc, [sp], #4

00027e02 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   27e02:	b538      	push	{r3, r4, r5, lr}
   27e04:	4604      	mov	r4, r0
   27e06:	f04f 0320 	mov.w	r3, #32
   27e0a:	f3ef 8511 	mrs	r5, BASEPRI
   27e0e:	f383 8812 	msr	BASEPRI_MAX, r3
   27e12:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   27e16:	f7fd fd24 	bl	25862 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   27e1a:	f104 000c 	add.w	r0, r4, #12
   27e1e:	f000 f9cd 	bl	281bc <z_unpend_all>
   27e22:	b130      	cbz	r0, 27e32 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   27e24:	4629      	mov	r1, r5
   27e26:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   27e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   27e2e:	f7fc ba9d 	b.w	2436c <z_reschedule>
	__asm__ volatile(
   27e32:	f385 8811 	msr	BASEPRI, r5
   27e36:	f3bf 8f6f 	isb	sy
}
   27e3a:	bd38      	pop	{r3, r4, r5, pc}

00027e3c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   27e3c:	f3ef 8005 	mrs	r0, IPSR
}
   27e40:	3800      	subs	r0, #0
   27e42:	bf18      	it	ne
   27e44:	2001      	movne	r0, #1
   27e46:	4770      	bx	lr

00027e48 <z_impl_k_thread_name_set>:
}
   27e48:	f06f 0057 	mvn.w	r0, #87	; 0x57
   27e4c:	4770      	bx	lr

00027e4e <k_thread_name_get>:
}
   27e4e:	2000      	movs	r0, #0
   27e50:	4770      	bx	lr

00027e52 <z_impl_k_thread_start>:
	z_sched_start(thread);
   27e52:	f7fc ba9d 	b.w	24390 <z_sched_start>

00027e56 <z_pm_save_idle_exit>:
{
   27e56:	b508      	push	{r3, lr}
	pm_system_resume();
   27e58:	f7f3 f9ce 	bl	1b1f8 <pm_system_resume>
}
   27e5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   27e60:	f7fe bcb4 	b.w	267cc <sys_clock_idle_exit>

00027e64 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   27e64:	f990 300e 	ldrsb.w	r3, [r0, #14]
   27e68:	428b      	cmp	r3, r1
   27e6a:	d001      	beq.n	27e70 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   27e6c:	f7fc ba38 	b.w	242e0 <z_set_prio>
}
   27e70:	2000      	movs	r0, #0
   27e72:	4770      	bx	lr

00027e74 <z_impl_k_mutex_init>:
{
   27e74:	4603      	mov	r3, r0
	mutex->owner = NULL;
   27e76:	2000      	movs	r0, #0
   27e78:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   27e7c:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   27e80:	4770      	bx	lr

00027e82 <queue_insert>:
{
   27e82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27e86:	4699      	mov	r9, r3
   27e88:	4604      	mov	r4, r0
   27e8a:	460d      	mov	r5, r1
   27e8c:	4690      	mov	r8, r2
   27e8e:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   27e92:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   27e96:	f04f 0220 	mov.w	r2, #32
   27e9a:	f3ef 8711 	mrs	r7, BASEPRI
   27e9e:	f382 8812 	msr	BASEPRI_MAX, r2
   27ea2:	f3bf 8f6f 	isb	sy
	if (is_append) {
   27ea6:	b103      	cbz	r3, 27eaa <queue_insert+0x28>
	return list->tail;
   27ea8:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   27eaa:	4630      	mov	r0, r6
   27eac:	f000 f940 	bl	28130 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   27eb0:	b158      	cbz	r0, 27eca <queue_insert+0x48>
   27eb2:	2300      	movs	r3, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   27eb4:	f8c0 8014 	str.w	r8, [r0, #20]
   27eb8:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   27eba:	f000 f902 	bl	280c2 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   27ebe:	4630      	mov	r0, r6
   27ec0:	4639      	mov	r1, r7
   27ec2:	f7fc fa53 	bl	2436c <z_reschedule>
		return 0;
   27ec6:	2000      	movs	r0, #0
   27ec8:	e00c      	b.n	27ee4 <queue_insert+0x62>
	if (alloc) {
   27eca:	f1b9 0f00 	cmp.w	r9, #0
   27ece:	d01b      	beq.n	27f08 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   27ed0:	2108      	movs	r1, #8
   27ed2:	f7fc fe45 	bl	24b60 <z_thread_aligned_alloc>
		if (anode == NULL) {
   27ed6:	b938      	cbnz	r0, 27ee8 <queue_insert+0x66>
	__asm__ volatile(
   27ed8:	f387 8811 	msr	BASEPRI, r7
   27edc:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   27ee0:	f06f 000b 	mvn.w	r0, #11
}
   27ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   27ee8:	2201      	movs	r2, #1
		anode->data = data;
   27eea:	f8c0 8004 	str.w	r8, [r0, #4]
   27eee:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27ef0:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27ef2:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   27ef6:	b95d      	cbnz	r5, 27f10 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   27ef8:	6822      	ldr	r2, [r4, #0]
   27efa:	430a      	orrs	r2, r1
   27efc:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   27efe:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   27f00:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   27f02:	b96a      	cbnz	r2, 27f20 <queue_insert+0x9e>
	list->tail = node;
   27f04:	6060      	str	r0, [r4, #4]
}
   27f06:	e00b      	b.n	27f20 <queue_insert+0x9e>
}
   27f08:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   27f0a:	f8c8 9000 	str.w	r9, [r8]
}
   27f0e:	e7ef      	b.n	27ef0 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27f10:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   27f12:	2a03      	cmp	r2, #3
   27f14:	d810      	bhi.n	27f38 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   27f16:	6001      	str	r1, [r0, #0]
	return list->tail;
   27f18:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   27f1a:	b939      	cbnz	r1, 27f2c <queue_insert+0xaa>
	list->head = node;
   27f1c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   27f20:	2104      	movs	r1, #4
   27f22:	f104 0010 	add.w	r0, r4, #16
   27f26:	f000 fa7c 	bl	28422 <z_handle_obj_poll_events>
   27f2a:	e7c8      	b.n	27ebe <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27f2c:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27f2e:	f002 0203 	and.w	r2, r2, #3
   27f32:	4302      	orrs	r2, r0
   27f34:	600a      	str	r2, [r1, #0]
   27f36:	e7e5      	b.n	27f04 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27f38:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   27f3c:	430a      	orrs	r2, r1
   27f3e:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27f40:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27f42:	f002 0203 	and.w	r2, r2, #3
   27f46:	ea40 0302 	orr.w	r3, r0, r2
   27f4a:	602b      	str	r3, [r5, #0]
}
   27f4c:	e7e8      	b.n	27f20 <queue_insert+0x9e>

00027f4e <z_queue_node_peek>:
{
   27f4e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   27f50:	4604      	mov	r4, r0
   27f52:	b130      	cbz	r0, 27f62 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27f54:	6802      	ldr	r2, [r0, #0]
   27f56:	0793      	lsls	r3, r2, #30
   27f58:	d003      	beq.n	27f62 <z_queue_node_peek+0x14>
		ret = anode->data;
   27f5a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   27f5c:	b109      	cbz	r1, 27f62 <z_queue_node_peek+0x14>
			k_free(anode);
   27f5e:	f000 fa8b 	bl	28478 <k_free>
}
   27f62:	4620      	mov	r0, r4
   27f64:	bd10      	pop	{r4, pc}

00027f66 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   27f66:	2301      	movs	r3, #1
{
   27f68:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   27f6a:	9300      	str	r3, [sp, #0]
   27f6c:	2300      	movs	r3, #0
{
   27f6e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   27f70:	4619      	mov	r1, r3
   27f72:	f7ff ff86 	bl	27e82 <queue_insert>
}
   27f76:	b003      	add	sp, #12
   27f78:	f85d fb04 	ldr.w	pc, [sp], #4

00027f7c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   27f7c:	b15a      	cbz	r2, 27f96 <z_impl_k_sem_init+0x1a>
   27f7e:	428a      	cmp	r2, r1
   27f80:	d309      	bcc.n	27f96 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   27f82:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   27f86:	e9c0 1202 	strd	r1, r2, [r0, #8]
   27f8a:	e9c0 0000 	strd	r0, r0, [r0]
   27f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   27f92:	2000      	movs	r0, #0
   27f94:	4770      	bx	lr
		return -EINVAL;
   27f96:	f06f 0015 	mvn.w	r0, #21
}
   27f9a:	4770      	bx	lr

00027f9c <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   27f9c:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   27f9e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   27fa0:	408b      	lsls	r3, r1
   27fa2:	ea22 0303 	bic.w	r3, r2, r3
   27fa6:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   27fa8:	fa22 f001 	lsr.w	r0, r2, r1
}
   27fac:	f000 0001 	and.w	r0, r0, #1
   27fb0:	4770      	bx	lr

00027fb2 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   27fb2:	b120      	cbz	r0, 27fbe <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   27fb4:	2200      	movs	r2, #0
   27fb6:	3090      	adds	r0, #144	; 0x90
   27fb8:	4611      	mov	r1, r2
   27fba:	f000 b90f 	b.w	281dc <z_sched_wake>
}
   27fbe:	4770      	bx	lr

00027fc0 <z_work_submit_to_queue>:
{
   27fc0:	b513      	push	{r0, r1, r4, lr}
   27fc2:	9001      	str	r0, [sp, #4]
   27fc4:	4608      	mov	r0, r1
	__asm__ volatile(
   27fc6:	f04f 0320 	mov.w	r3, #32
   27fca:	f3ef 8411 	mrs	r4, BASEPRI
   27fce:	f383 8812 	msr	BASEPRI_MAX, r3
   27fd2:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   27fd6:	a901      	add	r1, sp, #4
   27fd8:	f7fb ff88 	bl	23eec <submit_to_queue_locked>
	__asm__ volatile(
   27fdc:	f384 8811 	msr	BASEPRI, r4
   27fe0:	f3bf 8f6f 	isb	sy
}
   27fe4:	b002      	add	sp, #8
   27fe6:	bd10      	pop	{r4, pc}

00027fe8 <k_work_submit_to_queue>:
{
   27fe8:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   27fea:	f7ff ffe9 	bl	27fc0 <z_work_submit_to_queue>
	if (ret > 0) {
   27fee:	1e04      	subs	r4, r0, #0
   27ff0:	dd09      	ble.n	28006 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   27ff2:	f04f 0320 	mov.w	r3, #32
   27ff6:	f3ef 8011 	mrs	r0, BASEPRI
   27ffa:	f383 8812 	msr	BASEPRI_MAX, r3
   27ffe:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   28002:	f000 f8c5 	bl	28190 <z_reschedule_irqlock>
}
   28006:	4620      	mov	r0, r4
   28008:	bd10      	pop	{r4, pc}

0002800a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2800a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2800e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28010:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28012:	2300      	movs	r3, #0
	node->prev = NULL;
   28014:	e9c0 3300 	strd	r3, r3, [r0]
}
   28018:	4770      	bx	lr

0002801a <unpend_thread_no_timeout>:
{
   2801a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2801c:	f7ff fff5 	bl	2800a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   28020:	7b43      	ldrb	r3, [r0, #13]
   28022:	f023 0302 	bic.w	r3, r3, #2
   28026:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   28028:	2300      	movs	r3, #0
   2802a:	6083      	str	r3, [r0, #8]
}
   2802c:	bd08      	pop	{r3, pc}

0002802e <z_thread_timeout>:
{
   2802e:	4601      	mov	r1, r0
   28030:	b510      	push	{r4, lr}
   28032:	f04f 0320 	mov.w	r3, #32
   28036:	f3ef 8411 	mrs	r4, BASEPRI
   2803a:	f383 8812 	msr	BASEPRI_MAX, r3
   2803e:	f3bf 8f6f 	isb	sy
		if (!killed) {
   28042:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   28046:	f013 0f28 	tst.w	r3, #40	; 0x28
   2804a:	d10d      	bne.n	28068 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2804c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   28050:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   28052:	b10b      	cbz	r3, 28058 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   28054:	f7ff ffe1 	bl	2801a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   28058:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2805c:	f023 0314 	bic.w	r3, r3, #20
   28060:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   28064:	f7fc f846 	bl	240f4 <ready_thread>
	__asm__ volatile(
   28068:	f384 8811 	msr	BASEPRI, r4
   2806c:	f3bf 8f6f 	isb	sy
}
   28070:	bd10      	pop	{r4, pc}

00028072 <add_to_waitq_locked>:
{
   28072:	b538      	push	{r3, r4, r5, lr}
   28074:	4604      	mov	r4, r0
   28076:	460d      	mov	r5, r1
	unready_thread(thread);
   28078:	f7fc f870 	bl	2415c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2807c:	7b63      	ldrb	r3, [r4, #13]
   2807e:	f043 0302 	orr.w	r3, r3, #2
   28082:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   28084:	b1e5      	cbz	r5, 280c0 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   28086:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   28088:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2808a:	429d      	cmp	r5, r3
   2808c:	d109      	bne.n	280a2 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   2808e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   28090:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   28094:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28096:	606c      	str	r4, [r5, #4]
}
   28098:	e012      	b.n	280c0 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   2809a:	686a      	ldr	r2, [r5, #4]
   2809c:	4293      	cmp	r3, r2
   2809e:	d0f6      	beq.n	2808e <add_to_waitq_locked+0x1c>
   280a0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   280a2:	2b00      	cmp	r3, #0
   280a4:	d0f3      	beq.n	2808e <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   280a6:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   280aa:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   280ae:	428a      	cmp	r2, r1
   280b0:	d0f3      	beq.n	2809a <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   280b2:	4291      	cmp	r1, r2
   280b4:	ddf1      	ble.n	2809a <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   280b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   280b8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   280bc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   280be:	605c      	str	r4, [r3, #4]
}
   280c0:	bd38      	pop	{r3, r4, r5, pc}

000280c2 <z_ready_thread>:
{
   280c2:	b510      	push	{r4, lr}
	__asm__ volatile(
   280c4:	f04f 0320 	mov.w	r3, #32
   280c8:	f3ef 8411 	mrs	r4, BASEPRI
   280cc:	f383 8812 	msr	BASEPRI_MAX, r3
   280d0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   280d4:	f7fc f80e 	bl	240f4 <ready_thread>
	__asm__ volatile(
   280d8:	f384 8811 	msr	BASEPRI, r4
   280dc:	f3bf 8f6f 	isb	sy
}
   280e0:	bd10      	pop	{r4, pc}

000280e2 <z_unpend_thread_no_timeout>:
{
   280e2:	b508      	push	{r3, lr}
	__asm__ volatile(
   280e4:	f04f 0320 	mov.w	r3, #32
   280e8:	f3ef 8111 	mrs	r1, BASEPRI
   280ec:	f383 8812 	msr	BASEPRI_MAX, r3
   280f0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   280f4:	f7ff ff91 	bl	2801a <unpend_thread_no_timeout>
	__asm__ volatile(
   280f8:	f381 8811 	msr	BASEPRI, r1
   280fc:	f3bf 8f6f 	isb	sy
}
   28100:	bd08      	pop	{r3, pc}

00028102 <z_unpend1_no_timeout>:
{
   28102:	b508      	push	{r3, lr}
   28104:	4603      	mov	r3, r0
	__asm__ volatile(
   28106:	f04f 0220 	mov.w	r2, #32
   2810a:	f3ef 8111 	mrs	r1, BASEPRI
   2810e:	f382 8812 	msr	BASEPRI_MAX, r2
   28112:	f3bf 8f6f 	isb	sy
	return list->head == list;
   28116:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28118:	4283      	cmp	r3, r0
   2811a:	d007      	beq.n	2812c <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   2811c:	b108      	cbz	r0, 28122 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   2811e:	f7ff ff7c 	bl	2801a <unpend_thread_no_timeout>
	__asm__ volatile(
   28122:	f381 8811 	msr	BASEPRI, r1
   28126:	f3bf 8f6f 	isb	sy
}
   2812a:	bd08      	pop	{r3, pc}
   2812c:	2000      	movs	r0, #0
   2812e:	e7f8      	b.n	28122 <z_unpend1_no_timeout+0x20>

00028130 <z_unpend_first_thread>:
{
   28130:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   28132:	f04f 0320 	mov.w	r3, #32
   28136:	f3ef 8511 	mrs	r5, BASEPRI
   2813a:	f383 8812 	msr	BASEPRI_MAX, r3
   2813e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   28142:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28144:	42a0      	cmp	r0, r4
   28146:	d00d      	beq.n	28164 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   28148:	b134      	cbz	r4, 28158 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   2814a:	4620      	mov	r0, r4
   2814c:	f7ff ff65 	bl	2801a <unpend_thread_no_timeout>
   28150:	f104 0018 	add.w	r0, r4, #24
   28154:	f000 f865 	bl	28222 <z_abort_timeout>
	__asm__ volatile(
   28158:	f385 8811 	msr	BASEPRI, r5
   2815c:	f3bf 8f6f 	isb	sy
}
   28160:	4620      	mov	r0, r4
   28162:	bd38      	pop	{r3, r4, r5, pc}
   28164:	2400      	movs	r4, #0
   28166:	e7f7      	b.n	28158 <z_unpend_first_thread+0x28>

00028168 <z_unpend_thread>:
{
   28168:	b510      	push	{r4, lr}
	__asm__ volatile(
   2816a:	f04f 0320 	mov.w	r3, #32
   2816e:	f3ef 8411 	mrs	r4, BASEPRI
   28172:	f383 8812 	msr	BASEPRI_MAX, r3
   28176:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2817a:	f7ff ff4e 	bl	2801a <unpend_thread_no_timeout>
	__asm__ volatile(
   2817e:	f384 8811 	msr	BASEPRI, r4
   28182:	f3bf 8f6f 	isb	sy
}
   28186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2818a:	3018      	adds	r0, #24
   2818c:	f000 b849 	b.w	28222 <z_abort_timeout>

00028190 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   28190:	4603      	mov	r3, r0
   28192:	b920      	cbnz	r0, 2819e <z_reschedule_irqlock+0xe>
   28194:	f3ef 8205 	mrs	r2, IPSR
   28198:	b90a      	cbnz	r2, 2819e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2819a:	f7f3 ba6d 	b.w	1b678 <arch_swap>
   2819e:	f383 8811 	msr	BASEPRI, r3
   281a2:	f3bf 8f6f 	isb	sy
}
   281a6:	4770      	bx	lr

000281a8 <z_reschedule_unlocked>:
	__asm__ volatile(
   281a8:	f04f 0320 	mov.w	r3, #32
   281ac:	f3ef 8011 	mrs	r0, BASEPRI
   281b0:	f383 8812 	msr	BASEPRI_MAX, r3
   281b4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   281b8:	f7ff bfea 	b.w	28190 <z_reschedule_irqlock>

000281bc <z_unpend_all>:
{
   281bc:	b538      	push	{r3, r4, r5, lr}
   281be:	4605      	mov	r5, r0
	int need_sched = 0;
   281c0:	2000      	movs	r0, #0
	return list->head == list;
   281c2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   281c4:	42a5      	cmp	r5, r4
   281c6:	d000      	beq.n	281ca <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   281c8:	b904      	cbnz	r4, 281cc <z_unpend_all+0x10>
}
   281ca:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   281cc:	4620      	mov	r0, r4
   281ce:	f7ff ffcb 	bl	28168 <z_unpend_thread>
		z_ready_thread(thread);
   281d2:	4620      	mov	r0, r4
   281d4:	f7ff ff75 	bl	280c2 <z_ready_thread>
		need_sched = 1;
   281d8:	2001      	movs	r0, #1
   281da:	e7f2      	b.n	281c2 <z_unpend_all+0x6>

000281dc <z_sched_wake>:
{
   281dc:	b538      	push	{r3, r4, r5, lr}
   281de:	f04f 0320 	mov.w	r3, #32
   281e2:	f3ef 8511 	mrs	r5, BASEPRI
   281e6:	f383 8812 	msr	BASEPRI_MAX, r3
   281ea:	f3bf 8f6f 	isb	sy
	return list->head == list;
   281ee:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   281f0:	42a0      	cmp	r0, r4
   281f2:	d012      	beq.n	2821a <z_sched_wake+0x3e>
		if (thread != NULL) {
   281f4:	b19c      	cbz	r4, 2821e <z_sched_wake+0x42>
   281f6:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   281f8:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   281fa:	4620      	mov	r0, r4
   281fc:	f7ff ff0d 	bl	2801a <unpend_thread_no_timeout>
   28200:	f104 0018 	add.w	r0, r4, #24
   28204:	f000 f80d 	bl	28222 <z_abort_timeout>
			ready_thread(thread);
   28208:	4620      	mov	r0, r4
   2820a:	f7fb ff73 	bl	240f4 <ready_thread>
			ret = true;
   2820e:	2001      	movs	r0, #1
	__asm__ volatile(
   28210:	f385 8811 	msr	BASEPRI, r5
   28214:	f3bf 8f6f 	isb	sy
}
   28218:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   2821a:	2000      	movs	r0, #0
   2821c:	e7f8      	b.n	28210 <z_sched_wake+0x34>
   2821e:	4620      	mov	r0, r4
   28220:	e7f6      	b.n	28210 <z_sched_wake+0x34>

00028222 <z_abort_timeout>:
{
   28222:	b510      	push	{r4, lr}
	__asm__ volatile(
   28224:	f04f 0220 	mov.w	r2, #32
   28228:	f3ef 8411 	mrs	r4, BASEPRI
   2822c:	f382 8812 	msr	BASEPRI_MAX, r2
   28230:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   28234:	6803      	ldr	r3, [r0, #0]
   28236:	b13b      	cbz	r3, 28248 <z_abort_timeout+0x26>
			remove_timeout(to);
   28238:	f7fc fa96 	bl	24768 <remove_timeout>
			ret = 0;
   2823c:	2000      	movs	r0, #0
	__asm__ volatile(
   2823e:	f384 8811 	msr	BASEPRI, r4
   28242:	f3bf 8f6f 	isb	sy
}
   28246:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   28248:	f06f 0015 	mvn.w	r0, #21
   2824c:	e7f7      	b.n	2823e <z_abort_timeout+0x1c>

0002824e <z_get_next_timeout_expiry>:
{
   2824e:	b510      	push	{r4, lr}
	__asm__ volatile(
   28250:	f04f 0320 	mov.w	r3, #32
   28254:	f3ef 8411 	mrs	r4, BASEPRI
   28258:	f383 8812 	msr	BASEPRI_MAX, r3
   2825c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   28260:	f7fc fa5a 	bl	24718 <next_timeout>
	__asm__ volatile(
   28264:	f384 8811 	msr	BASEPRI, r4
   28268:	f3bf 8f6f 	isb	sy
}
   2826c:	bd10      	pop	{r4, pc}

0002826e <z_set_timeout_expiry>:
{
   2826e:	b570      	push	{r4, r5, r6, lr}
   28270:	4604      	mov	r4, r0
   28272:	460d      	mov	r5, r1
	__asm__ volatile(
   28274:	f04f 0320 	mov.w	r3, #32
   28278:	f3ef 8611 	mrs	r6, BASEPRI
   2827c:	f383 8812 	msr	BASEPRI_MAX, r3
   28280:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   28284:	f7fc fa48 	bl	24718 <next_timeout>
			      || (ticks <= next_to);
   28288:	2801      	cmp	r0, #1
   2828a:	dd07      	ble.n	2829c <z_set_timeout_expiry+0x2e>
   2828c:	42a0      	cmp	r0, r4
   2828e:	db05      	blt.n	2829c <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   28290:	42a0      	cmp	r0, r4
   28292:	4629      	mov	r1, r5
   28294:	bfa8      	it	ge
   28296:	4620      	movge	r0, r4
   28298:	f7f5 fb8e 	bl	1d9b8 <sys_clock_set_timeout>
	__asm__ volatile(
   2829c:	f386 8811 	msr	BASEPRI, r6
   282a0:	f3bf 8f6f 	isb	sy
}
   282a4:	bd70      	pop	{r4, r5, r6, pc}

000282a6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   282a6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   282a8:	f7fc fb54 	bl	24954 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   282ac:	bd08      	pop	{r3, pc}

000282ae <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   282ae:	f7fc bb51 	b.w	24954 <sys_clock_tick_get>

000282b2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   282b2:	b108      	cbz	r0, 282b8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   282b4:	f7f2 b9ec 	b.w	1a690 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   282b8:	4770      	bx	lr

000282ba <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   282ba:	f1b1 3fff 	cmp.w	r1, #4294967295
   282be:	bf08      	it	eq
   282c0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   282c4:	b538      	push	{r3, r4, r5, lr}
   282c6:	460c      	mov	r4, r1
   282c8:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   282ca:	d014      	beq.n	282f6 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   282cc:	4308      	orrs	r0, r1
   282ce:	d103      	bne.n	282d8 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   282d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   282d4:	f7fc bb3e 	b.w	24954 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   282d8:	f06f 0001 	mvn.w	r0, #1
   282dc:	f04f 33ff 	mov.w	r3, #4294967295
   282e0:	1b40      	subs	r0, r0, r5
   282e2:	eb63 0101 	sbc.w	r1, r3, r1
   282e6:	2900      	cmp	r1, #0
   282e8:	da04      	bge.n	282f4 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   282ea:	f7fc fb33 	bl	24954 <sys_clock_tick_get>
   282ee:	1940      	adds	r0, r0, r5
   282f0:	eb41 0104 	adc.w	r1, r1, r4
}
   282f4:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   282f6:	f04f 30ff 	mov.w	r0, #4294967295
   282fa:	4601      	mov	r1, r0
   282fc:	e7fa      	b.n	282f4 <sys_clock_timeout_end_calc+0x3a>

000282fe <k_timer_init>:
	timer->status = 0U;
   282fe:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   28300:	e9c0 1208 	strd	r1, r2, [r0, #32]
   28304:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   28308:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2830c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   28310:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   28312:	6343      	str	r3, [r0, #52]	; 0x34
}
   28314:	4770      	bx	lr

00028316 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   28316:	b510      	push	{r4, lr}
   28318:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2831a:	f7ff ff82 	bl	28222 <z_abort_timeout>

	if (inactive) {
   2831e:	b9b0      	cbnz	r0, 2834e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   28320:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28322:	b10b      	cbz	r3, 28328 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   28324:	4620      	mov	r0, r4
   28326:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   28328:	f104 0018 	add.w	r0, r4, #24
   2832c:	f7ff fee9 	bl	28102 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   28330:	b168      	cbz	r0, 2834e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   28332:	f7ff fec6 	bl	280c2 <z_ready_thread>
	__asm__ volatile(
   28336:	f04f 0320 	mov.w	r3, #32
   2833a:	f3ef 8011 	mrs	r0, BASEPRI
   2833e:	f383 8812 	msr	BASEPRI_MAX, r3
   28342:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   28346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2834a:	f7ff bf21 	b.w	28190 <z_reschedule_irqlock>
   2834e:	bd10      	pop	{r4, pc}

00028350 <signal_poll_event>:
{
   28350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   28354:	6884      	ldr	r4, [r0, #8]
{
   28356:	4605      	mov	r5, r0
   28358:	460e      	mov	r6, r1
	if (poller != NULL) {
   2835a:	b144      	cbz	r4, 2836e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2835c:	7863      	ldrb	r3, [r4, #1]
   2835e:	2b01      	cmp	r3, #1
   28360:	d12e      	bne.n	283c0 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   28362:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   28366:	f013 0302 	ands.w	r3, r3, #2
   2836a:	d10a      	bne.n	28382 <signal_poll_event+0x32>
		poller->is_polling = false;
   2836c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2836e:	2000      	movs	r0, #0
	event->state |= state;
   28370:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   28372:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   28374:	f3c3 3286 	ubfx	r2, r3, #14, #7
   28378:	4316      	orrs	r6, r2
   2837a:	f366 3394 	bfi	r3, r6, #14, #7
   2837e:	60eb      	str	r3, [r5, #12]
	return retcode;
   28380:	e03e      	b.n	28400 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   28382:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   28386:	f1b3 3fff 	cmp.w	r3, #4294967295
   2838a:	bf08      	it	eq
   2838c:	f112 0f02 	cmneq.w	r2, #2
   28390:	d032      	beq.n	283f8 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   28392:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   28396:	4640      	mov	r0, r8
   28398:	f7ff fee6 	bl	28168 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2839c:	2e08      	cmp	r6, #8
   2839e:	bf0c      	ite	eq
   283a0:	f06f 0303 	mvneq.w	r3, #3
   283a4:	2300      	movne	r3, #0
   283a6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   283a8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   283ac:	06db      	lsls	r3, r3, #27
   283ae:	d109      	bne.n	283c4 <signal_poll_event+0x74>
   283b0:	f854 7c48 	ldr.w	r7, [r4, #-72]
   283b4:	b937      	cbnz	r7, 283c4 <signal_poll_event+0x74>
	z_ready_thread(thread);
   283b6:	4640      	mov	r0, r8
   283b8:	f7ff fe83 	bl	280c2 <z_ready_thread>
		poller->is_polling = false;
   283bc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   283be:	e7d6      	b.n	2836e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   283c0:	2b02      	cmp	r3, #2
   283c2:	d001      	beq.n	283c8 <signal_poll_event+0x78>
		poller->is_polling = false;
   283c4:	2300      	movs	r3, #0
   283c6:	e7d1      	b.n	2836c <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   283c8:	7823      	ldrb	r3, [r4, #0]
   283ca:	2b00      	cmp	r3, #0
   283cc:	d0cf      	beq.n	2836e <signal_poll_event+0x1e>
   283ce:	f854 7c04 	ldr.w	r7, [r4, #-4]
   283d2:	2f00      	cmp	r7, #0
   283d4:	d0f2      	beq.n	283bc <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   283d6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   283da:	f1a4 0914 	sub.w	r9, r4, #20
   283de:	f104 0014 	add.w	r0, r4, #20
   283e2:	f7ff ff1e 	bl	28222 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   283e6:	4649      	mov	r1, r9
   283e8:	4638      	mov	r0, r7
		twork->poll_result = 0;
   283ea:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   283ee:	f7ff fde7 	bl	27fc0 <z_work_submit_to_queue>
		poller->is_polling = false;
   283f2:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   283f6:	e7ba      	b.n	2836e <signal_poll_event+0x1e>
		poller->is_polling = false;
   283f8:	2300      	movs	r3, #0
		return -EAGAIN;
   283fa:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   283fe:	7023      	strb	r3, [r4, #0]
}
   28400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00028404 <k_poll_event_init>:
{
   28404:	b510      	push	{r4, lr}
	event->poller = NULL;
   28406:	2400      	movs	r4, #0
	event->type = type;
   28408:	0552      	lsls	r2, r2, #21
   2840a:	0209      	lsls	r1, r1, #8
   2840c:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   28410:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   28414:	430a      	orrs	r2, r1
   28416:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   28418:	6084      	str	r4, [r0, #8]
	event->type = type;
   2841a:	430a      	orrs	r2, r1
	event->obj = obj;
   2841c:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   28420:	bd10      	pop	{r4, pc}

00028422 <z_handle_obj_poll_events>:
{
   28422:	4603      	mov	r3, r0
	return list->head == list;
   28424:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   28426:	4283      	cmp	r3, r0
   28428:	d008      	beq.n	2843c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2842a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2842e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28430:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28432:	2300      	movs	r3, #0
	node->prev = NULL;
   28434:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   28438:	f7ff bf8a 	b.w	28350 <signal_poll_event>
}
   2843c:	4770      	bx	lr

0002843e <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2843e:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   28440:	e9c0 0000 	strd	r0, r0, [r0]
   28444:	6083      	str	r3, [r0, #8]
}
   28446:	4770      	bx	lr

00028448 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   28448:	6883      	ldr	r3, [r0, #8]
   2844a:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   2844c:	68c3      	ldr	r3, [r0, #12]
   2844e:	6013      	str	r3, [r2, #0]
}
   28450:	4770      	bx	lr

00028452 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   28452:	3204      	adds	r2, #4
{
   28454:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   28456:	4604      	mov	r4, r0
   28458:	d208      	bcs.n	2846c <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2845a:	2600      	movs	r6, #0
   2845c:	2700      	movs	r7, #0
   2845e:	f041 0104 	orr.w	r1, r1, #4
   28462:	e9cd 6700 	strd	r6, r7, [sp]
   28466:	f7ff fc75 	bl	27d54 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2846a:	b910      	cbnz	r0, 28472 <z_heap_aligned_alloc+0x20>
		return NULL;
   2846c:	2000      	movs	r0, #0
}
   2846e:	b002      	add	sp, #8
   28470:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   28472:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   28476:	e7fa      	b.n	2846e <z_heap_aligned_alloc+0x1c>

00028478 <k_free>:
	if (ptr != NULL) {
   28478:	b120      	cbz	r0, 28484 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2847a:	1f01      	subs	r1, r0, #4
   2847c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   28480:	f7ff bcbf 	b.w	27e02 <k_heap_free>
}
   28484:	4770      	bx	lr

00028486 <k_malloc>:
{
   28486:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   28488:	2004      	movs	r0, #4
   2848a:	f7fc bb5b 	b.w	24b44 <k_aligned_alloc>

0002848e <k_calloc>:
{
   2848e:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   28490:	fba0 5401 	umull	r5, r4, r0, r1
   28494:	b924      	cbnz	r4, 284a0 <k_calloc+0x12>
	ret = k_malloc(bounds);
   28496:	4628      	mov	r0, r5
   28498:	f7ff fff5 	bl	28486 <k_malloc>
	if (ret != NULL) {
   2849c:	4606      	mov	r6, r0
   2849e:	b910      	cbnz	r0, 284a6 <k_calloc+0x18>
		return NULL;
   284a0:	2600      	movs	r6, #0
}
   284a2:	4630      	mov	r0, r6
   284a4:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   284a6:	462a      	mov	r2, r5
   284a8:	4621      	mov	r1, r4
   284aa:	f000 f831 	bl	28510 <memset>
   284ae:	e7f8      	b.n	284a2 <k_calloc+0x14>

000284b0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   284b0:	4770      	bx	lr

000284b2 <abs>:
   284b2:	2800      	cmp	r0, #0
   284b4:	bfb8      	it	lt
   284b6:	4240      	neglt	r0, r0
   284b8:	4770      	bx	lr

000284ba <memchr>:
   284ba:	b2c9      	uxtb	r1, r1
   284bc:	4603      	mov	r3, r0
   284be:	4402      	add	r2, r0
   284c0:	b510      	push	{r4, lr}
   284c2:	4293      	cmp	r3, r2
   284c4:	4618      	mov	r0, r3
   284c6:	d101      	bne.n	284cc <memchr+0x12>
   284c8:	2000      	movs	r0, #0
   284ca:	e003      	b.n	284d4 <memchr+0x1a>
   284cc:	7804      	ldrb	r4, [r0, #0]
   284ce:	3301      	adds	r3, #1
   284d0:	428c      	cmp	r4, r1
   284d2:	d1f6      	bne.n	284c2 <memchr+0x8>
   284d4:	bd10      	pop	{r4, pc}

000284d6 <memcmp>:
   284d6:	3901      	subs	r1, #1
   284d8:	4402      	add	r2, r0
   284da:	b510      	push	{r4, lr}
   284dc:	4290      	cmp	r0, r2
   284de:	d101      	bne.n	284e4 <memcmp+0xe>
   284e0:	2000      	movs	r0, #0
   284e2:	e005      	b.n	284f0 <memcmp+0x1a>
   284e4:	7803      	ldrb	r3, [r0, #0]
   284e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   284ea:	42a3      	cmp	r3, r4
   284ec:	d001      	beq.n	284f2 <memcmp+0x1c>
   284ee:	1b18      	subs	r0, r3, r4
   284f0:	bd10      	pop	{r4, pc}
   284f2:	3001      	adds	r0, #1
   284f4:	e7f2      	b.n	284dc <memcmp+0x6>

000284f6 <memcpy>:
   284f6:	440a      	add	r2, r1
   284f8:	1e43      	subs	r3, r0, #1
   284fa:	4291      	cmp	r1, r2
   284fc:	d100      	bne.n	28500 <memcpy+0xa>
   284fe:	4770      	bx	lr
   28500:	b510      	push	{r4, lr}
   28502:	f811 4b01 	ldrb.w	r4, [r1], #1
   28506:	4291      	cmp	r1, r2
   28508:	f803 4f01 	strb.w	r4, [r3, #1]!
   2850c:	d1f9      	bne.n	28502 <memcpy+0xc>
   2850e:	bd10      	pop	{r4, pc}

00028510 <memset>:
   28510:	4402      	add	r2, r0
   28512:	4603      	mov	r3, r0
   28514:	4293      	cmp	r3, r2
   28516:	d100      	bne.n	2851a <memset+0xa>
   28518:	4770      	bx	lr
   2851a:	f803 1b01 	strb.w	r1, [r3], #1
   2851e:	e7f9      	b.n	28514 <memset+0x4>

00028520 <strchr>:
   28520:	b2c9      	uxtb	r1, r1
   28522:	4603      	mov	r3, r0
   28524:	4618      	mov	r0, r3
   28526:	f813 2b01 	ldrb.w	r2, [r3], #1
   2852a:	b112      	cbz	r2, 28532 <strchr+0x12>
   2852c:	428a      	cmp	r2, r1
   2852e:	d1f9      	bne.n	28524 <strchr+0x4>
   28530:	4770      	bx	lr
   28532:	2900      	cmp	r1, #0
   28534:	bf18      	it	ne
   28536:	2000      	movne	r0, #0
   28538:	4770      	bx	lr

0002853a <strcpy>:
   2853a:	4603      	mov	r3, r0
   2853c:	f811 2b01 	ldrb.w	r2, [r1], #1
   28540:	f803 2b01 	strb.w	r2, [r3], #1
   28544:	2a00      	cmp	r2, #0
   28546:	d1f9      	bne.n	2853c <strcpy+0x2>
   28548:	4770      	bx	lr

0002854a <strncmp>:
   2854a:	b510      	push	{r4, lr}
   2854c:	b16a      	cbz	r2, 2856a <strncmp+0x20>
   2854e:	3901      	subs	r1, #1
   28550:	1884      	adds	r4, r0, r2
   28552:	f810 2b01 	ldrb.w	r2, [r0], #1
   28556:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2855a:	429a      	cmp	r2, r3
   2855c:	d103      	bne.n	28566 <strncmp+0x1c>
   2855e:	42a0      	cmp	r0, r4
   28560:	d001      	beq.n	28566 <strncmp+0x1c>
   28562:	2a00      	cmp	r2, #0
   28564:	d1f5      	bne.n	28552 <strncmp+0x8>
   28566:	1ad0      	subs	r0, r2, r3
   28568:	bd10      	pop	{r4, pc}
   2856a:	4610      	mov	r0, r2
   2856c:	e7fc      	b.n	28568 <strncmp+0x1e>

0002856e <strncpy>:
   2856e:	3901      	subs	r1, #1
   28570:	4603      	mov	r3, r0
   28572:	b510      	push	{r4, lr}
   28574:	b132      	cbz	r2, 28584 <strncpy+0x16>
   28576:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2857a:	3a01      	subs	r2, #1
   2857c:	f803 4b01 	strb.w	r4, [r3], #1
   28580:	2c00      	cmp	r4, #0
   28582:	d1f7      	bne.n	28574 <strncpy+0x6>
   28584:	441a      	add	r2, r3
   28586:	2100      	movs	r1, #0
   28588:	4293      	cmp	r3, r2
   2858a:	d100      	bne.n	2858e <strncpy+0x20>
   2858c:	bd10      	pop	{r4, pc}
   2858e:	f803 1b01 	strb.w	r1, [r3], #1
   28592:	e7f9      	b.n	28588 <strncpy+0x1a>

00028594 <strnlen>:
   28594:	4602      	mov	r2, r0
   28596:	4401      	add	r1, r0
   28598:	b510      	push	{r4, lr}
   2859a:	428a      	cmp	r2, r1
   2859c:	4613      	mov	r3, r2
   2859e:	d003      	beq.n	285a8 <strnlen+0x14>
   285a0:	781c      	ldrb	r4, [r3, #0]
   285a2:	3201      	adds	r2, #1
   285a4:	2c00      	cmp	r4, #0
   285a6:	d1f8      	bne.n	2859a <strnlen+0x6>
   285a8:	1a18      	subs	r0, r3, r0
   285aa:	bd10      	pop	{r4, pc}

000285ac <strstr>:
   285ac:	780a      	ldrb	r2, [r1, #0]
   285ae:	b570      	push	{r4, r5, r6, lr}
   285b0:	b96a      	cbnz	r2, 285ce <strstr+0x22>
   285b2:	bd70      	pop	{r4, r5, r6, pc}
   285b4:	429a      	cmp	r2, r3
   285b6:	d109      	bne.n	285cc <strstr+0x20>
   285b8:	460c      	mov	r4, r1
   285ba:	4605      	mov	r5, r0
   285bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   285c0:	2b00      	cmp	r3, #0
   285c2:	d0f6      	beq.n	285b2 <strstr+0x6>
   285c4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   285c8:	429e      	cmp	r6, r3
   285ca:	d0f7      	beq.n	285bc <strstr+0x10>
   285cc:	3001      	adds	r0, #1
   285ce:	7803      	ldrb	r3, [r0, #0]
   285d0:	2b00      	cmp	r3, #0
   285d2:	d1ef      	bne.n	285b4 <strstr+0x8>
   285d4:	4618      	mov	r0, r3
   285d6:	e7ec      	b.n	285b2 <strstr+0x6>

000285d8 <_vsniprintf_r>:
   285d8:	b530      	push	{r4, r5, lr}
   285da:	4614      	mov	r4, r2
   285dc:	b09b      	sub	sp, #108	; 0x6c
   285de:	4605      	mov	r5, r0
   285e0:	461a      	mov	r2, r3
   285e2:	2c00      	cmp	r4, #0
   285e4:	da05      	bge.n	285f2 <_vsniprintf_r+0x1a>
   285e6:	238b      	movs	r3, #139	; 0x8b
   285e8:	6003      	str	r3, [r0, #0]
   285ea:	f04f 30ff 	mov.w	r0, #4294967295
   285ee:	b01b      	add	sp, #108	; 0x6c
   285f0:	bd30      	pop	{r4, r5, pc}
   285f2:	f44f 7302 	mov.w	r3, #520	; 0x208
   285f6:	9100      	str	r1, [sp, #0]
   285f8:	9104      	str	r1, [sp, #16]
   285fa:	4669      	mov	r1, sp
   285fc:	f8ad 300c 	strh.w	r3, [sp, #12]
   28600:	bf14      	ite	ne
   28602:	f104 33ff 	addne.w	r3, r4, #4294967295
   28606:	4623      	moveq	r3, r4
   28608:	9302      	str	r3, [sp, #8]
   2860a:	9305      	str	r3, [sp, #20]
   2860c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28610:	f8ad 300e 	strh.w	r3, [sp, #14]
   28614:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   28616:	f7fc fd4b 	bl	250b0 <_svfiprintf_r>
   2861a:	1c43      	adds	r3, r0, #1
   2861c:	bfbc      	itt	lt
   2861e:	238b      	movlt	r3, #139	; 0x8b
   28620:	602b      	strlt	r3, [r5, #0]
   28622:	2c00      	cmp	r4, #0
   28624:	d0e3      	beq.n	285ee <_vsniprintf_r+0x16>
   28626:	9b00      	ldr	r3, [sp, #0]
   28628:	2200      	movs	r2, #0
   2862a:	701a      	strb	r2, [r3, #0]
   2862c:	e7df      	b.n	285ee <_vsniprintf_r+0x16>

0002862e <__ssputs_r>:
   2862e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28632:	461f      	mov	r7, r3
   28634:	688e      	ldr	r6, [r1, #8]
   28636:	4682      	mov	sl, r0
   28638:	460c      	mov	r4, r1
   2863a:	42be      	cmp	r6, r7
   2863c:	4690      	mov	r8, r2
   2863e:	680b      	ldr	r3, [r1, #0]
   28640:	d82d      	bhi.n	2869e <__ssputs_r+0x70>
   28642:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   28646:	f412 6f90 	tst.w	r2, #1152	; 0x480
   2864a:	d026      	beq.n	2869a <__ssputs_r+0x6c>
   2864c:	6965      	ldr	r5, [r4, #20]
   2864e:	6909      	ldr	r1, [r1, #16]
   28650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   28654:	eba3 0901 	sub.w	r9, r3, r1
   28658:	1c7b      	adds	r3, r7, #1
   2865a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2865e:	444b      	add	r3, r9
   28660:	106d      	asrs	r5, r5, #1
   28662:	429d      	cmp	r5, r3
   28664:	bf38      	it	cc
   28666:	461d      	movcc	r5, r3
   28668:	0553      	lsls	r3, r2, #21
   2866a:	d527      	bpl.n	286bc <__ssputs_r+0x8e>
   2866c:	4629      	mov	r1, r5
   2866e:	f7fc faf9 	bl	24c64 <_malloc_r>
   28672:	4606      	mov	r6, r0
   28674:	b360      	cbz	r0, 286d0 <__ssputs_r+0xa2>
   28676:	464a      	mov	r2, r9
   28678:	6921      	ldr	r1, [r4, #16]
   2867a:	f7ff ff3c 	bl	284f6 <memcpy>
   2867e:	89a3      	ldrh	r3, [r4, #12]
   28680:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   28684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   28688:	81a3      	strh	r3, [r4, #12]
   2868a:	6126      	str	r6, [r4, #16]
   2868c:	444e      	add	r6, r9
   2868e:	6165      	str	r5, [r4, #20]
   28690:	eba5 0509 	sub.w	r5, r5, r9
   28694:	6026      	str	r6, [r4, #0]
   28696:	463e      	mov	r6, r7
   28698:	60a5      	str	r5, [r4, #8]
   2869a:	42be      	cmp	r6, r7
   2869c:	d900      	bls.n	286a0 <__ssputs_r+0x72>
   2869e:	463e      	mov	r6, r7
   286a0:	4632      	mov	r2, r6
   286a2:	4641      	mov	r1, r8
   286a4:	6820      	ldr	r0, [r4, #0]
   286a6:	f000 f88f 	bl	287c8 <memmove>
   286aa:	68a3      	ldr	r3, [r4, #8]
   286ac:	2000      	movs	r0, #0
   286ae:	1b9b      	subs	r3, r3, r6
   286b0:	60a3      	str	r3, [r4, #8]
   286b2:	6823      	ldr	r3, [r4, #0]
   286b4:	4433      	add	r3, r6
   286b6:	6023      	str	r3, [r4, #0]
   286b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   286bc:	462a      	mov	r2, r5
   286be:	f000 f89d 	bl	287fc <_realloc_r>
   286c2:	4606      	mov	r6, r0
   286c4:	2800      	cmp	r0, #0
   286c6:	d1e0      	bne.n	2868a <__ssputs_r+0x5c>
   286c8:	6921      	ldr	r1, [r4, #16]
   286ca:	4650      	mov	r0, sl
   286cc:	f7fc fa80 	bl	24bd0 <_free_r>
   286d0:	230c      	movs	r3, #12
   286d2:	f04f 30ff 	mov.w	r0, #4294967295
   286d6:	f8ca 3000 	str.w	r3, [sl]
   286da:	89a3      	ldrh	r3, [r4, #12]
   286dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   286e0:	81a3      	strh	r3, [r4, #12]
   286e2:	e7e9      	b.n	286b8 <__ssputs_r+0x8a>

000286e4 <_printf_common>:
   286e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   286e8:	4616      	mov	r6, r2
   286ea:	4698      	mov	r8, r3
   286ec:	688a      	ldr	r2, [r1, #8]
   286ee:	4607      	mov	r7, r0
   286f0:	690b      	ldr	r3, [r1, #16]
   286f2:	460c      	mov	r4, r1
   286f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
   286f8:	4293      	cmp	r3, r2
   286fa:	bfb8      	it	lt
   286fc:	4613      	movlt	r3, r2
   286fe:	6033      	str	r3, [r6, #0]
   28700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   28704:	b10a      	cbz	r2, 2870a <_printf_common+0x26>
   28706:	3301      	adds	r3, #1
   28708:	6033      	str	r3, [r6, #0]
   2870a:	6823      	ldr	r3, [r4, #0]
   2870c:	0699      	lsls	r1, r3, #26
   2870e:	bf42      	ittt	mi
   28710:	6833      	ldrmi	r3, [r6, #0]
   28712:	3302      	addmi	r3, #2
   28714:	6033      	strmi	r3, [r6, #0]
   28716:	6825      	ldr	r5, [r4, #0]
   28718:	f015 0506 	ands.w	r5, r5, #6
   2871c:	d106      	bne.n	2872c <_printf_common+0x48>
   2871e:	f104 0a19 	add.w	sl, r4, #25
   28722:	68e3      	ldr	r3, [r4, #12]
   28724:	6832      	ldr	r2, [r6, #0]
   28726:	1a9b      	subs	r3, r3, r2
   28728:	42ab      	cmp	r3, r5
   2872a:	dc2b      	bgt.n	28784 <_printf_common+0xa0>
   2872c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   28730:	6822      	ldr	r2, [r4, #0]
   28732:	3b00      	subs	r3, #0
   28734:	bf18      	it	ne
   28736:	2301      	movne	r3, #1
   28738:	0692      	lsls	r2, r2, #26
   2873a:	d430      	bmi.n	2879e <_printf_common+0xba>
   2873c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   28740:	4641      	mov	r1, r8
   28742:	4638      	mov	r0, r7
   28744:	47c8      	blx	r9
   28746:	3001      	adds	r0, #1
   28748:	d023      	beq.n	28792 <_printf_common+0xae>
   2874a:	6823      	ldr	r3, [r4, #0]
   2874c:	341a      	adds	r4, #26
   2874e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   28752:	f003 0306 	and.w	r3, r3, #6
   28756:	2b04      	cmp	r3, #4
   28758:	bf0a      	itet	eq
   2875a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   2875e:	2500      	movne	r5, #0
   28760:	6833      	ldreq	r3, [r6, #0]
   28762:	f04f 0600 	mov.w	r6, #0
   28766:	bf08      	it	eq
   28768:	1aed      	subeq	r5, r5, r3
   2876a:	f854 3c12 	ldr.w	r3, [r4, #-18]
   2876e:	bf08      	it	eq
   28770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   28774:	4293      	cmp	r3, r2
   28776:	bfc4      	itt	gt
   28778:	1a9b      	subgt	r3, r3, r2
   2877a:	18ed      	addgt	r5, r5, r3
   2877c:	42b5      	cmp	r5, r6
   2877e:	d11a      	bne.n	287b6 <_printf_common+0xd2>
   28780:	2000      	movs	r0, #0
   28782:	e008      	b.n	28796 <_printf_common+0xb2>
   28784:	2301      	movs	r3, #1
   28786:	4652      	mov	r2, sl
   28788:	4641      	mov	r1, r8
   2878a:	4638      	mov	r0, r7
   2878c:	47c8      	blx	r9
   2878e:	3001      	adds	r0, #1
   28790:	d103      	bne.n	2879a <_printf_common+0xb6>
   28792:	f04f 30ff 	mov.w	r0, #4294967295
   28796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2879a:	3501      	adds	r5, #1
   2879c:	e7c1      	b.n	28722 <_printf_common+0x3e>
   2879e:	18e1      	adds	r1, r4, r3
   287a0:	1c5a      	adds	r2, r3, #1
   287a2:	2030      	movs	r0, #48	; 0x30
   287a4:	3302      	adds	r3, #2
   287a6:	4422      	add	r2, r4
   287a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   287ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   287b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   287b4:	e7c2      	b.n	2873c <_printf_common+0x58>
   287b6:	2301      	movs	r3, #1
   287b8:	4622      	mov	r2, r4
   287ba:	4641      	mov	r1, r8
   287bc:	4638      	mov	r0, r7
   287be:	47c8      	blx	r9
   287c0:	3001      	adds	r0, #1
   287c2:	d0e6      	beq.n	28792 <_printf_common+0xae>
   287c4:	3601      	adds	r6, #1
   287c6:	e7d9      	b.n	2877c <_printf_common+0x98>

000287c8 <memmove>:
   287c8:	4288      	cmp	r0, r1
   287ca:	b510      	push	{r4, lr}
   287cc:	eb01 0402 	add.w	r4, r1, r2
   287d0:	d902      	bls.n	287d8 <memmove+0x10>
   287d2:	4284      	cmp	r4, r0
   287d4:	4623      	mov	r3, r4
   287d6:	d807      	bhi.n	287e8 <memmove+0x20>
   287d8:	1e43      	subs	r3, r0, #1
   287da:	42a1      	cmp	r1, r4
   287dc:	d008      	beq.n	287f0 <memmove+0x28>
   287de:	f811 2b01 	ldrb.w	r2, [r1], #1
   287e2:	f803 2f01 	strb.w	r2, [r3, #1]!
   287e6:	e7f8      	b.n	287da <memmove+0x12>
   287e8:	4402      	add	r2, r0
   287ea:	4601      	mov	r1, r0
   287ec:	428a      	cmp	r2, r1
   287ee:	d100      	bne.n	287f2 <memmove+0x2a>
   287f0:	bd10      	pop	{r4, pc}
   287f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   287f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   287fa:	e7f7      	b.n	287ec <memmove+0x24>

000287fc <_realloc_r>:
   287fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   287fe:	4607      	mov	r7, r0
   28800:	4615      	mov	r5, r2
   28802:	460c      	mov	r4, r1
   28804:	b921      	cbnz	r1, 28810 <_realloc_r+0x14>
   28806:	4611      	mov	r1, r2
   28808:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2880c:	f7fc ba2a 	b.w	24c64 <_malloc_r>
   28810:	b922      	cbnz	r2, 2881c <_realloc_r+0x20>
   28812:	f7fc f9dd 	bl	24bd0 <_free_r>
   28816:	2400      	movs	r4, #0
   28818:	4620      	mov	r0, r4
   2881a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2881c:	f000 f813 	bl	28846 <_malloc_usable_size_r>
   28820:	42a8      	cmp	r0, r5
   28822:	d2f9      	bcs.n	28818 <_realloc_r+0x1c>
   28824:	4629      	mov	r1, r5
   28826:	4638      	mov	r0, r7
   28828:	f7fc fa1c 	bl	24c64 <_malloc_r>
   2882c:	4606      	mov	r6, r0
   2882e:	2800      	cmp	r0, #0
   28830:	d0f1      	beq.n	28816 <_realloc_r+0x1a>
   28832:	4621      	mov	r1, r4
   28834:	462a      	mov	r2, r5
   28836:	f7ff fe5e 	bl	284f6 <memcpy>
   2883a:	4621      	mov	r1, r4
   2883c:	4638      	mov	r0, r7
   2883e:	4634      	mov	r4, r6
   28840:	f7fc f9c6 	bl	24bd0 <_free_r>
   28844:	e7e8      	b.n	28818 <_realloc_r+0x1c>

00028846 <_malloc_usable_size_r>:
   28846:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2884a:	1f18      	subs	r0, r3, #4
   2884c:	2b00      	cmp	r3, #0
   2884e:	bfbc      	itt	lt
   28850:	580b      	ldrlt	r3, [r1, r0]
   28852:	18c0      	addlt	r0, r0, r3
   28854:	4770      	bx	lr
	...
