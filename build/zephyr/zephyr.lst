
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00018000 <_vector_table>:
   18000:	a0 fb 00 20 31 bf 01 00 93 65 02 00 05 bf 01 00     ... 1....e......
   18010:	05 bf 01 00 05 bf 01 00 05 bf 01 00 05 bf 01 00     ................
	...
   1802c:	59 b8 01 00 05 bf 01 00 00 00 00 00 f9 b7 01 00     Y...............
   1803c:	05 bf 01 00                                         ....

00018040 <_irq_vector_table>:
   18040:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   18050:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   18060:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   18070:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   18080:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   18090:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   180a0:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   180b0:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   180c0:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   180d0:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   180e0:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   180f0:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   18100:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   18110:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   18120:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   18130:	e1 b8 01 00 e1 b8 01 00 e1 b8 01 00 e1 b8 01 00     ................
   18140:	e1 b8 01 00                                         ....

Disassembly of section text:

00018148 <__aeabi_fmul>:
   18148:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1814c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18150:	bf1e      	ittt	ne
   18152:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18156:	ea92 0f0c 	teqne	r2, ip
   1815a:	ea93 0f0c 	teqne	r3, ip
   1815e:	d06f      	beq.n	18240 <__aeabi_fmul+0xf8>
   18160:	441a      	add	r2, r3
   18162:	ea80 0c01 	eor.w	ip, r0, r1
   18166:	0240      	lsls	r0, r0, #9
   18168:	bf18      	it	ne
   1816a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1816e:	d01e      	beq.n	181ae <__aeabi_fmul+0x66>
   18170:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18174:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18178:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1817c:	fba0 3101 	umull	r3, r1, r0, r1
   18180:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18184:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18188:	bf3e      	ittt	cc
   1818a:	0049      	lslcc	r1, r1, #1
   1818c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18190:	005b      	lslcc	r3, r3, #1
   18192:	ea40 0001 	orr.w	r0, r0, r1
   18196:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1819a:	2afd      	cmp	r2, #253	; 0xfd
   1819c:	d81d      	bhi.n	181da <__aeabi_fmul+0x92>
   1819e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   181a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   181a6:	bf08      	it	eq
   181a8:	f020 0001 	biceq.w	r0, r0, #1
   181ac:	4770      	bx	lr
   181ae:	f090 0f00 	teq	r0, #0
   181b2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   181b6:	bf08      	it	eq
   181b8:	0249      	lsleq	r1, r1, #9
   181ba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   181be:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   181c2:	3a7f      	subs	r2, #127	; 0x7f
   181c4:	bfc2      	ittt	gt
   181c6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   181ca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   181ce:	4770      	bxgt	lr
   181d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   181d4:	f04f 0300 	mov.w	r3, #0
   181d8:	3a01      	subs	r2, #1
   181da:	dc5d      	bgt.n	18298 <__aeabi_fmul+0x150>
   181dc:	f112 0f19 	cmn.w	r2, #25
   181e0:	bfdc      	itt	le
   181e2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   181e6:	4770      	bxle	lr
   181e8:	f1c2 0200 	rsb	r2, r2, #0
   181ec:	0041      	lsls	r1, r0, #1
   181ee:	fa21 f102 	lsr.w	r1, r1, r2
   181f2:	f1c2 0220 	rsb	r2, r2, #32
   181f6:	fa00 fc02 	lsl.w	ip, r0, r2
   181fa:	ea5f 0031 	movs.w	r0, r1, rrx
   181fe:	f140 0000 	adc.w	r0, r0, #0
   18202:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   18206:	bf08      	it	eq
   18208:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1820c:	4770      	bx	lr
   1820e:	f092 0f00 	teq	r2, #0
   18212:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18216:	bf02      	ittt	eq
   18218:	0040      	lsleq	r0, r0, #1
   1821a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1821e:	3a01      	subeq	r2, #1
   18220:	d0f9      	beq.n	18216 <__aeabi_fmul+0xce>
   18222:	ea40 000c 	orr.w	r0, r0, ip
   18226:	f093 0f00 	teq	r3, #0
   1822a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1822e:	bf02      	ittt	eq
   18230:	0049      	lsleq	r1, r1, #1
   18232:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18236:	3b01      	subeq	r3, #1
   18238:	d0f9      	beq.n	1822e <__aeabi_fmul+0xe6>
   1823a:	ea41 010c 	orr.w	r1, r1, ip
   1823e:	e78f      	b.n	18160 <__aeabi_fmul+0x18>
   18240:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18244:	ea92 0f0c 	teq	r2, ip
   18248:	bf18      	it	ne
   1824a:	ea93 0f0c 	teqne	r3, ip
   1824e:	d00a      	beq.n	18266 <__aeabi_fmul+0x11e>
   18250:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18254:	bf18      	it	ne
   18256:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1825a:	d1d8      	bne.n	1820e <__aeabi_fmul+0xc6>
   1825c:	ea80 0001 	eor.w	r0, r0, r1
   18260:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18264:	4770      	bx	lr
   18266:	f090 0f00 	teq	r0, #0
   1826a:	bf17      	itett	ne
   1826c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18270:	4608      	moveq	r0, r1
   18272:	f091 0f00 	teqne	r1, #0
   18276:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1827a:	d014      	beq.n	182a6 <__aeabi_fmul+0x15e>
   1827c:	ea92 0f0c 	teq	r2, ip
   18280:	d101      	bne.n	18286 <__aeabi_fmul+0x13e>
   18282:	0242      	lsls	r2, r0, #9
   18284:	d10f      	bne.n	182a6 <__aeabi_fmul+0x15e>
   18286:	ea93 0f0c 	teq	r3, ip
   1828a:	d103      	bne.n	18294 <__aeabi_fmul+0x14c>
   1828c:	024b      	lsls	r3, r1, #9
   1828e:	bf18      	it	ne
   18290:	4608      	movne	r0, r1
   18292:	d108      	bne.n	182a6 <__aeabi_fmul+0x15e>
   18294:	ea80 0001 	eor.w	r0, r0, r1
   18298:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1829c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   182a4:	4770      	bx	lr
   182a6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182aa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   182ae:	4770      	bx	lr

000182b0 <__aeabi_drsub>:
   182b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   182b4:	e002      	b.n	182bc <__adddf3>
   182b6:	bf00      	nop

000182b8 <__aeabi_dsub>:
   182b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000182bc <__adddf3>:
   182bc:	b530      	push	{r4, r5, lr}
   182be:	ea4f 0441 	mov.w	r4, r1, lsl #1
   182c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   182c6:	ea94 0f05 	teq	r4, r5
   182ca:	bf08      	it	eq
   182cc:	ea90 0f02 	teqeq	r0, r2
   182d0:	bf1f      	itttt	ne
   182d2:	ea54 0c00 	orrsne.w	ip, r4, r0
   182d6:	ea55 0c02 	orrsne.w	ip, r5, r2
   182da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   182de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   182e2:	f000 80e2 	beq.w	184aa <__adddf3+0x1ee>
   182e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   182ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   182ee:	bfb8      	it	lt
   182f0:	426d      	neglt	r5, r5
   182f2:	dd0c      	ble.n	1830e <__adddf3+0x52>
   182f4:	442c      	add	r4, r5
   182f6:	ea80 0202 	eor.w	r2, r0, r2
   182fa:	ea81 0303 	eor.w	r3, r1, r3
   182fe:	ea82 0000 	eor.w	r0, r2, r0
   18302:	ea83 0101 	eor.w	r1, r3, r1
   18306:	ea80 0202 	eor.w	r2, r0, r2
   1830a:	ea81 0303 	eor.w	r3, r1, r3
   1830e:	2d36      	cmp	r5, #54	; 0x36
   18310:	bf88      	it	hi
   18312:	bd30      	pophi	{r4, r5, pc}
   18314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18318:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1831c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   18320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   18324:	d002      	beq.n	1832c <__adddf3+0x70>
   18326:	4240      	negs	r0, r0
   18328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1832c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   18330:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   18338:	d002      	beq.n	18340 <__adddf3+0x84>
   1833a:	4252      	negs	r2, r2
   1833c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18340:	ea94 0f05 	teq	r4, r5
   18344:	f000 80a7 	beq.w	18496 <__adddf3+0x1da>
   18348:	f1a4 0401 	sub.w	r4, r4, #1
   1834c:	f1d5 0e20 	rsbs	lr, r5, #32
   18350:	db0d      	blt.n	1836e <__adddf3+0xb2>
   18352:	fa02 fc0e 	lsl.w	ip, r2, lr
   18356:	fa22 f205 	lsr.w	r2, r2, r5
   1835a:	1880      	adds	r0, r0, r2
   1835c:	f141 0100 	adc.w	r1, r1, #0
   18360:	fa03 f20e 	lsl.w	r2, r3, lr
   18364:	1880      	adds	r0, r0, r2
   18366:	fa43 f305 	asr.w	r3, r3, r5
   1836a:	4159      	adcs	r1, r3
   1836c:	e00e      	b.n	1838c <__adddf3+0xd0>
   1836e:	f1a5 0520 	sub.w	r5, r5, #32
   18372:	f10e 0e20 	add.w	lr, lr, #32
   18376:	2a01      	cmp	r2, #1
   18378:	fa03 fc0e 	lsl.w	ip, r3, lr
   1837c:	bf28      	it	cs
   1837e:	f04c 0c02 	orrcs.w	ip, ip, #2
   18382:	fa43 f305 	asr.w	r3, r3, r5
   18386:	18c0      	adds	r0, r0, r3
   18388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1838c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18390:	d507      	bpl.n	183a2 <__adddf3+0xe6>
   18392:	f04f 0e00 	mov.w	lr, #0
   18396:	f1dc 0c00 	rsbs	ip, ip, #0
   1839a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1839e:	eb6e 0101 	sbc.w	r1, lr, r1
   183a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   183a6:	d31b      	bcc.n	183e0 <__adddf3+0x124>
   183a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   183ac:	d30c      	bcc.n	183c8 <__adddf3+0x10c>
   183ae:	0849      	lsrs	r1, r1, #1
   183b0:	ea5f 0030 	movs.w	r0, r0, rrx
   183b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   183b8:	f104 0401 	add.w	r4, r4, #1
   183bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   183c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   183c4:	f080 809a 	bcs.w	184fc <__adddf3+0x240>
   183c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   183cc:	bf08      	it	eq
   183ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   183d2:	f150 0000 	adcs.w	r0, r0, #0
   183d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   183da:	ea41 0105 	orr.w	r1, r1, r5
   183de:	bd30      	pop	{r4, r5, pc}
   183e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   183e4:	4140      	adcs	r0, r0
   183e6:	eb41 0101 	adc.w	r1, r1, r1
   183ea:	3c01      	subs	r4, #1
   183ec:	bf28      	it	cs
   183ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   183f2:	d2e9      	bcs.n	183c8 <__adddf3+0x10c>
   183f4:	f091 0f00 	teq	r1, #0
   183f8:	bf04      	itt	eq
   183fa:	4601      	moveq	r1, r0
   183fc:	2000      	moveq	r0, #0
   183fe:	fab1 f381 	clz	r3, r1
   18402:	bf08      	it	eq
   18404:	3320      	addeq	r3, #32
   18406:	f1a3 030b 	sub.w	r3, r3, #11
   1840a:	f1b3 0220 	subs.w	r2, r3, #32
   1840e:	da0c      	bge.n	1842a <__adddf3+0x16e>
   18410:	320c      	adds	r2, #12
   18412:	dd08      	ble.n	18426 <__adddf3+0x16a>
   18414:	f102 0c14 	add.w	ip, r2, #20
   18418:	f1c2 020c 	rsb	r2, r2, #12
   1841c:	fa01 f00c 	lsl.w	r0, r1, ip
   18420:	fa21 f102 	lsr.w	r1, r1, r2
   18424:	e00c      	b.n	18440 <__adddf3+0x184>
   18426:	f102 0214 	add.w	r2, r2, #20
   1842a:	bfd8      	it	le
   1842c:	f1c2 0c20 	rsble	ip, r2, #32
   18430:	fa01 f102 	lsl.w	r1, r1, r2
   18434:	fa20 fc0c 	lsr.w	ip, r0, ip
   18438:	bfdc      	itt	le
   1843a:	ea41 010c 	orrle.w	r1, r1, ip
   1843e:	4090      	lslle	r0, r2
   18440:	1ae4      	subs	r4, r4, r3
   18442:	bfa2      	ittt	ge
   18444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   18448:	4329      	orrge	r1, r5
   1844a:	bd30      	popge	{r4, r5, pc}
   1844c:	ea6f 0404 	mvn.w	r4, r4
   18450:	3c1f      	subs	r4, #31
   18452:	da1c      	bge.n	1848e <__adddf3+0x1d2>
   18454:	340c      	adds	r4, #12
   18456:	dc0e      	bgt.n	18476 <__adddf3+0x1ba>
   18458:	f104 0414 	add.w	r4, r4, #20
   1845c:	f1c4 0220 	rsb	r2, r4, #32
   18460:	fa20 f004 	lsr.w	r0, r0, r4
   18464:	fa01 f302 	lsl.w	r3, r1, r2
   18468:	ea40 0003 	orr.w	r0, r0, r3
   1846c:	fa21 f304 	lsr.w	r3, r1, r4
   18470:	ea45 0103 	orr.w	r1, r5, r3
   18474:	bd30      	pop	{r4, r5, pc}
   18476:	f1c4 040c 	rsb	r4, r4, #12
   1847a:	f1c4 0220 	rsb	r2, r4, #32
   1847e:	fa20 f002 	lsr.w	r0, r0, r2
   18482:	fa01 f304 	lsl.w	r3, r1, r4
   18486:	ea40 0003 	orr.w	r0, r0, r3
   1848a:	4629      	mov	r1, r5
   1848c:	bd30      	pop	{r4, r5, pc}
   1848e:	fa21 f004 	lsr.w	r0, r1, r4
   18492:	4629      	mov	r1, r5
   18494:	bd30      	pop	{r4, r5, pc}
   18496:	f094 0f00 	teq	r4, #0
   1849a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1849e:	bf06      	itte	eq
   184a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   184a4:	3401      	addeq	r4, #1
   184a6:	3d01      	subne	r5, #1
   184a8:	e74e      	b.n	18348 <__adddf3+0x8c>
   184aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   184ae:	bf18      	it	ne
   184b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   184b4:	d029      	beq.n	1850a <__adddf3+0x24e>
   184b6:	ea94 0f05 	teq	r4, r5
   184ba:	bf08      	it	eq
   184bc:	ea90 0f02 	teqeq	r0, r2
   184c0:	d005      	beq.n	184ce <__adddf3+0x212>
   184c2:	ea54 0c00 	orrs.w	ip, r4, r0
   184c6:	bf04      	itt	eq
   184c8:	4619      	moveq	r1, r3
   184ca:	4610      	moveq	r0, r2
   184cc:	bd30      	pop	{r4, r5, pc}
   184ce:	ea91 0f03 	teq	r1, r3
   184d2:	bf1e      	ittt	ne
   184d4:	2100      	movne	r1, #0
   184d6:	2000      	movne	r0, #0
   184d8:	bd30      	popne	{r4, r5, pc}
   184da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   184de:	d105      	bne.n	184ec <__adddf3+0x230>
   184e0:	0040      	lsls	r0, r0, #1
   184e2:	4149      	adcs	r1, r1
   184e4:	bf28      	it	cs
   184e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   184ea:	bd30      	pop	{r4, r5, pc}
   184ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   184f0:	bf3c      	itt	cc
   184f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   184f6:	bd30      	popcc	{r4, r5, pc}
   184f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   184fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   18500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18504:	f04f 0000 	mov.w	r0, #0
   18508:	bd30      	pop	{r4, r5, pc}
   1850a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1850e:	bf1a      	itte	ne
   18510:	4619      	movne	r1, r3
   18512:	4610      	movne	r0, r2
   18514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18518:	bf1c      	itt	ne
   1851a:	460b      	movne	r3, r1
   1851c:	4602      	movne	r2, r0
   1851e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18522:	bf06      	itte	eq
   18524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18528:	ea91 0f03 	teqeq	r1, r3
   1852c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   18530:	bd30      	pop	{r4, r5, pc}
   18532:	bf00      	nop

00018534 <__aeabi_ui2d>:
   18534:	f090 0f00 	teq	r0, #0
   18538:	bf04      	itt	eq
   1853a:	2100      	moveq	r1, #0
   1853c:	4770      	bxeq	lr
   1853e:	b530      	push	{r4, r5, lr}
   18540:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18544:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18548:	f04f 0500 	mov.w	r5, #0
   1854c:	f04f 0100 	mov.w	r1, #0
   18550:	e750      	b.n	183f4 <__adddf3+0x138>
   18552:	bf00      	nop

00018554 <__aeabi_i2d>:
   18554:	f090 0f00 	teq	r0, #0
   18558:	bf04      	itt	eq
   1855a:	2100      	moveq	r1, #0
   1855c:	4770      	bxeq	lr
   1855e:	b530      	push	{r4, r5, lr}
   18560:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18564:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1856c:	bf48      	it	mi
   1856e:	4240      	negmi	r0, r0
   18570:	f04f 0100 	mov.w	r1, #0
   18574:	e73e      	b.n	183f4 <__adddf3+0x138>
   18576:	bf00      	nop

00018578 <__aeabi_f2d>:
   18578:	0042      	lsls	r2, r0, #1
   1857a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1857e:	ea4f 0131 	mov.w	r1, r1, rrx
   18582:	ea4f 7002 	mov.w	r0, r2, lsl #28
   18586:	bf1f      	itttt	ne
   18588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1858c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   18590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   18594:	4770      	bxne	lr
   18596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1859a:	bf08      	it	eq
   1859c:	4770      	bxeq	lr
   1859e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   185a2:	bf04      	itt	eq
   185a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   185a8:	4770      	bxeq	lr
   185aa:	b530      	push	{r4, r5, lr}
   185ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   185b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   185b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   185b8:	e71c      	b.n	183f4 <__adddf3+0x138>
   185ba:	bf00      	nop

000185bc <__aeabi_ul2d>:
   185bc:	ea50 0201 	orrs.w	r2, r0, r1
   185c0:	bf08      	it	eq
   185c2:	4770      	bxeq	lr
   185c4:	b530      	push	{r4, r5, lr}
   185c6:	f04f 0500 	mov.w	r5, #0
   185ca:	e00a      	b.n	185e2 <__aeabi_l2d+0x16>

000185cc <__aeabi_l2d>:
   185cc:	ea50 0201 	orrs.w	r2, r0, r1
   185d0:	bf08      	it	eq
   185d2:	4770      	bxeq	lr
   185d4:	b530      	push	{r4, r5, lr}
   185d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   185da:	d502      	bpl.n	185e2 <__aeabi_l2d+0x16>
   185dc:	4240      	negs	r0, r0
   185de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   185e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   185e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   185ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   185ee:	f43f aed8 	beq.w	183a2 <__adddf3+0xe6>
   185f2:	f04f 0203 	mov.w	r2, #3
   185f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   185fa:	bf18      	it	ne
   185fc:	3203      	addne	r2, #3
   185fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18602:	bf18      	it	ne
   18604:	3203      	addne	r2, #3
   18606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1860a:	f1c2 0320 	rsb	r3, r2, #32
   1860e:	fa00 fc03 	lsl.w	ip, r0, r3
   18612:	fa20 f002 	lsr.w	r0, r0, r2
   18616:	fa01 fe03 	lsl.w	lr, r1, r3
   1861a:	ea40 000e 	orr.w	r0, r0, lr
   1861e:	fa21 f102 	lsr.w	r1, r1, r2
   18622:	4414      	add	r4, r2
   18624:	e6bd      	b.n	183a2 <__adddf3+0xe6>
   18626:	bf00      	nop

00018628 <__aeabi_dmul>:
   18628:	b570      	push	{r4, r5, r6, lr}
   1862a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1862e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18636:	bf1d      	ittte	ne
   18638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1863c:	ea94 0f0c 	teqne	r4, ip
   18640:	ea95 0f0c 	teqne	r5, ip
   18644:	f000 f8de 	bleq	18804 <__aeabi_dmul+0x1dc>
   18648:	442c      	add	r4, r5
   1864a:	ea81 0603 	eor.w	r6, r1, r3
   1864e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   18652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   18656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1865a:	bf18      	it	ne
   1865c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   18660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18668:	d038      	beq.n	186dc <__aeabi_dmul+0xb4>
   1866a:	fba0 ce02 	umull	ip, lr, r0, r2
   1866e:	f04f 0500 	mov.w	r5, #0
   18672:	fbe1 e502 	umlal	lr, r5, r1, r2
   18676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1867a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1867e:	f04f 0600 	mov.w	r6, #0
   18682:	fbe1 5603 	umlal	r5, r6, r1, r3
   18686:	f09c 0f00 	teq	ip, #0
   1868a:	bf18      	it	ne
   1868c:	f04e 0e01 	orrne.w	lr, lr, #1
   18690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   18694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   18698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1869c:	d204      	bcs.n	186a8 <__aeabi_dmul+0x80>
   1869e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   186a2:	416d      	adcs	r5, r5
   186a4:	eb46 0606 	adc.w	r6, r6, r6
   186a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   186ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   186b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   186b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   186b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   186bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   186c0:	bf88      	it	hi
   186c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   186c6:	d81e      	bhi.n	18706 <__aeabi_dmul+0xde>
   186c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   186cc:	bf08      	it	eq
   186ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   186d2:	f150 0000 	adcs.w	r0, r0, #0
   186d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   186da:	bd70      	pop	{r4, r5, r6, pc}
   186dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   186e0:	ea46 0101 	orr.w	r1, r6, r1
   186e4:	ea40 0002 	orr.w	r0, r0, r2
   186e8:	ea81 0103 	eor.w	r1, r1, r3
   186ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   186f0:	bfc2      	ittt	gt
   186f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   186f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   186fa:	bd70      	popgt	{r4, r5, r6, pc}
   186fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18700:	f04f 0e00 	mov.w	lr, #0
   18704:	3c01      	subs	r4, #1
   18706:	f300 80ab 	bgt.w	18860 <__aeabi_dmul+0x238>
   1870a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1870e:	bfde      	ittt	le
   18710:	2000      	movle	r0, #0
   18712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   18716:	bd70      	pople	{r4, r5, r6, pc}
   18718:	f1c4 0400 	rsb	r4, r4, #0
   1871c:	3c20      	subs	r4, #32
   1871e:	da35      	bge.n	1878c <__aeabi_dmul+0x164>
   18720:	340c      	adds	r4, #12
   18722:	dc1b      	bgt.n	1875c <__aeabi_dmul+0x134>
   18724:	f104 0414 	add.w	r4, r4, #20
   18728:	f1c4 0520 	rsb	r5, r4, #32
   1872c:	fa00 f305 	lsl.w	r3, r0, r5
   18730:	fa20 f004 	lsr.w	r0, r0, r4
   18734:	fa01 f205 	lsl.w	r2, r1, r5
   18738:	ea40 0002 	orr.w	r0, r0, r2
   1873c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   18740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18748:	fa21 f604 	lsr.w	r6, r1, r4
   1874c:	eb42 0106 	adc.w	r1, r2, r6
   18750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18754:	bf08      	it	eq
   18756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1875a:	bd70      	pop	{r4, r5, r6, pc}
   1875c:	f1c4 040c 	rsb	r4, r4, #12
   18760:	f1c4 0520 	rsb	r5, r4, #32
   18764:	fa00 f304 	lsl.w	r3, r0, r4
   18768:	fa20 f005 	lsr.w	r0, r0, r5
   1876c:	fa01 f204 	lsl.w	r2, r1, r4
   18770:	ea40 0002 	orr.w	r0, r0, r2
   18774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1877c:	f141 0100 	adc.w	r1, r1, #0
   18780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18784:	bf08      	it	eq
   18786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1878a:	bd70      	pop	{r4, r5, r6, pc}
   1878c:	f1c4 0520 	rsb	r5, r4, #32
   18790:	fa00 f205 	lsl.w	r2, r0, r5
   18794:	ea4e 0e02 	orr.w	lr, lr, r2
   18798:	fa20 f304 	lsr.w	r3, r0, r4
   1879c:	fa01 f205 	lsl.w	r2, r1, r5
   187a0:	ea43 0302 	orr.w	r3, r3, r2
   187a4:	fa21 f004 	lsr.w	r0, r1, r4
   187a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   187ac:	fa21 f204 	lsr.w	r2, r1, r4
   187b0:	ea20 0002 	bic.w	r0, r0, r2
   187b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   187b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   187bc:	bf08      	it	eq
   187be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   187c2:	bd70      	pop	{r4, r5, r6, pc}
   187c4:	f094 0f00 	teq	r4, #0
   187c8:	d10f      	bne.n	187ea <__aeabi_dmul+0x1c2>
   187ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   187ce:	0040      	lsls	r0, r0, #1
   187d0:	eb41 0101 	adc.w	r1, r1, r1
   187d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   187d8:	bf08      	it	eq
   187da:	3c01      	subeq	r4, #1
   187dc:	d0f7      	beq.n	187ce <__aeabi_dmul+0x1a6>
   187de:	ea41 0106 	orr.w	r1, r1, r6
   187e2:	f095 0f00 	teq	r5, #0
   187e6:	bf18      	it	ne
   187e8:	4770      	bxne	lr
   187ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   187ee:	0052      	lsls	r2, r2, #1
   187f0:	eb43 0303 	adc.w	r3, r3, r3
   187f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   187f8:	bf08      	it	eq
   187fa:	3d01      	subeq	r5, #1
   187fc:	d0f7      	beq.n	187ee <__aeabi_dmul+0x1c6>
   187fe:	ea43 0306 	orr.w	r3, r3, r6
   18802:	4770      	bx	lr
   18804:	ea94 0f0c 	teq	r4, ip
   18808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1880c:	bf18      	it	ne
   1880e:	ea95 0f0c 	teqne	r5, ip
   18812:	d00c      	beq.n	1882e <__aeabi_dmul+0x206>
   18814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18818:	bf18      	it	ne
   1881a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1881e:	d1d1      	bne.n	187c4 <__aeabi_dmul+0x19c>
   18820:	ea81 0103 	eor.w	r1, r1, r3
   18824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18828:	f04f 0000 	mov.w	r0, #0
   1882c:	bd70      	pop	{r4, r5, r6, pc}
   1882e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18832:	bf06      	itte	eq
   18834:	4610      	moveq	r0, r2
   18836:	4619      	moveq	r1, r3
   18838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1883c:	d019      	beq.n	18872 <__aeabi_dmul+0x24a>
   1883e:	ea94 0f0c 	teq	r4, ip
   18842:	d102      	bne.n	1884a <__aeabi_dmul+0x222>
   18844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   18848:	d113      	bne.n	18872 <__aeabi_dmul+0x24a>
   1884a:	ea95 0f0c 	teq	r5, ip
   1884e:	d105      	bne.n	1885c <__aeabi_dmul+0x234>
   18850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   18854:	bf1c      	itt	ne
   18856:	4610      	movne	r0, r2
   18858:	4619      	movne	r1, r3
   1885a:	d10a      	bne.n	18872 <__aeabi_dmul+0x24a>
   1885c:	ea81 0103 	eor.w	r1, r1, r3
   18860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1886c:	f04f 0000 	mov.w	r0, #0
   18870:	bd70      	pop	{r4, r5, r6, pc}
   18872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1887a:	bd70      	pop	{r4, r5, r6, pc}

0001887c <__aeabi_ddiv>:
   1887c:	b570      	push	{r4, r5, r6, lr}
   1887e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1888a:	bf1d      	ittte	ne
   1888c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18890:	ea94 0f0c 	teqne	r4, ip
   18894:	ea95 0f0c 	teqne	r5, ip
   18898:	f000 f8a7 	bleq	189ea <__aeabi_ddiv+0x16e>
   1889c:	eba4 0405 	sub.w	r4, r4, r5
   188a0:	ea81 0e03 	eor.w	lr, r1, r3
   188a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   188a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   188ac:	f000 8088 	beq.w	189c0 <__aeabi_ddiv+0x144>
   188b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   188b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   188b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   188bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   188c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   188c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   188c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   188cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   188d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   188d4:	429d      	cmp	r5, r3
   188d6:	bf08      	it	eq
   188d8:	4296      	cmpeq	r6, r2
   188da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   188de:	f504 7440 	add.w	r4, r4, #768	; 0x300
   188e2:	d202      	bcs.n	188ea <__aeabi_ddiv+0x6e>
   188e4:	085b      	lsrs	r3, r3, #1
   188e6:	ea4f 0232 	mov.w	r2, r2, rrx
   188ea:	1ab6      	subs	r6, r6, r2
   188ec:	eb65 0503 	sbc.w	r5, r5, r3
   188f0:	085b      	lsrs	r3, r3, #1
   188f2:	ea4f 0232 	mov.w	r2, r2, rrx
   188f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   188fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   188fe:	ebb6 0e02 	subs.w	lr, r6, r2
   18902:	eb75 0e03 	sbcs.w	lr, r5, r3
   18906:	bf22      	ittt	cs
   18908:	1ab6      	subcs	r6, r6, r2
   1890a:	4675      	movcs	r5, lr
   1890c:	ea40 000c 	orrcs.w	r0, r0, ip
   18910:	085b      	lsrs	r3, r3, #1
   18912:	ea4f 0232 	mov.w	r2, r2, rrx
   18916:	ebb6 0e02 	subs.w	lr, r6, r2
   1891a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1891e:	bf22      	ittt	cs
   18920:	1ab6      	subcs	r6, r6, r2
   18922:	4675      	movcs	r5, lr
   18924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18928:	085b      	lsrs	r3, r3, #1
   1892a:	ea4f 0232 	mov.w	r2, r2, rrx
   1892e:	ebb6 0e02 	subs.w	lr, r6, r2
   18932:	eb75 0e03 	sbcs.w	lr, r5, r3
   18936:	bf22      	ittt	cs
   18938:	1ab6      	subcs	r6, r6, r2
   1893a:	4675      	movcs	r5, lr
   1893c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18940:	085b      	lsrs	r3, r3, #1
   18942:	ea4f 0232 	mov.w	r2, r2, rrx
   18946:	ebb6 0e02 	subs.w	lr, r6, r2
   1894a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1894e:	bf22      	ittt	cs
   18950:	1ab6      	subcs	r6, r6, r2
   18952:	4675      	movcs	r5, lr
   18954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18958:	ea55 0e06 	orrs.w	lr, r5, r6
   1895c:	d018      	beq.n	18990 <__aeabi_ddiv+0x114>
   1895e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18966:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1896a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1896e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1897a:	d1c0      	bne.n	188fe <__aeabi_ddiv+0x82>
   1897c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18980:	d10b      	bne.n	1899a <__aeabi_ddiv+0x11e>
   18982:	ea41 0100 	orr.w	r1, r1, r0
   18986:	f04f 0000 	mov.w	r0, #0
   1898a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1898e:	e7b6      	b.n	188fe <__aeabi_ddiv+0x82>
   18990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18994:	bf04      	itt	eq
   18996:	4301      	orreq	r1, r0
   18998:	2000      	moveq	r0, #0
   1899a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1899e:	bf88      	it	hi
   189a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   189a4:	f63f aeaf 	bhi.w	18706 <__aeabi_dmul+0xde>
   189a8:	ebb5 0c03 	subs.w	ip, r5, r3
   189ac:	bf04      	itt	eq
   189ae:	ebb6 0c02 	subseq.w	ip, r6, r2
   189b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   189b6:	f150 0000 	adcs.w	r0, r0, #0
   189ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   189be:	bd70      	pop	{r4, r5, r6, pc}
   189c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   189c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   189c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   189cc:	bfc2      	ittt	gt
   189ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   189d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   189d6:	bd70      	popgt	{r4, r5, r6, pc}
   189d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   189dc:	f04f 0e00 	mov.w	lr, #0
   189e0:	3c01      	subs	r4, #1
   189e2:	e690      	b.n	18706 <__aeabi_dmul+0xde>
   189e4:	ea45 0e06 	orr.w	lr, r5, r6
   189e8:	e68d      	b.n	18706 <__aeabi_dmul+0xde>
   189ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   189ee:	ea94 0f0c 	teq	r4, ip
   189f2:	bf08      	it	eq
   189f4:	ea95 0f0c 	teqeq	r5, ip
   189f8:	f43f af3b 	beq.w	18872 <__aeabi_dmul+0x24a>
   189fc:	ea94 0f0c 	teq	r4, ip
   18a00:	d10a      	bne.n	18a18 <__aeabi_ddiv+0x19c>
   18a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18a06:	f47f af34 	bne.w	18872 <__aeabi_dmul+0x24a>
   18a0a:	ea95 0f0c 	teq	r5, ip
   18a0e:	f47f af25 	bne.w	1885c <__aeabi_dmul+0x234>
   18a12:	4610      	mov	r0, r2
   18a14:	4619      	mov	r1, r3
   18a16:	e72c      	b.n	18872 <__aeabi_dmul+0x24a>
   18a18:	ea95 0f0c 	teq	r5, ip
   18a1c:	d106      	bne.n	18a2c <__aeabi_ddiv+0x1b0>
   18a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18a22:	f43f aefd 	beq.w	18820 <__aeabi_dmul+0x1f8>
   18a26:	4610      	mov	r0, r2
   18a28:	4619      	mov	r1, r3
   18a2a:	e722      	b.n	18872 <__aeabi_dmul+0x24a>
   18a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18a30:	bf18      	it	ne
   18a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18a36:	f47f aec5 	bne.w	187c4 <__aeabi_dmul+0x19c>
   18a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18a3e:	f47f af0d 	bne.w	1885c <__aeabi_dmul+0x234>
   18a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18a46:	f47f aeeb 	bne.w	18820 <__aeabi_dmul+0x1f8>
   18a4a:	e712      	b.n	18872 <__aeabi_dmul+0x24a>

00018a4c <__aeabi_d2f>:
   18a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18a54:	bf24      	itt	cs
   18a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   18a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18a5e:	d90d      	bls.n	18a7c <__aeabi_d2f+0x30>
   18a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18a74:	bf08      	it	eq
   18a76:	f020 0001 	biceq.w	r0, r0, #1
   18a7a:	4770      	bx	lr
   18a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18a80:	d121      	bne.n	18ac6 <__aeabi_d2f+0x7a>
   18a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18a86:	bfbc      	itt	lt
   18a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18a8c:	4770      	bxlt	lr
   18a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18a96:	f1c2 0218 	rsb	r2, r2, #24
   18a9a:	f1c2 0c20 	rsb	ip, r2, #32
   18a9e:	fa10 f30c 	lsls.w	r3, r0, ip
   18aa2:	fa20 f002 	lsr.w	r0, r0, r2
   18aa6:	bf18      	it	ne
   18aa8:	f040 0001 	orrne.w	r0, r0, #1
   18aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
   18ab8:	ea40 000c 	orr.w	r0, r0, ip
   18abc:	fa23 f302 	lsr.w	r3, r3, r2
   18ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18ac4:	e7cc      	b.n	18a60 <__aeabi_d2f+0x14>
   18ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18aca:	d107      	bne.n	18adc <__aeabi_d2f+0x90>
   18acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18ad0:	bf1e      	ittt	ne
   18ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18ada:	4770      	bxne	lr
   18adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18ae8:	4770      	bx	lr
   18aea:	bf00      	nop

00018aec <__aeabi_frsub>:
   18aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18af0:	e002      	b.n	18af8 <__addsf3>
   18af2:	bf00      	nop

00018af4 <__aeabi_fsub>:
   18af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018af8 <__addsf3>:
   18af8:	0042      	lsls	r2, r0, #1
   18afa:	bf1f      	itttt	ne
   18afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18b00:	ea92 0f03 	teqne	r2, r3
   18b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18b0c:	d06a      	beq.n	18be4 <__addsf3+0xec>
   18b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   18b16:	bfc1      	itttt	gt
   18b18:	18d2      	addgt	r2, r2, r3
   18b1a:	4041      	eorgt	r1, r0
   18b1c:	4048      	eorgt	r0, r1
   18b1e:	4041      	eorgt	r1, r0
   18b20:	bfb8      	it	lt
   18b22:	425b      	neglt	r3, r3
   18b24:	2b19      	cmp	r3, #25
   18b26:	bf88      	it	hi
   18b28:	4770      	bxhi	lr
   18b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18b36:	bf18      	it	ne
   18b38:	4240      	negne	r0, r0
   18b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18b46:	bf18      	it	ne
   18b48:	4249      	negne	r1, r1
   18b4a:	ea92 0f03 	teq	r2, r3
   18b4e:	d03f      	beq.n	18bd0 <__addsf3+0xd8>
   18b50:	f1a2 0201 	sub.w	r2, r2, #1
   18b54:	fa41 fc03 	asr.w	ip, r1, r3
   18b58:	eb10 000c 	adds.w	r0, r0, ip
   18b5c:	f1c3 0320 	rsb	r3, r3, #32
   18b60:	fa01 f103 	lsl.w	r1, r1, r3
   18b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18b68:	d502      	bpl.n	18b70 <__addsf3+0x78>
   18b6a:	4249      	negs	r1, r1
   18b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18b74:	d313      	bcc.n	18b9e <__addsf3+0xa6>
   18b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18b7a:	d306      	bcc.n	18b8a <__addsf3+0x92>
   18b7c:	0840      	lsrs	r0, r0, #1
   18b7e:	ea4f 0131 	mov.w	r1, r1, rrx
   18b82:	f102 0201 	add.w	r2, r2, #1
   18b86:	2afe      	cmp	r2, #254	; 0xfe
   18b88:	d251      	bcs.n	18c2e <__addsf3+0x136>
   18b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18b92:	bf08      	it	eq
   18b94:	f020 0001 	biceq.w	r0, r0, #1
   18b98:	ea40 0003 	orr.w	r0, r0, r3
   18b9c:	4770      	bx	lr
   18b9e:	0049      	lsls	r1, r1, #1
   18ba0:	eb40 0000 	adc.w	r0, r0, r0
   18ba4:	3a01      	subs	r2, #1
   18ba6:	bf28      	it	cs
   18ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   18bac:	d2ed      	bcs.n	18b8a <__addsf3+0x92>
   18bae:	fab0 fc80 	clz	ip, r0
   18bb2:	f1ac 0c08 	sub.w	ip, ip, #8
   18bb6:	ebb2 020c 	subs.w	r2, r2, ip
   18bba:	fa00 f00c 	lsl.w	r0, r0, ip
   18bbe:	bfaa      	itet	ge
   18bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18bc4:	4252      	neglt	r2, r2
   18bc6:	4318      	orrge	r0, r3
   18bc8:	bfbc      	itt	lt
   18bca:	40d0      	lsrlt	r0, r2
   18bcc:	4318      	orrlt	r0, r3
   18bce:	4770      	bx	lr
   18bd0:	f092 0f00 	teq	r2, #0
   18bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18bd8:	bf06      	itte	eq
   18bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18bde:	3201      	addeq	r2, #1
   18be0:	3b01      	subne	r3, #1
   18be2:	e7b5      	b.n	18b50 <__addsf3+0x58>
   18be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18bec:	bf18      	it	ne
   18bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18bf2:	d021      	beq.n	18c38 <__addsf3+0x140>
   18bf4:	ea92 0f03 	teq	r2, r3
   18bf8:	d004      	beq.n	18c04 <__addsf3+0x10c>
   18bfa:	f092 0f00 	teq	r2, #0
   18bfe:	bf08      	it	eq
   18c00:	4608      	moveq	r0, r1
   18c02:	4770      	bx	lr
   18c04:	ea90 0f01 	teq	r0, r1
   18c08:	bf1c      	itt	ne
   18c0a:	2000      	movne	r0, #0
   18c0c:	4770      	bxne	lr
   18c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18c12:	d104      	bne.n	18c1e <__addsf3+0x126>
   18c14:	0040      	lsls	r0, r0, #1
   18c16:	bf28      	it	cs
   18c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18c1c:	4770      	bx	lr
   18c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18c22:	bf3c      	itt	cc
   18c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18c28:	4770      	bxcc	lr
   18c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18c36:	4770      	bx	lr
   18c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18c3c:	bf16      	itet	ne
   18c3e:	4608      	movne	r0, r1
   18c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18c44:	4601      	movne	r1, r0
   18c46:	0242      	lsls	r2, r0, #9
   18c48:	bf06      	itte	eq
   18c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18c4e:	ea90 0f01 	teqeq	r0, r1
   18c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18c56:	4770      	bx	lr

00018c58 <__aeabi_ui2f>:
   18c58:	f04f 0300 	mov.w	r3, #0
   18c5c:	e004      	b.n	18c68 <__aeabi_i2f+0x8>
   18c5e:	bf00      	nop

00018c60 <__aeabi_i2f>:
   18c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18c64:	bf48      	it	mi
   18c66:	4240      	negmi	r0, r0
   18c68:	ea5f 0c00 	movs.w	ip, r0
   18c6c:	bf08      	it	eq
   18c6e:	4770      	bxeq	lr
   18c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18c74:	4601      	mov	r1, r0
   18c76:	f04f 0000 	mov.w	r0, #0
   18c7a:	e01c      	b.n	18cb6 <__aeabi_l2f+0x2a>

00018c7c <__aeabi_ul2f>:
   18c7c:	ea50 0201 	orrs.w	r2, r0, r1
   18c80:	bf08      	it	eq
   18c82:	4770      	bxeq	lr
   18c84:	f04f 0300 	mov.w	r3, #0
   18c88:	e00a      	b.n	18ca0 <__aeabi_l2f+0x14>
   18c8a:	bf00      	nop

00018c8c <__aeabi_l2f>:
   18c8c:	ea50 0201 	orrs.w	r2, r0, r1
   18c90:	bf08      	it	eq
   18c92:	4770      	bxeq	lr
   18c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18c98:	d502      	bpl.n	18ca0 <__aeabi_l2f+0x14>
   18c9a:	4240      	negs	r0, r0
   18c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18ca0:	ea5f 0c01 	movs.w	ip, r1
   18ca4:	bf02      	ittt	eq
   18ca6:	4684      	moveq	ip, r0
   18ca8:	4601      	moveq	r1, r0
   18caa:	2000      	moveq	r0, #0
   18cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18cb0:	bf08      	it	eq
   18cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18cba:	fabc f28c 	clz	r2, ip
   18cbe:	3a08      	subs	r2, #8
   18cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18cc4:	db10      	blt.n	18ce8 <__aeabi_l2f+0x5c>
   18cc6:	fa01 fc02 	lsl.w	ip, r1, r2
   18cca:	4463      	add	r3, ip
   18ccc:	fa00 fc02 	lsl.w	ip, r0, r2
   18cd0:	f1c2 0220 	rsb	r2, r2, #32
   18cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18cd8:	fa20 f202 	lsr.w	r2, r0, r2
   18cdc:	eb43 0002 	adc.w	r0, r3, r2
   18ce0:	bf08      	it	eq
   18ce2:	f020 0001 	biceq.w	r0, r0, #1
   18ce6:	4770      	bx	lr
   18ce8:	f102 0220 	add.w	r2, r2, #32
   18cec:	fa01 fc02 	lsl.w	ip, r1, r2
   18cf0:	f1c2 0220 	rsb	r2, r2, #32
   18cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18cf8:	fa21 f202 	lsr.w	r2, r1, r2
   18cfc:	eb43 0002 	adc.w	r0, r3, r2
   18d00:	bf08      	it	eq
   18d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18d06:	4770      	bx	lr

00018d08 <__aeabi_uldivmod>:
   18d08:	b953      	cbnz	r3, 18d20 <__aeabi_uldivmod+0x18>
   18d0a:	b94a      	cbnz	r2, 18d20 <__aeabi_uldivmod+0x18>
   18d0c:	2900      	cmp	r1, #0
   18d0e:	bf08      	it	eq
   18d10:	2800      	cmpeq	r0, #0
   18d12:	bf1c      	itt	ne
   18d14:	f04f 31ff 	movne.w	r1, #4294967295
   18d18:	f04f 30ff 	movne.w	r0, #4294967295
   18d1c:	f000 b80c 	b.w	18d38 <__aeabi_idiv0>
   18d20:	f1ad 0c08 	sub.w	ip, sp, #8
   18d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18d28:	f000 f808 	bl	18d3c <__udivmoddi4>
   18d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d34:	b004      	add	sp, #16
   18d36:	4770      	bx	lr

00018d38 <__aeabi_idiv0>:
   18d38:	4770      	bx	lr
   18d3a:	bf00      	nop

00018d3c <__udivmoddi4>:
   18d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18d40:	4686      	mov	lr, r0
   18d42:	468c      	mov	ip, r1
   18d44:	4608      	mov	r0, r1
   18d46:	9e08      	ldr	r6, [sp, #32]
   18d48:	4615      	mov	r5, r2
   18d4a:	4674      	mov	r4, lr
   18d4c:	4619      	mov	r1, r3
   18d4e:	2b00      	cmp	r3, #0
   18d50:	f040 80c1 	bne.w	18ed6 <__udivmoddi4+0x19a>
   18d54:	4285      	cmp	r5, r0
   18d56:	fab2 f282 	clz	r2, r2
   18d5a:	d945      	bls.n	18de8 <__udivmoddi4+0xac>
   18d5c:	b14a      	cbz	r2, 18d72 <__udivmoddi4+0x36>
   18d5e:	f1c2 0320 	rsb	r3, r2, #32
   18d62:	fa00 fc02 	lsl.w	ip, r0, r2
   18d66:	4095      	lsls	r5, r2
   18d68:	4094      	lsls	r4, r2
   18d6a:	fa2e f303 	lsr.w	r3, lr, r3
   18d6e:	ea43 0c0c 	orr.w	ip, r3, ip
   18d72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18d76:	b2a8      	uxth	r0, r5
   18d78:	0c23      	lsrs	r3, r4, #16
   18d7a:	fbbc f8fe 	udiv	r8, ip, lr
   18d7e:	fb0e cc18 	mls	ip, lr, r8, ip
   18d82:	fb08 f900 	mul.w	r9, r8, r0
   18d86:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   18d8a:	4599      	cmp	r9, r3
   18d8c:	d928      	bls.n	18de0 <__udivmoddi4+0xa4>
   18d8e:	18eb      	adds	r3, r5, r3
   18d90:	f108 37ff 	add.w	r7, r8, #4294967295
   18d94:	d204      	bcs.n	18da0 <__udivmoddi4+0x64>
   18d96:	4599      	cmp	r9, r3
   18d98:	d902      	bls.n	18da0 <__udivmoddi4+0x64>
   18d9a:	f1a8 0702 	sub.w	r7, r8, #2
   18d9e:	442b      	add	r3, r5
   18da0:	eba3 0309 	sub.w	r3, r3, r9
   18da4:	b2a4      	uxth	r4, r4
   18da6:	fbb3 fcfe 	udiv	ip, r3, lr
   18daa:	fb0e 331c 	mls	r3, lr, ip, r3
   18dae:	fb0c f000 	mul.w	r0, ip, r0
   18db2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   18db6:	42a0      	cmp	r0, r4
   18db8:	d914      	bls.n	18de4 <__udivmoddi4+0xa8>
   18dba:	192c      	adds	r4, r5, r4
   18dbc:	f10c 33ff 	add.w	r3, ip, #4294967295
   18dc0:	d204      	bcs.n	18dcc <__udivmoddi4+0x90>
   18dc2:	42a0      	cmp	r0, r4
   18dc4:	d902      	bls.n	18dcc <__udivmoddi4+0x90>
   18dc6:	f1ac 0302 	sub.w	r3, ip, #2
   18dca:	442c      	add	r4, r5
   18dcc:	1a24      	subs	r4, r4, r0
   18dce:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   18dd2:	b11e      	cbz	r6, 18ddc <__udivmoddi4+0xa0>
   18dd4:	40d4      	lsrs	r4, r2
   18dd6:	2300      	movs	r3, #0
   18dd8:	6034      	str	r4, [r6, #0]
   18dda:	6073      	str	r3, [r6, #4]
   18ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18de0:	4647      	mov	r7, r8
   18de2:	e7dd      	b.n	18da0 <__udivmoddi4+0x64>
   18de4:	4663      	mov	r3, ip
   18de6:	e7f1      	b.n	18dcc <__udivmoddi4+0x90>
   18de8:	bb92      	cbnz	r2, 18e50 <__udivmoddi4+0x114>
   18dea:	1b43      	subs	r3, r0, r5
   18dec:	2101      	movs	r1, #1
   18dee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18df2:	b2af      	uxth	r7, r5
   18df4:	0c20      	lsrs	r0, r4, #16
   18df6:	fbb3 fcfe 	udiv	ip, r3, lr
   18dfa:	fb0e 331c 	mls	r3, lr, ip, r3
   18dfe:	fb0c f807 	mul.w	r8, ip, r7
   18e02:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   18e06:	4598      	cmp	r8, r3
   18e08:	d961      	bls.n	18ece <__udivmoddi4+0x192>
   18e0a:	18eb      	adds	r3, r5, r3
   18e0c:	f10c 30ff 	add.w	r0, ip, #4294967295
   18e10:	d204      	bcs.n	18e1c <__udivmoddi4+0xe0>
   18e12:	4598      	cmp	r8, r3
   18e14:	d902      	bls.n	18e1c <__udivmoddi4+0xe0>
   18e16:	f1ac 0002 	sub.w	r0, ip, #2
   18e1a:	442b      	add	r3, r5
   18e1c:	eba3 0308 	sub.w	r3, r3, r8
   18e20:	b2a4      	uxth	r4, r4
   18e22:	fbb3 fcfe 	udiv	ip, r3, lr
   18e26:	fb0e 331c 	mls	r3, lr, ip, r3
   18e2a:	fb0c f707 	mul.w	r7, ip, r7
   18e2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   18e32:	42a7      	cmp	r7, r4
   18e34:	d94d      	bls.n	18ed2 <__udivmoddi4+0x196>
   18e36:	192c      	adds	r4, r5, r4
   18e38:	f10c 33ff 	add.w	r3, ip, #4294967295
   18e3c:	d204      	bcs.n	18e48 <__udivmoddi4+0x10c>
   18e3e:	42a7      	cmp	r7, r4
   18e40:	d902      	bls.n	18e48 <__udivmoddi4+0x10c>
   18e42:	f1ac 0302 	sub.w	r3, ip, #2
   18e46:	442c      	add	r4, r5
   18e48:	1be4      	subs	r4, r4, r7
   18e4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   18e4e:	e7c0      	b.n	18dd2 <__udivmoddi4+0x96>
   18e50:	f1c2 0320 	rsb	r3, r2, #32
   18e54:	4095      	lsls	r5, r2
   18e56:	4094      	lsls	r4, r2
   18e58:	fa20 f103 	lsr.w	r1, r0, r3
   18e5c:	fa2e f303 	lsr.w	r3, lr, r3
   18e60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18e64:	4090      	lsls	r0, r2
   18e66:	b2af      	uxth	r7, r5
   18e68:	4303      	orrs	r3, r0
   18e6a:	fbb1 fcfe 	udiv	ip, r1, lr
   18e6e:	fb0e 101c 	mls	r0, lr, ip, r1
   18e72:	0c19      	lsrs	r1, r3, #16
   18e74:	fb0c f807 	mul.w	r8, ip, r7
   18e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   18e7c:	4588      	cmp	r8, r1
   18e7e:	d922      	bls.n	18ec6 <__udivmoddi4+0x18a>
   18e80:	1869      	adds	r1, r5, r1
   18e82:	f10c 30ff 	add.w	r0, ip, #4294967295
   18e86:	d204      	bcs.n	18e92 <__udivmoddi4+0x156>
   18e88:	4588      	cmp	r8, r1
   18e8a:	d902      	bls.n	18e92 <__udivmoddi4+0x156>
   18e8c:	f1ac 0002 	sub.w	r0, ip, #2
   18e90:	4429      	add	r1, r5
   18e92:	eba1 0108 	sub.w	r1, r1, r8
   18e96:	b29b      	uxth	r3, r3
   18e98:	fbb1 fcfe 	udiv	ip, r1, lr
   18e9c:	fb0e 111c 	mls	r1, lr, ip, r1
   18ea0:	fb0c f707 	mul.w	r7, ip, r7
   18ea4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   18ea8:	429f      	cmp	r7, r3
   18eaa:	d90e      	bls.n	18eca <__udivmoddi4+0x18e>
   18eac:	18eb      	adds	r3, r5, r3
   18eae:	f10c 31ff 	add.w	r1, ip, #4294967295
   18eb2:	d204      	bcs.n	18ebe <__udivmoddi4+0x182>
   18eb4:	429f      	cmp	r7, r3
   18eb6:	d902      	bls.n	18ebe <__udivmoddi4+0x182>
   18eb8:	f1ac 0102 	sub.w	r1, ip, #2
   18ebc:	442b      	add	r3, r5
   18ebe:	1bdb      	subs	r3, r3, r7
   18ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   18ec4:	e793      	b.n	18dee <__udivmoddi4+0xb2>
   18ec6:	4660      	mov	r0, ip
   18ec8:	e7e3      	b.n	18e92 <__udivmoddi4+0x156>
   18eca:	4661      	mov	r1, ip
   18ecc:	e7f7      	b.n	18ebe <__udivmoddi4+0x182>
   18ece:	4660      	mov	r0, ip
   18ed0:	e7a4      	b.n	18e1c <__udivmoddi4+0xe0>
   18ed2:	4663      	mov	r3, ip
   18ed4:	e7b8      	b.n	18e48 <__udivmoddi4+0x10c>
   18ed6:	4283      	cmp	r3, r0
   18ed8:	d906      	bls.n	18ee8 <__udivmoddi4+0x1ac>
   18eda:	b916      	cbnz	r6, 18ee2 <__udivmoddi4+0x1a6>
   18edc:	2100      	movs	r1, #0
   18ede:	4608      	mov	r0, r1
   18ee0:	e77c      	b.n	18ddc <__udivmoddi4+0xa0>
   18ee2:	e9c6 e000 	strd	lr, r0, [r6]
   18ee6:	e7f9      	b.n	18edc <__udivmoddi4+0x1a0>
   18ee8:	fab3 f783 	clz	r7, r3
   18eec:	b98f      	cbnz	r7, 18f12 <__udivmoddi4+0x1d6>
   18eee:	4283      	cmp	r3, r0
   18ef0:	d301      	bcc.n	18ef6 <__udivmoddi4+0x1ba>
   18ef2:	4572      	cmp	r2, lr
   18ef4:	d808      	bhi.n	18f08 <__udivmoddi4+0x1cc>
   18ef6:	ebbe 0402 	subs.w	r4, lr, r2
   18efa:	eb60 0303 	sbc.w	r3, r0, r3
   18efe:	2001      	movs	r0, #1
   18f00:	469c      	mov	ip, r3
   18f02:	b91e      	cbnz	r6, 18f0c <__udivmoddi4+0x1d0>
   18f04:	2100      	movs	r1, #0
   18f06:	e769      	b.n	18ddc <__udivmoddi4+0xa0>
   18f08:	4638      	mov	r0, r7
   18f0a:	e7fa      	b.n	18f02 <__udivmoddi4+0x1c6>
   18f0c:	e9c6 4c00 	strd	r4, ip, [r6]
   18f10:	e7f8      	b.n	18f04 <__udivmoddi4+0x1c8>
   18f12:	f1c7 0c20 	rsb	ip, r7, #32
   18f16:	40bb      	lsls	r3, r7
   18f18:	fa0e f507 	lsl.w	r5, lr, r7
   18f1c:	fa22 f40c 	lsr.w	r4, r2, ip
   18f20:	fa2e f10c 	lsr.w	r1, lr, ip
   18f24:	40ba      	lsls	r2, r7
   18f26:	431c      	orrs	r4, r3
   18f28:	fa20 f30c 	lsr.w	r3, r0, ip
   18f2c:	40b8      	lsls	r0, r7
   18f2e:	ea4f 4914 	mov.w	r9, r4, lsr #16
   18f32:	4301      	orrs	r1, r0
   18f34:	fa1f fe84 	uxth.w	lr, r4
   18f38:	fbb3 f8f9 	udiv	r8, r3, r9
   18f3c:	fb09 3018 	mls	r0, r9, r8, r3
   18f40:	0c0b      	lsrs	r3, r1, #16
   18f42:	fb08 fa0e 	mul.w	sl, r8, lr
   18f46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   18f4a:	459a      	cmp	sl, r3
   18f4c:	d940      	bls.n	18fd0 <__udivmoddi4+0x294>
   18f4e:	18e3      	adds	r3, r4, r3
   18f50:	f108 30ff 	add.w	r0, r8, #4294967295
   18f54:	d204      	bcs.n	18f60 <__udivmoddi4+0x224>
   18f56:	459a      	cmp	sl, r3
   18f58:	d902      	bls.n	18f60 <__udivmoddi4+0x224>
   18f5a:	f1a8 0002 	sub.w	r0, r8, #2
   18f5e:	4423      	add	r3, r4
   18f60:	eba3 030a 	sub.w	r3, r3, sl
   18f64:	b289      	uxth	r1, r1
   18f66:	fbb3 f8f9 	udiv	r8, r3, r9
   18f6a:	fb09 3318 	mls	r3, r9, r8, r3
   18f6e:	fb08 fe0e 	mul.w	lr, r8, lr
   18f72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   18f76:	458e      	cmp	lr, r1
   18f78:	d92c      	bls.n	18fd4 <__udivmoddi4+0x298>
   18f7a:	1861      	adds	r1, r4, r1
   18f7c:	f108 33ff 	add.w	r3, r8, #4294967295
   18f80:	d204      	bcs.n	18f8c <__udivmoddi4+0x250>
   18f82:	458e      	cmp	lr, r1
   18f84:	d902      	bls.n	18f8c <__udivmoddi4+0x250>
   18f86:	f1a8 0302 	sub.w	r3, r8, #2
   18f8a:	4421      	add	r1, r4
   18f8c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   18f90:	eba1 010e 	sub.w	r1, r1, lr
   18f94:	fba0 9802 	umull	r9, r8, r0, r2
   18f98:	4541      	cmp	r1, r8
   18f9a:	46ce      	mov	lr, r9
   18f9c:	4643      	mov	r3, r8
   18f9e:	d302      	bcc.n	18fa6 <__udivmoddi4+0x26a>
   18fa0:	d106      	bne.n	18fb0 <__udivmoddi4+0x274>
   18fa2:	454d      	cmp	r5, r9
   18fa4:	d204      	bcs.n	18fb0 <__udivmoddi4+0x274>
   18fa6:	3801      	subs	r0, #1
   18fa8:	ebb9 0e02 	subs.w	lr, r9, r2
   18fac:	eb68 0304 	sbc.w	r3, r8, r4
   18fb0:	2e00      	cmp	r6, #0
   18fb2:	d0a7      	beq.n	18f04 <__udivmoddi4+0x1c8>
   18fb4:	ebb5 020e 	subs.w	r2, r5, lr
   18fb8:	eb61 0103 	sbc.w	r1, r1, r3
   18fbc:	fa01 fc0c 	lsl.w	ip, r1, ip
   18fc0:	fa22 f307 	lsr.w	r3, r2, r7
   18fc4:	40f9      	lsrs	r1, r7
   18fc6:	ea4c 0303 	orr.w	r3, ip, r3
   18fca:	e9c6 3100 	strd	r3, r1, [r6]
   18fce:	e799      	b.n	18f04 <__udivmoddi4+0x1c8>
   18fd0:	4640      	mov	r0, r8
   18fd2:	e7c5      	b.n	18f60 <__udivmoddi4+0x224>
   18fd4:	4643      	mov	r3, r8
   18fd6:	e7d9      	b.n	18f8c <__udivmoddi4+0x250>

00018fd8 <strcmp>:
   18fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
   18fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
   18fe0:	2a01      	cmp	r2, #1
   18fe2:	bf28      	it	cs
   18fe4:	429a      	cmpcs	r2, r3
   18fe6:	d0f7      	beq.n	18fd8 <strcmp>
   18fe8:	1ad0      	subs	r0, r2, r3
   18fea:	4770      	bx	lr

00018fec <strlen>:
   18fec:	4603      	mov	r3, r0
   18fee:	f813 2b01 	ldrb.w	r2, [r3], #1
   18ff2:	2a00      	cmp	r2, #0
   18ff4:	d1fb      	bne.n	18fee <strlen+0x2>
   18ff6:	1a18      	subs	r0, r3, r0
   18ff8:	3801      	subs	r0, #1
   18ffa:	4770      	bx	lr
   18ffc:	0000      	movs	r0, r0
	...

00019000 <parse_edrx>:

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   19000:	2300      	movs	r3, #0
{
   19002:	b5f0      	push	{r4, r5, r6, r7, lr}
   19004:	b08d      	sub	sp, #52	; 0x34
   19006:	af00      	add	r7, sp, #0
	struct at_param_list resp_list = {0};
   19008:	e9c7 3304 	strd	r3, r3, [r7, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1900c:	2304      	movs	r3, #4
{
   1900e:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   19010:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
   19012:	607b      	str	r3, [r7, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   19014:	2800      	cmp	r0, #0
   19016:	f000 80d5 	beq.w	191c4 <parse_edrx+0x1c4>
   1901a:	2900      	cmp	r1, #0
   1901c:	f000 80d2 	beq.w	191c4 <parse_edrx+0x1c4>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   19020:	2106      	movs	r1, #6
   19022:	f107 0010 	add.w	r0, r7, #16
   19026:	f00e f816 	bl	27056 <at_params_list_init>
	if (err) {
   1902a:	4604      	mov	r4, r0
   1902c:	b190      	cbz	r0, 19054 <parse_edrx+0x54>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1902e:	466d      	mov	r5, sp
   19030:	b088      	sub	sp, #32
   19032:	466a      	mov	r2, sp
   19034:	4b68      	ldr	r3, [pc, #416]	; (191d8 <parse_edrx+0x1d8>)
   19036:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1903a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1903e:	2303      	movs	r3, #3
   19040:	4866      	ldr	r0, [pc, #408]	; (191dc <parse_edrx+0x1dc>)
   19042:	f842 3f10 	str.w	r3, [r2, #16]!
   19046:	f00e f946 	bl	272d6 <z_log_msg_static_create.constprop.0>
   1904a:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1904c:	4620      	mov	r0, r4
   1904e:	3734      	adds	r7, #52	; 0x34
   19050:	46bd      	mov	sp, r7
   19052:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   19054:	4601      	mov	r1, r0
   19056:	f107 0210 	add.w	r2, r7, #16
   1905a:	4630      	mov	r0, r6
   1905c:	f00d ffe2 	bl	27024 <at_parser_params_from_str>
	if (err) {
   19060:	4604      	mov	r4, r0
   19062:	b198      	cbz	r0, 1908c <parse_edrx+0x8c>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   19064:	466d      	mov	r5, sp
   19066:	b088      	sub	sp, #32
   19068:	466a      	mov	r2, sp
   1906a:	4b5d      	ldr	r3, [pc, #372]	; (191e0 <parse_edrx+0x1e0>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1906c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   19070:	2303      	movs	r3, #3
   19072:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19076:	4859      	ldr	r0, [pc, #356]	; (191dc <parse_edrx+0x1dc>)
   19078:	f842 3f10 	str.w	r3, [r2, #16]!
   1907c:	f00e f92b 	bl	272d6 <z_log_msg_static_create.constprop.0>
   19080:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   19082:	f107 0010 	add.w	r0, r7, #16
   19086:	f00e f810 	bl	270aa <at_params_list_free>
	return err;
   1908a:	e7df      	b.n	1904c <parse_edrx+0x4c>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1908c:	2103      	movs	r1, #3
   1908e:	1d3b      	adds	r3, r7, #4
   19090:	f107 0208 	add.w	r2, r7, #8
   19094:	f107 0010 	add.w	r0, r7, #16
   19098:	f00e f8e5 	bl	27266 <at_params_string_get>
	if (err) {
   1909c:	4604      	mov	r4, r0
   1909e:	b120      	cbz	r0, 190aa <parse_edrx+0xaa>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   190a0:	466d      	mov	r5, sp
   190a2:	b088      	sub	sp, #32
   190a4:	466a      	mov	r2, sp
   190a6:	4b4f      	ldr	r3, [pc, #316]	; (191e4 <parse_edrx+0x1e4>)
   190a8:	e7e0      	b.n	1906c <parse_edrx+0x6c>
	tmp_buf[len] = '\0';
   190aa:	687b      	ldr	r3, [r7, #4]
	idx = strtoul(tmp_buf, NULL, 2);
   190ac:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   190ae:	3330      	adds	r3, #48	; 0x30
   190b0:	443b      	add	r3, r7
   190b2:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
   190b6:	2202      	movs	r2, #2
   190b8:	f107 0008 	add.w	r0, r7, #8
   190bc:	f00c f962 	bl	25384 <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   190c0:	463a      	mov	r2, r7
   190c2:	2101      	movs	r1, #1
	idx = strtoul(tmp_buf, NULL, 2);
   190c4:	b2c6      	uxtb	r6, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   190c6:	f107 0010 	add.w	r0, r7, #16
   190ca:	f00e f8a0 	bl	2720e <at_params_int_get>
	if (err) {
   190ce:	4604      	mov	r4, r0
   190d0:	b120      	cbz	r0, 190dc <parse_edrx+0xdc>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   190d2:	466d      	mov	r5, sp
   190d4:	b088      	sub	sp, #32
   190d6:	466a      	mov	r2, sp
   190d8:	4b43      	ldr	r3, [pc, #268]	; (191e8 <parse_edrx+0x1e8>)
   190da:	e7c7      	b.n	1906c <parse_edrx+0x6c>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   190dc:	683b      	ldr	r3, [r7, #0]
   190de:	2b04      	cmp	r3, #4
   190e0:	d028      	beq.n	19134 <parse_edrx+0x134>
   190e2:	2b05      	cmp	r3, #5
   190e4:	d00e      	beq.n	19104 <parse_edrx+0x104>
   190e6:	7028      	strb	r0, [r5, #0]
		LOG_WRN("Active LTE mode could not be determined");
   190e8:	4b40      	ldr	r3, [pc, #256]	; (191ec <parse_edrx+0x1ec>)
   190ea:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   190ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   190f0:	2302      	movs	r3, #2
   190f2:	483a      	ldr	r0, [pc, #232]	; (191dc <parse_edrx+0x1dc>)
   190f4:	62bb      	str	r3, [r7, #40]	; 0x28
   190f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   190fa:	f00e f8ec 	bl	272d6 <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   190fe:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   19102:	e7be      	b.n	19082 <parse_edrx+0x82>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19104:	2309      	movs	r3, #9
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   19106:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19108:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1910a:	d936      	bls.n	1917a <parse_edrx+0x17a>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1910c:	466c      	mov	r4, sp
   1910e:	b088      	sub	sp, #32
   19110:	466a      	mov	r2, sp
   19112:	4b37      	ldr	r3, [pc, #220]	; (191f0 <parse_edrx+0x1f0>)
   19114:	6153      	str	r3, [r2, #20]
   19116:	f06f 0315 	mvn.w	r3, #21
   1911a:	6193      	str	r3, [r2, #24]
   1911c:	2303      	movs	r3, #3
   1911e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19122:	482e      	ldr	r0, [pc, #184]	; (191dc <parse_edrx+0x1dc>)
   19124:	f842 3f10 	str.w	r3, [r2, #16]!
   19128:	f00e f8d5 	bl	272d6 <z_log_msg_static_create.constprop.0>
   1912c:	46a5      	mov	sp, r4
		return -ENOTCONN;
   1912e:	f06f 0415 	mvn.w	r4, #21
   19132:	e7a6      	b.n	19082 <parse_edrx+0x82>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19134:	2307      	movs	r3, #7
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   19136:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19138:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1913a:	d8e7      	bhi.n	1910c <parse_edrx+0x10c>
		multiplier = edrx_lookup_ltem[idx];
   1913c:	4b2d      	ldr	r3, [pc, #180]	; (191f4 <parse_edrx+0x1f4>)
   1913e:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
		*ptw_multiplier = 1.28;
   19142:	4e2d      	ldr	r6, [pc, #180]	; (191f8 <parse_edrx+0x1f8>)
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   19144:	b1f0      	cbz	r0, 19184 <parse_edrx+0x184>
   19146:	f7ff fa05 	bl	18554 <__aeabi_i2d>
   1914a:	a321      	add	r3, pc, #132	; (adr r3, 191d0 <parse_edrx+0x1d0>)
   1914c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19150:	f7ff fa6a 	bl	18628 <__aeabi_dmul>
   19154:	f7ff fc7a 	bl	18a4c <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   19158:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1915a:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1915c:	187b      	adds	r3, r7, r1
   1915e:	f107 0208 	add.w	r2, r7, #8
   19162:	f107 0010 	add.w	r0, r7, #16
	len = sizeof(tmp_buf) - 1;
   19166:	6079      	str	r1, [r7, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   19168:	f00e f87d 	bl	27266 <at_params_string_get>
	if (err) {
   1916c:	4604      	mov	r4, r0
   1916e:	b158      	cbz	r0, 19188 <parse_edrx+0x188>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   19170:	466d      	mov	r5, sp
   19172:	b088      	sub	sp, #32
   19174:	466a      	mov	r2, sp
   19176:	4b21      	ldr	r3, [pc, #132]	; (191fc <parse_edrx+0x1fc>)
   19178:	e778      	b.n	1906c <parse_edrx+0x6c>
		multiplier = edrx_lookup_nbiot[idx];
   1917a:	4b21      	ldr	r3, [pc, #132]	; (19200 <parse_edrx+0x200>)
   1917c:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
		*ptw_multiplier = 2.56;
   19180:	4e20      	ldr	r6, [pc, #128]	; (19204 <parse_edrx+0x204>)
		break;
   19182:	e7df      	b.n	19144 <parse_edrx+0x144>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   19184:	4820      	ldr	r0, [pc, #128]	; (19208 <parse_edrx+0x208>)
   19186:	e7e7      	b.n	19158 <parse_edrx+0x158>
	tmp_buf[len] = '\0';
   19188:	687b      	ldr	r3, [r7, #4]
	idx = strtoul(tmp_buf, NULL, 2);
   1918a:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   1918c:	3330      	adds	r3, #48	; 0x30
   1918e:	443b      	add	r3, r7
   19190:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
   19194:	2202      	movs	r2, #2
   19196:	f107 0008 	add.w	r0, r7, #8
   1919a:	f00c f8f3 	bl	25384 <strtoul>
   1919e:	b2c0      	uxtb	r0, r0
	if (idx > 15) {
   191a0:	280f      	cmp	r0, #15
   191a2:	d906      	bls.n	191b2 <parse_edrx+0x1b2>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   191a4:	466c      	mov	r4, sp
   191a6:	b088      	sub	sp, #32
   191a8:	466a      	mov	r2, sp
   191aa:	4b18      	ldr	r3, [pc, #96]	; (1920c <parse_edrx+0x20c>)
   191ac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   191b0:	e7b4      	b.n	1911c <parse_edrx+0x11c>
	idx += 1;
   191b2:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   191b4:	b2c0      	uxtb	r0, r0
   191b6:	f7ff fd53 	bl	18c60 <__aeabi_i2f>
   191ba:	4631      	mov	r1, r6
   191bc:	f7fe ffc4 	bl	18148 <__aeabi_fmul>
   191c0:	60a8      	str	r0, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   191c2:	e75e      	b.n	19082 <parse_edrx+0x82>
		return -EINVAL;
   191c4:	f06f 0415 	mvn.w	r4, #21
   191c8:	e740      	b.n	1904c <parse_edrx+0x4c>
   191ca:	bf00      	nop
   191cc:	f3af 8000 	nop.w
   191d0:	47ae147b 	.word	0x47ae147b
   191d4:	40247ae1 	.word	0x40247ae1
   191d8:	0002aad9 	.word	0x0002aad9
   191dc:	00029074 	.word	0x00029074
   191e0:	0002ab02 	.word	0x0002ab02
   191e4:	0002ab2e 	.word	0x0002ab2e
   191e8:	0002ab5a 	.word	0x0002ab5a
   191ec:	0002ab7c 	.word	0x0002ab7c
   191f0:	0002aba4 	.word	0x0002aba4
   191f4:	000297f4 	.word	0x000297f4
   191f8:	3fa3d70a 	.word	0x3fa3d70a
   191fc:	0002abc8 	.word	0x0002abc8
   19200:	000297d4 	.word	0x000297d4
   19204:	4023d70a 	.word	0x4023d70a
   19208:	40a3d70a 	.word	0x40a3d70a
   1920c:	0002abf3 	.word	0x0002abf3

00019210 <my_expiry_function>:
void my_expiry_function(struct k_timer *timer_id)
{
	valve_status = VALVE_CLOSED;
	gpio_pin_set(gpio_dev, WATER_VALVE, CLOSE_VALVE);
}

   19210:	2200      	movs	r2, #0
   19212:	4b03      	ldr	r3, [pc, #12]	; (19220 <my_expiry_function+0x10>)
/************************************************************************
   19214:	2110      	movs	r1, #16

   19216:	701a      	strb	r2, [r3, #0]
/************************************************************************
   19218:	4b02      	ldr	r3, [pc, #8]	; (19224 <my_expiry_function+0x14>)
   1921a:	6818      	ldr	r0, [r3, #0]
   1921c:	f00c bb00 	b.w	25820 <gpio_pin_set.isra.0>
   19220:	2000d902 	.word	0x2000d902
   19224:	2000c580 	.word	0x2000c580

00019228 <motion_detected>:
	/* start periodic timer that expires once every second */
   19228:	b507      	push	{r0, r1, r2, lr}
	k_timer_start(&my_timer, K_SECONDS(10), K_NO_WAIT);
   1922a:	2201      	movs	r2, #1
   1922c:	4b09      	ldr	r3, [pc, #36]	; (19254 <motion_detected+0x2c>)
}
   1922e:	2110      	movs	r1, #16
	k_timer_start(&my_timer, K_SECONDS(10), K_NO_WAIT);
   19230:	701a      	strb	r2, [r3, #0]
}
   19232:	4b09      	ldr	r3, [pc, #36]	; (19258 <motion_detected+0x30>)
   19234:	6818      	ldr	r0, [r3, #0]
   19236:	f00c faf3 	bl	25820 <gpio_pin_set.isra.0>
		(void) arch_syscall_invoke5(parm0.x, parm1.split.lo, parm1.split.hi, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
   1923a:	2200      	movs	r2, #0
   1923c:	2300      	movs	r3, #0
   1923e:	4807      	ldr	r0, [pc, #28]	; (1925c <motion_detected+0x34>)
   19240:	e9cd 2300 	strd	r2, r3, [sp]
   19244:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   19248:	2300      	movs	r3, #0
   1924a:	f00b fd95 	bl	24d78 <z_impl_k_timer_start>
 * Define a variable of type static struct gpio_callback
   1924e:	b003      	add	sp, #12
   19250:	f85d fb04 	ldr.w	pc, [sp], #4
   19254:	2000d902 	.word	0x2000d902
   19258:	2000c580 	.word	0x2000c580
   1925c:	2000c9a0 	.word	0x2000c9a0

00019260 <expiry_timer_fn>:
 ************************************************************************/
void expiry_timer_fn(struct k_timer *dummy)
{
	LOG_INF("expiry timer");
	struct app_event evt = {
		.type = APP_EVENT_TIMER,
   19260:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		.value = 1234,
   19262:	4b0d      	ldr	r3, [pc, #52]	; (19298 <expiry_timer_fn+0x38>)
   19264:	9305      	str	r3, [sp, #20]
   19266:	2302      	movs	r3, #2
   19268:	9304      	str	r3, [sp, #16]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1926a:	2300      	movs	r3, #0
   1926c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   19270:	480a      	ldr	r0, [pc, #40]	; (1929c <expiry_timer_fn+0x3c>)
   19272:	aa04      	add	r2, sp, #16
   19274:	f001 fd44 	bl	1ad00 <z_impl_z_log_msg_static_create>
	};
   19278:	2300      	movs	r3, #0
   1927a:	f88d 3000 	strb.w	r3, [sp]
   1927e:	f240 43d2 	movw	r3, #1234	; 0x4d2
   19282:	9301      	str	r3, [sp, #4]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
   19284:	2200      	movs	r2, #0
   19286:	2300      	movs	r3, #0
   19288:	4669      	mov	r1, sp
   1928a:	4805      	ldr	r0, [pc, #20]	; (192a0 <expiry_timer_fn+0x40>)
   1928c:	f00a fd90 	bl	23db0 <z_impl_k_msgq_put>
	//
	k_msgq_put(&app_msgq, &evt, K_NO_WAIT);
}

/********************************************************************************
 *
   19290:	b007      	add	sp, #28
   19292:	f85d fb04 	ldr.w	pc, [sp], #4
   19296:	bf00      	nop
   19298:	00029814 	.word	0x00029814
   1929c:	0002900c 	.word	0x0002900c
   192a0:	2000c8dc 	.word	0x2000c8dc

000192a4 <beep_buzzer>:
		k_msleep(tone);
   192a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		gpio_pin_set(gpio_dev, BUZZER, HIGH);
   192a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192ac:	4604      	mov	r4, r0
		k_msleep(tone);
   192ae:	2500      	movs	r5, #0
   192b0:	fb03 f601 	mul.w	r6, r3, r1
		k_msleep(tone);
   192b4:	4f0c      	ldr	r7, [pc, #48]	; (192e8 <beep_buzzer+0x44>)
		k_msleep(tone);
   192b6:	ea4f 0840 	mov.w	r8, r0, lsl #1
   192ba:	42ae      	cmp	r6, r5
   192bc:	dc01      	bgt.n	192c2 <beep_buzzer+0x1e>
 *
   192be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_msleep(tone);
   192c2:	2201      	movs	r2, #1
   192c4:	211c      	movs	r1, #28
   192c6:	6838      	ldr	r0, [r7, #0]
   192c8:	f00c faaa 	bl	25820 <gpio_pin_set.isra.0>
	}
   192cc:	4620      	mov	r0, r4
   192ce:	f00c fab7 	bl	25840 <k_msleep.isra.0>
}
   192d2:	2200      	movs	r2, #0
   192d4:	211c      	movs	r1, #28
   192d6:	6838      	ldr	r0, [r7, #0]
   192d8:	f00c faa2 	bl	25820 <gpio_pin_set.isra.0>

   192dc:	4620      	mov	r0, r4
   192de:	f00c faaf 	bl	25840 <k_msleep.isra.0>
		k_msleep(tone);
   192e2:	4445      	add	r5, r8
   192e4:	e7e9      	b.n	192ba <beep_buzzer+0x16>
   192e6:	bf00      	nop
   192e8:	2000c580 	.word	0x2000c580

000192ec <configuer_all_outputs>:
	{
   192ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		{
   192ee:	2400      	movs	r4, #0
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   192f0:	2701      	movs	r7, #1
   192f2:	4d0f      	ldr	r5, [pc, #60]	; (19330 <configuer_all_outputs+0x44>)
		}
   192f4:	4e0f      	ldr	r6, [pc, #60]	; (19334 <configuer_all_outputs+0x48>)
   192f6:	6830      	ldr	r0, [r6, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   192f8:	f00e ff10 	bl	2811c <z_device_is_ready>
   192fc:	b1b0      	cbz	r0, 1932c <configuer_all_outputs+0x40>
			return;
   192fe:	6830      	ldr	r0, [r6, #0]
   19300:	f855 1b04 	ldr.w	r1, [r5], #4
	struct gpio_driver_data *data =
   19304:	6902      	ldr	r2, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   19306:	b2c9      	uxtb	r1, r1
   19308:	6813      	ldr	r3, [r2, #0]
   1930a:	fa07 fe01 	lsl.w	lr, r7, r1
	const struct gpio_driver_api *api =
   1930e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   19312:	ea23 030e 	bic.w	r3, r3, lr
   19316:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
   19318:	f8dc 3000 	ldr.w	r3, [ip]
   1931c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   19320:	4798      	blx	r3
		}
   19322:	2800      	cmp	r0, #0
   19324:	db02      	blt.n	1932c <configuer_all_outputs+0x40>
		{
   19326:	3401      	adds	r4, #1
   19328:	2c05      	cmp	r4, #5
   1932a:	d1e4      	bne.n	192f6 <configuer_all_outputs+0xa>
 *
   1932c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1932e:	bf00      	nop
   19330:	00029148 	.word	0x00029148
   19334:	2000c580 	.word	0x2000c580

00019338 <configuer_all_inputs>:
	{
   19338:	b510      	push	{r4, lr}
		}
   1933a:	4c09      	ldr	r4, [pc, #36]	; (19360 <configuer_all_inputs+0x28>)
   1933c:	6820      	ldr	r0, [r4, #0]
   1933e:	f00e feed 	bl	2811c <z_device_is_ready>
   19342:	b160      	cbz	r0, 1935e <configuer_all_inputs+0x26>
			return;
   19344:	6820      	ldr	r0, [r4, #0]
	struct gpio_driver_data *data =
   19346:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   19348:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1934a:	6813      	ldr	r3, [r2, #0]
   1934c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   19350:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   19352:	680b      	ldr	r3, [r1, #0]
   19354:	4a03      	ldr	r2, [pc, #12]	; (19364 <configuer_all_inputs+0x2c>)
   19356:	210d      	movs	r1, #13
 * Define the callback function
   19358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1935c:	4718      	bx	r3
   1935e:	bd10      	pop	{r4, pc}
   19360:	2000c580 	.word	0x2000c580
   19364:	00010020 	.word	0x00010020

00019368 <main>:
 ********************************************************************************/
void main(void)
{
	int err;
	uint32_t i;

   19368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1936c:	b08a      	sub	sp, #40	; 0x28
   1936e:	af02      	add	r7, sp, #8
	struct app_event evt;

	configuer_all_outputs();
	configuer_all_inputs();
	if (dk_leds_init() != 0)
	{
   19370:	f7ff ffbc 	bl	192ec <configuer_all_outputs>
		LOG_ERR("Failed to initialize the LED library");
   19374:	f7ff ffe0 	bl	19338 <configuer_all_inputs>
	}
   19378:	f005 f9b6 	bl	1e6e8 <dk_leds_init>
   1937c:	b158      	cbz	r0, 19396 <main+0x2e>
	k_msleep(SLEEP_TIME_MS * 10);
	LOG_INF("A Smart Water Tap Leakage Controller IoT Project/n/r");
   1937e:	4b5a      	ldr	r3, [pc, #360]	; (194e8 <main+0x180>)
   19380:	61fb      	str	r3, [r7, #28]
   19382:	2302      	movs	r3, #2
   19384:	61bb      	str	r3, [r7, #24]
   19386:	2300      	movs	r3, #0
   19388:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1938c:	4857      	ldr	r0, [pc, #348]	; (194ec <main+0x184>)
   1938e:	f107 0218 	add.w	r2, r7, #24
   19392:	f001 fcb5 	bl	1ad00 <z_impl_z_log_msg_static_create>
	
	//
   19396:	f242 7010 	movw	r0, #10000	; 0x2710
   1939a:	f00c fa51 	bl	25840 <k_msleep.isra.0>
	for(i = 0; i < 5; i++)
   1939e:	4b54      	ldr	r3, [pc, #336]	; (194f0 <main+0x188>)
   193a0:	61fb      	str	r3, [r7, #28]
   193a2:	2302      	movs	r3, #2
   193a4:	61bb      	str	r3, [r7, #24]
   193a6:	2405      	movs	r4, #5
   193a8:	2300      	movs	r3, #0
   193aa:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   193ae:	484f      	ldr	r0, [pc, #316]	; (194ec <main+0x184>)
   193b0:	f107 0218 	add.w	r2, r7, #24
   193b4:	f001 fca4 	bl	1ad00 <z_impl_z_log_msg_static_create>
	{
		blink_leds(SLEEP_TIME_QUOTA_S/2, SLEEP_TIME_QUOTA_S, LIGHTWELL_RED, 1);
		blink_leds(SLEEP_TIME_QUOTA_S/2, SLEEP_TIME_QUOTA_S, LIGHTWELL_GREEN, 1);
		blink_leds(SLEEP_TIME_QUOTA_S/2, SLEEP_TIME_QUOTA_S, LIGHTWELL_BLUE, 1);
	}
   193b8:	2301      	movs	r3, #1
   193ba:	2200      	movs	r2, #0
   193bc:	21fa      	movs	r1, #250	; 0xfa
   193be:	207d      	movs	r0, #125	; 0x7d
   193c0:	f00c fa51 	bl	25866 <blink_leds>
	
   193c4:	2301      	movs	r3, #1
   193c6:	21fa      	movs	r1, #250	; 0xfa
   193c8:	461a      	mov	r2, r3
   193ca:	207d      	movs	r0, #125	; 0x7d
   193cc:	f00c fa4b 	bl	25866 <blink_leds>
	/* Configure the interrupt on the button's pin */
   193d0:	2301      	movs	r3, #1
   193d2:	2202      	movs	r2, #2
   193d4:	21fa      	movs	r1, #250	; 0xfa
   193d6:	207d      	movs	r0, #125	; 0x7d
   193d8:	f00c fa45 	bl	25866 <blink_leds>
		blink_leds(SLEEP_TIME_QUOTA_S/2, SLEEP_TIME_QUOTA_S, LIGHTWELL_GREEN, 1);
   193dc:	3c01      	subs	r4, #1
   193de:	d1eb      	bne.n	193b8 <main+0x50>
	err = gpio_pin_interrupt_configure(gpio_dev, MOTION_DETECTOR, GPIO_INT_EDGE_TO_ACTIVE);
	if (err < 0)
	{
		return;
   193e0:	4c44      	ldr	r4, [pc, #272]	; (194f4 <main+0x18c>)
   193e2:	6820      	ldr	r0, [r4, #0]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   193e4:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   193e6:	6883      	ldr	r3, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   193e8:	6812      	ldr	r2, [r2, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   193ea:	699d      	ldr	r5, [r3, #24]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   193ec:	f412 5f00 	tst.w	r2, #8192	; 0x2000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   193f0:	bf14      	ite	ne
   193f2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
   193f6:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
   193fa:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   193fe:	210d      	movs	r1, #13
   19400:	47a8      	blx	r5
	}
   19402:	2800      	cmp	r0, #0
   19404:	db6c      	blt.n	194e0 <main+0x178>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   19406:	493c      	ldr	r1, [pc, #240]	; (194f8 <main+0x190>)
   19408:	4b3c      	ldr	r3, [pc, #240]	; (194fc <main+0x194>)
	gpio_init_callback(&motion_cb_data, motion_detected, BIT(13));
	/* Add the callback function by calling gpio_add_callback() */
	gpio_add_callback(gpio_dev, &motion_cb_data);

	//
	k_timer_init(&my_timer, my_expiry_function, NULL);
   1940a:	6820      	ldr	r0, [r4, #0]
   1940c:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   1940e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   19412:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   19414:	6883      	ldr	r3, [r0, #8]
   19416:	69db      	ldr	r3, [r3, #28]
   19418:	b10b      	cbz	r3, 1941e <main+0xb6>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1941a:	2201      	movs	r2, #1
   1941c:	4798      	blx	r3
	k_timer_init(&main_timer, expiry_timer_fn, NULL);
	//

   1941e:	2200      	movs	r2, #0
   19420:	4937      	ldr	r1, [pc, #220]	; (19500 <main+0x198>)
   19422:	4838      	ldr	r0, [pc, #224]	; (19504 <main+0x19c>)
   19424:	f00f f966 	bl	286f4 <k_timer_init>
	LOG_INF("App Event Application started!");
   19428:	2200      	movs	r2, #0
   1942a:	4937      	ldr	r1, [pc, #220]	; (19508 <main+0x1a0>)
   1942c:	4837      	ldr	r0, [pc, #220]	; (1950c <main+0x1a4>)
   1942e:	f00f f961 	bl	286f4 <k_timer_init>
	k_timer_start(&main_timer, K_SECONDS(1), K_NO_WAIT);

	while (true)
   19432:	4b37      	ldr	r3, [pc, #220]	; (19510 <main+0x1a8>)
   19434:	61fb      	str	r3, [r7, #28]
   19436:	2302      	movs	r3, #2
   19438:	61bb      	str	r3, [r7, #24]
   1943a:	2300      	movs	r3, #0
   1943c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   19440:	482a      	ldr	r0, [pc, #168]	; (194ec <main+0x184>)
   19442:	f107 0218 	add.w	r2, r7, #24
   19446:	f001 fc5b 	bl	1ad00 <z_impl_z_log_msg_static_create>
	z_impl_k_timer_start(timer, duration, period);
   1944a:	2200      	movs	r2, #0
   1944c:	2300      	movs	r3, #0
   1944e:	482f      	ldr	r0, [pc, #188]	; (1950c <main+0x1a4>)
   19450:	e9cd 2300 	strd	r2, r3, [sp]
   19454:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   19458:	2300      	movs	r3, #0
   1945a:	f00b fc8d 	bl	24d78 <z_impl_k_timer_start>
			case APP_EVENT_TIMER:
			{
				LOG_INF("Timer event value: %i", evt.value);
			}
			break;

   1945e:	4d2d      	ldr	r5, [pc, #180]	; (19514 <main+0x1ac>)
   19460:	4c22      	ldr	r4, [pc, #136]	; (194ec <main+0x184>)

			default:
				LOG_INF("Timer event type: default");
			break;
		}

   19462:	4e2d      	ldr	r6, [pc, #180]	; (19518 <main+0x1b0>)

   19464:	783b      	ldrb	r3, [r7, #0]
   19466:	b173      	cbz	r3, 19486 <main+0x11e>
   19468:	3b01      	subs	r3, #1
   1946a:	2b01      	cmp	r3, #1
   1946c:	d91a      	bls.n	194a4 <main+0x13c>

   1946e:	2302      	movs	r3, #2
   19470:	61fe      	str	r6, [r7, #28]
   19472:	61bb      	str	r3, [r7, #24]
   19474:	2300      	movs	r3, #0
   19476:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1947a:	4620      	mov	r0, r4
   1947c:	f107 0218 	add.w	r2, r7, #24
   19480:	f001 fc3e 	bl	1ad00 <z_impl_z_log_msg_static_create>
   19484:	e00e      	b.n	194a4 <main+0x13c>

   19486:	46e8      	mov	r8, sp
   19488:	b088      	sub	sp, #32
   1948a:	6879      	ldr	r1, [r7, #4]
   1948c:	aa02      	add	r2, sp, #8
   1948e:	e9c2 5105 	strd	r5, r1, [r2, #20]
   19492:	2103      	movs	r1, #3
   19494:	f842 1f10 	str.w	r1, [r2, #16]!
   19498:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1949c:	4620      	mov	r0, r4
   1949e:	f001 fc2f 	bl	1ad00 <z_impl_z_log_msg_static_create>
   194a2:	46c5      	mov	sp, r8
		if (valve_status == VALVE_CLOSED)
		{
			blink_leds(SLEEP_TIME_HALF_S, SLEEP_TIME_S, LIGHTWELL_GREEN, 1);
		}
   194a4:	4b1d      	ldr	r3, [pc, #116]	; (1951c <main+0x1b4>)
   194a6:	f893 8000 	ldrb.w	r8, [r3]
   194aa:	f1b8 0f00 	cmp.w	r8, #0
   194ae:	d108      	bne.n	194c2 <main+0x15a>
		else if (valve_status == VALVE_OPENED)
		{
   194b0:	2301      	movs	r3, #1
   194b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   194b6:	461a      	mov	r2, r3
   194b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   194bc:	f00c f9d3 	bl	25866 <blink_leds>
   194c0:	e7d0      	b.n	19464 <main+0xfc>
			blink_leds(SLEEP_TIME_QUOTA_S, SLEEP_TIME_HALF_S, LIGHTWELL_RED, 1);
			beep_buzzer(1, 1);
   194c2:	f1b8 0f01 	cmp.w	r8, #1
   194c6:	d1cd      	bne.n	19464 <main+0xfc>
		}
		else
   194c8:	4643      	mov	r3, r8
   194ca:	2200      	movs	r2, #0
   194cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   194d0:	20fa      	movs	r0, #250	; 0xfa
   194d2:	f00c f9c8 	bl	25866 <blink_leds>
		{
   194d6:	4641      	mov	r1, r8
   194d8:	4640      	mov	r0, r8
   194da:	f7ff fee3 	bl	192a4 <beep_buzzer>
   194de:	e7c1      	b.n	19464 <main+0xfc>
	}
	goto do_connect;
   194e0:	3720      	adds	r7, #32
   194e2:	46bd      	mov	sp, r7
   194e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   194e8:	00029821 	.word	0x00029821
   194ec:	0002900c 	.word	0x0002900c
   194f0:	00029846 	.word	0x00029846
   194f4:	2000c580 	.word	0x2000c580
   194f8:	2000d0b0 	.word	0x2000d0b0
   194fc:	00019229 	.word	0x00019229
   19500:	00019211 	.word	0x00019211
   19504:	2000c9a0 	.word	0x2000c9a0
   19508:	00019261 	.word	0x00019261
   1950c:	2000c968 	.word	0x2000c968
   19510:	0002987b 	.word	0x0002987b
   19514:	0002989a 	.word	0x0002989a
   19518:	000298b0 	.word	0x000298b0
   1951c:	2000d902 	.word	0x2000d902

00019520 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   19520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19524:	b091      	sub	sp, #68	; 0x44
   19526:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   19528:	f002 0304 	and.w	r3, r2, #4
   1952c:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1952e:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   19532:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   19534:	0784      	lsls	r4, r0, #30
{
   19536:	4605      	mov	r5, r0
   19538:	460e      	mov	r6, r1
   1953a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   1953e:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   19540:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   19542:	f040 81bd 	bne.w	198c0 <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   19546:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   19548:	b130      	cbz	r0, 19558 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   1954a:	2907      	cmp	r1, #7
   1954c:	d809      	bhi.n	19562 <cbvprintf_package+0x42>
		return -ENOSPC;
   1954e:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   19552:	b011      	add	sp, #68	; 0x44
   19554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   19558:	f001 0607 	and.w	r6, r1, #7
   1955c:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   1955e:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   19562:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   19564:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
   19568:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
   1956c:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   1956e:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   19572:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   19574:	9301      	str	r3, [sp, #4]
	bool parsing = false;
   19576:	46cb      	mov	fp, r9
	size = sizeof(char *);
   19578:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   1957a:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
   1957e:	b10d      	cbz	r5, 19584 <cbvprintf_package+0x64>
				*(const char **)buf = s;
   19580:	9a00      	ldr	r2, [sp, #0]
   19582:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   19584:	9805      	ldr	r0, [sp, #20]
   19586:	2800      	cmp	r0, #0
   19588:	f300 80eb 	bgt.w	19762 <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   1958c:	4899      	ldr	r0, [pc, #612]	; (197f4 <cbvprintf_package+0x2d4>)
   1958e:	9a00      	ldr	r2, [sp, #0]
   19590:	4282      	cmp	r2, r0
   19592:	d303      	bcc.n	1959c <cbvprintf_package+0x7c>
   19594:	4898      	ldr	r0, [pc, #608]	; (197f8 <cbvprintf_package+0x2d8>)
   19596:	4282      	cmp	r2, r0
   19598:	f0c0 80e3 	bcc.w	19762 <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   1959c:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   1959e:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   195a2:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   195a4:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   195a8:	f100 8106 	bmi.w	197b8 <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   195ac:	2f0f      	cmp	r7, #15
   195ae:	f200 80b4 	bhi.w	1971a <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
   195b2:	2d00      	cmp	r5, #0
   195b4:	f000 8108 	beq.w	197c8 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
   195b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
   195bc:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   195c0:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   195c2:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   195c6:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   195ca:	9804      	ldr	r0, [sp, #16]
   195cc:	3001      	adds	r0, #1
   195ce:	9004      	str	r0, [sp, #16]
   195d0:	e0ea      	b.n	197a8 <cbvprintf_package+0x288>
			switch (*fmt) {
   195d2:	287a      	cmp	r0, #122	; 0x7a
   195d4:	d860      	bhi.n	19698 <cbvprintf_package+0x178>
   195d6:	284b      	cmp	r0, #75	; 0x4b
   195d8:	d80e      	bhi.n	195f8 <cbvprintf_package+0xd8>
   195da:	2847      	cmp	r0, #71	; 0x47
   195dc:	d85c      	bhi.n	19698 <cbvprintf_package+0x178>
   195de:	2829      	cmp	r0, #41	; 0x29
   195e0:	d82f      	bhi.n	19642 <cbvprintf_package+0x122>
   195e2:	2825      	cmp	r0, #37	; 0x25
   195e4:	d055      	beq.n	19692 <cbvprintf_package+0x172>
   195e6:	d857      	bhi.n	19698 <cbvprintf_package+0x178>
   195e8:	2820      	cmp	r0, #32
   195ea:	d07d      	beq.n	196e8 <cbvprintf_package+0x1c8>
   195ec:	3823      	subs	r0, #35	; 0x23
   195ee:	f1d0 0b00 	rsbs	fp, r0, #0
   195f2:	eb4b 0b00 	adc.w	fp, fp, r0
   195f6:	e077      	b.n	196e8 <cbvprintf_package+0x1c8>
   195f8:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   195fc:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   19600:	d84a      	bhi.n	19698 <cbvprintf_package+0x178>
   19602:	e8df f00c 	tbb	[pc, ip]
   19606:	4971      	.short	0x4971
   19608:	49494949 	.word	0x49494949
   1960c:	49494949 	.word	0x49494949
   19610:	494c4949 	.word	0x494c4949
   19614:	49494949 	.word	0x49494949
   19618:	5a494949 	.word	0x5a494949
   1961c:	5a4c4c49 	.word	0x5a4c4c49
   19620:	4c715a5a 	.word	0x4c715a5a
   19624:	4971496e 	.word	0x4971496e
   19628:	49184c18 	.word	0x49184c18
   1962c:	4c808349 	.word	0x4c808349
   19630:	494c4949 	.word	0x494c4949
   19634:	80          	.byte	0x80
   19635:	00          	.byte	0x00
   19636:	2000      	movs	r0, #0
   19638:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   1963c:	f04f 0a04 	mov.w	sl, #4
   19640:	e039      	b.n	196b6 <cbvprintf_package+0x196>
   19642:	2201      	movs	r2, #1
			switch (*fmt) {
   19644:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   19648:	fa5f fc8c 	uxtb.w	ip, ip
   1964c:	fa02 fc0c 	lsl.w	ip, r2, ip
   19650:	ea1c 0f0e 	tst.w	ip, lr
   19654:	d148      	bne.n	196e8 <cbvprintf_package+0x1c8>
   19656:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   1965a:	d12e      	bne.n	196ba <cbvprintf_package+0x19a>
   1965c:	ea1c 0b02 	ands.w	fp, ip, r2
   19660:	d042      	beq.n	196e8 <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
   19662:	3c01      	subs	r4, #1
   19664:	4454      	add	r4, sl
   19666:	f1ca 0c00 	rsb	ip, sl, #0
   1966a:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   1966e:	2d00      	cmp	r5, #0
   19670:	d061      	beq.n	19736 <cbvprintf_package+0x216>
   19672:	eba3 0c05 	sub.w	ip, r3, r5
   19676:	44a4      	add	ip, r4
   19678:	4566      	cmp	r6, ip
   1967a:	f4ff af68 	bcc.w	1954e <cbvprintf_package+0x2e>
		if (is_str_arg) {
   1967e:	2800      	cmp	r0, #0
   19680:	d168      	bne.n	19754 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
   19682:	2b04      	cmp	r3, #4
   19684:	d147      	bne.n	19716 <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
   19686:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   1968a:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   1968c:	2304      	movs	r3, #4
   1968e:	3404      	adds	r4, #4
   19690:	e02a      	b.n	196e8 <cbvprintf_package+0x1c8>
				arg_idx--;
   19692:	9a01      	ldr	r2, [sp, #4]
   19694:	3a01      	subs	r2, #1
   19696:	9201      	str	r2, [sp, #4]
				parsing = false;
   19698:	f04f 0b00 	mov.w	fp, #0
				continue;
   1969c:	e024      	b.n	196e8 <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
   1969e:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   196a2:	286c      	cmp	r0, #108	; 0x6c
   196a4:	d134      	bne.n	19710 <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
   196a6:	2000      	movs	r0, #0
   196a8:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
   196ac:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   196ae:	2b6c      	cmp	r3, #108	; 0x6c
   196b0:	d1c4      	bne.n	1963c <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
   196b2:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   196b6:	4653      	mov	r3, sl
   196b8:	e7d3      	b.n	19662 <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
   196ba:	f108 0807 	add.w	r8, r8, #7
   196be:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   196c2:	3407      	adds	r4, #7
   196c4:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
   196c8:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
   196cc:	b135      	cbz	r5, 196dc <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
   196ce:	9806      	ldr	r0, [sp, #24]
   196d0:	4420      	add	r0, r4
   196d2:	42b0      	cmp	r0, r6
   196d4:	f63f af3b 	bhi.w	1954e <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
   196d8:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
   196dc:	f04f 0b00 	mov.w	fp, #0
				buf += size;
   196e0:	3408      	adds	r4, #8
			switch (*fmt) {
   196e2:	f04f 0a08 	mov.w	sl, #8
   196e6:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   196e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   196ec:	2800      	cmp	r0, #0
   196ee:	d078      	beq.n	197e2 <cbvprintf_package+0x2c2>
			if (!parsing) {
   196f0:	f1bb 0f00 	cmp.w	fp, #0
   196f4:	f47f af6d 	bne.w	195d2 <cbvprintf_package+0xb2>
				if (*fmt == '%') {
   196f8:	2825      	cmp	r0, #37	; 0x25
   196fa:	d1f5      	bne.n	196e8 <cbvprintf_package+0x1c8>
					parsing = true;
   196fc:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
   19700:	9b01      	ldr	r3, [sp, #4]
   19702:	3301      	adds	r3, #1
   19704:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
   19706:	f04f 0a04 	mov.w	sl, #4
   1970a:	e7ec      	b.n	196e6 <cbvprintf_package+0x1c6>
			switch (*fmt) {
   1970c:	4658      	mov	r0, fp
   1970e:	e793      	b.n	19638 <cbvprintf_package+0x118>
   19710:	2000      	movs	r0, #0
				parsing = false;
   19712:	4683      	mov	fp, r0
   19714:	e7a5      	b.n	19662 <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
   19716:	2b08      	cmp	r3, #8
   19718:	d002      	beq.n	19720 <cbvprintf_package+0x200>
					return -EINVAL;
   1971a:	f06f 0015 	mvn.w	r0, #21
   1971e:	e718      	b.n	19552 <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
   19720:	f108 0807 	add.w	r8, r8, #7
   19724:	f028 0807 	bic.w	r8, r8, #7
   19728:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   1972c:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   19730:	2308      	movs	r3, #8
   19732:	3408      	adds	r4, #8
   19734:	e7d8      	b.n	196e8 <cbvprintf_package+0x1c8>
		if (is_str_arg) {
   19736:	b968      	cbnz	r0, 19754 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
   19738:	2b04      	cmp	r3, #4
   1973a:	d102      	bne.n	19742 <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
   1973c:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   19740:	e7a4      	b.n	1968c <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
   19742:	2b08      	cmp	r3, #8
   19744:	d1e9      	bne.n	1971a <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
   19746:	f108 0807 	add.w	r8, r8, #7
   1974a:	f028 0807 	bic.w	r8, r8, #7
   1974e:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   19752:	e7ed      	b.n	19730 <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   19754:	9a05      	ldr	r2, [sp, #20]
   19756:	3a01      	subs	r2, #1
   19758:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   1975a:	f858 2b04 	ldr.w	r2, [r8], #4
   1975e:	9200      	str	r2, [sp, #0]
   19760:	e70d      	b.n	1957e <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
   19762:	9a03      	ldr	r2, [sp, #12]
   19764:	0790      	lsls	r0, r2, #30
   19766:	d520      	bpl.n	197aa <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   19768:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   1976c:	eba4 0e05 	sub.w	lr, r4, r5
   19770:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   19774:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   19778:	d2cf      	bcs.n	1971a <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   1977a:	2f0f      	cmp	r7, #15
   1977c:	d8cd      	bhi.n	1971a <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
   1977e:	b1f5      	cbz	r5, 197be <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
   19780:	f107 0240 	add.w	r2, r7, #64	; 0x40
   19784:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   19788:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   1978a:	b2c0      	uxtb	r0, r0
   1978c:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   19790:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   19794:	f1bc 0f00 	cmp.w	ip, #0
   19798:	f43f af17 	beq.w	195ca <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   1979c:	f060 007f 	orn	r0, r0, #127	; 0x7f
   197a0:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   197a4:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   197a8:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   197aa:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
   197ae:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
   197b2:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   197b4:	9206      	str	r2, [sp, #24]
   197b6:	e797      	b.n	196e8 <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   197b8:	f04f 0c00 	mov.w	ip, #0
   197bc:	e7da      	b.n	19774 <cbvprintf_package+0x254>
				} else if (is_ro) {
   197be:	f1bc 0f00 	cmp.w	ip, #0
   197c2:	d001      	beq.n	197c8 <cbvprintf_package+0x2a8>
					len += 1;
   197c4:	3601      	adds	r6, #1
   197c6:	e7ef      	b.n	197a8 <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
   197c8:	9802      	ldr	r0, [sp, #8]
					len += 2;
   197ca:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   197cc:	2800      	cmp	r0, #0
   197ce:	d1eb      	bne.n	197a8 <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
   197d0:	9800      	ldr	r0, [sp, #0]
   197d2:	e9cd 3106 	strd	r3, r1, [sp, #24]
   197d6:	f7ff fc09 	bl	18fec <strlen>
   197da:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   197de:	4406      	add	r6, r0
   197e0:	e7e2      	b.n	197a8 <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
   197e2:	1b63      	subs	r3, r4, r5
   197e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   197e8:	d297      	bcs.n	1971a <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
   197ea:	b93d      	cbnz	r5, 197fc <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   197ec:	f1a6 0408 	sub.w	r4, r6, #8
   197f0:	18e0      	adds	r0, r4, r3
   197f2:	e6ae      	b.n	19552 <cbvprintf_package+0x32>
   197f4:	00028c54 	.word	0x00028c54
   197f8:	0002b804 	.word	0x0002b804
	if (rws_pos_en) {
   197fc:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   197fe:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
   19800:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   19802:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   19804:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   19808:	b1c2      	cbz	r2, 1983c <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   1980a:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   1980c:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   19810:	f1b9 0f00 	cmp.w	r9, #0
   19814:	d005      	beq.n	19822 <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
   19816:	2200      	movs	r2, #0
   19818:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
   1981a:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   1981e:	4297      	cmp	r7, r2
   19820:	d10e      	bne.n	19840 <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
   19822:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   19826:	f1c5 0301 	rsb	r3, r5, #1
   1982a:	f10d 0820 	add.w	r8, sp, #32
   1982e:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   19830:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   19834:	4557      	cmp	r7, sl
   19836:	d112      	bne.n	1985e <cbvprintf_package+0x33e>
	return BUF_OFFSET;
   19838:	1b60      	subs	r0, r4, r5
   1983a:	e68a      	b.n	19552 <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   1983c:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   1983e:	e7e5      	b.n	1980c <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   19840:	f810 3b01 	ldrb.w	r3, [r0], #1
   19844:	0619      	lsls	r1, r3, #24
   19846:	d508      	bpl.n	1985a <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
   19848:	eb04 0e0c 	add.w	lr, r4, ip
   1984c:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   1984e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   19852:	f4ff ae7c 	bcc.w	1954e <cbvprintf_package+0x2e>
			*buf++ = pos;
   19856:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   1985a:	3201      	adds	r2, #1
   1985c:	e7df      	b.n	1981e <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   1985e:	f1b9 0f00 	cmp.w	r9, #0
   19862:	d003      	beq.n	1986c <cbvprintf_package+0x34c>
   19864:	f998 2000 	ldrsb.w	r2, [r8]
   19868:	2a00      	cmp	r2, #0
   1986a:	db17      	blt.n	1989c <cbvprintf_package+0x37c>
		if (rws_pos_en) {
   1986c:	9b02      	ldr	r3, [sp, #8]
   1986e:	b1d3      	cbz	r3, 198a6 <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
   19870:	f81a 200b 	ldrb.w	r2, [sl, fp]
   19874:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   19878:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   1987a:	9b01      	ldr	r3, [sp, #4]
   1987c:	1898      	adds	r0, r3, r2
   1987e:	4420      	add	r0, r4
   19880:	4286      	cmp	r6, r0
   19882:	f4ff ae64 	bcc.w	1954e <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
   19886:	f898 0000 	ldrb.w	r0, [r8]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1988a:	9900      	ldr	r1, [sp, #0]
   1988c:	f804 0b01 	strb.w	r0, [r4], #1
   19890:	4620      	mov	r0, r4
   19892:	9203      	str	r2, [sp, #12]
   19894:	f00f f82a 	bl	288ec <memcpy>
		buf += size;
   19898:	9a03      	ldr	r2, [sp, #12]
   1989a:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   1989c:	f10a 0a01 	add.w	sl, sl, #1
   198a0:	f108 0801 	add.w	r8, r8, #1
   198a4:	e7c6      	b.n	19834 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   198a6:	f898 2000 	ldrb.w	r2, [r8]
   198aa:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   198ae:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   198b0:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
   198b2:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   198b4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   198b8:	f7ff fb98 	bl	18fec <strlen>
   198bc:	1c42      	adds	r2, r0, #1
   198be:	e7dc      	b.n	1987a <cbvprintf_package+0x35a>
		return -EFAULT;
   198c0:	f06f 000d 	mvn.w	r0, #13
   198c4:	e645      	b.n	19552 <cbvprintf_package+0x32>
   198c6:	bf00      	nop

000198c8 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   198c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198cc:	b095      	sub	sp, #84	; 0x54
   198ce:	af00      	add	r7, sp, #0
   198d0:	61bb      	str	r3, [r7, #24]
   198d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   198d4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   198d6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   198da:	4688      	mov	r8, r1
{
   198dc:	627a      	str	r2, [r7, #36]	; 0x24
   198de:	60fb      	str	r3, [r7, #12]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   198e0:	b949      	cbnz	r1, 198f6 <cbprintf_package_convert+0x2e>
	buf += ros_nbr;
   198e2:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   198e4:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
   198e6:	7880      	ldrb	r0, [r0, #2]
   198e8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   198ec:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   198ee:	4545      	cmp	r5, r8
   198f0:	d819      	bhi.n	19926 <cbprintf_package_convert+0x5e>
	return (size_t)(uintptr_t)(buf - start);
   198f2:	eba0 0804 	sub.w	r8, r0, r4
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   198f6:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
   198f8:	f894 b002 	ldrb.w	fp, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
   198fc:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
   198fe:	f1bb 0f00 	cmp.w	fp, #0
   19902:	d002      	beq.n	1990a <cbprintf_package_convert+0x42>
   19904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19906:	07d8      	lsls	r0, r3, #31
   19908:	d416      	bmi.n	19938 <cbprintf_package_convert+0x70>
	rw_cpy = rws_nbr > 0 &&
   1990a:	697b      	ldr	r3, [r7, #20]
   1990c:	bb53      	cbnz	r3, 19964 <cbprintf_package_convert+0x9c>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   1990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19910:	b11b      	cbz	r3, 1991a <cbprintf_package_convert+0x52>
			cb(in_packaged, in_len, ctx);
   19912:	4641      	mov	r1, r8
   19914:	4620      	mov	r0, r4
   19916:	69ba      	ldr	r2, [r7, #24]
   19918:	4798      	blx	r3
		}

		return in_len;
   1991a:	4645      	mov	r5, r8

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   1991c:	4628      	mov	r0, r5
   1991e:	3754      	adds	r7, #84	; 0x54
   19920:	46bd      	mov	sp, r7
   19922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   19926:	1c46      	adds	r6, r0, #1
		buf += strlen((const char *)buf) + 1;
   19928:	4630      	mov	r0, r6
   1992a:	f7ff fb5f 	bl	18fec <strlen>
   1992e:	3001      	adds	r0, #1
   19930:	4430      	add	r0, r6
	for (int i = 0; i < s_nbr; i++) {
   19932:	f108 0801 	add.w	r8, r8, #1
   19936:	e7da      	b.n	198ee <cbprintf_package_convert+0x26>
	rw_cpy = rws_nbr > 0 &&
   19938:	7823      	ldrb	r3, [r4, #0]
   1993a:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
   1993c:	623b      	str	r3, [r7, #32]
   1993e:	009b      	lsls	r3, r3, #2
   19940:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
   19942:	6a3b      	ldr	r3, [r7, #32]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   19944:	61fa      	str	r2, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
   19946:	eb04 0a83 	add.w	sl, r4, r3, lsl #2
	if (cb == NULL) {
   1994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1994c:	2b00      	cmp	r3, #0
   1994e:	f040 80ff 	bne.w	19b50 <cbprintf_package_convert+0x288>
		out_len = (int)in_len;
   19952:	4645      	mov	r5, r8
	size_t strl_cnt = 0;
   19954:	2600      	movs	r6, #0
   19956:	46d0      	mov	r8, sl
   19958:	eb0b 090a 	add.w	r9, fp, sl
			for (int i = 0; i < ros_nbr; i++) {
   1995c:	45c1      	cmp	r9, r8
   1995e:	d151      	bne.n	19a04 <cbprintf_package_convert+0x13c>
   19960:	44da      	add	sl, fp
   19962:	e013      	b.n	1998c <cbprintf_package_convert+0xc4>
	rw_cpy = rws_nbr > 0 &&
   19964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19966:	0799      	lsls	r1, r3, #30
   19968:	d5d1      	bpl.n	1990e <cbprintf_package_convert+0x46>
	args_size = in_desc->len * sizeof(int);
   1996a:	7823      	ldrb	r3, [r4, #0]
   1996c:	469a      	mov	sl, r3
   1996e:	623b      	str	r3, [r7, #32]
   19970:	009b      	lsls	r3, r3, #2
   19972:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   19974:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
   19976:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
   1997a:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   1997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1997e:	2b00      	cmp	r3, #0
   19980:	d17a      	bne.n	19a78 <cbprintf_package_convert+0x1b0>
		out_len = (int)in_len;
   19982:	4645      	mov	r5, r8
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   19984:	f1bb 0f00 	cmp.w	fp, #0
   19988:	d14f      	bne.n	19a2a <cbprintf_package_convert+0x162>
	size_t strl_cnt = 0;
   1998a:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
   1998c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1998e:	f013 0f05 	tst.w	r3, #5
   19992:	bf0c      	ite	eq
   19994:	f04f 0b02 	moveq.w	fp, #2
   19998:	f04f 0b01 	movne.w	fp, #1
   1999c:	697b      	ldr	r3, [r7, #20]
   1999e:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   199a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   199a4:	f003 0302 	and.w	r3, r3, #2
   199a8:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0; i < rws_nbr; i++) {
   199aa:	45ca      	cmp	sl, r9
   199ac:	d0b6      	beq.n	1991c <cbprintf_package_convert+0x54>
			uint8_t arg_idx = *str_pos++;
   199ae:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
   199b2:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   199b6:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
   199ba:	4bab      	ldr	r3, [pc, #684]	; (19c68 <cbprintf_package_convert+0x3a0>)
   199bc:	4598      	cmp	r8, r3
   199be:	d302      	bcc.n	199c6 <cbprintf_package_convert+0xfe>
   199c0:	4baa      	ldr	r3, [pc, #680]	; (19c6c <cbprintf_package_convert+0x3a4>)
   199c2:	4598      	cmp	r8, r3
   199c4:	d338      	bcc.n	19a38 <cbprintf_package_convert+0x170>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   199c6:	68fb      	ldr	r3, [r7, #12]
   199c8:	2b00      	cmp	r3, #0
   199ca:	d042      	beq.n	19a52 <cbprintf_package_convert+0x18a>
   199cc:	69f8      	ldr	r0, [r7, #28]
   199ce:	f00b ffba 	bl	25946 <is_ptr>
   199d2:	2800      	cmp	r0, #0
   199d4:	d03d      	beq.n	19a52 <cbprintf_package_convert+0x18a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   199d6:	46e8      	mov	r8, sp
   199d8:	b08a      	sub	sp, #40	; 0x28
   199da:	466a      	mov	r2, sp
   199dc:	4ba4      	ldr	r3, [pc, #656]	; (19c70 <cbprintf_package_convert+0x3a8>)
   199de:	6153      	str	r3, [r2, #20]
   199e0:	69fb      	ldr	r3, [r7, #28]
   199e2:	e9c2 3106 	strd	r3, r1, [r2, #24]
   199e6:	f44f 7300 	mov.w	r3, #512	; 0x200
   199ea:	8413      	strh	r3, [r2, #32]
   199ec:	4ba1      	ldr	r3, [pc, #644]	; (19c74 <cbprintf_package_convert+0x3ac>)
   199ee:	f842 3f10 	str.w	r3, [r2, #16]!
   199f2:	2300      	movs	r3, #0
   199f4:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   199f8:	489f      	ldr	r0, [pc, #636]	; (19c78 <cbprintf_package_convert+0x3b0>)
   199fa:	f001 f981 	bl	1ad00 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   199fe:	3d02      	subs	r5, #2
   19a00:	46c5      	mov	sp, r8
				continue;
   19a02:	e7d2      	b.n	199aa <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
   19a04:	f818 3b01 	ldrb.w	r3, [r8], #1
		return 1 + strlen(str);
   19a08:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   19a0c:	f7ff faee 	bl	18fec <strlen>
				if (strl && strl_cnt < strl_len) {
   19a10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   19a12:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   19a14:	b13b      	cbz	r3, 19a26 <cbprintf_package_convert+0x15e>
   19a16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   19a1a:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   19a1c:	bf3e      	ittt	cc
   19a1e:	6ffb      	ldrcc	r3, [r7, #124]	; 0x7c
   19a20:	f823 0016 	strhcc.w	r0, [r3, r6, lsl #1]
   19a24:	3601      	addcc	r6, #1
				out_len += len;
   19a26:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
   19a28:	e798      	b.n	1995c <cbprintf_package_convert+0x94>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   19a2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19a2c:	f013 0604 	ands.w	r6, r3, #4
	size_t strl_cnt = 0;
   19a30:	bf1c      	itt	ne
   19a32:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   19a34:	44da      	addne	sl, fp
   19a36:	e7a9      	b.n	1998c <cbprintf_package_convert+0xc4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   19a38:	68fb      	ldr	r3, [r7, #12]
   19a3a:	b123      	cbz	r3, 19a46 <cbprintf_package_convert+0x17e>
   19a3c:	69f8      	ldr	r0, [r7, #28]
   19a3e:	f00b ff82 	bl	25946 <is_ptr>
   19a42:	2800      	cmp	r0, #0
   19a44:	d1c7      	bne.n	199d6 <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   19a46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19a48:	07da      	lsls	r2, r3, #31
   19a4a:	d405      	bmi.n	19a58 <cbprintf_package_convert+0x190>
					out_len -= drop_ro_str_pos ? 2 : 1;
   19a4c:	eba5 050b 	sub.w	r5, r5, fp
   19a50:	e7ab      	b.n	199aa <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   19a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19a54:	2b00      	cmp	r3, #0
   19a56:	d0a8      	beq.n	199aa <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
   19a58:	4640      	mov	r0, r8
   19a5a:	f7ff fac7 	bl	18fec <strlen>
				if (strl && strl_cnt < strl_len) {
   19a5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   19a60:	b143      	cbz	r3, 19a74 <cbprintf_package_convert+0x1ac>
   19a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   19a66:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   19a68:	bf3f      	itttt	cc
   19a6a:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   19a6c:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   19a6e:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   19a72:	3601      	addcc	r6, #1
				out_len += (len - 1);
   19a74:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
   19a76:	e798      	b.n	199aa <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   19a78:	f1bb 0f00 	cmp.w	fp, #0
   19a7c:	d06e      	beq.n	19b5c <cbprintf_package_convert+0x294>
   19a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19a80:	f013 0604 	ands.w	r6, r3, #4
   19a84:	d06d      	beq.n	19b62 <cbprintf_package_convert+0x29a>
		keep_cnt = ros_nbr;
   19a86:	46d9      	mov	r9, fp
		scpy_cnt = 0;
   19a88:	2600      	movs	r6, #0
		dst = keep_str_pos;
   19a8a:	f107 0040 	add.w	r0, r7, #64	; 0x40
   19a8e:	465a      	mov	r2, fp
   19a90:	4651      	mov	r1, sl
   19a92:	f00e ff2b 	bl	288ec <memcpy>
	str_pos += ros_nbr;
   19a96:	697b      	ldr	r3, [r7, #20]
   19a98:	44da      	add	sl, fp
	for (int i = 0; i < rws_nbr; i++) {
   19a9a:	005b      	lsls	r3, r3, #1
   19a9c:	607b      	str	r3, [r7, #4]
   19a9e:	697b      	ldr	r3, [r7, #20]
   19aa0:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
   19aa4:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   19aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19aa8:	f003 0302 	and.w	r3, r3, #2
   19aac:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < rws_nbr; i++) {
   19aae:	68bb      	ldr	r3, [r7, #8]
   19ab0:	4553      	cmp	r3, sl
   19ab2:	d158      	bne.n	19b66 <cbprintf_package_convert+0x29e>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   19ab4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   19ab6:	7863      	ldrb	r3, [r4, #1]
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   19ab8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   19aba:	0789      	lsls	r1, r1, #30
   19abc:	bf48      	it	mi
   19abe:	2100      	movmi	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   19ac0:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   19ac4:	bf58      	it	pl
   19ac6:	ea4f 0159 	movpl.w	r1, r9, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   19aca:	07c5      	lsls	r5, r0, #31
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   19acc:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   19ace:	f100 809a 	bmi.w	19c06 <cbprintf_package_convert+0x33e>
   19ad2:	f010 0f04 	tst.w	r0, #4
   19ad6:	bf14      	ite	ne
   19ad8:	4648      	movne	r0, r9
   19ada:	2000      	moveq	r0, #0
   19adc:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
   19ade:	7062      	strb	r2, [r4, #1]
   19ae0:	70a0      	strb	r0, [r4, #2]
   19ae2:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   19ae4:	4620      	mov	r0, r4
   19ae6:	69ba      	ldr	r2, [r7, #24]
   19ae8:	6939      	ldr	r1, [r7, #16]
   19aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19aec:	4798      	blx	r3
	if (rv < 0) {
   19aee:	1e05      	subs	r5, r0, #0
   19af0:	f6ff af14 	blt.w	1991c <cbprintf_package_convert+0x54>
	*in_desc = in_desc_backup;
   19af4:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   19af6:	4649      	mov	r1, r9
	*in_desc = in_desc_backup;
   19af8:	7023      	strb	r3, [r4, #0]
   19afa:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   19afc:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
   19afe:	7063      	strb	r3, [r4, #1]
   19b00:	697b      	ldr	r3, [r7, #20]
   19b02:	f884 b002 	strb.w	fp, [r4, #2]
   19b06:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   19b08:	f107 0040 	add.w	r0, r7, #64	; 0x40
   19b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b0e:	4798      	blx	r3
	if (rv < 0) {
   19b10:	f1b0 0900 	subs.w	r9, r0, #0
   19b14:	f2c0 80a4 	blt.w	19c60 <cbprintf_package_convert+0x398>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   19b18:	693b      	ldr	r3, [r7, #16]
   19b1a:	eba8 010b 	sub.w	r1, r8, fp
   19b1e:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   19b20:	687b      	ldr	r3, [r7, #4]
   19b22:	4650      	mov	r0, sl
   19b24:	1ac9      	subs	r1, r1, r3
   19b26:	69ba      	ldr	r2, [r7, #24]
   19b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b2a:	4798      	blx	r3
	if (rv < 0) {
   19b2c:	2800      	cmp	r0, #0
   19b2e:	f2c0 8099 	blt.w	19c64 <cbprintf_package_convert+0x39c>
	for (int i = 0; i < scpy_cnt; i++) {
   19b32:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
   19b36:	44a9      	add	r9, r5
	out_len += rv;
   19b38:	eb09 0500 	add.w	r5, r9, r0
		uint8_t loc = cpy_str_pos[i];
   19b3c:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
   19b40:	45b3      	cmp	fp, r6
   19b42:	db62      	blt.n	19c0a <cbprintf_package_convert+0x342>
	(void)cb(NULL, 0, ctx);
   19b44:	2100      	movs	r1, #0
   19b46:	69ba      	ldr	r2, [r7, #24]
   19b48:	4608      	mov	r0, r1
   19b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b4c:	4798      	blx	r3
	return out_len;
   19b4e:	e6e5      	b.n	1991c <cbprintf_package_convert+0x54>
	if (cb == NULL) {
   19b50:	465e      	mov	r6, fp
   19b52:	f04f 0900 	mov.w	r9, #0
   19b56:	f107 0030 	add.w	r0, r7, #48	; 0x30
   19b5a:	e798      	b.n	19a8e <cbprintf_package_convert+0x1c6>
		scpy_cnt = 0;
   19b5c:	465e      	mov	r6, fp
		keep_cnt = 0;
   19b5e:	46d9      	mov	r9, fp
   19b60:	e799      	b.n	19a96 <cbprintf_package_convert+0x1ce>
   19b62:	46b1      	mov	r9, r6
   19b64:	e797      	b.n	19a96 <cbprintf_package_convert+0x1ce>
		uint8_t arg_idx = *str_pos++;
   19b66:	f81a 1b02 	ldrb.w	r1, [sl], #2
   19b6a:	4b3f      	ldr	r3, [pc, #252]	; (19c68 <cbprintf_package_convert+0x3a0>)
		uint8_t arg_pos = *str_pos++;
   19b6c:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   19b70:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   19b74:	4298      	cmp	r0, r3
   19b76:	d302      	bcc.n	19b7e <cbprintf_package_convert+0x2b6>
   19b78:	4b3c      	ldr	r3, [pc, #240]	; (19c6c <cbprintf_package_convert+0x3a4>)
   19b7a:	4298      	cmp	r0, r3
   19b7c:	d31d      	bcc.n	19bba <cbprintf_package_convert+0x2f2>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   19b7e:	68fb      	ldr	r3, [r7, #12]
   19b80:	b123      	cbz	r3, 19b8c <cbprintf_package_convert+0x2c4>
   19b82:	69f8      	ldr	r0, [r7, #28]
   19b84:	f00b fedf 	bl	25946 <is_ptr>
   19b88:	2800      	cmp	r0, #0
   19b8a:	d190      	bne.n	19aae <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   19b8c:	683b      	ldr	r3, [r7, #0]
   19b8e:	b9fb      	cbnz	r3, 19bd0 <cbprintf_package_convert+0x308>
				keep_str_pos[keep_cnt++] = arg_idx;
   19b90:	f109 0328 	add.w	r3, r9, #40	; 0x28
   19b94:	f107 0228 	add.w	r2, r7, #40	; 0x28
   19b98:	f109 0001 	add.w	r0, r9, #1
   19b9c:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
   19ba0:	f107 0350 	add.w	r3, r7, #80	; 0x50
   19ba4:	f109 0902 	add.w	r9, r9, #2
   19ba8:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
   19bac:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   19bb0:	fa5f f989 	uxtb.w	r9, r9
   19bb4:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
   19bb8:	e779      	b.n	19aae <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   19bba:	68fb      	ldr	r3, [r7, #12]
   19bbc:	b12b      	cbz	r3, 19bca <cbprintf_package_convert+0x302>
   19bbe:	69f8      	ldr	r0, [r7, #28]
   19bc0:	f00b fec1 	bl	25946 <is_ptr>
   19bc4:	2800      	cmp	r0, #0
   19bc6:	f47f af72 	bne.w	19aae <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   19bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19bcc:	07db      	lsls	r3, r3, #31
   19bce:	d509      	bpl.n	19be4 <cbprintf_package_convert+0x31c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   19bd0:	f106 0328 	add.w	r3, r6, #40	; 0x28
   19bd4:	f107 0228 	add.w	r2, r7, #40	; 0x28
   19bd8:	1c71      	adds	r1, r6, #1
   19bda:	189e      	adds	r6, r3, r2
   19bdc:	f806 5c20 	strb.w	r5, [r6, #-32]
   19be0:	b2ce      	uxtb	r6, r1
   19be2:	e764      	b.n	19aae <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   19be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19be6:	0758      	lsls	r0, r3, #29
   19be8:	f57f af61 	bpl.w	19aae <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
   19bec:	f109 0328 	add.w	r3, r9, #40	; 0x28
   19bf0:	f107 0228 	add.w	r2, r7, #40	; 0x28
   19bf4:	f109 0101 	add.w	r1, r9, #1
   19bf8:	eb03 0902 	add.w	r9, r3, r2
   19bfc:	f809 5c10 	strb.w	r5, [r9, #-16]
   19c00:	fa5f f981 	uxtb.w	r9, r1
   19c04:	e753      	b.n	19aae <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   19c06:	2000      	movs	r0, #0
   19c08:	e768      	b.n	19adc <cbprintf_package_convert+0x214>
		uint8_t loc = cpy_str_pos[i];
   19c0a:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
   19c0e:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
   19c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
   19c16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   19c18:	b1fb      	cbz	r3, 19c5a <cbprintf_package_convert+0x392>
   19c1a:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   19c1e:	2101      	movs	r1, #1
   19c20:	69ba      	ldr	r2, [r7, #24]
   19c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19c24:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   19c28:	4798      	blx	r3
		if (rv < 0) {
   19c2a:	2800      	cmp	r0, #0
   19c2c:	db1a      	blt.n	19c64 <cbprintf_package_convert+0x39c>
		out_len += rv;
   19c2e:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   19c30:	f1b8 0f00 	cmp.w	r8, #0
   19c34:	d106      	bne.n	19c44 <cbprintf_package_convert+0x37c>
   19c36:	4648      	mov	r0, r9
   19c38:	f7ff f9d8 	bl	18fec <strlen>
   19c3c:	f100 0801 	add.w	r8, r0, #1
   19c40:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   19c44:	4641      	mov	r1, r8
   19c46:	4648      	mov	r0, r9
   19c48:	69ba      	ldr	r2, [r7, #24]
   19c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19c4c:	4798      	blx	r3
		if (rv < 0) {
   19c4e:	2800      	cmp	r0, #0
   19c50:	db08      	blt.n	19c64 <cbprintf_package_convert+0x39c>
		out_len += rv;
   19c52:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   19c54:	f10b 0b01 	add.w	fp, fp, #1
   19c58:	e772      	b.n	19b40 <cbprintf_package_convert+0x278>
		uint16_t str_len = strl ? strl[i] : 0;
   19c5a:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   19c5e:	e7de      	b.n	19c1e <cbprintf_package_convert+0x356>
   19c60:	464d      	mov	r5, r9
   19c62:	e65b      	b.n	1991c <cbprintf_package_convert+0x54>
   19c64:	4605      	mov	r5, r0
   19c66:	e659      	b.n	1991c <cbprintf_package_convert+0x54>
   19c68:	00028c54 	.word	0x00028c54
   19c6c:	0002b804 	.word	0x0002b804
   19c70:	000298df 	.word	0x000298df
   19c74:	01000004 	.word	0x01000004
   19c78:	00029024 	.word	0x00029024

00019c7c <z_reserve_fd>:

	return entry->obj;
}

int z_reserve_fd(void)
{
   19c7c:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   19c7e:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   19c80:	f04f 33ff 	mov.w	r3, #4294967295
   19c84:	f04f 32ff 	mov.w	r2, #4294967295
   19c88:	4814      	ldr	r0, [pc, #80]	; (19cdc <z_reserve_fd+0x60>)
   19c8a:	f00a f8e9 	bl	23e60 <z_impl_k_mutex_lock>
   19c8e:	4b14      	ldr	r3, [pc, #80]	; (19ce0 <z_reserve_fd+0x64>)
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19c90:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   19c94:	b17a      	cbz	r2, 19cb6 <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   19c96:	3401      	adds	r4, #1
   19c98:	2c04      	cmp	r4, #4
   19c9a:	f103 0320 	add.w	r3, r3, #32
   19c9e:	d1f7      	bne.n	19c90 <z_reserve_fd+0x14>
	errno = ENFILE;
   19ca0:	f00c fcbd 	bl	2661e <__errno>
   19ca4:	2317      	movs	r3, #23
	return -1;
   19ca6:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   19caa:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   19cac:	480b      	ldr	r0, [pc, #44]	; (19cdc <z_reserve_fd+0x60>)
   19cae:	f00a f951 	bl	23f54 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   19cb2:	4620      	mov	r0, r4
   19cb4:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   19cb6:	e8d3 0fef 	ldaex	r0, [r3]
   19cba:	3001      	adds	r0, #1
   19cbc:	e8c3 0fe1 	stlex	r1, r0, [r3]
   19cc0:	2900      	cmp	r1, #0
   19cc2:	d1f8      	bne.n	19cb6 <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   19cc4:	4807      	ldr	r0, [pc, #28]	; (19ce4 <z_reserve_fd+0x68>)
   19cc6:	0163      	lsls	r3, r4, #5
   19cc8:	eb00 1144 	add.w	r1, r0, r4, lsl #5
   19ccc:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
   19cce:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
   19cd0:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   19cd2:	4418      	add	r0, r3
   19cd4:	f00e fac9 	bl	2826a <z_impl_k_mutex_init>
   19cd8:	e7e8      	b.n	19cac <z_reserve_fd+0x30>
   19cda:	bf00      	nop
   19cdc:	2000c864 	.word	0x2000c864
   19ce0:	2000d0c4 	.word	0x2000d0c4
   19ce4:	2000d0bc 	.word	0x2000d0bc

00019ce8 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   19ce8:	b410      	push	{r4}
   19cea:	4604      	mov	r4, r0
   19cec:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   19cee:	4b09      	ldr	r3, [pc, #36]	; (19d14 <z_finalize_fd+0x2c>)
   19cf0:	0162      	lsls	r2, r4, #5
   19cf2:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   19cf6:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   19cf8:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   19cfa:	b140      	cbz	r0, 19d0e <z_finalize_fd+0x26>
   19cfc:	68c4      	ldr	r4, [r0, #12]
   19cfe:	b134      	cbz	r4, 19d0e <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   19d00:	320c      	adds	r2, #12
   19d02:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   19d04:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   19d06:	f240 1205 	movw	r2, #261	; 0x105
   19d0a:	f00b be41 	b.w	25990 <z_fdtable_call_ioctl.constprop.0>
}
   19d0e:	bc10      	pop	{r4}
   19d10:	4770      	bx	lr
   19d12:	bf00      	nop
   19d14:	2000d0bc 	.word	0x2000d0bc

00019d18 <z_free_fd>:

void z_free_fd(int fd)
{
   19d18:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   19d1a:	490d      	ldr	r1, [pc, #52]	; (19d50 <z_free_fd+0x38>)
   19d1c:	0140      	lsls	r0, r0, #5
   19d1e:	f100 0308 	add.w	r3, r0, #8
   19d22:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19d24:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
   19d28:	b182      	cbz	r2, 19d4c <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   19d2a:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19d2c:	e8d3 5fef 	ldaex	r5, [r3]
   19d30:	4295      	cmp	r5, r2
   19d32:	d104      	bne.n	19d3e <z_free_fd+0x26>
   19d34:	e8c3 4fec 	stlex	ip, r4, [r3]
   19d38:	f1bc 0f00 	cmp.w	ip, #0
   19d3c:	d1f6      	bne.n	19d2c <z_free_fd+0x14>
   19d3e:	d1f1      	bne.n	19d24 <z_free_fd+0xc>
	if (old_rc != 1) {
   19d40:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
   19d42:	bf01      	itttt	eq
   19d44:	2300      	moveq	r3, #0
   19d46:	180a      	addeq	r2, r1, r0
   19d48:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
   19d4a:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   19d4c:	bd30      	pop	{r4, r5, pc}
   19d4e:	bf00      	nop
   19d50:	2000d0bc 	.word	0x2000d0bc

00019d54 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   19d54:	4b01      	ldr	r3, [pc, #4]	; (19d5c <__printk_hook_install+0x8>)
   19d56:	6018      	str	r0, [r3, #0]
}
   19d58:	4770      	bx	lr
   19d5a:	bf00      	nop
   19d5c:	2000c584 	.word	0x2000c584

00019d60 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   19d60:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   19d62:	2500      	movs	r5, #0
{
   19d64:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   19d66:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   19d6a:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   19d6c:	9500      	str	r5, [sp, #0]
   19d6e:	a903      	add	r1, sp, #12
   19d70:	4805      	ldr	r0, [pc, #20]	; (19d88 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   19d72:	9505      	str	r5, [sp, #20]
   19d74:	f000 f97a 	bl	1a06c <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   19d78:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   19d7c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   19d7e:	bfb8      	it	lt
   19d80:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   19d82:	b007      	add	sp, #28
   19d84:	bd30      	pop	{r4, r5, pc}
   19d86:	bf00      	nop
   19d88:	000259b3 	.word	0x000259b3

00019d8c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   19d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19d90:	8b05      	ldrh	r5, [r0, #24]
{
   19d92:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   19d94:	0728      	lsls	r0, r5, #28
{
   19d96:	4690      	mov	r8, r2
	if (processing) {
   19d98:	d411      	bmi.n	19dbe <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   19d9a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19d9c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   19da0:	f040 80cd 	bne.w	19f3e <process_event+0x1b2>
			evt = process_recheck(mgr);
   19da4:	4620      	mov	r0, r4
   19da6:	f00c f800 	bl	25daa <process_recheck>
		}

		if (evt == EVT_NOP) {
   19daa:	b178      	cbz	r0, 19dcc <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   19dac:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19dae:	8b21      	ldrh	r1, [r4, #24]
   19db0:	2804      	cmp	r0, #4
   19db2:	d811      	bhi.n	19dd8 <process_event+0x4c>
   19db4:	e8df f000 	tbb	[pc, r0]
   19db8:	856d10c3 	.word	0x856d10c3
   19dbc:	95          	.byte	0x95
   19dbd:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   19dbe:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   19dc0:	bf0c      	ite	eq
   19dc2:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19dc6:	f045 0520 	orrne.w	r5, r5, #32
   19dca:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   19dcc:	f388 8811 	msr	BASEPRI, r8
   19dd0:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   19dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19dd8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   19ddc:	45aa      	cmp	sl, r5
   19dde:	f000 80a6 	beq.w	19f2e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   19de2:	2700      	movs	r7, #0
   19de4:	46b9      	mov	r9, r7
   19de6:	463e      	mov	r6, r7
   19de8:	68a3      	ldr	r3, [r4, #8]
   19dea:	2b00      	cmp	r3, #0
   19dec:	f000 80bd 	beq.w	19f6a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   19df0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   19df4:	8321      	strh	r1, [r4, #24]
   19df6:	f388 8811 	msr	BASEPRI, r8
   19dfa:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   19dfe:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19e00:	2900      	cmp	r1, #0
   19e02:	f000 80bb 	beq.w	19f7c <process_event+0x1f0>
	return node->next;
   19e06:	680d      	ldr	r5, [r1, #0]
   19e08:	2900      	cmp	r1, #0
   19e0a:	f000 80b7 	beq.w	19f7c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   19e0e:	4633      	mov	r3, r6
   19e10:	4652      	mov	r2, sl
   19e12:	4620      	mov	r0, r4
   19e14:	f8d1 8004 	ldr.w	r8, [r1, #4]
   19e18:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19e1a:	2d00      	cmp	r5, #0
   19e1c:	d076      	beq.n	19f0c <process_event+0x180>
   19e1e:	682b      	ldr	r3, [r5, #0]
   19e20:	4629      	mov	r1, r5
   19e22:	461d      	mov	r5, r3
   19e24:	e7f0      	b.n	19e08 <process_event+0x7c>
   19e26:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   19e2a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   19e2c:	2a01      	cmp	r2, #1
   19e2e:	d81b      	bhi.n	19e68 <process_event+0xdc>
	list->head = NULL;
   19e30:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19e32:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   19e36:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   19e38:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19e3a:	b289      	uxth	r1, r1
	list->tail = NULL;
   19e3c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   19e40:	d109      	bne.n	19e56 <process_event+0xca>
   19e42:	463b      	mov	r3, r7
   19e44:	e003      	b.n	19e4e <process_event+0xc2>
				mgr->refs += 1U;
   19e46:	8b62      	ldrh	r2, [r4, #26]
   19e48:	3201      	adds	r2, #1
   19e4a:	8362      	strh	r2, [r4, #26]
	return node->next;
   19e4c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   19e4e:	2b00      	cmp	r3, #0
   19e50:	d1f9      	bne.n	19e46 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19e52:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   19e56:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   19e58:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   19e5a:	f00b ffa6 	bl	25daa <process_recheck>
   19e5e:	2800      	cmp	r0, #0
   19e60:	d07b      	beq.n	19f5a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19e62:	f041 0120 	orr.w	r1, r1, #32
   19e66:	e077      	b.n	19f58 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   19e68:	2b04      	cmp	r3, #4
   19e6a:	d10a      	bne.n	19e82 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19e6c:	f021 0107 	bic.w	r1, r1, #7
   19e70:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   19e72:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   19e74:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   19e76:	f00b ff98 	bl	25daa <process_recheck>
   19e7a:	b110      	cbz	r0, 19e82 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19e7c:	f041 0120 	orr.w	r1, r1, #32
   19e80:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19e82:	8b21      	ldrh	r1, [r4, #24]
   19e84:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   19e88:	45aa      	cmp	sl, r5
   19e8a:	d050      	beq.n	19f2e <process_event+0x1a2>
   19e8c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   19e8e:	46b9      	mov	r9, r7
   19e90:	e7aa      	b.n	19de8 <process_event+0x5c>
			transit = mgr->transitions->start;
   19e92:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19e94:	f021 0107 	bic.w	r1, r1, #7
   19e98:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   19e9c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   19e9e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   19ea2:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   19ea4:	d12d      	bne.n	19f02 <process_event+0x176>
		    || (transit != NULL)) {
   19ea6:	f1b9 0f00 	cmp.w	r9, #0
   19eaa:	d040      	beq.n	19f2e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   19eac:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   19eb0:	8321      	strh	r1, [r4, #24]
   19eb2:	f388 8811 	msr	BASEPRI, r8
   19eb6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   19eba:	4620      	mov	r0, r4
   19ebc:	4939      	ldr	r1, [pc, #228]	; (19fa4 <process_event+0x218>)
   19ebe:	47c8      	blx	r9
   19ec0:	e029      	b.n	19f16 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19ec2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   19ec6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19ec8:	f041 0104 	orr.w	r1, r1, #4
   19ecc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   19ece:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   19ed0:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   19ed4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   19ed6:	d0e6      	beq.n	19ea6 <process_event+0x11a>
   19ed8:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19eda:	f04f 0a04 	mov.w	sl, #4
		res = 0;
   19ede:	463e      	mov	r6, r7
   19ee0:	e782      	b.n	19de8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19ee2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   19ee6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19ee8:	f041 0105 	orr.w	r1, r1, #5
   19eec:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   19eee:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   19ef0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   19ef4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   19ef6:	d0d6      	beq.n	19ea6 <process_event+0x11a>
   19ef8:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19efa:	f04f 0a05 	mov.w	sl, #5
		res = 0;
   19efe:	463e      	mov	r6, r7
   19f00:	e772      	b.n	19de8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   19f02:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19f04:	f04f 0a06 	mov.w	sl, #6
		res = 0;
   19f08:	463e      	mov	r6, r7
   19f0a:	e76d      	b.n	19de8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19f0c:	462b      	mov	r3, r5
   19f0e:	e787      	b.n	19e20 <process_event+0x94>
			if (transit != NULL) {
   19f10:	f1b9 0f00 	cmp.w	r9, #0
   19f14:	d1d1      	bne.n	19eba <process_event+0x12e>
	__asm__ volatile(
   19f16:	f04f 0320 	mov.w	r3, #32
   19f1a:	f3ef 8811 	mrs	r8, BASEPRI
   19f1e:	f383 8812 	msr	BASEPRI_MAX, r3
   19f22:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   19f26:	8b23      	ldrh	r3, [r4, #24]
   19f28:	f023 0308 	bic.w	r3, r3, #8
   19f2c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   19f2e:	8b25      	ldrh	r5, [r4, #24]
   19f30:	06ea      	lsls	r2, r5, #27
   19f32:	d52e      	bpl.n	19f92 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   19f34:	f025 0310 	bic.w	r3, r5, #16
   19f38:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   19f3a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   19f3e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19f40:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   19f42:	2e00      	cmp	r6, #0
   19f44:	f6bf af6f 	bge.w	19e26 <process_event+0x9a>
	list->head = NULL;
   19f48:	2300      	movs	r3, #0
		*clients = mgr->clients;
   19f4a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   19f4c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19f50:	f021 0107 	bic.w	r1, r1, #7
   19f54:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19f58:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19f5a:	8b21      	ldrh	r1, [r4, #24]
   19f5c:	f04f 0900 	mov.w	r9, #0
   19f60:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   19f64:	45aa      	cmp	sl, r5
   19f66:	f47f af3f 	bne.w	19de8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   19f6a:	2f00      	cmp	r7, #0
   19f6c:	d09b      	beq.n	19ea6 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   19f6e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   19f72:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   19f74:	f388 8811 	msr	BASEPRI, r8
   19f78:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   19f7c:	2f00      	cmp	r7, #0
   19f7e:	d0c7      	beq.n	19f10 <process_event+0x184>
	return node->next;
   19f80:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   19f82:	4639      	mov	r1, r7
   19f84:	4633      	mov	r3, r6
   19f86:	4652      	mov	r2, sl
   19f88:	4620      	mov	r0, r4
   19f8a:	f00b ff3a 	bl	25e02 <notify_one>
	list->head = node;
   19f8e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   19f90:	e7f4      	b.n	19f7c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   19f92:	06ab      	lsls	r3, r5, #26
   19f94:	f57f af1a 	bpl.w	19dcc <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   19f98:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   19f9c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   19f9e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   19fa2:	e6ff      	b.n	19da4 <process_event+0x18>
   19fa4:	00025e2f 	.word	0x00025e2f

00019fa8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   19fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19faa:	4602      	mov	r2, r0
   19fac:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   19fae:	270a      	movs	r7, #10
	size_t val = 0;
   19fb0:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   19fb2:	4e07      	ldr	r6, [pc, #28]	; (19fd0 <extract_decimal+0x28>)
   19fb4:	460b      	mov	r3, r1
   19fb6:	781c      	ldrb	r4, [r3, #0]
   19fb8:	3101      	adds	r1, #1
   19fba:	5d35      	ldrb	r5, [r6, r4]
   19fbc:	076d      	lsls	r5, r5, #29
   19fbe:	d401      	bmi.n	19fc4 <extract_decimal+0x1c>
	}
	*str = sp;
   19fc0:	6013      	str	r3, [r2, #0]
	return val;
}
   19fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   19fc4:	fb07 4300 	mla	r3, r7, r0, r4
   19fc8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   19fcc:	e7f2      	b.n	19fb4 <extract_decimal+0xc>
   19fce:	bf00      	nop
   19fd0:	0002b6b6 	.word	0x0002b6b6

00019fd4 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   19fd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fd8:	4615      	mov	r5, r2
   19fda:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   19fdc:	78d3      	ldrb	r3, [r2, #3]
   19fde:	4a22      	ldr	r2, [pc, #136]	; (1a068 <encode_uint+0x94>)
	switch (specifier) {
   19fe0:	2b6f      	cmp	r3, #111	; 0x6f
   19fe2:	f812 b003 	ldrb.w	fp, [r2, r3]
{
   19fe6:	4680      	mov	r8, r0
   19fe8:	460f      	mov	r7, r1
   19fea:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   19fee:	d029      	beq.n	1a044 <encode_uint+0x70>
   19ff0:	d824      	bhi.n	1a03c <encode_uint+0x68>
		return 10;
   19ff2:	2b58      	cmp	r3, #88	; 0x58
   19ff4:	bf0c      	ite	eq
   19ff6:	2610      	moveq	r6, #16
   19ff8:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   19ffa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   19ffe:	4632      	mov	r2, r6
   1a000:	2300      	movs	r3, #0
   1a002:	4640      	mov	r0, r8
   1a004:	4639      	mov	r1, r7
   1a006:	f7fe fe7f 	bl	18d08 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a00a:	2a09      	cmp	r2, #9
   1a00c:	b2d4      	uxtb	r4, r2
   1a00e:	d81e      	bhi.n	1a04e <encode_uint+0x7a>
   1a010:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   1a012:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a014:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1a016:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a01a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1a01e:	d301      	bcc.n	1a024 <encode_uint+0x50>
   1a020:	45d1      	cmp	r9, sl
   1a022:	d811      	bhi.n	1a048 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   1a024:	782b      	ldrb	r3, [r5, #0]
   1a026:	069b      	lsls	r3, r3, #26
   1a028:	d505      	bpl.n	1a036 <encode_uint+0x62>
		if (radix == 8) {
   1a02a:	2e08      	cmp	r6, #8
   1a02c:	d115      	bne.n	1a05a <encode_uint+0x86>
			conv->altform_0 = true;
   1a02e:	78ab      	ldrb	r3, [r5, #2]
   1a030:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   1a034:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
   1a036:	4648      	mov	r0, r9
   1a038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1a03c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1a040:	2b70      	cmp	r3, #112	; 0x70
   1a042:	e7d7      	b.n	19ff4 <encode_uint+0x20>
	switch (specifier) {
   1a044:	2608      	movs	r6, #8
   1a046:	e7d8      	b.n	19ffa <encode_uint+0x26>
		value /= radix;
   1a048:	4680      	mov	r8, r0
   1a04a:	460f      	mov	r7, r1
   1a04c:	e7d7      	b.n	19ffe <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a04e:	f1bb 0f01 	cmp.w	fp, #1
   1a052:	bf0c      	ite	eq
   1a054:	3437      	addeq	r4, #55	; 0x37
   1a056:	3457      	addne	r4, #87	; 0x57
   1a058:	e7db      	b.n	1a012 <encode_uint+0x3e>
		} else if (radix == 16) {
   1a05a:	2e10      	cmp	r6, #16
   1a05c:	d1eb      	bne.n	1a036 <encode_uint+0x62>
			conv->altform_0c = true;
   1a05e:	78ab      	ldrb	r3, [r5, #2]
   1a060:	f043 0310 	orr.w	r3, r3, #16
   1a064:	e7e6      	b.n	1a034 <encode_uint+0x60>
   1a066:	bf00      	nop
   1a068:	0002b6b6 	.word	0x0002b6b6

0001a06c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   1a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a070:	4682      	mov	sl, r0
   1a072:	4617      	mov	r7, r2
   1a074:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1a076:	2500      	movs	r5, #0
{
   1a078:	b097      	sub	sp, #92	; 0x5c
   1a07a:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1a07c:	7838      	ldrb	r0, [r7, #0]
   1a07e:	b908      	cbnz	r0, 1a084 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1a080:	4628      	mov	r0, r5
   1a082:	e349      	b.n	1a718 <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
   1a084:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   1a086:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   1a088:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
   1a08a:	d006      	beq.n	1a09a <z_cbvprintf_impl+0x2e>
			OUTC('%');
   1a08c:	9903      	ldr	r1, [sp, #12]
   1a08e:	47d0      	blx	sl
   1a090:	2800      	cmp	r0, #0
   1a092:	f2c0 8341 	blt.w	1a718 <z_cbvprintf_impl+0x6ac>
   1a096:	3501      	adds	r5, #1
		if (bps == NULL) {
   1a098:	e1f0      	b.n	1a47c <z_cbvprintf_impl+0x410>
		} state = {
   1a09a:	2218      	movs	r2, #24
   1a09c:	2100      	movs	r1, #0
   1a09e:	a810      	add	r0, sp, #64	; 0x40
   1a0a0:	f00e fc31 	bl	28906 <memset>
	if (*sp == '%') {
   1a0a4:	787b      	ldrb	r3, [r7, #1]
   1a0a6:	2b25      	cmp	r3, #37	; 0x25
   1a0a8:	f000 80a3 	beq.w	1a1f2 <z_cbvprintf_impl+0x186>
   1a0ac:	2300      	movs	r3, #0
   1a0ae:	4698      	mov	r8, r3
   1a0b0:	469e      	mov	lr, r3
   1a0b2:	469c      	mov	ip, r3
   1a0b4:	4618      	mov	r0, r3
   1a0b6:	1c79      	adds	r1, r7, #1
   1a0b8:	460e      	mov	r6, r1
		switch (*sp) {
   1a0ba:	f811 2b01 	ldrb.w	r2, [r1], #1
   1a0be:	2a2b      	cmp	r2, #43	; 0x2b
   1a0c0:	f000 80c6 	beq.w	1a250 <z_cbvprintf_impl+0x1e4>
   1a0c4:	f200 80bd 	bhi.w	1a242 <z_cbvprintf_impl+0x1d6>
   1a0c8:	2a20      	cmp	r2, #32
   1a0ca:	f000 80c4 	beq.w	1a256 <z_cbvprintf_impl+0x1ea>
   1a0ce:	2a23      	cmp	r2, #35	; 0x23
   1a0d0:	f000 80c4 	beq.w	1a25c <z_cbvprintf_impl+0x1f0>
   1a0d4:	b12b      	cbz	r3, 1a0e2 <z_cbvprintf_impl+0x76>
   1a0d6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a0da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a0de:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1a0e2:	f1b8 0f00 	cmp.w	r8, #0
   1a0e6:	d005      	beq.n	1a0f4 <z_cbvprintf_impl+0x88>
   1a0e8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a0ec:	f043 0320 	orr.w	r3, r3, #32
   1a0f0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1a0f4:	f1be 0f00 	cmp.w	lr, #0
   1a0f8:	d005      	beq.n	1a106 <z_cbvprintf_impl+0x9a>
   1a0fa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a0fe:	f043 0310 	orr.w	r3, r3, #16
   1a102:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1a106:	f1bc 0f00 	cmp.w	ip, #0
   1a10a:	d005      	beq.n	1a118 <z_cbvprintf_impl+0xac>
   1a10c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a110:	f043 0308 	orr.w	r3, r3, #8
   1a114:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1a118:	b128      	cbz	r0, 1a126 <z_cbvprintf_impl+0xba>
   1a11a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a11e:	f043 0304 	orr.w	r3, r3, #4
   1a122:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   1a126:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a12a:	f003 0144 	and.w	r1, r3, #68	; 0x44
   1a12e:	2944      	cmp	r1, #68	; 0x44
   1a130:	d103      	bne.n	1a13a <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
   1a132:	f36f 1386 	bfc	r3, #6, #1
   1a136:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   1a13a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   1a13e:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   1a140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a144:	9609      	str	r6, [sp, #36]	; 0x24
   1a146:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   1a14a:	f040 808c 	bne.w	1a266 <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
   1a14e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1a152:	f043 0301 	orr.w	r3, r3, #1
   1a156:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
   1a15a:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
   1a15c:	781a      	ldrb	r2, [r3, #0]
   1a15e:	2a2e      	cmp	r2, #46	; 0x2e
   1a160:	bf0c      	ite	eq
   1a162:	2101      	moveq	r1, #1
   1a164:	2100      	movne	r1, #0
   1a166:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a16a:	f361 0241 	bfi	r2, r1, #1, #1
   1a16e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   1a172:	d10c      	bne.n	1a18e <z_cbvprintf_impl+0x122>
	++sp;
   1a174:	1c5a      	adds	r2, r3, #1
   1a176:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
   1a178:	785a      	ldrb	r2, [r3, #1]
   1a17a:	2a2a      	cmp	r2, #42	; 0x2a
   1a17c:	f040 8083 	bne.w	1a286 <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
   1a180:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   1a184:	3302      	adds	r3, #2
		conv->prec_star = true;
   1a186:	f042 0204 	orr.w	r2, r2, #4
   1a18a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
   1a18e:	781a      	ldrb	r2, [r3, #0]
   1a190:	2a6c      	cmp	r2, #108	; 0x6c
   1a192:	f000 80a4 	beq.w	1a2de <z_cbvprintf_impl+0x272>
   1a196:	f200 8086 	bhi.w	1a2a6 <z_cbvprintf_impl+0x23a>
   1a19a:	2a68      	cmp	r2, #104	; 0x68
   1a19c:	f000 808c 	beq.w	1a2b8 <z_cbvprintf_impl+0x24c>
   1a1a0:	2a6a      	cmp	r2, #106	; 0x6a
   1a1a2:	f000 80a5 	beq.w	1a2f0 <z_cbvprintf_impl+0x284>
   1a1a6:	2a4c      	cmp	r2, #76	; 0x4c
   1a1a8:	f000 80aa 	beq.w	1a300 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
   1a1ac:	461a      	mov	r2, r3
   1a1ae:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
   1a1b2:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
   1a1b4:	9204      	str	r2, [sp, #16]
   1a1b6:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a1ba:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
   1a1be:	f200 8117 	bhi.w	1a3f0 <z_cbvprintf_impl+0x384>
   1a1c2:	2b6d      	cmp	r3, #109	; 0x6d
   1a1c4:	f200 80a9 	bhi.w	1a31a <z_cbvprintf_impl+0x2ae>
   1a1c8:	2b69      	cmp	r3, #105	; 0x69
   1a1ca:	f200 8111 	bhi.w	1a3f0 <z_cbvprintf_impl+0x384>
   1a1ce:	2b57      	cmp	r3, #87	; 0x57
   1a1d0:	f200 80be 	bhi.w	1a350 <z_cbvprintf_impl+0x2e4>
   1a1d4:	2b41      	cmp	r3, #65	; 0x41
   1a1d6:	d003      	beq.n	1a1e0 <z_cbvprintf_impl+0x174>
   1a1d8:	3b45      	subs	r3, #69	; 0x45
   1a1da:	2b02      	cmp	r3, #2
   1a1dc:	f200 8108 	bhi.w	1a3f0 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
   1a1e0:	2204      	movs	r2, #4
   1a1e2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a1e6:	f362 0302 	bfi	r3, r2, #0, #3
   1a1ea:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
   1a1ee:	2301      	movs	r3, #1
			break;
   1a1f0:	e0ca      	b.n	1a388 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
   1a1f2:	1cba      	adds	r2, r7, #2
   1a1f4:	9204      	str	r2, [sp, #16]
   1a1f6:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   1a1fa:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1a1fe:	07da      	lsls	r2, r3, #31
   1a200:	f140 80fd 	bpl.w	1a3fe <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
   1a204:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   1a208:	f1b9 0f00 	cmp.w	r9, #0
   1a20c:	da07      	bge.n	1a21e <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
   1a20e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
   1a212:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
   1a216:	f042 0204 	orr.w	r2, r2, #4
   1a21a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
   1a21e:	075e      	lsls	r6, r3, #29
   1a220:	f140 80f6 	bpl.w	1a410 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
   1a224:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
   1a228:	f1bb 0f00 	cmp.w	fp, #0
   1a22c:	f280 80f5 	bge.w	1a41a <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
   1a230:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1a234:	f36f 0341 	bfc	r3, #1, #1
   1a238:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   1a23c:	f04f 3bff 	mov.w	fp, #4294967295
   1a240:	e0eb      	b.n	1a41a <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
   1a242:	2a2d      	cmp	r2, #45	; 0x2d
   1a244:	d00d      	beq.n	1a262 <z_cbvprintf_impl+0x1f6>
   1a246:	2a30      	cmp	r2, #48	; 0x30
   1a248:	f47f af44 	bne.w	1a0d4 <z_cbvprintf_impl+0x68>
   1a24c:	2301      	movs	r3, #1
	} while (loop);
   1a24e:	e733      	b.n	1a0b8 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
   1a250:	f04f 0c01 	mov.w	ip, #1
   1a254:	e730      	b.n	1a0b8 <z_cbvprintf_impl+0x4c>
   1a256:	f04f 0e01 	mov.w	lr, #1
   1a25a:	e72d      	b.n	1a0b8 <z_cbvprintf_impl+0x4c>
   1a25c:	f04f 0801 	mov.w	r8, #1
   1a260:	e72a      	b.n	1a0b8 <z_cbvprintf_impl+0x4c>
   1a262:	2001      	movs	r0, #1
   1a264:	e728      	b.n	1a0b8 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
   1a266:	a809      	add	r0, sp, #36	; 0x24
   1a268:	f7ff fe9e 	bl	19fa8 <extract_decimal>
	if (sp != wp) {
   1a26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a26e:	42b3      	cmp	r3, r6
   1a270:	f43f af74 	beq.w	1a15c <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
   1a274:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
   1a278:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   1a27a:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
   1a27c:	f360 0241 	bfi	r2, r0, #1, #1
   1a280:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1a284:	e76a      	b.n	1a15c <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
   1a286:	a809      	add	r0, sp, #36	; 0x24
   1a288:	f7ff fe8e 	bl	19fa8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1a28c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
   1a290:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   1a292:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1a296:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   1a29a:	f362 0341 	bfi	r3, r2, #1, #1
   1a29e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
   1a2a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a2a4:	e773      	b.n	1a18e <z_cbvprintf_impl+0x122>
	switch (*sp) {
   1a2a6:	2a74      	cmp	r2, #116	; 0x74
   1a2a8:	d026      	beq.n	1a2f8 <z_cbvprintf_impl+0x28c>
   1a2aa:	2a7a      	cmp	r2, #122	; 0x7a
   1a2ac:	f47f af7e 	bne.w	1a1ac <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
   1a2b0:	2106      	movs	r1, #6
   1a2b2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a2b6:	e00c      	b.n	1a2d2 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
   1a2b8:	785a      	ldrb	r2, [r3, #1]
   1a2ba:	2a68      	cmp	r2, #104	; 0x68
   1a2bc:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a2c0:	d106      	bne.n	1a2d0 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
   1a2c2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1a2c4:	f361 02c6 	bfi	r2, r1, #3, #4
   1a2c8:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   1a2cc:	3302      	adds	r3, #2
   1a2ce:	e76d      	b.n	1a1ac <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
   1a2d0:	2102      	movs	r1, #2
   1a2d2:	f361 02c6 	bfi	r2, r1, #3, #4
   1a2d6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   1a2da:	3301      	adds	r3, #1
   1a2dc:	e766      	b.n	1a1ac <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
   1a2de:	785a      	ldrb	r2, [r3, #1]
   1a2e0:	2a6c      	cmp	r2, #108	; 0x6c
   1a2e2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a2e6:	d101      	bne.n	1a2ec <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
   1a2e8:	2104      	movs	r1, #4
   1a2ea:	e7eb      	b.n	1a2c4 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
   1a2ec:	2103      	movs	r1, #3
   1a2ee:	e7f0      	b.n	1a2d2 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
   1a2f0:	2105      	movs	r1, #5
   1a2f2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a2f6:	e7ec      	b.n	1a2d2 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
   1a2f8:	2107      	movs	r1, #7
   1a2fa:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a2fe:	e7e8      	b.n	1a2d2 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
   1a300:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1a304:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   1a308:	f022 0202 	bic.w	r2, r2, #2
   1a30c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1a310:	f042 0202 	orr.w	r2, r2, #2
   1a314:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   1a318:	e7df      	b.n	1a2da <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
   1a31a:	3b6e      	subs	r3, #110	; 0x6e
   1a31c:	b2d9      	uxtb	r1, r3
   1a31e:	2301      	movs	r3, #1
   1a320:	408b      	lsls	r3, r1
   1a322:	f240 4182 	movw	r1, #1154	; 0x482
   1a326:	420b      	tst	r3, r1
   1a328:	d138      	bne.n	1a39c <z_cbvprintf_impl+0x330>
   1a32a:	f013 0f24 	tst.w	r3, #36	; 0x24
   1a32e:	d152      	bne.n	1a3d6 <z_cbvprintf_impl+0x36a>
   1a330:	07d8      	lsls	r0, r3, #31
   1a332:	d55d      	bpl.n	1a3f0 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
   1a334:	2103      	movs	r1, #3
   1a336:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a33a:	f361 0302 	bfi	r3, r1, #0, #3
   1a33e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a342:	f002 0378 	and.w	r3, r2, #120	; 0x78
   1a346:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   1a34a:	424b      	negs	r3, r1
   1a34c:	414b      	adcs	r3, r1
   1a34e:	e01b      	b.n	1a388 <z_cbvprintf_impl+0x31c>
   1a350:	2001      	movs	r0, #1
	switch (conv->specifier) {
   1a352:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   1a356:	b2c9      	uxtb	r1, r1
   1a358:	fa00 f101 	lsl.w	r1, r0, r1
   1a35c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   1a360:	f47f af3e 	bne.w	1a1e0 <z_cbvprintf_impl+0x174>
   1a364:	f640 0601 	movw	r6, #2049	; 0x801
   1a368:	4231      	tst	r1, r6
   1a36a:	d11d      	bne.n	1a3a8 <z_cbvprintf_impl+0x33c>
   1a36c:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   1a370:	d03e      	beq.n	1a3f0 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
   1a372:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a376:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a37a:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1a37e:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   1a380:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a384:	d034      	beq.n	1a3f0 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
   1a386:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   1a388:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   1a38c:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1a390:	430b      	orrs	r3, r1
   1a392:	f363 0241 	bfi	r2, r3, #1, #1
   1a396:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   1a39a:	e72e      	b.n	1a1fa <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
   1a39c:	2102      	movs	r1, #2
   1a39e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a3a2:	f361 0302 	bfi	r3, r1, #0, #3
   1a3a6:	e7e8      	b.n	1a37a <z_cbvprintf_impl+0x30e>
   1a3a8:	2002      	movs	r0, #2
   1a3aa:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a3ae:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1a3b2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a3b6:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   1a3b8:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   1a3bc:	bf02      	ittt	eq
   1a3be:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   1a3c2:	f041 0101 	orreq.w	r1, r1, #1
   1a3c6:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   1a3ca:	2b63      	cmp	r3, #99	; 0x63
   1a3cc:	d1db      	bne.n	1a386 <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1a3ce:	1e13      	subs	r3, r2, #0
   1a3d0:	bf18      	it	ne
   1a3d2:	2301      	movne	r3, #1
   1a3d4:	e7d8      	b.n	1a388 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
   1a3d6:	2103      	movs	r1, #3
   1a3d8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   1a3dc:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1a3e0:	f361 0302 	bfi	r3, r1, #0, #3
   1a3e4:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   1a3e8:	bf14      	ite	ne
   1a3ea:	2301      	movne	r3, #1
   1a3ec:	2300      	moveq	r3, #0
   1a3ee:	e7cb      	b.n	1a388 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
   1a3f0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a3f4:	f043 0301 	orr.w	r3, r3, #1
   1a3f8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   1a3fc:	e7c3      	b.n	1a386 <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
   1a3fe:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   1a402:	2a00      	cmp	r2, #0
		int width = -1;
   1a404:	bfac      	ite	ge
   1a406:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
   1a40a:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
   1a40e:	e706      	b.n	1a21e <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
   1a410:	0798      	lsls	r0, r3, #30
   1a412:	f57f af13 	bpl.w	1a23c <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
   1a416:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   1a41a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1a41c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
   1a420:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
   1a424:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
   1a428:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1a42c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1a42e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1a432:	d133      	bne.n	1a49c <z_cbvprintf_impl+0x430>
			switch (length_mod) {
   1a434:	1ecb      	subs	r3, r1, #3
   1a436:	2b04      	cmp	r3, #4
   1a438:	d804      	bhi.n	1a444 <z_cbvprintf_impl+0x3d8>
   1a43a:	e8df f003 	tbb	[pc, r3]
   1a43e:	4621      	.short	0x4621
   1a440:	2146      	.short	0x2146
   1a442:	21          	.byte	0x21
   1a443:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   1a444:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   1a446:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   1a448:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1a44c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   1a450:	d11c      	bne.n	1a48c <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
   1a452:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   1a456:	17da      	asrs	r2, r3, #31
   1a458:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   1a45c:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   1a45e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a462:	f013 0603 	ands.w	r6, r3, #3
   1a466:	d050      	beq.n	1a50a <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
   1a468:	463a      	mov	r2, r7
   1a46a:	4650      	mov	r0, sl
   1a46c:	9b04      	ldr	r3, [sp, #16]
   1a46e:	9903      	ldr	r1, [sp, #12]
   1a470:	f00b fd83 	bl	25f7a <outs>
   1a474:	2800      	cmp	r0, #0
   1a476:	f2c0 814f 	blt.w	1a718 <z_cbvprintf_impl+0x6ac>
   1a47a:	4405      	add	r5, r0
			continue;
   1a47c:	9f04      	ldr	r7, [sp, #16]
   1a47e:	e5fd      	b.n	1a07c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1a480:	f854 3b04 	ldr.w	r3, [r4], #4
   1a484:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   1a486:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
   1a48a:	e7e8      	b.n	1a45e <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
   1a48c:	2902      	cmp	r1, #2
   1a48e:	d1e5      	bne.n	1a45c <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
   1a490:	b21a      	sxth	r2, r3
   1a492:	f343 33c0 	sbfx	r3, r3, #15, #1
   1a496:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1a49a:	e7df      	b.n	1a45c <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1a49c:	2b02      	cmp	r3, #2
   1a49e:	d124      	bne.n	1a4ea <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
   1a4a0:	1ecb      	subs	r3, r1, #3
   1a4a2:	2b04      	cmp	r3, #4
   1a4a4:	d804      	bhi.n	1a4b0 <z_cbvprintf_impl+0x444>
   1a4a6:	e8df f003 	tbb	[pc, r3]
   1a4aa:	1018      	.short	0x1018
   1a4ac:	1810      	.short	0x1810
   1a4ae:	18          	.byte	0x18
   1a4af:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   1a4b0:	2901      	cmp	r1, #1
   1a4b2:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
   1a4b6:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1a4ba:	d014      	beq.n	1a4e6 <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
   1a4bc:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   1a4be:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   1a4c2:	d1cc      	bne.n	1a45e <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
   1a4c4:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   1a4c6:	9310      	str	r3, [sp, #64]	; 0x40
   1a4c8:	e7c9      	b.n	1a45e <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
   1a4ca:	3407      	adds	r4, #7
   1a4cc:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   1a4d0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1a4d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   1a4d8:	e7c1      	b.n	1a45e <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
   1a4da:	f854 3b04 	ldr.w	r3, [r4], #4
   1a4de:	9310      	str	r3, [sp, #64]	; 0x40
   1a4e0:	2300      	movs	r3, #0
   1a4e2:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   1a4e4:	e7bb      	b.n	1a45e <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
   1a4e6:	b2db      	uxtb	r3, r3
   1a4e8:	e7cd      	b.n	1a486 <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
   1a4ea:	2b04      	cmp	r3, #4
   1a4ec:	d108      	bne.n	1a500 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
   1a4ee:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   1a4f0:	f024 0407 	bic.w	r4, r4, #7
   1a4f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a4f8:	3408      	adds	r4, #8
   1a4fa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1a4fe:	e7ae      	b.n	1a45e <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1a500:	2b03      	cmp	r3, #3
   1a502:	d1ac      	bne.n	1a45e <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
   1a504:	f854 3b04 	ldr.w	r3, [r4], #4
   1a508:	e7dd      	b.n	1a4c6 <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
   1a50a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1a50e:	2878      	cmp	r0, #120	; 0x78
   1a510:	d8b4      	bhi.n	1a47c <z_cbvprintf_impl+0x410>
   1a512:	2862      	cmp	r0, #98	; 0x62
   1a514:	d81c      	bhi.n	1a550 <z_cbvprintf_impl+0x4e4>
   1a516:	2825      	cmp	r0, #37	; 0x25
   1a518:	f43f adb8 	beq.w	1a08c <z_cbvprintf_impl+0x20>
   1a51c:	2858      	cmp	r0, #88	; 0x58
   1a51e:	d1ad      	bne.n	1a47c <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
   1a520:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1a524:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1a528:	9300      	str	r3, [sp, #0]
   1a52a:	aa12      	add	r2, sp, #72	; 0x48
   1a52c:	ab0a      	add	r3, sp, #40	; 0x28
   1a52e:	f7ff fd51 	bl	19fd4 <encode_uint>
			if (precision >= 0) {
   1a532:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   1a536:	4607      	mov	r7, r0
			if (precision >= 0) {
   1a538:	f280 8097 	bge.w	1a66a <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
   1a53c:	2f00      	cmp	r7, #0
   1a53e:	d09d      	beq.n	1a47c <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
   1a540:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
   1a544:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
   1a548:	2e00      	cmp	r6, #0
   1a54a:	d04e      	beq.n	1a5ea <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
   1a54c:	3001      	adds	r0, #1
   1a54e:	e04c      	b.n	1a5ea <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
   1a550:	3863      	subs	r0, #99	; 0x63
   1a552:	2815      	cmp	r0, #21
   1a554:	d892      	bhi.n	1a47c <z_cbvprintf_impl+0x410>
   1a556:	a201      	add	r2, pc, #4	; (adr r2, 1a55c <z_cbvprintf_impl+0x4f0>)
   1a558:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1a55c:	0001a5db 	.word	0x0001a5db
   1a560:	0001a641 	.word	0x0001a641
   1a564:	0001a47d 	.word	0x0001a47d
   1a568:	0001a47d 	.word	0x0001a47d
   1a56c:	0001a47d 	.word	0x0001a47d
   1a570:	0001a47d 	.word	0x0001a47d
   1a574:	0001a641 	.word	0x0001a641
   1a578:	0001a47d 	.word	0x0001a47d
   1a57c:	0001a47d 	.word	0x0001a47d
   1a580:	0001a47d 	.word	0x0001a47d
   1a584:	0001a47d 	.word	0x0001a47d
   1a588:	0001a6c9 	.word	0x0001a6c9
   1a58c:	0001a665 	.word	0x0001a665
   1a590:	0001a68b 	.word	0x0001a68b
   1a594:	0001a47d 	.word	0x0001a47d
   1a598:	0001a47d 	.word	0x0001a47d
   1a59c:	0001a5b5 	.word	0x0001a5b5
   1a5a0:	0001a47d 	.word	0x0001a47d
   1a5a4:	0001a665 	.word	0x0001a665
   1a5a8:	0001a47d 	.word	0x0001a47d
   1a5ac:	0001a47d 	.word	0x0001a47d
   1a5b0:	0001a665 	.word	0x0001a665
			if (precision >= 0) {
   1a5b4:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
   1a5b8:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
   1a5ba:	db0a      	blt.n	1a5d2 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
   1a5bc:	4659      	mov	r1, fp
   1a5be:	4638      	mov	r0, r7
   1a5c0:	f00e f9e3 	bl	2898a <strnlen>
			bpe = bps + len;
   1a5c4:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
   1a5c8:	2f00      	cmp	r7, #0
   1a5ca:	f43f af57 	beq.w	1a47c <z_cbvprintf_impl+0x410>
		char sign = 0;
   1a5ce:	2600      	movs	r6, #0
   1a5d0:	e00b      	b.n	1a5ea <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
   1a5d2:	4638      	mov	r0, r7
   1a5d4:	f7fe fd0a 	bl	18fec <strlen>
   1a5d8:	e7f4      	b.n	1a5c4 <z_cbvprintf_impl+0x558>
		char sign = 0;
   1a5da:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
   1a5dc:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1a5de:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
   1a5e0:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1a5e4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
   1a5e8:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
   1a5ea:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a5ee:	f013 0210 	ands.w	r2, r3, #16
   1a5f2:	9205      	str	r2, [sp, #20]
   1a5f4:	f000 8083 	beq.w	1a6fe <z_cbvprintf_impl+0x692>
			nj_len += 2U;
   1a5f8:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   1a5fa:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   1a5fc:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
   1a600:	bf48      	it	mi
   1a602:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   1a604:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
   1a606:	bf48      	it	mi
   1a608:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   1a60a:	f1b9 0f00 	cmp.w	r9, #0
   1a60e:	f340 8090 	ble.w	1a732 <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
   1a612:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   1a616:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
   1a61a:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1a61e:	0750      	lsls	r0, r2, #29
   1a620:	9306      	str	r3, [sp, #24]
   1a622:	f100 8086 	bmi.w	1a732 <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
   1a626:	0651      	lsls	r1, r2, #25
   1a628:	d579      	bpl.n	1a71e <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
   1a62a:	b13e      	cbz	r6, 1a63c <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   1a62c:	4630      	mov	r0, r6
   1a62e:	9903      	ldr	r1, [sp, #12]
   1a630:	47d0      	blx	sl
   1a632:	2800      	cmp	r0, #0
   1a634:	db70      	blt.n	1a718 <z_cbvprintf_impl+0x6ac>
   1a636:	9b06      	ldr	r3, [sp, #24]
   1a638:	3501      	adds	r5, #1
   1a63a:	461e      	mov	r6, r3
					pad = '0';
   1a63c:	2230      	movs	r2, #48	; 0x30
   1a63e:	e06f      	b.n	1a720 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
   1a640:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   1a642:	bf5a      	itte	pl
   1a644:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   1a648:	015e      	lslpl	r6, r3, #5
				sign = '+';
   1a64a:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
   1a64c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
   1a650:	2b00      	cmp	r3, #0
   1a652:	f6bf af65 	bge.w	1a520 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
   1a656:	4252      	negs	r2, r2
   1a658:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   1a65c:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1a65e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1a662:	e75d      	b.n	1a520 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
   1a664:	2600      	movs	r6, #0
   1a666:	e75b      	b.n	1a520 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
   1a668:	2600      	movs	r6, #0
				conv->flag_zero = false;
   1a66a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   1a66e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1a672:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   1a674:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1a678:	459b      	cmp	fp, r3
				conv->flag_zero = false;
   1a67a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   1a67e:	f67f af5d 	bls.w	1a53c <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
   1a682:	ebab 0303 	sub.w	r3, fp, r3
   1a686:	9313      	str	r3, [sp, #76]	; 0x4c
   1a688:	e758      	b.n	1a53c <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
   1a68a:	9810      	ldr	r0, [sp, #64]	; 0x40
   1a68c:	b380      	cbz	r0, 1a6f0 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1a68e:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
   1a692:	ab0a      	add	r3, sp, #40	; 0x28
   1a694:	2100      	movs	r1, #0
   1a696:	f8cd 8000 	str.w	r8, [sp]
   1a69a:	aa12      	add	r2, sp, #72	; 0x48
   1a69c:	f7ff fc9a 	bl	19fd4 <encode_uint>
				conv->altform_0c = true;
   1a6a0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
   1a6a4:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
   1a6a8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1a6ac:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1a6b0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1a6b4:	4607      	mov	r7, r0
				conv->altform_0c = true;
   1a6b6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
   1a6ba:	dad5      	bge.n	1a668 <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
   1a6bc:	2800      	cmp	r0, #0
   1a6be:	f43f aedd 	beq.w	1a47c <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
   1a6c2:	eba8 0000 	sub.w	r0, r8, r0
   1a6c6:	e782      	b.n	1a5ce <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
   1a6c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   1a6ca:	2907      	cmp	r1, #7
   1a6cc:	f63f aed6 	bhi.w	1a47c <z_cbvprintf_impl+0x410>
   1a6d0:	e8df f001 	tbb	[pc, r1]
   1a6d4:	0c06040c 	.word	0x0c06040c
   1a6d8:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   1a6dc:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   1a6de:	e6cd      	b.n	1a47c <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
   1a6e0:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   1a6e2:	e6cb      	b.n	1a47c <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
   1a6e4:	17ea      	asrs	r2, r5, #31
   1a6e6:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   1a6ea:	e6c7      	b.n	1a47c <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1a6ec:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   1a6ee:	e6c5      	b.n	1a47c <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
   1a6f0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1a7b0 <z_cbvprintf_impl+0x744>
		char sign = 0;
   1a6f4:	4606      	mov	r6, r0
   1a6f6:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
   1a6fa:	2005      	movs	r0, #5
   1a6fc:	e775      	b.n	1a5ea <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
   1a6fe:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   1a700:	bf48      	it	mi
   1a702:	3001      	addmi	r0, #1
   1a704:	e779      	b.n	1a5fa <z_cbvprintf_impl+0x58e>
					OUTC(pad);
   1a706:	4610      	mov	r0, r2
   1a708:	9307      	str	r3, [sp, #28]
   1a70a:	9206      	str	r2, [sp, #24]
   1a70c:	9903      	ldr	r1, [sp, #12]
   1a70e:	47d0      	blx	sl
   1a710:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a714:	2800      	cmp	r0, #0
   1a716:	da04      	bge.n	1a722 <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
   1a718:	b017      	add	sp, #92	; 0x5c
   1a71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1a71e:	2220      	movs	r2, #32
					pad = '0';
   1a720:	464b      	mov	r3, r9
				while (width-- > 0) {
   1a722:	4619      	mov	r1, r3
   1a724:	2900      	cmp	r1, #0
   1a726:	f103 33ff 	add.w	r3, r3, #4294967295
   1a72a:	dcec      	bgt.n	1a706 <z_cbvprintf_impl+0x69a>
   1a72c:	444d      	add	r5, r9
   1a72e:	4699      	mov	r9, r3
   1a730:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
   1a732:	b12e      	cbz	r6, 1a740 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
   1a734:	4630      	mov	r0, r6
   1a736:	9903      	ldr	r1, [sp, #12]
   1a738:	47d0      	blx	sl
   1a73a:	2800      	cmp	r0, #0
   1a73c:	dbec      	blt.n	1a718 <z_cbvprintf_impl+0x6ac>
   1a73e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1a740:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a744:	06da      	lsls	r2, r3, #27
   1a746:	d401      	bmi.n	1a74c <z_cbvprintf_impl+0x6e0>
   1a748:	071b      	lsls	r3, r3, #28
   1a74a:	d505      	bpl.n	1a758 <z_cbvprintf_impl+0x6ec>
				OUTC('0');
   1a74c:	2030      	movs	r0, #48	; 0x30
   1a74e:	9903      	ldr	r1, [sp, #12]
   1a750:	47d0      	blx	sl
   1a752:	2800      	cmp	r0, #0
   1a754:	dbe0      	blt.n	1a718 <z_cbvprintf_impl+0x6ac>
   1a756:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1a758:	9b05      	ldr	r3, [sp, #20]
   1a75a:	b133      	cbz	r3, 1a76a <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
   1a75c:	9903      	ldr	r1, [sp, #12]
   1a75e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1a762:	47d0      	blx	sl
   1a764:	2800      	cmp	r0, #0
   1a766:	dbd7      	blt.n	1a718 <z_cbvprintf_impl+0x6ac>
   1a768:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1a76a:	44ab      	add	fp, r5
   1a76c:	e005      	b.n	1a77a <z_cbvprintf_impl+0x70e>
				OUTC('0');
   1a76e:	2030      	movs	r0, #48	; 0x30
   1a770:	9903      	ldr	r1, [sp, #12]
   1a772:	47d0      	blx	sl
   1a774:	2800      	cmp	r0, #0
   1a776:	dbcf      	blt.n	1a718 <z_cbvprintf_impl+0x6ac>
   1a778:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1a77a:	ebab 0305 	sub.w	r3, fp, r5
   1a77e:	2b00      	cmp	r3, #0
   1a780:	dcf5      	bgt.n	1a76e <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
   1a782:	4643      	mov	r3, r8
   1a784:	463a      	mov	r2, r7
   1a786:	4650      	mov	r0, sl
   1a788:	9903      	ldr	r1, [sp, #12]
   1a78a:	f00b fbf6 	bl	25f7a <outs>
   1a78e:	2800      	cmp	r0, #0
   1a790:	dbc2      	blt.n	1a718 <z_cbvprintf_impl+0x6ac>
   1a792:	4405      	add	r5, r0
		while (width > 0) {
   1a794:	44a9      	add	r9, r5
   1a796:	eba9 0305 	sub.w	r3, r9, r5
   1a79a:	2b00      	cmp	r3, #0
   1a79c:	f77f ae6e 	ble.w	1a47c <z_cbvprintf_impl+0x410>
			OUTC(' ');
   1a7a0:	2020      	movs	r0, #32
   1a7a2:	9903      	ldr	r1, [sp, #12]
   1a7a4:	47d0      	blx	sl
   1a7a6:	2800      	cmp	r0, #0
   1a7a8:	dbb6      	blt.n	1a718 <z_cbvprintf_impl+0x6ac>
   1a7aa:	3501      	adds	r5, #1
			--width;
   1a7ac:	e7f3      	b.n	1a796 <z_cbvprintf_impl+0x72a>
   1a7ae:	bf00      	nop
   1a7b0:	00029998 	.word	0x00029998

0001a7b4 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   1a7b4:	f04f 0220 	mov.w	r2, #32
   1a7b8:	f3ef 8311 	mrs	r3, BASEPRI
   1a7bc:	f382 8812 	msr	BASEPRI_MAX, r2
   1a7c0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1a7c4:	2101      	movs	r1, #1
   1a7c6:	4a04      	ldr	r2, [pc, #16]	; (1a7d8 <nordicsemi_nrf91_init+0x24>)
   1a7c8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   1a7cc:	f383 8811 	msr	BASEPRI, r3
   1a7d0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1a7d4:	2000      	movs	r0, #0
   1a7d6:	4770      	bx	lr
   1a7d8:	40039000 	.word	0x40039000

0001a7dc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1a7dc:	b120      	cbz	r0, 1a7e8 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1a7de:	4b03      	ldr	r3, [pc, #12]	; (1a7ec <arch_busy_wait+0x10>)
   1a7e0:	0180      	lsls	r0, r0, #6
   1a7e2:	f043 0301 	orr.w	r3, r3, #1
   1a7e6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1a7e8:	4770      	bx	lr
   1a7ea:	bf00      	nop
   1a7ec:	00029140 	.word	0x00029140

0001a7f0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1a7f0:	f006 b884 	b.w	208fc <SystemInit>

0001a7f4 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   1a7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a7f8:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
   1a7fa:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
   1a7fc:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1a800:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1a854 <activate_foreach_backend+0x60>
	while (mask_cpy) {
   1a804:	b914      	cbnz	r4, 1a80c <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   1a806:	4638      	mov	r0, r7
   1a808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   1a80c:	fa94 f5a4 	rbit	r5, r4
   1a810:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   1a814:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1a818:	012e      	lsls	r6, r5, #4
   1a81a:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   1a81e:	ea6f 0a03 	mvn.w	sl, r3
   1a822:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1a826:	7b2b      	ldrb	r3, [r5, #12]
   1a828:	2b00      	cmp	r3, #0
   1a82a:	d0eb      	beq.n	1a804 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   1a82c:	f858 3006 	ldr.w	r3, [r8, r6]
   1a830:	691b      	ldr	r3, [r3, #16]
   1a832:	b94b      	cbnz	r3, 1a848 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   1a834:	4446      	add	r6, r8
			log_backend_enable(backend,
   1a836:	6873      	ldr	r3, [r6, #4]
   1a838:	2204      	movs	r2, #4
   1a83a:	4628      	mov	r0, r5
   1a83c:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   1a83e:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   1a842:	f000 fa49 	bl	1acd8 <log_backend_enable>
   1a846:	e7dd      	b.n	1a804 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   1a848:	4628      	mov	r0, r5
   1a84a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1a84c:	2800      	cmp	r0, #0
   1a84e:	d1d9      	bne.n	1a804 <activate_foreach_backend+0x10>
   1a850:	e7f0      	b.n	1a834 <activate_foreach_backend+0x40>
   1a852:	bf00      	nop
   1a854:	0002911c 	.word	0x0002911c

0001a858 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1a858:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1a85a:	2200      	movs	r2, #0
{
   1a85c:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   1a85e:	490f      	ldr	r1, [pc, #60]	; (1a89c <enable_logger+0x44>)
   1a860:	480f      	ldr	r0, [pc, #60]	; (1a8a0 <enable_logger+0x48>)
   1a862:	f00d ff47 	bl	286f4 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a866:	2200      	movs	r2, #0
   1a868:	2300      	movs	r3, #0
   1a86a:	2400      	movs	r4, #0
   1a86c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a870:	230e      	movs	r3, #14
   1a872:	4d0c      	ldr	r5, [pc, #48]	; (1a8a4 <enable_logger+0x4c>)
   1a874:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1a878:	f44f 7240 	mov.w	r2, #768	; 0x300
   1a87c:	4628      	mov	r0, r5
   1a87e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1a882:	4b09      	ldr	r3, [pc, #36]	; (1a8a8 <enable_logger+0x50>)
   1a884:	4909      	ldr	r1, [pc, #36]	; (1a8ac <enable_logger+0x54>)
   1a886:	9400      	str	r4, [sp, #0]
   1a888:	f009 f9ee 	bl	23c68 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1a88c:	4908      	ldr	r1, [pc, #32]	; (1a8b0 <enable_logger+0x58>)
   1a88e:	4628      	mov	r0, r5
   1a890:	f00d fcd5 	bl	2823e <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   1a894:	4620      	mov	r0, r4
   1a896:	b009      	add	sp, #36	; 0x24
   1a898:	bd30      	pop	{r4, r5, pc}
   1a89a:	bf00      	nop
   1a89c:	0001a8b5 	.word	0x0001a8b5
   1a8a0:	2000ce68 	.word	0x2000ce68
   1a8a4:	2000c9d8 	.word	0x2000c9d8
   1a8a8:	0001ab85 	.word	0x0001ab85
   1a8ac:	2000de60 	.word	0x2000de60
   1a8b0:	0002999d 	.word	0x0002999d

0001a8b4 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   1a8b4:	4801      	ldr	r0, [pc, #4]	; (1a8bc <log_process_thread_timer_expiry_fn+0x8>)
   1a8b6:	f009 bbbd 	b.w	24034 <z_impl_k_sem_give>
   1a8ba:	bf00      	nop
   1a8bc:	2000c90c 	.word	0x2000c90c

0001a8c0 <z_log_init>:
{
   1a8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a8c4:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   1a8c6:	481f      	ldr	r0, [pc, #124]	; (1a944 <z_log_init+0x84>)
{
   1a8c8:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   1a8ca:	f00b fd8f 	bl	263ec <atomic_inc>
   1a8ce:	4606      	mov	r6, r0
   1a8d0:	2800      	cmp	r0, #0
   1a8d2:	d030      	beq.n	1a936 <z_log_init+0x76>
	uint32_t mask = 0;
   1a8d4:	2500      	movs	r5, #0
}
   1a8d6:	4628      	mov	r0, r5
   1a8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   1a8dc:	7b23      	ldrb	r3, [r4, #12]
   1a8de:	b173      	cbz	r3, 1a8fe <z_log_init+0x3e>
	if (backend->api->init) {
   1a8e0:	6823      	ldr	r3, [r4, #0]
   1a8e2:	68db      	ldr	r3, [r3, #12]
   1a8e4:	b10b      	cbz	r3, 1a8ea <z_log_init+0x2a>
		backend->api->init(backend);
   1a8e6:	4620      	mov	r0, r4
   1a8e8:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   1a8ea:	6823      	ldr	r3, [r4, #0]
   1a8ec:	691b      	ldr	r3, [r3, #16]
   1a8ee:	b9d3      	cbnz	r3, 1a926 <z_log_init+0x66>
				log_backend_enable(backend,
   1a8f0:	6863      	ldr	r3, [r4, #4]
   1a8f2:	2204      	movs	r2, #4
   1a8f4:	4620      	mov	r0, r4
   1a8f6:	6819      	ldr	r1, [r3, #0]
   1a8f8:	f000 f9ee 	bl	1acd8 <log_backend_enable>
			i++;
   1a8fc:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1a8fe:	3410      	adds	r4, #16
   1a900:	454c      	cmp	r4, r9
   1a902:	d3eb      	bcc.n	1a8dc <z_log_init+0x1c>
	if (blocking) {
   1a904:	f1b8 0f00 	cmp.w	r8, #0
   1a908:	d0e5      	beq.n	1a8d6 <z_log_init+0x16>
		while (mask) {
   1a90a:	2d00      	cmp	r5, #0
   1a90c:	d0e2      	beq.n	1a8d4 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   1a90e:	4628      	mov	r0, r5
   1a910:	f7ff ff70 	bl	1a7f4 <activate_foreach_backend>
   1a914:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   1a916:	2f00      	cmp	r7, #0
   1a918:	d0f7      	beq.n	1a90a <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   1a91a:	2100      	movs	r1, #0
   1a91c:	f44f 70a4 	mov.w	r0, #328	; 0x148
   1a920:	f009 ffd2 	bl	248c8 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a924:	e7f1      	b.n	1a90a <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   1a926:	4620      	mov	r0, r4
   1a928:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   1a92a:	2800      	cmp	r0, #0
   1a92c:	d0e0      	beq.n	1a8f0 <z_log_init+0x30>
				mask |= BIT(i);
   1a92e:	fa0a f306 	lsl.w	r3, sl, r6
   1a932:	431d      	orrs	r5, r3
   1a934:	e7e2      	b.n	1a8fc <z_log_init+0x3c>
	uint32_t mask = 0;
   1a936:	4605      	mov	r5, r0
				mask |= BIT(i);
   1a938:	f04f 0a01 	mov.w	sl, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1a93c:	4c02      	ldr	r4, [pc, #8]	; (1a948 <z_log_init+0x88>)
   1a93e:	f8df 900c 	ldr.w	r9, [pc, #12]	; 1a94c <z_log_init+0x8c>
   1a942:	e7dd      	b.n	1a900 <z_log_init+0x40>
   1a944:	2000d14c 	.word	0x2000d14c
   1a948:	0002911c 	.word	0x0002911c
   1a94c:	0002912c 	.word	0x0002912c

0001a950 <log_format_func_t_get>:
}
   1a950:	4b01      	ldr	r3, [pc, #4]	; (1a958 <log_format_func_t_get+0x8>)
   1a952:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a956:	4770      	bx	lr
   1a958:	00029170 	.word	0x00029170

0001a95c <log_set_timestamp_func>:
{
   1a95c:	b508      	push	{r3, lr}
   1a95e:	4603      	mov	r3, r0
   1a960:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   1a962:	b12b      	cbz	r3, 1a970 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   1a964:	4a04      	ldr	r2, [pc, #16]	; (1a978 <log_set_timestamp_func+0x1c>)
   1a966:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   1a968:	f000 fc3e 	bl	1b1e8 <log_output_timestamp_freq_set>
	return 0;
   1a96c:	2000      	movs	r0, #0
}
   1a96e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1a970:	f06f 0015 	mvn.w	r0, #21
   1a974:	e7fb      	b.n	1a96e <log_set_timestamp_func+0x12>
   1a976:	bf00      	nop
   1a978:	2000c588 	.word	0x2000c588

0001a97c <z_log_notify_backend_enabled>:
{
   1a97c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   1a97e:	4c04      	ldr	r4, [pc, #16]	; (1a990 <z_log_notify_backend_enabled+0x14>)
   1a980:	7823      	ldrb	r3, [r4, #0]
   1a982:	b913      	cbnz	r3, 1a98a <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   1a984:	4803      	ldr	r0, [pc, #12]	; (1a994 <z_log_notify_backend_enabled+0x18>)
   1a986:	f009 fb55 	bl	24034 <z_impl_k_sem_give>
	backend_attached = true;
   1a98a:	2301      	movs	r3, #1
   1a98c:	7023      	strb	r3, [r4, #0]
}
   1a98e:	bd10      	pop	{r4, pc}
   1a990:	2000d903 	.word	0x2000d903
   1a994:	2000c90c 	.word	0x2000c90c

0001a998 <z_log_dropped>:
{
   1a998:	b510      	push	{r4, lr}
   1a99a:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   1a99c:	4806      	ldr	r0, [pc, #24]	; (1a9b8 <z_log_dropped+0x20>)
   1a99e:	f00b fd25 	bl	263ec <atomic_inc>
	if (buffered) {
   1a9a2:	b13c      	cbz	r4, 1a9b4 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a9a4:	4b05      	ldr	r3, [pc, #20]	; (1a9bc <z_log_dropped+0x24>)
   1a9a6:	e8d3 1fef 	ldaex	r1, [r3]
   1a9aa:	3901      	subs	r1, #1
   1a9ac:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1a9b0:	2a00      	cmp	r2, #0
   1a9b2:	d1f8      	bne.n	1a9a6 <z_log_dropped+0xe>
}
   1a9b4:	bd10      	pop	{r4, pc}
   1a9b6:	bf00      	nop
   1a9b8:	2000d144 	.word	0x2000d144
   1a9bc:	2000d148 	.word	0x2000d148

0001a9c0 <z_log_dropped_read_and_clear>:
}
   1a9c0:	2000      	movs	r0, #0
   1a9c2:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a9c4:	4b03      	ldr	r3, [pc, #12]	; (1a9d4 <z_log_dropped_read_and_clear+0x14>)
   1a9c6:	e8d3 0fef 	ldaex	r0, [r3]
   1a9ca:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1a9ce:	2a00      	cmp	r2, #0
   1a9d0:	d1f9      	bne.n	1a9c6 <z_log_dropped_read_and_clear+0x6>
   1a9d2:	4770      	bx	lr
   1a9d4:	2000d144 	.word	0x2000d144

0001a9d8 <dropped_notify>:
{
   1a9d8:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   1a9da:	f7ff fff1 	bl	1a9c0 <z_log_dropped_read_and_clear>
   1a9de:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1a9e0:	4c07      	ldr	r4, [pc, #28]	; (1aa00 <dropped_notify+0x28>)
   1a9e2:	4e08      	ldr	r6, [pc, #32]	; (1aa04 <dropped_notify+0x2c>)
   1a9e4:	42b4      	cmp	r4, r6
   1a9e6:	d300      	bcc.n	1a9ea <dropped_notify+0x12>
}
   1a9e8:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1a9ea:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1a9ec:	795b      	ldrb	r3, [r3, #5]
   1a9ee:	b12b      	cbz	r3, 1a9fc <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   1a9f0:	6823      	ldr	r3, [r4, #0]
   1a9f2:	685b      	ldr	r3, [r3, #4]
   1a9f4:	b113      	cbz	r3, 1a9fc <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   1a9f6:	4629      	mov	r1, r5
   1a9f8:	4620      	mov	r0, r4
   1a9fa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1a9fc:	3410      	adds	r4, #16
   1a9fe:	e7f1      	b.n	1a9e4 <dropped_notify+0xc>
   1aa00:	0002911c 	.word	0x0002911c
   1aa04:	0002912c 	.word	0x0002912c

0001aa08 <z_log_msg_init>:
{
   1aa08:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   1aa0a:	4c04      	ldr	r4, [pc, #16]	; (1aa1c <z_log_msg_init+0x14>)
   1aa0c:	4904      	ldr	r1, [pc, #16]	; (1aa20 <z_log_msg_init+0x18>)
   1aa0e:	4620      	mov	r0, r4
   1aa10:	f00b fb77 	bl	26102 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   1aa14:	4b03      	ldr	r3, [pc, #12]	; (1aa24 <z_log_msg_init+0x1c>)
   1aa16:	601c      	str	r4, [r3, #0]
}
   1aa18:	bd10      	pop	{r4, pc}
   1aa1a:	bf00      	nop
   1aa1c:	2000c7d0 	.word	0x2000c7d0
   1aa20:	0002915c 	.word	0x0002915c
   1aa24:	2000d13c 	.word	0x2000d13c

0001aa28 <log_core_init>:
{
   1aa28:	b508      	push	{r3, lr}
	panic_mode = false;
   1aa2a:	2300      	movs	r3, #0
   1aa2c:	4a06      	ldr	r2, [pc, #24]	; (1aa48 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
   1aa2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
   1aa32:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   1aa34:	4a05      	ldr	r2, [pc, #20]	; (1aa4c <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   1aa36:	4806      	ldr	r0, [pc, #24]	; (1aa50 <log_core_init+0x28>)
	dropped_cnt = 0;
   1aa38:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   1aa3a:	f7ff ff8f 	bl	1a95c <log_set_timestamp_func>
}
   1aa3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   1aa42:	f7ff bfe1 	b.w	1aa08 <z_log_msg_init>
   1aa46:	bf00      	nop
   1aa48:	2000d904 	.word	0x2000d904
   1aa4c:	2000d144 	.word	0x2000d144
   1aa50:	000263e9 	.word	0x000263e9

0001aa54 <z_log_msg_alloc>:
{
   1aa54:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   1aa56:	2200      	movs	r2, #0
   1aa58:	2300      	movs	r3, #0
   1aa5a:	4801      	ldr	r0, [pc, #4]	; (1aa60 <z_log_msg_alloc+0xc>)
   1aa5c:	f00b bb72 	b.w	26144 <mpsc_pbuf_alloc>
   1aa60:	2000c7d0 	.word	0x2000c7d0

0001aa64 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   1aa64:	4801      	ldr	r0, [pc, #4]	; (1aa6c <z_log_msg_local_claim+0x8>)
   1aa66:	f00b bc0b 	b.w	26280 <mpsc_pbuf_claim>
   1aa6a:	bf00      	nop
   1aa6c:	2000c7d0 	.word	0x2000c7d0

0001aa70 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   1aa70:	4b02      	ldr	r3, [pc, #8]	; (1aa7c <z_log_msg_free+0xc>)
{
   1aa72:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   1aa74:	6818      	ldr	r0, [r3, #0]
   1aa76:	f00b bc53 	b.w	26320 <mpsc_pbuf_free>
   1aa7a:	bf00      	nop
   1aa7c:	2000d13c 	.word	0x2000d13c

0001aa80 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   1aa80:	4801      	ldr	r0, [pc, #4]	; (1aa88 <z_log_msg_pending+0x8>)
   1aa82:	f00b bc81 	b.w	26388 <mpsc_pbuf_is_pending>
   1aa86:	bf00      	nop
   1aa88:	2000c7d0 	.word	0x2000c7d0

0001aa8c <z_impl_log_process>:
{
   1aa8c:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   1aa8e:	4b26      	ldr	r3, [pc, #152]	; (1ab28 <z_impl_log_process+0x9c>)
   1aa90:	7818      	ldrb	r0, [r3, #0]
   1aa92:	2800      	cmp	r0, #0
   1aa94:	d047      	beq.n	1ab26 <z_impl_log_process+0x9a>
	return z_log_msg_local_claim();
   1aa96:	f7ff ffe5 	bl	1aa64 <z_log_msg_local_claim>
	if (msg) {
   1aa9a:	4605      	mov	r5, r0
   1aa9c:	b170      	cbz	r0, 1aabc <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1aa9e:	4b23      	ldr	r3, [pc, #140]	; (1ab2c <z_impl_log_process+0xa0>)
   1aaa0:	e8d3 1fef 	ldaex	r1, [r3]
   1aaa4:	3901      	subs	r1, #1
   1aaa6:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1aaaa:	2a00      	cmp	r2, #0
   1aaac:	d1f8      	bne.n	1aaa0 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1aaae:	4c20      	ldr	r4, [pc, #128]	; (1ab30 <z_impl_log_process+0xa4>)
   1aab0:	4e20      	ldr	r6, [pc, #128]	; (1ab34 <z_impl_log_process+0xa8>)
   1aab2:	42b4      	cmp	r4, r6
   1aab4:	d32d      	bcc.n	1ab12 <z_impl_log_process+0x86>
		z_log_msg_free(msg);
   1aab6:	4628      	mov	r0, r5
   1aab8:	f7ff ffda 	bl	1aa70 <z_log_msg_free>
	return dropped_cnt > 0;
   1aabc:	4b1e      	ldr	r3, [pc, #120]	; (1ab38 <z_impl_log_process+0xac>)
   1aabe:	4c1f      	ldr	r4, [pc, #124]	; (1ab3c <z_impl_log_process+0xb0>)
		if ((dropped_pend || unordered_pend) &&
   1aac0:	681b      	ldr	r3, [r3, #0]
   1aac2:	2b00      	cmp	r3, #0
   1aac4:	dd19      	ble.n	1aafa <z_impl_log_process+0x6e>
	return z_impl_k_uptime_ticks();
   1aac6:	f00d fded 	bl	286a4 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1aaca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1aace:	fba0 0302 	umull	r0, r3, r0, r2
   1aad2:	fb02 3101 	mla	r1, r2, r1, r3
   1aad6:	0bc3      	lsrs	r3, r0, #15
   1aad8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   1aadc:	e9d4 2000 	ldrd	r2, r0, [r4]
   1aae0:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
   1aae2:	f240 32e9 	movw	r2, #1001	; 0x3e9
   1aae6:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   1aaea:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   1aaee:	4293      	cmp	r3, r2
   1aaf0:	f171 0100 	sbcs.w	r1, r1, #0
   1aaf4:	d301      	bcc.n	1aafa <z_impl_log_process+0x6e>
				dropped_notify();
   1aaf6:	f7ff ff6f 	bl	1a9d8 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   1aafa:	e9d4 3200 	ldrd	r3, r2, [r4]
   1aafe:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   1ab02:	f142 0200 	adc.w	r2, r2, #0
   1ab06:	e9c4 3200 	strd	r3, r2, [r4]
}
   1ab0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   1ab0e:	f7ff bfb7 	b.w	1aa80 <z_log_msg_pending>
	return backend->cb->active;
   1ab12:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   1ab14:	795b      	ldrb	r3, [r3, #5]
   1ab16:	b123      	cbz	r3, 1ab22 <z_impl_log_process+0x96>
	backend->api->process(backend, msg);
   1ab18:	6823      	ldr	r3, [r4, #0]
   1ab1a:	4629      	mov	r1, r5
   1ab1c:	4620      	mov	r0, r4
   1ab1e:	681b      	ldr	r3, [r3, #0]
   1ab20:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1ab22:	3410      	adds	r4, #16
   1ab24:	e7c5      	b.n	1aab2 <z_impl_log_process+0x26>
}
   1ab26:	bd70      	pop	{r4, r5, r6, pc}
   1ab28:	2000d903 	.word	0x2000d903
   1ab2c:	2000d148 	.word	0x2000d148
   1ab30:	0002911c 	.word	0x0002911c
   1ab34:	0002912c 	.word	0x0002912c
   1ab38:	2000d144 	.word	0x2000d144
   1ab3c:	2000ce60 	.word	0x2000ce60

0001ab40 <z_impl_log_panic>:
{
   1ab40:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   1ab42:	4d0d      	ldr	r5, [pc, #52]	; (1ab78 <z_impl_log_panic+0x38>)
   1ab44:	7829      	ldrb	r1, [r5, #0]
   1ab46:	b961      	cbnz	r1, 1ab62 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   1ab48:	2001      	movs	r0, #1
   1ab4a:	f7ff feb9 	bl	1a8c0 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1ab4e:	4c0b      	ldr	r4, [pc, #44]	; (1ab7c <z_impl_log_panic+0x3c>)
   1ab50:	4e0b      	ldr	r6, [pc, #44]	; (1ab80 <z_impl_log_panic+0x40>)
   1ab52:	42b4      	cmp	r4, r6
   1ab54:	d306      	bcc.n	1ab64 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   1ab56:	f7ff ff99 	bl	1aa8c <z_impl_log_process>
		while (log_process() == true) {
   1ab5a:	2800      	cmp	r0, #0
   1ab5c:	d1fb      	bne.n	1ab56 <z_impl_log_panic+0x16>
	panic_mode = true;
   1ab5e:	2301      	movs	r3, #1
   1ab60:	702b      	strb	r3, [r5, #0]
}
   1ab62:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   1ab64:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1ab66:	795b      	ldrb	r3, [r3, #5]
   1ab68:	b11b      	cbz	r3, 1ab72 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   1ab6a:	6823      	ldr	r3, [r4, #0]
   1ab6c:	4620      	mov	r0, r4
   1ab6e:	689b      	ldr	r3, [r3, #8]
   1ab70:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1ab72:	3410      	adds	r4, #16
   1ab74:	e7ed      	b.n	1ab52 <z_impl_log_panic+0x12>
   1ab76:	bf00      	nop
   1ab78:	2000d904 	.word	0x2000d904
   1ab7c:	0002911c 	.word	0x0002911c
   1ab80:	0002912c 	.word	0x0002912c

0001ab84 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   1ab84:	2100      	movs	r1, #0
{
   1ab86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   1ab8a:	4608      	mov	r0, r1
   1ab8c:	f7ff fe98 	bl	1a8c0 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1ab90:	4604      	mov	r4, r0
   1ab92:	b348      	cbz	r0, 1abe8 <log_process_thread_func+0x64>
   1ab94:	f240 6867 	movw	r8, #1639	; 0x667
   1ab98:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   1ab9c:	f009 feae 	bl	248fc <z_impl_z_current_get>
	proc_tid = process_tid;
   1aba0:	4b1a      	ldr	r3, [pc, #104]	; (1ac0c <log_process_thread_func+0x88>)
   1aba2:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1aba4:	b130      	cbz	r0, 1abb4 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   1aba6:	4b1a      	ldr	r3, [pc, #104]	; (1ac10 <log_process_thread_func+0x8c>)
	    process_tid &&
   1aba8:	681b      	ldr	r3, [r3, #0]
   1abaa:	2b09      	cmp	r3, #9
   1abac:	dd02      	ble.n	1abb4 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   1abae:	4819      	ldr	r0, [pc, #100]	; (1ac14 <log_process_thread_func+0x90>)
   1abb0:	f009 fa40 	bl	24034 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1abb4:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1abb6:	4f18      	ldr	r7, [pc, #96]	; (1ac18 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   1abb8:	f8df a058 	ldr.w	sl, [pc, #88]	; 1ac14 <log_process_thread_func+0x90>
		if (activate_mask) {
   1abbc:	b144      	cbz	r4, 1abd0 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   1abbe:	4620      	mov	r0, r4
   1abc0:	f7ff fe18 	bl	1a7f4 <activate_foreach_backend>
			if (!activate_mask) {
   1abc4:	4604      	mov	r4, r0
   1abc6:	b918      	cbnz	r0, 1abd0 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   1abc8:	f04f 38ff 	mov.w	r8, #4294967295
   1abcc:	f04f 39ff 	mov.w	r9, #4294967295
   1abd0:	f7ff ff5c 	bl	1aa8c <z_impl_log_process>
		if (log_process() == false) {
   1abd4:	4606      	mov	r6, r0
   1abd6:	b928      	cbnz	r0, 1abe4 <log_process_thread_func+0x60>
			if (processed_any) {
   1abd8:	b9b5      	cbnz	r5, 1ac08 <log_process_thread_func+0x84>
   1abda:	4642      	mov	r2, r8
   1abdc:	464b      	mov	r3, r9
   1abde:	4650      	mov	r0, sl
   1abe0:	f009 fa4e 	bl	24080 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1abe4:	4635      	mov	r5, r6
   1abe6:	e7e9      	b.n	1abbc <log_process_thread_func+0x38>
   1abe8:	f04f 38ff 	mov.w	r8, #4294967295
   1abec:	f04f 39ff 	mov.w	r9, #4294967295
   1abf0:	e7d4      	b.n	1ab9c <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   1abf2:	682b      	ldr	r3, [r5, #0]
   1abf4:	699b      	ldr	r3, [r3, #24]
   1abf6:	b11b      	cbz	r3, 1ac00 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   1abf8:	2200      	movs	r2, #0
   1abfa:	4628      	mov	r0, r5
   1abfc:	4611      	mov	r1, r2
   1abfe:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1ac00:	3510      	adds	r5, #16
   1ac02:	42bd      	cmp	r5, r7
   1ac04:	d3f5      	bcc.n	1abf2 <log_process_thread_func+0x6e>
   1ac06:	e7e8      	b.n	1abda <log_process_thread_func+0x56>
   1ac08:	4d04      	ldr	r5, [pc, #16]	; (1ac1c <log_process_thread_func+0x98>)
   1ac0a:	e7fa      	b.n	1ac02 <log_process_thread_func+0x7e>
   1ac0c:	2000d140 	.word	0x2000d140
   1ac10:	2000d148 	.word	0x2000d148
   1ac14:	2000c90c 	.word	0x2000c90c
   1ac18:	0002912c 	.word	0x0002912c
   1ac1c:	0002911c 	.word	0x0002911c

0001ac20 <z_log_msg_post_finalize>:
{
   1ac20:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   1ac22:	4818      	ldr	r0, [pc, #96]	; (1ac84 <z_log_msg_post_finalize+0x64>)
   1ac24:	f00b fbe2 	bl	263ec <atomic_inc>
	if (panic_mode) {
   1ac28:	4b17      	ldr	r3, [pc, #92]	; (1ac88 <z_log_msg_post_finalize+0x68>)
   1ac2a:	781b      	ldrb	r3, [r3, #0]
   1ac2c:	b17b      	cbz	r3, 1ac4e <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
   1ac2e:	f04f 0320 	mov.w	r3, #32
   1ac32:	f3ef 8411 	mrs	r4, BASEPRI
   1ac36:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac3a:	f3bf 8f6f 	isb	sy
   1ac3e:	f7ff ff25 	bl	1aa8c <z_impl_log_process>
	__asm__ volatile(
   1ac42:	f384 8811 	msr	BASEPRI, r4
   1ac46:	f3bf 8f6f 	isb	sy
}
   1ac4a:	b002      	add	sp, #8
   1ac4c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   1ac4e:	4b0f      	ldr	r3, [pc, #60]	; (1ac8c <z_log_msg_post_finalize+0x6c>)
   1ac50:	681b      	ldr	r3, [r3, #0]
   1ac52:	2b00      	cmp	r3, #0
   1ac54:	d0f9      	beq.n	1ac4a <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   1ac56:	b950      	cbnz	r0, 1ac6e <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   1ac58:	2200      	movs	r2, #0
   1ac5a:	2300      	movs	r3, #0
   1ac5c:	480c      	ldr	r0, [pc, #48]	; (1ac90 <z_log_msg_post_finalize+0x70>)
   1ac5e:	e9cd 2300 	strd	r2, r3, [sp]
   1ac62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1ac66:	2300      	movs	r3, #0
   1ac68:	f00a f886 	bl	24d78 <z_impl_k_timer_start>
   1ac6c:	e7ed      	b.n	1ac4a <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1ac6e:	280a      	cmp	r0, #10
   1ac70:	d1eb      	bne.n	1ac4a <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   1ac72:	4807      	ldr	r0, [pc, #28]	; (1ac90 <z_log_msg_post_finalize+0x70>)
   1ac74:	f00d fd4a 	bl	2870c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1ac78:	4806      	ldr	r0, [pc, #24]	; (1ac94 <z_log_msg_post_finalize+0x74>)
}
   1ac7a:	b002      	add	sp, #8
   1ac7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ac80:	f009 b9d8 	b.w	24034 <z_impl_k_sem_give>
   1ac84:	2000d148 	.word	0x2000d148
   1ac88:	2000d904 	.word	0x2000d904
   1ac8c:	2000d140 	.word	0x2000d140
   1ac90:	2000ce68 	.word	0x2000ce68
   1ac94:	2000c90c 	.word	0x2000c90c

0001ac98 <z_log_msg_commit>:
{
   1ac98:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   1ac9a:	4b06      	ldr	r3, [pc, #24]	; (1acb4 <z_log_msg_commit+0x1c>)
{
   1ac9c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1ac9e:	681b      	ldr	r3, [r3, #0]
   1aca0:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   1aca2:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   1aca4:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   1aca6:	4804      	ldr	r0, [pc, #16]	; (1acb8 <z_log_msg_commit+0x20>)
   1aca8:	f00b faca 	bl	26240 <mpsc_pbuf_commit>
}
   1acac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   1acb0:	f7ff bfb6 	b.w	1ac20 <z_log_msg_post_finalize>
   1acb4:	2000c588 	.word	0x2000c588
   1acb8:	2000c7d0 	.word	0x2000c7d0

0001acbc <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   1acbc:	4a04      	ldr	r2, [pc, #16]	; (1acd0 <log_source_name_get+0x14>)
   1acbe:	4b05      	ldr	r3, [pc, #20]	; (1acd4 <log_source_name_get+0x18>)
   1acc0:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   1acc2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   1acc6:	bf34      	ite	cc
   1acc8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   1accc:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   1acce:	4770      	bx	lr
   1acd0:	00028fe4 	.word	0x00028fe4
   1acd4:	0002911c 	.word	0x0002911c

0001acd8 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1acd8:	4b08      	ldr	r3, [pc, #32]	; (1acfc <log_backend_enable+0x24>)
{
   1acda:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   1acdc:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
   1acde:	6844      	ldr	r4, [r0, #4]
   1ace0:	111b      	asrs	r3, r3, #4
   1ace2:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   1ace4:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   1ace6:	6843      	ldr	r3, [r0, #4]
   1ace8:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
   1acea:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   1acec:	6843      	ldr	r3, [r0, #4]
   1acee:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   1acf0:	6843      	ldr	r3, [r0, #4]
   1acf2:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   1acf4:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
   1acf6:	f7ff be41 	b.w	1a97c <z_log_notify_backend_enabled>
   1acfa:	bf00      	nop
   1acfc:	0002911c 	.word	0x0002911c

0001ad00 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   1ad00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1ad04:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   1ad08:	b08f      	sub	sp, #60	; 0x3c
   1ad0a:	f3c1 2649 	ubfx	r6, r1, #9, #10
   1ad0e:	460d      	mov	r5, r1
   1ad10:	4690      	mov	r8, r2
   1ad12:	4699      	mov	r9, r3
   1ad14:	9005      	str	r0, [sp, #20]
   1ad16:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   1ad18:	2e00      	cmp	r6, #0
   1ad1a:	d03c      	beq.n	1ad96 <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
   1ad1c:	f04f 0b04 	mov.w	fp, #4
   1ad20:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
   1ad24:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
   1ad26:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   1ad28:	4631      	mov	r1, r6
   1ad2a:	ab0b      	add	r3, sp, #44	; 0x2c
   1ad2c:	4640      	mov	r0, r8
   1ad2e:	f8cd b008 	str.w	fp, [sp, #8]
   1ad32:	9701      	str	r7, [sp, #4]
   1ad34:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
   1ad38:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
   1ad3c:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   1ad3e:	9607      	str	r6, [sp, #28]
   1ad40:	f7fe fdc2 	bl	198c8 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   1ad44:	f3c0 0309 	ubfx	r3, r0, #0, #10
   1ad48:	1918      	adds	r0, r3, r4
   1ad4a:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1ad4e:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   1ad50:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1ad52:	f363 2552 	bfi	r5, r3, #9, #10
   1ad56:	9306      	str	r3, [sp, #24]
   1ad58:	f7ff fe7c 	bl	1aa54 <z_log_msg_alloc>
		if (msg) {
   1ad5c:	4604      	mov	r4, r0
   1ad5e:	b178      	cbz	r0, 1ad80 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
   1ad60:	2200      	movs	r2, #0
   1ad62:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   1ad64:	3010      	adds	r0, #16
   1ad66:	900b      	str	r0, [sp, #44]	; 0x2c
   1ad68:	930c      	str	r3, [sp, #48]	; 0x30
   1ad6a:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   1ad6c:	4640      	mov	r0, r8
   1ad6e:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   1ad72:	4a0c      	ldr	r2, [pc, #48]	; (1ada4 <z_impl_z_log_msg_static_create+0xa4>)
   1ad74:	9907      	ldr	r1, [sp, #28]
   1ad76:	f8cd a000 	str.w	sl, [sp]
   1ad7a:	ab0b      	add	r3, sp, #44	; 0x2c
   1ad7c:	f7fe fda4 	bl	198c8 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   1ad80:	f366 2552 	bfi	r5, r6, #9, #10
   1ad84:	464b      	mov	r3, r9
   1ad86:	462a      	mov	r2, r5
   1ad88:	4620      	mov	r0, r4
   1ad8a:	9905      	ldr	r1, [sp, #20]
}
   1ad8c:	b00f      	add	sp, #60	; 0x3c
   1ad8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   1ad92:	f00b bb5d 	b.w	26450 <z_log_msg_finalize>
   1ad96:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1ad9a:	0880      	lsrs	r0, r0, #2
   1ad9c:	f7ff fe5a 	bl	1aa54 <z_log_msg_alloc>
   1ada0:	4604      	mov	r4, r0
   1ada2:	e7ed      	b.n	1ad80 <z_impl_z_log_msg_static_create+0x80>
   1ada4:	00026425 	.word	0x00026425

0001ada8 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   1ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1adac:	b087      	sub	sp, #28
   1adae:	4604      	mov	r4, r0
   1adb0:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   1adb4:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   1adb8:	460f      	mov	r7, r1
   1adba:	4693      	mov	fp, r2
   1adbc:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   1adbe:	b3b6      	cbz	r6, 1ae2e <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   1adc0:	2110      	movs	r1, #16
   1adc2:	4633      	mov	r3, r6
   1adc4:	4652      	mov	r2, sl
   1adc6:	2000      	movs	r0, #0
   1adc8:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
   1adcc:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   1add0:	f7fe fba6 	bl	19520 <cbvprintf_package>
   1add4:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   1add6:	4b17      	ldr	r3, [pc, #92]	; (1ae34 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
   1add8:	f004 0407 	and.w	r4, r4, #7
   1addc:	f00b 0b07 	and.w	fp, fp, #7
   1ade0:	00e4      	lsls	r4, r4, #3
   1ade2:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1ade6:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
   1adea:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
   1adee:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1adf0:	4408      	add	r0, r1
	struct log_msg_desc desc =
   1adf2:	4b11      	ldr	r3, [pc, #68]	; (1ae38 <z_impl_z_log_msg_runtime_vcreate+0x90>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1adf4:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   1adf8:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   1adfc:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   1adfe:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1ae00:	9103      	str	r1, [sp, #12]
		msg = z_log_msg_alloc(msg_wlen);
   1ae02:	f7ff fe27 	bl	1aa54 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   1ae06:	4605      	mov	r5, r0
   1ae08:	b140      	cbz	r0, 1ae1c <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   1ae0a:	b13e      	cbz	r6, 1ae1c <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   1ae0c:	4633      	mov	r3, r6
   1ae0e:	4652      	mov	r2, sl
   1ae10:	9903      	ldr	r1, [sp, #12]
   1ae12:	f8cd 9000 	str.w	r9, [sp]
   1ae16:	3010      	adds	r0, #16
   1ae18:	f7fe fb82 	bl	19520 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   1ae1c:	4643      	mov	r3, r8
   1ae1e:	4622      	mov	r2, r4
   1ae20:	4639      	mov	r1, r7
   1ae22:	4628      	mov	r0, r5
	}
}
   1ae24:	b007      	add	sp, #28
   1ae26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   1ae2a:	f00b bb11 	b.w	26450 <z_log_msg_finalize>
		plen = 0;
   1ae2e:	4631      	mov	r1, r6
   1ae30:	e7d1      	b.n	1add6 <z_impl_z_log_msg_runtime_vcreate+0x2e>
   1ae32:	bf00      	nop
   1ae34:	0007fe00 	.word	0x0007fe00
   1ae38:	7ff80000 	.word	0x7ff80000

0001ae3c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1ae3c:	b40e      	push	{r1, r2, r3}
   1ae3e:	b503      	push	{r0, r1, lr}
   1ae40:	ab03      	add	r3, sp, #12
   1ae42:	f853 2b04 	ldr.w	r2, [r3], #4
   1ae46:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1ae48:	4804      	ldr	r0, [pc, #16]	; (1ae5c <print_formatted+0x20>)
	va_start(args, fmt);
   1ae4a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1ae4c:	f00b fb27 	bl	2649e <cbvprintf>
	va_end(args);

	return length;
}
   1ae50:	b002      	add	sp, #8
   1ae52:	f85d eb04 	ldr.w	lr, [sp], #4
   1ae56:	b003      	add	sp, #12
   1ae58:	4770      	bx	lr
   1ae5a:	bf00      	nop
   1ae5c:	000264c7 	.word	0x000264c7

0001ae60 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1ae60:	06ca      	lsls	r2, r1, #27
   1ae62:	d405      	bmi.n	1ae70 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1ae64:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   1ae66:	bf4c      	ite	mi
   1ae68:	4902      	ldrmi	r1, [pc, #8]	; (1ae74 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   1ae6a:	4903      	ldrpl	r1, [pc, #12]	; (1ae78 <newline_print+0x18>)
   1ae6c:	f7ff bfe6 	b.w	1ae3c <print_formatted>
	}
}
   1ae70:	4770      	bx	lr
   1ae72:	bf00      	nop
   1ae74:	0002b416 	.word	0x0002b416
   1ae78:	0002b415 	.word	0x0002b415

0001ae7c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   1ae7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae80:	b089      	sub	sp, #36	; 0x24
   1ae82:	469a      	mov	sl, r3
   1ae84:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
   1ae88:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
   1ae8c:	9305      	str	r3, [sp, #20]
   1ae8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ae90:	4604      	mov	r4, r0
   1ae92:	460d      	mov	r5, r1
   1ae94:	9e16      	ldr	r6, [sp, #88]	; 0x58
   1ae96:	9206      	str	r2, [sp, #24]
   1ae98:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   1ae9a:	f1bb 0f00 	cmp.w	fp, #0
   1ae9e:	f000 8085 	beq.w	1afac <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1aea2:	f006 0308 	and.w	r3, r6, #8
   1aea6:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   1aea8:	f00b faba 	bl	26420 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   1aeac:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
   1aeb0:	4602      	mov	r2, r0
   1aeb2:	2800      	cmp	r0, #0
   1aeb4:	d049      	beq.n	1af4a <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
   1aeb6:	4620      	mov	r0, r4
   1aeb8:	4985      	ldr	r1, [pc, #532]	; (1b0d0 <log_output_process+0x254>)
   1aeba:	f7ff ffbf 	bl	1ae3c <print_formatted>
   1aebe:	4680      	mov	r8, r0
	if (stamp) {
   1aec0:	f1b9 0f00 	cmp.w	r9, #0
   1aec4:	d008      	beq.n	1aed8 <log_output_process+0x5c>
	if (!format) {
   1aec6:	f016 0f44 	tst.w	r6, #68	; 0x44
   1aeca:	d140      	bne.n	1af4e <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
   1aecc:	462a      	mov	r2, r5
   1aece:	4620      	mov	r0, r4
   1aed0:	4980      	ldr	r1, [pc, #512]	; (1b0d4 <log_output_process+0x258>)
   1aed2:	f7ff ffb3 	bl	1ae3c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   1aed6:	4480      	add	r8, r0
	if (color) {
   1aed8:	f006 0301 	and.w	r3, r6, #1
   1aedc:	b153      	cbz	r3, 1aef4 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
   1aede:	4b7e      	ldr	r3, [pc, #504]	; (1b0d8 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
   1aee0:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
   1aee2:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
   1aee6:	4b7d      	ldr	r3, [pc, #500]	; (1b0dc <log_output_process+0x260>)
   1aee8:	497d      	ldr	r1, [pc, #500]	; (1b0e0 <log_output_process+0x264>)
   1aeea:	2a00      	cmp	r2, #0
   1aeec:	bf08      	it	eq
   1aeee:	461a      	moveq	r2, r3
   1aef0:	f7ff ffa4 	bl	1ae3c <print_formatted>
	if (level_on) {
   1aef4:	f006 0308 	and.w	r3, r6, #8
   1aef8:	2b00      	cmp	r3, #0
   1aefa:	d054      	beq.n	1afa6 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
   1aefc:	4b79      	ldr	r3, [pc, #484]	; (1b0e4 <log_output_process+0x268>)
   1aefe:	4620      	mov	r0, r4
   1af00:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
   1af04:	4978      	ldr	r1, [pc, #480]	; (1b0e8 <log_output_process+0x26c>)
   1af06:	f7ff ff99 	bl	1ae3c <print_formatted>
   1af0a:	4605      	mov	r5, r0
	if (domain) {
   1af0c:	9b06      	ldr	r3, [sp, #24]
   1af0e:	b12b      	cbz	r3, 1af1c <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
   1af10:	461a      	mov	r2, r3
   1af12:	4620      	mov	r0, r4
   1af14:	4975      	ldr	r1, [pc, #468]	; (1b0ec <log_output_process+0x270>)
   1af16:	f7ff ff91 	bl	1ae3c <print_formatted>
   1af1a:	4405      	add	r5, r0
	if (source) {
   1af1c:	f1ba 0f00 	cmp.w	sl, #0
   1af20:	d005      	beq.n	1af2e <log_output_process+0xb2>
		total += print_formatted(output,
   1af22:	4652      	mov	r2, sl
   1af24:	4620      	mov	r0, r4
   1af26:	4972      	ldr	r1, [pc, #456]	; (1b0f0 <log_output_process+0x274>)
   1af28:	f7ff ff88 	bl	1ae3c <print_formatted>
   1af2c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   1af2e:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   1af30:	2f00      	cmp	r7, #0
   1af32:	d149      	bne.n	1afc8 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   1af34:	9b04      	ldr	r3, [sp, #16]
   1af36:	2b00      	cmp	r3, #0
   1af38:	d14f      	bne.n	1afda <log_output_process+0x15e>
	if (color) {
   1af3a:	07f3      	lsls	r3, r6, #31
   1af3c:	f100 80c1 	bmi.w	1b0c2 <log_output_process+0x246>
	newline_print(output, flags);
   1af40:	4631      	mov	r1, r6
   1af42:	4620      	mov	r0, r4
   1af44:	f7ff ff8c 	bl	1ae60 <newline_print>
}
   1af48:	e0b5      	b.n	1b0b6 <log_output_process+0x23a>
	uint32_t length = 0U;
   1af4a:	4680      	mov	r8, r0
   1af4c:	e7b8      	b.n	1aec0 <log_output_process+0x44>
	} else if (freq != 0U) {
   1af4e:	4b69      	ldr	r3, [pc, #420]	; (1b0f4 <log_output_process+0x278>)
   1af50:	6818      	ldr	r0, [r3, #0]
   1af52:	2800      	cmp	r0, #0
   1af54:	d0bf      	beq.n	1aed6 <log_output_process+0x5a>
		timestamp /= timestamp_div;
   1af56:	4b68      	ldr	r3, [pc, #416]	; (1b0f8 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   1af58:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
   1af5c:	681b      	ldr	r3, [r3, #0]
   1af5e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1af62:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   1af66:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   1af6a:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
   1af6e:	fb09 f505 	mul.w	r5, r9, r5
   1af72:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1af76:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
   1af7a:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   1af7e:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1af82:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
   1af86:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1af8a:	fb09 f505 	mul.w	r5, r9, r5
   1af8e:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   1af92:	fb0c 1113 	mls	r1, ip, r3, r1
   1af96:	4620      	mov	r0, r4
   1af98:	9100      	str	r1, [sp, #0]
   1af9a:	e9cd e501 	strd	lr, r5, [sp, #4]
   1af9e:	4957      	ldr	r1, [pc, #348]	; (1b0fc <log_output_process+0x280>)
   1afa0:	f7ff ff4c 	bl	1ae3c <print_formatted>
   1afa4:	e797      	b.n	1aed6 <log_output_process+0x5a>
	int total = 0;
   1afa6:	f006 0508 	and.w	r5, r6, #8
   1afaa:	e7af      	b.n	1af0c <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1afac:	f1ba 0f01 	cmp.w	sl, #1
   1afb0:	d106      	bne.n	1afc0 <log_output_process+0x144>
	if (package) {
   1afb2:	2f00      	cmp	r7, #0
   1afb4:	d165      	bne.n	1b082 <log_output_process+0x206>
	if (data_len) {
   1afb6:	9b04      	ldr	r3, [sp, #16]
   1afb8:	2b00      	cmp	r3, #0
   1afba:	d07c      	beq.n	1b0b6 <log_output_process+0x23a>
		prefix_offset = 0;
   1afbc:	2500      	movs	r5, #0
   1afbe:	e00c      	b.n	1afda <log_output_process+0x15e>
	if (package) {
   1afc0:	2f00      	cmp	r7, #0
   1afc2:	d0f8      	beq.n	1afb6 <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1afc4:	484e      	ldr	r0, [pc, #312]	; (1b100 <log_output_process+0x284>)
   1afc6:	e05d      	b.n	1b084 <log_output_process+0x208>
		cb = out_func;
   1afc8:	484e      	ldr	r0, [pc, #312]	; (1b104 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   1afca:	463b      	mov	r3, r7
   1afcc:	4622      	mov	r2, r4
   1afce:	494e      	ldr	r1, [pc, #312]	; (1b108 <log_output_process+0x28c>)
   1afd0:	f00a fc88 	bl	258e4 <cbpprintf_external>
	if (data_len) {
   1afd4:	9b04      	ldr	r3, [sp, #16]
   1afd6:	2b00      	cmp	r3, #0
   1afd8:	d069      	beq.n	1b0ae <log_output_process+0x232>
		print_formatted(output, " ");
   1afda:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1b10c <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
   1afde:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1b110 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1afe2:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
   1afe4:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1afe6:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   1afe8:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1afea:	bf28      	it	cs
   1afec:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
   1afee:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
   1aff2:	f7ff ff35 	bl	1ae60 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   1aff6:	4555      	cmp	r5, sl
   1aff8:	dc46      	bgt.n	1b088 <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
   1affa:	9b05      	ldr	r3, [sp, #20]
   1affc:	4649      	mov	r1, r9
   1affe:	4620      	mov	r0, r4
   1b000:	781a      	ldrb	r2, [r3, #0]
   1b002:	f7ff ff1b 	bl	1ae3c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b006:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
   1b00a:	f01a 0f07 	tst.w	sl, #7
   1b00e:	d103      	bne.n	1b018 <log_output_process+0x19c>
			print_formatted(output, " ");
   1b010:	4641      	mov	r1, r8
   1b012:	4620      	mov	r0, r4
   1b014:	f7ff ff12 	bl	1ae3c <print_formatted>
		if (i < length) {
   1b018:	4557      	cmp	r7, sl
   1b01a:	d93c      	bls.n	1b096 <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
   1b01c:	9b05      	ldr	r3, [sp, #20]
   1b01e:	4649      	mov	r1, r9
   1b020:	4620      	mov	r0, r4
   1b022:	f813 200a 	ldrb.w	r2, [r3, sl]
   1b026:	f7ff ff09 	bl	1ae3c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b02a:	f10a 0a01 	add.w	sl, sl, #1
   1b02e:	f1ba 0f10 	cmp.w	sl, #16
   1b032:	d1ea      	bne.n	1b00a <log_output_process+0x18e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b034:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
   1b038:	4620      	mov	r0, r4
   1b03a:	4936      	ldr	r1, [pc, #216]	; (1b114 <log_output_process+0x298>)
   1b03c:	f7ff fefe 	bl	1ae3c <print_formatted>
		if (i < length) {
   1b040:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
   1b042:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
   1b044:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
   1b046:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
   1b048:	4b33      	ldr	r3, [pc, #204]	; (1b118 <log_output_process+0x29c>)
   1b04a:	5c99      	ldrb	r1, [r3, r2]
   1b04c:	f011 0f97 	tst.w	r1, #151	; 0x97
   1b050:	bf08      	it	eq
   1b052:	222e      	moveq	r2, #46	; 0x2e
   1b054:	4931      	ldr	r1, [pc, #196]	; (1b11c <log_output_process+0x2a0>)
   1b056:	f7ff fef1 	bl	1ae3c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b05a:	f10a 0a01 	add.w	sl, sl, #1
   1b05e:	f1ba 0f10 	cmp.w	sl, #16
   1b062:	d01d      	beq.n	1b0a0 <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
   1b064:	f01a 0f07 	tst.w	sl, #7
   1b068:	d103      	bne.n	1b072 <log_output_process+0x1f6>
			print_formatted(output, " ");
   1b06a:	4641      	mov	r1, r8
   1b06c:	4620      	mov	r0, r4
   1b06e:	f7ff fee5 	bl	1ae3c <print_formatted>
		if (i < length) {
   1b072:	4557      	cmp	r7, sl
   1b074:	4652      	mov	r2, sl
   1b076:	d8e4      	bhi.n	1b042 <log_output_process+0x1c6>
			print_formatted(output, " ");
   1b078:	4641      	mov	r1, r8
   1b07a:	4620      	mov	r0, r4
   1b07c:	f7ff fede 	bl	1ae3c <print_formatted>
   1b080:	e7eb      	b.n	1b05a <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1b082:	4820      	ldr	r0, [pc, #128]	; (1b104 <log_output_process+0x288>)
		prefix_offset = 0;
   1b084:	465d      	mov	r5, fp
   1b086:	e7a0      	b.n	1afca <log_output_process+0x14e>
		print_formatted(output, " ");
   1b088:	4641      	mov	r1, r8
   1b08a:	4620      	mov	r0, r4
   1b08c:	f7ff fed6 	bl	1ae3c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1b090:	f10a 0a01 	add.w	sl, sl, #1
   1b094:	e7af      	b.n	1aff6 <log_output_process+0x17a>
			print_formatted(output, "   ");
   1b096:	4620      	mov	r0, r4
   1b098:	4921      	ldr	r1, [pc, #132]	; (1b120 <log_output_process+0x2a4>)
   1b09a:	f7ff fecf 	bl	1ae3c <print_formatted>
   1b09e:	e7c4      	b.n	1b02a <log_output_process+0x1ae>
		data += length;
   1b0a0:	9b05      	ldr	r3, [sp, #20]
   1b0a2:	443b      	add	r3, r7
   1b0a4:	9305      	str	r3, [sp, #20]
	} while (len);
   1b0a6:	9b04      	ldr	r3, [sp, #16]
   1b0a8:	1bdb      	subs	r3, r3, r7
   1b0aa:	9304      	str	r3, [sp, #16]
   1b0ac:	d199      	bne.n	1afe2 <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   1b0ae:	f1bb 0f00 	cmp.w	fp, #0
   1b0b2:	f47f af42 	bne.w	1af3a <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   1b0b6:	4620      	mov	r0, r4
}
   1b0b8:	b009      	add	sp, #36	; 0x24
   1b0ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   1b0be:	f00b b9f5 	b.w	264ac <log_output_flush>
		print_formatted(output, "%s", log_color);
   1b0c2:	4620      	mov	r0, r4
   1b0c4:	4a05      	ldr	r2, [pc, #20]	; (1b0dc <log_output_process+0x260>)
   1b0c6:	4906      	ldr	r1, [pc, #24]	; (1b0e0 <log_output_process+0x264>)
   1b0c8:	f7ff feb8 	bl	1ae3c <print_formatted>
}
   1b0cc:	e738      	b.n	1af40 <log_output_process+0xc4>
   1b0ce:	bf00      	nop
   1b0d0:	000299b7 	.word	0x000299b7
   1b0d4:	000299bb 	.word	0x000299bb
   1b0d8:	00029180 	.word	0x00029180
   1b0dc:	000299b2 	.word	0x000299b2
   1b0e0:	0002a996 	.word	0x0002a996
   1b0e4:	00029194 	.word	0x00029194
   1b0e8:	000299e0 	.word	0x000299e0
   1b0ec:	000299e6 	.word	0x000299e6
   1b0f0:	000299ea 	.word	0x000299ea
   1b0f4:	2000d154 	.word	0x2000d154
   1b0f8:	2000d150 	.word	0x2000d150
   1b0fc:	000299c4 	.word	0x000299c4
   1b100:	000264f5 	.word	0x000264f5
   1b104:	000264c7 	.word	0x000264c7
   1b108:	0002649f 	.word	0x0002649f
   1b10c:	000299f7 	.word	0x000299f7
   1b110:	000299ef 	.word	0x000299ef
   1b114:	000299f9 	.word	0x000299f9
   1b118:	0002b6b6 	.word	0x0002b6b6
   1b11c:	000299fb 	.word	0x000299fb
   1b120:	000299f5 	.word	0x000299f5

0001b124 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   1b124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   1b128:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   1b12a:	684b      	ldr	r3, [r1, #4]
   1b12c:	4605      	mov	r5, r0
   1b12e:	460c      	mov	r4, r1
   1b130:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   1b132:	688e      	ldr	r6, [r1, #8]
   1b134:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
   1b136:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   1b13a:	b15b      	cbz	r3, 1b154 <log_output_msg_process+0x30>
   1b13c:	4a13      	ldr	r2, [pc, #76]	; (1b18c <log_output_msg_process+0x68>)
   1b13e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   1b140:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1b144:	2900      	cmp	r1, #0
   1b146:	db1f      	blt.n	1b188 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   1b148:	7820      	ldrb	r0, [r4, #0]
   1b14a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   1b14e:	f7ff fdb5 	bl	1acbc <log_source_name_get>
   1b152:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   1b154:	4621      	mov	r1, r4
   1b156:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
   1b15a:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   1b15c:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   1b160:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   1b162:	eb01 0402 	add.w	r4, r1, r2
   1b166:	bf08      	it	eq
   1b168:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
   1b16a:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   1b16e:	e9cd 0803 	strd	r0, r8, [sp, #12]
   1b172:	e9cd 1401 	strd	r1, r4, [sp, #4]
   1b176:	2200      	movs	r2, #0
   1b178:	4631      	mov	r1, r6
   1b17a:	4628      	mov	r0, r5
   1b17c:	9700      	str	r7, [sp, #0]
   1b17e:	f7ff fe7d 	bl	1ae7c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   1b182:	b006      	add	sp, #24
   1b184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1b188:	2300      	movs	r3, #0
   1b18a:	e7e3      	b.n	1b154 <log_output_msg_process+0x30>
   1b18c:	00028fe4 	.word	0x00028fe4

0001b190 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1b190:	f242 730f 	movw	r3, #9999	; 0x270f
{
   1b194:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1b196:	428b      	cmp	r3, r1
   1b198:	bf28      	it	cs
   1b19a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   1b19c:	6805      	ldr	r5, [r0, #0]
{
   1b19e:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1b1a0:	2105      	movs	r1, #5
   1b1a2:	4668      	mov	r0, sp
   1b1a4:	4a0d      	ldr	r2, [pc, #52]	; (1b1dc <log_output_dropped_process+0x4c>)
   1b1a6:	f00a fc24 	bl	259f2 <snprintk>
   1b1aa:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1b1ac:	6863      	ldr	r3, [r4, #4]
   1b1ae:	4628      	mov	r0, r5
   1b1b0:	220b      	movs	r2, #11
   1b1b2:	685b      	ldr	r3, [r3, #4]
   1b1b4:	490a      	ldr	r1, [pc, #40]	; (1b1e0 <log_output_dropped_process+0x50>)
   1b1b6:	f00b f965 	bl	26484 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   1b1ba:	6863      	ldr	r3, [r4, #4]
   1b1bc:	4632      	mov	r2, r6
   1b1be:	4669      	mov	r1, sp
   1b1c0:	4628      	mov	r0, r5
   1b1c2:	685b      	ldr	r3, [r3, #4]
   1b1c4:	f00b f95e 	bl	26484 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1b1c8:	6863      	ldr	r3, [r4, #4]
   1b1ca:	221b      	movs	r2, #27
   1b1cc:	4628      	mov	r0, r5
   1b1ce:	685b      	ldr	r3, [r3, #4]
   1b1d0:	4904      	ldr	r1, [pc, #16]	; (1b1e4 <log_output_dropped_process+0x54>)
   1b1d2:	f00b f957 	bl	26484 <buffer_write>
		     output->control_block->ctx);
}
   1b1d6:	b002      	add	sp, #8
   1b1d8:	bd70      	pop	{r4, r5, r6, pc}
   1b1da:	bf00      	nop
   1b1dc:	0002ad01 	.word	0x0002ad01
   1b1e0:	00029a1a 	.word	0x00029a1a
   1b1e4:	000299fe 	.word	0x000299fe

0001b1e8 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1b1e8:	2100      	movs	r1, #0
   1b1ea:	2301      	movs	r3, #1
   1b1ec:	4a06      	ldr	r2, [pc, #24]	; (1b208 <log_output_timestamp_freq_set+0x20>)
   1b1ee:	4290      	cmp	r0, r2
   1b1f0:	d806      	bhi.n	1b200 <log_output_timestamp_freq_set+0x18>
   1b1f2:	4a06      	ldr	r2, [pc, #24]	; (1b20c <log_output_timestamp_freq_set+0x24>)
   1b1f4:	b901      	cbnz	r1, 1b1f8 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   1b1f6:	2301      	movs	r3, #1
   1b1f8:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1b1fa:	4b05      	ldr	r3, [pc, #20]	; (1b210 <log_output_timestamp_freq_set+0x28>)
   1b1fc:	6018      	str	r0, [r3, #0]
}
   1b1fe:	4770      	bx	lr
		timestamp_div *= 2U;
   1b200:	2101      	movs	r1, #1
		frequency /= 2U;
   1b202:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1b204:	005b      	lsls	r3, r3, #1
   1b206:	e7f2      	b.n	1b1ee <log_output_timestamp_freq_set+0x6>
   1b208:	000f4240 	.word	0x000f4240
   1b20c:	2000d150 	.word	0x2000d150
   1b210:	2000d154 	.word	0x2000d154

0001b214 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   1b214:	4b01      	ldr	r3, [pc, #4]	; (1b21c <format_set+0x8>)
	return 0;
}
   1b216:	2000      	movs	r0, #0
	log_format_current = log_type;
   1b218:	6019      	str	r1, [r3, #0]
}
   1b21a:	4770      	bx	lr
   1b21c:	2000d16c 	.word	0x2000d16c

0001b220 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   1b220:	2201      	movs	r2, #1
   1b222:	4b02      	ldr	r3, [pc, #8]	; (1b22c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   1b224:	4802      	ldr	r0, [pc, #8]	; (1b230 <panic+0x10>)
   1b226:	701a      	strb	r2, [r3, #0]
   1b228:	f00b b940 	b.w	264ac <log_output_flush>
   1b22c:	2000d906 	.word	0x2000d906
   1b230:	000291c4 	.word	0x000291c4

0001b234 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   1b234:	4801      	ldr	r0, [pc, #4]	; (1b23c <dropped+0x8>)
   1b236:	f7ff bfab 	b.w	1b190 <log_output_dropped_process>
   1b23a:	bf00      	nop
   1b23c:	000291c4 	.word	0x000291c4

0001b240 <process>:
{
   1b240:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1b242:	4b06      	ldr	r3, [pc, #24]	; (1b25c <process+0x1c>)
{
   1b244:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1b246:	6818      	ldr	r0, [r3, #0]
   1b248:	f7ff fb82 	bl	1a950 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   1b24c:	4621      	mov	r1, r4
}
   1b24e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1b252:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
   1b254:	220f      	movs	r2, #15
   1b256:	4802      	ldr	r0, [pc, #8]	; (1b260 <process+0x20>)
   1b258:	4718      	bx	r3
   1b25a:	bf00      	nop
   1b25c:	2000d16c 	.word	0x2000d16c
   1b260:	000291c4 	.word	0x000291c4

0001b264 <char_out>:
{
   1b264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b266:	460d      	mov	r5, r1
   1b268:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1b26a:	4f06      	ldr	r7, [pc, #24]	; (1b284 <char_out+0x20>)
   1b26c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   1b26e:	42b4      	cmp	r4, r6
   1b270:	d101      	bne.n	1b276 <char_out+0x12>
}
   1b272:	4628      	mov	r0, r5
   1b274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   1b276:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b27a:	68bb      	ldr	r3, [r7, #8]
   1b27c:	4801      	ldr	r0, [pc, #4]	; (1b284 <char_out+0x20>)
   1b27e:	685b      	ldr	r3, [r3, #4]
   1b280:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   1b282:	e7f4      	b.n	1b26e <char_out+0xa>
   1b284:	00028d3c 	.word	0x00028d3c

0001b288 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   1b288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b28c:	4605      	mov	r5, r0
   1b28e:	460e      	mov	r6, r1
   1b290:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1b292:	4c10      	ldr	r4, [pc, #64]	; (1b2d4 <z_impl_zsock_socket+0x4c>)
   1b294:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1b2d8 <z_impl_zsock_socket+0x50>
   1b298:	4544      	cmp	r4, r8
   1b29a:	d307      	bcc.n	1b2ac <z_impl_zsock_socket+0x24>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   1b29c:	f00b f9bf 	bl	2661e <__errno>
   1b2a0:	236a      	movs	r3, #106	; 0x6a
   1b2a2:	6003      	str	r3, [r0, #0]
	return -1;
}
   1b2a4:	f04f 30ff 	mov.w	r0, #4294967295
   1b2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sock_family->family != family &&
   1b2ac:	6823      	ldr	r3, [r4, #0]
   1b2ae:	42ab      	cmp	r3, r5
   1b2b0:	d000      	beq.n	1b2b4 <z_impl_zsock_socket+0x2c>
   1b2b2:	b963      	cbnz	r3, 1b2ce <z_impl_zsock_socket+0x46>
		if (!sock_family->is_supported(family, type, proto)) {
   1b2b4:	463a      	mov	r2, r7
   1b2b6:	4631      	mov	r1, r6
   1b2b8:	4628      	mov	r0, r5
   1b2ba:	68a3      	ldr	r3, [r4, #8]
   1b2bc:	4798      	blx	r3
   1b2be:	b130      	cbz	r0, 1b2ce <z_impl_zsock_socket+0x46>
		return sock_family->handler(family, type, proto);
   1b2c0:	463a      	mov	r2, r7
   1b2c2:	4631      	mov	r1, r6
   1b2c4:	4628      	mov	r0, r5
   1b2c6:	68e3      	ldr	r3, [r4, #12]
}
   1b2c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
   1b2cc:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1b2ce:	3410      	adds	r4, #16
   1b2d0:	e7e2      	b.n	1b298 <z_impl_zsock_socket+0x10>
   1b2d2:	bf00      	nop
   1b2d4:	00028fd4 	.word	0x00028fd4
   1b2d8:	00028fe4 	.word	0x00028fe4

0001b2dc <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   1b2dc:	4b01      	ldr	r3, [pc, #4]	; (1b2e4 <socket_offload_dns_register+0x8>)
   1b2de:	6018      	str	r0, [r3, #0]
}
   1b2e0:	4770      	bx	lr
   1b2e2:	bf00      	nop
   1b2e4:	2000d170 	.word	0x2000d170

0001b2e8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   1b2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b2ec:	4605      	mov	r5, r0
	__asm__ volatile(
   1b2ee:	f04f 0320 	mov.w	r3, #32
   1b2f2:	f3ef 8611 	mrs	r6, BASEPRI
   1b2f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b2fa:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1b2fe:	f04f 090c 	mov.w	r9, #12
	return list->head;
   1b302:	4b0d      	ldr	r3, [pc, #52]	; (1b338 <pm_state_notify+0x50>)
   1b304:	4f0d      	ldr	r7, [pc, #52]	; (1b33c <pm_state_notify+0x54>)
   1b306:	681c      	ldr	r4, [r3, #0]
   1b308:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1b340 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1b30c:	b92c      	cbnz	r4, 1b31a <pm_state_notify+0x32>
	__asm__ volatile(
   1b30e:	f386 8811 	msr	BASEPRI, r6
   1b312:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1b316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   1b31a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   1b31e:	2d00      	cmp	r5, #0
   1b320:	bf18      	it	ne
   1b322:	4613      	movne	r3, r2
		if (callback) {
   1b324:	b12b      	cbz	r3, 1b332 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1b326:	f898 2014 	ldrb.w	r2, [r8, #20]
   1b32a:	fb09 f202 	mul.w	r2, r9, r2
   1b32e:	5cb8      	ldrb	r0, [r7, r2]
   1b330:	4798      	blx	r3
	return node->next;
   1b332:	6824      	ldr	r4, [r4, #0]
   1b334:	e7ea      	b.n	1b30c <pm_state_notify+0x24>
   1b336:	bf00      	nop
   1b338:	2000d18c 	.word	0x2000d18c
   1b33c:	2000d180 	.word	0x2000d180
   1b340:	2000d8b0 	.word	0x2000d8b0

0001b344 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b344:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   1b346:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1b348:	4b16      	ldr	r3, [pc, #88]	; (1b3a4 <pm_system_resume+0x60>)
   1b34a:	7d1c      	ldrb	r4, [r3, #20]
   1b34c:	f004 031f 	and.w	r3, r4, #31
   1b350:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b352:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b354:	4b14      	ldr	r3, [pc, #80]	; (1b3a8 <pm_system_resume+0x64>)
   1b356:	0961      	lsrs	r1, r4, #5
   1b358:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1b35c:	e8d3 1fef 	ldaex	r1, [r3]
   1b360:	ea01 0500 	and.w	r5, r1, r0
   1b364:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1b368:	2e00      	cmp	r6, #0
   1b36a:	d1f7      	bne.n	1b35c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1b36c:	420a      	tst	r2, r1
   1b36e:	d013      	beq.n	1b398 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   1b370:	4b0e      	ldr	r3, [pc, #56]	; (1b3ac <pm_system_resume+0x68>)
   1b372:	4d0f      	ldr	r5, [pc, #60]	; (1b3b0 <pm_system_resume+0x6c>)
   1b374:	b18b      	cbz	r3, 1b39a <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1b376:	230c      	movs	r3, #12
   1b378:	4363      	muls	r3, r4
   1b37a:	18ea      	adds	r2, r5, r3
   1b37c:	7851      	ldrb	r1, [r2, #1]
   1b37e:	5ce8      	ldrb	r0, [r5, r3]
   1b380:	f00b f819 	bl	263b6 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   1b384:	2000      	movs	r0, #0
   1b386:	f7ff ffaf 	bl	1b2e8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1b38a:	230c      	movs	r3, #12
   1b38c:	435c      	muls	r4, r3
   1b38e:	2300      	movs	r3, #0
   1b390:	192a      	adds	r2, r5, r4
   1b392:	512b      	str	r3, [r5, r4]
   1b394:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   1b398:	bd70      	pop	{r4, r5, r6, pc}
   1b39a:	f383 8811 	msr	BASEPRI, r3
   1b39e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1b3a2:	e7ef      	b.n	1b384 <pm_system_resume+0x40>
   1b3a4:	2000d8b0 	.word	0x2000d8b0
   1b3a8:	2000d194 	.word	0x2000d194
   1b3ac:	000263b7 	.word	0x000263b7
   1b3b0:	2000d180 	.word	0x2000d180

0001b3b4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   1b3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   1b3b8:	4b32      	ldr	r3, [pc, #200]	; (1b484 <pm_system_suspend+0xd0>)
{
   1b3ba:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   1b3bc:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   1b3be:	f04f 0320 	mov.w	r3, #32
   1b3c2:	f3ef 8811 	mrs	r8, BASEPRI
   1b3c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3ca:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   1b3ce:	240c      	movs	r4, #12
   1b3d0:	436c      	muls	r4, r5
   1b3d2:	4b2d      	ldr	r3, [pc, #180]	; (1b488 <pm_system_suspend+0xd4>)
   1b3d4:	4e2d      	ldr	r6, [pc, #180]	; (1b48c <pm_system_suspend+0xd8>)
   1b3d6:	5d19      	ldrb	r1, [r3, r4]
   1b3d8:	191a      	adds	r2, r3, r4
   1b3da:	2900      	cmp	r1, #0
   1b3dc:	d047      	beq.n	1b46e <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   1b3de:	ca07      	ldmia	r2, {r0, r1, r2}
   1b3e0:	eb06 0c04 	add.w	ip, r6, r4
   1b3e4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   1b3e8:	2200      	movs	r2, #0
   1b3ea:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   1b3ec:	f388 8811 	msr	BASEPRI, r8
   1b3f0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   1b3f4:	230c      	movs	r3, #12
   1b3f6:	436b      	muls	r3, r5
   1b3f8:	5cf0      	ldrb	r0, [r6, r3]
   1b3fa:	18f2      	adds	r2, r6, r3
   1b3fc:	b3a8      	cbz	r0, 1b46a <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1b3fe:	1c7b      	adds	r3, r7, #1
   1b400:	d010      	beq.n	1b424 <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b402:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1b406:	2100      	movs	r1, #0
   1b408:	f8d2 c008 	ldr.w	ip, [r2, #8]
   1b40c:	4c20      	ldr	r4, [pc, #128]	; (1b490 <pm_system_suspend+0xdc>)
   1b40e:	2300      	movs	r3, #0
   1b410:	fbec 4100 	umlal	r4, r1, ip, r0
   1b414:	4a1f      	ldr	r2, [pc, #124]	; (1b494 <pm_system_suspend+0xe0>)
   1b416:	4620      	mov	r0, r4
   1b418:	f7fd fc76 	bl	18d08 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1b41c:	2101      	movs	r1, #1
   1b41e:	1a38      	subs	r0, r7, r0
   1b420:	f00d f920 	bl	28664 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1b424:	f009 f992 	bl	2474c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1b428:	2001      	movs	r0, #1
   1b42a:	f7ff ff5d 	bl	1b2e8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b42e:	4b1a      	ldr	r3, [pc, #104]	; (1b498 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b430:	096a      	lsrs	r2, r5, #5
   1b432:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b436:	2201      	movs	r2, #1
   1b438:	f005 011f 	and.w	r1, r5, #31
   1b43c:	408a      	lsls	r2, r1
   1b43e:	e8d3 0fef 	ldaex	r0, [r3]
   1b442:	4310      	orrs	r0, r2
   1b444:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1b448:	2900      	cmp	r1, #0
   1b44a:	d1f8      	bne.n	1b43e <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
   1b44c:	4b13      	ldr	r3, [pc, #76]	; (1b49c <pm_system_suspend+0xe8>)
   1b44e:	b13b      	cbz	r3, 1b460 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
   1b450:	230c      	movs	r3, #12
   1b452:	fb03 f005 	mul.w	r0, r3, r5
   1b456:	1833      	adds	r3, r6, r0
   1b458:	7859      	ldrb	r1, [r3, #1]
   1b45a:	5c30      	ldrb	r0, [r6, r0]
   1b45c:	f00a ff9f 	bl	2639e <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   1b460:	f7ff ff70 	bl	1b344 <pm_system_resume>
	k_sched_unlock();
   1b464:	f009 f986 	bl	24774 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   1b468:	2001      	movs	r0, #1
}
   1b46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   1b46e:	4601      	mov	r1, r0
   1b470:	4628      	mov	r0, r5
   1b472:	f000 f815 	bl	1b4a0 <pm_policy_next_state>
		if (info != NULL) {
   1b476:	2800      	cmp	r0, #0
   1b478:	d0b8      	beq.n	1b3ec <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   1b47a:	c807      	ldmia	r0, {r0, r1, r2}
   1b47c:	4434      	add	r4, r6
   1b47e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   1b482:	e7b3      	b.n	1b3ec <pm_system_suspend+0x38>
   1b484:	2000d8b0 	.word	0x2000d8b0
   1b488:	2000d174 	.word	0x2000d174
   1b48c:	2000d180 	.word	0x2000d180
   1b490:	000f423f 	.word	0x000f423f
   1b494:	000f4240 	.word	0x000f4240
   1b498:	2000d194 	.word	0x2000d194
   1b49c:	0002639f 	.word	0x0002639f

0001b4a0 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   1b4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4a4:	b085      	sub	sp, #20
   1b4a6:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   1b4a8:	a903      	add	r1, sp, #12
   1b4aa:	f000 f843 	bl	1b534 <pm_state_cpu_get_all>
   1b4ae:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1b4b2:	4604      	mov	r4, r0
   1b4b4:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1b4b8:	4b1b      	ldr	r3, [pc, #108]	; (1b528 <pm_policy_next_state+0x88>)
   1b4ba:	9d03      	ldr	r5, [sp, #12]
   1b4bc:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1b4c0:	1e43      	subs	r3, r0, #1
   1b4c2:	b21b      	sxth	r3, r3
   1b4c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b4c8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1b52c <pm_policy_next_state+0x8c>
   1b4cc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1b4d0:	b924      	cbnz	r4, 1b4dc <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   1b4d2:	46a1      	mov	r9, r4
}
   1b4d4:	4648      	mov	r0, r9
   1b4d6:	b005      	add	sp, #20
   1b4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4dc:	46c4      	mov	ip, r8
   1b4de:	4659      	mov	r1, fp
   1b4e0:	6868      	ldr	r0, [r5, #4]
   1b4e2:	2300      	movs	r3, #0
   1b4e4:	fbe0 c107 	umlal	ip, r1, r0, r7
   1b4e8:	4a11      	ldr	r2, [pc, #68]	; (1b530 <pm_policy_next_state+0x90>)
   1b4ea:	4660      	mov	r0, ip
   1b4ec:	f7fd fc0c 	bl	18d08 <__aeabi_uldivmod>
   1b4f0:	46c4      	mov	ip, r8
   1b4f2:	4659      	mov	r1, fp
   1b4f4:	9001      	str	r0, [sp, #4]
   1b4f6:	68a8      	ldr	r0, [r5, #8]
   1b4f8:	2300      	movs	r3, #0
   1b4fa:	fbe0 c107 	umlal	ip, r1, r0, r7
   1b4fe:	4a0c      	ldr	r2, [pc, #48]	; (1b530 <pm_policy_next_state+0x90>)
   1b500:	4660      	mov	r0, ip
   1b502:	f7fd fc01 	bl	18d08 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1b506:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   1b50a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1b50c:	d001      	beq.n	1b512 <pm_policy_next_state+0x72>
   1b50e:	4582      	cmp	sl, r0
   1b510:	d905      	bls.n	1b51e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   1b512:	1c73      	adds	r3, r6, #1
   1b514:	d0de      	beq.n	1b4d4 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   1b516:	9b01      	ldr	r3, [sp, #4]
   1b518:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1b51a:	42b0      	cmp	r0, r6
   1b51c:	d9da      	bls.n	1b4d4 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1b51e:	3c01      	subs	r4, #1
   1b520:	b2a4      	uxth	r4, r4
   1b522:	3d0c      	subs	r5, #12
   1b524:	e7d4      	b.n	1b4d0 <pm_policy_next_state+0x30>
   1b526:	bf00      	nop
   1b528:	2000c58c 	.word	0x2000c58c
   1b52c:	000f423f 	.word	0x000f423f
   1b530:	000f4240 	.word	0x000f4240

0001b534 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   1b534:	b908      	cbnz	r0, 1b53a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1b536:	4b02      	ldr	r3, [pc, #8]	; (1b540 <pm_state_cpu_get_all+0xc>)
   1b538:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1b53a:	2000      	movs	r0, #0
   1b53c:	4770      	bx	lr
   1b53e:	bf00      	nop
   1b540:	000291d4 	.word	0x000291d4

0001b544 <adp536x_reg_read>:
#define ADP536X_FUEL_GAUGE_EN_FG(x)			((x) & 0x01)

static const struct device *i2c_dev;

static int adp536x_reg_read(uint8_t reg, uint8_t *buff)
{
   1b544:	4603      	mov	r3, r0
   1b546:	b510      	push	{r4, lr}
   1b548:	b088      	sub	sp, #32
   1b54a:	f88d 3007 	strb.w	r3, [sp, #7]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   1b54e:	f10d 0307 	add.w	r3, sp, #7
   1b552:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
   1b554:	2301      	movs	r3, #1
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
   1b556:	4a09      	ldr	r2, [pc, #36]	; (1b57c <adp536x_reg_read+0x38>)
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
   1b558:	e9cd 1305 	strd	r1, r3, [sp, #20]
   1b55c:	6810      	ldr	r0, [r2, #0]
	msg[0].len = num_write;
   1b55e:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1b560:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b562:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   1b564:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b568:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1b56c:	6883      	ldr	r3, [r0, #8]
   1b56e:	2202      	movs	r2, #2
   1b570:	689c      	ldr	r4, [r3, #8]
   1b572:	a902      	add	r1, sp, #8
   1b574:	2346      	movs	r3, #70	; 0x46
   1b576:	47a0      	blx	r4
}
   1b578:	b008      	add	sp, #32
   1b57a:	bd10      	pop	{r4, pc}
   1b57c:	2000d198 	.word	0x2000d198

0001b580 <adp536x_reg_write_mask>:
}

static int adp536x_reg_write_mask(uint8_t reg_addr,
			       uint32_t mask,
			       uint8_t data)
{
   1b580:	b570      	push	{r4, r5, r6, lr}
   1b582:	b086      	sub	sp, #24
   1b584:	460e      	mov	r6, r1
	int err;
	uint8_t tmp;

	err = adp536x_reg_read(reg_addr, &tmp);
   1b586:	f10d 0107 	add.w	r1, sp, #7
{
   1b58a:	4605      	mov	r5, r0
   1b58c:	4614      	mov	r4, r2
	err = adp536x_reg_read(reg_addr, &tmp);
   1b58e:	f7ff ffd9 	bl	1b544 <adp536x_reg_read>
	if (err) {
   1b592:	b9c8      	cbnz	r0, 1b5c8 <adp536x_reg_write_mask+0x48>
		return err;
	}

	tmp &= ~mask;
   1b594:	f89d 3007 	ldrb.w	r3, [sp, #7]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   1b598:	f88d 5008 	strb.w	r5, [sp, #8]
   1b59c:	ea23 0106 	bic.w	r1, r3, r6
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
   1b5a0:	4b0a      	ldr	r3, [pc, #40]	; (1b5cc <adp536x_reg_write_mask+0x4c>)
	tmp |= data;
   1b5a2:	ea44 0201 	orr.w	r2, r4, r1
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
   1b5a6:	6818      	ldr	r0, [r3, #0]
	msg.buf = (uint8_t *)buf;
   1b5a8:	ab02      	add	r3, sp, #8
   1b5aa:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   1b5ac:	2302      	movs	r3, #2
	tmp |= data;
   1b5ae:	f88d 2007 	strb.w	r2, [sp, #7]
	uint8_t tx_buf[2] = {reg_addr, value};
   1b5b2:	f88d 2009 	strb.w	r2, [sp, #9]
	msg.len = num_bytes;
   1b5b6:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1b5b8:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1b5bc:	6883      	ldr	r3, [r0, #8]
   1b5be:	2201      	movs	r2, #1
   1b5c0:	689c      	ldr	r4, [r3, #8]
   1b5c2:	a903      	add	r1, sp, #12
   1b5c4:	2346      	movs	r3, #70	; 0x46
   1b5c6:	47a0      	blx	r4

	return adp536x_reg_write(reg_addr, tmp);
}
   1b5c8:	b006      	add	sp, #24
   1b5ca:	bd70      	pop	{r4, r5, r6, pc}
   1b5cc:	2000d198 	.word	0x2000d198

0001b5d0 <adp536x_init>:

	return 0;
}

int adp536x_init(const struct device *dev)
{
   1b5d0:	b510      	push	{r4, lr}
   1b5d2:	4604      	mov	r4, r0
   1b5d4:	f00c fda2 	bl	2811c <z_device_is_ready>
	if (!device_is_ready(dev)) {
   1b5d8:	b118      	cbz	r0, 1b5e2 <adp536x_init+0x12>
		return -ENODEV;
	}

	i2c_dev = dev;

	return 0;
   1b5da:	2000      	movs	r0, #0
	i2c_dev = dev;
   1b5dc:	4b02      	ldr	r3, [pc, #8]	; (1b5e8 <adp536x_init+0x18>)
   1b5de:	601c      	str	r4, [r3, #0]
}
   1b5e0:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1b5e2:	f06f 0012 	mvn.w	r0, #18
   1b5e6:	e7fb      	b.n	1b5e0 <adp536x_init+0x10>
   1b5e8:	2000d198 	.word	0x2000d198

0001b5ec <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1b5ec:	4901      	ldr	r1, [pc, #4]	; (1b5f4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1b5ee:	2210      	movs	r2, #16
	str	r2, [r1]
   1b5f0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1b5f2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1b5f4:	e000ed10 	.word	0xe000ed10

0001b5f8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1b5f8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1b5fa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1b5fc:	f380 8811 	msr	BASEPRI, r0
	isb
   1b600:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   1b604:	f3bf 8f4f 	dsb	sy
   1b608:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1b60a:	b662      	cpsie	i
	isb
   1b60c:	f3bf 8f6f 	isb	sy

	bx	lr
   1b610:	4770      	bx	lr
   1b612:	bf00      	nop

0001b614 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1b614:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1b616:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1b618:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   1b61c:	f3bf 8f4f 	dsb	sy
   1b620:	bf20      	wfe

	msr	BASEPRI, r0
   1b622:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1b626:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1b628:	4770      	bx	lr
   1b62a:	bf00      	nop

0001b62c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1b62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b630:	4681      	mov	r9, r0

	if (esf != NULL) {
   1b632:	460c      	mov	r4, r1
{
   1b634:	af00      	add	r7, sp, #0
	if (esf != NULL) {
   1b636:	2900      	cmp	r1, #0
   1b638:	d04c      	beq.n	1b6d4 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1b63a:	e9d1 1200 	ldrd	r1, r2, [r1]
   1b63e:	466e      	mov	r6, sp
   1b640:	b08a      	sub	sp, #40	; 0x28
   1b642:	68a3      	ldr	r3, [r4, #8]
   1b644:	466d      	mov	r5, sp
   1b646:	f04f 0a05 	mov.w	sl, #5
   1b64a:	46a8      	mov	r8, r5
   1b64c:	4825      	ldr	r0, [pc, #148]	; (1b6e4 <z_arm_fatal_error+0xb8>)
   1b64e:	e9c5 2307 	strd	r2, r3, [r5, #28]
   1b652:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1b656:	f848 af10 	str.w	sl, [r8, #16]!
   1b65a:	2300      	movs	r3, #0
   1b65c:	4642      	mov	r2, r8
   1b65e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1b662:	4821      	ldr	r0, [pc, #132]	; (1b6e8 <z_arm_fatal_error+0xbc>)
   1b664:	f7ff fb4c 	bl	1ad00 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1b668:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1b66c:	46b5      	mov	sp, r6
   1b66e:	6963      	ldr	r3, [r4, #20]
   1b670:	46ad      	mov	sp, r5
   1b672:	481e      	ldr	r0, [pc, #120]	; (1b6ec <z_arm_fatal_error+0xc0>)
   1b674:	e9c5 2307 	strd	r2, r3, [r5, #28]
   1b678:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1b67c:	f8c5 a010 	str.w	sl, [r5, #16]
   1b680:	2300      	movs	r3, #0
   1b682:	4642      	mov	r2, r8
   1b684:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1b688:	4817      	ldr	r0, [pc, #92]	; (1b6e8 <z_arm_fatal_error+0xbc>)
   1b68a:	f7ff fb39 	bl	1ad00 <z_impl_z_log_msg_static_create>
   1b68e:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1b690:	b088      	sub	sp, #32
   1b692:	69e3      	ldr	r3, [r4, #28]
   1b694:	466d      	mov	r5, sp
   1b696:	f04f 0a03 	mov.w	sl, #3
   1b69a:	46a8      	mov	r8, r5
   1b69c:	4a14      	ldr	r2, [pc, #80]	; (1b6f0 <z_arm_fatal_error+0xc4>)
   1b69e:	e9c5 2305 	strd	r2, r3, [r5, #20]
   1b6a2:	f848 af10 	str.w	sl, [r8, #16]!
   1b6a6:	2300      	movs	r3, #0
   1b6a8:	4642      	mov	r2, r8
   1b6aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b6ae:	480e      	ldr	r0, [pc, #56]	; (1b6e8 <z_arm_fatal_error+0xbc>)
   1b6b0:	f7ff fb26 	bl	1ad00 <z_impl_z_log_msg_static_create>
   1b6b4:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1b6b6:	69a3      	ldr	r3, [r4, #24]
   1b6b8:	46ad      	mov	sp, r5
   1b6ba:	4a0e      	ldr	r2, [pc, #56]	; (1b6f4 <z_arm_fatal_error+0xc8>)
   1b6bc:	f8c5 a010 	str.w	sl, [r5, #16]
   1b6c0:	e9c5 2305 	strd	r2, r3, [r5, #20]
   1b6c4:	2300      	movs	r3, #0
   1b6c6:	4642      	mov	r2, r8
   1b6c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b6cc:	4806      	ldr	r0, [pc, #24]	; (1b6e8 <z_arm_fatal_error+0xbc>)
   1b6ce:	f7ff fb17 	bl	1ad00 <z_impl_z_log_msg_static_create>
   1b6d2:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1b6d4:	4621      	mov	r1, r4
   1b6d6:	4648      	mov	r0, r9
   1b6d8:	f008 f918 	bl	2390c <z_fatal_error>
}
   1b6dc:	46bd      	mov	sp, r7
   1b6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b6e2:	bf00      	nop
   1b6e4:	00029ae5 	.word	0x00029ae5
   1b6e8:	000290f4 	.word	0x000290f4
   1b6ec:	00029b14 	.word	0x00029b14
   1b6f0:	00029b43 	.word	0x00029b43
   1b6f4:	00029b52 	.word	0x00029b52

0001b6f8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1b6f8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1b6fa:	2800      	cmp	r0, #0
   1b6fc:	db07      	blt.n	1b70e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b6fe:	2301      	movs	r3, #1
   1b700:	0941      	lsrs	r1, r0, #5
   1b702:	4a03      	ldr	r2, [pc, #12]	; (1b710 <arch_irq_enable+0x18>)
   1b704:	f000 001f 	and.w	r0, r0, #31
   1b708:	4083      	lsls	r3, r0
   1b70a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   1b70e:	4770      	bx	lr
   1b710:	e000e100 	.word	0xe000e100

0001b714 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1b714:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1b716:	2800      	cmp	r0, #0
   1b718:	db0c      	blt.n	1b734 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b71a:	2201      	movs	r2, #1
   1b71c:	4906      	ldr	r1, [pc, #24]	; (1b738 <arch_irq_disable+0x24>)
   1b71e:	0943      	lsrs	r3, r0, #5
   1b720:	f000 001f 	and.w	r0, r0, #31
   1b724:	4082      	lsls	r2, r0
   1b726:	3320      	adds	r3, #32
   1b728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1b72c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b730:	f3bf 8f6f 	isb	sy
}
   1b734:	4770      	bx	lr
   1b736:	bf00      	nop
   1b738:	e000e100 	.word	0xe000e100

0001b73c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1b73c:	4b05      	ldr	r3, [pc, #20]	; (1b754 <arch_irq_is_enabled+0x18>)
   1b73e:	0942      	lsrs	r2, r0, #5
   1b740:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1b744:	2301      	movs	r3, #1
   1b746:	f000 001f 	and.w	r0, r0, #31
   1b74a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1b74e:	4010      	ands	r0, r2
   1b750:	4770      	bx	lr
   1b752:	bf00      	nop
   1b754:	e000e100 	.word	0xe000e100

0001b758 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1b758:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1b75a:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
   1b75c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b760:	bfac      	ite	ge
   1b762:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b766:	4b06      	ldrlt	r3, [pc, #24]	; (1b780 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b768:	ea4f 1141 	mov.w	r1, r1, lsl #5
   1b76c:	b2c9      	uxtb	r1, r1
   1b76e:	bfab      	itete	ge
   1b770:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b774:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b778:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b77c:	5419      	strblt	r1, [r3, r0]
}
   1b77e:	4770      	bx	lr
   1b780:	e000ed14 	.word	0xe000ed14

0001b784 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1b784:	bf30      	wfi
    b z_SysNmiOnReset
   1b786:	f7ff bffd 	b.w	1b784 <z_SysNmiOnReset>
   1b78a:	bf00      	nop

0001b78c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1b78c:	4a0b      	ldr	r2, [pc, #44]	; (1b7bc <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1b78e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1b790:	4b0b      	ldr	r3, [pc, #44]	; (1b7c0 <z_arm_prep_c+0x34>)
   1b792:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1b796:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1b798:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b79c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1b7a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1b7a4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1b7a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1b7ac:	f008 f968 	bl	23a80 <z_bss_zero>
	z_data_copy();
   1b7b0:	f009 f91c 	bl	249ec <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1b7b4:	f000 fbb0 	bl	1bf18 <z_arm_interrupt_init>
	z_cstart();
   1b7b8:	f008 f9a2 	bl	23b00 <z_cstart>
   1b7bc:	00018000 	.word	0x00018000
   1b7c0:	e000ed00 	.word	0xe000ed00

0001b7c4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1b7c4:	4a09      	ldr	r2, [pc, #36]	; (1b7ec <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1b7c6:	490a      	ldr	r1, [pc, #40]	; (1b7f0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1b7c8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1b7ca:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1b7cc:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   1b7ce:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1b7d0:	4908      	ldr	r1, [pc, #32]	; (1b7f4 <arch_swap+0x30>)
   1b7d2:	684b      	ldr	r3, [r1, #4]
   1b7d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1b7d8:	604b      	str	r3, [r1, #4]
   1b7da:	2300      	movs	r3, #0
   1b7dc:	f383 8811 	msr	BASEPRI, r3
   1b7e0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1b7e4:	6893      	ldr	r3, [r2, #8]
}
   1b7e6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1b7e8:	4770      	bx	lr
   1b7ea:	bf00      	nop
   1b7ec:	2000d8b0 	.word	0x2000d8b0
   1b7f0:	00029744 	.word	0x00029744
   1b7f4:	e000ed00 	.word	0xe000ed00

0001b7f8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1b7f8:	4915      	ldr	r1, [pc, #84]	; (1b850 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1b7fa:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   1b7fc:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1b800:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1b804:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1b806:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1b80a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1b80e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   1b810:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1b814:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1b818:	4f0e      	ldr	r7, [pc, #56]	; (1b854 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1b81a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1b81e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1b820:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1b822:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   1b824:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1b828:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1b82a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1b82c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1b82e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1b832:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1b836:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1b83a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1b83e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1b842:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1b844:	f00a feac 	bl	265a0 <configure_builtin_stack_guard>
    pop {r2, lr}
   1b848:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1b84c:	4770      	bx	lr
   1b84e:	0000      	.short	0x0000
    ldr r1, =_kernel
   1b850:	2000d8b0 	.word	0x2000d8b0
    ldr v4, =_SCS_ICSR
   1b854:	e000ed04 	.word	0xe000ed04

0001b858 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1b858:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1b85c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1b85e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1b862:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1b866:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1b868:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1b86c:	2902      	cmp	r1, #2
    beq _oops
   1b86e:	d0ff      	beq.n	1b870 <_oops>

0001b870 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1b870:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1b872:	f00a fe86 	bl	26582 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   1b876:	bd01      	pop	{r0, pc}

0001b878 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1b878:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1b87c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   1b87e:	490d      	ldr	r1, [pc, #52]	; (1b8b4 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   1b880:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1b884:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1b886:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   1b88a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1b88e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   1b890:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1b894:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1b898:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1b89c:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1b8a0:	2300      	movs	r3, #0
   1b8a2:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   1b8a4:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1b8a8:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1b8aa:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   1b8ac:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1b8b0:	4770      	bx	lr
   1b8b2:	bf00      	nop
   1b8b4:	00025a0d 	.word	0x00025a0d

0001b8b8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1b8b8:	4b08      	ldr	r3, [pc, #32]	; (1b8dc <arch_switch_to_main_thread+0x24>)
   1b8ba:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1b8bc:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1b8be:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1b8c2:	4610      	mov	r0, r2
   1b8c4:	f381 8809 	msr	PSP, r1
   1b8c8:	2100      	movs	r1, #0
   1b8ca:	b663      	cpsie	if
   1b8cc:	f381 8811 	msr	BASEPRI, r1
   1b8d0:	f3bf 8f6f 	isb	sy
   1b8d4:	2200      	movs	r2, #0
   1b8d6:	2300      	movs	r3, #0
   1b8d8:	f00a f898 	bl	25a0c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1b8dc:	2000d8b0 	.word	0x2000d8b0

0001b8e0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1b8e0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1b8e2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1b8e4:	4a0b      	ldr	r2, [pc, #44]	; (1b914 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1b8e6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   1b8e8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1b8ea:	bf1e      	ittt	ne
	movne	r1, #0
   1b8ec:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1b8ee:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   1b8f0:	f00c fcac 	blne	2824c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1b8f4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1b8f6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1b8fa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1b8fe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1b902:	4905      	ldr	r1, [pc, #20]	; (1b918 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1b904:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1b906:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1b908:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1b90a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1b90e:	4903      	ldr	r1, [pc, #12]	; (1b91c <_isr_wrapper+0x3c>)
	bx r1
   1b910:	4708      	bx	r1
   1b912:	0000      	.short	0x0000
	ldr r2, =_kernel
   1b914:	2000d8b0 	.word	0x2000d8b0
	ldr r1, =_sw_isr_table
   1b918:	00028d9c 	.word	0x00028d9c
	ldr r1, =z_arm_int_exit
   1b91c:	0001b921 	.word	0x0001b921

0001b920 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1b920:	4b04      	ldr	r3, [pc, #16]	; (1b934 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1b922:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1b924:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1b926:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1b928:	d003      	beq.n	1b932 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1b92a:	4903      	ldr	r1, [pc, #12]	; (1b938 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1b92c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1b930:	600a      	str	r2, [r1, #0]

0001b932 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1b932:	4770      	bx	lr
	ldr r3, =_kernel
   1b934:	2000d8b0 	.word	0x2000d8b0
	ldr r1, =_SCS_ICSR
   1b938:	e000ed04 	.word	0xe000ed04

0001b93c <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1b93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b940:	b086      	sub	sp, #24
   1b942:	4606      	mov	r6, r0
   1b944:	460d      	mov	r5, r1
   1b946:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   1b948:	2402      	movs	r4, #2
   1b94a:	4b41      	ldr	r3, [pc, #260]	; (1ba50 <mem_manage_fault.constprop.0+0x114>)
   1b94c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b950:	617b      	str	r3, [r7, #20]
   1b952:	4840      	ldr	r0, [pc, #256]	; (1ba54 <mem_manage_fault.constprop.0+0x118>)
   1b954:	613c      	str	r4, [r7, #16]
   1b956:	f107 0210 	add.w	r2, r7, #16
   1b95a:	f00a fe25 	bl	265a8 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1b95e:	4b3e      	ldr	r3, [pc, #248]	; (1ba58 <mem_manage_fault.constprop.0+0x11c>)
   1b960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b962:	06db      	lsls	r3, r3, #27
   1b964:	d509      	bpl.n	1b97a <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1b966:	4b3d      	ldr	r3, [pc, #244]	; (1ba5c <mem_manage_fault.constprop.0+0x120>)
   1b968:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b96c:	e9c7 4304 	strd	r4, r3, [r7, #16]
   1b970:	4838      	ldr	r0, [pc, #224]	; (1ba54 <mem_manage_fault.constprop.0+0x118>)
   1b972:	f107 0210 	add.w	r2, r7, #16
   1b976:	f00a fe17 	bl	265a8 <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1b97a:	4b37      	ldr	r3, [pc, #220]	; (1ba58 <mem_manage_fault.constprop.0+0x11c>)
   1b97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b97e:	0718      	lsls	r0, r3, #28
   1b980:	d50a      	bpl.n	1b998 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1b982:	4b37      	ldr	r3, [pc, #220]	; (1ba60 <mem_manage_fault.constprop.0+0x124>)
   1b984:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b988:	617b      	str	r3, [r7, #20]
   1b98a:	2302      	movs	r3, #2
   1b98c:	4831      	ldr	r0, [pc, #196]	; (1ba54 <mem_manage_fault.constprop.0+0x118>)
   1b98e:	613b      	str	r3, [r7, #16]
   1b990:	f107 0210 	add.w	r2, r7, #16
   1b994:	f00a fe08 	bl	265a8 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1b998:	4c2f      	ldr	r4, [pc, #188]	; (1ba58 <mem_manage_fault.constprop.0+0x11c>)
   1b99a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b99c:	0799      	lsls	r1, r3, #30
   1b99e:	d522      	bpl.n	1b9e6 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
   1b9a0:	46e8      	mov	r8, sp
   1b9a2:	4b30      	ldr	r3, [pc, #192]	; (1ba64 <mem_manage_fault.constprop.0+0x128>)
   1b9a4:	f107 0210 	add.w	r2, r7, #16
   1b9a8:	617b      	str	r3, [r7, #20]
   1b9aa:	2302      	movs	r3, #2
   1b9ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b9b0:	613b      	str	r3, [r7, #16]
   1b9b2:	4828      	ldr	r0, [pc, #160]	; (1ba54 <mem_manage_fault.constprop.0+0x118>)
   1b9b4:	f00a fdf8 	bl	265a8 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   1b9b8:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1b9ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1b9bc:	0612      	lsls	r2, r2, #24
   1b9be:	d512      	bpl.n	1b9e6 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1b9c0:	b088      	sub	sp, #32
   1b9c2:	466a      	mov	r2, sp
   1b9c4:	4928      	ldr	r1, [pc, #160]	; (1ba68 <mem_manage_fault.constprop.0+0x12c>)
   1b9c6:	4823      	ldr	r0, [pc, #140]	; (1ba54 <mem_manage_fault.constprop.0+0x118>)
   1b9c8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1b9cc:	2303      	movs	r3, #3
   1b9ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b9d2:	f842 3f10 	str.w	r3, [r2, #16]!
   1b9d6:	f00a fde7 	bl	265a8 <z_log_msg_static_create.constprop.0>
   1b9da:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   1b9dc:	b11e      	cbz	r6, 1b9e6 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1b9de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b9e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1b9e4:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1b9e6:	4b1c      	ldr	r3, [pc, #112]	; (1ba58 <mem_manage_fault.constprop.0+0x11c>)
   1b9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b9ea:	07dc      	lsls	r4, r3, #31
   1b9ec:	d50a      	bpl.n	1ba04 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
   1b9ee:	4b1f      	ldr	r3, [pc, #124]	; (1ba6c <mem_manage_fault.constprop.0+0x130>)
   1b9f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b9f4:	617b      	str	r3, [r7, #20]
   1b9f6:	2302      	movs	r3, #2
   1b9f8:	4816      	ldr	r0, [pc, #88]	; (1ba54 <mem_manage_fault.constprop.0+0x118>)
   1b9fa:	613b      	str	r3, [r7, #16]
   1b9fc:	f107 0210 	add.w	r2, r7, #16
   1ba00:	f00a fdd2 	bl	265a8 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1ba04:	4b14      	ldr	r3, [pc, #80]	; (1ba58 <mem_manage_fault.constprop.0+0x11c>)
   1ba06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ba08:	0698      	lsls	r0, r3, #26
   1ba0a:	d50a      	bpl.n	1ba22 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
   1ba0c:	4b18      	ldr	r3, [pc, #96]	; (1ba70 <mem_manage_fault.constprop.0+0x134>)
   1ba0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ba12:	617b      	str	r3, [r7, #20]
   1ba14:	2302      	movs	r3, #2
   1ba16:	480f      	ldr	r0, [pc, #60]	; (1ba54 <mem_manage_fault.constprop.0+0x118>)
   1ba18:	613b      	str	r3, [r7, #16]
   1ba1a:	f107 0210 	add.w	r2, r7, #16
   1ba1e:	f00a fdc3 	bl	265a8 <z_log_msg_static_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1ba22:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1ba24:	4b0c      	ldr	r3, [pc, #48]	; (1ba58 <mem_manage_fault.constprop.0+0x11c>)

	return reason;
}
   1ba26:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1ba28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ba2a:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1ba2c:	bf58      	it	pl
   1ba2e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1ba30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ba32:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1ba34:	bf42      	ittt	mi
   1ba36:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   1ba38:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   1ba3c:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1ba3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ba40:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1ba44:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1ba46:	7028      	strb	r0, [r5, #0]
}
   1ba48:	46bd      	mov	sp, r7
   1ba4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba4e:	bf00      	nop
   1ba50:	00029b80 	.word	0x00029b80
   1ba54:	000290f4 	.word	0x000290f4
   1ba58:	e000ed00 	.word	0xe000ed00
   1ba5c:	00029b96 	.word	0x00029b96
   1ba60:	00029bc9 	.word	0x00029bc9
   1ba64:	00029bdc 	.word	0x00029bdc
   1ba68:	00029bf4 	.word	0x00029bf4
   1ba6c:	00029c0a 	.word	0x00029c0a
   1ba70:	00029c29 	.word	0x00029c29

0001ba74 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1ba74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba78:	b086      	sub	sp, #24
   1ba7a:	4606      	mov	r6, r0
   1ba7c:	460d      	mov	r5, r1
   1ba7e:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   1ba80:	2402      	movs	r4, #2
   1ba82:	4b3e      	ldr	r3, [pc, #248]	; (1bb7c <bus_fault.constprop.0+0x108>)
   1ba84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ba88:	617b      	str	r3, [r7, #20]
   1ba8a:	483d      	ldr	r0, [pc, #244]	; (1bb80 <bus_fault.constprop.0+0x10c>)
   1ba8c:	613c      	str	r4, [r7, #16]
   1ba8e:	f107 0210 	add.w	r2, r7, #16
   1ba92:	f00a fd89 	bl	265a8 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1ba96:	4b3b      	ldr	r3, [pc, #236]	; (1bb84 <bus_fault.constprop.0+0x110>)
   1ba98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ba9a:	04d9      	lsls	r1, r3, #19
   1ba9c:	d509      	bpl.n	1bab2 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   1ba9e:	4b3a      	ldr	r3, [pc, #232]	; (1bb88 <bus_fault.constprop.0+0x114>)
   1baa0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1baa4:	e9c7 4304 	strd	r4, r3, [r7, #16]
   1baa8:	4835      	ldr	r0, [pc, #212]	; (1bb80 <bus_fault.constprop.0+0x10c>)
   1baaa:	f107 0210 	add.w	r2, r7, #16
   1baae:	f00a fd7b 	bl	265a8 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1bab2:	4b34      	ldr	r3, [pc, #208]	; (1bb84 <bus_fault.constprop.0+0x110>)
   1bab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bab6:	051a      	lsls	r2, r3, #20
   1bab8:	d50a      	bpl.n	1bad0 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1baba:	4b34      	ldr	r3, [pc, #208]	; (1bb8c <bus_fault.constprop.0+0x118>)
   1babc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bac0:	617b      	str	r3, [r7, #20]
   1bac2:	2302      	movs	r3, #2
   1bac4:	482e      	ldr	r0, [pc, #184]	; (1bb80 <bus_fault.constprop.0+0x10c>)
   1bac6:	613b      	str	r3, [r7, #16]
   1bac8:	f107 0210 	add.w	r2, r7, #16
   1bacc:	f00a fd6c 	bl	265a8 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1bad0:	4c2c      	ldr	r4, [pc, #176]	; (1bb84 <bus_fault.constprop.0+0x110>)
   1bad2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1bad4:	059b      	lsls	r3, r3, #22
   1bad6:	d522      	bpl.n	1bb1e <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   1bad8:	46e8      	mov	r8, sp
   1bada:	4b2d      	ldr	r3, [pc, #180]	; (1bb90 <bus_fault.constprop.0+0x11c>)
   1badc:	4828      	ldr	r0, [pc, #160]	; (1bb80 <bus_fault.constprop.0+0x10c>)
   1bade:	617b      	str	r3, [r7, #20]
   1bae0:	2302      	movs	r3, #2
   1bae2:	f107 0210 	add.w	r2, r7, #16
   1bae6:	613b      	str	r3, [r7, #16]
   1bae8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1baec:	f00a fd5c 	bl	265a8 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1baf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1baf2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1baf4:	0410      	lsls	r0, r2, #16
   1baf6:	d512      	bpl.n	1bb1e <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1baf8:	b088      	sub	sp, #32
   1bafa:	466a      	mov	r2, sp
   1bafc:	4925      	ldr	r1, [pc, #148]	; (1bb94 <bus_fault.constprop.0+0x120>)
   1bafe:	4820      	ldr	r0, [pc, #128]	; (1bb80 <bus_fault.constprop.0+0x10c>)
   1bb00:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1bb04:	2303      	movs	r3, #3
   1bb06:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bb0a:	f842 3f10 	str.w	r3, [r2, #16]!
   1bb0e:	f00a fd4b 	bl	265a8 <z_log_msg_static_create.constprop.0>
   1bb12:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   1bb14:	b11e      	cbz	r6, 1bb1e <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1bb16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1bb18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1bb1c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1bb1e:	4b19      	ldr	r3, [pc, #100]	; (1bb84 <bus_fault.constprop.0+0x110>)
   1bb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bb22:	0559      	lsls	r1, r3, #21
   1bb24:	d50a      	bpl.n	1bb3c <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   1bb26:	4b1c      	ldr	r3, [pc, #112]	; (1bb98 <bus_fault.constprop.0+0x124>)
   1bb28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bb2c:	617b      	str	r3, [r7, #20]
   1bb2e:	2302      	movs	r3, #2
   1bb30:	4813      	ldr	r0, [pc, #76]	; (1bb80 <bus_fault.constprop.0+0x10c>)
   1bb32:	613b      	str	r3, [r7, #16]
   1bb34:	f107 0210 	add.w	r2, r7, #16
   1bb38:	f00a fd36 	bl	265a8 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1bb3c:	4b11      	ldr	r3, [pc, #68]	; (1bb84 <bus_fault.constprop.0+0x110>)
   1bb3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1bb40:	05d2      	lsls	r2, r2, #23
   1bb42:	d515      	bpl.n	1bb70 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   1bb44:	4b15      	ldr	r3, [pc, #84]	; (1bb9c <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1bb46:	617b      	str	r3, [r7, #20]
   1bb48:	2302      	movs	r3, #2
   1bb4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bb4e:	480c      	ldr	r0, [pc, #48]	; (1bb80 <bus_fault.constprop.0+0x10c>)
   1bb50:	613b      	str	r3, [r7, #16]
   1bb52:	f107 0210 	add.w	r2, r7, #16
   1bb56:	f00a fd27 	bl	265a8 <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   1bb5a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1bb5c:	4a09      	ldr	r2, [pc, #36]	; (1bb84 <bus_fault.constprop.0+0x110>)

	return reason;
}
   1bb5e:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1bb60:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1bb62:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1bb66:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1bb68:	7028      	strb	r0, [r5, #0]
}
   1bb6a:	46bd      	mov	sp, r7
   1bb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1bb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bb72:	049b      	lsls	r3, r3, #18
   1bb74:	d5f1      	bpl.n	1bb5a <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1bb76:	4b0a      	ldr	r3, [pc, #40]	; (1bba0 <bus_fault.constprop.0+0x12c>)
   1bb78:	e7e5      	b.n	1bb46 <bus_fault.constprop.0+0xd2>
   1bb7a:	bf00      	nop
   1bb7c:	00029c58 	.word	0x00029c58
   1bb80:	000290f4 	.word	0x000290f4
   1bb84:	e000ed00 	.word	0xe000ed00
   1bb88:	00029c6e 	.word	0x00029c6e
   1bb8c:	00029bc9 	.word	0x00029bc9
   1bb90:	00029c7f 	.word	0x00029c7f
   1bb94:	00029c98 	.word	0x00029c98
   1bb98:	00029cad 	.word	0x00029cad
   1bb9c:	00029cc8 	.word	0x00029cc8
   1bba0:	00029c29 	.word	0x00029c29

0001bba4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1bba4:	b510      	push	{r4, lr}
   1bba6:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1bba8:	2402      	movs	r4, #2
   1bbaa:	4b3a      	ldr	r3, [pc, #232]	; (1bc94 <usage_fault.constprop.0+0xf0>)
   1bbac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bbb0:	4839      	ldr	r0, [pc, #228]	; (1bc98 <usage_fault.constprop.0+0xf4>)
   1bbb2:	aa04      	add	r2, sp, #16
   1bbb4:	9305      	str	r3, [sp, #20]
   1bbb6:	9404      	str	r4, [sp, #16]
   1bbb8:	f00a fcf6 	bl	265a8 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1bbbc:	4b37      	ldr	r3, [pc, #220]	; (1bc9c <usage_fault.constprop.0+0xf8>)
   1bbbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bbc0:	019b      	lsls	r3, r3, #6
   1bbc2:	d508      	bpl.n	1bbd6 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   1bbc4:	4b36      	ldr	r3, [pc, #216]	; (1bca0 <usage_fault.constprop.0+0xfc>)
   1bbc6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bbca:	4833      	ldr	r0, [pc, #204]	; (1bc98 <usage_fault.constprop.0+0xf4>)
   1bbcc:	aa04      	add	r2, sp, #16
   1bbce:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1bbd2:	f00a fce9 	bl	265a8 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1bbd6:	4b31      	ldr	r3, [pc, #196]	; (1bc9c <usage_fault.constprop.0+0xf8>)
   1bbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bbda:	01dc      	lsls	r4, r3, #7
   1bbdc:	d509      	bpl.n	1bbf2 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   1bbde:	4b31      	ldr	r3, [pc, #196]	; (1bca4 <usage_fault.constprop.0+0x100>)
   1bbe0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bbe4:	9305      	str	r3, [sp, #20]
   1bbe6:	2302      	movs	r3, #2
   1bbe8:	482b      	ldr	r0, [pc, #172]	; (1bc98 <usage_fault.constprop.0+0xf4>)
   1bbea:	aa04      	add	r2, sp, #16
   1bbec:	9304      	str	r3, [sp, #16]
   1bbee:	f00a fcdb 	bl	265a8 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1bbf2:	4b2a      	ldr	r3, [pc, #168]	; (1bc9c <usage_fault.constprop.0+0xf8>)
   1bbf4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1bbf6:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   1bbfa:	d009      	beq.n	1bc10 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1bbfc:	2402      	movs	r4, #2
   1bbfe:	4b2a      	ldr	r3, [pc, #168]	; (1bca8 <usage_fault.constprop.0+0x104>)
   1bc00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc04:	4824      	ldr	r0, [pc, #144]	; (1bc98 <usage_fault.constprop.0+0xf4>)
   1bc06:	aa04      	add	r2, sp, #16
   1bc08:	9305      	str	r3, [sp, #20]
   1bc0a:	9404      	str	r4, [sp, #16]
   1bc0c:	f00a fccc 	bl	265a8 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1bc10:	4b22      	ldr	r3, [pc, #136]	; (1bc9c <usage_fault.constprop.0+0xf8>)
   1bc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bc14:	0318      	lsls	r0, r3, #12
   1bc16:	d509      	bpl.n	1bc2c <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
   1bc18:	4b24      	ldr	r3, [pc, #144]	; (1bcac <usage_fault.constprop.0+0x108>)
   1bc1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc1e:	9305      	str	r3, [sp, #20]
   1bc20:	2302      	movs	r3, #2
   1bc22:	481d      	ldr	r0, [pc, #116]	; (1bc98 <usage_fault.constprop.0+0xf4>)
   1bc24:	aa04      	add	r2, sp, #16
   1bc26:	9304      	str	r3, [sp, #16]
   1bc28:	f00a fcbe 	bl	265a8 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1bc2c:	4b1b      	ldr	r3, [pc, #108]	; (1bc9c <usage_fault.constprop.0+0xf8>)
   1bc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bc30:	0359      	lsls	r1, r3, #13
   1bc32:	d509      	bpl.n	1bc48 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1bc34:	4b1e      	ldr	r3, [pc, #120]	; (1bcb0 <usage_fault.constprop.0+0x10c>)
   1bc36:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc3a:	9305      	str	r3, [sp, #20]
   1bc3c:	2302      	movs	r3, #2
   1bc3e:	4816      	ldr	r0, [pc, #88]	; (1bc98 <usage_fault.constprop.0+0xf4>)
   1bc40:	aa04      	add	r2, sp, #16
   1bc42:	9304      	str	r3, [sp, #16]
   1bc44:	f00a fcb0 	bl	265a8 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1bc48:	4b14      	ldr	r3, [pc, #80]	; (1bc9c <usage_fault.constprop.0+0xf8>)
   1bc4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bc4c:	039a      	lsls	r2, r3, #14
   1bc4e:	d509      	bpl.n	1bc64 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1bc50:	4b18      	ldr	r3, [pc, #96]	; (1bcb4 <usage_fault.constprop.0+0x110>)
   1bc52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc56:	9305      	str	r3, [sp, #20]
   1bc58:	2302      	movs	r3, #2
   1bc5a:	480f      	ldr	r0, [pc, #60]	; (1bc98 <usage_fault.constprop.0+0xf4>)
   1bc5c:	aa04      	add	r2, sp, #16
   1bc5e:	9304      	str	r3, [sp, #16]
   1bc60:	f00a fca2 	bl	265a8 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1bc64:	4b0d      	ldr	r3, [pc, #52]	; (1bc9c <usage_fault.constprop.0+0xf8>)
   1bc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bc68:	03db      	lsls	r3, r3, #15
   1bc6a:	d509      	bpl.n	1bc80 <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1bc6c:	4b12      	ldr	r3, [pc, #72]	; (1bcb8 <usage_fault.constprop.0+0x114>)
   1bc6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc72:	9305      	str	r3, [sp, #20]
   1bc74:	2302      	movs	r3, #2
   1bc76:	4808      	ldr	r0, [pc, #32]	; (1bc98 <usage_fault.constprop.0+0xf4>)
   1bc78:	aa04      	add	r2, sp, #16
   1bc7a:	9304      	str	r3, [sp, #16]
   1bc7c:	f00a fc94 	bl	265a8 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1bc80:	4a06      	ldr	r2, [pc, #24]	; (1bc9c <usage_fault.constprop.0+0xf8>)

	return reason;
}
   1bc82:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1bc84:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1bc86:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1bc8a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1bc8e:	6293      	str	r3, [r2, #40]	; 0x28
}
   1bc90:	b006      	add	sp, #24
   1bc92:	bd10      	pop	{r4, pc}
   1bc94:	00029ce0 	.word	0x00029ce0
   1bc98:	000290f4 	.word	0x000290f4
   1bc9c:	e000ed00 	.word	0xe000ed00
   1bca0:	00029cf8 	.word	0x00029cf8
   1bca4:	00029d0b 	.word	0x00029d0b
   1bca8:	00029d25 	.word	0x00029d25
   1bcac:	00029d4f 	.word	0x00029d4f
   1bcb0:	00029d6d 	.word	0x00029d6d
   1bcb4:	00029d92 	.word	0x00029d92
   1bcb8:	00029dac 	.word	0x00029dac

0001bcbc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1bcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bcc0:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1bcc2:	4b7d      	ldr	r3, [pc, #500]	; (1beb8 <z_arm_fault+0x1fc>)
{
   1bcc4:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1bcc6:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
   1bcca:	468a      	mov	sl, r1
   1bccc:	4616      	mov	r6, r2
   1bcce:	2500      	movs	r5, #0
   1bcd0:	af00      	add	r7, sp, #0
   1bcd2:	f3c9 0808 	ubfx	r8, r9, #0, #9
   1bcd6:	f385 8811 	msr	BASEPRI, r5
   1bcda:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1bcde:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1bce2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1bce6:	d125      	bne.n	1bd34 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1bce8:	07d3      	lsls	r3, r2, #31
   1bcea:	d423      	bmi.n	1bd34 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1bcec:	0650      	lsls	r0, r2, #25
   1bcee:	d403      	bmi.n	1bcf8 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1bcf0:	0711      	lsls	r1, r2, #28
   1bcf2:	d40f      	bmi.n	1bd14 <z_arm_fault+0x58>
			*nested_exc = true;
   1bcf4:	2501      	movs	r5, #1
   1bcf6:	e00f      	b.n	1bd18 <z_arm_fault+0x5c>
		PR_FAULT_INFO("Exception occurred in Secure State");
   1bcf8:	4b70      	ldr	r3, [pc, #448]	; (1bebc <z_arm_fault+0x200>)
   1bcfa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bcfe:	61fb      	str	r3, [r7, #28]
   1bd00:	2302      	movs	r3, #2
   1bd02:	486f      	ldr	r0, [pc, #444]	; (1bec0 <z_arm_fault+0x204>)
   1bd04:	61bb      	str	r3, [r7, #24]
   1bd06:	f107 0218 	add.w	r2, r7, #24
   1bd0a:	f00a fc4d 	bl	265a8 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1bd0e:	f016 0604 	ands.w	r6, r6, #4
   1bd12:	d000      	beq.n	1bd16 <z_arm_fault+0x5a>
			ptr_esf = (z_arch_esf_t *)psp;
   1bd14:	4654      	mov	r4, sl
	*nested_exc = false;
   1bd16:	2500      	movs	r5, #0
	*recoverable = false;
   1bd18:	2300      	movs	r3, #0
   1bd1a:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   1bd1c:	f1a8 0303 	sub.w	r3, r8, #3
   1bd20:	2b09      	cmp	r3, #9
   1bd22:	f200 80a8 	bhi.w	1be76 <z_arm_fault+0x1ba>
   1bd26:	e8df f003 	tbb	[pc, r3]
   1bd2a:	9b07      	.short	0x9b07
   1bd2c:	a6a6979e 	.word	0xa6a6979e
   1bd30:	a1a6a6a6 	.word	0xa1a6a6a6
		return NULL;
   1bd34:	462c      	mov	r4, r5
   1bd36:	e7ef      	b.n	1bd18 <z_arm_fault+0x5c>
	PR_FAULT_INFO("***** HARD FAULT *****");
   1bd38:	46e9      	mov	r9, sp
   1bd3a:	f04f 0802 	mov.w	r8, #2
   1bd3e:	4b61      	ldr	r3, [pc, #388]	; (1bec4 <z_arm_fault+0x208>)
   1bd40:	f107 0218 	add.w	r2, r7, #24
   1bd44:	61fb      	str	r3, [r7, #28]
   1bd46:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bd4a:	485d      	ldr	r0, [pc, #372]	; (1bec0 <z_arm_fault+0x204>)
   1bd4c:	f8c7 8018 	str.w	r8, [r7, #24]
   1bd50:	f00a fc2a 	bl	265a8 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   1bd54:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1bd56:	4e58      	ldr	r6, [pc, #352]	; (1beb8 <z_arm_fault+0x1fc>)
	*recoverable = false;
   1bd58:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1bd5a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1bd5c:	079a      	lsls	r2, r3, #30
   1bd5e:	d50b      	bpl.n	1bd78 <z_arm_fault+0xbc>
		PR_EXC("  Bus fault on vector table read");
   1bd60:	4b59      	ldr	r3, [pc, #356]	; (1bec8 <z_arm_fault+0x20c>)
		PR_EXC("  Debug event");
   1bd62:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   1bd66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bd6a:	4855      	ldr	r0, [pc, #340]	; (1bec0 <z_arm_fault+0x204>)
   1bd6c:	f107 0218 	add.w	r2, r7, #24
   1bd70:	f00a fc1a 	bl	265a8 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1bd74:	2300      	movs	r3, #0
   1bd76:	e038      	b.n	1bdea <z_arm_fault+0x12e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1bd78:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1bd7a:	2b00      	cmp	r3, #0
   1bd7c:	da01      	bge.n	1bd82 <z_arm_fault+0xc6>
		PR_EXC("  Debug event");
   1bd7e:	4b53      	ldr	r3, [pc, #332]	; (1becc <z_arm_fault+0x210>)
   1bd80:	e7ef      	b.n	1bd62 <z_arm_fault+0xa6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1bd82:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1bd84:	005b      	lsls	r3, r3, #1
   1bd86:	d5f5      	bpl.n	1bd74 <z_arm_fault+0xb8>
		PR_EXC("  Fault escalation (see below)");
   1bd88:	4b51      	ldr	r3, [pc, #324]	; (1bed0 <z_arm_fault+0x214>)
   1bd8a:	f107 0218 	add.w	r2, r7, #24
   1bd8e:	e9c7 8306 	strd	r8, r3, [r7, #24]
   1bd92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bd96:	484a      	ldr	r0, [pc, #296]	; (1bec0 <z_arm_fault+0x204>)
   1bd98:	f00a fc06 	bl	265a8 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1bd9c:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   1bd9e:	69a2      	ldr	r2, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1bda0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1bda4:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1bda6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bdaa:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1bdae:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1bdb0:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1bdb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1bdb8:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1bdba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bdbe:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1bdc2:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1bdc6:	429a      	cmp	r2, r3
   1bdc8:	d131      	bne.n	1be2e <z_arm_fault+0x172>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1bdca:	b088      	sub	sp, #32
   1bdcc:	6823      	ldr	r3, [r4, #0]
   1bdce:	466a      	mov	r2, sp
   1bdd0:	4940      	ldr	r1, [pc, #256]	; (1bed4 <z_arm_fault+0x218>)
   1bdd2:	483b      	ldr	r0, [pc, #236]	; (1bec0 <z_arm_fault+0x204>)
   1bdd4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1bdd8:	2303      	movs	r3, #3
   1bdda:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bdde:	f842 3f10 	str.w	r3, [r2, #16]!
   1bde2:	f00a fbe1 	bl	265a8 <z_log_msg_static_create.constprop.0>
   1bde6:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   1bde8:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1bdea:	79fa      	ldrb	r2, [r7, #7]
   1bdec:	b9da      	cbnz	r2, 1be26 <z_arm_fault+0x16a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1bdee:	f107 0608 	add.w	r6, r7, #8
   1bdf2:	f104 0c20 	add.w	ip, r4, #32
   1bdf6:	4632      	mov	r2, r6
   1bdf8:	6820      	ldr	r0, [r4, #0]
   1bdfa:	6861      	ldr	r1, [r4, #4]
   1bdfc:	3408      	adds	r4, #8
   1bdfe:	c203      	stmia	r2!, {r0, r1}
   1be00:	4564      	cmp	r4, ip
   1be02:	4616      	mov	r6, r2
   1be04:	d1f7      	bne.n	1bdf6 <z_arm_fault+0x13a>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1be06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1be08:	2d00      	cmp	r5, #0
   1be0a:	d050      	beq.n	1beae <z_arm_fault+0x1f2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1be0c:	f3c2 0108 	ubfx	r1, r2, #0, #9
   1be10:	b921      	cbnz	r1, 1be1c <z_arm_fault+0x160>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1be12:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   1be16:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1be1a:	627a      	str	r2, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1be1c:	4618      	mov	r0, r3
   1be1e:	f107 0108 	add.w	r1, r7, #8
   1be22:	f7ff fc03 	bl	1b62c <z_arm_fatal_error>
}
   1be26:	3728      	adds	r7, #40	; 0x28
   1be28:	46bd      	mov	sp, r7
   1be2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1be2e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1be30:	b2db      	uxtb	r3, r3
   1be32:	b123      	cbz	r3, 1be3e <z_arm_fault+0x182>
			reason = mem_manage_fault(esf, 1, recoverable);
   1be34:	2001      	movs	r0, #1
   1be36:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1be38:	f7ff fd80 	bl	1b93c <mem_manage_fault.constprop.0>
   1be3c:	e00e      	b.n	1be5c <z_arm_fault+0x1a0>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1be3e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1be40:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   1be44:	d004      	beq.n	1be50 <z_arm_fault+0x194>
			reason = bus_fault(esf, 1, recoverable);
   1be46:	2001      	movs	r0, #1
   1be48:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
   1be4a:	f7ff fe13 	bl	1ba74 <bus_fault.constprop.0>
   1be4e:	e005      	b.n	1be5c <z_arm_fault+0x1a0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1be50:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1be52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1be56:	d38d      	bcc.n	1bd74 <z_arm_fault+0xb8>
			reason = usage_fault(esf);
   1be58:	f7ff fea4 	bl	1bba4 <usage_fault.constprop.0>
   1be5c:	4603      	mov	r3, r0
   1be5e:	e7c4      	b.n	1bdea <z_arm_fault+0x12e>
		reason = mem_manage_fault(esf, 0, recoverable);
   1be60:	2000      	movs	r0, #0
   1be62:	1df9      	adds	r1, r7, #7
   1be64:	e7e8      	b.n	1be38 <z_arm_fault+0x17c>
		reason = bus_fault(esf, 0, recoverable);
   1be66:	2000      	movs	r0, #0
   1be68:	1df9      	adds	r1, r7, #7
   1be6a:	e7ee      	b.n	1be4a <z_arm_fault+0x18e>
	PR_FAULT_INFO(
   1be6c:	4b1a      	ldr	r3, [pc, #104]	; (1bed8 <z_arm_fault+0x21c>)
   1be6e:	61fb      	str	r3, [r7, #28]
   1be70:	2302      	movs	r3, #2
   1be72:	61bb      	str	r3, [r7, #24]
   1be74:	e777      	b.n	1bd66 <z_arm_fault+0xaa>
	PR_FAULT_INFO("***** %s %d) *****",
   1be76:	4a19      	ldr	r2, [pc, #100]	; (1bedc <z_arm_fault+0x220>)
   1be78:	466e      	mov	r6, sp
   1be7a:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
   1be7e:	b08a      	sub	sp, #40	; 0x28
   1be80:	4b17      	ldr	r3, [pc, #92]	; (1bee0 <z_arm_fault+0x224>)
   1be82:	bf18      	it	ne
   1be84:	4613      	movne	r3, r2
   1be86:	466a      	mov	r2, sp
   1be88:	4916      	ldr	r1, [pc, #88]	; (1bee4 <z_arm_fault+0x228>)
   1be8a:	480d      	ldr	r0, [pc, #52]	; (1bec0 <z_arm_fault+0x204>)
   1be8c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1be90:	f1a8 0310 	sub.w	r3, r8, #16
   1be94:	61d3      	str	r3, [r2, #28]
   1be96:	f44f 7300 	mov.w	r3, #512	; 0x200
   1be9a:	8413      	strh	r3, [r2, #32]
   1be9c:	4b12      	ldr	r3, [pc, #72]	; (1bee8 <z_arm_fault+0x22c>)
   1be9e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1bea2:	f842 3f10 	str.w	r3, [r2, #16]!
   1bea6:	f00a fb7f 	bl	265a8 <z_log_msg_static_create.constprop.0>
   1beaa:	46b5      	mov	sp, r6
}
   1beac:	e762      	b.n	1bd74 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1beae:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
   1beb2:	f022 0201 	bic.w	r2, r2, #1
   1beb6:	e7b0      	b.n	1be1a <z_arm_fault+0x15e>
   1beb8:	e000ed00 	.word	0xe000ed00
   1bebc:	00029e05 	.word	0x00029e05
   1bec0:	000290f4 	.word	0x000290f4
   1bec4:	00029e28 	.word	0x00029e28
   1bec8:	00029e3f 	.word	0x00029e3f
   1becc:	00029e60 	.word	0x00029e60
   1bed0:	00029e6e 	.word	0x00029e6e
   1bed4:	00029e8d 	.word	0x00029e8d
   1bed8:	00029ea9 	.word	0x00029ea9
   1bedc:	00029dec 	.word	0x00029dec
   1bee0:	00029dd7 	.word	0x00029dd7
   1bee4:	00029ecd 	.word	0x00029ecd
   1bee8:	01000004 	.word	0x01000004

0001beec <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1beec:	4b04      	ldr	r3, [pc, #16]	; (1bf00 <z_arm_fault_init+0x14>)
   1beee:	695a      	ldr	r2, [r3, #20]
   1bef0:	f042 0210 	orr.w	r2, r2, #16
   1bef4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1bef6:	695a      	ldr	r2, [r3, #20]
   1bef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1befc:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1befe:	4770      	bx	lr
   1bf00:	e000ed00 	.word	0xe000ed00

0001bf04 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1bf04:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1bf08:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1bf0c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1bf0e:	4672      	mov	r2, lr
	bl z_arm_fault
   1bf10:	f7ff fed4 	bl	1bcbc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1bf14:	bd01      	pop	{r0, pc}
   1bf16:	bf00      	nop

0001bf18 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1bf18:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bf1a:	2120      	movs	r1, #32
   1bf1c:	4803      	ldr	r0, [pc, #12]	; (1bf2c <z_arm_interrupt_init+0x14>)
   1bf1e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1bf20:	3301      	adds	r3, #1
   1bf22:	2b41      	cmp	r3, #65	; 0x41
   1bf24:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1bf28:	d1f9      	bne.n	1bf1e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1bf2a:	4770      	bx	lr
   1bf2c:	e000e100 	.word	0xe000e100

0001bf30 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1bf30:	2000      	movs	r0, #0
    msr CONTROL, r0
   1bf32:	f380 8814 	msr	CONTROL, r0
    isb
   1bf36:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   1bf3a:	2000      	movs	r0, #0
    msr MSPLIM, r0
   1bf3c:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   1bf40:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1bf44:	f7fe fc54 	bl	1a7f0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1bf48:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1bf4a:	490e      	ldr	r1, [pc, #56]	; (1bf84 <__start+0x54>)
    str r0, [r1]
   1bf4c:	6008      	str	r0, [r1, #0]
    dsb
   1bf4e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1bf52:	480d      	ldr	r0, [pc, #52]	; (1bf88 <__start+0x58>)
    msr msp, r0
   1bf54:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1bf58:	f000 f83e 	bl	1bfd8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1bf5c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1bf5e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1bf62:	480a      	ldr	r0, [pc, #40]	; (1bf8c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1bf64:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1bf68:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1bf6a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1bf6e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1bf72:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1bf74:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1bf76:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1bf7a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1bf7e:	f7ff fc05 	bl	1b78c <z_arm_prep_c>
   1bf82:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   1bf84:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1bf88:	2000fba0 	.word	0x2000fba0
    ldr r0, =z_interrupt_stacks
   1bf8c:	2000e260 	.word	0x2000e260

0001bf90 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1bf90:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1bf94:	4905      	ldr	r1, [pc, #20]	; (1bfac <sys_arch_reboot+0x1c>)
   1bf96:	4b06      	ldr	r3, [pc, #24]	; (1bfb0 <sys_arch_reboot+0x20>)
   1bf98:	68ca      	ldr	r2, [r1, #12]
   1bf9a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1bf9e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1bfa0:	60cb      	str	r3, [r1, #12]
   1bfa2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1bfa6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1bfa8:	e7fd      	b.n	1bfa6 <sys_arch_reboot+0x16>
   1bfaa:	bf00      	nop
   1bfac:	e000ed00 	.word	0xe000ed00
   1bfb0:	05fa0004 	.word	0x05fa0004

0001bfb4 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   1bfb4:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   1bfb6:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1bfb8:	4906      	ldr	r1, [pc, #24]	; (1bfd4 <z_arm_clear_arm_mpu_config+0x20>)
   1bfba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   1bfbe:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   1bfc2:	4293      	cmp	r3, r2
   1bfc4:	db00      	blt.n	1bfc8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1bfc6:	4770      	bx	lr
  mpu->RNR = rnr;
   1bfc8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   1bfcc:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   1bfd0:	3301      	adds	r3, #1
   1bfd2:	e7f6      	b.n	1bfc2 <z_arm_clear_arm_mpu_config+0xe>
   1bfd4:	e000ed00 	.word	0xe000ed00

0001bfd8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1bfd8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1bfda:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1bfdc:	2400      	movs	r4, #0
   1bfde:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1bfe2:	f7ff ffe7 	bl	1bfb4 <z_arm_clear_arm_mpu_config>
   1bfe6:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1bfe8:	f04f 30ff 	mov.w	r0, #4294967295
   1bfec:	4a0c      	ldr	r2, [pc, #48]	; (1c020 <z_arm_init_arch_hw_at_boot+0x48>)
   1bfee:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1bff2:	3301      	adds	r3, #1
   1bff4:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   1bff6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1bffa:	d1f8      	bne.n	1bfee <z_arm_init_arch_hw_at_boot+0x16>
   1bffc:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1bffe:	f04f 30ff 	mov.w	r0, #4294967295
   1c002:	4a07      	ldr	r2, [pc, #28]	; (1c020 <z_arm_init_arch_hw_at_boot+0x48>)
   1c004:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1c008:	3301      	adds	r3, #1
   1c00a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1c00c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1c010:	d1f8      	bne.n	1c004 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1c012:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1c014:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c018:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1c01c:	bd10      	pop	{r4, pc}
   1c01e:	bf00      	nop
   1c020:	e000e100 	.word	0xe000e100

0001c024 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1c024:	4b08      	ldr	r3, [pc, #32]	; (1c048 <z_impl_k_thread_abort+0x24>)
   1c026:	689b      	ldr	r3, [r3, #8]
   1c028:	4283      	cmp	r3, r0
   1c02a:	d10b      	bne.n	1c044 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1c02c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1c030:	b143      	cbz	r3, 1c044 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1c032:	4b06      	ldr	r3, [pc, #24]	; (1c04c <z_impl_k_thread_abort+0x28>)
   1c034:	685a      	ldr	r2, [r3, #4]
   1c036:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1c03a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1c03c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1c03e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1c042:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   1c044:	f008 bc60 	b.w	24908 <z_thread_abort>
   1c048:	2000d8b0 	.word	0x2000d8b0
   1c04c:	e000ed00 	.word	0xe000ed00

0001c050 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1c050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1c052:	4c09      	ldr	r4, [pc, #36]	; (1c078 <z_arm_configure_static_mpu_regions+0x28>)
   1c054:	4a09      	ldr	r2, [pc, #36]	; (1c07c <z_arm_configure_static_mpu_regions+0x2c>)
   1c056:	4623      	mov	r3, r4
   1c058:	2101      	movs	r1, #1
   1c05a:	4809      	ldr	r0, [pc, #36]	; (1c080 <z_arm_configure_static_mpu_regions+0x30>)
   1c05c:	f000 f92a 	bl	1c2b4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1c060:	2300      	movs	r3, #0
   1c062:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1c064:	4b07      	ldr	r3, [pc, #28]	; (1c084 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c066:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1c068:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c06a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1c06c:	9301      	str	r3, [sp, #4]
   1c06e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c070:	f000 f92a 	bl	1c2c8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1c074:	b004      	add	sp, #16
   1c076:	bd10      	pop	{r4, pc}
   1c078:	20040000 	.word	0x20040000
   1c07c:	2000c580 	.word	0x2000c580
   1c080:	000291d4 	.word	0x000291d4
   1c084:	2000c968 	.word	0x2000c968

0001c088 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   1c088:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   1c08a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1c08c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1c08e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1c092:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   1c096:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1c098:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1c09a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1c09c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   1c0a0:	4905      	ldr	r1, [pc, #20]	; (1c0b8 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1c0a2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1c0a6:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   1c0aa:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   1c0ae:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   1c0b2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1c0b6:	bd10      	pop	{r4, pc}
   1c0b8:	e000ed00 	.word	0xe000ed00

0001c0bc <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   1c0bc:	b580      	push	{r7, lr}
   1c0be:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1c0c0:	b088      	sub	sp, #32
   1c0c2:	466a      	mov	r2, sp
   1c0c4:	4b07      	ldr	r3, [pc, #28]	; (1c0e4 <region_allocate_and_init.part.0+0x28>)
   1c0c6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c0ca:	2303      	movs	r3, #3
   1c0cc:	f842 3f10 	str.w	r3, [r2, #16]!
   1c0d0:	2300      	movs	r3, #0
   1c0d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c0d6:	4804      	ldr	r0, [pc, #16]	; (1c0e8 <region_allocate_and_init.part.0+0x2c>)
   1c0d8:	f7fe fe12 	bl	1ad00 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   1c0dc:	f06f 0015 	mvn.w	r0, #21
   1c0e0:	46bd      	mov	sp, r7
   1c0e2:	bd80      	pop	{r7, pc}
   1c0e4:	00029ee4 	.word	0x00029ee4
   1c0e8:	00029084 	.word	0x00029084

0001c0ec <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1c0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0f0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1c0f2:	4606      	mov	r6, r0
   1c0f4:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1c0f8:	b087      	sub	sp, #28
	MPU->RNR = rnr;
   1c0fa:	4d5f      	ldr	r5, [pc, #380]	; (1c278 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1c0fc:	af00      	add	r7, sp, #0
   1c0fe:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
   1c100:	687b      	ldr	r3, [r7, #4]
   1c102:	4599      	cmp	r9, r3
   1c104:	da35      	bge.n	1c172 <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
   1c106:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1c10a:	f1b8 0f00 	cmp.w	r8, #0
   1c10e:	d054      	beq.n	1c1ba <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
   1c110:	f1b8 0f1f 	cmp.w	r8, #31
   1c114:	d91b      	bls.n	1c14e <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
   1c116:	f018 0f1f 	tst.w	r8, #31
   1c11a:	d118      	bne.n	1c14e <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
   1c11c:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   1c120:	f01b 0f1f 	tst.w	fp, #31
   1c124:	d113      	bne.n	1c14e <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1c126:	4658      	mov	r0, fp
   1c128:	f00a fa43 	bl	265b2 <arm_cmse_mpu_region_get>
   1c12c:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1c12e:	eb08 000b 	add.w	r0, r8, fp
   1c132:	3801      	subs	r0, #1
   1c134:	f00a fa3d 	bl	265b2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1c138:	4582      	cmp	sl, r0
   1c13a:	d01f      	beq.n	1c17c <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   1c13c:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1c140:	466c      	mov	r4, sp
   1c142:	b088      	sub	sp, #32
   1c144:	466a      	mov	r2, sp
   1c146:	494d      	ldr	r1, [pc, #308]	; (1c27c <mpu_configure_regions_and_partition.constprop.0+0x190>)
   1c148:	e9c2 1a05 	strd	r1, sl, [r2, #20]
   1c14c:	e005      	b.n	1c15a <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1c14e:	466c      	mov	r4, sp
   1c150:	b088      	sub	sp, #32
   1c152:	466a      	mov	r2, sp
   1c154:	4b4a      	ldr	r3, [pc, #296]	; (1c280 <mpu_configure_regions_and_partition.constprop.0+0x194>)
   1c156:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
   1c15a:	2303      	movs	r3, #3
   1c15c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c160:	2300      	movs	r3, #0
   1c162:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c166:	4847      	ldr	r0, [pc, #284]	; (1c284 <mpu_configure_regions_and_partition.constprop.0+0x198>)
   1c168:	f7fe fdca 	bl	1ad00 <z_impl_z_log_msg_static_create>
   1c16c:	46a5      	mov	sp, r4
			return -EINVAL;
   1c16e:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1c172:	4620      	mov	r0, r4
   1c174:	371c      	adds	r7, #28
   1c176:	46bd      	mov	sp, r7
   1c178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   1c17c:	f11a 0f16 	cmn.w	sl, #22
   1c180:	d0de      	beq.n	1c140 <mpu_configure_regions_and_partition.constprop.0+0x54>
   1c182:	4554      	cmp	r4, sl
   1c184:	dddc      	ble.n	1c140 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
   1c186:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1c18a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   1c18e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
   1c192:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1c196:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1c19a:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1c19e:	e9d6 2100 	ldrd	r2, r1, [r6]
   1c1a2:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
   1c1a4:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1c1a6:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
   1c1aa:	d11e      	bne.n	1c1ea <mpu_configure_regions_and_partition.constprop.0+0xfe>
   1c1ac:	45d8      	cmp	r8, fp
   1c1ae:	d108      	bne.n	1c1c2 <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
   1c1b0:	4631      	mov	r1, r6
   1c1b2:	fa5f f08a 	uxtb.w	r0, sl
   1c1b6:	f00a fa05 	bl	265c4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1c1ba:	f109 0901 	add.w	r9, r9, #1
   1c1be:	360c      	adds	r6, #12
   1c1c0:	e79e      	b.n	1c100 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
   1c1c2:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1c1c6:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   1c1ca:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   1c1ce:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   1c1d2:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
   1c1d4:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
   1c1d6:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   1c1da:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   1c1dc:	f00a f9f2 	bl	265c4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1c1e0:	f110 0f16 	cmn.w	r0, #22
   1c1e4:	d0c3      	beq.n	1c16e <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
   1c1e6:	1c44      	adds	r4, r0, #1
   1c1e8:	e7e7      	b.n	1c1ba <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
   1c1ea:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
   1c1ec:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
   1c1ee:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1c1f0:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   1c1f4:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   1c1f8:	d108      	bne.n	1c20c <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
   1c1fa:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1c1fe:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   1c200:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1c204:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   1c206:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   1c20a:	e7e7      	b.n	1c1dc <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
   1c20c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   1c210:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1c214:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
   1c216:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1c21a:	4631      	mov	r1, r6
   1c21c:	f00a f9d2 	bl	265c4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1c220:	f110 0f16 	cmn.w	r0, #22
   1c224:	d0a3      	beq.n	1c16e <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
   1c226:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1c22a:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1c22e:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   1c230:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
   1c234:	f362 0304 	bfi	r3, r2, #0, #5
   1c238:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
   1c23a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1c23e:	7c3a      	ldrb	r2, [r7, #16]
   1c240:	085b      	lsrs	r3, r3, #1
   1c242:	f363 1247 	bfi	r2, r3, #5, #3
   1c246:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
   1c248:	e9d6 3200 	ldrd	r3, r2, [r6]
   1c24c:	4413      	add	r3, r2
   1c24e:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   1c250:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   1c254:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1c256:	4443      	add	r3, r8
   1c258:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
   1c25c:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   1c25e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1c262:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   1c264:	617b      	str	r3, [r7, #20]
   1c266:	d902      	bls.n	1c26e <mpu_configure_regions_and_partition.constprop.0+0x182>
   1c268:	f7ff ff28 	bl	1c0bc <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   1c26c:	e7b8      	b.n	1c1e0 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
   1c26e:	f107 0108 	add.w	r1, r7, #8
   1c272:	f7ff ff09 	bl	1c088 <region_init>
   1c276:	e7b6      	b.n	1c1e6 <mpu_configure_regions_and_partition.constprop.0+0xfa>
   1c278:	e000ed00 	.word	0xe000ed00
   1c27c:	00029f2d 	.word	0x00029f2d
   1c280:	00029f0a 	.word	0x00029f0a
   1c284:	00029084 	.word	0x00029084

0001c288 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1c288:	2205      	movs	r2, #5
   1c28a:	4b04      	ldr	r3, [pc, #16]	; (1c29c <arm_core_mpu_enable+0x14>)
   1c28c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1c290:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c294:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1c298:	4770      	bx	lr
   1c29a:	bf00      	nop
   1c29c:	e000ed00 	.word	0xe000ed00

0001c2a0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1c2a0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1c2a4:	2200      	movs	r2, #0
   1c2a6:	4b02      	ldr	r3, [pc, #8]	; (1c2b0 <arm_core_mpu_disable+0x10>)
   1c2a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   1c2ac:	4770      	bx	lr
   1c2ae:	bf00      	nop
   1c2b0:	e000ed00 	.word	0xe000ed00

0001c2b4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1c2b4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1c2b6:	4c03      	ldr	r4, [pc, #12]	; (1c2c4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1c2b8:	7822      	ldrb	r2, [r4, #0]
   1c2ba:	f7ff ff17 	bl	1c0ec <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1c2be:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1c2c0:	bd10      	pop	{r4, pc}
   1c2c2:	bf00      	nop
   1c2c4:	2000d907 	.word	0x2000d907

0001c2c8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   1c2c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2cc:	4d29      	ldr	r5, [pc, #164]	; (1c374 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
   1c2ce:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
   1c2d0:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1c2d2:	f04f 0800 	mov.w	r8, #0
   1c2d6:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
   1c2d8:	4f27      	ldr	r7, [pc, #156]	; (1c378 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1c2da:	45d0      	cmp	r8, sl
   1c2dc:	da1b      	bge.n	1c316 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   1c2de:	f8d6 9004 	ldr.w	r9, [r6, #4]
   1c2e2:	f1b9 0f00 	cmp.w	r9, #0
   1c2e6:	d03f      	beq.n	1c368 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1c2e8:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1c2ea:	4608      	mov	r0, r1
   1c2ec:	9101      	str	r1, [sp, #4]
   1c2ee:	f00a f960 	bl	265b2 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1c2f2:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1c2f4:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1c2f6:	eb09 0001 	add.w	r0, r9, r1
   1c2fa:	3801      	subs	r0, #1
   1c2fc:	f00a f959 	bl	265b2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1c300:	4284      	cmp	r4, r0
   1c302:	f04f 0214 	mov.w	r2, #20
   1c306:	4b1d      	ldr	r3, [pc, #116]	; (1c37c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
   1c308:	d008      	beq.n	1c31c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   1c30a:	fb02 f308 	mul.w	r3, r2, r8
   1c30e:	f06f 0215 	mvn.w	r2, #21
   1c312:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   1c316:	b003      	add	sp, #12
   1c318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1c31c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   1c320:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1c322:	d0f8      	beq.n	1c316 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1c324:	7819      	ldrb	r1, [r3, #0]
   1c326:	42a1      	cmp	r1, r4
   1c328:	ddf5      	ble.n	1c316 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
   1c32a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   1c32e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   1c332:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   1c336:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1c33a:	f100 0108 	add.w	r1, r0, #8
   1c33e:	7b00      	ldrb	r0, [r0, #12]
   1c340:	f364 0004 	bfi	r0, r4, #0, #5
   1c344:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   1c346:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1c34a:	790c      	ldrb	r4, [r1, #4]
   1c34c:	0840      	lsrs	r0, r0, #1
   1c34e:	f360 1447 	bfi	r4, r0, #5, #3
   1c352:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   1c354:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1c358:	f021 011f 	bic.w	r1, r1, #31
   1c35c:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
   1c35e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   1c362:	f021 011f 	bic.w	r1, r1, #31
   1c366:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1c368:	f108 0801 	add.w	r8, r8, #1
   1c36c:	3514      	adds	r5, #20
   1c36e:	360c      	adds	r6, #12
   1c370:	e7b3      	b.n	1c2da <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1c372:	bf00      	nop
   1c374:	2000d19c 	.word	0x2000d19c
   1c378:	e000ed00 	.word	0xe000ed00
   1c37c:	2000d907 	.word	0x2000d907

0001c380 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   1c380:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1c382:	4d0e      	ldr	r5, [pc, #56]	; (1c3bc <z_arm_mpu_init+0x3c>)
   1c384:	682c      	ldr	r4, [r5, #0]
   1c386:	2c10      	cmp	r4, #16
   1c388:	d815      	bhi.n	1c3b6 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1c38a:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   1c38c:	f7ff ff88 	bl	1c2a0 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   1c390:	4b0b      	ldr	r3, [pc, #44]	; (1c3c0 <z_arm_mpu_init+0x40>)
   1c392:	4a0c      	ldr	r2, [pc, #48]	; (1c3c4 <z_arm_mpu_init+0x44>)
   1c394:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1c398:	4284      	cmp	r4, r0
   1c39a:	d105      	bne.n	1c3a8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1c39c:	4b0a      	ldr	r3, [pc, #40]	; (1c3c8 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1c39e:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
   1c3a0:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   1c3a2:	f7ff ff71 	bl	1c288 <arm_core_mpu_enable>
}
   1c3a6:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1c3a8:	6869      	ldr	r1, [r5, #4]
   1c3aa:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1c3ae:	f7ff fe6b 	bl	1c088 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1c3b2:	3001      	adds	r0, #1
   1c3b4:	e7f0      	b.n	1c398 <z_arm_mpu_init+0x18>
		return -1;
   1c3b6:	f04f 30ff 	mov.w	r0, #4294967295
   1c3ba:	e7f4      	b.n	1c3a6 <z_arm_mpu_init+0x26>
   1c3bc:	000291e0 	.word	0x000291e0
   1c3c0:	e000ed00 	.word	0xe000ed00
   1c3c4:	0044ffaa 	.word	0x0044ffaa
   1c3c8:	2000d907 	.word	0x2000d907

0001c3cc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1c3cc:	4b01      	ldr	r3, [pc, #4]	; (1c3d4 <__stdout_hook_install+0x8>)
   1c3ce:	6018      	str	r0, [r3, #0]
}
   1c3d0:	4770      	bx	lr
   1c3d2:	bf00      	nop
   1c3d4:	2000c590 	.word	0x2000c590

0001c3d8 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   1c3d8:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   1c3da:	4c07      	ldr	r4, [pc, #28]	; (1c3f8 <_sbrk+0x20>)
   1c3dc:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1c3de:	18c2      	adds	r2, r0, r3
   1c3e0:	4806      	ldr	r0, [pc, #24]	; (1c3fc <_sbrk+0x24>)
   1c3e2:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1c3e6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1c3ea:	428a      	cmp	r2, r1
		heap_sz += count;
   1c3ec:	bf36      	itet	cc
   1c3ee:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   1c3f0:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1c3f4:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   1c3f6:	bd10      	pop	{r4, pc}
   1c3f8:	2000d1b0 	.word	0x2000d1b0
   1c3fc:	200108c0 	.word	0x200108c0

0001c400 <thingy91_board_init>:

	return 0;
}

static int thingy91_board_init(const struct device *dev)
{
   1c400:	b5b0      	push	{r4, r5, r7, lr}
	err = adp536x_init(ADP536X_I2C_DEVICE);
   1c402:	483e      	ldr	r0, [pc, #248]	; (1c4fc <thingy91_board_init+0xfc>)
{
   1c404:	af00      	add	r7, sp, #0
	err = adp536x_init(ADP536X_I2C_DEVICE);
   1c406:	f7ff f8e3 	bl	1b5d0 <adp536x_init>
	if (err) {
   1c40a:	4604      	mov	r4, r0
   1c40c:	b300      	cbz	r0, 1c450 <thingy91_board_init+0x50>
		LOG_ERR("ADP536X failed to initialize, error: %d\n", err);
   1c40e:	466d      	mov	r5, sp
   1c410:	b088      	sub	sp, #32
   1c412:	466a      	mov	r2, sp
   1c414:	4b3a      	ldr	r3, [pc, #232]	; (1c500 <thingy91_board_init+0x100>)
		LOG_ERR("Could not enable fuel gauge: %d", err);
   1c416:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c41a:	2303      	movs	r3, #3
   1c41c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c420:	4838      	ldr	r0, [pc, #224]	; (1c504 <thingy91_board_init+0x104>)
   1c422:	f842 3f10 	str.w	r3, [r2, #16]!
   1c426:	f00a f8fc 	bl	26622 <z_log_msg_static_create.constprop.0>
   1c42a:	46ad      	mov	sp, r5
	int err;

	err = power_mgmt_init();
	if (err) {
		LOG_ERR("power_mgmt_init failed with error: %d", err);
   1c42c:	466d      	mov	r5, sp
   1c42e:	b088      	sub	sp, #32
   1c430:	466a      	mov	r2, sp
   1c432:	4b35      	ldr	r3, [pc, #212]	; (1c508 <thingy91_board_init+0x108>)
   1c434:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c438:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c43c:	2303      	movs	r3, #3
   1c43e:	4831      	ldr	r0, [pc, #196]	; (1c504 <thingy91_board_init+0x104>)
   1c440:	f842 3f10 	str.w	r3, [r2, #16]!
   1c444:	f00a f8ed 	bl	26622 <z_log_msg_static_create.constprop.0>
   1c448:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   1c44a:	4620      	mov	r0, r4
   1c44c:	46bd      	mov	sp, r7
   1c44e:	bdb0      	pop	{r4, r5, r7, pc}
	err = adp536x_buck_1v8_set();
   1c450:	f00a f877 	bl	26542 <adp536x_buck_1v8_set>
	if (err) {
   1c454:	4604      	mov	r4, r0
   1c456:	b120      	cbz	r0, 1c462 <thingy91_board_init+0x62>
		LOG_ERR("Could not set buck to 1.8 V, error: %d\n", err);
   1c458:	466d      	mov	r5, sp
   1c45a:	b088      	sub	sp, #32
   1c45c:	466a      	mov	r2, sp
   1c45e:	4b2b      	ldr	r3, [pc, #172]	; (1c50c <thingy91_board_init+0x10c>)
   1c460:	e7d9      	b.n	1c416 <thingy91_board_init+0x16>
	err = adp536x_buckbst_3v3_set();
   1c462:	f00a f87a 	bl	2655a <adp536x_buckbst_3v3_set>
	if (err) {
   1c466:	4604      	mov	r4, r0
   1c468:	b120      	cbz	r0, 1c474 <thingy91_board_init+0x74>
		LOG_ERR("Could not set buck/boost to 3.3 V, error: %d\n", err);
   1c46a:	466d      	mov	r5, sp
   1c46c:	b088      	sub	sp, #32
   1c46e:	466a      	mov	r2, sp
   1c470:	4b27      	ldr	r3, [pc, #156]	; (1c510 <thingy91_board_init+0x110>)
   1c472:	e7d0      	b.n	1c416 <thingy91_board_init+0x16>
	err = adp536x_buckbst_enable(true);
   1c474:	2001      	movs	r0, #1
   1c476:	f00a f875 	bl	26564 <adp536x_buckbst_enable>
	if (err) {
   1c47a:	4604      	mov	r4, r0
   1c47c:	b120      	cbz	r0, 1c488 <thingy91_board_init+0x88>
		LOG_ERR("Could not enable buck/boost output, error: %d\n", err);
   1c47e:	466d      	mov	r5, sp
   1c480:	b088      	sub	sp, #32
   1c482:	466a      	mov	r2, sp
   1c484:	4b23      	ldr	r3, [pc, #140]	; (1c514 <thingy91_board_init+0x114>)
   1c486:	e7c6      	b.n	1c416 <thingy91_board_init+0x16>
	err = adp536x_buck_discharge_set(true);
   1c488:	2001      	movs	r0, #1
   1c48a:	f00a f85f 	bl	2654c <adp536x_buck_discharge_set>
	if (err) {
   1c48e:	4604      	mov	r4, r0
   1c490:	2800      	cmp	r0, #0
   1c492:	d1cb      	bne.n	1c42c <thingy91_board_init+0x2c>
	err = adp536x_vbus_current_set(ADP536X_VBUS_ILIM_500mA);
   1c494:	2007      	movs	r0, #7
   1c496:	f00a f842 	bl	2651e <adp536x_vbus_current_set>
	if (err) {
   1c49a:	4604      	mov	r4, r0
   1c49c:	b120      	cbz	r0, 1c4a8 <thingy91_board_init+0xa8>
		LOG_ERR("Could not set VBUS current limit, error: %d\n", err);
   1c49e:	466d      	mov	r5, sp
   1c4a0:	b088      	sub	sp, #32
   1c4a2:	466a      	mov	r2, sp
   1c4a4:	4b1c      	ldr	r3, [pc, #112]	; (1c518 <thingy91_board_init+0x118>)
   1c4a6:	e7b6      	b.n	1c416 <thingy91_board_init+0x16>
	err = adp536x_charger_current_set(ADP536X_CHG_CURRENT_320mA);
   1c4a8:	201f      	movs	r0, #31
   1c4aa:	f00a f832 	bl	26512 <adp536x_charger_current_set>
	if (err) {
   1c4ae:	4604      	mov	r4, r0
   1c4b0:	b120      	cbz	r0, 1c4bc <thingy91_board_init+0xbc>
		LOG_ERR("Could not set charging current, error: %d\n", err);
   1c4b2:	466d      	mov	r5, sp
   1c4b4:	b088      	sub	sp, #32
   1c4b6:	466a      	mov	r2, sp
   1c4b8:	4b18      	ldr	r3, [pc, #96]	; (1c51c <thingy91_board_init+0x11c>)
   1c4ba:	e7ac      	b.n	1c416 <thingy91_board_init+0x16>
	err = adp536x_oc_chg_current_set(ADP536X_OC_CHG_THRESHOLD_400mA);
   1c4bc:	2007      	movs	r0, #7
   1c4be:	f00a f839 	bl	26534 <adp536x_oc_chg_current_set>
	if (err) {
   1c4c2:	4604      	mov	r4, r0
   1c4c4:	b120      	cbz	r0, 1c4d0 <thingy91_board_init+0xd0>
		LOG_ERR("Could not set charge current protection, error: %d\n",
   1c4c6:	466d      	mov	r5, sp
   1c4c8:	b088      	sub	sp, #32
   1c4ca:	466a      	mov	r2, sp
   1c4cc:	4b14      	ldr	r3, [pc, #80]	; (1c520 <thingy91_board_init+0x120>)
   1c4ce:	e7a2      	b.n	1c416 <thingy91_board_init+0x16>
	err = adp536x_charging_enable(true);
   1c4d0:	2001      	movs	r0, #1
   1c4d2:	f00a f82a 	bl	2652a <adp536x_charging_enable>
	if (err) {
   1c4d6:	4604      	mov	r4, r0
   1c4d8:	b120      	cbz	r0, 1c4e4 <thingy91_board_init+0xe4>
		LOG_ERR("Could not enable charging: %d\n", err);
   1c4da:	466d      	mov	r5, sp
   1c4dc:	b088      	sub	sp, #32
   1c4de:	466a      	mov	r2, sp
   1c4e0:	4b10      	ldr	r3, [pc, #64]	; (1c524 <thingy91_board_init+0x124>)
   1c4e2:	e798      	b.n	1c416 <thingy91_board_init+0x16>
	err = adp536x_fg_set_mode(ADP566X_FG_ENABLED, ADP566X_FG_MODE_SLEEP);
   1c4e4:	2101      	movs	r1, #1
   1c4e6:	4608      	mov	r0, r1
   1c4e8:	f00a f841 	bl	2656e <adp536x_fg_set_mode>
	if (err) {
   1c4ec:	4604      	mov	r4, r0
   1c4ee:	2800      	cmp	r0, #0
   1c4f0:	d0ab      	beq.n	1c44a <thingy91_board_init+0x4a>
		LOG_ERR("Could not enable fuel gauge: %d", err);
   1c4f2:	466d      	mov	r5, sp
   1c4f4:	b088      	sub	sp, #32
   1c4f6:	466a      	mov	r2, sp
   1c4f8:	4b0b      	ldr	r3, [pc, #44]	; (1c528 <thingy91_board_init+0x128>)
   1c4fa:	e78c      	b.n	1c416 <thingy91_board_init+0x16>
   1c4fc:	00028d6c 	.word	0x00028d6c
   1c500:	00029f5f 	.word	0x00029f5f
   1c504:	0002901c 	.word	0x0002901c
   1c508:	0002a0d8 	.word	0x0002a0d8
   1c50c:	00029f88 	.word	0x00029f88
   1c510:	00029fb0 	.word	0x00029fb0
   1c514:	00029fde 	.word	0x00029fde
   1c518:	0002a00d 	.word	0x0002a00d
   1c51c:	0002a03a 	.word	0x0002a03a
   1c520:	0002a065 	.word	0x0002a065
   1c524:	0002a099 	.word	0x0002a099
   1c528:	0002a0b8 	.word	0x0002a0b8

0001c52c <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   1c52c:	4602      	mov	r2, r0
   1c52e:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1c530:	4801      	ldr	r0, [pc, #4]	; (1c538 <k_mutex_lock.constprop.0.isra.0+0xc>)
   1c532:	f007 bc95 	b.w	23e60 <z_impl_k_mutex_lock>
   1c536:	bf00      	nop
   1c538:	2000c8a0 	.word	0x2000c8a0

0001c53c <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1c53c:	4801      	ldr	r0, [pc, #4]	; (1c544 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1c53e:	f007 bd09 	b.w	23f54 <z_impl_k_mutex_unlock>
   1c542:	bf00      	nop
   1c544:	2000c8a0 	.word	0x2000c8a0

0001c548 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   1c54a:	f04f 30ff 	mov.w	r0, #4294967295
   1c54e:	f04f 31ff 	mov.w	r1, #4294967295
   1c552:	f7ff ffeb 	bl	1c52c <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   1c556:	4c0c      	ldr	r4, [pc, #48]	; (1c588 <net_if_init+0x40>)
   1c558:	4e0c      	ldr	r6, [pc, #48]	; (1c58c <net_if_init+0x44>)
   1c55a:	42b4      	cmp	r4, r6
   1c55c:	4627      	mov	r7, r4
   1c55e:	d303      	bcc.n	1c568 <net_if_init+0x20>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   1c560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   1c564:	f7ff bfea 	b.w	1c53c <k_mutex_unlock.constprop.0.isra.0>
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   1c568:	f854 0b04 	ldr.w	r0, [r4], #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1c56c:	6803      	ldr	r3, [r0, #0]
   1c56e:	689d      	ldr	r5, [r3, #8]
	if (!api || !api->init) {
   1c570:	2d00      	cmp	r5, #0
   1c572:	d0f2      	beq.n	1c55a <net_if_init+0x12>
   1c574:	682b      	ldr	r3, [r5, #0]
   1c576:	2b00      	cmp	r3, #0
   1c578:	d0ef      	beq.n	1c55a <net_if_init+0x12>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
   1c57a:	2109      	movs	r1, #9
   1c57c:	f00a f8d3 	bl	26726 <net_if_flag_test_and_set.isra.0>
	api->init(iface);
   1c580:	4638      	mov	r0, r7
   1c582:	682b      	ldr	r3, [r5, #0]
   1c584:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1c586:	e7e8      	b.n	1c55a <net_if_init+0x12>
   1c588:	2000c93c 	.word	0x2000c93c
   1c58c:	2000c940 	.word	0x2000c940

0001c590 <net_if_post_init>:

void net_if_post_init(void)
{
   1c590:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1c592:	4c07      	ldr	r4, [pc, #28]	; (1c5b0 <net_if_post_init+0x20>)
   1c594:	4d07      	ldr	r5, [pc, #28]	; (1c5b4 <net_if_post_init+0x24>)
   1c596:	42ac      	cmp	r4, r5
   1c598:	d300      	bcc.n	1c59c <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1c59a:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1c59c:	2103      	movs	r1, #3
   1c59e:	4620      	mov	r0, r4
   1c5a0:	f00a f86d 	bl	2667e <net_if_flag_is_set>
   1c5a4:	b910      	cbnz	r0, 1c5ac <net_if_post_init+0x1c>
			net_if_up(iface);
   1c5a6:	4620      	mov	r0, r4
   1c5a8:	f00a f8cf 	bl	2674a <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1c5ac:	3404      	adds	r4, #4
   1c5ae:	e7f2      	b.n	1c596 <net_if_post_init+0x6>
   1c5b0:	2000c93c 	.word	0x2000c93c
   1c5b4:	2000c940 	.word	0x2000c940

0001c5b8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1c5b8:	4b08      	ldr	r3, [pc, #32]	; (1c5dc <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1c5ba:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1c5bc:	1ac3      	subs	r3, r0, r3
{
   1c5be:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c5c0:	4907      	ldr	r1, [pc, #28]	; (1c5e0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1c5c2:	109b      	asrs	r3, r3, #2
{
   1c5c4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c5c6:	4359      	muls	r1, r3
   1c5c8:	2240      	movs	r2, #64	; 0x40
   1c5ca:	4806      	ldr	r0, [pc, #24]	; (1c5e4 <onoff_stop+0x2c>)
   1c5cc:	f00a f905 	bl	267da <stop>
	notify(mgr, res);
   1c5d0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c5d2:	4601      	mov	r1, r0
	notify(mgr, res);
   1c5d4:	4620      	mov	r0, r4
}
   1c5d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1c5da:	4718      	bx	r3
   1c5dc:	2000d1c8 	.word	0x2000d1c8
   1c5e0:	b6db6db7 	.word	0xb6db6db7
   1c5e4:	00028cf4 	.word	0x00028cf4

0001c5e8 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c5e8:	2340      	movs	r3, #64	; 0x40
{
   1c5ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1c5ec:	4c0b      	ldr	r4, [pc, #44]	; (1c61c <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c5ee:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1c5f0:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c5f2:	460b      	mov	r3, r1
{
   1c5f4:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c5f6:	490a      	ldr	r1, [pc, #40]	; (1c620 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   1c5f8:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c5fa:	4361      	muls	r1, r4
{
   1c5fc:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c5fe:	4a09      	ldr	r2, [pc, #36]	; (1c624 <onoff_start+0x3c>)
   1c600:	4809      	ldr	r0, [pc, #36]	; (1c628 <onoff_start+0x40>)
   1c602:	f00a f916 	bl	26832 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1c606:	1e01      	subs	r1, r0, #0
   1c608:	da05      	bge.n	1c616 <onoff_start+0x2e>
		notify(mgr, err);
   1c60a:	4630      	mov	r0, r6
   1c60c:	462b      	mov	r3, r5
	}
}
   1c60e:	b002      	add	sp, #8
   1c610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1c614:	4718      	bx	r3
}
   1c616:	b002      	add	sp, #8
   1c618:	bd70      	pop	{r4, r5, r6, pc}
   1c61a:	bf00      	nop
   1c61c:	2000d1c8 	.word	0x2000d1c8
   1c620:	b6db6db7 	.word	0xb6db6db7
   1c624:	0002689d 	.word	0x0002689d
   1c628:	00028cf4 	.word	0x00028cf4

0001c62c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1c62c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c62e:	2200      	movs	r2, #0
   1c630:	2101      	movs	r1, #1
{
   1c632:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c634:	2005      	movs	r0, #5
   1c636:	f7ff f88f 	bl	1b758 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1c63a:	480f      	ldr	r0, [pc, #60]	; (1c678 <clk_init+0x4c>)
   1c63c:	f004 f9f8 	bl	20a30 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1c640:	4b0e      	ldr	r3, [pc, #56]	; (1c67c <clk_init+0x50>)
   1c642:	4298      	cmp	r0, r3
   1c644:	d115      	bne.n	1c672 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1c646:	f004 fa03 	bl	20a50 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1c64a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c64c:	490c      	ldr	r1, [pc, #48]	; (1c680 <clk_init+0x54>)
   1c64e:	4630      	mov	r0, r6
   1c650:	f009 fbfb 	bl	25e4a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1c654:	2800      	cmp	r0, #0
   1c656:	db0b      	blt.n	1c670 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c658:	2501      	movs	r5, #1
   1c65a:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   1c65c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c65e:	4908      	ldr	r1, [pc, #32]	; (1c680 <clk_init+0x54>)
   1c660:	f104 001c 	add.w	r0, r4, #28
   1c664:	f009 fbf1 	bl	25e4a <onoff_manager_init>
		if (err < 0) {
   1c668:	2800      	cmp	r0, #0
   1c66a:	db01      	blt.n	1c670 <clk_init+0x44>
	}

	return 0;
   1c66c:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c66e:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   1c670:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1c672:	f06f 0004 	mvn.w	r0, #4
   1c676:	e7fb      	b.n	1c670 <clk_init+0x44>
   1c678:	0001c6b9 	.word	0x0001c6b9
   1c67c:	0bad0000 	.word	0x0bad0000
   1c680:	00029208 	.word	0x00029208

0001c684 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1c684:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1c686:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1c688:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   1c68a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1c68c:	434b      	muls	r3, r1
   1c68e:	4808      	ldr	r0, [pc, #32]	; (1c6b0 <clkstarted_handle.constprop.0+0x2c>)
   1c690:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1c692:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   1c694:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1c698:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1c69a:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1c69c:	f00a f88a 	bl	267b4 <set_on_state>
	if (callback) {
   1c6a0:	b12d      	cbz	r5, 1c6ae <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c6a2:	4632      	mov	r2, r6
   1c6a4:	462b      	mov	r3, r5
}
   1c6a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c6aa:	4802      	ldr	r0, [pc, #8]	; (1c6b4 <clkstarted_handle.constprop.0+0x30>)
   1c6ac:	4718      	bx	r3
}
   1c6ae:	bd70      	pop	{r4, r5, r6, pc}
   1c6b0:	2000d1c8 	.word	0x2000d1c8
   1c6b4:	00028cf4 	.word	0x00028cf4

0001c6b8 <clock_event_handler>:
	switch (event) {
   1c6b8:	b110      	cbz	r0, 1c6c0 <clock_event_handler+0x8>
   1c6ba:	2801      	cmp	r0, #1
   1c6bc:	d004      	beq.n	1c6c8 <clock_event_handler+0x10>
   1c6be:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1c6c0:	4b03      	ldr	r3, [pc, #12]	; (1c6d0 <clock_event_handler+0x18>)
   1c6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c6c4:	075b      	lsls	r3, r3, #29
   1c6c6:	d101      	bne.n	1c6cc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1c6c8:	f7ff bfdc 	b.w	1c684 <clkstarted_handle.constprop.0>
}
   1c6cc:	4770      	bx	lr
   1c6ce:	bf00      	nop
   1c6d0:	2000d1c8 	.word	0x2000d1c8

0001c6d4 <generic_hfclk_start>:
{
   1c6d4:	b508      	push	{r3, lr}
	__asm__ volatile(
   1c6d6:	f04f 0320 	mov.w	r3, #32
   1c6da:	f3ef 8111 	mrs	r1, BASEPRI
   1c6de:	f383 8812 	msr	BASEPRI_MAX, r3
   1c6e2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1c6e6:	4a11      	ldr	r2, [pc, #68]	; (1c72c <generic_hfclk_start+0x58>)
   1c6e8:	6813      	ldr	r3, [r2, #0]
   1c6ea:	f043 0002 	orr.w	r0, r3, #2
   1c6ee:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1c6f0:	07da      	lsls	r2, r3, #31
   1c6f2:	d408      	bmi.n	1c706 <generic_hfclk_start+0x32>
	__asm__ volatile(
   1c6f4:	f381 8811 	msr	BASEPRI, r1
   1c6f8:	f3bf 8f6f 	isb	sy
}
   1c6fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1c700:	2001      	movs	r0, #1
   1c702:	f004 b9b5 	b.w	20a70 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c706:	4b0a      	ldr	r3, [pc, #40]	; (1c730 <generic_hfclk_start+0x5c>)
   1c708:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c70c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1c710:	07d3      	lsls	r3, r2, #31
   1c712:	d5ef      	bpl.n	1c6f4 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1c714:	4807      	ldr	r0, [pc, #28]	; (1c734 <generic_hfclk_start+0x60>)
   1c716:	f00a f84d 	bl	267b4 <set_on_state>
   1c71a:	f381 8811 	msr	BASEPRI, r1
   1c71e:	f3bf 8f6f 	isb	sy
}
   1c722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1c726:	2000      	movs	r0, #0
   1c728:	f7ff bfac 	b.w	1c684 <clkstarted_handle.constprop.0>
   1c72c:	2000d218 	.word	0x2000d218
   1c730:	40005000 	.word	0x40005000
   1c734:	2000d208 	.word	0x2000d208

0001c738 <api_blocking_start>:
{
   1c738:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c73a:	2200      	movs	r2, #0
   1c73c:	2301      	movs	r3, #1
   1c73e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c742:	ab04      	add	r3, sp, #16
   1c744:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c748:	4a09      	ldr	r2, [pc, #36]	; (1c770 <api_blocking_start+0x38>)
   1c74a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c74c:	f8cd d000 	str.w	sp, [sp]
   1c750:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c754:	f00a f89b 	bl	2688e <api_start>
	if (err < 0) {
   1c758:	2800      	cmp	r0, #0
   1c75a:	db05      	blt.n	1c768 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1c75c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1c760:	2300      	movs	r3, #0
   1c762:	4668      	mov	r0, sp
   1c764:	f007 fc8c 	bl	24080 <z_impl_k_sem_take>
}
   1c768:	b007      	add	sp, #28
   1c76a:	f85d fb04 	ldr.w	pc, [sp], #4
   1c76e:	bf00      	nop
   1c770:	000268bb 	.word	0x000268bb

0001c774 <generic_hfclk_stop>:
{
   1c774:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c776:	f04f 0320 	mov.w	r3, #32
   1c77a:	f3ef 8411 	mrs	r4, BASEPRI
   1c77e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c782:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1c786:	4a07      	ldr	r2, [pc, #28]	; (1c7a4 <generic_hfclk_stop+0x30>)
   1c788:	6813      	ldr	r3, [r2, #0]
   1c78a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1c78e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1c790:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1c792:	d402      	bmi.n	1c79a <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1c794:	2001      	movs	r0, #1
   1c796:	f00a fdef 	bl	27378 <nrfx_clock_stop>
	__asm__ volatile(
   1c79a:	f384 8811 	msr	BASEPRI, r4
   1c79e:	f3bf 8f6f 	isb	sy
}
   1c7a2:	bd10      	pop	{r4, pc}
   1c7a4:	2000d218 	.word	0x2000d218

0001c7a8 <z_nrf_clock_control_lf_on>:
{
   1c7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c7ac:	2201      	movs	r2, #1
   1c7ae:	4607      	mov	r7, r0
   1c7b0:	4935      	ldr	r1, [pc, #212]	; (1c888 <z_nrf_clock_control_lf_on+0xe0>)
   1c7b2:	e8d1 3fef 	ldaex	r3, [r1]
   1c7b6:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1c7ba:	2800      	cmp	r0, #0
   1c7bc:	d1f9      	bne.n	1c7b2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1c7be:	b933      	cbnz	r3, 1c7ce <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1c7c0:	4932      	ldr	r1, [pc, #200]	; (1c88c <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   1c7c2:	4833      	ldr	r0, [pc, #204]	; (1c890 <z_nrf_clock_control_lf_on+0xe8>)
   1c7c4:	604b      	str	r3, [r1, #4]
   1c7c6:	60cb      	str	r3, [r1, #12]
   1c7c8:	608a      	str	r2, [r1, #8]
   1c7ca:	f009 fb51 	bl	25e70 <onoff_request>
	switch (start_mode) {
   1c7ce:	1e7b      	subs	r3, r7, #1
   1c7d0:	2b01      	cmp	r3, #1
   1c7d2:	d828      	bhi.n	1c826 <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1c7d4:	2f01      	cmp	r7, #1
   1c7d6:	d106      	bne.n	1c7e6 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1c7d8:	4b2e      	ldr	r3, [pc, #184]	; (1c894 <z_nrf_clock_control_lf_on+0xec>)
   1c7da:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1c7de:	f003 0303 	and.w	r3, r3, #3
   1c7e2:	2b02      	cmp	r3, #2
   1c7e4:	d01f      	beq.n	1c826 <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c7e6:	f00b fd24 	bl	28232 <k_is_in_isr>
   1c7ea:	4605      	mov	r5, r0
   1c7ec:	b9e8      	cbnz	r0, 1c82a <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1c7ee:	4b2a      	ldr	r3, [pc, #168]	; (1c898 <z_nrf_clock_control_lf_on+0xf0>)
   1c7f0:	781b      	ldrb	r3, [r3, #0]
   1c7f2:	b1d3      	cbz	r3, 1c82a <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   1c7f4:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1c7f6:	4606      	mov	r6, r0
   1c7f8:	4b26      	ldr	r3, [pc, #152]	; (1c894 <z_nrf_clock_control_lf_on+0xec>)
   1c7fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c7fe:	4c25      	ldr	r4, [pc, #148]	; (1c894 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c800:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1c89c <z_nrf_clock_control_lf_on+0xf4>
   1c804:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c808:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1c80c:	03d2      	lsls	r2, r2, #15
   1c80e:	d516      	bpl.n	1c83e <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1c810:	f003 0303 	and.w	r3, r3, #3
   1c814:	2b02      	cmp	r3, #2
   1c816:	d001      	beq.n	1c81c <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1c818:	2f01      	cmp	r7, #1
   1c81a:	d110      	bne.n	1c83e <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   1c81c:	b375      	cbz	r5, 1c87c <z_nrf_clock_control_lf_on+0xd4>
   1c81e:	f386 8811 	msr	BASEPRI, r6
   1c822:	f3bf 8f6f 	isb	sy
}
   1c826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c82a:	f04f 0320 	mov.w	r3, #32
   1c82e:	f3ef 8611 	mrs	r6, BASEPRI
   1c832:	f383 8812 	msr	BASEPRI_MAX, r3
   1c836:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c83a:	2501      	movs	r5, #1
   1c83c:	e7df      	b.n	1c7fe <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c83e:	b1c5      	cbz	r5, 1c872 <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1c840:	4630      	mov	r0, r6
   1c842:	f7fe fee7 	bl	1b614 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1c846:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1c84a:	b2db      	uxtb	r3, r3
   1c84c:	2b01      	cmp	r3, #1
   1c84e:	d1d9      	bne.n	1c804 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c850:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1c854:	2a00      	cmp	r2, #0
   1c856:	d0d5      	beq.n	1c804 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c858:	2200      	movs	r2, #0
   1c85a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1c85e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c862:	2202      	movs	r2, #2
   1c864:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1c868:	2220      	movs	r2, #32
   1c86a:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c86e:	60a3      	str	r3, [r4, #8]
}
   1c870:	e7c8      	b.n	1c804 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   1c872:	2100      	movs	r1, #0
   1c874:	2021      	movs	r0, #33	; 0x21
   1c876:	f008 f827 	bl	248c8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c87a:	e7e4      	b.n	1c846 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   1c87c:	2202      	movs	r2, #2
   1c87e:	4b05      	ldr	r3, [pc, #20]	; (1c894 <z_nrf_clock_control_lf_on+0xec>)
   1c880:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c884:	e7cf      	b.n	1c826 <z_nrf_clock_control_lf_on+0x7e>
   1c886:	bf00      	nop
   1c888:	2000d1c4 	.word	0x2000d1c4
   1c88c:	2000d1b4 	.word	0x2000d1b4
   1c890:	2000d1e4 	.word	0x2000d1e4
   1c894:	40005000 	.word	0x40005000
   1c898:	2000de5b 	.word	0x2000de5b
   1c89c:	e000e100 	.word	0xe000e100

0001c8a0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1c8a0:	b508      	push	{r3, lr}
   1c8a2:	4807      	ldr	r0, [pc, #28]	; (1c8c0 <uart_console_init+0x20>)
   1c8a4:	f00b fc3a 	bl	2811c <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1c8a8:	b138      	cbz	r0, 1c8ba <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1c8aa:	4806      	ldr	r0, [pc, #24]	; (1c8c4 <uart_console_init+0x24>)
   1c8ac:	f7ff fd8e 	bl	1c3cc <__stdout_hook_install>
	__printk_hook_install(console_out);
   1c8b0:	4804      	ldr	r0, [pc, #16]	; (1c8c4 <uart_console_init+0x24>)
   1c8b2:	f7fd fa4f 	bl	19d54 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1c8b6:	2000      	movs	r0, #0
}
   1c8b8:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1c8ba:	f06f 0012 	mvn.w	r0, #18
   1c8be:	e7fb      	b.n	1c8b8 <uart_console_init+0x18>
   1c8c0:	00028d3c 	.word	0x00028d3c
   1c8c4:	0001c8c9 	.word	0x0001c8c9

0001c8c8 <console_out>:
	if ('\n' == c) {
   1c8c8:	280a      	cmp	r0, #10
{
   1c8ca:	b538      	push	{r3, r4, r5, lr}
   1c8cc:	4604      	mov	r4, r0
   1c8ce:	4d07      	ldr	r5, [pc, #28]	; (1c8ec <console_out+0x24>)
	if ('\n' == c) {
   1c8d0:	d104      	bne.n	1c8dc <console_out+0x14>
   1c8d2:	68ab      	ldr	r3, [r5, #8]
   1c8d4:	210d      	movs	r1, #13
   1c8d6:	4628      	mov	r0, r5
   1c8d8:	685b      	ldr	r3, [r3, #4]
   1c8da:	4798      	blx	r3
   1c8dc:	68ab      	ldr	r3, [r5, #8]
   1c8de:	4803      	ldr	r0, [pc, #12]	; (1c8ec <console_out+0x24>)
   1c8e0:	685b      	ldr	r3, [r3, #4]
   1c8e2:	b2e1      	uxtb	r1, r4
   1c8e4:	4798      	blx	r3
}
   1c8e6:	4620      	mov	r0, r4
   1c8e8:	bd38      	pop	{r3, r4, r5, pc}
   1c8ea:	bf00      	nop
   1c8ec:	00028d3c 	.word	0x00028d3c

0001c8f0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1c8f0:	b530      	push	{r4, r5, lr}
	return port->config;
   1c8f2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c8f4:	f001 041f 	and.w	r4, r1, #31
   1c8f8:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1c8fa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1c8fe:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c900:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c904:	d105      	bne.n	1c912 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1c906:	4620      	mov	r0, r4
   1c908:	f004 fb76 	bl	20ff8 <nrfx_gpiote_trigger_disable>

		return 0;
   1c90c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   1c90e:	b005      	add	sp, #20
   1c910:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c912:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c914:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c918:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c91c:	d114      	bne.n	1c948 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1c91e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c922:	bf0c      	ite	eq
   1c924:	2304      	moveq	r3, #4
   1c926:	2305      	movne	r3, #5
   1c928:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c92c:	2300      	movs	r3, #0
   1c92e:	4620      	mov	r0, r4
   1c930:	4619      	mov	r1, r3
   1c932:	aa02      	add	r2, sp, #8
   1c934:	f004 f996 	bl	20c64 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c938:	4b1c      	ldr	r3, [pc, #112]	; (1c9ac <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1c93a:	4298      	cmp	r0, r3
   1c93c:	d133      	bne.n	1c9a6 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1c93e:	2101      	movs	r1, #1
   1c940:	4620      	mov	r0, r4
   1c942:	f004 fb15 	bl	20f70 <nrfx_gpiote_trigger_enable>
	return 0;
   1c946:	e7e1      	b.n	1c90c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c948:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1c94c:	d020      	beq.n	1c990 <gpio_nrfx_pin_interrupt_configure+0xa0>
   1c94e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1c952:	bf14      	ite	ne
   1c954:	2301      	movne	r3, #1
   1c956:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c958:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1c95c:	6883      	ldr	r3, [r0, #8]
   1c95e:	40cb      	lsrs	r3, r1
   1c960:	07d9      	lsls	r1, r3, #31
   1c962:	d4e3      	bmi.n	1c92c <gpio_nrfx_pin_interrupt_configure+0x3c>
   1c964:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1c968:	d1e0      	bne.n	1c92c <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c96a:	4a11      	ldr	r2, [pc, #68]	; (1c9b0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1c96c:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c970:	3380      	adds	r3, #128	; 0x80
   1c972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1c976:	07db      	lsls	r3, r3, #31
   1c978:	d4d8      	bmi.n	1c92c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c97a:	f10d 0507 	add.w	r5, sp, #7
   1c97e:	4629      	mov	r1, r5
   1c980:	4620      	mov	r0, r4
   1c982:	f004 faa1 	bl	20ec8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1c986:	4b0b      	ldr	r3, [pc, #44]	; (1c9b4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1c988:	4298      	cmp	r0, r3
   1c98a:	d003      	beq.n	1c994 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
   1c98c:	9503      	str	r5, [sp, #12]
   1c98e:	e7cd      	b.n	1c92c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c990:	2303      	movs	r3, #3
   1c992:	e7e1      	b.n	1c958 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   1c994:	4628      	mov	r0, r5
   1c996:	f004 fae5 	bl	20f64 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1c99a:	4b04      	ldr	r3, [pc, #16]	; (1c9ac <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1c99c:	4298      	cmp	r0, r3
   1c99e:	d0f5      	beq.n	1c98c <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   1c9a0:	f06f 000b 	mvn.w	r0, #11
   1c9a4:	e7b3      	b.n	1c90e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1c9a6:	f06f 0015 	mvn.w	r0, #21
   1c9aa:	e7b0      	b.n	1c90e <gpio_nrfx_pin_interrupt_configure+0x1e>
   1c9ac:	0bad0000 	.word	0x0bad0000
   1c9b0:	40842500 	.word	0x40842500
   1c9b4:	0bad0004 	.word	0x0bad0004

0001c9b8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1c9b8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1c9ba:	f004 fac3 	bl	20f44 <nrfx_gpiote_is_init>
   1c9be:	4604      	mov	r4, r0
   1c9c0:	b968      	cbnz	r0, 1c9de <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1c9c2:	f004 fa97 	bl	20ef4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1c9c6:	4b08      	ldr	r3, [pc, #32]	; (1c9e8 <gpio_nrfx_init+0x30>)
   1c9c8:	4298      	cmp	r0, r3
   1c9ca:	d10a      	bne.n	1c9e2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1c9cc:	4621      	mov	r1, r4
   1c9ce:	4807      	ldr	r0, [pc, #28]	; (1c9ec <gpio_nrfx_init+0x34>)
   1c9d0:	f004 fa74 	bl	20ebc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c9d4:	4622      	mov	r2, r4
   1c9d6:	2105      	movs	r1, #5
   1c9d8:	2031      	movs	r0, #49	; 0x31
   1c9da:	f7fe febd 	bl	1b758 <z_arm_irq_priority_set>
		return 0;
   1c9de:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1c9e0:	bd10      	pop	{r4, pc}
		return -EIO;
   1c9e2:	f06f 0004 	mvn.w	r0, #4
   1c9e6:	e7fb      	b.n	1c9e0 <gpio_nrfx_init+0x28>
   1c9e8:	0bad0000 	.word	0x0bad0000
   1c9ec:	0001c9f1 	.word	0x0001c9f1

0001c9f0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c9f0:	0943      	lsrs	r3, r0, #5
{
   1c9f2:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c9f4:	d107      	bne.n	1ca06 <nrfx_gpio_handler+0x16>
	return list->head;
   1c9f6:	4b0b      	ldr	r3, [pc, #44]	; (1ca24 <nrfx_gpio_handler+0x34>)
   1c9f8:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c9fa:	b121      	cbz	r1, 1ca06 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   1c9fc:	2501      	movs	r5, #1
	return node->next;
   1c9fe:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1ca00:	4e09      	ldr	r6, [pc, #36]	; (1ca28 <nrfx_gpio_handler+0x38>)
   1ca02:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1ca04:	b901      	cbnz	r1, 1ca08 <nrfx_gpio_handler+0x18>
}
   1ca06:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   1ca08:	688a      	ldr	r2, [r1, #8]
   1ca0a:	402a      	ands	r2, r5
   1ca0c:	d002      	beq.n	1ca14 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   1ca0e:	4630      	mov	r0, r6
   1ca10:	684b      	ldr	r3, [r1, #4]
   1ca12:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1ca14:	b11c      	cbz	r4, 1ca1e <nrfx_gpio_handler+0x2e>
   1ca16:	6823      	ldr	r3, [r4, #0]
   1ca18:	4621      	mov	r1, r4
   1ca1a:	461c      	mov	r4, r3
   1ca1c:	e7f2      	b.n	1ca04 <nrfx_gpio_handler+0x14>
   1ca1e:	4623      	mov	r3, r4
   1ca20:	e7fa      	b.n	1ca18 <nrfx_gpio_handler+0x28>
   1ca22:	bf00      	nop
   1ca24:	2000d21c 	.word	0x2000d21c
   1ca28:	00028d0c 	.word	0x00028d0c

0001ca2c <gpio_nrfx_pin_configure>:
{
   1ca2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1ca30:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ca32:	f001 051f 	and.w	r5, r1, #31
   1ca36:	7b3b      	ldrb	r3, [r7, #12]
{
   1ca38:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ca3a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1ca3e:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1ca40:	4628      	mov	r0, r5
   1ca42:	f10d 0103 	add.w	r1, sp, #3
   1ca46:	f004 fa3f 	bl	20ec8 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1ca4a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1ca4e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1ca50:	d10b      	bne.n	1ca6a <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1ca52:	4628      	mov	r0, r5
   1ca54:	f004 faf8 	bl	21048 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1ca58:	4b3c      	ldr	r3, [pc, #240]	; (1cb4c <gpio_nrfx_pin_configure+0x120>)
   1ca5a:	4598      	cmp	r8, r3
   1ca5c:	d103      	bne.n	1ca66 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   1ca5e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1ca62:	f004 fa79 	bl	20f58 <nrfx_gpiote_channel_free>
		return 0;
   1ca66:	2000      	movs	r0, #0
   1ca68:	e00c      	b.n	1ca84 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ca6a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1ca6c:	4628      	mov	r0, r5
   1ca6e:	4619      	mov	r1, r3
   1ca70:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ca72:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1ca76:	f004 f8f5 	bl	20c64 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1ca7a:	4b34      	ldr	r3, [pc, #208]	; (1cb4c <gpio_nrfx_pin_configure+0x120>)
   1ca7c:	4298      	cmp	r0, r3
   1ca7e:	d004      	beq.n	1ca8a <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   1ca80:	f06f 0015 	mvn.w	r0, #21
}
   1ca84:	b004      	add	sp, #16
   1ca86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1ca8a:	4580      	cmp	r8, r0
   1ca8c:	d103      	bne.n	1ca96 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1ca8e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1ca92:	f004 fa61 	bl	20f58 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1ca96:	03a3      	lsls	r3, r4, #14
   1ca98:	d549      	bpl.n	1cb2e <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1ca9a:	f240 3306 	movw	r3, #774	; 0x306
   1ca9e:	4023      	ands	r3, r4
   1caa0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1caa4:	d019      	beq.n	1cada <gpio_nrfx_pin_configure+0xae>
   1caa6:	d80c      	bhi.n	1cac2 <gpio_nrfx_pin_configure+0x96>
   1caa8:	2b06      	cmp	r3, #6
   1caaa:	d017      	beq.n	1cadc <gpio_nrfx_pin_configure+0xb0>
   1caac:	d804      	bhi.n	1cab8 <gpio_nrfx_pin_configure+0x8c>
   1caae:	b1ab      	cbz	r3, 1cadc <gpio_nrfx_pin_configure+0xb0>
   1cab0:	2b02      	cmp	r3, #2
   1cab2:	d1e5      	bne.n	1ca80 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   1cab4:	2304      	movs	r3, #4
   1cab6:	e011      	b.n	1cadc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1cab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1cabc:	d1e0      	bne.n	1ca80 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   1cabe:	2301      	movs	r3, #1
   1cac0:	e00c      	b.n	1cadc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1cac2:	f240 2202 	movw	r2, #514	; 0x202
   1cac6:	4293      	cmp	r3, r2
   1cac8:	d026      	beq.n	1cb18 <gpio_nrfx_pin_configure+0xec>
   1caca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1cace:	d025      	beq.n	1cb1c <gpio_nrfx_pin_configure+0xf0>
   1cad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1cad4:	d1d4      	bne.n	1ca80 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   1cad6:	2302      	movs	r3, #2
   1cad8:	e000      	b.n	1cadc <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   1cada:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1cadc:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1cae0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1cae4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1cae8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1caea:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1caee:	bf4c      	ite	mi
   1caf0:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1caf2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1caf6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1caf8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1cafc:	d510      	bpl.n	1cb20 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1cafe:	2301      	movs	r3, #1
   1cb00:	687a      	ldr	r2, [r7, #4]
   1cb02:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1cb04:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1cb06:	2200      	movs	r2, #0
   1cb08:	4628      	mov	r0, r5
   1cb0a:	a901      	add	r1, sp, #4
   1cb0c:	f004 f956 	bl	20dbc <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1cb10:	4b0e      	ldr	r3, [pc, #56]	; (1cb4c <gpio_nrfx_pin_configure+0x120>)
   1cb12:	4298      	cmp	r0, r3
   1cb14:	d0a7      	beq.n	1ca66 <gpio_nrfx_pin_configure+0x3a>
   1cb16:	e7b3      	b.n	1ca80 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   1cb18:	2305      	movs	r3, #5
   1cb1a:	e7df      	b.n	1cadc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1cb1c:	2303      	movs	r3, #3
   1cb1e:	e7dd      	b.n	1cadc <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1cb20:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1cb22:	bf41      	itttt	mi
   1cb24:	2301      	movmi	r3, #1
   1cb26:	687a      	ldrmi	r2, [r7, #4]
   1cb28:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   1cb2a:	60d3      	strmi	r3, [r2, #12]
}
   1cb2c:	e7eb      	b.n	1cb06 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   1cb2e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1cb30:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1cb34:	bf4c      	ite	mi
   1cb36:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1cb38:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1cb3c:	461a      	mov	r2, r3
   1cb3e:	4628      	mov	r0, r5
   1cb40:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1cb42:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1cb46:	f004 f88d 	bl	20c64 <nrfx_gpiote_input_configure>
   1cb4a:	e7e1      	b.n	1cb10 <gpio_nrfx_pin_configure+0xe4>
   1cb4c:	0bad0000 	.word	0x0bad0000

0001cb50 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
   1cb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1cb52:	6844      	ldr	r4, [r0, #4]
{
   1cb54:	af00      	add	r7, sp, #0
	struct i2c_nrfx_twim_data *dev_data = dev->data;

	dev_config->irq_connect();
   1cb56:	69e3      	ldr	r3, [r4, #28]
{
   1cb58:	4605      	mov	r5, r0
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1cb5a:	6906      	ldr	r6, [r0, #16]
	dev_config->irq_connect();
   1cb5c:	4798      	blx	r3

#ifdef CONFIG_PINCTRL
	int err = pinctrl_apply_state(dev_config->pcfg,
   1cb5e:	6a20      	ldr	r0, [r4, #32]
   1cb60:	f009 ff00 	bl	26964 <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
   1cb64:	2800      	cmp	r0, #0
   1cb66:	db1f      	blt.n	1cba8 <i2c_nrfx_twim_init+0x58>
		return err;
	}
#endif

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
   1cb68:	4633      	mov	r3, r6
   1cb6a:	4620      	mov	r0, r4
   1cb6c:	4a12      	ldr	r2, [pc, #72]	; (1cbb8 <i2c_nrfx_twim_init+0x68>)
   1cb6e:	f104 0108 	add.w	r1, r4, #8
   1cb72:	f004 fd6d 	bl	21650 <nrfx_twim_init>
   1cb76:	4b11      	ldr	r3, [pc, #68]	; (1cbbc <i2c_nrfx_twim_init+0x6c>)
   1cb78:	4298      	cmp	r0, r3
   1cb7a:	d017      	beq.n	1cbac <i2c_nrfx_twim_init+0x5c>
			   event_handler, dev_data) != NRFX_SUCCESS) {
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1cb7c:	466c      	mov	r4, sp
   1cb7e:	b088      	sub	sp, #32
   1cb80:	682b      	ldr	r3, [r5, #0]
   1cb82:	466a      	mov	r2, sp
   1cb84:	490e      	ldr	r1, [pc, #56]	; (1cbc0 <i2c_nrfx_twim_init+0x70>)
   1cb86:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1cb8a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1cb8e:	8393      	strh	r3, [r2, #28]
   1cb90:	4b0c      	ldr	r3, [pc, #48]	; (1cbc4 <i2c_nrfx_twim_init+0x74>)
   1cb92:	f842 3f10 	str.w	r3, [r2, #16]!
   1cb96:	480c      	ldr	r0, [pc, #48]	; (1cbc8 <i2c_nrfx_twim_init+0x78>)
   1cb98:	2300      	movs	r3, #0
   1cb9a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1cb9e:	f7fe f8af 	bl	1ad00 <z_impl_z_log_msg_static_create>
		return -EIO;
   1cba2:	f06f 0004 	mvn.w	r0, #4
   1cba6:	46a5      	mov	sp, r4
#else
	nrfx_twim_enable(&dev_config->twim);
#endif

	return 0;
}
   1cba8:	46bd      	mov	sp, r7
   1cbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_twim_enable(&dev_config->twim);
   1cbac:	4620      	mov	r0, r4
   1cbae:	f004 fda1 	bl	216f4 <nrfx_twim_enable>
	return 0;
   1cbb2:	2000      	movs	r0, #0
   1cbb4:	e7f8      	b.n	1cba8 <i2c_nrfx_twim_init+0x58>
   1cbb6:	bf00      	nop
   1cbb8:	0001cc09 	.word	0x0001cc09
   1cbbc:	0bad0000 	.word	0x0bad0000
   1cbc0:	0002a1db 	.word	0x0002a1db
   1cbc4:	01000003 	.word	0x01000003
   1cbc8:	0002904c 	.word	0x0002904c

0001cbcc <i2c_nrfx_twim_recover_bus>:
{
   1cbcc:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1cbce:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
   1cbd0:	6823      	ldr	r3, [r4, #0]
		nrfx_twim_disable(&dev_config->twim);
   1cbd2:	4620      	mov	r0, r4
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
   1cbd4:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
   1cbd8:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
   1cbdc:	f004 fd9a 	bl	21714 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1cbe0:	4631      	mov	r1, r6
   1cbe2:	4628      	mov	r0, r5
   1cbe4:	f005 f800 	bl	21be8 <nrfx_twi_twim_bus_recover>
   1cbe8:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
   1cbea:	6a20      	ldr	r0, [r4, #32]
   1cbec:	f009 feba 	bl	26964 <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
   1cbf0:	4620      	mov	r0, r4
   1cbf2:	f004 fd7f 	bl	216f4 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1cbf6:	4b03      	ldr	r3, [pc, #12]	; (1cc04 <i2c_nrfx_twim_recover_bus+0x38>)
   1cbf8:	429d      	cmp	r5, r3
}
   1cbfa:	bf14      	ite	ne
   1cbfc:	f06f 000f 	mvnne.w	r0, #15
   1cc00:	2000      	moveq	r0, #0
   1cc02:	bd70      	pop	{r4, r5, r6, pc}
   1cc04:	0bad0000 	.word	0x0bad0000

0001cc08 <event_handler>:
	switch (p_event->type) {
   1cc08:	7803      	ldrb	r3, [r0, #0]
   1cc0a:	2b01      	cmp	r3, #1
   1cc0c:	d008      	beq.n	1cc20 <event_handler+0x18>
   1cc0e:	2b02      	cmp	r3, #2
   1cc10:	d008      	beq.n	1cc24 <event_handler+0x1c>
   1cc12:	b94b      	cbnz	r3, 1cc28 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1cc14:	4b05      	ldr	r3, [pc, #20]	; (1cc2c <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1cc16:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1cc18:	f101 0018 	add.w	r0, r1, #24
   1cc1c:	f007 ba0a 	b.w	24034 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1cc20:	4b03      	ldr	r3, [pc, #12]	; (1cc30 <event_handler+0x28>)
   1cc22:	e7f8      	b.n	1cc16 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1cc24:	4b03      	ldr	r3, [pc, #12]	; (1cc34 <event_handler+0x2c>)
   1cc26:	e7f6      	b.n	1cc16 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1cc28:	4b03      	ldr	r3, [pc, #12]	; (1cc38 <event_handler+0x30>)
   1cc2a:	e7f4      	b.n	1cc16 <event_handler+0xe>
   1cc2c:	0bad0000 	.word	0x0bad0000
   1cc30:	0bae0001 	.word	0x0bae0001
   1cc34:	0bae0002 	.word	0x0bae0002
   1cc38:	0bad0001 	.word	0x0bad0001

0001cc3c <i2c_nrfx_twim_configure>:
{
   1cc3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   1cc3e:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1cc42:	6842      	ldr	r2, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
   1cc44:	d10f      	bne.n	1cc66 <i2c_nrfx_twim_configure+0x2a>
	switch (I2C_SPEED_GET(i2c_config)) {
   1cc46:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1cc4a:	2901      	cmp	r1, #1
   1cc4c:	d00e      	beq.n	1cc6c <i2c_nrfx_twim_configure+0x30>
   1cc4e:	2902      	cmp	r1, #2
   1cc50:	d015      	beq.n	1cc7e <i2c_nrfx_twim_configure+0x42>
		LOG_ERR("unsupported speed");
   1cc52:	4a0d      	ldr	r2, [pc, #52]	; (1cc88 <i2c_nrfx_twim_configure+0x4c>)
   1cc54:	9205      	str	r2, [sp, #20]
   1cc56:	2202      	movs	r2, #2
   1cc58:	9204      	str	r2, [sp, #16]
   1cc5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cc5e:	480b      	ldr	r0, [pc, #44]	; (1cc8c <i2c_nrfx_twim_configure+0x50>)
   1cc60:	aa04      	add	r2, sp, #16
   1cc62:	f7fe f84d 	bl	1ad00 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1cc66:	f06f 0015 	mvn.w	r0, #21
   1cc6a:	e005      	b.n	1cc78 <i2c_nrfx_twim_configure+0x3c>
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1cc6c:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1cc6e:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
	return 0;
   1cc72:	2000      	movs	r0, #0
   1cc74:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
   1cc78:	b007      	add	sp, #28
   1cc7a:	f85d fb04 	ldr.w	pc, [sp], #4
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1cc7e:	6813      	ldr	r3, [r2, #0]
   1cc80:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1cc84:	e7f5      	b.n	1cc72 <i2c_nrfx_twim_configure+0x36>
   1cc86:	bf00      	nop
   1cc88:	0002a1fb 	.word	0x0002a1fb
   1cc8c:	0002904c 	.word	0x0002904c

0001cc90 <i2c_nrfx_twim_transfer>:
{
   1cc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc94:	b08d      	sub	sp, #52	; 0x34
   1cc96:	461d      	mov	r5, r3
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1cc98:	f8d0 b004 	ldr.w	fp, [r0, #4]
{
   1cc9c:	af00      	add	r7, sp, #0
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1cc9e:	f8d0 9010 	ldr.w	r9, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1cca2:	f8bb 3018 	ldrh.w	r3, [fp, #24]
{
   1cca6:	613a      	str	r2, [r7, #16]
   1cca8:	4606      	mov	r6, r0
   1ccaa:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   1ccac:	2214      	movs	r2, #20
   1ccae:	2100      	movs	r1, #0
   1ccb0:	f107 001c 	add.w	r0, r7, #28
	uint8_t *msg_buf = dev_data->msg_buf;
   1ccb4:	f8d9 a034 	ldr.w	sl, [r9, #52]	; 0x34
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1ccb8:	617b      	str	r3, [r7, #20]
	nrfx_twim_xfer_desc_t cur_xfer = {
   1ccba:	f00b fe24 	bl	28906 <memset>
   1ccbe:	777d      	strb	r5, [r7, #29]
	return z_impl_k_sem_take(sem, timeout);
   1ccc0:	f04f 32ff 	mov.w	r2, #4294967295
   1ccc4:	f04f 33ff 	mov.w	r3, #4294967295
   1ccc8:	4648      	mov	r0, r9
   1ccca:	f007 f9d9 	bl	24080 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   1ccce:	f109 0318 	add.w	r3, r9, #24
   1ccd2:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < num_msgs; i++) {
   1ccd4:	f04f 0800 	mov.w	r8, #0
   1ccd8:	2200      	movs	r2, #0
   1ccda:	2300      	movs	r3, #0
   1ccdc:	f109 0018 	add.w	r0, r9, #24
   1cce0:	f007 f9ce 	bl	24080 <z_impl_k_sem_take>
	uint16_t msg_buf_used = 0;
   1cce4:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   1cce6:	693b      	ldr	r3, [r7, #16]
   1cce8:	4598      	cmp	r8, r3
   1ccea:	d301      	bcc.n	1ccf0 <i2c_nrfx_twim_transfer+0x60>
   1ccec:	2400      	movs	r4, #0
   1ccee:	e038      	b.n	1cd62 <i2c_nrfx_twim_transfer+0xd2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1ccf0:	7a20      	ldrb	r0, [r4, #8]
   1ccf2:	0702      	lsls	r2, r0, #28
   1ccf4:	f100 80eb 	bmi.w	1cece <i2c_nrfx_twim_transfer+0x23e>
				&& ((msgs[i].flags & I2C_MSG_READ)
   1ccf8:	693a      	ldr	r2, [r7, #16]
		bool concat_next = ((i + 1) < num_msgs)
   1ccfa:	f108 0301 	add.w	r3, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   1ccfe:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
   1cd00:	60bb      	str	r3, [r7, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
   1cd02:	d20a      	bcs.n	1cd1a <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   1cd04:	0783      	lsls	r3, r0, #30
   1cd06:	d408      	bmi.n	1cd1a <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1cd08:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   1cd0a:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   1cd0e:	f002 0201 	and.w	r2, r2, #1
   1cd12:	f003 0304 	and.w	r3, r3, #4
   1cd16:	431a      	orrs	r2, r3
   1cd18:	d02b      	beq.n	1cd72 <i2c_nrfx_twim_transfer+0xe2>
		if (concat_next || (msg_buf_used != 0)) {
   1cd1a:	2d00      	cmp	r5, #0
   1cd1c:	d03f      	beq.n	1cd9e <i2c_nrfx_twim_transfer+0x10e>
		bool concat_next = ((i + 1) < num_msgs)
   1cd1e:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   1cd20:	6862      	ldr	r2, [r4, #4]
   1cd22:	f8d7 c014 	ldr.w	ip, [r7, #20]
   1cd26:	18a9      	adds	r1, r5, r2
   1cd28:	4561      	cmp	r1, ip
   1cd2a:	d924      	bls.n	1cd76 <i2c_nrfx_twim_transfer+0xe6>
				LOG_ERR("Need to use concatenation buffer and "
   1cd2c:	466c      	mov	r4, sp
   1cd2e:	b08c      	sub	sp, #48	; 0x30
   1cd30:	6831      	ldr	r1, [r6, #0]
   1cd32:	466b      	mov	r3, sp
   1cd34:	61da      	str	r2, [r3, #28]
   1cd36:	697a      	ldr	r2, [r7, #20]
   1cd38:	4866      	ldr	r0, [pc, #408]	; (1ced4 <i2c_nrfx_twim_transfer+0x244>)
   1cd3a:	e9c3 2108 	strd	r2, r1, [r3, #32]
   1cd3e:	f240 5203 	movw	r2, #1283	; 0x503
   1cd42:	851a      	strh	r2, [r3, #40]	; 0x28
   1cd44:	461a      	mov	r2, r3
   1cd46:	e9c3 0505 	strd	r0, r5, [r3, #20]
   1cd4a:	4b63      	ldr	r3, [pc, #396]	; (1ced8 <i2c_nrfx_twim_transfer+0x248>)
   1cd4c:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd50:	2300      	movs	r3, #0
   1cd52:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   1cd56:	4861      	ldr	r0, [pc, #388]	; (1cedc <i2c_nrfx_twim_transfer+0x24c>)
   1cd58:	f7fd ffd2 	bl	1ad00 <z_impl_z_log_msg_static_create>
   1cd5c:	46a5      	mov	sp, r4
				ret = -ENOSPC;
   1cd5e:	f06f 041b 	mvn.w	r4, #27
	z_impl_k_sem_give(sem);
   1cd62:	4648      	mov	r0, r9
   1cd64:	f007 f966 	bl	24034 <z_impl_k_sem_give>
}
   1cd68:	4620      	mov	r0, r4
   1cd6a:	3734      	adds	r7, #52	; 0x34
   1cd6c:	46bd      	mov	sp, r7
   1cd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bool concat_next = ((i + 1) < num_msgs)
   1cd72:	2301      	movs	r3, #1
   1cd74:	e7d4      	b.n	1cd20 <i2c_nrfx_twim_transfer+0x90>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   1cd76:	07c1      	lsls	r1, r0, #31
   1cd78:	d406      	bmi.n	1cd88 <i2c_nrfx_twim_transfer+0xf8>
   1cd7a:	6821      	ldr	r1, [r4, #0]
   1cd7c:	eb0a 0005 	add.w	r0, sl, r5
   1cd80:	607b      	str	r3, [r7, #4]
   1cd82:	f00b fdb3 	bl	288ec <memcpy>
   1cd86:	687b      	ldr	r3, [r7, #4]
			msg_buf_used += msgs[i].len;
   1cd88:	6862      	ldr	r2, [r4, #4]
   1cd8a:	442a      	add	r2, r5
   1cd8c:	b295      	uxth	r5, r2
		if (concat_next) {
   1cd8e:	2b00      	cmp	r3, #0
   1cd90:	f040 8085 	bne.w	1ce9e <i2c_nrfx_twim_transfer+0x20e>
		if (msg_buf_used == 0) {
   1cd94:	b13d      	cbz	r5, 1cda6 <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.primary_length = msg_buf_used;
   1cd96:	462b      	mov	r3, r5
			cur_xfer.p_primary_buf = msg_buf;
   1cd98:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
   1cd9c:	e007      	b.n	1cdae <i2c_nrfx_twim_transfer+0x11e>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1cd9e:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
   1cda0:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1cda4:	d51b      	bpl.n	1cdde <i2c_nrfx_twim_transfer+0x14e>
			cur_xfer.p_primary_buf = msgs[i].buf;
   1cda6:	2500      	movs	r5, #0
   1cda8:	6823      	ldr	r3, [r4, #0]
   1cdaa:	62bb      	str	r3, [r7, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
   1cdac:	6863      	ldr	r3, [r4, #4]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1cdae:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
   1cdb0:	623b      	str	r3, [r7, #32]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   1cdb2:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1cdb6:	f082 0202 	eor.w	r2, r2, #2
   1cdba:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1cdbe:	4658      	mov	r0, fp
   1cdc0:	0152      	lsls	r2, r2, #5
   1cdc2:	f107 011c 	add.w	r1, r7, #28
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1cdc6:	773b      	strb	r3, [r7, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1cdc8:	f004 fcc2 	bl	21750 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1cdcc:	4b44      	ldr	r3, [pc, #272]	; (1cee0 <i2c_nrfx_twim_transfer+0x250>)
   1cdce:	4298      	cmp	r0, r3
   1cdd0:	d02c      	beq.n	1ce2c <i2c_nrfx_twim_transfer+0x19c>
			if (res == NRFX_ERROR_BUSY) {
   1cdd2:	330b      	adds	r3, #11
   1cdd4:	4298      	cmp	r0, r3
   1cdd6:	d144      	bne.n	1ce62 <i2c_nrfx_twim_transfer+0x1d2>
				ret = -EBUSY;
   1cdd8:	f06f 040f 	mvn.w	r4, #15
   1cddc:	e7c1      	b.n	1cd62 <i2c_nrfx_twim_transfer+0xd2>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1cdde:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1cde2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1cde6:	d0de      	beq.n	1cda6 <i2c_nrfx_twim_transfer+0x116>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   1cde8:	f8bb 301a 	ldrh.w	r3, [fp, #26]
   1cdec:	4293      	cmp	r3, r2
   1cdee:	d218      	bcs.n	1ce22 <i2c_nrfx_twim_transfer+0x192>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   1cdf0:	466c      	mov	r4, sp
   1cdf2:	b08a      	sub	sp, #40	; 0x28
   1cdf4:	466b      	mov	r3, sp
   1cdf6:	6831      	ldr	r1, [r6, #0]
   1cdf8:	483a      	ldr	r0, [pc, #232]	; (1cee4 <i2c_nrfx_twim_transfer+0x254>)
   1cdfa:	61d9      	str	r1, [r3, #28]
   1cdfc:	e9c3 0205 	strd	r0, r2, [r3, #20]
   1ce00:	f240 3201 	movw	r2, #769	; 0x301
   1ce04:	841a      	strh	r2, [r3, #32]
   1ce06:	461a      	mov	r2, r3
   1ce08:	4b37      	ldr	r3, [pc, #220]	; (1cee8 <i2c_nrfx_twim_transfer+0x258>)
   1ce0a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ce0e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1ce12:	462b      	mov	r3, r5
   1ce14:	4831      	ldr	r0, [pc, #196]	; (1cedc <i2c_nrfx_twim_transfer+0x24c>)
   1ce16:	f7fd ff73 	bl	1ad00 <z_impl_z_log_msg_static_create>
   1ce1a:	46a5      	mov	sp, r4
				ret = -EINVAL;
   1ce1c:	f06f 0415 	mvn.w	r4, #21
				break;
   1ce20:	e79f      	b.n	1cd62 <i2c_nrfx_twim_transfer+0xd2>
   1ce22:	4650      	mov	r0, sl
   1ce24:	f00b fd62 	bl	288ec <memcpy>
			msg_buf_used = msgs[i].len;
   1ce28:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
   1ce2a:	e7b3      	b.n	1cd94 <i2c_nrfx_twim_transfer+0x104>
	return z_impl_k_sem_take(sem, timeout);
   1ce2c:	2300      	movs	r3, #0
   1ce2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1ce32:	68f8      	ldr	r0, [r7, #12]
   1ce34:	f007 f924 	bl	24080 <z_impl_k_sem_take>
		if (ret != 0) {
   1ce38:	4603      	mov	r3, r0
   1ce3a:	b1a8      	cbz	r0, 1ce68 <i2c_nrfx_twim_transfer+0x1d8>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1ce3c:	466c      	mov	r4, sp
   1ce3e:	b088      	sub	sp, #32
   1ce40:	466a      	mov	r2, sp
   1ce42:	4b2a      	ldr	r3, [pc, #168]	; (1ceec <i2c_nrfx_twim_transfer+0x25c>)
   1ce44:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1ce48:	2303      	movs	r3, #3
   1ce4a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ce4e:	4823      	ldr	r0, [pc, #140]	; (1cedc <i2c_nrfx_twim_transfer+0x24c>)
   1ce50:	2300      	movs	r3, #0
   1ce52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ce56:	f7fd ff53 	bl	1ad00 <z_impl_z_log_msg_static_create>
			(void)i2c_nrfx_twim_recover_bus(dev);
   1ce5a:	4630      	mov	r0, r6
   1ce5c:	46a5      	mov	sp, r4
   1ce5e:	f7ff feb5 	bl	1cbcc <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
   1ce62:	f06f 0404 	mvn.w	r4, #4
   1ce66:	e77c      	b.n	1cd62 <i2c_nrfx_twim_transfer+0xd2>
		res = dev_data->res;
   1ce68:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1ce6c:	4a1c      	ldr	r2, [pc, #112]	; (1cee0 <i2c_nrfx_twim_transfer+0x250>)
   1ce6e:	4291      	cmp	r1, r2
   1ce70:	d011      	beq.n	1ce96 <i2c_nrfx_twim_transfer+0x206>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1ce72:	466c      	mov	r4, sp
   1ce74:	b088      	sub	sp, #32
   1ce76:	466a      	mov	r2, sp
   1ce78:	481d      	ldr	r0, [pc, #116]	; (1cef0 <i2c_nrfx_twim_transfer+0x260>)
   1ce7a:	f8c2 801c 	str.w	r8, [r2, #28]
   1ce7e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1ce82:	2104      	movs	r1, #4
   1ce84:	f842 1f10 	str.w	r1, [r2, #16]!
   1ce88:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ce8c:	4813      	ldr	r0, [pc, #76]	; (1cedc <i2c_nrfx_twim_transfer+0x24c>)
   1ce8e:	f7fd ff37 	bl	1ad00 <z_impl_z_log_msg_static_create>
   1ce92:	46a5      	mov	sp, r4
			break;
   1ce94:	e7e5      	b.n	1ce62 <i2c_nrfx_twim_transfer+0x1d2>
		if ((msgs[i].flags & I2C_MSG_READ)
   1ce96:	7a23      	ldrb	r3, [r4, #8]
   1ce98:	07db      	lsls	r3, r3, #31
   1ce9a:	d404      	bmi.n	1cea6 <i2c_nrfx_twim_transfer+0x216>
		msg_buf_used = 0;
   1ce9c:	2500      	movs	r5, #0
   1ce9e:	f8d7 8008 	ldr.w	r8, [r7, #8]
   1cea2:	340c      	adds	r4, #12
   1cea4:	e71f      	b.n	1cce6 <i2c_nrfx_twim_transfer+0x56>
		    && cur_xfer.p_primary_buf == msg_buf) {
   1cea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cea8:	459a      	cmp	sl, r3
   1ceaa:	d1f7      	bne.n	1ce9c <i2c_nrfx_twim_transfer+0x20c>
   1ceac:	46a0      	mov	r8, r4
   1ceae:	e007      	b.n	1cec0 <i2c_nrfx_twim_transfer+0x230>
				msg_buf_used -= msgs[j].len;
   1ceb0:	1aa9      	subs	r1, r5, r2
   1ceb2:	b28d      	uxth	r5, r1
   1ceb4:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1ceb8:	fa1a f181 	uxtah	r1, sl, r1
   1cebc:	f00b fd16 	bl	288ec <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   1cec0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1cec4:	f1a8 080c 	sub.w	r8, r8, #12
   1cec8:	4295      	cmp	r5, r2
   1ceca:	d2f1      	bcs.n	1ceb0 <i2c_nrfx_twim_transfer+0x220>
   1cecc:	e7e6      	b.n	1ce9c <i2c_nrfx_twim_transfer+0x20c>
			ret = -ENOTSUP;
   1cece:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1ced2:	e746      	b.n	1cd62 <i2c_nrfx_twim_transfer+0xd2>
   1ced4:	0002a20d 	.word	0x0002a20d
   1ced8:	01000006 	.word	0x01000006
   1cedc:	0002904c 	.word	0x0002904c
   1cee0:	0bad0000 	.word	0x0bad0000
   1cee4:	0002a29d 	.word	0x0002a29d
   1cee8:	01000004 	.word	0x01000004
   1ceec:	0002a303 	.word	0x0002a303
   1cef0:	0002a32d 	.word	0x0002a32d

0001cef4 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   1cef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cef8:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1cefa:	6844      	ldr	r4, [r0, #4]
{
   1cefc:	af00      	add	r7, sp, #0
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1cefe:	6a66      	ldr	r6, [r4, #36]	; 0x24
	struct spi_nrfx_data *dev_data = dev->data;
   1cf00:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1cf02:	2100      	movs	r1, #0
   1cf04:	4630      	mov	r0, r6
   1cf06:	1d3a      	adds	r2, r7, #4
   1cf08:	f009 fe3e 	bl	26b88 <pinctrl_lookup_state>
	if (ret < 0) {
   1cf0c:	2800      	cmp	r0, #0
   1cf0e:	db32      	blt.n	1cf76 <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1cf10:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1cf12:	6832      	ldr	r2, [r6, #0]
   1cf14:	7919      	ldrb	r1, [r3, #4]
   1cf16:	6818      	ldr	r0, [r3, #0]
   1cf18:	f000 fe30 	bl	1db7c <pinctrl_configure_pins>
	if (err < 0) {
   1cf1c:	2800      	cmp	r0, #0
   1cf1e:	db2a      	blt.n	1cf76 <spi_nrfx_init+0x82>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1cf20:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   1cf22:	6a23      	ldr	r3, [r4, #32]
   1cf24:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1cf26:	68ac      	ldr	r4, [r5, #8]
   1cf28:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1cf2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1cf30:	429c      	cmp	r4, r3
   1cf32:	d304      	bcc.n	1cf3e <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1cf34:	4628      	mov	r0, r5
   1cf36:	f009 fd76 	bl	26a26 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   1cf3a:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   1cf3c:	e01b      	b.n	1cf76 <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
   1cf3e:	6820      	ldr	r0, [r4, #0]
   1cf40:	f00b f8ec 	bl	2811c <z_device_is_ready>
   1cf44:	b9d8      	cbnz	r0, 1cf7e <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1cf46:	6823      	ldr	r3, [r4, #0]
   1cf48:	6819      	ldr	r1, [r3, #0]
   1cf4a:	7923      	ldrb	r3, [r4, #4]
   1cf4c:	466c      	mov	r4, sp
   1cf4e:	b08a      	sub	sp, #40	; 0x28
   1cf50:	466a      	mov	r2, sp
   1cf52:	61d3      	str	r3, [r2, #28]
   1cf54:	f44f 7300 	mov.w	r3, #512	; 0x200
   1cf58:	481a      	ldr	r0, [pc, #104]	; (1cfc4 <spi_nrfx_init+0xd0>)
   1cf5a:	8413      	strh	r3, [r2, #32]
   1cf5c:	4b1a      	ldr	r3, [pc, #104]	; (1cfc8 <spi_nrfx_init+0xd4>)
   1cf5e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1cf62:	481a      	ldr	r0, [pc, #104]	; (1cfcc <spi_nrfx_init+0xd8>)
   1cf64:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1cf68:	f842 3f10 	str.w	r3, [r2, #16]!
   1cf6c:	f009 fd22 	bl	269b4 <z_log_msg_static_create.constprop.0>
			return -ENODEV;
   1cf70:	f06f 0012 	mvn.w	r0, #18
   1cf74:	46a5      	mov	sp, r4
#endif
}
   1cf76:	370c      	adds	r7, #12
   1cf78:	46bd      	mov	sp, r7
   1cf7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
   1cf7e:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1cf80:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1cf82:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   1cf84:	f8d0 e010 	ldr.w	lr, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1cf88:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   1cf8a:	bf54      	ite	pl
   1cf8c:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1cf90:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1cf94:	f8de c000 	ldr.w	ip, [lr]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1cf98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1cf9c:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1cfa0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1cfa2:	bf4c      	ite	mi
   1cfa4:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1cfa8:	ea2c 0308 	bicpl.w	r3, ip, r8
	const struct gpio_driver_api *api =
   1cfac:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1cfb0:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   1cfb4:	f8d9 3000 	ldr.w	r3, [r9]
   1cfb8:	4798      	blx	r3
		if (ret < 0) {
   1cfba:	2800      	cmp	r0, #0
   1cfbc:	dbdb      	blt.n	1cf76 <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1cfbe:	3408      	adds	r4, #8
   1cfc0:	e7b2      	b.n	1cf28 <spi_nrfx_init+0x34>
   1cfc2:	bf00      	nop
   1cfc4:	0002a369 	.word	0x0002a369
   1cfc8:	01000004 	.word	0x01000004
   1cfcc:	0002910c 	.word	0x0002910c

0001cfd0 <transfer_next_chunk>:
{
   1cfd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1cfd2:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1cfd4:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1cfd6:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1cfd8:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1cfda:	b98d      	cbnz	r5, 1d000 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   1cfdc:	2b00      	cmp	r3, #0
   1cfde:	d137      	bne.n	1d050 <transfer_next_chunk+0x80>
	int error = 0;
   1cfe0:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   1cfe2:	2200      	movs	r2, #0
   1cfe4:	4620      	mov	r0, r4
   1cfe6:	4611      	mov	r1, r2
   1cfe8:	f009 fcfb 	bl	269e2 <_spi_context_cs_control>
	ctx->sync_status = status;
   1cfec:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1cfee:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1cff2:	f007 f81f 	bl	24034 <z_impl_k_sem_give>
	dev_data->busy = false;
   1cff6:	2300      	movs	r3, #0
   1cff8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1cffc:	b004      	add	sp, #16
   1cffe:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1d000:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1d002:	bb0b      	cbnz	r3, 1d048 <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   1d004:	bb39      	cbnz	r1, 1d056 <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1d006:	f641 72ff 	movw	r2, #8191	; 0x1fff
   1d00a:	42aa      	cmp	r2, r5
   1d00c:	bf28      	it	cs
   1d00e:	462a      	movcs	r2, r5
   1d010:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   1d012:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1d014:	9100      	str	r1, [sp, #0]
   1d016:	b11b      	cbz	r3, 1d020 <transfer_next_chunk+0x50>
   1d018:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1d01a:	2b00      	cmp	r3, #0
   1d01c:	bf18      	it	ne
   1d01e:	4613      	movne	r3, r2
   1d020:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1d022:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1d024:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1d026:	b11b      	cbz	r3, 1d030 <transfer_next_chunk+0x60>
   1d028:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1d02a:	2b00      	cmp	r3, #0
   1d02c:	bf18      	it	ne
   1d02e:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1d030:	2200      	movs	r2, #0
   1d032:	4669      	mov	r1, sp
   1d034:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1d036:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1d038:	f004 fa70 	bl	2151c <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1d03c:	4b0d      	ldr	r3, [pc, #52]	; (1d074 <transfer_next_chunk+0xa4>)
   1d03e:	4298      	cmp	r0, r3
   1d040:	d0dc      	beq.n	1cffc <transfer_next_chunk+0x2c>
			error = -EIO;
   1d042:	f06f 0504 	mvn.w	r5, #4
   1d046:	e7cc      	b.n	1cfe2 <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1d048:	429d      	cmp	r5, r3
   1d04a:	bf28      	it	cs
   1d04c:	461d      	movcs	r5, r3
   1d04e:	e7d9      	b.n	1d004 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   1d050:	461d      	mov	r5, r3
   1d052:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1d054:	e7d7      	b.n	1d006 <transfer_next_chunk+0x36>
   1d056:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1d05a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1d05e:	d0d2      	beq.n	1d006 <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1d060:	2d08      	cmp	r5, #8
   1d062:	bf28      	it	cs
   1d064:	2508      	movcs	r5, #8
   1d066:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1d068:	462a      	mov	r2, r5
   1d06a:	f00b fc3f 	bl	288ec <memcpy>
			tx_buf = dev_data->buffer;
   1d06e:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1d070:	e7c9      	b.n	1d006 <transfer_next_chunk+0x36>
   1d072:	bf00      	nop
   1d074:	0bad0000 	.word	0x0bad0000

0001d078 <event_handler>:
{
   1d078:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1d07a:	7803      	ldrb	r3, [r0, #0]
{
   1d07c:	460c      	mov	r4, r1
   1d07e:	b086      	sub	sp, #24
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1d080:	2b00      	cmp	r3, #0
   1d082:	d154      	bne.n	1d12e <event_handler+0xb6>
	if (!ctx->tx_len) {
   1d084:	6d8b      	ldr	r3, [r1, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1d086:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   1d088:	b15b      	cbz	r3, 1d0a2 <event_handler+0x2a>
	if (len > ctx->tx_len) {
   1d08a:	429a      	cmp	r2, r3
   1d08c:	d91e      	bls.n	1d0cc <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
   1d08e:	4b29      	ldr	r3, [pc, #164]	; (1d134 <event_handler+0xbc>)
   1d090:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d094:	9305      	str	r3, [sp, #20]
   1d096:	2302      	movs	r3, #2
   1d098:	4827      	ldr	r0, [pc, #156]	; (1d138 <event_handler+0xc0>)
   1d09a:	aa04      	add	r2, sp, #16
   1d09c:	9304      	str	r3, [sp, #16]
   1d09e:	f009 fc89 	bl	269b4 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
   1d0a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1d0a4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1d0a6:	b15b      	cbz	r3, 1d0c0 <event_handler+0x48>
	if (len > ctx->rx_len) {
   1d0a8:	429a      	cmp	r2, r3
   1d0aa:	d927      	bls.n	1d0fc <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
   1d0ac:	4b21      	ldr	r3, [pc, #132]	; (1d134 <event_handler+0xbc>)
   1d0ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d0b2:	9305      	str	r3, [sp, #20]
   1d0b4:	2302      	movs	r3, #2
   1d0b6:	4820      	ldr	r0, [pc, #128]	; (1d138 <event_handler+0xc0>)
   1d0b8:	aa04      	add	r2, sp, #16
   1d0ba:	9304      	str	r3, [sp, #16]
   1d0bc:	f009 fc7a 	bl	269b4 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1d0c0:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1d0c2:	b006      	add	sp, #24
   1d0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1d0c8:	f7ff bf82 	b.w	1cfd0 <transfer_next_chunk>
	ctx->tx_len -= len;
   1d0cc:	1a9b      	subs	r3, r3, r2
   1d0ce:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1d0d0:	b973      	cbnz	r3, 1d0f0 <event_handler+0x78>
		++ctx->current_tx;
   1d0d2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1d0d4:	f101 0258 	add.w	r2, r1, #88	; 0x58
		++ctx->current_tx;
   1d0d8:	3308      	adds	r3, #8
   1d0da:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1d0dc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1d0de:	f104 0044 	add.w	r0, r4, #68	; 0x44
		--ctx->tx_count;
   1d0e2:	3b01      	subs	r3, #1
   1d0e4:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1d0e6:	3148      	adds	r1, #72	; 0x48
   1d0e8:	f009 fc51 	bl	2698e <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1d0ec:	6560      	str	r0, [r4, #84]	; 0x54
   1d0ee:	e7d8      	b.n	1d0a2 <event_handler+0x2a>
	} else if (ctx->tx_buf) {
   1d0f0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1d0f2:	2b00      	cmp	r3, #0
   1d0f4:	d0d5      	beq.n	1d0a2 <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
   1d0f6:	4413      	add	r3, r2
   1d0f8:	654b      	str	r3, [r1, #84]	; 0x54
   1d0fa:	e7d2      	b.n	1d0a2 <event_handler+0x2a>
	ctx->rx_len -= len;
   1d0fc:	1a9b      	subs	r3, r3, r2
   1d0fe:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1d100:	b97b      	cbnz	r3, 1d122 <event_handler+0xaa>
		++ctx->current_rx;
   1d102:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1d104:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1d108:	3308      	adds	r3, #8
   1d10a:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1d10c:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1d10e:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1d112:	3b01      	subs	r3, #1
   1d114:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1d116:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1d11a:	f009 fc38 	bl	2698e <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1d11e:	65e0      	str	r0, [r4, #92]	; 0x5c
   1d120:	e7ce      	b.n	1d0c0 <event_handler+0x48>
	} else if (ctx->rx_buf) {
   1d122:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1d124:	2b00      	cmp	r3, #0
   1d126:	d0cb      	beq.n	1d0c0 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1d128:	4413      	add	r3, r2
   1d12a:	65e3      	str	r3, [r4, #92]	; 0x5c
   1d12c:	e7c8      	b.n	1d0c0 <event_handler+0x48>
}
   1d12e:	b006      	add	sp, #24
   1d130:	bd10      	pop	{r4, pc}
   1d132:	bf00      	nop
   1d134:	0002a38d 	.word	0x0002a38d
   1d138:	0002910c 	.word	0x0002910c

0001d13c <spi_nrfx_transceive>:
{
   1d13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d140:	b08b      	sub	sp, #44	; 0x2c
   1d142:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1d144:	888b      	ldrh	r3, [r1, #4]
   1d146:	af00      	add	r7, sp, #0
   1d148:	049b      	lsls	r3, r3, #18
   1d14a:	4680      	mov	r8, r0
   1d14c:	460e      	mov	r6, r1
	struct spi_nrfx_data *dev_data = dev->data;
   1d14e:	6904      	ldr	r4, [r0, #16]
{
   1d150:	60ba      	str	r2, [r7, #8]
   1d152:	d439      	bmi.n	1d1c8 <spi_nrfx_transceive+0x8c>
	return z_impl_k_sem_take(sem, timeout);
   1d154:	f04f 32ff 	mov.w	r2, #4294967295
   1d158:	f04f 33ff 	mov.w	r3, #4294967295
   1d15c:	f104 0010 	add.w	r0, r4, #16
   1d160:	f006 ff8e 	bl	24080 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1d164:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1d166:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1d16a:	f8d8 9010 	ldr.w	r9, [r8, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1d16e:	60fb      	str	r3, [r7, #12]
	uint32_t max_freq = dev_config->max_freq;
   1d170:	689b      	ldr	r3, [r3, #8]
   1d172:	603b      	str	r3, [r7, #0]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1d174:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
   1d178:	607b      	str	r3, [r7, #4]
   1d17a:	b123      	cbz	r3, 1d186 <spi_nrfx_transceive+0x4a>
   1d17c:	f8d9 3000 	ldr.w	r3, [r9]
   1d180:	429e      	cmp	r6, r3
   1d182:	f000 80d0 	beq.w	1d326 <spi_nrfx_transceive+0x1ea>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1d186:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   1d18a:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   1d18e:	d022      	beq.n	1d1d6 <spi_nrfx_transceive+0x9a>
		LOG_ERR("Half-duplex not supported");
   1d190:	4b9b      	ldr	r3, [pc, #620]	; (1d400 <spi_nrfx_transceive+0x2c4>)
		return -ENOTSUP;
   1d192:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
   1d196:	627b      	str	r3, [r7, #36]	; 0x24
   1d198:	2302      	movs	r3, #2
   1d19a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d19e:	4899      	ldr	r0, [pc, #612]	; (1d404 <spi_nrfx_transceive+0x2c8>)
   1d1a0:	623b      	str	r3, [r7, #32]
   1d1a2:	f107 0220 	add.w	r2, r7, #32
   1d1a6:	f009 fc05 	bl	269b4 <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1d1aa:	6823      	ldr	r3, [r4, #0]
   1d1ac:	889b      	ldrh	r3, [r3, #4]
   1d1ae:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1d1b2:	d104      	bne.n	1d1be <spi_nrfx_transceive+0x82>
		ctx->owner = NULL;
   1d1b4:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1d1b6:	f104 0010 	add.w	r0, r4, #16
   1d1ba:	f006 ff3b 	bl	24034 <z_impl_k_sem_give>
}
   1d1be:	4628      	mov	r0, r5
   1d1c0:	372c      	adds	r7, #44	; 0x2c
   1d1c2:	46bd      	mov	sp, r7
   1d1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1d1c8:	69a3      	ldr	r3, [r4, #24]
   1d1ca:	2b00      	cmp	r3, #0
   1d1cc:	d1c2      	bne.n	1d154 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1d1ce:	6863      	ldr	r3, [r4, #4]
   1d1d0:	4299      	cmp	r1, r3
   1d1d2:	d1bf      	bne.n	1d154 <spi_nrfx_transceive+0x18>
   1d1d4:	e7c7      	b.n	1d166 <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1d1d6:	f01c 0f01 	tst.w	ip, #1
   1d1da:	d016      	beq.n	1d20a <spi_nrfx_transceive+0xce>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1d1dc:	466d      	mov	r5, sp
   1d1de:	b088      	sub	sp, #32
   1d1e0:	f8d8 3000 	ldr.w	r3, [r8]
   1d1e4:	466a      	mov	r2, sp
   1d1e6:	4988      	ldr	r1, [pc, #544]	; (1d408 <spi_nrfx_transceive+0x2cc>)
   1d1e8:	4886      	ldr	r0, [pc, #536]	; (1d404 <spi_nrfx_transceive+0x2c8>)
   1d1ea:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1d1ee:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d1f2:	8393      	strh	r3, [r2, #28]
   1d1f4:	4b85      	ldr	r3, [pc, #532]	; (1d40c <spi_nrfx_transceive+0x2d0>)
   1d1f6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1d1fa:	f842 3f10 	str.w	r3, [r2, #16]!
   1d1fe:	f009 fbd9 	bl	269b4 <z_log_msg_static_create.constprop.0>
   1d202:	46ad      	mov	sp, r5
		return -EINVAL;
   1d204:	f06f 0515 	mvn.w	r5, #21
   1d208:	e7cf      	b.n	1d1aa <spi_nrfx_transceive+0x6e>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1d20a:	f01c 0f08 	tst.w	ip, #8
   1d20e:	d00b      	beq.n	1d228 <spi_nrfx_transceive+0xec>
		LOG_ERR("Loopback mode is not supported");
   1d210:	4b7f      	ldr	r3, [pc, #508]	; (1d410 <spi_nrfx_transceive+0x2d4>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1d212:	627b      	str	r3, [r7, #36]	; 0x24
   1d214:	2302      	movs	r3, #2
   1d216:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d21a:	487a      	ldr	r0, [pc, #488]	; (1d404 <spi_nrfx_transceive+0x2c8>)
   1d21c:	623b      	str	r3, [r7, #32]
   1d21e:	f107 0220 	add.w	r2, r7, #32
   1d222:	f009 fbc7 	bl	269b4 <z_log_msg_static_create.constprop.0>
	if (error == 0) {
   1d226:	e7ed      	b.n	1d204 <spi_nrfx_transceive+0xc8>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1d228:	f3cc 1345 	ubfx	r3, ip, #5, #6
   1d22c:	2b08      	cmp	r3, #8
   1d22e:	d001      	beq.n	1d234 <spi_nrfx_transceive+0xf8>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1d230:	4b78      	ldr	r3, [pc, #480]	; (1d414 <spi_nrfx_transceive+0x2d8>)
   1d232:	e7ee      	b.n	1d212 <spi_nrfx_transceive+0xd6>
	if (spi_cfg->frequency < 125000) {
   1d234:	6835      	ldr	r5, [r6, #0]
   1d236:	4b78      	ldr	r3, [pc, #480]	; (1d418 <spi_nrfx_transceive+0x2dc>)
   1d238:	429d      	cmp	r5, r3
   1d23a:	d801      	bhi.n	1d240 <spi_nrfx_transceive+0x104>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1d23c:	4b77      	ldr	r3, [pc, #476]	; (1d41c <spi_nrfx_transceive+0x2e0>)
   1d23e:	e7e8      	b.n	1d212 <spi_nrfx_transceive+0xd6>
	config = dev_config->def_config;
   1d240:	68fb      	ldr	r3, [r7, #12]
   1d242:	f107 0e10 	add.w	lr, r7, #16
   1d246:	f103 0b0c 	add.w	fp, r3, #12
   1d24a:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   1d24e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1d252:	f8db 3000 	ldr.w	r3, [fp]
   1d256:	f8ce 3000 	str.w	r3, [lr]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1d25a:	683b      	ldr	r3, [r7, #0]
   1d25c:	42ab      	cmp	r3, r5
   1d25e:	bf28      	it	cs
   1d260:	462b      	movcs	r3, r5
   1d262:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1d264:	4b6e      	ldr	r3, [pc, #440]	; (1d420 <spi_nrfx_transceive+0x2e4>)
   1d266:	429d      	cmp	r5, r3
   1d268:	d945      	bls.n	1d2f6 <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 500000) {
   1d26a:	4b6e      	ldr	r3, [pc, #440]	; (1d424 <spi_nrfx_transceive+0x2e8>)
   1d26c:	429d      	cmp	r5, r3
   1d26e:	d945      	bls.n	1d2fc <spi_nrfx_transceive+0x1c0>
	} else if (frequency < 1000000) {
   1d270:	4b6d      	ldr	r3, [pc, #436]	; (1d428 <spi_nrfx_transceive+0x2ec>)
   1d272:	429d      	cmp	r5, r3
   1d274:	d945      	bls.n	1d302 <spi_nrfx_transceive+0x1c6>
	} else if (frequency < 2000000) {
   1d276:	4b6d      	ldr	r3, [pc, #436]	; (1d42c <spi_nrfx_transceive+0x2f0>)
   1d278:	429d      	cmp	r5, r3
   1d27a:	d945      	bls.n	1d308 <spi_nrfx_transceive+0x1cc>
	} else if (frequency < 4000000) {
   1d27c:	4b6c      	ldr	r3, [pc, #432]	; (1d430 <spi_nrfx_transceive+0x2f4>)
   1d27e:	429d      	cmp	r5, r3
   1d280:	d945      	bls.n	1d30e <spi_nrfx_transceive+0x1d2>
		return NRF_SPIM_FREQ_4M;
   1d282:	4b6c      	ldr	r3, [pc, #432]	; (1d434 <spi_nrfx_transceive+0x2f8>)
   1d284:	429d      	cmp	r5, r3
   1d286:	bf2c      	ite	cs
   1d288:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
   1d28c:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1d290:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1d294:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1d296:	f00c 0304 	and.w	r3, ip, #4
   1d29a:	d03b      	beq.n	1d314 <spi_nrfx_transceive+0x1d8>
			return NRF_SPIM_MODE_2;
   1d29c:	2b00      	cmp	r3, #0
   1d29e:	bf14      	ite	ne
   1d2a0:	2303      	movne	r3, #3
   1d2a2:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1d2a4:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   1d2a6:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1d2a8:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1d2ac:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   1d2b0:	b12b      	cbz	r3, 1d2be <spi_nrfx_transceive+0x182>
		nrfx_spim_uninit(&dev_config->spim);
   1d2b2:	68f8      	ldr	r0, [r7, #12]
   1d2b4:	f004 f8ea 	bl	2148c <nrfx_spim_uninit>
		dev_data->initialized = false;
   1d2b8:	2300      	movs	r3, #0
   1d2ba:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1d2be:	464b      	mov	r3, r9
   1d2c0:	4a5d      	ldr	r2, [pc, #372]	; (1d438 <spi_nrfx_transceive+0x2fc>)
   1d2c2:	68f8      	ldr	r0, [r7, #12]
   1d2c4:	f107 0110 	add.w	r1, r7, #16
   1d2c8:	f004 f838 	bl	2133c <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1d2cc:	4b5b      	ldr	r3, [pc, #364]	; (1d43c <spi_nrfx_transceive+0x300>)
   1d2ce:	4298      	cmp	r0, r3
   1d2d0:	d024      	beq.n	1d31c <spi_nrfx_transceive+0x1e0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1d2d2:	466d      	mov	r5, sp
   1d2d4:	b088      	sub	sp, #32
   1d2d6:	466a      	mov	r2, sp
   1d2d8:	4b59      	ldr	r3, [pc, #356]	; (1d440 <spi_nrfx_transceive+0x304>)
   1d2da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d2de:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d2e2:	2303      	movs	r3, #3
   1d2e4:	4847      	ldr	r0, [pc, #284]	; (1d404 <spi_nrfx_transceive+0x2c8>)
   1d2e6:	f842 3f10 	str.w	r3, [r2, #16]!
   1d2ea:	f009 fb63 	bl	269b4 <z_log_msg_static_create.constprop.0>
   1d2ee:	46ad      	mov	sp, r5
		return -EIO;
   1d2f0:	f06f 0504 	mvn.w	r5, #4
   1d2f4:	e759      	b.n	1d1aa <spi_nrfx_transceive+0x6e>
		return NRF_SPIM_FREQ_125K;
   1d2f6:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1d2fa:	e7c9      	b.n	1d290 <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_250K;
   1d2fc:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1d300:	e7c6      	b.n	1d290 <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_500K;
   1d302:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1d306:	e7c3      	b.n	1d290 <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_1M;
   1d308:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1d30c:	e7c0      	b.n	1d290 <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_2M;
   1d30e:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1d312:	e7bd      	b.n	1d290 <spi_nrfx_transceive+0x154>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1d314:	3b00      	subs	r3, #0
   1d316:	bf18      	it	ne
   1d318:	2301      	movne	r3, #1
   1d31a:	e7c3      	b.n	1d2a4 <spi_nrfx_transceive+0x168>
	dev_data->initialized = true;
   1d31c:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1d31e:	f8c9 6000 	str.w	r6, [r9]
	dev_data->initialized = true;
   1d322:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
		dev_data->busy = true;
   1d326:	2301      	movs	r3, #1
   1d328:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1d32c:	68bb      	ldr	r3, [r7, #8]
   1d32e:	2b00      	cmp	r3, #0
   1d330:	d154      	bne.n	1d3dc <spi_nrfx_transceive+0x2a0>
   1d332:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1d334:	2300      	movs	r3, #0
   1d336:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1d338:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1d33c:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1d340:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1d344:	f009 fb23 	bl	2698e <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1d348:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1d34a:	f1ba 0f00 	cmp.w	sl, #0
   1d34e:	d14d      	bne.n	1d3ec <spi_nrfx_transceive+0x2b0>
   1d350:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1d354:	2300      	movs	r3, #0
   1d356:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1d358:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1d35c:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1d360:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1d364:	f009 fb13 	bl	2698e <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1d368:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1d36a:	2101      	movs	r1, #1
   1d36c:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1d36e:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1d370:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1d372:	4620      	mov	r0, r4
   1d374:	f009 fb35 	bl	269e2 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1d378:	4640      	mov	r0, r8
   1d37a:	f7ff fe29 	bl	1cfd0 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1d37e:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1d380:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1d382:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1d384:	429d      	cmp	r5, r3
   1d386:	bf38      	it	cc
   1d388:	461d      	movcc	r5, r3
   1d38a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1d38e:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1d390:	f858 3b28 	ldr.w	r3, [r8], #40
			return ((t * to_hz + off) / from_hz);
   1d394:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1d398:	681b      	ldr	r3, [r3, #0]
   1d39a:	4631      	mov	r1, r6
   1d39c:	fbb5 f5f3 	udiv	r5, r5, r3
   1d3a0:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1d3a4:	35c8      	adds	r5, #200	; 0xc8
   1d3a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d3aa:	2300      	movs	r3, #0
   1d3ac:	fbe5 010c 	umlal	r0, r1, r5, ip
   1d3b0:	f7fb fcaa 	bl	18d08 <__aeabi_uldivmod>
   1d3b4:	4602      	mov	r2, r0
   1d3b6:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1d3b8:	4640      	mov	r0, r8
   1d3ba:	f006 fe61 	bl	24080 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1d3be:	b1e8      	cbz	r0, 1d3fc <spi_nrfx_transceive+0x2c0>
		LOG_ERR("Timeout waiting for transfer complete");
   1d3c0:	4b20      	ldr	r3, [pc, #128]	; (1d444 <spi_nrfx_transceive+0x308>)
   1d3c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d3c6:	627b      	str	r3, [r7, #36]	; 0x24
   1d3c8:	2302      	movs	r3, #2
   1d3ca:	480e      	ldr	r0, [pc, #56]	; (1d404 <spi_nrfx_transceive+0x2c8>)
   1d3cc:	623b      	str	r3, [r7, #32]
   1d3ce:	f107 0220 	add.w	r2, r7, #32
   1d3d2:	f009 faef 	bl	269b4 <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
   1d3d6:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1d3da:	e6e6      	b.n	1d1aa <spi_nrfx_transceive+0x6e>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1d3dc:	68bb      	ldr	r3, [r7, #8]
   1d3de:	681b      	ldr	r3, [r3, #0]
   1d3e0:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1d3e2:	2b00      	cmp	r3, #0
   1d3e4:	d0a6      	beq.n	1d334 <spi_nrfx_transceive+0x1f8>
   1d3e6:	68bb      	ldr	r3, [r7, #8]
   1d3e8:	685b      	ldr	r3, [r3, #4]
   1d3ea:	e7a4      	b.n	1d336 <spi_nrfx_transceive+0x1fa>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1d3ec:	f8da 3000 	ldr.w	r3, [sl]
   1d3f0:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1d3f2:	2b00      	cmp	r3, #0
   1d3f4:	d0ae      	beq.n	1d354 <spi_nrfx_transceive+0x218>
   1d3f6:	f8da 3004 	ldr.w	r3, [sl, #4]
   1d3fa:	e7ac      	b.n	1d356 <spi_nrfx_transceive+0x21a>
	status = ctx->sync_status;
   1d3fc:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1d3fe:	e6d4      	b.n	1d1aa <spi_nrfx_transceive+0x6e>
   1d400:	0002a3ab 	.word	0x0002a3ab
   1d404:	0002910c 	.word	0x0002910c
   1d408:	0002a3c5 	.word	0x0002a3c5
   1d40c:	01000003 	.word	0x01000003
   1d410:	0002a3e7 	.word	0x0002a3e7
   1d414:	0002a406 	.word	0x0002a406
   1d418:	0001e847 	.word	0x0001e847
   1d41c:	0002a435 	.word	0x0002a435
   1d420:	0003d08f 	.word	0x0003d08f
   1d424:	0007a11f 	.word	0x0007a11f
   1d428:	000f423f 	.word	0x000f423f
   1d42c:	001e847f 	.word	0x001e847f
   1d430:	003d08ff 	.word	0x003d08ff
   1d434:	007a1200 	.word	0x007a1200
   1d438:	0001d079 	.word	0x0001d079
   1d43c:	0bad0000 	.word	0x0bad0000
   1d440:	0002a466 	.word	0x0002a466
   1d444:	0002a48d 	.word	0x0002a48d

0001d448 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1d448:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1d44a:	794b      	ldrb	r3, [r1, #5]
   1d44c:	2b01      	cmp	r3, #1
   1d44e:	d026      	beq.n	1d49e <uarte_nrfx_configure+0x56>
   1d450:	2b03      	cmp	r3, #3
   1d452:	d121      	bne.n	1d498 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1d454:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1d456:	798b      	ldrb	r3, [r1, #6]
   1d458:	2b03      	cmp	r3, #3
   1d45a:	d11d      	bne.n	1d498 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1d45c:	79ce      	ldrb	r6, [r1, #7]
   1d45e:	b10e      	cbz	r6, 1d464 <uarte_nrfx_configure+0x1c>
   1d460:	2e01      	cmp	r6, #1
   1d462:	d119      	bne.n	1d498 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1d464:	790a      	ldrb	r2, [r1, #4]
   1d466:	b112      	cbz	r2, 1d46e <uarte_nrfx_configure+0x26>
   1d468:	2a02      	cmp	r2, #2
   1d46a:	d115      	bne.n	1d498 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1d46c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1d46e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1d470:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1d472:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1d476:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   1d478:	d067      	beq.n	1d54a <uarte_nrfx_configure+0x102>
   1d47a:	d82d      	bhi.n	1d4d8 <uarte_nrfx_configure+0x90>
   1d47c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1d480:	d066      	beq.n	1d550 <uarte_nrfx_configure+0x108>
   1d482:	d816      	bhi.n	1d4b2 <uarte_nrfx_configure+0x6a>
   1d484:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1d488:	d064      	beq.n	1d554 <uarte_nrfx_configure+0x10c>
   1d48a:	d80a      	bhi.n	1d4a2 <uarte_nrfx_configure+0x5a>
   1d48c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1d490:	d063      	beq.n	1d55a <uarte_nrfx_configure+0x112>
   1d492:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1d496:	d063      	beq.n	1d560 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   1d498:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d49c:	e054      	b.n	1d548 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1d49e:	2500      	movs	r5, #0
   1d4a0:	e7d9      	b.n	1d456 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1d4a2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1d4a6:	d05e      	beq.n	1d566 <uarte_nrfx_configure+0x11e>
   1d4a8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1d4ac:	d1f4      	bne.n	1d498 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1d4ae:	4b38      	ldr	r3, [pc, #224]	; (1d590 <uarte_nrfx_configure+0x148>)
   1d4b0:	e03c      	b.n	1d52c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d4b2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1d4b6:	d059      	beq.n	1d56c <uarte_nrfx_configure+0x124>
   1d4b8:	d807      	bhi.n	1d4ca <uarte_nrfx_configure+0x82>
   1d4ba:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1d4be:	d057      	beq.n	1d570 <uarte_nrfx_configure+0x128>
   1d4c0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1d4c4:	d1e8      	bne.n	1d498 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1d4c6:	4b33      	ldr	r3, [pc, #204]	; (1d594 <uarte_nrfx_configure+0x14c>)
   1d4c8:	e030      	b.n	1d52c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d4ca:	f647 2412 	movw	r4, #31250	; 0x7a12
   1d4ce:	42a3      	cmp	r3, r4
   1d4d0:	d1e2      	bne.n	1d498 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1d4d2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1d4d6:	e029      	b.n	1d52c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d4d8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1d4dc:	d04a      	beq.n	1d574 <uarte_nrfx_configure+0x12c>
   1d4de:	d813      	bhi.n	1d508 <uarte_nrfx_configure+0xc0>
   1d4e0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1d4e4:	d049      	beq.n	1d57a <uarte_nrfx_configure+0x132>
   1d4e6:	d809      	bhi.n	1d4fc <uarte_nrfx_configure+0xb4>
   1d4e8:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1d4ec:	42a3      	cmp	r3, r4
   1d4ee:	d046      	beq.n	1d57e <uarte_nrfx_configure+0x136>
   1d4f0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1d4f4:	d1d0      	bne.n	1d498 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1d4f6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1d4fa:	e017      	b.n	1d52c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d4fc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1d500:	d1ca      	bne.n	1d498 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1d502:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1d506:	e011      	b.n	1d52c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d508:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1d50c:	d03a      	beq.n	1d584 <uarte_nrfx_configure+0x13c>
   1d50e:	d808      	bhi.n	1d522 <uarte_nrfx_configure+0xda>
   1d510:	4c21      	ldr	r4, [pc, #132]	; (1d598 <uarte_nrfx_configure+0x150>)
   1d512:	42a3      	cmp	r3, r4
   1d514:	d039      	beq.n	1d58a <uarte_nrfx_configure+0x142>
   1d516:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1d51a:	d1bd      	bne.n	1d498 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1d51c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1d520:	e004      	b.n	1d52c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d522:	4c1e      	ldr	r4, [pc, #120]	; (1d59c <uarte_nrfx_configure+0x154>)
   1d524:	42a3      	cmp	r3, r4
   1d526:	d1b7      	bne.n	1d498 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1d528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1d52c:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1d52e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   1d532:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   1d534:	4335      	orrs	r5, r6
   1d536:	681b      	ldr	r3, [r3, #0]
   1d538:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1d53a:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1d53e:	1d23      	adds	r3, r4, #4
   1d540:	c903      	ldmia	r1, {r0, r1}
   1d542:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1d546:	2000      	movs	r0, #0
}
   1d548:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1d54a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1d54e:	e7ed      	b.n	1d52c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1d550:	4b13      	ldr	r3, [pc, #76]	; (1d5a0 <uarte_nrfx_configure+0x158>)
   1d552:	e7eb      	b.n	1d52c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1d554:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1d558:	e7e8      	b.n	1d52c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1d55a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1d55e:	e7e5      	b.n	1d52c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d560:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1d564:	e7e2      	b.n	1d52c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1d566:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1d56a:	e7df      	b.n	1d52c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1d56c:	4b0d      	ldr	r3, [pc, #52]	; (1d5a4 <uarte_nrfx_configure+0x15c>)
   1d56e:	e7dd      	b.n	1d52c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1d570:	4b0d      	ldr	r3, [pc, #52]	; (1d5a8 <uarte_nrfx_configure+0x160>)
   1d572:	e7db      	b.n	1d52c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1d574:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1d578:	e7d8      	b.n	1d52c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1d57a:	4b0c      	ldr	r3, [pc, #48]	; (1d5ac <uarte_nrfx_configure+0x164>)
   1d57c:	e7d6      	b.n	1d52c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1d57e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1d582:	e7d3      	b.n	1d52c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1d584:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d588:	e7d0      	b.n	1d52c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1d58a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d58e:	e7cd      	b.n	1d52c <uarte_nrfx_configure+0xe4>
   1d590:	0013b000 	.word	0x0013b000
   1d594:	004ea000 	.word	0x004ea000
   1d598:	0003d090 	.word	0x0003d090
   1d59c:	000f4240 	.word	0x000f4240
   1d5a0:	00275000 	.word	0x00275000
   1d5a4:	0075c000 	.word	0x0075c000
   1d5a8:	003af000 	.word	0x003af000
   1d5ac:	013a9000 	.word	0x013a9000

0001d5b0 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1d5b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d5b4:	4680      	mov	r8, r0
   1d5b6:	b087      	sub	sp, #28
   1d5b8:	2200      	movs	r2, #0
   1d5ba:	2101      	movs	r1, #1
   1d5bc:	2008      	movs	r0, #8
   1d5be:	f7fe f8cb 	bl	1b758 <z_arm_irq_priority_set>
   1d5c2:	2008      	movs	r0, #8
   1d5c4:	f7fe f898 	bl	1b6f8 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d5c8:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   1d5ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d5ce:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   1d5d2:	683c      	ldr	r4, [r7, #0]
	ret = pinctrl_lookup_state(config, id, &state);
   1d5d4:	466a      	mov	r2, sp
   1d5d6:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1d5da:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1d5de:	f8d7 900c 	ldr.w	r9, [r7, #12]
   1d5e2:	4648      	mov	r0, r9
   1d5e4:	f009 fad0 	bl	26b88 <pinctrl_lookup_state>
	if (ret < 0) {
   1d5e8:	1e05      	subs	r5, r0, #0
   1d5ea:	db25      	blt.n	1d638 <uarte_0_init+0x88>
	return pinctrl_apply_state_direct(config, state);
   1d5ec:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1d5ee:	f8d9 2000 	ldr.w	r2, [r9]
   1d5f2:	7919      	ldrb	r1, [r3, #4]
   1d5f4:	6818      	ldr	r0, [r3, #0]
   1d5f6:	f000 fac1 	bl	1db7c <pinctrl_configure_pins>
	if (err < 0) {
   1d5fa:	1e05      	subs	r5, r0, #0
   1d5fc:	db1c      	blt.n	1d638 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1d5fe:	4640      	mov	r0, r8
   1d600:	1d31      	adds	r1, r6, #4
   1d602:	f7ff ff21 	bl	1d448 <uarte_nrfx_configure>
	if (err) {
   1d606:	4605      	mov	r5, r0
   1d608:	b9b0      	cbnz	r0, 1d638 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1d60a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1d60c:	0799      	lsls	r1, r3, #30
   1d60e:	d524      	bpl.n	1d65a <uarte_0_init+0xaa>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1d610:	f106 0018 	add.w	r0, r6, #24
   1d614:	f003 faa0 	bl	20b58 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1d618:	4b24      	ldr	r3, [pc, #144]	; (1d6ac <uarte_0_init+0xfc>)
   1d61a:	4298      	cmp	r0, r3
   1d61c:	d010      	beq.n	1d640 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   1d61e:	4b24      	ldr	r3, [pc, #144]	; (1d6b0 <uarte_0_init+0x100>)
   1d620:	9305      	str	r3, [sp, #20]
   1d622:	2302      	movs	r3, #2
   1d624:	9304      	str	r3, [sp, #16]
   1d626:	462b      	mov	r3, r5
		return -EIO;
   1d628:	f06f 0504 	mvn.w	r5, #4
   1d62c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d630:	4820      	ldr	r0, [pc, #128]	; (1d6b4 <uarte_0_init+0x104>)
   1d632:	aa04      	add	r2, sp, #16
   1d634:	f7fd fb64 	bl	1ad00 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   1d638:	4628      	mov	r0, r5
   1d63a:	b007      	add	sp, #28
   1d63c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1d640:	7e33      	ldrb	r3, [r6, #24]
   1d642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d646:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1d64a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1d64e:	2301      	movs	r3, #1
   1d650:	7e32      	ldrb	r2, [r6, #24]
   1d652:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1d654:	4a18      	ldr	r2, [pc, #96]	; (1d6b8 <uarte_0_init+0x108>)
   1d656:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d65a:	2308      	movs	r3, #8
   1d65c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1d660:	7a3b      	ldrb	r3, [r7, #8]
   1d662:	b953      	cbnz	r3, 1d67a <uarte_0_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d664:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d668:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d66c:	6973      	ldr	r3, [r6, #20]
   1d66e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d672:	2301      	movs	r3, #1
   1d674:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d678:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1d67a:	687b      	ldr	r3, [r7, #4]
   1d67c:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1d67e:	bf5c      	itt	pl
   1d680:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1d684:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d688:	687b      	ldr	r3, [r7, #4]
   1d68a:	06db      	lsls	r3, r3, #27
   1d68c:	bf44      	itt	mi
   1d68e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1d692:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d696:	6933      	ldr	r3, [r6, #16]
   1d698:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d69c:	2300      	movs	r3, #0
   1d69e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d6a2:	2301      	movs	r3, #1
   1d6a4:	60a3      	str	r3, [r4, #8]
   1d6a6:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1d6a8:	e7c6      	b.n	1d638 <uarte_0_init+0x88>
   1d6aa:	bf00      	nop
   1d6ac:	0bad0000 	.word	0x0bad0000
   1d6b0:	0002a4ca 	.word	0x0002a4ca
   1d6b4:	00029114 	.word	0x00029114
   1d6b8:	40017000 	.word	0x40017000

0001d6bc <uarte_nrfx_poll_out>:
{
   1d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d6be:	4604      	mov	r4, r0
   1d6c0:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   1d6c2:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d6c4:	f00a fdb5 	bl	28232 <k_is_in_isr>
   1d6c8:	b9b0      	cbnz	r0, 1d6f8 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   1d6ca:	4b2e      	ldr	r3, [pc, #184]	; (1d784 <uarte_nrfx_poll_out+0xc8>)
   1d6cc:	781b      	ldrb	r3, [r3, #0]
   1d6ce:	b19b      	cbz	r3, 1d6f8 <uarte_nrfx_poll_out+0x3c>
{
   1d6d0:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1d6d2:	6860      	ldr	r0, [r4, #4]
   1d6d4:	f009 f9ec 	bl	26ab0 <is_tx_ready.isra.0>
   1d6d8:	bb00      	cbnz	r0, 1d71c <uarte_nrfx_poll_out+0x60>
   1d6da:	2001      	movs	r0, #1
   1d6dc:	f009 fe4a 	bl	27374 <nrfx_busy_wait>
   1d6e0:	3e01      	subs	r6, #1
   1d6e2:	d1f6      	bne.n	1d6d2 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   1d6e4:	2100      	movs	r1, #0
   1d6e6:	2021      	movs	r0, #33	; 0x21
   1d6e8:	f007 f8ee 	bl	248c8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d6ec:	e7f0      	b.n	1d6d0 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   1d6ee:	f386 8811 	msr	BASEPRI, r6
   1d6f2:	f3bf 8f6f 	isb	sy
}
   1d6f6:	e7f5      	b.n	1d6e4 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   1d6f8:	f04f 0320 	mov.w	r3, #32
   1d6fc:	f3ef 8611 	mrs	r6, BASEPRI
   1d700:	f383 8812 	msr	BASEPRI_MAX, r3
   1d704:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d708:	6860      	ldr	r0, [r4, #4]
   1d70a:	4631      	mov	r1, r6
   1d70c:	f009 f9d0 	bl	26ab0 <is_tx_ready.isra.0>
   1d710:	b990      	cbnz	r0, 1d738 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1d712:	f386 8811 	msr	BASEPRI, r6
   1d716:	f3bf 8f6f 	isb	sy
}
   1d71a:	e7ed      	b.n	1d6f8 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   1d71c:	f04f 0320 	mov.w	r3, #32
   1d720:	f3ef 8611 	mrs	r6, BASEPRI
   1d724:	f383 8812 	msr	BASEPRI_MAX, r3
   1d728:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d72c:	6860      	ldr	r0, [r4, #4]
   1d72e:	4631      	mov	r1, r6
   1d730:	f009 f9be 	bl	26ab0 <is_tx_ready.isra.0>
   1d734:	2800      	cmp	r0, #0
   1d736:	d0da      	beq.n	1d6ee <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   1d738:	693b      	ldr	r3, [r7, #16]
   1d73a:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   1d73c:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d73e:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   1d740:	6813      	ldr	r3, [r2, #0]
   1d742:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d746:	2001      	movs	r0, #1
   1d748:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d74c:	2000      	movs	r0, #0
   1d74e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1d752:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   1d756:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d75a:	6852      	ldr	r2, [r2, #4]
   1d75c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   1d760:	06d2      	lsls	r2, r2, #27
   1d762:	d508      	bpl.n	1d776 <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d764:	2008      	movs	r0, #8
	return config->uarte_regs;
   1d766:	6862      	ldr	r2, [r4, #4]
   1d768:	6812      	ldr	r2, [r2, #0]
   1d76a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1d76e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1d772:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d776:	2201      	movs	r2, #1
   1d778:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1d77a:	f381 8811 	msr	BASEPRI, r1
   1d77e:	f3bf 8f6f 	isb	sy
}
   1d782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d784:	2000de5b 	.word	0x2000de5b

0001d788 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1d788:	2301      	movs	r3, #1
   1d78a:	4083      	lsls	r3, r0
{
   1d78c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1d78e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d790:	4a0b      	ldr	r2, [pc, #44]	; (1d7c0 <compare_int_lock+0x38>)
   1d792:	e8d2 1fef 	ldaex	r1, [r2]
   1d796:	ea01 0504 	and.w	r5, r1, r4
   1d79a:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1d79e:	2e00      	cmp	r6, #0
   1d7a0:	d1f7      	bne.n	1d792 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d7a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1d7a6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1d7a8:	4806      	ldr	r0, [pc, #24]	; (1d7c4 <compare_int_lock+0x3c>)
   1d7aa:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1d7ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1d7b2:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1d7b6:	420b      	tst	r3, r1
}
   1d7b8:	bf14      	ite	ne
   1d7ba:	2001      	movne	r0, #1
   1d7bc:	2000      	moveq	r0, #0
   1d7be:	bd70      	pop	{r4, r5, r6, pc}
   1d7c0:	2000d22c 	.word	0x2000d22c
   1d7c4:	40015000 	.word	0x40015000

0001d7c8 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1d7c8:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1d7ca:	490e      	ldr	r1, [pc, #56]	; (1d804 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
   1d7cc:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1d7d0:	e9d1 3400 	ldrd	r3, r4, [r1]
   1d7d4:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1d7d6:	18c3      	adds	r3, r0, r3
   1d7d8:	f144 0400 	adc.w	r4, r4, #0
   1d7dc:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1d7e0:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1d7e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1d7e8:	d209      	bcs.n	1d7fe <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1d7ea:	4b07      	ldr	r3, [pc, #28]	; (1d808 <sys_clock_timeout_handler+0x40>)
   1d7ec:	681b      	ldr	r3, [r3, #0]
   1d7ee:	0a1a      	lsrs	r2, r3, #8
   1d7f0:	061b      	lsls	r3, r3, #24
   1d7f2:	199c      	adds	r4, r3, r6
   1d7f4:	4b05      	ldr	r3, [pc, #20]	; (1d80c <sys_clock_timeout_handler+0x44>)
   1d7f6:	f142 0500 	adc.w	r5, r2, #0
   1d7fa:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1d7fe:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1d800:	f007 b9da 	b.w	24bb8 <sys_clock_announce>
   1d804:	2000ceb0 	.word	0x2000ceb0
   1d808:	2000d230 	.word	0x2000d230
   1d80c:	2000ceb8 	.word	0x2000ceb8

0001d810 <compare_int_unlock>:
	if (key) {
   1d810:	b1d9      	cbz	r1, 1d84a <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1d812:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d814:	4a0d      	ldr	r2, [pc, #52]	; (1d84c <compare_int_unlock+0x3c>)
   1d816:	4083      	lsls	r3, r0
   1d818:	e8d2 cfef 	ldaex	ip, [r2]
   1d81c:	ea4c 0c03 	orr.w	ip, ip, r3
   1d820:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1d824:	2900      	cmp	r1, #0
   1d826:	d1f7      	bne.n	1d818 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1d82c:	4a08      	ldr	r2, [pc, #32]	; (1d850 <compare_int_unlock+0x40>)
   1d82e:	4083      	lsls	r3, r0
   1d830:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d834:	4b07      	ldr	r3, [pc, #28]	; (1d854 <compare_int_unlock+0x44>)
   1d836:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1d83a:	40c3      	lsrs	r3, r0
   1d83c:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d83e:	bf42      	ittt	mi
   1d840:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1d844:	4b04      	ldrmi	r3, [pc, #16]	; (1d858 <compare_int_unlock+0x48>)
   1d846:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1d84a:	4770      	bx	lr
   1d84c:	2000d22c 	.word	0x2000d22c
   1d850:	40015000 	.word	0x40015000
   1d854:	2000d228 	.word	0x2000d228
   1d858:	e000e100 	.word	0xe000e100

0001d85c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1d85c:	4b0d      	ldr	r3, [pc, #52]	; (1d894 <z_nrf_rtc_timer_read+0x38>)
   1d85e:	6818      	ldr	r0, [r3, #0]
   1d860:	0a01      	lsrs	r1, r0, #8
   1d862:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1d864:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1d868:	4b0b      	ldr	r3, [pc, #44]	; (1d898 <z_nrf_rtc_timer_read+0x3c>)
   1d86a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1d86e:	1818      	adds	r0, r3, r0
   1d870:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1d874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d878:	d20a      	bcs.n	1d890 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1d87a:	4b08      	ldr	r3, [pc, #32]	; (1d89c <z_nrf_rtc_timer_read+0x40>)
   1d87c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d880:	4290      	cmp	r0, r2
   1d882:	eb71 0303 	sbcs.w	r3, r1, r3
   1d886:	d203      	bcs.n	1d890 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1d888:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1d88c:	f141 0100 	adc.w	r1, r1, #0
}
   1d890:	4770      	bx	lr
   1d892:	bf00      	nop
   1d894:	2000d230 	.word	0x2000d230
   1d898:	40015000 	.word	0x40015000
   1d89c:	2000ceb8 	.word	0x2000ceb8

0001d8a0 <compare_set>:
{
   1d8a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8a4:	4616      	mov	r6, r2
   1d8a6:	461f      	mov	r7, r3
   1d8a8:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   1d8aa:	f7ff ff6d 	bl	1d788 <compare_int_lock>
   1d8ae:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1d8b0:	f7ff ffd4 	bl	1d85c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1d8b4:	42b0      	cmp	r0, r6
   1d8b6:	eb71 0307 	sbcs.w	r3, r1, r7
   1d8ba:	d250      	bcs.n	1d95e <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1d8bc:	4b38      	ldr	r3, [pc, #224]	; (1d9a0 <compare_set+0x100>)
   1d8be:	1a30      	subs	r0, r6, r0
   1d8c0:	eb67 0101 	sbc.w	r1, r7, r1
   1d8c4:	4298      	cmp	r0, r3
   1d8c6:	f171 0100 	sbcs.w	r1, r1, #0
   1d8ca:	d265      	bcs.n	1d998 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
   1d8cc:	4b35      	ldr	r3, [pc, #212]	; (1d9a4 <compare_set+0x104>)
   1d8ce:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1d8d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1d8d6:	429f      	cmp	r7, r3
   1d8d8:	bf08      	it	eq
   1d8da:	4296      	cmpeq	r6, r2
   1d8dc:	d049      	beq.n	1d972 <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d8de:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1d8e2:	4931      	ldr	r1, [pc, #196]	; (1d9a8 <compare_set+0x108>)
   1d8e4:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
   1d8e8:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
   1d8ea:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   1d8ee:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   1d8f2:	f009 f939 	bl	26b68 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1d8f6:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
   1d8fa:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1d8fc:	f104 0550 	add.w	r5, r4, #80	; 0x50
   1d900:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d902:	b2ad      	uxth	r5, r5
   1d904:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   1d908:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1d90c:	4a27      	ldr	r2, [pc, #156]	; (1d9ac <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d90e:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
   1d912:	9301      	str	r3, [sp, #4]
   1d914:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1d918:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   1d91c:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
   1d920:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   1d924:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d928:	eba0 0008 	sub.w	r0, r0, r8
   1d92c:	3803      	subs	r0, #3
   1d92e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1d932:	4290      	cmp	r0, r2
   1d934:	d91d      	bls.n	1d972 <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d936:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   1d938:	b160      	cbz	r0, 1d954 <compare_set+0xb4>
     return p_reg->COUNTER;
   1d93a:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d93e:	eba8 000b 	sub.w	r0, r8, fp
   1d942:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1d946:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d94a:	d912      	bls.n	1d972 <compare_set+0xd2>
					event_clear(chan);
   1d94c:	4620      	mov	r0, r4
   1d94e:	f009 f90b 	bl	26b68 <event_clear>
   1d952:	4a16      	ldr	r2, [pc, #88]	; (1d9ac <compare_set+0x10c>)
			cc_val = now + cc_inc;
   1d954:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
   1d958:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   1d95c:	e7da      	b.n	1d914 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1d95e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d960:	4a13      	ldr	r2, [pc, #76]	; (1d9b0 <compare_set+0x110>)
   1d962:	40a3      	lsls	r3, r4
   1d964:	e8d2 0fef 	ldaex	r0, [r2]
   1d968:	4318      	orrs	r0, r3
   1d96a:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1d96e:	2900      	cmp	r1, #0
   1d970:	d1f8      	bne.n	1d964 <compare_set+0xc4>
	return ret;
   1d972:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
   1d974:	490b      	ldr	r1, [pc, #44]	; (1d9a4 <compare_set+0x104>)
	cc_data[chan].callback = handler;
   1d976:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   1d978:	0123      	lsls	r3, r4, #4
   1d97a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
   1d97e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   1d980:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
   1d984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d986:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1d988:	4620      	mov	r0, r4
   1d98a:	9900      	ldr	r1, [sp, #0]
   1d98c:	f7ff ff40 	bl	1d810 <compare_int_unlock>
}
   1d990:	4628      	mov	r0, r5
   1d992:	b003      	add	sp, #12
   1d994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   1d998:	f06f 0515 	mvn.w	r5, #21
   1d99c:	e7f4      	b.n	1d988 <compare_set+0xe8>
   1d99e:	bf00      	nop
   1d9a0:	00800001 	.word	0x00800001
   1d9a4:	2000cea0 	.word	0x2000cea0
   1d9a8:	40015000 	.word	0x40015000
   1d9ac:	007ffffd 	.word	0x007ffffd
   1d9b0:	2000d228 	.word	0x2000d228

0001d9b4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1d9b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   1d9b6:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d9b8:	f04f 30ff 	mov.w	r0, #4294967295
   1d9bc:	f04f 31ff 	mov.w	r1, #4294967295
   1d9c0:	4d16      	ldr	r5, [pc, #88]	; (1da1c <sys_clock_driver_init+0x68>)
   1d9c2:	4b17      	ldr	r3, [pc, #92]	; (1da20 <sys_clock_driver_init+0x6c>)
   1d9c4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1d9c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1d9cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d9d0:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d9d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1d9d6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   1d9da:	4b12      	ldr	r3, [pc, #72]	; (1da24 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1d9dc:	2101      	movs	r1, #1
   1d9de:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1d9e2:	2015      	movs	r0, #21
   1d9e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1d9e8:	4622      	mov	r2, r4
   1d9ea:	f7fd feb5 	bl	1b758 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1d9ee:	2015      	movs	r0, #21
   1d9f0:	f7fd fe82 	bl	1b6f8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1d9f4:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1d9f6:	4a0c      	ldr	r2, [pc, #48]	; (1da28 <sys_clock_driver_init+0x74>)
   1d9f8:	60ab      	str	r3, [r5, #8]
   1d9fa:	602b      	str	r3, [r5, #0]
   1d9fc:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1d9fe:	4b0b      	ldr	r3, [pc, #44]	; (1da2c <sys_clock_driver_init+0x78>)
   1da00:	4a0b      	ldr	r2, [pc, #44]	; (1da30 <sys_clock_driver_init+0x7c>)
   1da02:	9300      	str	r3, [sp, #0]
   1da04:	4620      	mov	r0, r4
   1da06:	2300      	movs	r3, #0
   1da08:	9401      	str	r4, [sp, #4]
   1da0a:	f7ff ff49 	bl	1d8a0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1da0e:	4630      	mov	r0, r6
   1da10:	f7fe feca 	bl	1c7a8 <z_nrf_clock_control_lf_on>

	return 0;
}
   1da14:	4620      	mov	r0, r4
   1da16:	b002      	add	sp, #8
   1da18:	bd70      	pop	{r4, r5, r6, pc}
   1da1a:	bf00      	nop
   1da1c:	40015000 	.word	0x40015000
   1da20:	2000cea0 	.word	0x2000cea0
   1da24:	e000e100 	.word	0xe000e100
   1da28:	2000d22c 	.word	0x2000d22c
   1da2c:	0001d7c9 	.word	0x0001d7c9
   1da30:	007fffff 	.word	0x007fffff

0001da34 <rtc_nrf_isr>:
{
   1da34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1da38:	4b2e      	ldr	r3, [pc, #184]	; (1daf4 <rtc_nrf_isr+0xc0>)
   1da3a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1da3e:	0790      	lsls	r0, r2, #30
   1da40:	d50b      	bpl.n	1da5a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da42:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1da46:	b142      	cbz	r2, 1da5a <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1da48:	2200      	movs	r2, #0
   1da4a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1da4e:	4a2a      	ldr	r2, [pc, #168]	; (1daf8 <rtc_nrf_isr+0xc4>)
   1da50:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1da54:	6813      	ldr	r3, [r2, #0]
   1da56:	3301      	adds	r3, #1
   1da58:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1da5a:	4a26      	ldr	r2, [pc, #152]	; (1daf4 <rtc_nrf_isr+0xc0>)
   1da5c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1da60:	03d9      	lsls	r1, r3, #15
   1da62:	d527      	bpl.n	1dab4 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1da64:	4b25      	ldr	r3, [pc, #148]	; (1dafc <rtc_nrf_isr+0xc8>)
   1da66:	e8d3 1fef 	ldaex	r1, [r3]
   1da6a:	f021 0001 	bic.w	r0, r1, #1
   1da6e:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1da72:	2c00      	cmp	r4, #0
   1da74:	d1f7      	bne.n	1da66 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1da76:	07cb      	lsls	r3, r1, #31
   1da78:	d402      	bmi.n	1da80 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da7a:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   1da7e:	b1cb      	cbz	r3, 1dab4 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1da80:	2500      	movs	r5, #0
   1da82:	4c1c      	ldr	r4, [pc, #112]	; (1daf4 <rtc_nrf_isr+0xc0>)
   1da84:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1da88:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1da8c:	f7ff fee6 	bl	1d85c <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1da90:	f04f 0320 	mov.w	r3, #32
   1da94:	f3ef 8211 	mrs	r2, BASEPRI
   1da98:	f383 8812 	msr	BASEPRI_MAX, r3
   1da9c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1daa0:	4b17      	ldr	r3, [pc, #92]	; (1db00 <rtc_nrf_isr+0xcc>)
   1daa2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1daa6:	42b0      	cmp	r0, r6
   1daa8:	41b9      	sbcs	r1, r7
   1daaa:	d206      	bcs.n	1daba <rtc_nrf_isr+0x86>
	__asm__ volatile(
   1daac:	f382 8811 	msr	BASEPRI, r2
   1dab0:	f3bf 8f6f 	isb	sy
}
   1dab4:	b003      	add	sp, #12
   1dab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1daba:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
   1dabe:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1dac2:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   1dac6:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1dac8:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
   1dacc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1dad0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dad4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1dad8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1dadc:	f382 8811 	msr	BASEPRI, r2
   1dae0:	f3bf 8f6f 	isb	sy
		if (handler) {
   1dae4:	2900      	cmp	r1, #0
   1dae6:	d0e5      	beq.n	1dab4 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
   1dae8:	9000      	str	r0, [sp, #0]
   1daea:	4632      	mov	r2, r6
   1daec:	463b      	mov	r3, r7
   1daee:	4628      	mov	r0, r5
   1daf0:	4788      	blx	r1
   1daf2:	e7df      	b.n	1dab4 <rtc_nrf_isr+0x80>
   1daf4:	40015000 	.word	0x40015000
   1daf8:	2000d230 	.word	0x2000d230
   1dafc:	2000d228 	.word	0x2000d228
   1db00:	2000cea0 	.word	0x2000cea0

0001db04 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1db04:	1c43      	adds	r3, r0, #1
{
   1db06:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1db08:	d021      	beq.n	1db4e <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1db0a:	2801      	cmp	r0, #1
   1db0c:	dd21      	ble.n	1db52 <sys_clock_set_timeout+0x4e>
   1db0e:	4a12      	ldr	r2, [pc, #72]	; (1db58 <sys_clock_set_timeout+0x54>)
   1db10:	4b12      	ldr	r3, [pc, #72]	; (1db5c <sys_clock_set_timeout+0x58>)
   1db12:	4290      	cmp	r0, r2
   1db14:	bfd4      	ite	le
   1db16:	4604      	movle	r4, r0
   1db18:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1db1a:	f7ff fe9f 	bl	1d85c <z_nrf_rtc_timer_read>
   1db1e:	4b10      	ldr	r3, [pc, #64]	; (1db60 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   1db20:	490e      	ldr	r1, [pc, #56]	; (1db5c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1db22:	e9d3 2300 	ldrd	r2, r3, [r3]
   1db26:	1a80      	subs	r0, r0, r2
		cyc = 0;
   1db28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1db2c:	bf28      	it	cs
   1db2e:	2400      	movcs	r4, #0
	cyc += unannounced;
   1db30:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1db32:	428c      	cmp	r4, r1
   1db34:	bf28      	it	cs
   1db36:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   1db38:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1db3a:	490a      	ldr	r1, [pc, #40]	; (1db64 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
   1db3c:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1db3e:	9001      	str	r0, [sp, #4]
   1db40:	9100      	str	r1, [sp, #0]
   1db42:	f143 0300 	adc.w	r3, r3, #0
   1db46:	f7ff feab 	bl	1d8a0 <compare_set>
}
   1db4a:	b002      	add	sp, #8
   1db4c:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   1db4e:	4c03      	ldr	r4, [pc, #12]	; (1db5c <sys_clock_set_timeout+0x58>)
   1db50:	e7e3      	b.n	1db1a <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1db52:	2401      	movs	r4, #1
   1db54:	e7e1      	b.n	1db1a <sys_clock_set_timeout+0x16>
   1db56:	bf00      	nop
   1db58:	007ffffe 	.word	0x007ffffe
   1db5c:	007fffff 	.word	0x007fffff
   1db60:	2000ceb0 	.word	0x2000ceb0
   1db64:	0001d7c9 	.word	0x0001d7c9

0001db68 <sys_clock_elapsed>:
{
   1db68:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1db6a:	f7ff fe77 	bl	1d85c <z_nrf_rtc_timer_read>
   1db6e:	4b02      	ldr	r3, [pc, #8]	; (1db78 <sys_clock_elapsed+0x10>)
   1db70:	681b      	ldr	r3, [r3, #0]
}
   1db72:	1ac0      	subs	r0, r0, r3
   1db74:	bd08      	pop	{r3, pc}
   1db76:	bf00      	nop
   1db78:	2000ceb0 	.word	0x2000ceb0

0001db7c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1db7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1db80:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
   1db82:	4e3f      	ldr	r6, [pc, #252]	; (1dc80 <pinctrl_configure_pins+0x104>)
   1db84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1db88:	4281      	cmp	r1, r0
   1db8a:	d102      	bne.n	1db92 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1db8c:	2000      	movs	r0, #0
}
   1db8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1db92:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1db94:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1db98:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
   1db9c:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1db9e:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   1dba2:	bf08      	it	eq
   1dba4:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1dba8:	2d19      	cmp	r5, #25
   1dbaa:	d866      	bhi.n	1dc7a <pinctrl_configure_pins+0xfe>
   1dbac:	e8df f005 	tbb	[pc, r5]
   1dbb0:	1e1b160d 	.word	0x1e1b160d
   1dbb4:	651e2d21 	.word	0x651e2d21
   1dbb8:	31656565 	.word	0x31656565
   1dbbc:	65656551 	.word	0x65656551
   1dbc0:	65656565 	.word	0x65656565
   1dbc4:	5c546565 	.word	0x5c546565
   1dbc8:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
   1dbca:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   1dbce:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1dbd2:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
   1dbd6:	60b5      	str	r5, [r6, #8]
}
   1dbd8:	2501      	movs	r5, #1
   1dbda:	e002      	b.n	1dbe2 <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
   1dbdc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1dbe0:	2500      	movs	r5, #0
   1dbe2:	46ac      	mov	ip, r5
   1dbe4:	e01c      	b.n	1dc20 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
   1dbe6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   1dbea:	e7f0      	b.n	1dbce <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
   1dbec:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   1dbf0:	e7f6      	b.n	1dbe0 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1dbf2:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1dbf4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   1dbf8:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1dbfc:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   1dc00:	f8c6 c00c 	str.w	ip, [r6, #12]
}
   1dc04:	f04f 0c01 	mov.w	ip, #1
   1dc08:	e00a      	b.n	1dc20 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1dc0a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   1dc0e:	2501      	movs	r5, #1
   1dc10:	e7f2      	b.n	1dbf8 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1dc12:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1dc16:	2c00      	cmp	r4, #0
   1dc18:	d1e2      	bne.n	1dbe0 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1dc1a:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
   1dc1c:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1dc1e:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1dc20:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1dc24:	0224      	lsls	r4, r4, #8
   1dc26:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1dc2a:	f1b8 0f00 	cmp.w	r8, #0
   1dc2e:	bf1c      	itt	ne
   1dc30:	f04f 0c00 	movne.w	ip, #0
   1dc34:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1dc36:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
   1dc3a:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
   1dc3e:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1dc42:	ea44 040c 	orr.w	r4, r4, ip
   1dc46:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1dc4a:	3380      	adds	r3, #128	; 0x80
   1dc4c:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1dc50:	e79a      	b.n	1db88 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1dc52:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1dc56:	e7de      	b.n	1dc16 <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1dc58:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1dc5c:	6805      	ldr	r5, [r0, #0]
   1dc5e:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
   1dc62:	2d00      	cmp	r5, #0
   1dc64:	d0d3      	beq.n	1dc0e <pinctrl_configure_pins+0x92>
   1dc66:	e7b2      	b.n	1dbce <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1dc68:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1dc6c:	e7f6      	b.n	1dc5c <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1dc6e:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1dc72:	e7f3      	b.n	1dc5c <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1dc74:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   1dc78:	e7f0      	b.n	1dc5c <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
   1dc7a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1dc7e:	e786      	b.n	1db8e <pinctrl_configure_pins+0x12>
   1dc80:	40842500 	.word	0x40842500

0001dc84 <_nrf_modem_lib_init>:
			nrf_modem_at_err(err), nrf_modem_at_err_type(err));
	}
}

static int _nrf_modem_lib_init(const struct device *unused)
{
   1dc84:	b570      	push	{r4, r5, r6, lr}
	int err;
	(void) err;

	if (!first_time_init) {
   1dc86:	4d1a      	ldr	r5, [pc, #104]	; (1dcf0 <_nrf_modem_lib_init+0x6c>)
   1dc88:	4c1a      	ldr	r4, [pc, #104]	; (1dcf4 <_nrf_modem_lib_init+0x70>)
   1dc8a:	782b      	ldrb	r3, [r5, #0]
   1dc8c:	b933      	cbnz	r3, 1dc9c <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   1dc8e:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   1dc92:	4819      	ldr	r0, [pc, #100]	; (1dcf8 <_nrf_modem_lib_init+0x74>)
   1dc94:	f00a fae9 	bl	2826a <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   1dc98:	2301      	movs	r3, #1
   1dc9a:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
   1dc9c:	2200      	movs	r2, #0
   1dc9e:	2101      	movs	r1, #1
   1dca0:	202a      	movs	r0, #42	; 0x2a
   1dca2:	f7fd fd59 	bl	1b758 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params);
   1dca6:	4815      	ldr	r0, [pc, #84]	; (1dcfc <_nrf_modem_lib_init+0x78>)
   1dca8:	f005 fd4a 	bl	23740 <nrf_modem_init>
   1dcac:	4d14      	ldr	r5, [pc, #80]	; (1dd00 <_nrf_modem_lib_init+0x7c>)
   1dcae:	6028      	str	r0, [r5, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1dcb0:	f04f 32ff 	mov.w	r2, #4294967295
   1dcb4:	f04f 33ff 	mov.w	r3, #4294967295
   1dcb8:	480f      	ldr	r0, [pc, #60]	; (1dcf8 <_nrf_modem_lib_init+0x74>)
   1dcba:	f006 f8d1 	bl	23e60 <z_impl_k_mutex_lock>
	return list->head;
   1dcbe:	6820      	ldr	r0, [r4, #0]
	if (IS_ENABLED(CONFIG_NRF_MODEM_LIB_LOG_FW_VERSION_UUID)) {
		log_fw_version_uuid();
	}

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   1dcc0:	b120      	cbz	r0, 1dccc <_nrf_modem_lib_init+0x48>
	return node->next;
   1dcc2:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   1dcc4:	3004      	adds	r0, #4
   1dcc6:	f006 f9b5 	bl	24034 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   1dcca:	b944      	cbnz	r4, 1dcde <_nrf_modem_lib_init+0x5a>
	return z_impl_k_mutex_unlock(mutex);
   1dccc:	480a      	ldr	r0, [pc, #40]	; (1dcf8 <_nrf_modem_lib_init+0x74>)
   1dcce:	f006 f941 	bl	23f54 <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&slist_mutex);

	LOG_DBG("Modem library has initialized, ret %d", init_ret);
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   1dcd2:	4c0c      	ldr	r4, [pc, #48]	; (1dd04 <_nrf_modem_lib_init+0x80>)
   1dcd4:	4e0c      	ldr	r6, [pc, #48]	; (1dd08 <_nrf_modem_lib_init+0x84>)
   1dcd6:	42b4      	cmp	r4, r6
   1dcd8:	d304      	bcc.n	1dce4 <_nrf_modem_lib_init+0x60>
		 */
		return 0;
	}

	return init_ret;
}
   1dcda:	2000      	movs	r0, #0
   1dcdc:	bd70      	pop	{r4, r5, r6, pc}
   1dcde:	4620      	mov	r0, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   1dce0:	6824      	ldr	r4, [r4, #0]
   1dce2:	e7ef      	b.n	1dcc4 <_nrf_modem_lib_init+0x40>
		e->callback(init_ret, e->context);
   1dce4:	e9d4 3100 	ldrd	r3, r1, [r4]
   1dce8:	6828      	ldr	r0, [r5, #0]
   1dcea:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   1dcec:	3408      	adds	r4, #8
   1dcee:	e7f2      	b.n	1dcd6 <_nrf_modem_lib_init+0x52>
   1dcf0:	2000d922 	.word	0x2000d922
   1dcf4:	2000d24c 	.word	0x2000d24c
   1dcf8:	2000d238 	.word	0x2000d238
   1dcfc:	00029384 	.word	0x00029384
   1dd00:	2000d234 	.word	0x2000d234
   1dd04:	0002b7ec 	.word	0x0002b7ec
   1dd08:	0002b7fc 	.word	0x0002b7fc

0001dd0c <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   1dd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1dd0e:	4b0f      	ldr	r3, [pc, #60]	; (1dd4c <thread_monitor_entry_get+0x40>)
{
   1dd10:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   1dd12:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1dd14:	4b0e      	ldr	r3, [pc, #56]	; (1dd50 <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1dd16:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
   1dd18:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1dd1a:	4618      	mov	r0, r3
   1dd1c:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1dd1e:	42b8      	cmp	r0, r7
   1dd20:	d301      	bcc.n	1dd26 <thread_monitor_entry_get+0x1a>
   1dd22:	3d01      	subs	r5, #1
   1dd24:	d104      	bne.n	1dd30 <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   1dd26:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   1dd28:	3a01      	subs	r2, #1
	new_entry->id = id;
   1dd2a:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1dd2c:	605a      	str	r2, [r3, #4]
}
   1dd2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
   1dd30:	6804      	ldr	r4, [r0, #0]
   1dd32:	428c      	cmp	r4, r1
   1dd34:	d0fb      	beq.n	1dd2e <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
   1dd36:	b13c      	cbz	r4, 1dd48 <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
   1dd38:	6844      	ldr	r4, [r0, #4]
   1dd3a:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   1dd3c:	42a6      	cmp	r6, r4
   1dd3e:	bfbc      	itt	lt
   1dd40:	4603      	movlt	r3, r0
   1dd42:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1dd44:	3008      	adds	r0, #8
   1dd46:	e7ea      	b.n	1dd1e <thread_monitor_entry_get+0x12>
   1dd48:	4603      	mov	r3, r0
   1dd4a:	e7ec      	b.n	1dd26 <thread_monitor_entry_get+0x1a>
   1dd4c:	2000d2fc 	.word	0x2000d2fc
   1dd50:	2000d308 	.word	0x2000d308

0001dd54 <on_init>:
	list->head = NULL;
   1dd54:	2000      	movs	r0, #0
   1dd56:	4b05      	ldr	r3, [pc, #20]	; (1dd6c <on_init+0x18>)
	list->tail = NULL;
   1dd58:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1dd5c:	4b04      	ldr	r3, [pc, #16]	; (1dd70 <on_init+0x1c>)
   1dd5e:	e8d3 2fef 	ldaex	r2, [r3]
   1dd62:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1dd66:	2900      	cmp	r1, #0
   1dd68:	d1f9      	bne.n	1dd5e <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   1dd6a:	4770      	bx	lr
   1dd6c:	2000d300 	.word	0x2000d300
   1dd70:	2000d2fc 	.word	0x2000d2fc

0001dd74 <nrf_modem_os_timedwait>:
{
   1dd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dd78:	b088      	sub	sp, #32
   1dd7a:	4605      	mov	r5, r0
   1dd7c:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
   1dd7e:	f00a f9ca 	bl	28116 <nrf_modem_is_initialized>
   1dd82:	b920      	cbnz	r0, 1dd8e <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
   1dd84:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   1dd88:	b008      	add	sp, #32
   1dd8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   1dd8e:	f00a fc89 	bl	286a4 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1dd92:	6833      	ldr	r3, [r6, #0]
   1dd94:	4604      	mov	r4, r0
   1dd96:	2b00      	cmp	r3, #0
   1dd98:	460f      	mov	r7, r1
   1dd9a:	d104      	bne.n	1dda6 <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
   1dd9c:	f006 fd12 	bl	247c4 <z_impl_k_yield>
		return -NRF_EAGAIN;
   1dda0:	f06f 000a 	mvn.w	r0, #10
   1dda4:	e7f0      	b.n	1dd88 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
   1dda6:	bfbc      	itt	lt
   1dda8:	f04f 33ff 	movlt.w	r3, #4294967295
   1ddac:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ddae:	2201      	movs	r2, #1
   1ddb0:	2100      	movs	r1, #0
   1ddb2:	a801      	add	r0, sp, #4
   1ddb4:	f00a fadd 	bl	28372 <z_impl_k_sem_init>
   1ddb8:	46e8      	mov	r8, sp
	thread->context = context;
   1ddba:	9507      	str	r5, [sp, #28]
	__asm__ volatile(
   1ddbc:	f04f 0320 	mov.w	r3, #32
   1ddc0:	f3ef 8a11 	mrs	sl, BASEPRI
   1ddc4:	f383 8812 	msr	BASEPRI_MAX, r3
   1ddc8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1ddcc:	f006 fd96 	bl	248fc <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1ddd0:	f7ff ff9c 	bl	1dd0c <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1ddd4:	f8df 9118 	ldr.w	r9, [pc, #280]	; 1def0 <nrf_modem_os_timedwait+0x17c>
   1ddd8:	6842      	ldr	r2, [r0, #4]
   1ddda:	f8d9 3000 	ldr.w	r3, [r9]
   1ddde:	429a      	cmp	r2, r3
   1dde0:	d16d      	bne.n	1debe <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
   1dde2:	2300      	movs	r3, #0
	return list->tail;
   1dde4:	4d43      	ldr	r5, [pc, #268]	; (1def4 <nrf_modem_os_timedwait+0x180>)
	parent->next = child;
   1dde6:	9300      	str	r3, [sp, #0]
	return list->tail;
   1dde8:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1ddea:	2b00      	cmp	r3, #0
   1ddec:	d16e      	bne.n	1decc <nrf_modem_os_timedwait+0x158>
	list->head = node;
   1ddee:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
   1ddf2:	f38a 8811 	msr	BASEPRI, sl
   1ddf6:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1ddfa:	6833      	ldr	r3, [r6, #0]
   1ddfc:	1c5a      	adds	r2, r3, #1
   1ddfe:	d06a      	beq.n	1ded6 <nrf_modem_os_timedwait+0x162>
   1de00:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1de04:	f240 30e7 	movw	r0, #999	; 0x3e7
   1de08:	2100      	movs	r1, #0
   1de0a:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   1de0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1de12:	2300      	movs	r3, #0
   1de14:	fbcc 010e 	smlal	r0, r1, ip, lr
   1de18:	f7fa ff76 	bl	18d08 <__aeabi_uldivmod>
   1de1c:	4602      	mov	r2, r0
   1de1e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1de20:	a801      	add	r0, sp, #4
   1de22:	f006 f92d 	bl	24080 <z_impl_k_sem_take>
	__asm__ volatile(
   1de26:	f04f 0320 	mov.w	r3, #32
   1de2a:	f3ef 8a11 	mrs	sl, BASEPRI
   1de2e:	f383 8812 	msr	BASEPRI_MAX, r3
   1de32:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1de36:	2200      	movs	r2, #0
	return list->head;
   1de38:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1de3a:	b15b      	cbz	r3, 1de54 <nrf_modem_os_timedwait+0xe0>
   1de3c:	4543      	cmp	r3, r8
   1de3e:	d154      	bne.n	1deea <nrf_modem_os_timedwait+0x176>
	return node->next;
   1de40:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
   1de42:	2a00      	cmp	r2, #0
   1de44:	d14b      	bne.n	1dede <nrf_modem_os_timedwait+0x16a>
   1de46:	686a      	ldr	r2, [r5, #4]
	list->head = node;
   1de48:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1de4a:	429a      	cmp	r2, r3
   1de4c:	d100      	bne.n	1de50 <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
   1de4e:	6069      	str	r1, [r5, #4]
	parent->next = child;
   1de50:	2300      	movs	r3, #0
   1de52:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
   1de54:	f006 fd52 	bl	248fc <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1de58:	f7ff ff58 	bl	1dd0c <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1de5c:	f8d9 3000 	ldr.w	r3, [r9]
   1de60:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1de62:	f38a 8811 	msr	BASEPRI, sl
   1de66:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   1de6a:	f00a f954 	bl	28116 <nrf_modem_is_initialized>
   1de6e:	2800      	cmp	r0, #0
   1de70:	d088      	beq.n	1dd84 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
   1de72:	6835      	ldr	r5, [r6, #0]
   1de74:	1c6b      	adds	r3, r5, #1
   1de76:	d027      	beq.n	1dec8 <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
   1de78:	f00a fc14 	bl	286a4 <z_impl_k_uptime_ticks>
   1de7c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   1de80:	fba0 320e 	umull	r3, r2, r0, lr
   1de84:	fb0e 2101 	mla	r1, lr, r1, r2
   1de88:	fba4 420e 	umull	r4, r2, r4, lr
   1de8c:	fb0e 2207 	mla	r2, lr, r7, r2
   1de90:	0bdb      	lsrs	r3, r3, #15
   1de92:	0be4      	lsrs	r4, r4, #15
   1de94:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1de98:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
   1de9c:	1b1b      	subs	r3, r3, r4
   1de9e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   1dea2:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   1dea6:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
   1deaa:	1aed      	subs	r5, r5, r3
   1deac:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   1deb0:	f1bc 0f00 	cmp.w	ip, #0
   1deb4:	bfb8      	it	lt
   1deb6:	2500      	movlt	r5, #0
   1deb8:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
   1deba:	b92d      	cbnz	r5, 1dec8 <nrf_modem_os_timedwait+0x154>
   1debc:	e770      	b.n	1dda0 <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
   1debe:	6043      	str	r3, [r0, #4]
   1dec0:	f38a 8811 	msr	BASEPRI, sl
   1dec4:	f3bf 8f6f 	isb	sy
		return 0;
   1dec8:	2000      	movs	r0, #0
   1deca:	e75d      	b.n	1dd88 <nrf_modem_os_timedwait+0x14>
   1decc:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   1ded0:	f8c5 8004 	str.w	r8, [r5, #4]
   1ded4:	e78d      	b.n	1ddf2 <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1ded6:	f04f 32ff 	mov.w	r2, #4294967295
   1deda:	4613      	mov	r3, r2
   1dedc:	e7a0      	b.n	1de20 <nrf_modem_os_timedwait+0xac>
	parent->next = child;
   1dede:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dee0:	6869      	ldr	r1, [r5, #4]
   1dee2:	4299      	cmp	r1, r3
	list->tail = node;
   1dee4:	bf08      	it	eq
   1dee6:	606a      	streq	r2, [r5, #4]
}
   1dee8:	e7b2      	b.n	1de50 <nrf_modem_os_timedwait+0xdc>
	return node->next;
   1deea:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1deec:	681b      	ldr	r3, [r3, #0]
   1deee:	e7a4      	b.n	1de3a <nrf_modem_os_timedwait+0xc6>
   1def0:	2000d2fc 	.word	0x2000d2fc
   1def4:	2000d300 	.word	0x2000d300

0001def8 <nrf_modem_os_sem_init>:
{
   1def8:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   1defa:	6804      	ldr	r4, [r0, #0]
   1defc:	4b0a      	ldr	r3, [pc, #40]	; (1df28 <nrf_modem_os_sem_init+0x30>)
   1defe:	b12c      	cbz	r4, 1df0c <nrf_modem_os_sem_init+0x14>
   1df00:	429c      	cmp	r4, r3
   1df02:	d303      	bcc.n	1df0c <nrf_modem_os_sem_init+0x14>
   1df04:	f103 05a8 	add.w	r5, r3, #168	; 0xa8
   1df08:	42ac      	cmp	r4, r5
   1df0a:	d308      	bcc.n	1df1e <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
   1df0c:	4d07      	ldr	r5, [pc, #28]	; (1df2c <nrf_modem_os_sem_init+0x34>)
   1df0e:	782c      	ldrb	r4, [r5, #0]
   1df10:	1c66      	adds	r6, r4, #1
   1df12:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1df16:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1df1a:	702e      	strb	r6, [r5, #0]
   1df1c:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   1df1e:	6800      	ldr	r0, [r0, #0]
}
   1df20:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1df22:	f00a ba26 	b.w	28372 <z_impl_k_sem_init>
   1df26:	bf00      	nop
   1df28:	2000d254 	.word	0x2000d254
   1df2c:	2000d923 	.word	0x2000d923

0001df30 <nrf_modem_os_event_notify>:
{
   1df30:	b538      	push	{r3, r4, r5, lr}
   1df32:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1df34:	4b0a      	ldr	r3, [pc, #40]	; (1df60 <nrf_modem_os_event_notify+0x30>)
   1df36:	e8d3 1fef 	ldaex	r1, [r3]
   1df3a:	3101      	adds	r1, #1
   1df3c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1df40:	2a00      	cmp	r2, #0
   1df42:	d1f8      	bne.n	1df36 <nrf_modem_os_event_notify+0x6>
	return list->head;
   1df44:	4b07      	ldr	r3, [pc, #28]	; (1df64 <nrf_modem_os_event_notify+0x34>)
   1df46:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1df48:	b904      	cbnz	r4, 1df4c <nrf_modem_os_event_notify+0x1c>
}
   1df4a:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
   1df4c:	69e3      	ldr	r3, [r4, #28]
   1df4e:	42ab      	cmp	r3, r5
   1df50:	d000      	beq.n	1df54 <nrf_modem_os_event_notify+0x24>
   1df52:	b915      	cbnz	r5, 1df5a <nrf_modem_os_event_notify+0x2a>
	z_impl_k_sem_give(sem);
   1df54:	1d20      	adds	r0, r4, #4
   1df56:	f006 f86d 	bl	24034 <z_impl_k_sem_give>
	return node->next;
   1df5a:	6824      	ldr	r4, [r4, #0]
   1df5c:	e7f4      	b.n	1df48 <nrf_modem_os_event_notify+0x18>
   1df5e:	bf00      	nop
   1df60:	2000d2fc 	.word	0x2000d2fc
   1df64:	2000d300 	.word	0x2000d300

0001df68 <nrf_modem_os_alloc>:
{
   1df68:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
   1df6a:	2200      	movs	r2, #0
   1df6c:	2300      	movs	r3, #0
   1df6e:	4801      	ldr	r0, [pc, #4]	; (1df74 <nrf_modem_os_alloc+0xc>)
   1df70:	f00a b938 	b.w	281e4 <k_heap_alloc>
   1df74:	2000d358 	.word	0x2000d358

0001df78 <nrf_modem_os_free>:
{
   1df78:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
   1df7a:	4801      	ldr	r0, [pc, #4]	; (1df80 <nrf_modem_os_free+0x8>)
   1df7c:	f00a b93c 	b.w	281f8 <k_heap_free>
   1df80:	2000d358 	.word	0x2000d358

0001df84 <nrf_modem_os_shm_tx_alloc>:
{
   1df84:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
   1df86:	2200      	movs	r2, #0
   1df88:	2300      	movs	r3, #0
   1df8a:	4801      	ldr	r0, [pc, #4]	; (1df90 <nrf_modem_os_shm_tx_alloc+0xc>)
   1df8c:	f00a b92a 	b.w	281e4 <k_heap_alloc>
   1df90:	2000d36c 	.word	0x2000d36c

0001df94 <nrf_modem_os_shm_tx_free>:
{
   1df94:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
   1df96:	4801      	ldr	r0, [pc, #4]	; (1df9c <nrf_modem_os_shm_tx_free+0x8>)
   1df98:	f00a b92e 	b.w	281f8 <k_heap_free>
   1df9c:	2000d36c 	.word	0x2000d36c

0001dfa0 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   1dfa0:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
   1dfa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1dfa6:	4906      	ldr	r1, [pc, #24]	; (1dfc0 <nrf_modem_os_init+0x20>)
   1dfa8:	4806      	ldr	r0, [pc, #24]	; (1dfc4 <nrf_modem_os_init+0x24>)
   1dfaa:	f00a f8c6 	bl	2813a <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
   1dfae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
   1dfb2:	f44f 5202 	mov.w	r2, #8320	; 0x2080
   1dfb6:	4904      	ldr	r1, [pc, #16]	; (1dfc8 <nrf_modem_os_init+0x28>)
   1dfb8:	4804      	ldr	r0, [pc, #16]	; (1dfcc <nrf_modem_os_init+0x2c>)
   1dfba:	f00a b8be 	b.w	2813a <k_heap_init>
   1dfbe:	bf00      	nop
   1dfc0:	2000d924 	.word	0x2000d924
   1dfc4:	2000d358 	.word	0x2000d358
   1dfc8:	200084e8 	.word	0x200084e8
   1dfcc:	2000d36c 	.word	0x2000d36c

0001dfd0 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1dfd0:	2801      	cmp	r0, #1
   1dfd2:	d00e      	beq.n	1dff2 <z_to_nrf_optname+0x22>
   1dfd4:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1dfd8:	d113      	bne.n	1e002 <z_to_nrf_optname+0x32>
	case SOL_TLS:
		switch (z_in_optname) {
   1dfda:	1e4b      	subs	r3, r1, #1
   1dfdc:	2b0d      	cmp	r3, #13
   1dfde:	d810      	bhi.n	1e002 <z_to_nrf_optname+0x32>
   1dfe0:	e8df f003 	tbb	[pc, r3]
   1dfe4:	0f626262 	.word	0x0f626262
   1dfe8:	0f0f6262 	.word	0x0f0f6262
   1dfec:	620f0f0f 	.word	0x620f0f0f
   1dff0:	6262      	.short	0x6262
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   1dff2:	2937      	cmp	r1, #55	; 0x37
   1dff4:	dc05      	bgt.n	1e002 <z_to_nrf_optname+0x32>
   1dff6:	2913      	cmp	r1, #19
   1dff8:	dc06      	bgt.n	1e008 <z_to_nrf_optname+0x38>
   1dffa:	2902      	cmp	r1, #2
   1dffc:	d054      	beq.n	1e0a8 <z_to_nrf_optname+0xd8>
   1dffe:	2904      	cmp	r1, #4
   1e000:	d052      	beq.n	1e0a8 <z_to_nrf_optname+0xd8>
   1e002:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   1e006:	4770      	bx	lr
   1e008:	f1a1 0314 	sub.w	r3, r1, #20
   1e00c:	2b23      	cmp	r3, #35	; 0x23
   1e00e:	d8f8      	bhi.n	1e002 <z_to_nrf_optname+0x32>
   1e010:	a001      	add	r0, pc, #4	; (adr r0, 1e018 <z_to_nrf_optname+0x48>)
   1e012:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1e016:	bf00      	nop
   1e018:	0001e0a9 	.word	0x0001e0a9
   1e01c:	0001e0a9 	.word	0x0001e0a9
   1e020:	0001e003 	.word	0x0001e003
   1e024:	0001e003 	.word	0x0001e003
   1e028:	0001e003 	.word	0x0001e003
   1e02c:	0001e0a9 	.word	0x0001e0a9
   1e030:	0001e003 	.word	0x0001e003
   1e034:	0001e003 	.word	0x0001e003
   1e038:	0001e003 	.word	0x0001e003
   1e03c:	0001e003 	.word	0x0001e003
   1e040:	0001e0a9 	.word	0x0001e0a9
   1e044:	0001e0a9 	.word	0x0001e0a9
   1e048:	0001e0a9 	.word	0x0001e0a9
   1e04c:	0001e003 	.word	0x0001e003
   1e050:	0001e003 	.word	0x0001e003
   1e054:	0001e003 	.word	0x0001e003
   1e058:	0001e003 	.word	0x0001e003
   1e05c:	0001e003 	.word	0x0001e003
   1e060:	0001e003 	.word	0x0001e003
   1e064:	0001e003 	.word	0x0001e003
   1e068:	0001e003 	.word	0x0001e003
   1e06c:	0001e003 	.word	0x0001e003
   1e070:	0001e003 	.word	0x0001e003
   1e074:	0001e003 	.word	0x0001e003
   1e078:	0001e003 	.word	0x0001e003
   1e07c:	0001e003 	.word	0x0001e003
   1e080:	0001e003 	.word	0x0001e003
   1e084:	0001e003 	.word	0x0001e003
   1e088:	0001e003 	.word	0x0001e003
   1e08c:	0001e003 	.word	0x0001e003
   1e090:	0001e0a9 	.word	0x0001e0a9
   1e094:	0001e0a9 	.word	0x0001e0a9
   1e098:	0001e0a9 	.word	0x0001e0a9
   1e09c:	0001e0a9 	.word	0x0001e0a9
   1e0a0:	0001e0a9 	.word	0x0001e0a9
   1e0a4:	0001e0a9 	.word	0x0001e0a9
	int retval = 0;
   1e0a8:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   1e0aa:	6011      	str	r1, [r2, #0]
   1e0ac:	4770      	bx	lr
   1e0ae:	bf00      	nop

0001e0b0 <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   1e0b0:	f04f 32ff 	mov.w	r2, #4294967295
   1e0b4:	4b06      	ldr	r3, [pc, #24]	; (1e0d0 <nrf91_nrf_modem_lib_socket_offload_init+0x20>)
	}

	return 0;
}
   1e0b6:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   1e0b8:	601a      	str	r2, [r3, #0]
   1e0ba:	619a      	str	r2, [r3, #24]
   1e0bc:	631a      	str	r2, [r3, #48]	; 0x30
   1e0be:	649a      	str	r2, [r3, #72]	; 0x48
   1e0c0:	661a      	str	r2, [r3, #96]	; 0x60
   1e0c2:	679a      	str	r2, [r3, #120]	; 0x78
   1e0c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   1e0c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
   1e0cc:	4770      	bx	lr
   1e0ce:	bf00      	nop
   1e0d0:	2000d384 	.word	0x2000d384

0001e0d4 <nrf91_socket_iface_init>:
	struct net_if *iface;
} nrf91_socket_iface_data;

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;
   1e0d4:	4b03      	ldr	r3, [pc, #12]	; (1e0e4 <nrf91_socket_iface_init+0x10>)

	iface->if_dev->socket_offload = nrf91_socket_create;
   1e0d6:	4a04      	ldr	r2, [pc, #16]	; (1e0e8 <nrf91_socket_iface_init+0x14>)
	nrf91_socket_iface_data.iface = iface;
   1e0d8:	6018      	str	r0, [r3, #0]
	iface->if_dev->socket_offload = nrf91_socket_create;
   1e0da:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1e0dc:	4803      	ldr	r0, [pc, #12]	; (1e0ec <nrf91_socket_iface_init+0x18>)
	iface->if_dev->socket_offload = nrf91_socket_create;
   1e0de:	61da      	str	r2, [r3, #28]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1e0e0:	f7fd b8fc 	b.w	1b2dc <socket_offload_dns_register>
   1e0e4:	2000d380 	.word	0x2000d380
   1e0e8:	0001e5bd 	.word	0x0001e5bd
   1e0ec:	000293ac 	.word	0x000293ac

0001e0f0 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   1e0f0:	490b      	ldr	r1, [pc, #44]	; (1e120 <nrf91_socket_is_supported+0x30>)
{
   1e0f2:	4603      	mov	r3, r0
	if (offload_disabled) {
   1e0f4:	7808      	ldrb	r0, [r1, #0]
   1e0f6:	b980      	cbnz	r0, 1e11a <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   1e0f8:	490a      	ldr	r1, [pc, #40]	; (1e124 <nrf91_socket_is_supported+0x34>)
   1e0fa:	7809      	ldrb	r1, [r1, #0]
   1e0fc:	b139      	cbz	r1, 1e10e <nrf91_socket_is_supported+0x1e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1e0fe:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
   1e102:	2902      	cmp	r1, #2
   1e104:	d90a      	bls.n	1e11c <nrf91_socket_is_supported+0x2c>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   1e106:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1e10a:	2a01      	cmp	r2, #1
   1e10c:	d906      	bls.n	1e11c <nrf91_socket_is_supported+0x2c>
	return (family == AF_PACKET) || (family == AF_INET) || (family == AF_INET6);
   1e10e:	3b01      	subs	r3, #1
   1e110:	2b02      	cmp	r3, #2
   1e112:	bf8c      	ite	hi
   1e114:	2000      	movhi	r0, #0
   1e116:	2001      	movls	r0, #1
	return af_is_supported(family);
   1e118:	4770      	bx	lr
		return false;
   1e11a:	2000      	movs	r0, #0
}
   1e11c:	4770      	bx	lr
   1e11e:	bf00      	nop
   1e120:	2000dda5 	.word	0x2000dda5
   1e124:	2000dda4 	.word	0x2000dda4

0001e128 <pollcb>:
{
   1e128:	b470      	push	{r4, r5, r6}
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1e12a:	2300      	movs	r3, #0
   1e12c:	2518      	movs	r5, #24
	ctx = find_ctx(pollfd->fd);
   1e12e:	6801      	ldr	r1, [r0, #0]
		if (offload_ctx[i].nrf_fd == fd) {
   1e130:	4c08      	ldr	r4, [pc, #32]	; (1e154 <pollcb+0x2c>)
   1e132:	fb05 f203 	mul.w	r2, r5, r3
   1e136:	58a6      	ldr	r6, [r4, r2]
   1e138:	42b1      	cmp	r1, r6
   1e13a:	d106      	bne.n	1e14a <pollcb+0x22>
	k_poll_signal_raise(&ctx->poll, pollfd->revents);
   1e13c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   1e140:	3208      	adds	r2, #8
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1e142:	18a0      	adds	r0, r4, r2
}
   1e144:	bc70      	pop	{r4, r5, r6}
   1e146:	f006 be63 	b.w	24e10 <z_impl_k_poll_signal_raise>
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1e14a:	3301      	adds	r3, #1
   1e14c:	2b08      	cmp	r3, #8
   1e14e:	d1f0      	bne.n	1e132 <pollcb+0xa>
}
   1e150:	bc70      	pop	{r4, r5, r6}
   1e152:	4770      	bx	lr
   1e154:	2000d384 	.word	0x2000d384

0001e158 <nrf91_socket_offload_getaddrinfo>:
{
   1e158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e15c:	4614      	mov	r4, r2
   1e15e:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1e160:	2100      	movs	r1, #0
{
   1e162:	b08b      	sub	sp, #44	; 0x2c
   1e164:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e166:	2220      	movs	r2, #32
   1e168:	a802      	add	r0, sp, #8
{
   1e16a:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1e16c:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e16e:	f00a fbca 	bl	28906 <memset>
	if (hints != NULL) {
   1e172:	b15c      	cbz	r4, 1e18c <nrf91_socket_offload_getaddrinfo+0x34>
	nrf_out->ai_flags = z_in->ai_flags;
   1e174:	6863      	ldr	r3, [r4, #4]
   1e176:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_in->ai_socktype;
   1e178:	68e3      	ldr	r3, [r4, #12]
   1e17a:	9304      	str	r3, [sp, #16]
	nrf_out->ai_family = z_in->ai_family;
   1e17c:	68a3      	ldr	r3, [r4, #8]
   1e17e:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_in->ai_protocol;
   1e180:	6923      	ldr	r3, [r4, #16]
   1e182:	9305      	str	r3, [sp, #20]
	if (z_in->ai_canonname != NULL) {
   1e184:	69e3      	ldr	r3, [r4, #28]
   1e186:	b103      	cbz	r3, 1e18a <nrf91_socket_offload_getaddrinfo+0x32>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1e188:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   1e18a:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   1e18c:	f04f 32ff 	mov.w	r2, #4294967295
   1e190:	f04f 33ff 	mov.w	r3, #4294967295
   1e194:	4834      	ldr	r0, [pc, #208]	; (1e268 <nrf91_socket_offload_getaddrinfo+0x110>)
   1e196:	f008 fe86 	bl	26ea6 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1e19a:	4631      	mov	r1, r6
   1e19c:	4622      	mov	r2, r4
   1e19e:	4628      	mov	r0, r5
   1e1a0:	ab01      	add	r3, sp, #4
   1e1a2:	f004 f94f 	bl	22444 <nrf_getaddrinfo>
	if (retval != 0) {
   1e1a6:	4606      	mov	r6, r0
   1e1a8:	b948      	cbnz	r0, 1e1be <nrf91_socket_offload_getaddrinfo+0x66>
	struct zsock_addrinfo *latest_z_res = NULL;
   1e1aa:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   1e1ac:	4681      	mov	r9, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1e1ae:	f04f 0a18 	mov.w	sl, #24
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1e1b2:	9d01      	ldr	r5, [sp, #4]
	*res = NULL;
   1e1b4:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1e1b6:	b94d      	cbnz	r5, 1e1cc <nrf91_socket_offload_getaddrinfo+0x74>
	nrf_freeaddrinfo(nrf_res);
   1e1b8:	9801      	ldr	r0, [sp, #4]
   1e1ba:	f009 fb36 	bl	2782a <nrf_freeaddrinfo>
	k_mutex_unlock(&getaddrinfo_lock);
   1e1be:	482a      	ldr	r0, [pc, #168]	; (1e268 <nrf91_socket_offload_getaddrinfo+0x110>)
   1e1c0:	f008 fe73 	bl	26eaa <k_mutex_unlock.isra.0>
}
   1e1c4:	4630      	mov	r0, r6
   1e1c6:	b00b      	add	sp, #44	; 0x2c
   1e1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					k_malloc(sizeof(struct zsock_addrinfo));
   1e1cc:	2050      	movs	r0, #80	; 0x50
   1e1ce:	f00a fb55 	bl	2887c <k_malloc>
		if (next_z_res == NULL) {
   1e1d2:	4604      	mov	r4, r0
   1e1d4:	2800      	cmp	r0, #0
   1e1d6:	d040      	beq.n	1e25a <nrf91_socket_offload_getaddrinfo+0x102>
	z_out->ai_next = NULL;
   1e1d8:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1e1dc:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_in->ai_flags;
   1e1e0:	682b      	ldr	r3, [r5, #0]
   1e1e2:	6043      	str	r3, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1e1e4:	68ab      	ldr	r3, [r5, #8]
   1e1e6:	60c3      	str	r3, [r0, #12]
	z_out->ai_family = nrf_in->ai_family;
   1e1e8:	686b      	ldr	r3, [r5, #4]
   1e1ea:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_in->ai_protocol;
   1e1ec:	68eb      	ldr	r3, [r5, #12]
   1e1ee:	6103      	str	r3, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1e1f0:	f8d5 b004 	ldr.w	fp, [r5, #4]
   1e1f4:	f1bb 0f01 	cmp.w	fp, #1
   1e1f8:	d114      	bne.n	1e224 <nrf91_socket_offload_getaddrinfo+0xcc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1e1fa:	2008      	movs	r0, #8
   1e1fc:	f00a fb3e 	bl	2887c <k_malloc>
   1e200:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1e202:	b338      	cbz	r0, 1e254 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1e204:	2308      	movs	r3, #8
   1e206:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1e208:	696b      	ldr	r3, [r5, #20]
	ptr->sin_port = nrf_in->sin_port;
   1e20a:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_family = AF_INET;
   1e20c:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_port = nrf_in->sin_port;
   1e210:	8042      	strh	r2, [r0, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e212:	68db      	ldr	r3, [r3, #12]
   1e214:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   1e216:	f1b8 0f00 	cmp.w	r8, #0
   1e21a:	d121      	bne.n	1e260 <nrf91_socket_offload_getaddrinfo+0x108>
			*res = next_z_res;
   1e21c:	603c      	str	r4, [r7, #0]
					k_malloc(sizeof(struct zsock_addrinfo));
   1e21e:	46a0      	mov	r8, r4
		next_nrf_res = next_nrf_res->ai_next;
   1e220:	69ed      	ldr	r5, [r5, #28]
   1e222:	e7c8      	b.n	1e1b6 <nrf91_socket_offload_getaddrinfo+0x5e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1e224:	f1bb 0f02 	cmp.w	fp, #2
   1e228:	d009      	beq.n	1e23e <nrf91_socket_offload_getaddrinfo+0xe6>
			k_free(next_z_res);
   1e22a:	f00a fb20 	bl	2886e <k_free>
			retval = DNS_EAI_FAMILY;
   1e22e:	f06f 0605 	mvn.w	r6, #5
		nrf91_socket_offload_freeaddrinfo(*res);
   1e232:	6838      	ldr	r0, [r7, #0]
   1e234:	f008 fd6c 	bl	26d10 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1e238:	2300      	movs	r3, #0
   1e23a:	603b      	str	r3, [r7, #0]
   1e23c:	e7bc      	b.n	1e1b8 <nrf91_socket_offload_getaddrinfo+0x60>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1e23e:	2018      	movs	r0, #24
   1e240:	f00a fb1c 	bl	2887c <k_malloc>
   1e244:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1e246:	b128      	cbz	r0, 1e254 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1e248:	f8c4 a014 	str.w	sl, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   1e24c:	6969      	ldr	r1, [r5, #20]
   1e24e:	f008 fd6c 	bl	26d2a <nrf_to_z_ipv6>
		if (err == -ENOMEM) {
   1e252:	e7e0      	b.n	1e216 <nrf91_socket_offload_getaddrinfo+0xbe>
			k_free(next_z_res);
   1e254:	4620      	mov	r0, r4
   1e256:	f00a fb0a 	bl	2886e <k_free>
					k_malloc(sizeof(struct zsock_addrinfo));
   1e25a:	f06f 0609 	mvn.w	r6, #9
   1e25e:	e7e8      	b.n	1e232 <nrf91_socket_offload_getaddrinfo+0xda>
			latest_z_res->ai_next = next_z_res;
   1e260:	f8c8 4000 	str.w	r4, [r8]
   1e264:	e7db      	b.n	1e21e <nrf91_socket_offload_getaddrinfo+0xc6>
   1e266:	bf00      	nop
   1e268:	2000c878 	.word	0x2000c878

0001e26c <nrf91_socket_offload_sendmsg>:
{
   1e26c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1e270:	4607      	mov	r7, r0
   1e272:	4690      	mov	r8, r2
	if (msg == NULL) {
   1e274:	460c      	mov	r4, r1
   1e276:	b379      	cbz	r1, 1e2d8 <nrf91_socket_offload_sendmsg+0x6c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e278:	2300      	movs	r3, #0
	ssize_t len = 0;
   1e27a:	461a      	mov	r2, r3
   1e27c:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e27e:	4283      	cmp	r3, r0
   1e280:	d134      	bne.n	1e2ec <nrf91_socket_offload_sendmsg+0x80>
	if (len <= sizeof(buf)) {
   1e282:	2a80      	cmp	r2, #128	; 0x80
   1e284:	d871      	bhi.n	1e36a <nrf91_socket_offload_sendmsg+0xfe>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1e286:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   1e288:	f04f 32ff 	mov.w	r2, #4294967295
   1e28c:	f04f 33ff 	mov.w	r3, #4294967295
   1e290:	4838      	ldr	r0, [pc, #224]	; (1e374 <nrf91_socket_offload_sendmsg+0x108>)
   1e292:	f008 fe08 	bl	26ea6 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   1e296:	46a9      	mov	r9, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1e298:	4e37      	ldr	r6, [pc, #220]	; (1e378 <nrf91_socket_offload_sendmsg+0x10c>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   1e29a:	68e3      	ldr	r3, [r4, #12]
   1e29c:	429d      	cmp	r5, r3
   1e29e:	d32c      	bcc.n	1e2fa <nrf91_socket_offload_sendmsg+0x8e>
		offset = 0;
   1e2a0:	2600      	movs	r6, #0
		ret = 0;
   1e2a2:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   1e2a4:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1e378 <nrf91_socket_offload_sendmsg+0x10c>
		while ((offset < len) && (ret >= 0)) {
   1e2a8:	45b1      	cmp	r9, r6
   1e2aa:	dd11      	ble.n	1e2d0 <nrf91_socket_offload_sendmsg+0x64>
   1e2ac:	b985      	cbnz	r5, 1e2d0 <nrf91_socket_offload_sendmsg+0x64>
			ret = nrf91_socket_offload_sendto(obj,
   1e2ae:	6863      	ldr	r3, [r4, #4]
   1e2b0:	4638      	mov	r0, r7
   1e2b2:	9301      	str	r3, [sp, #4]
   1e2b4:	6823      	ldr	r3, [r4, #0]
   1e2b6:	eba9 0206 	sub.w	r2, r9, r6
   1e2ba:	9300      	str	r3, [sp, #0]
   1e2bc:	eb0a 0106 	add.w	r1, sl, r6
   1e2c0:	4643      	mov	r3, r8
   1e2c2:	f008 fd5f 	bl	26d84 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   1e2c6:	1e05      	subs	r5, r0, #0
   1e2c8:	ddee      	ble.n	1e2a8 <nrf91_socket_offload_sendmsg+0x3c>
				offset += ret;
   1e2ca:	442e      	add	r6, r5
		while ((offset < len) && (ret >= 0)) {
   1e2cc:	45b1      	cmp	r9, r6
   1e2ce:	dcee      	bgt.n	1e2ae <nrf91_socket_offload_sendmsg+0x42>
		k_mutex_unlock(&sendmsg_lock);
   1e2d0:	4828      	ldr	r0, [pc, #160]	; (1e374 <nrf91_socket_offload_sendmsg+0x108>)
   1e2d2:	f008 fdea 	bl	26eaa <k_mutex_unlock.isra.0>
		return ret;
   1e2d6:	e005      	b.n	1e2e4 <nrf91_socket_offload_sendmsg+0x78>
		errno = EINVAL;
   1e2d8:	f008 f9a1 	bl	2661e <__errno>
   1e2dc:	2316      	movs	r3, #22
		return -1;
   1e2de:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   1e2e2:	6003      	str	r3, [r0, #0]
}
   1e2e4:	4628      	mov	r0, r5
   1e2e6:	b002      	add	sp, #8
   1e2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   1e2ec:	68a1      	ldr	r1, [r4, #8]
   1e2ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1e2f2:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e2f4:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   1e2f6:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e2f8:	e7c1      	b.n	1e27e <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1e2fa:	68a3      	ldr	r3, [r4, #8]
   1e2fc:	eb06 0009 	add.w	r0, r6, r9
   1e300:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
   1e304:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   1e308:	6852      	ldr	r2, [r2, #4]
   1e30a:	f00a faef 	bl	288ec <memcpy>
			len += msg->msg_iov[i].iov_len;
   1e30e:	68a3      	ldr	r3, [r4, #8]
   1e310:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   1e314:	4453      	add	r3, sl
   1e316:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   1e318:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   1e31a:	4499      	add	r9, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   1e31c:	e7bd      	b.n	1e29a <nrf91_socket_offload_sendmsg+0x2e>
		if (msg->msg_iov[i].iov_len == 0) {
   1e31e:	68a3      	ldr	r3, [r4, #8]
   1e320:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   1e324:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1e328:	685b      	ldr	r3, [r3, #4]
   1e32a:	b13b      	cbz	r3, 1e33c <nrf91_socket_offload_sendmsg+0xd0>
		offset = 0;
   1e32c:	f04f 0900 	mov.w	r9, #0
		while (offset < msg->msg_iov[i].iov_len) {
   1e330:	68a3      	ldr	r3, [r4, #8]
   1e332:	eb03 020a 	add.w	r2, r3, sl
   1e336:	6852      	ldr	r2, [r2, #4]
   1e338:	4591      	cmp	r9, r2
   1e33a:	d304      	bcc.n	1e346 <nrf91_socket_offload_sendmsg+0xda>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e33c:	3601      	adds	r6, #1
   1e33e:	68e3      	ldr	r3, [r4, #12]
   1e340:	429e      	cmp	r6, r3
   1e342:	d3ec      	bcc.n	1e31e <nrf91_socket_offload_sendmsg+0xb2>
   1e344:	e7ce      	b.n	1e2e4 <nrf91_socket_offload_sendmsg+0x78>
			ret = nrf91_socket_offload_sendto(obj,
   1e346:	f853 100a 	ldr.w	r1, [r3, sl]
   1e34a:	6863      	ldr	r3, [r4, #4]
   1e34c:	4449      	add	r1, r9
   1e34e:	9301      	str	r3, [sp, #4]
   1e350:	6823      	ldr	r3, [r4, #0]
   1e352:	4638      	mov	r0, r7
   1e354:	9300      	str	r3, [sp, #0]
   1e356:	eba2 0209 	sub.w	r2, r2, r9
   1e35a:	4643      	mov	r3, r8
   1e35c:	f008 fd12 	bl	26d84 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   1e360:	1e01      	subs	r1, r0, #0
   1e362:	db05      	blt.n	1e370 <nrf91_socket_offload_sendmsg+0x104>
			offset += ret;
   1e364:	4489      	add	r9, r1
			len += ret;
   1e366:	440d      	add	r5, r1
   1e368:	e7e2      	b.n	1e330 <nrf91_socket_offload_sendmsg+0xc4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1e36a:	2600      	movs	r6, #0
	len = 0;
   1e36c:	4635      	mov	r5, r6
   1e36e:	e7e6      	b.n	1e33e <nrf91_socket_offload_sendmsg+0xd2>
			ret = nrf91_socket_offload_sendto(obj,
   1e370:	460d      	mov	r5, r1
   1e372:	e7b7      	b.n	1e2e4 <nrf91_socket_offload_sendmsg+0x78>
   1e374:	2000c8b4 	.word	0x2000c8b4
   1e378:	2000dd24 	.word	0x2000dd24

0001e37c <allocate_ctx>:
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1e37c:	f04f 32ff 	mov.w	r2, #4294967295
   1e380:	f04f 33ff 	mov.w	r3, #4294967295
{
   1e384:	b570      	push	{r4, r5, r6, lr}
   1e386:	4605      	mov	r5, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1e388:	480b      	ldr	r0, [pc, #44]	; (1e3b8 <allocate_ctx+0x3c>)
   1e38a:	f008 fd8c 	bl	26ea6 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1e38e:	2300      	movs	r3, #0
   1e390:	2018      	movs	r0, #24
		if (offload_ctx[i].nrf_fd == -1) {
   1e392:	4a0a      	ldr	r2, [pc, #40]	; (1e3bc <allocate_ctx+0x40>)
   1e394:	fb00 f103 	mul.w	r1, r0, r3
   1e398:	5856      	ldr	r6, [r2, r1]
   1e39a:	188c      	adds	r4, r1, r2
   1e39c:	3601      	adds	r6, #1
   1e39e:	d105      	bne.n	1e3ac <allocate_ctx+0x30>
			ctx->nrf_fd = nrf_fd;
   1e3a0:	5055      	str	r5, [r2, r1]
	k_mutex_unlock(&ctx_lock);
   1e3a2:	4805      	ldr	r0, [pc, #20]	; (1e3b8 <allocate_ctx+0x3c>)
   1e3a4:	f008 fd81 	bl	26eaa <k_mutex_unlock.isra.0>
}
   1e3a8:	4620      	mov	r0, r4
   1e3aa:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1e3ac:	3301      	adds	r3, #1
   1e3ae:	2b08      	cmp	r3, #8
   1e3b0:	d1f0      	bne.n	1e394 <allocate_ctx+0x18>
	struct nrf_sock_ctx *ctx = NULL;
   1e3b2:	2400      	movs	r4, #0
   1e3b4:	e7f5      	b.n	1e3a2 <allocate_ctx+0x26>
   1e3b6:	bf00      	nop
   1e3b8:	2000c850 	.word	0x2000c850
   1e3bc:	2000d384 	.word	0x2000d384

0001e3c0 <release_ctx>:
{
   1e3c0:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1e3c2:	4d09      	ldr	r5, [pc, #36]	; (1e3e8 <release_ctx+0x28>)
{
   1e3c4:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1e3c6:	f04f 32ff 	mov.w	r2, #4294967295
   1e3ca:	4628      	mov	r0, r5
   1e3cc:	f04f 33ff 	mov.w	r3, #4294967295
   1e3d0:	f008 fd69 	bl	26ea6 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   1e3d4:	2300      	movs	r3, #0
   1e3d6:	f04f 32ff 	mov.w	r2, #4294967295
   1e3da:	e9c4 2300 	strd	r2, r3, [r4]
	k_mutex_unlock(&ctx_lock);
   1e3de:	4628      	mov	r0, r5
}
   1e3e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   1e3e4:	f008 bd61 	b.w	26eaa <k_mutex_unlock.isra.0>
   1e3e8:	2000c850 	.word	0x2000c850

0001e3ec <nrf91_socket_offload_accept>:
{
   1e3ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e3f0:	b08b      	sub	sp, #44	; 0x2c
   1e3f2:	4607      	mov	r7, r0
   1e3f4:	460c      	mov	r4, r1
   1e3f6:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   1e3f8:	f7fb fc40 	bl	19c7c <z_reserve_fd>
   1e3fc:	4606      	mov	r6, r0
	if (fd < 0) {
   1e3fe:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   1e400:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   1e402:	db1e      	blt.n	1e442 <nrf91_socket_offload_accept+0x56>
	if ((addr != NULL) && (addrlen != NULL)) {
   1e404:	b304      	cbz	r4, 1e448 <nrf91_socket_offload_accept+0x5c>
   1e406:	b315      	cbz	r5, 1e44e <nrf91_socket_offload_accept+0x62>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1e408:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1e40a:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1e40c:	2b08      	cmp	r3, #8
   1e40e:	bf14      	ite	ne
   1e410:	2324      	movne	r3, #36	; 0x24
   1e412:	2310      	moveq	r3, #16
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1e414:	f10d 0904 	add.w	r9, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1e418:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1e41a:	4649      	mov	r1, r9
   1e41c:	f009 fb84 	bl	27b28 <nrf_accept>
	if (new_sd < 0) {
   1e420:	f1b0 0800 	subs.w	r8, r0, #0
   1e424:	db0a      	blt.n	1e43c <nrf91_socket_offload_accept+0x50>
	ctx = allocate_ctx(new_sd);
   1e426:	f7ff ffa9 	bl	1e37c <allocate_ctx>
	if (ctx == NULL) {
   1e42a:	4607      	mov	r7, r0
   1e42c:	b990      	cbnz	r0, 1e454 <nrf91_socket_offload_accept+0x68>
		errno = ENOMEM;
   1e42e:	f008 f8f6 	bl	2661e <__errno>
   1e432:	230c      	movs	r3, #12
   1e434:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1e436:	4640      	mov	r0, r8
   1e438:	f004 faba 	bl	229b0 <nrf_close>
	z_free_fd(fd);
   1e43c:	4630      	mov	r0, r6
   1e43e:	f7fb fc6b 	bl	19d18 <z_free_fd>
		return -1;
   1e442:	f04f 36ff 	mov.w	r6, #4294967295
   1e446:	e018      	b.n	1e47a <nrf91_socket_offload_accept+0x8e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1e448:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1e44a:	46a1      	mov	r9, r4
   1e44c:	e7e5      	b.n	1e41a <nrf91_socket_offload_accept+0x2e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1e44e:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1e450:	46a9      	mov	r9, r5
   1e452:	e7e2      	b.n	1e41a <nrf91_socket_offload_accept+0x2e>
	if ((addr != NULL) && (addrlen != NULL)) {
   1e454:	b164      	cbz	r4, 1e470 <nrf91_socket_offload_accept+0x84>
   1e456:	b15d      	cbz	r5, 1e470 <nrf91_socket_offload_accept+0x84>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1e458:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e45c:	2b01      	cmp	r3, #1
   1e45e:	d110      	bne.n	1e482 <nrf91_socket_offload_accept+0x96>
			*addrlen = sizeof(struct sockaddr_in);
   1e460:	2208      	movs	r2, #8
   1e462:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   1e464:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   1e468:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e46a:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   1e46c:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e46e:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   1e470:	4639      	mov	r1, r7
   1e472:	4630      	mov	r0, r6
   1e474:	4a0d      	ldr	r2, [pc, #52]	; (1e4ac <nrf91_socket_offload_accept+0xc0>)
   1e476:	f7fb fc37 	bl	19ce8 <z_finalize_fd>
}
   1e47a:	4630      	mov	r0, r6
   1e47c:	b00b      	add	sp, #44	; 0x2c
   1e47e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   1e482:	2b02      	cmp	r3, #2
   1e484:	d106      	bne.n	1e494 <nrf91_socket_offload_accept+0xa8>
			*addrlen = sizeof(struct sockaddr_in6);
   1e486:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1e488:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   1e48a:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1e48c:	a901      	add	r1, sp, #4
   1e48e:	f008 fc4c 	bl	26d2a <nrf_to_z_ipv6>
   1e492:	e7ed      	b.n	1e470 <nrf91_socket_offload_accept+0x84>
			errno = ENOTSUP;
   1e494:	f008 f8c3 	bl	2661e <__errno>
   1e498:	2386      	movs	r3, #134	; 0x86
   1e49a:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1e49c:	4640      	mov	r0, r8
   1e49e:	f004 fa87 	bl	229b0 <nrf_close>
		release_ctx(ctx);
   1e4a2:	4638      	mov	r0, r7
   1e4a4:	f7ff ff8c 	bl	1e3c0 <release_ctx>
   1e4a8:	e7c8      	b.n	1e43c <nrf91_socket_offload_accept+0x50>
   1e4aa:	bf00      	nop
   1e4ac:	000293b4 	.word	0x000293b4

0001e4b0 <nrf91_socket_offload_ioctl>:
{
   1e4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (request) {
   1e4b2:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
	int sd = OBJ_TO_SD(obj);
   1e4b6:	6804      	ldr	r4, [r0, #0]
{
   1e4b8:	b087      	sub	sp, #28
	switch (request) {
   1e4ba:	2b03      	cmp	r3, #3
   1e4bc:	d857      	bhi.n	1e56e <nrf91_socket_offload_ioctl+0xbe>
   1e4be:	e8df f003 	tbb	[pc, r3]
   1e4c2:	4002      	.short	0x4002
   1e4c4:	5377      	.short	0x5377
	struct nrf_modem_pollcb pcb = {
   1e4c6:	2701      	movs	r7, #1
		pev_end = va_arg(args, struct k_poll_event *);
   1e4c8:	e9d2 6101 	ldrd	r6, r1, [r2, #4]
		return nrf91_poll_prepare(obj, pfd, pev, pev_end);
   1e4cc:	6813      	ldr	r3, [r2, #0]
	struct nrf_modem_pollcb pcb = {
   1e4ce:	4a3a      	ldr	r2, [pc, #232]	; (1e5b8 <nrf91_socket_offload_ioctl+0x108>)
   1e4d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1e4d4:	9204      	str	r2, [sp, #16]
   1e4d6:	f8ad 3014 	strh.w	r3, [sp, #20]
   1e4da:	f88d 7016 	strb.w	r7, [sp, #22]
	if (*pev == pev_end) {
   1e4de:	6833      	ldr	r3, [r6, #0]
   1e4e0:	4299      	cmp	r1, r3
   1e4e2:	d104      	bne.n	1e4ee <nrf91_socket_offload_ioctl+0x3e>
		errno = ENOMEM;
   1e4e4:	f008 f89b 	bl	2661e <__errno>
   1e4e8:	230c      	movs	r3, #12
		errno = EINVAL;
   1e4ea:	6003      	str	r3, [r0, #0]
   1e4ec:	e014      	b.n	1e518 <nrf91_socket_offload_ioctl+0x68>
	k_poll_signal_init(&ctx->poll);
   1e4ee:	f100 0508 	add.w	r5, r0, #8
	z_impl_k_poll_signal_init(sig);
   1e4f2:	4628      	mov	r0, r5
   1e4f4:	f00a f99e 	bl	28834 <z_impl_k_poll_signal_init>
	k_poll_event_init(*pev, K_POLL_TYPE_SIGNAL, K_POLL_MODE_NOTIFY_ONLY, &ctx->poll);
   1e4f8:	462b      	mov	r3, r5
   1e4fa:	2200      	movs	r2, #0
   1e4fc:	4639      	mov	r1, r7
   1e4fe:	6830      	ldr	r0, [r6, #0]
   1e500:	f00a f97b 	bl	287fa <k_poll_event_init>
	err = nrf_setsockopt(fd, NRF_SOL_SOCKET, NRF_SO_POLLCB, &pcb, sizeof(pcb));
   1e504:	2308      	movs	r3, #8
   1e506:	4620      	mov	r0, r4
   1e508:	9300      	str	r3, [sp, #0]
   1e50a:	223c      	movs	r2, #60	; 0x3c
   1e50c:	4639      	mov	r1, r7
   1e50e:	ab04      	add	r3, sp, #16
   1e510:	f004 fb8e 	bl	22c30 <nrf_setsockopt>
	if (err) {
   1e514:	4604      	mov	r4, r0
   1e516:	b110      	cbz	r0, 1e51e <nrf91_socket_offload_ioctl+0x6e>
		retval = -1;
   1e518:	f04f 34ff 	mov.w	r4, #4294967295
		return nrf91_socket_offload_fcntl(sd, request, args);
   1e51c:	e00e      	b.n	1e53c <nrf91_socket_offload_ioctl+0x8c>
	(*pev)++;
   1e51e:	6833      	ldr	r3, [r6, #0]
   1e520:	3314      	adds	r3, #20
   1e522:	6033      	str	r3, [r6, #0]
	flags = 0;
   1e524:	e9cd 0002 	strd	r0, r0, [sp, #8]
	z_impl_k_poll_signal_check(sig, signaled, result);
   1e528:	4628      	mov	r0, r5
   1e52a:	aa02      	add	r2, sp, #8
   1e52c:	a903      	add	r1, sp, #12
   1e52e:	f00a f986 	bl	2883e <z_impl_k_poll_signal_check>
	if (!signaled) {
   1e532:	9b03      	ldr	r3, [sp, #12]
	return -EALREADY;
   1e534:	2b00      	cmp	r3, #0
   1e536:	bf18      	it	ne
   1e538:	f06f 0477 	mvnne.w	r4, #119	; 0x77
}
   1e53c:	4620      	mov	r0, r4
   1e53e:	b007      	add	sp, #28
   1e540:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pev = va_arg(args, struct k_poll_event **);
   1e542:	e9d2 4200 	ldrd	r4, r2, [r2]
	(*pev)++;
   1e546:	6813      	ldr	r3, [r2, #0]
   1e548:	3314      	adds	r3, #20
   1e54a:	6013      	str	r3, [r2, #0]
	signaled = 0;
   1e54c:	2300      	movs	r3, #0
	flags = 0;
   1e54e:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1e552:	aa03      	add	r2, sp, #12
   1e554:	a904      	add	r1, sp, #16
   1e556:	3008      	adds	r0, #8
   1e558:	f00a f971 	bl	2883e <z_impl_k_poll_signal_check>
	if (!signaled) {
   1e55c:	9b04      	ldr	r3, [sp, #16]
   1e55e:	b10b      	cbz	r3, 1e564 <nrf91_socket_offload_ioctl+0xb4>
	pfd->revents = flags;
   1e560:	9b03      	ldr	r3, [sp, #12]
   1e562:	80e3      	strh	r3, [r4, #6]
		return nrf91_poll_update(obj, pfd, pev);
   1e564:	2400      	movs	r4, #0
   1e566:	e7e9      	b.n	1e53c <nrf91_socket_offload_ioctl+0x8c>
		ctx->lock = va_arg(args, struct k_mutex *);
   1e568:	6813      	ldr	r3, [r2, #0]
   1e56a:	6043      	str	r3, [r0, #4]
		return 0;
   1e56c:	e7fa      	b.n	1e564 <nrf91_socket_offload_ioctl+0xb4>
	switch (cmd) {
   1e56e:	2903      	cmp	r1, #3
   1e570:	d012      	beq.n	1e598 <nrf91_socket_offload_ioctl+0xe8>
   1e572:	2904      	cmp	r1, #4
   1e574:	d118      	bne.n	1e5a8 <nrf91_socket_offload_ioctl+0xf8>
		flags = va_arg(args, int);
   1e576:	6815      	ldr	r5, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK) {
   1e578:	f435 4380 	bics.w	r3, r5, #16384	; 0x4000
   1e57c:	d003      	beq.n	1e586 <nrf91_socket_offload_ioctl+0xd6>
			errno = EINVAL;
   1e57e:	f008 f84e 	bl	2661e <__errno>
   1e582:	2316      	movs	r3, #22
   1e584:	6003      	str	r3, [r0, #0]
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1e586:	2104      	movs	r1, #4
   1e588:	4620      	mov	r0, r4
   1e58a:	f3c5 3280 	ubfx	r2, r5, #14, #1
}
   1e58e:	b007      	add	sp, #28
   1e590:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1e594:	f009 bd08 	b.w	27fa8 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1e598:	4620      	mov	r0, r4
   1e59a:	2200      	movs	r2, #0
   1e59c:	f009 fd04 	bl	27fa8 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1e5a0:	0384      	lsls	r4, r0, #14
   1e5a2:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
   1e5a6:	e7c9      	b.n	1e53c <nrf91_socket_offload_ioctl+0x8c>
		errno = EINVAL;
   1e5a8:	f008 f839 	bl	2661e <__errno>
   1e5ac:	2316      	movs	r3, #22
   1e5ae:	e79c      	b.n	1e4ea <nrf91_socket_offload_ioctl+0x3a>
	switch (request) {
   1e5b0:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1e5b4:	e7c2      	b.n	1e53c <nrf91_socket_offload_ioctl+0x8c>
   1e5b6:	bf00      	nop
   1e5b8:	0001e129 	.word	0x0001e129

0001e5bc <nrf91_socket_create>:
{
   1e5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
   1e5c0:	1e0d      	subs	r5, r1, #0
{
   1e5c2:	4607      	mov	r7, r0
   1e5c4:	4690      	mov	r8, r2
	if (type & SOCK_NATIVE) {
   1e5c6:	da12      	bge.n	1e5ee <nrf91_socket_create+0x32>
	k_sched_lock();
   1e5c8:	f006 f8c0 	bl	2474c <k_sched_lock>
	*offload_lock = true;
   1e5cc:	4e1c      	ldr	r6, [pc, #112]	; (1e640 <nrf91_socket_create+0x84>)
   1e5ce:	2301      	movs	r3, #1
   1e5d0:	7033      	strb	r3, [r6, #0]
		union { uintptr_t x; int val; } parm2 = { .val = proto };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_SOCKET);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_socket(family, type, proto);
   1e5d2:	4642      	mov	r2, r8
   1e5d4:	4638      	mov	r0, r7
   1e5d6:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
   1e5da:	f7fc fe55 	bl	1b288 <z_impl_zsock_socket>
	*offload_lock = false;
   1e5de:	2300      	movs	r3, #0
   1e5e0:	7033      	strb	r3, [r6, #0]
   1e5e2:	4604      	mov	r4, r0
	k_sched_unlock();
   1e5e4:	f006 f8c6 	bl	24774 <k_sched_unlock>
}
   1e5e8:	4620      	mov	r0, r4
   1e5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   1e5ee:	006b      	lsls	r3, r5, #1
   1e5f0:	d503      	bpl.n	1e5fa <nrf91_socket_create+0x3e>
	k_sched_lock();
   1e5f2:	f006 f8ab 	bl	2474c <k_sched_lock>
	*offload_lock = true;
   1e5f6:	4e13      	ldr	r6, [pc, #76]	; (1e644 <nrf91_socket_create+0x88>)
   1e5f8:	e7e9      	b.n	1e5ce <nrf91_socket_create+0x12>
	fd = z_reserve_fd();
   1e5fa:	f7fb fb3f 	bl	19c7c <z_reserve_fd>
	if (fd < 0) {
   1e5fe:	1e04      	subs	r4, r0, #0
   1e600:	db09      	blt.n	1e616 <nrf91_socket_create+0x5a>
	retval = nrf_socket(family, type, proto);
   1e602:	4629      	mov	r1, r5
   1e604:	4642      	mov	r2, r8
   1e606:	4638      	mov	r0, r7
   1e608:	f009 f922 	bl	27850 <nrf_socket>
	if (sd < 0) {
   1e60c:	1e05      	subs	r5, r0, #0
   1e60e:	da05      	bge.n	1e61c <nrf91_socket_create+0x60>
		z_free_fd(fd);
   1e610:	4620      	mov	r0, r4
   1e612:	f7fb fb81 	bl	19d18 <z_free_fd>
		return -1;
   1e616:	f04f 34ff 	mov.w	r4, #4294967295
   1e61a:	e7e5      	b.n	1e5e8 <nrf91_socket_create+0x2c>
	ctx = allocate_ctx(sd);
   1e61c:	f7ff feae 	bl	1e37c <allocate_ctx>
	if (ctx == NULL) {
   1e620:	4601      	mov	r1, r0
   1e622:	b938      	cbnz	r0, 1e634 <nrf91_socket_create+0x78>
		errno = ENOMEM;
   1e624:	f007 fffb 	bl	2661e <__errno>
   1e628:	230c      	movs	r3, #12
   1e62a:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   1e62c:	4628      	mov	r0, r5
   1e62e:	f004 f9bf 	bl	229b0 <nrf_close>
		z_free_fd(fd);
   1e632:	e7ed      	b.n	1e610 <nrf91_socket_create+0x54>
	z_finalize_fd(fd, ctx,
   1e634:	4620      	mov	r0, r4
   1e636:	4a04      	ldr	r2, [pc, #16]	; (1e648 <nrf91_socket_create+0x8c>)
   1e638:	f7fb fb56 	bl	19ce8 <z_finalize_fd>
	return fd;
   1e63c:	e7d4      	b.n	1e5e8 <nrf91_socket_create+0x2c>
   1e63e:	bf00      	nop
   1e640:	2000dda5 	.word	0x2000dda5
   1e644:	2000dda4 	.word	0x2000dda4
   1e648:	000293b4 	.word	0x000293b4

0001e64c <nrf_modem_fault_handler>:

LOG_MODULE_DECLARE(nrf_modem, CONFIG_NRF_MODEM_LIB_LOG_LEVEL);

#if CONFIG_NRF_MODEM_LIB_ON_FAULT_DO_NOTHING
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault_info)
{
   1e64c:	b580      	push	{r7, lr}
   1e64e:	af00      	add	r7, sp, #0
	LOG_ERR("Modem error: 0x%x, PC: 0x%x", fault_info->reason, fault_info->program_counter);
   1e650:	b088      	sub	sp, #32
   1e652:	466a      	mov	r2, sp
   1e654:	e9d0 1300 	ldrd	r1, r3, [r0]
   1e658:	61d3      	str	r3, [r2, #28]
   1e65a:	2304      	movs	r3, #4
   1e65c:	4806      	ldr	r0, [pc, #24]	; (1e678 <nrf_modem_fault_handler+0x2c>)
   1e65e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1e662:	f842 3f10 	str.w	r3, [r2, #16]!
   1e666:	2300      	movs	r3, #0
   1e668:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e66c:	4803      	ldr	r0, [pc, #12]	; (1e67c <nrf_modem_fault_handler+0x30>)
   1e66e:	f7fc fb47 	bl	1ad00 <z_impl_z_log_msg_static_create>
}
   1e672:	46bd      	mov	sp, r7
   1e674:	bd80      	pop	{r7, pc}
   1e676:	bf00      	nop
   1e678:	0002a522 	.word	0x0002a522
   1e67c:	000290ec 	.word	0x000290ec

0001e680 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1e680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e684:	4607      	mov	r7, r0
   1e686:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1e688:	2500      	movs	r5, #0
   1e68a:	4e14      	ldr	r6, [pc, #80]	; (1e6dc <dk_set_leds_state.part.0+0x5c>)
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1e68c:	b086      	sub	sp, #24
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1e68e:	fa27 f205 	lsr.w	r2, r7, r5
   1e692:	f012 0201 	ands.w	r2, r2, #1
   1e696:	d117      	bne.n	1e6c8 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1e698:	fa28 f305 	lsr.w	r3, r8, r5
   1e69c:	07db      	lsls	r3, r3, #31
   1e69e:	d515      	bpl.n	1e6cc <dk_set_leds_state.part.0+0x4c>
	return gpio_pin_set(spec->port, spec->pin, value);
   1e6a0:	7931      	ldrb	r1, [r6, #4]
   1e6a2:	6830      	ldr	r0, [r6, #0]
   1e6a4:	f008 fc82 	bl	26fac <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1e6a8:	4604      	mov	r4, r0
   1e6aa:	b178      	cbz	r0, 1e6cc <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   1e6ac:	4b0c      	ldr	r3, [pc, #48]	; (1e6e0 <dk_set_leds_state.part.0+0x60>)
   1e6ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e6b2:	9305      	str	r3, [sp, #20]
   1e6b4:	2302      	movs	r3, #2
   1e6b6:	480b      	ldr	r0, [pc, #44]	; (1e6e4 <dk_set_leds_state.part.0+0x64>)
   1e6b8:	aa04      	add	r2, sp, #16
   1e6ba:	9304      	str	r3, [sp, #16]
   1e6bc:	f008 fc86 	bl	26fcc <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   1e6c0:	4620      	mov	r0, r4
   1e6c2:	b006      	add	sp, #24
   1e6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1e6c8:	2201      	movs	r2, #1
   1e6ca:	e7e9      	b.n	1e6a0 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1e6cc:	3501      	adds	r5, #1
   1e6ce:	2d06      	cmp	r5, #6
   1e6d0:	f106 0608 	add.w	r6, r6, #8
   1e6d4:	d1db      	bne.n	1e68e <dk_set_leds_state.part.0+0xe>
	return 0;
   1e6d6:	2400      	movs	r4, #0
   1e6d8:	e7f2      	b.n	1e6c0 <dk_set_leds_state.part.0+0x40>
   1e6da:	bf00      	nop
   1e6dc:	000293f4 	.word	0x000293f4
   1e6e0:	0002a53e 	.word	0x0002a53e
   1e6e4:	00029034 	.word	0x00029034

0001e6e8 <dk_leds_init>:
{
   1e6e8:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1e6ea:	2500      	movs	r5, #0
   1e6ec:	4e10      	ldr	r6, [pc, #64]	; (1e730 <dk_leds_init+0x48>)
{
   1e6ee:	b086      	sub	sp, #24
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
   1e6f0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1e6f4:	4630      	mov	r0, r6
   1e6f6:	f008 fc44 	bl	26f82 <gpio_pin_configure_dt>
		if (err) {
   1e6fa:	4604      	mov	r4, r0
   1e6fc:	b950      	cbnz	r0, 1e714 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1e6fe:	3501      	adds	r5, #1
   1e700:	2d06      	cmp	r5, #6
   1e702:	f106 0608 	add.w	r6, r6, #8
   1e706:	d1f3      	bne.n	1e6f0 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1e708:	210f      	movs	r1, #15
}
   1e70a:	b006      	add	sp, #24
   1e70c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e710:	f7ff bfb6 	b.w	1e680 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1e714:	4b07      	ldr	r3, [pc, #28]	; (1e734 <dk_leds_init+0x4c>)
   1e716:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e71a:	9305      	str	r3, [sp, #20]
   1e71c:	2302      	movs	r3, #2
   1e71e:	4806      	ldr	r0, [pc, #24]	; (1e738 <dk_leds_init+0x50>)
   1e720:	aa04      	add	r2, sp, #16
   1e722:	9304      	str	r3, [sp, #16]
   1e724:	f008 fc52 	bl	26fcc <z_log_msg_static_create.constprop.0>
}
   1e728:	4620      	mov	r0, r4
   1e72a:	b006      	add	sp, #24
   1e72c:	bd70      	pop	{r4, r5, r6, pc}
   1e72e:	bf00      	nop
   1e730:	000293f4 	.word	0x000293f4
   1e734:	0002a554 	.word	0x0002a554
   1e738:	00029034 	.word	0x00029034

0001e73c <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1e73c:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1e73e:	2805      	cmp	r0, #5
{
   1e740:	460a      	mov	r2, r1
   1e742:	b086      	sub	sp, #24
	if (led_idx >= ARRAY_SIZE(leds)) {
   1e744:	d90e      	bls.n	1e764 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   1e746:	4b12      	ldr	r3, [pc, #72]	; (1e790 <dk_set_led+0x54>)
		return -EINVAL;
   1e748:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   1e74c:	9305      	str	r3, [sp, #20]
   1e74e:	2302      	movs	r3, #2
   1e750:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e754:	480f      	ldr	r0, [pc, #60]	; (1e794 <dk_set_led+0x58>)
   1e756:	aa04      	add	r2, sp, #16
   1e758:	9304      	str	r3, [sp, #16]
   1e75a:	f008 fc37 	bl	26fcc <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1e75e:	4620      	mov	r0, r4
   1e760:	b006      	add	sp, #24
   1e762:	bd10      	pop	{r4, pc}
   1e764:	4b0c      	ldr	r3, [pc, #48]	; (1e798 <dk_set_led+0x5c>)
   1e766:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1e76a:	7909      	ldrb	r1, [r1, #4]
   1e76c:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1e770:	f008 fc1c 	bl	26fac <gpio_pin_set>
	if (err) {
   1e774:	4604      	mov	r4, r0
   1e776:	2800      	cmp	r0, #0
   1e778:	d0f1      	beq.n	1e75e <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   1e77a:	4b08      	ldr	r3, [pc, #32]	; (1e79c <dk_set_led+0x60>)
   1e77c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e780:	9305      	str	r3, [sp, #20]
   1e782:	2302      	movs	r3, #2
   1e784:	4803      	ldr	r0, [pc, #12]	; (1e794 <dk_set_led+0x58>)
   1e786:	aa04      	add	r2, sp, #16
   1e788:	9304      	str	r3, [sp, #16]
   1e78a:	f008 fc1f 	bl	26fcc <z_log_msg_static_create.constprop.0>
   1e78e:	e7e6      	b.n	1e75e <dk_set_led+0x22>
   1e790:	0002a56e 	.word	0x0002a56e
   1e794:	00029034 	.word	0x00029034
   1e798:	000293f4 	.word	0x000293f4
   1e79c:	0002a53e 	.word	0x0002a53e

0001e7a0 <at_monitor_dispatch>:
/* Dispatch AT notifications immediately, or schedules a workqueue task to do that.
 * Keep this function public so that it can be called by tests.
 * This function is called from an ISR.
 */
void at_monitor_dispatch(const char *notif)
{
   1e7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e7a4:	4604      	mov	r4, r0
	struct at_notif_fifo *at_notif;
	size_t sz_needed;

	__ASSERT_NO_MSG(notif != NULL);

	monitored = false;
   1e7a6:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e7a8:	4d24      	ldr	r5, [pc, #144]	; (1e83c <at_monitor_dispatch+0x9c>)
   1e7aa:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1e840 <at_monitor_dispatch+0xa0>
{
   1e7ae:	af00      	add	r7, sp, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e7b0:	4545      	cmp	r5, r8
   1e7b2:	d321      	bcc.n	1e7f8 <at_monitor_dispatch+0x58>
				monitored = true;
			}
		}
	}

	if (!monitored) {
   1e7b4:	b1ee      	cbz	r6, 1e7f2 <at_monitor_dispatch+0x52>
		/* Only copy monitored notifications to save heap */
		return;
	}

	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   1e7b6:	4620      	mov	r0, r4
   1e7b8:	f7fa fc18 	bl	18fec <strlen>

	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   1e7bc:	2200      	movs	r2, #0
   1e7be:	1d41      	adds	r1, r0, #5
   1e7c0:	2300      	movs	r3, #0
   1e7c2:	4820      	ldr	r0, [pc, #128]	; (1e844 <at_monitor_dispatch+0xa4>)
   1e7c4:	f009 fd0e 	bl	281e4 <k_heap_alloc>
	if (!at_notif) {
   1e7c8:	4605      	mov	r5, r0
   1e7ca:	bb50      	cbnz	r0, 1e822 <at_monitor_dispatch+0x82>
		LOG_WRN("No heap space for incoming notification: %s",
   1e7cc:	466e      	mov	r6, sp
   1e7ce:	b088      	sub	sp, #32
   1e7d0:	466a      	mov	r2, sp
   1e7d2:	4b1d      	ldr	r3, [pc, #116]	; (1e848 <at_monitor_dispatch+0xa8>)
   1e7d4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1e7d8:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e7dc:	8393      	strh	r3, [r2, #28]
   1e7de:	4b1b      	ldr	r3, [pc, #108]	; (1e84c <at_monitor_dispatch+0xac>)
   1e7e0:	f842 3f10 	str.w	r3, [r2, #16]!
   1e7e4:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1e7e8:	4603      	mov	r3, r0
   1e7ea:	4819      	ldr	r0, [pc, #100]	; (1e850 <at_monitor_dispatch+0xb0>)
   1e7ec:	f7fc fa88 	bl	1ad00 <z_impl_z_log_msg_static_create>
   1e7f0:	46b5      	mov	sp, r6

	strcpy(at_notif->data, notif);

	k_fifo_put(&at_monitor_fifo, at_notif);
	k_work_submit(&at_monitor_work);
}
   1e7f2:	46bd      	mov	sp, r7
   1e7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return mon->flags.paused;
   1e7f8:	7a2b      	ldrb	r3, [r5, #8]
		if (!is_paused(e) && has_match(e, notif)) {
   1e7fa:	07da      	lsls	r2, r3, #31
   1e7fc:	d405      	bmi.n	1e80a <at_monitor_dispatch+0x6a>
   1e7fe:	6829      	ldr	r1, [r5, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1e800:	b929      	cbnz	r1, 1e80e <at_monitor_dispatch+0x6e>
	return mon->flags.direct;
   1e802:	7a2b      	ldrb	r3, [r5, #8]
			if (is_direct(e)) {
   1e804:	079b      	lsls	r3, r3, #30
   1e806:	d408      	bmi.n	1e81a <at_monitor_dispatch+0x7a>
				monitored = true;
   1e808:	2601      	movs	r6, #1
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e80a:	350c      	adds	r5, #12
   1e80c:	e7d0      	b.n	1e7b0 <at_monitor_dispatch+0x10>
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1e80e:	4620      	mov	r0, r4
   1e810:	f00a f8c7 	bl	289a2 <strstr>
   1e814:	2800      	cmp	r0, #0
   1e816:	d1f4      	bne.n	1e802 <at_monitor_dispatch+0x62>
   1e818:	e7f7      	b.n	1e80a <at_monitor_dispatch+0x6a>
				e->handler(notif);
   1e81a:	4620      	mov	r0, r4
   1e81c:	686b      	ldr	r3, [r5, #4]
   1e81e:	4798      	blx	r3
   1e820:	e7f3      	b.n	1e80a <at_monitor_dispatch+0x6a>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1e822:	4621      	mov	r1, r4
   1e824:	3004      	adds	r0, #4
   1e826:	f00a f883 	bl	28930 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   1e82a:	4629      	mov	r1, r5
   1e82c:	4809      	ldr	r0, [pc, #36]	; (1e854 <at_monitor_dispatch+0xb4>)
   1e82e:	f009 fd95 	bl	2835c <k_queue_append>
	k_work_submit(&at_monitor_work);
   1e832:	4809      	ldr	r0, [pc, #36]	; (1e858 <at_monitor_dispatch+0xb8>)
   1e834:	f005 fd42 	bl	242bc <k_work_submit>
   1e838:	e7db      	b.n	1e7f2 <at_monitor_dispatch+0x52>
   1e83a:	bf00      	nop
   1e83c:	2000c76c 	.word	0x2000c76c
   1e840:	2000c7c0 	.word	0x2000c7c0
   1e844:	2000c828 	.word	0x2000c828
   1e848:	0002a59d 	.word	0x0002a59d
   1e84c:	01000003 	.word	0x01000003
   1e850:	00029014 	.word	0x00029014
   1e854:	2000c924 	.word	0x2000c924
   1e858:	2000c660 	.word	0x2000c660

0001e85c <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   1e85c:	b598      	push	{r3, r4, r7, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1e85e:	480c      	ldr	r0, [pc, #48]	; (1e890 <at_monitor_sys_init+0x34>)
{
   1e860:	af00      	add	r7, sp, #0
	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1e862:	f004 fd51 	bl	23308 <nrf_modem_at_notif_handler_set>
	if (err) {
   1e866:	b178      	cbz	r0, 1e888 <at_monitor_sys_init+0x2c>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   1e868:	466c      	mov	r4, sp
   1e86a:	b088      	sub	sp, #32
   1e86c:	466a      	mov	r2, sp
   1e86e:	4b09      	ldr	r3, [pc, #36]	; (1e894 <at_monitor_sys_init+0x38>)
   1e870:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e874:	2303      	movs	r3, #3
   1e876:	f842 3f10 	str.w	r3, [r2, #16]!
   1e87a:	2300      	movs	r3, #0
   1e87c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e880:	4805      	ldr	r0, [pc, #20]	; (1e898 <at_monitor_sys_init+0x3c>)
   1e882:	f7fc fa3d 	bl	1ad00 <z_impl_z_log_msg_static_create>
   1e886:	46a5      	mov	sp, r4
	}

	return 0;
}
   1e888:	2000      	movs	r0, #0
   1e88a:	46bd      	mov	sp, r7
   1e88c:	bd98      	pop	{r3, r4, r7, pc}
   1e88e:	bf00      	nop
   1e890:	0001e7a1 	.word	0x0001e7a1
   1e894:	0002a5c9 	.word	0x0002a5c9
   1e898:	00029014 	.word	0x00029014

0001e89c <at_monitor_task>:
{
   1e89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   1e8a0:	4e14      	ldr	r6, [pc, #80]	; (1e8f4 <at_monitor_task+0x58>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e8a2:	4f15      	ldr	r7, [pc, #84]	; (1e8f8 <at_monitor_task+0x5c>)
		k_heap_free(&at_monitor_heap, at_notif);
   1e8a4:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1e8fc <at_monitor_task+0x60>
   1e8a8:	2200      	movs	r2, #0
   1e8aa:	2300      	movs	r3, #0
   1e8ac:	4630      	mov	r0, r6
   1e8ae:	f005 fb8d 	bl	23fcc <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   1e8b2:	4605      	mov	r5, r0
   1e8b4:	b9c8      	cbnz	r0, 1e8ea <at_monitor_task+0x4e>
}
   1e8b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
   1e8ba:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   1e8bc:	07da      	lsls	r2, r3, #31
   1e8be:	d406      	bmi.n	1e8ce <at_monitor_task+0x32>
   1e8c0:	079b      	lsls	r3, r3, #30
   1e8c2:	d404      	bmi.n	1e8ce <at_monitor_task+0x32>
   1e8c4:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1e8c6:	b951      	cbnz	r1, 1e8de <at_monitor_task+0x42>
				e->handler(at_notif->data);
   1e8c8:	4648      	mov	r0, r9
   1e8ca:	6863      	ldr	r3, [r4, #4]
   1e8cc:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e8ce:	340c      	adds	r4, #12
   1e8d0:	42bc      	cmp	r4, r7
   1e8d2:	d3f2      	bcc.n	1e8ba <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
   1e8d4:	4629      	mov	r1, r5
   1e8d6:	4640      	mov	r0, r8
   1e8d8:	f009 fc8e 	bl	281f8 <k_heap_free>
   1e8dc:	e7e4      	b.n	1e8a8 <at_monitor_task+0xc>
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1e8de:	4648      	mov	r0, r9
   1e8e0:	f00a f85f 	bl	289a2 <strstr>
   1e8e4:	2800      	cmp	r0, #0
   1e8e6:	d1ef      	bne.n	1e8c8 <at_monitor_task+0x2c>
   1e8e8:	e7f1      	b.n	1e8ce <at_monitor_task+0x32>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e8ea:	4c05      	ldr	r4, [pc, #20]	; (1e900 <at_monitor_task+0x64>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   1e8ec:	f105 0904 	add.w	r9, r5, #4
   1e8f0:	e7ee      	b.n	1e8d0 <at_monitor_task+0x34>
   1e8f2:	bf00      	nop
   1e8f4:	2000c924 	.word	0x2000c924
   1e8f8:	2000c7c0 	.word	0x2000c7c0
   1e8fc:	2000c828 	.word	0x2000c828
   1e900:	2000c76c 	.word	0x2000c76c

0001e904 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   1e904:	4b09      	ldr	r3, [pc, #36]	; (1e92c <is_valid_notification_char+0x28>)
   1e906:	5c1b      	ldrb	r3, [r3, r0]
   1e908:	f003 0303 	and.w	r3, r3, #3
   1e90c:	2b02      	cmp	r3, #2
   1e90e:	bf08      	it	eq
   1e910:	3820      	subeq	r0, #32
   1e912:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
   1e914:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1e918:	2b19      	cmp	r3, #25
   1e91a:	d904      	bls.n	1e926 <is_valid_notification_char+0x22>
   1e91c:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   1e920:	4258      	negs	r0, r3
   1e922:	4158      	adcs	r0, r3
   1e924:	4770      	bx	lr
		return true;
   1e926:	2001      	movs	r0, #1
	}

	return false;
}
   1e928:	4770      	bx	lr
   1e92a:	bf00      	nop
   1e92c:	0002b6b6 	.word	0x0002b6b6

0001e930 <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1e930:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
   1e934:	b2db      	uxtb	r3, r3
   1e936:	2b11      	cmp	r3, #17
   1e938:	bf9d      	ittte	ls
   1e93a:	4803      	ldrls	r0, [pc, #12]	; (1e948 <is_separator+0x18>)
   1e93c:	40d8      	lsrls	r0, r3
   1e93e:	f000 0001 	andls.w	r0, r0, #1
{
   1e942:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
   1e944:	4770      	bx	lr
   1e946:	bf00      	nop
   1e948:	00024001 	.word	0x00024001

0001e94c <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   1e94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e94e:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1e950:	2400      	movs	r4, #0
   1e952:	4e09      	ldr	r6, [pc, #36]	; (1e978 <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   1e954:	f856 7b04 	ldr.w	r7, [r6], #4
   1e958:	4638      	mov	r0, r7
   1e95a:	f7fa fb47 	bl	18fec <strlen>
   1e95e:	4639      	mov	r1, r7
   1e960:	4602      	mov	r2, r0
   1e962:	4628      	mov	r0, r5
   1e964:	f009 ffec 	bl	28940 <strncmp>
		if (!diff) {
   1e968:	b120      	cbz	r0, 1e974 <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1e96a:	3401      	adds	r4, #1
   1e96c:	2c04      	cmp	r4, #4
   1e96e:	d1f1      	bne.n	1e954 <is_result+0x8>
			return true;
		}
	}

	return false;
   1e970:	2000      	movs	r0, #0
}
   1e972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
   1e974:	2001      	movs	r0, #1
   1e976:	e7fc      	b.n	1e972 <is_result+0x26>
   1e978:	00029424 	.word	0x00029424

0001e97c <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   1e97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   1e980:	6804      	ldr	r4, [r0, #0]
{
   1e982:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e984:	7823      	ldrb	r3, [r4, #0]
   1e986:	4680      	mov	r8, r0
   1e988:	460e      	mov	r6, r1
   1e98a:	4615      	mov	r5, r2
	const char *tmpstr = *str;
   1e98c:	9400      	str	r4, [sp, #0]
   1e98e:	2b00      	cmp	r3, #0
   1e990:	f000 80cd 	beq.w	1eb2e <at_parse_process_element+0x1b2>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1e994:	4b67      	ldr	r3, [pc, #412]	; (1eb34 <at_parse_process_element+0x1b8>)
   1e996:	781b      	ldrb	r3, [r3, #0]
   1e998:	2b06      	cmp	r3, #6
   1e99a:	d113      	bne.n	1e9c4 <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
   1e99c:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
   1e99e:	1c62      	adds	r2, r4, #1
   1e9a0:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
   1e9a2:	4611      	mov	r1, r2
   1e9a4:	4607      	mov	r7, r0
   1e9a6:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e9aa:	f7ff ffab 	bl	1e904 <is_valid_notification_char>
   1e9ae:	2800      	cmp	r0, #0
   1e9b0:	d1f7      	bne.n	1e9a2 <at_parse_process_element+0x26>
   1e9b2:	b107      	cbz	r7, 1e9b6 <at_parse_process_element+0x3a>
   1e9b4:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1e9b6:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1e9b8:	4622      	mov	r2, r4
   1e9ba:	4631      	mov	r1, r6
   1e9bc:	4628      	mov	r0, r5
   1e9be:	f008 fbac 	bl	2711a <at_params_string_put>
   1e9c2:	e046      	b.n	1ea52 <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
   1e9c4:	3b01      	subs	r3, #1
   1e9c6:	2b08      	cmp	r3, #8
   1e9c8:	d843      	bhi.n	1ea52 <at_parse_process_element+0xd6>
   1e9ca:	e8df f003 	tbb	[pc, r3]
   1e9ce:	4964      	.short	0x4964
   1e9d0:	420da05a 	.word	0x420da05a
   1e9d4:	3f1c      	.short	0x3f1c
   1e9d6:	05          	.byte	0x05
   1e9d7:	00          	.byte	0x00
   1e9d8:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
   1e9da:	2100      	movs	r1, #0
   1e9dc:	4613      	mov	r3, r2
   1e9de:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e9e2:	b160      	cbz	r0, 1e9fe <at_parse_process_element+0x82>
   1e9e4:	2101      	movs	r1, #1
   1e9e6:	e7f9      	b.n	1e9dc <at_parse_process_element+0x60>
   1e9e8:	4622      	mov	r2, r4
   1e9ea:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
   1e9ec:	4f52      	ldr	r7, [pc, #328]	; (1eb38 <at_parse_process_element+0x1bc>)
   1e9ee:	4613      	mov	r3, r2
   1e9f0:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e9f4:	5c38      	ldrb	r0, [r7, r0]
   1e9f6:	f010 0f44 	tst.w	r0, #68	; 0x44
   1e9fa:	f040 8096 	bne.w	1eb2a <at_parse_process_element+0x1ae>
   1e9fe:	b101      	cbz	r1, 1ea02 <at_parse_process_element+0x86>
   1ea00:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1ea02:	1b1b      	subs	r3, r3, r4
   1ea04:	e7d8      	b.n	1e9b8 <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
   1ea06:	4668      	mov	r0, sp
   1ea08:	f008 fafe 	bl	27008 <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
   1ea0c:	2200      	movs	r2, #0
   1ea0e:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   1ea10:	4849      	ldr	r0, [pc, #292]	; (1eb38 <at_parse_process_element+0x1bc>)
   1ea12:	461f      	mov	r7, r3
   1ea14:	f813 1b01 	ldrb.w	r1, [r3], #1
   1ea18:	5c41      	ldrb	r1, [r0, r1]
   1ea1a:	0749      	lsls	r1, r1, #29
   1ea1c:	d110      	bne.n	1ea40 <at_parse_process_element+0xc4>
   1ea1e:	b102      	cbz	r2, 1ea22 <at_parse_process_element+0xa6>
   1ea20:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1ea22:	1b3b      	subs	r3, r7, r4
   1ea24:	4622      	mov	r2, r4
   1ea26:	4631      	mov	r1, r6
   1ea28:	4628      	mov	r0, r5
   1ea2a:	f008 fb76 	bl	2711a <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1ea2e:	783b      	ldrb	r3, [r7, #0]
   1ea30:	2b3d      	cmp	r3, #61	; 0x3d
   1ea32:	d107      	bne.n	1ea44 <at_parse_process_element+0xc8>
   1ea34:	787b      	ldrb	r3, [r7, #1]
   1ea36:	2b3f      	cmp	r3, #63	; 0x3f
   1ea38:	d10b      	bne.n	1ea52 <at_parse_process_element+0xd6>
			tmpstr += 2;
   1ea3a:	3702      	adds	r7, #2
		tmpstr++;
   1ea3c:	9700      	str	r7, [sp, #0]
   1ea3e:	e008      	b.n	1ea52 <at_parse_process_element+0xd6>
   1ea40:	2201      	movs	r2, #1
   1ea42:	e7e6      	b.n	1ea12 <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1ea44:	2b3f      	cmp	r3, #63	; 0x3f
   1ea46:	d104      	bne.n	1ea52 <at_parse_process_element+0xd6>
			tmpstr++;
   1ea48:	3701      	adds	r7, #1
   1ea4a:	e7f7      	b.n	1ea3c <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
   1ea4c:	4628      	mov	r0, r5
   1ea4e:	f008 fb3a 	bl	270c6 <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1ea52:	2000      	movs	r0, #0
	*str = tmpstr;
   1ea54:	9b00      	ldr	r3, [sp, #0]
   1ea56:	f8c8 3000 	str.w	r3, [r8]
}
   1ea5a:	b023      	add	sp, #140	; 0x8c
   1ea5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
   1ea60:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1ea62:	783a      	ldrb	r2, [r7, #0]
   1ea64:	4610      	mov	r0, r2
   1ea66:	f008 fac6 	bl	26ff6 <is_lfcr>
   1ea6a:	463b      	mov	r3, r7
			tmpstr++;
   1ea6c:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1ea6e:	b908      	cbnz	r0, 1ea74 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1ea70:	2a00      	cmp	r2, #0
   1ea72:	d1f6      	bne.n	1ea62 <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
   1ea74:	4622      	mov	r2, r4
   1ea76:	4631      	mov	r1, r6
   1ea78:	4628      	mov	r0, r5
   1ea7a:	1b1b      	subs	r3, r3, r4
   1ea7c:	f008 fb4d 	bl	2711a <at_params_string_put>
   1ea80:	e7dc      	b.n	1ea3c <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
   1ea82:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   1ea84:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   1ea86:	463b      	mov	r3, r7
   1ea88:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
   1ea8a:	f107 0701 	add.w	r7, r7, #1
   1ea8e:	d0f1      	beq.n	1ea74 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1ea90:	2a00      	cmp	r2, #0
   1ea92:	d1f7      	bne.n	1ea84 <at_parse_process_element+0x108>
   1ea94:	e7ee      	b.n	1ea74 <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1ea96:	4620      	mov	r0, r4
   1ea98:	220a      	movs	r2, #10
   1ea9a:	a901      	add	r1, sp, #4
   1ea9c:	f006 fc72 	bl	25384 <strtoul>
   1eaa0:	2401      	movs	r4, #1
		tmpstr = next;
   1eaa2:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1eaa4:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1eaa6:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   1eaa8:	9b00      	ldr	r3, [sp, #0]
   1eaaa:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   1eaac:	2829      	cmp	r0, #41	; 0x29
   1eaae:	d023      	beq.n	1eaf8 <at_parse_process_element+0x17c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1eab0:	b310      	cbz	r0, 1eaf8 <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1eab2:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
   1eab6:	f7ff ff3b 	bl	1e930 <is_separator>
				tmparray[i++] =
   1eaba:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
   1eabe:	b908      	cbnz	r0, 1eac4 <at_parse_process_element+0x148>
					tmpstr = next;
   1eac0:	4627      	mov	r7, r4
   1eac2:	e017      	b.n	1eaf4 <at_parse_process_element+0x178>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1eac4:	220a      	movs	r2, #10
   1eac6:	a901      	add	r1, sp, #4
   1eac8:	4648      	mov	r0, r9
   1eaca:	f006 fc5b 	bl	25384 <strtoul>
				tmparray[i++] =
   1eace:	ab22      	add	r3, sp, #136	; 0x88
   1ead0:	1c67      	adds	r7, r4, #1
   1ead2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1ead6:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1eada:	4648      	mov	r0, r9
   1eadc:	f7fa fa86 	bl	18fec <strlen>
   1eae0:	4604      	mov	r4, r0
   1eae2:	9801      	ldr	r0, [sp, #4]
   1eae4:	f7fa fa82 	bl	18fec <strlen>
   1eae8:	4284      	cmp	r4, r0
   1eaea:	d006      	beq.n	1eafa <at_parse_process_element+0x17e>
					tmpstr = next;
   1eaec:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1eaee:	2f20      	cmp	r7, #32
					tmpstr = next;
   1eaf0:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1eaf2:	d002      	beq.n	1eafa <at_parse_process_element+0x17e>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1eaf4:	463c      	mov	r4, r7
   1eaf6:	e7d7      	b.n	1eaa8 <at_parse_process_element+0x12c>
   1eaf8:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   1eafa:	00bb      	lsls	r3, r7, #2
   1eafc:	4631      	mov	r1, r6
   1eafe:	4628      	mov	r0, r5
   1eb00:	aa02      	add	r2, sp, #8
   1eb02:	f008 fb2d 	bl	27160 <at_params_array_put>
		tmpstr++;
   1eb06:	9b00      	ldr	r3, [sp, #0]
   1eb08:	3301      	adds	r3, #1
   1eb0a:	9300      	str	r3, [sp, #0]
   1eb0c:	e7a1      	b.n	1ea52 <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1eb0e:	220a      	movs	r2, #10
   1eb10:	4620      	mov	r0, r4
   1eb12:	a902      	add	r1, sp, #8
   1eb14:	f006 fbba 	bl	2528c <strtoll>
   1eb18:	460b      	mov	r3, r1
		tmpstr = next;
   1eb1a:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1eb1c:	4602      	mov	r2, r0
		tmpstr = next;
   1eb1e:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   1eb20:	4628      	mov	r0, r5
   1eb22:	4631      	mov	r1, r6
   1eb24:	f008 fae4 	bl	270f0 <at_params_int_put>
   1eb28:	e793      	b.n	1ea52 <at_parse_process_element+0xd6>
   1eb2a:	2101      	movs	r1, #1
   1eb2c:	e75f      	b.n	1e9ee <at_parse_process_element+0x72>
		return -1;
   1eb2e:	f04f 30ff 	mov.w	r0, #4294967295
   1eb32:	e792      	b.n	1ea5a <at_parse_process_element+0xde>
   1eb34:	2000dda7 	.word	0x2000dda7
   1eb38:	0002b6b6 	.word	0x0002b6b6

0001eb3c <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1eb3c:	b510      	push	{r4, lr}
   1eb3e:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1eb40:	f7fa fa54 	bl	18fec <strlen>
   1eb44:	2801      	cmp	r0, #1
   1eb46:	d921      	bls.n	1eb8c <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   1eb48:	7823      	ldrb	r3, [r4, #0]
   1eb4a:	4912      	ldr	r1, [pc, #72]	; (1eb94 <is_command+0x58>)
   1eb4c:	5cca      	ldrb	r2, [r1, r3]
   1eb4e:	f002 0203 	and.w	r2, r2, #3
   1eb52:	2a02      	cmp	r2, #2
   1eb54:	bf08      	it	eq
   1eb56:	3b20      	subeq	r3, #32
   1eb58:	2b41      	cmp	r3, #65	; 0x41
   1eb5a:	d117      	bne.n	1eb8c <is_command+0x50>
   1eb5c:	7863      	ldrb	r3, [r4, #1]
   1eb5e:	5cca      	ldrb	r2, [r1, r3]
   1eb60:	f002 0203 	and.w	r2, r2, #3
   1eb64:	2a02      	cmp	r2, #2
   1eb66:	bf08      	it	eq
   1eb68:	3b20      	subeq	r3, #32
   1eb6a:	2b54      	cmp	r3, #84	; 0x54
   1eb6c:	d10e      	bne.n	1eb8c <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1eb6e:	78a2      	ldrb	r2, [r4, #2]
   1eb70:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1eb74:	2b23      	cmp	r3, #35	; 0x23
   1eb76:	d00b      	beq.n	1eb90 <is_command+0x54>
   1eb78:	2a25      	cmp	r2, #37	; 0x25
   1eb7a:	d009      	beq.n	1eb90 <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1eb7c:	4610      	mov	r0, r2
   1eb7e:	f008 fa3a 	bl	26ff6 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1eb82:	b910      	cbnz	r0, 1eb8a <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1eb84:	fab2 f082 	clz	r0, r2
   1eb88:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1eb8a:	bd10      	pop	{r4, pc}
		return false;
   1eb8c:	2000      	movs	r0, #0
   1eb8e:	e7fc      	b.n	1eb8a <is_command+0x4e>
		return true;
   1eb90:	2001      	movs	r0, #1
   1eb92:	e7fa      	b.n	1eb8a <is_command+0x4e>
   1eb94:	0002b6b6 	.word	0x0002b6b6

0001eb98 <at_parse_detect_type>:
{
   1eb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb9c:	4606      	mov	r6, r0
	const char *tmpstr = *str;
   1eb9e:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1eba0:	f8df 818c 	ldr.w	r8, [pc, #396]	; 1ed30 <at_parse_detect_type+0x198>
   1eba4:	2900      	cmp	r1, #0
   1eba6:	d13d      	bne.n	1ec24 <at_parse_detect_type+0x8c>
   1eba8:	7820      	ldrb	r0, [r4, #0]
   1ebaa:	f008 fa18 	bl	26fde <is_notification>
   1ebae:	4f61      	ldr	r7, [pc, #388]	; (1ed34 <at_parse_detect_type+0x19c>)
   1ebb0:	4605      	mov	r5, r0
   1ebb2:	b360      	cbz	r0, 1ec0e <at_parse_detect_type+0x76>
	state = new_state;
   1ebb4:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1ebb6:	2205      	movs	r2, #5
   1ebb8:	4620      	mov	r0, r4
   1ebba:	495f      	ldr	r1, [pc, #380]	; (1ed38 <at_parse_detect_type+0x1a0>)
	state = new_state;
   1ebbc:	703b      	strb	r3, [r7, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1ebbe:	f009 febf 	bl	28940 <strncmp>
   1ebc2:	b1f8      	cbz	r0, 1ec04 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1ebc4:	2205      	movs	r2, #5
   1ebc6:	4620      	mov	r0, r4
   1ebc8:	495c      	ldr	r1, [pc, #368]	; (1ed3c <at_parse_detect_type+0x1a4>)
   1ebca:	f009 feb9 	bl	28940 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1ebce:	b1c8      	cbz	r0, 1ec04 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1ebd0:	220b      	movs	r2, #11
   1ebd2:	4620      	mov	r0, r4
   1ebd4:	495a      	ldr	r1, [pc, #360]	; (1ed40 <at_parse_detect_type+0x1a8>)
   1ebd6:	f009 feb3 	bl	28940 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1ebda:	b198      	cbz	r0, 1ec04 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1ebdc:	220a      	movs	r2, #10
   1ebde:	4620      	mov	r0, r4
   1ebe0:	4958      	ldr	r1, [pc, #352]	; (1ed44 <at_parse_detect_type+0x1ac>)
   1ebe2:	f009 fead 	bl	28940 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1ebe6:	b168      	cbz	r0, 1ec04 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1ebe8:	220b      	movs	r2, #11
   1ebea:	4620      	mov	r0, r4
   1ebec:	4956      	ldr	r1, [pc, #344]	; (1ed48 <at_parse_detect_type+0x1b0>)
   1ebee:	f009 fea7 	bl	28940 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1ebf2:	b138      	cbz	r0, 1ec04 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   1ebf4:	2207      	movs	r2, #7
   1ebf6:	4620      	mov	r0, r4
   1ebf8:	4954      	ldr	r1, [pc, #336]	; (1ed4c <at_parse_detect_type+0x1b4>)
   1ebfa:	f009 fea1 	bl	28940 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1ebfe:	fab0 f580 	clz	r5, r0
   1ec02:	096d      	lsrs	r5, r5, #5
		set_type_string = check_response_for_forced_string(tmpstr);
   1ec04:	f888 5000 	strb.w	r5, [r8]
	return 0;
   1ec08:	2000      	movs	r0, #0
	*str = tmpstr;
   1ec0a:	6034      	str	r4, [r6, #0]
	return 0;
   1ec0c:	e04c      	b.n	1eca8 <at_parse_detect_type+0x110>
	} else if (set_type_string) {
   1ec0e:	f898 3000 	ldrb.w	r3, [r8]
   1ec12:	b953      	cbnz	r3, 1ec2a <at_parse_detect_type+0x92>
	} else if ((index == 0) && is_command(tmpstr)) {
   1ec14:	4620      	mov	r0, r4
   1ec16:	f7ff ff91 	bl	1eb3c <is_command>
   1ec1a:	2800      	cmp	r0, #0
   1ec1c:	d04e      	beq.n	1ecbc <at_parse_detect_type+0x124>
	state = new_state;
   1ec1e:	2307      	movs	r3, #7
   1ec20:	703b      	strb	r3, [r7, #0]
}
   1ec22:	e7f1      	b.n	1ec08 <at_parse_detect_type+0x70>
	} else if (set_type_string) {
   1ec24:	f898 3000 	ldrb.w	r3, [r8]
   1ec28:	b11b      	cbz	r3, 1ec32 <at_parse_detect_type+0x9a>
	state = new_state;
   1ec2a:	2202      	movs	r2, #2
   1ec2c:	4b41      	ldr	r3, [pc, #260]	; (1ed34 <at_parse_detect_type+0x19c>)
   1ec2e:	701a      	strb	r2, [r3, #0]
}
   1ec30:	e7ea      	b.n	1ec08 <at_parse_detect_type+0x70>
	} else if ((index > 0) && is_clac(tmpstr)) {
   1ec32:	2900      	cmp	r1, #0
   1ec34:	dd44      	ble.n	1ecc0 <at_parse_detect_type+0x128>
   1ec36:	4622      	mov	r2, r4
   1ec38:	4615      	mov	r5, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   1ec3a:	f812 0b01 	ldrb.w	r0, [r2], #1
   1ec3e:	f008 f9da 	bl	26ff6 <is_lfcr>
   1ec42:	2800      	cmp	r0, #0
   1ec44:	d1f8      	bne.n	1ec38 <at_parse_detect_type+0xa0>
		str++;
	}

	if (strlen(str) < 4) {
   1ec46:	4628      	mov	r0, r5
   1ec48:	f7fa f9d0 	bl	18fec <strlen>
   1ec4c:	2803      	cmp	r0, #3
   1ec4e:	d92d      	bls.n	1ecac <at_parse_detect_type+0x114>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1ec50:	782b      	ldrb	r3, [r5, #0]
   1ec52:	4a3f      	ldr	r2, [pc, #252]	; (1ed50 <at_parse_detect_type+0x1b8>)
   1ec54:	5cd1      	ldrb	r1, [r2, r3]
   1ec56:	f001 0103 	and.w	r1, r1, #3
   1ec5a:	2902      	cmp	r1, #2
   1ec5c:	bf08      	it	eq
   1ec5e:	3b20      	subeq	r3, #32
   1ec60:	2b41      	cmp	r3, #65	; 0x41
   1ec62:	d123      	bne.n	1ecac <at_parse_detect_type+0x114>
   1ec64:	786b      	ldrb	r3, [r5, #1]
   1ec66:	5cd1      	ldrb	r1, [r2, r3]
   1ec68:	f001 0103 	and.w	r1, r1, #3
   1ec6c:	2902      	cmp	r1, #2
   1ec6e:	bf08      	it	eq
   1ec70:	3b20      	subeq	r3, #32
   1ec72:	2b54      	cmp	r3, #84	; 0x54
   1ec74:	d11a      	bne.n	1ecac <at_parse_detect_type+0x114>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   1ec76:	78ab      	ldrb	r3, [r5, #2]
   1ec78:	5cd1      	ldrb	r1, [r2, r3]
   1ec7a:	f001 0103 	and.w	r1, r1, #3
   1ec7e:	2902      	cmp	r1, #2
   1ec80:	bf08      	it	eq
   1ec82:	3b20      	subeq	r3, #32
   1ec84:	2b2b      	cmp	r3, #43	; 0x2b
   1ec86:	d00a      	beq.n	1ec9e <at_parse_detect_type+0x106>
   1ec88:	2b25      	cmp	r3, #37	; 0x25
   1ec8a:	d10f      	bne.n	1ecac <at_parse_detect_type+0x114>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   1ec8c:	78eb      	ldrb	r3, [r5, #3]
   1ec8e:	5cd2      	ldrb	r2, [r2, r3]
   1ec90:	f002 0203 	and.w	r2, r2, #3
   1ec94:	2a02      	cmp	r2, #2
   1ec96:	bf08      	it	eq
   1ec98:	3b20      	subeq	r3, #32
   1ec9a:	2b58      	cmp	r3, #88	; 0x58
   1ec9c:	d006      	beq.n	1ecac <at_parse_detect_type+0x114>
	state = new_state;
   1ec9e:	2209      	movs	r2, #9
		return -2;
   1eca0:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   1eca4:	4b23      	ldr	r3, [pc, #140]	; (1ed34 <at_parse_detect_type+0x19c>)
   1eca6:	701a      	strb	r2, [r3, #0]
}
   1eca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1ecac:	7820      	ldrb	r0, [r4, #0]
   1ecae:	f008 f996 	bl	26fde <is_notification>
   1ecb2:	b128      	cbz	r0, 1ecc0 <at_parse_detect_type+0x128>
		return -1;
   1ecb4:	f04f 30ff 	mov.w	r0, #4294967295
		*str = tmpstr;
   1ecb8:	6034      	str	r4, [r6, #0]
   1ecba:	e7f5      	b.n	1eca8 <at_parse_detect_type+0x110>
	state = new_state;
   1ecbc:	2302      	movs	r3, #2
   1ecbe:	e7af      	b.n	1ec20 <at_parse_detect_type+0x88>
	} else if (is_number(*tmpstr)) {
   1ecc0:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   1ecc2:	4b23      	ldr	r3, [pc, #140]	; (1ed50 <at_parse_detect_type+0x1b8>)
   1ecc4:	5c9b      	ldrb	r3, [r3, r2]
   1ecc6:	075b      	lsls	r3, r3, #29
   1ecc8:	d40a      	bmi.n	1ece0 <at_parse_detect_type+0x148>
   1ecca:	2a2d      	cmp	r2, #45	; 0x2d
   1eccc:	d008      	beq.n	1ece0 <at_parse_detect_type+0x148>
   1ecce:	2a2b      	cmp	r2, #43	; 0x2b
   1ecd0:	d006      	beq.n	1ece0 <at_parse_detect_type+0x148>
	if (chr == '"') {
   1ecd2:	2a22      	cmp	r2, #34	; 0x22
   1ecd4:	d107      	bne.n	1ece6 <at_parse_detect_type+0x14e>
	state = new_state;
   1ecd6:	2203      	movs	r2, #3
   1ecd8:	4b16      	ldr	r3, [pc, #88]	; (1ed34 <at_parse_detect_type+0x19c>)
		tmpstr++;
   1ecda:	3401      	adds	r4, #1
	state = new_state;
   1ecdc:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1ecde:	e793      	b.n	1ec08 <at_parse_detect_type+0x70>
	state = new_state;
   1ece0:	2204      	movs	r2, #4
   1ece2:	4b14      	ldr	r3, [pc, #80]	; (1ed34 <at_parse_detect_type+0x19c>)
   1ece4:	e7a3      	b.n	1ec2e <at_parse_detect_type+0x96>
	if (chr == '(') {
   1ece6:	2a28      	cmp	r2, #40	; 0x28
   1ece8:	d104      	bne.n	1ecf4 <at_parse_detect_type+0x15c>
   1ecea:	2201      	movs	r2, #1
   1ecec:	4b11      	ldr	r3, [pc, #68]	; (1ed34 <at_parse_detect_type+0x19c>)
		tmpstr++;
   1ecee:	4414      	add	r4, r2
	state = new_state;
   1ecf0:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1ecf2:	e789      	b.n	1ec08 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1ecf4:	4610      	mov	r0, r2
   1ecf6:	f008 f97e 	bl	26ff6 <is_lfcr>
   1ecfa:	b188      	cbz	r0, 1ed20 <at_parse_detect_type+0x188>
   1ecfc:	490d      	ldr	r1, [pc, #52]	; (1ed34 <at_parse_detect_type+0x19c>)
   1ecfe:	780b      	ldrb	r3, [r1, #0]
   1ed00:	2b04      	cmp	r3, #4
   1ed02:	d10a      	bne.n	1ed1a <at_parse_detect_type+0x182>
   1ed04:	4622      	mov	r2, r4
   1ed06:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
   1ed08:	f812 0b01 	ldrb.w	r0, [r2], #1
   1ed0c:	f008 f973 	bl	26ff6 <is_lfcr>
   1ed10:	2800      	cmp	r0, #0
   1ed12:	d1f8      	bne.n	1ed06 <at_parse_detect_type+0x16e>
	state = new_state;
   1ed14:	2305      	movs	r3, #5
   1ed16:	700b      	strb	r3, [r1, #0]
}
   1ed18:	e776      	b.n	1ec08 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1ed1a:	2b08      	cmp	r3, #8
   1ed1c:	f43f af74 	beq.w	1ec08 <at_parse_detect_type+0x70>
	} else if (is_separator(*tmpstr)) {
   1ed20:	4610      	mov	r0, r2
   1ed22:	f7ff fe05 	bl	1e930 <is_separator>
   1ed26:	2800      	cmp	r0, #0
   1ed28:	d0c4      	beq.n	1ecb4 <at_parse_detect_type+0x11c>
	state = new_state;
   1ed2a:	2208      	movs	r2, #8
   1ed2c:	4b01      	ldr	r3, [pc, #4]	; (1ed34 <at_parse_detect_type+0x19c>)
   1ed2e:	e77e      	b.n	1ec2e <at_parse_detect_type+0x96>
   1ed30:	2000dda6 	.word	0x2000dda6
   1ed34:	2000dda7 	.word	0x2000dda7
   1ed38:	0002a601 	.word	0x0002a601
   1ed3c:	0002a607 	.word	0x0002a607
   1ed40:	0002a60d 	.word	0x0002a60d
   1ed44:	0002a619 	.word	0x0002a619
   1ed48:	0002a624 	.word	0x0002a624
   1ed4c:	0002a630 	.word	0x0002a630
   1ed50:	0002b6b6 	.word	0x0002b6b6

0001ed54 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   1ed54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed58:	4689      	mov	r9, r1
   1ed5a:	4616      	mov	r6, r2
   1ed5c:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1ed5e:	4680      	mov	r8, r0
   1ed60:	2800      	cmp	r0, #0
   1ed62:	f000 809a 	beq.w	1ee9a <at_parser_max_params_from_str+0x146>
   1ed66:	2a00      	cmp	r2, #0
   1ed68:	f000 8097 	beq.w	1ee9a <at_parser_max_params_from_str+0x146>
   1ed6c:	6853      	ldr	r3, [r2, #4]
   1ed6e:	2b00      	cmp	r3, #0
   1ed70:	f000 8093 	beq.w	1ee9a <at_parser_max_params_from_str+0x146>
	state = IDLE;
   1ed74:	2400      	movs	r4, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   1ed76:	4610      	mov	r0, r2
   1ed78:	f008 f980 	bl	2707c <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1ed7c:	4642      	mov	r2, r8
   1ed7e:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   1ed80:	f8cd 8004 	str.w	r8, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   1ed84:	429f      	cmp	r7, r3
   1ed86:	bf28      	it	cs
   1ed88:	461f      	movcs	r7, r3
	state = IDLE;
   1ed8a:	4b45      	ldr	r3, [pc, #276]	; (1eea0 <at_parser_max_params_from_str+0x14c>)
   1ed8c:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
   1ed8e:	4b45      	ldr	r3, [pc, #276]	; (1eea4 <at_parser_max_params_from_str+0x150>)
   1ed90:	701c      	strb	r4, [r3, #0]
   1ed92:	4611      	mov	r1, r2
	while (is_lfcr(*str)) {
   1ed94:	7808      	ldrb	r0, [r1, #0]
   1ed96:	f008 f92e 	bl	26ff6 <is_lfcr>
   1ed9a:	4625      	mov	r5, r4
   1ed9c:	3201      	adds	r2, #1
   1ed9e:	4604      	mov	r4, r0
   1eda0:	2800      	cmp	r0, #0
   1eda2:	d1f6      	bne.n	1ed92 <at_parser_max_params_from_str+0x3e>
   1eda4:	b105      	cbz	r5, 1eda8 <at_parser_max_params_from_str+0x54>
   1eda6:	9101      	str	r1, [sp, #4]
	int index = 0;
   1eda8:	2500      	movs	r5, #0
		if (isspace((int)*str)) {
   1edaa:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 1eea8 <at_parser_max_params_from_str+0x154>
	while ((!is_terminated(*str)) && (index < max_params)) {
   1edae:	9b01      	ldr	r3, [sp, #4]
   1edb0:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1edb2:	2a00      	cmp	r2, #0
   1edb4:	d048      	beq.n	1ee48 <at_parser_max_params_from_str+0xf4>
   1edb6:	42af      	cmp	r7, r5
   1edb8:	d946      	bls.n	1ee48 <at_parser_max_params_from_str+0xf4>
		if (isspace((int)*str)) {
   1edba:	f81b 2002 	ldrb.w	r2, [fp, r2]
		ret = at_parse_detect_type(&str, index);
   1edbe:	4629      	mov	r1, r5
		if (isspace((int)*str)) {
   1edc0:	0712      	lsls	r2, r2, #28
			str++;
   1edc2:	bf48      	it	mi
   1edc4:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   1edc6:	a801      	add	r0, sp, #4
			str++;
   1edc8:	bf48      	it	mi
   1edca:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
   1edcc:	f7ff fee4 	bl	1eb98 <at_parse_detect_type>
		if (ret == -1) {
   1edd0:	1c43      	adds	r3, r0, #1
   1edd2:	d039      	beq.n	1ee48 <at_parser_max_params_from_str+0xf4>
		if (ret == -2) {
   1edd4:	3002      	adds	r0, #2
			index = 0;
   1edd6:	bf08      	it	eq
   1edd8:	2500      	moveq	r5, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   1edda:	4632      	mov	r2, r6
   1eddc:	4629      	mov	r1, r5
   1edde:	a801      	add	r0, sp, #4
			str = *at_params_str;
   1ede0:	bf08      	it	eq
   1ede2:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
   1ede6:	f7ff fdc9 	bl	1e97c <at_parse_process_element>
   1edea:	3001      	adds	r0, #1
   1edec:	d02c      	beq.n	1ee48 <at_parser_max_params_from_str+0xf4>
		if (is_separator(*str)) {
   1edee:	9a01      	ldr	r2, [sp, #4]
   1edf0:	7810      	ldrb	r0, [r2, #0]
   1edf2:	f7ff fd9d 	bl	1e930 <is_separator>
   1edf6:	b1b0      	cbz	r0, 1ee26 <at_parser_max_params_from_str+0xd2>
			if (is_lfcr(*(str + 1))) {
   1edf8:	7850      	ldrb	r0, [r2, #1]
   1edfa:	f008 f8fc 	bl	26ff6 <is_lfcr>
   1edfe:	b178      	cbz	r0, 1ee20 <at_parser_max_params_from_str+0xcc>
				index++;
   1ee00:	3501      	adds	r5, #1
				if (index == max_params) {
   1ee02:	42bd      	cmp	r5, r7
   1ee04:	d03c      	beq.n	1ee80 <at_parser_max_params_from_str+0x12c>
				if (at_parse_detect_type(&str, index) == -1) {
   1ee06:	4629      	mov	r1, r5
   1ee08:	a801      	add	r0, sp, #4
   1ee0a:	f7ff fec5 	bl	1eb98 <at_parse_detect_type>
   1ee0e:	3001      	adds	r0, #1
   1ee10:	d01a      	beq.n	1ee48 <at_parser_max_params_from_str+0xf4>
				if (at_parse_process_element(&str, index,
   1ee12:	4632      	mov	r2, r6
   1ee14:	4629      	mov	r1, r5
   1ee16:	a801      	add	r0, sp, #4
   1ee18:	f7ff fdb0 	bl	1e97c <at_parse_process_element>
   1ee1c:	3001      	adds	r0, #1
   1ee1e:	d013      	beq.n	1ee48 <at_parser_max_params_from_str+0xf4>
			str++;
   1ee20:	9b01      	ldr	r3, [sp, #4]
   1ee22:	3301      	adds	r3, #1
   1ee24:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   1ee26:	9a01      	ldr	r2, [sp, #4]
   1ee28:	7810      	ldrb	r0, [r2, #0]
   1ee2a:	f008 f8e4 	bl	26ff6 <is_lfcr>
   1ee2e:	b310      	cbz	r0, 1ee76 <at_parser_max_params_from_str+0x122>
   1ee30:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   1ee32:	7811      	ldrb	r1, [r2, #0]
   1ee34:	4692      	mov	sl, r2
   1ee36:	4608      	mov	r0, r1
   1ee38:	3201      	adds	r2, #1
   1ee3a:	f008 f8dc 	bl	26ff6 <is_lfcr>
   1ee3e:	2800      	cmp	r0, #0
   1ee40:	d1f7      	bne.n	1ee32 <at_parser_max_params_from_str+0xde>
   1ee42:	b971      	cbnz	r1, 1ee62 <at_parser_max_params_from_str+0x10e>
				str += i;
   1ee44:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   1ee48:	9d01      	ldr	r5, [sp, #4]
	if (oversized) {
   1ee4a:	bb1c      	cbnz	r4, 1ee94 <at_parser_max_params_from_str+0x140>
   1ee4c:	782b      	ldrb	r3, [r5, #0]
   1ee4e:	b9cb      	cbnz	r3, 1ee84 <at_parser_max_params_from_str+0x130>
	return 0;
   1ee50:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1ee52:	f1b9 0f00 	cmp.w	r9, #0
   1ee56:	d001      	beq.n	1ee5c <at_parser_max_params_from_str+0x108>
		*next_param_str = (char *)at_params_str;
   1ee58:	f8c9 5000 	str.w	r5, [r9]
	}

	return err;
}
   1ee5c:	b003      	add	sp, #12
   1ee5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1ee62:	4608      	mov	r0, r1
   1ee64:	f008 f8bb 	bl	26fde <is_notification>
   1ee68:	2800      	cmp	r0, #0
   1ee6a:	d1eb      	bne.n	1ee44 <at_parser_max_params_from_str+0xf0>
			    is_result(str + i)) {
   1ee6c:	4650      	mov	r0, sl
   1ee6e:	f7ff fd6d 	bl	1e94c <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1ee72:	2800      	cmp	r0, #0
   1ee74:	d1e6      	bne.n	1ee44 <at_parser_max_params_from_str+0xf0>
		index++;
   1ee76:	3501      	adds	r5, #1
			oversized = true;
   1ee78:	42bd      	cmp	r5, r7
   1ee7a:	bf08      	it	eq
   1ee7c:	2401      	moveq	r4, #1
   1ee7e:	e796      	b.n	1edae <at_parser_max_params_from_str+0x5a>
					oversized = true;
   1ee80:	4604      	mov	r4, r0
   1ee82:	e7e1      	b.n	1ee48 <at_parser_max_params_from_str+0xf4>
	if (!is_terminated(*str) && !is_result(str)) {
   1ee84:	4628      	mov	r0, r5
   1ee86:	f7ff fd61 	bl	1e94c <is_result>
   1ee8a:	2800      	cmp	r0, #0
   1ee8c:	d1e0      	bne.n	1ee50 <at_parser_max_params_from_str+0xfc>
		return -EAGAIN;
   1ee8e:	f06f 000a 	mvn.w	r0, #10
   1ee92:	e7de      	b.n	1ee52 <at_parser_max_params_from_str+0xfe>
		return -E2BIG;
   1ee94:	f06f 0006 	mvn.w	r0, #6
   1ee98:	e7db      	b.n	1ee52 <at_parser_max_params_from_str+0xfe>
		return -EINVAL;
   1ee9a:	f06f 0015 	mvn.w	r0, #21
   1ee9e:	e7dd      	b.n	1ee5c <at_parser_max_params_from_str+0x108>
   1eea0:	2000dda7 	.word	0x2000dda7
   1eea4:	2000dda6 	.word	0x2000dda6
   1eea8:	0002b6b6 	.word	0x0002b6b6

0001eeac <enable_notifications>:

	event_handler_list_dispatch(&evt);
}

static int enable_notifications(void)
{
   1eeac:	b5b0      	push	{r4, r5, r7, lr}
   1eeae:	b08e      	sub	sp, #56	; 0x38
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   1eeb0:	482c      	ldr	r0, [pc, #176]	; (1ef64 <enable_notifications+0xb8>)
{
   1eeb2:	af00      	add	r7, sp, #0
	err = nrf_modem_at_printf(AT_CEREG_5);
   1eeb4:	f004 fa2e 	bl	23314 <nrf_modem_at_printf>
	if (err) {
   1eeb8:	4604      	mov	r4, r0
   1eeba:	b1a0      	cbz	r0, 1eee6 <enable_notifications+0x3a>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   1eebc:	466d      	mov	r5, sp
   1eebe:	b088      	sub	sp, #32
   1eec0:	466a      	mov	r2, sp
   1eec2:	4b29      	ldr	r3, [pc, #164]	; (1ef68 <enable_notifications+0xbc>)
   1eec4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1eec8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1eecc:	2303      	movs	r3, #3
   1eece:	4827      	ldr	r0, [pc, #156]	; (1ef6c <enable_notifications+0xc0>)
   1eed0:	f842 3f10 	str.w	r3, [r2, #16]!
   1eed4:	f008 f9fc 	bl	272d0 <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1eed8:	f06f 040d 	mvn.w	r4, #13
   1eedc:	46ad      	mov	sp, r5
			LOG_WRN("Current modem firmware version: %s", buf);
		}
	}

	return 0;
}
   1eede:	4620      	mov	r0, r4
   1eee0:	3738      	adds	r7, #56	; 0x38
   1eee2:	46bd      	mov	sp, r7
   1eee4:	bdb0      	pop	{r4, r5, r7, pc}
	err = nrf_modem_at_printf(cscon);
   1eee6:	4822      	ldr	r0, [pc, #136]	; (1ef70 <enable_notifications+0xc4>)
   1eee8:	f004 fa14 	bl	23314 <nrf_modem_at_printf>
	if (err) {
   1eeec:	2800      	cmp	r0, #0
   1eeee:	d0f6      	beq.n	1eede <enable_notifications+0x32>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   1eef0:	466d      	mov	r5, sp
   1eef2:	b088      	sub	sp, #32
   1eef4:	466a      	mov	r2, sp
   1eef6:	4b1f      	ldr	r3, [pc, #124]	; (1ef74 <enable_notifications+0xc8>)
   1eef8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1eefc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ef00:	2303      	movs	r3, #3
   1ef02:	481a      	ldr	r0, [pc, #104]	; (1ef6c <enable_notifications+0xc0>)
   1ef04:	f842 3f10 	str.w	r3, [r2, #16]!
   1ef08:	f008 f9e2 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1ef0c:	46ad      	mov	sp, r5
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   1ef0e:	4b1a      	ldr	r3, [pc, #104]	; (1ef78 <enable_notifications+0xcc>)
   1ef10:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ef14:	617b      	str	r3, [r7, #20]
   1ef16:	2302      	movs	r3, #2
   1ef18:	4814      	ldr	r0, [pc, #80]	; (1ef6c <enable_notifications+0xc0>)
   1ef1a:	f107 0210 	add.w	r2, r7, #16
   1ef1e:	613b      	str	r3, [r7, #16]
   1ef20:	f008 f9d6 	bl	272d0 <z_log_msg_static_create.constprop.0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   1ef24:	2132      	movs	r1, #50	; 0x32
   1ef26:	4638      	mov	r0, r7
   1ef28:	4a14      	ldr	r2, [pc, #80]	; (1ef7c <enable_notifications+0xd0>)
   1ef2a:	f004 fa3f 	bl	233ac <nrf_modem_at_cmd>
		if (err == 0) {
   1ef2e:	2800      	cmp	r0, #0
   1ef30:	d1d5      	bne.n	1eede <enable_notifications+0x32>
			char *end = strstr(buf, "\r\nOK");
   1ef32:	4638      	mov	r0, r7
   1ef34:	4912      	ldr	r1, [pc, #72]	; (1ef80 <enable_notifications+0xd4>)
   1ef36:	f009 fd34 	bl	289a2 <strstr>
			if (end) {
   1ef3a:	b100      	cbz	r0, 1ef3e <enable_notifications+0x92>
				*end = '\0';
   1ef3c:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", buf);
   1ef3e:	466d      	mov	r5, sp
   1ef40:	b088      	sub	sp, #32
   1ef42:	466a      	mov	r2, sp
   1ef44:	4b0f      	ldr	r3, [pc, #60]	; (1ef84 <enable_notifications+0xd8>)
   1ef46:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1ef4a:	e9c2 3705 	strd	r3, r7, [r2, #20]
   1ef4e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ef52:	8393      	strh	r3, [r2, #28]
   1ef54:	4b0c      	ldr	r3, [pc, #48]	; (1ef88 <enable_notifications+0xdc>)
   1ef56:	4805      	ldr	r0, [pc, #20]	; (1ef6c <enable_notifications+0xc0>)
   1ef58:	f842 3f10 	str.w	r3, [r2, #16]!
   1ef5c:	f008 f9b8 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1ef60:	46ad      	mov	sp, r5
   1ef62:	e7bc      	b.n	1eede <enable_notifications+0x32>
   1ef64:	0002a65b 	.word	0x0002a65b
   1ef68:	0002a666 	.word	0x0002a666
   1ef6c:	0002906c 	.word	0x0002906c
   1ef70:	0002aab5 	.word	0x0002aab5
   1ef74:	0002a69c 	.word	0x0002a69c
   1ef78:	0002a6d4 	.word	0x0002a6d4
   1ef7c:	0002a705 	.word	0x0002a705
   1ef80:	0002a70d 	.word	0x0002a70d
   1ef84:	0002a712 	.word	0x0002a712
   1ef88:	01000003 	.word	0x01000003

0001ef8c <at_handler_mdmev>:
{
   1ef8c:	b590      	push	{r4, r7, lr}
   1ef8e:	4604      	mov	r4, r0
   1ef90:	b093      	sub	sp, #76	; 0x4c
   1ef92:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1ef94:	2100      	movs	r1, #0
   1ef96:	2248      	movs	r2, #72	; 0x48
   1ef98:	4638      	mov	r0, r7
   1ef9a:	f009 fcb4 	bl	28906 <memset>
	err = parse_mdmev(response, &evt.modem_evt);
   1ef9e:	4620      	mov	r0, r4
   1efa0:	f107 0108 	add.w	r1, r7, #8
   1efa4:	f001 fbac 	bl	20700 <parse_mdmev>
	if (err) {
   1efa8:	b188      	cbz	r0, 1efce <at_handler_mdmev+0x42>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   1efaa:	466c      	mov	r4, sp
   1efac:	b088      	sub	sp, #32
   1efae:	466a      	mov	r2, sp
   1efb0:	4b0a      	ldr	r3, [pc, #40]	; (1efdc <at_handler_mdmev+0x50>)
   1efb2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1efb6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1efba:	2303      	movs	r3, #3
   1efbc:	4808      	ldr	r0, [pc, #32]	; (1efe0 <at_handler_mdmev+0x54>)
   1efbe:	f842 3f10 	str.w	r3, [r2, #16]!
   1efc2:	f008 f985 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1efc6:	46a5      	mov	sp, r4
}
   1efc8:	374c      	adds	r7, #76	; 0x4c
   1efca:	46bd      	mov	sp, r7
   1efcc:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1efce:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   1efd0:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1efd2:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1efd4:	f000 fbb0 	bl	1f738 <event_handler_list_dispatch>
   1efd8:	e7f6      	b.n	1efc8 <at_handler_mdmev+0x3c>
   1efda:	bf00      	nop
   1efdc:	0002a735 	.word	0x0002a735
   1efe0:	0002906c 	.word	0x0002906c

0001efe4 <at_handler_xmodemsleep>:
{
   1efe4:	b590      	push	{r4, r7, lr}
   1efe6:	4604      	mov	r4, r0
   1efe8:	b093      	sub	sp, #76	; 0x4c
   1efea:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1efec:	2100      	movs	r1, #0
   1efee:	2248      	movs	r2, #72	; 0x48
   1eff0:	4638      	mov	r0, r7
   1eff2:	f009 fc88 	bl	28906 <memset>
	err = parse_xmodemsleep(response, &evt.modem_sleep);
   1eff6:	4620      	mov	r0, r4
   1eff8:	f107 0108 	add.w	r1, r7, #8
   1effc:	f001 fb06 	bl	2060c <parse_xmodemsleep>
	if (err) {
   1f000:	b188      	cbz	r0, 1f026 <at_handler_xmodemsleep+0x42>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   1f002:	466c      	mov	r4, sp
   1f004:	b088      	sub	sp, #32
   1f006:	466a      	mov	r2, sp
   1f008:	4b13      	ldr	r3, [pc, #76]	; (1f058 <at_handler_xmodemsleep+0x74>)
   1f00a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f00e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f012:	2303      	movs	r3, #3
   1f014:	4811      	ldr	r0, [pc, #68]	; (1f05c <at_handler_xmodemsleep+0x78>)
   1f016:	f842 3f10 	str.w	r3, [r2, #16]!
   1f01a:	f008 f959 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1f01e:	46a5      	mov	sp, r4
}
   1f020:	374c      	adds	r7, #76	; 0x4c
   1f022:	46bd      	mov	sp, r7
   1f024:	bd90      	pop	{r4, r7, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   1f026:	7a3b      	ldrb	r3, [r7, #8]
   1f028:	1e5a      	subs	r2, r3, #1
   1f02a:	2a01      	cmp	r2, #1
   1f02c:	d901      	bls.n	1f032 <at_handler_xmodemsleep+0x4e>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   1f02e:	2b04      	cmp	r3, #4
   1f030:	d1f6      	bne.n	1f020 <at_handler_xmodemsleep+0x3c>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   1f032:	e9d7 2104 	ldrd	r2, r1, [r7, #16]
   1f036:	f5a2 539c 	sub.w	r3, r2, #4992	; 0x1380
   1f03a:	3b08      	subs	r3, #8
   1f03c:	430b      	orrs	r3, r1
   1f03e:	d007      	beq.n	1f050 <at_handler_xmodemsleep+0x6c>
	} else if (evt.modem_sleep.time == 0) {
   1f040:	430a      	orrs	r2, r1
   1f042:	d007      	beq.n	1f054 <at_handler_xmodemsleep+0x70>
   1f044:	230a      	movs	r3, #10
	event_handler_list_dispatch(&evt);
   1f046:	4638      	mov	r0, r7
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   1f048:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1f04a:	f000 fb75 	bl	1f738 <event_handler_list_dispatch>
   1f04e:	e7e7      	b.n	1f020 <at_handler_xmodemsleep+0x3c>
   1f050:	2308      	movs	r3, #8
   1f052:	e7f8      	b.n	1f046 <at_handler_xmodemsleep+0x62>
   1f054:	2309      	movs	r3, #9
   1f056:	e7f6      	b.n	1f046 <at_handler_xmodemsleep+0x62>
   1f058:	0002a765 	.word	0x0002a765
   1f05c:	0002906c 	.word	0x0002906c

0001f060 <at_handler_ncellmeas>:
{
   1f060:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f062:	b0ab      	sub	sp, #172	; 0xac
   1f064:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f066:	2100      	movs	r1, #0
   1f068:	2248      	movs	r2, #72	; 0x48
{
   1f06a:	4606      	mov	r6, r0
	struct lte_lc_evt evt = {0};
   1f06c:	f107 0018 	add.w	r0, r7, #24
   1f070:	f009 fc49 	bl	28906 <memset>
	if (event_handler_list_is_empty() || !ncellmeas_ongoing) {
   1f074:	f000 fb58 	bl	1f728 <event_handler_list_is_empty>
   1f078:	4d5e      	ldr	r5, [pc, #376]	; (1f1f4 <at_handler_ncellmeas+0x194>)
   1f07a:	4601      	mov	r1, r0
   1f07c:	b9e0      	cbnz	r0, 1f0b8 <at_handler_ncellmeas+0x58>
   1f07e:	782b      	ldrb	r3, [r5, #0]
   1f080:	b1d3      	cbz	r3, 1f0b8 <at_handler_ncellmeas+0x58>
	if (ncellmeas_params.search_type > LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   1f082:	4c5d      	ldr	r4, [pc, #372]	; (1f1f8 <at_handler_ncellmeas+0x198>)
   1f084:	7823      	ldrb	r3, [r4, #0]
   1f086:	2b03      	cmp	r3, #3
   1f088:	d962      	bls.n	1f150 <at_handler_ncellmeas+0xf0>
	struct lte_lc_evt evt = {0};
   1f08a:	2248      	movs	r2, #72	; 0x48
   1f08c:	f107 0060 	add.w	r0, r7, #96	; 0x60
   1f090:	f009 fc39 	bl	28906 <memset>
	int max_cell_count = ncellmeas_params.gci_count;
   1f094:	7860      	ldrb	r0, [r4, #1]
	if (max_cell_count != 0) {
   1f096:	b1a0      	cbz	r0, 1f0c2 <at_handler_ncellmeas+0x62>
		cells = k_calloc(max_cell_count, sizeof(struct lte_lc_cell));
   1f098:	2130      	movs	r1, #48	; 0x30
   1f09a:	f009 fbf3 	bl	28884 <k_calloc>
		if (cells == NULL) {
   1f09e:	4604      	mov	r4, r0
   1f0a0:	b980      	cbnz	r0, 1f0c4 <at_handler_ncellmeas+0x64>
			LOG_ERR("Failed to allocate memory for the GCI cells");
   1f0a2:	4b56      	ldr	r3, [pc, #344]	; (1f1fc <at_handler_ncellmeas+0x19c>)
   1f0a4:	f107 0210 	add.w	r2, r7, #16
   1f0a8:	617b      	str	r3, [r7, #20]
   1f0aa:	2302      	movs	r3, #2
   1f0ac:	613b      	str	r3, [r7, #16]
			LOG_ERR("Failed to allocate memory for neighbor cells");
   1f0ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f0b2:	4853      	ldr	r0, [pc, #332]	; (1f200 <at_handler_ncellmeas+0x1a0>)
   1f0b4:	f008 f90c 	bl	272d0 <z_log_msg_static_create.constprop.0>
	ncellmeas_ongoing = false;
   1f0b8:	2300      	movs	r3, #0
}
   1f0ba:	37ac      	adds	r7, #172	; 0xac
	ncellmeas_ongoing = false;
   1f0bc:	702b      	strb	r3, [r5, #0]
}
   1f0be:	46bd      	mov	sp, r7
   1f0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct lte_lc_cell *cells = NULL;
   1f0c2:	4604      	mov	r4, r0
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   1f0c4:	f107 0268 	add.w	r2, r7, #104	; 0x68
   1f0c8:	4631      	mov	r1, r6
   1f0ca:	484b      	ldr	r0, [pc, #300]	; (1f1f8 <at_handler_ncellmeas+0x198>)
	evt.cells_info.gci_cells = cells;
   1f0cc:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   1f0d0:	f000 ffd0 	bl	20074 <parse_ncellmeas_gci>
	switch (err) {
   1f0d4:	1dc2      	adds	r2, r0, #7
   1f0d6:	d011      	beq.n	1f0fc <at_handler_ncellmeas+0x9c>
   1f0d8:	2801      	cmp	r0, #1
   1f0da:	d92a      	bls.n	1f132 <at_handler_ncellmeas+0xd2>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1f0dc:	466e      	mov	r6, sp
   1f0de:	b088      	sub	sp, #32
   1f0e0:	466a      	mov	r2, sp
   1f0e2:	4b48      	ldr	r3, [pc, #288]	; (1f204 <at_handler_ncellmeas+0x1a4>)
   1f0e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f0e8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f0ec:	2303      	movs	r3, #3
   1f0ee:	4844      	ldr	r0, [pc, #272]	; (1f200 <at_handler_ncellmeas+0x1a0>)
   1f0f0:	f842 3f10 	str.w	r3, [r2, #16]!
   1f0f4:	f008 f8ec 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1f0f8:	46b5      	mov	sp, r6
   1f0fa:	e021      	b.n	1f140 <at_handler_ncellmeas+0xe0>
		LOG_WRN("Not all neighbor cells could be parsed");
   1f0fc:	466e      	mov	r6, sp
   1f0fe:	4b42      	ldr	r3, [pc, #264]	; (1f208 <at_handler_ncellmeas+0x1a8>)
   1f100:	f107 0210 	add.w	r2, r7, #16
   1f104:	617b      	str	r3, [r7, #20]
   1f106:	2302      	movs	r3, #2
   1f108:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1f10c:	483c      	ldr	r0, [pc, #240]	; (1f200 <at_handler_ncellmeas+0x1a0>)
   1f10e:	613b      	str	r3, [r7, #16]
   1f110:	f008 f8de 	bl	272d0 <z_log_msg_static_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   1f114:	b088      	sub	sp, #32
   1f116:	466a      	mov	r2, sp
   1f118:	4b3c      	ldr	r3, [pc, #240]	; (1f20c <at_handler_ncellmeas+0x1ac>)
   1f11a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1f11e:	6153      	str	r3, [r2, #20]
   1f120:	230a      	movs	r3, #10
   1f122:	6193      	str	r3, [r2, #24]
   1f124:	2303      	movs	r3, #3
   1f126:	4836      	ldr	r0, [pc, #216]	; (1f200 <at_handler_ncellmeas+0x1a0>)
   1f128:	f842 3f10 	str.w	r3, [r2, #16]!
   1f12c:	f008 f8d0 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1f130:	46b5      	mov	sp, r6
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1f132:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1f134:	f107 0060 	add.w	r0, r7, #96	; 0x60
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1f138:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   1f13c:	f000 fafc 	bl	1f738 <event_handler_list_dispatch>
	k_free(cells);
   1f140:	4620      	mov	r0, r4
   1f142:	f009 fb94 	bl	2886e <k_free>
	k_free(evt.cells_info.neighbor_cells);
   1f146:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
		k_free(neighbor_cells);
   1f14a:	f009 fb90 	bl	2886e <k_free>
   1f14e:	e7b3      	b.n	1f0b8 <at_handler_ncellmeas+0x58>
	int ncell_count = neighborcell_count_get(response);
   1f150:	4630      	mov	r0, r6
   1f152:	f000 fdcf 	bl	1fcf4 <neighborcell_count_get>
   1f156:	4604      	mov	r4, r0
	if (ncell_count != 0) {
   1f158:	b158      	cbz	r0, 1f172 <at_handler_ncellmeas+0x112>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   1f15a:	2110      	movs	r1, #16
   1f15c:	f009 fb92 	bl	28884 <k_calloc>
		if (neighbor_cells == NULL) {
   1f160:	4604      	mov	r4, r0
   1f162:	b930      	cbnz	r0, 1f172 <at_handler_ncellmeas+0x112>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   1f164:	4b2a      	ldr	r3, [pc, #168]	; (1f210 <at_handler_ncellmeas+0x1b0>)
   1f166:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1f16a:	677b      	str	r3, [r7, #116]	; 0x74
   1f16c:	2302      	movs	r3, #2
   1f16e:	673b      	str	r3, [r7, #112]	; 0x70
   1f170:	e79d      	b.n	1f0ae <at_handler_ncellmeas+0x4e>
	err = parse_ncellmeas(response, &evt.cells_info);
   1f172:	4630      	mov	r0, r6
   1f174:	f107 0120 	add.w	r1, r7, #32
	evt.cells_info.neighbor_cells = neighbor_cells;
   1f178:	657c      	str	r4, [r7, #84]	; 0x54
	err = parse_ncellmeas(response, &evt.cells_info);
   1f17a:	f000 fde1 	bl	1fd40 <parse_ncellmeas>
	switch (err) {
   1f17e:	1dc3      	adds	r3, r0, #7
   1f180:	d011      	beq.n	1f1a6 <at_handler_ncellmeas+0x146>
   1f182:	2801      	cmp	r0, #1
   1f184:	d92a      	bls.n	1f1dc <at_handler_ncellmeas+0x17c>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1f186:	466e      	mov	r6, sp
   1f188:	b088      	sub	sp, #32
   1f18a:	466a      	mov	r2, sp
   1f18c:	4b1d      	ldr	r3, [pc, #116]	; (1f204 <at_handler_ncellmeas+0x1a4>)
   1f18e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f192:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f196:	2303      	movs	r3, #3
   1f198:	4819      	ldr	r0, [pc, #100]	; (1f200 <at_handler_ncellmeas+0x1a0>)
   1f19a:	f842 3f10 	str.w	r3, [r2, #16]!
   1f19e:	f008 f897 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1f1a2:	46b5      	mov	sp, r6
   1f1a4:	e020      	b.n	1f1e8 <at_handler_ncellmeas+0x188>
		LOG_WRN("Not all neighbor cells could be parsed");
   1f1a6:	466e      	mov	r6, sp
   1f1a8:	4b17      	ldr	r3, [pc, #92]	; (1f208 <at_handler_ncellmeas+0x1a8>)
   1f1aa:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1f1ae:	677b      	str	r3, [r7, #116]	; 0x74
   1f1b0:	2302      	movs	r3, #2
   1f1b2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1f1b6:	4812      	ldr	r0, [pc, #72]	; (1f200 <at_handler_ncellmeas+0x1a0>)
   1f1b8:	673b      	str	r3, [r7, #112]	; 0x70
   1f1ba:	f008 f889 	bl	272d0 <z_log_msg_static_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   1f1be:	b088      	sub	sp, #32
   1f1c0:	466a      	mov	r2, sp
   1f1c2:	4b12      	ldr	r3, [pc, #72]	; (1f20c <at_handler_ncellmeas+0x1ac>)
   1f1c4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1f1c8:	6153      	str	r3, [r2, #20]
   1f1ca:	230a      	movs	r3, #10
   1f1cc:	6193      	str	r3, [r2, #24]
   1f1ce:	2303      	movs	r3, #3
   1f1d0:	480b      	ldr	r0, [pc, #44]	; (1f200 <at_handler_ncellmeas+0x1a0>)
   1f1d2:	f842 3f10 	str.w	r3, [r2, #16]!
   1f1d6:	f008 f87b 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1f1da:	46b5      	mov	sp, r6
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1f1dc:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1f1de:	f107 0018 	add.w	r0, r7, #24
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1f1e2:	763b      	strb	r3, [r7, #24]
		event_handler_list_dispatch(&evt);
   1f1e4:	f000 faa8 	bl	1f738 <event_handler_list_dispatch>
	if (neighbor_cells) {
   1f1e8:	2c00      	cmp	r4, #0
   1f1ea:	f43f af65 	beq.w	1f0b8 <at_handler_ncellmeas+0x58>
		k_free(neighbor_cells);
   1f1ee:	4620      	mov	r0, r4
   1f1f0:	e7ab      	b.n	1f14a <at_handler_ncellmeas+0xea>
   1f1f2:	bf00      	nop
   1f1f4:	2000de4a 	.word	0x2000de4a
   1f1f8:	2000de4b 	.word	0x2000de4b
   1f1fc:	0002a7a1 	.word	0x0002a7a1
   1f200:	0002906c 	.word	0x0002906c
   1f204:	0002a82e 	.word	0x0002a82e
   1f208:	0002a7cd 	.word	0x0002a7cd
   1f20c:	0002a7f4 	.word	0x0002a7f4
   1f210:	0002a858 	.word	0x0002a858

0001f214 <at_handler_xt3412>:
{
   1f214:	b590      	push	{r4, r7, lr}
   1f216:	4604      	mov	r4, r0
   1f218:	b093      	sub	sp, #76	; 0x4c
   1f21a:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f21c:	2100      	movs	r1, #0
   1f21e:	2248      	movs	r2, #72	; 0x48
   1f220:	4638      	mov	r0, r7
   1f222:	f009 fb70 	bl	28906 <memset>
	err = parse_xt3412(response, &evt.time);
   1f226:	4620      	mov	r0, r4
   1f228:	f107 0108 	add.w	r1, r7, #8
   1f22c:	f000 fcf2 	bl	1fc14 <parse_xt3412>
	if (err) {
   1f230:	b188      	cbz	r0, 1f256 <at_handler_xt3412+0x42>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   1f232:	466c      	mov	r4, sp
   1f234:	b088      	sub	sp, #32
   1f236:	466a      	mov	r2, sp
   1f238:	4b0d      	ldr	r3, [pc, #52]	; (1f270 <at_handler_xt3412+0x5c>)
   1f23a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f23e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f242:	2303      	movs	r3, #3
   1f244:	480b      	ldr	r0, [pc, #44]	; (1f274 <at_handler_xt3412+0x60>)
   1f246:	f842 3f10 	str.w	r3, [r2, #16]!
   1f24a:	f008 f841 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1f24e:	46a5      	mov	sp, r4
}
   1f250:	374c      	adds	r7, #76	; 0x4c
   1f252:	46bd      	mov	sp, r7
   1f254:	bd90      	pop	{r4, r7, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   1f256:	68bb      	ldr	r3, [r7, #8]
   1f258:	68fa      	ldr	r2, [r7, #12]
   1f25a:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   1f25e:	3b08      	subs	r3, #8
   1f260:	4313      	orrs	r3, r2
   1f262:	d1f5      	bne.n	1f250 <at_handler_xt3412+0x3c>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1f264:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   1f266:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1f268:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1f26a:	f000 fa65 	bl	1f738 <event_handler_list_dispatch>
   1f26e:	e7ef      	b.n	1f250 <at_handler_xt3412+0x3c>
   1f270:	0002a885 	.word	0x0002a885
   1f274:	0002906c 	.word	0x0002906c

0001f278 <at_handler_cedrxp>:
{
   1f278:	b590      	push	{r4, r7, lr}
   1f27a:	4604      	mov	r4, r0
   1f27c:	b093      	sub	sp, #76	; 0x4c
   1f27e:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f280:	2100      	movs	r1, #0
   1f282:	2248      	movs	r2, #72	; 0x48
   1f284:	4638      	mov	r0, r7
   1f286:	f009 fb3e 	bl	28906 <memset>
	err = parse_edrx(response, &evt.edrx_cfg);
   1f28a:	4620      	mov	r0, r4
   1f28c:	f107 0108 	add.w	r1, r7, #8
   1f290:	f7f9 feb6 	bl	19000 <parse_edrx>
	if (err) {
   1f294:	b188      	cbz	r0, 1f2ba <at_handler_cedrxp+0x42>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   1f296:	466c      	mov	r4, sp
   1f298:	b088      	sub	sp, #32
   1f29a:	466a      	mov	r2, sp
   1f29c:	4b0a      	ldr	r3, [pc, #40]	; (1f2c8 <at_handler_cedrxp+0x50>)
   1f29e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f2a2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f2a6:	2303      	movs	r3, #3
   1f2a8:	4808      	ldr	r0, [pc, #32]	; (1f2cc <at_handler_cedrxp+0x54>)
   1f2aa:	f842 3f10 	str.w	r3, [r2, #16]!
   1f2ae:	f008 f80f 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1f2b2:	46a5      	mov	sp, r4
}
   1f2b4:	374c      	adds	r7, #76	; 0x4c
   1f2b6:	46bd      	mov	sp, r7
   1f2b8:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1f2ba:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   1f2bc:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1f2be:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1f2c0:	f000 fa3a 	bl	1f738 <event_handler_list_dispatch>
   1f2c4:	e7f6      	b.n	1f2b4 <at_handler_cedrxp+0x3c>
   1f2c6:	bf00      	nop
   1f2c8:	0002a8b9 	.word	0x0002a8b9
   1f2cc:	0002906c 	.word	0x0002906c

0001f2d0 <at_handler_cscon>:
{
   1f2d0:	b590      	push	{r4, r7, lr}
   1f2d2:	4604      	mov	r4, r0
   1f2d4:	b093      	sub	sp, #76	; 0x4c
   1f2d6:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f2d8:	2248      	movs	r2, #72	; 0x48
   1f2da:	2100      	movs	r1, #0
   1f2dc:	4638      	mov	r0, r7
   1f2de:	f009 fb12 	bl	28906 <memset>
	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   1f2e2:	2201      	movs	r2, #1
   1f2e4:	4620      	mov	r0, r4
   1f2e6:	f107 0108 	add.w	r1, r7, #8
   1f2ea:	f000 fb03 	bl	1f8f4 <parse_rrc_mode>
	if (err) {
   1f2ee:	b188      	cbz	r0, 1f314 <at_handler_cscon+0x44>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   1f2f0:	466c      	mov	r4, sp
   1f2f2:	b088      	sub	sp, #32
   1f2f4:	466a      	mov	r2, sp
   1f2f6:	4b0a      	ldr	r3, [pc, #40]	; (1f320 <at_handler_cscon+0x50>)
   1f2f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f2fc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f300:	2303      	movs	r3, #3
   1f302:	4808      	ldr	r0, [pc, #32]	; (1f324 <at_handler_cscon+0x54>)
   1f304:	f842 3f10 	str.w	r3, [r2, #16]!
   1f308:	f007 ffe2 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1f30c:	46a5      	mov	sp, r4
}
   1f30e:	374c      	adds	r7, #76	; 0x4c
   1f310:	46bd      	mov	sp, r7
   1f312:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1f314:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   1f316:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1f318:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1f31a:	f000 fa0d 	bl	1f738 <event_handler_list_dispatch>
   1f31e:	e7f6      	b.n	1f30e <at_handler_cscon+0x3e>
   1f320:	0002a8d5 	.word	0x0002a8d5
   1f324:	0002906c 	.word	0x0002906c

0001f328 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   1f328:	2300      	movs	r3, #0
{
   1f32a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f32e:	b090      	sub	sp, #64	; 0x40
   1f330:	af00      	add	r7, sp, #0
   1f332:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   1f334:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   1f336:	e9c7 3301 	strd	r3, r3, [r7, #4]
	char tau_ext_str[9] = {0};
   1f33a:	e9c7 3304 	strd	r3, r3, [r7, #16]
	char tau_legacy_str[9] = {0};
   1f33e:	e9c7 3307 	strd	r3, r3, [r7, #28]
	char active_time_str[9] = {0};
   1f342:	733b      	strb	r3, [r7, #12]
	char tau_ext_str[9] = {0};
   1f344:	763b      	strb	r3, [r7, #24]
	char tau_legacy_str[9] = {0};
   1f346:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if ((tau == NULL) || (active_time == NULL)) {
   1f34a:	2800      	cmp	r0, #0
   1f34c:	d07e      	beq.n	1f44c <lte_lc_psm_get+0x124>
   1f34e:	2900      	cmp	r1, #0
   1f350:	d07c      	beq.n	1f44c <lte_lc_psm_get+0x124>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   1f352:	4c40      	ldr	r4, [pc, #256]	; (1f454 <lte_lc_psm_get+0x12c>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1f354:	21a0      	movs	r1, #160	; 0xa0
   1f356:	4620      	mov	r0, r4
   1f358:	4a3f      	ldr	r2, [pc, #252]	; (1f458 <lte_lc_psm_get+0x130>)
	response[0] = '\0';
   1f35a:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1f35c:	f004 f826 	bl	233ac <nrf_modem_at_cmd>
	if (err) {
   1f360:	b1a8      	cbz	r0, 1f38e <lte_lc_psm_get+0x66>
		LOG_ERR("AT command failed, error: %d", err);
   1f362:	466c      	mov	r4, sp
   1f364:	b088      	sub	sp, #32
   1f366:	466a      	mov	r2, sp
   1f368:	4b3c      	ldr	r3, [pc, #240]	; (1f45c <lte_lc_psm_get+0x134>)
   1f36a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f36e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f372:	2303      	movs	r3, #3
   1f374:	483a      	ldr	r0, [pc, #232]	; (1f460 <lte_lc_psm_get+0x138>)
   1f376:	f842 3f10 	str.w	r3, [r2, #16]!
   1f37a:	f007 ffa9 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1f37e:	46a5      	mov	sp, r4
		return -EFAULT;
   1f380:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec", *tau, *active_time);

	return 0;
}
   1f384:	4620      	mov	r0, r4
   1f386:	3740      	adds	r7, #64	; 0x40
   1f388:	46bd      	mov	sp, r7
   1f38a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	comma_ptr = strchr(response, ch);
   1f38e:	4620      	mov	r0, r4
   1f390:	212c      	movs	r1, #44	; 0x2c
   1f392:	f009 fac0 	bl	28916 <strchr>
	if (!comma_ptr) {
   1f396:	4604      	mov	r4, r0
   1f398:	2800      	cmp	r0, #0
   1f39a:	d048      	beq.n	1f42e <lte_lc_psm_get+0x106>
   1f39c:	f04f 080c 	mov.w	r8, #12
			comma_ptr = strchr(comma_ptr + 1, ch);
   1f3a0:	1c60      	adds	r0, r4, #1
   1f3a2:	212c      	movs	r1, #44	; 0x2c
   1f3a4:	f009 fab7 	bl	28916 <strchr>
	for (int i = 0; i < 12; i++) {
   1f3a8:	f1b8 0801 	subs.w	r8, r8, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   1f3ac:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   1f3ae:	d131      	bne.n	1f414 <lte_lc_psm_get+0xec>
	if (comma_ptr) {
   1f3b0:	b390      	cbz	r0, 1f418 <lte_lc_psm_get+0xf0>
		strncpy(active_time_str, comma_ptr + 2, 8);
   1f3b2:	1c81      	adds	r1, r0, #2
   1f3b4:	2208      	movs	r2, #8
   1f3b6:	1d38      	adds	r0, r7, #4
   1f3b8:	f009 fad4 	bl	28964 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1f3bc:	1c60      	adds	r0, r4, #1
   1f3be:	212c      	movs	r1, #44	; 0x2c
   1f3c0:	f009 faa9 	bl	28916 <strchr>
	if (comma_ptr) {
   1f3c4:	4604      	mov	r4, r0
   1f3c6:	b338      	cbz	r0, 1f418 <lte_lc_psm_get+0xf0>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   1f3c8:	1c81      	adds	r1, r0, #2
   1f3ca:	2208      	movs	r2, #8
   1f3cc:	f107 0010 	add.w	r0, r7, #16
   1f3d0:	f009 fac8 	bl	28964 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1f3d4:	212c      	movs	r1, #44	; 0x2c
   1f3d6:	1c60      	adds	r0, r4, #1
   1f3d8:	f009 fa9d 	bl	28916 <strchr>
	if (comma_ptr) {
   1f3dc:	bb50      	cbnz	r0, 1f434 <lte_lc_psm_get+0x10c>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   1f3de:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1f3e2:	f107 021c 	add.w	r2, r7, #28
   1f3e6:	f107 0110 	add.w	r1, r7, #16
   1f3ea:	1d38      	adds	r0, r7, #4
   1f3ec:	f000 f9ee 	bl	1f7cc <parse_psm>
	if (err) {
   1f3f0:	4604      	mov	r4, r0
   1f3f2:	b330      	cbz	r0, 1f442 <lte_lc_psm_get+0x11a>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   1f3f4:	466d      	mov	r5, sp
   1f3f6:	b088      	sub	sp, #32
   1f3f8:	466a      	mov	r2, sp
   1f3fa:	4b1a      	ldr	r3, [pc, #104]	; (1f464 <lte_lc_psm_get+0x13c>)
   1f3fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f400:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f404:	2303      	movs	r3, #3
   1f406:	4816      	ldr	r0, [pc, #88]	; (1f460 <lte_lc_psm_get+0x138>)
   1f408:	f842 3f10 	str.w	r3, [r2, #16]!
   1f40c:	f007 ff60 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1f410:	46ad      	mov	sp, r5
		return err;
   1f412:	e7b7      	b.n	1f384 <lte_lc_psm_get+0x5c>
		if (comma_ptr) {
   1f414:	2c00      	cmp	r4, #0
   1f416:	d1c3      	bne.n	1f3a0 <lte_lc_psm_get+0x78>
		LOG_ERR("AT command parsing failed");
   1f418:	4b13      	ldr	r3, [pc, #76]	; (1f468 <lte_lc_psm_get+0x140>)
   1f41a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f41e:	63fb      	str	r3, [r7, #60]	; 0x3c
   1f420:	2302      	movs	r3, #2
   1f422:	480f      	ldr	r0, [pc, #60]	; (1f460 <lte_lc_psm_get+0x138>)
   1f424:	63bb      	str	r3, [r7, #56]	; 0x38
   1f426:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1f42a:	f007 ff51 	bl	272d0 <z_log_msg_static_create.constprop.0>
		return -EBADMSG;
   1f42e:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   1f432:	e7a7      	b.n	1f384 <lte_lc_psm_get+0x5c>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   1f434:	1c81      	adds	r1, r0, #2
   1f436:	2208      	movs	r2, #8
   1f438:	f107 001c 	add.w	r0, r7, #28
   1f43c:	f009 fa92 	bl	28964 <strncpy>
   1f440:	e7cd      	b.n	1f3de <lte_lc_psm_get+0xb6>
	*tau = psm_cfg.tau;
   1f442:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f444:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   1f446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f448:	602b      	str	r3, [r5, #0]
	return 0;
   1f44a:	e79b      	b.n	1f384 <lte_lc_psm_get+0x5c>
		return -EINVAL;
   1f44c:	f06f 0415 	mvn.w	r4, #21
   1f450:	e798      	b.n	1f384 <lte_lc_psm_get+0x5c>
   1f452:	bf00      	nop
   1f454:	2000dda8 	.word	0x2000dda8
   1f458:	0002a8fc 	.word	0x0002a8fc
   1f45c:	0002a909 	.word	0x0002a909
   1f460:	0002906c 	.word	0x0002906c
   1f464:	0002a940 	.word	0x0002a940
   1f468:	0002a926 	.word	0x0002a926

0001f46c <at_handler_cereg>:
{
   1f46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	enum lte_lc_nw_reg_status reg_status = 0;
   1f470:	2500      	movs	r5, #0
{
   1f472:	4604      	mov	r4, r0
   1f474:	b0aa      	sub	sp, #168	; 0xa8
   1f476:	af02      	add	r7, sp, #8
	struct lte_lc_evt evt = {0};
   1f478:	2248      	movs	r2, #72	; 0x48
   1f47a:	2100      	movs	r1, #0
   1f47c:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1f480:	f009 fa41 	bl	28906 <memset>
	struct lte_lc_cell cell = {0};
   1f484:	2230      	movs	r2, #48	; 0x30
   1f486:	4629      	mov	r1, r5
   1f488:	f107 0028 	add.w	r0, r7, #40	; 0x28
	enum lte_lc_nw_reg_status reg_status = 0;
   1f48c:	71bd      	strb	r5, [r7, #6]
	struct lte_lc_psm_cfg psm_cfg = {0};
   1f48e:	f107 0808 	add.w	r8, r7, #8
	struct lte_lc_cell cell = {0};
   1f492:	f009 fa38 	bl	28906 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1f496:	1dfb      	adds	r3, r7, #7
	struct lte_lc_psm_cfg psm_cfg = {0};
   1f498:	60bd      	str	r5, [r7, #8]
   1f49a:	f8c8 5004 	str.w	r5, [r8, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1f49e:	2101      	movs	r1, #1
   1f4a0:	9300      	str	r3, [sp, #0]
   1f4a2:	4620      	mov	r0, r4
   1f4a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1f4a8:	1dba      	adds	r2, r7, #6
   1f4aa:	f000 fa95 	bl	1f9d8 <parse_cereg>
	if (err) {
   1f4ae:	b1b0      	cbz	r0, 1f4de <at_handler_cereg+0x72>
		LOG_ERR("Failed to parse notification (error %d): %s",
   1f4b0:	466d      	mov	r5, sp
   1f4b2:	b08a      	sub	sp, #40	; 0x28
   1f4b4:	aa02      	add	r2, sp, #8
   1f4b6:	4b4e      	ldr	r3, [pc, #312]	; (1f5f0 <at_handler_cereg+0x184>)
   1f4b8:	61d4      	str	r4, [r2, #28]
   1f4ba:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f4be:	f240 3301 	movw	r3, #769	; 0x301
   1f4c2:	8413      	strh	r3, [r2, #32]
   1f4c4:	4b4b      	ldr	r3, [pc, #300]	; (1f5f4 <at_handler_cereg+0x188>)
   1f4c6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f4ca:	484b      	ldr	r0, [pc, #300]	; (1f5f8 <at_handler_cereg+0x18c>)
   1f4cc:	f842 3f10 	str.w	r3, [r2, #16]!
   1f4d0:	f007 fefe 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1f4d4:	46ad      	mov	sp, r5
}
   1f4d6:	37a0      	adds	r7, #160	; 0xa0
   1f4d8:	46bd      	mov	sp, r7
   1f4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1f4de:	79bb      	ldrb	r3, [r7, #6]
   1f4e0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1f4e4:	2b01      	cmp	r3, #1
   1f4e6:	d104      	bne.n	1f4f2 <at_handler_cereg+0x86>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   1f4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f4ea:	3301      	adds	r3, #1
   1f4ec:	d162      	bne.n	1f5b4 <at_handler_cereg+0x148>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   1f4ee:	2304      	movs	r3, #4
   1f4f0:	71bb      	strb	r3, [r7, #6]
	if (event_handler_list_is_empty()) {
   1f4f2:	f000 f919 	bl	1f728 <event_handler_list_is_empty>
   1f4f6:	2800      	cmp	r0, #0
   1f4f8:	d1ed      	bne.n	1f4d6 <at_handler_cereg+0x6a>
	if (reg_status != prev_reg_status) {
   1f4fa:	4a40      	ldr	r2, [pc, #256]	; (1f5fc <at_handler_cereg+0x190>)
   1f4fc:	79bb      	ldrb	r3, [r7, #6]
   1f4fe:	7811      	ldrb	r1, [r2, #0]
   1f500:	4299      	cmp	r1, r3
   1f502:	d008      	beq.n	1f516 <at_handler_cereg+0xaa>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1f504:	f887 0058 	strb.w	r0, [r7, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   1f508:	f107 0058 	add.w	r0, r7, #88	; 0x58
		prev_reg_status = reg_status;
   1f50c:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   1f50e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   1f512:	f000 f911 	bl	1f738 <event_handler_list_dispatch>
	if ((cell.id != prev_cell.id) || (cell.tac != prev_cell.tac)) {
   1f516:	4b3a      	ldr	r3, [pc, #232]	; (1f600 <at_handler_cereg+0x194>)
   1f518:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1f51a:	689a      	ldr	r2, [r3, #8]
   1f51c:	4291      	cmp	r1, r2
   1f51e:	d103      	bne.n	1f528 <at_handler_cereg+0xbc>
   1f520:	68db      	ldr	r3, [r3, #12]
   1f522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1f524:	429a      	cmp	r2, r3
   1f526:	d01d      	beq.n	1f564 <at_handler_cereg+0xf8>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   1f528:	2304      	movs	r3, #4
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1f52a:	4d35      	ldr	r5, [pc, #212]	; (1f600 <at_handler_cereg+0x194>)
   1f52c:	f107 0428 	add.w	r4, r7, #40	; 0x28
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   1f530:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1f534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f53a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f53c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1f540:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   1f544:	f107 0660 	add.w	r6, r7, #96	; 0x60
   1f548:	f107 0528 	add.w	r5, r7, #40	; 0x28
   1f54c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f54e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1f550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f552:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1f554:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1f558:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   1f55c:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1f560:	f000 f8ea 	bl	1f738 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   1f564:	4a27      	ldr	r2, [pc, #156]	; (1f604 <at_handler_cereg+0x198>)
   1f566:	79fb      	ldrb	r3, [r7, #7]
   1f568:	7811      	ldrb	r1, [r2, #0]
   1f56a:	4299      	cmp	r1, r3
   1f56c:	d009      	beq.n	1f582 <at_handler_cereg+0x116>
		prev_lte_mode = lte_mode;
   1f56e:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1f570:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   1f572:	f107 0058 	add.w	r0, r7, #88	; 0x58
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1f576:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
		evt.lte_mode = lte_mode;
   1f57a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   1f57e:	f000 f8db 	bl	1f738 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   1f582:	79bb      	ldrb	r3, [r7, #6]
   1f584:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1f588:	2b01      	cmp	r3, #1
   1f58a:	d1a4      	bne.n	1f4d6 <at_handler_cereg+0x6a>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   1f58c:	4640      	mov	r0, r8
   1f58e:	f107 010c 	add.w	r1, r7, #12
   1f592:	f7ff fec9 	bl	1f328 <lte_lc_psm_get>
	if (err) {
   1f596:	b188      	cbz	r0, 1f5bc <at_handler_cereg+0x150>
		if (err != -EBADMSG) {
   1f598:	304d      	adds	r0, #77	; 0x4d
   1f59a:	d09c      	beq.n	1f4d6 <at_handler_cereg+0x6a>
			LOG_ERR("Failed to get PSM information");
   1f59c:	4b1a      	ldr	r3, [pc, #104]	; (1f608 <at_handler_cereg+0x19c>)
   1f59e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f5a2:	627b      	str	r3, [r7, #36]	; 0x24
   1f5a4:	2302      	movs	r3, #2
   1f5a6:	4814      	ldr	r0, [pc, #80]	; (1f5f8 <at_handler_cereg+0x18c>)
   1f5a8:	623b      	str	r3, [r7, #32]
   1f5aa:	f107 0220 	add.w	r2, r7, #32
   1f5ae:	f007 fe8f 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1f5b2:	e790      	b.n	1f4d6 <at_handler_cereg+0x6a>
	z_impl_k_sem_give(sem);
   1f5b4:	4815      	ldr	r0, [pc, #84]	; (1f60c <at_handler_cereg+0x1a0>)
   1f5b6:	f004 fd3d 	bl	24034 <z_impl_k_sem_give>
}
   1f5ba:	e79a      	b.n	1f4f2 <at_handler_cereg+0x86>
	if ((psm_cfg.tau != prev_psm_cfg.tau) ||
   1f5bc:	4b14      	ldr	r3, [pc, #80]	; (1f610 <at_handler_cereg+0x1a4>)
   1f5be:	68b9      	ldr	r1, [r7, #8]
   1f5c0:	681a      	ldr	r2, [r3, #0]
   1f5c2:	4291      	cmp	r1, r2
   1f5c4:	461a      	mov	r2, r3
   1f5c6:	d103      	bne.n	1f5d0 <at_handler_cereg+0x164>
   1f5c8:	685b      	ldr	r3, [r3, #4]
   1f5ca:	68f9      	ldr	r1, [r7, #12]
   1f5cc:	4299      	cmp	r1, r3
   1f5ce:	d082      	beq.n	1f4d6 <at_handler_cereg+0x6a>
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f5d0:	e898 0003 	ldmia.w	r8, {r0, r1}
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   1f5d4:	2301      	movs	r3, #1
   1f5d6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f5da:	f107 0360 	add.w	r3, r7, #96	; 0x60
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f5de:	e882 0003 	stmia.w	r2, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f5e2:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   1f5e6:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1f5ea:	f000 f8a5 	bl	1f738 <event_handler_list_dispatch>
   1f5ee:	e772      	b.n	1f4d6 <at_handler_cereg+0x6a>
   1f5f0:	0002a96d 	.word	0x0002a96d
   1f5f4:	01000004 	.word	0x01000004
   1f5f8:	0002906c 	.word	0x0002906c
   1f5fc:	2000de49 	.word	0x2000de49
   1f600:	2000cec0 	.word	0x2000cec0
   1f604:	2000de48 	.word	0x2000de48
   1f608:	0002a999 	.word	0x0002a999
   1f60c:	2000d44c 	.word	0x2000d44c
   1f610:	2000d444 	.word	0x2000d444

0001f614 <lte_lc_func_mode_set>:

	return 0;
}

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   1f614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	switch (mode) {
   1f618:	2804      	cmp	r0, #4
{
   1f61a:	b086      	sub	sp, #24
   1f61c:	4604      	mov	r4, r0
   1f61e:	af00      	add	r7, sp, #0
	switch (mode) {
   1f620:	d826      	bhi.n	1f670 <lte_lc_func_mode_set+0x5c>
   1f622:	2804      	cmp	r0, #4
   1f624:	d829      	bhi.n	1f67a <lte_lc_func_mode_set+0x66>
   1f626:	e8df f000 	tbb	[pc, r0]
   1f62a:	0a3a      	.short	0x0a3a
   1f62c:	283a      	.short	0x283a
   1f62e:	3a          	.byte	0x3a
   1f62f:	00          	.byte	0x00
   1f630:	2201      	movs	r2, #1
   1f632:	492a      	ldr	r1, [pc, #168]	; (1f6dc <lte_lc_func_mode_set+0xc8>)
   1f634:	409a      	lsls	r2, r3
   1f636:	420a      	tst	r2, r1
   1f638:	d131      	bne.n	1f69e <lte_lc_func_mode_set+0x8a>
   1f63a:	2b01      	cmp	r3, #1
   1f63c:	d11d      	bne.n	1f67a <lte_lc_func_mode_set+0x66>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   1f63e:	f7ff fc35 	bl	1eeac <enable_notifications>
		if (err) {
   1f642:	b360      	cbz	r0, 1f69e <lte_lc_func_mode_set+0x8a>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   1f644:	466c      	mov	r4, sp
   1f646:	b088      	sub	sp, #32
   1f648:	466a      	mov	r2, sp
   1f64a:	4b25      	ldr	r3, [pc, #148]	; (1f6e0 <lte_lc_func_mode_set+0xcc>)
   1f64c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f650:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f654:	2303      	movs	r3, #3
   1f656:	4823      	ldr	r0, [pc, #140]	; (1f6e4 <lte_lc_func_mode_set+0xd0>)
   1f658:	f842 3f10 	str.w	r3, [r2, #16]!
   1f65c:	f007 fe38 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1f660:	46a5      	mov	sp, r4
			return -EFAULT;
   1f662:	f06f 050d 	mvn.w	r5, #13
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   1f666:	4628      	mov	r0, r5
   1f668:	3718      	adds	r7, #24
   1f66a:	46bd      	mov	sp, r7
   1f66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (mode) {
   1f670:	f1a0 0314 	sub.w	r3, r0, #20
   1f674:	b2db      	uxtb	r3, r3
   1f676:	2b18      	cmp	r3, #24
   1f678:	d9da      	bls.n	1f630 <lte_lc_func_mode_set+0x1c>
		LOG_ERR("Invalid functional mode: %d", mode);
   1f67a:	466d      	mov	r5, sp
   1f67c:	b088      	sub	sp, #32
   1f67e:	466a      	mov	r2, sp
   1f680:	4b19      	ldr	r3, [pc, #100]	; (1f6e8 <lte_lc_func_mode_set+0xd4>)
   1f682:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f686:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f68a:	2303      	movs	r3, #3
   1f68c:	4815      	ldr	r0, [pc, #84]	; (1f6e4 <lte_lc_func_mode_set+0xd0>)
   1f68e:	f842 3f10 	str.w	r3, [r2, #16]!
   1f692:	f007 fe1d 	bl	272d0 <z_log_msg_static_create.constprop.0>
   1f696:	46ad      	mov	sp, r5
		return -EINVAL;
   1f698:	f06f 0515 	mvn.w	r5, #21
   1f69c:	e7e3      	b.n	1f666 <lte_lc_func_mode_set+0x52>
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   1f69e:	4621      	mov	r1, r4
   1f6a0:	4812      	ldr	r0, [pc, #72]	; (1f6ec <lte_lc_func_mode_set+0xd8>)
   1f6a2:	f003 fe37 	bl	23314 <nrf_modem_at_printf>
	if (err) {
   1f6a6:	4605      	mov	r5, r0
   1f6a8:	b198      	cbz	r0, 1f6d2 <lte_lc_func_mode_set+0xbe>
		LOG_ERR("Failed to set functional mode. Please check XSYSTEMMODE.");
   1f6aa:	4b11      	ldr	r3, [pc, #68]	; (1f6f0 <lte_lc_func_mode_set+0xdc>)
   1f6ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f6b0:	617b      	str	r3, [r7, #20]
   1f6b2:	2302      	movs	r3, #2
   1f6b4:	480b      	ldr	r0, [pc, #44]	; (1f6e4 <lte_lc_func_mode_set+0xd0>)
   1f6b6:	613b      	str	r3, [r7, #16]
   1f6b8:	f107 0210 	add.w	r2, r7, #16
   1f6bc:	f007 fe08 	bl	272d0 <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1f6c0:	e7cf      	b.n	1f662 <lte_lc_func_mode_set+0x4e>
		e->callback(mode, e->context);
   1f6c2:	e9d6 3100 	ldrd	r3, r1, [r6]
   1f6c6:	4620      	mov	r0, r4
   1f6c8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   1f6ca:	3608      	adds	r6, #8
   1f6cc:	4546      	cmp	r6, r8
   1f6ce:	d3f8      	bcc.n	1f6c2 <lte_lc_func_mode_set+0xae>
   1f6d0:	e7c9      	b.n	1f666 <lte_lc_func_mode_set+0x52>
   1f6d2:	4e08      	ldr	r6, [pc, #32]	; (1f6f4 <lte_lc_func_mode_set+0xe0>)
   1f6d4:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1f6f8 <lte_lc_func_mode_set+0xe4>
   1f6d8:	e7f8      	b.n	1f6cc <lte_lc_func_mode_set+0xb8>
   1f6da:	bf00      	nop
   1f6dc:	01300c01 	.word	0x01300c01
   1f6e0:	0002a9b7 	.word	0x0002a9b7
   1f6e4:	0002906c 	.word	0x0002906c
   1f6e8:	0002a9e1 	.word	0x0002a9e1
   1f6ec:	0002a9fd 	.word	0x0002a9fd
   1f6f0:	0002aa08 	.word	0x0002aa08
   1f6f4:	0002b7ec 	.word	0x0002b7ec
   1f6f8:	0002b7ec 	.word	0x0002b7ec

0001f6fc <lte_lc_deinit>:
{
   1f6fc:	b508      	push	{r3, lr}
	if (is_initialized) {
   1f6fe:	4b06      	ldr	r3, [pc, #24]	; (1f718 <lte_lc_deinit+0x1c>)
   1f700:	781a      	ldrb	r2, [r3, #0]
   1f702:	b122      	cbz	r2, 1f70e <lte_lc_deinit+0x12>
		is_initialized = false;
   1f704:	2000      	movs	r0, #0
   1f706:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   1f708:	f7ff ff84 	bl	1f614 <lte_lc_func_mode_set>
   1f70c:	b908      	cbnz	r0, 1f712 <lte_lc_deinit+0x16>
   1f70e:	2000      	movs	r0, #0
}
   1f710:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   1f712:	f06f 000d 	mvn.w	r0, #13
   1f716:	e7fb      	b.n	1f710 <lte_lc_deinit+0x14>
   1f718:	2000de4d 	.word	0x2000de4d

0001f71c <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1f71c:	4801      	ldr	r0, [pc, #4]	; (1f724 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1f71e:	f004 bc19 	b.w	23f54 <z_impl_k_mutex_unlock>
   1f722:	bf00      	nop
   1f724:	2000c88c 	.word	0x2000c88c

0001f728 <event_handler_list_is_empty>:
	return list->head;
   1f728:	4b02      	ldr	r3, [pc, #8]	; (1f734 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   1f72a:	6818      	ldr	r0, [r3, #0]
}
   1f72c:	fab0 f080 	clz	r0, r0
   1f730:	0940      	lsrs	r0, r0, #5
   1f732:	4770      	bx	lr
   1f734:	2000d464 	.word	0x2000d464

0001f738 <event_handler_list_dispatch>:
{
   1f738:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1f73a:	4c0f      	ldr	r4, [pc, #60]	; (1f778 <event_handler_list_dispatch+0x40>)
   1f73c:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   1f73e:	6823      	ldr	r3, [r4, #0]
   1f740:	b1c3      	cbz	r3, 1f774 <event_handler_list_dispatch+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   1f742:	f04f 33ff 	mov.w	r3, #4294967295
   1f746:	f04f 32ff 	mov.w	r2, #4294967295
   1f74a:	480c      	ldr	r0, [pc, #48]	; (1f77c <event_handler_list_dispatch+0x44>)
   1f74c:	f004 fb88 	bl	23e60 <z_impl_k_mutex_lock>
   1f750:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1f752:	b10b      	cbz	r3, 1f758 <event_handler_list_dispatch+0x20>
	return node->next;
   1f754:	681c      	ldr	r4, [r3, #0]
   1f756:	b91b      	cbnz	r3, 1f760 <event_handler_list_dispatch+0x28>
}
   1f758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   1f75c:	f7ff bfde 	b.w	1f71c <k_mutex_unlock.constprop.0.isra.0>
		curr->handler(evt);
   1f760:	4628      	mov	r0, r5
   1f762:	685b      	ldr	r3, [r3, #4]
   1f764:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1f766:	b11c      	cbz	r4, 1f770 <event_handler_list_dispatch+0x38>
   1f768:	6822      	ldr	r2, [r4, #0]
   1f76a:	4623      	mov	r3, r4
   1f76c:	4614      	mov	r4, r2
   1f76e:	e7f2      	b.n	1f756 <event_handler_list_dispatch+0x1e>
   1f770:	4622      	mov	r2, r4
   1f772:	e7fa      	b.n	1f76a <event_handler_list_dispatch+0x32>
}
   1f774:	bd38      	pop	{r3, r4, r5, pc}
   1f776:	bf00      	nop
   1f778:	2000d464 	.word	0x2000d464
   1f77c:	2000c88c 	.word	0x2000c88c

0001f780 <response_is_valid>:
{
   1f780:	b570      	push	{r4, r5, r6, lr}
   1f782:	460e      	mov	r6, r1
   1f784:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   1f786:	4605      	mov	r5, r0
{
   1f788:	b086      	sub	sp, #24
	if ((response == NULL) || (check == NULL)) {
   1f78a:	b100      	cbz	r0, 1f78e <response_is_valid+0xe>
   1f78c:	b962      	cbnz	r2, 1f7a8 <response_is_valid+0x28>
		LOG_ERR("Invalid pointer provided");
   1f78e:	4b0d      	ldr	r3, [pc, #52]	; (1f7c4 <response_is_valid+0x44>)
   1f790:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f794:	9305      	str	r3, [sp, #20]
   1f796:	2302      	movs	r3, #2
   1f798:	480b      	ldr	r0, [pc, #44]	; (1f7c8 <response_is_valid+0x48>)
   1f79a:	aa04      	add	r2, sp, #16
   1f79c:	9304      	str	r3, [sp, #16]
   1f79e:	f007 fd9a 	bl	272d6 <z_log_msg_static_create.constprop.0>
		return false;
   1f7a2:	2000      	movs	r0, #0
}
   1f7a4:	b006      	add	sp, #24
   1f7a6:	bd70      	pop	{r4, r5, r6, pc}
	if ((response_len < strlen(check)) ||
   1f7a8:	4610      	mov	r0, r2
   1f7aa:	f7f9 fc1f 	bl	18fec <strlen>
   1f7ae:	42b0      	cmp	r0, r6
   1f7b0:	d8f7      	bhi.n	1f7a2 <response_is_valid+0x22>
	    (memcmp(response, check, response_len) != 0)) {
   1f7b2:	4632      	mov	r2, r6
   1f7b4:	4621      	mov	r1, r4
   1f7b6:	4628      	mov	r0, r5
   1f7b8:	f009 f888 	bl	288cc <memcmp>
	if ((response_len < strlen(check)) ||
   1f7bc:	fab0 f080 	clz	r0, r0
   1f7c0:	0940      	lsrs	r0, r0, #5
   1f7c2:	e7ef      	b.n	1f7a4 <response_is_valid+0x24>
   1f7c4:	0002aac0 	.word	0x0002aac0
   1f7c8:	00029074 	.word	0x00029074

0001f7cc <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   1f7cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   1f7d0:	f04f 0900 	mov.w	r9, #0
{
   1f7d4:	b089      	sub	sp, #36	; 0x24
   1f7d6:	4607      	mov	r7, r0
   1f7d8:	460e      	mov	r6, r1
   1f7da:	4614      	mov	r4, r2
   1f7dc:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   1f7de:	f8cd 9004 	str.w	r9, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   1f7e2:	f7f9 fc03 	bl	18fec <strlen>
   1f7e6:	2808      	cmp	r0, #8
   1f7e8:	d11b      	bne.n	1f822 <parse_psm+0x56>
   1f7ea:	4630      	mov	r0, r6
   1f7ec:	f7f9 fbfe 	bl	18fec <strlen>
   1f7f0:	2808      	cmp	r0, #8
   1f7f2:	d116      	bne.n	1f822 <parse_psm+0x56>
		return -EINVAL;
	}

	/* Parse T3412-extended (periodic TAU) timer */
	memcpy(unit_str, tau_ext_str, unit_str_len);
   1f7f4:	8832      	ldrh	r2, [r6, #0]
   1f7f6:	78b3      	ldrb	r3, [r6, #2]
   1f7f8:	f8ad 2004 	strh.w	r2, [sp, #4]

	lut_idx = strtoul(unit_str, NULL, 2);
   1f7fc:	4649      	mov	r1, r9
   1f7fe:	2202      	movs	r2, #2
   1f800:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   1f802:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   1f806:	f005 fdbd 	bl	25384 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   1f80a:	2807      	cmp	r0, #7
   1f80c:	d90e      	bls.n	1f82c <parse_psm+0x60>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   1f80e:	4b32      	ldr	r3, [pc, #200]	; (1f8d8 <parse_psm+0x10c>)
   1f810:	9307      	str	r3, [sp, #28]
   1f812:	2302      	movs	r3, #2
   1f814:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f818:	4830      	ldr	r0, [pc, #192]	; (1f8dc <parse_psm+0x110>)
   1f81a:	aa06      	add	r2, sp, #24
   1f81c:	9306      	str	r3, [sp, #24]
   1f81e:	f007 fd5a 	bl	272d6 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1f822:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   1f826:	b009      	add	sp, #36	; 0x24
   1f828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	timer_unit = t3412_ext_lookup[lut_idx];
   1f82c:	4b2c      	ldr	r3, [pc, #176]	; (1f8e0 <parse_psm+0x114>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   1f82e:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   1f830:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   1f834:	4649      	mov	r1, r9
   1f836:	1cf0      	adds	r0, r6, #3
   1f838:	f005 fda4 	bl	25384 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1f83c:	f1b8 0f00 	cmp.w	r8, #0
   1f840:	d117      	bne.n	1f872 <parse_psm+0xa6>
   1f842:	f04f 33ff 	mov.w	r3, #4294967295
   1f846:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   1f848:	b1c4      	cbz	r4, 1f87c <parse_psm+0xb0>
   1f84a:	4620      	mov	r0, r4
   1f84c:	f7f9 fbce 	bl	18fec <strlen>
   1f850:	2808      	cmp	r0, #8
   1f852:	d113      	bne.n	1f87c <parse_psm+0xb0>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   1f854:	8822      	ldrh	r2, [r4, #0]
   1f856:	78a3      	ldrb	r3, [r4, #2]
   1f858:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   1f85c:	2100      	movs	r1, #0
   1f85e:	2202      	movs	r2, #2
   1f860:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   1f862:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   1f866:	f005 fd8d 	bl	25384 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   1f86a:	2807      	cmp	r0, #7
   1f86c:	d915      	bls.n	1f89a <parse_psm+0xce>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   1f86e:	4b1d      	ldr	r3, [pc, #116]	; (1f8e4 <parse_psm+0x118>)
   1f870:	e7ce      	b.n	1f810 <parse_psm+0x44>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1f872:	fb00 f008 	mul.w	r0, r0, r8
   1f876:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   1f878:	3001      	adds	r0, #1
   1f87a:	d0e5      	beq.n	1f848 <parse_psm+0x7c>
	memcpy(unit_str, active_time_str, unit_str_len);
   1f87c:	883a      	ldrh	r2, [r7, #0]
   1f87e:	78bb      	ldrb	r3, [r7, #2]
   1f880:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   1f884:	2100      	movs	r1, #0
   1f886:	2202      	movs	r2, #2
   1f888:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   1f88a:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   1f88e:	f005 fd79 	bl	25384 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   1f892:	2807      	cmp	r0, #7
   1f894:	d910      	bls.n	1f8b8 <parse_psm+0xec>
		LOG_ERR("Unable to parse active time string");
   1f896:	4b14      	ldr	r3, [pc, #80]	; (1f8e8 <parse_psm+0x11c>)
   1f898:	e7ba      	b.n	1f810 <parse_psm+0x44>
		timer_unit = t3412_lookup[lut_idx];
   1f89a:	4b14      	ldr	r3, [pc, #80]	; (1f8ec <parse_psm+0x120>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   1f89c:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   1f89e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   1f8a2:	2100      	movs	r1, #0
   1f8a4:	1ce0      	adds	r0, r4, #3
   1f8a6:	f005 fd6d 	bl	25384 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1f8aa:	b116      	cbz	r6, 1f8b2 <parse_psm+0xe6>
   1f8ac:	4370      	muls	r0, r6
   1f8ae:	6028      	str	r0, [r5, #0]
   1f8b0:	e7e4      	b.n	1f87c <parse_psm+0xb0>
   1f8b2:	f04f 30ff 	mov.w	r0, #4294967295
   1f8b6:	e7fa      	b.n	1f8ae <parse_psm+0xe2>
	timer_unit = t3324_lookup[lut_idx];
   1f8b8:	4b0d      	ldr	r3, [pc, #52]	; (1f8f0 <parse_psm+0x124>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   1f8ba:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   1f8bc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   1f8c0:	2100      	movs	r1, #0
   1f8c2:	1cf8      	adds	r0, r7, #3
   1f8c4:	f005 fd5e 	bl	25384 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1f8c8:	b11c      	cbz	r4, 1f8d2 <parse_psm+0x106>
   1f8ca:	4360      	muls	r0, r4
   1f8cc:	6068      	str	r0, [r5, #4]
	return 0;
   1f8ce:	2000      	movs	r0, #0
   1f8d0:	e7a9      	b.n	1f826 <parse_psm+0x5a>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1f8d2:	f04f 30ff 	mov.w	r0, #4294967295
   1f8d6:	e7f9      	b.n	1f8cc <parse_psm+0x100>
   1f8d8:	0002ac10 	.word	0x0002ac10
   1f8dc:	00029074 	.word	0x00029074
   1f8e0:	00029468 	.word	0x00029468
   1f8e4:	0002ac45 	.word	0x0002ac45
   1f8e8:	0002ac71 	.word	0x0002ac71
   1f8ec:	00029448 	.word	0x00029448
   1f8f0:	00029448 	.word	0x00029448

0001f8f4 <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   1f8f4:	2300      	movs	r3, #0
{
   1f8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f8fa:	b084      	sub	sp, #16
   1f8fc:	af00      	add	r7, sp, #0
   1f8fe:	4680      	mov	r8, r0
   1f900:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1f902:	f107 0008 	add.w	r0, r7, #8
   1f906:	2104      	movs	r1, #4
{
   1f908:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   1f90a:	e9c7 3302 	strd	r3, r3, [r7, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1f90e:	f007 fba2 	bl	27056 <at_params_list_init>
	if (err) {
   1f912:	4604      	mov	r4, r0
   1f914:	b198      	cbz	r0, 1f93e <parse_rrc_mode+0x4a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1f916:	466d      	mov	r5, sp
   1f918:	b088      	sub	sp, #32
   1f91a:	466a      	mov	r2, sp
   1f91c:	4b29      	ldr	r3, [pc, #164]	; (1f9c4 <parse_rrc_mode+0xd0>)
   1f91e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f922:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f926:	2303      	movs	r3, #3
   1f928:	4827      	ldr	r0, [pc, #156]	; (1f9c8 <parse_rrc_mode+0xd4>)
   1f92a:	f842 3f10 	str.w	r3, [r2, #16]!
   1f92e:	f007 fcd2 	bl	272d6 <z_log_msg_static_create.constprop.0>
   1f932:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1f934:	4620      	mov	r0, r4
   1f936:	3710      	adds	r7, #16
   1f938:	46bd      	mov	sp, r7
   1f93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
   1f93e:	4601      	mov	r1, r0
   1f940:	f107 0208 	add.w	r2, r7, #8
   1f944:	4640      	mov	r0, r8
   1f946:	f007 fb6d 	bl	27024 <at_parser_params_from_str>
	if (err) {
   1f94a:	4604      	mov	r4, r0
   1f94c:	b198      	cbz	r0, 1f976 <parse_rrc_mode+0x82>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   1f94e:	466d      	mov	r5, sp
   1f950:	b088      	sub	sp, #32
   1f952:	466a      	mov	r2, sp
   1f954:	4b1d      	ldr	r3, [pc, #116]	; (1f9cc <parse_rrc_mode+0xd8>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1f956:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f95a:	2303      	movs	r3, #3
   1f95c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f960:	4819      	ldr	r0, [pc, #100]	; (1f9c8 <parse_rrc_mode+0xd4>)
   1f962:	f842 3f10 	str.w	r3, [r2, #16]!
   1f966:	f007 fcb6 	bl	272d6 <z_log_msg_static_create.constprop.0>
   1f96a:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1f96c:	f107 0008 	add.w	r0, r7, #8
   1f970:	f007 fb9b 	bl	270aa <at_params_list_free>
	return err;
   1f974:	e7de      	b.n	1f934 <parse_rrc_mode+0x40>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   1f976:	4631      	mov	r1, r6
   1f978:	1d3a      	adds	r2, r7, #4
   1f97a:	f107 0008 	add.w	r0, r7, #8
   1f97e:	f007 fc46 	bl	2720e <at_params_int_get>
	if (err) {
   1f982:	4604      	mov	r4, r0
   1f984:	b120      	cbz	r0, 1f990 <parse_rrc_mode+0x9c>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1f986:	466d      	mov	r5, sp
   1f988:	b088      	sub	sp, #32
   1f98a:	466a      	mov	r2, sp
   1f98c:	4b10      	ldr	r3, [pc, #64]	; (1f9d0 <parse_rrc_mode+0xdc>)
   1f98e:	e7e2      	b.n	1f956 <parse_rrc_mode+0x62>
	if (temp_mode == 0) {
   1f990:	687b      	ldr	r3, [r7, #4]
   1f992:	b11b      	cbz	r3, 1f99c <parse_rrc_mode+0xa8>
	} else if (temp_mode == 1) {
   1f994:	2b01      	cmp	r3, #1
   1f996:	d103      	bne.n	1f9a0 <parse_rrc_mode+0xac>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   1f998:	702b      	strb	r3, [r5, #0]
   1f99a:	e7e7      	b.n	1f96c <parse_rrc_mode+0x78>
   1f99c:	4603      	mov	r3, r0
   1f99e:	e7fb      	b.n	1f998 <parse_rrc_mode+0xa4>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   1f9a0:	466c      	mov	r4, sp
   1f9a2:	b088      	sub	sp, #32
   1f9a4:	466a      	mov	r2, sp
   1f9a6:	490b      	ldr	r1, [pc, #44]	; (1f9d4 <parse_rrc_mode+0xe0>)
   1f9a8:	4807      	ldr	r0, [pc, #28]	; (1f9c8 <parse_rrc_mode+0xd4>)
   1f9aa:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1f9ae:	2303      	movs	r3, #3
   1f9b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f9b4:	f842 3f10 	str.w	r3, [r2, #16]!
   1f9b8:	f007 fc8d 	bl	272d6 <z_log_msg_static_create.constprop.0>
   1f9bc:	46a5      	mov	sp, r4
		err = -EINVAL;
   1f9be:	f06f 0415 	mvn.w	r4, #21
   1f9c2:	e7d3      	b.n	1f96c <parse_rrc_mode+0x78>
   1f9c4:	0002aad9 	.word	0x0002aad9
   1f9c8:	00029074 	.word	0x00029074
   1f9cc:	0002ac94 	.word	0x0002ac94
   1f9d0:	0002acbf 	.word	0x0002acbf
   1f9d4:	0002ace8 	.word	0x0002ace8

0001f9d8 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   1f9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f9dc:	461d      	mov	r5, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   1f9de:	2300      	movs	r3, #0
{
   1f9e0:	b08a      	sub	sp, #40	; 0x28
   1f9e2:	af00      	add	r7, sp, #0
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   1f9e4:	60fb      	str	r3, [r7, #12]
   1f9e6:	823b      	strh	r3, [r7, #16]
   1f9e8:	74bb      	strb	r3, [r7, #18]
{
   1f9ea:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   1f9ec:	2309      	movs	r3, #9
   1f9ee:	2207      	movs	r2, #7
{
   1f9f0:	4680      	mov	r8, r0
   1f9f2:	4689      	mov	r9, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1f9f4:	f107 0014 	add.w	r0, r7, #20
   1f9f8:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   1f9fa:	e9c7 2300 	strd	r2, r3, [r7]
{
   1f9fe:	f8d7 a048 	ldr.w	sl, [r7, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1fa02:	f007 fb28 	bl	27056 <at_params_list_init>
	if (err) {
   1fa06:	4604      	mov	r4, r0
   1fa08:	b198      	cbz	r0, 1fa32 <parse_cereg+0x5a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1fa0a:	466d      	mov	r5, sp
   1fa0c:	b088      	sub	sp, #32
   1fa0e:	466a      	mov	r2, sp
   1fa10:	4b77      	ldr	r3, [pc, #476]	; (1fbf0 <parse_cereg+0x218>)
   1fa12:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fa16:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1fa1a:	2303      	movs	r3, #3
   1fa1c:	4875      	ldr	r0, [pc, #468]	; (1fbf4 <parse_cereg+0x21c>)
   1fa1e:	f842 3f10 	str.w	r3, [r2, #16]!
   1fa22:	f007 fc58 	bl	272d6 <z_log_msg_static_create.constprop.0>
   1fa26:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1fa28:	4620      	mov	r0, r4
   1fa2a:	3728      	adds	r7, #40	; 0x28
   1fa2c:	46bd      	mov	sp, r7
   1fa2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   1fa32:	4601      	mov	r1, r0
   1fa34:	f107 0214 	add.w	r2, r7, #20
   1fa38:	4640      	mov	r0, r8
   1fa3a:	f007 faf3 	bl	27024 <at_parser_params_from_str>
	if (err) {
   1fa3e:	4604      	mov	r4, r0
   1fa40:	b198      	cbz	r0, 1fa6a <parse_cereg+0x92>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   1fa42:	466d      	mov	r5, sp
   1fa44:	b088      	sub	sp, #32
   1fa46:	466a      	mov	r2, sp
   1fa48:	4b6b      	ldr	r3, [pc, #428]	; (1fbf8 <parse_cereg+0x220>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   1fa4a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1fa4e:	2303      	movs	r3, #3
   1fa50:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fa54:	4867      	ldr	r0, [pc, #412]	; (1fbf4 <parse_cereg+0x21c>)
   1fa56:	f842 3f10 	str.w	r3, [r2, #16]!
   1fa5a:	f007 fc3c 	bl	272d6 <z_log_msg_static_create.constprop.0>
   1fa5e:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1fa60:	f107 0014 	add.w	r0, r7, #20
   1fa64:	f007 fb21 	bl	270aa <at_params_list_free>
	return err;
   1fa68:	e7de      	b.n	1fa28 <parse_cereg+0x50>
	err = at_params_string_get(&resp_list,
   1fa6a:	4601      	mov	r1, r0
   1fa6c:	463b      	mov	r3, r7
   1fa6e:	f107 020c 	add.w	r2, r7, #12
   1fa72:	f107 0014 	add.w	r0, r7, #20
   1fa76:	f007 fbf6 	bl	27266 <at_params_string_get>
	if (err) {
   1fa7a:	4604      	mov	r4, r0
   1fa7c:	b120      	cbz	r0, 1fa88 <parse_cereg+0xb0>
		LOG_ERR("Could not get response prefix, error: %d", err);
   1fa7e:	466d      	mov	r5, sp
   1fa80:	b088      	sub	sp, #32
   1fa82:	466a      	mov	r2, sp
   1fa84:	4b5d      	ldr	r3, [pc, #372]	; (1fbfc <parse_cereg+0x224>)
   1fa86:	e7e0      	b.n	1fa4a <parse_cereg+0x72>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1fa88:	4a5d      	ldr	r2, [pc, #372]	; (1fc00 <parse_cereg+0x228>)
   1fa8a:	6839      	ldr	r1, [r7, #0]
   1fa8c:	f107 000c 	add.w	r0, r7, #12
   1fa90:	f7ff fe76 	bl	1f780 <response_is_valid>
   1fa94:	2800      	cmp	r0, #0
   1fa96:	d0e3      	beq.n	1fa60 <parse_cereg+0x88>
	err = at_params_int_get(list, reg_status_index, &reg_status);
   1fa98:	f107 021c 	add.w	r2, r7, #28
   1fa9c:	f1c9 0102 	rsb	r1, r9, #2
   1faa0:	f107 0014 	add.w	r0, r7, #20
   1faa4:	f007 fbb3 	bl	2720e <at_params_int_get>
	if (err) {
   1faa8:	f1b0 0800 	subs.w	r8, r0, #0
   1faac:	d165      	bne.n	1fb7a <parse_cereg+0x1a2>
	switch (reg_status) {
   1faae:	69fb      	ldr	r3, [r7, #28]
   1fab0:	2b08      	cmp	r3, #8
   1fab2:	d03b      	beq.n	1fb2c <parse_cereg+0x154>
   1fab4:	dc23      	bgt.n	1fafe <parse_cereg+0x126>
   1fab6:	2b05      	cmp	r3, #5
   1fab8:	d938      	bls.n	1fb2c <parse_cereg+0x154>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   1faba:	466c      	mov	r4, sp
   1fabc:	b088      	sub	sp, #32
   1fabe:	466a      	mov	r2, sp
   1fac0:	4950      	ldr	r1, [pc, #320]	; (1fc04 <parse_cereg+0x22c>)
   1fac2:	484c      	ldr	r0, [pc, #304]	; (1fbf4 <parse_cereg+0x21c>)
   1fac4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1fac8:	2303      	movs	r3, #3
   1faca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1face:	f842 3f10 	str.w	r3, [r2, #16]!
   1fad2:	f007 fc00 	bl	272d6 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1fad6:	f06f 0815 	mvn.w	r8, #21
   1fada:	46a5      	mov	sp, r4
		LOG_ERR("Could not get registration status, error: %d", status);
   1fadc:	466c      	mov	r4, sp
   1fade:	b088      	sub	sp, #32
   1fae0:	466a      	mov	r2, sp
   1fae2:	4b49      	ldr	r3, [pc, #292]	; (1fc08 <parse_cereg+0x230>)
   1fae4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fae8:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1faec:	2303      	movs	r3, #3
   1faee:	4841      	ldr	r0, [pc, #260]	; (1fbf4 <parse_cereg+0x21c>)
   1faf0:	f842 3f10 	str.w	r3, [r2, #16]!
   1faf4:	f007 fbef 	bl	272d6 <z_log_msg_static_create.constprop.0>
   1faf8:	46a5      	mov	sp, r4
		goto clean_exit;
   1fafa:	4644      	mov	r4, r8
   1fafc:	e7b0      	b.n	1fa60 <parse_cereg+0x88>
	switch (reg_status) {
   1fafe:	2b5a      	cmp	r3, #90	; 0x5a
   1fb00:	d1db      	bne.n	1faba <parse_cereg+0xe2>
	if (reg_status) {
   1fb02:	b106      	cbz	r6, 1fb06 <parse_cereg+0x12e>
		*reg_status = status;
   1fb04:	7033      	strb	r3, [r6, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1fb06:	2d00      	cmp	r5, #0
   1fb08:	d140      	bne.n	1fb8c <parse_cereg+0x1b4>
	if (lte_mode) {
   1fb0a:	f1ba 0f00 	cmp.w	sl, #0
   1fb0e:	d0a7      	beq.n	1fa60 <parse_cereg+0x88>
		err = at_params_int_get(&resp_list,
   1fb10:	f107 0208 	add.w	r2, r7, #8
   1fb14:	f1c9 0105 	rsb	r1, r9, #5
   1fb18:	f107 0014 	add.w	r0, r7, #20
   1fb1c:	f007 fb77 	bl	2720e <at_params_int_get>
		if (err) {
   1fb20:	2800      	cmp	r0, #0
   1fb22:	d163      	bne.n	1fbec <parse_cereg+0x214>
			*lte_mode = mode;
   1fb24:	7a3b      	ldrb	r3, [r7, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   1fb26:	f88a 3000 	strb.w	r3, [sl]
   1fb2a:	e799      	b.n	1fa60 <parse_cereg+0x88>
	if (reg_status) {
   1fb2c:	bb1e      	cbnz	r6, 1fb76 <parse_cereg+0x19e>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1fb2e:	2d00      	cmp	r5, #0
   1fb30:	d0eb      	beq.n	1fb0a <parse_cereg+0x132>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   1fb32:	f107 0014 	add.w	r0, r7, #20
   1fb36:	f007 fbb6 	bl	272a6 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1fb3a:	2803      	cmp	r0, #3
   1fb3c:	d926      	bls.n	1fb8c <parse_cereg+0x1b4>
		err = at_params_string_get(
   1fb3e:	1d3b      	adds	r3, r7, #4
   1fb40:	f107 021c 	add.w	r2, r7, #28
   1fb44:	f1c9 0103 	rsb	r1, r9, #3
   1fb48:	f107 0014 	add.w	r0, r7, #20
   1fb4c:	f007 fb8b 	bl	27266 <at_params_string_get>
		if (err) {
   1fb50:	4606      	mov	r6, r0
   1fb52:	b300      	cbz	r0, 1fb96 <parse_cereg+0x1be>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   1fb54:	466c      	mov	r4, sp
   1fb56:	b088      	sub	sp, #32
   1fb58:	466a      	mov	r2, sp
   1fb5a:	4b2c      	ldr	r3, [pc, #176]	; (1fc0c <parse_cereg+0x234>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   1fb5c:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1fb60:	2303      	movs	r3, #3
   1fb62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fb66:	4823      	ldr	r0, [pc, #140]	; (1fbf4 <parse_cereg+0x21c>)
   1fb68:	f842 3f10 	str.w	r3, [r2, #16]!
   1fb6c:	f007 fbb3 	bl	272d6 <z_log_msg_static_create.constprop.0>
   1fb70:	46a5      	mov	sp, r4
			goto clean_exit;
   1fb72:	4634      	mov	r4, r6
   1fb74:	e774      	b.n	1fa60 <parse_cereg+0x88>
		*reg_status = status;
   1fb76:	7033      	strb	r3, [r6, #0]
   1fb78:	e7d9      	b.n	1fb2e <parse_cereg+0x156>
	if (status < 0) {
   1fb7a:	dbaf      	blt.n	1fadc <parse_cereg+0x104>
	if (reg_status) {
   1fb7c:	b10e      	cbz	r6, 1fb82 <parse_cereg+0x1aa>
		*reg_status = status;
   1fb7e:	f886 8000 	strb.w	r8, [r6]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1fb82:	2d00      	cmp	r5, #0
   1fb84:	d0c1      	beq.n	1fb0a <parse_cereg+0x132>
   1fb86:	f1b8 0f5a 	cmp.w	r8, #90	; 0x5a
   1fb8a:	d1d2      	bne.n	1fb32 <parse_cereg+0x15a>
		cell->tac = UINT32_MAX;
   1fb8c:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fb90:	e9c5 3302 	strd	r3, r3, [r5, #8]
   1fb94:	e7b9      	b.n	1fb0a <parse_cereg+0x132>
		str_buf[len] = '\0';
   1fb96:	687b      	ldr	r3, [r7, #4]
		cell->tac = strtoul(str_buf, NULL, 16);
   1fb98:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   1fb9a:	3328      	adds	r3, #40	; 0x28
   1fb9c:	443b      	add	r3, r7
   1fb9e:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   1fba2:	2210      	movs	r2, #16
   1fba4:	f107 001c 	add.w	r0, r7, #28
   1fba8:	f005 fbec 	bl	25384 <strtoul>
		len = sizeof(str_buf) - 1;
   1fbac:	2309      	movs	r3, #9
		cell->tac = strtoul(str_buf, NULL, 16);
   1fbae:	60e8      	str	r0, [r5, #12]
		len = sizeof(str_buf) - 1;
   1fbb0:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&resp_list,
   1fbb2:	f107 021c 	add.w	r2, r7, #28
   1fbb6:	1d3b      	adds	r3, r7, #4
   1fbb8:	f1c9 0104 	rsb	r1, r9, #4
   1fbbc:	f107 0014 	add.w	r0, r7, #20
   1fbc0:	f007 fb51 	bl	27266 <at_params_string_get>
		if (err) {
   1fbc4:	4606      	mov	r6, r0
   1fbc6:	b120      	cbz	r0, 1fbd2 <parse_cereg+0x1fa>
			LOG_ERR("Could not get cell ID, error: %d", err);
   1fbc8:	466c      	mov	r4, sp
   1fbca:	b088      	sub	sp, #32
   1fbcc:	466a      	mov	r2, sp
   1fbce:	4b10      	ldr	r3, [pc, #64]	; (1fc10 <parse_cereg+0x238>)
   1fbd0:	e7c4      	b.n	1fb5c <parse_cereg+0x184>
		str_buf[len] = '\0';
   1fbd2:	687b      	ldr	r3, [r7, #4]
		cell->id = strtoul(str_buf, NULL, 16);
   1fbd4:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   1fbd6:	3328      	adds	r3, #40	; 0x28
   1fbd8:	443b      	add	r3, r7
   1fbda:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   1fbde:	2210      	movs	r2, #16
   1fbe0:	f107 001c 	add.w	r0, r7, #28
   1fbe4:	f005 fbce 	bl	25384 <strtoul>
   1fbe8:	60a8      	str	r0, [r5, #8]
   1fbea:	e78e      	b.n	1fb0a <parse_cereg+0x132>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   1fbec:	2300      	movs	r3, #0
   1fbee:	e79a      	b.n	1fb26 <parse_cereg+0x14e>
   1fbf0:	0002aad9 	.word	0x0002aad9
   1fbf4:	00029074 	.word	0x00029074
   1fbf8:	0002ad04 	.word	0x0002ad04
   1fbfc:	0002ad31 	.word	0x0002ad31
   1fc00:	0002aa77 	.word	0x0002aa77
   1fc04:	0002ad5a 	.word	0x0002ad5a
   1fc08:	0002ad82 	.word	0x0002ad82
   1fc0c:	0002adaf 	.word	0x0002adaf
   1fc10:	0002addb 	.word	0x0002addb

0001fc14 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   1fc14:	2300      	movs	r3, #0
{
   1fc16:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc18:	b089      	sub	sp, #36	; 0x24
   1fc1a:	af00      	add	r7, sp, #0
   1fc1c:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   1fc1e:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   1fc20:	e9c7 3300 	strd	r3, r3, [r7]
	if (time == NULL || at_response == NULL) {
   1fc24:	2900      	cmp	r1, #0
   1fc26:	d056      	beq.n	1fcd6 <parse_xt3412+0xc2>
   1fc28:	2800      	cmp	r0, #0
   1fc2a:	d054      	beq.n	1fcd6 <parse_xt3412+0xc2>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   1fc2c:	2104      	movs	r1, #4
   1fc2e:	4638      	mov	r0, r7
   1fc30:	f007 fa11 	bl	27056 <at_params_list_init>
	if (err) {
   1fc34:	4604      	mov	r4, r0
   1fc36:	b190      	cbz	r0, 1fc5e <parse_xt3412+0x4a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1fc38:	466d      	mov	r5, sp
   1fc3a:	b088      	sub	sp, #32
   1fc3c:	466a      	mov	r2, sp
   1fc3e:	4b27      	ldr	r3, [pc, #156]	; (1fcdc <parse_xt3412+0xc8>)
   1fc40:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fc44:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1fc48:	2303      	movs	r3, #3
   1fc4a:	4825      	ldr	r0, [pc, #148]	; (1fce0 <parse_xt3412+0xcc>)
   1fc4c:	f842 3f10 	str.w	r3, [r2, #16]!
   1fc50:	f007 fb41 	bl	272d6 <z_log_msg_static_create.constprop.0>
   1fc54:	46ad      	mov	sp, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   1fc56:	4620      	mov	r0, r4
   1fc58:	3724      	adds	r7, #36	; 0x24
   1fc5a:	46bd      	mov	sp, r7
   1fc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   1fc5e:	4601      	mov	r1, r0
   1fc60:	463a      	mov	r2, r7
   1fc62:	4630      	mov	r0, r6
   1fc64:	f007 f9de 	bl	27024 <at_parser_params_from_str>
	if (err) {
   1fc68:	4604      	mov	r4, r0
   1fc6a:	b190      	cbz	r0, 1fc92 <parse_xt3412+0x7e>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   1fc6c:	466d      	mov	r5, sp
   1fc6e:	b088      	sub	sp, #32
   1fc70:	466a      	mov	r2, sp
   1fc72:	4b1c      	ldr	r3, [pc, #112]	; (1fce4 <parse_xt3412+0xd0>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   1fc74:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1fc78:	2303      	movs	r3, #3
   1fc7a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fc7e:	4818      	ldr	r0, [pc, #96]	; (1fce0 <parse_xt3412+0xcc>)
   1fc80:	f842 3f10 	str.w	r3, [r2, #16]!
   1fc84:	f007 fb27 	bl	272d6 <z_log_msg_static_create.constprop.0>
   1fc88:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1fc8a:	4638      	mov	r0, r7
   1fc8c:	f007 fa0d 	bl	270aa <at_params_list_free>
	return err;
   1fc90:	e7e1      	b.n	1fc56 <parse_xt3412+0x42>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   1fc92:	462a      	mov	r2, r5
   1fc94:	2102      	movs	r1, #2
   1fc96:	4638      	mov	r0, r7
   1fc98:	f007 fad1 	bl	2723e <at_params_int64_get>
	if (err) {
   1fc9c:	4604      	mov	r4, r0
   1fc9e:	b120      	cbz	r0, 1fcaa <parse_xt3412+0x96>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   1fca0:	466d      	mov	r5, sp
   1fca2:	b088      	sub	sp, #32
   1fca4:	466a      	mov	r2, sp
   1fca6:	4b10      	ldr	r3, [pc, #64]	; (1fce8 <parse_xt3412+0xd4>)
   1fca8:	e7e4      	b.n	1fc74 <parse_xt3412+0x60>
	if ((*time > T3412_MAX) || *time < 0) {
   1fcaa:	4910      	ldr	r1, [pc, #64]	; (1fcec <parse_xt3412+0xd8>)
   1fcac:	e9d5 3200 	ldrd	r3, r2, [r5]
   1fcb0:	4299      	cmp	r1, r3
   1fcb2:	f04f 0308 	mov.w	r3, #8
   1fcb6:	4193      	sbcs	r3, r2
   1fcb8:	d2e7      	bcs.n	1fc8a <parse_xt3412+0x76>
		LOG_WRN("Parsed time parameter not within valid range");
   1fcba:	4b0d      	ldr	r3, [pc, #52]	; (1fcf0 <parse_xt3412+0xdc>)
   1fcbc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1fcc0:	61fb      	str	r3, [r7, #28]
   1fcc2:	2302      	movs	r3, #2
   1fcc4:	4806      	ldr	r0, [pc, #24]	; (1fce0 <parse_xt3412+0xcc>)
   1fcc6:	61bb      	str	r3, [r7, #24]
   1fcc8:	f107 0218 	add.w	r2, r7, #24
   1fccc:	f007 fb03 	bl	272d6 <z_log_msg_static_create.constprop.0>
		err = -EINVAL;
   1fcd0:	f06f 0415 	mvn.w	r4, #21
   1fcd4:	e7d9      	b.n	1fc8a <parse_xt3412+0x76>
		return -EINVAL;
   1fcd6:	f06f 0415 	mvn.w	r4, #21
   1fcda:	e7bc      	b.n	1fc56 <parse_xt3412+0x42>
   1fcdc:	0002aad9 	.word	0x0002aad9
   1fce0:	00029074 	.word	0x00029074
   1fce4:	0002adfc 	.word	0x0002adfc
   1fce8:	0002ae29 	.word	0x0002ae29
   1fcec:	5099e000 	.word	0x5099e000
   1fcf0:	0002ae56 	.word	0x0002ae56

0001fcf4 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   1fcf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   1fcf6:	b968      	cbnz	r0, 1fd14 <neighborcell_count_get+0x20>
		LOG_ERR("at_response is NULL, can't get cell count");
   1fcf8:	4b0f      	ldr	r3, [pc, #60]	; (1fd38 <neighborcell_count_get+0x44>)
   1fcfa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1fcfe:	9305      	str	r3, [sp, #20]
   1fd00:	2302      	movs	r3, #2
   1fd02:	480e      	ldr	r0, [pc, #56]	; (1fd3c <neighborcell_count_get+0x48>)
   1fd04:	aa04      	add	r2, sp, #16
   1fd06:	9304      	str	r3, [sp, #16]
   1fd08:	f007 fae5 	bl	272d6 <z_log_msg_static_create.constprop.0>
		return 0;
   1fd0c:	2000      	movs	r0, #0
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   1fd0e:	b007      	add	sp, #28
   1fd10:	f85d fb04 	ldr.w	pc, [sp], #4
	uint32_t count = 0;
   1fd14:	2300      	movs	r3, #0
   1fd16:	3801      	subs	r0, #1
		if (*str == c) {
   1fd18:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1fd1c:	2a2c      	cmp	r2, #44	; 0x2c
   1fd1e:	d101      	bne.n	1fd24 <neighborcell_count_get+0x30>
			count++;
   1fd20:	3301      	adds	r3, #1
	} while (*(str++) != '\0');
   1fd22:	e7f9      	b.n	1fd18 <neighborcell_count_get+0x24>
   1fd24:	2a00      	cmp	r2, #0
   1fd26:	d1f7      	bne.n	1fd18 <neighborcell_count_get+0x24>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   1fd28:	2b0a      	cmp	r3, #10
   1fd2a:	d9ef      	bls.n	1fd0c <neighborcell_count_get+0x18>
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   1fd2c:	f1a3 0009 	sub.w	r0, r3, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   1fd30:	2305      	movs	r3, #5
   1fd32:	fbb0 f0f3 	udiv	r0, r0, r3
	return ncell_count;
   1fd36:	e7ea      	b.n	1fd0e <neighborcell_count_get+0x1a>
   1fd38:	0002ae83 	.word	0x0002ae83
   1fd3c:	00029074 	.word	0x00029074

0001fd40 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   1fd40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   1fd44:	230b      	movs	r3, #11
{
   1fd46:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1fd48:	2100      	movs	r1, #0
{
   1fd4a:	4680      	mov	r8, r0
   1fd4c:	b08c      	sub	sp, #48	; 0x30
   1fd4e:	af00      	add	r7, sp, #0
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1fd50:	e9c7 1109 	strd	r1, r1, [r7, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   1fd54:	613b      	str	r3, [r7, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1fd56:	f8c7 102b 	str.w	r1, [r7, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   1fd5a:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   1fd5c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1fd60:	2b2c      	cmp	r3, #44	; 0x2c
   1fd62:	d101      	bne.n	1fd68 <parse_ncellmeas+0x28>
			count++;
   1fd64:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   1fd66:	e7f9      	b.n	1fd5c <parse_ncellmeas+0x1c>
   1fd68:	2b00      	cmp	r3, #0
   1fd6a:	d1f7      	bne.n	1fd5c <parse_ncellmeas+0x1c>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   1fd6c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fd70:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   1fd74:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fd76:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   1fd78:	f107 001c 	add.w	r0, r7, #28
   1fd7c:	f007 f96b 	bl	27056 <at_params_list_init>
	if (err) {
   1fd80:	4604      	mov	r4, r0
   1fd82:	b198      	cbz	r0, 1fdac <parse_ncellmeas+0x6c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1fd84:	466d      	mov	r5, sp
   1fd86:	b088      	sub	sp, #32
   1fd88:	466a      	mov	r2, sp
   1fd8a:	4bb5      	ldr	r3, [pc, #724]	; (20060 <parse_ncellmeas+0x320>)
   1fd8c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fd90:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1fd94:	2303      	movs	r3, #3
   1fd96:	48b3      	ldr	r0, [pc, #716]	; (20064 <parse_ncellmeas+0x324>)
   1fd98:	f842 3f10 	str.w	r3, [r2, #16]!
   1fd9c:	f007 fa9b 	bl	272d6 <z_log_msg_static_create.constprop.0>
   1fda0:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1fda2:	4620      	mov	r0, r4
   1fda4:	3730      	adds	r7, #48	; 0x30
   1fda6:	46bd      	mov	sp, r7
   1fda8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   1fdac:	4601      	mov	r1, r0
   1fdae:	f107 021c 	add.w	r2, r7, #28
   1fdb2:	4640      	mov	r0, r8
   1fdb4:	f007 f936 	bl	27024 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   1fdb8:	4604      	mov	r4, r0
   1fdba:	b1a8      	cbz	r0, 1fde8 <parse_ncellmeas+0xa8>
   1fdbc:	1dc3      	adds	r3, r0, #7
   1fdbe:	d024      	beq.n	1fe0a <parse_ncellmeas+0xca>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   1fdc0:	466d      	mov	r5, sp
   1fdc2:	b088      	sub	sp, #32
   1fdc4:	466a      	mov	r2, sp
   1fdc6:	4ba8      	ldr	r3, [pc, #672]	; (20068 <parse_ncellmeas+0x328>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   1fdc8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1fdcc:	2303      	movs	r3, #3
   1fdce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fdd2:	48a4      	ldr	r0, [pc, #656]	; (20064 <parse_ncellmeas+0x324>)
   1fdd4:	f842 3f10 	str.w	r3, [r2, #16]!
   1fdd8:	f007 fa7d 	bl	272d6 <z_log_msg_static_create.constprop.0>
   1fddc:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1fdde:	f107 001c 	add.w	r0, r7, #28
   1fde2:	f007 f962 	bl	270aa <at_params_list_free>
	return err;
   1fde6:	e7dc      	b.n	1fda2 <parse_ncellmeas+0x62>
	bool incomplete = false;
   1fde8:	4606      	mov	r6, r0
	err = at_params_string_get(&resp_list,
   1fdea:	2100      	movs	r1, #0
   1fdec:	f107 0310 	add.w	r3, r7, #16
   1fdf0:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1fdf4:	f107 001c 	add.w	r0, r7, #28
   1fdf8:	f007 fa35 	bl	27266 <at_params_string_get>
	if (err) {
   1fdfc:	4604      	mov	r4, r0
   1fdfe:	b130      	cbz	r0, 1fe0e <parse_ncellmeas+0xce>
		LOG_ERR("Could not get response prefix, error: %d", err);
   1fe00:	466d      	mov	r5, sp
   1fe02:	b088      	sub	sp, #32
   1fe04:	466a      	mov	r2, sp
   1fe06:	4b99      	ldr	r3, [pc, #612]	; (2006c <parse_ncellmeas+0x32c>)
   1fe08:	e7de      	b.n	1fdc8 <parse_ncellmeas+0x88>
		incomplete = true;
   1fe0a:	2601      	movs	r6, #1
   1fe0c:	e7ed      	b.n	1fdea <parse_ncellmeas+0xaa>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1fe0e:	4a98      	ldr	r2, [pc, #608]	; (20070 <parse_ncellmeas+0x330>)
   1fe10:	6939      	ldr	r1, [r7, #16]
   1fe12:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1fe16:	f7ff fcb3 	bl	1f780 <response_is_valid>
   1fe1a:	2800      	cmp	r0, #0
   1fe1c:	f000 80b9 	beq.w	1ff92 <parse_ncellmeas+0x252>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   1fe20:	2101      	movs	r1, #1
   1fe22:	1d3a      	adds	r2, r7, #4
   1fe24:	f107 001c 	add.w	r0, r7, #28
   1fe28:	f007 f9f1 	bl	2720e <at_params_int_get>
	if (err) {
   1fe2c:	4604      	mov	r4, r0
   1fe2e:	2800      	cmp	r0, #0
   1fe30:	d1d5      	bne.n	1fdde <parse_ncellmeas+0x9e>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   1fe32:	687b      	ldr	r3, [r7, #4]
   1fe34:	2b00      	cmp	r3, #0
   1fe36:	f040 8110 	bne.w	2005a <parse_ncellmeas+0x31a>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   1fe3a:	2102      	movs	r1, #2
   1fe3c:	f107 0208 	add.w	r2, r7, #8
   1fe40:	f107 001c 	add.w	r0, r7, #28
   1fe44:	f007 fa70 	bl	27328 <string_param_to_int.constprop.0>
	if (err) {
   1fe48:	4604      	mov	r4, r0
   1fe4a:	2800      	cmp	r0, #0
   1fe4c:	d1c7      	bne.n	1fdde <parse_ncellmeas+0x9e>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   1fe4e:	68bb      	ldr	r3, [r7, #8]
	len = sizeof(tmp_str);
   1fe50:	f04f 0907 	mov.w	r9, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   1fe54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1fe58:	bfa4      	itt	ge
   1fe5a:	f04f 33ff 	movge.w	r3, #4294967295
   1fe5e:	60bb      	strge	r3, [r7, #8]
	cells->current_cell.id = tmp;
   1fe60:	68bb      	ldr	r3, [r7, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1fe62:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   1fe64:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1fe66:	f107 0214 	add.w	r2, r7, #20
   1fe6a:	f107 030c 	add.w	r3, r7, #12
   1fe6e:	f107 001c 	add.w	r0, r7, #28
	len = sizeof(tmp_str);
   1fe72:	f8c7 900c 	str.w	r9, [r7, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1fe76:	f007 f9f6 	bl	27266 <at_params_string_get>
	if (err) {
   1fe7a:	4604      	mov	r4, r0
   1fe7c:	2800      	cmp	r0, #0
   1fe7e:	d1ae      	bne.n	1fdde <parse_ncellmeas+0x9e>
	tmp_str[len] = '\0';
   1fe80:	68fb      	ldr	r3, [r7, #12]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   1fe82:	210a      	movs	r1, #10
	tmp_str[len] = '\0';
   1fe84:	3330      	adds	r3, #48	; 0x30
   1fe86:	443b      	add	r3, r7
   1fe88:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   1fe8c:	1d2a      	adds	r2, r5, #4
   1fe8e:	f107 0017 	add.w	r0, r7, #23
   1fe92:	f007 fa23 	bl	272dc <string_to_int>
	if (err) {
   1fe96:	4604      	mov	r4, r0
   1fe98:	2800      	cmp	r0, #0
   1fe9a:	d1a0      	bne.n	1fdde <parse_ncellmeas+0x9e>
	tmp_str[3] = '\0';
   1fe9c:	75f8      	strb	r0, [r7, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   1fe9e:	462a      	mov	r2, r5
   1fea0:	210a      	movs	r1, #10
   1fea2:	f107 0014 	add.w	r0, r7, #20
   1fea6:	f007 fa19 	bl	272dc <string_to_int>
	if (err) {
   1feaa:	4604      	mov	r4, r0
   1feac:	2800      	cmp	r0, #0
   1feae:	d196      	bne.n	1fdde <parse_ncellmeas+0x9e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   1feb0:	2104      	movs	r1, #4
   1feb2:	f107 0208 	add.w	r2, r7, #8
   1feb6:	f107 001c 	add.w	r0, r7, #28
   1feba:	f007 fa35 	bl	27328 <string_param_to_int.constprop.0>
	if (err) {
   1febe:	4604      	mov	r4, r0
   1fec0:	2800      	cmp	r0, #0
   1fec2:	d18c      	bne.n	1fdde <parse_ncellmeas+0x9e>
	cells->current_cell.tac = tmp;
   1fec4:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   1fec6:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   1fec8:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   1feca:	f107 0208 	add.w	r2, r7, #8
   1fece:	f107 001c 	add.w	r0, r7, #28
   1fed2:	f007 f99c 	bl	2720e <at_params_int_get>
	if (err) {
   1fed6:	4604      	mov	r4, r0
   1fed8:	2800      	cmp	r0, #0
   1feda:	d180      	bne.n	1fdde <parse_ncellmeas+0x9e>
	cells->current_cell.timing_advance = tmp;
   1fedc:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   1fede:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   1fee0:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   1fee2:	f105 0210 	add.w	r2, r5, #16
   1fee6:	f107 001c 	add.w	r0, r7, #28
   1feea:	f007 f990 	bl	2720e <at_params_int_get>
	if (err) {
   1feee:	4604      	mov	r4, r0
   1fef0:	2800      	cmp	r0, #0
   1fef2:	f47f af74 	bne.w	1fdde <parse_ncellmeas+0x9e>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   1fef6:	4649      	mov	r1, r9
   1fef8:	f105 0228 	add.w	r2, r5, #40	; 0x28
   1fefc:	f107 001c 	add.w	r0, r7, #28
   1ff00:	f007 f951 	bl	271a6 <at_params_short_get>
	if (err) {
   1ff04:	4604      	mov	r4, r0
   1ff06:	2800      	cmp	r0, #0
   1ff08:	f47f af69 	bne.w	1fdde <parse_ncellmeas+0x9e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   1ff0c:	2108      	movs	r1, #8
   1ff0e:	f107 0208 	add.w	r2, r7, #8
   1ff12:	f107 001c 	add.w	r0, r7, #28
   1ff16:	f007 f97a 	bl	2720e <at_params_int_get>
	if (err) {
   1ff1a:	4604      	mov	r4, r0
   1ff1c:	2800      	cmp	r0, #0
   1ff1e:	f47f af5e 	bne.w	1fdde <parse_ncellmeas+0x9e>
	cells->current_cell.rsrp = tmp;
   1ff22:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   1ff24:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   1ff26:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   1ff28:	f107 0208 	add.w	r2, r7, #8
   1ff2c:	f107 001c 	add.w	r0, r7, #28
   1ff30:	f007 f96d 	bl	2720e <at_params_int_get>
	if (err) {
   1ff34:	4604      	mov	r4, r0
   1ff36:	2800      	cmp	r0, #0
   1ff38:	f47f af51 	bne.w	1fdde <parse_ncellmeas+0x9e>
	cells->current_cell.rsrq = tmp;
   1ff3c:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   1ff3e:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   1ff40:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   1ff42:	f105 0220 	add.w	r2, r5, #32
   1ff46:	f107 001c 	add.w	r0, r7, #28
   1ff4a:	f007 f978 	bl	2723e <at_params_int64_get>
	if (err) {
   1ff4e:	4604      	mov	r4, r0
   1ff50:	2800      	cmp	r0, #0
   1ff52:	f47f af44 	bne.w	1fdde <parse_ncellmeas+0x9e>
	cells->ncells_count = neighborcell_count_get(at_response);
   1ff56:	4640      	mov	r0, r8
   1ff58:	f7ff fecc 	bl	1fcf4 <neighborcell_count_get>
   1ff5c:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   1ff60:	b2c0      	uxtb	r0, r0
   1ff62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   1ff66:	f100 040b 	add.w	r4, r0, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   1ff6a:	f107 001c 	add.w	r0, r7, #28
   1ff6e:	f007 f99a 	bl	272a6 <at_params_valid_count_get>
   1ff72:	4284      	cmp	r4, r0
   1ff74:	d20f      	bcs.n	1ff96 <parse_ncellmeas+0x256>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   1ff76:	4621      	mov	r1, r4
   1ff78:	f105 0218 	add.w	r2, r5, #24
   1ff7c:	f107 001c 	add.w	r0, r7, #28
   1ff80:	f007 f95d 	bl	2723e <at_params_int64_get>
		if (err) {
   1ff84:	4604      	mov	r4, r0
   1ff86:	2800      	cmp	r0, #0
   1ff88:	f47f af29 	bne.w	1fdde <parse_ncellmeas+0x9e>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   1ff8c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1ff90:	b933      	cbnz	r3, 1ffa0 <parse_ncellmeas+0x260>
	err = at_params_string_get(&resp_list,
   1ff92:	2400      	movs	r4, #0
   1ff94:	e723      	b.n	1fdde <parse_ncellmeas+0x9e>
		cells->current_cell.timing_advance_meas_time = 0;
   1ff96:	2200      	movs	r2, #0
   1ff98:	2300      	movs	r3, #0
   1ff9a:	e9c5 2306 	strd	r2, r3, [r5, #24]
   1ff9e:	e7f5      	b.n	1ff8c <parse_ncellmeas+0x24c>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   1ffa0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ffa2:	2b00      	cmp	r3, #0
   1ffa4:	d0f5      	beq.n	1ff92 <parse_ncellmeas+0x252>
   1ffa6:	f04f 080f 	mov.w	r8, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   1ffaa:	f04f 0900 	mov.w	r9, #0
   1ffae:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1ffb2:	4599      	cmp	r9, r3
   1ffb4:	d304      	bcc.n	1ffc0 <parse_ncellmeas+0x280>
	if (incomplete) {
   1ffb6:	2e00      	cmp	r6, #0
   1ffb8:	d0eb      	beq.n	1ff92 <parse_ncellmeas+0x252>
		err = -E2BIG;
   1ffba:	f06f 0406 	mvn.w	r4, #6
   1ffbe:	e70e      	b.n	1fdde <parse_ncellmeas+0x9e>
					&cells->neighbor_cells[i].earfcn);
   1ffc0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   1ffc2:	f1a8 0104 	sub.w	r1, r8, #4
   1ffc6:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   1ffca:	f107 001c 	add.w	r0, r7, #28
   1ffce:	f007 f91e 	bl	2720e <at_params_int_get>
		if (err) {
   1ffd2:	ea4f 1a09 	mov.w	sl, r9, lsl #4
   1ffd6:	4604      	mov	r4, r0
   1ffd8:	2800      	cmp	r0, #0
   1ffda:	f47f af00 	bne.w	1fdde <parse_ncellmeas+0x9e>
					  &cells->neighbor_cells[i].phys_cell_id);
   1ffde:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   1ffe0:	f1a8 0103 	sub.w	r1, r8, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   1ffe4:	4452      	add	r2, sl
		err = at_params_short_get(&resp_list,
   1ffe6:	3208      	adds	r2, #8
   1ffe8:	f107 001c 	add.w	r0, r7, #28
   1ffec:	f007 f8db 	bl	271a6 <at_params_short_get>
		if (err) {
   1fff0:	4604      	mov	r4, r0
   1fff2:	2800      	cmp	r0, #0
   1fff4:	f47f aef3 	bne.w	1fdde <parse_ncellmeas+0x9e>
		err = at_params_int_get(&resp_list,
   1fff8:	f107 0208 	add.w	r2, r7, #8
   1fffc:	f1a8 0102 	sub.w	r1, r8, #2
   20000:	f107 001c 	add.w	r0, r7, #28
   20004:	f007 f903 	bl	2720e <at_params_int_get>
		if (err) {
   20008:	4604      	mov	r4, r0
   2000a:	2800      	cmp	r0, #0
   2000c:	f47f aee7 	bne.w	1fdde <parse_ncellmeas+0x9e>
		cells->neighbor_cells[i].rsrp = tmp;
   20010:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   20012:	68ba      	ldr	r2, [r7, #8]
   20014:	4453      	add	r3, sl
   20016:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   20018:	f108 31ff 	add.w	r1, r8, #4294967295
   2001c:	f107 0208 	add.w	r2, r7, #8
   20020:	f107 001c 	add.w	r0, r7, #28
   20024:	f007 f8f3 	bl	2720e <at_params_int_get>
		if (err) {
   20028:	4604      	mov	r4, r0
   2002a:	2800      	cmp	r0, #0
   2002c:	f47f aed7 	bne.w	1fdde <parse_ncellmeas+0x9e>
		cells->neighbor_cells[i].rsrq = tmp;
   20030:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   20032:	68ba      	ldr	r2, [r7, #8]
   20034:	4453      	add	r3, sl
   20036:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   20038:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   2003a:	4641      	mov	r1, r8
					&cells->neighbor_cells[i].time_diff);
   2003c:	4452      	add	r2, sl
		err = at_params_int_get(&resp_list,
   2003e:	3204      	adds	r2, #4
   20040:	f107 001c 	add.w	r0, r7, #28
   20044:	f007 f8e3 	bl	2720e <at_params_int_get>
		if (err) {
   20048:	f108 0805 	add.w	r8, r8, #5
   2004c:	4604      	mov	r4, r0
   2004e:	2800      	cmp	r0, #0
   20050:	f47f aec5 	bne.w	1fdde <parse_ncellmeas+0x9e>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   20054:	f109 0901 	add.w	r9, r9, #1
   20058:	e7a9      	b.n	1ffae <parse_ncellmeas+0x26e>
		err = 1;
   2005a:	2401      	movs	r4, #1
   2005c:	e6bf      	b.n	1fdde <parse_ncellmeas+0x9e>
   2005e:	bf00      	nop
   20060:	0002aad9 	.word	0x0002aad9
   20064:	00029074 	.word	0x00029074
   20068:	0002aead 	.word	0x0002aead
   2006c:	0002ad31 	.word	0x0002ad31
   20070:	0002aa55 	.word	0x0002aa55

00020074 <parse_ncellmeas_gci>:
{
	struct at_param_list resp_list;
	struct lte_lc_ncell *ncells = NULL;
	int err, status, tmp_int, len;
	int16_t tmp_short;
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20074:	2300      	movs	r3, #0
{
   20076:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2007a:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
   2007c:	220b      	movs	r2, #11
{
   2007e:	460d      	mov	r5, r1
	uint32_t count = 0;
   20080:	4699      	mov	r9, r3
{
   20082:	b0a5      	sub	sp, #148	; 0x94
   20084:	af00      	add	r7, sp, #0
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20086:	e9c7 330f 	strd	r3, r3, [r7, #60]	; 0x3c
	size_t response_prefix_len = sizeof(response_prefix);
   2008a:	62ba      	str	r2, [r7, #40]	; 0x28
{
   2008c:	60f8      	str	r0, [r7, #12]
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   2008e:	f8c7 3043 	str.w	r3, [r7, #67]	; 0x43
static uint32_t get_char_frequency(const char *str, char c)
   20092:	1e4a      	subs	r2, r1, #1
		if (*str == c) {
   20094:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   20098:	2b2c      	cmp	r3, #44	; 0x2c
   2009a:	d102      	bne.n	200a2 <parse_ncellmeas_gci+0x2e>
			count++;
   2009c:	f109 0901 	add.w	r9, r9, #1
	} while (*(str++) != '\0');
   200a0:	e7f8      	b.n	20094 <parse_ncellmeas_gci+0x20>
   200a2:	2b00      	cmp	r3, #0
   200a4:	d1f6      	bne.n	20094 <parse_ncellmeas_gci+0x20>
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	/* Fill the defaults */
	cells->gci_cells_count = 0;
	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   200a6:	f04f 32ff 	mov.w	r2, #4294967295
   200aa:	2430      	movs	r4, #48	; 0x30
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   200ac:	f109 0803 	add.w	r8, r9, #3
	cells->gci_cells_count = 0;
   200b0:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	cells->ncells_count = 0;
   200b4:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   200b8:	60b2      	str	r2, [r6, #8]

	for (i = 0; i < params->gci_count; i++) {
   200ba:	68f9      	ldr	r1, [r7, #12]
   200bc:	7849      	ldrb	r1, [r1, #1]
   200be:	4299      	cmp	r1, r3
   200c0:	d812      	bhi.n	200e8 <parse_ncellmeas_gci+0x74>
	 *		<meas_time>,<serving>,<neighbor_count>
	 *	[,<n_earfcn1>,<n_phys_cell_id1>,<n_rsrp1>,<n_rsrq1>,<time_diff1>]
	 *	[,<n_earfcn2>,<n_phys_cell_id2>,<n_rsrp2>,<n_rsrq2>,<time_diff2>]...]...
	 */

	err = at_params_list_init(&resp_list, param_count);
   200c2:	4641      	mov	r1, r8
   200c4:	f107 0034 	add.w	r0, r7, #52	; 0x34
   200c8:	f006 ffc5 	bl	27056 <at_params_list_init>
	if (err) {
   200cc:	4604      	mov	r4, r0
   200ce:	b1a8      	cbz	r0, 200fc <parse_ncellmeas_gci+0x88>
		LOG_ERR("Could not init AT params list for cell_list, error: %d", err);
   200d0:	466d      	mov	r5, sp
   200d2:	b088      	sub	sp, #32
   200d4:	466a      	mov	r2, sp
   200d6:	4bb1      	ldr	r3, [pc, #708]	; (2039c <parse_ncellmeas_gci+0x328>)

				/* <n_rsrq[j]> */
				curr_index++;
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
				if (err) {
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   200d8:	6153      	str	r3, [r2, #20]
		}
	}

	if (incomplete) {
		err = -E2BIG;
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   200da:	2303      	movs	r3, #3
   200dc:	6194      	str	r4, [r2, #24]
   200de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   200e2:	f842 3f10 	str.w	r3, [r2, #16]!
   200e6:	e0a7      	b.n	20238 <parse_ncellmeas_gci+0x1c4>
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   200e8:	fb04 f003 	mul.w	r0, r4, r3
   200ec:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
	for (i = 0; i < params->gci_count; i++) {
   200ee:	3301      	adds	r3, #1
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   200f0:	4401      	add	r1, r0
   200f2:	608a      	str	r2, [r1, #8]
		cells->gci_cells[i].timing_advance = LTE_LC_CELL_TIMING_ADVANCE_INVALID;
   200f4:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   200f6:	4401      	add	r1, r0
   200f8:	828a      	strh	r2, [r1, #20]
	for (i = 0; i < params->gci_count; i++) {
   200fa:	e7de      	b.n	200ba <parse_ncellmeas_gci+0x46>
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   200fc:	4601      	mov	r1, r0
   200fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
   20102:	4628      	mov	r0, r5
   20104:	f006 ff8e 	bl	27024 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   20108:	4604      	mov	r4, r0
   2010a:	b360      	cbz	r0, 20166 <parse_ncellmeas_gci+0xf2>
   2010c:	1dc3      	adds	r3, r0, #7
   2010e:	d004      	beq.n	2011a <parse_ncellmeas_gci+0xa6>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   20110:	466d      	mov	r5, sp
   20112:	b088      	sub	sp, #32
   20114:	466a      	mov	r2, sp
   20116:	4ba2      	ldr	r3, [pc, #648]	; (203a0 <parse_ncellmeas_gci+0x32c>)
   20118:	e7de      	b.n	200d8 <parse_ncellmeas_gci+0x64>
		LOG_WRN("E2BIG was returned, continue. param_count %d, err %d, str %s",
   2011a:	46ea      	mov	sl, sp
   2011c:	b08a      	sub	sp, #40	; 0x28
   2011e:	466a      	mov	r2, sp
   20120:	4ba0      	ldr	r3, [pc, #640]	; (203a4 <parse_ncellmeas_gci+0x330>)
   20122:	e9c2 0507 	strd	r0, r5, [r2, #28]
   20126:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2012a:	f240 4302 	movw	r3, #1026	; 0x402
   2012e:	8493      	strh	r3, [r2, #36]	; 0x24
   20130:	4b9d      	ldr	r3, [pc, #628]	; (203a8 <parse_ncellmeas_gci+0x334>)
   20132:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   20136:	f842 3f10 	str.w	r3, [r2, #16]!
   2013a:	489c      	ldr	r0, [pc, #624]	; (203ac <parse_ncellmeas_gci+0x338>)
   2013c:	f007 f8cb 	bl	272d6 <z_log_msg_static_create.constprop.0>
		incomplete = true;
   20140:	2301      	movs	r3, #1
   20142:	46d5      	mov	sp, sl
   20144:	617b      	str	r3, [r7, #20]
	err = at_params_string_get(&resp_list,
   20146:	2100      	movs	r1, #0
   20148:	f107 0328 	add.w	r3, r7, #40	; 0x28
   2014c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   20150:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20154:	f007 f887 	bl	27266 <at_params_string_get>
	if (err) {
   20158:	4604      	mov	r4, r0
   2015a:	b130      	cbz	r0, 2016a <parse_ncellmeas_gci+0xf6>
		LOG_ERR("Could not get response prefix, error: %d", err);
   2015c:	466d      	mov	r5, sp
   2015e:	b088      	sub	sp, #32
   20160:	466a      	mov	r2, sp
   20162:	4b93      	ldr	r3, [pc, #588]	; (203b0 <parse_ncellmeas_gci+0x33c>)
   20164:	e7b8      	b.n	200d8 <parse_ncellmeas_gci+0x64>
	bool incomplete = false;
   20166:	6178      	str	r0, [r7, #20]
   20168:	e7ed      	b.n	20146 <parse_ncellmeas_gci+0xd2>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2016a:	4a92      	ldr	r2, [pc, #584]	; (203b4 <parse_ncellmeas_gci+0x340>)
   2016c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2016e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   20172:	f7ff fb05 	bl	1f780 <response_is_valid>
   20176:	6138      	str	r0, [r7, #16]
   20178:	b9a0      	cbnz	r0, 201a4 <parse_ncellmeas_gci+0x130>
		LOG_ERR("Not a valid NCELLMEAS response");
   2017a:	4b8f      	ldr	r3, [pc, #572]	; (203b8 <parse_ncellmeas_gci+0x344>)
   2017c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20180:	677b      	str	r3, [r7, #116]	; 0x74
   20182:	2302      	movs	r3, #2
   20184:	4889      	ldr	r0, [pc, #548]	; (203ac <parse_ncellmeas_gci+0x338>)
   20186:	673b      	str	r3, [r7, #112]	; 0x70
   20188:	f107 0270 	add.w	r2, r7, #112	; 0x70
   2018c:	f007 f8a3 	bl	272d6 <z_log_msg_static_create.constprop.0>
	err = at_params_string_get(&resp_list,
   20190:	2400      	movs	r4, #0
	}

clean_exit:
	at_params_list_free(&resp_list);
   20192:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20196:	f006 ff88 	bl	270aa <at_params_list_free>

	return err;
}
   2019a:	4620      	mov	r0, r4
   2019c:	3794      	adds	r7, #148	; 0x94
   2019e:	46bd      	mov	sp, r7
   201a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = at_params_int_get(&resp_list, curr_index, &status);
   201a4:	2101      	movs	r1, #1
   201a6:	f107 021c 	add.w	r2, r7, #28
   201aa:	f107 0034 	add.w	r0, r7, #52	; 0x34
   201ae:	f007 f82e 	bl	2720e <at_params_int_get>
	if (err) {
   201b2:	4604      	mov	r4, r0
   201b4:	2800      	cmp	r0, #0
   201b6:	d1ec      	bne.n	20192 <parse_ncellmeas_gci+0x11e>
	if (status == AT_NCELLMEAS_STATUS_VALUE_FAIL) {
   201b8:	69fc      	ldr	r4, [r7, #28]
   201ba:	2c01      	cmp	r4, #1
   201bc:	d0e9      	beq.n	20192 <parse_ncellmeas_gci+0x11e>
	} else if (status == AT_NCELLMEAS_STATUS_VALUE_INCOMPLETE) {
   201be:	2c02      	cmp	r4, #2
   201c0:	d109      	bne.n	201d6 <parse_ncellmeas_gci+0x162>
		LOG_WRN("NCELLMEAS measurements interrupted; results incomplete");
   201c2:	4b7e      	ldr	r3, [pc, #504]	; (203bc <parse_ncellmeas_gci+0x348>)
   201c4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   201c8:	e9c7 431c 	strd	r4, r3, [r7, #112]	; 0x70
   201cc:	4877      	ldr	r0, [pc, #476]	; (203ac <parse_ncellmeas_gci+0x338>)
   201ce:	f107 0270 	add.w	r2, r7, #112	; 0x70
   201d2:	f007 f880 	bl	272d6 <z_log_msg_static_create.constprop.0>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   201d6:	f04f 0a00 	mov.w	sl, #0
   201da:	2501      	movs	r5, #1
   201dc:	46d0      	mov	r8, sl
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   201de:	f1a9 030a 	sub.w	r3, r9, #10
   201e2:	607b      	str	r3, [r7, #4]
   201e4:	687b      	ldr	r3, [r7, #4]
   201e6:	42ab      	cmp	r3, r5
   201e8:	d903      	bls.n	201f2 <parse_ncellmeas_gci+0x17e>
			i < params->gci_count; i++) {
   201ea:	68fb      	ldr	r3, [r7, #12]
   201ec:	785b      	ldrb	r3, [r3, #1]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   201ee:	4543      	cmp	r3, r8
   201f0:	d80a      	bhi.n	20208 <parse_ncellmeas_gci+0x194>
	if (incomplete) {
   201f2:	697b      	ldr	r3, [r7, #20]
   201f4:	2b00      	cmp	r3, #0
   201f6:	d0cb      	beq.n	20190 <parse_ncellmeas_gci+0x11c>
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   201f8:	466d      	mov	r5, sp
   201fa:	b088      	sub	sp, #32
   201fc:	466a      	mov	r2, sp
   201fe:	4b70      	ldr	r3, [pc, #448]	; (203c0 <parse_ncellmeas_gci+0x34c>)
   20200:	f06f 0406 	mvn.w	r4, #6
   20204:	6153      	str	r3, [r2, #20]
   20206:	e768      	b.n	200da <parse_ncellmeas_gci+0x66>
		curr_index++;
   20208:	f105 0901 	add.w	r9, r5, #1
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   2020c:	4649      	mov	r1, r9
   2020e:	f107 0220 	add.w	r2, r7, #32
   20212:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20216:	f007 f887 	bl	27328 <string_param_to_int.constprop.0>
		if (err) {
   2021a:	4604      	mov	r4, r0
   2021c:	b188      	cbz	r0, 20242 <parse_ncellmeas_gci+0x1ce>
			LOG_ERR("Could not parse cell_id, index %d, i %d error: %d",
   2021e:	466d      	mov	r5, sp
   20220:	b08a      	sub	sp, #40	; 0x28
   20222:	466a      	mov	r2, sp
   20224:	4b67      	ldr	r3, [pc, #412]	; (203c4 <parse_ncellmeas_gci+0x350>)
   20226:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   2022a:	e9c2 3905 	strd	r3, r9, [r2, #20]
   2022e:	2305      	movs	r3, #5
   20230:	e9c2 8007 	strd	r8, r0, [r2, #28]
   20234:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   20238:	485c      	ldr	r0, [pc, #368]	; (203ac <parse_ncellmeas_gci+0x338>)
   2023a:	f007 f84c 	bl	272d6 <z_log_msg_static_create.constprop.0>
   2023e:	46ad      	mov	sp, r5
   20240:	e7a7      	b.n	20192 <parse_ncellmeas_gci+0x11e>
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   20242:	6a3b      	ldr	r3, [r7, #32]
   20244:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   20248:	db11      	blt.n	2026e <parse_ncellmeas_gci+0x1fa>
			LOG_WRN("cell_id = %d which is > LTE_LC_CELL_EUTRAN_ID_MAX; "
   2024a:	466c      	mov	r4, sp
   2024c:	b088      	sub	sp, #32
   2024e:	466a      	mov	r2, sp
   20250:	495d      	ldr	r1, [pc, #372]	; (203c8 <parse_ncellmeas_gci+0x354>)
   20252:	4856      	ldr	r0, [pc, #344]	; (203ac <parse_ncellmeas_gci+0x338>)
   20254:	e9c2 1305 	strd	r1, r3, [r2, #20]
   20258:	2303      	movs	r3, #3
   2025a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2025e:	f842 3f10 	str.w	r3, [r2, #16]!
   20262:	f007 f838 	bl	272d6 <z_log_msg_static_create.constprop.0>
			tmp_int = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20266:	f04f 33ff 	mov.w	r3, #4294967295
   2026a:	46a5      	mov	sp, r4
   2026c:	623b      	str	r3, [r7, #32]
		parsed_cell.id = tmp_int;
   2026e:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   20270:	f107 022c 	add.w	r2, r7, #44	; 0x2c
		parsed_cell.id = tmp_int;
   20274:	66bb      	str	r3, [r7, #104]	; 0x68
		len = sizeof(tmp_str);
   20276:	2307      	movs	r3, #7
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   20278:	1ca9      	adds	r1, r5, #2
		len = sizeof(tmp_str);
   2027a:	627b      	str	r3, [r7, #36]	; 0x24
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   2027c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20280:	f107 0324 	add.w	r3, r7, #36	; 0x24
   20284:	f006 ffef 	bl	27266 <at_params_string_get>
		if (err) {
   20288:	4604      	mov	r4, r0
   2028a:	b120      	cbz	r0, 20296 <parse_ncellmeas_gci+0x222>
			LOG_ERR("Could not parse plmn, error: %d", err);
   2028c:	466d      	mov	r5, sp
   2028e:	b088      	sub	sp, #32
   20290:	466a      	mov	r2, sp
   20292:	4b4e      	ldr	r3, [pc, #312]	; (203cc <parse_ncellmeas_gci+0x358>)
   20294:	e720      	b.n	200d8 <parse_ncellmeas_gci+0x64>
		tmp_str[len] = '\0';
   20296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20298:	f107 0218 	add.w	r2, r7, #24
   2029c:	3378      	adds	r3, #120	; 0x78
   2029e:	4413      	add	r3, r2
   202a0:	f803 0c64 	strb.w	r0, [r3, #-100]
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
   202a4:	210a      	movs	r1, #10
   202a6:	f107 0264 	add.w	r2, r7, #100	; 0x64
   202aa:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   202ae:	f007 f815 	bl	272dc <string_to_int>
		if (err) {
   202b2:	4604      	mov	r4, r0
   202b4:	b120      	cbz	r0, 202c0 <parse_ncellmeas_gci+0x24c>
			LOG_ERR("string_to_int, error: %d", err);
   202b6:	466d      	mov	r5, sp
   202b8:	b088      	sub	sp, #32
   202ba:	466a      	mov	r2, sp
   202bc:	4b44      	ldr	r3, [pc, #272]	; (203d0 <parse_ncellmeas_gci+0x35c>)
   202be:	e70b      	b.n	200d8 <parse_ncellmeas_gci+0x64>
		tmp_str[3] = '\0';
   202c0:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
		err = string_to_int(tmp_str, 10, &parsed_cell.mcc);
   202c4:	210a      	movs	r1, #10
   202c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
   202ca:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   202ce:	f007 f805 	bl	272dc <string_to_int>
		if (err) {
   202d2:	4604      	mov	r4, r0
   202d4:	2800      	cmp	r0, #0
   202d6:	d1ee      	bne.n	202b6 <parse_ncellmeas_gci+0x242>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   202d8:	f107 0220 	add.w	r2, r7, #32
   202dc:	1ce9      	adds	r1, r5, #3
   202de:	f107 0034 	add.w	r0, r7, #52	; 0x34
   202e2:	f007 f821 	bl	27328 <string_param_to_int.constprop.0>
		if (err) {
   202e6:	4604      	mov	r4, r0
   202e8:	b160      	cbz	r0, 20304 <parse_ncellmeas_gci+0x290>
			LOG_ERR("Could not parse tracking_area_code in i %d, error: %d", i, err);
   202ea:	466d      	mov	r5, sp
   202ec:	b088      	sub	sp, #32
   202ee:	466a      	mov	r2, sp
   202f0:	4b38      	ldr	r3, [pc, #224]	; (203d4 <parse_ncellmeas_gci+0x360>)
   202f2:	61d0      	str	r0, [r2, #28]
   202f4:	e9c2 3805 	strd	r3, r8, [r2, #20]
   202f8:	2304      	movs	r3, #4
   202fa:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   202fe:	f842 3f10 	str.w	r3, [r2, #16]!
   20302:	e799      	b.n	20238 <parse_ncellmeas_gci+0x1c4>
		parsed_cell.tac = tmp_int;
   20304:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   20306:	f107 0220 	add.w	r2, r7, #32
		parsed_cell.tac = tmp_int;
   2030a:	66fb      	str	r3, [r7, #108]	; 0x6c
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   2030c:	1d29      	adds	r1, r5, #4
   2030e:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20312:	f006 ff7c 	bl	2720e <at_params_int_get>
		if (err) {
   20316:	4604      	mov	r4, r0
   20318:	b120      	cbz	r0, 20324 <parse_ncellmeas_gci+0x2b0>
			LOG_ERR("Could not parse timing_advance, error: %d", err);
   2031a:	466d      	mov	r5, sp
   2031c:	b088      	sub	sp, #32
   2031e:	466a      	mov	r2, sp
   20320:	4b2d      	ldr	r3, [pc, #180]	; (203d8 <parse_ncellmeas_gci+0x364>)
   20322:	e6d9      	b.n	200d8 <parse_ncellmeas_gci+0x64>
		parsed_cell.timing_advance = tmp_int;
   20324:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_int64_get(&resp_list, curr_index,
   20326:	f107 0278 	add.w	r2, r7, #120	; 0x78
		parsed_cell.timing_advance = tmp_int;
   2032a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		err = at_params_int64_get(&resp_list, curr_index,
   2032e:	1d69      	adds	r1, r5, #5
   20330:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20334:	f006 ff83 	bl	2723e <at_params_int64_get>
		if (err) {
   20338:	4604      	mov	r4, r0
   2033a:	b120      	cbz	r0, 20346 <parse_ncellmeas_gci+0x2d2>
			LOG_ERR("Could not parse timing_advance_meas_time, error: %d", err);
   2033c:	466d      	mov	r5, sp
   2033e:	b088      	sub	sp, #32
   20340:	466a      	mov	r2, sp
   20342:	4b26      	ldr	r3, [pc, #152]	; (203dc <parse_ncellmeas_gci+0x368>)
   20344:	e6c8      	b.n	200d8 <parse_ncellmeas_gci+0x64>
		err = at_params_int_get(&resp_list, curr_index, &parsed_cell.earfcn);
   20346:	f107 0270 	add.w	r2, r7, #112	; 0x70
   2034a:	1da9      	adds	r1, r5, #6
   2034c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20350:	f006 ff5d 	bl	2720e <at_params_int_get>
		if (err) {
   20354:	4604      	mov	r4, r0
   20356:	b120      	cbz	r0, 20362 <parse_ncellmeas_gci+0x2ee>
			LOG_ERR("Could not parse earfcn, error: %d", err);
   20358:	466d      	mov	r5, sp
   2035a:	b088      	sub	sp, #32
   2035c:	466a      	mov	r2, sp
   2035e:	4b20      	ldr	r3, [pc, #128]	; (203e0 <parse_ncellmeas_gci+0x36c>)
   20360:	e6ba      	b.n	200d8 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.phys_cell_id);
   20362:	f107 0288 	add.w	r2, r7, #136	; 0x88
   20366:	1de9      	adds	r1, r5, #7
   20368:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2036c:	f006 ff1b 	bl	271a6 <at_params_short_get>
		if (err) {
   20370:	4604      	mov	r4, r0
   20372:	b120      	cbz	r0, 2037e <parse_ncellmeas_gci+0x30a>
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   20374:	466d      	mov	r5, sp
   20376:	b088      	sub	sp, #32
   20378:	466a      	mov	r2, sp
   2037a:	4b1a      	ldr	r3, [pc, #104]	; (203e4 <parse_ncellmeas_gci+0x370>)
   2037c:	e6ac      	b.n	200d8 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrp);
   2037e:	f107 028a 	add.w	r2, r7, #138	; 0x8a
   20382:	f105 0108 	add.w	r1, r5, #8
   20386:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2038a:	f006 ff0c 	bl	271a6 <at_params_short_get>
		if (err) {
   2038e:	4604      	mov	r4, r0
   20390:	b360      	cbz	r0, 203ec <parse_ncellmeas_gci+0x378>
			LOG_ERR("Could not parse rsrp, error: %d", err);
   20392:	466d      	mov	r5, sp
   20394:	b088      	sub	sp, #32
   20396:	466a      	mov	r2, sp
   20398:	4b13      	ldr	r3, [pc, #76]	; (203e8 <parse_ncellmeas_gci+0x374>)
   2039a:	e69d      	b.n	200d8 <parse_ncellmeas_gci+0x64>
   2039c:	0002aedf 	.word	0x0002aedf
   203a0:	0002aead 	.word	0x0002aead
   203a4:	0002af16 	.word	0x0002af16
   203a8:	01000005 	.word	0x01000005
   203ac:	00029074 	.word	0x00029074
   203b0:	0002ad31 	.word	0x0002ad31
   203b4:	0002aa55 	.word	0x0002aa55
   203b8:	0002af53 	.word	0x0002af53
   203bc:	0002af72 	.word	0x0002af72
   203c0:	0002b32a 	.word	0x0002b32a
   203c4:	0002afa9 	.word	0x0002afa9
   203c8:	0002afdb 	.word	0x0002afdb
   203cc:	0002b01e 	.word	0x0002b01e
   203d0:	0002b03e 	.word	0x0002b03e
   203d4:	0002b057 	.word	0x0002b057
   203d8:	0002b08d 	.word	0x0002b08d
   203dc:	0002b0b7 	.word	0x0002b0b7
   203e0:	0002b0eb 	.word	0x0002b0eb
   203e4:	0002b10d 	.word	0x0002b10d
   203e8:	0002b135 	.word	0x0002b135
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrq);
   203ec:	f107 028c 	add.w	r2, r7, #140	; 0x8c
   203f0:	f105 0109 	add.w	r1, r5, #9
   203f4:	f107 0034 	add.w	r0, r7, #52	; 0x34
   203f8:	f006 fed5 	bl	271a6 <at_params_short_get>
		if (err) {
   203fc:	4604      	mov	r4, r0
   203fe:	b120      	cbz	r0, 2040a <parse_ncellmeas_gci+0x396>
			LOG_ERR("Could not parse rsrq, error: %d", err);
   20400:	466d      	mov	r5, sp
   20402:	b088      	sub	sp, #32
   20404:	466a      	mov	r2, sp
   20406:	4b75      	ldr	r3, [pc, #468]	; (205dc <parse_ncellmeas_gci+0x568>)
   20408:	e666      	b.n	200d8 <parse_ncellmeas_gci+0x64>
		err = at_params_int64_get(&resp_list, curr_index, &parsed_cell.measurement_time);
   2040a:	f107 0280 	add.w	r2, r7, #128	; 0x80
   2040e:	f105 010a 	add.w	r1, r5, #10
   20412:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20416:	f006 ff12 	bl	2723e <at_params_int64_get>
		if (err) {
   2041a:	4604      	mov	r4, r0
   2041c:	b120      	cbz	r0, 20428 <parse_ncellmeas_gci+0x3b4>
			LOG_ERR("Could not parse meas_time, error: %d", err);
   2041e:	466d      	mov	r5, sp
   20420:	b088      	sub	sp, #32
   20422:	466a      	mov	r2, sp
   20424:	4b6e      	ldr	r3, [pc, #440]	; (205e0 <parse_ncellmeas_gci+0x56c>)
   20426:	e657      	b.n	200d8 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   20428:	f107 021a 	add.w	r2, r7, #26
   2042c:	f105 010b 	add.w	r1, r5, #11
   20430:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20434:	f006 feb7 	bl	271a6 <at_params_short_get>
		if (err) {
   20438:	4604      	mov	r4, r0
   2043a:	b120      	cbz	r0, 20446 <parse_ncellmeas_gci+0x3d2>
			LOG_ERR("Could not parse serving, error: %d", err);
   2043c:	466d      	mov	r5, sp
   2043e:	b088      	sub	sp, #32
   20440:	466a      	mov	r2, sp
   20442:	4b68      	ldr	r3, [pc, #416]	; (205e4 <parse_ncellmeas_gci+0x570>)
   20444:	e648      	b.n	200d8 <parse_ncellmeas_gci+0x64>
		curr_index++;
   20446:	350c      	adds	r5, #12
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   20448:	4629      	mov	r1, r5
   2044a:	f107 021a 	add.w	r2, r7, #26
   2044e:	f107 0034 	add.w	r0, r7, #52	; 0x34
		is_serving_cell = tmp_short;
   20452:	f9b7 901a 	ldrsh.w	r9, [r7, #26]
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   20456:	f006 fea6 	bl	271a6 <at_params_short_get>
		if (err) {
   2045a:	4604      	mov	r4, r0
   2045c:	b120      	cbz	r0, 20468 <parse_ncellmeas_gci+0x3f4>
			LOG_ERR("Could not parse neighbor_count, error: %d", err);
   2045e:	466d      	mov	r5, sp
   20460:	b088      	sub	sp, #32
   20462:	466a      	mov	r2, sp
   20464:	4b60      	ldr	r3, [pc, #384]	; (205e8 <parse_ncellmeas_gci+0x574>)
   20466:	e637      	b.n	200d8 <parse_ncellmeas_gci+0x64>
		if (is_serving_cell) {
   20468:	f1b9 0f00 	cmp.w	r9, #0
   2046c:	f000 809e 	beq.w	205ac <parse_ncellmeas_gci+0x538>
			cells->current_cell = parsed_cell;
   20470:	46b4      	mov	ip, r6
   20472:	f107 0e60 	add.w	lr, r7, #96	; 0x60
   20476:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2047a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2047e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   20482:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20486:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
		parsed_ncells_count = tmp_short;
   2048a:	f897 901a 	ldrb.w	r9, [r7, #26]
			cells->current_cell = parsed_cell;
   2048e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			if (parsed_ncells_count != 0) {
   20492:	f1b9 0f00 	cmp.w	r9, #0
   20496:	d02c      	beq.n	204f2 <parse_ncellmeas_gci+0x47e>
				if (parsed_ncells_count > CONFIG_LTE_NEIGHBOR_CELLS_MAX) {
   20498:	f1b9 0f0a 	cmp.w	r9, #10
   2049c:	d924      	bls.n	204e8 <parse_ncellmeas_gci+0x474>
					LOG_WRN("Cutting response, because received neigbor cell"
   2049e:	46e9      	mov	r9, sp
   204a0:	b088      	sub	sp, #32
   204a2:	466a      	mov	r2, sp
   204a4:	4b51      	ldr	r3, [pc, #324]	; (205ec <parse_ncellmeas_gci+0x578>)
   204a6:	240a      	movs	r4, #10
   204a8:	6153      	str	r3, [r2, #20]
   204aa:	2303      	movs	r3, #3
   204ac:	6194      	str	r4, [r2, #24]
   204ae:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   204b2:	f842 3f10 	str.w	r3, [r2, #16]!
   204b6:	484e      	ldr	r0, [pc, #312]	; (205f0 <parse_ncellmeas_gci+0x57c>)
   204b8:	f006 ff0d 	bl	272d6 <z_log_msg_static_create.constprop.0>
   204bc:	46cd      	mov	sp, r9
					incomplete = true;
   204be:	693b      	ldr	r3, [r7, #16]
   204c0:	617b      	str	r3, [r7, #20]
				ncells = k_calloc(
   204c2:	2110      	movs	r1, #16
   204c4:	4620      	mov	r0, r4
   204c6:	f008 f9dd 	bl	28884 <k_calloc>
				if (ncells == NULL) {
   204ca:	b978      	cbnz	r0, 204ec <parse_ncellmeas_gci+0x478>
					LOG_WRN("Failed to allocate memory for the ncells"
   204cc:	4b49      	ldr	r3, [pc, #292]	; (205f4 <parse_ncellmeas_gci+0x580>)
   204ce:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   204d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   204d4:	2302      	movs	r3, #2
   204d6:	4846      	ldr	r0, [pc, #280]	; (205f0 <parse_ncellmeas_gci+0x57c>)
   204d8:	65bb      	str	r3, [r7, #88]	; 0x58
   204da:	f107 0258 	add.w	r2, r7, #88	; 0x58
   204de:	f006 fefa 	bl	272d6 <z_log_msg_static_create.constprop.0>
			i < params->gci_count; i++) {
   204e2:	f108 0801 	add.w	r8, r8, #1
   204e6:	e67d      	b.n	201e4 <parse_ncellmeas_gci+0x170>
					to_be_parsed_ncell_count = parsed_ncells_count;
   204e8:	464c      	mov	r4, r9
   204ea:	e7ea      	b.n	204c2 <parse_ncellmeas_gci+0x44e>
				cells->neighbor_cells = ncells;
   204ec:	6370      	str	r0, [r6, #52]	; 0x34
				cells->ncells_count = to_be_parsed_ncell_count;
   204ee:	f886 4030 	strb.w	r4, [r6, #48]	; 0x30
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   204f2:	f04f 0900 	mov.w	r9, #0
   204f6:	60bc      	str	r4, [r7, #8]
   204f8:	68bb      	ldr	r3, [r7, #8]
   204fa:	454b      	cmp	r3, r9
   204fc:	d0f1      	beq.n	204e2 <parse_ncellmeas_gci+0x46e>
							&cells->neighbor_cells[j].earfcn);
   204fe:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_int_get(&resp_list,
   20500:	1c69      	adds	r1, r5, #1
   20502:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   20506:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2050a:	f006 fe80 	bl	2720e <at_params_int_get>
				if (err) {
   2050e:	ea4f 1b09 	mov.w	fp, r9, lsl #4
   20512:	4604      	mov	r4, r0
   20514:	b120      	cbz	r0, 20520 <parse_ncellmeas_gci+0x4ac>
					LOG_ERR("Could not parse n_earfcn, error: %d", err);
   20516:	466d      	mov	r5, sp
   20518:	b088      	sub	sp, #32
   2051a:	466a      	mov	r2, sp
   2051c:	4b36      	ldr	r3, [pc, #216]	; (205f8 <parse_ncellmeas_gci+0x584>)
   2051e:	e5db      	b.n	200d8 <parse_ncellmeas_gci+0x64>
							  &cells->neighbor_cells[j].phys_cell_id);
   20520:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_short_get(&resp_list,
   20522:	1ca9      	adds	r1, r5, #2
							  &cells->neighbor_cells[j].phys_cell_id);
   20524:	445a      	add	r2, fp
				err = at_params_short_get(&resp_list,
   20526:	3208      	adds	r2, #8
   20528:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2052c:	f006 fe3b 	bl	271a6 <at_params_short_get>
				if (err) {
   20530:	4604      	mov	r4, r0
   20532:	b120      	cbz	r0, 2053e <parse_ncellmeas_gci+0x4ca>
					LOG_ERR("Could not parse n_phys_cell_id, error: %d", err);
   20534:	466d      	mov	r5, sp
   20536:	b088      	sub	sp, #32
   20538:	466a      	mov	r2, sp
   2053a:	4b30      	ldr	r3, [pc, #192]	; (205fc <parse_ncellmeas_gci+0x588>)
   2053c:	e5cc      	b.n	200d8 <parse_ncellmeas_gci+0x64>
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   2053e:	f107 0220 	add.w	r2, r7, #32
   20542:	1ce9      	adds	r1, r5, #3
   20544:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20548:	f006 fe61 	bl	2720e <at_params_int_get>
				if (err) {
   2054c:	4604      	mov	r4, r0
   2054e:	b120      	cbz	r0, 2055a <parse_ncellmeas_gci+0x4e6>
					LOG_ERR("Could not parse n_rsrp, error: %d", err);
   20550:	466d      	mov	r5, sp
   20552:	b088      	sub	sp, #32
   20554:	466a      	mov	r2, sp
   20556:	4b2a      	ldr	r3, [pc, #168]	; (20600 <parse_ncellmeas_gci+0x58c>)
   20558:	e5be      	b.n	200d8 <parse_ncellmeas_gci+0x64>
				cells->neighbor_cells[j].rsrp = tmp_int;
   2055a:	6b73      	ldr	r3, [r6, #52]	; 0x34
   2055c:	6a3a      	ldr	r2, [r7, #32]
   2055e:	445b      	add	r3, fp
   20560:	815a      	strh	r2, [r3, #10]
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   20562:	1d29      	adds	r1, r5, #4
   20564:	f107 0220 	add.w	r2, r7, #32
   20568:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2056c:	f006 fe4f 	bl	2720e <at_params_int_get>
				if (err) {
   20570:	4604      	mov	r4, r0
   20572:	b120      	cbz	r0, 2057e <parse_ncellmeas_gci+0x50a>
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   20574:	466d      	mov	r5, sp
   20576:	b088      	sub	sp, #32
   20578:	466a      	mov	r2, sp
   2057a:	4b22      	ldr	r3, [pc, #136]	; (20604 <parse_ncellmeas_gci+0x590>)
   2057c:	e5ac      	b.n	200d8 <parse_ncellmeas_gci+0x64>
				cells->neighbor_cells[j].rsrq = tmp_int;
   2057e:	6b73      	ldr	r3, [r6, #52]	; 0x34
   20580:	6a3a      	ldr	r2, [r7, #32]
   20582:	445b      	add	r3, fp
   20584:	819a      	strh	r2, [r3, #12]
							&cells->neighbor_cells[j].time_diff);
   20586:	6b72      	ldr	r2, [r6, #52]	; 0x34
				curr_index++;
   20588:	3505      	adds	r5, #5
							&cells->neighbor_cells[j].time_diff);
   2058a:	445a      	add	r2, fp
				err = at_params_int_get(&resp_list,
   2058c:	4629      	mov	r1, r5
   2058e:	3204      	adds	r2, #4
   20590:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20594:	f006 fe3b 	bl	2720e <at_params_int_get>
				if (err) {
   20598:	4604      	mov	r4, r0
   2059a:	b120      	cbz	r0, 205a6 <parse_ncellmeas_gci+0x532>
					LOG_ERR("Could not parse time_diff, error: %d", err);
   2059c:	466d      	mov	r5, sp
   2059e:	b088      	sub	sp, #32
   205a0:	466a      	mov	r2, sp
   205a2:	4b19      	ldr	r3, [pc, #100]	; (20608 <parse_ncellmeas_gci+0x594>)
   205a4:	e598      	b.n	200d8 <parse_ncellmeas_gci+0x64>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   205a6:	f109 0901 	add.w	r9, r9, #1
   205aa:	e7a5      	b.n	204f8 <parse_ncellmeas_gci+0x484>
			cells->gci_cells[k] = parsed_cell;
   205ac:	2330      	movs	r3, #48	; 0x30
   205ae:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
   205b0:	f107 0c60 	add.w	ip, r7, #96	; 0x60
   205b4:	fb03 440a 	mla	r4, r3, sl, r4
   205b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   205bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   205be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   205c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   205c4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   205c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   205cc:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
			k++;
   205d0:	f10a 0a01 	add.w	sl, sl, #1
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   205d4:	3301      	adds	r3, #1
   205d6:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
			k++;
   205da:	e782      	b.n	204e2 <parse_ncellmeas_gci+0x46e>
   205dc:	0002b155 	.word	0x0002b155
   205e0:	0002b175 	.word	0x0002b175
   205e4:	0002b19a 	.word	0x0002b19a
   205e8:	0002b1bd 	.word	0x0002b1bd
   205ec:	0002b1e7 	.word	0x0002b1e7
   205f0:	00029074 	.word	0x00029074
   205f4:	0002b23f 	.word	0x0002b23f
   205f8:	0002b273 	.word	0x0002b273
   205fc:	0002b297 	.word	0x0002b297
   20600:	0002b2c1 	.word	0x0002b2c1
   20604:	0002b2e3 	.word	0x0002b2e3
   20608:	0002b305 	.word	0x0002b305

0002060c <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
	int err;
	struct at_param_list resp_list = {0};
   2060c:	2300      	movs	r3, #0
{
   2060e:	b5f0      	push	{r4, r5, r6, r7, lr}
   20610:	b085      	sub	sp, #20
   20612:	af00      	add	r7, sp, #0
   20614:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   20616:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   20618:	e9c7 3302 	strd	r3, r3, [r7, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   2061c:	2900      	cmp	r1, #0
   2061e:	d062      	beq.n	206e6 <parse_xmodemsleep+0xda>
   20620:	2800      	cmp	r0, #0
   20622:	d060      	beq.n	206e6 <parse_xmodemsleep+0xda>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   20624:	2104      	movs	r1, #4
   20626:	f107 0008 	add.w	r0, r7, #8
   2062a:	f006 fd14 	bl	27056 <at_params_list_init>
	if (err) {
   2062e:	4604      	mov	r4, r0
   20630:	b190      	cbz	r0, 20658 <parse_xmodemsleep+0x4c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   20632:	466d      	mov	r5, sp
   20634:	b088      	sub	sp, #32
   20636:	466a      	mov	r2, sp
   20638:	4b2c      	ldr	r3, [pc, #176]	; (206ec <parse_xmodemsleep+0xe0>)
   2063a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2063e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20642:	2303      	movs	r3, #3
   20644:	482a      	ldr	r0, [pc, #168]	; (206f0 <parse_xmodemsleep+0xe4>)
   20646:	f842 3f10 	str.w	r3, [r2, #16]!
   2064a:	f006 fe44 	bl	272d6 <z_log_msg_static_create.constprop.0>
   2064e:	46ad      	mov	sp, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   20650:	4620      	mov	r0, r4
   20652:	3714      	adds	r7, #20
   20654:	46bd      	mov	sp, r7
   20656:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   20658:	4601      	mov	r1, r0
   2065a:	f107 0208 	add.w	r2, r7, #8
   2065e:	4630      	mov	r0, r6
   20660:	f006 fce0 	bl	27024 <at_parser_params_from_str>
	if (err) {
   20664:	4604      	mov	r4, r0
   20666:	b178      	cbz	r0, 20688 <parse_xmodemsleep+0x7c>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   20668:	466d      	mov	r5, sp
   2066a:	b088      	sub	sp, #32
   2066c:	466a      	mov	r2, sp
   2066e:	4b21      	ldr	r3, [pc, #132]	; (206f4 <parse_xmodemsleep+0xe8>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   20670:	e9c2 3405 	strd	r3, r4, [r2, #20]
   20674:	2303      	movs	r3, #3
   20676:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2067a:	481d      	ldr	r0, [pc, #116]	; (206f0 <parse_xmodemsleep+0xe4>)
   2067c:	f842 3f10 	str.w	r3, [r2, #16]!
   20680:	f006 fe29 	bl	272d6 <z_log_msg_static_create.constprop.0>
   20684:	46ad      	mov	sp, r5
		goto clean_exit;
   20686:	e01a      	b.n	206be <parse_xmodemsleep+0xb2>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   20688:	2101      	movs	r1, #1
   2068a:	1dba      	adds	r2, r7, #6
   2068c:	f107 0008 	add.w	r0, r7, #8
   20690:	f006 fda5 	bl	271de <at_params_unsigned_short_get>
	if (err) {
   20694:	4604      	mov	r4, r0
   20696:	b120      	cbz	r0, 206a2 <parse_xmodemsleep+0x96>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   20698:	466d      	mov	r5, sp
   2069a:	b088      	sub	sp, #32
   2069c:	466a      	mov	r2, sp
   2069e:	4b16      	ldr	r3, [pc, #88]	; (206f8 <parse_xmodemsleep+0xec>)
   206a0:	e7e6      	b.n	20670 <parse_xmodemsleep+0x64>
	modem_sleep->type = type;
   206a2:	88fb      	ldrh	r3, [r7, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   206a4:	f107 0008 	add.w	r0, r7, #8
	modem_sleep->type = type;
   206a8:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   206aa:	f006 fdfc 	bl	272a6 <at_params_valid_count_get>
   206ae:	2802      	cmp	r0, #2
   206b0:	d80a      	bhi.n	206c8 <parse_xmodemsleep+0xbc>
		modem_sleep->time = -1;
   206b2:	f04f 32ff 	mov.w	r2, #4294967295
   206b6:	f04f 33ff 	mov.w	r3, #4294967295
   206ba:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   206be:	f107 0008 	add.w	r0, r7, #8
   206c2:	f006 fcf2 	bl	270aa <at_params_list_free>
	return err;
   206c6:	e7c3      	b.n	20650 <parse_xmodemsleep+0x44>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   206c8:	2102      	movs	r1, #2
   206ca:	f105 0208 	add.w	r2, r5, #8
   206ce:	f107 0008 	add.w	r0, r7, #8
   206d2:	f006 fdb4 	bl	2723e <at_params_int64_get>
	if (err) {
   206d6:	4604      	mov	r4, r0
   206d8:	2800      	cmp	r0, #0
   206da:	d0f0      	beq.n	206be <parse_xmodemsleep+0xb2>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   206dc:	466d      	mov	r5, sp
   206de:	b088      	sub	sp, #32
   206e0:	466a      	mov	r2, sp
   206e2:	4b06      	ldr	r3, [pc, #24]	; (206fc <parse_xmodemsleep+0xf0>)
   206e4:	e7c4      	b.n	20670 <parse_xmodemsleep+0x64>
		return -EINVAL;
   206e6:	f06f 0415 	mvn.w	r4, #21
   206ea:	e7b1      	b.n	20650 <parse_xmodemsleep+0x44>
   206ec:	0002aad9 	.word	0x0002aad9
   206f0:	00029074 	.word	0x00029074
   206f4:	0002b356 	.word	0x0002b356
   206f8:	0002b388 	.word	0x0002b388
   206fc:	0002b3b1 	.word	0x0002b3b1

00020700 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   20700:	b5f0      	push	{r4, r5, r6, r7, lr}
   20702:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   20704:	4604      	mov	r4, r0
{
   20706:	b087      	sub	sp, #28
	if (at_response == NULL || modem_evt == NULL) {
   20708:	b320      	cbz	r0, 20754 <parse_mdmev+0x54>
   2070a:	b319      	cbz	r1, 20754 <parse_mdmev+0x54>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   2070c:	2108      	movs	r1, #8
   2070e:	4a13      	ldr	r2, [pc, #76]	; (2075c <parse_mdmev+0x5c>)
   20710:	f7ff f836 	bl	1f780 <response_is_valid>
   20714:	b968      	cbnz	r0, 20732 <parse_mdmev+0x32>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   20716:	4b12      	ldr	r3, [pc, #72]	; (20760 <parse_mdmev+0x60>)
   20718:	4812      	ldr	r0, [pc, #72]	; (20764 <parse_mdmev+0x64>)
   2071a:	9305      	str	r3, [sp, #20]
   2071c:	2302      	movs	r3, #2
   2071e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20722:	aa04      	add	r2, sp, #16
   20724:	9304      	str	r3, [sp, #16]
   20726:	f006 fdd6 	bl	272d6 <z_log_msg_static_create.constprop.0>
		return -EIO;
   2072a:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", at_response);

	return -ENODATA;
}
   2072e:	b007      	add	sp, #28
   20730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   20732:	2500      	movs	r5, #0
   20734:	4f0c      	ldr	r7, [pc, #48]	; (20768 <parse_mdmev+0x68>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   20736:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   20738:	4621      	mov	r1, r4
   2073a:	f857 0b04 	ldr.w	r0, [r7], #4
   2073e:	f7f8 fc4b 	bl	18fd8 <strcmp>
   20742:	b908      	cbnz	r0, 20748 <parse_mdmev+0x48>
			*modem_evt = i;
   20744:	7035      	strb	r5, [r6, #0]
			return 0;
   20746:	e7f2      	b.n	2072e <parse_mdmev+0x2e>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   20748:	3501      	adds	r5, #1
   2074a:	2d05      	cmp	r5, #5
   2074c:	d1f4      	bne.n	20738 <parse_mdmev+0x38>
	return -ENODATA;
   2074e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   20752:	e7ec      	b.n	2072e <parse_mdmev+0x2e>
		return -EINVAL;
   20754:	f06f 0015 	mvn.w	r0, #21
   20758:	e7e9      	b.n	2072e <parse_mdmev+0x2e>
   2075a:	bf00      	nop
   2075c:	0002b3e6 	.word	0x0002b3e6
   20760:	0002b3ef 	.word	0x0002b3ef
   20764:	00029074 	.word	0x00029074
   20768:	00029434 	.word	0x00029434

0002076c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   2076c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   2076e:	f7fa f9e7 	bl	1ab40 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   20772:	4b07      	ldr	r3, [pc, #28]	; (20790 <k_sys_fatal_error_handler+0x24>)
   20774:	9305      	str	r3, [sp, #20]
   20776:	2302      	movs	r3, #2
   20778:	9304      	str	r3, [sp, #16]
   2077a:	4806      	ldr	r0, [pc, #24]	; (20794 <k_sys_fatal_error_handler+0x28>)
   2077c:	2300      	movs	r3, #0
   2077e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20782:	aa04      	add	r2, sp, #16
   20784:	f7fa fabc 	bl	1ad00 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   20788:	2000      	movs	r0, #0
   2078a:	f7fb fc01 	bl	1bf90 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   2078e:	bf00      	nop
   20790:	0002b467 	.word	0x0002b467
   20794:	0002903c 	.word	0x0002903c

00020798 <on_modem_lib_init.part.0>:

LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
   20798:	b598      	push	{r3, r4, r7, lr}

	if (ret != 0) {
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   2079a:	481a      	ldr	r0, [pc, #104]	; (20804 <on_modem_lib_init.part.0+0x6c>)
static void on_modem_lib_init(int ret, void *ctx)
   2079c:	af00      	add	r7, sp, #0
	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   2079e:	f7f8 fc25 	bl	18fec <strlen>
   207a2:	b1a0      	cbz	r0, 207ce <on_modem_lib_init.part.0+0x36>
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   207a4:	4917      	ldr	r1, [pc, #92]	; (20804 <on_modem_lib_init.part.0+0x6c>)
   207a6:	4818      	ldr	r0, [pc, #96]	; (20808 <on_modem_lib_init.part.0+0x70>)
   207a8:	f002 fdb4 	bl	23314 <nrf_modem_at_printf>
		if (err) {
   207ac:	b178      	cbz	r0, 207ce <on_modem_lib_init.part.0+0x36>
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
   207ae:	466c      	mov	r4, sp
   207b0:	b088      	sub	sp, #32
   207b2:	466a      	mov	r2, sp
   207b4:	4b15      	ldr	r3, [pc, #84]	; (2080c <on_modem_lib_init.part.0+0x74>)
   207b6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   207ba:	2303      	movs	r3, #3
   207bc:	f842 3f10 	str.w	r3, [r2, #16]!
   207c0:	2300      	movs	r3, #0
   207c2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   207c6:	4812      	ldr	r0, [pc, #72]	; (20810 <on_modem_lib_init.part.0+0x78>)
   207c8:	f7fa fa9a 	bl	1ad00 <z_impl_z_log_msg_static_create>
   207cc:	46a5      	mov	sp, r4
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
   207ce:	4811      	ldr	r0, [pc, #68]	; (20814 <on_modem_lib_init.part.0+0x7c>)
   207d0:	f7f8 fc0c 	bl	18fec <strlen>
   207d4:	b1a0      	cbz	r0, 20800 <on_modem_lib_init.part.0+0x68>
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
   207d6:	490f      	ldr	r1, [pc, #60]	; (20814 <on_modem_lib_init.part.0+0x7c>)
   207d8:	480b      	ldr	r0, [pc, #44]	; (20808 <on_modem_lib_init.part.0+0x70>)
   207da:	f002 fd9b 	bl	23314 <nrf_modem_at_printf>
		if (err) {
   207de:	b178      	cbz	r0, 20800 <on_modem_lib_init.part.0+0x68>
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
   207e0:	466c      	mov	r4, sp
   207e2:	b088      	sub	sp, #32
   207e4:	466a      	mov	r2, sp
   207e6:	4b0c      	ldr	r3, [pc, #48]	; (20818 <on_modem_lib_init.part.0+0x80>)
   207e8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   207ec:	2303      	movs	r3, #3
   207ee:	f842 3f10 	str.w	r3, [r2, #16]!
   207f2:	2300      	movs	r3, #0
   207f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   207f8:	4805      	ldr	r0, [pc, #20]	; (20810 <on_modem_lib_init.part.0+0x78>)
   207fa:	f7fa fa81 	bl	1ad00 <z_impl_z_log_msg_static_create>
   207fe:	46a5      	mov	sp, r4
		}
	}
}
   20800:	46bd      	mov	sp, r7
   20802:	bd98      	pop	{r3, r4, r7, pc}
   20804:	0002b484 	.word	0x0002b484
   20808:	0002a996 	.word	0x0002a996
   2080c:	0002b4e1 	.word	0x0002b4e1
   20810:	0002907c 	.word	0x0002907c
   20814:	0002b50e 	.word	0x0002b50e
   20818:	0002b526 	.word	0x0002b526

0002081c <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   2081c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20820:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   20822:	4b15      	ldr	r3, [pc, #84]	; (20878 <tfm_ns_interface_dispatch+0x5c>)
   20824:	4604      	mov	r4, r0
   20826:	f893 8000 	ldrb.w	r8, [r3]
   2082a:	460d      	mov	r5, r1
   2082c:	4616      	mov	r6, r2
   2082e:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   20830:	f1b8 0f00 	cmp.w	r8, #0
   20834:	d115      	bne.n	20862 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   20836:	4668      	mov	r0, sp
   20838:	f005 feb9 	bl	265ae <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   2083c:	463a      	mov	r2, r7
   2083e:	4631      	mov	r1, r6
   20840:	4628      	mov	r0, r5
   20842:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   20844:	47a0      	blx	r4
   20846:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   20848:	4668      	mov	r0, sp
   2084a:	f005 feb1 	bl	265b0 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   2084e:	f1b8 0f00 	cmp.w	r8, #0
   20852:	d002      	beq.n	2085a <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   20854:	4809      	ldr	r0, [pc, #36]	; (2087c <tfm_ns_interface_dispatch+0x60>)
   20856:	f003 fb7d 	bl	23f54 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   2085a:	4620      	mov	r0, r4
   2085c:	b022      	add	sp, #136	; 0x88
   2085e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   20862:	f04f 32ff 	mov.w	r2, #4294967295
   20866:	f04f 33ff 	mov.w	r3, #4294967295
   2086a:	4804      	ldr	r0, [pc, #16]	; (2087c <tfm_ns_interface_dispatch+0x60>)
   2086c:	f003 faf8 	bl	23e60 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   20870:	2800      	cmp	r0, #0
   20872:	d0e0      	beq.n	20836 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   20874:	241f      	movs	r4, #31
   20876:	e7f0      	b.n	2085a <tfm_ns_interface_dispatch+0x3e>
   20878:	2000de5b 	.word	0x2000de5b
   2087c:	2000c8c8 	.word	0x2000c8c8

00020880 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   20880:	b530      	push	{r4, r5, lr}
   20882:	b095      	sub	sp, #84	; 0x54
   20884:	4605      	mov	r5, r0
   20886:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   20888:	2230      	movs	r2, #48	; 0x30
   2088a:	2100      	movs	r1, #0
   2088c:	a808      	add	r0, sp, #32
   2088e:	f008 f83a 	bl	28906 <memset>
   20892:	233f      	movs	r3, #63	; 0x3f
   20894:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   20896:	ab07      	add	r3, sp, #28
   20898:	9303      	str	r3, [sp, #12]
   2089a:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   2089c:	9406      	str	r4, [sp, #24]
   2089e:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   208a2:	b154      	cbz	r4, 208ba <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   208a4:	2301      	movs	r3, #1
   208a6:	aa05      	add	r2, sp, #20
   208a8:	9200      	str	r2, [sp, #0]
   208aa:	2100      	movs	r1, #0
   208ac:	4804      	ldr	r0, [pc, #16]	; (208c0 <psa_generate_random+0x40>)
   208ae:	9301      	str	r3, [sp, #4]
   208b0:	aa03      	add	r2, sp, #12
   208b2:	f000 f807 	bl	208c4 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   208b6:	b015      	add	sp, #84	; 0x54
   208b8:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   208ba:	4620      	mov	r0, r4
   208bc:	e7fb      	b.n	208b6 <psa_generate_random+0x36>
   208be:	bf00      	nop
   208c0:	40000100 	.word	0x40000100

000208c4 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   208c4:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   208c6:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   208ca:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   208ce:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   208d0:	d20d      	bcs.n	208ee <psa_call+0x2a>
        (type < INT16_MIN) ||
   208d2:	ea43 0504 	orr.w	r5, r3, r4
   208d6:	2dff      	cmp	r5, #255	; 0xff
   208d8:	d809      	bhi.n	208ee <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   208da:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   208de:	4613      	mov	r3, r2
   208e0:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   208e4:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   208e6:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   208e8:	4803      	ldr	r0, [pc, #12]	; (208f8 <psa_call+0x34>)
   208ea:	f7ff bf97 	b.w	2081c <tfm_ns_interface_dispatch>
}
   208ee:	f06f 0080 	mvn.w	r0, #128	; 0x80
   208f2:	bc30      	pop	{r4, r5}
   208f4:	4770      	bx	lr
   208f6:	bf00      	nop
   208f8:	00017c21 	.word	0x00017c21

000208fc <SystemInit>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   208fc:	4b01      	ldr	r3, [pc, #4]	; (20904 <SystemInit+0x8>)
   208fe:	4a02      	ldr	r2, [pc, #8]	; (20908 <SystemInit+0xc>)
   20900:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   20902:	4770      	bx	lr
   20904:	2000c670 	.word	0x2000c670
   20908:	03d09000 	.word	0x03d09000

0002090c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   2090c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2090e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   20910:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   20912:	fab2 f382 	clz	r3, r2
   20916:	f1c3 031f 	rsb	r3, r3, #31
   2091a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   2091c:	fa05 f403 	lsl.w	r4, r5, r3
   20920:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20924:	e8d0 6fef 	ldaex	r6, [r0]
   20928:	4296      	cmp	r6, r2
   2092a:	d104      	bne.n	20936 <nrfx_flag32_alloc+0x2a>
   2092c:	e8c0 4fec 	stlex	ip, r4, [r0]
   20930:	f1bc 0f00 	cmp.w	ip, #0
   20934:	d1f6      	bne.n	20924 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   20936:	d1eb      	bne.n	20910 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   20938:	4801      	ldr	r0, [pc, #4]	; (20940 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   2093a:	700b      	strb	r3, [r1, #0]
}
   2093c:	bd70      	pop	{r4, r5, r6, pc}
   2093e:	bf00      	nop
   20940:	0bad0000 	.word	0x0bad0000

00020944 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   20944:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   20946:	6803      	ldr	r3, [r0, #0]
   20948:	40cb      	lsrs	r3, r1
   2094a:	07db      	lsls	r3, r3, #31
   2094c:	d410      	bmi.n	20970 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   2094e:	2301      	movs	r3, #1
   20950:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   20952:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   20954:	ea43 0102 	orr.w	r1, r3, r2
   20958:	e8d0 4fef 	ldaex	r4, [r0]
   2095c:	4294      	cmp	r4, r2
   2095e:	d104      	bne.n	2096a <nrfx_flag32_free+0x26>
   20960:	e8c0 1fec 	stlex	ip, r1, [r0]
   20964:	f1bc 0f00 	cmp.w	ip, #0
   20968:	d1f6      	bne.n	20958 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2096a:	d1f2      	bne.n	20952 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   2096c:	4801      	ldr	r0, [pc, #4]	; (20974 <nrfx_flag32_free+0x30>)
}
   2096e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   20970:	4801      	ldr	r0, [pc, #4]	; (20978 <nrfx_flag32_free+0x34>)
   20972:	e7fc      	b.n	2096e <nrfx_flag32_free+0x2a>
   20974:	0bad0000 	.word	0x0bad0000
   20978:	0bad0004 	.word	0x0bad0004

0002097c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   2097c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   2097e:	4604      	mov	r4, r0
   20980:	b118      	cbz	r0, 2098a <clock_stop+0xe>
   20982:	2801      	cmp	r0, #1
   20984:	d01e      	beq.n	209c4 <clock_stop+0x48>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   20986:	b003      	add	sp, #12
   20988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   2098a:	2202      	movs	r2, #2
   2098c:	4b27      	ldr	r3, [pc, #156]	; (20a2c <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2098e:	4607      	mov	r7, r0
   20990:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20994:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   20998:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2099c:	2201      	movs	r2, #1
   2099e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   209a0:	2301      	movs	r3, #1
   209a2:	f242 7510 	movw	r5, #10000	; 0x2710
   209a6:	4e21      	ldr	r6, [pc, #132]	; (20a2c <clock_stop+0xb0>)
   209a8:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   209ac:	b1b4      	cbz	r4, 209dc <clock_stop+0x60>
   209ae:	2c01      	cmp	r4, #1
   209b0:	d1e9      	bne.n	20986 <clock_stop+0xa>
            if (p_clk_src != NULL)
   209b2:	b387      	cbz	r7, 20a16 <clock_stop+0x9a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   209b4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   209b8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   209bc:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   209be:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   209c2:	e013      	b.n	209ec <clock_stop+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   209c4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   209c6:	4b19      	ldr	r3, [pc, #100]	; (20a2c <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   209c8:	f10d 0707 	add.w	r7, sp, #7
   209cc:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   209d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   209d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   209d8:	6058      	str	r0, [r3, #4]
   209da:	e7e1      	b.n	209a0 <clock_stop+0x24>
            if (p_clk_src != NULL)
   209dc:	b18f      	cbz	r7, 20a02 <clock_stop+0x86>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   209de:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   209e2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   209e6:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   209e8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   209ec:	03da      	lsls	r2, r3, #15
   209ee:	d5ca      	bpl.n	20986 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   209f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   209f4:	2801      	cmp	r0, #1
   209f6:	d1c6      	bne.n	20986 <clock_stop+0xa>
   209f8:	f006 fcbc 	bl	27374 <nrfx_busy_wait>
   209fc:	3d01      	subs	r5, #1
   209fe:	d1d5      	bne.n	209ac <clock_stop+0x30>
   20a00:	e7c1      	b.n	20986 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20a02:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   20a06:	03d9      	lsls	r1, r3, #15
   20a08:	d5bd      	bpl.n	20986 <clock_stop+0xa>
   20a0a:	2001      	movs	r0, #1
   20a0c:	f006 fcb2 	bl	27374 <nrfx_busy_wait>
   20a10:	3d01      	subs	r5, #1
   20a12:	d1f6      	bne.n	20a02 <clock_stop+0x86>
   20a14:	e7b7      	b.n	20986 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   20a16:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   20a1a:	03db      	lsls	r3, r3, #15
   20a1c:	d5b3      	bpl.n	20986 <clock_stop+0xa>
   20a1e:	2001      	movs	r0, #1
   20a20:	f006 fca8 	bl	27374 <nrfx_busy_wait>
   20a24:	3d01      	subs	r5, #1
   20a26:	d1f6      	bne.n	20a16 <clock_stop+0x9a>
   20a28:	e7ad      	b.n	20986 <clock_stop+0xa>
   20a2a:	bf00      	nop
   20a2c:	40005000 	.word	0x40005000

00020a30 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   20a30:	4b04      	ldr	r3, [pc, #16]	; (20a44 <nrfx_clock_init+0x14>)
   20a32:	791a      	ldrb	r2, [r3, #4]
   20a34:	b922      	cbnz	r2, 20a40 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   20a36:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   20a38:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   20a3a:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   20a3c:	4802      	ldr	r0, [pc, #8]	; (20a48 <nrfx_clock_init+0x18>)
   20a3e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   20a40:	4802      	ldr	r0, [pc, #8]	; (20a4c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   20a42:	4770      	bx	lr
   20a44:	2000d46c 	.word	0x2000d46c
   20a48:	0bad0000 	.word	0x0bad0000
   20a4c:	0bad000c 	.word	0x0bad000c

00020a50 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   20a50:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   20a52:	2005      	movs	r0, #5
   20a54:	f7fa fe72 	bl	1b73c <arch_irq_is_enabled>
   20a58:	b910      	cbnz	r0, 20a60 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   20a5a:	2005      	movs	r0, #5
   20a5c:	f7fa fe4c 	bl	1b6f8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   20a60:	2201      	movs	r2, #1
   20a62:	4b02      	ldr	r3, [pc, #8]	; (20a6c <nrfx_clock_enable+0x1c>)
   20a64:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   20a68:	bd08      	pop	{r3, pc}
   20a6a:	bf00      	nop
   20a6c:	40005000 	.word	0x40005000

00020a70 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   20a70:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   20a72:	b110      	cbz	r0, 20a7a <nrfx_clock_start+0xa>
   20a74:	2801      	cmp	r0, #1
   20a76:	d02e      	beq.n	20ad6 <nrfx_clock_start+0x66>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   20a78:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20a7a:	4a1c      	ldr	r2, [pc, #112]	; (20aec <nrfx_clock_start+0x7c>)
   20a7c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20a80:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   20a84:	03c9      	lsls	r1, r1, #15
   20a86:	d40e      	bmi.n	20aa6 <nrfx_clock_start+0x36>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   20a88:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   20a8c:	07db      	lsls	r3, r3, #31
   20a8e:	d513      	bpl.n	20ab8 <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   20a90:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   20a94:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   20a98:	3b01      	subs	r3, #1
   20a9a:	2b01      	cmp	r3, #1
   20a9c:	d809      	bhi.n	20ab2 <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
   20a9e:	2302      	movs	r3, #2
   20aa0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   20aa4:	e7e8      	b.n	20a78 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20aa6:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   20aaa:	2b02      	cmp	r3, #2
   20aac:	d005      	beq.n	20aba <nrfx_clock_start+0x4a>
   20aae:	2b01      	cmp	r3, #1
   20ab0:	d002      	beq.n	20ab8 <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   20ab2:	2000      	movs	r0, #0
   20ab4:	f7ff ff62 	bl	2097c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   20ab8:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   20aba:	4a0c      	ldr	r2, [pc, #48]	; (20aec <nrfx_clock_start+0x7c>)
   20abc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20ac0:	2300      	movs	r3, #0
   20ac2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   20ac6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   20aca:	2302      	movs	r3, #2
   20acc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20ad0:	2301      	movs	r3, #1
   20ad2:	6093      	str	r3, [r2, #8]
}
   20ad4:	e7d0      	b.n	20a78 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20ad6:	2200      	movs	r2, #0
   20ad8:	4b04      	ldr	r3, [pc, #16]	; (20aec <nrfx_clock_start+0x7c>)
   20ada:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   20ade:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   20ae2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20ae6:	6018      	str	r0, [r3, #0]
}
   20ae8:	e7c6      	b.n	20a78 <nrfx_clock_start+0x8>
   20aea:	bf00      	nop
   20aec:	40005000 	.word	0x40005000

00020af0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   20af0:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20af2:	4b17      	ldr	r3, [pc, #92]	; (20b50 <nrfx_power_clock_irq_handler+0x60>)
   20af4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   20af8:	b152      	cbz	r2, 20b10 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20afa:	2000      	movs	r0, #0
   20afc:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   20b00:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   20b04:	2201      	movs	r2, #1
   20b06:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   20b0a:	4b12      	ldr	r3, [pc, #72]	; (20b54 <nrfx_power_clock_irq_handler+0x64>)
   20b0c:	681b      	ldr	r3, [r3, #0]
   20b0e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20b10:	4b0f      	ldr	r3, [pc, #60]	; (20b50 <nrfx_power_clock_irq_handler+0x60>)
   20b12:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   20b16:	b18a      	cbz	r2, 20b3c <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20b18:	2200      	movs	r2, #0
   20b1a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   20b1e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20b22:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20b26:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   20b2a:	f002 0203 	and.w	r2, r2, #3
   20b2e:	2a01      	cmp	r2, #1
   20b30:	f04f 0102 	mov.w	r1, #2
   20b34:	d103      	bne.n	20b3e <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   20b36:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20b3a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   20b3c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   20b3e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   20b42:	4b04      	ldr	r3, [pc, #16]	; (20b54 <nrfx_power_clock_irq_handler+0x64>)
   20b44:	2001      	movs	r0, #1
}
   20b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   20b4a:	681b      	ldr	r3, [r3, #0]
   20b4c:	4718      	bx	r3
   20b4e:	bf00      	nop
   20b50:	40005000 	.word	0x40005000
   20b54:	2000d46c 	.word	0x2000d46c

00020b58 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   20b58:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   20b5a:	4801      	ldr	r0, [pc, #4]	; (20b60 <nrfx_dppi_channel_alloc+0x8>)
   20b5c:	f7ff bed6 	b.w	2090c <nrfx_flag32_alloc>
   20b60:	2000c674 	.word	0x2000c674

00020b64 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20b64:	4a06      	ldr	r2, [pc, #24]	; (20b80 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   20b66:	f000 001f 	and.w	r0, r0, #31
   20b6a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20b6e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
   20b72:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   20b7a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
   20b7e:	4770      	bx	lr
   20b80:	40842500 	.word	0x40842500

00020b84 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   20b84:	4b03      	ldr	r3, [pc, #12]	; (20b94 <pin_in_use_by_te+0x10>)
   20b86:	3008      	adds	r0, #8
   20b88:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20b8c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   20b90:	4770      	bx	lr
   20b92:	bf00      	nop
   20b94:	2000c678 	.word	0x2000c678

00020b98 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   20b98:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20b9a:	4c0d      	ldr	r4, [pc, #52]	; (20bd0 <call_handler+0x38>)
   20b9c:	f100 0308 	add.w	r3, r0, #8
   20ba0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   20ba4:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20ba6:	05da      	lsls	r2, r3, #23
{
   20ba8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20baa:	d507      	bpl.n	20bbc <call_handler+0x24>
   20bac:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   20bb0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   20bb4:	6852      	ldr	r2, [r2, #4]
   20bb6:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   20bba:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   20bbc:	68a3      	ldr	r3, [r4, #8]
   20bbe:	b12b      	cbz	r3, 20bcc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   20bc0:	4631      	mov	r1, r6
   20bc2:	4628      	mov	r0, r5
   20bc4:	68e2      	ldr	r2, [r4, #12]
    }
}
   20bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   20bca:	4718      	bx	r3
}
   20bcc:	bd70      	pop	{r4, r5, r6, pc}
   20bce:	bf00      	nop
   20bd0:	2000c678 	.word	0x2000c678

00020bd4 <release_handler>:
{
   20bd4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20bd6:	4a12      	ldr	r2, [pc, #72]	; (20c20 <release_handler+0x4c>)
   20bd8:	3008      	adds	r0, #8
   20bda:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   20bde:	05d9      	lsls	r1, r3, #23
   20be0:	d51b      	bpl.n	20c1a <release_handler+0x46>
   20be2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   20be6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   20bea:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   20bee:	2000      	movs	r0, #0
   20bf0:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   20bf4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   20bf8:	f413 7f80 	tst.w	r3, #256	; 0x100
   20bfc:	d003      	beq.n	20c06 <release_handler+0x32>
   20bfe:	f3c3 2343 	ubfx	r3, r3, #9, #4
   20c02:	4299      	cmp	r1, r3
   20c04:	d009      	beq.n	20c1a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   20c06:	3001      	adds	r0, #1
   20c08:	2820      	cmp	r0, #32
   20c0a:	d1f3      	bne.n	20bf4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   20c0c:	2300      	movs	r3, #0
   20c0e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   20c12:	4804      	ldr	r0, [pc, #16]	; (20c24 <release_handler+0x50>)
}
   20c14:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   20c16:	f7ff be95 	b.w	20944 <nrfx_flag32_free>
}
   20c1a:	bc10      	pop	{r4}
   20c1c:	4770      	bx	lr
   20c1e:	bf00      	nop
   20c20:	2000c678 	.word	0x2000c678
   20c24:	2000c6cc 	.word	0x2000c6cc

00020c28 <pin_handler_trigger_uninit>:
{
   20c28:	b538      	push	{r3, r4, r5, lr}
   20c2a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   20c2c:	f7ff ffaa 	bl	20b84 <pin_in_use_by_te>
   20c30:	4c0b      	ldr	r4, [pc, #44]	; (20c60 <pin_handler_trigger_uninit+0x38>)
   20c32:	f102 0508 	add.w	r5, r2, #8
   20c36:	b160      	cbz	r0, 20c52 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   20c38:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20c3a:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   20c3e:	0b5b      	lsrs	r3, r3, #13
   20c40:	009b      	lsls	r3, r3, #2
   20c42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20c46:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   20c4a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   20c4e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   20c52:	4610      	mov	r0, r2
   20c54:	f7ff ffbe 	bl	20bd4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   20c58:	2300      	movs	r3, #0
   20c5a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   20c5e:	bd38      	pop	{r3, r4, r5, pc}
   20c60:	2000c678 	.word	0x2000c678

00020c64 <nrfx_gpiote_input_configure>:
{
   20c64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20c68:	4604      	mov	r4, r0
   20c6a:	461d      	mov	r5, r3
    if (p_input_config)
   20c6c:	b309      	cbz	r1, 20cb2 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20c6e:	4f4e      	ldr	r7, [pc, #312]	; (20da8 <nrfx_gpiote_input_configure+0x144>)
   20c70:	f100 0808 	add.w	r8, r0, #8
   20c74:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   20c78:	07b3      	lsls	r3, r6, #30
   20c7a:	d506      	bpl.n	20c8a <nrfx_gpiote_input_configure+0x26>
   20c7c:	f7ff ff82 	bl	20b84 <pin_in_use_by_te>
   20c80:	b118      	cbz	r0, 20c8a <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   20c82:	484a      	ldr	r0, [pc, #296]	; (20dac <nrfx_gpiote_input_configure+0x148>)
}
   20c84:	b002      	add	sp, #8
   20c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20c8a:	4849      	ldr	r0, [pc, #292]	; (20db0 <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
   20c8c:	f004 031f 	and.w	r3, r4, #31
   20c90:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20c94:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   20c98:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   20c9a:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   20c9e:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20ca2:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   20ca6:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
   20caa:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   20cae:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
   20cb2:	b19a      	cbz	r2, 20cdc <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20cb4:	4e3c      	ldr	r6, [pc, #240]	; (20da8 <nrfx_gpiote_input_configure+0x144>)
   20cb6:	f104 0708 	add.w	r7, r4, #8
   20cba:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   20cbe:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
   20cc0:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   20cc4:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
   20cc6:	d00c      	beq.n	20ce2 <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
   20cc8:	2800      	cmp	r0, #0
   20cca:	d1da      	bne.n	20c82 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   20ccc:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
   20cd0:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   20cd4:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
   20cd8:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   20cdc:	bbd5      	cbnz	r5, 20d54 <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
   20cde:	4835      	ldr	r0, [pc, #212]	; (20db4 <nrfx_gpiote_input_configure+0x150>)
   20ce0:	e7d0      	b.n	20c84 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   20ce2:	f021 0120 	bic.w	r1, r1, #32
   20ce6:	04c9      	lsls	r1, r1, #19
   20ce8:	0cc9      	lsrs	r1, r1, #19
   20cea:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   20cee:	2800      	cmp	r0, #0
   20cf0:	d0ec      	beq.n	20ccc <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   20cf2:	2b03      	cmp	r3, #3
   20cf4:	d8c5      	bhi.n	20c82 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   20cf6:	6852      	ldr	r2, [r2, #4]
   20cf8:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   20cfc:	4662      	mov	r2, ip
   20cfe:	0092      	lsls	r2, r2, #2
   20d00:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   20d04:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   20d08:	b923      	cbnz	r3, 20d14 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
   20d0a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   20d0e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
   20d12:	e7db      	b.n	20ccc <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   20d14:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   20d18:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   20d1c:	f020 0003 	bic.w	r0, r0, #3
   20d20:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   20d24:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   20d28:	f041 0120 	orr.w	r1, r1, #32
   20d2c:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   20d30:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   20d34:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20d38:	0220      	lsls	r0, r4, #8
   20d3a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   20d3e:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   20d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   20d46:	ea40 000e 	orr.w	r0, r0, lr
   20d4a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   20d4e:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   20d52:	e7bb      	b.n	20ccc <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
   20d54:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   20d56:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   20d5a:	f7ff ff3b 	bl	20bd4 <release_handler>
    if (!handler)
   20d5e:	2e00      	cmp	r6, #0
   20d60:	d0bd      	beq.n	20cde <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   20d62:	4d11      	ldr	r5, [pc, #68]	; (20da8 <nrfx_gpiote_input_configure+0x144>)
   20d64:	e9d5 2300 	ldrd	r2, r3, [r5]
   20d68:	4296      	cmp	r6, r2
   20d6a:	d101      	bne.n	20d70 <nrfx_gpiote_input_configure+0x10c>
   20d6c:	429f      	cmp	r7, r3
   20d6e:	d018      	beq.n	20da2 <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   20d70:	4811      	ldr	r0, [pc, #68]	; (20db8 <nrfx_gpiote_input_configure+0x154>)
   20d72:	f10d 0107 	add.w	r1, sp, #7
   20d76:	f7ff fdc9 	bl	2090c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   20d7a:	4b0e      	ldr	r3, [pc, #56]	; (20db4 <nrfx_gpiote_input_configure+0x150>)
   20d7c:	4298      	cmp	r0, r3
   20d7e:	d181      	bne.n	20c84 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   20d80:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
   20d84:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20d88:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   20d8a:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20d8c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   20d90:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20d94:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   20d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   20d9c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   20da0:	e79d      	b.n	20cde <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   20da2:	2200      	movs	r2, #0
   20da4:	e7ee      	b.n	20d84 <nrfx_gpiote_input_configure+0x120>
   20da6:	bf00      	nop
   20da8:	2000c678 	.word	0x2000c678
   20dac:	0bad0004 	.word	0x0bad0004
   20db0:	40842500 	.word	0x40842500
   20db4:	0bad0000 	.word	0x0bad0000
   20db8:	2000c6cc 	.word	0x2000c6cc

00020dbc <nrfx_gpiote_output_configure>:
{
   20dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20dbe:	4604      	mov	r4, r0
    if (p_config)
   20dc0:	b379      	cbz	r1, 20e22 <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20dc2:	4e3a      	ldr	r6, [pc, #232]	; (20eac <nrfx_gpiote_output_configure+0xf0>)
   20dc4:	f100 0708 	add.w	r7, r0, #8
   20dc8:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   20dcc:	07ab      	lsls	r3, r5, #30
   20dce:	d404      	bmi.n	20dda <nrfx_gpiote_output_configure+0x1e>
   20dd0:	f7ff fed8 	bl	20b84 <pin_in_use_by_te>
   20dd4:	b108      	cbz	r0, 20dda <nrfx_gpiote_output_configure+0x1e>
{
   20dd6:	4836      	ldr	r0, [pc, #216]	; (20eb0 <nrfx_gpiote_output_configure+0xf4>)
}
   20dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   20dda:	f015 0f1c 	tst.w	r5, #28
   20dde:	784b      	ldrb	r3, [r1, #1]
   20de0:	d122      	bne.n	20e28 <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
   20de2:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20de6:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 20eb4 <nrfx_gpiote_output_configure+0xf8>
   20dea:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   20dee:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   20df2:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   20df6:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   20df8:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   20dfc:	7809      	ldrb	r1, [r1, #0]
   20dfe:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
   20e02:	f02c 0c07 	bic.w	ip, ip, #7
   20e06:	ea43 030c 	orr.w	r3, r3, ip
   20e0a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   20e0e:	4929      	ldr	r1, [pc, #164]	; (20eb4 <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20e10:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   20e14:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   20e16:	f045 0503 	orr.w	r5, r5, #3
   20e1a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   20e1e:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
   20e22:	b922      	cbnz	r2, 20e2e <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
   20e24:	4824      	ldr	r0, [pc, #144]	; (20eb8 <nrfx_gpiote_output_configure+0xfc>)
   20e26:	e7d7      	b.n	20dd8 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   20e28:	2b01      	cmp	r3, #1
   20e2a:	d1da      	bne.n	20de2 <nrfx_gpiote_output_configure+0x26>
   20e2c:	e7d3      	b.n	20dd6 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20e2e:	4e1f      	ldr	r6, [pc, #124]	; (20eac <nrfx_gpiote_output_configure+0xf0>)
   20e30:	f104 0708 	add.w	r7, r4, #8
   20e34:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   20e38:	0783      	lsls	r3, r0, #30
   20e3a:	d5cc      	bpl.n	20dd6 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   20e3c:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   20e40:	2300      	movs	r3, #0
   20e42:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   20e44:	f020 0020 	bic.w	r0, r0, #32
   20e48:	0089      	lsls	r1, r1, #2
   20e4a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   20e4e:	04c0      	lsls	r0, r0, #19
   20e50:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   20e54:	0cc0      	lsrs	r0, r0, #19
   20e56:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   20e5a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   20e5e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   20e62:	7855      	ldrb	r5, [r2, #1]
   20e64:	2d00      	cmp	r5, #0
   20e66:	d0dd      	beq.n	20e24 <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   20e68:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   20e6c:	7892      	ldrb	r2, [r2, #2]
   20e6e:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   20e72:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   20e76:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20e7a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   20e7e:	0223      	lsls	r3, r4, #8
   20e80:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   20e84:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20e86:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   20e8a:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   20e8e:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20e90:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   20e92:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   20e96:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20e9a:	4313      	orrs	r3, r2
   20e9c:	f040 0020 	orr.w	r0, r0, #32
   20ea0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   20ea4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   20ea8:	e7bc      	b.n	20e24 <nrfx_gpiote_output_configure+0x68>
   20eaa:	bf00      	nop
   20eac:	2000c678 	.word	0x2000c678
   20eb0:	0bad0004 	.word	0x0bad0004
   20eb4:	40842500 	.word	0x40842500
   20eb8:	0bad0000 	.word	0x0bad0000

00020ebc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   20ebc:	4b01      	ldr	r3, [pc, #4]	; (20ec4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   20ebe:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   20ec2:	4770      	bx	lr
   20ec4:	2000c678 	.word	0x2000c678

00020ec8 <nrfx_gpiote_channel_get>:
{
   20ec8:	b508      	push	{r3, lr}
   20eca:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   20ecc:	f7ff fe5a 	bl	20b84 <pin_in_use_by_te>
   20ed0:	b138      	cbz	r0, 20ee2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20ed2:	4b05      	ldr	r3, [pc, #20]	; (20ee8 <nrfx_gpiote_channel_get+0x20>)
   20ed4:	3208      	adds	r2, #8
   20ed6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   20eda:	4804      	ldr	r0, [pc, #16]	; (20eec <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20edc:	0b5b      	lsrs	r3, r3, #13
   20ede:	700b      	strb	r3, [r1, #0]
}
   20ee0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   20ee2:	4803      	ldr	r0, [pc, #12]	; (20ef0 <nrfx_gpiote_channel_get+0x28>)
   20ee4:	e7fc      	b.n	20ee0 <nrfx_gpiote_channel_get+0x18>
   20ee6:	bf00      	nop
   20ee8:	2000c678 	.word	0x2000c678
   20eec:	0bad0000 	.word	0x0bad0000
   20ef0:	0bad0004 	.word	0x0bad0004

00020ef4 <nrfx_gpiote_init>:
{
   20ef4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   20ef6:	4c0f      	ldr	r4, [pc, #60]	; (20f34 <nrfx_gpiote_init+0x40>)
   20ef8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   20efc:	b9bd      	cbnz	r5, 20f2e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   20efe:	2240      	movs	r2, #64	; 0x40
   20f00:	4629      	mov	r1, r5
   20f02:	f104 0010 	add.w	r0, r4, #16
   20f06:	f007 fcfe 	bl	28906 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   20f0a:	2031      	movs	r0, #49	; 0x31
   20f0c:	f7fa fbf4 	bl	1b6f8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20f10:	4b09      	ldr	r3, [pc, #36]	; (20f38 <nrfx_gpiote_init+0x44>)
    return err_code;
   20f12:	480a      	ldr	r0, [pc, #40]	; (20f3c <nrfx_gpiote_init+0x48>)
   20f14:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   20f18:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   20f1c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   20f20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   20f24:	2301      	movs	r3, #1
   20f26:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   20f2a:	6563      	str	r3, [r4, #84]	; 0x54
}
   20f2c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   20f2e:	4804      	ldr	r0, [pc, #16]	; (20f40 <nrfx_gpiote_init+0x4c>)
   20f30:	e7fc      	b.n	20f2c <nrfx_gpiote_init+0x38>
   20f32:	bf00      	nop
   20f34:	2000c678 	.word	0x2000c678
   20f38:	40031000 	.word	0x40031000
   20f3c:	0bad0000 	.word	0x0bad0000
   20f40:	0bad0005 	.word	0x0bad0005

00020f44 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   20f44:	4b03      	ldr	r3, [pc, #12]	; (20f54 <nrfx_gpiote_is_init+0x10>)
   20f46:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   20f4a:	3800      	subs	r0, #0
   20f4c:	bf18      	it	ne
   20f4e:	2001      	movne	r0, #1
   20f50:	4770      	bx	lr
   20f52:	bf00      	nop
   20f54:	2000c678 	.word	0x2000c678

00020f58 <nrfx_gpiote_channel_free>:
{
   20f58:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   20f5a:	4801      	ldr	r0, [pc, #4]	; (20f60 <nrfx_gpiote_channel_free+0x8>)
   20f5c:	f7ff bcf2 	b.w	20944 <nrfx_flag32_free>
   20f60:	2000c6c8 	.word	0x2000c6c8

00020f64 <nrfx_gpiote_channel_alloc>:
{
   20f64:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   20f66:	4801      	ldr	r0, [pc, #4]	; (20f6c <nrfx_gpiote_channel_alloc+0x8>)
   20f68:	f7ff bcd0 	b.w	2090c <nrfx_flag32_alloc>
   20f6c:	2000c6c8 	.word	0x2000c6c8

00020f70 <nrfx_gpiote_trigger_enable>:
{
   20f70:	4602      	mov	r2, r0
   20f72:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20f74:	f7ff fe06 	bl	20b84 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20f78:	4b1b      	ldr	r3, [pc, #108]	; (20fe8 <nrfx_gpiote_trigger_enable+0x78>)
   20f7a:	f102 0408 	add.w	r4, r2, #8
   20f7e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20f82:	b1c8      	cbz	r0, 20fb8 <nrfx_gpiote_trigger_enable+0x48>
   20f84:	f013 0402 	ands.w	r4, r3, #2
   20f88:	d116      	bne.n	20fb8 <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
   20f8a:	4818      	ldr	r0, [pc, #96]	; (20fec <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20f8c:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   20f8e:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20f90:	5084      	str	r4, [r0, r2]
   20f92:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   20f94:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   20f98:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   20f9c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   20fa0:	f040 0001 	orr.w	r0, r0, #1
   20fa4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   20fa8:	b129      	cbz	r1, 20fb6 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   20faa:	2201      	movs	r2, #1
   20fac:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   20fb0:	4a0f      	ldr	r2, [pc, #60]	; (20ff0 <nrfx_gpiote_trigger_enable+0x80>)
   20fb2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   20fb6:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20fb8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   20fbc:	2b04      	cmp	r3, #4
   20fbe:	d00e      	beq.n	20fde <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   20fc0:	2b05      	cmp	r3, #5
   20fc2:	d00e      	beq.n	20fe2 <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
   20fc4:	4b0b      	ldr	r3, [pc, #44]	; (20ff4 <nrfx_gpiote_trigger_enable+0x84>)
   20fc6:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
   20fc8:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   20fcc:	40d9      	lsrs	r1, r3
   20fce:	f001 0101 	and.w	r1, r1, #1
   20fd2:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   20fd4:	4610      	mov	r0, r2
}
   20fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   20fda:	f7ff bdc3 	b.w	20b64 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   20fde:	2103      	movs	r1, #3
   20fe0:	e7f8      	b.n	20fd4 <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   20fe2:	2102      	movs	r1, #2
   20fe4:	e7f6      	b.n	20fd4 <nrfx_gpiote_trigger_enable+0x64>
   20fe6:	bf00      	nop
   20fe8:	2000c678 	.word	0x2000c678
   20fec:	40031100 	.word	0x40031100
   20ff0:	40031000 	.word	0x40031000
   20ff4:	40842500 	.word	0x40842500

00020ff8 <nrfx_gpiote_trigger_disable>:
{
   20ff8:	b508      	push	{r3, lr}
   20ffa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20ffc:	f7ff fdc2 	bl	20b84 <pin_in_use_by_te>
   21000:	b1c0      	cbz	r0, 21034 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21002:	4b0f      	ldr	r3, [pc, #60]	; (21040 <nrfx_gpiote_trigger_disable+0x48>)
   21004:	f102 0108 	add.w	r1, r2, #8
   21008:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2100c:	0799      	lsls	r1, r3, #30
   2100e:	d411      	bmi.n	21034 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21010:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21012:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21014:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   21016:	490b      	ldr	r1, [pc, #44]	; (21044 <nrfx_gpiote_trigger_disable+0x4c>)
   21018:	009b      	lsls	r3, r3, #2
   2101a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2101e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21022:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   21026:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2102a:	f022 0203 	bic.w	r2, r2, #3
   2102e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   21032:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21034:	2100      	movs	r1, #0
}
   21036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2103a:	4610      	mov	r0, r2
   2103c:	f7ff bd92 	b.w	20b64 <nrf_gpio_cfg_sense_set>
   21040:	2000c678 	.word	0x2000c678
   21044:	40031000 	.word	0x40031000

00021048 <nrfx_gpiote_pin_uninit>:
{
   21048:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2104a:	4b0c      	ldr	r3, [pc, #48]	; (2107c <nrfx_gpiote_pin_uninit+0x34>)
   2104c:	f100 0208 	add.w	r2, r0, #8
   21050:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   21054:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   21056:	07db      	lsls	r3, r3, #31
   21058:	d50d      	bpl.n	21076 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
   2105a:	f7ff ffcd 	bl	20ff8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2105e:	4620      	mov	r0, r4
   21060:	f7ff fde2 	bl	20c28 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   21064:	2202      	movs	r2, #2
   21066:	4b06      	ldr	r3, [pc, #24]	; (21080 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
   21068:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   2106c:	3480      	adds	r4, #128	; 0x80
   2106e:	4805      	ldr	r0, [pc, #20]	; (21084 <nrfx_gpiote_pin_uninit+0x3c>)
   21070:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   21074:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21076:	4804      	ldr	r0, [pc, #16]	; (21088 <nrfx_gpiote_pin_uninit+0x40>)
   21078:	e7fc      	b.n	21074 <nrfx_gpiote_pin_uninit+0x2c>
   2107a:	bf00      	nop
   2107c:	2000c678 	.word	0x2000c678
   21080:	40842500 	.word	0x40842500
   21084:	0bad0000 	.word	0x0bad0000
   21088:	0bad0004 	.word	0x0bad0004

0002108c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   2108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   21090:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   21092:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21094:	462c      	mov	r4, r5
{
   21096:	4b4d      	ldr	r3, [pc, #308]	; (211cc <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   21098:	484d      	ldr	r0, [pc, #308]	; (211d0 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2109a:	494e      	ldr	r1, [pc, #312]	; (211d4 <nrfx_gpiote_irq_handler+0x148>)
{
   2109c:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2109e:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   210a0:	b136      	cbz	r6, 210b0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   210a2:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   210a6:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   210a8:	bf1e      	ittt	ne
   210aa:	601c      	strne	r4, [r3, #0]
   210ac:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   210ae:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   210b0:	3304      	adds	r3, #4
   210b2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   210b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   210b8:	d1f1      	bne.n	2109e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   210ba:	4f45      	ldr	r7, [pc, #276]	; (211d0 <nrfx_gpiote_irq_handler+0x144>)
   210bc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   210c0:	b193      	cbz	r3, 210e8 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
   210c2:	4e45      	ldr	r6, [pc, #276]	; (211d8 <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   210c4:	f10d 090c 	add.w	r9, sp, #12
   210c8:	6a33      	ldr	r3, [r6, #32]
   210ca:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   210cc:	6233      	str	r3, [r6, #32]
   210ce:	f04f 0a01 	mov.w	sl, #1
            while (latch[i])
   210d2:	9803      	ldr	r0, [sp, #12]
   210d4:	b970      	cbnz	r0, 210f4 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   210d6:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
   210da:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   210de:	6a33      	ldr	r3, [r6, #32]
   210e0:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   210e2:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
   210e4:	2b00      	cmp	r3, #0
   210e6:	d1f2      	bne.n	210ce <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   210e8:	2401      	movs	r4, #1
    while (mask)
   210ea:	2d00      	cmp	r5, #0
   210ec:	d156      	bne.n	2119c <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   210ee:	b005      	add	sp, #20
   210f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   210f4:	fa90 fba0 	rbit	fp, r0
   210f8:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   210fc:	4a37      	ldr	r2, [pc, #220]	; (211dc <nrfx_gpiote_irq_handler+0x150>)
   210fe:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   21102:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
   21106:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   2110a:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   2110e:	f819 300c 	ldrb.w	r3, [r9, ip]
   21112:	fa0a f404 	lsl.w	r4, sl, r4
   21116:	ea23 0304 	bic.w	r3, r3, r4
   2111a:	f809 300c 	strb.w	r3, [r9, ip]
   2111e:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21122:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   21126:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
   2112a:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2112c:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   2112e:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
   21132:	d518      	bpl.n	21166 <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
   21134:	4611      	mov	r1, r2
   21136:	4658      	mov	r0, fp
   21138:	9301      	str	r3, [sp, #4]
   2113a:	f7ff fd2d 	bl	20b98 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2113e:	9b01      	ldr	r3, [sp, #4]
   21140:	b2e4      	uxtb	r4, r4
   21142:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
   21146:	f3c3 4301 	ubfx	r3, r3, #16, #2
   2114a:	429c      	cmp	r4, r3
   2114c:	d107      	bne.n	2115e <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2114e:	2100      	movs	r1, #0
   21150:	4658      	mov	r0, fp
   21152:	f7ff fd07 	bl	20b64 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   21156:	4621      	mov	r1, r4
   21158:	4658      	mov	r0, fp
   2115a:	f7ff fd03 	bl	20b64 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   2115e:	fa0a f00b 	lsl.w	r0, sl, fp
   21162:	6230      	str	r0, [r6, #32]
}
   21164:	e7b5      	b.n	210d2 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   21166:	2c02      	cmp	r4, #2
   21168:	d10c      	bne.n	21184 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2116a:	2103      	movs	r1, #3
   2116c:	4658      	mov	r0, fp
   2116e:	f7ff fcf9 	bl	20b64 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   21172:	f008 0305 	and.w	r3, r8, #5
   21176:	2b01      	cmp	r3, #1
   21178:	d1f1      	bne.n	2115e <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
   2117a:	4641      	mov	r1, r8
   2117c:	4658      	mov	r0, fp
   2117e:	f7ff fd0b 	bl	20b98 <call_handler>
   21182:	e7ec      	b.n	2115e <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   21184:	2102      	movs	r1, #2
   21186:	4658      	mov	r0, fp
   21188:	9201      	str	r2, [sp, #4]
   2118a:	f7ff fceb 	bl	20b64 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2118e:	9a01      	ldr	r2, [sp, #4]
   21190:	2a03      	cmp	r2, #3
   21192:	d0f2      	beq.n	2117a <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   21194:	2c03      	cmp	r4, #3
   21196:	d1e2      	bne.n	2115e <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   21198:	428a      	cmp	r2, r1
   2119a:	e7ed      	b.n	21178 <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
   2119c:	fa95 f3a5 	rbit	r3, r5
   211a0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   211a4:	fa04 f203 	lsl.w	r2, r4, r3
   211a8:	009b      	lsls	r3, r3, #2
   211aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   211ae:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   211b2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   211b6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   211ba:	f3c0 2004 	ubfx	r0, r0, #8, #5
   211be:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   211c2:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   211c6:	f7ff fce7 	bl	20b98 <call_handler>
   211ca:	e78e      	b.n	210ea <nrfx_gpiote_irq_handler+0x5e>
   211cc:	40031100 	.word	0x40031100
   211d0:	40031000 	.word	0x40031000
   211d4:	40031120 	.word	0x40031120
   211d8:	40842500 	.word	0x40842500
   211dc:	2000c678 	.word	0x2000c678

000211e0 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   211e0:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   211e2:	4c08      	ldr	r4, [pc, #32]	; (21204 <nrfx_ipc_init+0x24>)
{
   211e4:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   211e6:	7923      	ldrb	r3, [r4, #4]
{
   211e8:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   211ea:	b943      	cbnz	r3, 211fe <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   211ec:	202a      	movs	r0, #42	; 0x2a
   211ee:	f7fa fa83 	bl	1b6f8 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   211f2:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   211f4:	4804      	ldr	r0, [pc, #16]	; (21208 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   211f6:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   211f8:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   211fa:	60a5      	str	r5, [r4, #8]
}
   211fc:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   211fe:	4803      	ldr	r0, [pc, #12]	; (2120c <nrfx_ipc_init+0x2c>)
   21200:	e7fc      	b.n	211fc <nrfx_ipc_init+0x1c>
   21202:	bf00      	nop
   21204:	2000d474 	.word	0x2000d474
   21208:	0bad0000 	.word	0x0bad0000
   2120c:	0bad000c 	.word	0x0bad000c

00021210 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   21210:	2300      	movs	r3, #0
{
   21212:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   21214:	4a0d      	ldr	r2, [pc, #52]	; (2124c <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   21216:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2121a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   2121e:	3301      	adds	r3, #1
   21220:	2b08      	cmp	r3, #8
   21222:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   21226:	d1f6      	bne.n	21216 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   21228:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   2122a:	4a08      	ldr	r2, [pc, #32]	; (2124c <nrfx_ipc_config_load+0x3c>)
   2122c:	f100 011c 	add.w	r1, r0, #28
   21230:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   21234:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   21238:	3301      	adds	r3, #1
   2123a:	2b08      	cmp	r3, #8
   2123c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   21240:	d1f6      	bne.n	21230 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   21242:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   21244:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   21248:	bd30      	pop	{r4, r5, pc}
   2124a:	bf00      	nop
   2124c:	4002a000 	.word	0x4002a000

00021250 <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   21250:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   21252:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   21256:	4a13      	ldr	r2, [pc, #76]	; (212a4 <nrfx_ipc_uninit+0x54>)
   21258:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   2125c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   21260:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   21264:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   21268:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   2126c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   21270:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   21274:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   21278:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   2127c:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   21280:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   21284:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   21288:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   2128c:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   21290:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   21294:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   21298:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   2129c:	4a02      	ldr	r2, [pc, #8]	; (212a8 <nrfx_ipc_uninit+0x58>)
   2129e:	7113      	strb	r3, [r2, #4]
}
   212a0:	4770      	bx	lr
   212a2:	bf00      	nop
   212a4:	4002a000 	.word	0x4002a000
   212a8:	2000d474 	.word	0x2000d474

000212ac <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   212ac:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   212ae:	4a02      	ldr	r2, [pc, #8]	; (212b8 <nrfx_ipc_receive_event_enable+0xc>)
   212b0:	4083      	lsls	r3, r0
   212b2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   212b6:	4770      	bx	lr
   212b8:	4002a000 	.word	0x4002a000

000212bc <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   212bc:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   212be:	4a02      	ldr	r2, [pc, #8]	; (212c8 <nrfx_ipc_receive_event_disable+0xc>)
   212c0:	4083      	lsls	r3, r0
   212c2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   212c6:	4770      	bx	lr
   212c8:	4002a000 	.word	0x4002a000

000212cc <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   212cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   212ce:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   212d0:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   212d2:	4b0b      	ldr	r3, [pc, #44]	; (21300 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   212d4:	4d0b      	ldr	r5, [pc, #44]	; (21304 <nrfx_ipc_irq_handler+0x38>)
   212d6:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   212da:	b904      	cbnz	r4, 212de <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   212dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   212de:	fa94 f0a4 	rbit	r0, r4
   212e2:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   212e6:	fa06 f300 	lsl.w	r3, r6, r0
   212ea:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   212ee:	4b06      	ldr	r3, [pc, #24]	; (21308 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   212f0:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   212f2:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   212f4:	682b      	ldr	r3, [r5, #0]
   212f6:	2b00      	cmp	r3, #0
   212f8:	d0ef      	beq.n	212da <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   212fa:	68a9      	ldr	r1, [r5, #8]
   212fc:	4798      	blx	r3
   212fe:	e7ec      	b.n	212da <nrfx_ipc_irq_handler+0xe>
   21300:	4002a000 	.word	0x4002a000
   21304:	2000d474 	.word	0x2000d474
   21308:	4002a100 	.word	0x4002a100

0002130c <spim_pin_uninit>:
    return err_code;
}

static void spim_pin_uninit(uint32_t pin)
{
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2130c:	1c43      	adds	r3, r0, #1
   2130e:	d006      	beq.n	2131e <spim_pin_uninit+0x12>
    reg->PIN_CNF[pin_number] = cnf;
   21310:	2202      	movs	r2, #2
   21312:	4b03      	ldr	r3, [pc, #12]	; (21320 <spim_pin_uninit+0x14>)
    *p_pin = pin_number & 0x1F;
   21314:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
   21318:	3080      	adds	r0, #128	; 0x80
   2131a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    {
        return;
    }

    nrf_gpio_cfg_default(pin);
}
   2131e:	4770      	bx	lr
   21320:	40842500 	.word	0x40842500

00021324 <nrf_gpio_pin_write>:
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21324:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
   21326:	f000 001f 	and.w	r0, r0, #31
   2132a:	4a03      	ldr	r2, [pc, #12]	; (21338 <nrf_gpio_pin_write+0x14>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2132c:	4083      	lsls	r3, r0
    if (value == 0)
   2132e:	b909      	cbnz	r1, 21334 <nrf_gpio_pin_write+0x10>
    p_reg->OUTCLR = clr_mask;
   21330:	60d3      	str	r3, [r2, #12]
}
   21332:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
   21334:	6093      	str	r3, [r2, #8]
}
   21336:	4770      	bx	lr
   21338:	40842500 	.word	0x40842500

0002133c <nrfx_spim_init>:
{
   2133c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21340:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   21342:	4d4e      	ldr	r5, [pc, #312]	; (2147c <nrfx_spim_init+0x140>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21344:	7901      	ldrb	r1, [r0, #4]
{
   21346:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   21348:	014f      	lsls	r7, r1, #5
   2134a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   2134e:	7f08      	ldrb	r0, [r1, #28]
   21350:	2800      	cmp	r0, #0
   21352:	f040 8090 	bne.w	21476 <nrfx_spim_init+0x13a>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   21356:	f8d6 8000 	ldr.w	r8, [r6]
    p_cb->handler = handler;
   2135a:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
   2135c:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   2135e:	7be0      	ldrb	r0, [r4, #15]
   21360:	7f8a      	ldrb	r2, [r1, #30]
   21362:	f360 0200 	bfi	r2, r0, #0, #1
   21366:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   21368:	7920      	ldrb	r0, [r4, #4]
   2136a:	b2d2      	uxtb	r2, r2
   2136c:	f360 0241 	bfi	r2, r0, #1, #1
   21370:	778a      	strb	r2, [r1, #30]
    p_cb->ss_pin = p_config->ss_pin;
   21372:	78e3      	ldrb	r3, [r4, #3]
   21374:	77cb      	strb	r3, [r1, #31]
    if (!p_config->skip_gpio_cfg)
   21376:	7be3      	ldrb	r3, [r4, #15]
   21378:	f8d6 a000 	ldr.w	sl, [r6]
   2137c:	2b00      	cmp	r3, #0
   2137e:	d138      	bne.n	213f2 <nrfx_spim_init+0xb6>
        nrf_gpio_pin_write(p_config->sck_pin,
   21380:	7b21      	ldrb	r1, [r4, #12]
   21382:	7820      	ldrb	r0, [r4, #0]
   21384:	2901      	cmp	r1, #1
   21386:	bf94      	ite	ls
   21388:	2100      	movls	r1, #0
   2138a:	2101      	movhi	r1, #1
   2138c:	f7ff ffca 	bl	21324 <nrf_gpio_pin_write>
    reg->PIN_CNF[pin_number] = cnf;
   21390:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   21392:	7823      	ldrb	r3, [r4, #0]
    reg->PIN_CNF[pin_number] = cnf;
   21394:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 21480 <nrfx_spim_init+0x144>
    *p_pin = pin_number & 0x1F;
   21398:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   2139c:	3380      	adds	r3, #128	; 0x80
   2139e:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   213a2:	7863      	ldrb	r3, [r4, #1]
   213a4:	2bff      	cmp	r3, #255	; 0xff
   213a6:	d00b      	beq.n	213c0 <nrfx_spim_init+0x84>
    *p_pin = pin_number & 0x1F;
   213a8:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   213ac:	409a      	lsls	r2, r3
    p_reg->OUTCLR = clr_mask;
   213ae:	f8c9 200c 	str.w	r2, [r9, #12]
    reg->PIN_CNF[pin_number] = cnf;
   213b2:	2203      	movs	r2, #3
    *p_pin = pin_number & 0x1F;
   213b4:	7863      	ldrb	r3, [r4, #1]
   213b6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   213ba:	3380      	adds	r3, #128	; 0x80
   213bc:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   213c0:	78a3      	ldrb	r3, [r4, #2]
   213c2:	2bff      	cmp	r3, #255	; 0xff
   213c4:	d006      	beq.n	213d4 <nrfx_spim_init+0x98>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   213c6:	7ba2      	ldrb	r2, [r4, #14]
    *p_pin = pin_number & 0x1F;
   213c8:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   213cc:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
   213ce:	3380      	adds	r3, #128	; 0x80
   213d0:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   213d4:	78e0      	ldrb	r0, [r4, #3]
   213d6:	28ff      	cmp	r0, #255	; 0xff
   213d8:	d00b      	beq.n	213f2 <nrfx_spim_init+0xb6>
                               p_config->ss_active_high ? 0 : 1);
   213da:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
   213dc:	f081 0101 	eor.w	r1, r1, #1
   213e0:	f7ff ffa0 	bl	21324 <nrf_gpio_pin_write>
   213e4:	2203      	movs	r2, #3
    *p_pin = pin_number & 0x1F;
   213e6:	78e3      	ldrb	r3, [r4, #3]
   213e8:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   213ec:	3380      	adds	r3, #128	; 0x80
   213ee:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   213f2:	7c23      	ldrb	r3, [r4, #16]
   213f4:	b993      	cbnz	r3, 2141c <nrfx_spim_init+0xe0>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   213f6:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   213f8:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   213fa:	2bff      	cmp	r3, #255	; 0xff
   213fc:	bf18      	it	ne
   213fe:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   21400:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   21402:	bf08      	it	eq
   21404:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   21408:	2bff      	cmp	r3, #255	; 0xff
   2140a:	bf08      	it	eq
   2140c:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   21410:	f8ca 1508 	str.w	r1, [sl, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   21414:	f8ca 250c 	str.w	r2, [sl, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   21418:	f8ca 3510 	str.w	r3, [sl, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   2141c:	68a3      	ldr	r3, [r4, #8]
   2141e:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   21422:	7b63      	ldrb	r3, [r4, #13]
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   21424:	7b22      	ldrb	r2, [r4, #12]
   21426:	3b00      	subs	r3, #0
   21428:	bf18      	it	ne
   2142a:	2301      	movne	r3, #1
    switch (spi_mode)
   2142c:	2a02      	cmp	r2, #2
   2142e:	d01c      	beq.n	2146a <nrfx_spim_init+0x12e>
   21430:	2a03      	cmp	r2, #3
   21432:	d01d      	beq.n	21470 <nrfx_spim_init+0x134>
   21434:	2a01      	cmp	r2, #1
   21436:	d101      	bne.n	2143c <nrfx_spim_init+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   21438:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   2143c:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   21440:	79a3      	ldrb	r3, [r4, #6]
   21442:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   21446:	2307      	movs	r3, #7
   21448:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    if (p_cb->handler)
   2144c:	59eb      	ldr	r3, [r5, r7]
   2144e:	b123      	cbz	r3, 2145a <nrfx_spim_init+0x11e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   21450:	6830      	ldr	r0, [r6, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   21452:	f340 3007 	sbfx	r0, r0, #12, #8
   21456:	f7fa f94f 	bl	1b6f8 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   2145a:	2300      	movs	r3, #0
   2145c:	443d      	add	r5, r7
   2145e:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   21460:	2301      	movs	r3, #1
    return err_code;
   21462:	4808      	ldr	r0, [pc, #32]	; (21484 <nrfx_spim_init+0x148>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   21464:	772b      	strb	r3, [r5, #28]
}
   21466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   2146a:	f043 0304 	orr.w	r3, r3, #4
        break;
   2146e:	e7e5      	b.n	2143c <nrfx_spim_init+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   21470:	f043 0306 	orr.w	r3, r3, #6
        break;
   21474:	e7e2      	b.n	2143c <nrfx_spim_init+0x100>
        return err_code;
   21476:	4804      	ldr	r0, [pc, #16]	; (21488 <nrfx_spim_init+0x14c>)
   21478:	e7f5      	b.n	21466 <nrfx_spim_init+0x12a>
   2147a:	bf00      	nop
   2147c:	2000d480 	.word	0x2000d480
   21480:	40842500 	.word	0x40842500
   21484:	0bad0000 	.word	0x0bad0000
   21488:	0bad0005 	.word	0x0bad0005

0002148c <nrfx_spim_uninit>:

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   2148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2148e:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   21490:	4d1f      	ldr	r5, [pc, #124]	; (21510 <nrfx_spim_uninit+0x84>)
   21492:	015e      	lsls	r6, r3, #5
   21494:	eb05 1743 	add.w	r7, r5, r3, lsl #5
   21498:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   2149a:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   2149c:	b1b3      	cbz	r3, 214cc <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   2149e:	f344 3007 	sbfx	r0, r4, #12, #8
   214a2:	f7fa f937 	bl	1b714 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   214a6:	4b1b      	ldr	r3, [pc, #108]	; (21514 <nrfx_spim_uninit+0x88>)
   214a8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   214ac:	7f7b      	ldrb	r3, [r7, #29]
   214ae:	b16b      	cbz	r3, 214cc <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   214b0:	2301      	movs	r3, #1
   214b2:	2764      	movs	r7, #100	; 0x64
   214b4:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   214b6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   214ba:	b923      	cbnz	r3, 214c6 <nrfx_spim_uninit+0x3a>
   214bc:	2001      	movs	r0, #1
   214be:	f005 ff59 	bl	27374 <nrfx_busy_wait>
   214c2:	3f01      	subs	r7, #1
   214c4:	d1f7      	bne.n	214b6 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
   214c6:	2200      	movs	r2, #0
   214c8:	19ab      	adds	r3, r5, r6
   214ca:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   214cc:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   214ce:	19a9      	adds	r1, r5, r6
   214d0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   214d4:	7f8b      	ldrb	r3, [r1, #30]
   214d6:	07db      	lsls	r3, r3, #31
   214d8:	d415      	bmi.n	21506 <nrfx_spim_uninit+0x7a>
    return p_reg->PSEL.SCK;
   214da:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   214de:	f7ff ff15 	bl	2130c <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   214e2:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   214e6:	f7ff ff11 	bl	2130c <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   214ea:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   214ee:	f7ff ff0d 	bl	2130c <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   214f2:	7fcb      	ldrb	r3, [r1, #31]
   214f4:	2bff      	cmp	r3, #255	; 0xff
   214f6:	d006      	beq.n	21506 <nrfx_spim_uninit+0x7a>
   214f8:	2102      	movs	r1, #2
   214fa:	4a07      	ldr	r2, [pc, #28]	; (21518 <nrfx_spim_uninit+0x8c>)
    *p_pin = pin_number & 0x1F;
   214fc:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   21500:	3380      	adds	r3, #128	; 0x80
   21502:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   21506:	2300      	movs	r3, #0
   21508:	4435      	add	r5, r6
   2150a:	772b      	strb	r3, [r5, #28]
}
   2150c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2150e:	bf00      	nop
   21510:	2000d480 	.word	0x2000d480
   21514:	00080152 	.word	0x00080152
   21518:	40842500 	.word	0x40842500

0002151c <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   2151c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21520:	4f38      	ldr	r7, [pc, #224]	; (21604 <nrfx_spim_xfer+0xe8>)
   21522:	7903      	ldrb	r3, [r0, #4]
{
   21524:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21526:	eb07 1843 	add.w	r8, r7, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   2152a:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   2152e:	4681      	mov	r9, r0
   21530:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
   21532:	015e      	lsls	r6, r3, #5
   21534:	2a00      	cmp	r2, #0
   21536:	d163      	bne.n	21600 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   21538:	59ba      	ldr	r2, [r7, r6]
   2153a:	b12a      	cbz	r2, 21548 <nrfx_spim_xfer+0x2c>
   2153c:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   21540:	bf04      	itt	eq
   21542:	2201      	moveq	r2, #1
   21544:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   21548:	eb07 0c06 	add.w	ip, r7, r6
   2154c:	f10c 0c0c 	add.w	ip, ip, #12
   21550:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   21554:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   21558:	2101      	movs	r1, #1
   2155a:	4640      	mov	r0, r8
   2155c:	f005 ff0e 	bl	2737c <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   21560:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   21562:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   21566:	b121      	cbz	r1, 21572 <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   21568:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   2156c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   21570:	d106      	bne.n	21580 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   21572:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   21574:	b152      	cbz	r2, 2158c <nrfx_spim_xfer+0x70>
   21576:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2157a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   2157e:	d005      	beq.n	2158c <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
   21580:	2300      	movs	r3, #0
   21582:	443e      	add	r6, r7
        return err_code;
   21584:	4820      	ldr	r0, [pc, #128]	; (21608 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
   21586:	7773      	strb	r3, [r6, #29]
}
   21588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   2158c:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2158e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21592:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   21596:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   2159a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2159e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   215a2:	2200      	movs	r2, #0
   215a4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   215a8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   215ac:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   215b0:	bf18      	it	ne
   215b2:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   215b4:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   215b8:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   215bc:	bf18      	it	ne
   215be:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   215c0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   215c4:	072a      	lsls	r2, r5, #28
   215c6:	d507      	bpl.n	215d8 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
   215c8:	59ba      	ldr	r2, [r7, r6]
   215ca:	b972      	cbnz	r2, 215ea <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
   215cc:	2100      	movs	r1, #0
   215ce:	4640      	mov	r0, r8
   215d0:	f005 fed4 	bl	2737c <set_ss_pin_state>
    return err_code;
   215d4:	480d      	ldr	r0, [pc, #52]	; (2160c <nrfx_spim_xfer+0xf0>)
   215d6:	e7d7      	b.n	21588 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   215d8:	2201      	movs	r2, #1
   215da:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   215dc:	59ba      	ldr	r2, [r7, r6]
   215de:	b922      	cbnz	r2, 215ea <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   215e0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   215e4:	2a00      	cmp	r2, #0
   215e6:	d0fb      	beq.n	215e0 <nrfx_spim_xfer+0xc4>
   215e8:	e7f0      	b.n	215cc <nrfx_spim_xfer+0xb0>
    if (!enable)
   215ea:	f015 0f04 	tst.w	r5, #4
   215ee:	f04f 0240 	mov.w	r2, #64	; 0x40
   215f2:	d002      	beq.n	215fa <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
   215f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   215f8:	e7ec      	b.n	215d4 <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
   215fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   215fe:	e7e9      	b.n	215d4 <nrfx_spim_xfer+0xb8>
        return err_code;
   21600:	4803      	ldr	r0, [pc, #12]	; (21610 <nrfx_spim_xfer+0xf4>)
   21602:	e7c1      	b.n	21588 <nrfx_spim_xfer+0x6c>
   21604:	2000d480 	.word	0x2000d480
   21608:	0bad000a 	.word	0x0bad000a
   2160c:	0bad0000 	.word	0x0bad0000
   21610:	0bad000b 	.word	0x0bad000b

00021614 <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   21614:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21616:	4b0c      	ldr	r3, [pc, #48]	; (21648 <nrfx_spim_3_irq_handler+0x34>)
   21618:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2161c:	b192      	cbz	r2, 21644 <nrfx_spim_3_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2161e:	2500      	movs	r5, #0
    set_ss_pin_state(p_cb, false);
   21620:	4c0a      	ldr	r4, [pc, #40]	; (2164c <nrfx_spim_3_irq_handler+0x38>)
   21622:	4629      	mov	r1, r5
   21624:	4620      	mov	r0, r4
   21626:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   2162a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   2162e:	f005 fea5 	bl	2737c <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   21632:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   21636:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   21638:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2163a:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   2163e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   21642:	4718      	bx	r3
}
   21644:	bd70      	pop	{r4, r5, r6, pc}
   21646:	bf00      	nop
   21648:	4000b000 	.word	0x4000b000
   2164c:	2000d480 	.word	0x2000d480

00021650 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   21650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   21652:	f04f 0e34 	mov.w	lr, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   21656:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   21658:	4d22      	ldr	r5, [pc, #136]	; (216e4 <nrfx_twim_init+0x94>)
   2165a:	fb0e fe06 	mul.w	lr, lr, r6
   2165e:	eb05 040e 	add.w	r4, r5, lr
   21662:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   21666:	2f00      	cmp	r7, #0
   21668:	d139      	bne.n	216de <nrfx_twim_init+0x8e>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   2166a:	f8d0 c000 	ldr.w	ip, [r0]
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   2166e:	60a7      	str	r7, [r4, #8]
    p_cb->handler         = event_handler;
   21670:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->p_context       = p_context;
   21674:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
   21676:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   2167a:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   2167e:	7b4b      	ldrb	r3, [r1, #13]
   21680:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   21684:	7b8b      	ldrb	r3, [r1, #14]
   21686:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   2168a:	b1c3      	cbz	r3, 216be <nrfx_twim_init+0x6e>
   2168c:	7bcb      	ldrb	r3, [r1, #15]
   2168e:	b92b      	cbnz	r3, 2169c <nrfx_twim_init+0x4c>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   21690:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   21694:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   21698:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   2169c:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   2169e:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524

    if (p_cb->handler)
   216a2:	b122      	cbz	r2, 216ae <nrfx_twim_init+0x5e>
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   216a4:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   216a6:	f340 3007 	sbfx	r0, r0, #12, #8
   216aa:	f7fa f825 	bl	1b6f8 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   216ae:	2334      	movs	r3, #52	; 0x34
   216b0:	fb03 5506 	mla	r5, r3, r6, r5
   216b4:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   216b6:	480c      	ldr	r0, [pc, #48]	; (216e8 <nrfx_twim_init+0x98>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   216b8:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   216bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   216be:	f240 670c 	movw	r7, #1548	; 0x60c
    *p_pin = pin_number & 0x1F;
   216c2:	680b      	ldr	r3, [r1, #0]
    reg->PIN_CNF[pin_number] = cnf;
   216c4:	4c09      	ldr	r4, [pc, #36]	; (216ec <nrfx_twim_init+0x9c>)
    *p_pin = pin_number & 0x1F;
   216c6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   216ca:	3380      	adds	r3, #128	; 0x80
   216cc:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   216d0:	684b      	ldr	r3, [r1, #4]
   216d2:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   216d6:	3380      	adds	r3, #128	; 0x80
   216d8:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   216dc:	e7d6      	b.n	2168c <nrfx_twim_init+0x3c>
        return err_code;
   216de:	4804      	ldr	r0, [pc, #16]	; (216f0 <nrfx_twim_init+0xa0>)
   216e0:	e7ec      	b.n	216bc <nrfx_twim_init+0x6c>
   216e2:	bf00      	nop
   216e4:	2000d4a0 	.word	0x2000d4a0
   216e8:	0bad0000 	.word	0x0bad0000
   216ec:	40842500 	.word	0x40842500
   216f0:	0bad0005 	.word	0x0bad0005

000216f4 <nrfx_twim_enable>:
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   216f4:	2106      	movs	r1, #6
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
   216f6:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   216f8:	7902      	ldrb	r2, [r0, #4]
   216fa:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   216fe:	2134      	movs	r1, #52	; 0x34
   21700:	4b03      	ldr	r3, [pc, #12]	; (21710 <nrfx_twim_enable+0x1c>)
   21702:	fb01 3302 	mla	r3, r1, r2, r3
   21706:	2202      	movs	r2, #2
   21708:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   2170c:	4770      	bx	lr
   2170e:	bf00      	nop
   21710:	2000d4a0 	.word	0x2000d4a0

00021714 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21714:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   21716:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   21718:	2034      	movs	r0, #52	; 0x34
   2171a:	4b0b      	ldr	r3, [pc, #44]	; (21748 <nrfx_twim_disable+0x34>)
   2171c:	fb00 3301 	mla	r3, r0, r1, r3
   21720:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   21722:	480a      	ldr	r0, [pc, #40]	; (2174c <nrfx_twim_disable+0x38>)
   21724:	6099      	str	r1, [r3, #8]
   21726:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   2172a:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   2172e:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   21732:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   21736:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2173a:	2201      	movs	r2, #1
    p_cb->busy = false;
   2173c:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   21740:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   21744:	4770      	bx	lr
   21746:	bf00      	nop
   21748:	2000d4a0 	.word	0x2000d4a0
   2174c:	019c0202 	.word	0x019c0202

00021750 <nrfx_twim_xfer>:
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
   21750:	2334      	movs	r3, #52	; 0x34


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   21752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21756:	4617      	mov	r7, r2
    p_cb->error = false;
   21758:	2200      	movs	r2, #0
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2175a:	f890 e004 	ldrb.w	lr, [r0, #4]
    p_cb->error = false;
   2175e:	f8df c2e4 	ldr.w	ip, [pc, #740]	; 21a44 <nrfx_twim_xfer+0x2f4>
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   21762:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   21764:	fb03 c30e 	mla	r3, r3, lr, ip
   21768:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   2176c:	684b      	ldr	r3, [r1, #4]
{
   2176e:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   21770:	b14b      	cbz	r3, 21786 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   21772:	68cb      	ldr	r3, [r1, #12]
   21774:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   21778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2177c:	d003      	beq.n	21786 <nrfx_twim_xfer+0x36>
        return err_code;
   2177e:	4eb2      	ldr	r6, [pc, #712]	; (21a48 <nrfx_twim_xfer+0x2f8>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21780:	4630      	mov	r0, r6
   21782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   21786:	2634      	movs	r6, #52	; 0x34
   21788:	fb06 c60e 	mla	r6, r6, lr, ip
    p_reg->INTENCLR = mask;
   2178c:	4baf      	ldr	r3, [pc, #700]	; (21a4c <nrfx_twim_xfer+0x2fc>)
   2178e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   21792:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   21796:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   2179a:	b123      	cbz	r3, 217a6 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2179c:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   2179e:	4eac      	ldr	r6, [pc, #688]	; (21a50 <nrfx_twim_xfer+0x300>)
    p_reg->INTENSET = mask;
   217a0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   217a4:	e7ec      	b.n	21780 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   217a6:	f017 0f14 	tst.w	r7, #20
   217aa:	bf0c      	ite	eq
   217ac:	2301      	moveq	r3, #1
   217ae:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   217b0:	46a9      	mov	r9, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   217b2:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   217b6:	f106 080c 	add.w	r8, r6, #12
   217ba:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   217be:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   217c2:	f8d9 3000 	ldr.w	r3, [r9]
    p_cb->flags = flags;
   217c6:	6237      	str	r7, [r6, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   217c8:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   217cc:	f3c7 1300 	ubfx	r3, r7, #4, #1
   217d0:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   217d4:	786b      	ldrb	r3, [r5, #1]
   217d6:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   217da:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   217de:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   217e2:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   217e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   217ea:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   217ee:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   217f2:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   217f6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   217fa:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   217fe:	bf18      	it	ne
   21800:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   21802:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   21806:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   2180a:	bf18      	it	ne
   2180c:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   2180e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   21812:	782b      	ldrb	r3, [r5, #0]
   21814:	2b03      	cmp	r3, #3
   21816:	f200 80b9 	bhi.w	2198c <nrfx_twim_xfer+0x23c>
   2181a:	e8df f003 	tbb	[pc, r3]
   2181e:	a48b      	.short	0xa48b
   21820:	026d      	.short	0x026d
   21822:	692b      	ldr	r3, [r5, #16]
   21824:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   21828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2182c:	d1a7      	bne.n	2177e <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   2182e:	f44f 7380 	mov.w	r3, #256	; 0x100
   21832:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   21836:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21838:	68ea      	ldr	r2, [r5, #12]
   2183a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2183e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21842:	2300      	movs	r3, #0
   21844:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   21848:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2184c:	2201      	movs	r2, #1
   2184e:	6222      	str	r2, [r4, #32]
   21850:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21852:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   21856:	2a00      	cmp	r2, #0
   21858:	d0fb      	beq.n	21852 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2185a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   2185e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21862:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   21864:	68ab      	ldr	r3, [r5, #8]
   21866:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2186a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   2186e:	2334      	movs	r3, #52	; 0x34
   21870:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   21874:	fb03 c30e 	mla	r3, r3, lr, ip
   21878:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   2187a:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   2187c:	4e75      	ldr	r6, [pc, #468]	; (21a54 <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   2187e:	0738      	lsls	r0, r7, #28
   21880:	d407      	bmi.n	21892 <nrfx_twim_xfer+0x142>
   21882:	782a      	ldrb	r2, [r5, #0]
   21884:	2a03      	cmp	r2, #3
   21886:	d004      	beq.n	21892 <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21888:	2201      	movs	r2, #1
   2188a:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   2188c:	686b      	ldr	r3, [r5, #4]
   2188e:	b903      	cbnz	r3, 21892 <nrfx_twim_xfer+0x142>
   21890:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   21892:	2334      	movs	r3, #52	; 0x34
   21894:	fb03 f30e 	mul.w	r3, r3, lr
   21898:	f85c 1003 	ldr.w	r1, [ip, r3]
   2189c:	eb0c 0203 	add.w	r2, ip, r3
   218a0:	2900      	cmp	r1, #0
   218a2:	d176      	bne.n	21992 <nrfx_twim_xfer+0x242>
   218a4:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   218a6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   218aa:	2b00      	cmp	r3, #0
   218ac:	f000 8089 	beq.w	219c2 <nrfx_twim_xfer+0x272>
   218b0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   218b4:	2b00      	cmp	r3, #0
   218b6:	f040 8087 	bne.w	219c8 <nrfx_twim_xfer+0x278>
   218ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   218be:	2b00      	cmp	r3, #0
   218c0:	f000 8095 	beq.w	219ee <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
   218c4:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   218c6:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   218ca:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   218ce:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   218d2:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   218d6:	2d00      	cmp	r5, #0
   218d8:	f000 8081 	beq.w	219de <nrfx_twim_xfer+0x28e>
   218dc:	f412 7f00 	tst.w	r2, #512	; 0x200
   218e0:	f402 7280 	and.w	r2, r2, #256	; 0x100
   218e4:	d17e      	bne.n	219e4 <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   218e6:	6220      	str	r0, [r4, #32]
   218e8:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   218ea:	2a00      	cmp	r2, #0
   218ec:	d0db      	beq.n	218a6 <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   218ee:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
   218f2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   218f6:	e7d6      	b.n	218a6 <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   218f8:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   218fa:	68ea      	ldr	r2, [r5, #12]
   218fc:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21900:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   21904:	692b      	ldr	r3, [r5, #16]
   21906:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   2190a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   2190e:	f47f af36 	bne.w	2177e <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   21912:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   21914:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   21918:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   2191c:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   21920:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   21924:	2334      	movs	r3, #52	; 0x34
   21926:	2202      	movs	r2, #2
   21928:	fb03 c30e 	mla	r3, r3, lr, ip
   2192c:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2192e:	2301      	movs	r3, #1
   21930:	6223      	str	r3, [r4, #32]
   21932:	e7a2      	b.n	2187a <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   21934:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21936:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   21938:	f017 0f20 	tst.w	r7, #32
   2193c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21940:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   21944:	f04f 0334 	mov.w	r3, #52	; 0x34
   21948:	d008      	beq.n	2195c <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
   2194a:	f44f 7280 	mov.w	r2, #256	; 0x100
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   2194e:	fb03 c30e 	mla	r3, r3, lr, ip
   21952:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   21956:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   2195a:	e7e7      	b.n	2192c <nrfx_twim_xfer+0x1dc>
   2195c:	f44f 7200 	mov.w	r2, #512	; 0x200
   21960:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   21964:	e7df      	b.n	21926 <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   21966:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   21968:	68ea      	ldr	r2, [r5, #12]
   2196a:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2196e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   21972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   21976:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2197a:	2334      	movs	r3, #52	; 0x34
   2197c:	2202      	movs	r2, #2
   2197e:	fb03 c30e 	mla	r3, r3, lr, ip
   21982:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21984:	2301      	movs	r3, #1
   21986:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   21988:	2300      	movs	r3, #0
   2198a:	e777      	b.n	2187c <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
   2198c:	2308      	movs	r3, #8
   2198e:	4e32      	ldr	r6, [pc, #200]	; (21a58 <nrfx_twim_xfer+0x308>)
   21990:	e775      	b.n	2187e <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   21992:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
   21994:	bf44      	itt	mi
   21996:	2300      	movmi	r3, #0
   21998:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   2199a:	067a      	lsls	r2, r7, #25
   2199c:	d406      	bmi.n	219ac <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   2199e:	2334      	movs	r3, #52	; 0x34
   219a0:	fb03 c30e 	mla	r3, r3, lr, ip
   219a4:	689a      	ldr	r2, [r3, #8]
   219a6:	f042 0202 	orr.w	r2, r2, #2
   219aa:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   219ac:	2334      	movs	r3, #52	; 0x34
   219ae:	fb03 c30e 	mla	r3, r3, lr, ip
   219b2:	689a      	ldr	r2, [r3, #8]
   219b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   219b8:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   219ba:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
   219bc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   219c0:	e6de      	b.n	21780 <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   219c2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   219c6:	b123      	cbz	r3, 219d2 <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   219c8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   219cc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   219d0:	e773      	b.n	218ba <nrfx_twim_xfer+0x16a>
   219d2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   219d6:	2a00      	cmp	r2, #0
   219d8:	f43f af65 	beq.w	218a6 <nrfx_twim_xfer+0x156>
   219dc:	e773      	b.n	218c6 <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   219de:	6220      	str	r0, [r4, #32]
   219e0:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   219e2:	e760      	b.n	218a6 <nrfx_twim_xfer+0x156>
   219e4:	2a00      	cmp	r2, #0
   219e6:	d182      	bne.n	218ee <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
   219e8:	2b00      	cmp	r3, #0
   219ea:	f43f af5c 	beq.w	218a6 <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
   219ee:	2134      	movs	r1, #52	; 0x34
   219f0:	2000      	movs	r0, #0
   219f2:	fb01 c20e 	mla	r2, r1, lr, ip
    uint32_t error_source = p_reg->ERRORSRC;
   219f6:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   219fa:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   219fe:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   21a02:	b18b      	cbz	r3, 21a28 <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   21a04:	4a15      	ldr	r2, [pc, #84]	; (21a5c <nrfx_twim_xfer+0x30c>)
   21a06:	f013 0f01 	tst.w	r3, #1
   21a0a:	4e15      	ldr	r6, [pc, #84]	; (21a60 <nrfx_twim_xfer+0x310>)
   21a0c:	bf18      	it	ne
   21a0e:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   21a10:	f013 0f02 	tst.w	r3, #2
   21a14:	f102 0201 	add.w	r2, r2, #1
   21a18:	bf18      	it	ne
   21a1a:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   21a1c:	f013 0f04 	tst.w	r3, #4
   21a20:	4b10      	ldr	r3, [pc, #64]	; (21a64 <nrfx_twim_xfer+0x314>)
   21a22:	bf18      	it	ne
   21a24:	461e      	movne	r6, r3
   21a26:	e6ab      	b.n	21780 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   21a28:	067b      	lsls	r3, r7, #25
   21a2a:	f53f aea9 	bmi.w	21780 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   21a2e:	4620      	mov	r0, r4
   21a30:	fb0e c101 	mla	r1, lr, r1, ip
   21a34:	f005 fcae 	bl	27394 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   21a38:	4b09      	ldr	r3, [pc, #36]	; (21a60 <nrfx_twim_xfer+0x310>)
   21a3a:	2800      	cmp	r0, #0
   21a3c:	bf08      	it	eq
   21a3e:	461e      	moveq	r6, r3
   21a40:	e69e      	b.n	21780 <nrfx_twim_xfer+0x30>
   21a42:	bf00      	nop
   21a44:	2000d4a0 	.word	0x2000d4a0
   21a48:	0bad000a 	.word	0x0bad000a
   21a4c:	019c0202 	.word	0x019c0202
   21a50:	0bad000b 	.word	0x0bad000b
   21a54:	0bad0000 	.word	0x0bad0000
   21a58:	0bad0004 	.word	0x0bad0004
   21a5c:	0bae0000 	.word	0x0bae0000
   21a60:	0bad0001 	.word	0x0bad0001
   21a64:	0bae0002 	.word	0x0bae0002

00021a68 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   21a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21a6a:	4d5a      	ldr	r5, [pc, #360]	; (21bd4 <nrfx_twim_2_irq_handler+0x16c>)
   21a6c:	4c5a      	ldr	r4, [pc, #360]	; (21bd8 <nrfx_twim_2_irq_handler+0x170>)
   21a6e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   21a72:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   21a74:	b1fb      	cbz	r3, 21ab6 <nrfx_twim_2_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21a76:	2300      	movs	r3, #0
   21a78:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   21a7c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21a80:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   21a84:	b9bb      	cbnz	r3, 21ab6 <nrfx_twim_2_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   21a86:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   21a88:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   21a8c:	2302      	movs	r3, #2
   21a8e:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   21a90:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   21a92:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21a96:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   21a9a:	b11b      	cbz	r3, 21aa4 <nrfx_twim_2_irq_handler+0x3c>
    return p_reg->SHORTS;
   21a9c:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   21aa0:	059e      	lsls	r6, r3, #22
   21aa2:	d403      	bmi.n	21aac <nrfx_twim_2_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21aa4:	2201      	movs	r2, #1
   21aa6:	4b4b      	ldr	r3, [pc, #300]	; (21bd4 <nrfx_twim_2_irq_handler+0x16c>)
   21aa8:	621a      	str	r2, [r3, #32]
   21aaa:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   21aac:	2301      	movs	r3, #1
   21aae:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   21ab2:	b007      	add	sp, #28
   21ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21ab6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   21aba:	2b00      	cmp	r3, #0
   21abc:	d05a      	beq.n	21b74 <nrfx_twim_2_irq_handler+0x10c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21abe:	2300      	movs	r3, #0
   21ac0:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   21ac4:	6a27      	ldr	r7, [r4, #32]
   21ac6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   21aca:	067d      	lsls	r5, r7, #25
   21acc:	d40a      	bmi.n	21ae4 <nrfx_twim_2_irq_handler+0x7c>
   21ace:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   21ad2:	b93b      	cbnz	r3, 21ae4 <nrfx_twim_2_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   21ad4:	4940      	ldr	r1, [pc, #256]	; (21bd8 <nrfx_twim_2_irq_handler+0x170>)
   21ad6:	483f      	ldr	r0, [pc, #252]	; (21bd4 <nrfx_twim_2_irq_handler+0x16c>)
   21ad8:	f005 fc5c 	bl	27394 <xfer_completeness_check>
   21adc:	f080 0001 	eor.w	r0, r0, #1
   21ae0:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   21ae4:	f017 0704 	ands.w	r7, r7, #4
            if (!p_cb->repeated || p_cb->error)
   21ae8:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   21aec:	d120      	bne.n	21b30 <nrfx_twim_2_irq_handler+0xc8>
            event.xfer_desc = p_cb->xfer_desc;
   21aee:	4e3b      	ldr	r6, [pc, #236]	; (21bdc <nrfx_twim_2_irq_handler+0x174>)
   21af0:	ad01      	add	r5, sp, #4
   21af2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   21af6:	6833      	ldr	r3, [r6, #0]
   21af8:	602b      	str	r3, [r5, #0]
   21afa:	4b36      	ldr	r3, [pc, #216]	; (21bd4 <nrfx_twim_2_irq_handler+0x16c>)
   21afc:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   21b00:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   21b04:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   21b08:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   21b0c:	f1bc 0f00 	cmp.w	ip, #0
   21b10:	d002      	beq.n	21b18 <nrfx_twim_2_irq_handler+0xb0>
   21b12:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   21b16:	b15a      	cbz	r2, 21b30 <nrfx_twim_2_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   21b18:	2200      	movs	r2, #0
   21b1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   21b1e:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   21b20:	4a2f      	ldr	r2, [pc, #188]	; (21be0 <nrfx_twim_2_irq_handler+0x178>)
   21b22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   21b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21b2a:	4b2e      	ldr	r3, [pc, #184]	; (21be4 <nrfx_twim_2_irq_handler+0x17c>)
   21b2c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   21b30:	4a28      	ldr	r2, [pc, #160]	; (21bd4 <nrfx_twim_2_irq_handler+0x16c>)
   21b32:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   21b36:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   21b38:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   21b3c:	d443      	bmi.n	21bc6 <nrfx_twim_2_irq_handler+0x15e>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   21b3e:	0759      	lsls	r1, r3, #29
   21b40:	d443      	bmi.n	21bca <nrfx_twim_2_irq_handler+0x162>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   21b42:	07da      	lsls	r2, r3, #31
   21b44:	d443      	bmi.n	21bce <nrfx_twim_2_irq_handler+0x166>
    else if (p_cb->error)
   21b46:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   21b4a:	009b      	lsls	r3, r3, #2
   21b4c:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   21b4e:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   21b52:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   21b56:	b90b      	cbnz	r3, 21b5c <nrfx_twim_2_irq_handler+0xf4>
        p_cb->busy = false;
   21b58:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   21b5c:	6a23      	ldr	r3, [r4, #32]
   21b5e:	075b      	lsls	r3, r3, #29
   21b60:	d503      	bpl.n	21b6a <nrfx_twim_2_irq_handler+0x102>
   21b62:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   21b66:	2b00      	cmp	r3, #0
   21b68:	d0a3      	beq.n	21ab2 <nrfx_twim_2_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
   21b6a:	e9d4 3100 	ldrd	r3, r1, [r4]
   21b6e:	4668      	mov	r0, sp
   21b70:	4798      	blx	r3
}
   21b72:	e79e      	b.n	21ab2 <nrfx_twim_2_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21b74:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   21b78:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   21b7c:	7b23      	ldrb	r3, [r4, #12]
   21b7e:	b983      	cbnz	r3, 21ba2 <nrfx_twim_2_irq_handler+0x13a>
            event.xfer_desc = p_cb->xfer_desc;
   21b80:	4f16      	ldr	r7, [pc, #88]	; (21bdc <nrfx_twim_2_irq_handler+0x174>)
   21b82:	ae01      	add	r6, sp, #4
   21b84:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   21b86:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   21b88:	683b      	ldr	r3, [r7, #0]
   21b8a:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   21b8c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   21b90:	2b00      	cmp	r3, #0
   21b92:	d1cd      	bne.n	21b30 <nrfx_twim_2_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   21b94:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   21b98:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   21b9a:	4b11      	ldr	r3, [pc, #68]	; (21be0 <nrfx_twim_2_irq_handler+0x178>)
   21b9c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   21ba0:	e7c1      	b.n	21b26 <nrfx_twim_2_irq_handler+0xbe>
    p_reg->SHORTS = mask;
   21ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
   21ba6:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   21baa:	f240 2302 	movw	r3, #514	; 0x202
   21bae:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   21bb0:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   21bb4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   21bb8:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   21bba:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21bbe:	2301      	movs	r3, #1
   21bc0:	60ab      	str	r3, [r5, #8]
   21bc2:	622b      	str	r3, [r5, #32]
            return;
   21bc4:	e775      	b.n	21ab2 <nrfx_twim_2_irq_handler+0x4a>
   21bc6:	2301      	movs	r3, #1
   21bc8:	e7c1      	b.n	21b4e <nrfx_twim_2_irq_handler+0xe6>
   21bca:	2302      	movs	r3, #2
   21bcc:	e7bf      	b.n	21b4e <nrfx_twim_2_irq_handler+0xe6>
   21bce:	2303      	movs	r3, #3
   21bd0:	e7bd      	b.n	21b4e <nrfx_twim_2_irq_handler+0xe6>
   21bd2:	bf00      	nop
   21bd4:	4000a000 	.word	0x4000a000
   21bd8:	2000d4a0 	.word	0x2000d4a0
   21bdc:	2000d4ac 	.word	0x2000d4ac
   21be0:	019c0202 	.word	0x019c0202
   21be4:	e000e100 	.word	0xe000e100

00021be8 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   21be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21bec:	2501      	movs	r5, #1
    reg->PIN_CNF[pin_number] = cnf;
   21bee:	f240 630d 	movw	r3, #1549	; 0x60d
    p_reg->OUTSET = set_mask;
   21bf2:	4c1b      	ldr	r4, [pc, #108]	; (21c60 <nrfx_twi_twim_bus_recover+0x78>)
    *p_pin = pin_number & 0x1F;
   21bf4:	f001 061f 	and.w	r6, r1, #31
   21bf8:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21bfc:	fa05 f800 	lsl.w	r8, r5, r0
    reg->PIN_CNF[pin_number] = cnf;
   21c00:	f106 0280 	add.w	r2, r6, #128	; 0x80
   21c04:	3080      	adds	r0, #128	; 0x80
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21c06:	40b5      	lsls	r5, r6
    p_reg->OUTSET = set_mask;
   21c08:	f8c4 8008 	str.w	r8, [r4, #8]
   21c0c:	60a5      	str	r5, [r4, #8]
    reg->PIN_CNF[pin_number] = cnf;
   21c0e:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   21c12:	2004      	movs	r0, #4
   21c14:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
   21c18:	f005 fbac 	bl	27374 <nrfx_busy_wait>
   21c1c:	2709      	movs	r7, #9
    return p_reg->IN;
   21c1e:	6923      	ldr	r3, [r4, #16]

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   21c20:	421d      	tst	r5, r3
   21c22:	d10d      	bne.n	21c40 <nrfx_twi_twim_bus_recover+0x58>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   21c24:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   21c26:	f8c4 800c 	str.w	r8, [r4, #12]
   21c2a:	f005 fba3 	bl	27374 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   21c2e:	3f01      	subs	r7, #1
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   21c30:	2004      	movs	r0, #4
    p_reg->OUTSET = set_mask;
   21c32:	f8c4 8008 	str.w	r8, [r4, #8]
   21c36:	f005 fb9d 	bl	27374 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   21c3a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   21c3e:	d1ee      	bne.n	21c1e <nrfx_twi_twim_bus_recover+0x36>
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   21c40:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   21c42:	60e5      	str	r5, [r4, #12]
   21c44:	f005 fb96 	bl	27374 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   21c48:	2004      	movs	r0, #4
    p_reg->OUTSET = set_mask;
   21c4a:	60a5      	str	r5, [r4, #8]
   21c4c:	f005 fb92 	bl	27374 <nrfx_busy_wait>
    return p_reg->IN;
   21c50:	6923      	ldr	r3, [r4, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   21c52:	4804      	ldr	r0, [pc, #16]	; (21c64 <nrfx_twi_twim_bus_recover+0x7c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   21c54:	40f3      	lsrs	r3, r6
   21c56:	f003 0301 	and.w	r3, r3, #1
   21c5a:	1ac0      	subs	r0, r0, r3
   21c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21c60:	40842500 	.word	0x40842500
   21c64:	0bad0001 	.word	0x0bad0001

00021c68 <rpc_handle_data_message>:
   21c68:	b570      	push	{r4, r5, r6, lr}
   21c6a:	6803      	ldr	r3, [r0, #0]
   21c6c:	4604      	mov	r4, r0
   21c6e:	b2db      	uxtb	r3, r3
   21c70:	2b04      	cmp	r3, #4
   21c72:	d009      	beq.n	21c88 <rpc_handle_data_message+0x20>
   21c74:	2b03      	cmp	r3, #3
   21c76:	d015      	beq.n	21ca4 <rpc_handle_data_message+0x3c>
   21c78:	2b06      	cmp	r3, #6
   21c7a:	d015      	beq.n	21ca8 <rpc_handle_data_message+0x40>
   21c7c:	2b07      	cmp	r3, #7
   21c7e:	d015      	beq.n	21cac <rpc_handle_data_message+0x44>
   21c80:	6880      	ldr	r0, [r0, #8]
   21c82:	b9a8      	cbnz	r0, 21cb0 <rpc_handle_data_message+0x48>
   21c84:	2000      	movs	r0, #0
   21c86:	bd70      	pop	{r4, r5, r6, pc}
   21c88:	2300      	movs	r3, #0
   21c8a:	4a0b      	ldr	r2, [pc, #44]	; (21cb8 <rpc_handle_data_message+0x50>)
   21c8c:	4620      	mov	r0, r4
   21c8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   21c92:	685d      	ldr	r5, [r3, #4]
   21c94:	f005 fc01 	bl	2749a <rpc_client_msg_from_rpc_msg_get>
   21c98:	6821      	ldr	r1, [r4, #0]
   21c9a:	462b      	mov	r3, r5
   21c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21ca0:	0c09      	lsrs	r1, r1, #16
   21ca2:	4718      	bx	r3
   21ca4:	2301      	movs	r3, #1
   21ca6:	e7f0      	b.n	21c8a <rpc_handle_data_message+0x22>
   21ca8:	2302      	movs	r3, #2
   21caa:	e7ee      	b.n	21c8a <rpc_handle_data_message+0x22>
   21cac:	2303      	movs	r3, #3
   21cae:	e7ec      	b.n	21c8a <rpc_handle_data_message+0x22>
   21cb0:	f000 f81c 	bl	21cec <rpc_transport_msg_data_rx_free>
   21cb4:	e7e6      	b.n	21c84 <rpc_handle_data_message+0x1c>
   21cb6:	bf00      	nop
   21cb8:	00029488 	.word	0x00029488

00021cbc <rpc_transport_init>:
   21cbc:	4b01      	ldr	r3, [pc, #4]	; (21cc4 <rpc_transport_init+0x8>)
   21cbe:	699b      	ldr	r3, [r3, #24]
   21cc0:	4718      	bx	r3
   21cc2:	bf00      	nop
   21cc4:	2000c6d4 	.word	0x2000c6d4

00021cc8 <rpc_transport_msg_alloc>:
   21cc8:	4b01      	ldr	r3, [pc, #4]	; (21cd0 <rpc_transport_msg_alloc+0x8>)
   21cca:	681b      	ldr	r3, [r3, #0]
   21ccc:	4718      	bx	r3
   21cce:	bf00      	nop
   21cd0:	2000c6d4 	.word	0x2000c6d4

00021cd4 <rpc_transport_msg_data_tx_size>:
   21cd4:	4b01      	ldr	r3, [pc, #4]	; (21cdc <rpc_transport_msg_data_tx_size+0x8>)
   21cd6:	685b      	ldr	r3, [r3, #4]
   21cd8:	4718      	bx	r3
   21cda:	bf00      	nop
   21cdc:	2000c6d4 	.word	0x2000c6d4

00021ce0 <rpc_transport_msg_rx_free>:
   21ce0:	4b01      	ldr	r3, [pc, #4]	; (21ce8 <rpc_transport_msg_rx_free+0x8>)
   21ce2:	68db      	ldr	r3, [r3, #12]
   21ce4:	4718      	bx	r3
   21ce6:	bf00      	nop
   21ce8:	2000c6d4 	.word	0x2000c6d4

00021cec <rpc_transport_msg_data_rx_free>:
   21cec:	4b01      	ldr	r3, [pc, #4]	; (21cf4 <rpc_transport_msg_data_rx_free+0x8>)
   21cee:	695b      	ldr	r3, [r3, #20]
   21cf0:	4718      	bx	r3
   21cf2:	bf00      	nop
   21cf4:	2000c6d4 	.word	0x2000c6d4

00021cf8 <rpc_transport_msg_send>:
   21cf8:	4b01      	ldr	r3, [pc, #4]	; (21d00 <rpc_transport_msg_send+0x8>)
   21cfa:	689b      	ldr	r3, [r3, #8]
   21cfc:	4718      	bx	r3
   21cfe:	bf00      	nop
   21d00:	2000c6d4 	.word	0x2000c6d4

00021d04 <rpc_transport_data_rx_suspend>:
   21d04:	4b01      	ldr	r3, [pc, #4]	; (21d0c <rpc_transport_data_rx_suspend+0x8>)
   21d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21d08:	4718      	bx	r3
   21d0a:	bf00      	nop
   21d0c:	2000c6d4 	.word	0x2000c6d4

00021d10 <rpc_transport_data_rx_resume>:
   21d10:	4b01      	ldr	r3, [pc, #4]	; (21d18 <rpc_transport_data_rx_resume+0x8>)
   21d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21d14:	4718      	bx	r3
   21d16:	bf00      	nop
   21d18:	2000c6d4 	.word	0x2000c6d4

00021d1c <rpc_transport_ipc_msg_data_tx_size>:
   21d1c:	4b01      	ldr	r3, [pc, #4]	; (21d24 <rpc_transport_ipc_msg_data_tx_size+0x8>)
   21d1e:	681b      	ldr	r3, [r3, #0]
   21d20:	68d8      	ldr	r0, [r3, #12]
   21d22:	4770      	bx	lr
   21d24:	2000d4d4 	.word	0x2000d4d4

00021d28 <rpc_transport_ipc_msg_rx_free>:
   21d28:	2300      	movs	r3, #0
   21d2a:	b530      	push	{r4, r5, lr}
   21d2c:	4910      	ldr	r1, [pc, #64]	; (21d70 <rpc_transport_ipc_msg_rx_free+0x48>)
   21d2e:	680a      	ldr	r2, [r1, #0]
   21d30:	6814      	ldr	r4, [r2, #0]
   21d32:	42a3      	cmp	r3, r4
   21d34:	d10b      	bne.n	21d4e <rpc_transport_ipc_msg_rx_free+0x26>
   21d36:	2300      	movs	r3, #0
   21d38:	684a      	ldr	r2, [r1, #4]
   21d3a:	6811      	ldr	r1, [r2, #0]
   21d3c:	428b      	cmp	r3, r1
   21d3e:	d015      	beq.n	21d6c <rpc_transport_ipc_msg_rx_free+0x44>
   21d40:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   21d44:	68a4      	ldr	r4, [r4, #8]
   21d46:	42a0      	cmp	r0, r4
   21d48:	d008      	beq.n	21d5c <rpc_transport_ipc_msg_rx_free+0x34>
   21d4a:	3301      	adds	r3, #1
   21d4c:	e7f6      	b.n	21d3c <rpc_transport_ipc_msg_rx_free+0x14>
   21d4e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   21d52:	68ad      	ldr	r5, [r5, #8]
   21d54:	42a8      	cmp	r0, r5
   21d56:	d001      	beq.n	21d5c <rpc_transport_ipc_msg_rx_free+0x34>
   21d58:	3301      	adds	r3, #1
   21d5a:	e7ea      	b.n	21d32 <rpc_transport_ipc_msg_rx_free+0xa>
   21d5c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   21d60:	6853      	ldr	r3, [r2, #4]
   21d62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   21d66:	f043 0303 	orr.w	r3, r3, #3
   21d6a:	6053      	str	r3, [r2, #4]
   21d6c:	bd30      	pop	{r4, r5, pc}
   21d6e:	bf00      	nop
   21d70:	2000d4f4 	.word	0x2000d4f4

00021d74 <rpc_transport_ipc_msg_tx_free>:
   21d74:	2200      	movs	r2, #0
   21d76:	b530      	push	{r4, r5, lr}
   21d78:	4b0b      	ldr	r3, [pc, #44]	; (21da8 <rpc_transport_ipc_msg_tx_free+0x34>)
   21d7a:	6819      	ldr	r1, [r3, #0]
   21d7c:	680c      	ldr	r4, [r1, #0]
   21d7e:	4294      	cmp	r4, r2
   21d80:	d00f      	beq.n	21da2 <rpc_transport_ipc_msg_tx_free+0x2e>
   21d82:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   21d86:	689d      	ldr	r5, [r3, #8]
   21d88:	42a8      	cmp	r0, r5
   21d8a:	d10b      	bne.n	21da4 <rpc_transport_ipc_msg_tx_free+0x30>
   21d8c:	f04f 0203 	mov.w	r2, #3
   21d90:	3304      	adds	r3, #4
   21d92:	e8d3 1fcf 	ldaexb	r1, [r3]
   21d96:	2900      	cmp	r1, #0
   21d98:	d103      	bne.n	21da2 <rpc_transport_ipc_msg_tx_free+0x2e>
   21d9a:	e8c3 2fc0 	stlexb	r0, r2, [r3]
   21d9e:	2800      	cmp	r0, #0
   21da0:	d1f7      	bne.n	21d92 <rpc_transport_ipc_msg_tx_free+0x1e>
   21da2:	bd30      	pop	{r4, r5, pc}
   21da4:	3201      	adds	r2, #1
   21da6:	e7ea      	b.n	21d7e <rpc_transport_ipc_msg_tx_free+0xa>
   21da8:	2000d4ec 	.word	0x2000d4ec

00021dac <handle_modem_rpc_msg>:
   21dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21db0:	2500      	movs	r5, #0
   21db2:	4606      	mov	r6, r0
   21db4:	460f      	mov	r7, r1
   21db6:	4628      	mov	r0, r5
   21db8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 21e20 <handle_modem_rpc_msg+0x74>
   21dbc:	6833      	ldr	r3, [r6, #0]
   21dbe:	42ab      	cmp	r3, r5
   21dc0:	d801      	bhi.n	21dc6 <handle_modem_rpc_msg+0x1a>
   21dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21dc6:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   21dca:	6863      	ldr	r3, [r4, #4]
   21dcc:	b2db      	uxtb	r3, r3
   21dce:	2b01      	cmp	r3, #1
   21dd0:	d117      	bne.n	21e02 <handle_modem_rpc_msg+0x56>
   21dd2:	6862      	ldr	r2, [r4, #4]
   21dd4:	f8b8 3000 	ldrh.w	r3, [r8]
   21dd8:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   21ddc:	d111      	bne.n	21e02 <handle_modem_rpc_msg+0x56>
   21dde:	2f02      	cmp	r7, #2
   21de0:	68a0      	ldr	r0, [r4, #8]
   21de2:	d110      	bne.n	21e06 <handle_modem_rpc_msg+0x5a>
   21de4:	f7ff ff40 	bl	21c68 <rpc_handle_data_message>
   21de8:	b990      	cbnz	r0, 21e10 <handle_modem_rpc_msg+0x64>
   21dea:	6863      	ldr	r3, [r4, #4]
   21dec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   21df0:	f043 0303 	orr.w	r3, r3, #3
   21df4:	6063      	str	r3, [r4, #4]
   21df6:	2001      	movs	r0, #1
   21df8:	f8b8 3000 	ldrh.w	r3, [r8]
   21dfc:	3301      	adds	r3, #1
   21dfe:	f8a8 3000 	strh.w	r3, [r8]
   21e02:	3501      	adds	r5, #1
   21e04:	e7da      	b.n	21dbc <handle_modem_rpc_msg+0x10>
   21e06:	6801      	ldr	r1, [r0, #0]
   21e08:	0c09      	lsrs	r1, r1, #16
   21e0a:	f005 faf3 	bl	273f4 <rpc_handle_ctrl_message>
   21e0e:	e7eb      	b.n	21de8 <handle_modem_rpc_msg+0x3c>
   21e10:	2801      	cmp	r0, #1
   21e12:	d1f0      	bne.n	21df6 <handle_modem_rpc_msg+0x4a>
   21e14:	6863      	ldr	r3, [r4, #4]
   21e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   21e1a:	f043 0302 	orr.w	r3, r3, #2
   21e1e:	e7e9      	b.n	21df4 <handle_modem_rpc_msg+0x48>
   21e20:	2000d8fc 	.word	0x2000d8fc

00021e24 <rpc_message_handler>:
   21e24:	b538      	push	{r3, r4, r5, lr}
   21e26:	4d07      	ldr	r5, [pc, #28]	; (21e44 <rpc_message_handler+0x20>)
   21e28:	2101      	movs	r1, #1
   21e2a:	6828      	ldr	r0, [r5, #0]
   21e2c:	f7ff ffbe 	bl	21dac <handle_modem_rpc_msg>
   21e30:	2102      	movs	r1, #2
   21e32:	4604      	mov	r4, r0
   21e34:	6868      	ldr	r0, [r5, #4]
   21e36:	f7ff ffb9 	bl	21dac <handle_modem_rpc_msg>
   21e3a:	2800      	cmp	r0, #0
   21e3c:	d1f4      	bne.n	21e28 <rpc_message_handler+0x4>
   21e3e:	2c00      	cmp	r4, #0
   21e40:	d1f2      	bne.n	21e28 <rpc_message_handler+0x4>
   21e42:	bd38      	pop	{r3, r4, r5, pc}
   21e44:	2000d4f4 	.word	0x2000d4f4

00021e48 <ipc_irq_handler>:
   21e48:	b570      	push	{r4, r5, r6, lr}
   21e4a:	2807      	cmp	r0, #7
   21e4c:	d868      	bhi.n	21f20 <ipc_irq_handler+0xd8>
   21e4e:	e8df f000 	tbb	[pc, r0]
   21e52:	670b      	.short	0x670b
   21e54:	674b674f 	.word	0x674b674f
   21e58:	0440      	.short	0x0440
   21e5a:	f001 fced 	bl	23838 <ipc_trace_handler>
   21e5e:	2003      	movs	r0, #3
   21e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21e64:	f7fc b864 	b.w	1df30 <nrf_modem_os_event_notify>
   21e68:	2003      	movs	r0, #3
   21e6a:	4b2e      	ldr	r3, [pc, #184]	; (21f24 <ipc_irq_handler+0xdc>)
   21e6c:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
   21e70:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
   21e74:	4b2c      	ldr	r3, [pc, #176]	; (21f28 <ipc_irq_handler+0xe0>)
   21e76:	781d      	ldrb	r5, [r3, #0]
   21e78:	7018      	strb	r0, [r3, #0]
   21e7a:	f001 fcb3 	bl	237e4 <nrf_modem_state_set>
   21e7e:	4b2b      	ldr	r3, [pc, #172]	; (21f2c <ipc_irq_handler+0xe4>)
   21e80:	b2ed      	uxtb	r5, r5
   21e82:	6818      	ldr	r0, [r3, #0]
   21e84:	f004 fe9d 	bl	26bc2 <nrf_modem_os_sem_give>
   21e88:	2d01      	cmp	r5, #1
   21e8a:	d11c      	bne.n	21ec6 <ipc_irq_handler+0x7e>
   21e8c:	4b28      	ldr	r3, [pc, #160]	; (21f30 <ipc_irq_handler+0xe8>)
   21e8e:	429c      	cmp	r4, r3
   21e90:	d010      	beq.n	21eb4 <ipc_irq_handler+0x6c>
   21e92:	d809      	bhi.n	21ea8 <ipc_irq_handler+0x60>
   21e94:	3b02      	subs	r3, #2
   21e96:	429c      	cmp	r4, r3
   21e98:	d00f      	beq.n	21eba <ipc_irq_handler+0x72>
   21e9a:	3301      	adds	r3, #1
   21e9c:	429c      	cmp	r4, r3
   21e9e:	d00f      	beq.n	21ec0 <ipc_irq_handler+0x78>
   21ea0:	4b24      	ldr	r3, [pc, #144]	; (21f34 <ipc_irq_handler+0xec>)
   21ea2:	601c      	str	r4, [r3, #0]
   21ea4:	2000      	movs	r0, #0
   21ea6:	e7db      	b.n	21e60 <ipc_irq_handler+0x18>
   21ea8:	4b23      	ldr	r3, [pc, #140]	; (21f38 <ipc_irq_handler+0xf0>)
   21eaa:	429c      	cmp	r4, r3
   21eac:	d1f8      	bne.n	21ea0 <ipc_irq_handler+0x58>
   21eae:	f06f 040c 	mvn.w	r4, #12
   21eb2:	e7f5      	b.n	21ea0 <ipc_irq_handler+0x58>
   21eb4:	f06f 040b 	mvn.w	r4, #11
   21eb8:	e7f2      	b.n	21ea0 <ipc_irq_handler+0x58>
   21eba:	f06f 0415 	mvn.w	r4, #21
   21ebe:	e7ef      	b.n	21ea0 <ipc_irq_handler+0x58>
   21ec0:	f06f 0485 	mvn.w	r4, #133	; 0x85
   21ec4:	e7ec      	b.n	21ea0 <ipc_irq_handler+0x58>
   21ec6:	4631      	mov	r1, r6
   21ec8:	f3c4 000b 	ubfx	r0, r4, #0, #12
   21ecc:	f001 fc7e 	bl	237cc <nrf_modem_fault_handler_internal>
   21ed0:	e7e8      	b.n	21ea4 <ipc_irq_handler+0x5c>
   21ed2:	2202      	movs	r2, #2
   21ed4:	4b14      	ldr	r3, [pc, #80]	; (21f28 <ipc_irq_handler+0xe0>)
   21ed6:	2000      	movs	r0, #0
   21ed8:	701a      	strb	r2, [r3, #0]
   21eda:	f001 fc83 	bl	237e4 <nrf_modem_state_set>
   21ede:	4b13      	ldr	r3, [pc, #76]	; (21f2c <ipc_irq_handler+0xe4>)
   21ee0:	6818      	ldr	r0, [r3, #0]
   21ee2:	f004 fe6e 	bl	26bc2 <nrf_modem_os_sem_give>
   21ee6:	e7dd      	b.n	21ea4 <ipc_irq_handler+0x5c>
   21ee8:	f7ff ff9c 	bl	21e24 <rpc_message_handler>
   21eec:	2002      	movs	r0, #2
   21eee:	e7b7      	b.n	21e60 <ipc_irq_handler+0x18>
   21ef0:	4b0d      	ldr	r3, [pc, #52]	; (21f28 <ipc_irq_handler+0xe0>)
   21ef2:	781a      	ldrb	r2, [r3, #0]
   21ef4:	2a01      	cmp	r2, #1
   21ef6:	b2d0      	uxtb	r0, r2
   21ef8:	d10e      	bne.n	21f18 <ipc_irq_handler+0xd0>
   21efa:	4a10      	ldr	r2, [pc, #64]	; (21f3c <ipc_irq_handler+0xf4>)
   21efc:	6811      	ldr	r1, [r2, #0]
   21efe:	4a10      	ldr	r2, [pc, #64]	; (21f40 <ipc_irq_handler+0xf8>)
   21f00:	688c      	ldr	r4, [r1, #8]
   21f02:	6054      	str	r4, [r2, #4]
   21f04:	6849      	ldr	r1, [r1, #4]
   21f06:	6011      	str	r1, [r2, #0]
   21f08:	2200      	movs	r2, #0
   21f0a:	701a      	strb	r2, [r3, #0]
   21f0c:	f001 fc6a 	bl	237e4 <nrf_modem_state_set>
   21f10:	4b06      	ldr	r3, [pc, #24]	; (21f2c <ipc_irq_handler+0xe4>)
   21f12:	6818      	ldr	r0, [r3, #0]
   21f14:	f004 fe55 	bl	26bc2 <nrf_modem_os_sem_give>
   21f18:	f7ff ff84 	bl	21e24 <rpc_message_handler>
   21f1c:	2001      	movs	r0, #1
   21f1e:	e79f      	b.n	21e60 <ipc_irq_handler+0x18>
   21f20:	bd70      	pop	{r4, r5, r6, pc}
   21f22:	bf00      	nop
   21f24:	4002a000 	.word	0x4002a000
   21f28:	2000de4f 	.word	0x2000de4f
   21f2c:	2000d4dc 	.word	0x2000d4dc
   21f30:	00010022 	.word	0x00010022
   21f34:	2000d4f0 	.word	0x2000d4f0
   21f38:	00013032 	.word	0x00013032
   21f3c:	2000d4d8 	.word	0x2000d4d8
   21f40:	2000d4f4 	.word	0x2000d4f4

00021f44 <rpc_transport_ipc_data_msg_send>:
   21f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f46:	4b16      	ldr	r3, [pc, #88]	; (21fa0 <rpc_transport_ipc_data_msg_send+0x5c>)
   21f48:	6842      	ldr	r2, [r0, #4]
   21f4a:	681b      	ldr	r3, [r3, #0]
   21f4c:	4c15      	ldr	r4, [pc, #84]	; (21fa4 <rpc_transport_ipc_data_msg_send+0x60>)
   21f4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   21f52:	f042 0202 	orr.w	r2, r2, #2
   21f56:	1ac3      	subs	r3, r0, r3
   21f58:	6042      	str	r2, [r0, #4]
   21f5a:	6821      	ldr	r1, [r4, #0]
   21f5c:	4a12      	ldr	r2, [pc, #72]	; (21fa8 <rpc_transport_ipc_data_msg_send+0x64>)
   21f5e:	f3c3 1389 	ubfx	r3, r3, #6, #10
   21f62:	e8d2 5fdf 	ldaexh	r5, [r2]
   21f66:	1c6e      	adds	r6, r5, #1
   21f68:	e8c2 6fd7 	stlexh	r7, r6, [r2]
   21f6c:	2f00      	cmp	r7, #0
   21f6e:	d1f8      	bne.n	21f62 <rpc_transport_ipc_data_msg_send+0x1e>
   21f70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   21f74:	684a      	ldr	r2, [r1, #4]
   21f76:	b292      	uxth	r2, r2
   21f78:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   21f7c:	604a      	str	r2, [r1, #4]
   21f7e:	6822      	ldr	r2, [r4, #0]
   21f80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   21f84:	6098      	str	r0, [r3, #8]
   21f86:	685a      	ldr	r2, [r3, #4]
   21f88:	2003      	movs	r0, #3
   21f8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   21f8e:	f042 0201 	orr.w	r2, r2, #1
   21f92:	605a      	str	r2, [r3, #4]
   21f94:	f004 fe0b 	bl	26bae <nrf_modem_os_busywait>
   21f98:	2201      	movs	r2, #1
   21f9a:	4b04      	ldr	r3, [pc, #16]	; (21fac <rpc_transport_ipc_data_msg_send+0x68>)
   21f9c:	60da      	str	r2, [r3, #12]
   21f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21fa0:	2000d4e4 	.word	0x2000d4e4
   21fa4:	2000d4ec 	.word	0x2000d4ec
   21fa8:	2000d8fe 	.word	0x2000d8fe
   21fac:	4002a000 	.word	0x4002a000

00021fb0 <rpc_transport_ipc_ctrl_msg_alloc>:
   21fb0:	230a      	movs	r3, #10
   21fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21fb4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   21fb8:	4e0c      	ldr	r6, [pc, #48]	; (21fec <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   21fba:	4f0d      	ldr	r7, [pc, #52]	; (21ff0 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   21fbc:	9301      	str	r3, [sp, #4]
   21fbe:	6831      	ldr	r1, [r6, #0]
   21fc0:	6838      	ldr	r0, [r7, #0]
   21fc2:	f005 fa49 	bl	27458 <rpc_transport_ipc_msg_alloc>
   21fc6:	4604      	mov	r4, r0
   21fc8:	b940      	cbnz	r0, 21fdc <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
   21fca:	f004 fdf8 	bl	26bbe <nrf_modem_os_is_in_isr>
   21fce:	b940      	cbnz	r0, 21fe2 <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   21fd0:	2001      	movs	r0, #1
   21fd2:	a901      	add	r1, sp, #4
   21fd4:	f7fb fece 	bl	1dd74 <nrf_modem_os_timedwait>
   21fd8:	306e      	adds	r0, #110	; 0x6e
   21fda:	d1f0      	bne.n	21fbe <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   21fdc:	4620      	mov	r0, r4
   21fde:	b003      	add	sp, #12
   21fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21fe2:	9801      	ldr	r0, [sp, #4]
   21fe4:	4368      	muls	r0, r5
   21fe6:	f004 fde2 	bl	26bae <nrf_modem_os_busywait>
   21fea:	e7e8      	b.n	21fbe <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   21fec:	2000d4e0 	.word	0x2000d4e0
   21ff0:	2000d4e8 	.word	0x2000d4e8

00021ff4 <rpc_transport_ipc_data_msg_alloc>:
   21ff4:	4b05      	ldr	r3, [pc, #20]	; (2200c <rpc_transport_ipc_data_msg_alloc+0x18>)
   21ff6:	781b      	ldrb	r3, [r3, #0]
   21ff8:	b92b      	cbnz	r3, 22006 <rpc_transport_ipc_data_msg_alloc+0x12>
   21ffa:	4b05      	ldr	r3, [pc, #20]	; (22010 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   21ffc:	6819      	ldr	r1, [r3, #0]
   21ffe:	4b05      	ldr	r3, [pc, #20]	; (22014 <rpc_transport_ipc_data_msg_alloc+0x20>)
   22000:	6818      	ldr	r0, [r3, #0]
   22002:	f005 ba29 	b.w	27458 <rpc_transport_ipc_msg_alloc>
   22006:	2000      	movs	r0, #0
   22008:	4770      	bx	lr
   2200a:	bf00      	nop
   2200c:	2000de4e 	.word	0x2000de4e
   22010:	2000d4e4 	.word	0x2000d4e4
   22014:	2000d4ec 	.word	0x2000d4ec

00022018 <rpc_transport_ipc_init>:
   22018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2201c:	b095      	sub	sp, #84	; 0x54
   2201e:	2238      	movs	r2, #56	; 0x38
   22020:	2100      	movs	r1, #0
   22022:	4606      	mov	r6, r0
   22024:	a803      	add	r0, sp, #12
   22026:	f006 fc6e 	bl	28906 <memset>
   2202a:	2302      	movs	r3, #2
   2202c:	9304      	str	r3, [sp, #16]
   2202e:	2308      	movs	r3, #8
   22030:	9306      	str	r3, [sp, #24]
   22032:	2320      	movs	r3, #32
   22034:	9308      	str	r3, [sp, #32]
   22036:	2304      	movs	r3, #4
   22038:	930d      	str	r3, [sp, #52]	; 0x34
   2203a:	2310      	movs	r3, #16
   2203c:	2540      	movs	r5, #64	; 0x40
   2203e:	930f      	str	r3, [sp, #60]	; 0x3c
   22040:	2380      	movs	r3, #128	; 0x80
   22042:	2201      	movs	r2, #1
   22044:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
   22048:	23d5      	movs	r3, #213	; 0xd5
   2204a:	2100      	movs	r1, #0
   2204c:	4855      	ldr	r0, [pc, #340]	; (221a4 <rpc_transport_ipc_init+0x18c>)
   2204e:	920b      	str	r2, [sp, #44]	; 0x2c
   22050:	9313      	str	r3, [sp, #76]	; 0x4c
   22052:	f7fb ff51 	bl	1def8 <nrf_modem_os_sem_init>
   22056:	4605      	mov	r5, r0
   22058:	2800      	cmp	r0, #0
   2205a:	f040 809f 	bne.w	2219c <rpc_transport_ipc_init+0x184>
   2205e:	4602      	mov	r2, r0
   22060:	4951      	ldr	r1, [pc, #324]	; (221a8 <rpc_transport_ipc_init+0x190>)
   22062:	7930      	ldrb	r0, [r6, #4]
   22064:	f7ff f8bc 	bl	211e0 <nrfx_ipc_init>
   22068:	a803      	add	r0, sp, #12
   2206a:	f7ff f8d1 	bl	21210 <nrfx_ipc_config_load>
   2206e:	6834      	ldr	r4, [r6, #0]
   22070:	6862      	ldr	r2, [r4, #4]
   22072:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   22076:	f040 8089 	bne.w	2218c <rpc_transport_ipc_init+0x174>
   2207a:	6961      	ldr	r1, [r4, #20]
   2207c:	68e3      	ldr	r3, [r4, #12]
   2207e:	440b      	add	r3, r1
   22080:	69e1      	ldr	r1, [r4, #28]
   22082:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   22086:	440b      	add	r3, r1
   22088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   2208c:	d87e      	bhi.n	2218c <rpc_transport_ipc_init+0x174>
   2208e:	6820      	ldr	r0, [r4, #0]
   22090:	4629      	mov	r1, r5
   22092:	f006 fc38 	bl	28906 <memset>
   22096:	6833      	ldr	r3, [r6, #0]
   22098:	681c      	ldr	r4, [r3, #0]
   2209a:	f8d3 901c 	ldr.w	r9, [r3, #28]
   2209e:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   220a2:	9201      	str	r2, [sp, #4]
   220a4:	f104 0760 	add.w	r7, r4, #96	; 0x60
   220a8:	4a40      	ldr	r2, [pc, #256]	; (221ac <rpc_transport_ipc_init+0x194>)
   220aa:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
   220ae:	f104 0b20 	add.w	fp, r4, #32
   220b2:	f1b9 0f00 	cmp.w	r9, #0
   220b6:	d15c      	bne.n	22172 <rpc_transport_ipc_init+0x15a>
   220b8:	f8c2 b000 	str.w	fp, [r2]
   220bc:	2500      	movs	r5, #0
   220be:	f04f 0a01 	mov.w	sl, #1
   220c2:	7025      	strb	r5, [r4, #0]
   220c4:	7065      	strb	r5, [r4, #1]
   220c6:	f884 a002 	strb.w	sl, [r4, #2]
   220ca:	70e5      	strb	r5, [r4, #3]
   220cc:	6833      	ldr	r3, [r6, #0]
   220ce:	4640      	mov	r0, r8
   220d0:	691b      	ldr	r3, [r3, #16]
   220d2:	6063      	str	r3, [r4, #4]
   220d4:	6833      	ldr	r3, [r6, #0]
   220d6:	695b      	ldr	r3, [r3, #20]
   220d8:	f8c4 b014 	str.w	fp, [r4, #20]
   220dc:	60a3      	str	r3, [r4, #8]
   220de:	4b34      	ldr	r3, [pc, #208]	; (221b0 <rpc_transport_ipc_init+0x198>)
   220e0:	f8c4 9018 	str.w	r9, [r4, #24]
   220e4:	f8c3 8000 	str.w	r8, [r3]
   220e8:	4b32      	ldr	r3, [pc, #200]	; (221b4 <rpc_transport_ipc_init+0x19c>)
   220ea:	60e7      	str	r7, [r4, #12]
   220ec:	601f      	str	r7, [r3, #0]
   220ee:	2308      	movs	r3, #8
   220f0:	f8c4 8010 	str.w	r8, [r4, #16]
   220f4:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
   220f8:	f888 5001 	strb.w	r5, [r8, #1]
   220fc:	f888 5002 	strb.w	r5, [r8, #2]
   22100:	f888 5003 	strb.w	r5, [r8, #3]
   22104:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   22108:	707d      	strb	r5, [r7, #1]
   2210a:	70bd      	strb	r5, [r7, #2]
   2210c:	70fd      	strb	r5, [r7, #3]
   2210e:	f005 f98b 	bl	27428 <rpc_list_preambles_init>
   22112:	4638      	mov	r0, r7
   22114:	f005 f988 	bl	27428 <rpc_list_preambles_init>
   22118:	4b27      	ldr	r3, [pc, #156]	; (221b8 <rpc_transport_ipc_init+0x1a0>)
   2211a:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   2211e:	601a      	str	r2, [r3, #0]
   22120:	4b26      	ldr	r3, [pc, #152]	; (221bc <rpc_transport_ipc_init+0x1a4>)
   22122:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
   22126:	601a      	str	r2, [r3, #0]
   22128:	6831      	ldr	r1, [r6, #0]
   2212a:	4b25      	ldr	r3, [pc, #148]	; (221c0 <rpc_transport_ipc_init+0x1a8>)
   2212c:	6019      	str	r1, [r3, #0]
   2212e:	4b25      	ldr	r3, [pc, #148]	; (221c4 <rpc_transport_ipc_init+0x1ac>)
   22130:	4925      	ldr	r1, [pc, #148]	; (221c8 <rpc_transport_ipc_init+0x1b0>)
   22132:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
   22136:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
   2213a:	4b24      	ldr	r3, [pc, #144]	; (221cc <rpc_transport_ipc_init+0x1b4>)
   2213c:	4c24      	ldr	r4, [pc, #144]	; (221d0 <rpc_transport_ipc_init+0x1b8>)
   2213e:	801d      	strh	r5, [r3, #0]
   22140:	4b24      	ldr	r3, [pc, #144]	; (221d4 <rpc_transport_ipc_init+0x1bc>)
   22142:	6025      	str	r5, [r4, #0]
   22144:	801d      	strh	r5, [r3, #0]
   22146:	4b24      	ldr	r3, [pc, #144]	; (221d8 <rpc_transport_ipc_init+0x1c0>)
   22148:	f883 a000 	strb.w	sl, [r3]
   2214c:	4b23      	ldr	r3, [pc, #140]	; (221dc <rpc_transport_ipc_init+0x1c4>)
   2214e:	9502      	str	r5, [sp, #8]
   22150:	611d      	str	r5, [r3, #16]
   22152:	691b      	ldr	r3, [r3, #16]
   22154:	9302      	str	r3, [sp, #8]
   22156:	9b02      	ldr	r3, [sp, #8]
   22158:	4b12      	ldr	r3, [pc, #72]	; (221a4 <rpc_transport_ipc_init+0x18c>)
   2215a:	6818      	ldr	r0, [r3, #0]
   2215c:	f004 fd33 	bl	26bc6 <nrf_modem_os_sem_take>
   22160:	b9c8      	cbnz	r0, 22196 <rpc_transport_ipc_init+0x17e>
   22162:	6824      	ldr	r4, [r4, #0]
   22164:	b9a4      	cbnz	r4, 22190 <rpc_transport_ipc_init+0x178>
   22166:	4b1e      	ldr	r3, [pc, #120]	; (221e0 <rpc_transport_ipc_init+0x1c8>)
   22168:	701c      	strb	r4, [r3, #0]
   2216a:	4620      	mov	r0, r4
   2216c:	b015      	add	sp, #84	; 0x54
   2216e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22172:	699b      	ldr	r3, [r3, #24]
   22174:	f104 0940 	add.w	r9, r4, #64	; 0x40
   22178:	6463      	str	r3, [r4, #68]	; 0x44
   2217a:	6833      	ldr	r3, [r6, #0]
   2217c:	4648      	mov	r0, r9
   2217e:	69db      	ldr	r3, [r3, #28]
   22180:	f8c2 b000 	str.w	fp, [r2]
   22184:	6423      	str	r3, [r4, #64]	; 0x40
   22186:	f001 fb3b 	bl	23800 <ipc_trace_init>
   2218a:	e797      	b.n	220bc <rpc_transport_ipc_init+0xa4>
   2218c:	f06f 0415 	mvn.w	r4, #21
   22190:	f7ff f85e 	bl	21250 <nrfx_ipc_uninit>
   22194:	e7e9      	b.n	2216a <rpc_transport_ipc_init+0x152>
   22196:	f06f 0473 	mvn.w	r4, #115	; 0x73
   2219a:	e7f9      	b.n	22190 <rpc_transport_ipc_init+0x178>
   2219c:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   221a0:	e7e3      	b.n	2216a <rpc_transport_ipc_init+0x152>
   221a2:	bf00      	nop
   221a4:	2000d4dc 	.word	0x2000d4dc
   221a8:	00021e49 	.word	0x00021e49
   221ac:	2000d4d8 	.word	0x2000d4d8
   221b0:	2000d4ec 	.word	0x2000d4ec
   221b4:	2000d4e8 	.word	0x2000d4e8
   221b8:	2000d4e4 	.word	0x2000d4e4
   221bc:	2000d4e0 	.word	0x2000d4e0
   221c0:	2000d4d4 	.word	0x2000d4d4
   221c4:	4002a000 	.word	0x4002a000
   221c8:	000249f0 	.word	0x000249f0
   221cc:	2000d8fe 	.word	0x2000d8fe
   221d0:	2000d4f0 	.word	0x2000d4f0
   221d4:	2000d8fc 	.word	0x2000d8fc
   221d8:	2000de4f 	.word	0x2000de4f
   221dc:	40005600 	.word	0x40005600
   221e0:	2000de4e 	.word	0x2000de4e

000221e4 <rpc_transport_ipc_ctrl_msg_send>:
   221e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   221e6:	4b16      	ldr	r3, [pc, #88]	; (22240 <rpc_transport_ipc_ctrl_msg_send+0x5c>)
   221e8:	6842      	ldr	r2, [r0, #4]
   221ea:	681b      	ldr	r3, [r3, #0]
   221ec:	4c15      	ldr	r4, [pc, #84]	; (22244 <rpc_transport_ipc_ctrl_msg_send+0x60>)
   221ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   221f2:	f042 0201 	orr.w	r2, r2, #1
   221f6:	1ac3      	subs	r3, r0, r3
   221f8:	6042      	str	r2, [r0, #4]
   221fa:	6821      	ldr	r1, [r4, #0]
   221fc:	4a12      	ldr	r2, [pc, #72]	; (22248 <rpc_transport_ipc_ctrl_msg_send+0x64>)
   221fe:	f3c3 1389 	ubfx	r3, r3, #6, #10
   22202:	e8d2 5fdf 	ldaexh	r5, [r2]
   22206:	1c6e      	adds	r6, r5, #1
   22208:	e8c2 6fd7 	stlexh	r7, r6, [r2]
   2220c:	2f00      	cmp	r7, #0
   2220e:	d1f8      	bne.n	22202 <rpc_transport_ipc_ctrl_msg_send+0x1e>
   22210:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   22214:	684a      	ldr	r2, [r1, #4]
   22216:	b292      	uxth	r2, r2
   22218:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   2221c:	604a      	str	r2, [r1, #4]
   2221e:	6822      	ldr	r2, [r4, #0]
   22220:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   22224:	6098      	str	r0, [r3, #8]
   22226:	685a      	ldr	r2, [r3, #4]
   22228:	2003      	movs	r0, #3
   2222a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2222e:	f042 0201 	orr.w	r2, r2, #1
   22232:	605a      	str	r2, [r3, #4]
   22234:	f004 fcbb 	bl	26bae <nrf_modem_os_busywait>
   22238:	2201      	movs	r2, #1
   2223a:	4b04      	ldr	r3, [pc, #16]	; (2224c <rpc_transport_ipc_ctrl_msg_send+0x68>)
   2223c:	605a      	str	r2, [r3, #4]
   2223e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22240:	2000d4e0 	.word	0x2000d4e0
   22244:	2000d4e8 	.word	0x2000d4e8
   22248:	2000d8fe 	.word	0x2000d8fe
   2224c:	4002a000 	.word	0x4002a000

00022250 <rpc_transport_ipc_request_shutdown>:
   22250:	b510      	push	{r4, lr}
   22252:	f7ff fead 	bl	21fb0 <rpc_transport_ipc_ctrl_msg_alloc>
   22256:	2401      	movs	r4, #1
   22258:	2200      	movs	r2, #0
   2225a:	2103      	movs	r1, #3
   2225c:	7004      	strb	r4, [r0, #0]
   2225e:	7081      	strb	r1, [r0, #2]
   22260:	7042      	strb	r2, [r0, #1]
   22262:	70c2      	strb	r2, [r0, #3]
   22264:	f7ff ffbe 	bl	221e4 <rpc_transport_ipc_ctrl_msg_send>
   22268:	4b05      	ldr	r3, [pc, #20]	; (22280 <rpc_transport_ipc_request_shutdown+0x30>)
   2226a:	701c      	strb	r4, [r3, #0]
   2226c:	f005 f8ef 	bl	2744e <rpc_transport_ipc_data_rx_suspend>
   22270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22274:	4b03      	ldr	r3, [pc, #12]	; (22284 <rpc_transport_ipc_request_shutdown+0x34>)
   22276:	f247 5130 	movw	r1, #30000	; 0x7530
   2227a:	6818      	ldr	r0, [r3, #0]
   2227c:	f004 bca3 	b.w	26bc6 <nrf_modem_os_sem_take>
   22280:	2000de4e 	.word	0x2000de4e
   22284:	2000d4dc 	.word	0x2000d4dc

00022288 <rpc_transport_ipc_msg_data_rx_free>:
   22288:	b510      	push	{r4, lr}
   2228a:	4b0a      	ldr	r3, [pc, #40]	; (222b4 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
   2228c:	4604      	mov	r4, r0
   2228e:	781b      	ldrb	r3, [r3, #0]
   22290:	2b03      	cmp	r3, #3
   22292:	d00e      	beq.n	222b2 <rpc_transport_ipc_msg_data_rx_free+0x2a>
   22294:	f7ff fe8c 	bl	21fb0 <rpc_transport_ipc_ctrl_msg_alloc>
   22298:	b158      	cbz	r0, 222b2 <rpc_transport_ipc_msg_data_rx_free+0x2a>
   2229a:	2101      	movs	r1, #1
   2229c:	2200      	movs	r2, #0
   2229e:	7001      	strb	r1, [r0, #0]
   222a0:	2102      	movs	r1, #2
   222a2:	6084      	str	r4, [r0, #8]
   222a4:	7042      	strb	r2, [r0, #1]
   222a6:	7081      	strb	r1, [r0, #2]
   222a8:	70c2      	strb	r2, [r0, #3]
   222aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   222ae:	f7ff bf99 	b.w	221e4 <rpc_transport_ipc_ctrl_msg_send>
   222b2:	bd10      	pop	{r4, pc}
   222b4:	2000de4f 	.word	0x2000de4f

000222b8 <sock_init>:
   222b8:	f44f 7250 	mov.w	r2, #832	; 0x340
   222bc:	2100      	movs	r1, #0
   222be:	b508      	push	{r3, lr}
   222c0:	4808      	ldr	r0, [pc, #32]	; (222e4 <sock_init+0x2c>)
   222c2:	f006 fb20 	bl	28906 <memset>
   222c6:	2300      	movs	r3, #0
   222c8:	4619      	mov	r1, r3
   222ca:	4a07      	ldr	r2, [pc, #28]	; (222e8 <sock_init+0x30>)
   222cc:	4807      	ldr	r0, [pc, #28]	; (222ec <sock_init+0x34>)
   222ce:	7013      	strb	r3, [r2, #0]
   222d0:	4a04      	ldr	r2, [pc, #16]	; (222e4 <sock_init+0x2c>)
   222d2:	3301      	adds	r3, #1
   222d4:	2b08      	cmp	r3, #8
   222d6:	e9c2 0100 	strd	r0, r1, [r2]
   222da:	6091      	str	r1, [r2, #8]
   222dc:	f102 0268 	add.w	r2, r2, #104	; 0x68
   222e0:	d1f7      	bne.n	222d2 <sock_init+0x1a>
   222e2:	bd08      	pop	{r3, pc}
   222e4:	2000d4fc 	.word	0x2000d4fc
   222e8:	2000de50 	.word	0x2000de50
   222ec:	1badf11e 	.word	0x1badf11e

000222f0 <sock_open>:
   222f0:	b570      	push	{r4, r5, r6, lr}
   222f2:	2300      	movs	r3, #0
   222f4:	2468      	movs	r4, #104	; 0x68
   222f6:	4a0e      	ldr	r2, [pc, #56]	; (22330 <sock_open+0x40>)
   222f8:	4d0e      	ldr	r5, [pc, #56]	; (22334 <sock_open+0x44>)
   222fa:	fb04 f103 	mul.w	r1, r4, r3
   222fe:	5856      	ldr	r6, [r2, r1]
   22300:	1888      	adds	r0, r1, r2
   22302:	42ae      	cmp	r6, r5
   22304:	d10e      	bne.n	22324 <sock_open+0x34>
   22306:	f04f 33ff 	mov.w	r3, #4294967295
   2230a:	5053      	str	r3, [r2, r1]
   2230c:	4a0a      	ldr	r2, [pc, #40]	; (22338 <sock_open+0x48>)
   2230e:	7f03      	ldrb	r3, [r0, #28]
   22310:	7812      	ldrb	r2, [r2, #0]
   22312:	f362 1386 	bfi	r3, r2, #6, #1
   22316:	7703      	strb	r3, [r0, #28]
   22318:	2302      	movs	r3, #2
   2231a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   2231e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   22322:	bd70      	pop	{r4, r5, r6, pc}
   22324:	3301      	adds	r3, #1
   22326:	2b08      	cmp	r3, #8
   22328:	d1e7      	bne.n	222fa <sock_open+0xa>
   2232a:	2000      	movs	r0, #0
   2232c:	e7f9      	b.n	22322 <sock_open+0x32>
   2232e:	bf00      	nop
   22330:	2000d4fc 	.word	0x2000d4fc
   22334:	1badf11e 	.word	0x1badf11e
   22338:	2000de50 	.word	0x2000de50

0002233c <sock_find>:
   2233c:	b530      	push	{r4, r5, lr}
   2233e:	4602      	mov	r2, r0
   22340:	2300      	movs	r3, #0
   22342:	2568      	movs	r5, #104	; 0x68
   22344:	4905      	ldr	r1, [pc, #20]	; (2235c <sock_find+0x20>)
   22346:	fb05 f403 	mul.w	r4, r5, r3
   2234a:	1860      	adds	r0, r4, r1
   2234c:	590c      	ldr	r4, [r1, r4]
   2234e:	4294      	cmp	r4, r2
   22350:	d003      	beq.n	2235a <sock_find+0x1e>
   22352:	3301      	adds	r3, #1
   22354:	2b08      	cmp	r3, #8
   22356:	d1f6      	bne.n	22346 <sock_find+0xa>
   22358:	2000      	movs	r0, #0
   2235a:	bd30      	pop	{r4, r5, pc}
   2235c:	2000d4fc 	.word	0x2000d4fc

00022360 <_sock_close>:
   22360:	b538      	push	{r3, r4, r5, lr}
   22362:	f7ff ffeb 	bl	2233c <sock_find>
   22366:	4604      	mov	r4, r0
   22368:	1d05      	adds	r5, r0, #4
   2236a:	4628      	mov	r0, r5
   2236c:	f005 fa4d 	bl	2780a <pkt_flush>
   22370:	6c20      	ldr	r0, [r4, #64]	; 0x40
   22372:	b108      	cbz	r0, 22378 <_sock_close+0x18>
   22374:	f7fb fe00 	bl	1df78 <nrf_modem_os_free>
   22378:	2264      	movs	r2, #100	; 0x64
   2237a:	2100      	movs	r1, #0
   2237c:	4628      	mov	r0, r5
   2237e:	f006 fac2 	bl	28906 <memset>
   22382:	4b01      	ldr	r3, [pc, #4]	; (22388 <_sock_close+0x28>)
   22384:	6023      	str	r3, [r4, #0]
   22386:	bd38      	pop	{r3, r4, r5, pc}
   22388:	1badf11e 	.word	0x1badf11e

0002238c <sock_flow_control_set>:
   2238c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22390:	1e02      	subs	r2, r0, #0
   22392:	4c10      	ldr	r4, [pc, #64]	; (223d4 <sock_flow_control_set+0x48>)
   22394:	bf18      	it	ne
   22396:	2201      	movne	r2, #1
   22398:	4606      	mov	r6, r0
   2239a:	2500      	movs	r5, #0
   2239c:	46a0      	mov	r8, r4
   2239e:	f04f 0968 	mov.w	r9, #104	; 0x68
   223a2:	4b0d      	ldr	r3, [pc, #52]	; (223d8 <sock_flow_control_set+0x4c>)
   223a4:	4f0d      	ldr	r7, [pc, #52]	; (223dc <sock_flow_control_set+0x50>)
   223a6:	701a      	strb	r2, [r3, #0]
   223a8:	6823      	ldr	r3, [r4, #0]
   223aa:	42bb      	cmp	r3, r7
   223ac:	d00a      	beq.n	223c4 <sock_flow_control_set+0x38>
   223ae:	fb09 8305 	mla	r3, r9, r5, r8
   223b2:	7f1a      	ldrb	r2, [r3, #28]
   223b4:	f366 1286 	bfi	r2, r6, #6, #1
   223b8:	771a      	strb	r2, [r3, #28]
   223ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
   223bc:	b113      	cbz	r3, 223c4 <sock_flow_control_set+0x38>
   223be:	4620      	mov	r0, r4
   223c0:	f005 f8da 	bl	27578 <sock_pollcb>
   223c4:	3501      	adds	r5, #1
   223c6:	2d08      	cmp	r5, #8
   223c8:	f104 0468 	add.w	r4, r4, #104	; 0x68
   223cc:	d1ec      	bne.n	223a8 <sock_flow_control_set+0x1c>
   223ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   223d2:	bf00      	nop
   223d4:	2000d4fc 	.word	0x2000d4fc
   223d8:	2000de50 	.word	0x2000de50
   223dc:	1badf11e 	.word	0x1badf11e

000223e0 <sock_proto_is_valid>:
   223e0:	2811      	cmp	r0, #17
   223e2:	dc06      	bgt.n	223f2 <sock_proto_is_valid+0x12>
   223e4:	2800      	cmp	r0, #0
   223e6:	db0d      	blt.n	22404 <sock_proto_is_valid+0x24>
   223e8:	4b08      	ldr	r3, [pc, #32]	; (2240c <sock_proto_is_valid+0x2c>)
   223ea:	40c3      	lsrs	r3, r0
   223ec:	f003 0001 	and.w	r0, r3, #1
   223f0:	4770      	bx	lr
   223f2:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   223f6:	d007      	beq.n	22408 <sock_proto_is_valid+0x28>
   223f8:	f240 1311 	movw	r3, #273	; 0x111
   223fc:	1ac3      	subs	r3, r0, r3
   223fe:	4258      	negs	r0, r3
   22400:	4158      	adcs	r0, r3
   22402:	4770      	bx	lr
   22404:	2000      	movs	r0, #0
   22406:	4770      	bx	lr
   22408:	2001      	movs	r0, #1
   2240a:	4770      	bx	lr
   2240c:	00020041 	.word	0x00020041

00022410 <on_getaddrinfo_res>:
   22410:	2301      	movs	r3, #1
   22412:	4a03      	ldr	r2, [pc, #12]	; (22420 <on_getaddrinfo_res+0x10>)
   22414:	7013      	strb	r3, [r2, #0]
   22416:	4a03      	ldr	r2, [pc, #12]	; (22424 <on_getaddrinfo_res+0x14>)
   22418:	6010      	str	r0, [r2, #0]
   2241a:	4618      	mov	r0, r3
   2241c:	4770      	bx	lr
   2241e:	bf00      	nop
   22420:	2000de51 	.word	0x2000de51
   22424:	2000d83c 	.word	0x2000d83c

00022428 <addrinfo_init>:
   22428:	2201      	movs	r2, #1
   2242a:	b508      	push	{r3, lr}
   2242c:	4611      	mov	r1, r2
   2242e:	4804      	ldr	r0, [pc, #16]	; (22440 <addrinfo_init+0x18>)
   22430:	f7fb fd62 	bl	1def8 <nrf_modem_os_sem_init>
   22434:	2800      	cmp	r0, #0
   22436:	bf18      	it	ne
   22438:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   2243c:	bd08      	pop	{r3, pc}
   2243e:	bf00      	nop
   22440:	2000d840 	.word	0x2000d840

00022444 <nrf_getaddrinfo>:
   22444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22448:	b085      	sub	sp, #20
   2244a:	4680      	mov	r8, r0
   2244c:	460f      	mov	r7, r1
   2244e:	4616      	mov	r6, r2
   22450:	461d      	mov	r5, r3
   22452:	f001 f9cd 	bl	237f0 <nrf_modem_state_is_initialized>
   22456:	b928      	cbnz	r0, 22464 <nrf_getaddrinfo+0x20>
   22458:	2001      	movs	r0, #1
   2245a:	f004 fbaa 	bl	26bb2 <nrf_modem_os_errno_set>
   2245e:	f06f 040a 	mvn.w	r4, #10
   22462:	e01c      	b.n	2249e <nrf_getaddrinfo+0x5a>
   22464:	ea58 0307 	orrs.w	r3, r8, r7
   22468:	f000 8164 	beq.w	22734 <nrf_getaddrinfo+0x2f0>
   2246c:	b31e      	cbz	r6, 224b6 <nrf_getaddrinfo+0x72>
   2246e:	6833      	ldr	r3, [r6, #0]
   22470:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   22474:	f023 0302 	bic.w	r3, r3, #2
   22478:	2b00      	cmp	r3, #0
   2247a:	f040 815e 	bne.w	2273a <nrf_getaddrinfo+0x2f6>
   2247e:	6870      	ldr	r0, [r6, #4]
   22480:	b938      	cbnz	r0, 22492 <nrf_getaddrinfo+0x4e>
   22482:	68b0      	ldr	r0, [r6, #8]
   22484:	b178      	cbz	r0, 224a6 <nrf_getaddrinfo+0x62>
   22486:	f005 f95d 	bl	27744 <sock_type_is_valid>
   2248a:	b960      	cbnz	r0, 224a6 <nrf_getaddrinfo+0x62>
   2248c:	f06f 0406 	mvn.w	r4, #6
   22490:	e005      	b.n	2249e <nrf_getaddrinfo+0x5a>
   22492:	f005 f951 	bl	27738 <sock_family_is_valid>
   22496:	2800      	cmp	r0, #0
   22498:	d1f3      	bne.n	22482 <nrf_getaddrinfo+0x3e>
   2249a:	f06f 0405 	mvn.w	r4, #5
   2249e:	4620      	mov	r0, r4
   224a0:	b005      	add	sp, #20
   224a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224a6:	68f0      	ldr	r0, [r6, #12]
   224a8:	b128      	cbz	r0, 224b6 <nrf_getaddrinfo+0x72>
   224aa:	68b1      	ldr	r1, [r6, #8]
   224ac:	f005 f950 	bl	27750 <sock_proto_supports_type>
   224b0:	b908      	cbnz	r0, 224b6 <nrf_getaddrinfo+0x72>
   224b2:	206b      	movs	r0, #107	; 0x6b
   224b4:	e7d1      	b.n	2245a <nrf_getaddrinfo+0x16>
   224b6:	4ba4      	ldr	r3, [pc, #656]	; (22748 <nrf_getaddrinfo+0x304>)
   224b8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   224bc:	6818      	ldr	r0, [r3, #0]
   224be:	f004 fb82 	bl	26bc6 <nrf_modem_os_sem_take>
   224c2:	4604      	mov	r4, r0
   224c4:	2800      	cmp	r0, #0
   224c6:	f040 813b 	bne.w	22740 <nrf_getaddrinfo+0x2fc>
   224ca:	2f00      	cmp	r7, #0
   224cc:	d057      	beq.n	2257e <nrf_getaddrinfo+0x13a>
   224ce:	b326      	cbz	r6, 2251a <nrf_getaddrinfo+0xd6>
   224d0:	6833      	ldr	r3, [r6, #0]
   224d2:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   224d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   224da:	d11e      	bne.n	2251a <nrf_getaddrinfo+0xd6>
   224dc:	6833      	ldr	r3, [r6, #0]
   224de:	04db      	lsls	r3, r3, #19
   224e0:	d551      	bpl.n	22586 <nrf_getaddrinfo+0x142>
   224e2:	213a      	movs	r1, #58	; 0x3a
   224e4:	4638      	mov	r0, r7
   224e6:	f006 fa16 	bl	28916 <strchr>
   224ea:	4682      	mov	sl, r0
   224ec:	b120      	cbz	r0, 224f8 <nrf_getaddrinfo+0xb4>
   224ee:	4897      	ldr	r0, [pc, #604]	; (2274c <nrf_getaddrinfo+0x308>)
   224f0:	f7f6 fd7c 	bl	18fec <strlen>
   224f4:	eb0a 0700 	add.w	r7, sl, r0
   224f8:	4638      	mov	r0, r7
   224fa:	4995      	ldr	r1, [pc, #596]	; (22750 <nrf_getaddrinfo+0x30c>)
   224fc:	f006 fa51 	bl	289a2 <strstr>
   22500:	4682      	mov	sl, r0
   22502:	2800      	cmp	r0, #0
   22504:	d037      	beq.n	22576 <nrf_getaddrinfo+0x132>
   22506:	4892      	ldr	r0, [pc, #584]	; (22750 <nrf_getaddrinfo+0x30c>)
   22508:	f7f6 fd70 	bl	18fec <strlen>
   2250c:	220a      	movs	r2, #10
   2250e:	2100      	movs	r1, #0
   22510:	4450      	add	r0, sl
   22512:	f002 fe1d 	bl	25150 <strtol>
   22516:	4682      	mov	sl, r0
   22518:	e037      	b.n	2258a <nrf_getaddrinfo+0x146>
   2251a:	220a      	movs	r2, #10
   2251c:	2100      	movs	r1, #0
   2251e:	4638      	mov	r0, r7
   22520:	f002 ff30 	bl	25384 <strtoul>
   22524:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   22528:	1e42      	subs	r2, r0, #1
   2252a:	429a      	cmp	r2, r3
   2252c:	f200 80ff 	bhi.w	2272e <nrf_getaddrinfo+0x2ea>
   22530:	4a88      	ldr	r2, [pc, #544]	; (22754 <nrf_getaddrinfo+0x310>)
   22532:	0203      	lsls	r3, r0, #8
   22534:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   22538:	8013      	strh	r3, [r2, #0]
   2253a:	2e00      	cmp	r6, #0
   2253c:	d1ce      	bne.n	224dc <nrf_getaddrinfo+0x98>
   2253e:	2300      	movs	r3, #0
   22540:	2101      	movs	r1, #1
   22542:	4a85      	ldr	r2, [pc, #532]	; (22758 <nrf_getaddrinfo+0x314>)
   22544:	f04f 3aff 	mov.w	sl, #4294967295
   22548:	6013      	str	r3, [r2, #0]
   2254a:	4a84      	ldr	r2, [pc, #528]	; (2275c <nrf_getaddrinfo+0x318>)
   2254c:	6011      	str	r1, [r2, #0]
   2254e:	2106      	movs	r1, #6
   22550:	4a83      	ldr	r2, [pc, #524]	; (22760 <nrf_getaddrinfo+0x31c>)
   22552:	6011      	str	r1, [r2, #0]
   22554:	4f83      	ldr	r7, [pc, #524]	; (22764 <nrf_getaddrinfo+0x320>)
   22556:	4640      	mov	r0, r8
   22558:	603b      	str	r3, [r7, #0]
   2255a:	f1b8 0f00 	cmp.w	r8, #0
   2255e:	d173      	bne.n	22648 <nrf_getaddrinfo+0x204>
   22560:	f004 ff9d 	bl	2749e <rpc_client_msg_alloc>
   22564:	4606      	mov	r6, r0
   22566:	bb20      	cbnz	r0, 225b2 <nrf_getaddrinfo+0x16e>
   22568:	f06f 0409 	mvn.w	r4, #9
   2256c:	4b76      	ldr	r3, [pc, #472]	; (22748 <nrf_getaddrinfo+0x304>)
   2256e:	6818      	ldr	r0, [r3, #0]
   22570:	f004 fb27 	bl	26bc2 <nrf_modem_os_sem_give>
   22574:	e793      	b.n	2249e <nrf_getaddrinfo+0x5a>
   22576:	4601      	mov	r1, r0
   22578:	220a      	movs	r2, #10
   2257a:	4638      	mov	r0, r7
   2257c:	e7c9      	b.n	22512 <nrf_getaddrinfo+0xce>
   2257e:	4b75      	ldr	r3, [pc, #468]	; (22754 <nrf_getaddrinfo+0x310>)
   22580:	8018      	strh	r0, [r3, #0]
   22582:	2e00      	cmp	r6, #0
   22584:	d0db      	beq.n	2253e <nrf_getaddrinfo+0xfa>
   22586:	f04f 3aff 	mov.w	sl, #4294967295
   2258a:	6870      	ldr	r0, [r6, #4]
   2258c:	b108      	cbz	r0, 22592 <nrf_getaddrinfo+0x14e>
   2258e:	f000 fe15 	bl	231bc <nrf_af_to_rpc_af>
   22592:	4b71      	ldr	r3, [pc, #452]	; (22758 <nrf_getaddrinfo+0x314>)
   22594:	4a71      	ldr	r2, [pc, #452]	; (2275c <nrf_getaddrinfo+0x318>)
   22596:	6018      	str	r0, [r3, #0]
   22598:	68b3      	ldr	r3, [r6, #8]
   2259a:	2b00      	cmp	r3, #0
   2259c:	bf08      	it	eq
   2259e:	2301      	moveq	r3, #1
   225a0:	6013      	str	r3, [r2, #0]
   225a2:	68f3      	ldr	r3, [r6, #12]
   225a4:	4a6e      	ldr	r2, [pc, #440]	; (22760 <nrf_getaddrinfo+0x31c>)
   225a6:	2b00      	cmp	r3, #0
   225a8:	bf08      	it	eq
   225aa:	2306      	moveq	r3, #6
   225ac:	6013      	str	r3, [r2, #0]
   225ae:	6833      	ldr	r3, [r6, #0]
   225b0:	e7d0      	b.n	22554 <nrf_getaddrinfo+0x110>
   225b2:	f8c0 a010 	str.w	sl, [r0, #16]
   225b6:	4b68      	ldr	r3, [pc, #416]	; (22758 <nrf_getaddrinfo+0x314>)
   225b8:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 2275c <nrf_getaddrinfo+0x318>
   225bc:	681b      	ldr	r3, [r3, #0]
   225be:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 22760 <nrf_getaddrinfo+0x31c>
   225c2:	61b3      	str	r3, [r6, #24]
   225c4:	f8db 3000 	ldr.w	r3, [fp]
   225c8:	4632      	mov	r2, r6
   225ca:	61f3      	str	r3, [r6, #28]
   225cc:	f8da 3000 	ldr.w	r3, [sl]
   225d0:	f247 010d 	movw	r1, #28685	; 0x700d
   225d4:	6233      	str	r3, [r6, #32]
   225d6:	683b      	ldr	r3, [r7, #0]
   225d8:	2004      	movs	r0, #4
   225da:	6173      	str	r3, [r6, #20]
   225dc:	f004 ff7b 	bl	274d6 <rpc_client_msg_send>
   225e0:	2300      	movs	r3, #0
   225e2:	4e61      	ldr	r6, [pc, #388]	; (22768 <nrf_getaddrinfo+0x324>)
   225e4:	7033      	strb	r3, [r6, #0]
   225e6:	f04f 33ff 	mov.w	r3, #4294967295
   225ea:	9303      	str	r3, [sp, #12]
   225ec:	7833      	ldrb	r3, [r6, #0]
   225ee:	2b01      	cmp	r3, #1
   225f0:	d13e      	bne.n	22670 <nrf_getaddrinfo+0x22c>
   225f2:	f8df 8178 	ldr.w	r8, [pc, #376]	; 2276c <nrf_getaddrinfo+0x328>
   225f6:	f8d8 3000 	ldr.w	r3, [r8]
   225fa:	6958      	ldr	r0, [r3, #20]
   225fc:	2800      	cmp	r0, #0
   225fe:	f040 8092 	bne.w	22726 <nrf_getaddrinfo+0x2e2>
   22602:	2020      	movs	r0, #32
   22604:	f8d3 9000 	ldr.w	r9, [r3]
   22608:	f7fb fcae 	bl	1df68 <nrf_modem_os_alloc>
   2260c:	6028      	str	r0, [r5, #0]
   2260e:	b170      	cbz	r0, 2262e <nrf_getaddrinfo+0x1ea>
   22610:	f109 0318 	add.w	r3, r9, #24
   22614:	4a4f      	ldr	r2, [pc, #316]	; (22754 <nrf_getaddrinfo+0x310>)
   22616:	9301      	str	r3, [sp, #4]
   22618:	4618      	mov	r0, r3
   2261a:	8812      	ldrh	r2, [r2, #0]
   2261c:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   22620:	f004 ff71 	bl	27506 <sockaddr_init>
   22624:	4606      	mov	r6, r0
   22626:	bb78      	cbnz	r0, 22688 <nrf_getaddrinfo+0x244>
   22628:	6828      	ldr	r0, [r5, #0]
   2262a:	f7fb fca5 	bl	1df78 <nrf_modem_os_free>
   2262e:	f06f 0409 	mvn.w	r4, #9
   22632:	f8d8 3000 	ldr.w	r3, [r8]
   22636:	6818      	ldr	r0, [r3, #0]
   22638:	b108      	cbz	r0, 2263e <nrf_getaddrinfo+0x1fa>
   2263a:	f004 ff56 	bl	274ea <rpc_client_msg_data_rx_free>
   2263e:	f8d8 0000 	ldr.w	r0, [r8]
   22642:	f004 ff4f 	bl	274e4 <rpc_client_msg_rx_free>
   22646:	e791      	b.n	2256c <nrf_getaddrinfo+0x128>
   22648:	f7f6 fcd0 	bl	18fec <strlen>
   2264c:	f004 ff27 	bl	2749e <rpc_client_msg_alloc>
   22650:	4606      	mov	r6, r0
   22652:	2800      	cmp	r0, #0
   22654:	d088      	beq.n	22568 <nrf_getaddrinfo+0x124>
   22656:	f8c0 a010 	str.w	sl, [r0, #16]
   2265a:	f8d0 a000 	ldr.w	sl, [r0]
   2265e:	4640      	mov	r0, r8
   22660:	f7f6 fcc4 	bl	18fec <strlen>
   22664:	4641      	mov	r1, r8
   22666:	4602      	mov	r2, r0
   22668:	4650      	mov	r0, sl
   2266a:	f006 f93f 	bl	288ec <memcpy>
   2266e:	e7a2      	b.n	225b6 <nrf_getaddrinfo+0x172>
   22670:	2002      	movs	r0, #2
   22672:	a903      	add	r1, sp, #12
   22674:	f7fb fb7e 	bl	1dd74 <nrf_modem_os_timedwait>
   22678:	2800      	cmp	r0, #0
   2267a:	d0b7      	beq.n	225ec <nrf_getaddrinfo+0x1a8>
   2267c:	206e      	movs	r0, #110	; 0x6e
   2267e:	f004 fa98 	bl	26bb2 <nrf_modem_os_errno_set>
   22682:	f06f 040a 	mvn.w	r4, #10
   22686:	e771      	b.n	2256c <nrf_getaddrinfo+0x128>
   22688:	f8d9 2008 	ldr.w	r2, [r9, #8]
   2268c:	2a01      	cmp	r2, #1
   2268e:	d004      	beq.n	2269a <nrf_getaddrinfo+0x256>
   22690:	2a02      	cmp	r2, #2
   22692:	d01a      	beq.n	226ca <nrf_getaddrinfo+0x286>
   22694:	f06f 0405 	mvn.w	r4, #5
   22698:	e7cb      	b.n	22632 <nrf_getaddrinfo+0x1ee>
   2269a:	2110      	movs	r1, #16
   2269c:	682a      	ldr	r2, [r5, #0]
   2269e:	6111      	str	r1, [r2, #16]
   226a0:	683a      	ldr	r2, [r7, #0]
   226a2:	6829      	ldr	r1, [r5, #0]
   226a4:	f012 0202 	ands.w	r2, r2, #2
   226a8:	d03b      	beq.n	22722 <nrf_getaddrinfo+0x2de>
   226aa:	9101      	str	r1, [sp, #4]
   226ac:	f8b9 0016 	ldrh.w	r0, [r9, #22]
   226b0:	3001      	adds	r0, #1
   226b2:	f7fb fc59 	bl	1df68 <nrf_modem_os_alloc>
   226b6:	9901      	ldr	r1, [sp, #4]
   226b8:	6188      	str	r0, [r1, #24]
   226ba:	682a      	ldr	r2, [r5, #0]
   226bc:	6990      	ldr	r0, [r2, #24]
   226be:	b938      	cbnz	r0, 226d0 <nrf_getaddrinfo+0x28c>
   226c0:	4628      	mov	r0, r5
   226c2:	f7fb fc59 	bl	1df78 <nrf_modem_os_free>
   226c6:	4630      	mov	r0, r6
   226c8:	e7af      	b.n	2262a <nrf_getaddrinfo+0x1e6>
   226ca:	2124      	movs	r1, #36	; 0x24
   226cc:	682a      	ldr	r2, [r5, #0]
   226ce:	e7e6      	b.n	2269e <nrf_getaddrinfo+0x25a>
   226d0:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   226d4:	f109 0318 	add.w	r3, r9, #24
   226d8:	440b      	add	r3, r1
   226da:	4619      	mov	r1, r3
   226dc:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   226e0:	f006 f904 	bl	288ec <memcpy>
   226e4:	2000      	movs	r0, #0
   226e6:	6829      	ldr	r1, [r5, #0]
   226e8:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   226ec:	6989      	ldr	r1, [r1, #24]
   226ee:	5488      	strb	r0, [r1, r2]
   226f0:	682a      	ldr	r2, [r5, #0]
   226f2:	9201      	str	r2, [sp, #4]
   226f4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   226f8:	f005 fc6f 	bl	27fda <rpc_af_to_nrf_af>
   226fc:	9a01      	ldr	r2, [sp, #4]
   226fe:	6050      	str	r0, [r2, #4]
   22700:	682b      	ldr	r3, [r5, #0]
   22702:	f8db 2000 	ldr.w	r2, [fp]
   22706:	609a      	str	r2, [r3, #8]
   22708:	682b      	ldr	r3, [r5, #0]
   2270a:	f8da 2000 	ldr.w	r2, [sl]
   2270e:	60da      	str	r2, [r3, #12]
   22710:	682b      	ldr	r3, [r5, #0]
   22712:	683a      	ldr	r2, [r7, #0]
   22714:	601a      	str	r2, [r3, #0]
   22716:	2200      	movs	r2, #0
   22718:	682b      	ldr	r3, [r5, #0]
   2271a:	615e      	str	r6, [r3, #20]
   2271c:	682b      	ldr	r3, [r5, #0]
   2271e:	61da      	str	r2, [r3, #28]
   22720:	e787      	b.n	22632 <nrf_getaddrinfo+0x1ee>
   22722:	618a      	str	r2, [r1, #24]
   22724:	e7e4      	b.n	226f0 <nrf_getaddrinfo+0x2ac>
   22726:	f005 fc9e 	bl	28066 <rpc_error_to_nrf_gai_errno>
   2272a:	4604      	mov	r4, r0
   2272c:	e781      	b.n	22632 <nrf_getaddrinfo+0x1ee>
   2272e:	f06f 0407 	mvn.w	r4, #7
   22732:	e71b      	b.n	2256c <nrf_getaddrinfo+0x128>
   22734:	f06f 0401 	mvn.w	r4, #1
   22738:	e6b1      	b.n	2249e <nrf_getaddrinfo+0x5a>
   2273a:	f04f 34ff 	mov.w	r4, #4294967295
   2273e:	e6ae      	b.n	2249e <nrf_getaddrinfo+0x5a>
   22740:	f06f 0402 	mvn.w	r4, #2
   22744:	e6ab      	b.n	2249e <nrf_getaddrinfo+0x5a>
   22746:	bf00      	nop
   22748:	2000d840 	.word	0x2000d840
   2274c:	0002b5a7 	.word	0x0002b5a7
   22750:	0002b595 	.word	0x0002b595
   22754:	2000d900 	.word	0x2000d900
   22758:	2000d84c 	.word	0x2000d84c
   2275c:	2000d848 	.word	0x2000d848
   22760:	2000d844 	.word	0x2000d844
   22764:	2000d850 	.word	0x2000d850
   22768:	2000de51 	.word	0x2000de51
   2276c:	2000d83c 	.word	0x2000d83c

00022770 <rpc_ip_event_handler>:
   22770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22772:	f248 030f 	movw	r3, #32783	; 0x800f
   22776:	4299      	cmp	r1, r3
   22778:	4606      	mov	r6, r0
   2277a:	460d      	mov	r5, r1
   2277c:	d03b      	beq.n	227f6 <rpc_ip_event_handler+0x86>
   2277e:	d822      	bhi.n	227c6 <rpc_ip_event_handler+0x56>
   22780:	f248 030d 	movw	r3, #32781	; 0x800d
   22784:	4299      	cmp	r1, r3
   22786:	d02f      	beq.n	227e8 <rpc_ip_event_handler+0x78>
   22788:	f248 030e 	movw	r3, #32782	; 0x800e
   2278c:	4299      	cmp	r1, r3
   2278e:	d02f      	beq.n	227f0 <rpc_ip_event_handler+0x80>
   22790:	6900      	ldr	r0, [r0, #16]
   22792:	f7ff fdd3 	bl	2233c <sock_find>
   22796:	4604      	mov	r4, r0
   22798:	b308      	cbz	r0, 227de <rpc_ip_event_handler+0x6e>
   2279a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2279e:	d91e      	bls.n	227de <rpc_ip_event_handler+0x6e>
   227a0:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
   227a4:	3d01      	subs	r5, #1
   227a6:	2d0b      	cmp	r5, #11
   227a8:	d819      	bhi.n	227de <rpc_ip_event_handler+0x6e>
   227aa:	e8df f015 	tbh	[pc, r5, lsl #1]
   227ae:	0090      	.short	0x0090
   227b0:	009400b3 	.word	0x009400b3
   227b4:	00940094 	.word	0x00940094
   227b8:	00ee00ee 	.word	0x00ee00ee
   227bc:	00990094 	.word	0x00990094
   227c0:	00180018 	.word	0x00180018
   227c4:	00d2      	.short	0x00d2
   227c6:	f249 0304 	movw	r3, #36868	; 0x9004
   227ca:	4299      	cmp	r1, r3
   227cc:	d016      	beq.n	227fc <rpc_ip_event_handler+0x8c>
   227ce:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   227d2:	d924      	bls.n	2281e <rpc_ip_event_handler+0xae>
   227d4:	68c0      	ldr	r0, [r0, #12]
   227d6:	f7ff fdb1 	bl	2233c <sock_find>
   227da:	4604      	mov	r4, r0
   227dc:	bb70      	cbnz	r0, 2283c <rpc_ip_event_handler+0xcc>
   227de:	6830      	ldr	r0, [r6, #0]
   227e0:	b1b0      	cbz	r0, 22810 <rpc_ip_event_handler+0xa0>
   227e2:	f004 fe82 	bl	274ea <rpc_client_msg_data_rx_free>
   227e6:	e013      	b.n	22810 <rpc_ip_event_handler+0xa0>
   227e8:	f7ff fe12 	bl	22410 <on_getaddrinfo_res>
   227ec:	b2c0      	uxtb	r0, r0
   227ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   227f0:	f005 f82c 	bl	2784c <on_getifaddrs_res>
   227f4:	e7fa      	b.n	227ec <rpc_ip_event_handler+0x7c>
   227f6:	f005 f816 	bl	27826 <on_conf_dnssrv_res>
   227fa:	e7f7      	b.n	227ec <rpc_ip_event_handler+0x7c>
   227fc:	6903      	ldr	r3, [r0, #16]
   227fe:	2b03      	cmp	r3, #3
   22800:	d806      	bhi.n	22810 <rpc_ip_event_handler+0xa0>
   22802:	e8df f003 	tbb	[pc, r3]
   22806:	0a02      	.short	0x0a02
   22808:	0702      	.short	0x0702
   2280a:	2000      	movs	r0, #0
   2280c:	f7ff fdbe 	bl	2238c <sock_flow_control_set>
   22810:	2000      	movs	r0, #0
   22812:	e7ec      	b.n	227ee <rpc_ip_event_handler+0x7e>
   22814:	2201      	movs	r2, #1
   22816:	4b65      	ldr	r3, [pc, #404]	; (229ac <rpc_ip_event_handler+0x23c>)
   22818:	701a      	strb	r2, [r3, #0]
   2281a:	2001      	movs	r0, #1
   2281c:	e7f6      	b.n	2280c <rpc_ip_event_handler+0x9c>
   2281e:	6900      	ldr	r0, [r0, #16]
   22820:	f7ff fd8c 	bl	2233c <sock_find>
   22824:	4604      	mov	r4, r0
   22826:	2800      	cmp	r0, #0
   22828:	d0d9      	beq.n	227de <rpc_ip_event_handler+0x6e>
   2282a:	f248 0381 	movw	r3, #32897	; 0x8081
   2282e:	429d      	cmp	r5, r3
   22830:	d1d5      	bne.n	227de <rpc_ip_event_handler+0x6e>
   22832:	4601      	mov	r1, r0
   22834:	4630      	mov	r0, r6
   22836:	f000 fc1d 	bl	23074 <on_tls_attach_res>
   2283a:	e04f      	b.n	228dc <rpc_ip_event_handler+0x16c>
   2283c:	f249 0302 	movw	r3, #36866	; 0x9002
   22840:	429d      	cmp	r5, r3
   22842:	f000 809e 	beq.w	22982 <rpc_ip_event_handler+0x212>
   22846:	d835      	bhi.n	228b4 <rpc_ip_event_handler+0x144>
   22848:	f004 ff11 	bl	2766e <sock_has_stream_error>
   2284c:	4607      	mov	r7, r0
   2284e:	b9e0      	cbnz	r0, 2288a <rpc_ip_event_handler+0x11a>
   22850:	2010      	movs	r0, #16
   22852:	f7fb fb89 	bl	1df68 <nrf_modem_os_alloc>
   22856:	4605      	mov	r5, r0
   22858:	b1b8      	cbz	r0, 2288a <rpc_ip_event_handler+0x11a>
   2285a:	4639      	mov	r1, r7
   2285c:	2210      	movs	r2, #16
   2285e:	f006 f852 	bl	28906 <memset>
   22862:	6833      	ldr	r3, [r6, #0]
   22864:	606b      	str	r3, [r5, #4]
   22866:	6873      	ldr	r3, [r6, #4]
   22868:	812b      	strh	r3, [r5, #8]
   2286a:	8a71      	ldrh	r1, [r6, #18]
   2286c:	2900      	cmp	r1, #0
   2286e:	f000 8097 	beq.w	229a0 <rpc_ip_event_handler+0x230>
   22872:	8a32      	ldrh	r2, [r6, #16]
   22874:	f106 0014 	add.w	r0, r6, #20
   22878:	f004 fe45 	bl	27506 <sockaddr_init>
   2287c:	60e8      	str	r0, [r5, #12]
   2287e:	2800      	cmp	r0, #0
   22880:	f040 808e 	bne.w	229a0 <rpc_ip_event_handler+0x230>
   22884:	4628      	mov	r0, r5
   22886:	f7fb fb77 	bl	1df78 <nrf_modem_os_free>
   2288a:	6830      	ldr	r0, [r6, #0]
   2288c:	f004 fe2d 	bl	274ea <rpc_client_msg_data_rx_free>
   22890:	4620      	mov	r0, r4
   22892:	f004 feae 	bl	275f2 <sock_is_stream>
   22896:	b148      	cbz	r0, 228ac <rpc_ip_event_handler+0x13c>
   22898:	4620      	mov	r0, r4
   2289a:	f004 fee8 	bl	2766e <sock_has_stream_error>
   2289e:	b928      	cbnz	r0, 228ac <rpc_ip_event_handler+0x13c>
   228a0:	230c      	movs	r3, #12
   228a2:	61a3      	str	r3, [r4, #24]
   228a4:	7f23      	ldrb	r3, [r4, #28]
   228a6:	f063 037e 	orn	r3, r3, #126	; 0x7e
   228aa:	7723      	strb	r3, [r4, #28]
   228ac:	4620      	mov	r0, r4
   228ae:	f004 fea5 	bl	275fc <sock_is_datagram>
   228b2:	e025      	b.n	22900 <rpc_ip_event_handler+0x190>
   228b4:	f249 0303 	movw	r3, #36867	; 0x9003
   228b8:	429d      	cmp	r5, r3
   228ba:	d018      	beq.n	228ee <rpc_ip_event_handler+0x17e>
   228bc:	f249 0382 	movw	r3, #36994	; 0x9082
   228c0:	429d      	cmp	r5, r3
   228c2:	d18c      	bne.n	227de <rpc_ip_event_handler+0x6e>
   228c4:	4601      	mov	r1, r0
   228c6:	4630      	mov	r0, r6
   228c8:	f000 fbe8 	bl	2309c <on_tls_handshake_ntf>
   228cc:	e006      	b.n	228dc <rpc_ip_event_handler+0x16c>
   228ce:	6973      	ldr	r3, [r6, #20]
   228d0:	b90b      	cbnz	r3, 228d6 <rpc_ip_event_handler+0x166>
   228d2:	69b3      	ldr	r3, [r6, #24]
   228d4:	6003      	str	r3, [r0, #0]
   228d6:	4630      	mov	r0, r6
   228d8:	f005 fc0e 	bl	280f8 <res_forward>
   228dc:	4605      	mov	r5, r0
   228de:	e010      	b.n	22902 <rpc_ip_event_handler+0x192>
   228e0:	7f03      	ldrb	r3, [r0, #28]
   228e2:	f023 0303 	bic.w	r3, r3, #3
   228e6:	f043 0303 	orr.w	r3, r3, #3
   228ea:	7703      	strb	r3, [r0, #28]
   228ec:	e7f3      	b.n	228d6 <rpc_ip_event_handler+0x166>
   228ee:	7f03      	ldrb	r3, [r0, #28]
   228f0:	f043 0301 	orr.w	r3, r3, #1
   228f4:	7703      	strb	r3, [r0, #28]
   228f6:	6930      	ldr	r0, [r6, #16]
   228f8:	2869      	cmp	r0, #105	; 0x69
   228fa:	d112      	bne.n	22922 <rpc_ip_event_handler+0x1b2>
   228fc:	2368      	movs	r3, #104	; 0x68
   228fe:	61a3      	str	r3, [r4, #24]
   22900:	2500      	movs	r5, #0
   22902:	4620      	mov	r0, r4
   22904:	f004 fec1 	bl	2768a <sock_has_pollcb>
   22908:	b110      	cbz	r0, 22910 <rpc_ip_event_handler+0x1a0>
   2290a:	4620      	mov	r0, r4
   2290c:	f004 fe34 	bl	27578 <sock_pollcb>
   22910:	b2e8      	uxtb	r0, r5
   22912:	e76c      	b.n	227ee <rpc_ip_event_handler+0x7e>
   22914:	7f03      	ldrb	r3, [r0, #28]
   22916:	68f5      	ldr	r5, [r6, #12]
   22918:	f36f 0382 	bfc	r3, #2, #1
   2291c:	7703      	strb	r3, [r0, #28]
   2291e:	6970      	ldr	r0, [r6, #20]
   22920:	b118      	cbz	r0, 2292a <rpc_ip_event_handler+0x1ba>
   22922:	f000 fc5f 	bl	231e4 <rpc_error_to_nrf_errno>
   22926:	61a0      	str	r0, [r4, #24]
   22928:	e7ea      	b.n	22900 <rpc_ip_event_handler+0x190>
   2292a:	4620      	mov	r0, r4
   2292c:	f004 fe70 	bl	27610 <sock_proto_is_secure>
   22930:	b918      	cbnz	r0, 2293a <rpc_ip_event_handler+0x1ca>
   22932:	7f23      	ldrb	r3, [r4, #28]
   22934:	f043 0308 	orr.w	r3, r3, #8
   22938:	7723      	strb	r3, [r4, #28]
   2293a:	4620      	mov	r0, r4
   2293c:	f004 fe68 	bl	27610 <sock_proto_is_secure>
   22940:	2800      	cmp	r0, #0
   22942:	d0cb      	beq.n	228dc <rpc_ip_event_handler+0x16c>
   22944:	2d00      	cmp	r5, #0
   22946:	d0dc      	beq.n	22902 <rpc_ip_event_handler+0x192>
   22948:	2100      	movs	r1, #0
   2294a:	4620      	mov	r0, r4
   2294c:	f000 fbc0 	bl	230d0 <tls_attach>
   22950:	e7d6      	b.n	22900 <rpc_ip_event_handler+0x190>
   22952:	7f43      	ldrb	r3, [r0, #29]
   22954:	3b01      	subs	r3, #1
   22956:	7743      	strb	r3, [r0, #29]
   22958:	6973      	ldr	r3, [r6, #20]
   2295a:	2b00      	cmp	r3, #0
   2295c:	d1bb      	bne.n	228d6 <rpc_ip_event_handler+0x166>
   2295e:	4630      	mov	r0, r6
   22960:	f005 fbc8 	bl	280f4 <res_cookie_get>
   22964:	69b2      	ldr	r2, [r6, #24]
   22966:	6843      	ldr	r3, [r0, #4]
   22968:	601a      	str	r2, [r3, #0]
   2296a:	6842      	ldr	r2, [r0, #4]
   2296c:	7f13      	ldrb	r3, [r2, #28]
   2296e:	f043 0308 	orr.w	r3, r3, #8
   22972:	7713      	strb	r3, [r2, #28]
   22974:	6843      	ldr	r3, [r0, #4]
   22976:	6922      	ldr	r2, [r4, #16]
   22978:	611a      	str	r2, [r3, #16]
   2297a:	6843      	ldr	r3, [r0, #4]
   2297c:	6962      	ldr	r2, [r4, #20]
   2297e:	615a      	str	r2, [r3, #20]
   22980:	e7a9      	b.n	228d6 <rpc_ip_event_handler+0x166>
   22982:	7f43      	ldrb	r3, [r0, #29]
   22984:	3301      	adds	r3, #1
   22986:	7743      	strb	r3, [r0, #29]
   22988:	e7ba      	b.n	22900 <rpc_ip_event_handler+0x190>
   2298a:	4630      	mov	r0, r6
   2298c:	f005 fbb2 	bl	280f4 <res_cookie_get>
   22990:	6973      	ldr	r3, [r6, #20]
   22992:	b913      	cbnz	r3, 2299a <rpc_ip_event_handler+0x22a>
   22994:	69b3      	ldr	r3, [r6, #24]
   22996:	6043      	str	r3, [r0, #4]
   22998:	e79d      	b.n	228d6 <rpc_ip_event_handler+0x166>
   2299a:	f04f 33ff 	mov.w	r3, #4294967295
   2299e:	e7fa      	b.n	22996 <rpc_ip_event_handler+0x226>
   229a0:	4629      	mov	r1, r5
   229a2:	4620      	mov	r0, r4
   229a4:	f004 fe05 	bl	275b2 <sock_pkt_append>
   229a8:	e7aa      	b.n	22900 <rpc_ip_event_handler+0x190>
   229aa:	bf00      	nop
   229ac:	2000de52 	.word	0x2000de52

000229b0 <nrf_close>:
   229b0:	b570      	push	{r4, r5, r6, lr}
   229b2:	4604      	mov	r4, r0
   229b4:	f7ff fcc2 	bl	2233c <sock_find>
   229b8:	4605      	mov	r5, r0
   229ba:	b930      	cbnz	r0, 229ca <nrf_close+0x1a>
   229bc:	2009      	movs	r0, #9
   229be:	f004 f8f8 	bl	26bb2 <nrf_modem_os_errno_set>
   229c2:	f04f 36ff 	mov.w	r6, #4294967295
   229c6:	4630      	mov	r0, r6
   229c8:	bd70      	pop	{r4, r5, r6, pc}
   229ca:	f000 ff11 	bl	237f0 <nrf_modem_state_is_initialized>
   229ce:	b960      	cbnz	r0, 229ea <nrf_close+0x3a>
   229d0:	2600      	movs	r6, #0
   229d2:	4628      	mov	r0, r5
   229d4:	f004 fe30 	bl	27638 <sock_is_attaching>
   229d8:	b118      	cbz	r0, 229e2 <nrf_close+0x32>
   229da:	4b0e      	ldr	r3, [pc, #56]	; (22a14 <nrf_close+0x64>)
   229dc:	6818      	ldr	r0, [r3, #0]
   229de:	f004 f8f0 	bl	26bc2 <nrf_modem_os_sem_give>
   229e2:	4620      	mov	r0, r4
   229e4:	f7ff fcbc 	bl	22360 <_sock_close>
   229e8:	e7ed      	b.n	229c6 <nrf_close+0x16>
   229ea:	2000      	movs	r0, #0
   229ec:	f004 fd57 	bl	2749e <rpc_client_msg_alloc>
   229f0:	4601      	mov	r1, r0
   229f2:	b908      	cbnz	r0, 229f8 <nrf_close+0x48>
   229f4:	2069      	movs	r0, #105	; 0x69
   229f6:	e7e2      	b.n	229be <nrf_close+0xe>
   229f8:	6104      	str	r4, [r0, #16]
   229fa:	f247 0009 	movw	r0, #28681	; 0x7009
   229fe:	f005 fb4c 	bl	2809a <req_forward>
   22a02:	2800      	cmp	r0, #0
   22a04:	d0e4      	beq.n	229d0 <nrf_close+0x20>
   22a06:	2816      	cmp	r0, #22
   22a08:	d0e2      	beq.n	229d0 <nrf_close+0x20>
   22a0a:	f004 f8d2 	bl	26bb2 <nrf_modem_os_errno_set>
   22a0e:	f04f 36ff 	mov.w	r6, #4294967295
   22a12:	e7de      	b.n	229d2 <nrf_close+0x22>
   22a14:	2000d854 	.word	0x2000d854

00022a18 <nrf_sendto>:
   22a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a1c:	4698      	mov	r8, r3
   22a1e:	2300      	movs	r3, #0
   22a20:	b085      	sub	sp, #20
   22a22:	4682      	mov	sl, r0
   22a24:	4689      	mov	r9, r1
   22a26:	4616      	mov	r6, r2
   22a28:	e9cd 3302 	strd	r3, r3, [sp, #8]
   22a2c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   22a2e:	f7ff fc85 	bl	2233c <sock_find>
   22a32:	4605      	mov	r5, r0
   22a34:	b940      	cbnz	r0, 22a48 <nrf_sendto+0x30>
   22a36:	2009      	movs	r0, #9
   22a38:	f004 f8bb 	bl	26bb2 <nrf_modem_os_errno_set>
   22a3c:	f04f 34ff 	mov.w	r4, #4294967295
   22a40:	4620      	mov	r0, r4
   22a42:	b005      	add	sp, #20
   22a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a48:	f038 0340 	bics.w	r3, r8, #64	; 0x40
   22a4c:	d001      	beq.n	22a52 <nrf_sendto+0x3a>
   22a4e:	205f      	movs	r0, #95	; 0x5f
   22a50:	e7f2      	b.n	22a38 <nrf_sendto+0x20>
   22a52:	f004 fe1f 	bl	27694 <sock_has_rai_no_data>
   22a56:	b128      	cbz	r0, 22a64 <nrf_sendto+0x4c>
   22a58:	4628      	mov	r0, r5
   22a5a:	f004 fe0b 	bl	27674 <sock_has_error>
   22a5e:	b128      	cbz	r0, 22a6c <nrf_sendto+0x54>
   22a60:	69a8      	ldr	r0, [r5, #24]
   22a62:	e7e9      	b.n	22a38 <nrf_sendto+0x20>
   22a64:	4628      	mov	r0, r5
   22a66:	f004 fdef 	bl	27648 <sock_is_closed>
   22a6a:	e7f8      	b.n	22a5e <nrf_sendto+0x46>
   22a6c:	4628      	mov	r0, r5
   22a6e:	b1d7      	cbz	r7, 22aa6 <nrf_sendto+0x8e>
   22a70:	f004 fdbf 	bl	275f2 <sock_is_stream>
   22a74:	bb00      	cbnz	r0, 22ab8 <nrf_sendto+0xa0>
   22a76:	4639      	mov	r1, r7
   22a78:	4628      	mov	r0, r5
   22a7a:	f004 fe97 	bl	277ac <sock_sockaddr_fam_is_valid>
   22a7e:	b908      	cbnz	r0, 22a84 <nrf_sendto+0x6c>
   22a80:	206a      	movs	r0, #106	; 0x6a
   22a82:	e7d9      	b.n	22a38 <nrf_sendto+0x20>
   22a84:	4638      	mov	r0, r7
   22a86:	990f      	ldr	r1, [sp, #60]	; 0x3c
   22a88:	f004 fe7c 	bl	27784 <sock_sockaddr_len_is_valid>
   22a8c:	b908      	cbnz	r0, 22a92 <nrf_sendto+0x7a>
   22a8e:	2016      	movs	r0, #22
   22a90:	e7d2      	b.n	22a38 <nrf_sendto+0x20>
   22a92:	4628      	mov	r0, r5
   22a94:	f004 fdb2 	bl	275fc <sock_is_datagram>
   22a98:	b170      	cbz	r0, 22ab8 <nrf_sendto+0xa0>
   22a9a:	4628      	mov	r0, r5
   22a9c:	f004 fdb8 	bl	27610 <sock_proto_is_secure>
   22aa0:	b150      	cbz	r0, 22ab8 <nrf_sendto+0xa0>
   22aa2:	207f      	movs	r0, #127	; 0x7f
   22aa4:	e7c8      	b.n	22a38 <nrf_sendto+0x20>
   22aa6:	f004 fda9 	bl	275fc <sock_is_datagram>
   22aaa:	b128      	cbz	r0, 22ab8 <nrf_sendto+0xa0>
   22aac:	4628      	mov	r0, r5
   22aae:	f004 fdbf 	bl	27630 <sock_is_connected>
   22ab2:	b908      	cbnz	r0, 22ab8 <nrf_sendto+0xa0>
   22ab4:	2079      	movs	r0, #121	; 0x79
   22ab6:	e7bf      	b.n	22a38 <nrf_sendto+0x20>
   22ab8:	4628      	mov	r0, r5
   22aba:	f004 fe2b 	bl	27714 <sock_sndtimeo_ms_get>
   22abe:	9001      	str	r0, [sp, #4]
   22ac0:	4628      	mov	r0, r5
   22ac2:	f004 fdbd 	bl	27640 <sock_is_nonblock>
   22ac6:	bb78      	cbnz	r0, 22b28 <nrf_sendto+0x110>
   22ac8:	f3c8 1880 	ubfx	r8, r8, #6, #1
   22acc:	4628      	mov	r0, r5
   22ace:	f004 fd90 	bl	275f2 <sock_is_stream>
   22ad2:	b140      	cbz	r0, 22ae6 <nrf_sendto+0xce>
   22ad4:	4628      	mov	r0, r5
   22ad6:	f004 fd9b 	bl	27610 <sock_proto_is_secure>
   22ada:	b120      	cbz	r0, 22ae6 <nrf_sendto+0xce>
   22adc:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
   22ae0:	bf28      	it	cs
   22ae2:	f44f 6600 	movcs.w	r6, #2048	; 0x800
   22ae6:	f004 fd02 	bl	274ee <rpc_client_msg_data_tx_size>
   22aea:	42b0      	cmp	r0, r6
   22aec:	d206      	bcs.n	22afc <nrf_sendto+0xe4>
   22aee:	4628      	mov	r0, r5
   22af0:	f004 fd7f 	bl	275f2 <sock_is_stream>
   22af4:	b1d8      	cbz	r0, 22b2e <nrf_sendto+0x116>
   22af6:	f004 fcfa 	bl	274ee <rpc_client_msg_data_tx_size>
   22afa:	4606      	mov	r6, r0
   22afc:	4628      	mov	r0, r5
   22afe:	f004 fdc0 	bl	27682 <sock_has_flow_control>
   22b02:	b118      	cbz	r0, 22b0c <nrf_sendto+0xf4>
   22b04:	4628      	mov	r0, r5
   22b06:	f004 fd9f 	bl	27648 <sock_is_closed>
   22b0a:	b190      	cbz	r0, 22b32 <nrf_sendto+0x11a>
   22b0c:	4630      	mov	r0, r6
   22b0e:	f004 fcc6 	bl	2749e <rpc_client_msg_alloc>
   22b12:	4604      	mov	r4, r0
   22b14:	b9d8      	cbnz	r0, 22b4e <nrf_sendto+0x136>
   22b16:	2001      	movs	r0, #1
   22b18:	a901      	add	r1, sp, #4
   22b1a:	f7fb f92b 	bl	1dd74 <nrf_modem_os_timedwait>
   22b1e:	b998      	cbnz	r0, 22b48 <nrf_sendto+0x130>
   22b20:	f1b8 0f00 	cmp.w	r8, #0
   22b24:	d0f2      	beq.n	22b0c <nrf_sendto+0xf4>
   22b26:	e007      	b.n	22b38 <nrf_sendto+0x120>
   22b28:	f04f 0801 	mov.w	r8, #1
   22b2c:	e7ce      	b.n	22acc <nrf_sendto+0xb4>
   22b2e:	207a      	movs	r0, #122	; 0x7a
   22b30:	e782      	b.n	22a38 <nrf_sendto+0x20>
   22b32:	f1b8 0f00 	cmp.w	r8, #0
   22b36:	d001      	beq.n	22b3c <nrf_sendto+0x124>
   22b38:	200b      	movs	r0, #11
   22b3a:	e77d      	b.n	22a38 <nrf_sendto+0x20>
   22b3c:	2002      	movs	r0, #2
   22b3e:	a901      	add	r1, sp, #4
   22b40:	f7fb f918 	bl	1dd74 <nrf_modem_os_timedwait>
   22b44:	2800      	cmp	r0, #0
   22b46:	d0d9      	beq.n	22afc <nrf_sendto+0xe4>
   22b48:	f005 feae 	bl	288a8 <abs>
   22b4c:	e774      	b.n	22a38 <nrf_sendto+0x20>
   22b4e:	f8c0 a010 	str.w	sl, [r0, #16]
   22b52:	f1b9 0f00 	cmp.w	r9, #0
   22b56:	d004      	beq.n	22b62 <nrf_sendto+0x14a>
   22b58:	4632      	mov	r2, r6
   22b5a:	4649      	mov	r1, r9
   22b5c:	6800      	ldr	r0, [r0, #0]
   22b5e:	f005 fec5 	bl	288ec <memcpy>
   22b62:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
   22b66:	f1bb 0f00 	cmp.w	fp, #0
   22b6a:	d001      	beq.n	22b70 <nrf_sendto+0x158>
   22b6c:	2300      	movs	r3, #0
   22b6e:	632b      	str	r3, [r5, #48]	; 0x30
   22b70:	b3cf      	cbz	r7, 22be6 <nrf_sendto+0x1ce>
   22b72:	4628      	mov	r0, r5
   22b74:	f004 fd3d 	bl	275f2 <sock_is_stream>
   22b78:	bba8      	cbnz	r0, 22be6 <nrf_sendto+0x1ce>
   22b7a:	2318      	movs	r3, #24
   22b7c:	7260      	strb	r0, [r4, #9]
   22b7e:	7223      	strb	r3, [r4, #8]
   22b80:	72a0      	strb	r0, [r4, #10]
   22b82:	72e0      	strb	r0, [r4, #11]
   22b84:	f8c4 b014 	str.w	fp, [r4, #20]
   22b88:	687b      	ldr	r3, [r7, #4]
   22b8a:	2b01      	cmp	r3, #1
   22b8c:	d012      	beq.n	22bb4 <nrf_sendto+0x19c>
   22b8e:	2b02      	cmp	r3, #2
   22b90:	d018      	beq.n	22bc4 <nrf_sendto+0x1ac>
   22b92:	f247 0b07 	movw	fp, #28679	; 0x7007
   22b96:	4620      	mov	r0, r4
   22b98:	a902      	add	r1, sp, #8
   22b9a:	f005 faa9 	bl	280f0 <req_cookie_set>
   22b9e:	4621      	mov	r1, r4
   22ba0:	4658      	mov	r0, fp
   22ba2:	f005 fa7a 	bl	2809a <req_forward>
   22ba6:	4603      	mov	r3, r0
   22ba8:	bb40      	cbnz	r0, 22bfc <nrf_sendto+0x1e4>
   22baa:	e9dd 0402 	ldrd	r0, r4, [sp, #8]
   22bae:	f004 fc99 	bl	274e4 <rpc_client_msg_rx_free>
   22bb2:	e745      	b.n	22a40 <nrf_sendto+0x28>
   22bb4:	893b      	ldrh	r3, [r7, #8]
   22bb6:	76e0      	strb	r0, [r4, #27]
   22bb8:	8323      	strh	r3, [r4, #24]
   22bba:	2304      	movs	r3, #4
   22bbc:	76a3      	strb	r3, [r4, #26]
   22bbe:	68fb      	ldr	r3, [r7, #12]
   22bc0:	61e3      	str	r3, [r4, #28]
   22bc2:	e7e6      	b.n	22b92 <nrf_sendto+0x17a>
   22bc4:	893b      	ldrh	r3, [r7, #8]
   22bc6:	f104 021c 	add.w	r2, r4, #28
   22bca:	8323      	strh	r3, [r4, #24]
   22bcc:	2310      	movs	r3, #16
   22bce:	76e0      	strb	r0, [r4, #27]
   22bd0:	76a3      	strb	r3, [r4, #26]
   22bd2:	f107 0120 	add.w	r1, r7, #32
   22bd6:	18fb      	adds	r3, r7, r3
   22bd8:	f853 0b04 	ldr.w	r0, [r3], #4
   22bdc:	428b      	cmp	r3, r1
   22bde:	f842 0b04 	str.w	r0, [r2], #4
   22be2:	d1f9      	bne.n	22bd8 <nrf_sendto+0x1c0>
   22be4:	e7d5      	b.n	22b92 <nrf_sendto+0x17a>
   22be6:	2300      	movs	r3, #0
   22be8:	2204      	movs	r2, #4
   22bea:	f8c4 b014 	str.w	fp, [r4, #20]
   22bee:	7222      	strb	r2, [r4, #8]
   22bf0:	f247 0b06 	movw	fp, #28678	; 0x7006
   22bf4:	7263      	strb	r3, [r4, #9]
   22bf6:	72a3      	strb	r3, [r4, #10]
   22bf8:	72e3      	strb	r3, [r4, #11]
   22bfa:	e7cc      	b.n	22b96 <nrf_sendto+0x17e>
   22bfc:	280c      	cmp	r0, #12
   22bfe:	dc0f      	bgt.n	22c20 <nrf_sendto+0x208>
   22c00:	280a      	cmp	r0, #10
   22c02:	dd10      	ble.n	22c26 <nrf_sendto+0x20e>
   22c04:	4b09      	ldr	r3, [pc, #36]	; (22c2c <nrf_sendto+0x214>)
   22c06:	781b      	ldrb	r3, [r3, #0]
   22c08:	b92b      	cbnz	r3, 22c16 <nrf_sendto+0x1fe>
   22c0a:	2001      	movs	r0, #1
   22c0c:	a901      	add	r1, sp, #4
   22c0e:	f7fb f8b1 	bl	1dd74 <nrf_modem_os_timedwait>
   22c12:	2800      	cmp	r0, #0
   22c14:	d198      	bne.n	22b48 <nrf_sendto+0x130>
   22c16:	f1b8 0f00 	cmp.w	r8, #0
   22c1a:	f43f af6f 	beq.w	22afc <nrf_sendto+0xe4>
   22c1e:	e78b      	b.n	22b38 <nrf_sendto+0x120>
   22c20:	288c      	cmp	r0, #140	; 0x8c
   22c22:	f43f af09 	beq.w	22a38 <nrf_sendto+0x20>
   22c26:	4618      	mov	r0, r3
   22c28:	e706      	b.n	22a38 <nrf_sendto+0x20>
   22c2a:	bf00      	nop
   22c2c:	2000de52 	.word	0x2000de52

00022c30 <nrf_setsockopt>:
   22c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22c34:	b085      	sub	sp, #20
   22c36:	4681      	mov	r9, r0
   22c38:	4688      	mov	r8, r1
   22c3a:	4617      	mov	r7, r2
   22c3c:	461e      	mov	r6, r3
   22c3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   22c40:	f7ff fb7c 	bl	2233c <sock_find>
   22c44:	4604      	mov	r4, r0
   22c46:	b938      	cbnz	r0, 22c58 <nrf_setsockopt+0x28>
   22c48:	2009      	movs	r0, #9
   22c4a:	f003 ffb2 	bl	26bb2 <nrf_modem_os_errno_set>
   22c4e:	f04f 30ff 	mov.w	r0, #4294967295
   22c52:	b005      	add	sp, #20
   22c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22c58:	b916      	cbnz	r6, 22c60 <nrf_setsockopt+0x30>
   22c5a:	b10d      	cbz	r5, 22c60 <nrf_setsockopt+0x30>
   22c5c:	2016      	movs	r0, #22
   22c5e:	e7f4      	b.n	22c4a <nrf_setsockopt+0x1a>
   22c60:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   22c64:	f000 80fe 	beq.w	22e64 <nrf_setsockopt+0x234>
   22c68:	dc0c      	bgt.n	22c84 <nrf_setsockopt+0x54>
   22c6a:	f1b8 0f01 	cmp.w	r8, #1
   22c6e:	d012      	beq.n	22c96 <nrf_setsockopt+0x66>
   22c70:	f1b8 0f06 	cmp.w	r8, #6
   22c74:	f000 80f0 	beq.w	22e58 <nrf_setsockopt+0x228>
   22c78:	f1b8 0f00 	cmp.w	r8, #0
   22c7c:	f000 80f0 	beq.w	22e60 <nrf_setsockopt+0x230>
   22c80:	206d      	movs	r0, #109	; 0x6d
   22c82:	e7e2      	b.n	22c4a <nrf_setsockopt+0x1a>
   22c84:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   22c88:	f000 809b 	beq.w	22dc2 <nrf_setsockopt+0x192>
   22c8c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   22c90:	d1f6      	bne.n	22c80 <nrf_setsockopt+0x50>
   22c92:	2f1e      	cmp	r7, #30
   22c94:	e0e1      	b.n	22e5a <nrf_setsockopt+0x22a>
   22c96:	2f3c      	cmp	r7, #60	; 0x3c
   22c98:	dcf2      	bgt.n	22c80 <nrf_setsockopt+0x50>
   22c9a:	2f31      	cmp	r7, #49	; 0x31
   22c9c:	dc0f      	bgt.n	22cbe <nrf_setsockopt+0x8e>
   22c9e:	2f15      	cmp	r7, #21
   22ca0:	d04c      	beq.n	22d3c <nrf_setsockopt+0x10c>
   22ca2:	dc29      	bgt.n	22cf8 <nrf_setsockopt+0xc8>
   22ca4:	2f02      	cmp	r7, #2
   22ca6:	d040      	beq.n	22d2a <nrf_setsockopt+0xfa>
   22ca8:	2f14      	cmp	r7, #20
   22caa:	d1e9      	bne.n	22c80 <nrf_setsockopt+0x50>
   22cac:	f104 0020 	add.w	r0, r4, #32
   22cb0:	2d00      	cmp	r5, #0
   22cb2:	d149      	bne.n	22d48 <nrf_setsockopt+0x118>
   22cb4:	2300      	movs	r3, #0
   22cb6:	6223      	str	r3, [r4, #32]
   22cb8:	6043      	str	r3, [r0, #4]
   22cba:	2000      	movs	r0, #0
   22cbc:	e7c9      	b.n	22c52 <nrf_setsockopt+0x22>
   22cbe:	3f32      	subs	r7, #50	; 0x32
   22cc0:	2f0a      	cmp	r7, #10
   22cc2:	d8dd      	bhi.n	22c80 <nrf_setsockopt+0x50>
   22cc4:	a301      	add	r3, pc, #4	; (adr r3, 22ccc <nrf_setsockopt+0x9c>)
   22cc6:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
   22cca:	bf00      	nop
   22ccc:	00022da3 	.word	0x00022da3
   22cd0:	00022d89 	.word	0x00022d89
   22cd4:	00022d91 	.word	0x00022d91
   22cd8:	00022d97 	.word	0x00022d97
   22cdc:	00022d9d 	.word	0x00022d9d
   22ce0:	00022c81 	.word	0x00022c81
   22ce4:	00022c81 	.word	0x00022c81
   22ce8:	00022c81 	.word	0x00022c81
   22cec:	00022c81 	.word	0x00022c81
   22cf0:	00022c81 	.word	0x00022c81
   22cf4:	00022d59 	.word	0x00022d59
   22cf8:	2f19      	cmp	r7, #25
   22cfa:	d1c1      	bne.n	22c80 <nrf_setsockopt+0x50>
   22cfc:	2e00      	cmp	r6, #0
   22cfe:	d0ad      	beq.n	22c5c <nrf_setsockopt+0x2c>
   22d00:	4869      	ldr	r0, [pc, #420]	; (22ea8 <nrf_setsockopt+0x278>)
   22d02:	f7f6 f973 	bl	18fec <strlen>
   22d06:	4968      	ldr	r1, [pc, #416]	; (22ea8 <nrf_setsockopt+0x278>)
   22d08:	4602      	mov	r2, r0
   22d0a:	4630      	mov	r0, r6
   22d0c:	f005 fdde 	bl	288cc <memcmp>
   22d10:	2800      	cmp	r0, #0
   22d12:	d152      	bne.n	22dba <nrf_setsockopt+0x18a>
   22d14:	4864      	ldr	r0, [pc, #400]	; (22ea8 <nrf_setsockopt+0x278>)
   22d16:	f7f6 f969 	bl	18fec <strlen>
   22d1a:	220a      	movs	r2, #10
   22d1c:	2100      	movs	r1, #0
   22d1e:	4430      	add	r0, r6
   22d20:	f002 fb30 	bl	25384 <strtoul>
   22d24:	2504      	movs	r5, #4
   22d26:	9003      	str	r0, [sp, #12]
   22d28:	ae03      	add	r6, sp, #12
   22d2a:	4628      	mov	r0, r5
   22d2c:	f004 fbb7 	bl	2749e <rpc_client_msg_alloc>
   22d30:	4604      	mov	r4, r0
   22d32:	2800      	cmp	r0, #0
   22d34:	f040 8098 	bne.w	22e68 <nrf_setsockopt+0x238>
   22d38:	2069      	movs	r0, #105	; 0x69
   22d3a:	e786      	b.n	22c4a <nrf_setsockopt+0x1a>
   22d3c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   22d40:	b915      	cbnz	r5, 22d48 <nrf_setsockopt+0x118>
   22d42:	62a5      	str	r5, [r4, #40]	; 0x28
   22d44:	6045      	str	r5, [r0, #4]
   22d46:	e7b8      	b.n	22cba <nrf_setsockopt+0x8a>
   22d48:	2d08      	cmp	r5, #8
   22d4a:	462a      	mov	r2, r5
   22d4c:	4631      	mov	r1, r6
   22d4e:	bf28      	it	cs
   22d50:	2208      	movcs	r2, #8
   22d52:	f005 fdcb 	bl	288ec <memcpy>
   22d56:	e7b0      	b.n	22cba <nrf_setsockopt+0x8a>
   22d58:	b186      	cbz	r6, 22d7c <nrf_setsockopt+0x14c>
   22d5a:	2d08      	cmp	r5, #8
   22d5c:	f47f af7e 	bne.w	22c5c <nrf_setsockopt+0x2c>
   22d60:	f7fe ffd0 	bl	21d04 <rpc_transport_data_rx_suspend>
   22d64:	e896 0003 	ldmia.w	r6, {r0, r1}
   22d68:	f104 0334 	add.w	r3, r4, #52	; 0x34
   22d6c:	e883 0003 	stmia.w	r3, {r0, r1}
   22d70:	4620      	mov	r0, r4
   22d72:	f004 fc01 	bl	27578 <sock_pollcb>
   22d76:	f7fe ffcb 	bl	21d10 <rpc_transport_data_rx_resume>
   22d7a:	e79e      	b.n	22cba <nrf_setsockopt+0x8a>
   22d7c:	2d00      	cmp	r5, #0
   22d7e:	f47f af6d 	bne.w	22c5c <nrf_setsockopt+0x2c>
   22d82:	6365      	str	r5, [r4, #52]	; 0x34
   22d84:	63a5      	str	r5, [r4, #56]	; 0x38
   22d86:	e798      	b.n	22cba <nrf_setsockopt+0x8a>
   22d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   22d8c:	6323      	str	r3, [r4, #48]	; 0x30
   22d8e:	e794      	b.n	22cba <nrf_setsockopt+0x8a>
   22d90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   22d94:	e7fa      	b.n	22d8c <nrf_setsockopt+0x15c>
   22d96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   22d9a:	e7f7      	b.n	22d8c <nrf_setsockopt+0x15c>
   22d9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22da0:	e7f4      	b.n	22d8c <nrf_setsockopt+0x15c>
   22da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   22da6:	6323      	str	r3, [r4, #48]	; 0x30
   22da8:	2300      	movs	r3, #0
   22daa:	4648      	mov	r0, r9
   22dac:	461a      	mov	r2, r3
   22dae:	4619      	mov	r1, r3
   22db0:	e9cd 3300 	strd	r3, r3, [sp]
   22db4:	f7ff fe30 	bl	22a18 <nrf_sendto>
   22db8:	e74b      	b.n	22c52 <nrf_setsockopt+0x22>
   22dba:	220a      	movs	r2, #10
   22dbc:	2100      	movs	r1, #0
   22dbe:	4630      	mov	r0, r6
   22dc0:	e7ae      	b.n	22d20 <nrf_setsockopt+0xf0>
   22dc2:	1e7b      	subs	r3, r7, #1
   22dc4:	2b0d      	cmp	r3, #13
   22dc6:	f63f af5b 	bhi.w	22c80 <nrf_setsockopt+0x50>
   22dca:	a201      	add	r2, pc, #4	; (adr r2, 22dd0 <nrf_setsockopt+0x1a0>)
   22dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22dd0:	00022e19 	.word	0x00022e19
   22dd4:	00022e49 	.word	0x00022e49
   22dd8:	00022d2b 	.word	0x00022d2b
   22ddc:	00022c81 	.word	0x00022c81
   22de0:	00022e39 	.word	0x00022e39
   22de4:	00022e09 	.word	0x00022e09
   22de8:	00022c81 	.word	0x00022c81
   22dec:	00022c81 	.word	0x00022c81
   22df0:	00022c81 	.word	0x00022c81
   22df4:	00022c81 	.word	0x00022c81
   22df8:	00022c81 	.word	0x00022c81
   22dfc:	00022e29 	.word	0x00022e29
   22e00:	00022d2b 	.word	0x00022d2b
   22e04:	00022d2b 	.word	0x00022d2b
   22e08:	462a      	mov	r2, r5
   22e0a:	4631      	mov	r1, r6
   22e0c:	4620      	mov	r0, r4
   22e0e:	b005      	add	sp, #20
   22e10:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e14:	f005 b810 	b.w	27e38 <tls_setopt_role>
   22e18:	462a      	mov	r2, r5
   22e1a:	4631      	mov	r1, r6
   22e1c:	4620      	mov	r0, r4
   22e1e:	b005      	add	sp, #20
   22e20:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e24:	f005 b81c 	b.w	27e60 <tls_setopt_taglist>
   22e28:	462a      	mov	r2, r5
   22e2a:	4631      	mov	r1, r6
   22e2c:	4620      	mov	r0, r4
   22e2e:	b005      	add	sp, #20
   22e30:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e34:	f005 b827 	b.w	27e86 <tls_setopt_sess_cache>
   22e38:	462a      	mov	r2, r5
   22e3a:	4631      	mov	r1, r6
   22e3c:	4620      	mov	r0, r4
   22e3e:	b005      	add	sp, #20
   22e40:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e44:	f005 b831 	b.w	27eaa <tls_setopt_peer_verify>
   22e48:	462a      	mov	r2, r5
   22e4a:	4631      	mov	r1, r6
   22e4c:	4620      	mov	r0, r4
   22e4e:	b005      	add	sp, #20
   22e50:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e54:	f005 b838 	b.w	27ec8 <tls_setopt_hostname>
   22e58:	2f37      	cmp	r7, #55	; 0x37
   22e5a:	f43f af66 	beq.w	22d2a <nrf_setsockopt+0xfa>
   22e5e:	e70f      	b.n	22c80 <nrf_setsockopt+0x50>
   22e60:	2f1f      	cmp	r7, #31
   22e62:	e7fa      	b.n	22e5a <nrf_setsockopt+0x22a>
   22e64:	2f20      	cmp	r7, #32
   22e66:	e7f8      	b.n	22e5a <nrf_setsockopt+0x22a>
   22e68:	2300      	movs	r3, #0
   22e6a:	2208      	movs	r2, #8
   22e6c:	7243      	strb	r3, [r0, #9]
   22e6e:	7202      	strb	r2, [r0, #8]
   22e70:	7283      	strb	r3, [r0, #10]
   22e72:	72c3      	strb	r3, [r0, #11]
   22e74:	f8c0 9010 	str.w	r9, [r0, #16]
   22e78:	4640      	mov	r0, r8
   22e7a:	f005 f8d7 	bl	2802c <nrf_sol_to_rpc_sol>
   22e7e:	6160      	str	r0, [r4, #20]
   22e80:	4638      	mov	r0, r7
   22e82:	f000 f9a3 	bl	231cc <nrf_so_to_rpc_so>
   22e86:	4631      	mov	r1, r6
   22e88:	61a0      	str	r0, [r4, #24]
   22e8a:	462a      	mov	r2, r5
   22e8c:	6820      	ldr	r0, [r4, #0]
   22e8e:	f005 fd2d 	bl	288ec <memcpy>
   22e92:	4621      	mov	r1, r4
   22e94:	f247 0003 	movw	r0, #28675	; 0x7003
   22e98:	6065      	str	r5, [r4, #4]
   22e9a:	f005 f8fe 	bl	2809a <req_forward>
   22e9e:	2800      	cmp	r0, #0
   22ea0:	f43f af0b 	beq.w	22cba <nrf_setsockopt+0x8a>
   22ea4:	e6d1      	b.n	22c4a <nrf_setsockopt+0x1a>
   22ea6:	bf00      	nop
   22ea8:	0002b595 	.word	0x0002b595

00022eac <nrf_getsockopt>:
   22eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22eb0:	9c08      	ldr	r4, [sp, #32]
   22eb2:	4681      	mov	r9, r0
   22eb4:	4688      	mov	r8, r1
   22eb6:	4617      	mov	r7, r2
   22eb8:	461e      	mov	r6, r3
   22eba:	f7ff fa3f 	bl	2233c <sock_find>
   22ebe:	4605      	mov	r5, r0
   22ec0:	b930      	cbnz	r0, 22ed0 <nrf_getsockopt+0x24>
   22ec2:	2009      	movs	r0, #9
   22ec4:	f003 fe75 	bl	26bb2 <nrf_modem_os_errno_set>
   22ec8:	f04f 30ff 	mov.w	r0, #4294967295
   22ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22ed0:	b106      	cbz	r6, 22ed4 <nrf_getsockopt+0x28>
   22ed2:	b90c      	cbnz	r4, 22ed8 <nrf_getsockopt+0x2c>
   22ed4:	200e      	movs	r0, #14
   22ed6:	e7f5      	b.n	22ec4 <nrf_getsockopt+0x18>
   22ed8:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   22edc:	f000 808a 	beq.w	22ff4 <nrf_getsockopt+0x148>
   22ee0:	dc0a      	bgt.n	22ef8 <nrf_getsockopt+0x4c>
   22ee2:	f1b8 0f01 	cmp.w	r8, #1
   22ee6:	d00f      	beq.n	22f08 <nrf_getsockopt+0x5c>
   22ee8:	f1b8 0f06 	cmp.w	r8, #6
   22eec:	d077      	beq.n	22fde <nrf_getsockopt+0x132>
   22eee:	f1b8 0f00 	cmp.w	r8, #0
   22ef2:	d07d      	beq.n	22ff0 <nrf_getsockopt+0x144>
   22ef4:	206d      	movs	r0, #109	; 0x6d
   22ef6:	e7e5      	b.n	22ec4 <nrf_getsockopt+0x18>
   22ef8:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   22efc:	d024      	beq.n	22f48 <nrf_getsockopt+0x9c>
   22efe:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   22f02:	d1f7      	bne.n	22ef4 <nrf_getsockopt+0x48>
   22f04:	2f1e      	cmp	r7, #30
   22f06:	e06b      	b.n	22fe0 <nrf_getsockopt+0x134>
   22f08:	2f14      	cmp	r7, #20
   22f0a:	d00a      	beq.n	22f22 <nrf_getsockopt+0x76>
   22f0c:	2f15      	cmp	r7, #21
   22f0e:	d013      	beq.n	22f38 <nrf_getsockopt+0x8c>
   22f10:	2f04      	cmp	r7, #4
   22f12:	d1ef      	bne.n	22ef4 <nrf_getsockopt+0x48>
   22f14:	6983      	ldr	r3, [r0, #24]
   22f16:	6027      	str	r7, [r4, #0]
   22f18:	6033      	str	r3, [r6, #0]
   22f1a:	2300      	movs	r3, #0
   22f1c:	6183      	str	r3, [r0, #24]
   22f1e:	2000      	movs	r0, #0
   22f20:	e7d4      	b.n	22ecc <nrf_getsockopt+0x20>
   22f22:	6822      	ldr	r2, [r4, #0]
   22f24:	f100 0120 	add.w	r1, r0, #32
   22f28:	2a08      	cmp	r2, #8
   22f2a:	bf28      	it	cs
   22f2c:	2208      	movcs	r2, #8
   22f2e:	6022      	str	r2, [r4, #0]
   22f30:	4630      	mov	r0, r6
   22f32:	f005 fcdb 	bl	288ec <memcpy>
   22f36:	e7f2      	b.n	22f1e <nrf_getsockopt+0x72>
   22f38:	6822      	ldr	r2, [r4, #0]
   22f3a:	f100 0128 	add.w	r1, r0, #40	; 0x28
   22f3e:	2a08      	cmp	r2, #8
   22f40:	bf28      	it	cs
   22f42:	2208      	movcs	r2, #8
   22f44:	6022      	str	r2, [r4, #0]
   22f46:	e7f3      	b.n	22f30 <nrf_getsockopt+0x84>
   22f48:	1e7b      	subs	r3, r7, #1
   22f4a:	2b0d      	cmp	r3, #13
   22f4c:	d8d2      	bhi.n	22ef4 <nrf_getsockopt+0x48>
   22f4e:	a201      	add	r2, pc, #4	; (adr r2, 22f54 <nrf_getsockopt+0xa8>)
   22f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22f54:	00022fad 	.word	0x00022fad
   22f58:	00022fc3 	.word	0x00022fc3
   22f5c:	00022fe3 	.word	0x00022fe3
   22f60:	00022ef5 	.word	0x00022ef5
   22f64:	00022fa3 	.word	0x00022fa3
   22f68:	00022f8d 	.word	0x00022f8d
   22f6c:	00022ef5 	.word	0x00022ef5
   22f70:	00022ef5 	.word	0x00022ef5
   22f74:	00022ef5 	.word	0x00022ef5
   22f78:	00022ef5 	.word	0x00022ef5
   22f7c:	00022ef5 	.word	0x00022ef5
   22f80:	00022f99 	.word	0x00022f99
   22f84:	00022ef5 	.word	0x00022ef5
   22f88:	00022fe3 	.word	0x00022fe3
   22f8c:	2304      	movs	r3, #4
   22f8e:	6023      	str	r3, [r4, #0]
   22f90:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   22f94:	6033      	str	r3, [r6, #0]
   22f96:	e7c2      	b.n	22f1e <nrf_getsockopt+0x72>
   22f98:	2304      	movs	r3, #4
   22f9a:	6023      	str	r3, [r4, #0]
   22f9c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
   22fa0:	e7f8      	b.n	22f94 <nrf_getsockopt+0xe8>
   22fa2:	2304      	movs	r3, #4
   22fa4:	6023      	str	r3, [r4, #0]
   22fa6:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   22faa:	e7f3      	b.n	22f94 <nrf_getsockopt+0xe8>
   22fac:	f890 2047 	ldrb.w	r2, [r0, #71]	; 0x47
   22fb0:	6823      	ldr	r3, [r4, #0]
   22fb2:	0092      	lsls	r2, r2, #2
   22fb4:	429a      	cmp	r2, r3
   22fb6:	bf28      	it	cs
   22fb8:	461a      	movcs	r2, r3
   22fba:	f100 0148 	add.w	r1, r0, #72	; 0x48
   22fbe:	6022      	str	r2, [r4, #0]
   22fc0:	e7b6      	b.n	22f30 <nrf_getsockopt+0x84>
   22fc2:	6c00      	ldr	r0, [r0, #64]	; 0x40
   22fc4:	f7f6 f812 	bl	18fec <strlen>
   22fc8:	6822      	ldr	r2, [r4, #0]
   22fca:	3001      	adds	r0, #1
   22fcc:	4290      	cmp	r0, r2
   22fce:	d203      	bcs.n	22fd8 <nrf_getsockopt+0x12c>
   22fd0:	6c28      	ldr	r0, [r5, #64]	; 0x40
   22fd2:	f7f6 f80b 	bl	18fec <strlen>
   22fd6:	1c42      	adds	r2, r0, #1
   22fd8:	6c29      	ldr	r1, [r5, #64]	; 0x40
   22fda:	6022      	str	r2, [r4, #0]
   22fdc:	e7a8      	b.n	22f30 <nrf_getsockopt+0x84>
   22fde:	2f37      	cmp	r7, #55	; 0x37
   22fe0:	d188      	bne.n	22ef4 <nrf_getsockopt+0x48>
   22fe2:	6820      	ldr	r0, [r4, #0]
   22fe4:	f004 fa5b 	bl	2749e <rpc_client_msg_alloc>
   22fe8:	4605      	mov	r5, r0
   22fea:	b928      	cbnz	r0, 22ff8 <nrf_getsockopt+0x14c>
   22fec:	2069      	movs	r0, #105	; 0x69
   22fee:	e769      	b.n	22ec4 <nrf_getsockopt+0x18>
   22ff0:	2f1f      	cmp	r7, #31
   22ff2:	e7f5      	b.n	22fe0 <nrf_getsockopt+0x134>
   22ff4:	2f20      	cmp	r7, #32
   22ff6:	e7f3      	b.n	22fe0 <nrf_getsockopt+0x134>
   22ff8:	2300      	movs	r3, #0
   22ffa:	2208      	movs	r2, #8
   22ffc:	7243      	strb	r3, [r0, #9]
   22ffe:	7202      	strb	r2, [r0, #8]
   23000:	7283      	strb	r3, [r0, #10]
   23002:	72c3      	strb	r3, [r0, #11]
   23004:	f8c0 9010 	str.w	r9, [r0, #16]
   23008:	4640      	mov	r0, r8
   2300a:	f005 f80f 	bl	2802c <nrf_sol_to_rpc_sol>
   2300e:	6168      	str	r0, [r5, #20]
   23010:	4638      	mov	r0, r7
   23012:	f000 f8db 	bl	231cc <nrf_so_to_rpc_so>
   23016:	4629      	mov	r1, r5
   23018:	61a8      	str	r0, [r5, #24]
   2301a:	f247 0004 	movw	r0, #28676	; 0x7004
   2301e:	682f      	ldr	r7, [r5, #0]
   23020:	f005 f83b 	bl	2809a <req_forward>
   23024:	2800      	cmp	r0, #0
   23026:	f47f af4d 	bne.w	22ec4 <nrf_getsockopt+0x18>
   2302a:	686a      	ldr	r2, [r5, #4]
   2302c:	6823      	ldr	r3, [r4, #0]
   2302e:	4639      	mov	r1, r7
   23030:	429a      	cmp	r2, r3
   23032:	bf28      	it	cs
   23034:	461a      	movcs	r2, r3
   23036:	4630      	mov	r0, r6
   23038:	6022      	str	r2, [r4, #0]
   2303a:	f005 fc57 	bl	288ec <memcpy>
   2303e:	4638      	mov	r0, r7
   23040:	f004 fa59 	bl	274f6 <rpc_client_msg_data_tx_free>
   23044:	e76b      	b.n	22f1e <nrf_getsockopt+0x72>
   23046:	bf00      	nop

00023048 <rpc_ip_init>:
   23048:	b508      	push	{r3, lr}
   2304a:	f7ff f935 	bl	222b8 <sock_init>
   2304e:	f7ff f9eb 	bl	22428 <addrinfo_init>
   23052:	2200      	movs	r2, #0
   23054:	4b05      	ldr	r3, [pc, #20]	; (2306c <rpc_ip_init+0x24>)
   23056:	4806      	ldr	r0, [pc, #24]	; (23070 <rpc_ip_init+0x28>)
   23058:	701a      	strb	r2, [r3, #0]
   2305a:	2201      	movs	r2, #1
   2305c:	4611      	mov	r1, r2
   2305e:	f7fa ff4b 	bl	1def8 <nrf_modem_os_sem_init>
   23062:	2800      	cmp	r0, #0
   23064:	bf18      	it	ne
   23066:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   2306a:	bd08      	pop	{r3, pc}
   2306c:	2000de52 	.word	0x2000de52
   23070:	2000d854 	.word	0x2000d854

00023074 <on_tls_attach_res>:
   23074:	b510      	push	{r4, lr}
   23076:	6943      	ldr	r3, [r0, #20]
   23078:	460c      	mov	r4, r1
   2307a:	b15b      	cbz	r3, 23094 <on_tls_attach_res+0x20>
   2307c:	7f0b      	ldrb	r3, [r1, #28]
   2307e:	f36f 1304 	bfc	r3, #4, #1
   23082:	770b      	strb	r3, [r1, #28]
   23084:	6940      	ldr	r0, [r0, #20]
   23086:	f000 f8ad 	bl	231e4 <rpc_error_to_nrf_errno>
   2308a:	4b03      	ldr	r3, [pc, #12]	; (23098 <on_tls_attach_res+0x24>)
   2308c:	61a0      	str	r0, [r4, #24]
   2308e:	6818      	ldr	r0, [r3, #0]
   23090:	f003 fd97 	bl	26bc2 <nrf_modem_os_sem_give>
   23094:	2000      	movs	r0, #0
   23096:	bd10      	pop	{r4, pc}
   23098:	2000d854 	.word	0x2000d854

0002309c <on_tls_handshake_ntf>:
   2309c:	b510      	push	{r4, lr}
   2309e:	7f0b      	ldrb	r3, [r1, #28]
   230a0:	460c      	mov	r4, r1
   230a2:	f36f 1304 	bfc	r3, #4, #1
   230a6:	770b      	strb	r3, [r1, #28]
   230a8:	6900      	ldr	r0, [r0, #16]
   230aa:	b958      	cbnz	r0, 230c4 <on_tls_handshake_ntf+0x28>
   230ac:	b2db      	uxtb	r3, r3
   230ae:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   230b2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   230b6:	770b      	strb	r3, [r1, #28]
   230b8:	4b04      	ldr	r3, [pc, #16]	; (230cc <on_tls_handshake_ntf+0x30>)
   230ba:	6818      	ldr	r0, [r3, #0]
   230bc:	f003 fd81 	bl	26bc2 <nrf_modem_os_sem_give>
   230c0:	2000      	movs	r0, #0
   230c2:	bd10      	pop	{r4, pc}
   230c4:	f000 f88e 	bl	231e4 <rpc_error_to_nrf_errno>
   230c8:	61a0      	str	r0, [r4, #24]
   230ca:	e7f5      	b.n	230b8 <on_tls_handshake_ntf+0x1c>
   230cc:	2000d854 	.word	0x2000d854

000230d0 <tls_attach>:
   230d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   230d4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 231b8 <tls_attach+0xe8>
   230d8:	4605      	mov	r5, r0
   230da:	f8d8 0000 	ldr.w	r0, [r8]
   230de:	9101      	str	r1, [sp, #4]
   230e0:	f003 fd71 	bl	26bc6 <nrf_modem_os_sem_take>
   230e4:	4607      	mov	r7, r0
   230e6:	b150      	cbz	r0, 230fe <tls_attach+0x2e>
   230e8:	9b01      	ldr	r3, [sp, #4]
   230ea:	2b00      	cmp	r3, #0
   230ec:	d162      	bne.n	231b4 <tls_attach+0xe4>
   230ee:	2310      	movs	r3, #16
   230f0:	61ab      	str	r3, [r5, #24]
   230f2:	f04f 37ff 	mov.w	r7, #4294967295
   230f6:	4638      	mov	r0, r7
   230f8:	b002      	add	sp, #8
   230fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   230fe:	6c28      	ldr	r0, [r5, #64]	; 0x40
   23100:	b1a8      	cbz	r0, 2312e <tls_attach+0x5e>
   23102:	f7f5 ff73 	bl	18fec <strlen>
   23106:	1c46      	adds	r6, r0, #1
   23108:	4630      	mov	r0, r6
   2310a:	f004 f9c8 	bl	2749e <rpc_client_msg_alloc>
   2310e:	4604      	mov	r4, r0
   23110:	b978      	cbnz	r0, 23132 <tls_attach+0x62>
   23112:	4628      	mov	r0, r5
   23114:	f004 fa94 	bl	27640 <sock_is_nonblock>
   23118:	b108      	cbz	r0, 2311e <tls_attach+0x4e>
   2311a:	2369      	movs	r3, #105	; 0x69
   2311c:	61ab      	str	r3, [r5, #24]
   2311e:	f8d8 0000 	ldr.w	r0, [r8]
   23122:	f003 fd4e 	bl	26bc2 <nrf_modem_os_sem_give>
   23126:	2069      	movs	r0, #105	; 0x69
   23128:	f003 fd43 	bl	26bb2 <nrf_modem_os_errno_set>
   2312c:	e7e1      	b.n	230f2 <tls_attach+0x22>
   2312e:	463e      	mov	r6, r7
   23130:	e7ea      	b.n	23108 <tls_attach+0x38>
   23132:	682b      	ldr	r3, [r5, #0]
   23134:	2204      	movs	r2, #4
   23136:	6103      	str	r3, [r0, #16]
   23138:	2300      	movs	r3, #0
   2313a:	7202      	strb	r2, [r0, #8]
   2313c:	7243      	strb	r3, [r0, #9]
   2313e:	7283      	strb	r3, [r0, #10]
   23140:	72c3      	strb	r3, [r0, #11]
   23142:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
   23146:	f105 0144 	add.w	r1, r5, #68	; 0x44
   2314a:	3201      	adds	r2, #1
   2314c:	0092      	lsls	r2, r2, #2
   2314e:	6082      	str	r2, [r0, #8]
   23150:	3014      	adds	r0, #20
   23152:	f005 fbcb 	bl	288ec <memcpy>
   23156:	b1e6      	cbz	r6, 23192 <tls_attach+0xc2>
   23158:	4632      	mov	r2, r6
   2315a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   2315c:	6820      	ldr	r0, [r4, #0]
   2315e:	f005 fc01 	bl	28964 <strncpy>
   23162:	6066      	str	r6, [r4, #4]
   23164:	7f2b      	ldrb	r3, [r5, #28]
   23166:	2004      	movs	r0, #4
   23168:	f043 0310 	orr.w	r3, r3, #16
   2316c:	4622      	mov	r2, r4
   2316e:	f247 0181 	movw	r1, #28801	; 0x7081
   23172:	772b      	strb	r3, [r5, #28]
   23174:	f004 f9af 	bl	274d6 <rpc_client_msg_send>
   23178:	4628      	mov	r0, r5
   2317a:	f004 fa61 	bl	27640 <sock_is_nonblock>
   2317e:	2800      	cmp	r0, #0
   23180:	d1b9      	bne.n	230f6 <tls_attach+0x26>
   23182:	4628      	mov	r0, r5
   23184:	f004 fa58 	bl	27638 <sock_is_attaching>
   23188:	b940      	cbnz	r0, 2319c <tls_attach+0xcc>
   2318a:	69a8      	ldr	r0, [r5, #24]
   2318c:	2800      	cmp	r0, #0
   2318e:	d0b2      	beq.n	230f6 <tls_attach+0x26>
   23190:	e7ca      	b.n	23128 <tls_attach+0x58>
   23192:	7026      	strb	r6, [r4, #0]
   23194:	7066      	strb	r6, [r4, #1]
   23196:	70a6      	strb	r6, [r4, #2]
   23198:	70e6      	strb	r6, [r4, #3]
   2319a:	e7e2      	b.n	23162 <tls_attach+0x92>
   2319c:	2002      	movs	r0, #2
   2319e:	a901      	add	r1, sp, #4
   231a0:	f7fa fde8 	bl	1dd74 <nrf_modem_os_timedwait>
   231a4:	f110 0f0b 	cmn.w	r0, #11
   231a8:	d004      	beq.n	231b4 <tls_attach+0xe4>
   231aa:	2800      	cmp	r0, #0
   231ac:	d0e9      	beq.n	23182 <tls_attach+0xb2>
   231ae:	f005 fb7b 	bl	288a8 <abs>
   231b2:	e7b9      	b.n	23128 <tls_attach+0x58>
   231b4:	2074      	movs	r0, #116	; 0x74
   231b6:	e7b7      	b.n	23128 <tls_attach+0x58>
   231b8:	2000d854 	.word	0x2000d854

000231bc <nrf_af_to_rpc_af>:
   231bc:	2803      	cmp	r0, #3
   231be:	bf9c      	itt	ls
   231c0:	4b01      	ldrls	r3, [pc, #4]	; (231c8 <nrf_af_to_rpc_af+0xc>)
   231c2:	5618      	ldrsbls	r0, [r3, r0]
   231c4:	4770      	bx	lr
   231c6:	bf00      	nop
   231c8:	0002b599 	.word	0x0002b599

000231cc <nrf_so_to_rpc_so>:
   231cc:	3802      	subs	r0, #2
   231ce:	2835      	cmp	r0, #53	; 0x35
   231d0:	bf9a      	itte	ls
   231d2:	4b03      	ldrls	r3, [pc, #12]	; (231e0 <nrf_so_to_rpc_so+0x14>)
   231d4:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   231d8:	f04f 30ff 	movhi.w	r0, #4294967295
   231dc:	4770      	bx	lr
   231de:	bf00      	nop
   231e0:	0002965c 	.word	0x0002965c

000231e4 <rpc_error_to_nrf_errno>:
   231e4:	286c      	cmp	r0, #108	; 0x6c
   231e6:	bf9a      	itte	ls
   231e8:	4b02      	ldrls	r3, [pc, #8]	; (231f4 <rpc_error_to_nrf_errno+0x10>)
   231ea:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   231ee:	4802      	ldrhi	r0, [pc, #8]	; (231f8 <rpc_error_to_nrf_errno+0x14>)
   231f0:	4770      	bx	lr
   231f2:	bf00      	nop
   231f4:	000294a8 	.word	0x000294a8
   231f8:	baadbaad 	.word	0xbaadbaad

000231fc <at_cmd_send>:
   231fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23200:	4605      	mov	r5, r0
   23202:	2000      	movs	r0, #0
   23204:	4617      	mov	r7, r2
   23206:	4688      	mov	r8, r1
   23208:	461e      	mov	r6, r3
   2320a:	f004 f948 	bl	2749e <rpc_client_msg_alloc>
   2320e:	4602      	mov	r2, r0
   23210:	b940      	cbnz	r0, 23224 <at_cmd_send+0x28>
   23212:	b115      	cbz	r5, 2321a <at_cmd_send+0x1e>
   23214:	4628      	mov	r0, r5
   23216:	f004 f96e 	bl	274f6 <rpc_client_msg_data_tx_free>
   2321a:	f06f 000b 	mvn.w	r0, #11
   2321e:	b002      	add	sp, #8
   23220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23224:	f06f 0358 	mvn.w	r3, #88	; 0x58
   23228:	2400      	movs	r4, #0
   2322a:	7303      	strb	r3, [r0, #12]
   2322c:	2304      	movs	r3, #4
   2322e:	6005      	str	r5, [r0, #0]
   23230:	4d0e      	ldr	r5, [pc, #56]	; (2326c <at_cmd_send+0x70>)
   23232:	7203      	strb	r3, [r0, #8]
   23234:	7344      	strb	r4, [r0, #13]
   23236:	7384      	strb	r4, [r0, #14]
   23238:	73c4      	strb	r4, [r0, #15]
   2323a:	7244      	strb	r4, [r0, #9]
   2323c:	7284      	strb	r4, [r0, #10]
   2323e:	72c4      	strb	r4, [r0, #11]
   23240:	f8c0 8004 	str.w	r8, [r0, #4]
   23244:	4639      	mov	r1, r7
   23246:	2003      	movs	r0, #3
   23248:	702c      	strb	r4, [r5, #0]
   2324a:	f004 f944 	bl	274d6 <rpc_client_msg_send>
   2324e:	f04f 33ff 	mov.w	r3, #4294967295
   23252:	9301      	str	r3, [sp, #4]
   23254:	782b      	ldrb	r3, [r5, #0]
   23256:	42b3      	cmp	r3, r6
   23258:	d101      	bne.n	2325e <at_cmd_send+0x62>
   2325a:	2000      	movs	r0, #0
   2325c:	e7df      	b.n	2321e <at_cmd_send+0x22>
   2325e:	2002      	movs	r0, #2
   23260:	a901      	add	r1, sp, #4
   23262:	f7fa fd87 	bl	1dd74 <nrf_modem_os_timedwait>
   23266:	2800      	cmp	r0, #0
   23268:	d0f4      	beq.n	23254 <at_cmd_send+0x58>
   2326a:	e7d8      	b.n	2321e <at_cmd_send+0x22>
   2326c:	2000de53 	.word	0x2000de53

00023270 <at_response_match>:
   23270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23272:	4605      	mov	r5, r0
   23274:	2400      	movs	r4, #0
   23276:	4f0f      	ldr	r7, [pc, #60]	; (232b4 <at_response_match+0x44>)
   23278:	f857 6b04 	ldr.w	r6, [r7], #4
   2327c:	4628      	mov	r0, r5
   2327e:	4631      	mov	r1, r6
   23280:	f005 fb8f 	bl	289a2 <strstr>
   23284:	b928      	cbnz	r0, 23292 <at_response_match+0x22>
   23286:	3401      	adds	r4, #1
   23288:	2c04      	cmp	r4, #4
   2328a:	d1f5      	bne.n	23278 <at_response_match+0x8>
   2328c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   23290:	e00d      	b.n	232ae <at_response_match+0x3e>
   23292:	b16c      	cbz	r4, 232b0 <at_response_match+0x40>
   23294:	1ea3      	subs	r3, r4, #2
   23296:	2b01      	cmp	r3, #1
   23298:	d8f8      	bhi.n	2328c <at_response_match+0x1c>
   2329a:	4630      	mov	r0, r6
   2329c:	f7f5 fea6 	bl	18fec <strlen>
   232a0:	220a      	movs	r2, #10
   232a2:	2100      	movs	r1, #0
   232a4:	4428      	add	r0, r5
   232a6:	f001 ff53 	bl	25150 <strtol>
   232aa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   232ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   232b0:	4620      	mov	r0, r4
   232b2:	e7fc      	b.n	232ae <at_response_match+0x3e>
   232b4:	00029734 	.word	0x00029734

000232b8 <at_vsprintf>:
   232b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   232bc:	2500      	movs	r5, #0
   232be:	4681      	mov	r9, r0
   232c0:	460f      	mov	r7, r1
   232c2:	4810      	ldr	r0, [pc, #64]	; (23304 <at_vsprintf+0x4c>)
   232c4:	4629      	mov	r1, r5
   232c6:	4690      	mov	r8, r2
   232c8:	461e      	mov	r6, r3
   232ca:	9301      	str	r3, [sp, #4]
   232cc:	f002 f864 	bl	25398 <vsniprintf>
   232d0:	1e04      	subs	r4, r0, #0
   232d2:	db11      	blt.n	232f8 <at_vsprintf+0x40>
   232d4:	3401      	adds	r4, #1
   232d6:	4620      	mov	r0, r4
   232d8:	f004 f90b 	bl	274f2 <rpc_client_msg_data_tx_alloc>
   232dc:	f8c9 0000 	str.w	r0, [r9]
   232e0:	b168      	cbz	r0, 232fe <at_vsprintf+0x46>
   232e2:	4633      	mov	r3, r6
   232e4:	4642      	mov	r2, r8
   232e6:	4621      	mov	r1, r4
   232e8:	9601      	str	r6, [sp, #4]
   232ea:	f002 f855 	bl	25398 <vsniprintf>
   232ee:	4628      	mov	r0, r5
   232f0:	603c      	str	r4, [r7, #0]
   232f2:	b003      	add	sp, #12
   232f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   232f8:	f06f 0015 	mvn.w	r0, #21
   232fc:	e7f9      	b.n	232f2 <at_vsprintf+0x3a>
   232fe:	f06f 000b 	mvn.w	r0, #11
   23302:	e7f6      	b.n	232f2 <at_vsprintf+0x3a>
   23304:	00029130 	.word	0x00029130

00023308 <nrf_modem_at_notif_handler_set>:
   23308:	4b01      	ldr	r3, [pc, #4]	; (23310 <nrf_modem_at_notif_handler_set+0x8>)
   2330a:	6018      	str	r0, [r3, #0]
   2330c:	2000      	movs	r0, #0
   2330e:	4770      	bx	lr
   23310:	2000d864 	.word	0x2000d864

00023314 <nrf_modem_at_printf>:
   23314:	b40f      	push	{r0, r1, r2, r3}
   23316:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   23318:	9c08      	ldr	r4, [sp, #32]
   2331a:	f000 fa69 	bl	237f0 <nrf_modem_state_is_initialized>
   2331e:	2800      	cmp	r0, #0
   23320:	d039      	beq.n	23396 <nrf_modem_at_printf+0x82>
   23322:	2c00      	cmp	r4, #0
   23324:	d03a      	beq.n	2339c <nrf_modem_at_printf+0x88>
   23326:	4622      	mov	r2, r4
   23328:	ab09      	add	r3, sp, #36	; 0x24
   2332a:	a903      	add	r1, sp, #12
   2332c:	a802      	add	r0, sp, #8
   2332e:	9301      	str	r3, [sp, #4]
   23330:	f7ff ffc2 	bl	232b8 <at_vsprintf>
   23334:	4604      	mov	r4, r0
   23336:	b960      	cbnz	r0, 23352 <nrf_modem_at_printf+0x3e>
   23338:	4e1a      	ldr	r6, [pc, #104]	; (233a4 <nrf_modem_at_printf+0x90>)
   2333a:	f04f 31ff 	mov.w	r1, #4294967295
   2333e:	6830      	ldr	r0, [r6, #0]
   23340:	f003 fc41 	bl	26bc6 <nrf_modem_os_sem_take>
   23344:	4603      	mov	r3, r0
   23346:	9802      	ldr	r0, [sp, #8]
   23348:	b14b      	cbz	r3, 2335e <nrf_modem_at_printf+0x4a>
   2334a:	f004 f8d4 	bl	274f6 <rpc_client_msg_data_tx_free>
   2334e:	f06f 040a 	mvn.w	r4, #10
   23352:	4620      	mov	r0, r4
   23354:	b004      	add	sp, #16
   23356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2335a:	b004      	add	sp, #16
   2335c:	4770      	bx	lr
   2335e:	2302      	movs	r3, #2
   23360:	2201      	movs	r2, #1
   23362:	9903      	ldr	r1, [sp, #12]
   23364:	f7ff ff4a 	bl	231fc <at_cmd_send>
   23368:	4604      	mov	r4, r0
   2336a:	b118      	cbz	r0, 23374 <nrf_modem_at_printf+0x60>
   2336c:	6830      	ldr	r0, [r6, #0]
   2336e:	f003 fc28 	bl	26bc2 <nrf_modem_os_sem_give>
   23372:	e7ee      	b.n	23352 <nrf_modem_at_printf+0x3e>
   23374:	4d0c      	ldr	r5, [pc, #48]	; (233a8 <nrf_modem_at_printf+0x94>)
   23376:	682b      	ldr	r3, [r5, #0]
   23378:	6818      	ldr	r0, [r3, #0]
   2337a:	f7ff ff79 	bl	23270 <at_response_match>
   2337e:	4604      	mov	r4, r0
   23380:	6830      	ldr	r0, [r6, #0]
   23382:	f003 fc1e 	bl	26bc2 <nrf_modem_os_sem_give>
   23386:	682b      	ldr	r3, [r5, #0]
   23388:	6818      	ldr	r0, [r3, #0]
   2338a:	f004 f8ae 	bl	274ea <rpc_client_msg_data_rx_free>
   2338e:	6828      	ldr	r0, [r5, #0]
   23390:	f004 f8a8 	bl	274e4 <rpc_client_msg_rx_free>
   23394:	e7dd      	b.n	23352 <nrf_modem_at_printf+0x3e>
   23396:	f04f 34ff 	mov.w	r4, #4294967295
   2339a:	e7da      	b.n	23352 <nrf_modem_at_printf+0x3e>
   2339c:	f06f 040d 	mvn.w	r4, #13
   233a0:	e7d7      	b.n	23352 <nrf_modem_at_printf+0x3e>
   233a2:	bf00      	nop
   233a4:	2000d86c 	.word	0x2000d86c
   233a8:	2000d868 	.word	0x2000d868

000233ac <nrf_modem_at_cmd>:
   233ac:	b40c      	push	{r2, r3}
   233ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   233b2:	b085      	sub	sp, #20
   233b4:	4606      	mov	r6, r0
   233b6:	460d      	mov	r5, r1
   233b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   233ba:	f000 fa19 	bl	237f0 <nrf_modem_state_is_initialized>
   233be:	2800      	cmp	r0, #0
   233c0:	f000 8081 	beq.w	234c6 <nrf_modem_at_cmd+0x11a>
   233c4:	2e00      	cmp	r6, #0
   233c6:	f000 8081 	beq.w	234cc <nrf_modem_at_cmd+0x120>
   233ca:	2c00      	cmp	r4, #0
   233cc:	d07e      	beq.n	234cc <nrf_modem_at_cmd+0x120>
   233ce:	2d00      	cmp	r5, #0
   233d0:	d07f      	beq.n	234d2 <nrf_modem_at_cmd+0x126>
   233d2:	4622      	mov	r2, r4
   233d4:	ab0f      	add	r3, sp, #60	; 0x3c
   233d6:	a903      	add	r1, sp, #12
   233d8:	a802      	add	r0, sp, #8
   233da:	9301      	str	r3, [sp, #4]
   233dc:	f7ff ff6c 	bl	232b8 <at_vsprintf>
   233e0:	4604      	mov	r4, r0
   233e2:	2800      	cmp	r0, #0
   233e4:	d13c      	bne.n	23460 <nrf_modem_at_cmd+0xb4>
   233e6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 234d8 <nrf_modem_at_cmd+0x12c>
   233ea:	9f02      	ldr	r7, [sp, #8]
   233ec:	f8d8 3000 	ldr.w	r3, [r8]
   233f0:	b1c3      	cbz	r3, 23424 <nrf_modem_at_cmd+0x78>
   233f2:	f04f 0b0c 	mov.w	fp, #12
   233f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 234dc <nrf_modem_at_cmd+0x130>
   233fa:	f8da 3000 	ldr.w	r3, [sl]
   233fe:	429c      	cmp	r4, r3
   23400:	d210      	bcs.n	23424 <nrf_modem_at_cmd+0x78>
   23402:	fb0b f904 	mul.w	r9, fp, r4
   23406:	f8d8 3000 	ldr.w	r3, [r8]
   2340a:	4638      	mov	r0, r7
   2340c:	f853 1009 	ldr.w	r1, [r3, r9]
   23410:	f005 fac7 	bl	289a2 <strstr>
   23414:	b1a8      	cbz	r0, 23442 <nrf_modem_at_cmd+0x96>
   23416:	f8d8 3000 	ldr.w	r3, [r8]
   2341a:	444b      	add	r3, r9
   2341c:	7a1a      	ldrb	r2, [r3, #8]
   2341e:	b982      	cbnz	r2, 23442 <nrf_modem_at_cmd+0x96>
   23420:	685b      	ldr	r3, [r3, #4]
   23422:	b983      	cbnz	r3, 23446 <nrf_modem_at_cmd+0x9a>
   23424:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 234e0 <nrf_modem_at_cmd+0x134>
   23428:	f04f 31ff 	mov.w	r1, #4294967295
   2342c:	f8d8 0000 	ldr.w	r0, [r8]
   23430:	f003 fbc9 	bl	26bc6 <nrf_modem_os_sem_take>
   23434:	b1d0      	cbz	r0, 2346c <nrf_modem_at_cmd+0xc0>
   23436:	4638      	mov	r0, r7
   23438:	f004 f85d 	bl	274f6 <rpc_client_msg_data_tx_free>
   2343c:	f06f 040a 	mvn.w	r4, #10
   23440:	e00e      	b.n	23460 <nrf_modem_at_cmd+0xb4>
   23442:	3401      	adds	r4, #1
   23444:	e7d9      	b.n	233fa <nrf_modem_at_cmd+0x4e>
   23446:	463a      	mov	r2, r7
   23448:	4629      	mov	r1, r5
   2344a:	4630      	mov	r0, r6
   2344c:	4798      	blx	r3
   2344e:	4604      	mov	r4, r0
   23450:	b918      	cbnz	r0, 2345a <nrf_modem_at_cmd+0xae>
   23452:	4630      	mov	r0, r6
   23454:	f7ff ff0c 	bl	23270 <at_response_match>
   23458:	4604      	mov	r4, r0
   2345a:	4638      	mov	r0, r7
   2345c:	f004 f84b 	bl	274f6 <rpc_client_msg_data_tx_free>
   23460:	4620      	mov	r0, r4
   23462:	b005      	add	sp, #20
   23464:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23468:	b002      	add	sp, #8
   2346a:	4770      	bx	lr
   2346c:	2302      	movs	r3, #2
   2346e:	2201      	movs	r2, #1
   23470:	4638      	mov	r0, r7
   23472:	9903      	ldr	r1, [sp, #12]
   23474:	f7ff fec2 	bl	231fc <at_cmd_send>
   23478:	4604      	mov	r4, r0
   2347a:	b120      	cbz	r0, 23486 <nrf_modem_at_cmd+0xda>
   2347c:	f8d8 0000 	ldr.w	r0, [r8]
   23480:	f003 fb9f 	bl	26bc2 <nrf_modem_os_sem_give>
   23484:	e7ec      	b.n	23460 <nrf_modem_at_cmd+0xb4>
   23486:	4f17      	ldr	r7, [pc, #92]	; (234e4 <nrf_modem_at_cmd+0x138>)
   23488:	4630      	mov	r0, r6
   2348a:	683c      	ldr	r4, [r7, #0]
   2348c:	6862      	ldr	r2, [r4, #4]
   2348e:	6821      	ldr	r1, [r4, #0]
   23490:	42aa      	cmp	r2, r5
   23492:	bf28      	it	cs
   23494:	462a      	movcs	r2, r5
   23496:	f005 fa29 	bl	288ec <memcpy>
   2349a:	6863      	ldr	r3, [r4, #4]
   2349c:	42ab      	cmp	r3, r5
   2349e:	d80f      	bhi.n	234c0 <nrf_modem_at_cmd+0x114>
   234a0:	6820      	ldr	r0, [r4, #0]
   234a2:	f7ff fee5 	bl	23270 <at_response_match>
   234a6:	4604      	mov	r4, r0
   234a8:	f8d8 0000 	ldr.w	r0, [r8]
   234ac:	f003 fb89 	bl	26bc2 <nrf_modem_os_sem_give>
   234b0:	683b      	ldr	r3, [r7, #0]
   234b2:	6818      	ldr	r0, [r3, #0]
   234b4:	f004 f819 	bl	274ea <rpc_client_msg_data_rx_free>
   234b8:	6838      	ldr	r0, [r7, #0]
   234ba:	f004 f813 	bl	274e4 <rpc_client_msg_rx_free>
   234be:	e7cf      	b.n	23460 <nrf_modem_at_cmd+0xb4>
   234c0:	f06f 0406 	mvn.w	r4, #6
   234c4:	e7f0      	b.n	234a8 <nrf_modem_at_cmd+0xfc>
   234c6:	f04f 34ff 	mov.w	r4, #4294967295
   234ca:	e7c9      	b.n	23460 <nrf_modem_at_cmd+0xb4>
   234cc:	f06f 040d 	mvn.w	r4, #13
   234d0:	e7c6      	b.n	23460 <nrf_modem_at_cmd+0xb4>
   234d2:	f06f 0415 	mvn.w	r4, #21
   234d6:	e7c3      	b.n	23460 <nrf_modem_at_cmd+0xb4>
   234d8:	2000d85c 	.word	0x2000d85c
   234dc:	2000d858 	.word	0x2000d858
   234e0:	2000d86c 	.word	0x2000d86c
   234e4:	2000d868 	.word	0x2000d868

000234e8 <rpc_at_event_handler>:
   234e8:	b538      	push	{r3, r4, r5, lr}
   234ea:	68c3      	ldr	r3, [r0, #12]
   234ec:	4604      	mov	r4, r0
   234ee:	2ba7      	cmp	r3, #167	; 0xa7
   234f0:	d003      	beq.n	234fa <rpc_at_event_handler+0x12>
   234f2:	6820      	ldr	r0, [r4, #0]
   234f4:	f003 fff9 	bl	274ea <rpc_client_msg_data_rx_free>
   234f8:	e008      	b.n	2350c <rpc_at_event_handler+0x24>
   234fa:	2903      	cmp	r1, #3
   234fc:	d008      	beq.n	23510 <rpc_at_event_handler+0x28>
   234fe:	2904      	cmp	r1, #4
   23500:	d021      	beq.n	23546 <rpc_at_event_handler+0x5e>
   23502:	2902      	cmp	r1, #2
   23504:	bf02      	ittt	eq
   23506:	2201      	moveq	r2, #1
   23508:	4b12      	ldreq	r3, [pc, #72]	; (23554 <rpc_at_event_handler+0x6c>)
   2350a:	701a      	strbeq	r2, [r3, #0]
   2350c:	2000      	movs	r0, #0
   2350e:	bd38      	pop	{r3, r4, r5, pc}
   23510:	4d11      	ldr	r5, [pc, #68]	; (23558 <rpc_at_event_handler+0x70>)
   23512:	682b      	ldr	r3, [r5, #0]
   23514:	b13b      	cbz	r3, 23526 <rpc_at_event_handler+0x3e>
   23516:	6800      	ldr	r0, [r0, #0]
   23518:	4798      	blx	r3
   2351a:	2300      	movs	r3, #0
   2351c:	6820      	ldr	r0, [r4, #0]
   2351e:	602b      	str	r3, [r5, #0]
   23520:	f003 ffe3 	bl	274ea <rpc_client_msg_data_rx_free>
   23524:	e006      	b.n	23534 <rpc_at_event_handler+0x4c>
   23526:	4b0b      	ldr	r3, [pc, #44]	; (23554 <rpc_at_event_handler+0x6c>)
   23528:	781a      	ldrb	r2, [r3, #0]
   2352a:	2a02      	cmp	r2, #2
   2352c:	d105      	bne.n	2353a <rpc_at_event_handler+0x52>
   2352e:	6800      	ldr	r0, [r0, #0]
   23530:	2800      	cmp	r0, #0
   23532:	d1f5      	bne.n	23520 <rpc_at_event_handler+0x38>
   23534:	2000      	movs	r0, #0
   23536:	b2c0      	uxtb	r0, r0
   23538:	e7e9      	b.n	2350e <rpc_at_event_handler+0x26>
   2353a:	4a08      	ldr	r2, [pc, #32]	; (2355c <rpc_at_event_handler+0x74>)
   2353c:	6010      	str	r0, [r2, #0]
   2353e:	2202      	movs	r2, #2
   23540:	2001      	movs	r0, #1
   23542:	701a      	strb	r2, [r3, #0]
   23544:	e7f7      	b.n	23536 <rpc_at_event_handler+0x4e>
   23546:	4b06      	ldr	r3, [pc, #24]	; (23560 <rpc_at_event_handler+0x78>)
   23548:	681b      	ldr	r3, [r3, #0]
   2354a:	2b00      	cmp	r3, #0
   2354c:	d0d1      	beq.n	234f2 <rpc_at_event_handler+0xa>
   2354e:	6800      	ldr	r0, [r0, #0]
   23550:	4798      	blx	r3
   23552:	e7ce      	b.n	234f2 <rpc_at_event_handler+0xa>
   23554:	2000de53 	.word	0x2000de53
   23558:	2000d860 	.word	0x2000d860
   2355c:	2000d868 	.word	0x2000d868
   23560:	2000d864 	.word	0x2000d864

00023564 <rpc_at_init>:
   23564:	2201      	movs	r2, #1
   23566:	b510      	push	{r4, lr}
   23568:	4611      	mov	r1, r2
   2356a:	4807      	ldr	r0, [pc, #28]	; (23588 <rpc_at_init+0x24>)
   2356c:	f7fa fcc4 	bl	1def8 <nrf_modem_os_sem_init>
   23570:	4601      	mov	r1, r0
   23572:	b928      	cbnz	r0, 23580 <rpc_at_init+0x1c>
   23574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23578:	2301      	movs	r3, #1
   2357a:	2205      	movs	r2, #5
   2357c:	f7ff be3e 	b.w	231fc <at_cmd_send>
   23580:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   23584:	bd10      	pop	{r4, pc}
   23586:	bf00      	nop
   23588:	2000d86c 	.word	0x2000d86c

0002358c <rpc_gnss_event_handler>:
   2358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2358e:	6804      	ldr	r4, [r0, #0]
   23590:	4606      	mov	r6, r0
   23592:	b13c      	cbz	r4, 235a4 <rpc_gnss_event_handler+0x18>
   23594:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   23598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   2359c:	d104      	bne.n	235a8 <rpc_gnss_event_handler+0x1c>
   2359e:	4b41      	ldr	r3, [pc, #260]	; (236a4 <rpc_gnss_event_handler+0x118>)
   235a0:	e9c3 1400 	strd	r1, r4, [r3]
   235a4:	2000      	movs	r0, #0
   235a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   235a8:	4d3f      	ldr	r5, [pc, #252]	; (236a8 <rpc_gnss_event_handler+0x11c>)
   235aa:	682b      	ldr	r3, [r5, #0]
   235ac:	2b00      	cmp	r3, #0
   235ae:	d06f      	beq.n	23690 <rpc_gnss_event_handler+0x104>
   235b0:	f244 0204 	movw	r2, #16388	; 0x4004
   235b4:	4291      	cmp	r1, r2
   235b6:	d80b      	bhi.n	235d0 <rpc_gnss_event_handler+0x44>
   235b8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   235bc:	d968      	bls.n	23690 <rpc_gnss_event_handler+0x104>
   235be:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
   235c2:	3902      	subs	r1, #2
   235c4:	2902      	cmp	r1, #2
   235c6:	d82a      	bhi.n	2361e <rpc_gnss_event_handler+0x92>
   235c8:	e8df f001 	tbb	[pc, r1]
   235cc:	5047      	.short	0x5047
   235ce:	59          	.byte	0x59
   235cf:	00          	.byte	0x00
   235d0:	f244 1301 	movw	r3, #16641	; 0x4101
   235d4:	4299      	cmp	r1, r3
   235d6:	d02e      	beq.n	23636 <rpc_gnss_event_handler+0xaa>
   235d8:	f244 2301 	movw	r3, #16897	; 0x4201
   235dc:	4299      	cmp	r1, r3
   235de:	d157      	bne.n	23690 <rpc_gnss_event_handler+0x104>
   235e0:	4e32      	ldr	r6, [pc, #200]	; (236ac <rpc_gnss_event_handler+0x120>)
   235e2:	6830      	ldr	r0, [r6, #0]
   235e4:	b108      	cbz	r0, 235ea <rpc_gnss_event_handler+0x5e>
   235e6:	f003 ff80 	bl	274ea <rpc_client_msg_data_rx_free>
   235ea:	2202      	movs	r2, #2
   235ec:	4b30      	ldr	r3, [pc, #192]	; (236b0 <rpc_gnss_event_handler+0x124>)
   235ee:	6034      	str	r4, [r6, #0]
   235f0:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   235f4:	701a      	strb	r2, [r3, #0]
   235f6:	4e2f      	ldr	r6, [pc, #188]	; (236b4 <rpc_gnss_event_handler+0x128>)
   235f8:	f014 0708 	ands.w	r7, r4, #8
   235fc:	682b      	ldr	r3, [r5, #0]
   235fe:	7832      	ldrb	r2, [r6, #0]
   23600:	d025      	beq.n	2364e <rpc_gnss_event_handler+0xc2>
   23602:	b91a      	cbnz	r2, 2360c <rpc_gnss_event_handler+0x80>
   23604:	2005      	movs	r0, #5
   23606:	4798      	blx	r3
   23608:	2301      	movs	r3, #1
   2360a:	7033      	strb	r3, [r6, #0]
   2360c:	07e3      	lsls	r3, r4, #31
   2360e:	d502      	bpl.n	23616 <rpc_gnss_event_handler+0x8a>
   23610:	2002      	movs	r0, #2
   23612:	682b      	ldr	r3, [r5, #0]
   23614:	4798      	blx	r3
   23616:	2001      	movs	r0, #1
   23618:	682b      	ldr	r3, [r5, #0]
   2361a:	4798      	blx	r3
   2361c:	e7c2      	b.n	235a4 <rpc_gnss_event_handler+0x18>
   2361e:	4e23      	ldr	r6, [pc, #140]	; (236ac <rpc_gnss_event_handler+0x120>)
   23620:	6830      	ldr	r0, [r6, #0]
   23622:	b108      	cbz	r0, 23628 <rpc_gnss_event_handler+0x9c>
   23624:	f003 ff61 	bl	274ea <rpc_client_msg_data_rx_free>
   23628:	2200      	movs	r2, #0
   2362a:	4b21      	ldr	r3, [pc, #132]	; (236b0 <rpc_gnss_event_handler+0x124>)
   2362c:	6034      	str	r4, [r6, #0]
   2362e:	701a      	strb	r2, [r3, #0]
   23630:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
   23634:	e7df      	b.n	235f6 <rpc_gnss_event_handler+0x6a>
   23636:	4e1d      	ldr	r6, [pc, #116]	; (236ac <rpc_gnss_event_handler+0x120>)
   23638:	6830      	ldr	r0, [r6, #0]
   2363a:	b108      	cbz	r0, 23640 <rpc_gnss_event_handler+0xb4>
   2363c:	f003 ff55 	bl	274ea <rpc_client_msg_data_rx_free>
   23640:	2201      	movs	r2, #1
   23642:	4b1b      	ldr	r3, [pc, #108]	; (236b0 <rpc_gnss_event_handler+0x124>)
   23644:	6034      	str	r4, [r6, #0]
   23646:	701a      	strb	r2, [r3, #0]
   23648:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
   2364c:	e7d3      	b.n	235f6 <rpc_gnss_event_handler+0x6a>
   2364e:	2a00      	cmp	r2, #0
   23650:	d0dc      	beq.n	2360c <rpc_gnss_event_handler+0x80>
   23652:	2006      	movs	r0, #6
   23654:	4798      	blx	r3
   23656:	7037      	strb	r7, [r6, #0]
   23658:	e7d8      	b.n	2360c <rpc_gnss_event_handler+0x80>
   2365a:	4e17      	ldr	r6, [pc, #92]	; (236b8 <rpc_gnss_event_handler+0x12c>)
   2365c:	6830      	ldr	r0, [r6, #0]
   2365e:	b108      	cbz	r0, 23664 <rpc_gnss_event_handler+0xd8>
   23660:	f003 ff43 	bl	274ea <rpc_client_msg_data_rx_free>
   23664:	2003      	movs	r0, #3
   23666:	682b      	ldr	r3, [r5, #0]
   23668:	6034      	str	r4, [r6, #0]
   2366a:	e7d6      	b.n	2361a <rpc_gnss_event_handler+0x8e>
   2366c:	4e13      	ldr	r6, [pc, #76]	; (236bc <rpc_gnss_event_handler+0x130>)
   2366e:	6830      	ldr	r0, [r6, #0]
   23670:	b108      	cbz	r0, 23676 <rpc_gnss_event_handler+0xea>
   23672:	f003 ff3a 	bl	274ea <rpc_client_msg_data_rx_free>
   23676:	2004      	movs	r0, #4
   23678:	682b      	ldr	r3, [r5, #0]
   2367a:	6034      	str	r4, [r6, #0]
   2367c:	e7cd      	b.n	2361a <rpc_gnss_event_handler+0x8e>
   2367e:	7822      	ldrb	r2, [r4, #0]
   23680:	2a03      	cmp	r2, #3
   23682:	d805      	bhi.n	23690 <rpc_gnss_event_handler+0x104>
   23684:	e8df f002 	tbb	[pc, r2]
   23688:	0c0a0802 	.word	0x0c0a0802
   2368c:	2007      	movs	r0, #7
   2368e:	4798      	blx	r3
   23690:	6830      	ldr	r0, [r6, #0]
   23692:	f003 ff2a 	bl	274ea <rpc_client_msg_data_rx_free>
   23696:	e785      	b.n	235a4 <rpc_gnss_event_handler+0x18>
   23698:	2008      	movs	r0, #8
   2369a:	e7f8      	b.n	2368e <rpc_gnss_event_handler+0x102>
   2369c:	2009      	movs	r0, #9
   2369e:	e7f6      	b.n	2368e <rpc_gnss_event_handler+0x102>
   236a0:	200a      	movs	r0, #10
   236a2:	e7f4      	b.n	2368e <rpc_gnss_event_handler+0x102>
   236a4:	2000d880 	.word	0x2000d880
   236a8:	2000d870 	.word	0x2000d870
   236ac:	2000d87c 	.word	0x2000d87c
   236b0:	2000de54 	.word	0x2000de54
   236b4:	2000de55 	.word	0x2000de55
   236b8:	2000d878 	.word	0x2000d878
   236bc:	2000d874 	.word	0x2000d874

000236c0 <rpc_gnss_init>:
   236c0:	b508      	push	{r3, lr}
   236c2:	2300      	movs	r3, #0
   236c4:	4a09      	ldr	r2, [pc, #36]	; (236ec <rpc_gnss_init+0x2c>)
   236c6:	480a      	ldr	r0, [pc, #40]	; (236f0 <rpc_gnss_init+0x30>)
   236c8:	7013      	strb	r3, [r2, #0]
   236ca:	4a0a      	ldr	r2, [pc, #40]	; (236f4 <rpc_gnss_init+0x34>)
   236cc:	7013      	strb	r3, [r2, #0]
   236ce:	4a0a      	ldr	r2, [pc, #40]	; (236f8 <rpc_gnss_init+0x38>)
   236d0:	7013      	strb	r3, [r2, #0]
   236d2:	4a0a      	ldr	r2, [pc, #40]	; (236fc <rpc_gnss_init+0x3c>)
   236d4:	7013      	strb	r3, [r2, #0]
   236d6:	4a0a      	ldr	r2, [pc, #40]	; (23700 <rpc_gnss_init+0x40>)
   236d8:	6013      	str	r3, [r2, #0]
   236da:	2201      	movs	r2, #1
   236dc:	4611      	mov	r1, r2
   236de:	f7fa fc0b 	bl	1def8 <nrf_modem_os_sem_init>
   236e2:	2800      	cmp	r0, #0
   236e4:	bf18      	it	ne
   236e6:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   236ea:	bd08      	pop	{r3, pc}
   236ec:	2000de55 	.word	0x2000de55
   236f0:	2000d888 	.word	0x2000d888
   236f4:	2000de57 	.word	0x2000de57
   236f8:	2000de56 	.word	0x2000de56
   236fc:	2000de54 	.word	0x2000de54
   23700:	2000d870 	.word	0x2000d870

00023704 <modem_off>:
   23704:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23706:	2501      	movs	r5, #1
   23708:	4c07      	ldr	r4, [pc, #28]	; (23728 <modem_off+0x24>)
   2370a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   2370e:	6165      	str	r5, [r4, #20]
   23710:	f003 fa4d 	bl	26bae <nrf_modem_os_busywait>
   23714:	2300      	movs	r3, #0
   23716:	6163      	str	r3, [r4, #20]
   23718:	9301      	str	r3, [sp, #4]
   2371a:	6125      	str	r5, [r4, #16]
   2371c:	6923      	ldr	r3, [r4, #16]
   2371e:	9301      	str	r3, [sp, #4]
   23720:	9b01      	ldr	r3, [sp, #4]
   23722:	b003      	add	sp, #12
   23724:	bd30      	pop	{r4, r5, pc}
   23726:	bf00      	nop
   23728:	40005600 	.word	0x40005600

0002372c <atomic_set.constprop.0.isra.0>:
   2372c:	4b03      	ldr	r3, [pc, #12]	; (2373c <atomic_set.constprop.0.isra.0+0x10>)
   2372e:	e8d3 2fef 	ldaex	r2, [r3]
   23732:	e8c3 0fe1 	stlex	r1, r0, [r3]
   23736:	2900      	cmp	r1, #0
   23738:	d1f9      	bne.n	2372e <atomic_set.constprop.0.isra.0+0x2>
   2373a:	4770      	bx	lr
   2373c:	2000d88c 	.word	0x2000d88c

00023740 <nrf_modem_init>:
   23740:	b513      	push	{r0, r1, r4, lr}
   23742:	4604      	mov	r4, r0
   23744:	b380      	cbz	r0, 237a8 <nrf_modem_init+0x68>
   23746:	6a43      	ldr	r3, [r0, #36]	; 0x24
   23748:	b38b      	cbz	r3, 237ae <nrf_modem_init+0x6e>
   2374a:	2201      	movs	r2, #1
   2374c:	4b1b      	ldr	r3, [pc, #108]	; (237bc <nrf_modem_init+0x7c>)
   2374e:	e8d3 1fef 	ldaex	r1, [r3]
   23752:	2900      	cmp	r1, #0
   23754:	d103      	bne.n	2375e <nrf_modem_init+0x1e>
   23756:	e8c3 2fe0 	stlex	r0, r2, [r3]
   2375a:	2800      	cmp	r0, #0
   2375c:	d1f7      	bne.n	2374e <nrf_modem_init+0xe>
   2375e:	d129      	bne.n	237b4 <nrf_modem_init+0x74>
   23760:	6a60      	ldr	r0, [r4, #36]	; 0x24
   23762:	f000 f82d 	bl	237c0 <nrf_modem_fault_handler_set>
   23766:	f7fa fc1b 	bl	1dfa0 <nrf_modem_os_init>
   2376a:	6a23      	ldr	r3, [r4, #32]
   2376c:	4668      	mov	r0, sp
   2376e:	9400      	str	r4, [sp, #0]
   23770:	f88d 3004 	strb.w	r3, [sp, #4]
   23774:	f003 fe56 	bl	27424 <rpc_init>
   23778:	4604      	mov	r4, r0
   2377a:	b958      	cbnz	r0, 23794 <nrf_modem_init+0x54>
   2377c:	f7ff fef2 	bl	23564 <rpc_at_init>
   23780:	4604      	mov	r4, r0
   23782:	b938      	cbnz	r0, 23794 <nrf_modem_init+0x54>
   23784:	f7ff fc60 	bl	23048 <rpc_ip_init>
   23788:	4604      	mov	r4, r0
   2378a:	b918      	cbnz	r0, 23794 <nrf_modem_init+0x54>
   2378c:	f7ff ff98 	bl	236c0 <rpc_gnss_init>
   23790:	4604      	mov	r4, r0
   23792:	b138      	cbz	r0, 237a4 <nrf_modem_init+0x64>
   23794:	f7ff ffb6 	bl	23704 <modem_off>
   23798:	2000      	movs	r0, #0
   2379a:	f7ff ffc7 	bl	2372c <atomic_set.constprop.0.isra.0>
   2379e:	4620      	mov	r0, r4
   237a0:	b002      	add	sp, #8
   237a2:	bd10      	pop	{r4, pc}
   237a4:	2002      	movs	r0, #2
   237a6:	e7f8      	b.n	2379a <nrf_modem_init+0x5a>
   237a8:	f06f 040d 	mvn.w	r4, #13
   237ac:	e7f7      	b.n	2379e <nrf_modem_init+0x5e>
   237ae:	f06f 0415 	mvn.w	r4, #21
   237b2:	e7f4      	b.n	2379e <nrf_modem_init+0x5e>
   237b4:	f04f 34ff 	mov.w	r4, #4294967295
   237b8:	e7f1      	b.n	2379e <nrf_modem_init+0x5e>
   237ba:	bf00      	nop
   237bc:	2000d88c 	.word	0x2000d88c

000237c0 <nrf_modem_fault_handler_set>:
   237c0:	4b01      	ldr	r3, [pc, #4]	; (237c8 <nrf_modem_fault_handler_set+0x8>)
   237c2:	6018      	str	r0, [r3, #0]
   237c4:	4770      	bx	lr
   237c6:	bf00      	nop
   237c8:	2000d890 	.word	0x2000d890

000237cc <nrf_modem_fault_handler_internal>:
   237cc:	b507      	push	{r0, r1, r2, lr}
   237ce:	4b04      	ldr	r3, [pc, #16]	; (237e0 <nrf_modem_fault_handler_internal+0x14>)
   237d0:	e9cd 0100 	strd	r0, r1, [sp]
   237d4:	681b      	ldr	r3, [r3, #0]
   237d6:	4668      	mov	r0, sp
   237d8:	4798      	blx	r3
   237da:	b003      	add	sp, #12
   237dc:	f85d fb04 	ldr.w	pc, [sp], #4
   237e0:	2000d890 	.word	0x2000d890

000237e4 <nrf_modem_state_set>:
   237e4:	4b01      	ldr	r3, [pc, #4]	; (237ec <nrf_modem_state_set+0x8>)
   237e6:	7018      	strb	r0, [r3, #0]
   237e8:	4770      	bx	lr
   237ea:	bf00      	nop
   237ec:	2000de58 	.word	0x2000de58

000237f0 <nrf_modem_state_is_initialized>:
   237f0:	4b02      	ldr	r3, [pc, #8]	; (237fc <nrf_modem_state_is_initialized+0xc>)
   237f2:	7818      	ldrb	r0, [r3, #0]
   237f4:	1e43      	subs	r3, r0, #1
   237f6:	4258      	negs	r0, r3
   237f8:	4158      	adcs	r0, r3
   237fa:	4770      	bx	lr
   237fc:	2000de58 	.word	0x2000de58

00023800 <ipc_trace_init>:
   23800:	2100      	movs	r1, #0
   23802:	4b07      	ldr	r3, [pc, #28]	; (23820 <ipc_trace_init+0x20>)
   23804:	2201      	movs	r2, #1
   23806:	7019      	strb	r1, [r3, #0]
   23808:	4b06      	ldr	r3, [pc, #24]	; (23824 <ipc_trace_init+0x24>)
   2380a:	7019      	strb	r1, [r3, #0]
   2380c:	4b06      	ldr	r3, [pc, #24]	; (23828 <ipc_trace_init+0x28>)
   2380e:	6019      	str	r1, [r3, #0]
   23810:	4b06      	ldr	r3, [pc, #24]	; (2382c <ipc_trace_init+0x2c>)
   23812:	6019      	str	r1, [r3, #0]
   23814:	4b06      	ldr	r3, [pc, #24]	; (23830 <ipc_trace_init+0x30>)
   23816:	6018      	str	r0, [r3, #0]
   23818:	4806      	ldr	r0, [pc, #24]	; (23834 <ipc_trace_init+0x34>)
   2381a:	f7fa bb6d 	b.w	1def8 <nrf_modem_os_sem_init>
   2381e:	bf00      	nop
   23820:	2000de59 	.word	0x2000de59
   23824:	2000de5a 	.word	0x2000de5a
   23828:	2000d898 	.word	0x2000d898
   2382c:	2000d89c 	.word	0x2000d89c
   23830:	2000d8ac 	.word	0x2000d8ac
   23834:	2000d894 	.word	0x2000d894

00023838 <ipc_trace_handler>:
   23838:	b470      	push	{r4, r5, r6}
   2383a:	4b2d      	ldr	r3, [pc, #180]	; (238f0 <ipc_trace_handler+0xb8>)
   2383c:	681b      	ldr	r3, [r3, #0]
   2383e:	6919      	ldr	r1, [r3, #16]
   23840:	6958      	ldr	r0, [r3, #20]
   23842:	7c1a      	ldrb	r2, [r3, #16]
   23844:	2200      	movs	r2, #0
   23846:	741a      	strb	r2, [r3, #16]
   23848:	7c5c      	ldrb	r4, [r3, #17]
   2384a:	745a      	strb	r2, [r3, #17]
   2384c:	7c9c      	ldrb	r4, [r3, #18]
   2384e:	749a      	strb	r2, [r3, #18]
   23850:	7cdc      	ldrb	r4, [r3, #19]
   23852:	74da      	strb	r2, [r3, #19]
   23854:	7d1c      	ldrb	r4, [r3, #20]
   23856:	751a      	strb	r2, [r3, #20]
   23858:	7d5c      	ldrb	r4, [r3, #21]
   2385a:	755a      	strb	r2, [r3, #21]
   2385c:	7d9c      	ldrb	r4, [r3, #22]
   2385e:	2903      	cmp	r1, #3
   23860:	759a      	strb	r2, [r3, #22]
   23862:	7ddc      	ldrb	r4, [r3, #23]
   23864:	75da      	strb	r2, [r3, #23]
   23866:	d029      	beq.n	238bc <ipc_trace_handler+0x84>
   23868:	2904      	cmp	r1, #4
   2386a:	d033      	beq.n	238d4 <ipc_trace_handler+0x9c>
   2386c:	2901      	cmp	r1, #1
   2386e:	d12f      	bne.n	238d0 <ipc_trace_handler+0x98>
   23870:	6885      	ldr	r5, [r0, #8]
   23872:	4e20      	ldr	r6, [pc, #128]	; (238f4 <ipc_trace_handler+0xbc>)
   23874:	4295      	cmp	r5, r2
   23876:	d110      	bne.n	2389a <ipc_trace_handler+0x62>
   23878:	2101      	movs	r1, #1
   2387a:	7a1a      	ldrb	r2, [r3, #8]
   2387c:	2200      	movs	r2, #0
   2387e:	7219      	strb	r1, [r3, #8]
   23880:	7a59      	ldrb	r1, [r3, #9]
   23882:	725a      	strb	r2, [r3, #9]
   23884:	7a99      	ldrb	r1, [r3, #10]
   23886:	729a      	strb	r2, [r3, #10]
   23888:	7ada      	ldrb	r2, [r3, #11]
   2388a:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   2388e:	72da      	strb	r2, [r3, #11]
   23890:	4b19      	ldr	r3, [pc, #100]	; (238f8 <ipc_trace_handler+0xc0>)
   23892:	bc70      	pop	{r4, r5, r6}
   23894:	6818      	ldr	r0, [r3, #0]
   23896:	f003 b994 	b.w	26bc2 <nrf_modem_os_sem_give>
   2389a:	1c91      	adds	r1, r2, #2
   2389c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   238a0:	684c      	ldr	r4, [r1, #4]
   238a2:	7821      	ldrb	r1, [r4, #0]
   238a4:	2962      	cmp	r1, #98	; 0x62
   238a6:	d007      	beq.n	238b8 <ipc_trace_handler+0x80>
   238a8:	3963      	subs	r1, #99	; 0x63
   238aa:	bf18      	it	ne
   238ac:	2101      	movne	r1, #1
   238ae:	0049      	lsls	r1, r1, #1
   238b0:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
   238b4:	3201      	adds	r2, #1
   238b6:	e7dd      	b.n	23874 <ipc_trace_handler+0x3c>
   238b8:	2101      	movs	r1, #1
   238ba:	e7f9      	b.n	238b0 <ipc_trace_handler+0x78>
   238bc:	7a18      	ldrb	r0, [r3, #8]
   238be:	7219      	strb	r1, [r3, #8]
   238c0:	7a59      	ldrb	r1, [r3, #9]
   238c2:	725a      	strb	r2, [r3, #9]
   238c4:	7a99      	ldrb	r1, [r3, #10]
   238c6:	729a      	strb	r2, [r3, #10]
   238c8:	7ada      	ldrb	r2, [r3, #11]
   238ca:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   238ce:	72da      	strb	r2, [r3, #11]
   238d0:	bc70      	pop	{r4, r5, r6}
   238d2:	4770      	bx	lr
   238d4:	7a18      	ldrb	r0, [r3, #8]
   238d6:	7219      	strb	r1, [r3, #8]
   238d8:	7a59      	ldrb	r1, [r3, #9]
   238da:	725a      	strb	r2, [r3, #9]
   238dc:	7a99      	ldrb	r1, [r3, #10]
   238de:	729a      	strb	r2, [r3, #10]
   238e0:	7ada      	ldrb	r2, [r3, #11]
   238e2:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   238e6:	72da      	strb	r2, [r3, #11]
   238e8:	2201      	movs	r2, #1
   238ea:	4b04      	ldr	r3, [pc, #16]	; (238fc <ipc_trace_handler+0xc4>)
   238ec:	701a      	strb	r2, [r3, #0]
   238ee:	e7ef      	b.n	238d0 <ipc_trace_handler+0x98>
   238f0:	2000d8ac 	.word	0x2000d8ac
   238f4:	2000d8a0 	.word	0x2000d8a0
   238f8:	2000d894 	.word	0x2000d894
   238fc:	2000de5a 	.word	0x2000de5a

00023900 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   23900:	4b01      	ldr	r3, [pc, #4]	; (23908 <z_impl_z_errno+0x8>)
   23902:	6898      	ldr	r0, [r3, #8]
}
   23904:	3064      	adds	r0, #100	; 0x64
   23906:	4770      	bx	lr
   23908:	2000d8b0 	.word	0x2000d8b0

0002390c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2390c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23910:	b086      	sub	sp, #24
   23912:	4605      	mov	r5, r0
   23914:	460e      	mov	r6, r1
   23916:	af00      	add	r7, sp, #0
	__asm__ volatile(
   23918:	f04f 0320 	mov.w	r3, #32
   2391c:	f3ef 8811 	mrs	r8, BASEPRI
   23920:	f383 8812 	msr	BASEPRI_MAX, r3
   23924:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   23928:	f000 ffe8 	bl	248fc <z_impl_z_current_get>
   2392c:	2d04      	cmp	r5, #4
   2392e:	bf98      	it	ls
   23930:	4b2c      	ldrls	r3, [pc, #176]	; (239e4 <z_fatal_error+0xd8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   23932:	46e9      	mov	r9, sp
   23934:	b08a      	sub	sp, #40	; 0x28
   23936:	4604      	mov	r4, r0
   23938:	466a      	mov	r2, sp
   2393a:	bf94      	ite	ls
   2393c:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   23940:	4b29      	ldrhi	r3, [pc, #164]	; (239e8 <z_fatal_error+0xdc>)
   23942:	61d3      	str	r3, [r2, #28]
   23944:	f240 3301 	movw	r3, #769	; 0x301
   23948:	f04f 0a00 	mov.w	sl, #0
   2394c:	8493      	strh	r3, [r2, #36]	; 0x24
   2394e:	4927      	ldr	r1, [pc, #156]	; (239ec <z_fatal_error+0xe0>)
   23950:	4b27      	ldr	r3, [pc, #156]	; (239f0 <z_fatal_error+0xe4>)
   23952:	e9c2 1505 	strd	r1, r5, [r2, #20]
   23956:	f8c2 a020 	str.w	sl, [r2, #32]
   2395a:	f842 3f10 	str.w	r3, [r2, #16]!
   2395e:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   23962:	4653      	mov	r3, sl
   23964:	4823      	ldr	r0, [pc, #140]	; (239f4 <z_fatal_error+0xe8>)
   23966:	f7f7 f9cb 	bl	1ad00 <z_impl_z_log_msg_static_create>
   2396a:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2396c:	b17e      	cbz	r6, 2398e <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2396e:	69f3      	ldr	r3, [r6, #28]
   23970:	f3c3 0308 	ubfx	r3, r3, #0, #9
   23974:	b15b      	cbz	r3, 2398e <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   23976:	4b20      	ldr	r3, [pc, #128]	; (239f8 <z_fatal_error+0xec>)
   23978:	617b      	str	r3, [r7, #20]
   2397a:	2302      	movs	r3, #2
   2397c:	613b      	str	r3, [r7, #16]
   2397e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   23982:	4653      	mov	r3, sl
   23984:	481b      	ldr	r0, [pc, #108]	; (239f4 <z_fatal_error+0xe8>)
   23986:	f107 0210 	add.w	r2, r7, #16
   2398a:	f7f7 f9b9 	bl	1ad00 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2398e:	b12c      	cbz	r4, 2399c <z_fatal_error+0x90>
   23990:	4620      	mov	r0, r4
   23992:	f004 fc57 	bl	28244 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   23996:	b108      	cbz	r0, 2399c <z_fatal_error+0x90>
   23998:	7803      	ldrb	r3, [r0, #0]
   2399a:	b903      	cbnz	r3, 2399e <z_fatal_error+0x92>
		thread_name = "unknown";
   2399c:	4817      	ldr	r0, [pc, #92]	; (239fc <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2399e:	46e9      	mov	r9, sp
   239a0:	b08a      	sub	sp, #40	; 0x28
   239a2:	466a      	mov	r2, sp
   239a4:	4b16      	ldr	r3, [pc, #88]	; (23a00 <z_fatal_error+0xf4>)
   239a6:	61d0      	str	r0, [r2, #28]
   239a8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   239ac:	f240 3301 	movw	r3, #769	; 0x301
   239b0:	8413      	strh	r3, [r2, #32]
   239b2:	4b14      	ldr	r3, [pc, #80]	; (23a04 <z_fatal_error+0xf8>)
   239b4:	f842 3f10 	str.w	r3, [r2, #16]!
   239b8:	2300      	movs	r3, #0
   239ba:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   239be:	480d      	ldr	r0, [pc, #52]	; (239f4 <z_fatal_error+0xe8>)
   239c0:	f7f7 f99e 	bl	1ad00 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   239c4:	4631      	mov	r1, r6
   239c6:	46cd      	mov	sp, r9
   239c8:	4628      	mov	r0, r5
   239ca:	f7fc fecf 	bl	2076c <k_sys_fatal_error_handler>
	__asm__ volatile(
   239ce:	f388 8811 	msr	BASEPRI, r8
   239d2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   239d6:	4620      	mov	r0, r4
   239d8:	f7f8 fb24 	bl	1c024 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   239dc:	3718      	adds	r7, #24
   239de:	46bd      	mov	sp, r7
   239e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   239e4:	00029748 	.word	0x00029748
   239e8:	0002b5b5 	.word	0x0002b5b5
   239ec:	0002b5cb 	.word	0x0002b5cb
   239f0:	01000005 	.word	0x01000005
   239f4:	000290f4 	.word	0x000290f4
   239f8:	0002b5f3 	.word	0x0002b5f3
   239fc:	0002b5c3 	.word	0x0002b5c3
   23a00:	0002b614 	.word	0x0002b614
   23a04:	01000004 	.word	0x01000004

00023a08 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23a08:	4b0f      	ldr	r3, [pc, #60]	; (23a48 <z_sys_init_run_level+0x40>)
{
   23a0a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23a0c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   23a10:	3001      	adds	r0, #1
   23a12:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   23a16:	42a6      	cmp	r6, r4
   23a18:	d800      	bhi.n	23a1c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   23a1a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   23a1c:	e9d4 3500 	ldrd	r3, r5, [r4]
   23a20:	4628      	mov	r0, r5
   23a22:	4798      	blx	r3
		if (dev != NULL) {
   23a24:	b16d      	cbz	r5, 23a42 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   23a26:	b138      	cbz	r0, 23a38 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   23a28:	2800      	cmp	r0, #0
   23a2a:	bfb8      	it	lt
   23a2c:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   23a2e:	28ff      	cmp	r0, #255	; 0xff
   23a30:	bfa8      	it	ge
   23a32:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   23a34:	68eb      	ldr	r3, [r5, #12]
   23a36:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   23a38:	68ea      	ldr	r2, [r5, #12]
   23a3a:	7853      	ldrb	r3, [r2, #1]
   23a3c:	f043 0301 	orr.w	r3, r3, #1
   23a40:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23a42:	3408      	adds	r4, #8
   23a44:	e7e7      	b.n	23a16 <z_sys_init_run_level+0xe>
   23a46:	bf00      	nop
   23a48:	0002975c 	.word	0x0002975c

00023a4c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   23a4c:	2201      	movs	r2, #1
{
   23a4e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   23a50:	4b09      	ldr	r3, [pc, #36]	; (23a78 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   23a52:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   23a54:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   23a56:	f7ff ffd7 	bl	23a08 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   23a5a:	f001 fa27 	bl	24eac <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   23a5e:	2004      	movs	r0, #4
   23a60:	f7ff ffd2 	bl	23a08 <z_sys_init_run_level>

	z_init_static_threads();
   23a64:	f000 f92c 	bl	23cc0 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   23a68:	f7f5 fc7e 	bl	19368 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   23a6c:	4a03      	ldr	r2, [pc, #12]	; (23a7c <bg_thread_main+0x30>)
   23a6e:	7b13      	ldrb	r3, [r2, #12]
   23a70:	f023 0301 	bic.w	r3, r3, #1
   23a74:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   23a76:	bd08      	pop	{r3, pc}
   23a78:	2000de5b 	.word	0x2000de5b
   23a7c:	2000cf78 	.word	0x2000cf78

00023a80 <z_bss_zero>:
{
   23a80:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   23a82:	4803      	ldr	r0, [pc, #12]	; (23a90 <z_bss_zero+0x10>)
   23a84:	4a03      	ldr	r2, [pc, #12]	; (23a94 <z_bss_zero+0x14>)
   23a86:	2100      	movs	r1, #0
   23a88:	1a12      	subs	r2, r2, r0
   23a8a:	f004 fb52 	bl	28132 <z_early_memset>
}
   23a8e:	bd08      	pop	{r3, pc}
   23a90:	2000c968 	.word	0x2000c968
   23a94:	2000de5c 	.word	0x2000de5c

00023a98 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   23a98:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   23a9a:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   23a9c:	4e13      	ldr	r6, [pc, #76]	; (23aec <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   23a9e:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   23aa0:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   23aa4:	2300      	movs	r3, #0
{
   23aa6:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   23aa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   23aac:	220f      	movs	r2, #15
   23aae:	9301      	str	r3, [sp, #4]
   23ab0:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   23ab4:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   23ab6:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   23aba:	4d0d      	ldr	r5, [pc, #52]	; (23af0 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   23abc:	490d      	ldr	r1, [pc, #52]	; (23af4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   23abe:	fb03 5500 	mla	r5, r3, r0, r5
{
   23ac2:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   23ac4:	fb02 1100 	mla	r1, r2, r0, r1
   23ac8:	4b0b      	ldr	r3, [pc, #44]	; (23af8 <z_init_cpu+0x60>)
   23aca:	4630      	mov	r0, r6
   23acc:	9500      	str	r5, [sp, #0]
   23ace:	f000 f89b 	bl	23c08 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23ad2:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   23ad4:	752c      	strb	r4, [r5, #20]
   23ad6:	f023 0304 	bic.w	r3, r3, #4
   23ada:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   23adc:	4b07      	ldr	r3, [pc, #28]	; (23afc <z_init_cpu+0x64>)
   23ade:	3401      	adds	r4, #1
   23ae0:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   23ae4:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   23ae6:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   23ae8:	b006      	add	sp, #24
   23aea:	bd70      	pop	{r4, r5, r6, pc}
   23aec:	2000cef0 	.word	0x2000cef0
   23af0:	2000d8b0 	.word	0x2000d8b0
   23af4:	2000ea60 	.word	0x2000ea60
   23af8:	00023d79 	.word	0x00023d79
   23afc:	2000e260 	.word	0x2000e260

00023b00 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   23b00:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   23b02:	2000      	movs	r0, #0
{
   23b04:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   23b06:	f7ff ff7f 	bl	23a08 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   23b0a:	4b2f      	ldr	r3, [pc, #188]	; (23bc8 <z_cstart+0xc8>)
	uint32_t msp =
   23b0c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   23b10:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   23b14:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23b18:	2400      	movs	r4, #0
   23b1a:	23e0      	movs	r3, #224	; 0xe0
   23b1c:	4d2b      	ldr	r5, [pc, #172]	; (23bcc <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   23b1e:	4e2c      	ldr	r6, [pc, #176]	; (23bd0 <z_cstart+0xd0>)
   23b20:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   23b24:	77ec      	strb	r4, [r5, #31]
   23b26:	762c      	strb	r4, [r5, #24]
   23b28:	766c      	strb	r4, [r5, #25]
   23b2a:	76ac      	strb	r4, [r5, #26]
   23b2c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   23b30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23b32:	4f28      	ldr	r7, [pc, #160]	; (23bd4 <z_cstart+0xd4>)
   23b34:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   23b38:	626b      	str	r3, [r5, #36]	; 0x24
   23b3a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   23b3e:	f7f8 f9d5 	bl	1beec <z_arm_fault_init>
	z_arm_cpu_idle_init();
   23b42:	f7f7 fd53 	bl	1b5ec <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   23b46:	f04f 33ff 	mov.w	r3, #4294967295
   23b4a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   23b4c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   23b4e:	f7f8 fc17 	bl	1c380 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   23b52:	f7f8 fa7d 	bl	1c050 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   23b56:	f7f6 ff67 	bl	1aa28 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   23b5a:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   23b5e:	ad06      	add	r5, sp, #24
   23b60:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   23b62:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   23b66:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   23b6a:	f001 f981 	bl	24e70 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   23b6e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   23b70:	f004 fad3 	bl	2811a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   23b74:	2001      	movs	r0, #1
   23b76:	f7ff ff47 	bl	23a08 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   23b7a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   23b7c:	4d16      	ldr	r5, [pc, #88]	; (23bd8 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   23b7e:	f7ff ff43 	bl	23a08 <z_sys_init_run_level>
	z_sched_init();
   23b82:	f000 fe13 	bl	247ac <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23b86:	4b15      	ldr	r3, [pc, #84]	; (23bdc <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   23b88:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23b8a:	9305      	str	r3, [sp, #20]
   23b8c:	2301      	movs	r3, #1
   23b8e:	4914      	ldr	r1, [pc, #80]	; (23be0 <z_cstart+0xe0>)
   23b90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   23b94:	e9cd 4303 	strd	r4, r3, [sp, #12]
   23b98:	4628      	mov	r0, r5
   23b9a:	463b      	mov	r3, r7
   23b9c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   23ba0:	9400      	str	r4, [sp, #0]
   23ba2:	f000 f831 	bl	23c08 <z_setup_new_thread>
   23ba6:	4606      	mov	r6, r0
   23ba8:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   23baa:	4628      	mov	r0, r5
   23bac:	f022 0204 	bic.w	r2, r2, #4
   23bb0:	736a      	strb	r2, [r5, #13]
   23bb2:	f004 fc81 	bl	284b8 <z_ready_thread>
	z_init_cpu(0);
   23bb6:	4620      	mov	r0, r4
   23bb8:	f7ff ff6e 	bl	23a98 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   23bbc:	463a      	mov	r2, r7
   23bbe:	4631      	mov	r1, r6
   23bc0:	4628      	mov	r0, r5
   23bc2:	f7f7 fe79 	bl	1b8b8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   23bc6:	bf00      	nop
   23bc8:	2000e260 	.word	0x2000e260
   23bcc:	e000ed00 	.word	0xe000ed00
   23bd0:	2000d8b0 	.word	0x2000d8b0
   23bd4:	00023a4d 	.word	0x00023a4d
   23bd8:	2000cf78 	.word	0x2000cf78
   23bdc:	0002b676 	.word	0x0002b676
   23be0:	2000eba0 	.word	0x2000eba0

00023be4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   23be4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   23be6:	4c06      	ldr	r4, [pc, #24]	; (23c00 <statics_init+0x1c>)
   23be8:	4d06      	ldr	r5, [pc, #24]	; (23c04 <statics_init+0x20>)
   23bea:	42ac      	cmp	r4, r5
   23bec:	d301      	bcc.n	23bf2 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   23bee:	2000      	movs	r0, #0
   23bf0:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   23bf2:	4620      	mov	r0, r4
   23bf4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   23bf8:	f004 fa9f 	bl	2813a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   23bfc:	3414      	adds	r4, #20
   23bfe:	e7f4      	b.n	23bea <statics_init+0x6>
   23c00:	2000c814 	.word	0x2000c814
   23c04:	2000c83c 	.word	0x2000c83c

00023c08 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   23c08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   23c0c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   23c0e:	f100 0558 	add.w	r5, r0, #88	; 0x58
   23c12:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   23c14:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   23c16:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   23c1a:	2500      	movs	r5, #0
{
   23c1c:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   23c1e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   23c20:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   23c22:	e9c0 5506 	strd	r5, r5, [r0, #24]
   23c26:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23c28:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23c2c:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   23c30:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   23c34:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   23c36:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   23c38:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23c3a:	9202      	str	r2, [sp, #8]
   23c3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   23c3e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23c42:	9201      	str	r2, [sp, #4]
   23c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   23c46:	9200      	str	r2, [sp, #0]
   23c48:	4642      	mov	r2, r8
   23c4a:	f7f7 fe15 	bl	1b878 <arch_new_thread>
	if (!_current) {
   23c4e:	4b05      	ldr	r3, [pc, #20]	; (23c64 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   23c50:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   23c52:	689b      	ldr	r3, [r3, #8]
   23c54:	b103      	cbz	r3, 23c58 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   23c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   23c58:	4640      	mov	r0, r8
   23c5a:	6763      	str	r3, [r4, #116]	; 0x74
   23c5c:	b004      	add	sp, #16
   23c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23c62:	bf00      	nop
   23c64:	2000d8b0 	.word	0x2000d8b0

00023c68 <z_impl_k_thread_create>:
{
   23c68:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23c6a:	2500      	movs	r5, #0
{
   23c6c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23c6e:	9505      	str	r5, [sp, #20]
   23c70:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   23c72:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23c76:	9504      	str	r5, [sp, #16]
   23c78:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   23c7a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23c7c:	9503      	str	r5, [sp, #12]
   23c7e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23c80:	9502      	str	r5, [sp, #8]
   23c82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23c84:	9501      	str	r5, [sp, #4]
   23c86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23c88:	9500      	str	r5, [sp, #0]
   23c8a:	f7ff ffbd 	bl	23c08 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   23c8e:	f1b6 3fff 	cmp.w	r6, #4294967295
   23c92:	bf08      	it	eq
   23c94:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   23c98:	d005      	beq.n	23ca6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23c9a:	ea56 0307 	orrs.w	r3, r6, r7
   23c9e:	d105      	bne.n	23cac <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   23ca0:	4620      	mov	r0, r4
   23ca2:	f000 fd03 	bl	246ac <z_sched_start>
}
   23ca6:	4620      	mov	r0, r4
   23ca8:	b007      	add	sp, #28
   23caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23cac:	463a      	mov	r2, r7
   23cae:	4633      	mov	r3, r6
   23cb0:	4902      	ldr	r1, [pc, #8]	; (23cbc <z_impl_k_thread_create+0x54>)
   23cb2:	f104 0018 	add.w	r0, r4, #24
   23cb6:	f000 ff01 	bl	24abc <z_add_timeout>
   23cba:	e7f4      	b.n	23ca6 <z_impl_k_thread_create+0x3e>
   23cbc:	00028425 	.word	0x00028425

00023cc0 <z_init_static_threads>:
{
   23cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23cc4:	4c29      	ldr	r4, [pc, #164]	; (23d6c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   23cc6:	4d2a      	ldr	r5, [pc, #168]	; (23d70 <z_init_static_threads+0xb0>)
{
   23cc8:	b087      	sub	sp, #28
   23cca:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   23ccc:	42ae      	cmp	r6, r5
   23cce:	f104 0430 	add.w	r4, r4, #48	; 0x30
   23cd2:	d30f      	bcc.n	23cf4 <z_init_static_threads+0x34>
	k_sched_lock();
   23cd4:	f000 fd3a 	bl	2474c <k_sched_lock>
   23cd8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   23cdc:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   23ce0:	4c22      	ldr	r4, [pc, #136]	; (23d6c <z_init_static_threads+0xac>)
   23ce2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 23d74 <z_init_static_threads+0xb4>
   23ce6:	42ac      	cmp	r4, r5
   23ce8:	d320      	bcc.n	23d2c <z_init_static_threads+0x6c>
}
   23cea:	b007      	add	sp, #28
   23cec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   23cf0:	f000 bd40 	b.w	24774 <k_sched_unlock>
		z_setup_new_thread(
   23cf4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23cf8:	9305      	str	r3, [sp, #20]
   23cfa:	f854 3c10 	ldr.w	r3, [r4, #-16]
   23cfe:	9304      	str	r3, [sp, #16]
   23d00:	f854 3c14 	ldr.w	r3, [r4, #-20]
   23d04:	9303      	str	r3, [sp, #12]
   23d06:	f854 3c18 	ldr.w	r3, [r4, #-24]
   23d0a:	9302      	str	r3, [sp, #8]
   23d0c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   23d10:	9301      	str	r3, [sp, #4]
   23d12:	f854 3c20 	ldr.w	r3, [r4, #-32]
   23d16:	9300      	str	r3, [sp, #0]
   23d18:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   23d1c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   23d20:	f7ff ff72 	bl	23c08 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   23d24:	f854 3c30 	ldr.w	r3, [r4, #-48]
   23d28:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   23d2a:	e7ce      	b.n	23cca <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   23d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23d2e:	1c5a      	adds	r2, r3, #1
   23d30:	d00d      	beq.n	23d4e <z_init_static_threads+0x8e>
   23d32:	2100      	movs	r1, #0
   23d34:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   23d36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23d3a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23d3e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   23d42:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23d46:	d104      	bne.n	23d52 <z_init_static_threads+0x92>
	z_sched_start(thread);
   23d48:	4640      	mov	r0, r8
   23d4a:	f000 fcaf 	bl	246ac <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   23d4e:	3430      	adds	r4, #48	; 0x30
   23d50:	e7c9      	b.n	23ce6 <z_init_static_threads+0x26>
   23d52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23d56:	2300      	movs	r3, #0
   23d58:	f7f4 ffd6 	bl	18d08 <__aeabi_uldivmod>
   23d5c:	4602      	mov	r2, r0
   23d5e:	460b      	mov	r3, r1
   23d60:	f108 0018 	add.w	r0, r8, #24
   23d64:	4649      	mov	r1, r9
   23d66:	f000 fea9 	bl	24abc <z_add_timeout>
   23d6a:	e7f0      	b.n	23d4e <z_init_static_threads+0x8e>
   23d6c:	00028fa4 	.word	0x00028fa4
   23d70:	00028fa4 	.word	0x00028fa4
   23d74:	00028425 	.word	0x00028425

00023d78 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   23d78:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   23d7a:	4c0b      	ldr	r4, [pc, #44]	; (23da8 <idle+0x30>)
   23d7c:	4d0b      	ldr	r5, [pc, #44]	; (23dac <idle+0x34>)
	__asm__ volatile(
   23d7e:	f04f 0220 	mov.w	r2, #32
   23d82:	f3ef 8311 	mrs	r3, BASEPRI
   23d86:	f382 8812 	msr	BASEPRI_MAX, r2
   23d8a:	f3bf 8f6f 	isb	sy
   23d8e:	f004 fc59 	bl	28644 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   23d92:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   23d94:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   23d96:	b913      	cbnz	r3, 23d9e <idle+0x26>
	arch_cpu_idle();
   23d98:	f7f7 fc2e 	bl	1b5f8 <arch_cpu_idle>
}
   23d9c:	e7ef      	b.n	23d7e <idle+0x6>
   23d9e:	f7f7 fb09 	bl	1b3b4 <pm_system_suspend>
   23da2:	2800      	cmp	r0, #0
   23da4:	d1eb      	bne.n	23d7e <idle+0x6>
   23da6:	e7f7      	b.n	23d98 <idle+0x20>
   23da8:	2000d8b0 	.word	0x2000d8b0
   23dac:	2000de5b 	.word	0x2000de5b

00023db0 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   23db0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23db4:	4604      	mov	r4, r0
   23db6:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   23db8:	f100 0808 	add.w	r8, r0, #8
   23dbc:	f04f 0120 	mov.w	r1, #32
   23dc0:	f3ef 8711 	mrs	r7, BASEPRI
   23dc4:	f381 8812 	msr	BASEPRI_MAX, r1
   23dc8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   23dcc:	6a05      	ldr	r5, [r0, #32]
   23dce:	68c1      	ldr	r1, [r0, #12]
   23dd0:	428d      	cmp	r5, r1
   23dd2:	d231      	bcs.n	23e38 <z_impl_k_msgq_put+0x88>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   23dd4:	f004 fba7 	bl	28526 <z_unpend_first_thread>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23dd8:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
   23dda:	4605      	mov	r5, r0
   23ddc:	68a2      	ldr	r2, [r4, #8]
   23dde:	b178      	cbz	r0, 23e00 <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   23de0:	2400      	movs	r4, #0
   23de2:	6940      	ldr	r0, [r0, #20]
   23de4:	f004 fd82 	bl	288ec <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   23de8:	4628      	mov	r0, r5
   23dea:	67ec      	str	r4, [r5, #124]	; 0x7c
   23dec:	f004 fb64 	bl	284b8 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   23df0:	4640      	mov	r0, r8
   23df2:	4639      	mov	r1, r7
   23df4:	f000 fc48 	bl	24688 <z_reschedule>
			return 0;
   23df8:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   23dfa:	b002      	add	sp, #8
   23dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23e00:	69e0      	ldr	r0, [r4, #28]
   23e02:	f004 fd73 	bl	288ec <memcpy>
			msgq->write_ptr += msgq->msg_size;
   23e06:	69e3      	ldr	r3, [r4, #28]
   23e08:	68a2      	ldr	r2, [r4, #8]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   23e0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->write_ptr += msgq->msg_size;
   23e0e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   23e10:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   23e12:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   23e14:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   23e16:	bf08      	it	eq
   23e18:	6923      	ldreq	r3, [r4, #16]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   23e1a:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   23e1e:	bf08      	it	eq
   23e20:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   23e22:	6a23      	ldr	r3, [r4, #32]
   23e24:	3301      	adds	r3, #1
   23e26:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   23e28:	f004 fcf6 	bl	28818 <z_handle_obj_poll_events>
		result = 0;
   23e2c:	2000      	movs	r0, #0
	__asm__ volatile(
   23e2e:	f387 8811 	msr	BASEPRI, r7
   23e32:	f3bf 8f6f 	isb	sy
	return result;
   23e36:	e7e0      	b.n	23dfa <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23e38:	ea52 0103 	orrs.w	r1, r2, r3
   23e3c:	d00a      	beq.n	23e54 <z_impl_k_msgq_put+0xa4>
		_current->base.swap_data = (void *) data;
   23e3e:	4907      	ldr	r1, [pc, #28]	; (23e5c <z_impl_k_msgq_put+0xac>)
   23e40:	6889      	ldr	r1, [r1, #8]
   23e42:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   23e44:	e9cd 2300 	strd	r2, r3, [sp]
   23e48:	4639      	mov	r1, r7
   23e4a:	4602      	mov	r2, r0
   23e4c:	4640      	mov	r0, r8
   23e4e:	f000 fbb7 	bl	245c0 <z_pend_curr>
		return result;
   23e52:	e7d2      	b.n	23dfa <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   23e54:	f06f 0022 	mvn.w	r0, #34	; 0x22
   23e58:	e7e9      	b.n	23e2e <z_impl_k_msgq_put+0x7e>
   23e5a:	bf00      	nop
   23e5c:	2000d8b0 	.word	0x2000d8b0

00023e60 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   23e60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23e64:	4604      	mov	r4, r0
   23e66:	4617      	mov	r7, r2
   23e68:	461e      	mov	r6, r3
	__asm__ volatile(
   23e6a:	f04f 0320 	mov.w	r3, #32
   23e6e:	f3ef 8811 	mrs	r8, BASEPRI
   23e72:	f383 8812 	msr	BASEPRI_MAX, r3
   23e76:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   23e7a:	68c3      	ldr	r3, [r0, #12]
   23e7c:	4a33      	ldr	r2, [pc, #204]	; (23f4c <z_impl_k_mutex_lock+0xec>)
   23e7e:	b17b      	cbz	r3, 23ea0 <z_impl_k_mutex_lock+0x40>
   23e80:	6880      	ldr	r0, [r0, #8]
   23e82:	6891      	ldr	r1, [r2, #8]
   23e84:	4288      	cmp	r0, r1
   23e86:	d019      	beq.n	23ebc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   23e88:	ea57 0306 	orrs.w	r3, r7, r6
   23e8c:	d118      	bne.n	23ec0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   23e8e:	f388 8811 	msr	BASEPRI, r8
   23e92:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   23e96:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   23e9a:	b002      	add	sp, #8
   23e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   23ea0:	6891      	ldr	r1, [r2, #8]
   23ea2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   23ea6:	3301      	adds	r3, #1
   23ea8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   23eaa:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   23eac:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   23eae:	60a3      	str	r3, [r4, #8]
   23eb0:	f388 8811 	msr	BASEPRI, r8
   23eb4:	f3bf 8f6f 	isb	sy
		return 0;
   23eb8:	2000      	movs	r0, #0
   23eba:	e7ee      	b.n	23e9a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   23ebc:	6921      	ldr	r1, [r4, #16]
   23ebe:	e7f2      	b.n	23ea6 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   23ec0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   23ec4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   23ec8:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   23ecc:	4299      	cmp	r1, r3
   23ece:	bfa8      	it	ge
   23ed0:	4619      	movge	r1, r3
   23ed2:	4291      	cmp	r1, r2
   23ed4:	bfb8      	it	lt
   23ed6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   23ed8:	428b      	cmp	r3, r1
   23eda:	dd2e      	ble.n	23f3a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   23edc:	f004 f9bd 	bl	2825a <adjust_owner_prio.isra.0>
   23ee0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   23ee2:	4622      	mov	r2, r4
   23ee4:	4641      	mov	r1, r8
   23ee6:	e9cd 7600 	strd	r7, r6, [sp]
   23eea:	4819      	ldr	r0, [pc, #100]	; (23f50 <z_impl_k_mutex_lock+0xf0>)
   23eec:	f000 fb68 	bl	245c0 <z_pend_curr>
	if (got_mutex == 0) {
   23ef0:	2800      	cmp	r0, #0
   23ef2:	d0e1      	beq.n	23eb8 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   23ef4:	f04f 0320 	mov.w	r3, #32
   23ef8:	f3ef 8611 	mrs	r6, BASEPRI
   23efc:	f383 8812 	msr	BASEPRI_MAX, r3
   23f00:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   23f04:	68a0      	ldr	r0, [r4, #8]
   23f06:	b1d0      	cbz	r0, 23f3e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   23f08:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   23f0a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23f0c:	429c      	cmp	r4, r3
   23f0e:	d00a      	beq.n	23f26 <z_impl_k_mutex_lock+0xc6>
   23f10:	b14b      	cbz	r3, 23f26 <z_impl_k_mutex_lock+0xc6>
   23f12:	f993 300e 	ldrsb.w	r3, [r3, #14]
   23f16:	4299      	cmp	r1, r3
   23f18:	bfa8      	it	ge
   23f1a:	4619      	movge	r1, r3
   23f1c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   23f20:	4299      	cmp	r1, r3
   23f22:	bfb8      	it	lt
   23f24:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   23f26:	f004 f998 	bl	2825a <adjust_owner_prio.isra.0>
   23f2a:	b140      	cbz	r0, 23f3e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   23f2c:	4631      	mov	r1, r6
   23f2e:	4808      	ldr	r0, [pc, #32]	; (23f50 <z_impl_k_mutex_lock+0xf0>)
   23f30:	f000 fbaa 	bl	24688 <z_reschedule>
	return -EAGAIN;
   23f34:	f06f 000a 	mvn.w	r0, #10
   23f38:	e7af      	b.n	23e9a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   23f3a:	2500      	movs	r5, #0
   23f3c:	e7d1      	b.n	23ee2 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   23f3e:	2d00      	cmp	r5, #0
   23f40:	d1f4      	bne.n	23f2c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   23f42:	f386 8811 	msr	BASEPRI, r6
   23f46:	f3bf 8f6f 	isb	sy
   23f4a:	e7f3      	b.n	23f34 <z_impl_k_mutex_lock+0xd4>
   23f4c:	2000d8b0 	.word	0x2000d8b0
   23f50:	2000de5c 	.word	0x2000de5c

00023f54 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   23f54:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   23f56:	6883      	ldr	r3, [r0, #8]
{
   23f58:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   23f5a:	b36b      	cbz	r3, 23fb8 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   23f5c:	4a19      	ldr	r2, [pc, #100]	; (23fc4 <z_impl_k_mutex_unlock+0x70>)
   23f5e:	6892      	ldr	r2, [r2, #8]
   23f60:	4293      	cmp	r3, r2
   23f62:	d12c      	bne.n	23fbe <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   23f64:	68c3      	ldr	r3, [r0, #12]
   23f66:	2b01      	cmp	r3, #1
   23f68:	d903      	bls.n	23f72 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   23f6a:	3b01      	subs	r3, #1
   23f6c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   23f6e:	2000      	movs	r0, #0
}
   23f70:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   23f72:	f04f 0320 	mov.w	r3, #32
   23f76:	f3ef 8511 	mrs	r5, BASEPRI
   23f7a:	f383 8812 	msr	BASEPRI_MAX, r3
   23f7e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   23f82:	6901      	ldr	r1, [r0, #16]
   23f84:	6880      	ldr	r0, [r0, #8]
   23f86:	f004 f968 	bl	2825a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   23f8a:	4620      	mov	r0, r4
   23f8c:	f004 facb 	bl	28526 <z_unpend_first_thread>
	mutex->owner = new_owner;
   23f90:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   23f92:	b158      	cbz	r0, 23fac <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   23f94:	f990 200e 	ldrsb.w	r2, [r0, #14]
   23f98:	6122      	str	r2, [r4, #16]
   23f9a:	2200      	movs	r2, #0
   23f9c:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   23f9e:	f004 fa8b 	bl	284b8 <z_ready_thread>
		z_reschedule(&lock, key);
   23fa2:	4629      	mov	r1, r5
   23fa4:	4808      	ldr	r0, [pc, #32]	; (23fc8 <z_impl_k_mutex_unlock+0x74>)
   23fa6:	f000 fb6f 	bl	24688 <z_reschedule>
   23faa:	e7e0      	b.n	23f6e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   23fac:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   23fae:	f385 8811 	msr	BASEPRI, r5
   23fb2:	f3bf 8f6f 	isb	sy
   23fb6:	e7da      	b.n	23f6e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   23fb8:	f06f 0015 	mvn.w	r0, #21
   23fbc:	e7d8      	b.n	23f70 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   23fbe:	f04f 30ff 	mov.w	r0, #4294967295
   23fc2:	e7d5      	b.n	23f70 <z_impl_k_mutex_unlock+0x1c>
   23fc4:	2000d8b0 	.word	0x2000d8b0
   23fc8:	2000de5c 	.word	0x2000de5c

00023fcc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   23fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23fce:	4611      	mov	r1, r2
	__asm__ volatile(
   23fd0:	f04f 0220 	mov.w	r2, #32
   23fd4:	f3ef 8511 	mrs	r5, BASEPRI
   23fd8:	f382 8812 	msr	BASEPRI_MAX, r2
   23fdc:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   23fe0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   23fe2:	b19c      	cbz	r4, 2400c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23fe4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23fe6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23fe8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23fec:	4294      	cmp	r4, r2
	list->head = node;
   23fee:	6003      	str	r3, [r0, #0]
	list->tail = node;
   23ff0:	bf08      	it	eq
   23ff2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   23ff4:	2101      	movs	r1, #1
   23ff6:	4620      	mov	r0, r4
   23ff8:	f004 f9a4 	bl	28344 <z_queue_node_peek>
   23ffc:	4604      	mov	r4, r0
	__asm__ volatile(
   23ffe:	f385 8811 	msr	BASEPRI, r5
   24002:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   24006:	4620      	mov	r0, r4
   24008:	b003      	add	sp, #12
   2400a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2400c:	ea51 0203 	orrs.w	r2, r1, r3
   24010:	d0f5      	beq.n	23ffe <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24012:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   24016:	e9cd 1300 	strd	r1, r3, [sp]
   2401a:	4610      	mov	r0, r2
   2401c:	4629      	mov	r1, r5
   2401e:	f000 facf 	bl	245c0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   24022:	2800      	cmp	r0, #0
   24024:	d1ef      	bne.n	24006 <z_impl_k_queue_get+0x3a>
   24026:	4b02      	ldr	r3, [pc, #8]	; (24030 <z_impl_k_queue_get+0x64>)
   24028:	689b      	ldr	r3, [r3, #8]
   2402a:	695c      	ldr	r4, [r3, #20]
   2402c:	e7eb      	b.n	24006 <z_impl_k_queue_get+0x3a>
   2402e:	bf00      	nop
   24030:	2000d8b0 	.word	0x2000d8b0

00024034 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   24034:	b538      	push	{r3, r4, r5, lr}
   24036:	4604      	mov	r4, r0
	__asm__ volatile(
   24038:	f04f 0320 	mov.w	r3, #32
   2403c:	f3ef 8511 	mrs	r5, BASEPRI
   24040:	f383 8812 	msr	BASEPRI_MAX, r3
   24044:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   24048:	f004 fa6d 	bl	28526 <z_unpend_first_thread>

	if (thread != NULL) {
   2404c:	b148      	cbz	r0, 24062 <z_impl_k_sem_give+0x2e>
   2404e:	2200      	movs	r2, #0
   24050:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   24052:	f004 fa31 	bl	284b8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   24056:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   24058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2405c:	4807      	ldr	r0, [pc, #28]	; (2407c <z_impl_k_sem_give+0x48>)
   2405e:	f000 bb13 	b.w	24688 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   24062:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   24066:	429a      	cmp	r2, r3
   24068:	bf18      	it	ne
   2406a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2406c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2406e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   24070:	f104 0010 	add.w	r0, r4, #16
   24074:	f004 fbd0 	bl	28818 <z_handle_obj_poll_events>
}
   24078:	e7ed      	b.n	24056 <z_impl_k_sem_give+0x22>
   2407a:	bf00      	nop
   2407c:	2000de5c 	.word	0x2000de5c

00024080 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   24080:	b513      	push	{r0, r1, r4, lr}
   24082:	f04f 0420 	mov.w	r4, #32
   24086:	f3ef 8111 	mrs	r1, BASEPRI
   2408a:	f384 8812 	msr	BASEPRI_MAX, r4
   2408e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   24092:	6884      	ldr	r4, [r0, #8]
   24094:	b144      	cbz	r4, 240a8 <z_impl_k_sem_take+0x28>
		sem->count--;
   24096:	3c01      	subs	r4, #1
   24098:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   2409a:	f381 8811 	msr	BASEPRI, r1
   2409e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   240a2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   240a4:	b002      	add	sp, #8
   240a6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   240a8:	ea52 0403 	orrs.w	r4, r2, r3
   240ac:	d106      	bne.n	240bc <z_impl_k_sem_take+0x3c>
   240ae:	f381 8811 	msr	BASEPRI, r1
   240b2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   240b6:	f06f 000f 	mvn.w	r0, #15
   240ba:	e7f3      	b.n	240a4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   240bc:	e9cd 2300 	strd	r2, r3, [sp]
   240c0:	4602      	mov	r2, r0
   240c2:	4802      	ldr	r0, [pc, #8]	; (240cc <z_impl_k_sem_take+0x4c>)
   240c4:	f000 fa7c 	bl	245c0 <z_pend_curr>
	return ret;
   240c8:	e7ec      	b.n	240a4 <z_impl_k_sem_take+0x24>
   240ca:	bf00      	nop
   240cc:	2000de5c 	.word	0x2000de5c

000240d0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   240d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   240d4:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   240d6:	f04f 38ff 	mov.w	r8, #4294967295
   240da:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
   240de:	4e48      	ldr	r6, [pc, #288]	; (24200 <work_queue_main+0x130>)
{
   240e0:	b085      	sub	sp, #20
	__asm__ volatile(
   240e2:	f04f 0320 	mov.w	r3, #32
   240e6:	f3ef 8711 	mrs	r7, BASEPRI
   240ea:	f383 8812 	msr	BASEPRI_MAX, r3
   240ee:	f3bf 8f6f 	isb	sy
   240f2:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   240f6:	b98d      	cbnz	r5, 2411c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   240f8:	2102      	movs	r1, #2
   240fa:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   240fe:	f004 f948 	bl	28392 <flag_test_and_clear>
   24102:	2800      	cmp	r0, #0
   24104:	d143      	bne.n	2418e <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   24106:	2300      	movs	r3, #0
   24108:	4639      	mov	r1, r7
   2410a:	e9cd 8900 	strd	r8, r9, [sp]
   2410e:	9302      	str	r3, [sp, #8]
   24110:	f104 0290 	add.w	r2, r4, #144	; 0x90
   24114:	483b      	ldr	r0, [pc, #236]	; (24204 <work_queue_main+0x134>)
   24116:	f000 fc57 	bl	249c8 <z_sched_wait>
			continue;
   2411a:	e7e2      	b.n	240e2 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2411c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   24120:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24122:	4295      	cmp	r5, r2
	list->head = node;
   24124:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	list->tail = node;
   24128:	bf08      	it	eq
   2412a:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	*flagp |= BIT(bit);
   2412e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   24132:	f043 0302 	orr.w	r3, r3, #2
   24136:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   2413a:	68eb      	ldr	r3, [r5, #12]
   2413c:	f023 0304 	bic.w	r3, r3, #4
   24140:	f043 0301 	orr.w	r3, r3, #1
   24144:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   24146:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   24148:	f387 8811 	msr	BASEPRI, r7
   2414c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   24150:	4628      	mov	r0, r5
   24152:	4798      	blx	r3
	__asm__ volatile(
   24154:	f04f 0320 	mov.w	r3, #32
   24158:	f3ef 8b11 	mrs	fp, BASEPRI
   2415c:	f383 8812 	msr	BASEPRI_MAX, r3
   24160:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   24164:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24166:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   24168:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2416c:	d419      	bmi.n	241a2 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   2416e:	60ea      	str	r2, [r5, #12]
   24170:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   24174:	f023 0302 	bic.w	r3, r3, #2
   24178:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	__asm__ volatile(
   2417c:	f38b 8811 	msr	BASEPRI, fp
   24180:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   24184:	05db      	lsls	r3, r3, #23
   24186:	d4ac      	bmi.n	240e2 <work_queue_main+0x12>
	z_impl_k_yield();
   24188:	f000 fb1c 	bl	247c4 <z_impl_k_yield>
}
   2418c:	e7a9      	b.n	240e2 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   2418e:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   24192:	2200      	movs	r2, #0
   24194:	2101      	movs	r1, #1
   24196:	4628      	mov	r0, r5
   24198:	f004 fa1b 	bl	285d2 <z_sched_wake>
   2419c:	2800      	cmp	r0, #0
   2419e:	d1f8      	bne.n	24192 <work_queue_main+0xc2>
   241a0:	e7b1      	b.n	24106 <work_queue_main+0x36>
	return list->head;
   241a2:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   241a4:	f023 0303 	bic.w	r3, r3, #3
   241a8:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   241aa:	2800      	cmp	r0, #0
   241ac:	d0e0      	beq.n	24170 <work_queue_main+0xa0>
	return node->next;
   241ae:	2700      	movs	r7, #0
	parent->next = child;
   241b0:	463b      	mov	r3, r7
	return node->next;
   241b2:	f8d0 a000 	ldr.w	sl, [r0]
   241b6:	2800      	cmp	r0, #0
   241b8:	d0da      	beq.n	24170 <work_queue_main+0xa0>
		if (wc->work == work) {
   241ba:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   241bc:	4601      	mov	r1, r0
		if (wc->work == work) {
   241be:	4295      	cmp	r5, r2
   241c0:	d10c      	bne.n	241dc <work_queue_main+0x10c>
   241c2:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   241c4:	b99f      	cbnz	r7, 241ee <work_queue_main+0x11e>
   241c6:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   241c8:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   241ca:	4282      	cmp	r2, r0
   241cc:	d100      	bne.n	241d0 <work_queue_main+0x100>
	list->tail = node;
   241ce:	6071      	str	r1, [r6, #4]
	parent->next = child;
   241d0:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   241d4:	f7ff ff2e 	bl	24034 <z_impl_k_sem_give>
}
   241d8:	4639      	mov	r1, r7
   241da:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   241dc:	f1ba 0f00 	cmp.w	sl, #0
   241e0:	d00b      	beq.n	241fa <work_queue_main+0x12a>
	return node->next;
   241e2:	f8da 2000 	ldr.w	r2, [sl]
   241e6:	4650      	mov	r0, sl
   241e8:	460f      	mov	r7, r1
   241ea:	4692      	mov	sl, r2
   241ec:	e7e3      	b.n	241b6 <work_queue_main+0xe6>
	parent->next = child;
   241ee:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   241f0:	6872      	ldr	r2, [r6, #4]
   241f2:	4282      	cmp	r2, r0
	list->tail = node;
   241f4:	bf08      	it	eq
   241f6:	6077      	streq	r7, [r6, #4]
}
   241f8:	e7ea      	b.n	241d0 <work_queue_main+0x100>
   241fa:	4652      	mov	r2, sl
   241fc:	e7f3      	b.n	241e6 <work_queue_main+0x116>
   241fe:	bf00      	nop
   24200:	2000d8d8 	.word	0x2000d8d8
   24204:	2000de5c 	.word	0x2000de5c

00024208 <submit_to_queue_locked>:
{
   24208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2420a:	68c3      	ldr	r3, [r0, #12]
{
   2420c:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2420e:	079a      	lsls	r2, r3, #30
{
   24210:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24212:	f3c3 0640 	ubfx	r6, r3, #1, #1
   24216:	d42c      	bmi.n	24272 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   24218:	075b      	lsls	r3, r3, #29
   2421a:	d41a      	bmi.n	24252 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   2421c:	680b      	ldr	r3, [r1, #0]
   2421e:	b90b      	cbnz	r3, 24224 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   24220:	6883      	ldr	r3, [r0, #8]
   24222:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   24224:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   24226:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   24228:	bf42      	ittt	mi
   2422a:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   2422c:	2602      	movmi	r6, #2
			*queuep = work->queue;
   2422e:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   24230:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   24232:	bf58      	it	pl
   24234:	2601      	movpl	r6, #1
	if (queue == NULL) {
   24236:	2d00      	cmp	r5, #0
   24238:	d03a      	beq.n	242b0 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2423a:	4b1f      	ldr	r3, [pc, #124]	; (242b8 <submit_to_queue_locked+0xb0>)
   2423c:	689b      	ldr	r3, [r3, #8]
   2423e:	42ab      	cmp	r3, r5
   24240:	d00a      	beq.n	24258 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   24242:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24246:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   24248:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2424c:	d414      	bmi.n	24278 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   2424e:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   24252:	2300      	movs	r3, #0
   24254:	603b      	str	r3, [r7, #0]
	return ret;
   24256:	e025      	b.n	242a4 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   24258:	f003 ffeb 	bl	28232 <k_is_in_isr>
   2425c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   24260:	2800      	cmp	r0, #0
   24262:	d1f0      	bne.n	24246 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24264:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   24266:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2426a:	d5f0      	bpl.n	2424e <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   2426c:	b152      	cbz	r2, 24284 <submit_to_queue_locked+0x7c>
   2426e:	075b      	lsls	r3, r3, #29
   24270:	d408      	bmi.n	24284 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   24272:	f06f 060f 	mvn.w	r6, #15
   24276:	e7ec      	b.n	24252 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   24278:	2a00      	cmp	r2, #0
   2427a:	d1fa      	bne.n	24272 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   2427c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   24280:	2b00      	cmp	r3, #0
   24282:	d1f6      	bne.n	24272 <submit_to_queue_locked+0x6a>
	parent->next = child;
   24284:	2300      	movs	r3, #0
   24286:	6023      	str	r3, [r4, #0]
	return list->tail;
   24288:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   2428c:	b963      	cbnz	r3, 242a8 <submit_to_queue_locked+0xa0>
	list->head = node;
   2428e:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   24292:	4628      	mov	r0, r5
   24294:	f004 f888 	bl	283a8 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   24298:	68e3      	ldr	r3, [r4, #12]
   2429a:	f043 0304 	orr.w	r3, r3, #4
   2429e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   242a0:	683b      	ldr	r3, [r7, #0]
   242a2:	60a3      	str	r3, [r4, #8]
}
   242a4:	4630      	mov	r0, r6
   242a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   242a8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   242aa:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   242ae:	e7f0      	b.n	24292 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   242b0:	f06f 0615 	mvn.w	r6, #21
   242b4:	e7cd      	b.n	24252 <submit_to_queue_locked+0x4a>
   242b6:	bf00      	nop
   242b8:	2000d8b0 	.word	0x2000d8b0

000242bc <k_work_submit>:
{
   242bc:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   242be:	4801      	ldr	r0, [pc, #4]	; (242c4 <k_work_submit+0x8>)
   242c0:	f004 b88d 	b.w	283de <k_work_submit_to_queue>
   242c4:	2000d008 	.word	0x2000d008

000242c8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   242c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   242ca:	4604      	mov	r4, r0
	list->head = NULL;
   242cc:	2000      	movs	r0, #0
   242ce:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   242d0:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   242d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   242d6:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   242da:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   242de:	f104 0098 	add.w	r0, r4, #152	; 0x98
   242e2:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   242e6:	b31d      	cbz	r5, 24330 <k_work_queue_start+0x68>
   242e8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   242ea:	2800      	cmp	r0, #0
   242ec:	f240 1001 	movw	r0, #257	; 0x101
   242f0:	bf08      	it	eq
   242f2:	2001      	moveq	r0, #1
	*flagp = flags;
   242f4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   242f8:	2000      	movs	r0, #0
   242fa:	f04f 36ff 	mov.w	r6, #4294967295
   242fe:	f04f 37ff 	mov.w	r7, #4294967295
   24302:	e9cd 3003 	strd	r3, r0, [sp, #12]
   24306:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2430a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2430e:	4620      	mov	r0, r4
   24310:	4b08      	ldr	r3, [pc, #32]	; (24334 <k_work_queue_start+0x6c>)
   24312:	9400      	str	r4, [sp, #0]
   24314:	f7ff fca8 	bl	23c68 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   24318:	b125      	cbz	r5, 24324 <k_work_queue_start+0x5c>
   2431a:	6829      	ldr	r1, [r5, #0]
   2431c:	b111      	cbz	r1, 24324 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   2431e:	4620      	mov	r0, r4
   24320:	f003 ff8d 	bl	2823e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   24324:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   24326:	b009      	add	sp, #36	; 0x24
   24328:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2432c:	f003 bf8c 	b.w	28248 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   24330:	2001      	movs	r0, #1
   24332:	e7df      	b.n	242f4 <k_work_queue_start+0x2c>
   24334:	000240d1 	.word	0x000240d1

00024338 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   24338:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   2433a:	4d07      	ldr	r5, [pc, #28]	; (24358 <z_reset_time_slice+0x20>)
   2433c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   2433e:	b154      	cbz	r4, 24356 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   24340:	f7f9 fc12 	bl	1db68 <sys_clock_elapsed>
   24344:	4b05      	ldr	r3, [pc, #20]	; (2435c <z_reset_time_slice+0x24>)
   24346:	4404      	add	r4, r0
   24348:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   2434a:	6828      	ldr	r0, [r5, #0]
   2434c:	2100      	movs	r1, #0
	}
}
   2434e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   24352:	f004 b987 	b.w	28664 <z_set_timeout_expiry>
}
   24356:	bd38      	pop	{r3, r4, r5, pc}
   24358:	2000d8e8 	.word	0x2000d8e8
   2435c:	2000d8b0 	.word	0x2000d8b0

00024360 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   24360:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   24362:	4d0d      	ldr	r5, [pc, #52]	; (24398 <update_cache+0x38>)
   24364:	462b      	mov	r3, r5
   24366:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2436a:	429c      	cmp	r4, r3
   2436c:	d000      	beq.n	24370 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2436e:	b904      	cbnz	r4, 24372 <update_cache+0x12>
   24370:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   24372:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   24374:	b938      	cbnz	r0, 24386 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   24376:	7b5a      	ldrb	r2, [r3, #13]
   24378:	06d2      	lsls	r2, r2, #27
   2437a:	d104      	bne.n	24386 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2437c:	69a2      	ldr	r2, [r4, #24]
   2437e:	b912      	cbnz	r2, 24386 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   24380:	89da      	ldrh	r2, [r3, #14]
   24382:	2a7f      	cmp	r2, #127	; 0x7f
   24384:	d805      	bhi.n	24392 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   24386:	429c      	cmp	r4, r3
   24388:	d002      	beq.n	24390 <update_cache+0x30>
			z_reset_time_slice(thread);
   2438a:	4620      	mov	r0, r4
   2438c:	f7ff ffd4 	bl	24338 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   24390:	4623      	mov	r3, r4
   24392:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   24394:	bd38      	pop	{r3, r4, r5, pc}
   24396:	bf00      	nop
   24398:	2000d8b0 	.word	0x2000d8b0

0002439c <move_thread_to_end_of_prio_q>:
{
   2439c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2439e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   243a2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   243a4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   243a6:	7b43      	ldrb	r3, [r0, #13]
   243a8:	da04      	bge.n	243b4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   243aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   243ae:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   243b0:	f004 f826 	bl	28400 <sys_dlist_remove>
	return list->head == list;
   243b4:	4a15      	ldr	r2, [pc, #84]	; (2440c <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   243b6:	7b4b      	ldrb	r3, [r1, #13]
   243b8:	4610      	mov	r0, r2
   243ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
   243be:	734b      	strb	r3, [r1, #13]
   243c0:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   243c4:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   243c6:	4283      	cmp	r3, r0
   243c8:	bf08      	it	eq
   243ca:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   243cc:	b923      	cbnz	r3, 243d8 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   243ce:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   243d2:	6021      	str	r1, [r4, #0]
	list->tail = node;
   243d4:	6251      	str	r1, [r2, #36]	; 0x24
}
   243d6:	e00c      	b.n	243f2 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   243d8:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   243dc:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   243e0:	42b5      	cmp	r5, r6
   243e2:	d00e      	beq.n	24402 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   243e4:	42ae      	cmp	r6, r5
   243e6:	dd0c      	ble.n	24402 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   243e8:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   243ea:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   243ee:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   243f0:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   243f2:	6890      	ldr	r0, [r2, #8]
}
   243f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   243f8:	1a43      	subs	r3, r0, r1
   243fa:	4258      	negs	r0, r3
   243fc:	4158      	adcs	r0, r3
   243fe:	f7ff bfaf 	b.w	24360 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   24402:	429c      	cmp	r4, r3
   24404:	d0e3      	beq.n	243ce <move_thread_to_end_of_prio_q+0x32>
   24406:	681b      	ldr	r3, [r3, #0]
   24408:	e7e0      	b.n	243cc <move_thread_to_end_of_prio_q+0x30>
   2440a:	bf00      	nop
   2440c:	2000d8b0 	.word	0x2000d8b0

00024410 <ready_thread>:
{
   24410:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   24412:	f990 300d 	ldrsb.w	r3, [r0, #13]
   24416:	7b42      	ldrb	r2, [r0, #13]
   24418:	2b00      	cmp	r3, #0
   2441a:	db29      	blt.n	24470 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2441c:	06d3      	lsls	r3, r2, #27
   2441e:	d127      	bne.n	24470 <ready_thread+0x60>
	return node->next != NULL;
   24420:	6983      	ldr	r3, [r0, #24]
   24422:	bb2b      	cbnz	r3, 24470 <ready_thread+0x60>
	return list->head == list;
   24424:	4913      	ldr	r1, [pc, #76]	; (24474 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   24426:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2442a:	7342      	strb	r2, [r0, #13]
   2442c:	460a      	mov	r2, r1
   2442e:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24432:	4294      	cmp	r4, r2
   24434:	bf18      	it	ne
   24436:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   24438:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2443a:	b923      	cbnz	r3, 24446 <ready_thread+0x36>
	node->prev = tail;
   2443c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   24440:	6020      	str	r0, [r4, #0]
	list->tail = node;
   24442:	6248      	str	r0, [r1, #36]	; 0x24
}
   24444:	e00c      	b.n	24460 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   24446:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2444a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2444e:	42b5      	cmp	r5, r6
   24450:	d00a      	beq.n	24468 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   24452:	42ae      	cmp	r6, r5
   24454:	dd08      	ble.n	24468 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   24456:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24458:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2445c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   2445e:	6058      	str	r0, [r3, #4]
		update_cache(0);
   24460:	2000      	movs	r0, #0
}
   24462:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   24464:	f7ff bf7c 	b.w	24360 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   24468:	42a3      	cmp	r3, r4
   2446a:	d0e7      	beq.n	2443c <ready_thread+0x2c>
   2446c:	681b      	ldr	r3, [r3, #0]
   2446e:	e7e4      	b.n	2443a <ready_thread+0x2a>
}
   24470:	bc70      	pop	{r4, r5, r6}
   24472:	4770      	bx	lr
   24474:	2000d8b0 	.word	0x2000d8b0

00024478 <unready_thread>:
{
   24478:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   2447a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2447e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   24480:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   24482:	7b43      	ldrb	r3, [r0, #13]
   24484:	da04      	bge.n	24490 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2448a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2448c:	f003 ffb8 	bl	28400 <sys_dlist_remove>
	update_cache(thread == _current);
   24490:	4b04      	ldr	r3, [pc, #16]	; (244a4 <unready_thread+0x2c>)
   24492:	6898      	ldr	r0, [r3, #8]
   24494:	1a43      	subs	r3, r0, r1
   24496:	4258      	negs	r0, r3
   24498:	4158      	adcs	r0, r3
}
   2449a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   2449e:	f7ff bf5f 	b.w	24360 <update_cache>
   244a2:	bf00      	nop
   244a4:	2000d8b0 	.word	0x2000d8b0

000244a8 <pend_locked>:
{
   244a8:	b570      	push	{r4, r5, r6, lr}
   244aa:	4615      	mov	r5, r2
   244ac:	461c      	mov	r4, r3
   244ae:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   244b0:	f003 ffda 	bl	28468 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   244b4:	f1b4 3fff 	cmp.w	r4, #4294967295
   244b8:	bf08      	it	eq
   244ba:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   244be:	d008      	beq.n	244d2 <pend_locked+0x2a>
   244c0:	462a      	mov	r2, r5
   244c2:	4623      	mov	r3, r4
   244c4:	f106 0018 	add.w	r0, r6, #24
   244c8:	4902      	ldr	r1, [pc, #8]	; (244d4 <pend_locked+0x2c>)
}
   244ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   244ce:	f000 baf5 	b.w	24abc <z_add_timeout>
   244d2:	bd70      	pop	{r4, r5, r6, pc}
   244d4:	00028425 	.word	0x00028425

000244d8 <k_sched_time_slice_set>:
{
   244d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   244da:	4604      	mov	r4, r0
   244dc:	460d      	mov	r5, r1
	__asm__ volatile(
   244de:	f04f 0320 	mov.w	r3, #32
   244e2:	f3ef 8711 	mrs	r7, BASEPRI
   244e6:	f383 8812 	msr	BASEPRI_MAX, r3
   244ea:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   244ee:	2600      	movs	r6, #0
   244f0:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   244f4:	f240 30e7 	movw	r0, #999	; 0x3e7
   244f8:	4631      	mov	r1, r6
   244fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   244fe:	2300      	movs	r3, #0
   24500:	fbe4 010c 	umlal	r0, r1, r4, ip
   24504:	f7f4 fc00 	bl	18d08 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   24508:	42b4      	cmp	r4, r6
   2450a:	dd02      	ble.n	24512 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   2450c:	2802      	cmp	r0, #2
   2450e:	bfb8      	it	lt
   24510:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   24512:	4a07      	ldr	r2, [pc, #28]	; (24530 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   24514:	4b07      	ldr	r3, [pc, #28]	; (24534 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   24516:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   24518:	4a07      	ldr	r2, [pc, #28]	; (24538 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   2451a:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   2451c:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   2451e:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   24520:	f7ff ff0a 	bl	24338 <z_reset_time_slice>
	__asm__ volatile(
   24524:	f387 8811 	msr	BASEPRI, r7
   24528:	f3bf 8f6f 	isb	sy
}
   2452c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2452e:	bf00      	nop
   24530:	2000d8e8 	.word	0x2000d8e8
   24534:	2000d8b0 	.word	0x2000d8b0
   24538:	2000d8e4 	.word	0x2000d8e4

0002453c <z_time_slice>:
{
   2453c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2453e:	f04f 0320 	mov.w	r3, #32
   24542:	f3ef 8511 	mrs	r5, BASEPRI
   24546:	f383 8812 	msr	BASEPRI_MAX, r3
   2454a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   2454e:	4b17      	ldr	r3, [pc, #92]	; (245ac <z_time_slice+0x70>)
   24550:	4a17      	ldr	r2, [pc, #92]	; (245b0 <z_time_slice+0x74>)
   24552:	689c      	ldr	r4, [r3, #8]
   24554:	6811      	ldr	r1, [r2, #0]
   24556:	428c      	cmp	r4, r1
   24558:	d107      	bne.n	2456a <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   2455a:	4620      	mov	r0, r4
   2455c:	f7ff feec 	bl	24338 <z_reset_time_slice>
	__asm__ volatile(
   24560:	f385 8811 	msr	BASEPRI, r5
   24564:	f3bf 8f6f 	isb	sy
}
   24568:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   2456a:	2100      	movs	r1, #0
   2456c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   2456e:	4a11      	ldr	r2, [pc, #68]	; (245b4 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   24570:	6812      	ldr	r2, [r2, #0]
   24572:	b1c2      	cbz	r2, 245a6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   24574:	89e2      	ldrh	r2, [r4, #14]
   24576:	2a7f      	cmp	r2, #127	; 0x7f
   24578:	d815      	bhi.n	245a6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   2457a:	7b62      	ldrb	r2, [r4, #13]
   2457c:	06d2      	lsls	r2, r2, #27
   2457e:	d112      	bne.n	245a6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   24580:	4a0d      	ldr	r2, [pc, #52]	; (245b8 <z_time_slice+0x7c>)
   24582:	f994 100e 	ldrsb.w	r1, [r4, #14]
   24586:	6812      	ldr	r2, [r2, #0]
   24588:	4291      	cmp	r1, r2
   2458a:	db0c      	blt.n	245a6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   2458c:	4a0b      	ldr	r2, [pc, #44]	; (245bc <z_time_slice+0x80>)
   2458e:	4294      	cmp	r4, r2
   24590:	d009      	beq.n	245a6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   24592:	691a      	ldr	r2, [r3, #16]
   24594:	4282      	cmp	r2, r0
   24596:	dc03      	bgt.n	245a0 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   24598:	4620      	mov	r0, r4
   2459a:	f7ff feff 	bl	2439c <move_thread_to_end_of_prio_q>
   2459e:	e7dc      	b.n	2455a <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   245a0:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   245a2:	611a      	str	r2, [r3, #16]
   245a4:	e7dc      	b.n	24560 <z_time_slice+0x24>
   245a6:	2200      	movs	r2, #0
   245a8:	e7fb      	b.n	245a2 <z_time_slice+0x66>
   245aa:	bf00      	nop
   245ac:	2000d8b0 	.word	0x2000d8b0
   245b0:	2000d8e0 	.word	0x2000d8e0
   245b4:	2000d8e8 	.word	0x2000d8e8
   245b8:	2000d8e4 	.word	0x2000d8e4
   245bc:	2000cef0 	.word	0x2000cef0

000245c0 <z_pend_curr>:
{
   245c0:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   245c2:	480c      	ldr	r0, [pc, #48]	; (245f4 <z_pend_curr+0x34>)
   245c4:	4d0c      	ldr	r5, [pc, #48]	; (245f8 <z_pend_curr+0x38>)
   245c6:	6886      	ldr	r6, [r0, #8]
{
   245c8:	460c      	mov	r4, r1
	pending_current = _current;
   245ca:	602e      	str	r6, [r5, #0]
{
   245cc:	4611      	mov	r1, r2
   245ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   245d2:	f04f 0620 	mov.w	r6, #32
   245d6:	f3ef 8511 	mrs	r5, BASEPRI
   245da:	f386 8812 	msr	BASEPRI_MAX, r6
   245de:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   245e2:	6880      	ldr	r0, [r0, #8]
   245e4:	f7ff ff60 	bl	244a8 <pend_locked>
	ret = arch_swap(key);
   245e8:	4620      	mov	r0, r4
}
   245ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   245ee:	f7f7 b8e9 	b.w	1b7c4 <arch_swap>
   245f2:	bf00      	nop
   245f4:	2000d8b0 	.word	0x2000d8b0
   245f8:	2000d8e0 	.word	0x2000d8e0

000245fc <z_set_prio>:
{
   245fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245fe:	4604      	mov	r4, r0
   24600:	f04f 0320 	mov.w	r3, #32
   24604:	f3ef 8611 	mrs	r6, BASEPRI
   24608:	f383 8812 	msr	BASEPRI_MAX, r3
   2460c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   24610:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   24612:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24614:	06da      	lsls	r2, r3, #27
   24616:	d119      	bne.n	2464c <z_set_prio+0x50>
	return node->next != NULL;
   24618:	6985      	ldr	r5, [r0, #24]
   2461a:	b9bd      	cbnz	r5, 2464c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2461c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24620:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24622:	f003 feed 	bl	28400 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   24626:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   24628:	4a16      	ldr	r2, [pc, #88]	; (24684 <z_set_prio+0x88>)
   2462a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2462e:	7343      	strb	r3, [r0, #13]
   24630:	4613      	mov	r3, r2
				thread->base.prio = prio;
   24632:	7381      	strb	r1, [r0, #14]
   24634:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24638:	4298      	cmp	r0, r3
   2463a:	bf18      	it	ne
   2463c:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   2463e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24640:	b95d      	cbnz	r5, 2465a <z_set_prio+0x5e>
	node->prev = tail;
   24642:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   24646:	6004      	str	r4, [r0, #0]
	list->tail = node;
   24648:	6254      	str	r4, [r2, #36]	; 0x24
}
   2464a:	e011      	b.n	24670 <z_set_prio+0x74>
   2464c:	2000      	movs	r0, #0
			thread->base.prio = prio;
   2464e:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   24650:	f386 8811 	msr	BASEPRI, r6
   24654:	f3bf 8f6f 	isb	sy
}
   24658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   2465a:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   2465e:	42b9      	cmp	r1, r7
   24660:	d00b      	beq.n	2467a <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   24662:	428f      	cmp	r7, r1
   24664:	dd09      	ble.n	2467a <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   24666:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   24668:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   2466c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2466e:	606c      	str	r4, [r5, #4]
			update_cache(1);
   24670:	2001      	movs	r0, #1
   24672:	f7ff fe75 	bl	24360 <update_cache>
   24676:	2001      	movs	r0, #1
   24678:	e7ea      	b.n	24650 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   2467a:	42a8      	cmp	r0, r5
   2467c:	d0e1      	beq.n	24642 <z_set_prio+0x46>
   2467e:	682d      	ldr	r5, [r5, #0]
   24680:	e7de      	b.n	24640 <z_set_prio+0x44>
   24682:	bf00      	nop
   24684:	2000d8b0 	.word	0x2000d8b0

00024688 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   24688:	b949      	cbnz	r1, 2469e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2468a:	f3ef 8005 	mrs	r0, IPSR
   2468e:	b930      	cbnz	r0, 2469e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   24690:	4b05      	ldr	r3, [pc, #20]	; (246a8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   24692:	69da      	ldr	r2, [r3, #28]
   24694:	689b      	ldr	r3, [r3, #8]
   24696:	429a      	cmp	r2, r3
   24698:	d001      	beq.n	2469e <z_reschedule+0x16>
   2469a:	f7f7 b893 	b.w	1b7c4 <arch_swap>
   2469e:	f381 8811 	msr	BASEPRI, r1
   246a2:	f3bf 8f6f 	isb	sy
}
   246a6:	4770      	bx	lr
   246a8:	2000d8b0 	.word	0x2000d8b0

000246ac <z_sched_start>:
{
   246ac:	b510      	push	{r4, lr}
	__asm__ volatile(
   246ae:	f04f 0220 	mov.w	r2, #32
   246b2:	f3ef 8411 	mrs	r4, BASEPRI
   246b6:	f382 8812 	msr	BASEPRI_MAX, r2
   246ba:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   246be:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   246c0:	0751      	lsls	r1, r2, #29
   246c2:	d404      	bmi.n	246ce <z_sched_start+0x22>
	__asm__ volatile(
   246c4:	f384 8811 	msr	BASEPRI, r4
   246c8:	f3bf 8f6f 	isb	sy
}
   246cc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   246ce:	f022 0204 	bic.w	r2, r2, #4
   246d2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   246d4:	f7ff fe9c 	bl	24410 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   246d8:	4621      	mov	r1, r4
}
   246da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   246de:	4801      	ldr	r0, [pc, #4]	; (246e4 <z_sched_start+0x38>)
   246e0:	f7ff bfd2 	b.w	24688 <z_reschedule>
   246e4:	2000de5c 	.word	0x2000de5c

000246e8 <z_impl_k_thread_suspend>:
{
   246e8:	b570      	push	{r4, r5, r6, lr}
   246ea:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   246ec:	3018      	adds	r0, #24
   246ee:	f003 ff93 	bl	28618 <z_abort_timeout>
	__asm__ volatile(
   246f2:	f04f 0320 	mov.w	r3, #32
   246f6:	f3ef 8611 	mrs	r6, BASEPRI
   246fa:	f383 8812 	msr	BASEPRI_MAX, r3
   246fe:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   24702:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   24706:	7b63      	ldrb	r3, [r4, #13]
   24708:	2a00      	cmp	r2, #0
   2470a:	da05      	bge.n	24718 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2470c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   24710:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24712:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24714:	f003 fe74 	bl	28400 <sys_dlist_remove>
		update_cache(thread == _current);
   24718:	4d0b      	ldr	r5, [pc, #44]	; (24748 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2471a:	7b63      	ldrb	r3, [r4, #13]
   2471c:	68a8      	ldr	r0, [r5, #8]
   2471e:	f043 0310 	orr.w	r3, r3, #16
   24722:	7363      	strb	r3, [r4, #13]
   24724:	1b03      	subs	r3, r0, r4
   24726:	4258      	negs	r0, r3
   24728:	4158      	adcs	r0, r3
   2472a:	f7ff fe19 	bl	24360 <update_cache>
	__asm__ volatile(
   2472e:	f386 8811 	msr	BASEPRI, r6
   24732:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   24736:	68ab      	ldr	r3, [r5, #8]
   24738:	42a3      	cmp	r3, r4
   2473a:	d103      	bne.n	24744 <z_impl_k_thread_suspend+0x5c>
}
   2473c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   24740:	f003 bf2d 	b.w	2859e <z_reschedule_unlocked>
}
   24744:	bd70      	pop	{r4, r5, r6, pc}
   24746:	bf00      	nop
   24748:	2000d8b0 	.word	0x2000d8b0

0002474c <k_sched_lock>:
	__asm__ volatile(
   2474c:	f04f 0320 	mov.w	r3, #32
   24750:	f3ef 8111 	mrs	r1, BASEPRI
   24754:	f383 8812 	msr	BASEPRI_MAX, r3
   24758:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   2475c:	4b04      	ldr	r3, [pc, #16]	; (24770 <k_sched_lock+0x24>)
   2475e:	689a      	ldr	r2, [r3, #8]
   24760:	7bd3      	ldrb	r3, [r2, #15]
   24762:	3b01      	subs	r3, #1
   24764:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   24766:	f381 8811 	msr	BASEPRI, r1
   2476a:	f3bf 8f6f 	isb	sy
}
   2476e:	4770      	bx	lr
   24770:	2000d8b0 	.word	0x2000d8b0

00024774 <k_sched_unlock>:
{
   24774:	b510      	push	{r4, lr}
	__asm__ volatile(
   24776:	f04f 0320 	mov.w	r3, #32
   2477a:	f3ef 8411 	mrs	r4, BASEPRI
   2477e:	f383 8812 	msr	BASEPRI_MAX, r3
   24782:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   24786:	4b08      	ldr	r3, [pc, #32]	; (247a8 <k_sched_unlock+0x34>)
		update_cache(0);
   24788:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2478a:	689a      	ldr	r2, [r3, #8]
   2478c:	7bd3      	ldrb	r3, [r2, #15]
   2478e:	3301      	adds	r3, #1
   24790:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   24792:	f7ff fde5 	bl	24360 <update_cache>
	__asm__ volatile(
   24796:	f384 8811 	msr	BASEPRI, r4
   2479a:	f3bf 8f6f 	isb	sy
}
   2479e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   247a2:	f003 befc 	b.w	2859e <z_reschedule_unlocked>
   247a6:	bf00      	nop
   247a8:	2000d8b0 	.word	0x2000d8b0

000247ac <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   247ac:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   247ae:	4b04      	ldr	r3, [pc, #16]	; (247c0 <z_sched_init+0x14>)
   247b0:	4608      	mov	r0, r1
   247b2:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   247b6:	e9c3 2208 	strd	r2, r2, [r3, #32]
   247ba:	f7ff be8d 	b.w	244d8 <k_sched_time_slice_set>
   247be:	bf00      	nop
   247c0:	2000d8b0 	.word	0x2000d8b0

000247c4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   247c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   247c6:	f04f 0320 	mov.w	r3, #32
   247ca:	f3ef 8511 	mrs	r5, BASEPRI
   247ce:	f383 8812 	msr	BASEPRI_MAX, r3
   247d2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   247d6:	4919      	ldr	r1, [pc, #100]	; (2483c <z_impl_k_yield+0x78>)
   247d8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   247da:	7b43      	ldrb	r3, [r0, #13]
   247dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   247e0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   247e2:	f003 fe0d 	bl	28400 <sys_dlist_remove>
	return list->head == list;
   247e6:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   247e8:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   247ea:	7b5a      	ldrb	r2, [r3, #13]
   247ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
   247f0:	735a      	strb	r2, [r3, #13]
   247f2:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   247f6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   247f8:	4282      	cmp	r2, r0
   247fa:	bf08      	it	eq
   247fc:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   247fe:	b922      	cbnz	r2, 2480a <z_impl_k_yield+0x46>
	node->prev = tail;
   24800:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   24804:	6023      	str	r3, [r4, #0]
	list->tail = node;
   24806:	624b      	str	r3, [r1, #36]	; 0x24
}
   24808:	e00c      	b.n	24824 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   2480a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2480e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   24812:	42be      	cmp	r6, r7
   24814:	d00e      	beq.n	24834 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   24816:	42b7      	cmp	r7, r6
   24818:	dd0c      	ble.n	24834 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   2481a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2481c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   24820:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   24822:	6053      	str	r3, [r2, #4]
	update_cache(1);
   24824:	2001      	movs	r0, #1
   24826:	f7ff fd9b 	bl	24360 <update_cache>
   2482a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   2482c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   24830:	f7f6 bfc8 	b.w	1b7c4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   24834:	42a2      	cmp	r2, r4
   24836:	d0e3      	beq.n	24800 <z_impl_k_yield+0x3c>
   24838:	6812      	ldr	r2, [r2, #0]
   2483a:	e7e0      	b.n	247fe <z_impl_k_yield+0x3a>
   2483c:	2000d8b0 	.word	0x2000d8b0

00024840 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   24840:	ea50 0301 	orrs.w	r3, r0, r1
{
   24844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24848:	4605      	mov	r5, r0
   2484a:	460e      	mov	r6, r1
	if (ticks == 0) {
   2484c:	d103      	bne.n	24856 <z_tick_sleep+0x16>
	z_impl_k_yield();
   2484e:	f7ff ffb9 	bl	247c4 <z_impl_k_yield>
		k_yield();
		return 0;
   24852:	2000      	movs	r0, #0
   24854:	e02c      	b.n	248b0 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   24856:	1c83      	adds	r3, r0, #2
   24858:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   2485c:	db2a      	blt.n	248b4 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2485e:	f003 ff1d 	bl	2869c <sys_clock_tick_get_32>
   24862:	182c      	adds	r4, r5, r0
   24864:	f04f 0320 	mov.w	r3, #32
   24868:	f3ef 8811 	mrs	r8, BASEPRI
   2486c:	f383 8812 	msr	BASEPRI_MAX, r3
   24870:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   24874:	4f11      	ldr	r7, [pc, #68]	; (248bc <z_tick_sleep+0x7c>)
   24876:	4b12      	ldr	r3, [pc, #72]	; (248c0 <z_tick_sleep+0x80>)
   24878:	68b8      	ldr	r0, [r7, #8]
   2487a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   2487c:	f7ff fdfc 	bl	24478 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   24880:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24882:	4910      	ldr	r1, [pc, #64]	; (248c4 <z_tick_sleep+0x84>)
   24884:	462a      	mov	r2, r5
   24886:	4633      	mov	r3, r6
   24888:	3018      	adds	r0, #24
   2488a:	f000 f917 	bl	24abc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2488e:	68ba      	ldr	r2, [r7, #8]
   24890:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   24892:	7b53      	ldrb	r3, [r2, #13]
   24894:	f043 0310 	orr.w	r3, r3, #16
   24898:	7353      	strb	r3, [r2, #13]
   2489a:	f7f6 ff93 	bl	1b7c4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   2489e:	f003 fefd 	bl	2869c <sys_clock_tick_get_32>
   248a2:	1a20      	subs	r0, r4, r0
   248a4:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   248a8:	2801      	cmp	r0, #1
   248aa:	f173 0300 	sbcs.w	r3, r3, #0
   248ae:	dbd0      	blt.n	24852 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   248b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   248b4:	f06f 0401 	mvn.w	r4, #1
   248b8:	1a24      	subs	r4, r4, r0
   248ba:	e7d3      	b.n	24864 <z_tick_sleep+0x24>
   248bc:	2000d8b0 	.word	0x2000d8b0
   248c0:	2000d8e0 	.word	0x2000d8e0
   248c4:	00028425 	.word	0x00028425

000248c8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   248c8:	f1b1 3fff 	cmp.w	r1, #4294967295
   248cc:	bf08      	it	eq
   248ce:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   248d2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   248d4:	d106      	bne.n	248e4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   248d6:	4b08      	ldr	r3, [pc, #32]	; (248f8 <z_impl_k_sleep+0x30>)
   248d8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   248da:	f7ff ff05 	bl	246e8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   248de:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   248e2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   248e4:	f7ff ffac 	bl	24840 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   248e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   248ec:	fb80 0303 	smull	r0, r3, r0, r3
   248f0:	0bc0      	lsrs	r0, r0, #15
   248f2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   248f6:	e7f4      	b.n	248e2 <z_impl_k_sleep+0x1a>
   248f8:	2000d8b0 	.word	0x2000d8b0

000248fc <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   248fc:	4b01      	ldr	r3, [pc, #4]	; (24904 <z_impl_z_current_get+0x8>)
   248fe:	6898      	ldr	r0, [r3, #8]
   24900:	4770      	bx	lr
   24902:	bf00      	nop
   24904:	2000d8b0 	.word	0x2000d8b0

00024908 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   24908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2490c:	4604      	mov	r4, r0
   2490e:	f04f 0320 	mov.w	r3, #32
   24912:	f3ef 8611 	mrs	r6, BASEPRI
   24916:	f383 8812 	msr	BASEPRI_MAX, r3
   2491a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   2491e:	7b03      	ldrb	r3, [r0, #12]
   24920:	07d9      	lsls	r1, r3, #31
   24922:	d50b      	bpl.n	2493c <z_thread_abort+0x34>
	__asm__ volatile(
   24924:	f386 8811 	msr	BASEPRI, r6
   24928:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   2492c:	4040      	eors	r0, r0
   2492e:	f380 8811 	msr	BASEPRI, r0
   24932:	f04f 0004 	mov.w	r0, #4
   24936:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   24938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2493c:	7b43      	ldrb	r3, [r0, #13]
   2493e:	071a      	lsls	r2, r3, #28
   24940:	d504      	bpl.n	2494c <z_thread_abort+0x44>
   24942:	f386 8811 	msr	BASEPRI, r6
   24946:	f3bf 8f6f 	isb	sy
   2494a:	e7f5      	b.n	24938 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2494c:	f023 0220 	bic.w	r2, r3, #32
   24950:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   24954:	09d2      	lsrs	r2, r2, #7
   24956:	d120      	bne.n	2499a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   24958:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   2495a:	68a3      	ldr	r3, [r4, #8]
   2495c:	b113      	cbz	r3, 24964 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   2495e:	4620      	mov	r0, r4
   24960:	f003 fd56 	bl	28410 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   24964:	f104 0018 	add.w	r0, r4, #24
   24968:	f003 fe56 	bl	28618 <z_abort_timeout>
   2496c:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   24970:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   24974:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24976:	42bd      	cmp	r5, r7
   24978:	d000      	beq.n	2497c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2497a:	b9b5      	cbnz	r5, 249aa <z_thread_abort+0xa2>
		update_cache(1);
   2497c:	2001      	movs	r0, #1
   2497e:	f7ff fcef 	bl	24360 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   24982:	4b10      	ldr	r3, [pc, #64]	; (249c4 <z_thread_abort+0xbc>)
   24984:	689b      	ldr	r3, [r3, #8]
   24986:	42a3      	cmp	r3, r4
   24988:	d1db      	bne.n	24942 <z_thread_abort+0x3a>
   2498a:	f3ef 8305 	mrs	r3, IPSR
   2498e:	2b00      	cmp	r3, #0
   24990:	d1d7      	bne.n	24942 <z_thread_abort+0x3a>
   24992:	4630      	mov	r0, r6
   24994:	f7f6 ff16 	bl	1b7c4 <arch_swap>
	return ret;
   24998:	e7d3      	b.n	24942 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2499a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2499e:	f043 0308 	orr.w	r3, r3, #8
   249a2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   249a4:	f003 fd2c 	bl	28400 <sys_dlist_remove>
}
   249a8:	e7d7      	b.n	2495a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   249aa:	4628      	mov	r0, r5
   249ac:	f003 fd30 	bl	28410 <unpend_thread_no_timeout>
   249b0:	f105 0018 	add.w	r0, r5, #24
   249b4:	f003 fe30 	bl	28618 <z_abort_timeout>
		ready_thread(thread);
   249b8:	4628      	mov	r0, r5
   249ba:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   249be:	f7ff fd27 	bl	24410 <ready_thread>
   249c2:	e7d7      	b.n	24974 <z_thread_abort+0x6c>
   249c4:	2000d8b0 	.word	0x2000d8b0

000249c8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   249c8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   249ca:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   249ce:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   249d0:	e9cd 6700 	strd	r6, r7, [sp]
   249d4:	f7ff fdf4 	bl	245c0 <z_pend_curr>

	if (data != NULL) {
   249d8:	b11c      	cbz	r4, 249e2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   249da:	4b03      	ldr	r3, [pc, #12]	; (249e8 <z_sched_wait+0x20>)
   249dc:	689b      	ldr	r3, [r3, #8]
   249de:	695b      	ldr	r3, [r3, #20]
   249e0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   249e2:	b002      	add	sp, #8
   249e4:	bdd0      	pop	{r4, r6, r7, pc}
   249e6:	bf00      	nop
   249e8:	2000d8b0 	.word	0x2000d8b0

000249ec <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   249ec:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   249ee:	4806      	ldr	r0, [pc, #24]	; (24a08 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   249f0:	4a06      	ldr	r2, [pc, #24]	; (24a0c <z_data_copy+0x20>)
   249f2:	4907      	ldr	r1, [pc, #28]	; (24a10 <z_data_copy+0x24>)
   249f4:	1a12      	subs	r2, r2, r0
   249f6:	f003 fb9e 	bl	28136 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   249fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   249fe:	4a05      	ldr	r2, [pc, #20]	; (24a14 <z_data_copy+0x28>)
   24a00:	4905      	ldr	r1, [pc, #20]	; (24a18 <z_data_copy+0x2c>)
   24a02:	4806      	ldr	r0, [pc, #24]	; (24a1c <z_data_copy+0x30>)
   24a04:	f003 bb97 	b.w	28136 <z_early_memcpy>
   24a08:	2000c580 	.word	0x2000c580
   24a0c:	2000c964 	.word	0x2000c964
   24a10:	0002b81c 	.word	0x0002b81c
   24a14:	00000000 	.word	0x00000000
   24a18:	0002b804 	.word	0x0002b804
   24a1c:	2000c580 	.word	0x2000c580

00024a20 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   24a20:	4b03      	ldr	r3, [pc, #12]	; (24a30 <elapsed+0x10>)
   24a22:	681b      	ldr	r3, [r3, #0]
   24a24:	b90b      	cbnz	r3, 24a2a <elapsed+0xa>
   24a26:	f7f9 b89f 	b.w	1db68 <sys_clock_elapsed>
}
   24a2a:	2000      	movs	r0, #0
   24a2c:	4770      	bx	lr
   24a2e:	bf00      	nop
   24a30:	2000d8ec 	.word	0x2000d8ec

00024a34 <next_timeout>:

static int32_t next_timeout(void)
{
   24a34:	b510      	push	{r4, lr}
	return list->head == list;
   24a36:	4b11      	ldr	r3, [pc, #68]	; (24a7c <next_timeout+0x48>)
   24a38:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24a3a:	429c      	cmp	r4, r3
   24a3c:	d10a      	bne.n	24a54 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   24a3e:	f7ff ffef 	bl	24a20 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   24a42:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   24a46:	4b0e      	ldr	r3, [pc, #56]	; (24a80 <next_timeout+0x4c>)
   24a48:	691b      	ldr	r3, [r3, #16]
   24a4a:	b113      	cbz	r3, 24a52 <next_timeout+0x1e>
   24a4c:	4298      	cmp	r0, r3
   24a4e:	bfa8      	it	ge
   24a50:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   24a52:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   24a54:	f7ff ffe4 	bl	24a20 <elapsed>
	if ((to == NULL) ||
   24a58:	2c00      	cmp	r4, #0
   24a5a:	d0f2      	beq.n	24a42 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   24a5c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   24a60:	1a1b      	subs	r3, r3, r0
   24a62:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   24a66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   24a6a:	f172 0100 	sbcs.w	r1, r2, #0
   24a6e:	dae8      	bge.n	24a42 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   24a70:	2a00      	cmp	r2, #0
   24a72:	bfac      	ite	ge
   24a74:	4618      	movge	r0, r3
   24a76:	2000      	movlt	r0, #0
   24a78:	e7e5      	b.n	24a46 <next_timeout+0x12>
   24a7a:	bf00      	nop
   24a7c:	2000c700 	.word	0x2000c700
   24a80:	2000d8b0 	.word	0x2000d8b0

00024a84 <remove_timeout>:
{
   24a84:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24a86:	b170      	cbz	r0, 24aa6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   24a88:	4b0b      	ldr	r3, [pc, #44]	; (24ab8 <remove_timeout+0x34>)
   24a8a:	685b      	ldr	r3, [r3, #4]
   24a8c:	4298      	cmp	r0, r3
   24a8e:	d00a      	beq.n	24aa6 <remove_timeout+0x22>
   24a90:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   24a92:	b143      	cbz	r3, 24aa6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   24a94:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   24a98:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   24a9c:	1912      	adds	r2, r2, r4
   24a9e:	eb41 0105 	adc.w	r1, r1, r5
   24aa2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   24aa6:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   24aaa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24aac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24aae:	2300      	movs	r3, #0
	node->prev = NULL;
   24ab0:	e9c0 3300 	strd	r3, r3, [r0]
}
   24ab4:	bd30      	pop	{r4, r5, pc}
   24ab6:	bf00      	nop
   24ab8:	2000c700 	.word	0x2000c700

00024abc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24abc:	f1b3 3fff 	cmp.w	r3, #4294967295
   24ac0:	bf08      	it	eq
   24ac2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   24ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24ac8:	4604      	mov	r4, r0
   24aca:	461d      	mov	r5, r3
   24acc:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24ace:	d061      	beq.n	24b94 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   24ad0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   24ad2:	f04f 0320 	mov.w	r3, #32
   24ad6:	f3ef 8711 	mrs	r7, BASEPRI
   24ada:	f383 8812 	msr	BASEPRI_MAX, r3
   24ade:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   24ae2:	3201      	adds	r2, #1
   24ae4:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   24ae8:	da24      	bge.n	24b34 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   24aea:	f06f 0301 	mvn.w	r3, #1
   24aee:	492f      	ldr	r1, [pc, #188]	; (24bac <z_add_timeout+0xf0>)
   24af0:	e9d1 2000 	ldrd	r2, r0, [r1]
   24af4:	1a9b      	subs	r3, r3, r2
   24af6:	f04f 32ff 	mov.w	r2, #4294967295
   24afa:	eb62 0000 	sbc.w	r0, r2, r0
   24afe:	1b9e      	subs	r6, r3, r6
   24b00:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   24b04:	2e01      	cmp	r6, #1
   24b06:	f170 0300 	sbcs.w	r3, r0, #0
   24b0a:	da01      	bge.n	24b10 <z_add_timeout+0x54>
   24b0c:	2601      	movs	r6, #1
   24b0e:	2000      	movs	r0, #0
   24b10:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   24b14:	4e26      	ldr	r6, [pc, #152]	; (24bb0 <z_add_timeout+0xf4>)
   24b16:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   24b1a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24b1c:	45b4      	cmp	ip, r6
   24b1e:	bf08      	it	eq
   24b20:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   24b24:	f1bc 0f00 	cmp.w	ip, #0
   24b28:	d10d      	bne.n	24b46 <z_add_timeout+0x8a>
	node->prev = tail;
   24b2a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   24b2e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   24b30:	6074      	str	r4, [r6, #4]
}
   24b32:	e01c      	b.n	24b6e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   24b34:	f7ff ff74 	bl	24a20 <elapsed>
   24b38:	3601      	adds	r6, #1
   24b3a:	f145 0500 	adc.w	r5, r5, #0
   24b3e:	1836      	adds	r6, r6, r0
   24b40:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   24b44:	e7e4      	b.n	24b10 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   24b46:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   24b4a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   24b4e:	4293      	cmp	r3, r2
   24b50:	eb71 0e00 	sbcs.w	lr, r1, r0
   24b54:	da1f      	bge.n	24b96 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   24b56:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   24b58:	f8dc 3004 	ldr.w	r3, [ip, #4]
   24b5c:	eb60 0001 	sbc.w	r0, r0, r1
   24b60:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   24b64:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   24b68:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   24b6a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   24b6e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24b70:	42b3      	cmp	r3, r6
   24b72:	d00b      	beq.n	24b8c <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   24b74:	429c      	cmp	r4, r3
   24b76:	d109      	bne.n	24b8c <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   24b78:	f7ff ff5c 	bl	24a34 <next_timeout>

			if (next_time == 0 ||
   24b7c:	b118      	cbz	r0, 24b86 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   24b7e:	4b0d      	ldr	r3, [pc, #52]	; (24bb4 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   24b80:	691b      	ldr	r3, [r3, #16]
   24b82:	4283      	cmp	r3, r0
   24b84:	d002      	beq.n	24b8c <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   24b86:	2100      	movs	r1, #0
   24b88:	f7f8 ffbc 	bl	1db04 <sys_clock_set_timeout>
	__asm__ volatile(
   24b8c:	f387 8811 	msr	BASEPRI, r7
   24b90:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   24b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   24b96:	1a9b      	subs	r3, r3, r2
   24b98:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   24b9c:	45ac      	cmp	ip, r5
   24b9e:	e9c4 3104 	strd	r3, r1, [r4, #16]
   24ba2:	d0c2      	beq.n	24b2a <z_add_timeout+0x6e>
   24ba4:	f8dc c000 	ldr.w	ip, [ip]
   24ba8:	e7bc      	b.n	24b24 <z_add_timeout+0x68>
   24baa:	bf00      	nop
   24bac:	2000d000 	.word	0x2000d000
   24bb0:	2000c700 	.word	0x2000c700
   24bb4:	2000d8b0 	.word	0x2000d8b0

00024bb8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   24bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24bbc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   24bbe:	f7ff fcbd 	bl	2453c <z_time_slice>
	__asm__ volatile(
   24bc2:	f04f 0320 	mov.w	r3, #32
   24bc6:	f3ef 8611 	mrs	r6, BASEPRI
   24bca:	f383 8812 	msr	BASEPRI_MAX, r3
   24bce:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   24bd2:	4f24      	ldr	r7, [pc, #144]	; (24c64 <sys_clock_announce+0xac>)
	return list->head == list;
   24bd4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 24c68 <sys_clock_announce+0xb0>
   24bd8:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   24bdc:	4a23      	ldr	r2, [pc, #140]	; (24c6c <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24bde:	4540      	cmp	r0, r8
	announce_remaining = ticks;
   24be0:	603c      	str	r4, [r7, #0]
	return list->head == list;
   24be2:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   24be6:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24bea:	d00b      	beq.n	24c04 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   24bec:	b150      	cbz	r0, 24c04 <sys_clock_announce+0x4c>
   24bee:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   24bf2:	42ac      	cmp	r4, r5
   24bf4:	eb71 090c 	sbcs.w	r9, r1, ip
   24bf8:	da17      	bge.n	24c2a <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   24bfa:	1b2d      	subs	r5, r5, r4
   24bfc:	eb6c 0c01 	sbc.w	ip, ip, r1
   24c00:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   24c04:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   24c06:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   24c0a:	eb4e 0101 	adc.w	r1, lr, r1
   24c0e:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   24c12:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   24c14:	f7ff ff0e 	bl	24a34 <next_timeout>
   24c18:	4621      	mov	r1, r4
   24c1a:	f7f8 ff73 	bl	1db04 <sys_clock_set_timeout>
	__asm__ volatile(
   24c1e:	f386 8811 	msr	BASEPRI, r6
   24c22:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   24c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   24c2a:	18eb      	adds	r3, r5, r3
   24c2c:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   24c30:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   24c34:	2200      	movs	r2, #0
   24c36:	2300      	movs	r3, #0
   24c38:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   24c3c:	f7ff ff22 	bl	24a84 <remove_timeout>
   24c40:	f386 8811 	msr	BASEPRI, r6
   24c44:	f3bf 8f6f 	isb	sy
		t->fn(t);
   24c48:	6883      	ldr	r3, [r0, #8]
   24c4a:	4798      	blx	r3
	__asm__ volatile(
   24c4c:	f04f 0320 	mov.w	r3, #32
   24c50:	f3ef 8611 	mrs	r6, BASEPRI
   24c54:	f383 8812 	msr	BASEPRI_MAX, r3
   24c58:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   24c5c:	683c      	ldr	r4, [r7, #0]
   24c5e:	1b64      	subs	r4, r4, r5
   24c60:	e7ba      	b.n	24bd8 <sys_clock_announce+0x20>
   24c62:	bf00      	nop
   24c64:	2000d8ec 	.word	0x2000d8ec
   24c68:	2000c700 	.word	0x2000c700
   24c6c:	2000d000 	.word	0x2000d000

00024c70 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   24c70:	b510      	push	{r4, lr}
   24c72:	f04f 0320 	mov.w	r3, #32
   24c76:	f3ef 8411 	mrs	r4, BASEPRI
   24c7a:	f383 8812 	msr	BASEPRI_MAX, r3
   24c7e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   24c82:	f7ff fecd 	bl	24a20 <elapsed>
   24c86:	4603      	mov	r3, r0
   24c88:	4a05      	ldr	r2, [pc, #20]	; (24ca0 <sys_clock_tick_get+0x30>)
   24c8a:	e9d2 0100 	ldrd	r0, r1, [r2]
   24c8e:	1818      	adds	r0, r3, r0
   24c90:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   24c94:	f384 8811 	msr	BASEPRI, r4
   24c98:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   24c9c:	bd10      	pop	{r4, pc}
   24c9e:	bf00      	nop
   24ca0:	2000d000 	.word	0x2000d000

00024ca4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   24ca4:	b570      	push	{r4, r5, r6, lr}
   24ca6:	4604      	mov	r4, r0
	__asm__ volatile(
   24ca8:	f04f 0320 	mov.w	r3, #32
   24cac:	f3ef 8511 	mrs	r5, BASEPRI
   24cb0:	f383 8812 	msr	BASEPRI_MAX, r3
   24cb4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   24cb8:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   24cbc:	3301      	adds	r3, #1
   24cbe:	f142 0200 	adc.w	r2, r2, #0
   24cc2:	2b02      	cmp	r3, #2
   24cc4:	f172 0200 	sbcs.w	r2, r2, #0
   24cc8:	d322      	bcc.n	24d10 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   24cca:	f003 fceb 	bl	286a4 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   24cce:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   24cd2:	3001      	adds	r0, #1
   24cd4:	f141 0100 	adc.w	r1, r1, #0
   24cd8:	18c0      	adds	r0, r0, r3
   24cda:	eb41 0102 	adc.w	r1, r1, r2
   24cde:	2801      	cmp	r0, #1
   24ce0:	f171 0100 	sbcs.w	r1, r1, #0
   24ce4:	db32      	blt.n	24d4c <z_timer_expiration_handler+0xa8>
   24ce6:	f003 fcdd 	bl	286a4 <z_impl_k_uptime_ticks>
   24cea:	3001      	adds	r0, #1
   24cec:	f141 0300 	adc.w	r3, r1, #0
   24cf0:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   24cf4:	1880      	adds	r0, r0, r2
   24cf6:	f06f 0201 	mvn.w	r2, #1
   24cfa:	eb43 0301 	adc.w	r3, r3, r1
   24cfe:	f04f 31ff 	mov.w	r1, #4294967295
   24d02:	1a12      	subs	r2, r2, r0
   24d04:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24d08:	4620      	mov	r0, r4
   24d0a:	491a      	ldr	r1, [pc, #104]	; (24d74 <z_timer_expiration_handler+0xd0>)
   24d0c:	f7ff fed6 	bl	24abc <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   24d10:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24d12:	3301      	adds	r3, #1
   24d14:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   24d16:	6a23      	ldr	r3, [r4, #32]
   24d18:	b173      	cbz	r3, 24d38 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   24d1a:	f385 8811 	msr	BASEPRI, r5
   24d1e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   24d22:	4620      	mov	r0, r4
   24d24:	6a23      	ldr	r3, [r4, #32]
   24d26:	4798      	blx	r3
	__asm__ volatile(
   24d28:	f04f 0320 	mov.w	r3, #32
   24d2c:	f3ef 8511 	mrs	r5, BASEPRI
   24d30:	f383 8812 	msr	BASEPRI_MAX, r3
   24d34:	f3bf 8f6f 	isb	sy
	return list->head == list;
   24d38:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24d3c:	42a6      	cmp	r6, r4
   24d3e:	d000      	beq.n	24d42 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   24d40:	b94e      	cbnz	r6, 24d56 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   24d42:	f385 8811 	msr	BASEPRI, r5
   24d46:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   24d4a:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   24d4c:	f06f 0201 	mvn.w	r2, #1
   24d50:	f04f 33ff 	mov.w	r3, #4294967295
   24d54:	e7d8      	b.n	24d08 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   24d56:	4630      	mov	r0, r6
   24d58:	f003 fbbe 	bl	284d8 <z_unpend_thread_no_timeout>
   24d5c:	2300      	movs	r3, #0
   24d5e:	67f3      	str	r3, [r6, #124]	; 0x7c
   24d60:	f385 8811 	msr	BASEPRI, r5
   24d64:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   24d68:	4630      	mov	r0, r6
}
   24d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   24d6e:	f003 bba3 	b.w	284b8 <z_ready_thread>
   24d72:	bf00      	nop
   24d74:	00024ca5 	.word	0x00024ca5

00024d78 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   24d78:	f1b3 3fff 	cmp.w	r3, #4294967295
   24d7c:	bf08      	it	eq
   24d7e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   24d82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24d86:	4619      	mov	r1, r3
   24d88:	4605      	mov	r5, r0
   24d8a:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   24d8e:	4614      	mov	r4, r2
   24d90:	4691      	mov	r9, r2
   24d92:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   24d94:	d037      	beq.n	24e06 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   24d96:	f1b0 3fff 	cmp.w	r0, #4294967295
   24d9a:	bf08      	it	eq
   24d9c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   24da0:	4637      	mov	r7, r6
   24da2:	4682      	mov	sl, r0
   24da4:	d011      	beq.n	24dca <z_impl_k_timer_start+0x52>
   24da6:	ea50 0306 	orrs.w	r3, r0, r6
   24daa:	d00e      	beq.n	24dca <z_impl_k_timer_start+0x52>
   24dac:	1c72      	adds	r2, r6, #1
   24dae:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   24db2:	db0a      	blt.n	24dca <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   24db4:	2e02      	cmp	r6, #2
   24db6:	4684      	mov	ip, r0
   24db8:	f170 0000 	sbcs.w	r0, r0, #0
   24dbc:	bfbc      	itt	lt
   24dbe:	2702      	movlt	r7, #2
   24dc0:	f04f 0c00 	movlt.w	ip, #0
   24dc4:	3f01      	subs	r7, #1
   24dc6:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   24dca:	1c63      	adds	r3, r4, #1
   24dcc:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   24dd0:	db0a      	blt.n	24de8 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   24dd2:	2c01      	cmp	r4, #1
   24dd4:	f171 0300 	sbcs.w	r3, r1, #0
   24dd8:	4622      	mov	r2, r4
   24dda:	bfbc      	itt	lt
   24ddc:	2201      	movlt	r2, #1
   24dde:	2100      	movlt	r1, #0
   24de0:	f112 39ff 	adds.w	r9, r2, #4294967295
   24de4:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   24de8:	4628      	mov	r0, r5
   24dea:	f003 fc15 	bl	28618 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   24dee:	2300      	movs	r3, #0
	timer->period = period;
   24df0:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   24df4:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24df6:	464a      	mov	r2, r9
   24df8:	4643      	mov	r3, r8
   24dfa:	4628      	mov	r0, r5
		     duration);
}
   24dfc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24e00:	4902      	ldr	r1, [pc, #8]	; (24e0c <z_impl_k_timer_start+0x94>)
   24e02:	f7ff be5b 	b.w	24abc <z_add_timeout>
}
   24e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24e0a:	bf00      	nop
   24e0c:	00024ca5 	.word	0x00024ca5

00024e10 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   24e10:	b538      	push	{r3, r4, r5, lr}
   24e12:	4603      	mov	r3, r0
	__asm__ volatile(
   24e14:	f04f 0220 	mov.w	r2, #32
   24e18:	f3ef 8511 	mrs	r5, BASEPRI
   24e1c:	f382 8812 	msr	BASEPRI_MAX, r2
   24e20:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   24e24:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   24e26:	2101      	movs	r1, #1
   24e28:	6081      	str	r1, [r0, #8]
	return list->head == list;
   24e2a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   24e2c:	4283      	cmp	r3, r0
   24e2e:	d106      	bne.n	24e3e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   24e30:	f385 8811 	msr	BASEPRI, r5
   24e34:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   24e38:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   24e3a:	4620      	mov	r0, r4
   24e3c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   24e3e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24e42:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24e44:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24e46:	2300      	movs	r3, #0
	node->prev = NULL;
   24e48:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24e4c:	f003 fc7b 	bl	28746 <signal_poll_event>
	z_reschedule(&lock, key);
   24e50:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24e52:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   24e54:	4801      	ldr	r0, [pc, #4]	; (24e5c <z_impl_k_poll_signal_raise+0x4c>)
   24e56:	f7ff fc17 	bl	24688 <z_reschedule>
	return rc;
   24e5a:	e7ee      	b.n	24e3a <z_impl_k_poll_signal_raise+0x2a>
   24e5c:	2000de5c 	.word	0x2000de5c

00024e60 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   24e60:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   24e62:	4601      	mov	r1, r0
   24e64:	4801      	ldr	r0, [pc, #4]	; (24e6c <k_aligned_alloc+0xc>)
   24e66:	f003 bcef 	b.w	28848 <z_heap_aligned_alloc>
   24e6a:	bf00      	nop
   24e6c:	2000c814 	.word	0x2000c814

00024e70 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   24e70:	4b01      	ldr	r3, [pc, #4]	; (24e78 <k_thread_system_pool_assign+0x8>)
   24e72:	6743      	str	r3, [r0, #116]	; 0x74
}
   24e74:	4770      	bx	lr
   24e76:	bf00      	nop
   24e78:	2000c814 	.word	0x2000c814

00024e7c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   24e7c:	b538      	push	{r3, r4, r5, lr}
   24e7e:	4604      	mov	r4, r0
   24e80:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   24e82:	f003 f9d6 	bl	28232 <k_is_in_isr>
   24e86:	b920      	cbnz	r0, 24e92 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   24e88:	4b06      	ldr	r3, [pc, #24]	; (24ea4 <z_thread_aligned_alloc+0x28>)
   24e8a:	689b      	ldr	r3, [r3, #8]
   24e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   24e8e:	b90b      	cbnz	r3, 24e94 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   24e90:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   24e92:	4b05      	ldr	r3, [pc, #20]	; (24ea8 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   24e94:	462a      	mov	r2, r5
   24e96:	4621      	mov	r1, r4
   24e98:	4618      	mov	r0, r3
}
   24e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   24e9e:	f003 bcd3 	b.w	28848 <z_heap_aligned_alloc>
   24ea2:	bf00      	nop
   24ea4:	2000d8b0 	.word	0x2000d8b0
   24ea8:	2000c814 	.word	0x2000c814

00024eac <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   24eac:	4801      	ldr	r0, [pc, #4]	; (24eb4 <boot_banner+0x8>)
   24eae:	f000 bd93 	b.w	259d8 <printk>
   24eb2:	bf00      	nop
   24eb4:	0002b67e 	.word	0x0002b67e

00024eb8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   24eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   24eba:	2400      	movs	r4, #0
   24ebc:	4b08      	ldr	r3, [pc, #32]	; (24ee0 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   24ebe:	f44f 6290 	mov.w	r2, #1152	; 0x480
	struct k_work_queue_config cfg = {
   24ec2:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   24ec4:	ab02      	add	r3, sp, #8
   24ec6:	9300      	str	r3, [sp, #0]
   24ec8:	4906      	ldr	r1, [pc, #24]	; (24ee4 <k_sys_work_q_init+0x2c>)
   24eca:	f04f 33ff 	mov.w	r3, #4294967295
   24ece:	4806      	ldr	r0, [pc, #24]	; (24ee8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   24ed0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   24ed4:	f7ff f9f8 	bl	242c8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   24ed8:	4620      	mov	r0, r4
   24eda:	b004      	add	sp, #16
   24edc:	bd10      	pop	{r4, pc}
   24ede:	bf00      	nop
   24ee0:	0002b6ac 	.word	0x0002b6ac
   24ee4:	200103a0 	.word	0x200103a0
   24ee8:	2000d008 	.word	0x2000d008

00024eec <_free_r>:
   24eec:	b538      	push	{r3, r4, r5, lr}
   24eee:	4605      	mov	r5, r0
   24ef0:	2900      	cmp	r1, #0
   24ef2:	d041      	beq.n	24f78 <_free_r+0x8c>
   24ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   24ef8:	1f0c      	subs	r4, r1, #4
   24efa:	2b00      	cmp	r3, #0
   24efc:	bfb8      	it	lt
   24efe:	18e4      	addlt	r4, r4, r3
   24f00:	f000 fa58 	bl	253b4 <__malloc_lock>
   24f04:	4a1d      	ldr	r2, [pc, #116]	; (24f7c <_free_r+0x90>)
   24f06:	6813      	ldr	r3, [r2, #0]
   24f08:	b933      	cbnz	r3, 24f18 <_free_r+0x2c>
   24f0a:	6063      	str	r3, [r4, #4]
   24f0c:	6014      	str	r4, [r2, #0]
   24f0e:	4628      	mov	r0, r5
   24f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24f14:	f000 ba54 	b.w	253c0 <__malloc_unlock>
   24f18:	42a3      	cmp	r3, r4
   24f1a:	d908      	bls.n	24f2e <_free_r+0x42>
   24f1c:	6820      	ldr	r0, [r4, #0]
   24f1e:	1821      	adds	r1, r4, r0
   24f20:	428b      	cmp	r3, r1
   24f22:	bf01      	itttt	eq
   24f24:	6819      	ldreq	r1, [r3, #0]
   24f26:	685b      	ldreq	r3, [r3, #4]
   24f28:	1809      	addeq	r1, r1, r0
   24f2a:	6021      	streq	r1, [r4, #0]
   24f2c:	e7ed      	b.n	24f0a <_free_r+0x1e>
   24f2e:	461a      	mov	r2, r3
   24f30:	685b      	ldr	r3, [r3, #4]
   24f32:	b10b      	cbz	r3, 24f38 <_free_r+0x4c>
   24f34:	42a3      	cmp	r3, r4
   24f36:	d9fa      	bls.n	24f2e <_free_r+0x42>
   24f38:	6811      	ldr	r1, [r2, #0]
   24f3a:	1850      	adds	r0, r2, r1
   24f3c:	42a0      	cmp	r0, r4
   24f3e:	d10b      	bne.n	24f58 <_free_r+0x6c>
   24f40:	6820      	ldr	r0, [r4, #0]
   24f42:	4401      	add	r1, r0
   24f44:	1850      	adds	r0, r2, r1
   24f46:	6011      	str	r1, [r2, #0]
   24f48:	4283      	cmp	r3, r0
   24f4a:	d1e0      	bne.n	24f0e <_free_r+0x22>
   24f4c:	6818      	ldr	r0, [r3, #0]
   24f4e:	685b      	ldr	r3, [r3, #4]
   24f50:	4408      	add	r0, r1
   24f52:	6053      	str	r3, [r2, #4]
   24f54:	6010      	str	r0, [r2, #0]
   24f56:	e7da      	b.n	24f0e <_free_r+0x22>
   24f58:	d902      	bls.n	24f60 <_free_r+0x74>
   24f5a:	230c      	movs	r3, #12
   24f5c:	602b      	str	r3, [r5, #0]
   24f5e:	e7d6      	b.n	24f0e <_free_r+0x22>
   24f60:	6820      	ldr	r0, [r4, #0]
   24f62:	1821      	adds	r1, r4, r0
   24f64:	428b      	cmp	r3, r1
   24f66:	bf02      	ittt	eq
   24f68:	6819      	ldreq	r1, [r3, #0]
   24f6a:	685b      	ldreq	r3, [r3, #4]
   24f6c:	1809      	addeq	r1, r1, r0
   24f6e:	6063      	str	r3, [r4, #4]
   24f70:	bf08      	it	eq
   24f72:	6021      	streq	r1, [r4, #0]
   24f74:	6054      	str	r4, [r2, #4]
   24f76:	e7ca      	b.n	24f0e <_free_r+0x22>
   24f78:	bd38      	pop	{r3, r4, r5, pc}
   24f7a:	bf00      	nop
   24f7c:	2000d8f4 	.word	0x2000d8f4

00024f80 <_malloc_r>:
   24f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24f82:	1ccd      	adds	r5, r1, #3
   24f84:	4606      	mov	r6, r0
   24f86:	f025 0503 	bic.w	r5, r5, #3
   24f8a:	3508      	adds	r5, #8
   24f8c:	2d0c      	cmp	r5, #12
   24f8e:	bf38      	it	cc
   24f90:	250c      	movcc	r5, #12
   24f92:	2d00      	cmp	r5, #0
   24f94:	db01      	blt.n	24f9a <_malloc_r+0x1a>
   24f96:	42a9      	cmp	r1, r5
   24f98:	d903      	bls.n	24fa2 <_malloc_r+0x22>
   24f9a:	230c      	movs	r3, #12
   24f9c:	6033      	str	r3, [r6, #0]
   24f9e:	2000      	movs	r0, #0
   24fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24fa2:	f000 fa07 	bl	253b4 <__malloc_lock>
   24fa6:	4921      	ldr	r1, [pc, #132]	; (2502c <_malloc_r+0xac>)
   24fa8:	680a      	ldr	r2, [r1, #0]
   24faa:	4614      	mov	r4, r2
   24fac:	b99c      	cbnz	r4, 24fd6 <_malloc_r+0x56>
   24fae:	4f20      	ldr	r7, [pc, #128]	; (25030 <_malloc_r+0xb0>)
   24fb0:	683b      	ldr	r3, [r7, #0]
   24fb2:	b923      	cbnz	r3, 24fbe <_malloc_r+0x3e>
   24fb4:	4621      	mov	r1, r4
   24fb6:	4630      	mov	r0, r6
   24fb8:	f000 f83c 	bl	25034 <_sbrk_r>
   24fbc:	6038      	str	r0, [r7, #0]
   24fbe:	4629      	mov	r1, r5
   24fc0:	4630      	mov	r0, r6
   24fc2:	f000 f837 	bl	25034 <_sbrk_r>
   24fc6:	1c43      	adds	r3, r0, #1
   24fc8:	d123      	bne.n	25012 <_malloc_r+0x92>
   24fca:	230c      	movs	r3, #12
   24fcc:	4630      	mov	r0, r6
   24fce:	6033      	str	r3, [r6, #0]
   24fd0:	f000 f9f6 	bl	253c0 <__malloc_unlock>
   24fd4:	e7e3      	b.n	24f9e <_malloc_r+0x1e>
   24fd6:	6823      	ldr	r3, [r4, #0]
   24fd8:	1b5b      	subs	r3, r3, r5
   24fda:	d417      	bmi.n	2500c <_malloc_r+0x8c>
   24fdc:	2b0b      	cmp	r3, #11
   24fde:	d903      	bls.n	24fe8 <_malloc_r+0x68>
   24fe0:	6023      	str	r3, [r4, #0]
   24fe2:	441c      	add	r4, r3
   24fe4:	6025      	str	r5, [r4, #0]
   24fe6:	e004      	b.n	24ff2 <_malloc_r+0x72>
   24fe8:	6863      	ldr	r3, [r4, #4]
   24fea:	42a2      	cmp	r2, r4
   24fec:	bf0c      	ite	eq
   24fee:	600b      	streq	r3, [r1, #0]
   24ff0:	6053      	strne	r3, [r2, #4]
   24ff2:	4630      	mov	r0, r6
   24ff4:	f000 f9e4 	bl	253c0 <__malloc_unlock>
   24ff8:	f104 000b 	add.w	r0, r4, #11
   24ffc:	1d23      	adds	r3, r4, #4
   24ffe:	f020 0007 	bic.w	r0, r0, #7
   25002:	1ac2      	subs	r2, r0, r3
   25004:	bf1c      	itt	ne
   25006:	1a1b      	subne	r3, r3, r0
   25008:	50a3      	strne	r3, [r4, r2]
   2500a:	e7c9      	b.n	24fa0 <_malloc_r+0x20>
   2500c:	4622      	mov	r2, r4
   2500e:	6864      	ldr	r4, [r4, #4]
   25010:	e7cc      	b.n	24fac <_malloc_r+0x2c>
   25012:	1cc4      	adds	r4, r0, #3
   25014:	f024 0403 	bic.w	r4, r4, #3
   25018:	42a0      	cmp	r0, r4
   2501a:	d0e3      	beq.n	24fe4 <_malloc_r+0x64>
   2501c:	1a21      	subs	r1, r4, r0
   2501e:	4630      	mov	r0, r6
   25020:	f000 f808 	bl	25034 <_sbrk_r>
   25024:	3001      	adds	r0, #1
   25026:	d1dd      	bne.n	24fe4 <_malloc_r+0x64>
   25028:	e7cf      	b.n	24fca <_malloc_r+0x4a>
   2502a:	bf00      	nop
   2502c:	2000d8f4 	.word	0x2000d8f4
   25030:	2000d8f0 	.word	0x2000d8f0

00025034 <_sbrk_r>:
   25034:	b538      	push	{r3, r4, r5, lr}
   25036:	2300      	movs	r3, #0
   25038:	4d05      	ldr	r5, [pc, #20]	; (25050 <_sbrk_r+0x1c>)
   2503a:	4604      	mov	r4, r0
   2503c:	4608      	mov	r0, r1
   2503e:	602b      	str	r3, [r5, #0]
   25040:	f7f7 f9ca 	bl	1c3d8 <_sbrk>
   25044:	1c43      	adds	r3, r0, #1
   25046:	d102      	bne.n	2504e <_sbrk_r+0x1a>
   25048:	682b      	ldr	r3, [r5, #0]
   2504a:	b103      	cbz	r3, 2504e <_sbrk_r+0x1a>
   2504c:	6023      	str	r3, [r4, #0]
   2504e:	bd38      	pop	{r3, r4, r5, pc}
   25050:	2000d8f8 	.word	0x2000d8f8

00025054 <_strtol_l.constprop.0>:
   25054:	2b24      	cmp	r3, #36	; 0x24
   25056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2505a:	4686      	mov	lr, r0
   2505c:	4690      	mov	r8, r2
   2505e:	d801      	bhi.n	25064 <_strtol_l.constprop.0+0x10>
   25060:	2b01      	cmp	r3, #1
   25062:	d106      	bne.n	25072 <_strtol_l.constprop.0+0x1e>
   25064:	f001 fadb 	bl	2661e <__errno>
   25068:	2316      	movs	r3, #22
   2506a:	6003      	str	r3, [r0, #0]
   2506c:	2000      	movs	r0, #0
   2506e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25072:	460d      	mov	r5, r1
   25074:	4835      	ldr	r0, [pc, #212]	; (2514c <_strtol_l.constprop.0+0xf8>)
   25076:	462a      	mov	r2, r5
   25078:	f815 4b01 	ldrb.w	r4, [r5], #1
   2507c:	5d06      	ldrb	r6, [r0, r4]
   2507e:	f016 0608 	ands.w	r6, r6, #8
   25082:	d1f8      	bne.n	25076 <_strtol_l.constprop.0+0x22>
   25084:	2c2d      	cmp	r4, #45	; 0x2d
   25086:	d124      	bne.n	250d2 <_strtol_l.constprop.0+0x7e>
   25088:	782c      	ldrb	r4, [r5, #0]
   2508a:	2601      	movs	r6, #1
   2508c:	1c95      	adds	r5, r2, #2
   2508e:	bb2b      	cbnz	r3, 250dc <_strtol_l.constprop.0+0x88>
   25090:	2c30      	cmp	r4, #48	; 0x30
   25092:	d030      	beq.n	250f6 <_strtol_l.constprop.0+0xa2>
   25094:	230a      	movs	r3, #10
   25096:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   2509a:	2200      	movs	r2, #0
   2509c:	f10c 3cff 	add.w	ip, ip, #4294967295
   250a0:	4610      	mov	r0, r2
   250a2:	fbbc f9f3 	udiv	r9, ip, r3
   250a6:	fb03 ca19 	mls	sl, r3, r9, ip
   250aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   250ae:	2f09      	cmp	r7, #9
   250b0:	d828      	bhi.n	25104 <_strtol_l.constprop.0+0xb0>
   250b2:	463c      	mov	r4, r7
   250b4:	42a3      	cmp	r3, r4
   250b6:	dd34      	ble.n	25122 <_strtol_l.constprop.0+0xce>
   250b8:	1c57      	adds	r7, r2, #1
   250ba:	d007      	beq.n	250cc <_strtol_l.constprop.0+0x78>
   250bc:	4581      	cmp	r9, r0
   250be:	d32d      	bcc.n	2511c <_strtol_l.constprop.0+0xc8>
   250c0:	d101      	bne.n	250c6 <_strtol_l.constprop.0+0x72>
   250c2:	45a2      	cmp	sl, r4
   250c4:	db2a      	blt.n	2511c <_strtol_l.constprop.0+0xc8>
   250c6:	fb00 4003 	mla	r0, r0, r3, r4
   250ca:	2201      	movs	r2, #1
   250cc:	f815 4b01 	ldrb.w	r4, [r5], #1
   250d0:	e7eb      	b.n	250aa <_strtol_l.constprop.0+0x56>
   250d2:	2c2b      	cmp	r4, #43	; 0x2b
   250d4:	bf04      	itt	eq
   250d6:	782c      	ldrbeq	r4, [r5, #0]
   250d8:	1c95      	addeq	r5, r2, #2
   250da:	e7d8      	b.n	2508e <_strtol_l.constprop.0+0x3a>
   250dc:	2b10      	cmp	r3, #16
   250de:	d1da      	bne.n	25096 <_strtol_l.constprop.0+0x42>
   250e0:	2c30      	cmp	r4, #48	; 0x30
   250e2:	d1d8      	bne.n	25096 <_strtol_l.constprop.0+0x42>
   250e4:	782a      	ldrb	r2, [r5, #0]
   250e6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   250ea:	2a58      	cmp	r2, #88	; 0x58
   250ec:	d1d3      	bne.n	25096 <_strtol_l.constprop.0+0x42>
   250ee:	786c      	ldrb	r4, [r5, #1]
   250f0:	2310      	movs	r3, #16
   250f2:	3502      	adds	r5, #2
   250f4:	e7cf      	b.n	25096 <_strtol_l.constprop.0+0x42>
   250f6:	782b      	ldrb	r3, [r5, #0]
   250f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   250fc:	2b58      	cmp	r3, #88	; 0x58
   250fe:	d0f6      	beq.n	250ee <_strtol_l.constprop.0+0x9a>
   25100:	2308      	movs	r3, #8
   25102:	e7c8      	b.n	25096 <_strtol_l.constprop.0+0x42>
   25104:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   25108:	2f19      	cmp	r7, #25
   2510a:	d801      	bhi.n	25110 <_strtol_l.constprop.0+0xbc>
   2510c:	3c37      	subs	r4, #55	; 0x37
   2510e:	e7d1      	b.n	250b4 <_strtol_l.constprop.0+0x60>
   25110:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   25114:	2f19      	cmp	r7, #25
   25116:	d804      	bhi.n	25122 <_strtol_l.constprop.0+0xce>
   25118:	3c57      	subs	r4, #87	; 0x57
   2511a:	e7cb      	b.n	250b4 <_strtol_l.constprop.0+0x60>
   2511c:	f04f 32ff 	mov.w	r2, #4294967295
   25120:	e7d4      	b.n	250cc <_strtol_l.constprop.0+0x78>
   25122:	1c53      	adds	r3, r2, #1
   25124:	d108      	bne.n	25138 <_strtol_l.constprop.0+0xe4>
   25126:	2322      	movs	r3, #34	; 0x22
   25128:	4660      	mov	r0, ip
   2512a:	f8ce 3000 	str.w	r3, [lr]
   2512e:	f1b8 0f00 	cmp.w	r8, #0
   25132:	d09c      	beq.n	2506e <_strtol_l.constprop.0+0x1a>
   25134:	1e69      	subs	r1, r5, #1
   25136:	e006      	b.n	25146 <_strtol_l.constprop.0+0xf2>
   25138:	b106      	cbz	r6, 2513c <_strtol_l.constprop.0+0xe8>
   2513a:	4240      	negs	r0, r0
   2513c:	f1b8 0f00 	cmp.w	r8, #0
   25140:	d095      	beq.n	2506e <_strtol_l.constprop.0+0x1a>
   25142:	2a00      	cmp	r2, #0
   25144:	d1f6      	bne.n	25134 <_strtol_l.constprop.0+0xe0>
   25146:	f8c8 1000 	str.w	r1, [r8]
   2514a:	e790      	b.n	2506e <_strtol_l.constprop.0+0x1a>
   2514c:	0002b6b6 	.word	0x0002b6b6

00025150 <strtol>:
   25150:	4613      	mov	r3, r2
   25152:	460a      	mov	r2, r1
   25154:	4601      	mov	r1, r0
   25156:	4802      	ldr	r0, [pc, #8]	; (25160 <strtol+0x10>)
   25158:	6800      	ldr	r0, [r0, #0]
   2515a:	f7ff bf7b 	b.w	25054 <_strtol_l.constprop.0>
   2515e:	bf00      	nop
   25160:	2000c708 	.word	0x2000c708

00025164 <_strtoll_l.constprop.0>:
   25164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25168:	4690      	mov	r8, r2
   2516a:	b085      	sub	sp, #20
   2516c:	4689      	mov	r9, r1
   2516e:	461e      	mov	r6, r3
   25170:	460d      	mov	r5, r1
   25172:	4a45      	ldr	r2, [pc, #276]	; (25288 <_strtoll_l.constprop.0+0x124>)
   25174:	9002      	str	r0, [sp, #8]
   25176:	462b      	mov	r3, r5
   25178:	f815 4b01 	ldrb.w	r4, [r5], #1
   2517c:	5d17      	ldrb	r7, [r2, r4]
   2517e:	f017 0708 	ands.w	r7, r7, #8
   25182:	d1f8      	bne.n	25176 <_strtoll_l.constprop.0+0x12>
   25184:	2c2d      	cmp	r4, #45	; 0x2d
   25186:	d141      	bne.n	2520c <_strtoll_l.constprop.0+0xa8>
   25188:	782c      	ldrb	r4, [r5, #0]
   2518a:	2701      	movs	r7, #1
   2518c:	1c9d      	adds	r5, r3, #2
   2518e:	2e00      	cmp	r6, #0
   25190:	d141      	bne.n	25216 <_strtoll_l.constprop.0+0xb2>
   25192:	2c30      	cmp	r4, #48	; 0x30
   25194:	d04c      	beq.n	25230 <_strtoll_l.constprop.0+0xcc>
   25196:	260a      	movs	r6, #10
   25198:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   2519c:	f107 3bff 	add.w	fp, r7, #4294967295
   251a0:	17f3      	asrs	r3, r6, #31
   251a2:	4632      	mov	r2, r6
   251a4:	f10a 3aff 	add.w	sl, sl, #4294967295
   251a8:	4658      	mov	r0, fp
   251aa:	9303      	str	r3, [sp, #12]
   251ac:	4651      	mov	r1, sl
   251ae:	f7f3 fdab 	bl	18d08 <__aeabi_uldivmod>
   251b2:	9201      	str	r2, [sp, #4]
   251b4:	2200      	movs	r2, #0
   251b6:	468e      	mov	lr, r1
   251b8:	4684      	mov	ip, r0
   251ba:	4611      	mov	r1, r2
   251bc:	4610      	mov	r0, r2
   251be:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   251c2:	2b09      	cmp	r3, #9
   251c4:	d905      	bls.n	251d2 <_strtoll_l.constprop.0+0x6e>
   251c6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   251ca:	2b19      	cmp	r3, #25
   251cc:	d837      	bhi.n	2523e <_strtoll_l.constprop.0+0xda>
   251ce:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   251d2:	429e      	cmp	r6, r3
   251d4:	dd3d      	ble.n	25252 <_strtoll_l.constprop.0+0xee>
   251d6:	1c54      	adds	r4, r2, #1
   251d8:	d015      	beq.n	25206 <_strtoll_l.constprop.0+0xa2>
   251da:	4584      	cmp	ip, r0
   251dc:	eb7e 0201 	sbcs.w	r2, lr, r1
   251e0:	d334      	bcc.n	2524c <_strtoll_l.constprop.0+0xe8>
   251e2:	458e      	cmp	lr, r1
   251e4:	bf08      	it	eq
   251e6:	4584      	cmpeq	ip, r0
   251e8:	d102      	bne.n	251f0 <_strtoll_l.constprop.0+0x8c>
   251ea:	9a01      	ldr	r2, [sp, #4]
   251ec:	429a      	cmp	r2, r3
   251ee:	db2d      	blt.n	2524c <_strtoll_l.constprop.0+0xe8>
   251f0:	9a03      	ldr	r2, [sp, #12]
   251f2:	4371      	muls	r1, r6
   251f4:	fb00 1102 	mla	r1, r0, r2, r1
   251f8:	fba6 0200 	umull	r0, r2, r6, r0
   251fc:	440a      	add	r2, r1
   251fe:	1818      	adds	r0, r3, r0
   25200:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
   25204:	2201      	movs	r2, #1
   25206:	f815 4b01 	ldrb.w	r4, [r5], #1
   2520a:	e7d8      	b.n	251be <_strtoll_l.constprop.0+0x5a>
   2520c:	2c2b      	cmp	r4, #43	; 0x2b
   2520e:	bf04      	itt	eq
   25210:	782c      	ldrbeq	r4, [r5, #0]
   25212:	1c9d      	addeq	r5, r3, #2
   25214:	e7bb      	b.n	2518e <_strtoll_l.constprop.0+0x2a>
   25216:	2e10      	cmp	r6, #16
   25218:	d1be      	bne.n	25198 <_strtoll_l.constprop.0+0x34>
   2521a:	2c30      	cmp	r4, #48	; 0x30
   2521c:	d1bc      	bne.n	25198 <_strtoll_l.constprop.0+0x34>
   2521e:	782b      	ldrb	r3, [r5, #0]
   25220:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25224:	2b58      	cmp	r3, #88	; 0x58
   25226:	d1b7      	bne.n	25198 <_strtoll_l.constprop.0+0x34>
   25228:	786c      	ldrb	r4, [r5, #1]
   2522a:	2610      	movs	r6, #16
   2522c:	3502      	adds	r5, #2
   2522e:	e7b3      	b.n	25198 <_strtoll_l.constprop.0+0x34>
   25230:	782b      	ldrb	r3, [r5, #0]
   25232:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25236:	2b58      	cmp	r3, #88	; 0x58
   25238:	d0f6      	beq.n	25228 <_strtoll_l.constprop.0+0xc4>
   2523a:	2608      	movs	r6, #8
   2523c:	e7ac      	b.n	25198 <_strtoll_l.constprop.0+0x34>
   2523e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   25242:	2b19      	cmp	r3, #25
   25244:	d805      	bhi.n	25252 <_strtoll_l.constprop.0+0xee>
   25246:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   2524a:	e7c2      	b.n	251d2 <_strtoll_l.constprop.0+0x6e>
   2524c:	f04f 32ff 	mov.w	r2, #4294967295
   25250:	e7d9      	b.n	25206 <_strtoll_l.constprop.0+0xa2>
   25252:	1c53      	adds	r3, r2, #1
   25254:	d10a      	bne.n	2526c <_strtoll_l.constprop.0+0x108>
   25256:	2322      	movs	r3, #34	; 0x22
   25258:	9a02      	ldr	r2, [sp, #8]
   2525a:	4658      	mov	r0, fp
   2525c:	4651      	mov	r1, sl
   2525e:	6013      	str	r3, [r2, #0]
   25260:	f1b8 0f00 	cmp.w	r8, #0
   25264:	d10a      	bne.n	2527c <_strtoll_l.constprop.0+0x118>
   25266:	b005      	add	sp, #20
   25268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2526c:	b117      	cbz	r7, 25274 <_strtoll_l.constprop.0+0x110>
   2526e:	4240      	negs	r0, r0
   25270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   25274:	f1b8 0f00 	cmp.w	r8, #0
   25278:	d0f5      	beq.n	25266 <_strtoll_l.constprop.0+0x102>
   2527a:	b10a      	cbz	r2, 25280 <_strtoll_l.constprop.0+0x11c>
   2527c:	f105 39ff 	add.w	r9, r5, #4294967295
   25280:	f8c8 9000 	str.w	r9, [r8]
   25284:	e7ef      	b.n	25266 <_strtoll_l.constprop.0+0x102>
   25286:	bf00      	nop
   25288:	0002b6b6 	.word	0x0002b6b6

0002528c <strtoll>:
   2528c:	4613      	mov	r3, r2
   2528e:	460a      	mov	r2, r1
   25290:	4601      	mov	r1, r0
   25292:	4802      	ldr	r0, [pc, #8]	; (2529c <strtoll+0x10>)
   25294:	6800      	ldr	r0, [r0, #0]
   25296:	f7ff bf65 	b.w	25164 <_strtoll_l.constprop.0>
   2529a:	bf00      	nop
   2529c:	2000c708 	.word	0x2000c708

000252a0 <_strtoul_l.constprop.0>:
   252a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   252a4:	4686      	mov	lr, r0
   252a6:	460d      	mov	r5, r1
   252a8:	4e35      	ldr	r6, [pc, #212]	; (25380 <_strtoul_l.constprop.0+0xe0>)
   252aa:	4628      	mov	r0, r5
   252ac:	f815 4b01 	ldrb.w	r4, [r5], #1
   252b0:	5d37      	ldrb	r7, [r6, r4]
   252b2:	f017 0708 	ands.w	r7, r7, #8
   252b6:	d1f8      	bne.n	252aa <_strtoul_l.constprop.0+0xa>
   252b8:	2c2d      	cmp	r4, #45	; 0x2d
   252ba:	d126      	bne.n	2530a <_strtoul_l.constprop.0+0x6a>
   252bc:	782c      	ldrb	r4, [r5, #0]
   252be:	2701      	movs	r7, #1
   252c0:	1c85      	adds	r5, r0, #2
   252c2:	bb3b      	cbnz	r3, 25314 <_strtoul_l.constprop.0+0x74>
   252c4:	2c30      	cmp	r4, #48	; 0x30
   252c6:	d032      	beq.n	2532e <_strtoul_l.constprop.0+0x8e>
   252c8:	230a      	movs	r3, #10
   252ca:	f04f 38ff 	mov.w	r8, #4294967295
   252ce:	2600      	movs	r6, #0
   252d0:	fbb8 f8f3 	udiv	r8, r8, r3
   252d4:	fb03 f908 	mul.w	r9, r3, r8
   252d8:	4630      	mov	r0, r6
   252da:	ea6f 0909 	mvn.w	r9, r9
   252de:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   252e2:	f1bc 0f09 	cmp.w	ip, #9
   252e6:	d829      	bhi.n	2533c <_strtoul_l.constprop.0+0x9c>
   252e8:	4664      	mov	r4, ip
   252ea:	42a3      	cmp	r3, r4
   252ec:	dd37      	ble.n	2535e <_strtoul_l.constprop.0+0xbe>
   252ee:	f1b6 3fff 	cmp.w	r6, #4294967295
   252f2:	d007      	beq.n	25304 <_strtoul_l.constprop.0+0x64>
   252f4:	4580      	cmp	r8, r0
   252f6:	d32f      	bcc.n	25358 <_strtoul_l.constprop.0+0xb8>
   252f8:	d101      	bne.n	252fe <_strtoul_l.constprop.0+0x5e>
   252fa:	45a1      	cmp	r9, r4
   252fc:	db2c      	blt.n	25358 <_strtoul_l.constprop.0+0xb8>
   252fe:	fb00 4003 	mla	r0, r0, r3, r4
   25302:	2601      	movs	r6, #1
   25304:	f815 4b01 	ldrb.w	r4, [r5], #1
   25308:	e7e9      	b.n	252de <_strtoul_l.constprop.0+0x3e>
   2530a:	2c2b      	cmp	r4, #43	; 0x2b
   2530c:	bf04      	itt	eq
   2530e:	782c      	ldrbeq	r4, [r5, #0]
   25310:	1c85      	addeq	r5, r0, #2
   25312:	e7d6      	b.n	252c2 <_strtoul_l.constprop.0+0x22>
   25314:	2b10      	cmp	r3, #16
   25316:	d1d8      	bne.n	252ca <_strtoul_l.constprop.0+0x2a>
   25318:	2c30      	cmp	r4, #48	; 0x30
   2531a:	d1d6      	bne.n	252ca <_strtoul_l.constprop.0+0x2a>
   2531c:	7828      	ldrb	r0, [r5, #0]
   2531e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   25322:	2858      	cmp	r0, #88	; 0x58
   25324:	d1d1      	bne.n	252ca <_strtoul_l.constprop.0+0x2a>
   25326:	786c      	ldrb	r4, [r5, #1]
   25328:	2310      	movs	r3, #16
   2532a:	3502      	adds	r5, #2
   2532c:	e7cd      	b.n	252ca <_strtoul_l.constprop.0+0x2a>
   2532e:	782b      	ldrb	r3, [r5, #0]
   25330:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25334:	2b58      	cmp	r3, #88	; 0x58
   25336:	d0f6      	beq.n	25326 <_strtoul_l.constprop.0+0x86>
   25338:	2308      	movs	r3, #8
   2533a:	e7c6      	b.n	252ca <_strtoul_l.constprop.0+0x2a>
   2533c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   25340:	f1bc 0f19 	cmp.w	ip, #25
   25344:	d801      	bhi.n	2534a <_strtoul_l.constprop.0+0xaa>
   25346:	3c37      	subs	r4, #55	; 0x37
   25348:	e7cf      	b.n	252ea <_strtoul_l.constprop.0+0x4a>
   2534a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   2534e:	f1bc 0f19 	cmp.w	ip, #25
   25352:	d804      	bhi.n	2535e <_strtoul_l.constprop.0+0xbe>
   25354:	3c57      	subs	r4, #87	; 0x57
   25356:	e7c8      	b.n	252ea <_strtoul_l.constprop.0+0x4a>
   25358:	f04f 36ff 	mov.w	r6, #4294967295
   2535c:	e7d2      	b.n	25304 <_strtoul_l.constprop.0+0x64>
   2535e:	1c73      	adds	r3, r6, #1
   25360:	d106      	bne.n	25370 <_strtoul_l.constprop.0+0xd0>
   25362:	2322      	movs	r3, #34	; 0x22
   25364:	4630      	mov	r0, r6
   25366:	f8ce 3000 	str.w	r3, [lr]
   2536a:	b932      	cbnz	r2, 2537a <_strtoul_l.constprop.0+0xda>
   2536c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25370:	b107      	cbz	r7, 25374 <_strtoul_l.constprop.0+0xd4>
   25372:	4240      	negs	r0, r0
   25374:	2a00      	cmp	r2, #0
   25376:	d0f9      	beq.n	2536c <_strtoul_l.constprop.0+0xcc>
   25378:	b106      	cbz	r6, 2537c <_strtoul_l.constprop.0+0xdc>
   2537a:	1e69      	subs	r1, r5, #1
   2537c:	6011      	str	r1, [r2, #0]
   2537e:	e7f5      	b.n	2536c <_strtoul_l.constprop.0+0xcc>
   25380:	0002b6b6 	.word	0x0002b6b6

00025384 <strtoul>:
   25384:	4613      	mov	r3, r2
   25386:	460a      	mov	r2, r1
   25388:	4601      	mov	r1, r0
   2538a:	4802      	ldr	r0, [pc, #8]	; (25394 <strtoul+0x10>)
   2538c:	6800      	ldr	r0, [r0, #0]
   2538e:	f7ff bf87 	b.w	252a0 <_strtoul_l.constprop.0>
   25392:	bf00      	nop
   25394:	2000c708 	.word	0x2000c708

00025398 <vsniprintf>:
   25398:	b507      	push	{r0, r1, r2, lr}
   2539a:	9300      	str	r3, [sp, #0]
   2539c:	4613      	mov	r3, r2
   2539e:	460a      	mov	r2, r1
   253a0:	4601      	mov	r1, r0
   253a2:	4803      	ldr	r0, [pc, #12]	; (253b0 <vsniprintf+0x18>)
   253a4:	6800      	ldr	r0, [r0, #0]
   253a6:	f003 fb12 	bl	289ce <_vsniprintf_r>
   253aa:	b003      	add	sp, #12
   253ac:	f85d fb04 	ldr.w	pc, [sp], #4
   253b0:	2000c708 	.word	0x2000c708

000253b4 <__malloc_lock>:
   253b4:	4801      	ldr	r0, [pc, #4]	; (253bc <__malloc_lock+0x8>)
   253b6:	f001 b92a 	b.w	2660e <__retarget_lock_acquire_recursive>
   253ba:	bf00      	nop
   253bc:	2000c83c 	.word	0x2000c83c

000253c0 <__malloc_unlock>:
   253c0:	4801      	ldr	r0, [pc, #4]	; (253c8 <__malloc_unlock+0x8>)
   253c2:	f001 b92a 	b.w	2661a <__retarget_lock_release_recursive>
   253c6:	bf00      	nop
   253c8:	2000c83c 	.word	0x2000c83c

000253cc <_svfiprintf_r>:
   253cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   253d0:	4698      	mov	r8, r3
   253d2:	898b      	ldrh	r3, [r1, #12]
   253d4:	b09d      	sub	sp, #116	; 0x74
   253d6:	4607      	mov	r7, r0
   253d8:	061b      	lsls	r3, r3, #24
   253da:	460d      	mov	r5, r1
   253dc:	4614      	mov	r4, r2
   253de:	d510      	bpl.n	25402 <_svfiprintf_r+0x36>
   253e0:	690b      	ldr	r3, [r1, #16]
   253e2:	b973      	cbnz	r3, 25402 <_svfiprintf_r+0x36>
   253e4:	2140      	movs	r1, #64	; 0x40
   253e6:	f7ff fdcb 	bl	24f80 <_malloc_r>
   253ea:	6028      	str	r0, [r5, #0]
   253ec:	6128      	str	r0, [r5, #16]
   253ee:	b930      	cbnz	r0, 253fe <_svfiprintf_r+0x32>
   253f0:	230c      	movs	r3, #12
   253f2:	603b      	str	r3, [r7, #0]
   253f4:	f04f 30ff 	mov.w	r0, #4294967295
   253f8:	b01d      	add	sp, #116	; 0x74
   253fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   253fe:	2340      	movs	r3, #64	; 0x40
   25400:	616b      	str	r3, [r5, #20]
   25402:	2300      	movs	r3, #0
   25404:	f8cd 800c 	str.w	r8, [sp, #12]
   25408:	f04f 0901 	mov.w	r9, #1
   2540c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 255b0 <_svfiprintf_r+0x1e4>
   25410:	9309      	str	r3, [sp, #36]	; 0x24
   25412:	2320      	movs	r3, #32
   25414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   25418:	2330      	movs	r3, #48	; 0x30
   2541a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2541e:	4623      	mov	r3, r4
   25420:	469a      	mov	sl, r3
   25422:	f813 2b01 	ldrb.w	r2, [r3], #1
   25426:	b10a      	cbz	r2, 2542c <_svfiprintf_r+0x60>
   25428:	2a25      	cmp	r2, #37	; 0x25
   2542a:	d1f9      	bne.n	25420 <_svfiprintf_r+0x54>
   2542c:	ebba 0b04 	subs.w	fp, sl, r4
   25430:	d00b      	beq.n	2544a <_svfiprintf_r+0x7e>
   25432:	465b      	mov	r3, fp
   25434:	4622      	mov	r2, r4
   25436:	4629      	mov	r1, r5
   25438:	4638      	mov	r0, r7
   2543a:	f003 faf3 	bl	28a24 <__ssputs_r>
   2543e:	3001      	adds	r0, #1
   25440:	f000 80a7 	beq.w	25592 <_svfiprintf_r+0x1c6>
   25444:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25446:	445a      	add	r2, fp
   25448:	9209      	str	r2, [sp, #36]	; 0x24
   2544a:	f89a 3000 	ldrb.w	r3, [sl]
   2544e:	2b00      	cmp	r3, #0
   25450:	f000 809f 	beq.w	25592 <_svfiprintf_r+0x1c6>
   25454:	2300      	movs	r3, #0
   25456:	f04f 32ff 	mov.w	r2, #4294967295
   2545a:	f10a 0a01 	add.w	sl, sl, #1
   2545e:	9304      	str	r3, [sp, #16]
   25460:	9307      	str	r3, [sp, #28]
   25462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   25466:	931a      	str	r3, [sp, #104]	; 0x68
   25468:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2546c:	4654      	mov	r4, sl
   2546e:	2205      	movs	r2, #5
   25470:	484f      	ldr	r0, [pc, #316]	; (255b0 <_svfiprintf_r+0x1e4>)
   25472:	f814 1b01 	ldrb.w	r1, [r4], #1
   25476:	f003 fa1b 	bl	288b0 <memchr>
   2547a:	9a04      	ldr	r2, [sp, #16]
   2547c:	b9d8      	cbnz	r0, 254b6 <_svfiprintf_r+0xea>
   2547e:	06d0      	lsls	r0, r2, #27
   25480:	bf44      	itt	mi
   25482:	2320      	movmi	r3, #32
   25484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   25488:	0711      	lsls	r1, r2, #28
   2548a:	bf44      	itt	mi
   2548c:	232b      	movmi	r3, #43	; 0x2b
   2548e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   25492:	f89a 3000 	ldrb.w	r3, [sl]
   25496:	2b2a      	cmp	r3, #42	; 0x2a
   25498:	d015      	beq.n	254c6 <_svfiprintf_r+0xfa>
   2549a:	9a07      	ldr	r2, [sp, #28]
   2549c:	4654      	mov	r4, sl
   2549e:	2000      	movs	r0, #0
   254a0:	f04f 0c0a 	mov.w	ip, #10
   254a4:	4621      	mov	r1, r4
   254a6:	f811 3b01 	ldrb.w	r3, [r1], #1
   254aa:	3b30      	subs	r3, #48	; 0x30
   254ac:	2b09      	cmp	r3, #9
   254ae:	d94b      	bls.n	25548 <_svfiprintf_r+0x17c>
   254b0:	b1b0      	cbz	r0, 254e0 <_svfiprintf_r+0x114>
   254b2:	9207      	str	r2, [sp, #28]
   254b4:	e014      	b.n	254e0 <_svfiprintf_r+0x114>
   254b6:	eba0 0308 	sub.w	r3, r0, r8
   254ba:	46a2      	mov	sl, r4
   254bc:	fa09 f303 	lsl.w	r3, r9, r3
   254c0:	4313      	orrs	r3, r2
   254c2:	9304      	str	r3, [sp, #16]
   254c4:	e7d2      	b.n	2546c <_svfiprintf_r+0xa0>
   254c6:	9b03      	ldr	r3, [sp, #12]
   254c8:	1d19      	adds	r1, r3, #4
   254ca:	681b      	ldr	r3, [r3, #0]
   254cc:	2b00      	cmp	r3, #0
   254ce:	9103      	str	r1, [sp, #12]
   254d0:	bfbb      	ittet	lt
   254d2:	425b      	neglt	r3, r3
   254d4:	f042 0202 	orrlt.w	r2, r2, #2
   254d8:	9307      	strge	r3, [sp, #28]
   254da:	9307      	strlt	r3, [sp, #28]
   254dc:	bfb8      	it	lt
   254de:	9204      	strlt	r2, [sp, #16]
   254e0:	7823      	ldrb	r3, [r4, #0]
   254e2:	2b2e      	cmp	r3, #46	; 0x2e
   254e4:	d10a      	bne.n	254fc <_svfiprintf_r+0x130>
   254e6:	7863      	ldrb	r3, [r4, #1]
   254e8:	2b2a      	cmp	r3, #42	; 0x2a
   254ea:	d132      	bne.n	25552 <_svfiprintf_r+0x186>
   254ec:	9b03      	ldr	r3, [sp, #12]
   254ee:	3402      	adds	r4, #2
   254f0:	1d1a      	adds	r2, r3, #4
   254f2:	681b      	ldr	r3, [r3, #0]
   254f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   254f8:	9203      	str	r2, [sp, #12]
   254fa:	9305      	str	r3, [sp, #20]
   254fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 255b4 <_svfiprintf_r+0x1e8>
   25500:	2203      	movs	r2, #3
   25502:	7821      	ldrb	r1, [r4, #0]
   25504:	4650      	mov	r0, sl
   25506:	f003 f9d3 	bl	288b0 <memchr>
   2550a:	b138      	cbz	r0, 2551c <_svfiprintf_r+0x150>
   2550c:	eba0 000a 	sub.w	r0, r0, sl
   25510:	2240      	movs	r2, #64	; 0x40
   25512:	9b04      	ldr	r3, [sp, #16]
   25514:	3401      	adds	r4, #1
   25516:	4082      	lsls	r2, r0
   25518:	4313      	orrs	r3, r2
   2551a:	9304      	str	r3, [sp, #16]
   2551c:	f814 1b01 	ldrb.w	r1, [r4], #1
   25520:	2206      	movs	r2, #6
   25522:	4825      	ldr	r0, [pc, #148]	; (255b8 <_svfiprintf_r+0x1ec>)
   25524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   25528:	f003 f9c2 	bl	288b0 <memchr>
   2552c:	2800      	cmp	r0, #0
   2552e:	d036      	beq.n	2559e <_svfiprintf_r+0x1d2>
   25530:	4b22      	ldr	r3, [pc, #136]	; (255bc <_svfiprintf_r+0x1f0>)
   25532:	bb1b      	cbnz	r3, 2557c <_svfiprintf_r+0x1b0>
   25534:	9b03      	ldr	r3, [sp, #12]
   25536:	3307      	adds	r3, #7
   25538:	f023 0307 	bic.w	r3, r3, #7
   2553c:	3308      	adds	r3, #8
   2553e:	9303      	str	r3, [sp, #12]
   25540:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25542:	4433      	add	r3, r6
   25544:	9309      	str	r3, [sp, #36]	; 0x24
   25546:	e76a      	b.n	2541e <_svfiprintf_r+0x52>
   25548:	fb0c 3202 	mla	r2, ip, r2, r3
   2554c:	460c      	mov	r4, r1
   2554e:	2001      	movs	r0, #1
   25550:	e7a8      	b.n	254a4 <_svfiprintf_r+0xd8>
   25552:	2300      	movs	r3, #0
   25554:	3401      	adds	r4, #1
   25556:	f04f 0c0a 	mov.w	ip, #10
   2555a:	4619      	mov	r1, r3
   2555c:	9305      	str	r3, [sp, #20]
   2555e:	4620      	mov	r0, r4
   25560:	f810 2b01 	ldrb.w	r2, [r0], #1
   25564:	3a30      	subs	r2, #48	; 0x30
   25566:	2a09      	cmp	r2, #9
   25568:	d903      	bls.n	25572 <_svfiprintf_r+0x1a6>
   2556a:	2b00      	cmp	r3, #0
   2556c:	d0c6      	beq.n	254fc <_svfiprintf_r+0x130>
   2556e:	9105      	str	r1, [sp, #20]
   25570:	e7c4      	b.n	254fc <_svfiprintf_r+0x130>
   25572:	fb0c 2101 	mla	r1, ip, r1, r2
   25576:	4604      	mov	r4, r0
   25578:	2301      	movs	r3, #1
   2557a:	e7f0      	b.n	2555e <_svfiprintf_r+0x192>
   2557c:	ab03      	add	r3, sp, #12
   2557e:	462a      	mov	r2, r5
   25580:	a904      	add	r1, sp, #16
   25582:	4638      	mov	r0, r7
   25584:	9300      	str	r3, [sp, #0]
   25586:	4b0e      	ldr	r3, [pc, #56]	; (255c0 <_svfiprintf_r+0x1f4>)
   25588:	f3af 8000 	nop.w
   2558c:	1c42      	adds	r2, r0, #1
   2558e:	4606      	mov	r6, r0
   25590:	d1d6      	bne.n	25540 <_svfiprintf_r+0x174>
   25592:	89ab      	ldrh	r3, [r5, #12]
   25594:	065b      	lsls	r3, r3, #25
   25596:	f53f af2d 	bmi.w	253f4 <_svfiprintf_r+0x28>
   2559a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2559c:	e72c      	b.n	253f8 <_svfiprintf_r+0x2c>
   2559e:	ab03      	add	r3, sp, #12
   255a0:	462a      	mov	r2, r5
   255a2:	a904      	add	r1, sp, #16
   255a4:	4638      	mov	r0, r7
   255a6:	9300      	str	r3, [sp, #0]
   255a8:	4b05      	ldr	r3, [pc, #20]	; (255c0 <_svfiprintf_r+0x1f4>)
   255aa:	f000 f80b 	bl	255c4 <_printf_i>
   255ae:	e7ed      	b.n	2558c <_svfiprintf_r+0x1c0>
   255b0:	0002b7b6 	.word	0x0002b7b6
   255b4:	0002b7bc 	.word	0x0002b7bc
   255b8:	0002b7c0 	.word	0x0002b7c0
   255bc:	00000000 	.word	0x00000000
   255c0:	00028a25 	.word	0x00028a25

000255c4 <_printf_i>:
   255c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   255c8:	7e0f      	ldrb	r7, [r1, #24]
   255ca:	4691      	mov	r9, r2
   255cc:	4680      	mov	r8, r0
   255ce:	460c      	mov	r4, r1
   255d0:	2f78      	cmp	r7, #120	; 0x78
   255d2:	469a      	mov	sl, r3
   255d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   255d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
   255da:	d807      	bhi.n	255ec <_printf_i+0x28>
   255dc:	2f62      	cmp	r7, #98	; 0x62
   255de:	d80a      	bhi.n	255f6 <_printf_i+0x32>
   255e0:	2f00      	cmp	r7, #0
   255e2:	f000 80e0 	beq.w	257a6 <_printf_i+0x1e2>
   255e6:	2f58      	cmp	r7, #88	; 0x58
   255e8:	f000 80bb 	beq.w	25762 <_printf_i+0x19e>
   255ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
   255f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   255f4:	e03a      	b.n	2566c <_printf_i+0xa8>
   255f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   255fa:	2b15      	cmp	r3, #21
   255fc:	d8f6      	bhi.n	255ec <_printf_i+0x28>
   255fe:	a101      	add	r1, pc, #4	; (adr r1, 25604 <_printf_i+0x40>)
   25600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   25604:	0002565d 	.word	0x0002565d
   25608:	00025671 	.word	0x00025671
   2560c:	000255ed 	.word	0x000255ed
   25610:	000255ed 	.word	0x000255ed
   25614:	000255ed 	.word	0x000255ed
   25618:	000255ed 	.word	0x000255ed
   2561c:	00025671 	.word	0x00025671
   25620:	000255ed 	.word	0x000255ed
   25624:	000255ed 	.word	0x000255ed
   25628:	000255ed 	.word	0x000255ed
   2562c:	000255ed 	.word	0x000255ed
   25630:	0002578d 	.word	0x0002578d
   25634:	00025701 	.word	0x00025701
   25638:	00025743 	.word	0x00025743
   2563c:	000255ed 	.word	0x000255ed
   25640:	000255ed 	.word	0x000255ed
   25644:	000257af 	.word	0x000257af
   25648:	000255ed 	.word	0x000255ed
   2564c:	00025701 	.word	0x00025701
   25650:	000255ed 	.word	0x000255ed
   25654:	000255ed 	.word	0x000255ed
   25658:	0002574b 	.word	0x0002574b
   2565c:	682b      	ldr	r3, [r5, #0]
   2565e:	f104 0642 	add.w	r6, r4, #66	; 0x42
   25662:	1d1a      	adds	r2, r3, #4
   25664:	681b      	ldr	r3, [r3, #0]
   25666:	602a      	str	r2, [r5, #0]
   25668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2566c:	2301      	movs	r3, #1
   2566e:	e0ab      	b.n	257c8 <_printf_i+0x204>
   25670:	6823      	ldr	r3, [r4, #0]
   25672:	6829      	ldr	r1, [r5, #0]
   25674:	061f      	lsls	r7, r3, #24
   25676:	f101 0004 	add.w	r0, r1, #4
   2567a:	6028      	str	r0, [r5, #0]
   2567c:	d501      	bpl.n	25682 <_printf_i+0xbe>
   2567e:	680d      	ldr	r5, [r1, #0]
   25680:	e003      	b.n	2568a <_printf_i+0xc6>
   25682:	065e      	lsls	r6, r3, #25
   25684:	d5fb      	bpl.n	2567e <_printf_i+0xba>
   25686:	f9b1 5000 	ldrsh.w	r5, [r1]
   2568a:	2d00      	cmp	r5, #0
   2568c:	6861      	ldr	r1, [r4, #4]
   2568e:	da7a      	bge.n	25786 <_printf_i+0x1c2>
   25690:	202d      	movs	r0, #45	; 0x2d
   25692:	2900      	cmp	r1, #0
   25694:	60a1      	str	r1, [r4, #8]
   25696:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   2569a:	da2d      	bge.n	256f8 <_printf_i+0x134>
   2569c:	426d      	negs	r5, r5
   2569e:	485e      	ldr	r0, [pc, #376]	; (25818 <_printf_i+0x254>)
   256a0:	230a      	movs	r3, #10
   256a2:	4616      	mov	r6, r2
   256a4:	fbb5 f1f3 	udiv	r1, r5, r3
   256a8:	fb03 5711 	mls	r7, r3, r1, r5
   256ac:	5dc7      	ldrb	r7, [r0, r7]
   256ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
   256b2:	462f      	mov	r7, r5
   256b4:	460d      	mov	r5, r1
   256b6:	42bb      	cmp	r3, r7
   256b8:	d9f4      	bls.n	256a4 <_printf_i+0xe0>
   256ba:	2b08      	cmp	r3, #8
   256bc:	d10b      	bne.n	256d6 <_printf_i+0x112>
   256be:	6823      	ldr	r3, [r4, #0]
   256c0:	07df      	lsls	r7, r3, #31
   256c2:	d508      	bpl.n	256d6 <_printf_i+0x112>
   256c4:	6923      	ldr	r3, [r4, #16]
   256c6:	6861      	ldr	r1, [r4, #4]
   256c8:	4299      	cmp	r1, r3
   256ca:	bfde      	ittt	le
   256cc:	2330      	movle	r3, #48	; 0x30
   256ce:	f806 3c01 	strble.w	r3, [r6, #-1]
   256d2:	f106 36ff 	addle.w	r6, r6, #4294967295
   256d6:	1b92      	subs	r2, r2, r6
   256d8:	6122      	str	r2, [r4, #16]
   256da:	464b      	mov	r3, r9
   256dc:	aa03      	add	r2, sp, #12
   256de:	4621      	mov	r1, r4
   256e0:	4640      	mov	r0, r8
   256e2:	f8cd a000 	str.w	sl, [sp]
   256e6:	f003 f9f8 	bl	28ada <_printf_common>
   256ea:	3001      	adds	r0, #1
   256ec:	d171      	bne.n	257d2 <_printf_i+0x20e>
   256ee:	f04f 30ff 	mov.w	r0, #4294967295
   256f2:	b004      	add	sp, #16
   256f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   256f8:	f023 0304 	bic.w	r3, r3, #4
   256fc:	6023      	str	r3, [r4, #0]
   256fe:	e7cd      	b.n	2569c <_printf_i+0xd8>
   25700:	682b      	ldr	r3, [r5, #0]
   25702:	6820      	ldr	r0, [r4, #0]
   25704:	1d19      	adds	r1, r3, #4
   25706:	6029      	str	r1, [r5, #0]
   25708:	0605      	lsls	r5, r0, #24
   2570a:	d501      	bpl.n	25710 <_printf_i+0x14c>
   2570c:	681d      	ldr	r5, [r3, #0]
   2570e:	e002      	b.n	25716 <_printf_i+0x152>
   25710:	0641      	lsls	r1, r0, #25
   25712:	d5fb      	bpl.n	2570c <_printf_i+0x148>
   25714:	881d      	ldrh	r5, [r3, #0]
   25716:	2f6f      	cmp	r7, #111	; 0x6f
   25718:	483f      	ldr	r0, [pc, #252]	; (25818 <_printf_i+0x254>)
   2571a:	bf14      	ite	ne
   2571c:	230a      	movne	r3, #10
   2571e:	2308      	moveq	r3, #8
   25720:	2100      	movs	r1, #0
   25722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   25726:	6866      	ldr	r6, [r4, #4]
   25728:	2e00      	cmp	r6, #0
   2572a:	60a6      	str	r6, [r4, #8]
   2572c:	dbb9      	blt.n	256a2 <_printf_i+0xde>
   2572e:	6821      	ldr	r1, [r4, #0]
   25730:	f021 0104 	bic.w	r1, r1, #4
   25734:	6021      	str	r1, [r4, #0]
   25736:	2d00      	cmp	r5, #0
   25738:	d1b3      	bne.n	256a2 <_printf_i+0xde>
   2573a:	2e00      	cmp	r6, #0
   2573c:	d1b1      	bne.n	256a2 <_printf_i+0xde>
   2573e:	4616      	mov	r6, r2
   25740:	e7bb      	b.n	256ba <_printf_i+0xf6>
   25742:	6823      	ldr	r3, [r4, #0]
   25744:	f043 0320 	orr.w	r3, r3, #32
   25748:	6023      	str	r3, [r4, #0]
   2574a:	2778      	movs	r7, #120	; 0x78
   2574c:	4833      	ldr	r0, [pc, #204]	; (2581c <_printf_i+0x258>)
   2574e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   25752:	6829      	ldr	r1, [r5, #0]
   25754:	6823      	ldr	r3, [r4, #0]
   25756:	1d0e      	adds	r6, r1, #4
   25758:	602e      	str	r6, [r5, #0]
   2575a:	061e      	lsls	r6, r3, #24
   2575c:	d503      	bpl.n	25766 <_printf_i+0x1a2>
   2575e:	680d      	ldr	r5, [r1, #0]
   25760:	e004      	b.n	2576c <_printf_i+0x1a8>
   25762:	482d      	ldr	r0, [pc, #180]	; (25818 <_printf_i+0x254>)
   25764:	e7f3      	b.n	2574e <_printf_i+0x18a>
   25766:	065d      	lsls	r5, r3, #25
   25768:	d5f9      	bpl.n	2575e <_printf_i+0x19a>
   2576a:	880d      	ldrh	r5, [r1, #0]
   2576c:	07d9      	lsls	r1, r3, #31
   2576e:	bf44      	itt	mi
   25770:	f043 0320 	orrmi.w	r3, r3, #32
   25774:	6023      	strmi	r3, [r4, #0]
   25776:	b10d      	cbz	r5, 2577c <_printf_i+0x1b8>
   25778:	2310      	movs	r3, #16
   2577a:	e7d1      	b.n	25720 <_printf_i+0x15c>
   2577c:	6823      	ldr	r3, [r4, #0]
   2577e:	f023 0320 	bic.w	r3, r3, #32
   25782:	6023      	str	r3, [r4, #0]
   25784:	e7f8      	b.n	25778 <_printf_i+0x1b4>
   25786:	4824      	ldr	r0, [pc, #144]	; (25818 <_printf_i+0x254>)
   25788:	230a      	movs	r3, #10
   2578a:	e7cc      	b.n	25726 <_printf_i+0x162>
   2578c:	682b      	ldr	r3, [r5, #0]
   2578e:	6826      	ldr	r6, [r4, #0]
   25790:	1d18      	adds	r0, r3, #4
   25792:	6961      	ldr	r1, [r4, #20]
   25794:	6028      	str	r0, [r5, #0]
   25796:	0635      	lsls	r5, r6, #24
   25798:	681b      	ldr	r3, [r3, #0]
   2579a:	d501      	bpl.n	257a0 <_printf_i+0x1dc>
   2579c:	6019      	str	r1, [r3, #0]
   2579e:	e002      	b.n	257a6 <_printf_i+0x1e2>
   257a0:	0670      	lsls	r0, r6, #25
   257a2:	d5fb      	bpl.n	2579c <_printf_i+0x1d8>
   257a4:	8019      	strh	r1, [r3, #0]
   257a6:	2300      	movs	r3, #0
   257a8:	4616      	mov	r6, r2
   257aa:	6123      	str	r3, [r4, #16]
   257ac:	e795      	b.n	256da <_printf_i+0x116>
   257ae:	682b      	ldr	r3, [r5, #0]
   257b0:	2100      	movs	r1, #0
   257b2:	1d1a      	adds	r2, r3, #4
   257b4:	602a      	str	r2, [r5, #0]
   257b6:	681e      	ldr	r6, [r3, #0]
   257b8:	6862      	ldr	r2, [r4, #4]
   257ba:	4630      	mov	r0, r6
   257bc:	f003 f878 	bl	288b0 <memchr>
   257c0:	b108      	cbz	r0, 257c6 <_printf_i+0x202>
   257c2:	1b80      	subs	r0, r0, r6
   257c4:	6060      	str	r0, [r4, #4]
   257c6:	6863      	ldr	r3, [r4, #4]
   257c8:	6123      	str	r3, [r4, #16]
   257ca:	2300      	movs	r3, #0
   257cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   257d0:	e783      	b.n	256da <_printf_i+0x116>
   257d2:	6923      	ldr	r3, [r4, #16]
   257d4:	4632      	mov	r2, r6
   257d6:	4649      	mov	r1, r9
   257d8:	4640      	mov	r0, r8
   257da:	47d0      	blx	sl
   257dc:	3001      	adds	r0, #1
   257de:	d086      	beq.n	256ee <_printf_i+0x12a>
   257e0:	6823      	ldr	r3, [r4, #0]
   257e2:	079b      	lsls	r3, r3, #30
   257e4:	d414      	bmi.n	25810 <_printf_i+0x24c>
   257e6:	68e0      	ldr	r0, [r4, #12]
   257e8:	9b03      	ldr	r3, [sp, #12]
   257ea:	4298      	cmp	r0, r3
   257ec:	bfb8      	it	lt
   257ee:	4618      	movlt	r0, r3
   257f0:	e77f      	b.n	256f2 <_printf_i+0x12e>
   257f2:	2301      	movs	r3, #1
   257f4:	4632      	mov	r2, r6
   257f6:	4649      	mov	r1, r9
   257f8:	4640      	mov	r0, r8
   257fa:	47d0      	blx	sl
   257fc:	3001      	adds	r0, #1
   257fe:	f43f af76 	beq.w	256ee <_printf_i+0x12a>
   25802:	3501      	adds	r5, #1
   25804:	68e3      	ldr	r3, [r4, #12]
   25806:	9903      	ldr	r1, [sp, #12]
   25808:	1a5b      	subs	r3, r3, r1
   2580a:	42ab      	cmp	r3, r5
   2580c:	dcf1      	bgt.n	257f2 <_printf_i+0x22e>
   2580e:	e7ea      	b.n	257e6 <_printf_i+0x222>
   25810:	2500      	movs	r5, #0
   25812:	f104 0619 	add.w	r6, r4, #25
   25816:	e7f5      	b.n	25804 <_printf_i+0x240>
   25818:	0002b7c7 	.word	0x0002b7c7
   2581c:	0002b7d8 	.word	0x0002b7d8

00025820 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   25820:	2301      	movs	r3, #1
   25822:	fa03 f101 	lsl.w	r1, r3, r1
   25826:	6903      	ldr	r3, [r0, #16]
   25828:	681b      	ldr	r3, [r3, #0]
   2582a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2582c:	bf18      	it	ne
   2582e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   25832:	b112      	cbz	r2, 2583a <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   25834:	6883      	ldr	r3, [r0, #8]
   25836:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   25838:	4718      	bx	r3
   2583a:	6883      	ldr	r3, [r0, #8]
   2583c:	691b      	ldr	r3, [r3, #16]
   2583e:	e7fb      	b.n	25838 <gpio_pin_set.isra.0+0x18>

00025840 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   25840:	b538      	push	{r3, r4, r5, lr}
   25842:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
   25844:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   25848:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2584c:	f240 30e7 	movw	r0, #999	; 0x3e7
   25850:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25854:	2300      	movs	r3, #0
   25856:	fbc4 0105 	smlal	r0, r1, r4, r5
   2585a:	f7f3 fa55 	bl	18d08 <__aeabi_uldivmod>
}
   2585e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   25862:	f7ff b831 	b.w	248c8 <z_impl_k_sleep>

00025866 <blink_leds>:
		{	
   25866:	2a01      	cmp	r2, #1
	switch(id)
   25868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2586a:	4606      	mov	r6, r0
   2586c:	460f      	mov	r7, r1
   2586e:	461d      	mov	r5, r3
		{	
   25870:	d024      	beq.n	258bc <blink_leds+0x56>
   25872:	2a02      	cmp	r2, #2
   25874:	d034      	beq.n	258e0 <blink_leds+0x7a>
   25876:	b982      	cbnz	r2, 2589a <blink_leds+0x34>
   25878:	4614      	mov	r4, r2
   2587a:	e00c      	b.n	25896 <blink_leds+0x30>
				k_msleep(off_sleep_ms);
   2587c:	2000      	movs	r0, #0
   2587e:	f001 fba8 	bl	26fd2 <dk_set_led_on>
			}
   25882:	4630      	mov	r0, r6
   25884:	f7ff ffdc 	bl	25840 <k_msleep.isra.0>
		}
   25888:	2000      	movs	r0, #0
   2588a:	f001 fba5 	bl	26fd8 <dk_set_led_off>
		break;
   2588e:	4638      	mov	r0, r7
   25890:	f7ff ffd6 	bl	25840 <k_msleep.isra.0>
				k_msleep(on_sleep_ms);
   25894:	3401      	adds	r4, #1
   25896:	42ac      	cmp	r4, r5
   25898:	d1f0      	bne.n	2587c <blink_leds+0x16>
 * Play tone
   2589a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				k_msleep(off_sleep_ms);
   2589c:	2001      	movs	r0, #1
   2589e:	f001 fb98 	bl	26fd2 <dk_set_led_on>
			}
   258a2:	4630      	mov	r0, r6
   258a4:	f7ff ffcc 	bl	25840 <k_msleep.isra.0>
		break;
   258a8:	2001      	movs	r0, #1
   258aa:	f001 fb95 	bl	26fd8 <dk_set_led_off>
		}
   258ae:	4638      	mov	r0, r7
   258b0:	f7ff ffc6 	bl	25840 <k_msleep.isra.0>
				k_msleep(on_sleep_ms);
   258b4:	3401      	adds	r4, #1
   258b6:	42ac      	cmp	r4, r5
   258b8:	d1f0      	bne.n	2589c <blink_leds+0x36>
   258ba:	e7ee      	b.n	2589a <blink_leds+0x34>
		{	
   258bc:	2400      	movs	r4, #0
   258be:	e7fa      	b.n	258b6 <blink_leds+0x50>
				k_msleep(off_sleep_ms);
   258c0:	2002      	movs	r0, #2
   258c2:	f001 fb86 	bl	26fd2 <dk_set_led_on>
			}
   258c6:	4630      	mov	r0, r6
   258c8:	f7ff ffba 	bl	25840 <k_msleep.isra.0>
		}
   258cc:	2002      	movs	r0, #2
   258ce:	f001 fb83 	bl	26fd8 <dk_set_led_off>
		break;
   258d2:	4638      	mov	r0, r7
   258d4:	f7ff ffb4 	bl	25840 <k_msleep.isra.0>
				k_msleep(on_sleep_ms);
   258d8:	3401      	adds	r4, #1
   258da:	42ac      	cmp	r4, r5
   258dc:	d1f0      	bne.n	258c0 <blink_leds+0x5a>
   258de:	e7dc      	b.n	2589a <blink_leds+0x34>
		{	
   258e0:	2400      	movs	r4, #0
   258e2:	e7fa      	b.n	258da <blink_leds+0x74>

000258e4 <cbpprintf_external>:
{
   258e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   258e8:	4606      	mov	r6, r0
   258ea:	460d      	mov	r5, r1
   258ec:	4617      	mov	r7, r2
	if (buf == NULL) {
   258ee:	4698      	mov	r8, r3
   258f0:	b32b      	cbz	r3, 2593e <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   258f2:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   258f6:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   258fa:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   258fe:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   25900:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   25902:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   25906:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2590a:	441c      	add	r4, r3
   2590c:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2590e:	45ca      	cmp	sl, r9
   25910:	d309      	bcc.n	25926 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   25912:	4639      	mov	r1, r7
   25914:	4630      	mov	r0, r6
   25916:	46ac      	mov	ip, r5
   25918:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2591c:	f108 0308 	add.w	r3, r8, #8
}
   25920:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   25924:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   25926:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   2592a:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   2592e:	4620      	mov	r0, r4
		*ps = s;
   25930:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   25934:	f7f3 fb5a 	bl	18fec <strlen>
   25938:	3001      	adds	r0, #1
   2593a:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2593c:	e7e7      	b.n	2590e <cbpprintf_external+0x2a>
}
   2593e:	f06f 0015 	mvn.w	r0, #21
   25942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025946 <is_ptr>:
{
   25946:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   25948:	2500      	movs	r5, #0
{
   2594a:	4602      	mov	r2, r0
	bool mod = false;
   2594c:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   2594e:	4614      	mov	r4, r2
   25950:	f814 3b01 	ldrb.w	r3, [r4], #1
   25954:	b90b      	cbnz	r3, 2595a <is_ptr+0x14>
					return false;
   25956:	4618      	mov	r0, r3
   25958:	e009      	b.n	2596e <is_ptr+0x28>
		if (mod) {
   2595a:	b198      	cbz	r0, 25984 <is_ptr+0x3e>
			if (cnt == n) {
   2595c:	428d      	cmp	r5, r1
   2595e:	d107      	bne.n	25970 <is_ptr+0x2a>
				if (c == 'p') {
   25960:	2b70      	cmp	r3, #112	; 0x70
   25962:	d004      	beq.n	2596e <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   25964:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   25968:	2a3a      	cmp	r2, #58	; 0x3a
   2596a:	d80b      	bhi.n	25984 <is_ptr+0x3e>
					return false;
   2596c:	2000      	movs	r0, #0
}
   2596e:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   25970:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   25974:	2e3a      	cmp	r6, #58	; 0x3a
   25976:	d805      	bhi.n	25984 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   25978:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   2597a:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2597c:	1c94      	adds	r4, r2, #2
   2597e:	2b00      	cmp	r3, #0
   25980:	d0e9      	beq.n	25956 <is_ptr+0x10>
   25982:	2000      	movs	r0, #0
		if (c == '%') {
   25984:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   25986:	4622      	mov	r2, r4
			mod = !mod;
   25988:	bf08      	it	eq
   2598a:	f080 0001 	eoreq.w	r0, r0, #1
   2598e:	e7de      	b.n	2594e <is_ptr+0x8>

00025990 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   25990:	b40c      	push	{r2, r3}
   25992:	4603      	mov	r3, r0
   25994:	b507      	push	{r0, r1, r2, lr}
   25996:	4608      	mov	r0, r1
				       unsigned long request, ...)
{
	va_list args;
	int res;

	va_start(args, request);
   25998:	aa05      	add	r2, sp, #20
	res = vtable->ioctl(obj, request, args);
   2599a:	f240 1105 	movw	r1, #261	; 0x105
   2599e:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   259a0:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   259a2:	4798      	blx	r3
	va_end(args);

	return res;
}
   259a4:	b003      	add	sp, #12
   259a6:	f85d eb04 	ldr.w	lr, [sp], #4
   259aa:	b002      	add	sp, #8
   259ac:	4770      	bx	lr

000259ae <arch_printk_char_out>:
}
   259ae:	2000      	movs	r0, #0
   259b0:	4770      	bx	lr

000259b2 <str_out>:
{
   259b2:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   259b4:	688a      	ldr	r2, [r1, #8]
   259b6:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   259b8:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   259ba:	b114      	cbz	r4, 259c2 <str_out+0x10>
   259bc:	684b      	ldr	r3, [r1, #4]
   259be:	4293      	cmp	r3, r2
   259c0:	dc01      	bgt.n	259c6 <str_out+0x14>
		ctx->count++;
   259c2:	608d      	str	r5, [r1, #8]
}
   259c4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   259c6:	3b01      	subs	r3, #1
   259c8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   259ca:	bf08      	it	eq
   259cc:	2200      	moveq	r2, #0
   259ce:	608d      	str	r5, [r1, #8]
   259d0:	bf0c      	ite	eq
   259d2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   259d4:	54a0      	strbne	r0, [r4, r2]
   259d6:	e7f5      	b.n	259c4 <str_out+0x12>

000259d8 <printk>:
{
   259d8:	b40f      	push	{r0, r1, r2, r3}
   259da:	b507      	push	{r0, r1, r2, lr}
   259dc:	a904      	add	r1, sp, #16
   259de:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   259e2:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   259e4:	f000 fd0b 	bl	263fe <z_log_vprintk>
}
   259e8:	b003      	add	sp, #12
   259ea:	f85d eb04 	ldr.w	lr, [sp], #4
   259ee:	b004      	add	sp, #16
   259f0:	4770      	bx	lr

000259f2 <snprintk>:
{
   259f2:	b40c      	push	{r2, r3}
   259f4:	b507      	push	{r0, r1, r2, lr}
   259f6:	ab04      	add	r3, sp, #16
   259f8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   259fc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   259fe:	f7f4 f9af 	bl	19d60 <vsnprintk>
}
   25a02:	b003      	add	sp, #12
   25a04:	f85d eb04 	ldr.w	lr, [sp], #4
   25a08:	b002      	add	sp, #8
   25a0a:	4770      	bx	lr

00025a0c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   25a0c:	4604      	mov	r4, r0
   25a0e:	b508      	push	{r3, lr}
   25a10:	4608      	mov	r0, r1
   25a12:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   25a14:	461a      	mov	r2, r3
   25a16:	47a0      	blx	r4
	return z_impl_z_current_get();
   25a18:	f7fe ff70 	bl	248fc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   25a1c:	f7f6 fb02 	bl	1c024 <z_impl_k_thread_abort>

00025a20 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   25a20:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   25a24:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   25a26:	0840      	lsrs	r0, r0, #1
   25a28:	4770      	bx	lr

00025a2a <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   25a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25a2c:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   25a2e:	f7ff fff7 	bl	25a20 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   25a32:	fab0 f080 	clz	r0, r0
   25a36:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   25a3a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   25a3e:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   25a42:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   25a44:	1d17      	adds	r7, r2, #4
{
   25a46:	460c      	mov	r4, r1
   25a48:	3206      	adds	r2, #6
   25a4a:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   25a4c:	b956      	cbnz	r6, 25a64 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   25a4e:	2101      	movs	r1, #1
   25a50:	fa01 f000 	lsl.w	r0, r1, r0
   25a54:	68d9      	ldr	r1, [r3, #12]
   25a56:	4301      	orrs	r1, r0
   25a58:	60d9      	str	r1, [r3, #12]
		b->next = c;
   25a5a:	f8cc 4010 	str.w	r4, [ip, #16]
   25a5e:	53dd      	strh	r5, [r3, r7]
   25a60:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   25a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   25a64:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   25a66:	3104      	adds	r1, #4
   25a68:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   25a6a:	53d8      	strh	r0, [r3, r7]
   25a6c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   25a70:	529e      	strh	r6, [r3, r2]
   25a72:	80c5      	strh	r5, [r0, #6]
   25a74:	525d      	strh	r5, [r3, r1]
   25a76:	e7f4      	b.n	25a62 <free_list_add+0x38>

00025a78 <free_list_remove_bidx>:
{
   25a78:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   25a7a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   25a7e:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   25a80:	4299      	cmp	r1, r3
   25a82:	f102 0104 	add.w	r1, r2, #4
   25a86:	d10a      	bne.n	25a9e <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   25a88:	2301      	movs	r3, #1
   25a8a:	fa03 f202 	lsl.w	r2, r3, r2
   25a8e:	68c3      	ldr	r3, [r0, #12]
   25a90:	ea23 0302 	bic.w	r3, r3, r2
   25a94:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   25a96:	2300      	movs	r3, #0
   25a98:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   25a9c:	bd10      	pop	{r4, pc}
   25a9e:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   25aa0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   25aa4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   25aa8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   25aac:	80cb      	strh	r3, [r1, #6]
   25aae:	8082      	strh	r2, [r0, #4]
}
   25ab0:	e7f4      	b.n	25a9c <free_list_remove_bidx+0x24>

00025ab2 <free_list_remove>:
{
   25ab2:	b508      	push	{r3, lr}
   25ab4:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   25ab6:	f7ff ffb3 	bl	25a20 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   25aba:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   25abe:	4618      	mov	r0, r3
}
   25ac0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   25ac4:	f1c2 021f 	rsb	r2, r2, #31
   25ac8:	f7ff bfd6 	b.w	25a78 <free_list_remove_bidx>

00025acc <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   25acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25ad0:	fab1 f581 	clz	r5, r1
   25ad4:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   25ad8:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   25adc:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   25ae0:	4603      	mov	r3, r0
   25ae2:	460e      	mov	r6, r1
	if (b->next) {
   25ae4:	b1c2      	cbz	r2, 25b18 <alloc_chunk+0x4c>
   25ae6:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   25ae8:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   25aec:	4618      	mov	r0, r3
   25aee:	4621      	mov	r1, r4
   25af0:	f7ff ff96 	bl	25a20 <chunk_size>
   25af4:	42b0      	cmp	r0, r6
   25af6:	d306      	bcc.n	25b06 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   25af8:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   25afa:	4618      	mov	r0, r3
   25afc:	f7ff ffbc 	bl	25a78 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   25b00:	4620      	mov	r0, r4
   25b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   25b06:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   25b0a:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   25b0c:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   25b0e:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   25b12:	d001      	beq.n	25b18 <alloc_chunk+0x4c>
   25b14:	4282      	cmp	r2, r0
   25b16:	d1e7      	bne.n	25ae8 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   25b18:	f04f 34ff 	mov.w	r4, #4294967295
   25b1c:	f1c5 0220 	rsb	r2, r5, #32
   25b20:	4094      	lsls	r4, r2
   25b22:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   25b24:	4014      	ands	r4, r2
   25b26:	d0eb      	beq.n	25b00 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   25b28:	fa94 f2a4 	rbit	r2, r4
   25b2c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   25b30:	1d11      	adds	r1, r2, #4
   25b32:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   25b36:	4621      	mov	r1, r4
   25b38:	e7df      	b.n	25afa <alloc_chunk+0x2e>

00025b3a <merge_chunks>:
{
   25b3a:	b538      	push	{r3, r4, r5, lr}
   25b3c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   25b3e:	f7ff ff6f 	bl	25a20 <chunk_size>
{
   25b42:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   25b44:	4604      	mov	r4, r0
   25b46:	4611      	mov	r1, r2
   25b48:	4618      	mov	r0, r3
   25b4a:	f7ff ff69 	bl	25a20 <chunk_size>
   25b4e:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25b50:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   25b52:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   25b56:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   25b58:	4618      	mov	r0, r3
   25b5a:	f7ff ff61 	bl	25a20 <chunk_size>
	void *cmem = &buf[c];
   25b5e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   25b60:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   25b64:	bd38      	pop	{r3, r4, r5, pc}

00025b66 <split_chunks>:
{
   25b66:	b538      	push	{r3, r4, r5, lr}
   25b68:	460c      	mov	r4, r1
   25b6a:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   25b6c:	f7ff ff58 	bl	25a20 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   25b70:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   25b72:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   25b74:	4405      	add	r5, r0
   25b76:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25b7a:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   25b7c:	8060      	strh	r0, [r4, #2]
   25b7e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25b82:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   25b84:	8044      	strh	r4, [r0, #2]
   25b86:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   25b8a:	4618      	mov	r0, r3
   25b8c:	4611      	mov	r1, r2
   25b8e:	f7ff ff47 	bl	25a20 <chunk_size>
	void *cmem = &buf[c];
   25b92:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   25b94:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   25b98:	bd38      	pop	{r3, r4, r5, pc}

00025b9a <free_chunk>:
{
   25b9a:	b538      	push	{r3, r4, r5, lr}
   25b9c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   25b9e:	f7ff ff3f 	bl	25a20 <chunk_size>
   25ba2:	460c      	mov	r4, r1
   25ba4:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   25ba6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25baa:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   25bac:	07da      	lsls	r2, r3, #31
   25bae:	d40a      	bmi.n	25bc6 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   25bb0:	4628      	mov	r0, r5
   25bb2:	f7ff ff7e 	bl	25ab2 <free_list_remove>
	return c + chunk_size(h, c);
   25bb6:	4621      	mov	r1, r4
   25bb8:	4628      	mov	r0, r5
   25bba:	f7ff ff31 	bl	25a20 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   25bbe:	1822      	adds	r2, r4, r0
   25bc0:	4628      	mov	r0, r5
   25bc2:	f7ff ffba 	bl	25b3a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   25bc6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25bca:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   25bcc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25bd0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   25bd2:	07db      	lsls	r3, r3, #31
   25bd4:	d40c      	bmi.n	25bf0 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   25bd6:	4628      	mov	r0, r5
   25bd8:	f7ff ff6b 	bl	25ab2 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   25bdc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   25be0:	4622      	mov	r2, r4
   25be2:	1a61      	subs	r1, r4, r1
   25be4:	4628      	mov	r0, r5
   25be6:	f7ff ffa8 	bl	25b3a <merge_chunks>
   25bea:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25bee:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   25bf0:	4621      	mov	r1, r4
   25bf2:	4628      	mov	r0, r5
}
   25bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   25bf8:	f7ff bf17 	b.w	25a2a <free_list_add>

00025bfc <sys_heap_free>:
	if (mem == NULL) {
   25bfc:	b161      	cbz	r1, 25c18 <sys_heap_free+0x1c>
   25bfe:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25c00:	3904      	subs	r1, #4
   25c02:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   25c04:	f021 0307 	bic.w	r3, r1, #7
   25c08:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   25c0a:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   25c0c:	08c9      	lsrs	r1, r1, #3
   25c0e:	f022 0201 	bic.w	r2, r2, #1
   25c12:	805a      	strh	r2, [r3, #2]
   25c14:	f7ff bfc1 	b.w	25b9a <free_chunk>
}
   25c18:	4770      	bx	lr

00025c1a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   25c1a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   25c1c:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   25c1e:	b909      	cbnz	r1, 25c24 <sys_heap_alloc+0xa>
		return NULL;
   25c20:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   25c22:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   25c24:	68ab      	ldr	r3, [r5, #8]
   25c26:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   25c2a:	d9f9      	bls.n	25c20 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25c2c:	310b      	adds	r1, #11
   25c2e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   25c30:	4621      	mov	r1, r4
   25c32:	4628      	mov	r0, r5
   25c34:	f7ff ff4a 	bl	25acc <alloc_chunk>
	if (c == 0U) {
   25c38:	4606      	mov	r6, r0
   25c3a:	2800      	cmp	r0, #0
   25c3c:	d0f0      	beq.n	25c20 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   25c3e:	4601      	mov	r1, r0
   25c40:	4628      	mov	r0, r5
   25c42:	f7ff feed 	bl	25a20 <chunk_size>
   25c46:	42a0      	cmp	r0, r4
   25c48:	d907      	bls.n	25c5a <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   25c4a:	4628      	mov	r0, r5
   25c4c:	1932      	adds	r2, r6, r4
   25c4e:	f7ff ff8a 	bl	25b66 <split_chunks>
		free_list_add(h, c + chunk_sz);
   25c52:	4611      	mov	r1, r2
   25c54:	4628      	mov	r0, r5
   25c56:	f7ff fee8 	bl	25a2a <free_list_add>
	void *cmem = &buf[c];
   25c5a:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   25c5e:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25c60:	8853      	ldrh	r3, [r2, #2]
   25c62:	3004      	adds	r0, #4
   25c64:	f043 0301 	orr.w	r3, r3, #1
   25c68:	8053      	strh	r3, [r2, #2]
	return mem;
   25c6a:	e7da      	b.n	25c22 <sys_heap_alloc+0x8>

00025c6c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   25c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25c70:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   25c74:	ea19 0901 	ands.w	r9, r9, r1
{
   25c78:	460f      	mov	r7, r1
   25c7a:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   25c7c:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   25c7e:	d00c      	beq.n	25c9a <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   25c80:	424b      	negs	r3, r1
   25c82:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   25c84:	2b04      	cmp	r3, #4
   25c86:	461a      	mov	r2, r3
   25c88:	464f      	mov	r7, r9
   25c8a:	bf28      	it	cs
   25c8c:	2204      	movcs	r2, #4
	rew = align & -align;
   25c8e:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   25c90:	b964      	cbnz	r4, 25cac <sys_heap_aligned_alloc+0x40>
		return NULL;
   25c92:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   25c94:	4628      	mov	r0, r5
   25c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   25c9a:	2904      	cmp	r1, #4
   25c9c:	d804      	bhi.n	25ca8 <sys_heap_aligned_alloc+0x3c>
}
   25c9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   25ca2:	4611      	mov	r1, r2
   25ca4:	f7ff bfb9 	b.w	25c1a <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   25ca8:	2204      	movs	r2, #4
   25caa:	e7f1      	b.n	25c90 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   25cac:	68b3      	ldr	r3, [r6, #8]
   25cae:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   25cb2:	d9ee      	bls.n	25c92 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25cb4:	f104 010b 	add.w	r1, r4, #11
   25cb8:	4439      	add	r1, r7
   25cba:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   25cbc:	4630      	mov	r0, r6
   25cbe:	08c9      	lsrs	r1, r1, #3
   25cc0:	f7ff ff04 	bl	25acc <alloc_chunk>
	if (c0 == 0) {
   25cc4:	4680      	mov	r8, r0
   25cc6:	2800      	cmp	r0, #0
   25cc8:	d0e3      	beq.n	25c92 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   25cca:	f109 0504 	add.w	r5, r9, #4
   25cce:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   25cd2:	1e7b      	subs	r3, r7, #1
   25cd4:	4435      	add	r5, r6
   25cd6:	441d      	add	r5, r3
   25cd8:	427f      	negs	r7, r7
   25cda:	403d      	ands	r5, r7
   25cdc:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25ce0:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25ce2:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25ce4:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25ce6:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25ce8:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   25cec:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   25cee:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25cf2:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   25cf6:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   25cfa:	d208      	bcs.n	25d0e <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   25cfc:	4601      	mov	r1, r0
   25cfe:	463a      	mov	r2, r7
   25d00:	4630      	mov	r0, r6
   25d02:	f7ff ff30 	bl	25b66 <split_chunks>
		free_list_add(h, c0);
   25d06:	4641      	mov	r1, r8
   25d08:	4630      	mov	r0, r6
   25d0a:	f7ff fe8e 	bl	25a2a <free_list_add>
	return c + chunk_size(h, c);
   25d0e:	4639      	mov	r1, r7
   25d10:	4630      	mov	r0, r6
   25d12:	f7ff fe85 	bl	25a20 <chunk_size>
   25d16:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   25d18:	4284      	cmp	r4, r0
   25d1a:	d207      	bcs.n	25d2c <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   25d1c:	4630      	mov	r0, r6
   25d1e:	4622      	mov	r2, r4
   25d20:	f7ff ff21 	bl	25b66 <split_chunks>
		free_list_add(h, c_end);
   25d24:	4621      	mov	r1, r4
   25d26:	4630      	mov	r0, r6
   25d28:	f7ff fe7f 	bl	25a2a <free_list_add>
	void *cmem = &buf[c];
   25d2c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25d30:	8873      	ldrh	r3, [r6, #2]
   25d32:	f043 0301 	orr.w	r3, r3, #1
   25d36:	8073      	strh	r3, [r6, #2]
   25d38:	e7ac      	b.n	25c94 <sys_heap_aligned_alloc+0x28>

00025d3a <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   25d3a:	b4f0      	push	{r4, r5, r6, r7}
   25d3c:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   25d3e:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   25d40:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   25d42:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   25d44:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   25d48:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   25d4c:	1a0e      	subs	r6, r1, r0
   25d4e:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   25d50:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   25d54:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   25d56:	2700      	movs	r7, #0
   25d58:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   25d5a:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   25d5e:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   25d60:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25d62:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   25d64:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   25d68:	f1c2 0220 	rsb	r2, r2, #32
   25d6c:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   25d6e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   25d72:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   25d76:	4294      	cmp	r4, r2
   25d78:	d1fb      	bne.n	25d72 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25d7a:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25d7c:	f042 0201 	orr.w	r2, r2, #1
   25d80:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   25d82:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25d84:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   25d86:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   25d8a:	8007      	strh	r7, [r0, #0]
   25d8c:	8065      	strh	r5, [r4, #2]
   25d8e:	1984      	adds	r4, r0, r6
   25d90:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   25d94:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   25d98:	8067      	strh	r7, [r4, #2]
   25d9a:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25d9c:	885a      	ldrh	r2, [r3, #2]
   25d9e:	f042 0201 	orr.w	r2, r2, #1
   25da2:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   25da4:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   25da6:	f7ff be40 	b.w	25a2a <free_list_add>

00025daa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25daa:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   25dac:	f013 0307 	ands.w	r3, r3, #7
   25db0:	d105      	bne.n	25dbe <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   25db2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   25db4:	2b00      	cmp	r3, #0
   25db6:	bf0c      	ite	eq
   25db8:	2000      	moveq	r0, #0
   25dba:	2003      	movne	r0, #3
   25dbc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   25dbe:	2b02      	cmp	r3, #2
   25dc0:	d105      	bne.n	25dce <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   25dc2:	8b40      	ldrh	r0, [r0, #26]
   25dc4:	fab0 f080 	clz	r0, r0
   25dc8:	0940      	lsrs	r0, r0, #5
   25dca:	0080      	lsls	r0, r0, #2
   25dcc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   25dce:	2b01      	cmp	r3, #1
   25dd0:	d105      	bne.n	25dde <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   25dd2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   25dd4:	2b00      	cmp	r3, #0
   25dd6:	bf0c      	ite	eq
   25dd8:	2000      	moveq	r0, #0
   25dda:	2005      	movne	r0, #5
   25ddc:	4770      	bx	lr
	int evt = EVT_NOP;
   25dde:	2000      	movs	r0, #0
}
   25de0:	4770      	bx	lr

00025de2 <validate_args>:
{
   25de2:	b510      	push	{r4, lr}
   25de4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   25de6:	b100      	cbz	r0, 25dea <validate_args+0x8>
   25de8:	b911      	cbnz	r1, 25df0 <validate_args+0xe>
		return -EINVAL;
   25dea:	f06f 0015 	mvn.w	r0, #21
}
   25dee:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   25df0:	1d08      	adds	r0, r1, #4
   25df2:	f000 f895 	bl	25f20 <sys_notify_validate>
	if ((rv == 0)
   25df6:	2800      	cmp	r0, #0
   25df8:	d1f9      	bne.n	25dee <validate_args+0xc>
	    && ((cli->notify.flags
   25dfa:	68a3      	ldr	r3, [r4, #8]
   25dfc:	2b03      	cmp	r3, #3
   25dfe:	d9f6      	bls.n	25dee <validate_args+0xc>
   25e00:	e7f3      	b.n	25dea <validate_args+0x8>

00025e02 <notify_one>:
{
   25e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25e06:	460d      	mov	r5, r1
   25e08:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25e0a:	4619      	mov	r1, r3
   25e0c:	1d28      	adds	r0, r5, #4
{
   25e0e:	4690      	mov	r8, r2
   25e10:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25e12:	f000 f899 	bl	25f48 <sys_notify_finalize>
	if (cb) {
   25e16:	4604      	mov	r4, r0
   25e18:	b138      	cbz	r0, 25e2a <notify_one+0x28>
		cb(mgr, cli, state, res);
   25e1a:	4633      	mov	r3, r6
   25e1c:	4642      	mov	r2, r8
   25e1e:	4629      	mov	r1, r5
   25e20:	4638      	mov	r0, r7
   25e22:	46a4      	mov	ip, r4
}
   25e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   25e28:	4760      	bx	ip
}
   25e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025e2e <transition_complete>:
{
   25e2e:	b410      	push	{r4}
	__asm__ volatile(
   25e30:	f04f 0420 	mov.w	r4, #32
   25e34:	f3ef 8211 	mrs	r2, BASEPRI
   25e38:	f384 8812 	msr	BASEPRI_MAX, r4
   25e3c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   25e40:	6141      	str	r1, [r0, #20]
}
   25e42:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   25e44:	2101      	movs	r1, #1
   25e46:	f7f3 bfa1 	b.w	19d8c <process_event>

00025e4a <onoff_manager_init>:
{
   25e4a:	b538      	push	{r3, r4, r5, lr}
   25e4c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   25e4e:	4605      	mov	r5, r0
   25e50:	b158      	cbz	r0, 25e6a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   25e52:	b151      	cbz	r1, 25e6a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   25e54:	680b      	ldr	r3, [r1, #0]
   25e56:	b143      	cbz	r3, 25e6a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   25e58:	684b      	ldr	r3, [r1, #4]
   25e5a:	b133      	cbz	r3, 25e6a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   25e5c:	221c      	movs	r2, #28
   25e5e:	2100      	movs	r1, #0
   25e60:	f002 fd51 	bl	28906 <memset>
	return 0;
   25e64:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   25e66:	612c      	str	r4, [r5, #16]
}
   25e68:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25e6a:	f06f 0015 	mvn.w	r0, #21
   25e6e:	e7fb      	b.n	25e68 <onoff_manager_init+0x1e>

00025e70 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   25e70:	b570      	push	{r4, r5, r6, lr}
   25e72:	4605      	mov	r5, r0
   25e74:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   25e76:	f7ff ffb4 	bl	25de2 <validate_args>

	if (rv < 0) {
   25e7a:	1e04      	subs	r4, r0, #0
   25e7c:	db15      	blt.n	25eaa <onoff_request+0x3a>
   25e7e:	f04f 0320 	mov.w	r3, #32
   25e82:	f3ef 8211 	mrs	r2, BASEPRI
   25e86:	f383 8812 	msr	BASEPRI_MAX, r3
   25e8a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   25e8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   25e92:	8b6b      	ldrh	r3, [r5, #26]
   25e94:	8b2c      	ldrh	r4, [r5, #24]
   25e96:	428b      	cmp	r3, r1
   25e98:	f004 0407 	and.w	r4, r4, #7
   25e9c:	d107      	bne.n	25eae <onoff_request+0x3e>
	__asm__ volatile(
   25e9e:	f382 8811 	msr	BASEPRI, r2
   25ea2:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   25ea6:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   25eaa:	4620      	mov	r0, r4
   25eac:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   25eae:	2c02      	cmp	r4, #2
   25eb0:	d10c      	bne.n	25ecc <onoff_request+0x5c>
		mgr->refs += 1U;
   25eb2:	3301      	adds	r3, #1
   25eb4:	836b      	strh	r3, [r5, #26]
   25eb6:	f382 8811 	msr	BASEPRI, r2
   25eba:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   25ebe:	2300      	movs	r3, #0
   25ec0:	4622      	mov	r2, r4
   25ec2:	4631      	mov	r1, r6
   25ec4:	4628      	mov	r0, r5
   25ec6:	f7ff ff9c 	bl	25e02 <notify_one>
   25eca:	e7ee      	b.n	25eaa <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   25ecc:	2c06      	cmp	r4, #6
   25ece:	d814      	bhi.n	25efa <onoff_request+0x8a>
   25ed0:	e8df f004 	tbb	[pc, r4]
   25ed4:	13131304 	.word	0x13131304
   25ed8:	1a04      	.short	0x1a04
   25eda:	04          	.byte	0x04
   25edb:	00          	.byte	0x00
	parent->next = child;
   25edc:	2300      	movs	r3, #0
   25ede:	6033      	str	r3, [r6, #0]
	return list->tail;
   25ee0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   25ee2:	b93b      	cbnz	r3, 25ef4 <onoff_request+0x84>
	list->head = node;
   25ee4:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   25ee8:	b9ac      	cbnz	r4, 25f16 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   25eea:	2102      	movs	r1, #2
   25eec:	4628      	mov	r0, r5
   25eee:	f7f3 ff4d 	bl	19d8c <process_event>
   25ef2:	e7da      	b.n	25eaa <onoff_request+0x3a>
	parent->next = child;
   25ef4:	601e      	str	r6, [r3, #0]
	list->tail = node;
   25ef6:	606e      	str	r6, [r5, #4]
}
   25ef8:	e7f6      	b.n	25ee8 <onoff_request+0x78>
   25efa:	f382 8811 	msr	BASEPRI, r2
   25efe:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   25f02:	f06f 0404 	mvn.w	r4, #4
   25f06:	e7d0      	b.n	25eaa <onoff_request+0x3a>
   25f08:	f382 8811 	msr	BASEPRI, r2
   25f0c:	f3bf 8f6f 	isb	sy
   25f10:	f06f 0485 	mvn.w	r4, #133	; 0x85
   25f14:	e7c9      	b.n	25eaa <onoff_request+0x3a>
   25f16:	f382 8811 	msr	BASEPRI, r2
   25f1a:	f3bf 8f6f 	isb	sy
		if (notify) {
   25f1e:	e7c4      	b.n	25eaa <onoff_request+0x3a>

00025f20 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   25f20:	4603      	mov	r3, r0
   25f22:	b140      	cbz	r0, 25f36 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25f24:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   25f26:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   25f2a:	2a02      	cmp	r2, #2
   25f2c:	d006      	beq.n	25f3c <sys_notify_validate+0x1c>
   25f2e:	2a03      	cmp	r2, #3
   25f30:	d004      	beq.n	25f3c <sys_notify_validate+0x1c>
   25f32:	2a01      	cmp	r2, #1
   25f34:	d005      	beq.n	25f42 <sys_notify_validate+0x22>
   25f36:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   25f3a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   25f3c:	681a      	ldr	r2, [r3, #0]
   25f3e:	2a00      	cmp	r2, #0
   25f40:	d0f9      	beq.n	25f36 <sys_notify_validate+0x16>
		notify->result = 0;
   25f42:	2000      	movs	r0, #0
   25f44:	6098      	str	r0, [r3, #8]
   25f46:	4770      	bx	lr

00025f48 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   25f48:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25f4a:	6842      	ldr	r2, [r0, #4]
   25f4c:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   25f4e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   25f52:	2a02      	cmp	r2, #2
   25f54:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   25f58:	6081      	str	r1, [r0, #8]
	switch (method) {
   25f5a:	d007      	beq.n	25f6c <sys_notify_finalize+0x24>
   25f5c:	2a03      	cmp	r2, #3
   25f5e:	d002      	beq.n	25f66 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   25f60:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   25f62:	2000      	movs	r0, #0
   25f64:	e001      	b.n	25f6a <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   25f66:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   25f68:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   25f6a:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   25f6c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   25f6e:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   25f70:	2800      	cmp	r0, #0
   25f72:	d0f6      	beq.n	25f62 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   25f74:	f7fe ff4c 	bl	24e10 <z_impl_k_poll_signal_raise>
   25f78:	e7f3      	b.n	25f62 <sys_notify_finalize+0x1a>

00025f7a <outs>:
{
   25f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25f7e:	4607      	mov	r7, r0
   25f80:	4688      	mov	r8, r1
   25f82:	4615      	mov	r5, r2
   25f84:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   25f86:	4614      	mov	r4, r2
   25f88:	42b4      	cmp	r4, r6
   25f8a:	d305      	bcc.n	25f98 <outs+0x1e>
   25f8c:	b10e      	cbz	r6, 25f92 <outs+0x18>
	return (int)count;
   25f8e:	1b60      	subs	r0, r4, r5
   25f90:	e008      	b.n	25fa4 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   25f92:	7823      	ldrb	r3, [r4, #0]
   25f94:	2b00      	cmp	r3, #0
   25f96:	d0fa      	beq.n	25f8e <outs+0x14>
		int rc = out((int)*sp++, ctx);
   25f98:	4641      	mov	r1, r8
   25f9a:	f814 0b01 	ldrb.w	r0, [r4], #1
   25f9e:	47b8      	blx	r7
		if (rc < 0) {
   25fa0:	2800      	cmp	r0, #0
   25fa2:	daf1      	bge.n	25f88 <outs+0xe>
}
   25fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025fa8 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   25fa8:	68c3      	ldr	r3, [r0, #12]
   25faa:	6802      	ldr	r2, [r0, #0]
   25fac:	4293      	cmp	r3, r2
   25fae:	d904      	bls.n	25fba <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   25fb0:	3b01      	subs	r3, #1
   25fb2:	1a9a      	subs	r2, r3, r2

		return false;
   25fb4:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   25fb6:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   25fb8:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   25fba:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
   25fbc:	b913      	cbnz	r3, 25fc4 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   25fbe:	3801      	subs	r0, #1
   25fc0:	1a82      	subs	r2, r0, r2
		return false;
   25fc2:	e7f7      	b.n	25fb4 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   25fc4:	1a82      	subs	r2, r0, r2
	return true;
   25fc6:	2001      	movs	r0, #1
   25fc8:	e7f5      	b.n	25fb6 <free_space+0xe>

00025fca <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   25fca:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   25fcc:	a901      	add	r1, sp, #4
{
   25fce:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   25fd0:	f7ff ffea 	bl	25fa8 <free_space>
   25fd4:	b120      	cbz	r0, 25fe0 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   25fd6:	9b01      	ldr	r3, [sp, #4]
   25fd8:	68e2      	ldr	r2, [r4, #12]
   25fda:	3b01      	subs	r3, #1
   25fdc:	4413      	add	r3, r2
   25fde:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   25fe0:	6a20      	ldr	r0, [r4, #32]
   25fe2:	9b01      	ldr	r3, [sp, #4]
   25fe4:	1ac0      	subs	r0, r0, r3
}
   25fe6:	3801      	subs	r0, #1
   25fe8:	b002      	add	sp, #8
   25fea:	bd10      	pop	{r4, pc}

00025fec <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   25fec:	b510      	push	{r4, lr}
   25fee:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   25ff0:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   25ff2:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   25ff4:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   25ff6:	07d2      	lsls	r2, r2, #31
   25ff8:	d502      	bpl.n	26000 <idx_inc+0x14>
		return i & (buffer->size - 1);
   25ffa:	3b01      	subs	r3, #1
   25ffc:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   25ffe:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   26000:	4298      	cmp	r0, r3
   26002:	bf28      	it	cs
   26004:	1ac0      	subcs	r0, r0, r3
   26006:	e7fa      	b.n	25ffe <idx_inc+0x12>

00026008 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   26008:	b538      	push	{r3, r4, r5, lr}
   2600a:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2600c:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   2600e:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   26010:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   26012:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   26016:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2601a:	6801      	ldr	r1, [r0, #0]
   2601c:	462a      	mov	r2, r5
{
   2601e:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   26020:	f7ff ffe4 	bl	25fec <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   26024:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   26026:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   26028:	462a      	mov	r2, r5
   2602a:	4620      	mov	r0, r4
   2602c:	f7ff ffde 	bl	25fec <idx_inc>
   26030:	6060      	str	r0, [r4, #4]
}
   26032:	bd38      	pop	{r3, r4, r5, pc}

00026034 <max_utilization_update>:
{
   26034:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   26036:	6903      	ldr	r3, [r0, #16]
{
   26038:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2603a:	075b      	lsls	r3, r3, #29
   2603c:	d506      	bpl.n	2604c <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2603e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   26040:	f7ff ffc3 	bl	25fca <get_usage>
   26044:	4285      	cmp	r5, r0
   26046:	bf2c      	ite	cs
   26048:	6265      	strcs	r5, [r4, #36]	; 0x24
   2604a:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   2604c:	bd38      	pop	{r3, r4, r5, pc}

0002604e <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   2604e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26052:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   26054:	2300      	movs	r3, #0
   26056:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   26058:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   2605c:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   26060:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   26062:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   26066:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   26068:	f003 0303 	and.w	r3, r3, #3
   2606c:	2b02      	cmp	r3, #2
{
   2606e:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   26070:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   26074:	d103      	bne.n	2607e <drop_item_locked+0x30>
		return item->skip.len;
   26076:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   2607a:	08ad      	lsrs	r5, r5, #2
   2607c:	d12e      	bne.n	260dc <drop_item_locked+0x8e>
   2607e:	4630      	mov	r0, r6
   26080:	69a3      	ldr	r3, [r4, #24]
   26082:	4798      	blx	r3
   26084:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   26086:	f1b8 0f00 	cmp.w	r8, #0
   2608a:	d038      	beq.n	260fe <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   2608c:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   26090:	079b      	lsls	r3, r3, #30
   26092:	d531      	bpl.n	260f8 <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   26094:	4620      	mov	r0, r4
   26096:	f10b 0101 	add.w	r1, fp, #1
   2609a:	f7ff ffb5 	bl	26008 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2609e:	6861      	ldr	r1, [r4, #4]
   260a0:	462a      	mov	r2, r5
   260a2:	4620      	mov	r0, r4
   260a4:	f7ff ffa2 	bl	25fec <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   260a8:	6821      	ldr	r1, [r4, #0]
   260aa:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   260ac:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   260ae:	4620      	mov	r0, r4
   260b0:	f7ff ff9c 	bl	25fec <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   260b4:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   260b6:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   260b8:	68e1      	ldr	r1, [r4, #12]
   260ba:	4620      	mov	r0, r4
   260bc:	f7ff ff96 	bl	25fec <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   260c0:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   260c2:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   260c6:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   260ca:	f002 0203 	and.w	r2, r2, #3
   260ce:	2a02      	cmp	r2, #2
   260d0:	d10e      	bne.n	260f0 <drop_item_locked+0xa2>
		return item->skip.len;
   260d2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   260d6:	089b      	lsrs	r3, r3, #2
   260d8:	d00a      	beq.n	260f0 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   260da:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   260dc:	68e1      	ldr	r1, [r4, #12]
   260de:	462a      	mov	r2, r5
   260e0:	4620      	mov	r0, r4
   260e2:	f7ff ff83 	bl	25fec <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   260e6:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
   260ea:	4630      	mov	r0, r6
   260ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   260f0:	4630      	mov	r0, r6
   260f2:	69a3      	ldr	r3, [r4, #24]
   260f4:	4798      	blx	r3
   260f6:	4405      	add	r5, r0
			*user_packet = true;
   260f8:	2301      	movs	r3, #1
   260fa:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   260fc:	e7ee      	b.n	260dc <drop_item_locked+0x8e>
		item = NULL;
   260fe:	4646      	mov	r6, r8
	return item;
   26100:	e7f3      	b.n	260ea <drop_item_locked+0x9c>

00026102 <mpsc_pbuf_init>:
{
   26102:	b538      	push	{r3, r4, r5, lr}
   26104:	460d      	mov	r5, r1
   26106:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   26108:	221c      	movs	r2, #28
   2610a:	2100      	movs	r1, #0
   2610c:	f002 fbfb 	bl	28906 <memset>
	buffer->max_usage = 0;
   26110:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
   26112:	68eb      	ldr	r3, [r5, #12]
   26114:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   26116:	68ab      	ldr	r3, [r5, #8]
   26118:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   2611a:	682b      	ldr	r3, [r5, #0]
   2611c:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   2611e:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
   26120:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   26122:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
   26124:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   26126:	b123      	cbz	r3, 26132 <mpsc_pbuf_init+0x30>
   26128:	1e59      	subs	r1, r3, #1
   2612a:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   2612c:	bf08      	it	eq
   2612e:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   26132:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   26134:	2201      	movs	r2, #1
   26136:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2613a:	2100      	movs	r1, #0
}
   2613c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26140:	f002 b917 	b.w	28372 <z_impl_k_sem_init>

00026144 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   26144:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   26148:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   2614a:	6a03      	ldr	r3, [r0, #32]
{
   2614c:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
   2614e:	3b01      	subs	r3, #1
   26150:	428b      	cmp	r3, r1
{
   26152:	460e      	mov	r6, r1
   26154:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
   26156:	d351      	bcc.n	261fc <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
   26158:	2500      	movs	r5, #0
	__asm__ volatile(
   2615a:	f04f 0320 	mov.w	r3, #32
   2615e:	f3ef 8911 	mrs	r9, BASEPRI
   26162:	f383 8812 	msr	BASEPRI_MAX, r3
   26166:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
   2616a:	4620      	mov	r0, r4
   2616c:	a901      	add	r1, sp, #4
   2616e:	f7ff ff1b 	bl	25fa8 <free_space>

		if (free_wlen >= wlen) {
   26172:	f8dd a004 	ldr.w	sl, [sp, #4]
   26176:	45b2      	cmp	sl, r6
   26178:	d317      	bcc.n	261aa <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   2617a:	6822      	ldr	r2, [r4, #0]
			item =
   2617c:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   2617e:	4620      	mov	r0, r4
			item->hdr.valid = 0;
   26180:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
   26184:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.valid = 0;
   26188:	f021 0103 	bic.w	r1, r1, #3
   2618c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   26190:	6821      	ldr	r1, [r4, #0]
   26192:	4632      	mov	r2, r6
   26194:	f7ff ff2a 	bl	25fec <idx_inc>
   26198:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   2619a:	f389 8811 	msr	BASEPRI, r9
   2619e:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   261a2:	4628      	mov	r0, r5
   261a4:	b002      	add	sp, #8
   261a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
   261aa:	b150      	cbz	r0, 261c2 <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
   261ac:	4651      	mov	r1, sl
   261ae:	4620      	mov	r0, r4
   261b0:	f7ff ff2a 	bl	26008 <add_skip_item>
   261b4:	f389 8811 	msr	BASEPRI, r9
   261b8:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   261bc:	2d00      	cmp	r5, #0
   261be:	d0cb      	beq.n	26158 <mpsc_pbuf_alloc+0x14>
   261c0:	e033      	b.n	2622a <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   261c2:	ea57 0308 	orrs.w	r3, r7, r8
   261c6:	d020      	beq.n	2620a <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
   261c8:	f002 f833 	bl	28232 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   261cc:	b9e8      	cbnz	r0, 2620a <mpsc_pbuf_alloc+0xc6>
   261ce:	f389 8811 	msr	BASEPRI, r9
   261d2:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   261d6:	463a      	mov	r2, r7
   261d8:	4643      	mov	r3, r8
   261da:	f104 0028 	add.w	r0, r4, #40	; 0x28
   261de:	f7fd ff4f 	bl	24080 <z_impl_k_sem_take>
	__asm__ volatile(
   261e2:	f04f 0220 	mov.w	r2, #32
   261e6:	f3ef 8311 	mrs	r3, BASEPRI
   261ea:	f382 8812 	msr	BASEPRI_MAX, r2
   261ee:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   261f2:	b128      	cbz	r0, 26200 <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
   261f4:	f383 8811 	msr	BASEPRI, r3
   261f8:	f3bf 8f6f 	isb	sy
		return NULL;
   261fc:	2500      	movs	r5, #0
   261fe:	e7d0      	b.n	261a2 <mpsc_pbuf_alloc+0x5e>
   26200:	f383 8811 	msr	BASEPRI, r3
   26204:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   26208:	e7d8      	b.n	261bc <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   2620a:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   2620c:	4651      	mov	r1, sl
   2620e:	4620      	mov	r0, r4
   26210:	f10d 0303 	add.w	r3, sp, #3
   26214:	f3c2 0240 	ubfx	r2, r2, #1, #1
   26218:	f7ff ff19 	bl	2604e <drop_item_locked>
   2621c:	4605      	mov	r5, r0
   2621e:	f389 8811 	msr	BASEPRI, r9
   26222:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   26226:	2800      	cmp	r0, #0
   26228:	d0e8      	beq.n	261fc <mpsc_pbuf_alloc+0xb8>
   2622a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2622e:	2b00      	cmp	r3, #0
   26230:	d093      	beq.n	2615a <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
   26232:	6963      	ldr	r3, [r4, #20]
   26234:	2b00      	cmp	r3, #0
   26236:	d08f      	beq.n	26158 <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
   26238:	4629      	mov	r1, r5
   2623a:	4620      	mov	r0, r4
   2623c:	4798      	blx	r3
   2623e:	e78b      	b.n	26158 <mpsc_pbuf_alloc+0x14>

00026240 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   26240:	b570      	push	{r4, r5, r6, lr}
   26242:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   26244:	6983      	ldr	r3, [r0, #24]
   26246:	4608      	mov	r0, r1
{
   26248:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2624a:	4798      	blx	r3
   2624c:	4602      	mov	r2, r0
	__asm__ volatile(
   2624e:	f04f 0320 	mov.w	r3, #32
   26252:	f3ef 8611 	mrs	r6, BASEPRI
   26256:	f383 8812 	msr	BASEPRI_MAX, r3
   2625a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   2625e:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   26260:	4620      	mov	r0, r4
	item->hdr.valid = 1;
   26262:	f043 0301 	orr.w	r3, r3, #1
   26266:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   26268:	6861      	ldr	r1, [r4, #4]
   2626a:	f7ff febf 	bl	25fec <idx_inc>
   2626e:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   26270:	4620      	mov	r0, r4
   26272:	f7ff fedf 	bl	26034 <max_utilization_update>
	__asm__ volatile(
   26276:	f386 8811 	msr	BASEPRI, r6
   2627a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   2627e:	bd70      	pop	{r4, r5, r6, pc}

00026280 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   26280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26282:	4604      	mov	r4, r0
	__asm__ volatile(
   26284:	f04f 0320 	mov.w	r3, #32
   26288:	f3ef 8611 	mrs	r6, BASEPRI
   2628c:	f383 8812 	msr	BASEPRI_MAX, r3
   26290:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   26294:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   26298:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   2629a:	bf88      	it	hi
   2629c:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   2629e:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
   262a0:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   262a2:	b132      	cbz	r2, 262b2 <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
   262a4:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
   262a8:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   262ac:	f012 0003 	ands.w	r0, r2, #3
   262b0:	d105      	bne.n	262be <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
   262b2:	f386 8811 	msr	BASEPRI, r6
   262b6:	f3bf 8f6f 	isb	sy
			item = NULL;
   262ba:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   262bc:	e02e      	b.n	2631c <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
   262be:	2802      	cmp	r0, #2
   262c0:	d103      	bne.n	262ca <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
   262c2:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   262c6:	08ad      	lsrs	r5, r5, #2
   262c8:	d105      	bne.n	262d6 <mpsc_pbuf_claim+0x56>
   262ca:	07d0      	lsls	r0, r2, #31
   262cc:	d414      	bmi.n	262f8 <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
   262ce:	4638      	mov	r0, r7
   262d0:	69a3      	ldr	r3, [r4, #24]
   262d2:	4798      	blx	r3
   262d4:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   262d6:	68a1      	ldr	r1, [r4, #8]
   262d8:	462a      	mov	r2, r5
   262da:	4620      	mov	r0, r4
   262dc:	f7ff fe86 	bl	25fec <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   262e0:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   262e2:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   262e4:	462a      	mov	r2, r5
   262e6:	4620      	mov	r0, r4
   262e8:	f7ff fe80 	bl	25fec <idx_inc>
				buffer->rd_idx =
   262ec:	60e0      	str	r0, [r4, #12]
   262ee:	f386 8811 	msr	BASEPRI, r6
   262f2:	f3bf 8f6f 	isb	sy
	} while (cont);
   262f6:	e7c5      	b.n	26284 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   262f8:	f042 0202 	orr.w	r2, r2, #2
   262fc:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   26300:	69a3      	ldr	r3, [r4, #24]
   26302:	4638      	mov	r0, r7
   26304:	68a5      	ldr	r5, [r4, #8]
   26306:	4798      	blx	r3
   26308:	4629      	mov	r1, r5
   2630a:	4602      	mov	r2, r0
   2630c:	4620      	mov	r0, r4
   2630e:	f7ff fe6d 	bl	25fec <idx_inc>
				buffer->tmp_rd_idx =
   26312:	60a0      	str	r0, [r4, #8]
   26314:	f386 8811 	msr	BASEPRI, r6
   26318:	f3bf 8f6f 	isb	sy
}
   2631c:	4638      	mov	r0, r7
   2631e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026320 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   26320:	b570      	push	{r4, r5, r6, lr}
   26322:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   26324:	6983      	ldr	r3, [r0, #24]
   26326:	4608      	mov	r0, r1
{
   26328:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2632a:	4798      	blx	r3
   2632c:	4602      	mov	r2, r0
	__asm__ volatile(
   2632e:	f04f 0320 	mov.w	r3, #32
   26332:	f3ef 8611 	mrs	r6, BASEPRI
   26336:	f383 8812 	msr	BASEPRI_MAX, r3
   2633a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   2633e:	782b      	ldrb	r3, [r5, #0]
   26340:	f36f 0300 	bfc	r3, #0, #1
   26344:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   26346:	6923      	ldr	r3, [r4, #16]
   26348:	079b      	lsls	r3, r3, #30
   2634a:	d505      	bpl.n	26358 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   2634c:	68e1      	ldr	r1, [r4, #12]
   2634e:	69e3      	ldr	r3, [r4, #28]
   26350:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   26354:	429d      	cmp	r5, r3
   26356:	d112      	bne.n	2637e <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   26358:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2635a:	4620      	mov	r0, r4
		witem->hdr.busy = 0;
   2635c:	f36f 0341 	bfc	r3, #1, #1
   26360:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   26362:	68e1      	ldr	r1, [r4, #12]
   26364:	f7ff fe42 	bl	25fec <idx_inc>
   26368:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2636a:	f386 8811 	msr	BASEPRI, r6
   2636e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   26372:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   26376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2637a:	f7fd be5b 	b.w	24034 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   2637e:	682b      	ldr	r3, [r5, #0]
   26380:	f360 039f 	bfi	r3, r0, #2, #30
   26384:	602b      	str	r3, [r5, #0]
   26386:	e7f0      	b.n	2636a <mpsc_pbuf_free+0x4a>

00026388 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   26388:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2638c:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   2638e:	bf88      	it	hi
   26390:	6a02      	ldrhi	r2, [r0, #32]
   26392:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   26394:	1e18      	subs	r0, r3, #0
   26396:	bf18      	it	ne
   26398:	2001      	movne	r0, #1
   2639a:	4770      	bx	lr

0002639c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2639c:	4770      	bx	lr

0002639e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2639e:	2806      	cmp	r0, #6
   263a0:	d108      	bne.n	263b4 <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   263a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   263a6:	2201      	movs	r2, #1
   263a8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   263ac:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   263b0:	bf20      	wfe
    while (true)
   263b2:	e7fd      	b.n	263b0 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   263b4:	4770      	bx	lr

000263b6 <pm_state_exit_post_ops>:
   263b6:	2300      	movs	r3, #0
   263b8:	f383 8811 	msr	BASEPRI, r3
   263bc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   263c0:	4770      	bx	lr

000263c2 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   263c2:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   263c4:	075b      	lsls	r3, r3, #29
   263c6:	d40b      	bmi.n	263e0 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   263c8:	6803      	ldr	r3, [r0, #0]
   263ca:	8842      	ldrh	r2, [r0, #2]
   263cc:	f3c3 2349 	ubfx	r3, r3, #9, #10
   263d0:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   263d4:	1898      	adds	r0, r3, r2
   263d6:	3017      	adds	r0, #23
   263d8:	f020 0007 	bic.w	r0, r0, #7
   263dc:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   263de:	4770      	bx	lr
	return 0;
   263e0:	2000      	movs	r0, #0
}
   263e2:	4770      	bx	lr

000263e4 <dummy_timestamp>:
}
   263e4:	2000      	movs	r0, #0
   263e6:	4770      	bx	lr

000263e8 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   263e8:	f000 bbca 	b.w	26b80 <sys_clock_cycle_get_32>

000263ec <atomic_inc>:
{
   263ec:	4603      	mov	r3, r0
}
   263ee:	e8d3 0fef 	ldaex	r0, [r3]
   263f2:	1c42      	adds	r2, r0, #1
   263f4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   263f8:	2900      	cmp	r1, #0
   263fa:	d1f8      	bne.n	263ee <atomic_inc+0x2>
   263fc:	4770      	bx	lr

000263fe <z_log_vprintk>:
{
   263fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   26400:	2300      	movs	r3, #0
   26402:	e9cd 0102 	strd	r0, r1, [sp, #8]
   26406:	461a      	mov	r2, r3
   26408:	4619      	mov	r1, r3
   2640a:	4618      	mov	r0, r3
   2640c:	e9cd 3300 	strd	r3, r3, [sp]
   26410:	f7f4 fcca 	bl	1ada8 <z_impl_z_log_msg_runtime_vcreate>
}
   26414:	b005      	add	sp, #20
   26416:	f85d fb04 	ldr.w	pc, [sp], #4

0002641a <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   2641a:	2001      	movs	r0, #1
   2641c:	f7f4 babc 	b.w	1a998 <z_log_dropped>

00026420 <z_log_get_tag>:
}
   26420:	2000      	movs	r0, #0
   26422:	4770      	bx	lr

00026424 <z_cbprintf_cpy>:
{
   26424:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   26426:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   2642a:	1b9b      	subs	r3, r3, r6
   2642c:	428b      	cmp	r3, r1
{
   2642e:	460c      	mov	r4, r1
   26430:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   26432:	d30a      	bcc.n	2644a <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   26434:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26436:	460a      	mov	r2, r1
   26438:	4601      	mov	r1, r0
   2643a:	1998      	adds	r0, r3, r6
   2643c:	f002 fa56 	bl	288ec <memcpy>
	return len;
   26440:	4620      	mov	r0, r4
	desc->off += len;
   26442:	68ab      	ldr	r3, [r5, #8]
   26444:	4423      	add	r3, r4
   26446:	60ab      	str	r3, [r5, #8]
}
   26448:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2644a:	f06f 001b 	mvn.w	r0, #27
   2644e:	e7fb      	b.n	26448 <z_cbprintf_cpy+0x24>

00026450 <z_log_msg_finalize>:
{
   26450:	b570      	push	{r4, r5, r6, lr}
   26452:	460e      	mov	r6, r1
   26454:	4615      	mov	r5, r2
   26456:	4619      	mov	r1, r3
	if (!msg) {
   26458:	4604      	mov	r4, r0
   2645a:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   2645e:	b918      	cbnz	r0, 26468 <z_log_msg_finalize+0x18>
}
   26460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   26464:	f7f4 ba98 	b.w	1a998 <z_log_dropped>
	if (data) {
   26468:	b12b      	cbz	r3, 26476 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   2646a:	3010      	adds	r0, #16
   2646c:	f3c5 2349 	ubfx	r3, r5, #9, #10
   26470:	4418      	add	r0, r3
   26472:	f002 fa3b 	bl	288ec <memcpy>
	msg->hdr.source = source;
   26476:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2647a:	4620      	mov	r0, r4
}
   2647c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   26480:	f7f4 bc0a 	b.w	1ac98 <z_log_msg_commit>

00026484 <buffer_write>:
{
   26484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26486:	4606      	mov	r6, r0
   26488:	460d      	mov	r5, r1
   2648a:	4614      	mov	r4, r2
   2648c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2648e:	4621      	mov	r1, r4
   26490:	4628      	mov	r0, r5
   26492:	463a      	mov	r2, r7
   26494:	47b0      	blx	r6
	} while (len != 0);
   26496:	1a24      	subs	r4, r4, r0
		buf += processed;
   26498:	4405      	add	r5, r0
	} while (len != 0);
   2649a:	d1f8      	bne.n	2648e <buffer_write+0xa>
}
   2649c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002649e <cbvprintf>:
{
   2649e:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   264a0:	2400      	movs	r4, #0
   264a2:	9400      	str	r4, [sp, #0]
   264a4:	f7f3 fde2 	bl	1a06c <z_cbvprintf_impl>
}
   264a8:	b002      	add	sp, #8
   264aa:	bd10      	pop	{r4, pc}

000264ac <log_output_flush>:
{
   264ac:	b510      	push	{r4, lr}
		     output->control_block->offset,
   264ae:	6842      	ldr	r2, [r0, #4]
{
   264b0:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   264b2:	e9d2 2300 	ldrd	r2, r3, [r2]
   264b6:	6881      	ldr	r1, [r0, #8]
   264b8:	6800      	ldr	r0, [r0, #0]
   264ba:	f7ff ffe3 	bl	26484 <buffer_write>
	output->control_block->offset = 0;
   264be:	2200      	movs	r2, #0
   264c0:	6863      	ldr	r3, [r4, #4]
   264c2:	601a      	str	r2, [r3, #0]
}
   264c4:	bd10      	pop	{r4, pc}

000264c6 <out_func>:
{
   264c6:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   264c8:	684b      	ldr	r3, [r1, #4]
{
   264ca:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   264cc:	681a      	ldr	r2, [r3, #0]
   264ce:	68cb      	ldr	r3, [r1, #12]
{
   264d0:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   264d2:	429a      	cmp	r2, r3
   264d4:	d102      	bne.n	264dc <out_func+0x16>
		log_output_flush(out_ctx);
   264d6:	4608      	mov	r0, r1
   264d8:	f7ff ffe8 	bl	264ac <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   264dc:	6863      	ldr	r3, [r4, #4]
   264de:	e8d3 2fef 	ldaex	r2, [r3]
   264e2:	1c51      	adds	r1, r2, #1
   264e4:	e8c3 1fe0 	stlex	r0, r1, [r3]
   264e8:	2800      	cmp	r0, #0
   264ea:	d1f8      	bne.n	264de <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   264ec:	68a3      	ldr	r3, [r4, #8]
}
   264ee:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   264f0:	549d      	strb	r5, [r3, r2]
}
   264f2:	bd38      	pop	{r3, r4, r5, pc}

000264f4 <cr_out_func>:
	if (c == '\n') {
   264f4:	280a      	cmp	r0, #10
{
   264f6:	b538      	push	{r3, r4, r5, lr}
   264f8:	4604      	mov	r4, r0
   264fa:	460d      	mov	r5, r1
	if (c == '\n') {
   264fc:	d102      	bne.n	26504 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   264fe:	200d      	movs	r0, #13
   26500:	f7ff ffe1 	bl	264c6 <out_func>
	out_func(c, ctx);
   26504:	4629      	mov	r1, r5
   26506:	4620      	mov	r0, r4
   26508:	f7ff ffdd 	bl	264c6 <out_func>
}
   2650c:	2000      	movs	r0, #0
   2650e:	bd38      	pop	{r3, r4, r5, pc}

00026510 <log_backend_uart_init>:
}
   26510:	4770      	bx	lr

00026512 <adp536x_charger_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_CURRENT_SET,
   26512:	f000 021f 	and.w	r2, r0, #31
   26516:	211f      	movs	r1, #31
   26518:	2004      	movs	r0, #4
   2651a:	f7f5 b831 	b.w	1b580 <adp536x_reg_write_mask>

0002651e <adp536x_vbus_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_VBUS_ILIM,
   2651e:	f000 0207 	and.w	r2, r0, #7
   26522:	2107      	movs	r1, #7
   26524:	2002      	movs	r0, #2
   26526:	f7f5 b82b 	b.w	1b580 <adp536x_reg_write_mask>

0002652a <adp536x_charging_enable>:
{
   2652a:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_CHG_FUNC,
   2652c:	2101      	movs	r1, #1
   2652e:	2007      	movs	r0, #7
   26530:	f7f5 b826 	b.w	1b580 <adp536x_reg_write_mask>

00026534 <adp536x_oc_chg_current_set>:
					ADP536X_BAT_OC_CHG_OC_CHG(value));
   26534:	0142      	lsls	r2, r0, #5
	return adp536x_reg_write_mask(ADP536X_BAT_OC_CHG,
   26536:	21e0      	movs	r1, #224	; 0xe0
   26538:	2015      	movs	r0, #21
   2653a:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   2653e:	f7f5 b81f 	b.w	1b580 <adp536x_reg_write_mask>

00026542 <adp536x_buck_1v8_set>:
	return adp536x_reg_write_mask(ADP536X_BUCK_OUTPUT,
   26542:	2218      	movs	r2, #24
   26544:	213f      	movs	r1, #63	; 0x3f
   26546:	202a      	movs	r0, #42	; 0x2a
   26548:	f7f5 b81a 	b.w	1b580 <adp536x_reg_write_mask>

0002654c <adp536x_buck_discharge_set>:
				ADP536X_BUCK_CFG_DISCHG_BUCK(enable));
   2654c:	0042      	lsls	r2, r0, #1
	return adp536x_reg_write_mask(ADP536X_BUCK_CFG,
   2654e:	2102      	movs	r1, #2
   26550:	2029      	movs	r0, #41	; 0x29
   26552:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   26556:	f7f5 b813 	b.w	1b580 <adp536x_reg_write_mask>

0002655a <adp536x_buckbst_3v3_set>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_OUTPUT,
   2655a:	2213      	movs	r2, #19
   2655c:	213f      	movs	r1, #63	; 0x3f
   2655e:	202c      	movs	r0, #44	; 0x2c
   26560:	f7f5 b80e 	b.w	1b580 <adp536x_reg_write_mask>

00026564 <adp536x_buckbst_enable>:
{
   26564:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_BUCKBST_CFG,
   26566:	2101      	movs	r1, #1
   26568:	202b      	movs	r0, #43	; 0x2b
   2656a:	f7f5 b809 	b.w	1b580 <adp536x_reg_write_mask>

0002656e <adp536x_fg_set_mode>:
int adp536x_fg_set_mode(enum adp536x_fg_enabled en, enum adp536x_fg_mode mode)
{
	return adp536x_reg_write_mask(
		ADP536X_FUEL_GAUGE_MODE,
		ADP536X_FUEL_GAUGE_MODE_FG_MODE_MSK | ADP536X_FUEL_GAUGE_EN_FG_MSK,
		ADP536X_FUEL_GAUGE_MODE_FG_MODE(mode) | ADP536X_FUEL_GAUGE_EN_FG(en));
   2656e:	0049      	lsls	r1, r1, #1
   26570:	f001 0102 	and.w	r1, r1, #2
	return adp536x_reg_write_mask(
   26574:	f000 0201 	and.w	r2, r0, #1
   26578:	430a      	orrs	r2, r1
   2657a:	2027      	movs	r0, #39	; 0x27
   2657c:	2103      	movs	r1, #3
   2657e:	f7f4 bfff 	b.w	1b580 <adp536x_reg_write_mask>

00026582 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   26582:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   26584:	6800      	ldr	r0, [r0, #0]
   26586:	f7f5 b851 	b.w	1b62c <z_arm_fatal_error>

0002658a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2658a:	2100      	movs	r1, #0
   2658c:	2001      	movs	r0, #1
   2658e:	f7f5 b84d 	b.w	1b62c <z_arm_fatal_error>

00026592 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   26592:	b508      	push	{r3, lr}
	handler();
   26594:	f7f5 f8f6 	bl	1b784 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   26598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2659c:	f7f5 b9c0 	b.w	1b920 <z_arm_exc_exit>

000265a0 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   265a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
   265a2:	f383 880b 	msr	PSPLIM, r3
}
   265a6:	4770      	bx	lr

000265a8 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   265a8:	2300      	movs	r3, #0
   265aa:	f7f4 bba9 	b.w	1ad00 <z_impl_z_log_msg_static_create>

000265ae <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   265ae:	4770      	bx	lr

000265b0 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   265b0:	4770      	bx	lr

000265b2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   265b2:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   265b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   265ba:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   265bc:	bf08      	it	eq
   265be:	f06f 0015 	mvneq.w	r0, #21
   265c2:	4770      	bx	lr

000265c4 <mpu_configure_region>:
{
   265c4:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   265c6:	890a      	ldrh	r2, [r1, #8]
   265c8:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   265ca:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   265cc:	684c      	ldr	r4, [r1, #4]
   265ce:	f002 021f 	and.w	r2, r2, #31
{
   265d2:	b085      	sub	sp, #20
   265d4:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   265d8:	9300      	str	r3, [sp, #0]
   265da:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   265de:	f023 031f 	bic.w	r3, r3, #31
   265e2:	1e62      	subs	r2, r4, #1
   265e4:	4413      	add	r3, r2
   265e6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   265ea:	280f      	cmp	r0, #15
   265ec:	9303      	str	r3, [sp, #12]
   265ee:	d904      	bls.n	265fa <mpu_configure_region+0x36>
}
   265f0:	b005      	add	sp, #20
   265f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   265f6:	f7f5 bd61 	b.w	1c0bc <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   265fa:	4669      	mov	r1, sp
   265fc:	f7f5 fd44 	bl	1c088 <region_init>
}
   26600:	b005      	add	sp, #20
   26602:	bd30      	pop	{r4, r5, pc}

00026604 <malloc_prepare>:
}
   26604:	2000      	movs	r0, #0
   26606:	4770      	bx	lr

00026608 <_stdout_hook_default>:
}
   26608:	f04f 30ff 	mov.w	r0, #4294967295
   2660c:	4770      	bx	lr

0002660e <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2660e:	f04f 32ff 	mov.w	r2, #4294967295
   26612:	f04f 33ff 	mov.w	r3, #4294967295
   26616:	f7fd bc23 	b.w	23e60 <z_impl_k_mutex_lock>

0002661a <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   2661a:	f7fd bc9b 	b.w	23f54 <z_impl_k_mutex_unlock>

0002661e <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2661e:	f7fd b96f 	b.w	23900 <z_impl_z_errno>

00026622 <z_log_msg_static_create.constprop.0>:
   26622:	2300      	movs	r3, #0
   26624:	f7f4 bb6c 	b.w	1ad00 <z_impl_z_log_msg_static_create>

00026628 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   26628:	b508      	push	{r3, lr}
	net_if_init();
   2662a:	f7f5 ff8d 	bl	1c548 <net_if_init>
	net_if_post_init();
   2662e:	f7f5 ffaf 	bl	1c590 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   26632:	2000      	movs	r0, #0
   26634:	bd08      	pop	{r3, pc}

00026636 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   26636:	b110      	cbz	r0, 2663e <net_if_l2+0x8>
   26638:	6800      	ldr	r0, [r0, #0]
   2663a:	b100      	cbz	r0, 2663e <net_if_l2+0x8>
	return iface->if_dev->l2;
   2663c:	6840      	ldr	r0, [r0, #4]
}
   2663e:	4770      	bx	lr

00026640 <atomic_set_bit>:
   26640:	2301      	movs	r3, #1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26642:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   26644:	f001 011f 	and.w	r1, r1, #31
   26648:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2664a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   2664e:	e8d0 2fef 	ldaex	r2, [r0]
   26652:	431a      	orrs	r2, r3
   26654:	e8c0 2fe1 	stlex	r1, r2, [r0]
   26658:	2900      	cmp	r1, #0
   2665a:	d1f8      	bne.n	2664e <atomic_set_bit+0xe>
}
   2665c:	4770      	bx	lr

0002665e <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2665e:	2301      	movs	r3, #1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26660:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   26662:	f001 011f 	and.w	r1, r1, #31
   26666:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26668:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2666a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   2666e:	e8d0 2fef 	ldaex	r2, [r0]
   26672:	401a      	ands	r2, r3
   26674:	e8c0 2fe1 	stlex	r1, r2, [r0]
   26678:	2900      	cmp	r1, #0
   2667a:	d1f8      	bne.n	2666e <atomic_clear_bit+0x10>
}
   2667c:	4770      	bx	lr

0002667e <net_if_flag_is_set>:
	if (iface == NULL) {
   2667e:	b130      	cbz	r0, 2668e <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26680:	6803      	ldr	r3, [r0, #0]
   26682:	330c      	adds	r3, #12
   26684:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   26688:	4108      	asrs	r0, r1
   2668a:	f000 0001 	and.w	r0, r0, #1
}
   2668e:	4770      	bx	lr

00026690 <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   26690:	b510      	push	{r4, lr}
   26692:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   26694:	f7ff ffcf 	bl	26636 <net_if_l2>
   26698:	b128      	cbz	r0, 266a6 <l2_flags_get.isra.0+0x16>
   2669a:	68c2      	ldr	r2, [r0, #12]
   2669c:	b11a      	cbz	r2, 266a6 <l2_flags_get.isra.0+0x16>
}
   2669e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   266a2:	4618      	mov	r0, r3
   266a4:	4710      	bx	r2
}
   266a6:	bd10      	pop	{r4, pc}

000266a8 <update_operational_state>:
{
   266a8:	b510      	push	{r4, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   266aa:	6803      	ldr	r3, [r0, #0]
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
   266ac:	2100      	movs	r1, #0
{
   266ae:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   266b0:	f893 2020 	ldrb.w	r2, [r3, #32]
   266b4:	f7ff ffe3 	bl	2667e <net_if_flag_is_set>
	if (!net_if_is_admin_up(iface)) {
   266b8:	b978      	cbnz	r0, 266da <update_operational_state+0x32>
		iface->if_dev->oper_state = oper_state;
   266ba:	2102      	movs	r1, #2
   266bc:	6823      	ldr	r3, [r4, #0]
   266be:	f883 1020 	strb.w	r1, [r3, #32]
	return iface->if_dev->oper_state;
   266c2:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   266c4:	f890 3020 	ldrb.w	r3, [r0, #32]
   266c8:	428b      	cmp	r3, r1
   266ca:	d12b      	bne.n	26724 <update_operational_state+0x7c>
		if (prev_state == NET_IF_OPER_UP) {
   266cc:	2a06      	cmp	r2, #6
   266ce:	d129      	bne.n	26724 <update_operational_state+0x7c>
	atomic_clear_bit(iface->if_dev->flags, value);
   266d0:	2108      	movs	r1, #8
   266d2:	300c      	adds	r0, #12
   266d4:	f7ff ffc3 	bl	2665e <atomic_clear_bit>
	return (iface->if_dev->socket_offload != NULL);
   266d8:	e01c      	b.n	26714 <update_operational_state+0x6c>
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
   266da:	2109      	movs	r1, #9
   266dc:	4620      	mov	r0, r4
   266de:	f7ff ffce 	bl	2667e <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
   266e2:	2800      	cmp	r0, #0
   266e4:	d0e9      	beq.n	266ba <update_operational_state+0x12>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
   266e6:	210a      	movs	r1, #10
   266e8:	4620      	mov	r0, r4
   266ea:	f7ff ffc8 	bl	2667e <net_if_flag_is_set>
		iface->if_dev->oper_state = oper_state;
   266ee:	6821      	ldr	r1, [r4, #0]
   266f0:	f1c0 0306 	rsb	r3, r0, #6
   266f4:	b2db      	uxtb	r3, r3
   266f6:	f881 3020 	strb.w	r3, [r1, #32]
	return iface->if_dev->oper_state;
   266fa:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   266fc:	f890 1020 	ldrb.w	r1, [r0, #32]
   26700:	4299      	cmp	r1, r3
   26702:	d10f      	bne.n	26724 <update_operational_state+0x7c>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
   26704:	2906      	cmp	r1, #6
   26706:	d1e1      	bne.n	266cc <update_operational_state+0x24>
		if (prev_state != NET_IF_OPER_UP) {
   26708:	2a06      	cmp	r2, #6
   2670a:	d00b      	beq.n	26724 <update_operational_state+0x7c>
	atomic_set_bit(iface->if_dev->flags, value);
   2670c:	2108      	movs	r1, #8
   2670e:	300c      	adds	r0, #12
   26710:	f7ff ff96 	bl	26640 <atomic_set_bit>
	return (iface->if_dev->socket_offload != NULL);
   26714:	6823      	ldr	r3, [r4, #0]
	if (!is_iface_offloaded(iface) &&
   26716:	69db      	ldr	r3, [r3, #28]
   26718:	b923      	cbnz	r3, 26724 <update_operational_state+0x7c>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   2671a:	4620      	mov	r0, r4
}
   2671c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   26720:	f7ff bfb6 	b.w	26690 <l2_flags_get.isra.0>
}
   26724:	bd10      	pop	{r4, pc}

00026726 <net_if_flag_test_and_set.isra.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26726:	2301      	movs	r3, #1
static inline bool net_if_flag_test_and_set(struct net_if *iface,
   26728:	b510      	push	{r4, lr}
   2672a:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2672e:	300c      	adds	r0, #12
   26730:	e8d0 3fef 	ldaex	r3, [r0]
   26734:	ea43 0201 	orr.w	r2, r3, r1
   26738:	e8c0 2fe4 	stlex	r4, r2, [r0]
   2673c:	2c00      	cmp	r4, #0
   2673e:	d1f7      	bne.n	26730 <net_if_flag_test_and_set.isra.0+0xa>
	return (old & mask) != 0;
   26740:	4219      	tst	r1, r3
}
   26742:	bf14      	ite	ne
   26744:	2001      	movne	r0, #1
   26746:	2000      	moveq	r0, #0
   26748:	bd10      	pop	{r4, pc}

0002674a <net_if_up>:
{
   2674a:	b538      	push	{r3, r4, r5, lr}
   2674c:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   2674e:	f04f 31ff 	mov.w	r1, #4294967295
   26752:	f04f 30ff 	mov.w	r0, #4294967295
   26756:	f7f5 fee9 	bl	1c52c <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   2675a:	2100      	movs	r1, #0
   2675c:	4628      	mov	r0, r5
   2675e:	f7ff ff8e 	bl	2667e <net_if_flag_is_set>
   26762:	4604      	mov	r4, r0
   26764:	b9d0      	cbnz	r0, 2679c <net_if_up+0x52>
	return (iface->if_dev->socket_offload != NULL);
   26766:	682b      	ldr	r3, [r5, #0]
	if (is_iface_offloaded(iface)) {
   26768:	69db      	ldr	r3, [r3, #28]
   2676a:	b95b      	cbnz	r3, 26784 <net_if_up+0x3a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   2676c:	4628      	mov	r0, r5
   2676e:	f7ff ff62 	bl	26636 <net_if_l2>
   26772:	4604      	mov	r4, r0
   26774:	b130      	cbz	r0, 26784 <net_if_up+0x3a>
   26776:	6884      	ldr	r4, [r0, #8]
   26778:	b124      	cbz	r4, 26784 <net_if_up+0x3a>
	status = net_if_l2(iface)->enable(iface, true);
   2677a:	2101      	movs	r1, #1
   2677c:	4628      	mov	r0, r5
   2677e:	47a0      	blx	r4
	if (status < 0) {
   26780:	1e04      	subs	r4, r0, #0
   26782:	db07      	blt.n	26794 <net_if_up+0x4a>
	atomic_set_bit(iface->if_dev->flags, value);
   26784:	6828      	ldr	r0, [r5, #0]
   26786:	2100      	movs	r1, #0
   26788:	300c      	adds	r0, #12
   2678a:	f7ff ff59 	bl	26640 <atomic_set_bit>
	update_operational_state(iface);
   2678e:	4628      	mov	r0, r5
   26790:	f7ff ff8a 	bl	266a8 <update_operational_state>
	k_mutex_unlock(&lock);
   26794:	f7f5 fed2 	bl	1c53c <k_mutex_unlock.constprop.0.isra.0>
}
   26798:	4620      	mov	r0, r4
   2679a:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
   2679c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   267a0:	e7f8      	b.n	26794 <net_if_up+0x4a>

000267a2 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   267a2:	220c      	movs	r2, #12
   267a4:	6903      	ldr	r3, [r0, #16]
   267a6:	b2c9      	uxtb	r1, r1
   267a8:	fb01 3302 	mla	r3, r1, r2, r3
   267ac:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   267ae:	f000 0007 	and.w	r0, r0, #7
   267b2:	4770      	bx	lr

000267b4 <set_on_state>:
	__asm__ volatile(
   267b4:	f04f 0320 	mov.w	r3, #32
   267b8:	f3ef 8211 	mrs	r2, BASEPRI
   267bc:	f383 8812 	msr	BASEPRI_MAX, r3
   267c0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   267c4:	6803      	ldr	r3, [r0, #0]
   267c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   267ca:	f043 0302 	orr.w	r3, r3, #2
   267ce:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   267d0:	f382 8811 	msr	BASEPRI, r2
   267d4:	f3bf 8f6f 	isb	sy
}
   267d8:	4770      	bx	lr

000267da <stop>:
{
   267da:	b570      	push	{r4, r5, r6, lr}
   267dc:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   267de:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   267e0:	f04f 0420 	mov.w	r4, #32
   267e4:	f3ef 8511 	mrs	r5, BASEPRI
   267e8:	f384 8812 	msr	BASEPRI_MAX, r4
   267ec:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   267f0:	260c      	movs	r6, #12
   267f2:	fb06 3401 	mla	r4, r6, r1, r3
   267f6:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   267f8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   267fc:	d008      	beq.n	26810 <stop+0x36>
   267fe:	42a2      	cmp	r2, r4
   26800:	d006      	beq.n	26810 <stop+0x36>
	__asm__ volatile(
   26802:	f385 8811 	msr	BASEPRI, r5
   26806:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   2680a:	f04f 30ff 	mov.w	r0, #4294967295
}
   2680e:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   26810:	2201      	movs	r2, #1
   26812:	4371      	muls	r1, r6
   26814:	440b      	add	r3, r1
   26816:	641a      	str	r2, [r3, #64]	; 0x40
   26818:	f385 8811 	msr	BASEPRI, r5
   2681c:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   26820:	6843      	ldr	r3, [r0, #4]
   26822:	440b      	add	r3, r1
   26824:	685b      	ldr	r3, [r3, #4]
   26826:	4798      	blx	r3
	return 0;
   26828:	2000      	movs	r0, #0
   2682a:	e7f0      	b.n	2680e <stop+0x34>

0002682c <api_stop>:
	return stop(dev, subsys, CTX_API);
   2682c:	2280      	movs	r2, #128	; 0x80
   2682e:	f7ff bfd4 	b.w	267da <stop>

00026832 <async_start>:
{
   26832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26834:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   26836:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   26838:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2683a:	f04f 0520 	mov.w	r5, #32
   2683e:	f3ef 8611 	mrs	r6, BASEPRI
   26842:	f385 8812 	msr	BASEPRI_MAX, r5
   26846:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2684a:	250c      	movs	r5, #12
   2684c:	4369      	muls	r1, r5
   2684e:	440c      	add	r4, r1
   26850:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   26852:	f005 0c07 	and.w	ip, r5, #7
   26856:	f1bc 0f01 	cmp.w	ip, #1
   2685a:	d10b      	bne.n	26874 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2685c:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   2685e:	f386 8811 	msr	BASEPRI, r6
   26862:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   26866:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2686a:	6843      	ldr	r3, [r0, #4]
   2686c:	585b      	ldr	r3, [r3, r1]
   2686e:	4798      	blx	r3
	return 0;
   26870:	2000      	movs	r0, #0
}
   26872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   26874:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   26878:	42af      	cmp	r7, r5
   2687a:	f386 8811 	msr	BASEPRI, r6
   2687e:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   26882:	bf0c      	ite	eq
   26884:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   26888:	f04f 30ff 	movne.w	r0, #4294967295
   2688c:	e7f1      	b.n	26872 <async_start+0x40>

0002688e <api_start>:
{
   2688e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   26890:	2480      	movs	r4, #128	; 0x80
   26892:	9400      	str	r4, [sp, #0]
   26894:	f7ff ffcd 	bl	26832 <async_start>
}
   26898:	b002      	add	sp, #8
   2689a:	bd10      	pop	{r4, pc}

0002689c <onoff_started_callback>:
{
   2689c:	b410      	push	{r4}
	notify(mgr, 0);
   2689e:	241c      	movs	r4, #28
	return &data->mgr[type];
   268a0:	6900      	ldr	r0, [r0, #16]
   268a2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   268a4:	fb03 0004 	mla	r0, r3, r4, r0
   268a8:	2100      	movs	r1, #0
}
   268aa:	bc10      	pop	{r4}
	notify(mgr, 0);
   268ac:	4710      	bx	r2

000268ae <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   268ae:	2000      	movs	r0, #0
   268b0:	f7fa b8de 	b.w	20a70 <nrfx_clock_start>

000268b4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   268b4:	2000      	movs	r0, #0
   268b6:	f000 bd5f 	b.w	27378 <nrfx_clock_stop>

000268ba <blocking_start_callback>:
{
   268ba:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   268bc:	f7fd bbba 	b.w	24034 <z_impl_k_sem_give>

000268c0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268c0:	6843      	ldr	r3, [r0, #4]
}
   268c2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268c4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   268c6:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   268c8:	600b      	str	r3, [r1, #0]
}
   268ca:	4770      	bx	lr

000268cc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268cc:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   268ce:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268d2:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   268d4:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   268d8:	6098      	str	r0, [r3, #8]
}
   268da:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   268dc:	60d9      	str	r1, [r3, #12]
   268de:	4770      	bx	lr

000268e0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268e0:	6843      	ldr	r3, [r0, #4]
}
   268e2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268e4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   268e6:	6099      	str	r1, [r3, #8]
}
   268e8:	4770      	bx	lr

000268ea <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268ea:	6843      	ldr	r3, [r0, #4]
}
   268ec:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268ee:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   268f0:	60d9      	str	r1, [r3, #12]
}
   268f2:	4770      	bx	lr

000268f4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268f4:	6843      	ldr	r3, [r0, #4]
   268f6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   268f8:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   268fa:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   268fe:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   26900:	6090      	str	r0, [r2, #8]
}
   26902:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   26904:	60d3      	str	r3, [r2, #12]
   26906:	4770      	bx	lr

00026908 <gpio_nrfx_manage_callback>:
{
   26908:	b510      	push	{r4, lr}
	return port->data;
   2690a:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2690c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   2690e:	b1f8      	cbz	r0, 26950 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26910:	4288      	cmp	r0, r1
   26912:	d119      	bne.n	26948 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   26914:	689c      	ldr	r4, [r3, #8]
	return node->next;
   26916:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   26918:	42a1      	cmp	r1, r4
	list->head = node;
   2691a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2691c:	d100      	bne.n	26920 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2691e:	6098      	str	r0, [r3, #8]
	parent->next = child;
   26920:	2000      	movs	r0, #0
   26922:	6008      	str	r0, [r1, #0]
	if (set) {
   26924:	b12a      	cbz	r2, 26932 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   26926:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   26928:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2692a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2692c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2692e:	b902      	cbnz	r2, 26932 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   26930:	6099      	str	r1, [r3, #8]
	return 0;
   26932:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   26934:	e010      	b.n	26958 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26936:	4281      	cmp	r1, r0
   26938:	d106      	bne.n	26948 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   2693a:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   2693c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2693e:	6898      	ldr	r0, [r3, #8]
   26940:	4281      	cmp	r1, r0
   26942:	d1ed      	bne.n	26920 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   26944:	609c      	str	r4, [r3, #8]
}
   26946:	e7eb      	b.n	26920 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   26948:	4604      	mov	r4, r0
   2694a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2694c:	2800      	cmp	r0, #0
   2694e:	d1f2      	bne.n	26936 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   26950:	2a00      	cmp	r2, #0
   26952:	d1e8      	bne.n	26926 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   26954:	f06f 0015 	mvn.w	r0, #21
}
   26958:	bd10      	pop	{r4, pc}

0002695a <irq_connect2>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   2695a:	2200      	movs	r2, #0
   2695c:	2101      	movs	r1, #1
   2695e:	200a      	movs	r0, #10
   26960:	f7f4 befa 	b.w	1b758 <z_arm_irq_priority_set>

00026964 <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   26964:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   26966:	2100      	movs	r1, #0
   26968:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   2696a:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   2696c:	f000 f90c 	bl	26b88 <pinctrl_lookup_state>
	if (ret < 0) {
   26970:	2800      	cmp	r0, #0
   26972:	db05      	blt.n	26980 <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
   26974:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   26976:	6822      	ldr	r2, [r4, #0]
   26978:	7919      	ldrb	r1, [r3, #4]
   2697a:	6818      	ldr	r0, [r3, #0]
   2697c:	f7f7 f8fe 	bl	1db7c <pinctrl_configure_pins>
}
   26980:	b002      	add	sp, #8
   26982:	bd10      	pop	{r4, pc}

00026984 <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
   26984:	2200      	movs	r2, #0
   26986:	2101      	movs	r1, #1
   26988:	200b      	movs	r0, #11
   2698a:	f7f4 bee5 	b.w	1b758 <z_arm_irq_priority_set>

0002698e <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2698e:	b510      	push	{r4, lr}
	while (*count) {
   26990:	680b      	ldr	r3, [r1, #0]
   26992:	b913      	cbnz	r3, 2699a <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   26994:	4618      	mov	r0, r3
	*buf_len = 0;
   26996:	6013      	str	r3, [r2, #0]
	return NULL;
   26998:	e005      	b.n	269a6 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   2699a:	6803      	ldr	r3, [r0, #0]
   2699c:	685c      	ldr	r4, [r3, #4]
   2699e:	b11c      	cbz	r4, 269a8 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   269a0:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   269a2:	6803      	ldr	r3, [r0, #0]
   269a4:	6818      	ldr	r0, [r3, #0]
}
   269a6:	bd10      	pop	{r4, pc}
		++(*current);
   269a8:	3308      	adds	r3, #8
   269aa:	6003      	str	r3, [r0, #0]
		--(*count);
   269ac:	680b      	ldr	r3, [r1, #0]
   269ae:	3b01      	subs	r3, #1
   269b0:	600b      	str	r3, [r1, #0]
   269b2:	e7ed      	b.n	26990 <spi_context_get_next_buf.constprop.0+0x2>

000269b4 <z_log_msg_static_create.constprop.0>:
   269b4:	2300      	movs	r3, #0
   269b6:	f7f4 b9a3 	b.w	1ad00 <z_impl_z_log_msg_static_create>

000269ba <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   269ba:	4603      	mov	r3, r0
   269bc:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   269be:	7919      	ldrb	r1, [r3, #4]
   269c0:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   269c2:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   269c4:	fa03 f101 	lsl.w	r1, r3, r1
   269c8:	6903      	ldr	r3, [r0, #16]
   269ca:	681b      	ldr	r3, [r3, #0]
   269cc:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   269ce:	bf18      	it	ne
   269d0:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   269d4:	b112      	cbz	r2, 269dc <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   269d6:	6883      	ldr	r3, [r0, #8]
   269d8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   269da:	4718      	bx	r3
   269dc:	6883      	ldr	r3, [r0, #8]
   269de:	691b      	ldr	r3, [r3, #16]
   269e0:	e7fb      	b.n	269da <gpio_pin_set_dt.isra.0+0x20>

000269e2 <_spi_context_cs_control>:
{
   269e2:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   269e4:	6803      	ldr	r3, [r0, #0]
{
   269e6:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   269e8:	b1e3      	cbz	r3, 26a24 <_spi_context_cs_control+0x42>
   269ea:	6898      	ldr	r0, [r3, #8]
   269ec:	b1d0      	cbz	r0, 26a24 <_spi_context_cs_control+0x42>
   269ee:	6805      	ldr	r5, [r0, #0]
   269f0:	b1c5      	cbz	r5, 26a24 <_spi_context_cs_control+0x42>
		if (on) {
   269f2:	b149      	cbz	r1, 26a08 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   269f4:	2101      	movs	r1, #1
   269f6:	f7ff ffe0 	bl	269ba <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   269fa:	6823      	ldr	r3, [r4, #0]
   269fc:	689b      	ldr	r3, [r3, #8]
   269fe:	6898      	ldr	r0, [r3, #8]
}
   26a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   26a04:	f001 be50 	b.w	286a8 <z_impl_k_busy_wait>
			if (!force_off &&
   26a08:	b912      	cbnz	r2, 26a10 <_spi_context_cs_control+0x2e>
   26a0a:	889b      	ldrh	r3, [r3, #4]
   26a0c:	04db      	lsls	r3, r3, #19
   26a0e:	d409      	bmi.n	26a24 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   26a10:	6880      	ldr	r0, [r0, #8]
   26a12:	f001 fe49 	bl	286a8 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   26a16:	6823      	ldr	r3, [r4, #0]
   26a18:	2100      	movs	r1, #0
   26a1a:	6898      	ldr	r0, [r3, #8]
}
   26a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   26a20:	f7ff bfcb 	b.w	269ba <gpio_pin_set_dt.isra.0>
}
   26a24:	bd38      	pop	{r3, r4, r5, pc}

00026a26 <spi_context_unlock_unconditionally>:
{
   26a26:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   26a28:	2201      	movs	r2, #1
   26a2a:	2100      	movs	r1, #0
{
   26a2c:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   26a2e:	f7ff ffd8 	bl	269e2 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   26a32:	69a3      	ldr	r3, [r4, #24]
   26a34:	b933      	cbnz	r3, 26a44 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   26a36:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   26a38:	f104 0010 	add.w	r0, r4, #16
}
   26a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26a40:	f7fd baf8 	b.w	24034 <z_impl_k_sem_give>
   26a44:	bd10      	pop	{r4, pc}

00026a46 <spi_nrfx_release>:
{
   26a46:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   26a48:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   26a4a:	6803      	ldr	r3, [r0, #0]
   26a4c:	428b      	cmp	r3, r1
   26a4e:	d106      	bne.n	26a5e <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   26a50:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   26a54:	b934      	cbnz	r4, 26a64 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   26a56:	f7ff ffe6 	bl	26a26 <spi_context_unlock_unconditionally>
	return 0;
   26a5a:	4620      	mov	r0, r4
}
   26a5c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   26a5e:	f06f 0015 	mvn.w	r0, #21
   26a62:	e7fb      	b.n	26a5c <spi_nrfx_release+0x16>
		return -EBUSY;
   26a64:	f06f 000f 	mvn.w	r0, #15
   26a68:	e7f8      	b.n	26a5c <spi_nrfx_release+0x16>

00026a6a <uarte_nrfx_config_get>:
{
   26a6a:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   26a6c:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   26a6e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   26a72:	e883 0003 	stmia.w	r3, {r0, r1}
}
   26a76:	2000      	movs	r0, #0
   26a78:	4770      	bx	lr

00026a7a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   26a7a:	6843      	ldr	r3, [r0, #4]
   26a7c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   26a7e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   26a82:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   26a86:	4770      	bx	lr

00026a88 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   26a88:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   26a8a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   26a8c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26a8e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26a92:	b150      	cbz	r0, 26aaa <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26a94:	2000      	movs	r0, #0
	*c = *data->rx_data;
   26a96:	6952      	ldr	r2, [r2, #20]
   26a98:	7812      	ldrb	r2, [r2, #0]
   26a9a:	700a      	strb	r2, [r1, #0]
   26a9c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   26aa0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26aa4:	2201      	movs	r2, #1
   26aa6:	601a      	str	r2, [r3, #0]
	return 0;
   26aa8:	4770      	bx	lr
		return -1;
   26aaa:	f04f 30ff 	mov.w	r0, #4294967295
}
   26aae:	4770      	bx	lr

00026ab0 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   26ab0:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   26ab2:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26ab4:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   26ab8:	b940      	cbnz	r0, 26acc <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   26aba:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   26abc:	079b      	lsls	r3, r3, #30
   26abe:	d406      	bmi.n	26ace <is_tx_ready.isra.0+0x1e>
   26ac0:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   26ac4:	3800      	subs	r0, #0
   26ac6:	bf18      	it	ne
   26ac8:	2001      	movne	r0, #1
   26aca:	4770      	bx	lr
   26acc:	2001      	movs	r0, #1
}
   26ace:	4770      	bx	lr

00026ad0 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   26ad0:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   26ad2:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   26ad4:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   26ad8:	05c9      	lsls	r1, r1, #23
   26ada:	d518      	bpl.n	26b0e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26adc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   26ae0:	b1a9      	cbz	r1, 26b0e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   26ae2:	f04f 0020 	mov.w	r0, #32
   26ae6:	f3ef 8111 	mrs	r1, BASEPRI
   26aea:	f380 8812 	msr	BASEPRI_MAX, r0
   26aee:	f3bf 8f6f 	isb	sy
   26af2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   26af6:	b130      	cbz	r0, 26b06 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26af8:	2000      	movs	r0, #0
   26afa:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   26afe:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26b02:	2001      	movs	r0, #1
   26b04:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   26b06:	f381 8811 	msr	BASEPRI, r1
   26b0a:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   26b0e:	6852      	ldr	r2, [r2, #4]
   26b10:	06d2      	lsls	r2, r2, #27
   26b12:	d515      	bpl.n	26b40 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   26b14:	f04f 0120 	mov.w	r1, #32
   26b18:	f3ef 8211 	mrs	r2, BASEPRI
   26b1c:	f381 8812 	msr	BASEPRI_MAX, r1
   26b20:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26b24:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   26b28:	b111      	cbz	r1, 26b30 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   26b2a:	2100      	movs	r1, #0
   26b2c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   26b30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   26b34:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   26b38:	f382 8811 	msr	BASEPRI, r2
   26b3c:	f3bf 8f6f 	isb	sy
}
   26b40:	4770      	bx	lr

00026b42 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   26b42:	4608      	mov	r0, r1
   26b44:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   26b46:	4611      	mov	r1, r2
   26b48:	f7f9 fe9a 	bl	20880 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   26b4c:	2800      	cmp	r0, #0
	}

	return 0;
}
   26b4e:	bf18      	it	ne
   26b50:	f06f 0004 	mvnne.w	r0, #4
   26b54:	bd08      	pop	{r3, pc}

00026b56 <entropy_psa_crypto_rng_init>:
{
   26b56:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   26b58:	f000 fc09 	bl	2736e <psa_crypto_init>
		return -EIO;
   26b5c:	2800      	cmp	r0, #0
}
   26b5e:	bf18      	it	ne
   26b60:	f06f 0004 	mvnne.w	r0, #4
   26b64:	bd08      	pop	{r3, pc}

00026b66 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   26b66:	4770      	bx	lr

00026b68 <event_clear>:
   26b68:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   26b6a:	f100 0350 	add.w	r3, r0, #80	; 0x50
   26b6e:	009b      	lsls	r3, r3, #2
   26b70:	b29b      	uxth	r3, r3
   26b72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   26b76:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   26b7a:	601a      	str	r2, [r3, #0]
   26b7c:	681b      	ldr	r3, [r3, #0]
}
   26b7e:	4770      	bx	lr

00026b80 <sys_clock_cycle_get_32>:
{
   26b80:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   26b82:	f7f6 fe6b 	bl	1d85c <z_nrf_rtc_timer_read>
}
   26b86:	bd08      	pop	{r3, pc}

00026b88 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   26b88:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   26b8a:	6843      	ldr	r3, [r0, #4]
   26b8c:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   26b8e:	7a05      	ldrb	r5, [r0, #8]
   26b90:	6844      	ldr	r4, [r0, #4]
   26b92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   26b96:	42a3      	cmp	r3, r4
   26b98:	d302      	bcc.n	26ba0 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   26b9a:	f06f 0001 	mvn.w	r0, #1
}
   26b9e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   26ba0:	795c      	ldrb	r4, [r3, #5]
   26ba2:	428c      	cmp	r4, r1
   26ba4:	d001      	beq.n	26baa <pinctrl_lookup_state+0x22>
		(*state)++;
   26ba6:	3308      	adds	r3, #8
   26ba8:	e7f0      	b.n	26b8c <pinctrl_lookup_state+0x4>
			return 0;
   26baa:	2000      	movs	r0, #0
   26bac:	e7f7      	b.n	26b9e <pinctrl_lookup_state+0x16>

00026bae <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   26bae:	f001 bd7b 	b.w	286a8 <z_impl_k_busy_wait>

00026bb2 <nrf_modem_os_errno_set>:
{
   26bb2:	b510      	push	{r4, lr}
   26bb4:	4604      	mov	r4, r0
	errno = err_code;
   26bb6:	f7ff fd32 	bl	2661e <__errno>
   26bba:	6004      	str	r4, [r0, #0]
}
   26bbc:	bd10      	pop	{r4, pc}

00026bbe <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   26bbe:	f001 bb38 	b.w	28232 <k_is_in_isr>

00026bc2 <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
   26bc2:	f7fd ba37 	b.w	24034 <z_impl_k_sem_give>

00026bc6 <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   26bc6:	1c4b      	adds	r3, r1, #1
{
   26bc8:	b570      	push	{r4, r5, r6, lr}
   26bca:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   26bcc:	d017      	beq.n	26bfe <nrf_modem_os_sem_take+0x38>
   26bce:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   26bd2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   26bd6:	f240 30e7 	movw	r0, #999	; 0x3e7
   26bda:	2100      	movs	r1, #0
   26bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26be0:	2300      	movs	r3, #0
   26be2:	fbc4 0106 	smlal	r0, r1, r4, r6
   26be6:	f7f2 f88f 	bl	18d08 <__aeabi_uldivmod>
   26bea:	4602      	mov	r2, r0
   26bec:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   26bee:	4628      	mov	r0, r5
   26bf0:	f7fd fa46 	bl	24080 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   26bf4:	2800      	cmp	r0, #0
}
   26bf6:	bf18      	it	ne
   26bf8:	f06f 000a 	mvnne.w	r0, #10
   26bfc:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   26bfe:	f04f 32ff 	mov.w	r2, #4294967295
   26c02:	4613      	mov	r3, r2
   26c04:	e7f3      	b.n	26bee <nrf_modem_os_sem_take+0x28>

00026c06 <nrf91_socket_offload_setsockopt>:
{
   26c06:	b5f0      	push	{r4, r5, r6, r7, lr}
   26c08:	460d      	mov	r5, r1
   26c0a:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = { 0 };
   26c0c:	2300      	movs	r3, #0
{
   26c0e:	b087      	sub	sp, #28
   26c10:	4611      	mov	r1, r2
	int sd = OBJ_TO_SD(obj);
   26c12:	6807      	ldr	r7, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   26c14:	aa03      	add	r2, sp, #12
   26c16:	4628      	mov	r0, r5
	struct nrf_timeval nrf_timeo = { 0 };
   26c18:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   26c1c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   26c1e:	f7f7 f9d7 	bl	1dfd0 <z_to_nrf_optname>
   26c22:	2800      	cmp	r0, #0
   26c24:	da07      	bge.n	26c36 <nrf91_socket_offload_setsockopt+0x30>
		errno = ENOPROTOOPT;
   26c26:	f7ff fcfa 	bl	2661e <__errno>
   26c2a:	236d      	movs	r3, #109	; 0x6d
   26c2c:	6003      	str	r3, [r0, #0]
		return -1;
   26c2e:	f04f 30ff 	mov.w	r0, #4294967295
}
   26c32:	b007      	add	sp, #28
   26c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   26c36:	2d01      	cmp	r5, #1
   26c38:	d112      	bne.n	26c60 <nrf91_socket_offload_setsockopt+0x5a>
   26c3a:	f1a1 0214 	sub.w	r2, r1, #20
   26c3e:	2a01      	cmp	r2, #1
   26c40:	d806      	bhi.n	26c50 <nrf91_socket_offload_setsockopt+0x4a>
		if (optval != NULL) {
   26c42:	b12c      	cbz	r4, 26c50 <nrf91_socket_offload_setsockopt+0x4a>
			nrf_optlen = sizeof(struct nrf_timeval);
   26c44:	2608      	movs	r6, #8
			nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   26c46:	6823      	ldr	r3, [r4, #0]
   26c48:	9304      	str	r3, [sp, #16]
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   26c4a:	68a3      	ldr	r3, [r4, #8]
			nrf_optval = &nrf_timeo;
   26c4c:	ac04      	add	r4, sp, #16
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   26c4e:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   26c50:	4623      	mov	r3, r4
   26c52:	4629      	mov	r1, r5
   26c54:	4638      	mov	r0, r7
   26c56:	9a03      	ldr	r2, [sp, #12]
   26c58:	9600      	str	r6, [sp, #0]
   26c5a:	f7fb ffe9 	bl	22c30 <nrf_setsockopt>
	return retval;
   26c5e:	e7e8      	b.n	26c32 <nrf91_socket_offload_setsockopt+0x2c>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   26c60:	f5b5 7f8d 	cmp.w	r5, #282	; 0x11a
   26c64:	d1f4      	bne.n	26c50 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   26c66:	290c      	cmp	r1, #12
   26c68:	bf08      	it	eq
   26c6a:	2604      	moveq	r6, #4
   26c6c:	e7f0      	b.n	26c50 <nrf91_socket_offload_setsockopt+0x4a>

00026c6e <nrf91_socket_offload_getsockopt>:
{
   26c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26c72:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   26c74:	2300      	movs	r3, #0
{
   26c76:	b086      	sub	sp, #24
   26c78:	460f      	mov	r7, r1
   26c7a:	4615      	mov	r5, r2
	struct nrf_timeval nrf_timeo = {0, 0};
   26c7c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   26c80:	2308      	movs	r3, #8
	int sd = OBJ_TO_SD(obj);
   26c82:	6806      	ldr	r6, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   26c84:	4629      	mov	r1, r5
   26c86:	4638      	mov	r0, r7
   26c88:	eb0d 0203 	add.w	r2, sp, r3
{
   26c8c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   26c90:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   26c92:	f7f7 f99d 	bl	1dfd0 <z_to_nrf_optname>
   26c96:	2800      	cmp	r0, #0
   26c98:	da09      	bge.n	26cae <nrf91_socket_offload_getsockopt+0x40>
		errno = ENOPROTOOPT;
   26c9a:	f7ff fcc0 	bl	2661e <__errno>
   26c9e:	236d      	movs	r3, #109	; 0x6d
		return -1;
   26ca0:	f04f 36ff 	mov.w	r6, #4294967295
		errno = ENOPROTOOPT;
   26ca4:	6003      	str	r3, [r0, #0]
}
   26ca6:	4630      	mov	r0, r6
   26ca8:	b006      	add	sp, #24
   26caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   26cae:	2f01      	cmp	r7, #1
   26cb0:	d11c      	bne.n	26cec <nrf91_socket_offload_getsockopt+0x7e>
   26cb2:	f1a5 0314 	sub.w	r3, r5, #20
   26cb6:	2b01      	cmp	r3, #1
   26cb8:	d818      	bhi.n	26cec <nrf91_socket_offload_getsockopt+0x7e>
		nrf_optlen = &nrf_timeo_size;
   26cba:	aa03      	add	r2, sp, #12
		nrf_optval = &nrf_timeo;
   26cbc:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   26cbe:	4630      	mov	r0, r6
   26cc0:	9200      	str	r2, [sp, #0]
   26cc2:	4639      	mov	r1, r7
   26cc4:	9a02      	ldr	r2, [sp, #8]
   26cc6:	f7fc f8f1 	bl	22eac <nrf_getsockopt>
	if (retval == 0) {
   26cca:	4606      	mov	r6, r0
   26ccc:	2800      	cmp	r0, #0
   26cce:	d1ea      	bne.n	26ca6 <nrf91_socket_offload_getsockopt+0x38>
		if (level == SOL_SOCKET) {
   26cd0:	2f01      	cmp	r7, #1
   26cd2:	d1e8      	bne.n	26ca6 <nrf91_socket_offload_getsockopt+0x38>
			if (optname == SO_ERROR) {
   26cd4:	2d04      	cmp	r5, #4
   26cd6:	d10c      	bne.n	26cf2 <nrf91_socket_offload_getsockopt+0x84>
				if (*(int *)optval != 0) {
   26cd8:	6820      	ldr	r0, [r4, #0]
   26cda:	2800      	cmp	r0, #0
   26cdc:	d0e3      	beq.n	26ca6 <nrf91_socket_offload_getsockopt+0x38>
					nrf_modem_os_errno_set(*(int *)optval);
   26cde:	f7ff ff68 	bl	26bb2 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   26ce2:	f7ff fc9c 	bl	2661e <__errno>
   26ce6:	6803      	ldr	r3, [r0, #0]
   26ce8:	6023      	str	r3, [r4, #0]
   26cea:	e7dc      	b.n	26ca6 <nrf91_socket_offload_getsockopt+0x38>
	nrf_socklen_t *nrf_optlen = (nrf_socklen_t *)optlen;
   26cec:	4642      	mov	r2, r8
   26cee:	4623      	mov	r3, r4
   26cf0:	e7e5      	b.n	26cbe <nrf91_socket_offload_getsockopt+0x50>
			} else if ((optname == SO_RCVTIMEO) ||
   26cf2:	3d14      	subs	r5, #20
   26cf4:	2d01      	cmp	r5, #1
   26cf6:	d8d6      	bhi.n	26ca6 <nrf91_socket_offload_getsockopt+0x38>
					nrf_timeo.tv_sec;
   26cf8:	9b04      	ldr	r3, [sp, #16]
   26cfa:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   26cfe:	9b05      	ldr	r3, [sp, #20]
   26d00:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   26d02:	2310      	movs	r3, #16
   26d04:	f8c8 3000 	str.w	r3, [r8]
   26d08:	e7cd      	b.n	26ca6 <nrf91_socket_offload_getsockopt+0x38>

00026d0a <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   26d0a:	6800      	ldr	r0, [r0, #0]
   26d0c:	f000 bee1 	b.w	27ad2 <nrf_listen>

00026d10 <nrf91_socket_offload_freeaddrinfo>:
{
   26d10:	b538      	push	{r3, r4, r5, lr}
   26d12:	4604      	mov	r4, r0
	while (next != NULL) {
   26d14:	b904      	cbnz	r4, 26d18 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   26d16:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   26d18:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   26d1a:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   26d1c:	f001 fda7 	bl	2886e <k_free>
		k_free(this);
   26d20:	4620      	mov	r0, r4
   26d22:	f001 fda4 	bl	2886e <k_free>
		next = next->ai_next;
   26d26:	462c      	mov	r4, r5
   26d28:	e7f4      	b.n	26d14 <nrf91_socket_offload_freeaddrinfo+0x4>

00026d2a <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   26d2a:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   26d2c:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   26d2e:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   26d30:	4603      	mov	r3, r0
{
   26d32:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   26d34:	f823 2b04 	strh.w	r2, [r3], #4
   26d38:	f101 0420 	add.w	r4, r1, #32
   26d3c:	f101 0210 	add.w	r2, r1, #16
   26d40:	f852 5b04 	ldr.w	r5, [r2], #4
   26d44:	42a2      	cmp	r2, r4
   26d46:	f843 5b04 	str.w	r5, [r3], #4
   26d4a:	d1f9      	bne.n	26d40 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   26d4c:	6a0b      	ldr	r3, [r1, #32]
   26d4e:	7503      	strb	r3, [r0, #20]
}
   26d50:	bd30      	pop	{r4, r5, pc}

00026d52 <z_to_nrf_ipv6>:
{
   26d52:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   26d54:	2124      	movs	r1, #36	; 0x24
{
   26d56:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   26d58:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   26d5a:	8841      	ldrh	r1, [r0, #2]
{
   26d5c:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   26d5e:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   26d60:	2102      	movs	r1, #2
   26d62:	1d04      	adds	r4, r0, #4
   26d64:	6059      	str	r1, [r3, #4]
   26d66:	f103 0610 	add.w	r6, r3, #16
   26d6a:	f100 0714 	add.w	r7, r0, #20
   26d6e:	4635      	mov	r5, r6
   26d70:	6820      	ldr	r0, [r4, #0]
   26d72:	6861      	ldr	r1, [r4, #4]
   26d74:	3408      	adds	r4, #8
   26d76:	c503      	stmia	r5!, {r0, r1}
   26d78:	42bc      	cmp	r4, r7
   26d7a:	462e      	mov	r6, r5
   26d7c:	d1f7      	bne.n	26d6e <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   26d7e:	7d12      	ldrb	r2, [r2, #20]
   26d80:	621a      	str	r2, [r3, #32]
}
   26d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026d84 <nrf91_socket_offload_sendto>:
{
   26d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26d88:	4604      	mov	r4, r0
   26d8a:	b08c      	sub	sp, #48	; 0x30
   26d8c:	9812      	ldr	r0, [sp, #72]	; 0x48
   26d8e:	460d      	mov	r5, r1
   26d90:	4616      	mov	r6, r2
   26d92:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   26d94:	6824      	ldr	r4, [r4, #0]
	if (to == NULL) {
   26d96:	b930      	cbnz	r0, 26da6 <nrf91_socket_offload_sendto+0x22>
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   26d98:	9013      	str	r0, [sp, #76]	; 0x4c
   26d9a:	4620      	mov	r0, r4
}
   26d9c:	b00c      	add	sp, #48	; 0x30
   26d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   26da2:	f7fb be39 	b.w	22a18 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   26da6:	f8b0 c000 	ldrh.w	ip, [r0]
   26daa:	f1bc 0f01 	cmp.w	ip, #1
   26dae:	d112      	bne.n	26dd6 <nrf91_socket_offload_sendto+0x52>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26db0:	2510      	movs	r5, #16
	nrf_out->sin_port = ptr->sin_port;
   26db2:	8846      	ldrh	r6, [r0, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26db4:	6840      	ldr	r0, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26db6:	f88d 500c 	strb.w	r5, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26dba:	9006      	str	r0, [sp, #24]
		retval = nrf_sendto(sd, buf, len, flags,
   26dbc:	a803      	add	r0, sp, #12
	nrf_out->sin_port = ptr->sin_port;
   26dbe:	f8ad 6014 	strh.w	r6, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   26dc2:	f8cd c010 	str.w	ip, [sp, #16]
		retval = nrf_sendto(sd, buf, len, flags,
   26dc6:	9501      	str	r5, [sp, #4]
   26dc8:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, flags,
   26dca:	4620      	mov	r0, r4
   26dcc:	f7fb fe24 	bl	22a18 <nrf_sendto>
}
   26dd0:	b00c      	add	sp, #48	; 0x30
   26dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   26dd6:	f1bc 0f02 	cmp.w	ip, #2
   26dda:	d10b      	bne.n	26df4 <nrf91_socket_offload_sendto+0x70>
		z_to_nrf_ipv6(to, &ipv6);
   26ddc:	f10d 080c 	add.w	r8, sp, #12
   26de0:	4641      	mov	r1, r8
   26de2:	f7ff ffb6 	bl	26d52 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, flags,
   26de6:	2324      	movs	r3, #36	; 0x24
   26de8:	4632      	mov	r2, r6
   26dea:	e9cd 8300 	strd	r8, r3, [sp]
   26dee:	4629      	mov	r1, r5
   26df0:	463b      	mov	r3, r7
   26df2:	e7ea      	b.n	26dca <nrf91_socket_offload_sendto+0x46>
		errno = EAFNOSUPPORT;
   26df4:	f7ff fc13 	bl	2661e <__errno>
   26df8:	236a      	movs	r3, #106	; 0x6a
   26dfa:	6003      	str	r3, [r0, #0]
		retval = -1;
   26dfc:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   26e00:	e7e6      	b.n	26dd0 <nrf91_socket_offload_sendto+0x4c>

00026e02 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   26e02:	2300      	movs	r3, #0
{
   26e04:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   26e06:	e9cd 3300 	strd	r3, r3, [sp]
   26e0a:	f7ff ffbb 	bl	26d84 <nrf91_socket_offload_sendto>
}
   26e0e:	b003      	add	sp, #12
   26e10:	f85d fb04 	ldr.w	pc, [sp], #4

00026e14 <nrf91_socket_offload_connect>:
{
   26e14:	4603      	mov	r3, r0
   26e16:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   26e18:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   26e1a:	880b      	ldrh	r3, [r1, #0]
{
   26e1c:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   26e1e:	2b01      	cmp	r3, #1
{
   26e20:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   26e22:	d10e      	bne.n	26e42 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26e24:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   26e26:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   26e28:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26e2a:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26e2c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   26e30:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26e34:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   26e36:	4620      	mov	r0, r4
   26e38:	a901      	add	r1, sp, #4
   26e3a:	f000 fd68 	bl	2790e <nrf_connect>
}
   26e3e:	b00a      	add	sp, #40	; 0x28
   26e40:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   26e42:	2b02      	cmp	r3, #2
   26e44:	d104      	bne.n	26e50 <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   26e46:	a901      	add	r1, sp, #4
   26e48:	f7ff ff83 	bl	26d52 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   26e4c:	2224      	movs	r2, #36	; 0x24
   26e4e:	e7f2      	b.n	26e36 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   26e50:	4620      	mov	r0, r4
}
   26e52:	b00a      	add	sp, #40	; 0x28
   26e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = nrf_connect(sd, (void *)addr, addrlen);
   26e58:	f000 bd59 	b.w	2790e <nrf_connect>

00026e5c <nrf91_socket_offload_bind>:
{
   26e5c:	4603      	mov	r3, r0
   26e5e:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   26e60:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   26e62:	880b      	ldrh	r3, [r1, #0]
{
   26e64:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   26e66:	2b01      	cmp	r3, #1
{
   26e68:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   26e6a:	d10e      	bne.n	26e8a <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26e6c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   26e6e:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   26e70:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26e72:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26e74:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   26e78:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26e7c:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   26e7e:	4620      	mov	r0, r4
   26e80:	a901      	add	r1, sp, #4
   26e82:	f000 fddd 	bl	27a40 <nrf_bind>
}
   26e86:	b00a      	add	sp, #40	; 0x28
   26e88:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   26e8a:	2b02      	cmp	r3, #2
   26e8c:	d104      	bne.n	26e98 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   26e8e:	a901      	add	r1, sp, #4
   26e90:	f7ff ff5f 	bl	26d52 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   26e94:	2224      	movs	r2, #36	; 0x24
   26e96:	e7f2      	b.n	26e7e <nrf91_socket_offload_bind+0x22>
		errno = EAFNOSUPPORT;
   26e98:	f7ff fbc1 	bl	2661e <__errno>
   26e9c:	236a      	movs	r3, #106	; 0x6a
   26e9e:	6003      	str	r3, [r0, #0]
		retval = -1;
   26ea0:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   26ea4:	e7ef      	b.n	26e86 <nrf91_socket_offload_bind+0x2a>

00026ea6 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   26ea6:	f7fc bfdb 	b.w	23e60 <z_impl_k_mutex_lock>

00026eaa <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   26eaa:	f7fd b853 	b.w	23f54 <z_impl_k_mutex_unlock>

00026eae <nrf91_socket_offload_recvfrom>:
{
   26eae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26eb2:	4605      	mov	r5, r0
	if (ctx->lock) {
   26eb4:	6840      	ldr	r0, [r0, #4]
{
   26eb6:	b08d      	sub	sp, #52	; 0x34
   26eb8:	460c      	mov	r4, r1
   26eba:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   26ebe:	4691      	mov	r9, r2
   26ec0:	469a      	mov	sl, r3
	if (ctx->lock) {
   26ec2:	b108      	cbz	r0, 26ec8 <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   26ec4:	f7ff fff1 	bl	26eaa <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   26ec8:	f8d5 b000 	ldr.w	fp, [r5]
	if (from == NULL || fromlen == NULL) {
   26ecc:	b106      	cbz	r6, 26ed0 <nrf91_socket_offload_recvfrom+0x22>
   26ece:	b9af      	cbnz	r7, 26efc <nrf91_socket_offload_recvfrom+0x4e>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   26ed0:	2300      	movs	r3, #0
   26ed2:	4621      	mov	r1, r4
   26ed4:	e9cd 3300 	strd	r3, r3, [sp]
   26ed8:	464a      	mov	r2, r9
   26eda:	4653      	mov	r3, sl
   26edc:	4658      	mov	r0, fp
   26ede:	f000 febd 	bl	27c5c <nrf_recvfrom>
   26ee2:	4604      	mov	r4, r0
	if (ctx->lock) {
   26ee4:	6868      	ldr	r0, [r5, #4]
   26ee6:	b128      	cbz	r0, 26ef4 <nrf91_socket_offload_recvfrom+0x46>
		k_mutex_lock(ctx->lock, K_FOREVER);
   26ee8:	f04f 32ff 	mov.w	r2, #4294967295
   26eec:	f04f 33ff 	mov.w	r3, #4294967295
   26ef0:	f7ff ffd9 	bl	26ea6 <k_mutex_lock.constprop.0.isra.0>
}
   26ef4:	4620      	mov	r0, r4
   26ef6:	b00d      	add	sp, #52	; 0x34
   26ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   26efc:	f10d 080c 	add.w	r8, sp, #12
   26f00:	2224      	movs	r2, #36	; 0x24
   26f02:	2100      	movs	r1, #0
   26f04:	4640      	mov	r0, r8
   26f06:	f001 fcfe 	bl	28906 <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   26f0a:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   26f0c:	ab02      	add	r3, sp, #8
   26f0e:	4621      	mov	r1, r4
   26f10:	e9cd 8300 	strd	r8, r3, [sp]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   26f14:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   26f16:	4653      	mov	r3, sl
   26f18:	464a      	mov	r2, r9
   26f1a:	4658      	mov	r0, fp
   26f1c:	f000 fe9e 	bl	27c5c <nrf_recvfrom>
		if (retval < 0) {
   26f20:	1e04      	subs	r4, r0, #0
   26f22:	dbdf      	blt.n	26ee4 <nrf91_socket_offload_recvfrom+0x36>
		if (cliaddr->sa_family == NRF_AF_INET &&
   26f24:	9b04      	ldr	r3, [sp, #16]
   26f26:	2b01      	cmp	r3, #1
   26f28:	d10b      	bne.n	26f42 <nrf91_socket_offload_recvfrom+0x94>
   26f2a:	9a02      	ldr	r2, [sp, #8]
   26f2c:	2a10      	cmp	r2, #16
   26f2e:	d1d9      	bne.n	26ee4 <nrf91_socket_offload_recvfrom+0x36>
	ptr->sin_family = AF_INET;
   26f30:	8033      	strh	r3, [r6, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   26f32:	9b06      	ldr	r3, [sp, #24]
	ptr->sin_port = nrf_in->sin_port;
   26f34:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   26f38:	6073      	str	r3, [r6, #4]
			*fromlen = sizeof(struct sockaddr_in);
   26f3a:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   26f3c:	8072      	strh	r2, [r6, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   26f3e:	603b      	str	r3, [r7, #0]
   26f40:	e7d0      	b.n	26ee4 <nrf91_socket_offload_recvfrom+0x36>
		} else if (cliaddr->sa_family == NRF_AF_INET6 &&
   26f42:	2b02      	cmp	r3, #2
   26f44:	d1ce      	bne.n	26ee4 <nrf91_socket_offload_recvfrom+0x36>
   26f46:	9b02      	ldr	r3, [sp, #8]
   26f48:	2b24      	cmp	r3, #36	; 0x24
   26f4a:	d1cb      	bne.n	26ee4 <nrf91_socket_offload_recvfrom+0x36>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   26f4c:	4641      	mov	r1, r8
   26f4e:	4630      	mov	r0, r6
   26f50:	f7ff feeb 	bl	26d2a <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   26f54:	2318      	movs	r3, #24
   26f56:	e7f2      	b.n	26f3e <nrf91_socket_offload_recvfrom+0x90>

00026f58 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   26f58:	2300      	movs	r3, #0
{
   26f5a:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   26f5c:	e9cd 3300 	strd	r3, r3, [sp]
   26f60:	f7ff ffa5 	bl	26eae <nrf91_socket_offload_recvfrom>
}
   26f64:	b003      	add	sp, #12
   26f66:	f85d fb04 	ldr.w	pc, [sp], #4

00026f6a <nrf91_socket_offload_close>:
{
   26f6a:	b538      	push	{r3, r4, r5, lr}
   26f6c:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   26f6e:	6800      	ldr	r0, [r0, #0]
   26f70:	f7fb fd1e 	bl	229b0 <nrf_close>
	if (retval == 0) {
   26f74:	4604      	mov	r4, r0
   26f76:	b910      	cbnz	r0, 26f7e <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   26f78:	4628      	mov	r0, r5
   26f7a:	f7f7 fa21 	bl	1e3c0 <release_ctx>
}
   26f7e:	4620      	mov	r0, r4
   26f80:	bd38      	pop	{r3, r4, r5, pc}

00026f82 <gpio_pin_configure_dt>:
{
   26f82:	4603      	mov	r3, r0
   26f84:	b470      	push	{r4, r5, r6}
   26f86:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   26f88:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   26f8a:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   26f8c:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   26f8e:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
   26f90:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
   26f92:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   26f94:	408c      	lsls	r4, r1
   26f96:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   26f98:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
   26f9c:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   26f9e:	bf14      	ite	ne
   26fa0:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   26fa2:	43a3      	biceq	r3, r4
   26fa4:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   26fa6:	6833      	ldr	r3, [r6, #0]
}
   26fa8:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   26faa:	4718      	bx	r3

00026fac <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   26fac:	2301      	movs	r3, #1
   26fae:	fa03 f101 	lsl.w	r1, r3, r1
   26fb2:	6903      	ldr	r3, [r0, #16]
   26fb4:	681b      	ldr	r3, [r3, #0]
   26fb6:	4219      	tst	r1, r3
   26fb8:	d003      	beq.n	26fc2 <gpio_pin_set+0x16>
	if (value != 0)	{
   26fba:	b122      	cbz	r2, 26fc6 <gpio_pin_set+0x1a>
	return api->port_clear_bits_raw(port, pins);
   26fbc:	6883      	ldr	r3, [r0, #8]
   26fbe:	691b      	ldr	r3, [r3, #16]
   26fc0:	e003      	b.n	26fca <gpio_pin_set+0x1e>
	if (value != 0)	{
   26fc2:	2a00      	cmp	r2, #0
   26fc4:	d0fa      	beq.n	26fbc <gpio_pin_set+0x10>
	return api->port_set_bits_raw(port, pins);
   26fc6:	6883      	ldr	r3, [r0, #8]
   26fc8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   26fca:	4718      	bx	r3

00026fcc <z_log_msg_static_create.constprop.0>:
   26fcc:	2300      	movs	r3, #0
   26fce:	f7f3 be97 	b.w	1ad00 <z_impl_z_log_msg_static_create>

00026fd2 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   26fd2:	2101      	movs	r1, #1
   26fd4:	f7f7 bbb2 	b.w	1e73c <dk_set_led>

00026fd8 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   26fd8:	2100      	movs	r1, #0
   26fda:	f7f7 bbaf 	b.w	1e73c <dk_set_led>

00026fde <is_notification>:
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26fde:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
   26fe2:	b2db      	uxtb	r3, r3
   26fe4:	2b08      	cmp	r3, #8
   26fe6:	bf9d      	ittte	ls
   26fe8:	f240 1005 	movwls	r0, #261	; 0x105
   26fec:	40d8      	lsrls	r0, r3
   26fee:	f000 0001 	andls.w	r0, r0, #1
{
   26ff2:	2000      	movhi	r0, #0
}
   26ff4:	4770      	bx	lr

00026ff6 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   26ff6:	280d      	cmp	r0, #13
   26ff8:	d004      	beq.n	27004 <is_lfcr+0xe>
   26ffa:	f1a0 030a 	sub.w	r3, r0, #10
   26ffe:	4258      	negs	r0, r3
   27000:	4158      	adcs	r0, r3
   27002:	4770      	bx	lr
		return true;
   27004:	2001      	movs	r0, #1
}
   27006:	4770      	bx	lr

00027008 <skip_command_prefix>:
{
   27008:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   2700a:	6801      	ldr	r1, [r0, #0]
{
   2700c:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   2700e:	1c8b      	adds	r3, r1, #2
   27010:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   27012:	788c      	ldrb	r4, [r1, #2]
   27014:	4620      	mov	r0, r4
   27016:	f7ff ffee 	bl	26ff6 <is_lfcr>
   2701a:	b910      	cbnz	r0, 27022 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2701c:	b10c      	cbz	r4, 27022 <skip_command_prefix+0x1a>
	(*cmd)++;
   2701e:	3103      	adds	r1, #3
   27020:	6011      	str	r1, [r2, #0]
}
   27022:	bd10      	pop	{r4, pc}

00027024 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   27024:	6813      	ldr	r3, [r2, #0]
   27026:	f7f7 be95 	b.w	1ed54 <at_parser_max_params_from_str>

0002702a <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   2702a:	6803      	ldr	r3, [r0, #0]
   2702c:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   2702e:	bf86      	itte	hi
   27030:	6840      	ldrhi	r0, [r0, #4]
   27032:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
		return NULL;
   27036:	2000      	movls	r0, #0
}
   27038:	4770      	bx	lr

0002703a <at_param_clear>:
{
   2703a:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2703c:	7803      	ldrb	r3, [r0, #0]
{
   2703e:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   27040:	3b02      	subs	r3, #2
   27042:	2b01      	cmp	r3, #1
   27044:	d802      	bhi.n	2704c <at_param_clear+0x12>
		k_free(param->value.str_val);
   27046:	6880      	ldr	r0, [r0, #8]
   27048:	f001 fc11 	bl	2886e <k_free>
	param->value.int_val = 0;
   2704c:	2200      	movs	r2, #0
   2704e:	2300      	movs	r3, #0
   27050:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   27054:	bd10      	pop	{r4, pc}

00027056 <at_params_list_init>:

	return 0;
}

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   27056:	b538      	push	{r3, r4, r5, lr}
   27058:	460d      	mov	r5, r1
	if (list == NULL) {
   2705a:	4604      	mov	r4, r0
   2705c:	b140      	cbz	r0, 27070 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   2705e:	2110      	movs	r1, #16
   27060:	4628      	mov	r0, r5
   27062:	f001 fc0f 	bl	28884 <k_calloc>
   27066:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   27068:	b128      	cbz	r0, 27076 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   2706a:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   2706c:	6025      	str	r5, [r4, #0]
}
   2706e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   27070:	f06f 0015 	mvn.w	r0, #21
   27074:	e7fb      	b.n	2706e <at_params_list_init+0x18>
		return -ENOMEM;
   27076:	f06f 000b 	mvn.w	r0, #11
   2707a:	e7f8      	b.n	2706e <at_params_list_init+0x18>

0002707c <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   2707c:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   2707e:	4604      	mov	r4, r0
   27080:	b128      	cbz	r0, 2708e <at_params_list_clear+0x12>
   27082:	6843      	ldr	r3, [r0, #4]
   27084:	b11b      	cbz	r3, 2708e <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   27086:	2500      	movs	r5, #0
   27088:	6823      	ldr	r3, [r4, #0]
   2708a:	429d      	cmp	r5, r3
   2708c:	d300      	bcc.n	27090 <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   2708e:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   27090:	6866      	ldr	r6, [r4, #4]
   27092:	eb06 1605 	add.w	r6, r6, r5, lsl #4
   27096:	4630      	mov	r0, r6
   27098:	f7ff ffcf 	bl	2703a <at_param_clear>
__ssp_bos_icheck3(memset, void *, int)
   2709c:	2210      	movs	r2, #16
   2709e:	2100      	movs	r1, #0
   270a0:	4630      	mov	r0, r6
   270a2:	f001 fc30 	bl	28906 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   270a6:	3501      	adds	r5, #1
   270a8:	e7ee      	b.n	27088 <at_params_list_clear+0xc>

000270aa <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   270aa:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   270ac:	4604      	mov	r4, r0
   270ae:	b148      	cbz	r0, 270c4 <at_params_list_free+0x1a>
   270b0:	6843      	ldr	r3, [r0, #4]
   270b2:	b13b      	cbz	r3, 270c4 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   270b4:	2500      	movs	r5, #0
	at_params_list_clear(list);
   270b6:	f7ff ffe1 	bl	2707c <at_params_list_clear>
	k_free(list->params);
   270ba:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   270bc:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   270be:	f001 fbd6 	bl	2886e <k_free>
	list->params = NULL;
   270c2:	6065      	str	r5, [r4, #4]
}
   270c4:	bd38      	pop	{r3, r4, r5, pc}

000270c6 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   270c6:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   270c8:	b178      	cbz	r0, 270ea <at_params_empty_put+0x24>
   270ca:	6843      	ldr	r3, [r0, #4]
   270cc:	b16b      	cbz	r3, 270ea <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   270ce:	f7ff ffac 	bl	2702a <at_params_get>

	if (param == NULL) {
   270d2:	4604      	mov	r4, r0
   270d4:	b148      	cbz	r0, 270ea <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   270d6:	f7ff ffb0 	bl	2703a <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   270da:	2304      	movs	r3, #4
	param->value.int_val = 0;
   270dc:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   270de:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   270e0:	2300      	movs	r3, #0

	return 0;
   270e2:	2000      	movs	r0, #0
	param->value.int_val = 0;
   270e4:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   270e8:	bd10      	pop	{r4, pc}
		return -EINVAL;
   270ea:	f06f 0015 	mvn.w	r0, #21
   270ee:	e7fb      	b.n	270e8 <at_params_empty_put+0x22>

000270f0 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   270f0:	b570      	push	{r4, r5, r6, lr}
   270f2:	4616      	mov	r6, r2
   270f4:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   270f6:	b168      	cbz	r0, 27114 <at_params_int_put+0x24>
   270f8:	6843      	ldr	r3, [r0, #4]
   270fa:	b15b      	cbz	r3, 27114 <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   270fc:	f7ff ff95 	bl	2702a <at_params_get>

	if (param == NULL) {
   27100:	4604      	mov	r4, r0
   27102:	b138      	cbz	r0, 27114 <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   27104:	f7ff ff99 	bl	2703a <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   27108:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   2710a:	2000      	movs	r0, #0
	param->value.int_val = value;
   2710c:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   27110:	7023      	strb	r3, [r4, #0]
}
   27112:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   27114:	f06f 0015 	mvn.w	r0, #21
   27118:	e7fb      	b.n	27112 <at_params_int_put+0x22>

0002711a <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   2711a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2711c:	4617      	mov	r7, r2
   2711e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   27120:	b1c0      	cbz	r0, 27154 <at_params_string_put+0x3a>
   27122:	6843      	ldr	r3, [r0, #4]
   27124:	b1b3      	cbz	r3, 27154 <at_params_string_put+0x3a>
   27126:	b1aa      	cbz	r2, 27154 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   27128:	f7ff ff7f 	bl	2702a <at_params_get>

	if (param == NULL) {
   2712c:	4604      	mov	r4, r0
   2712e:	b188      	cbz	r0, 27154 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   27130:	1c68      	adds	r0, r5, #1
   27132:	f001 fba3 	bl	2887c <k_malloc>

	if (param_value == NULL) {
   27136:	4606      	mov	r6, r0
   27138:	b178      	cbz	r0, 2715a <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2713a:	462a      	mov	r2, r5
   2713c:	4639      	mov	r1, r7
   2713e:	f001 fbd5 	bl	288ec <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   27142:	4620      	mov	r0, r4
   27144:	f7ff ff79 	bl	2703a <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   27148:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   2714a:	2000      	movs	r0, #0
	param->size = str_len;
   2714c:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   2714e:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   27150:	60a6      	str	r6, [r4, #8]
}
   27152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   27154:	f06f 0015 	mvn.w	r0, #21
   27158:	e7fb      	b.n	27152 <at_params_string_put+0x38>
		return -ENOMEM;
   2715a:	f06f 000b 	mvn.w	r0, #11
   2715e:	e7f8      	b.n	27152 <at_params_string_put+0x38>

00027160 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   27160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27162:	4617      	mov	r7, r2
   27164:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   27166:	b1c0      	cbz	r0, 2719a <at_params_array_put+0x3a>
   27168:	6843      	ldr	r3, [r0, #4]
   2716a:	b1b3      	cbz	r3, 2719a <at_params_array_put+0x3a>
   2716c:	b1aa      	cbz	r2, 2719a <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2716e:	f7ff ff5c 	bl	2702a <at_params_get>

	if (param == NULL) {
   27172:	4604      	mov	r4, r0
   27174:	b188      	cbz	r0, 2719a <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   27176:	4628      	mov	r0, r5
   27178:	f001 fb80 	bl	2887c <k_malloc>

	if (param_value == NULL) {
   2717c:	4606      	mov	r6, r0
   2717e:	b178      	cbz	r0, 271a0 <at_params_array_put+0x40>
   27180:	462a      	mov	r2, r5
   27182:	4639      	mov	r1, r7
   27184:	f001 fbb2 	bl	288ec <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   27188:	4620      	mov	r0, r4
   2718a:	f7ff ff56 	bl	2703a <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   2718e:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   27190:	2000      	movs	r0, #0
	param->size = array_len;
   27192:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   27194:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   27196:	60a6      	str	r6, [r4, #8]
}
   27198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   2719a:	f06f 0015 	mvn.w	r0, #21
   2719e:	e7fb      	b.n	27198 <at_params_array_put+0x38>
		return -ENOMEM;
   271a0:	f06f 000b 	mvn.w	r0, #11
   271a4:	e7f8      	b.n	27198 <at_params_array_put+0x38>

000271a6 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   271a6:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   271a8:	b1b0      	cbz	r0, 271d8 <at_params_short_get+0x32>
   271aa:	6843      	ldr	r3, [r0, #4]
   271ac:	b1a3      	cbz	r3, 271d8 <at_params_short_get+0x32>
   271ae:	b19a      	cbz	r2, 271d8 <at_params_short_get+0x32>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   271b0:	f7ff ff3b 	bl	2702a <at_params_get>

	if (param == NULL) {
   271b4:	b180      	cbz	r0, 271d8 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   271b6:	7803      	ldrb	r3, [r0, #0]
   271b8:	2b01      	cmp	r3, #1
   271ba:	d10d      	bne.n	271d8 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   271bc:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   271c0:	f513 4000 	adds.w	r0, r3, #32768	; 0x8000
   271c4:	f141 0100 	adc.w	r1, r1, #0
   271c8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   271cc:	f171 0100 	sbcs.w	r1, r1, #0
   271d0:	d202      	bcs.n	271d8 <at_params_short_get+0x32>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   271d2:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   271d4:	8013      	strh	r3, [r2, #0]
}
   271d6:	bd08      	pop	{r3, pc}
		return -EINVAL;
   271d8:	f06f 0015 	mvn.w	r0, #21
   271dc:	e7fb      	b.n	271d6 <at_params_short_get+0x30>

000271de <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   271de:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   271e0:	b190      	cbz	r0, 27208 <at_params_unsigned_short_get+0x2a>
   271e2:	6843      	ldr	r3, [r0, #4]
   271e4:	b183      	cbz	r3, 27208 <at_params_unsigned_short_get+0x2a>
   271e6:	b17a      	cbz	r2, 27208 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   271e8:	f7ff ff1f 	bl	2702a <at_params_get>

	if (param == NULL) {
   271ec:	b160      	cbz	r0, 27208 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   271ee:	7803      	ldrb	r3, [r0, #0]
   271f0:	2b01      	cmp	r3, #1
   271f2:	d109      	bne.n	27208 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   271f4:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   271f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   271fc:	f171 0100 	sbcs.w	r1, r1, #0
   27200:	d202      	bcs.n	27208 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
   27202:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   27204:	8013      	strh	r3, [r2, #0]
}
   27206:	bd08      	pop	{r3, pc}
		return -EINVAL;
   27208:	f06f 0015 	mvn.w	r0, #21
   2720c:	e7fb      	b.n	27206 <at_params_unsigned_short_get+0x28>

0002720e <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   2720e:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   27210:	b190      	cbz	r0, 27238 <at_params_int_get+0x2a>
   27212:	6843      	ldr	r3, [r0, #4]
   27214:	b183      	cbz	r3, 27238 <at_params_int_get+0x2a>
   27216:	b17a      	cbz	r2, 27238 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   27218:	f7ff ff07 	bl	2702a <at_params_get>

	if (param == NULL) {
   2721c:	b160      	cbz	r0, 27238 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2721e:	7803      	ldrb	r3, [r0, #0]
   27220:	2b01      	cmp	r3, #1
   27222:	d109      	bne.n	27238 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   27224:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   27228:	f113 4000 	adds.w	r0, r3, #2147483648	; 0x80000000
   2722c:	f141 0100 	adc.w	r1, r1, #0
   27230:	b911      	cbnz	r1, 27238 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   27232:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   27234:	6013      	str	r3, [r2, #0]
}
   27236:	bd08      	pop	{r3, pc}
		return -EINVAL;
   27238:	f06f 0015 	mvn.w	r0, #21
   2723c:	e7fb      	b.n	27236 <at_params_int_get+0x28>

0002723e <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   2723e:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   27240:	b170      	cbz	r0, 27260 <at_params_int64_get+0x22>
   27242:	6843      	ldr	r3, [r0, #4]
   27244:	b163      	cbz	r3, 27260 <at_params_int64_get+0x22>
   27246:	b15a      	cbz	r2, 27260 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   27248:	f7ff feef 	bl	2702a <at_params_get>

	if (param == NULL) {
   2724c:	b140      	cbz	r0, 27260 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2724e:	7803      	ldrb	r3, [r0, #0]
   27250:	2b01      	cmp	r3, #1
   27252:	d105      	bne.n	27260 <at_params_int64_get+0x22>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   27254:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   27258:	e9c2 0100 	strd	r0, r1, [r2]
	return 0;
   2725c:	2000      	movs	r0, #0
}
   2725e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   27260:	f06f 0015 	mvn.w	r0, #21
   27264:	e7fb      	b.n	2725e <at_params_int64_get+0x20>

00027266 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   27266:	b570      	push	{r4, r5, r6, lr}
   27268:	4615      	mov	r5, r2
   2726a:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL || len == NULL) {
   2726c:	b1a8      	cbz	r0, 2729a <at_params_string_get+0x34>
   2726e:	6843      	ldr	r3, [r0, #4]
   27270:	b19b      	cbz	r3, 2729a <at_params_string_get+0x34>
   27272:	b192      	cbz	r2, 2729a <at_params_string_get+0x34>
   27274:	b18c      	cbz	r4, 2729a <at_params_string_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   27276:	f7ff fed8 	bl	2702a <at_params_get>

	if (param == NULL) {
   2727a:	b170      	cbz	r0, 2729a <at_params_string_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   2727c:	7803      	ldrb	r3, [r0, #0]
   2727e:	2b02      	cmp	r3, #2
   27280:	d10b      	bne.n	2729a <at_params_string_get+0x34>
		return param->size;
   27282:	6846      	ldr	r6, [r0, #4]
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);

	if (*len < param_len) {
   27284:	6823      	ldr	r3, [r4, #0]
   27286:	42b3      	cmp	r3, r6
   27288:	d30a      	bcc.n	272a0 <at_params_string_get+0x3a>
   2728a:	6881      	ldr	r1, [r0, #8]
   2728c:	4632      	mov	r2, r6
   2728e:	4628      	mov	r0, r5
   27290:	f001 fb2c 	bl	288ec <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   27294:	2000      	movs	r0, #0
	*len = param_len;
   27296:	6026      	str	r6, [r4, #0]
}
   27298:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2729a:	f06f 0015 	mvn.w	r0, #21
   2729e:	e7fb      	b.n	27298 <at_params_string_get+0x32>
		return -ENOMEM;
   272a0:	f06f 000b 	mvn.w	r0, #11
   272a4:	e7f8      	b.n	27298 <at_params_string_get+0x32>

000272a6 <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   272a6:	4602      	mov	r2, r0
{
   272a8:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   272aa:	b170      	cbz	r0, 272ca <at_params_valid_count_get+0x24>
   272ac:	6840      	ldr	r0, [r0, #4]
   272ae:	b160      	cbz	r0, 272ca <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   272b0:	6811      	ldr	r1, [r2, #0]
   272b2:	b119      	cbz	r1, 272bc <at_params_valid_count_get+0x16>
   272b4:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   272b6:	b108      	cbz	r0, 272bc <at_params_valid_count_get+0x16>
   272b8:	7803      	ldrb	r3, [r0, #0]
   272ba:	b90b      	cbnz	r3, 272c0 <at_params_valid_count_get+0x1a>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   272bc:	4608      	mov	r0, r1
   272be:	bd08      	pop	{r3, pc}
		param = at_params_get(list, valid_i);
   272c0:	4610      	mov	r0, r2
		valid_i += 1;
   272c2:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   272c4:	f7ff feb1 	bl	2702a <at_params_get>
   272c8:	e7f5      	b.n	272b6 <at_params_valid_count_get+0x10>
		return -EINVAL;
   272ca:	f06f 0115 	mvn.w	r1, #21
   272ce:	e7f5      	b.n	272bc <at_params_valid_count_get+0x16>

000272d0 <z_log_msg_static_create.constprop.0>:
   272d0:	2300      	movs	r3, #0
   272d2:	f7f3 bd15 	b.w	1ad00 <z_impl_z_log_msg_static_create>

000272d6 <z_log_msg_static_create.constprop.0>:
   272d6:	2300      	movs	r3, #0
   272d8:	f7f3 bd12 	b.w	1ad00 <z_impl_z_log_msg_static_create>

000272dc <string_to_int>:
{
   272dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   272de:	460c      	mov	r4, r1
   272e0:	4605      	mov	r5, r0
   272e2:	4616      	mov	r6, r2
	errno = 0;
   272e4:	f7ff f99b 	bl	2661e <__errno>
   272e8:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   272ea:	4622      	mov	r2, r4
	errno = 0;
   272ec:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   272ee:	a901      	add	r1, sp, #4
   272f0:	4628      	mov	r0, r5
   272f2:	f7fd ff2d 	bl	25150 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   272f6:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   272f8:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   272fa:	42ab      	cmp	r3, r5
   272fc:	d103      	bne.n	27306 <string_to_int+0x2a>
		return -ENODATA;
   272fe:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   27302:	b002      	add	sp, #8
   27304:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   27306:	781b      	ldrb	r3, [r3, #0]
   27308:	2b00      	cmp	r3, #0
   2730a:	d1f8      	bne.n	272fe <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   2730c:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   27310:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   27312:	3303      	adds	r3, #3
   27314:	d802      	bhi.n	2731c <string_to_int+0x40>
	return 0;
   27316:	2000      	movs	r0, #0
	*output = temp;
   27318:	6034      	str	r4, [r6, #0]
	return 0;
   2731a:	e7f2      	b.n	27302 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   2731c:	f7ff f97f 	bl	2661e <__errno>
   27320:	6803      	ldr	r3, [r0, #0]
   27322:	2b22      	cmp	r3, #34	; 0x22
   27324:	d1f7      	bne.n	27316 <string_to_int+0x3a>
   27326:	e7ea      	b.n	272fe <string_to_int+0x22>

00027328 <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   27328:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   2732a:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   2732c:	b087      	sub	sp, #28
   2732e:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   27330:	ab01      	add	r3, sp, #4
   27332:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   27334:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   27336:	f7ff ff96 	bl	27266 <at_params_string_get>
	if (err) {
   2733a:	b968      	cbnz	r0, 27358 <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   2733c:	9b01      	ldr	r3, [sp, #4]
	if (string_to_int(str_buf, base, output)) {
   2733e:	4622      	mov	r2, r4
	str_buf[len] = '\0';
   27340:	3318      	adds	r3, #24
   27342:	446b      	add	r3, sp
   27344:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   27348:	4629      	mov	r1, r5
   2734a:	a802      	add	r0, sp, #8
   2734c:	f7ff ffc6 	bl	272dc <string_to_int>
		return -ENODATA;
   27350:	2800      	cmp	r0, #0
   27352:	bf18      	it	ne
   27354:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   27358:	b007      	add	sp, #28
   2735a:	bd30      	pop	{r4, r5, pc}

0002735c <on_modem_init>:
	if (err) {
		LOG_ERR("Failed to unlock PLMN, err %d", err);
		return;
	}
#endif
}
   2735c:	4770      	bx	lr

0002735e <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   2735e:	f7f8 b9cd 	b.w	1f6fc <lte_lc_deinit>

00027362 <on_modem_lib_init>:
	if (ret != 0) {
   27362:	b908      	cbnz	r0, 27368 <on_modem_lib_init+0x6>
   27364:	f7f9 ba18 	b.w	20798 <on_modem_lib_init.part.0>
}
   27368:	4770      	bx	lr

0002736a <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   2736a:	2000      	movs	r0, #0
   2736c:	4770      	bx	lr

0002736e <psa_crypto_init>:
}
   2736e:	2000      	movs	r0, #0
   27370:	4770      	bx	lr

00027372 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   27372:	4700      	bx	r0

00027374 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   27374:	f001 b998 	b.w	286a8 <z_impl_k_busy_wait>

00027378 <nrfx_clock_stop>:
    clock_stop(domain);
   27378:	f7f9 bb00 	b.w	2097c <clock_stop>

0002737c <set_ss_pin_state>:
{
   2737c:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2737e:	7fc0      	ldrb	r0, [r0, #31]
   27380:	28ff      	cmp	r0, #255	; 0xff
   27382:	d006      	beq.n	27392 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
   27384:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
   27386:	079b      	lsls	r3, r3, #30
   27388:	bf58      	it	pl
   2738a:	f081 0101 	eorpl.w	r1, r1, #1
   2738e:	f7f9 bfc9 	b.w	21324 <nrf_gpio_pin_write>
}
   27392:	4770      	bx	lr

00027394 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   27394:	7b0a      	ldrb	r2, [r1, #12]
{
   27396:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   27398:	2a03      	cmp	r2, #3
   2739a:	d829      	bhi.n	273f0 <xfer_completeness_check+0x5c>
   2739c:	e8df f002 	tbb	[pc, r2]
   273a0:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   273a4:	688a      	ldr	r2, [r1, #8]
   273a6:	0350      	lsls	r0, r2, #13
   273a8:	d504      	bpl.n	273b4 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   273aa:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   273ae:	6908      	ldr	r0, [r1, #16]
   273b0:	4290      	cmp	r0, r2
   273b2:	d107      	bne.n	273c4 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   273b4:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   273b6:	0352      	lsls	r2, r2, #13
   273b8:	d41a      	bmi.n	273f0 <xfer_completeness_check+0x5c>
   273ba:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   273be:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   273c0:	4291      	cmp	r1, r2
   273c2:	d015      	beq.n	273f0 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   273c4:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   273c6:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   273c8:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   273cc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   273d0:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   273d2:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   273d6:	6908      	ldr	r0, [r1, #16]
   273d8:	4290      	cmp	r0, r2
   273da:	d1f3      	bne.n	273c4 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   273dc:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   273e0:	e7ed      	b.n	273be <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   273e2:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   273e6:	6909      	ldr	r1, [r1, #16]
   273e8:	e7ea      	b.n	273c0 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   273ea:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   273ee:	e7fa      	b.n	273e6 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   273f0:	2001      	movs	r0, #1
}
   273f2:	4770      	bx	lr

000273f4 <rpc_handle_ctrl_message>:
   273f4:	2902      	cmp	r1, #2
   273f6:	b510      	push	{r4, lr}
   273f8:	4604      	mov	r4, r0
   273fa:	d005      	beq.n	27408 <rpc_handle_ctrl_message+0x14>
   273fc:	2904      	cmp	r1, #4
   273fe:	d001      	beq.n	27404 <rpc_handle_ctrl_message+0x10>
   27400:	2901      	cmp	r1, #1
   27402:	d107      	bne.n	27414 <rpc_handle_ctrl_message+0x20>
   27404:	2000      	movs	r0, #0
   27406:	bd10      	pop	{r4, pc}
   27408:	6880      	ldr	r0, [r0, #8]
   2740a:	2800      	cmp	r0, #0
   2740c:	d0fa      	beq.n	27404 <rpc_handle_ctrl_message+0x10>
   2740e:	f7f6 fdc1 	bl	1df94 <nrf_modem_os_shm_tx_free>
   27412:	e7f7      	b.n	27404 <rpc_handle_ctrl_message+0x10>
   27414:	6880      	ldr	r0, [r0, #8]
   27416:	b108      	cbz	r0, 2741c <rpc_handle_ctrl_message+0x28>
   27418:	f7f6 fdbc 	bl	1df94 <nrf_modem_os_shm_tx_free>
   2741c:	4620      	mov	r0, r4
   2741e:	f7fa fc5f 	bl	21ce0 <rpc_transport_msg_rx_free>
   27422:	e7ef      	b.n	27404 <rpc_handle_ctrl_message+0x10>

00027424 <rpc_init>:
   27424:	f7fa bc4a 	b.w	21cbc <rpc_transport_init>

00027428 <rpc_list_preambles_init>:
   27428:	2200      	movs	r2, #0
   2742a:	b510      	push	{r4, lr}
   2742c:	6804      	ldr	r4, [r0, #0]
   2742e:	4294      	cmp	r4, r2
   27430:	d100      	bne.n	27434 <rpc_list_preambles_init+0xc>
   27432:	bd10      	pop	{r4, pc}
   27434:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   27438:	684b      	ldr	r3, [r1, #4]
   2743a:	3201      	adds	r2, #1
   2743c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   27440:	f043 0303 	orr.w	r3, r3, #3
   27444:	604b      	str	r3, [r1, #4]
   27446:	e7f2      	b.n	2742e <rpc_list_preambles_init+0x6>

00027448 <rpc_transport_ipc_data_rx_resume>:
   27448:	2004      	movs	r0, #4
   2744a:	f7f9 bf2f 	b.w	212ac <nrfx_ipc_receive_event_enable>

0002744e <rpc_transport_ipc_data_rx_suspend>:
   2744e:	2004      	movs	r0, #4
   27450:	f7f9 bf34 	b.w	212bc <nrfx_ipc_receive_event_disable>

00027454 <rpc_transport_ipc_shutdown>:
   27454:	f7f9 befc 	b.w	21250 <nrfx_ipc_uninit>

00027458 <rpc_transport_ipc_msg_alloc>:
   27458:	b538      	push	{r3, r4, r5, lr}
   2745a:	2300      	movs	r3, #0
   2745c:	1d02      	adds	r2, r0, #4
   2745e:	6804      	ldr	r4, [r0, #0]
   27460:	429c      	cmp	r4, r3
   27462:	d801      	bhi.n	27468 <rpc_transport_ipc_msg_alloc+0x10>
   27464:	2300      	movs	r3, #0
   27466:	e016      	b.n	27496 <rpc_transport_ipc_msg_alloc+0x3e>
   27468:	f04f 0400 	mov.w	r4, #0
   2746c:	e8d2 5fcf 	ldaexb	r5, [r2]
   27470:	2d03      	cmp	r5, #3
   27472:	d104      	bne.n	2747e <rpc_transport_ipc_msg_alloc+0x26>
   27474:	e8c2 4fcc 	stlexb	ip, r4, [r2]
   27478:	f1bc 0f00 	cmp.w	ip, #0
   2747c:	d1f6      	bne.n	2746c <rpc_transport_ipc_msg_alloc+0x14>
   2747e:	d002      	beq.n	27486 <rpc_transport_ipc_msg_alloc+0x2e>
   27480:	3208      	adds	r2, #8
   27482:	3301      	adds	r3, #1
   27484:	e7eb      	b.n	2745e <rpc_transport_ipc_msg_alloc+0x6>
   27486:	eb01 1383 	add.w	r3, r1, r3, lsl #6
   2748a:	4618      	mov	r0, r3
   2748c:	2240      	movs	r2, #64	; 0x40
   2748e:	2100      	movs	r1, #0
   27490:	f001 fa39 	bl	28906 <memset>
   27494:	4603      	mov	r3, r0
   27496:	4618      	mov	r0, r3
   27498:	bd38      	pop	{r3, r4, r5, pc}

0002749a <rpc_client_msg_from_rpc_msg_get>:
   2749a:	3008      	adds	r0, #8
   2749c:	4770      	bx	lr

0002749e <rpc_client_msg_alloc>:
   2749e:	b538      	push	{r3, r4, r5, lr}
   274a0:	4605      	mov	r5, r0
   274a2:	b920      	cbnz	r0, 274ae <rpc_client_msg_alloc+0x10>
   274a4:	f7fa fc10 	bl	21cc8 <rpc_transport_msg_alloc>
   274a8:	b980      	cbnz	r0, 274cc <rpc_client_msg_alloc+0x2e>
   274aa:	2000      	movs	r0, #0
   274ac:	bd38      	pop	{r3, r4, r5, pc}
   274ae:	f7f6 fd69 	bl	1df84 <nrf_modem_os_shm_tx_alloc>
   274b2:	4604      	mov	r4, r0
   274b4:	2800      	cmp	r0, #0
   274b6:	d0f8      	beq.n	274aa <rpc_client_msg_alloc+0xc>
   274b8:	f7fa fc06 	bl	21cc8 <rpc_transport_msg_alloc>
   274bc:	b938      	cbnz	r0, 274ce <rpc_client_msg_alloc+0x30>
   274be:	4620      	mov	r0, r4
   274c0:	f7f6 fd68 	bl	1df94 <nrf_modem_os_shm_tx_free>
   274c4:	2001      	movs	r0, #1
   274c6:	f7f6 fd33 	bl	1df30 <nrf_modem_os_event_notify>
   274ca:	e7ee      	b.n	274aa <rpc_client_msg_alloc+0xc>
   274cc:	462c      	mov	r4, r5
   274ce:	60c5      	str	r5, [r0, #12]
   274d0:	f840 4f08 	str.w	r4, [r0, #8]!
   274d4:	e7ea      	b.n	274ac <rpc_client_msg_alloc+0xe>

000274d6 <rpc_client_msg_send>:
   274d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   274da:	4610      	mov	r0, r2
   274dc:	f840 1d08 	str.w	r1, [r0, #-8]!
   274e0:	f7fa bc0a 	b.w	21cf8 <rpc_transport_msg_send>

000274e4 <rpc_client_msg_rx_free>:
   274e4:	3808      	subs	r0, #8
   274e6:	f7fa bbfb 	b.w	21ce0 <rpc_transport_msg_rx_free>

000274ea <rpc_client_msg_data_rx_free>:
   274ea:	f7fa bbff 	b.w	21cec <rpc_transport_msg_data_rx_free>

000274ee <rpc_client_msg_data_tx_size>:
   274ee:	f7fa bbf1 	b.w	21cd4 <rpc_transport_msg_data_tx_size>

000274f2 <rpc_client_msg_data_tx_alloc>:
   274f2:	f7f6 bd47 	b.w	1df84 <nrf_modem_os_shm_tx_alloc>

000274f6 <rpc_client_msg_data_tx_free>:
   274f6:	b508      	push	{r3, lr}
   274f8:	f7f6 fd4c 	bl	1df94 <nrf_modem_os_shm_tx_free>
   274fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   27500:	2001      	movs	r0, #1
   27502:	f7f6 bd15 	b.w	1df30 <nrf_modem_os_event_notify>

00027506 <sockaddr_init>:
   27506:	2904      	cmp	r1, #4
   27508:	b570      	push	{r4, r5, r6, lr}
   2750a:	4605      	mov	r5, r0
   2750c:	4616      	mov	r6, r2
   2750e:	d003      	beq.n	27518 <sockaddr_init+0x12>
   27510:	2910      	cmp	r1, #16
   27512:	d015      	beq.n	27540 <sockaddr_init+0x3a>
   27514:	2400      	movs	r4, #0
   27516:	e011      	b.n	2753c <sockaddr_init+0x36>
   27518:	2010      	movs	r0, #16
   2751a:	f7f6 fd25 	bl	1df68 <nrf_modem_os_alloc>
   2751e:	4604      	mov	r4, r0
   27520:	2800      	cmp	r0, #0
   27522:	d0f7      	beq.n	27514 <sockaddr_init+0xe>
   27524:	220f      	movs	r2, #15
   27526:	2100      	movs	r1, #0
   27528:	3001      	adds	r0, #1
   2752a:	f001 f9ec 	bl	28906 <memset>
   2752e:	2310      	movs	r3, #16
   27530:	7023      	strb	r3, [r4, #0]
   27532:	2301      	movs	r3, #1
   27534:	8126      	strh	r6, [r4, #8]
   27536:	6063      	str	r3, [r4, #4]
   27538:	682b      	ldr	r3, [r5, #0]
   2753a:	60e3      	str	r3, [r4, #12]
   2753c:	4620      	mov	r0, r4
   2753e:	bd70      	pop	{r4, r5, r6, pc}
   27540:	2024      	movs	r0, #36	; 0x24
   27542:	f7f6 fd11 	bl	1df68 <nrf_modem_os_alloc>
   27546:	4604      	mov	r4, r0
   27548:	2800      	cmp	r0, #0
   2754a:	d0e3      	beq.n	27514 <sockaddr_init+0xe>
   2754c:	2223      	movs	r2, #35	; 0x23
   2754e:	2100      	movs	r1, #0
   27550:	3001      	adds	r0, #1
   27552:	f001 f9d8 	bl	28906 <memset>
   27556:	2324      	movs	r3, #36	; 0x24
   27558:	7023      	strb	r3, [r4, #0]
   2755a:	2302      	movs	r3, #2
   2755c:	4628      	mov	r0, r5
   2755e:	6063      	str	r3, [r4, #4]
   27560:	8126      	strh	r6, [r4, #8]
   27562:	f104 0310 	add.w	r3, r4, #16
   27566:	f105 0210 	add.w	r2, r5, #16
   2756a:	f850 1b04 	ldr.w	r1, [r0], #4
   2756e:	4290      	cmp	r0, r2
   27570:	f843 1b04 	str.w	r1, [r3], #4
   27574:	d1f9      	bne.n	2756a <sockaddr_init+0x64>
   27576:	e7e1      	b.n	2753c <sockaddr_init+0x36>

00027578 <sock_pollcb>:
   27578:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2757a:	2500      	movs	r5, #0
   2757c:	6803      	ldr	r3, [r0, #0]
   2757e:	4604      	mov	r4, r0
   27580:	9300      	str	r3, [sp, #0]
   27582:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   27584:	4668      	mov	r0, sp
   27586:	f8ad 5006 	strh.w	r5, [sp, #6]
   2758a:	f8ad 3004 	strh.w	r3, [sp, #4]
   2758e:	f000 fcc2 	bl	27f16 <nrf_poll_one>
   27592:	b138      	cbz	r0, 275a4 <sock_pollcb+0x2c>
   27594:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27596:	4668      	mov	r0, sp
   27598:	4798      	blx	r3
   2759a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   2759e:	b10b      	cbz	r3, 275a4 <sock_pollcb+0x2c>
   275a0:	6365      	str	r5, [r4, #52]	; 0x34
   275a2:	63a5      	str	r5, [r4, #56]	; 0x38
   275a4:	b003      	add	sp, #12
   275a6:	bd30      	pop	{r4, r5, pc}

000275a8 <sock_has_pkt>:
   275a8:	6840      	ldr	r0, [r0, #4]
   275aa:	3800      	subs	r0, #0
   275ac:	bf18      	it	ne
   275ae:	2001      	movne	r0, #1
   275b0:	4770      	bx	lr

000275b2 <sock_pkt_append>:
   275b2:	2300      	movs	r3, #0
   275b4:	600b      	str	r3, [r1, #0]
   275b6:	6883      	ldr	r3, [r0, #8]
   275b8:	b913      	cbnz	r3, 275c0 <sock_pkt_append+0xe>
   275ba:	e9c0 1101 	strd	r1, r1, [r0, #4]
   275be:	4770      	bx	lr
   275c0:	6019      	str	r1, [r3, #0]
   275c2:	6081      	str	r1, [r0, #8]
   275c4:	4770      	bx	lr

000275c6 <sock_pkt_remove>:
   275c6:	b538      	push	{r3, r4, r5, lr}
   275c8:	4605      	mov	r5, r0
   275ca:	460c      	mov	r4, r1
   275cc:	f7fa fb9a 	bl	21d04 <rpc_transport_data_rx_suspend>
   275d0:	68aa      	ldr	r2, [r5, #8]
   275d2:	6823      	ldr	r3, [r4, #0]
   275d4:	4294      	cmp	r4, r2
   275d6:	606b      	str	r3, [r5, #4]
   275d8:	bf08      	it	eq
   275da:	60ab      	streq	r3, [r5, #8]
   275dc:	2300      	movs	r3, #0
   275de:	4620      	mov	r0, r4
   275e0:	6023      	str	r3, [r4, #0]
   275e2:	f000 f904 	bl	277ee <pkt_free>
   275e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   275ea:	f7fa bb91 	b.w	21d10 <rpc_transport_data_rx_resume>

000275ee <sock_pkt_peek_head>:
   275ee:	6840      	ldr	r0, [r0, #4]
   275f0:	4770      	bx	lr

000275f2 <sock_is_stream>:
   275f2:	6900      	ldr	r0, [r0, #16]
   275f4:	1e43      	subs	r3, r0, #1
   275f6:	4258      	negs	r0, r3
   275f8:	4158      	adcs	r0, r3
   275fa:	4770      	bx	lr

000275fc <sock_is_datagram>:
   275fc:	6900      	ldr	r0, [r0, #16]
   275fe:	1e83      	subs	r3, r0, #2
   27600:	4258      	negs	r0, r3
   27602:	4158      	adcs	r0, r3
   27604:	4770      	bx	lr

00027606 <sock_is_raw>:
   27606:	6900      	ldr	r0, [r0, #16]
   27608:	1ec3      	subs	r3, r0, #3
   2760a:	4258      	negs	r0, r3
   2760c:	4158      	adcs	r0, r3
   2760e:	4770      	bx	lr

00027610 <sock_proto_is_secure>:
   27610:	6940      	ldr	r0, [r0, #20]
   27612:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   27616:	d005      	beq.n	27624 <sock_proto_is_secure+0x14>
   27618:	f240 1311 	movw	r3, #273	; 0x111
   2761c:	1ac3      	subs	r3, r0, r3
   2761e:	4258      	negs	r0, r3
   27620:	4158      	adcs	r0, r3
   27622:	4770      	bx	lr
   27624:	2001      	movs	r0, #1
   27626:	4770      	bx	lr

00027628 <sock_is_connecting>:
   27628:	7f00      	ldrb	r0, [r0, #28]
   2762a:	f3c0 0080 	ubfx	r0, r0, #2, #1
   2762e:	4770      	bx	lr

00027630 <sock_is_connected>:
   27630:	7f00      	ldrb	r0, [r0, #28]
   27632:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   27636:	4770      	bx	lr

00027638 <sock_is_attaching>:
   27638:	7f00      	ldrb	r0, [r0, #28]
   2763a:	f3c0 1000 	ubfx	r0, r0, #4, #1
   2763e:	4770      	bx	lr

00027640 <sock_is_nonblock>:
   27640:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   27642:	f000 0001 	and.w	r0, r0, #1
   27646:	4770      	bx	lr

00027648 <sock_is_closed>:
   27648:	7f00      	ldrb	r0, [r0, #28]
   2764a:	f000 0001 	and.w	r0, r0, #1
   2764e:	4770      	bx	lr

00027650 <sock_is_local_closed>:
   27650:	7f00      	ldrb	r0, [r0, #28]
   27652:	f3c0 0040 	ubfx	r0, r0, #1, #1
   27656:	4770      	bx	lr

00027658 <sock_is_eof>:
   27658:	6903      	ldr	r3, [r0, #16]
   2765a:	2b01      	cmp	r3, #1
   2765c:	d105      	bne.n	2766a <sock_is_eof+0x12>
   2765e:	6980      	ldr	r0, [r0, #24]
   27660:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   27664:	4258      	negs	r0, r3
   27666:	4158      	adcs	r0, r3
   27668:	4770      	bx	lr
   2766a:	2000      	movs	r0, #0
   2766c:	4770      	bx	lr

0002766e <sock_has_stream_error>:
   2766e:	7f00      	ldrb	r0, [r0, #28]
   27670:	09c0      	lsrs	r0, r0, #7
   27672:	4770      	bx	lr

00027674 <sock_has_error>:
   27674:	6983      	ldr	r3, [r0, #24]
   27676:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   2767a:	bf14      	ite	ne
   2767c:	2001      	movne	r0, #1
   2767e:	2000      	moveq	r0, #0
   27680:	4770      	bx	lr

00027682 <sock_has_flow_control>:
   27682:	7f00      	ldrb	r0, [r0, #28]
   27684:	f3c0 1080 	ubfx	r0, r0, #6, #1
   27688:	4770      	bx	lr

0002768a <sock_has_pollcb>:
   2768a:	6b40      	ldr	r0, [r0, #52]	; 0x34
   2768c:	3800      	subs	r0, #0
   2768e:	bf18      	it	ne
   27690:	2001      	movne	r0, #1
   27692:	4770      	bx	lr

00027694 <sock_has_rai_no_data>:
   27694:	6b00      	ldr	r0, [r0, #48]	; 0x30
   27696:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
   2769a:	4258      	negs	r0, r3
   2769c:	4158      	adcs	r0, r3
   2769e:	4770      	bx	lr

000276a0 <sock_can_read>:
   276a0:	6840      	ldr	r0, [r0, #4]
   276a2:	3800      	subs	r0, #0
   276a4:	bf18      	it	ne
   276a6:	2001      	movne	r0, #1
   276a8:	4770      	bx	lr

000276aa <sock_can_accept>:
   276aa:	7f40      	ldrb	r0, [r0, #29]
   276ac:	3800      	subs	r0, #0
   276ae:	bf18      	it	ne
   276b0:	2001      	movne	r0, #1
   276b2:	4770      	bx	lr

000276b4 <sock_can_send>:
   276b4:	b510      	push	{r4, lr}
   276b6:	4602      	mov	r2, r0
   276b8:	6904      	ldr	r4, [r0, #16]
   276ba:	f7ff ffa9 	bl	27610 <sock_proto_is_secure>
   276be:	2c01      	cmp	r4, #1
   276c0:	4601      	mov	r1, r0
   276c2:	7f13      	ldrb	r3, [r2, #28]
   276c4:	d103      	bne.n	276ce <sock_can_send+0x1a>
   276c6:	071c      	lsls	r4, r3, #28
   276c8:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   276cc:	d50b      	bpl.n	276e6 <sock_can_send+0x32>
   276ce:	b931      	cbnz	r1, 276de <sock_can_send+0x2a>
   276d0:	07d9      	lsls	r1, r3, #31
   276d2:	d40b      	bmi.n	276ec <sock_can_send+0x38>
   276d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   276d8:	f1c3 0001 	rsb	r0, r3, #1
   276dc:	e003      	b.n	276e6 <sock_can_send+0x32>
   276de:	069a      	lsls	r2, r3, #26
   276e0:	f3c3 1040 	ubfx	r0, r3, #5, #1
   276e4:	d4f4      	bmi.n	276d0 <sock_can_send+0x1c>
   276e6:	f000 0001 	and.w	r0, r0, #1
   276ea:	bd10      	pop	{r4, pc}
   276ec:	2000      	movs	r0, #0
   276ee:	e7fa      	b.n	276e6 <sock_can_send+0x32>

000276f0 <sock_rcvtimeo_ms_get>:
   276f0:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   276f4:	ea53 0102 	orrs.w	r1, r3, r2
   276f8:	d009      	beq.n	2770e <sock_rcvtimeo_ms_get+0x1e>
   276fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   276fe:	fbb3 f0f1 	udiv	r0, r3, r1
   27702:	fb01 0002 	mla	r0, r1, r2, r0
   27706:	2801      	cmp	r0, #1
   27708:	bfb8      	it	lt
   2770a:	2001      	movlt	r0, #1
   2770c:	4770      	bx	lr
   2770e:	f04f 30ff 	mov.w	r0, #4294967295
   27712:	4770      	bx	lr

00027714 <sock_sndtimeo_ms_get>:
   27714:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   27718:	ea53 0102 	orrs.w	r1, r3, r2
   2771c:	d009      	beq.n	27732 <sock_sndtimeo_ms_get+0x1e>
   2771e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   27722:	fbb3 f0f1 	udiv	r0, r3, r1
   27726:	fb01 0002 	mla	r0, r1, r2, r0
   2772a:	2801      	cmp	r0, #1
   2772c:	bfb8      	it	lt
   2772e:	2001      	movlt	r0, #1
   27730:	4770      	bx	lr
   27732:	f04f 30ff 	mov.w	r0, #4294967295
   27736:	4770      	bx	lr

00027738 <sock_family_is_valid>:
   27738:	3801      	subs	r0, #1
   2773a:	2802      	cmp	r0, #2
   2773c:	bf8c      	ite	hi
   2773e:	2000      	movhi	r0, #0
   27740:	2001      	movls	r0, #1
   27742:	4770      	bx	lr

00027744 <sock_type_is_valid>:
   27744:	3801      	subs	r0, #1
   27746:	2802      	cmp	r0, #2
   27748:	bf8c      	ite	hi
   2774a:	2000      	movhi	r0, #0
   2774c:	2001      	movls	r0, #1
   2774e:	4770      	bx	lr

00027750 <sock_proto_supports_type>:
   27750:	2903      	cmp	r1, #3
   27752:	d015      	beq.n	27780 <sock_proto_supports_type+0x30>
   27754:	2811      	cmp	r0, #17
   27756:	d00c      	beq.n	27772 <sock_proto_supports_type+0x22>
   27758:	dc04      	bgt.n	27764 <sock_proto_supports_type+0x14>
   2775a:	b188      	cbz	r0, 27780 <sock_proto_supports_type+0x30>
   2775c:	2806      	cmp	r0, #6
   2775e:	d00a      	beq.n	27776 <sock_proto_supports_type+0x26>
   27760:	2000      	movs	r0, #0
   27762:	4770      	bx	lr
   27764:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   27768:	d005      	beq.n	27776 <sock_proto_supports_type+0x26>
   2776a:	f240 1311 	movw	r3, #273	; 0x111
   2776e:	4298      	cmp	r0, r3
   27770:	d1f6      	bne.n	27760 <sock_proto_supports_type+0x10>
   27772:	2902      	cmp	r1, #2
   27774:	e000      	b.n	27778 <sock_proto_supports_type+0x28>
   27776:	2901      	cmp	r1, #1
   27778:	bf14      	ite	ne
   2777a:	2000      	movne	r0, #0
   2777c:	2001      	moveq	r0, #1
   2777e:	4770      	bx	lr
   27780:	2001      	movs	r0, #1
   27782:	4770      	bx	lr

00027784 <sock_sockaddr_len_is_valid>:
   27784:	6843      	ldr	r3, [r0, #4]
   27786:	2b01      	cmp	r3, #1
   27788:	d003      	beq.n	27792 <sock_sockaddr_len_is_valid+0xe>
   2778a:	2b02      	cmp	r3, #2
   2778c:	d009      	beq.n	277a2 <sock_sockaddr_len_is_valid+0x1e>
   2778e:	2000      	movs	r0, #0
   27790:	4770      	bx	lr
   27792:	7803      	ldrb	r3, [r0, #0]
   27794:	2b10      	cmp	r3, #16
   27796:	d1fa      	bne.n	2778e <sock_sockaddr_len_is_valid+0xa>
   27798:	2910      	cmp	r1, #16
   2779a:	bf14      	ite	ne
   2779c:	2000      	movne	r0, #0
   2779e:	2001      	moveq	r0, #1
   277a0:	4770      	bx	lr
   277a2:	7803      	ldrb	r3, [r0, #0]
   277a4:	2b24      	cmp	r3, #36	; 0x24
   277a6:	d1f2      	bne.n	2778e <sock_sockaddr_len_is_valid+0xa>
   277a8:	2924      	cmp	r1, #36	; 0x24
   277aa:	e7f6      	b.n	2779a <sock_sockaddr_len_is_valid+0x16>

000277ac <sock_sockaddr_fam_is_valid>:
   277ac:	68c3      	ldr	r3, [r0, #12]
   277ae:	2b01      	cmp	r3, #1
   277b0:	d003      	beq.n	277ba <sock_sockaddr_fam_is_valid+0xe>
   277b2:	2b02      	cmp	r3, #2
   277b4:	d007      	beq.n	277c6 <sock_sockaddr_fam_is_valid+0x1a>
   277b6:	2001      	movs	r0, #1
   277b8:	4770      	bx	lr
   277ba:	6848      	ldr	r0, [r1, #4]
   277bc:	2801      	cmp	r0, #1
   277be:	bf14      	ite	ne
   277c0:	2000      	movne	r0, #0
   277c2:	2001      	moveq	r0, #1
   277c4:	4770      	bx	lr
   277c6:	6848      	ldr	r0, [r1, #4]
   277c8:	2802      	cmp	r0, #2
   277ca:	e7f8      	b.n	277be <sock_sockaddr_fam_is_valid+0x12>

000277cc <pkt_has_next>:
   277cc:	b100      	cbz	r0, 277d0 <pkt_has_next+0x4>
   277ce:	6800      	ldr	r0, [r0, #0]
   277d0:	3800      	subs	r0, #0
   277d2:	bf18      	it	ne
   277d4:	2001      	movne	r0, #1
   277d6:	4770      	bx	lr

000277d8 <pkt_peek_next>:
   277d8:	b100      	cbz	r0, 277dc <pkt_peek_next+0x4>
   277da:	6800      	ldr	r0, [r0, #0]
   277dc:	4770      	bx	lr

000277de <pkt_bytes_get>:
   277de:	8943      	ldrh	r3, [r0, #10]
   277e0:	6840      	ldr	r0, [r0, #4]
   277e2:	4418      	add	r0, r3
   277e4:	4770      	bx	lr

000277e6 <pkt_bytes_left>:
   277e6:	8902      	ldrh	r2, [r0, #8]
   277e8:	8940      	ldrh	r0, [r0, #10]
   277ea:	1a10      	subs	r0, r2, r0
   277ec:	4770      	bx	lr

000277ee <pkt_free>:
   277ee:	b510      	push	{r4, lr}
   277f0:	4604      	mov	r4, r0
   277f2:	6840      	ldr	r0, [r0, #4]
   277f4:	f7ff fe79 	bl	274ea <rpc_client_msg_data_rx_free>
   277f8:	68e0      	ldr	r0, [r4, #12]
   277fa:	b108      	cbz	r0, 27800 <pkt_free+0x12>
   277fc:	f7f6 fbbc 	bl	1df78 <nrf_modem_os_free>
   27800:	4620      	mov	r0, r4
   27802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27806:	f7f6 bbb7 	b.w	1df78 <nrf_modem_os_free>

0002780a <pkt_flush>:
   2780a:	b510      	push	{r4, lr}
   2780c:	4604      	mov	r4, r0
   2780e:	6820      	ldr	r0, [r4, #0]
   27810:	b900      	cbnz	r0, 27814 <pkt_flush+0xa>
   27812:	bd10      	pop	{r4, pc}
   27814:	6862      	ldr	r2, [r4, #4]
   27816:	6803      	ldr	r3, [r0, #0]
   27818:	4290      	cmp	r0, r2
   2781a:	6023      	str	r3, [r4, #0]
   2781c:	bf08      	it	eq
   2781e:	6063      	streq	r3, [r4, #4]
   27820:	f7ff ffe5 	bl	277ee <pkt_free>
   27824:	e7f3      	b.n	2780e <pkt_flush+0x4>

00027826 <on_conf_dnssrv_res>:
   27826:	f000 bc67 	b.w	280f8 <res_forward>

0002782a <nrf_freeaddrinfo>:
   2782a:	b510      	push	{r4, lr}
   2782c:	4604      	mov	r4, r0
   2782e:	b160      	cbz	r0, 2784a <nrf_freeaddrinfo+0x20>
   27830:	6940      	ldr	r0, [r0, #20]
   27832:	b108      	cbz	r0, 27838 <nrf_freeaddrinfo+0xe>
   27834:	f7f6 fba0 	bl	1df78 <nrf_modem_os_free>
   27838:	69a0      	ldr	r0, [r4, #24]
   2783a:	b108      	cbz	r0, 27840 <nrf_freeaddrinfo+0x16>
   2783c:	f7f6 fb9c 	bl	1df78 <nrf_modem_os_free>
   27840:	4620      	mov	r0, r4
   27842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27846:	f7f6 bb97 	b.w	1df78 <nrf_modem_os_free>
   2784a:	bd10      	pop	{r4, pc}

0002784c <on_getifaddrs_res>:
   2784c:	f000 bc54 	b.w	280f8 <res_forward>

00027850 <nrf_socket>:
   27850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27854:	4681      	mov	r9, r0
   27856:	460f      	mov	r7, r1
   27858:	4616      	mov	r6, r2
   2785a:	f7ff ff6d 	bl	27738 <sock_family_is_valid>
   2785e:	b930      	cbnz	r0, 2786e <nrf_socket+0x1e>
   27860:	206a      	movs	r0, #106	; 0x6a
   27862:	f7ff f9a6 	bl	26bb2 <nrf_modem_os_errno_set>
   27866:	f04f 30ff 	mov.w	r0, #4294967295
   2786a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2786e:	4630      	mov	r0, r6
   27870:	f7fa fdb6 	bl	223e0 <sock_proto_is_valid>
   27874:	b908      	cbnz	r0, 2787a <nrf_socket+0x2a>
   27876:	207b      	movs	r0, #123	; 0x7b
   27878:	e7f3      	b.n	27862 <nrf_socket+0x12>
   2787a:	4638      	mov	r0, r7
   2787c:	f7ff ff62 	bl	27744 <sock_type_is_valid>
   27880:	b908      	cbnz	r0, 27886 <nrf_socket+0x36>
   27882:	206b      	movs	r0, #107	; 0x6b
   27884:	e7ed      	b.n	27862 <nrf_socket+0x12>
   27886:	4639      	mov	r1, r7
   27888:	4630      	mov	r0, r6
   2788a:	f7ff ff61 	bl	27750 <sock_proto_supports_type>
   2788e:	2800      	cmp	r0, #0
   27890:	d0f7      	beq.n	27882 <nrf_socket+0x32>
   27892:	f7fa fd2d 	bl	222f0 <sock_open>
   27896:	4605      	mov	r5, r0
   27898:	b908      	cbnz	r0, 2789e <nrf_socket+0x4e>
   2789a:	2017      	movs	r0, #23
   2789c:	e7e1      	b.n	27862 <nrf_socket+0x12>
   2789e:	2000      	movs	r0, #0
   278a0:	f7ff fdfd 	bl	2749e <rpc_client_msg_alloc>
   278a4:	4604      	mov	r4, r0
   278a6:	b920      	cbnz	r0, 278b2 <nrf_socket+0x62>
   278a8:	6828      	ldr	r0, [r5, #0]
   278aa:	f7fa fd59 	bl	22360 <_sock_close>
   278ae:	2069      	movs	r0, #105	; 0x69
   278b0:	e7d7      	b.n	27862 <nrf_socket+0x12>
   278b2:	2300      	movs	r3, #0
   278b4:	220c      	movs	r2, #12
   278b6:	f04f 38ff 	mov.w	r8, #4294967295
   278ba:	7202      	strb	r2, [r0, #8]
   278bc:	7243      	strb	r3, [r0, #9]
   278be:	7283      	strb	r3, [r0, #10]
   278c0:	72c3      	strb	r3, [r0, #11]
   278c2:	f880 8010 	strb.w	r8, [r0, #16]
   278c6:	f880 8011 	strb.w	r8, [r0, #17]
   278ca:	f880 8012 	strb.w	r8, [r0, #18]
   278ce:	f880 8013 	strb.w	r8, [r0, #19]
   278d2:	4648      	mov	r0, r9
   278d4:	f7fb fc72 	bl	231bc <nrf_af_to_rpc_af>
   278d8:	6160      	str	r0, [r4, #20]
   278da:	4638      	mov	r0, r7
   278dc:	f000 fb85 	bl	27fea <nrf_type_to_rpc_type>
   278e0:	4601      	mov	r1, r0
   278e2:	61a0      	str	r0, [r4, #24]
   278e4:	4630      	mov	r0, r6
   278e6:	f000 fb81 	bl	27fec <nrf_proto_to_rpc_proto>
   278ea:	4621      	mov	r1, r4
   278ec:	61e0      	str	r0, [r4, #28]
   278ee:	f247 0001 	movw	r0, #28673	; 0x7001
   278f2:	e9c5 9703 	strd	r9, r7, [r5, #12]
   278f6:	616e      	str	r6, [r5, #20]
   278f8:	f000 fbcf 	bl	2809a <req_forward>
   278fc:	4604      	mov	r4, r0
   278fe:	b120      	cbz	r0, 2790a <nrf_socket+0xba>
   27900:	4640      	mov	r0, r8
   27902:	f7fa fd2d 	bl	22360 <_sock_close>
   27906:	4620      	mov	r0, r4
   27908:	e7ab      	b.n	27862 <nrf_socket+0x12>
   2790a:	6828      	ldr	r0, [r5, #0]
   2790c:	e7ad      	b.n	2786a <nrf_socket+0x1a>

0002790e <nrf_connect>:
   2790e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27910:	4607      	mov	r7, r0
   27912:	460d      	mov	r5, r1
   27914:	4616      	mov	r6, r2
   27916:	f7fa fd11 	bl	2233c <sock_find>
   2791a:	4604      	mov	r4, r0
   2791c:	b938      	cbnz	r0, 2792e <nrf_connect+0x20>
   2791e:	2009      	movs	r0, #9
   27920:	f7ff f947 	bl	26bb2 <nrf_modem_os_errno_set>
   27924:	f04f 35ff 	mov.w	r5, #4294967295
   27928:	4628      	mov	r0, r5
   2792a:	b003      	add	sp, #12
   2792c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2792e:	f7ff fe8b 	bl	27648 <sock_is_closed>
   27932:	b108      	cbz	r0, 27938 <nrf_connect+0x2a>
   27934:	69a0      	ldr	r0, [r4, #24]
   27936:	e7f3      	b.n	27920 <nrf_connect+0x12>
   27938:	4620      	mov	r0, r4
   2793a:	f7ff fe79 	bl	27630 <sock_is_connected>
   2793e:	b108      	cbz	r0, 27944 <nrf_connect+0x36>
   27940:	207f      	movs	r0, #127	; 0x7f
   27942:	e7ed      	b.n	27920 <nrf_connect+0x12>
   27944:	4620      	mov	r0, r4
   27946:	f7ff fe6f 	bl	27628 <sock_is_connecting>
   2794a:	b108      	cbz	r0, 27950 <nrf_connect+0x42>
   2794c:	2078      	movs	r0, #120	; 0x78
   2794e:	e7e7      	b.n	27920 <nrf_connect+0x12>
   27950:	b90d      	cbnz	r5, 27956 <nrf_connect+0x48>
   27952:	200e      	movs	r0, #14
   27954:	e7e4      	b.n	27920 <nrf_connect+0x12>
   27956:	4631      	mov	r1, r6
   27958:	4628      	mov	r0, r5
   2795a:	f7ff ff13 	bl	27784 <sock_sockaddr_len_is_valid>
   2795e:	b908      	cbnz	r0, 27964 <nrf_connect+0x56>
   27960:	2016      	movs	r0, #22
   27962:	e7dd      	b.n	27920 <nrf_connect+0x12>
   27964:	4629      	mov	r1, r5
   27966:	4620      	mov	r0, r4
   27968:	f7ff ff20 	bl	277ac <sock_sockaddr_fam_is_valid>
   2796c:	b908      	cbnz	r0, 27972 <nrf_connect+0x64>
   2796e:	206a      	movs	r0, #106	; 0x6a
   27970:	e7d6      	b.n	27920 <nrf_connect+0x12>
   27972:	4620      	mov	r0, r4
   27974:	f7ff fe64 	bl	27640 <sock_is_nonblock>
   27978:	4606      	mov	r6, r0
   2797a:	b118      	cbz	r0, 27984 <nrf_connect+0x76>
   2797c:	6966      	ldr	r6, [r4, #20]
   2797e:	3e11      	subs	r6, #17
   27980:	bf18      	it	ne
   27982:	2601      	movne	r6, #1
   27984:	2000      	movs	r0, #0
   27986:	f7ff fd8a 	bl	2749e <rpc_client_msg_alloc>
   2798a:	4602      	mov	r2, r0
   2798c:	b908      	cbnz	r0, 27992 <nrf_connect+0x84>
   2798e:	2069      	movs	r0, #105	; 0x69
   27990:	e7c6      	b.n	27920 <nrf_connect+0x12>
   27992:	2300      	movs	r3, #0
   27994:	2114      	movs	r1, #20
   27996:	6107      	str	r7, [r0, #16]
   27998:	7201      	strb	r1, [r0, #8]
   2799a:	7243      	strb	r3, [r0, #9]
   2799c:	7283      	strb	r3, [r0, #10]
   2799e:	72c3      	strb	r3, [r0, #11]
   279a0:	6869      	ldr	r1, [r5, #4]
   279a2:	2901      	cmp	r1, #1
   279a4:	d00e      	beq.n	279c4 <nrf_connect+0xb6>
   279a6:	2902      	cmp	r1, #2
   279a8:	d014      	beq.n	279d4 <nrf_connect+0xc6>
   279aa:	7f23      	ldrb	r3, [r4, #28]
   279ac:	f247 0102 	movw	r1, #28674	; 0x7002
   279b0:	f043 0304 	orr.w	r3, r3, #4
   279b4:	7723      	strb	r3, [r4, #28]
   279b6:	2004      	movs	r0, #4
   279b8:	60d6      	str	r6, [r2, #12]
   279ba:	f7ff fd8c 	bl	274d6 <rpc_client_msg_send>
   279be:	b1ce      	cbz	r6, 279f4 <nrf_connect+0xe6>
   279c0:	2077      	movs	r0, #119	; 0x77
   279c2:	e7ad      	b.n	27920 <nrf_connect+0x12>
   279c4:	8929      	ldrh	r1, [r5, #8]
   279c6:	75c3      	strb	r3, [r0, #23]
   279c8:	8281      	strh	r1, [r0, #20]
   279ca:	2104      	movs	r1, #4
   279cc:	7581      	strb	r1, [r0, #22]
   279ce:	68eb      	ldr	r3, [r5, #12]
   279d0:	6183      	str	r3, [r0, #24]
   279d2:	e7ea      	b.n	279aa <nrf_connect+0x9c>
   279d4:	8929      	ldrh	r1, [r5, #8]
   279d6:	75c3      	strb	r3, [r0, #23]
   279d8:	8281      	strh	r1, [r0, #20]
   279da:	2110      	movs	r1, #16
   279dc:	186b      	adds	r3, r5, r1
   279de:	7581      	strb	r1, [r0, #22]
   279e0:	3520      	adds	r5, #32
   279e2:	f100 0118 	add.w	r1, r0, #24
   279e6:	f853 0b04 	ldr.w	r0, [r3], #4
   279ea:	42ab      	cmp	r3, r5
   279ec:	f841 0b04 	str.w	r0, [r1], #4
   279f0:	d1f9      	bne.n	279e6 <nrf_connect+0xd8>
   279f2:	e7da      	b.n	279aa <nrf_connect+0x9c>
   279f4:	4620      	mov	r0, r4
   279f6:	f7ff fe8d 	bl	27714 <sock_sndtimeo_ms_get>
   279fa:	9001      	str	r0, [sp, #4]
   279fc:	4620      	mov	r0, r4
   279fe:	f7ff fe13 	bl	27628 <sock_is_connecting>
   27a02:	b918      	cbnz	r0, 27a0c <nrf_connect+0xfe>
   27a04:	69a5      	ldr	r5, [r4, #24]
   27a06:	b17d      	cbz	r5, 27a28 <nrf_connect+0x11a>
   27a08:	4628      	mov	r0, r5
   27a0a:	e789      	b.n	27920 <nrf_connect+0x12>
   27a0c:	2002      	movs	r0, #2
   27a0e:	a901      	add	r1, sp, #4
   27a10:	f7f6 f9b0 	bl	1dd74 <nrf_modem_os_timedwait>
   27a14:	f110 0f0b 	cmn.w	r0, #11
   27a18:	d004      	beq.n	27a24 <nrf_connect+0x116>
   27a1a:	2800      	cmp	r0, #0
   27a1c:	d0ee      	beq.n	279fc <nrf_connect+0xee>
   27a1e:	f000 ff43 	bl	288a8 <abs>
   27a22:	e77d      	b.n	27920 <nrf_connect+0x12>
   27a24:	2074      	movs	r0, #116	; 0x74
   27a26:	e77b      	b.n	27920 <nrf_connect+0x12>
   27a28:	4620      	mov	r0, r4
   27a2a:	f7ff fdf1 	bl	27610 <sock_proto_is_secure>
   27a2e:	2800      	cmp	r0, #0
   27a30:	f43f af7a 	beq.w	27928 <nrf_connect+0x1a>
   27a34:	4620      	mov	r0, r4
   27a36:	9901      	ldr	r1, [sp, #4]
   27a38:	f7fb fb4a 	bl	230d0 <tls_attach>
   27a3c:	4605      	mov	r5, r0
   27a3e:	e773      	b.n	27928 <nrf_connect+0x1a>

00027a40 <nrf_bind>:
   27a40:	b538      	push	{r3, r4, r5, lr}
   27a42:	4605      	mov	r5, r0
   27a44:	460c      	mov	r4, r1
   27a46:	f7fa fc79 	bl	2233c <sock_find>
   27a4a:	b930      	cbnz	r0, 27a5a <nrf_bind+0x1a>
   27a4c:	2009      	movs	r0, #9
   27a4e:	f7ff f8b0 	bl	26bb2 <nrf_modem_os_errno_set>
   27a52:	f04f 33ff 	mov.w	r3, #4294967295
   27a56:	4618      	mov	r0, r3
   27a58:	bd38      	pop	{r3, r4, r5, pc}
   27a5a:	b90c      	cbnz	r4, 27a60 <nrf_bind+0x20>
   27a5c:	200e      	movs	r0, #14
   27a5e:	e7f6      	b.n	27a4e <nrf_bind+0xe>
   27a60:	4621      	mov	r1, r4
   27a62:	f7ff fea3 	bl	277ac <sock_sockaddr_fam_is_valid>
   27a66:	b908      	cbnz	r0, 27a6c <nrf_bind+0x2c>
   27a68:	206a      	movs	r0, #106	; 0x6a
   27a6a:	e7f0      	b.n	27a4e <nrf_bind+0xe>
   27a6c:	2000      	movs	r0, #0
   27a6e:	f7ff fd16 	bl	2749e <rpc_client_msg_alloc>
   27a72:	4601      	mov	r1, r0
   27a74:	b908      	cbnz	r0, 27a7a <nrf_bind+0x3a>
   27a76:	2069      	movs	r0, #105	; 0x69
   27a78:	e7e9      	b.n	27a4e <nrf_bind+0xe>
   27a7a:	2300      	movs	r3, #0
   27a7c:	2214      	movs	r2, #20
   27a7e:	6105      	str	r5, [r0, #16]
   27a80:	7202      	strb	r2, [r0, #8]
   27a82:	7243      	strb	r3, [r0, #9]
   27a84:	7283      	strb	r3, [r0, #10]
   27a86:	72c3      	strb	r3, [r0, #11]
   27a88:	6862      	ldr	r2, [r4, #4]
   27a8a:	2a01      	cmp	r2, #1
   27a8c:	d009      	beq.n	27aa2 <nrf_bind+0x62>
   27a8e:	2a02      	cmp	r2, #2
   27a90:	d00f      	beq.n	27ab2 <nrf_bind+0x72>
   27a92:	f247 0005 	movw	r0, #28677	; 0x7005
   27a96:	f000 fb00 	bl	2809a <req_forward>
   27a9a:	4603      	mov	r3, r0
   27a9c:	2800      	cmp	r0, #0
   27a9e:	d0da      	beq.n	27a56 <nrf_bind+0x16>
   27aa0:	e7d5      	b.n	27a4e <nrf_bind+0xe>
   27aa2:	8922      	ldrh	r2, [r4, #8]
   27aa4:	75c3      	strb	r3, [r0, #23]
   27aa6:	8282      	strh	r2, [r0, #20]
   27aa8:	2204      	movs	r2, #4
   27aaa:	7582      	strb	r2, [r0, #22]
   27aac:	68e3      	ldr	r3, [r4, #12]
   27aae:	6183      	str	r3, [r0, #24]
   27ab0:	e7ef      	b.n	27a92 <nrf_bind+0x52>
   27ab2:	8922      	ldrh	r2, [r4, #8]
   27ab4:	75c3      	strb	r3, [r0, #23]
   27ab6:	8282      	strh	r2, [r0, #20]
   27ab8:	2210      	movs	r2, #16
   27aba:	18a3      	adds	r3, r4, r2
   27abc:	7582      	strb	r2, [r0, #22]
   27abe:	3420      	adds	r4, #32
   27ac0:	f100 0218 	add.w	r2, r0, #24
   27ac4:	f853 0b04 	ldr.w	r0, [r3], #4
   27ac8:	42a3      	cmp	r3, r4
   27aca:	f842 0b04 	str.w	r0, [r2], #4
   27ace:	d1f9      	bne.n	27ac4 <nrf_bind+0x84>
   27ad0:	e7df      	b.n	27a92 <nrf_bind+0x52>

00027ad2 <nrf_listen>:
   27ad2:	b538      	push	{r3, r4, r5, lr}
   27ad4:	4605      	mov	r5, r0
   27ad6:	460c      	mov	r4, r1
   27ad8:	f7fa fc30 	bl	2233c <sock_find>
   27adc:	b930      	cbnz	r0, 27aec <nrf_listen+0x1a>
   27ade:	2009      	movs	r0, #9
   27ae0:	f7ff f867 	bl	26bb2 <nrf_modem_os_errno_set>
   27ae4:	f04f 33ff 	mov.w	r3, #4294967295
   27ae8:	4618      	mov	r0, r3
   27aea:	bd38      	pop	{r3, r4, r5, pc}
   27aec:	f7ff fd81 	bl	275f2 <sock_is_stream>
   27af0:	b908      	cbnz	r0, 27af6 <nrf_listen+0x24>
   27af2:	205f      	movs	r0, #95	; 0x5f
   27af4:	e7f4      	b.n	27ae0 <nrf_listen+0xe>
   27af6:	2000      	movs	r0, #0
   27af8:	f7ff fcd1 	bl	2749e <rpc_client_msg_alloc>
   27afc:	4601      	mov	r1, r0
   27afe:	b908      	cbnz	r0, 27b04 <nrf_listen+0x32>
   27b00:	2069      	movs	r0, #105	; 0x69
   27b02:	e7ed      	b.n	27ae0 <nrf_listen+0xe>
   27b04:	2300      	movs	r3, #0
   27b06:	2204      	movs	r2, #4
   27b08:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   27b0c:	7243      	strb	r3, [r0, #9]
   27b0e:	7283      	strb	r3, [r0, #10]
   27b10:	72c3      	strb	r3, [r0, #11]
   27b12:	6105      	str	r5, [r0, #16]
   27b14:	7202      	strb	r2, [r0, #8]
   27b16:	6144      	str	r4, [r0, #20]
   27b18:	f247 0008 	movw	r0, #28680	; 0x7008
   27b1c:	f000 fabd 	bl	2809a <req_forward>
   27b20:	4603      	mov	r3, r0
   27b22:	2800      	cmp	r0, #0
   27b24:	d0e0      	beq.n	27ae8 <nrf_listen+0x16>
   27b26:	e7db      	b.n	27ae0 <nrf_listen+0xe>

00027b28 <nrf_accept>:
   27b28:	2300      	movs	r3, #0
   27b2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27b2e:	b08d      	sub	sp, #52	; 0x34
   27b30:	4606      	mov	r6, r0
   27b32:	4688      	mov	r8, r1
   27b34:	4614      	mov	r4, r2
   27b36:	e9cd 3301 	strd	r3, r3, [sp, #4]
   27b3a:	f7fa fbff 	bl	2233c <sock_find>
   27b3e:	4605      	mov	r5, r0
   27b40:	b938      	cbnz	r0, 27b52 <nrf_accept+0x2a>
   27b42:	2009      	movs	r0, #9
   27b44:	f7ff f835 	bl	26bb2 <nrf_modem_os_errno_set>
   27b48:	f04f 30ff 	mov.w	r0, #4294967295
   27b4c:	b00d      	add	sp, #52	; 0x34
   27b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27b52:	f1b8 0f00 	cmp.w	r8, #0
   27b56:	d002      	beq.n	27b5e <nrf_accept+0x36>
   27b58:	b91c      	cbnz	r4, 27b62 <nrf_accept+0x3a>
   27b5a:	200e      	movs	r0, #14
   27b5c:	e7f2      	b.n	27b44 <nrf_accept+0x1c>
   27b5e:	2c00      	cmp	r4, #0
   27b60:	d1fb      	bne.n	27b5a <nrf_accept+0x32>
   27b62:	4628      	mov	r0, r5
   27b64:	f7ff fd45 	bl	275f2 <sock_is_stream>
   27b68:	b908      	cbnz	r0, 27b6e <nrf_accept+0x46>
   27b6a:	205f      	movs	r0, #95	; 0x5f
   27b6c:	e7ea      	b.n	27b44 <nrf_accept+0x1c>
   27b6e:	4628      	mov	r0, r5
   27b70:	f7ff fd66 	bl	27640 <sock_is_nonblock>
   27b74:	b128      	cbz	r0, 27b82 <nrf_accept+0x5a>
   27b76:	4628      	mov	r0, r5
   27b78:	f7ff fd97 	bl	276aa <sock_can_accept>
   27b7c:	b908      	cbnz	r0, 27b82 <nrf_accept+0x5a>
   27b7e:	200b      	movs	r0, #11
   27b80:	e7e0      	b.n	27b44 <nrf_accept+0x1c>
   27b82:	f7fa fbb5 	bl	222f0 <sock_open>
   27b86:	4607      	mov	r7, r0
   27b88:	b908      	cbnz	r0, 27b8e <nrf_accept+0x66>
   27b8a:	2017      	movs	r0, #23
   27b8c:	e7da      	b.n	27b44 <nrf_accept+0x1c>
   27b8e:	2000      	movs	r0, #0
   27b90:	f7ff fc85 	bl	2749e <rpc_client_msg_alloc>
   27b94:	4605      	mov	r5, r0
   27b96:	b920      	cbnz	r0, 27ba2 <nrf_accept+0x7a>
   27b98:	6838      	ldr	r0, [r7, #0]
   27b9a:	f7fa fbe1 	bl	22360 <_sock_close>
   27b9e:	2069      	movs	r0, #105	; 0x69
   27ba0:	e7d0      	b.n	27b44 <nrf_accept+0x1c>
   27ba2:	6106      	str	r6, [r0, #16]
   27ba4:	a901      	add	r1, sp, #4
   27ba6:	9702      	str	r7, [sp, #8]
   27ba8:	f000 faa2 	bl	280f0 <req_cookie_set>
   27bac:	4629      	mov	r1, r5
   27bae:	f247 000c 	movw	r0, #28684	; 0x700c
   27bb2:	f000 fa72 	bl	2809a <req_forward>
   27bb6:	4606      	mov	r6, r0
   27bb8:	b120      	cbz	r0, 27bc4 <nrf_accept+0x9c>
   27bba:	6838      	ldr	r0, [r7, #0]
   27bbc:	f7fa fbd0 	bl	22360 <_sock_close>
   27bc0:	4630      	mov	r0, r6
   27bc2:	e7bf      	b.n	27b44 <nrf_accept+0x1c>
   27bc4:	9d01      	ldr	r5, [sp, #4]
   27bc6:	f1b8 0f00 	cmp.w	r8, #0
   27bca:	d006      	beq.n	27bda <nrf_accept+0xb2>
   27bcc:	b12c      	cbz	r4, 27bda <nrf_accept+0xb2>
   27bce:	8beb      	ldrh	r3, [r5, #30]
   27bd0:	2b04      	cmp	r3, #4
   27bd2:	d007      	beq.n	27be4 <nrf_accept+0xbc>
   27bd4:	2b10      	cmp	r3, #16
   27bd6:	d01e      	beq.n	27c16 <nrf_accept+0xee>
   27bd8:	6026      	str	r6, [r4, #0]
   27bda:	4628      	mov	r0, r5
   27bdc:	f7ff fc82 	bl	274e4 <rpc_client_msg_rx_free>
   27be0:	6838      	ldr	r0, [r7, #0]
   27be2:	e7b3      	b.n	27b4c <nrf_accept+0x24>
   27be4:	2310      	movs	r3, #16
   27be6:	9003      	str	r0, [sp, #12]
   27be8:	f88d 300c 	strb.w	r3, [sp, #12]
   27bec:	2301      	movs	r3, #1
   27bee:	6826      	ldr	r6, [r4, #0]
   27bf0:	9005      	str	r0, [sp, #20]
   27bf2:	2e10      	cmp	r6, #16
   27bf4:	bf28      	it	cs
   27bf6:	2610      	movcs	r6, #16
   27bf8:	9304      	str	r3, [sp, #16]
   27bfa:	7f2b      	ldrb	r3, [r5, #28]
   27bfc:	7f6a      	ldrb	r2, [r5, #29]
   27bfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   27c02:	f8ad 3014 	strh.w	r3, [sp, #20]
   27c06:	6a2b      	ldr	r3, [r5, #32]
   27c08:	9306      	str	r3, [sp, #24]
   27c0a:	4632      	mov	r2, r6
   27c0c:	4640      	mov	r0, r8
   27c0e:	a903      	add	r1, sp, #12
   27c10:	f000 fe6c 	bl	288ec <memcpy>
   27c14:	e7e0      	b.n	27bd8 <nrf_accept+0xb0>
   27c16:	f04f 0924 	mov.w	r9, #36	; 0x24
   27c1a:	4601      	mov	r1, r0
   27c1c:	464a      	mov	r2, r9
   27c1e:	a803      	add	r0, sp, #12
   27c20:	f000 fe71 	bl	28906 <memset>
   27c24:	2302      	movs	r3, #2
   27c26:	f88d 900c 	strb.w	r9, [sp, #12]
   27c2a:	9304      	str	r3, [sp, #16]
   27c2c:	7f2b      	ldrb	r3, [r5, #28]
   27c2e:	7f6a      	ldrb	r2, [r5, #29]
   27c30:	ae07      	add	r6, sp, #28
   27c32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   27c36:	f8ad 3014 	strh.w	r3, [sp, #20]
   27c3a:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   27c3e:	f105 0320 	add.w	r3, r5, #32
   27c42:	4632      	mov	r2, r6
   27c44:	6818      	ldr	r0, [r3, #0]
   27c46:	6859      	ldr	r1, [r3, #4]
   27c48:	3308      	adds	r3, #8
   27c4a:	c203      	stmia	r2!, {r0, r1}
   27c4c:	4563      	cmp	r3, ip
   27c4e:	4616      	mov	r6, r2
   27c50:	d1f7      	bne.n	27c42 <nrf_accept+0x11a>
   27c52:	6826      	ldr	r6, [r4, #0]
   27c54:	2e24      	cmp	r6, #36	; 0x24
   27c56:	bf28      	it	cs
   27c58:	2624      	movcs	r6, #36	; 0x24
   27c5a:	e7d6      	b.n	27c0a <nrf_accept+0xe2>

00027c5c <nrf_recvfrom>:
   27c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c60:	b085      	sub	sp, #20
   27c62:	4690      	mov	r8, r2
   27c64:	e9dd b70e 	ldrd	fp, r7, [sp, #56]	; 0x38
   27c68:	461e      	mov	r6, r3
   27c6a:	9101      	str	r1, [sp, #4]
   27c6c:	f403 7a80 	and.w	sl, r3, #256	; 0x100
   27c70:	f7fa fb64 	bl	2233c <sock_find>
   27c74:	4604      	mov	r4, r0
   27c76:	b940      	cbnz	r0, 27c8a <nrf_recvfrom+0x2e>
   27c78:	2009      	movs	r0, #9
   27c7a:	f7fe ff9a 	bl	26bb2 <nrf_modem_os_errno_set>
   27c7e:	f04f 39ff 	mov.w	r9, #4294967295
   27c82:	4648      	mov	r0, r9
   27c84:	b005      	add	sp, #20
   27c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c8a:	f436 79a1 	bics.w	r9, r6, #322	; 0x142
   27c8e:	d001      	beq.n	27c94 <nrf_recvfrom+0x38>
   27c90:	205f      	movs	r0, #95	; 0x5f
   27c92:	e7f2      	b.n	27c7a <nrf_recvfrom+0x1e>
   27c94:	f1bb 0f00 	cmp.w	fp, #0
   27c98:	d002      	beq.n	27ca0 <nrf_recvfrom+0x44>
   27c9a:	b91f      	cbnz	r7, 27ca4 <nrf_recvfrom+0x48>
   27c9c:	200e      	movs	r0, #14
   27c9e:	e7ec      	b.n	27c7a <nrf_recvfrom+0x1e>
   27ca0:	2f00      	cmp	r7, #0
   27ca2:	d1fb      	bne.n	27c9c <nrf_recvfrom+0x40>
   27ca4:	4620      	mov	r0, r4
   27ca6:	f7ff fca4 	bl	275f2 <sock_is_stream>
   27caa:	b128      	cbz	r0, 27cb8 <nrf_recvfrom+0x5c>
   27cac:	4620      	mov	r0, r4
   27cae:	f7ff fcbf 	bl	27630 <sock_is_connected>
   27cb2:	b908      	cbnz	r0, 27cb8 <nrf_recvfrom+0x5c>
   27cb4:	2080      	movs	r0, #128	; 0x80
   27cb6:	e7e0      	b.n	27c7a <nrf_recvfrom+0x1e>
   27cb8:	f1ba 0f00 	cmp.w	sl, #0
   27cbc:	d117      	bne.n	27cee <nrf_recvfrom+0x92>
   27cbe:	4620      	mov	r0, r4
   27cc0:	f7ff fcbe 	bl	27640 <sock_is_nonblock>
   27cc4:	b9a8      	cbnz	r0, 27cf2 <nrf_recvfrom+0x96>
   27cc6:	f3c6 1580 	ubfx	r5, r6, #6, #1
   27cca:	4620      	mov	r0, r4
   27ccc:	f7ff fd10 	bl	276f0 <sock_rcvtimeo_ms_get>
   27cd0:	9003      	str	r0, [sp, #12]
   27cd2:	4620      	mov	r0, r4
   27cd4:	f7ff fcb8 	bl	27648 <sock_is_closed>
   27cd8:	b1b0      	cbz	r0, 27d08 <nrf_recvfrom+0xac>
   27cda:	4620      	mov	r0, r4
   27cdc:	f7ff fc64 	bl	275a8 <sock_has_pkt>
   27ce0:	bb70      	cbnz	r0, 27d40 <nrf_recvfrom+0xe4>
   27ce2:	4620      	mov	r0, r4
   27ce4:	f7ff fcc6 	bl	27674 <sock_has_error>
   27ce8:	b1b8      	cbz	r0, 27d1a <nrf_recvfrom+0xbe>
   27cea:	69a0      	ldr	r0, [r4, #24]
   27cec:	e7c5      	b.n	27c7a <nrf_recvfrom+0x1e>
   27cee:	2500      	movs	r5, #0
   27cf0:	e7eb      	b.n	27cca <nrf_recvfrom+0x6e>
   27cf2:	2501      	movs	r5, #1
   27cf4:	e7e9      	b.n	27cca <nrf_recvfrom+0x6e>
   27cf6:	2002      	movs	r0, #2
   27cf8:	a903      	add	r1, sp, #12
   27cfa:	f7f6 f83b 	bl	1dd74 <nrf_modem_os_timedwait>
   27cfe:	2800      	cmp	r0, #0
   27d00:	d0e7      	beq.n	27cd2 <nrf_recvfrom+0x76>
   27d02:	f000 fdd1 	bl	288a8 <abs>
   27d06:	e7b8      	b.n	27c7a <nrf_recvfrom+0x1e>
   27d08:	4620      	mov	r0, r4
   27d0a:	f7ff fc4d 	bl	275a8 <sock_has_pkt>
   27d0e:	2800      	cmp	r0, #0
   27d10:	d1e3      	bne.n	27cda <nrf_recvfrom+0x7e>
   27d12:	2d00      	cmp	r5, #0
   27d14:	d0ef      	beq.n	27cf6 <nrf_recvfrom+0x9a>
   27d16:	200b      	movs	r0, #11
   27d18:	e7af      	b.n	27c7a <nrf_recvfrom+0x1e>
   27d1a:	4620      	mov	r0, r4
   27d1c:	f7ff fc9c 	bl	27658 <sock_is_eof>
   27d20:	2800      	cmp	r0, #0
   27d22:	d1ae      	bne.n	27c82 <nrf_recvfrom+0x26>
   27d24:	4620      	mov	r0, r4
   27d26:	f7ff fc93 	bl	27650 <sock_is_local_closed>
   27d2a:	b148      	cbz	r0, 27d40 <nrf_recvfrom+0xe4>
   27d2c:	4620      	mov	r0, r4
   27d2e:	f7ff fc60 	bl	275f2 <sock_is_stream>
   27d32:	2800      	cmp	r0, #0
   27d34:	d1a5      	bne.n	27c82 <nrf_recvfrom+0x26>
   27d36:	4620      	mov	r0, r4
   27d38:	f7ff fc60 	bl	275fc <sock_is_datagram>
   27d3c:	2800      	cmp	r0, #0
   27d3e:	d19b      	bne.n	27c78 <nrf_recvfrom+0x1c>
   27d40:	4620      	mov	r0, r4
   27d42:	f7ff fc54 	bl	275ee <sock_pkt_peek_head>
   27d46:	4605      	mov	r5, r0
   27d48:	f1bb 0f00 	cmp.w	fp, #0
   27d4c:	d00a      	beq.n	27d64 <nrf_recvfrom+0x108>
   27d4e:	68c1      	ldr	r1, [r0, #12]
   27d50:	b369      	cbz	r1, 27dae <nrf_recvfrom+0x152>
   27d52:	780a      	ldrb	r2, [r1, #0]
   27d54:	683b      	ldr	r3, [r7, #0]
   27d56:	4658      	mov	r0, fp
   27d58:	429a      	cmp	r2, r3
   27d5a:	bf28      	it	cs
   27d5c:	461a      	movcs	r2, r3
   27d5e:	603a      	str	r2, [r7, #0]
   27d60:	f000 fdc4 	bl	288ec <memcpy>
   27d64:	f006 0602 	and.w	r6, r6, #2
   27d68:	4628      	mov	r0, r5
   27d6a:	f7ff fd3c 	bl	277e6 <pkt_bytes_left>
   27d6e:	4540      	cmp	r0, r8
   27d70:	d81f      	bhi.n	27db2 <nrf_recvfrom+0x156>
   27d72:	4628      	mov	r0, r5
   27d74:	f7ff fd37 	bl	277e6 <pkt_bytes_left>
   27d78:	4607      	mov	r7, r0
   27d7a:	2f00      	cmp	r7, #0
   27d7c:	d081      	beq.n	27c82 <nrf_recvfrom+0x26>
   27d7e:	9b01      	ldr	r3, [sp, #4]
   27d80:	4628      	mov	r0, r5
   27d82:	eb03 0b09 	add.w	fp, r3, r9
   27d86:	f7ff fd2a 	bl	277de <pkt_bytes_get>
   27d8a:	463a      	mov	r2, r7
   27d8c:	4601      	mov	r1, r0
   27d8e:	4658      	mov	r0, fp
   27d90:	f000 fdac 	bl	288ec <memcpy>
   27d94:	4620      	mov	r0, r4
   27d96:	44b9      	add	r9, r7
   27d98:	f7ff fc30 	bl	275fc <sock_is_datagram>
   27d9c:	b158      	cbz	r0, 27db6 <nrf_recvfrom+0x15a>
   27d9e:	2e00      	cmp	r6, #0
   27da0:	f47f af6f 	bne.w	27c82 <nrf_recvfrom+0x26>
   27da4:	4629      	mov	r1, r5
   27da6:	4620      	mov	r0, r4
   27da8:	f7ff fc0d 	bl	275c6 <sock_pkt_remove>
   27dac:	e769      	b.n	27c82 <nrf_recvfrom+0x26>
   27dae:	6039      	str	r1, [r7, #0]
   27db0:	e7d8      	b.n	27d64 <nrf_recvfrom+0x108>
   27db2:	4647      	mov	r7, r8
   27db4:	e7e1      	b.n	27d7a <nrf_recvfrom+0x11e>
   27db6:	4620      	mov	r0, r4
   27db8:	f7ff fc25 	bl	27606 <sock_is_raw>
   27dbc:	2800      	cmp	r0, #0
   27dbe:	d1ee      	bne.n	27d9e <nrf_recvfrom+0x142>
   27dc0:	b956      	cbnz	r6, 27dd8 <nrf_recvfrom+0x17c>
   27dc2:	896b      	ldrh	r3, [r5, #10]
   27dc4:	4628      	mov	r0, r5
   27dc6:	443b      	add	r3, r7
   27dc8:	816b      	strh	r3, [r5, #10]
   27dca:	f7ff fd0c 	bl	277e6 <pkt_bytes_left>
   27dce:	b918      	cbnz	r0, 27dd8 <nrf_recvfrom+0x17c>
   27dd0:	4629      	mov	r1, r5
   27dd2:	4620      	mov	r0, r4
   27dd4:	f7ff fbf7 	bl	275c6 <sock_pkt_remove>
   27dd8:	45b8      	cmp	r8, r7
   27dda:	f43f af52 	beq.w	27c82 <nrf_recvfrom+0x26>
   27dde:	f1ba 0f00 	cmp.w	sl, #0
   27de2:	d10a      	bne.n	27dfa <nrf_recvfrom+0x19e>
   27de4:	b976      	cbnz	r6, 27e04 <nrf_recvfrom+0x1a8>
   27de6:	4620      	mov	r0, r4
   27de8:	f7ff fc01 	bl	275ee <sock_pkt_peek_head>
   27dec:	e00d      	b.n	27e0a <nrf_recvfrom+0x1ae>
   27dee:	4620      	mov	r0, r4
   27df0:	f7ff fc2a 	bl	27648 <sock_is_closed>
   27df4:	2800      	cmp	r0, #0
   27df6:	f47f af44 	bne.w	27c82 <nrf_recvfrom+0x26>
   27dfa:	b16e      	cbz	r6, 27e18 <nrf_recvfrom+0x1bc>
   27dfc:	4628      	mov	r0, r5
   27dfe:	f7ff fce5 	bl	277cc <pkt_has_next>
   27e02:	b170      	cbz	r0, 27e22 <nrf_recvfrom+0x1c6>
   27e04:	4628      	mov	r0, r5
   27e06:	f7ff fce7 	bl	277d8 <pkt_peek_next>
   27e0a:	4605      	mov	r5, r0
   27e0c:	2800      	cmp	r0, #0
   27e0e:	f43f af38 	beq.w	27c82 <nrf_recvfrom+0x26>
   27e12:	eba8 0807 	sub.w	r8, r8, r7
   27e16:	e7a7      	b.n	27d68 <nrf_recvfrom+0x10c>
   27e18:	4620      	mov	r0, r4
   27e1a:	f7ff fbc5 	bl	275a8 <sock_has_pkt>
   27e1e:	2800      	cmp	r0, #0
   27e20:	d1e1      	bne.n	27de6 <nrf_recvfrom+0x18a>
   27e22:	2002      	movs	r0, #2
   27e24:	a903      	add	r1, sp, #12
   27e26:	f7f5 ffa5 	bl	1dd74 <nrf_modem_os_timedwait>
   27e2a:	2800      	cmp	r0, #0
   27e2c:	d0df      	beq.n	27dee <nrf_recvfrom+0x192>
   27e2e:	f1b9 0f00 	cmp.w	r9, #0
   27e32:	f47f af26 	bne.w	27c82 <nrf_recvfrom+0x26>
   27e36:	e764      	b.n	27d02 <nrf_recvfrom+0xa6>

00027e38 <tls_setopt_role>:
   27e38:	b508      	push	{r3, lr}
   27e3a:	b109      	cbz	r1, 27e40 <tls_setopt_role+0x8>
   27e3c:	2a04      	cmp	r2, #4
   27e3e:	d005      	beq.n	27e4c <tls_setopt_role+0x14>
   27e40:	2016      	movs	r0, #22
   27e42:	f7fe feb6 	bl	26bb2 <nrf_modem_os_errno_set>
   27e46:	f04f 30ff 	mov.w	r0, #4294967295
   27e4a:	e006      	b.n	27e5a <tls_setopt_role+0x22>
   27e4c:	780b      	ldrb	r3, [r1, #0]
   27e4e:	b12b      	cbz	r3, 27e5c <tls_setopt_role+0x24>
   27e50:	2b01      	cmp	r3, #1
   27e52:	d1f5      	bne.n	27e40 <tls_setopt_role+0x8>
   27e54:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   27e58:	2000      	movs	r0, #0
   27e5a:	bd08      	pop	{r3, pc}
   27e5c:	2302      	movs	r3, #2
   27e5e:	e7f9      	b.n	27e54 <tls_setopt_role+0x1c>

00027e60 <tls_setopt_taglist>:
   27e60:	b510      	push	{r4, lr}
   27e62:	f012 0403 	ands.w	r4, r2, #3
   27e66:	d100      	bne.n	27e6a <tls_setopt_taglist+0xa>
   27e68:	b92a      	cbnz	r2, 27e76 <tls_setopt_taglist+0x16>
   27e6a:	2016      	movs	r0, #22
   27e6c:	f7fe fea1 	bl	26bb2 <nrf_modem_os_errno_set>
   27e70:	f04f 30ff 	mov.w	r0, #4294967295
   27e74:	bd10      	pop	{r4, pc}
   27e76:	0893      	lsrs	r3, r2, #2
   27e78:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   27e7c:	3048      	adds	r0, #72	; 0x48
   27e7e:	f000 fd35 	bl	288ec <memcpy>
   27e82:	4620      	mov	r0, r4
   27e84:	e7f6      	b.n	27e74 <tls_setopt_taglist+0x14>

00027e86 <tls_setopt_sess_cache>:
   27e86:	b508      	push	{r3, lr}
   27e88:	b109      	cbz	r1, 27e8e <tls_setopt_sess_cache+0x8>
   27e8a:	2a04      	cmp	r2, #4
   27e8c:	d005      	beq.n	27e9a <tls_setopt_sess_cache+0x14>
   27e8e:	2016      	movs	r0, #22
   27e90:	f7fe fe8f 	bl	26bb2 <nrf_modem_os_errno_set>
   27e94:	f04f 30ff 	mov.w	r0, #4294967295
   27e98:	bd08      	pop	{r3, pc}
   27e9a:	780b      	ldrb	r3, [r1, #0]
   27e9c:	3b00      	subs	r3, #0
   27e9e:	bf18      	it	ne
   27ea0:	2301      	movne	r3, #1
   27ea2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   27ea6:	2000      	movs	r0, #0
   27ea8:	e7f6      	b.n	27e98 <tls_setopt_sess_cache+0x12>

00027eaa <tls_setopt_peer_verify>:
   27eaa:	b508      	push	{r3, lr}
   27eac:	b109      	cbz	r1, 27eb2 <tls_setopt_peer_verify+0x8>
   27eae:	2a04      	cmp	r2, #4
   27eb0:	d005      	beq.n	27ebe <tls_setopt_peer_verify+0x14>
   27eb2:	2016      	movs	r0, #22
   27eb4:	f7fe fe7d 	bl	26bb2 <nrf_modem_os_errno_set>
   27eb8:	f04f 30ff 	mov.w	r0, #4294967295
   27ebc:	bd08      	pop	{r3, pc}
   27ebe:	680b      	ldr	r3, [r1, #0]
   27ec0:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   27ec4:	2000      	movs	r0, #0
   27ec6:	e7f9      	b.n	27ebc <tls_setopt_peer_verify+0x12>

00027ec8 <tls_setopt_hostname>:
   27ec8:	b570      	push	{r4, r5, r6, lr}
   27eca:	4605      	mov	r5, r0
   27ecc:	4614      	mov	r4, r2
   27ece:	460e      	mov	r6, r1
   27ed0:	b931      	cbnz	r1, 27ee0 <tls_setopt_hostname+0x18>
   27ed2:	b192      	cbz	r2, 27efa <tls_setopt_hostname+0x32>
   27ed4:	2016      	movs	r0, #22
   27ed6:	f7fe fe6c 	bl	26bb2 <nrf_modem_os_errno_set>
   27eda:	f04f 30ff 	mov.w	r0, #4294967295
   27ede:	bd70      	pop	{r4, r5, r6, pc}
   27ee0:	2a00      	cmp	r2, #0
   27ee2:	d0f7      	beq.n	27ed4 <tls_setopt_hostname+0xc>
   27ee4:	6c00      	ldr	r0, [r0, #64]	; 0x40
   27ee6:	b108      	cbz	r0, 27eec <tls_setopt_hostname+0x24>
   27ee8:	f7f6 f846 	bl	1df78 <nrf_modem_os_free>
   27eec:	1c60      	adds	r0, r4, #1
   27eee:	f7f6 f83b 	bl	1df68 <nrf_modem_os_alloc>
   27ef2:	6428      	str	r0, [r5, #64]	; 0x40
   27ef4:	b938      	cbnz	r0, 27f06 <tls_setopt_hostname+0x3e>
   27ef6:	2069      	movs	r0, #105	; 0x69
   27ef8:	e7ed      	b.n	27ed6 <tls_setopt_hostname+0xe>
   27efa:	6c00      	ldr	r0, [r0, #64]	; 0x40
   27efc:	b108      	cbz	r0, 27f02 <tls_setopt_hostname+0x3a>
   27efe:	f7f6 f83b 	bl	1df78 <nrf_modem_os_free>
   27f02:	2000      	movs	r0, #0
   27f04:	e7eb      	b.n	27ede <tls_setopt_hostname+0x16>
   27f06:	4622      	mov	r2, r4
   27f08:	4631      	mov	r1, r6
   27f0a:	f000 fcef 	bl	288ec <memcpy>
   27f0e:	2200      	movs	r2, #0
   27f10:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   27f12:	551a      	strb	r2, [r3, r4]
   27f14:	e7f5      	b.n	27f02 <tls_setopt_hostname+0x3a>

00027f16 <nrf_poll_one>:
   27f16:	b538      	push	{r3, r4, r5, lr}
   27f18:	4604      	mov	r4, r0
   27f1a:	6800      	ldr	r0, [r0, #0]
   27f1c:	f7fa fa0e 	bl	2233c <sock_find>
   27f20:	4605      	mov	r5, r0
   27f22:	b928      	cbnz	r0, 27f30 <nrf_poll_one+0x1a>
   27f24:	2001      	movs	r0, #1
   27f26:	88e3      	ldrh	r3, [r4, #6]
   27f28:	f043 0320 	orr.w	r3, r3, #32
   27f2c:	80e3      	strh	r3, [r4, #6]
   27f2e:	bd38      	pop	{r3, r4, r5, pc}
   27f30:	f7ff fb8e 	bl	27650 <sock_is_local_closed>
   27f34:	2800      	cmp	r0, #0
   27f36:	d1f5      	bne.n	27f24 <nrf_poll_one+0xe>
   27f38:	4628      	mov	r0, r5
   27f3a:	f7ff fb9b 	bl	27674 <sock_has_error>
   27f3e:	b1f8      	cbz	r0, 27f80 <nrf_poll_one+0x6a>
   27f40:	88e3      	ldrh	r3, [r4, #6]
   27f42:	f043 0308 	orr.w	r3, r3, #8
   27f46:	80e3      	strh	r3, [r4, #6]
   27f48:	88a3      	ldrh	r3, [r4, #4]
   27f4a:	07da      	lsls	r2, r3, #31
   27f4c:	d507      	bpl.n	27f5e <nrf_poll_one+0x48>
   27f4e:	4628      	mov	r0, r5
   27f50:	f7ff fba6 	bl	276a0 <sock_can_read>
   27f54:	b1e8      	cbz	r0, 27f92 <nrf_poll_one+0x7c>
   27f56:	88e3      	ldrh	r3, [r4, #6]
   27f58:	f043 0301 	orr.w	r3, r3, #1
   27f5c:	80e3      	strh	r3, [r4, #6]
   27f5e:	88a3      	ldrh	r3, [r4, #4]
   27f60:	075b      	lsls	r3, r3, #29
   27f62:	d507      	bpl.n	27f74 <nrf_poll_one+0x5e>
   27f64:	4628      	mov	r0, r5
   27f66:	f7ff fba5 	bl	276b4 <sock_can_send>
   27f6a:	b118      	cbz	r0, 27f74 <nrf_poll_one+0x5e>
   27f6c:	88e3      	ldrh	r3, [r4, #6]
   27f6e:	f043 0304 	orr.w	r3, r3, #4
   27f72:	80e3      	strh	r3, [r4, #6]
   27f74:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   27f78:	3800      	subs	r0, #0
   27f7a:	bf18      	it	ne
   27f7c:	2001      	movne	r0, #1
   27f7e:	e7d6      	b.n	27f2e <nrf_poll_one+0x18>
   27f80:	4628      	mov	r0, r5
   27f82:	f7ff fb69 	bl	27658 <sock_is_eof>
   27f86:	2800      	cmp	r0, #0
   27f88:	d0de      	beq.n	27f48 <nrf_poll_one+0x32>
   27f8a:	88e3      	ldrh	r3, [r4, #6]
   27f8c:	f043 0310 	orr.w	r3, r3, #16
   27f90:	e7d9      	b.n	27f46 <nrf_poll_one+0x30>
   27f92:	4628      	mov	r0, r5
   27f94:	f7ff fb89 	bl	276aa <sock_can_accept>
   27f98:	2800      	cmp	r0, #0
   27f9a:	d1dc      	bne.n	27f56 <nrf_poll_one+0x40>
   27f9c:	4628      	mov	r0, r5
   27f9e:	f7ff fb5b 	bl	27658 <sock_is_eof>
   27fa2:	2800      	cmp	r0, #0
   27fa4:	d1d7      	bne.n	27f56 <nrf_poll_one+0x40>
   27fa6:	e7da      	b.n	27f5e <nrf_poll_one+0x48>

00027fa8 <nrf_fcntl>:
   27fa8:	b538      	push	{r3, r4, r5, lr}
   27faa:	460d      	mov	r5, r1
   27fac:	4614      	mov	r4, r2
   27fae:	f7fa f9c5 	bl	2233c <sock_find>
   27fb2:	b928      	cbnz	r0, 27fc0 <nrf_fcntl+0x18>
   27fb4:	2009      	movs	r0, #9
   27fb6:	f7fe fdfc 	bl	26bb2 <nrf_modem_os_errno_set>
   27fba:	f04f 30ff 	mov.w	r0, #4294967295
   27fbe:	e006      	b.n	27fce <nrf_fcntl+0x26>
   27fc0:	2d03      	cmp	r5, #3
   27fc2:	d003      	beq.n	27fcc <nrf_fcntl+0x24>
   27fc4:	2d04      	cmp	r5, #4
   27fc6:	d003      	beq.n	27fd0 <nrf_fcntl+0x28>
   27fc8:	2016      	movs	r0, #22
   27fca:	e7f4      	b.n	27fb6 <nrf_fcntl+0xe>
   27fcc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   27fce:	bd38      	pop	{r3, r4, r5, pc}
   27fd0:	2c01      	cmp	r4, #1
   27fd2:	d8f9      	bhi.n	27fc8 <nrf_fcntl+0x20>
   27fd4:	63c4      	str	r4, [r0, #60]	; 0x3c
   27fd6:	2000      	movs	r0, #0
   27fd8:	e7f9      	b.n	27fce <nrf_fcntl+0x26>

00027fda <rpc_af_to_nrf_af>:
   27fda:	1f43      	subs	r3, r0, #5
   27fdc:	2b00      	cmp	r3, #0
   27fde:	d803      	bhi.n	27fe8 <rpc_af_to_nrf_af+0xe>
   27fe0:	e8df f003 	tbb	[pc, r3]
   27fe4:	01          	.byte	0x01
   27fe5:	00          	.byte	0x00
   27fe6:	2003      	movs	r0, #3
   27fe8:	4770      	bx	lr

00027fea <nrf_type_to_rpc_type>:
   27fea:	4770      	bx	lr

00027fec <nrf_proto_to_rpc_proto>:
   27fec:	2829      	cmp	r0, #41	; 0x29
   27fee:	d015      	beq.n	2801c <nrf_proto_to_rpc_proto+0x30>
   27ff0:	dc05      	bgt.n	27ffe <nrf_proto_to_rpc_proto+0x12>
   27ff2:	2806      	cmp	r0, #6
   27ff4:	d014      	beq.n	28020 <nrf_proto_to_rpc_proto+0x34>
   27ff6:	2811      	cmp	r0, #17
   27ff8:	d014      	beq.n	28024 <nrf_proto_to_rpc_proto+0x38>
   27ffa:	b148      	cbz	r0, 28010 <nrf_proto_to_rpc_proto+0x24>
   27ffc:	4770      	bx	lr
   27ffe:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   28002:	d00d      	beq.n	28020 <nrf_proto_to_rpc_proto+0x34>
   28004:	f240 1311 	movw	r3, #273	; 0x111
   28008:	4298      	cmp	r0, r3
   2800a:	d00b      	beq.n	28024 <nrf_proto_to_rpc_proto+0x38>
   2800c:	28ff      	cmp	r0, #255	; 0xff
   2800e:	d10c      	bne.n	2802a <nrf_proto_to_rpc_proto+0x3e>
   28010:	2901      	cmp	r1, #1
   28012:	d009      	beq.n	28028 <nrf_proto_to_rpc_proto+0x3c>
   28014:	2902      	cmp	r1, #2
   28016:	bf08      	it	eq
   28018:	2002      	moveq	r0, #2
   2801a:	4770      	bx	lr
   2801c:	2006      	movs	r0, #6
   2801e:	4770      	bx	lr
   28020:	2001      	movs	r0, #1
   28022:	4770      	bx	lr
   28024:	2002      	movs	r0, #2
   28026:	4770      	bx	lr
   28028:	4608      	mov	r0, r1
   2802a:	4770      	bx	lr

0002802c <nrf_sol_to_rpc_sol>:
   2802c:	2829      	cmp	r0, #41	; 0x29
   2802e:	d011      	beq.n	28054 <nrf_sol_to_rpc_sol+0x28>
   28030:	dc0a      	bgt.n	28048 <nrf_sol_to_rpc_sol+0x1c>
   28032:	2801      	cmp	r0, #1
   28034:	d010      	beq.n	28058 <nrf_sol_to_rpc_sol+0x2c>
   28036:	2806      	cmp	r0, #6
   28038:	d010      	beq.n	2805c <nrf_sol_to_rpc_sol+0x30>
   2803a:	2800      	cmp	r0, #0
   2803c:	bf08      	it	eq
   2803e:	2004      	moveq	r0, #4
   28040:	bf18      	it	ne
   28042:	f04f 30ff 	movne.w	r0, #4294967295
   28046:	4770      	bx	lr
   28048:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   2804c:	d008      	beq.n	28060 <nrf_sol_to_rpc_sol+0x34>
   2804e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   28052:	e7f5      	b.n	28040 <nrf_sol_to_rpc_sol+0x14>
   28054:	2006      	movs	r0, #6
   28056:	4770      	bx	lr
   28058:	2008      	movs	r0, #8
   2805a:	4770      	bx	lr
   2805c:	2001      	movs	r0, #1
   2805e:	4770      	bx	lr
   28060:	f44f 7080 	mov.w	r0, #256	; 0x100
   28064:	4770      	bx	lr

00028066 <rpc_error_to_nrf_gai_errno>:
   28066:	b508      	push	{r3, lr}
   28068:	1f03      	subs	r3, r0, #4
   2806a:	2b09      	cmp	r3, #9
   2806c:	d80f      	bhi.n	2808e <rpc_error_to_nrf_gai_errno+0x28>
   2806e:	e8df f003 	tbb	[pc, r3]
   28072:	1108      	.short	0x1108
   28074:	0e0e0e05 	.word	0x0e0e0e05
   28078:	050e0e0e 	.word	0x050e0e0e
   2807c:	f06f 0001 	mvn.w	r0, #1
   28080:	bd08      	pop	{r3, pc}
   28082:	2073      	movs	r0, #115	; 0x73
   28084:	f7fe fd95 	bl	26bb2 <nrf_modem_os_errno_set>
   28088:	f06f 000a 	mvn.w	r0, #10
   2808c:	e7f8      	b.n	28080 <rpc_error_to_nrf_gai_errno+0x1a>
   2808e:	f7fb f8a9 	bl	231e4 <rpc_error_to_nrf_errno>
   28092:	e7f7      	b.n	28084 <rpc_error_to_nrf_gai_errno+0x1e>
   28094:	f06f 0063 	mvn.w	r0, #99	; 0x63
   28098:	e7f2      	b.n	28080 <rpc_error_to_nrf_gai_errno+0x1a>

0002809a <req_forward>:
   2809a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2809c:	2300      	movs	r3, #0
   2809e:	460a      	mov	r2, r1
   280a0:	f04f 31ff 	mov.w	r1, #4294967295
   280a4:	9303      	str	r3, [sp, #12]
   280a6:	68d6      	ldr	r6, [r2, #12]
   280a8:	ac02      	add	r4, sp, #8
   280aa:	9302      	str	r3, [sp, #8]
   280ac:	9101      	str	r1, [sp, #4]
   280ae:	b18e      	cbz	r6, 280d4 <req_forward+0x3a>
   280b0:	4634      	mov	r4, r6
   280b2:	b281      	uxth	r1, r0
   280b4:	6023      	str	r3, [r4, #0]
   280b6:	2004      	movs	r0, #4
   280b8:	f7ff fa0d 	bl	274d6 <rpc_client_msg_send>
   280bc:	6823      	ldr	r3, [r4, #0]
   280be:	b15b      	cbz	r3, 280d8 <req_forward+0x3e>
   280c0:	6958      	ldr	r0, [r3, #20]
   280c2:	f7fb f88f 	bl	231e4 <rpc_error_to_nrf_errno>
   280c6:	4605      	mov	r5, r0
   280c8:	b106      	cbz	r6, 280cc <req_forward+0x32>
   280ca:	b170      	cbz	r0, 280ea <req_forward+0x50>
   280cc:	6820      	ldr	r0, [r4, #0]
   280ce:	f7ff fa09 	bl	274e4 <rpc_client_msg_rx_free>
   280d2:	e00a      	b.n	280ea <req_forward+0x50>
   280d4:	60d4      	str	r4, [r2, #12]
   280d6:	e7ec      	b.n	280b2 <req_forward+0x18>
   280d8:	2002      	movs	r0, #2
   280da:	a901      	add	r1, sp, #4
   280dc:	f7f5 fe4a 	bl	1dd74 <nrf_modem_os_timedwait>
   280e0:	2800      	cmp	r0, #0
   280e2:	d0eb      	beq.n	280bc <req_forward+0x22>
   280e4:	f000 fbe0 	bl	288a8 <abs>
   280e8:	4605      	mov	r5, r0
   280ea:	4628      	mov	r0, r5
   280ec:	b004      	add	sp, #16
   280ee:	bd70      	pop	{r4, r5, r6, pc}

000280f0 <req_cookie_set>:
   280f0:	60c1      	str	r1, [r0, #12]
   280f2:	4770      	bx	lr

000280f4 <res_cookie_get>:
   280f4:	68c0      	ldr	r0, [r0, #12]
   280f6:	4770      	bx	lr

000280f8 <res_forward>:
   280f8:	68c3      	ldr	r3, [r0, #12]
   280fa:	6018      	str	r0, [r3, #0]
   280fc:	2001      	movs	r0, #1
   280fe:	4770      	bx	lr

00028100 <rpc_dfu_event_handler>:
   28100:	b510      	push	{r4, lr}
   28102:	4604      	mov	r4, r0
   28104:	6800      	ldr	r0, [r0, #0]
   28106:	b108      	cbz	r0, 2810c <rpc_dfu_event_handler+0xc>
   28108:	f7ff f9ef 	bl	274ea <rpc_client_msg_data_rx_free>
   2810c:	68e0      	ldr	r0, [r4, #12]
   2810e:	b108      	cbz	r0, 28114 <rpc_dfu_event_handler+0x14>
   28110:	6004      	str	r4, [r0, #0]
   28112:	2001      	movs	r0, #1
   28114:	bd10      	pop	{r4, pc}

00028116 <nrf_modem_is_initialized>:
   28116:	f7fb bb6b 	b.w	237f0 <nrf_modem_state_is_initialized>

0002811a <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2811a:	4770      	bx	lr

0002811c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2811c:	b140      	cbz	r0, 28130 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2811e:	68c3      	ldr	r3, [r0, #12]
   28120:	7858      	ldrb	r0, [r3, #1]
   28122:	f010 0001 	ands.w	r0, r0, #1
   28126:	bf1e      	ittt	ne
   28128:	7818      	ldrbne	r0, [r3, #0]
   2812a:	fab0 f080 	clzne	r0, r0
   2812e:	0940      	lsrne	r0, r0, #5
}
   28130:	4770      	bx	lr

00028132 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   28132:	f000 bbe8 	b.w	28906 <memset>

00028136 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28136:	f000 bbd9 	b.w	288ec <memcpy>

0002813a <k_heap_init>:
{
   2813a:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2813c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   28140:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   28144:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   28146:	f7fd bdf8 	b.w	25d3a <sys_heap_init>

0002814a <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2814a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2814e:	b085      	sub	sp, #20
   28150:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   28154:	4607      	mov	r7, r0
   28156:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   28158:	4650      	mov	r0, sl
   2815a:	4621      	mov	r1, r4
{
   2815c:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2815e:	f000 faa7 	bl	286b0 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   28162:	f1b4 3fff 	cmp.w	r4, #4294967295
   28166:	bf08      	it	eq
   28168:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2816c:	4605      	mov	r5, r0
   2816e:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   28170:	bf04      	itt	eq
   28172:	f04f 35ff 	moveq.w	r5, #4294967295
   28176:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2817a:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   2817e:	f04f 0320 	mov.w	r3, #32
   28182:	f3ef 8411 	mrs	r4, BASEPRI
   28186:	f383 8812 	msr	BASEPRI_MAX, r3
   2818a:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2818e:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   28192:	464a      	mov	r2, r9
   28194:	4641      	mov	r1, r8
   28196:	4638      	mov	r0, r7
   28198:	f7fd fd68 	bl	25c6c <sys_heap_aligned_alloc>
   2819c:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2819e:	f7fc fd67 	bl	24c70 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   281a2:	9b03      	ldr	r3, [sp, #12]
   281a4:	b13b      	cbz	r3, 281b6 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   281a6:	f384 8811 	msr	BASEPRI, r4
   281aa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   281ae:	4618      	mov	r0, r3
   281b0:	b005      	add	sp, #20
   281b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   281b6:	1a28      	subs	r0, r5, r0
   281b8:	eb66 0101 	sbc.w	r1, r6, r1
   281bc:	2801      	cmp	r0, #1
   281be:	f171 0200 	sbcs.w	r2, r1, #0
   281c2:	dbf0      	blt.n	281a6 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   281c4:	e9cd 0100 	strd	r0, r1, [sp]
   281c8:	465a      	mov	r2, fp
   281ca:	4621      	mov	r1, r4
   281cc:	4650      	mov	r0, sl
   281ce:	f7fc f9f7 	bl	245c0 <z_pend_curr>
	__asm__ volatile(
   281d2:	f04f 0320 	mov.w	r3, #32
   281d6:	f3ef 8411 	mrs	r4, BASEPRI
   281da:	f383 8812 	msr	BASEPRI_MAX, r3
   281de:	f3bf 8f6f 	isb	sy
	return k;
   281e2:	e7d6      	b.n	28192 <k_heap_aligned_alloc+0x48>

000281e4 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   281e4:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   281e6:	e9cd 2300 	strd	r2, r3, [sp]
   281ea:	460a      	mov	r2, r1
   281ec:	2104      	movs	r1, #4
   281ee:	f7ff ffac 	bl	2814a <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   281f2:	b003      	add	sp, #12
   281f4:	f85d fb04 	ldr.w	pc, [sp], #4

000281f8 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   281f8:	b538      	push	{r3, r4, r5, lr}
   281fa:	4604      	mov	r4, r0
   281fc:	f04f 0320 	mov.w	r3, #32
   28200:	f3ef 8511 	mrs	r5, BASEPRI
   28204:	f383 8812 	msr	BASEPRI_MAX, r3
   28208:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2820c:	f7fd fcf6 	bl	25bfc <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   28210:	f104 000c 	add.w	r0, r4, #12
   28214:	f000 f9cd 	bl	285b2 <z_unpend_all>
   28218:	b130      	cbz	r0, 28228 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2821a:	4629      	mov	r1, r5
   2821c:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   28220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   28224:	f7fc ba30 	b.w	24688 <z_reschedule>
	__asm__ volatile(
   28228:	f385 8811 	msr	BASEPRI, r5
   2822c:	f3bf 8f6f 	isb	sy
}
   28230:	bd38      	pop	{r3, r4, r5, pc}

00028232 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   28232:	f3ef 8005 	mrs	r0, IPSR
}
   28236:	3800      	subs	r0, #0
   28238:	bf18      	it	ne
   2823a:	2001      	movne	r0, #1
   2823c:	4770      	bx	lr

0002823e <z_impl_k_thread_name_set>:
}
   2823e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   28242:	4770      	bx	lr

00028244 <k_thread_name_get>:
}
   28244:	2000      	movs	r0, #0
   28246:	4770      	bx	lr

00028248 <z_impl_k_thread_start>:
	z_sched_start(thread);
   28248:	f7fc ba30 	b.w	246ac <z_sched_start>

0002824c <z_pm_save_idle_exit>:
{
   2824c:	b508      	push	{r3, lr}
	pm_system_resume();
   2824e:	f7f3 f879 	bl	1b344 <pm_system_resume>
}
   28252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   28256:	f7fe bc86 	b.w	26b66 <sys_clock_idle_exit>

0002825a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2825a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2825e:	428b      	cmp	r3, r1
   28260:	d001      	beq.n	28266 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   28262:	f7fc b9cb 	b.w	245fc <z_set_prio>
}
   28266:	2000      	movs	r0, #0
   28268:	4770      	bx	lr

0002826a <z_impl_k_mutex_init>:
{
   2826a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2826c:	2000      	movs	r0, #0
   2826e:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   28272:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   28276:	4770      	bx	lr

00028278 <queue_insert>:
{
   28278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2827c:	4699      	mov	r9, r3
   2827e:	4604      	mov	r4, r0
   28280:	460d      	mov	r5, r1
   28282:	4690      	mov	r8, r2
   28284:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   28288:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2828c:	f04f 0220 	mov.w	r2, #32
   28290:	f3ef 8711 	mrs	r7, BASEPRI
   28294:	f382 8812 	msr	BASEPRI_MAX, r2
   28298:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2829c:	b103      	cbz	r3, 282a0 <queue_insert+0x28>
	return list->tail;
   2829e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   282a0:	4630      	mov	r0, r6
   282a2:	f000 f940 	bl	28526 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   282a6:	b158      	cbz	r0, 282c0 <queue_insert+0x48>
   282a8:	2300      	movs	r3, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   282aa:	f8c0 8014 	str.w	r8, [r0, #20]
   282ae:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   282b0:	f000 f902 	bl	284b8 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   282b4:	4630      	mov	r0, r6
   282b6:	4639      	mov	r1, r7
   282b8:	f7fc f9e6 	bl	24688 <z_reschedule>
		return 0;
   282bc:	2000      	movs	r0, #0
   282be:	e00c      	b.n	282da <queue_insert+0x62>
	if (alloc) {
   282c0:	f1b9 0f00 	cmp.w	r9, #0
   282c4:	d01b      	beq.n	282fe <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   282c6:	2108      	movs	r1, #8
   282c8:	f7fc fdd8 	bl	24e7c <z_thread_aligned_alloc>
		if (anode == NULL) {
   282cc:	b938      	cbnz	r0, 282de <queue_insert+0x66>
	__asm__ volatile(
   282ce:	f387 8811 	msr	BASEPRI, r7
   282d2:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   282d6:	f06f 000b 	mvn.w	r0, #11
}
   282da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   282de:	2201      	movs	r2, #1
		anode->data = data;
   282e0:	f8c0 8004 	str.w	r8, [r0, #4]
   282e4:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   282e6:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   282e8:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   282ec:	b95d      	cbnz	r5, 28306 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   282ee:	6822      	ldr	r2, [r4, #0]
   282f0:	430a      	orrs	r2, r1
   282f2:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   282f4:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   282f6:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   282f8:	b96a      	cbnz	r2, 28316 <queue_insert+0x9e>
	list->tail = node;
   282fa:	6060      	str	r0, [r4, #4]
}
   282fc:	e00b      	b.n	28316 <queue_insert+0x9e>
}
   282fe:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   28300:	f8c8 9000 	str.w	r9, [r8]
}
   28304:	e7ef      	b.n	282e6 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   28306:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   28308:	2a03      	cmp	r2, #3
   2830a:	d810      	bhi.n	2832e <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2830c:	6001      	str	r1, [r0, #0]
	return list->tail;
   2830e:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   28310:	b939      	cbnz	r1, 28322 <queue_insert+0xaa>
	list->head = node;
   28312:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   28316:	2104      	movs	r1, #4
   28318:	f104 0010 	add.w	r0, r4, #16
   2831c:	f000 fa7c 	bl	28818 <z_handle_obj_poll_events>
   28320:	e7c8      	b.n	282b4 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28322:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28324:	f002 0203 	and.w	r2, r2, #3
   28328:	4302      	orrs	r2, r0
   2832a:	600a      	str	r2, [r1, #0]
   2832c:	e7e5      	b.n	282fa <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2832e:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   28332:	430a      	orrs	r2, r1
   28334:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28336:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28338:	f002 0203 	and.w	r2, r2, #3
   2833c:	ea40 0302 	orr.w	r3, r0, r2
   28340:	602b      	str	r3, [r5, #0]
}
   28342:	e7e8      	b.n	28316 <queue_insert+0x9e>

00028344 <z_queue_node_peek>:
{
   28344:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   28346:	4604      	mov	r4, r0
   28348:	b130      	cbz	r0, 28358 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2834a:	6802      	ldr	r2, [r0, #0]
   2834c:	0793      	lsls	r3, r2, #30
   2834e:	d003      	beq.n	28358 <z_queue_node_peek+0x14>
		ret = anode->data;
   28350:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   28352:	b109      	cbz	r1, 28358 <z_queue_node_peek+0x14>
			k_free(anode);
   28354:	f000 fa8b 	bl	2886e <k_free>
}
   28358:	4620      	mov	r0, r4
   2835a:	bd10      	pop	{r4, pc}

0002835c <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2835c:	2301      	movs	r3, #1
{
   2835e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   28360:	9300      	str	r3, [sp, #0]
   28362:	2300      	movs	r3, #0
{
   28364:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   28366:	4619      	mov	r1, r3
   28368:	f7ff ff86 	bl	28278 <queue_insert>
}
   2836c:	b003      	add	sp, #12
   2836e:	f85d fb04 	ldr.w	pc, [sp], #4

00028372 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   28372:	b15a      	cbz	r2, 2838c <z_impl_k_sem_init+0x1a>
   28374:	428a      	cmp	r2, r1
   28376:	d309      	bcc.n	2838c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   28378:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2837c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   28380:	e9c0 0000 	strd	r0, r0, [r0]
   28384:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   28388:	2000      	movs	r0, #0
   2838a:	4770      	bx	lr
		return -EINVAL;
   2838c:	f06f 0015 	mvn.w	r0, #21
}
   28390:	4770      	bx	lr

00028392 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   28392:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   28394:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   28396:	408b      	lsls	r3, r1
   28398:	ea22 0303 	bic.w	r3, r2, r3
   2839c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2839e:	fa22 f001 	lsr.w	r0, r2, r1
}
   283a2:	f000 0001 	and.w	r0, r0, #1
   283a6:	4770      	bx	lr

000283a8 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   283a8:	b120      	cbz	r0, 283b4 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   283aa:	2200      	movs	r2, #0
   283ac:	3090      	adds	r0, #144	; 0x90
   283ae:	4611      	mov	r1, r2
   283b0:	f000 b90f 	b.w	285d2 <z_sched_wake>
}
   283b4:	4770      	bx	lr

000283b6 <z_work_submit_to_queue>:
{
   283b6:	b513      	push	{r0, r1, r4, lr}
   283b8:	9001      	str	r0, [sp, #4]
   283ba:	4608      	mov	r0, r1
	__asm__ volatile(
   283bc:	f04f 0320 	mov.w	r3, #32
   283c0:	f3ef 8411 	mrs	r4, BASEPRI
   283c4:	f383 8812 	msr	BASEPRI_MAX, r3
   283c8:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   283cc:	a901      	add	r1, sp, #4
   283ce:	f7fb ff1b 	bl	24208 <submit_to_queue_locked>
	__asm__ volatile(
   283d2:	f384 8811 	msr	BASEPRI, r4
   283d6:	f3bf 8f6f 	isb	sy
}
   283da:	b002      	add	sp, #8
   283dc:	bd10      	pop	{r4, pc}

000283de <k_work_submit_to_queue>:
{
   283de:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   283e0:	f7ff ffe9 	bl	283b6 <z_work_submit_to_queue>
	if (ret > 0) {
   283e4:	1e04      	subs	r4, r0, #0
   283e6:	dd09      	ble.n	283fc <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   283e8:	f04f 0320 	mov.w	r3, #32
   283ec:	f3ef 8011 	mrs	r0, BASEPRI
   283f0:	f383 8812 	msr	BASEPRI_MAX, r3
   283f4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   283f8:	f000 f8c5 	bl	28586 <z_reschedule_irqlock>
}
   283fc:	4620      	mov	r0, r4
   283fe:	bd10      	pop	{r4, pc}

00028400 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   28400:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   28404:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28406:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28408:	2300      	movs	r3, #0
	node->prev = NULL;
   2840a:	e9c0 3300 	strd	r3, r3, [r0]
}
   2840e:	4770      	bx	lr

00028410 <unpend_thread_no_timeout>:
{
   28410:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   28412:	f7ff fff5 	bl	28400 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   28416:	7b43      	ldrb	r3, [r0, #13]
   28418:	f023 0302 	bic.w	r3, r3, #2
   2841c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2841e:	2300      	movs	r3, #0
   28420:	6083      	str	r3, [r0, #8]
}
   28422:	bd08      	pop	{r3, pc}

00028424 <z_thread_timeout>:
{
   28424:	4601      	mov	r1, r0
   28426:	b510      	push	{r4, lr}
   28428:	f04f 0320 	mov.w	r3, #32
   2842c:	f3ef 8411 	mrs	r4, BASEPRI
   28430:	f383 8812 	msr	BASEPRI_MAX, r3
   28434:	f3bf 8f6f 	isb	sy
		if (!killed) {
   28438:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2843c:	f013 0f28 	tst.w	r3, #40	; 0x28
   28440:	d10d      	bne.n	2845e <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   28442:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   28446:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   28448:	b10b      	cbz	r3, 2844e <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2844a:	f7ff ffe1 	bl	28410 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2844e:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   28452:	f023 0314 	bic.w	r3, r3, #20
   28456:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2845a:	f7fb ffd9 	bl	24410 <ready_thread>
	__asm__ volatile(
   2845e:	f384 8811 	msr	BASEPRI, r4
   28462:	f3bf 8f6f 	isb	sy
}
   28466:	bd10      	pop	{r4, pc}

00028468 <add_to_waitq_locked>:
{
   28468:	b538      	push	{r3, r4, r5, lr}
   2846a:	4604      	mov	r4, r0
   2846c:	460d      	mov	r5, r1
	unready_thread(thread);
   2846e:	f7fc f803 	bl	24478 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   28472:	7b63      	ldrb	r3, [r4, #13]
   28474:	f043 0302 	orr.w	r3, r3, #2
   28478:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2847a:	b1e5      	cbz	r5, 284b6 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   2847c:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   2847e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28480:	429d      	cmp	r5, r3
   28482:	d109      	bne.n	28498 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   28484:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   28486:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2848a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2848c:	606c      	str	r4, [r5, #4]
}
   2848e:	e012      	b.n	284b6 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   28490:	686a      	ldr	r2, [r5, #4]
   28492:	4293      	cmp	r3, r2
   28494:	d0f6      	beq.n	28484 <add_to_waitq_locked+0x1c>
   28496:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28498:	2b00      	cmp	r3, #0
   2849a:	d0f3      	beq.n	28484 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   2849c:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   284a0:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   284a4:	428a      	cmp	r2, r1
   284a6:	d0f3      	beq.n	28490 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   284a8:	4291      	cmp	r1, r2
   284aa:	ddf1      	ble.n	28490 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   284ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   284ae:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   284b2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   284b4:	605c      	str	r4, [r3, #4]
}
   284b6:	bd38      	pop	{r3, r4, r5, pc}

000284b8 <z_ready_thread>:
{
   284b8:	b510      	push	{r4, lr}
	__asm__ volatile(
   284ba:	f04f 0320 	mov.w	r3, #32
   284be:	f3ef 8411 	mrs	r4, BASEPRI
   284c2:	f383 8812 	msr	BASEPRI_MAX, r3
   284c6:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   284ca:	f7fb ffa1 	bl	24410 <ready_thread>
	__asm__ volatile(
   284ce:	f384 8811 	msr	BASEPRI, r4
   284d2:	f3bf 8f6f 	isb	sy
}
   284d6:	bd10      	pop	{r4, pc}

000284d8 <z_unpend_thread_no_timeout>:
{
   284d8:	b508      	push	{r3, lr}
	__asm__ volatile(
   284da:	f04f 0320 	mov.w	r3, #32
   284de:	f3ef 8111 	mrs	r1, BASEPRI
   284e2:	f383 8812 	msr	BASEPRI_MAX, r3
   284e6:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   284ea:	f7ff ff91 	bl	28410 <unpend_thread_no_timeout>
	__asm__ volatile(
   284ee:	f381 8811 	msr	BASEPRI, r1
   284f2:	f3bf 8f6f 	isb	sy
}
   284f6:	bd08      	pop	{r3, pc}

000284f8 <z_unpend1_no_timeout>:
{
   284f8:	b508      	push	{r3, lr}
   284fa:	4603      	mov	r3, r0
	__asm__ volatile(
   284fc:	f04f 0220 	mov.w	r2, #32
   28500:	f3ef 8111 	mrs	r1, BASEPRI
   28504:	f382 8812 	msr	BASEPRI_MAX, r2
   28508:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2850c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2850e:	4283      	cmp	r3, r0
   28510:	d007      	beq.n	28522 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   28512:	b108      	cbz	r0, 28518 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   28514:	f7ff ff7c 	bl	28410 <unpend_thread_no_timeout>
	__asm__ volatile(
   28518:	f381 8811 	msr	BASEPRI, r1
   2851c:	f3bf 8f6f 	isb	sy
}
   28520:	bd08      	pop	{r3, pc}
   28522:	2000      	movs	r0, #0
   28524:	e7f8      	b.n	28518 <z_unpend1_no_timeout+0x20>

00028526 <z_unpend_first_thread>:
{
   28526:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   28528:	f04f 0320 	mov.w	r3, #32
   2852c:	f3ef 8511 	mrs	r5, BASEPRI
   28530:	f383 8812 	msr	BASEPRI_MAX, r3
   28534:	f3bf 8f6f 	isb	sy
	return list->head == list;
   28538:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2853a:	42a0      	cmp	r0, r4
   2853c:	d00d      	beq.n	2855a <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   2853e:	b134      	cbz	r4, 2854e <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   28540:	4620      	mov	r0, r4
   28542:	f7ff ff65 	bl	28410 <unpend_thread_no_timeout>
   28546:	f104 0018 	add.w	r0, r4, #24
   2854a:	f000 f865 	bl	28618 <z_abort_timeout>
	__asm__ volatile(
   2854e:	f385 8811 	msr	BASEPRI, r5
   28552:	f3bf 8f6f 	isb	sy
}
   28556:	4620      	mov	r0, r4
   28558:	bd38      	pop	{r3, r4, r5, pc}
   2855a:	2400      	movs	r4, #0
   2855c:	e7f7      	b.n	2854e <z_unpend_first_thread+0x28>

0002855e <z_unpend_thread>:
{
   2855e:	b510      	push	{r4, lr}
	__asm__ volatile(
   28560:	f04f 0320 	mov.w	r3, #32
   28564:	f3ef 8411 	mrs	r4, BASEPRI
   28568:	f383 8812 	msr	BASEPRI_MAX, r3
   2856c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   28570:	f7ff ff4e 	bl	28410 <unpend_thread_no_timeout>
	__asm__ volatile(
   28574:	f384 8811 	msr	BASEPRI, r4
   28578:	f3bf 8f6f 	isb	sy
}
   2857c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28580:	3018      	adds	r0, #24
   28582:	f000 b849 	b.w	28618 <z_abort_timeout>

00028586 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   28586:	4603      	mov	r3, r0
   28588:	b920      	cbnz	r0, 28594 <z_reschedule_irqlock+0xe>
   2858a:	f3ef 8205 	mrs	r2, IPSR
   2858e:	b90a      	cbnz	r2, 28594 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   28590:	f7f3 b918 	b.w	1b7c4 <arch_swap>
   28594:	f383 8811 	msr	BASEPRI, r3
   28598:	f3bf 8f6f 	isb	sy
}
   2859c:	4770      	bx	lr

0002859e <z_reschedule_unlocked>:
	__asm__ volatile(
   2859e:	f04f 0320 	mov.w	r3, #32
   285a2:	f3ef 8011 	mrs	r0, BASEPRI
   285a6:	f383 8812 	msr	BASEPRI_MAX, r3
   285aa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   285ae:	f7ff bfea 	b.w	28586 <z_reschedule_irqlock>

000285b2 <z_unpend_all>:
{
   285b2:	b538      	push	{r3, r4, r5, lr}
   285b4:	4605      	mov	r5, r0
	int need_sched = 0;
   285b6:	2000      	movs	r0, #0
	return list->head == list;
   285b8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   285ba:	42a5      	cmp	r5, r4
   285bc:	d000      	beq.n	285c0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   285be:	b904      	cbnz	r4, 285c2 <z_unpend_all+0x10>
}
   285c0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   285c2:	4620      	mov	r0, r4
   285c4:	f7ff ffcb 	bl	2855e <z_unpend_thread>
		z_ready_thread(thread);
   285c8:	4620      	mov	r0, r4
   285ca:	f7ff ff75 	bl	284b8 <z_ready_thread>
		need_sched = 1;
   285ce:	2001      	movs	r0, #1
   285d0:	e7f2      	b.n	285b8 <z_unpend_all+0x6>

000285d2 <z_sched_wake>:
{
   285d2:	b538      	push	{r3, r4, r5, lr}
   285d4:	f04f 0320 	mov.w	r3, #32
   285d8:	f3ef 8511 	mrs	r5, BASEPRI
   285dc:	f383 8812 	msr	BASEPRI_MAX, r3
   285e0:	f3bf 8f6f 	isb	sy
	return list->head == list;
   285e4:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   285e6:	42a0      	cmp	r0, r4
   285e8:	d012      	beq.n	28610 <z_sched_wake+0x3e>
		if (thread != NULL) {
   285ea:	b19c      	cbz	r4, 28614 <z_sched_wake+0x42>
   285ec:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   285ee:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   285f0:	4620      	mov	r0, r4
   285f2:	f7ff ff0d 	bl	28410 <unpend_thread_no_timeout>
   285f6:	f104 0018 	add.w	r0, r4, #24
   285fa:	f000 f80d 	bl	28618 <z_abort_timeout>
			ready_thread(thread);
   285fe:	4620      	mov	r0, r4
   28600:	f7fb ff06 	bl	24410 <ready_thread>
			ret = true;
   28604:	2001      	movs	r0, #1
	__asm__ volatile(
   28606:	f385 8811 	msr	BASEPRI, r5
   2860a:	f3bf 8f6f 	isb	sy
}
   2860e:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   28610:	2000      	movs	r0, #0
   28612:	e7f8      	b.n	28606 <z_sched_wake+0x34>
   28614:	4620      	mov	r0, r4
   28616:	e7f6      	b.n	28606 <z_sched_wake+0x34>

00028618 <z_abort_timeout>:
{
   28618:	b510      	push	{r4, lr}
	__asm__ volatile(
   2861a:	f04f 0220 	mov.w	r2, #32
   2861e:	f3ef 8411 	mrs	r4, BASEPRI
   28622:	f382 8812 	msr	BASEPRI_MAX, r2
   28626:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2862a:	6803      	ldr	r3, [r0, #0]
   2862c:	b13b      	cbz	r3, 2863e <z_abort_timeout+0x26>
			remove_timeout(to);
   2862e:	f7fc fa29 	bl	24a84 <remove_timeout>
			ret = 0;
   28632:	2000      	movs	r0, #0
	__asm__ volatile(
   28634:	f384 8811 	msr	BASEPRI, r4
   28638:	f3bf 8f6f 	isb	sy
}
   2863c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2863e:	f06f 0015 	mvn.w	r0, #21
   28642:	e7f7      	b.n	28634 <z_abort_timeout+0x1c>

00028644 <z_get_next_timeout_expiry>:
{
   28644:	b510      	push	{r4, lr}
	__asm__ volatile(
   28646:	f04f 0320 	mov.w	r3, #32
   2864a:	f3ef 8411 	mrs	r4, BASEPRI
   2864e:	f383 8812 	msr	BASEPRI_MAX, r3
   28652:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   28656:	f7fc f9ed 	bl	24a34 <next_timeout>
	__asm__ volatile(
   2865a:	f384 8811 	msr	BASEPRI, r4
   2865e:	f3bf 8f6f 	isb	sy
}
   28662:	bd10      	pop	{r4, pc}

00028664 <z_set_timeout_expiry>:
{
   28664:	b570      	push	{r4, r5, r6, lr}
   28666:	4604      	mov	r4, r0
   28668:	460d      	mov	r5, r1
	__asm__ volatile(
   2866a:	f04f 0320 	mov.w	r3, #32
   2866e:	f3ef 8611 	mrs	r6, BASEPRI
   28672:	f383 8812 	msr	BASEPRI_MAX, r3
   28676:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2867a:	f7fc f9db 	bl	24a34 <next_timeout>
			      || (ticks <= next_to);
   2867e:	2801      	cmp	r0, #1
   28680:	dd07      	ble.n	28692 <z_set_timeout_expiry+0x2e>
   28682:	42a0      	cmp	r0, r4
   28684:	db05      	blt.n	28692 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   28686:	42a0      	cmp	r0, r4
   28688:	4629      	mov	r1, r5
   2868a:	bfa8      	it	ge
   2868c:	4620      	movge	r0, r4
   2868e:	f7f5 fa39 	bl	1db04 <sys_clock_set_timeout>
	__asm__ volatile(
   28692:	f386 8811 	msr	BASEPRI, r6
   28696:	f3bf 8f6f 	isb	sy
}
   2869a:	bd70      	pop	{r4, r5, r6, pc}

0002869c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2869c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2869e:	f7fc fae7 	bl	24c70 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   286a2:	bd08      	pop	{r3, pc}

000286a4 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   286a4:	f7fc bae4 	b.w	24c70 <sys_clock_tick_get>

000286a8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   286a8:	b108      	cbz	r0, 286ae <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   286aa:	f7f2 b897 	b.w	1a7dc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   286ae:	4770      	bx	lr

000286b0 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   286b0:	f1b1 3fff 	cmp.w	r1, #4294967295
   286b4:	bf08      	it	eq
   286b6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   286ba:	b538      	push	{r3, r4, r5, lr}
   286bc:	460c      	mov	r4, r1
   286be:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   286c0:	d014      	beq.n	286ec <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   286c2:	4308      	orrs	r0, r1
   286c4:	d103      	bne.n	286ce <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   286c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   286ca:	f7fc bad1 	b.w	24c70 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   286ce:	f06f 0001 	mvn.w	r0, #1
   286d2:	f04f 33ff 	mov.w	r3, #4294967295
   286d6:	1b40      	subs	r0, r0, r5
   286d8:	eb63 0101 	sbc.w	r1, r3, r1
   286dc:	2900      	cmp	r1, #0
   286de:	da04      	bge.n	286ea <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   286e0:	f7fc fac6 	bl	24c70 <sys_clock_tick_get>
   286e4:	1940      	adds	r0, r0, r5
   286e6:	eb41 0104 	adc.w	r1, r1, r4
}
   286ea:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   286ec:	f04f 30ff 	mov.w	r0, #4294967295
   286f0:	4601      	mov	r1, r0
   286f2:	e7fa      	b.n	286ea <sys_clock_timeout_end_calc+0x3a>

000286f4 <k_timer_init>:
	timer->status = 0U;
   286f4:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   286f6:	e9c0 1208 	strd	r1, r2, [r0, #32]
   286fa:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   286fe:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   28702:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   28706:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   28708:	6343      	str	r3, [r0, #52]	; 0x34
}
   2870a:	4770      	bx	lr

0002870c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2870c:	b510      	push	{r4, lr}
   2870e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   28710:	f7ff ff82 	bl	28618 <z_abort_timeout>

	if (inactive) {
   28714:	b9b0      	cbnz	r0, 28744 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   28716:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28718:	b10b      	cbz	r3, 2871e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2871a:	4620      	mov	r0, r4
   2871c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2871e:	f104 0018 	add.w	r0, r4, #24
   28722:	f7ff fee9 	bl	284f8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   28726:	b168      	cbz	r0, 28744 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   28728:	f7ff fec6 	bl	284b8 <z_ready_thread>
	__asm__ volatile(
   2872c:	f04f 0320 	mov.w	r3, #32
   28730:	f3ef 8011 	mrs	r0, BASEPRI
   28734:	f383 8812 	msr	BASEPRI_MAX, r3
   28738:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2873c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28740:	f7ff bf21 	b.w	28586 <z_reschedule_irqlock>
   28744:	bd10      	pop	{r4, pc}

00028746 <signal_poll_event>:
{
   28746:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2874a:	6884      	ldr	r4, [r0, #8]
{
   2874c:	4605      	mov	r5, r0
   2874e:	460e      	mov	r6, r1
	if (poller != NULL) {
   28750:	b144      	cbz	r4, 28764 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   28752:	7863      	ldrb	r3, [r4, #1]
   28754:	2b01      	cmp	r3, #1
   28756:	d12e      	bne.n	287b6 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   28758:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2875c:	f013 0302 	ands.w	r3, r3, #2
   28760:	d10a      	bne.n	28778 <signal_poll_event+0x32>
		poller->is_polling = false;
   28762:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   28764:	2000      	movs	r0, #0
	event->state |= state;
   28766:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   28768:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2876a:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2876e:	4316      	orrs	r6, r2
   28770:	f366 3394 	bfi	r3, r6, #14, #7
   28774:	60eb      	str	r3, [r5, #12]
	return retcode;
   28776:	e03e      	b.n	287f6 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   28778:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2877c:	f1b3 3fff 	cmp.w	r3, #4294967295
   28780:	bf08      	it	eq
   28782:	f112 0f02 	cmneq.w	r2, #2
   28786:	d032      	beq.n	287ee <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   28788:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2878c:	4640      	mov	r0, r8
   2878e:	f7ff fee6 	bl	2855e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   28792:	2e08      	cmp	r6, #8
   28794:	bf0c      	ite	eq
   28796:	f06f 0303 	mvneq.w	r3, #3
   2879a:	2300      	movne	r3, #0
   2879c:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2879e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   287a2:	06db      	lsls	r3, r3, #27
   287a4:	d109      	bne.n	287ba <signal_poll_event+0x74>
   287a6:	f854 7c48 	ldr.w	r7, [r4, #-72]
   287aa:	b937      	cbnz	r7, 287ba <signal_poll_event+0x74>
	z_ready_thread(thread);
   287ac:	4640      	mov	r0, r8
   287ae:	f7ff fe83 	bl	284b8 <z_ready_thread>
		poller->is_polling = false;
   287b2:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   287b4:	e7d6      	b.n	28764 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   287b6:	2b02      	cmp	r3, #2
   287b8:	d001      	beq.n	287be <signal_poll_event+0x78>
		poller->is_polling = false;
   287ba:	2300      	movs	r3, #0
   287bc:	e7d1      	b.n	28762 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   287be:	7823      	ldrb	r3, [r4, #0]
   287c0:	2b00      	cmp	r3, #0
   287c2:	d0cf      	beq.n	28764 <signal_poll_event+0x1e>
   287c4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   287c8:	2f00      	cmp	r7, #0
   287ca:	d0f2      	beq.n	287b2 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   287cc:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   287d0:	f1a4 0914 	sub.w	r9, r4, #20
   287d4:	f104 0014 	add.w	r0, r4, #20
   287d8:	f7ff ff1e 	bl	28618 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   287dc:	4649      	mov	r1, r9
   287de:	4638      	mov	r0, r7
		twork->poll_result = 0;
   287e0:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   287e4:	f7ff fde7 	bl	283b6 <z_work_submit_to_queue>
		poller->is_polling = false;
   287e8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   287ec:	e7ba      	b.n	28764 <signal_poll_event+0x1e>
		poller->is_polling = false;
   287ee:	2300      	movs	r3, #0
		return -EAGAIN;
   287f0:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   287f4:	7023      	strb	r3, [r4, #0]
}
   287f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000287fa <k_poll_event_init>:
{
   287fa:	b510      	push	{r4, lr}
	event->poller = NULL;
   287fc:	2400      	movs	r4, #0
	event->type = type;
   287fe:	0552      	lsls	r2, r2, #21
   28800:	0209      	lsls	r1, r1, #8
   28802:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   28806:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   2880a:	430a      	orrs	r2, r1
   2880c:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2880e:	6084      	str	r4, [r0, #8]
	event->type = type;
   28810:	430a      	orrs	r2, r1
	event->obj = obj;
   28812:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   28816:	bd10      	pop	{r4, pc}

00028818 <z_handle_obj_poll_events>:
{
   28818:	4603      	mov	r3, r0
	return list->head == list;
   2881a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2881c:	4283      	cmp	r3, r0
   2881e:	d008      	beq.n	28832 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   28820:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   28824:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28826:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28828:	2300      	movs	r3, #0
	node->prev = NULL;
   2882a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2882e:	f7ff bf8a 	b.w	28746 <signal_poll_event>
}
   28832:	4770      	bx	lr

00028834 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   28834:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   28836:	e9c0 0000 	strd	r0, r0, [r0]
   2883a:	6083      	str	r3, [r0, #8]
}
   2883c:	4770      	bx	lr

0002883e <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   2883e:	6883      	ldr	r3, [r0, #8]
   28840:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   28842:	68c3      	ldr	r3, [r0, #12]
   28844:	6013      	str	r3, [r2, #0]
}
   28846:	4770      	bx	lr

00028848 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   28848:	3204      	adds	r2, #4
{
   2884a:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   2884c:	4604      	mov	r4, r0
   2884e:	d208      	bcs.n	28862 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   28850:	2600      	movs	r6, #0
   28852:	2700      	movs	r7, #0
   28854:	f041 0104 	orr.w	r1, r1, #4
   28858:	e9cd 6700 	strd	r6, r7, [sp]
   2885c:	f7ff fc75 	bl	2814a <k_heap_aligned_alloc>
	if (mem == NULL) {
   28860:	b910      	cbnz	r0, 28868 <z_heap_aligned_alloc+0x20>
		return NULL;
   28862:	2000      	movs	r0, #0
}
   28864:	b002      	add	sp, #8
   28866:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   28868:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   2886c:	e7fa      	b.n	28864 <z_heap_aligned_alloc+0x1c>

0002886e <k_free>:
	if (ptr != NULL) {
   2886e:	b120      	cbz	r0, 2887a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   28870:	1f01      	subs	r1, r0, #4
   28872:	f850 0c04 	ldr.w	r0, [r0, #-4]
   28876:	f7ff bcbf 	b.w	281f8 <k_heap_free>
}
   2887a:	4770      	bx	lr

0002887c <k_malloc>:
{
   2887c:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2887e:	2004      	movs	r0, #4
   28880:	f7fc baee 	b.w	24e60 <k_aligned_alloc>

00028884 <k_calloc>:
{
   28884:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   28886:	fba0 5401 	umull	r5, r4, r0, r1
   2888a:	b924      	cbnz	r4, 28896 <k_calloc+0x12>
	ret = k_malloc(bounds);
   2888c:	4628      	mov	r0, r5
   2888e:	f7ff fff5 	bl	2887c <k_malloc>
	if (ret != NULL) {
   28892:	4606      	mov	r6, r0
   28894:	b910      	cbnz	r0, 2889c <k_calloc+0x18>
		return NULL;
   28896:	2600      	movs	r6, #0
}
   28898:	4630      	mov	r0, r6
   2889a:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   2889c:	462a      	mov	r2, r5
   2889e:	4621      	mov	r1, r4
   288a0:	f000 f831 	bl	28906 <memset>
   288a4:	e7f8      	b.n	28898 <k_calloc+0x14>

000288a6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   288a6:	4770      	bx	lr

000288a8 <abs>:
   288a8:	2800      	cmp	r0, #0
   288aa:	bfb8      	it	lt
   288ac:	4240      	neglt	r0, r0
   288ae:	4770      	bx	lr

000288b0 <memchr>:
   288b0:	b2c9      	uxtb	r1, r1
   288b2:	4603      	mov	r3, r0
   288b4:	4402      	add	r2, r0
   288b6:	b510      	push	{r4, lr}
   288b8:	4293      	cmp	r3, r2
   288ba:	4618      	mov	r0, r3
   288bc:	d101      	bne.n	288c2 <memchr+0x12>
   288be:	2000      	movs	r0, #0
   288c0:	e003      	b.n	288ca <memchr+0x1a>
   288c2:	7804      	ldrb	r4, [r0, #0]
   288c4:	3301      	adds	r3, #1
   288c6:	428c      	cmp	r4, r1
   288c8:	d1f6      	bne.n	288b8 <memchr+0x8>
   288ca:	bd10      	pop	{r4, pc}

000288cc <memcmp>:
   288cc:	3901      	subs	r1, #1
   288ce:	4402      	add	r2, r0
   288d0:	b510      	push	{r4, lr}
   288d2:	4290      	cmp	r0, r2
   288d4:	d101      	bne.n	288da <memcmp+0xe>
   288d6:	2000      	movs	r0, #0
   288d8:	e005      	b.n	288e6 <memcmp+0x1a>
   288da:	7803      	ldrb	r3, [r0, #0]
   288dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   288e0:	42a3      	cmp	r3, r4
   288e2:	d001      	beq.n	288e8 <memcmp+0x1c>
   288e4:	1b18      	subs	r0, r3, r4
   288e6:	bd10      	pop	{r4, pc}
   288e8:	3001      	adds	r0, #1
   288ea:	e7f2      	b.n	288d2 <memcmp+0x6>

000288ec <memcpy>:
   288ec:	440a      	add	r2, r1
   288ee:	1e43      	subs	r3, r0, #1
   288f0:	4291      	cmp	r1, r2
   288f2:	d100      	bne.n	288f6 <memcpy+0xa>
   288f4:	4770      	bx	lr
   288f6:	b510      	push	{r4, lr}
   288f8:	f811 4b01 	ldrb.w	r4, [r1], #1
   288fc:	4291      	cmp	r1, r2
   288fe:	f803 4f01 	strb.w	r4, [r3, #1]!
   28902:	d1f9      	bne.n	288f8 <memcpy+0xc>
   28904:	bd10      	pop	{r4, pc}

00028906 <memset>:
   28906:	4402      	add	r2, r0
   28908:	4603      	mov	r3, r0
   2890a:	4293      	cmp	r3, r2
   2890c:	d100      	bne.n	28910 <memset+0xa>
   2890e:	4770      	bx	lr
   28910:	f803 1b01 	strb.w	r1, [r3], #1
   28914:	e7f9      	b.n	2890a <memset+0x4>

00028916 <strchr>:
   28916:	b2c9      	uxtb	r1, r1
   28918:	4603      	mov	r3, r0
   2891a:	4618      	mov	r0, r3
   2891c:	f813 2b01 	ldrb.w	r2, [r3], #1
   28920:	b112      	cbz	r2, 28928 <strchr+0x12>
   28922:	428a      	cmp	r2, r1
   28924:	d1f9      	bne.n	2891a <strchr+0x4>
   28926:	4770      	bx	lr
   28928:	2900      	cmp	r1, #0
   2892a:	bf18      	it	ne
   2892c:	2000      	movne	r0, #0
   2892e:	4770      	bx	lr

00028930 <strcpy>:
   28930:	4603      	mov	r3, r0
   28932:	f811 2b01 	ldrb.w	r2, [r1], #1
   28936:	f803 2b01 	strb.w	r2, [r3], #1
   2893a:	2a00      	cmp	r2, #0
   2893c:	d1f9      	bne.n	28932 <strcpy+0x2>
   2893e:	4770      	bx	lr

00028940 <strncmp>:
   28940:	b510      	push	{r4, lr}
   28942:	b16a      	cbz	r2, 28960 <strncmp+0x20>
   28944:	3901      	subs	r1, #1
   28946:	1884      	adds	r4, r0, r2
   28948:	f810 2b01 	ldrb.w	r2, [r0], #1
   2894c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   28950:	429a      	cmp	r2, r3
   28952:	d103      	bne.n	2895c <strncmp+0x1c>
   28954:	42a0      	cmp	r0, r4
   28956:	d001      	beq.n	2895c <strncmp+0x1c>
   28958:	2a00      	cmp	r2, #0
   2895a:	d1f5      	bne.n	28948 <strncmp+0x8>
   2895c:	1ad0      	subs	r0, r2, r3
   2895e:	bd10      	pop	{r4, pc}
   28960:	4610      	mov	r0, r2
   28962:	e7fc      	b.n	2895e <strncmp+0x1e>

00028964 <strncpy>:
   28964:	3901      	subs	r1, #1
   28966:	4603      	mov	r3, r0
   28968:	b510      	push	{r4, lr}
   2896a:	b132      	cbz	r2, 2897a <strncpy+0x16>
   2896c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   28970:	3a01      	subs	r2, #1
   28972:	f803 4b01 	strb.w	r4, [r3], #1
   28976:	2c00      	cmp	r4, #0
   28978:	d1f7      	bne.n	2896a <strncpy+0x6>
   2897a:	441a      	add	r2, r3
   2897c:	2100      	movs	r1, #0
   2897e:	4293      	cmp	r3, r2
   28980:	d100      	bne.n	28984 <strncpy+0x20>
   28982:	bd10      	pop	{r4, pc}
   28984:	f803 1b01 	strb.w	r1, [r3], #1
   28988:	e7f9      	b.n	2897e <strncpy+0x1a>

0002898a <strnlen>:
   2898a:	4602      	mov	r2, r0
   2898c:	4401      	add	r1, r0
   2898e:	b510      	push	{r4, lr}
   28990:	428a      	cmp	r2, r1
   28992:	4613      	mov	r3, r2
   28994:	d003      	beq.n	2899e <strnlen+0x14>
   28996:	781c      	ldrb	r4, [r3, #0]
   28998:	3201      	adds	r2, #1
   2899a:	2c00      	cmp	r4, #0
   2899c:	d1f8      	bne.n	28990 <strnlen+0x6>
   2899e:	1a18      	subs	r0, r3, r0
   289a0:	bd10      	pop	{r4, pc}

000289a2 <strstr>:
   289a2:	780a      	ldrb	r2, [r1, #0]
   289a4:	b570      	push	{r4, r5, r6, lr}
   289a6:	b96a      	cbnz	r2, 289c4 <strstr+0x22>
   289a8:	bd70      	pop	{r4, r5, r6, pc}
   289aa:	429a      	cmp	r2, r3
   289ac:	d109      	bne.n	289c2 <strstr+0x20>
   289ae:	460c      	mov	r4, r1
   289b0:	4605      	mov	r5, r0
   289b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   289b6:	2b00      	cmp	r3, #0
   289b8:	d0f6      	beq.n	289a8 <strstr+0x6>
   289ba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   289be:	429e      	cmp	r6, r3
   289c0:	d0f7      	beq.n	289b2 <strstr+0x10>
   289c2:	3001      	adds	r0, #1
   289c4:	7803      	ldrb	r3, [r0, #0]
   289c6:	2b00      	cmp	r3, #0
   289c8:	d1ef      	bne.n	289aa <strstr+0x8>
   289ca:	4618      	mov	r0, r3
   289cc:	e7ec      	b.n	289a8 <strstr+0x6>

000289ce <_vsniprintf_r>:
   289ce:	b530      	push	{r4, r5, lr}
   289d0:	4614      	mov	r4, r2
   289d2:	b09b      	sub	sp, #108	; 0x6c
   289d4:	4605      	mov	r5, r0
   289d6:	461a      	mov	r2, r3
   289d8:	2c00      	cmp	r4, #0
   289da:	da05      	bge.n	289e8 <_vsniprintf_r+0x1a>
   289dc:	238b      	movs	r3, #139	; 0x8b
   289de:	6003      	str	r3, [r0, #0]
   289e0:	f04f 30ff 	mov.w	r0, #4294967295
   289e4:	b01b      	add	sp, #108	; 0x6c
   289e6:	bd30      	pop	{r4, r5, pc}
   289e8:	f44f 7302 	mov.w	r3, #520	; 0x208
   289ec:	9100      	str	r1, [sp, #0]
   289ee:	9104      	str	r1, [sp, #16]
   289f0:	4669      	mov	r1, sp
   289f2:	f8ad 300c 	strh.w	r3, [sp, #12]
   289f6:	bf14      	ite	ne
   289f8:	f104 33ff 	addne.w	r3, r4, #4294967295
   289fc:	4623      	moveq	r3, r4
   289fe:	9302      	str	r3, [sp, #8]
   28a00:	9305      	str	r3, [sp, #20]
   28a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28a06:	f8ad 300e 	strh.w	r3, [sp, #14]
   28a0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   28a0c:	f7fc fcde 	bl	253cc <_svfiprintf_r>
   28a10:	1c43      	adds	r3, r0, #1
   28a12:	bfbc      	itt	lt
   28a14:	238b      	movlt	r3, #139	; 0x8b
   28a16:	602b      	strlt	r3, [r5, #0]
   28a18:	2c00      	cmp	r4, #0
   28a1a:	d0e3      	beq.n	289e4 <_vsniprintf_r+0x16>
   28a1c:	9b00      	ldr	r3, [sp, #0]
   28a1e:	2200      	movs	r2, #0
   28a20:	701a      	strb	r2, [r3, #0]
   28a22:	e7df      	b.n	289e4 <_vsniprintf_r+0x16>

00028a24 <__ssputs_r>:
   28a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28a28:	461f      	mov	r7, r3
   28a2a:	688e      	ldr	r6, [r1, #8]
   28a2c:	4682      	mov	sl, r0
   28a2e:	460c      	mov	r4, r1
   28a30:	42be      	cmp	r6, r7
   28a32:	4690      	mov	r8, r2
   28a34:	680b      	ldr	r3, [r1, #0]
   28a36:	d82d      	bhi.n	28a94 <__ssputs_r+0x70>
   28a38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   28a3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
   28a40:	d026      	beq.n	28a90 <__ssputs_r+0x6c>
   28a42:	6965      	ldr	r5, [r4, #20]
   28a44:	6909      	ldr	r1, [r1, #16]
   28a46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   28a4a:	eba3 0901 	sub.w	r9, r3, r1
   28a4e:	1c7b      	adds	r3, r7, #1
   28a50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   28a54:	444b      	add	r3, r9
   28a56:	106d      	asrs	r5, r5, #1
   28a58:	429d      	cmp	r5, r3
   28a5a:	bf38      	it	cc
   28a5c:	461d      	movcc	r5, r3
   28a5e:	0553      	lsls	r3, r2, #21
   28a60:	d527      	bpl.n	28ab2 <__ssputs_r+0x8e>
   28a62:	4629      	mov	r1, r5
   28a64:	f7fc fa8c 	bl	24f80 <_malloc_r>
   28a68:	4606      	mov	r6, r0
   28a6a:	b360      	cbz	r0, 28ac6 <__ssputs_r+0xa2>
   28a6c:	464a      	mov	r2, r9
   28a6e:	6921      	ldr	r1, [r4, #16]
   28a70:	f7ff ff3c 	bl	288ec <memcpy>
   28a74:	89a3      	ldrh	r3, [r4, #12]
   28a76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   28a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   28a7e:	81a3      	strh	r3, [r4, #12]
   28a80:	6126      	str	r6, [r4, #16]
   28a82:	444e      	add	r6, r9
   28a84:	6165      	str	r5, [r4, #20]
   28a86:	eba5 0509 	sub.w	r5, r5, r9
   28a8a:	6026      	str	r6, [r4, #0]
   28a8c:	463e      	mov	r6, r7
   28a8e:	60a5      	str	r5, [r4, #8]
   28a90:	42be      	cmp	r6, r7
   28a92:	d900      	bls.n	28a96 <__ssputs_r+0x72>
   28a94:	463e      	mov	r6, r7
   28a96:	4632      	mov	r2, r6
   28a98:	4641      	mov	r1, r8
   28a9a:	6820      	ldr	r0, [r4, #0]
   28a9c:	f000 f88f 	bl	28bbe <memmove>
   28aa0:	68a3      	ldr	r3, [r4, #8]
   28aa2:	2000      	movs	r0, #0
   28aa4:	1b9b      	subs	r3, r3, r6
   28aa6:	60a3      	str	r3, [r4, #8]
   28aa8:	6823      	ldr	r3, [r4, #0]
   28aaa:	4433      	add	r3, r6
   28aac:	6023      	str	r3, [r4, #0]
   28aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28ab2:	462a      	mov	r2, r5
   28ab4:	f000 f89d 	bl	28bf2 <_realloc_r>
   28ab8:	4606      	mov	r6, r0
   28aba:	2800      	cmp	r0, #0
   28abc:	d1e0      	bne.n	28a80 <__ssputs_r+0x5c>
   28abe:	6921      	ldr	r1, [r4, #16]
   28ac0:	4650      	mov	r0, sl
   28ac2:	f7fc fa13 	bl	24eec <_free_r>
   28ac6:	230c      	movs	r3, #12
   28ac8:	f04f 30ff 	mov.w	r0, #4294967295
   28acc:	f8ca 3000 	str.w	r3, [sl]
   28ad0:	89a3      	ldrh	r3, [r4, #12]
   28ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   28ad6:	81a3      	strh	r3, [r4, #12]
   28ad8:	e7e9      	b.n	28aae <__ssputs_r+0x8a>

00028ada <_printf_common>:
   28ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28ade:	4616      	mov	r6, r2
   28ae0:	4698      	mov	r8, r3
   28ae2:	688a      	ldr	r2, [r1, #8]
   28ae4:	4607      	mov	r7, r0
   28ae6:	690b      	ldr	r3, [r1, #16]
   28ae8:	460c      	mov	r4, r1
   28aea:	f8dd 9020 	ldr.w	r9, [sp, #32]
   28aee:	4293      	cmp	r3, r2
   28af0:	bfb8      	it	lt
   28af2:	4613      	movlt	r3, r2
   28af4:	6033      	str	r3, [r6, #0]
   28af6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   28afa:	b10a      	cbz	r2, 28b00 <_printf_common+0x26>
   28afc:	3301      	adds	r3, #1
   28afe:	6033      	str	r3, [r6, #0]
   28b00:	6823      	ldr	r3, [r4, #0]
   28b02:	0699      	lsls	r1, r3, #26
   28b04:	bf42      	ittt	mi
   28b06:	6833      	ldrmi	r3, [r6, #0]
   28b08:	3302      	addmi	r3, #2
   28b0a:	6033      	strmi	r3, [r6, #0]
   28b0c:	6825      	ldr	r5, [r4, #0]
   28b0e:	f015 0506 	ands.w	r5, r5, #6
   28b12:	d106      	bne.n	28b22 <_printf_common+0x48>
   28b14:	f104 0a19 	add.w	sl, r4, #25
   28b18:	68e3      	ldr	r3, [r4, #12]
   28b1a:	6832      	ldr	r2, [r6, #0]
   28b1c:	1a9b      	subs	r3, r3, r2
   28b1e:	42ab      	cmp	r3, r5
   28b20:	dc2b      	bgt.n	28b7a <_printf_common+0xa0>
   28b22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   28b26:	6822      	ldr	r2, [r4, #0]
   28b28:	3b00      	subs	r3, #0
   28b2a:	bf18      	it	ne
   28b2c:	2301      	movne	r3, #1
   28b2e:	0692      	lsls	r2, r2, #26
   28b30:	d430      	bmi.n	28b94 <_printf_common+0xba>
   28b32:	f104 0243 	add.w	r2, r4, #67	; 0x43
   28b36:	4641      	mov	r1, r8
   28b38:	4638      	mov	r0, r7
   28b3a:	47c8      	blx	r9
   28b3c:	3001      	adds	r0, #1
   28b3e:	d023      	beq.n	28b88 <_printf_common+0xae>
   28b40:	6823      	ldr	r3, [r4, #0]
   28b42:	341a      	adds	r4, #26
   28b44:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   28b48:	f003 0306 	and.w	r3, r3, #6
   28b4c:	2b04      	cmp	r3, #4
   28b4e:	bf0a      	itet	eq
   28b50:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   28b54:	2500      	movne	r5, #0
   28b56:	6833      	ldreq	r3, [r6, #0]
   28b58:	f04f 0600 	mov.w	r6, #0
   28b5c:	bf08      	it	eq
   28b5e:	1aed      	subeq	r5, r5, r3
   28b60:	f854 3c12 	ldr.w	r3, [r4, #-18]
   28b64:	bf08      	it	eq
   28b66:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   28b6a:	4293      	cmp	r3, r2
   28b6c:	bfc4      	itt	gt
   28b6e:	1a9b      	subgt	r3, r3, r2
   28b70:	18ed      	addgt	r5, r5, r3
   28b72:	42b5      	cmp	r5, r6
   28b74:	d11a      	bne.n	28bac <_printf_common+0xd2>
   28b76:	2000      	movs	r0, #0
   28b78:	e008      	b.n	28b8c <_printf_common+0xb2>
   28b7a:	2301      	movs	r3, #1
   28b7c:	4652      	mov	r2, sl
   28b7e:	4641      	mov	r1, r8
   28b80:	4638      	mov	r0, r7
   28b82:	47c8      	blx	r9
   28b84:	3001      	adds	r0, #1
   28b86:	d103      	bne.n	28b90 <_printf_common+0xb6>
   28b88:	f04f 30ff 	mov.w	r0, #4294967295
   28b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28b90:	3501      	adds	r5, #1
   28b92:	e7c1      	b.n	28b18 <_printf_common+0x3e>
   28b94:	18e1      	adds	r1, r4, r3
   28b96:	1c5a      	adds	r2, r3, #1
   28b98:	2030      	movs	r0, #48	; 0x30
   28b9a:	3302      	adds	r3, #2
   28b9c:	4422      	add	r2, r4
   28b9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   28ba2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   28ba6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   28baa:	e7c2      	b.n	28b32 <_printf_common+0x58>
   28bac:	2301      	movs	r3, #1
   28bae:	4622      	mov	r2, r4
   28bb0:	4641      	mov	r1, r8
   28bb2:	4638      	mov	r0, r7
   28bb4:	47c8      	blx	r9
   28bb6:	3001      	adds	r0, #1
   28bb8:	d0e6      	beq.n	28b88 <_printf_common+0xae>
   28bba:	3601      	adds	r6, #1
   28bbc:	e7d9      	b.n	28b72 <_printf_common+0x98>

00028bbe <memmove>:
   28bbe:	4288      	cmp	r0, r1
   28bc0:	b510      	push	{r4, lr}
   28bc2:	eb01 0402 	add.w	r4, r1, r2
   28bc6:	d902      	bls.n	28bce <memmove+0x10>
   28bc8:	4284      	cmp	r4, r0
   28bca:	4623      	mov	r3, r4
   28bcc:	d807      	bhi.n	28bde <memmove+0x20>
   28bce:	1e43      	subs	r3, r0, #1
   28bd0:	42a1      	cmp	r1, r4
   28bd2:	d008      	beq.n	28be6 <memmove+0x28>
   28bd4:	f811 2b01 	ldrb.w	r2, [r1], #1
   28bd8:	f803 2f01 	strb.w	r2, [r3, #1]!
   28bdc:	e7f8      	b.n	28bd0 <memmove+0x12>
   28bde:	4402      	add	r2, r0
   28be0:	4601      	mov	r1, r0
   28be2:	428a      	cmp	r2, r1
   28be4:	d100      	bne.n	28be8 <memmove+0x2a>
   28be6:	bd10      	pop	{r4, pc}
   28be8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   28bec:	f802 4d01 	strb.w	r4, [r2, #-1]!
   28bf0:	e7f7      	b.n	28be2 <memmove+0x24>

00028bf2 <_realloc_r>:
   28bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28bf4:	4607      	mov	r7, r0
   28bf6:	4615      	mov	r5, r2
   28bf8:	460c      	mov	r4, r1
   28bfa:	b921      	cbnz	r1, 28c06 <_realloc_r+0x14>
   28bfc:	4611      	mov	r1, r2
   28bfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   28c02:	f7fc b9bd 	b.w	24f80 <_malloc_r>
   28c06:	b922      	cbnz	r2, 28c12 <_realloc_r+0x20>
   28c08:	f7fc f970 	bl	24eec <_free_r>
   28c0c:	2400      	movs	r4, #0
   28c0e:	4620      	mov	r0, r4
   28c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28c12:	f000 f813 	bl	28c3c <_malloc_usable_size_r>
   28c16:	42a8      	cmp	r0, r5
   28c18:	d2f9      	bcs.n	28c0e <_realloc_r+0x1c>
   28c1a:	4629      	mov	r1, r5
   28c1c:	4638      	mov	r0, r7
   28c1e:	f7fc f9af 	bl	24f80 <_malloc_r>
   28c22:	4606      	mov	r6, r0
   28c24:	2800      	cmp	r0, #0
   28c26:	d0f1      	beq.n	28c0c <_realloc_r+0x1a>
   28c28:	4621      	mov	r1, r4
   28c2a:	462a      	mov	r2, r5
   28c2c:	f7ff fe5e 	bl	288ec <memcpy>
   28c30:	4621      	mov	r1, r4
   28c32:	4638      	mov	r0, r7
   28c34:	4634      	mov	r4, r6
   28c36:	f7fc f959 	bl	24eec <_free_r>
   28c3a:	e7e8      	b.n	28c0e <_realloc_r+0x1c>

00028c3c <_malloc_usable_size_r>:
   28c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   28c40:	1f18      	subs	r0, r3, #4
   28c42:	2b00      	cmp	r3, #0
   28c44:	bfbc      	itt	lt
   28c46:	580b      	ldrlt	r3, [r1, r0]
   28c48:	18c0      	addlt	r0, r0, r3
   28c4a:	4770      	bx	lr
