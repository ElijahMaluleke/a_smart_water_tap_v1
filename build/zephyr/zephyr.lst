
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00018000 <_vector_table>:
   18000:	98 fd 00 20 ad c7 01 00 83 83 02 00 81 c7 01 00     ... ............
   18010:	81 c7 01 00 81 c7 01 00 81 c7 01 00 81 c7 01 00     ................
	...
   1802c:	d5 c0 01 00 81 c7 01 00 00 00 00 00 75 c0 01 00     ............u...
   1803c:	81 c7 01 00                                         ....

00018040 <_irq_vector_table>:
   18040:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   18050:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   18060:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   18070:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   18080:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   18090:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   180a0:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   180b0:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   180c0:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   180d0:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   180e0:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   180f0:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   18100:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   18110:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   18120:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   18130:	5d c1 01 00 5d c1 01 00 5d c1 01 00 5d c1 01 00     ]...]...]...]...
   18140:	5d c1 01 00                                         ]...

Disassembly of section text:

00018148 <__aeabi_fmul>:
   18148:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1814c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18150:	bf1e      	ittt	ne
   18152:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18156:	ea92 0f0c 	teqne	r2, ip
   1815a:	ea93 0f0c 	teqne	r3, ip
   1815e:	d06f      	beq.n	18240 <__aeabi_fmul+0xf8>
   18160:	441a      	add	r2, r3
   18162:	ea80 0c01 	eor.w	ip, r0, r1
   18166:	0240      	lsls	r0, r0, #9
   18168:	bf18      	it	ne
   1816a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1816e:	d01e      	beq.n	181ae <__aeabi_fmul+0x66>
   18170:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18174:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18178:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1817c:	fba0 3101 	umull	r3, r1, r0, r1
   18180:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18184:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18188:	bf3e      	ittt	cc
   1818a:	0049      	lslcc	r1, r1, #1
   1818c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18190:	005b      	lslcc	r3, r3, #1
   18192:	ea40 0001 	orr.w	r0, r0, r1
   18196:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1819a:	2afd      	cmp	r2, #253	; 0xfd
   1819c:	d81d      	bhi.n	181da <__aeabi_fmul+0x92>
   1819e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   181a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   181a6:	bf08      	it	eq
   181a8:	f020 0001 	biceq.w	r0, r0, #1
   181ac:	4770      	bx	lr
   181ae:	f090 0f00 	teq	r0, #0
   181b2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   181b6:	bf08      	it	eq
   181b8:	0249      	lsleq	r1, r1, #9
   181ba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   181be:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   181c2:	3a7f      	subs	r2, #127	; 0x7f
   181c4:	bfc2      	ittt	gt
   181c6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   181ca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   181ce:	4770      	bxgt	lr
   181d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   181d4:	f04f 0300 	mov.w	r3, #0
   181d8:	3a01      	subs	r2, #1
   181da:	dc5d      	bgt.n	18298 <__aeabi_fmul+0x150>
   181dc:	f112 0f19 	cmn.w	r2, #25
   181e0:	bfdc      	itt	le
   181e2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   181e6:	4770      	bxle	lr
   181e8:	f1c2 0200 	rsb	r2, r2, #0
   181ec:	0041      	lsls	r1, r0, #1
   181ee:	fa21 f102 	lsr.w	r1, r1, r2
   181f2:	f1c2 0220 	rsb	r2, r2, #32
   181f6:	fa00 fc02 	lsl.w	ip, r0, r2
   181fa:	ea5f 0031 	movs.w	r0, r1, rrx
   181fe:	f140 0000 	adc.w	r0, r0, #0
   18202:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   18206:	bf08      	it	eq
   18208:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1820c:	4770      	bx	lr
   1820e:	f092 0f00 	teq	r2, #0
   18212:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18216:	bf02      	ittt	eq
   18218:	0040      	lsleq	r0, r0, #1
   1821a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1821e:	3a01      	subeq	r2, #1
   18220:	d0f9      	beq.n	18216 <__aeabi_fmul+0xce>
   18222:	ea40 000c 	orr.w	r0, r0, ip
   18226:	f093 0f00 	teq	r3, #0
   1822a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1822e:	bf02      	ittt	eq
   18230:	0049      	lsleq	r1, r1, #1
   18232:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18236:	3b01      	subeq	r3, #1
   18238:	d0f9      	beq.n	1822e <__aeabi_fmul+0xe6>
   1823a:	ea41 010c 	orr.w	r1, r1, ip
   1823e:	e78f      	b.n	18160 <__aeabi_fmul+0x18>
   18240:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18244:	ea92 0f0c 	teq	r2, ip
   18248:	bf18      	it	ne
   1824a:	ea93 0f0c 	teqne	r3, ip
   1824e:	d00a      	beq.n	18266 <__aeabi_fmul+0x11e>
   18250:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18254:	bf18      	it	ne
   18256:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1825a:	d1d8      	bne.n	1820e <__aeabi_fmul+0xc6>
   1825c:	ea80 0001 	eor.w	r0, r0, r1
   18260:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18264:	4770      	bx	lr
   18266:	f090 0f00 	teq	r0, #0
   1826a:	bf17      	itett	ne
   1826c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18270:	4608      	moveq	r0, r1
   18272:	f091 0f00 	teqne	r1, #0
   18276:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1827a:	d014      	beq.n	182a6 <__aeabi_fmul+0x15e>
   1827c:	ea92 0f0c 	teq	r2, ip
   18280:	d101      	bne.n	18286 <__aeabi_fmul+0x13e>
   18282:	0242      	lsls	r2, r0, #9
   18284:	d10f      	bne.n	182a6 <__aeabi_fmul+0x15e>
   18286:	ea93 0f0c 	teq	r3, ip
   1828a:	d103      	bne.n	18294 <__aeabi_fmul+0x14c>
   1828c:	024b      	lsls	r3, r1, #9
   1828e:	bf18      	it	ne
   18290:	4608      	movne	r0, r1
   18292:	d108      	bne.n	182a6 <__aeabi_fmul+0x15e>
   18294:	ea80 0001 	eor.w	r0, r0, r1
   18298:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1829c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   182a4:	4770      	bx	lr
   182a6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182aa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   182ae:	4770      	bx	lr

000182b0 <__aeabi_drsub>:
   182b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   182b4:	e002      	b.n	182bc <__adddf3>
   182b6:	bf00      	nop

000182b8 <__aeabi_dsub>:
   182b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000182bc <__adddf3>:
   182bc:	b530      	push	{r4, r5, lr}
   182be:	ea4f 0441 	mov.w	r4, r1, lsl #1
   182c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   182c6:	ea94 0f05 	teq	r4, r5
   182ca:	bf08      	it	eq
   182cc:	ea90 0f02 	teqeq	r0, r2
   182d0:	bf1f      	itttt	ne
   182d2:	ea54 0c00 	orrsne.w	ip, r4, r0
   182d6:	ea55 0c02 	orrsne.w	ip, r5, r2
   182da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   182de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   182e2:	f000 80e2 	beq.w	184aa <__adddf3+0x1ee>
   182e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   182ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   182ee:	bfb8      	it	lt
   182f0:	426d      	neglt	r5, r5
   182f2:	dd0c      	ble.n	1830e <__adddf3+0x52>
   182f4:	442c      	add	r4, r5
   182f6:	ea80 0202 	eor.w	r2, r0, r2
   182fa:	ea81 0303 	eor.w	r3, r1, r3
   182fe:	ea82 0000 	eor.w	r0, r2, r0
   18302:	ea83 0101 	eor.w	r1, r3, r1
   18306:	ea80 0202 	eor.w	r2, r0, r2
   1830a:	ea81 0303 	eor.w	r3, r1, r3
   1830e:	2d36      	cmp	r5, #54	; 0x36
   18310:	bf88      	it	hi
   18312:	bd30      	pophi	{r4, r5, pc}
   18314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18318:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1831c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   18320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   18324:	d002      	beq.n	1832c <__adddf3+0x70>
   18326:	4240      	negs	r0, r0
   18328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1832c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   18330:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   18338:	d002      	beq.n	18340 <__adddf3+0x84>
   1833a:	4252      	negs	r2, r2
   1833c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18340:	ea94 0f05 	teq	r4, r5
   18344:	f000 80a7 	beq.w	18496 <__adddf3+0x1da>
   18348:	f1a4 0401 	sub.w	r4, r4, #1
   1834c:	f1d5 0e20 	rsbs	lr, r5, #32
   18350:	db0d      	blt.n	1836e <__adddf3+0xb2>
   18352:	fa02 fc0e 	lsl.w	ip, r2, lr
   18356:	fa22 f205 	lsr.w	r2, r2, r5
   1835a:	1880      	adds	r0, r0, r2
   1835c:	f141 0100 	adc.w	r1, r1, #0
   18360:	fa03 f20e 	lsl.w	r2, r3, lr
   18364:	1880      	adds	r0, r0, r2
   18366:	fa43 f305 	asr.w	r3, r3, r5
   1836a:	4159      	adcs	r1, r3
   1836c:	e00e      	b.n	1838c <__adddf3+0xd0>
   1836e:	f1a5 0520 	sub.w	r5, r5, #32
   18372:	f10e 0e20 	add.w	lr, lr, #32
   18376:	2a01      	cmp	r2, #1
   18378:	fa03 fc0e 	lsl.w	ip, r3, lr
   1837c:	bf28      	it	cs
   1837e:	f04c 0c02 	orrcs.w	ip, ip, #2
   18382:	fa43 f305 	asr.w	r3, r3, r5
   18386:	18c0      	adds	r0, r0, r3
   18388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1838c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18390:	d507      	bpl.n	183a2 <__adddf3+0xe6>
   18392:	f04f 0e00 	mov.w	lr, #0
   18396:	f1dc 0c00 	rsbs	ip, ip, #0
   1839a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1839e:	eb6e 0101 	sbc.w	r1, lr, r1
   183a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   183a6:	d31b      	bcc.n	183e0 <__adddf3+0x124>
   183a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   183ac:	d30c      	bcc.n	183c8 <__adddf3+0x10c>
   183ae:	0849      	lsrs	r1, r1, #1
   183b0:	ea5f 0030 	movs.w	r0, r0, rrx
   183b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   183b8:	f104 0401 	add.w	r4, r4, #1
   183bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   183c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   183c4:	f080 809a 	bcs.w	184fc <__adddf3+0x240>
   183c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   183cc:	bf08      	it	eq
   183ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   183d2:	f150 0000 	adcs.w	r0, r0, #0
   183d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   183da:	ea41 0105 	orr.w	r1, r1, r5
   183de:	bd30      	pop	{r4, r5, pc}
   183e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   183e4:	4140      	adcs	r0, r0
   183e6:	eb41 0101 	adc.w	r1, r1, r1
   183ea:	3c01      	subs	r4, #1
   183ec:	bf28      	it	cs
   183ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   183f2:	d2e9      	bcs.n	183c8 <__adddf3+0x10c>
   183f4:	f091 0f00 	teq	r1, #0
   183f8:	bf04      	itt	eq
   183fa:	4601      	moveq	r1, r0
   183fc:	2000      	moveq	r0, #0
   183fe:	fab1 f381 	clz	r3, r1
   18402:	bf08      	it	eq
   18404:	3320      	addeq	r3, #32
   18406:	f1a3 030b 	sub.w	r3, r3, #11
   1840a:	f1b3 0220 	subs.w	r2, r3, #32
   1840e:	da0c      	bge.n	1842a <__adddf3+0x16e>
   18410:	320c      	adds	r2, #12
   18412:	dd08      	ble.n	18426 <__adddf3+0x16a>
   18414:	f102 0c14 	add.w	ip, r2, #20
   18418:	f1c2 020c 	rsb	r2, r2, #12
   1841c:	fa01 f00c 	lsl.w	r0, r1, ip
   18420:	fa21 f102 	lsr.w	r1, r1, r2
   18424:	e00c      	b.n	18440 <__adddf3+0x184>
   18426:	f102 0214 	add.w	r2, r2, #20
   1842a:	bfd8      	it	le
   1842c:	f1c2 0c20 	rsble	ip, r2, #32
   18430:	fa01 f102 	lsl.w	r1, r1, r2
   18434:	fa20 fc0c 	lsr.w	ip, r0, ip
   18438:	bfdc      	itt	le
   1843a:	ea41 010c 	orrle.w	r1, r1, ip
   1843e:	4090      	lslle	r0, r2
   18440:	1ae4      	subs	r4, r4, r3
   18442:	bfa2      	ittt	ge
   18444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   18448:	4329      	orrge	r1, r5
   1844a:	bd30      	popge	{r4, r5, pc}
   1844c:	ea6f 0404 	mvn.w	r4, r4
   18450:	3c1f      	subs	r4, #31
   18452:	da1c      	bge.n	1848e <__adddf3+0x1d2>
   18454:	340c      	adds	r4, #12
   18456:	dc0e      	bgt.n	18476 <__adddf3+0x1ba>
   18458:	f104 0414 	add.w	r4, r4, #20
   1845c:	f1c4 0220 	rsb	r2, r4, #32
   18460:	fa20 f004 	lsr.w	r0, r0, r4
   18464:	fa01 f302 	lsl.w	r3, r1, r2
   18468:	ea40 0003 	orr.w	r0, r0, r3
   1846c:	fa21 f304 	lsr.w	r3, r1, r4
   18470:	ea45 0103 	orr.w	r1, r5, r3
   18474:	bd30      	pop	{r4, r5, pc}
   18476:	f1c4 040c 	rsb	r4, r4, #12
   1847a:	f1c4 0220 	rsb	r2, r4, #32
   1847e:	fa20 f002 	lsr.w	r0, r0, r2
   18482:	fa01 f304 	lsl.w	r3, r1, r4
   18486:	ea40 0003 	orr.w	r0, r0, r3
   1848a:	4629      	mov	r1, r5
   1848c:	bd30      	pop	{r4, r5, pc}
   1848e:	fa21 f004 	lsr.w	r0, r1, r4
   18492:	4629      	mov	r1, r5
   18494:	bd30      	pop	{r4, r5, pc}
   18496:	f094 0f00 	teq	r4, #0
   1849a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1849e:	bf06      	itte	eq
   184a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   184a4:	3401      	addeq	r4, #1
   184a6:	3d01      	subne	r5, #1
   184a8:	e74e      	b.n	18348 <__adddf3+0x8c>
   184aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   184ae:	bf18      	it	ne
   184b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   184b4:	d029      	beq.n	1850a <__adddf3+0x24e>
   184b6:	ea94 0f05 	teq	r4, r5
   184ba:	bf08      	it	eq
   184bc:	ea90 0f02 	teqeq	r0, r2
   184c0:	d005      	beq.n	184ce <__adddf3+0x212>
   184c2:	ea54 0c00 	orrs.w	ip, r4, r0
   184c6:	bf04      	itt	eq
   184c8:	4619      	moveq	r1, r3
   184ca:	4610      	moveq	r0, r2
   184cc:	bd30      	pop	{r4, r5, pc}
   184ce:	ea91 0f03 	teq	r1, r3
   184d2:	bf1e      	ittt	ne
   184d4:	2100      	movne	r1, #0
   184d6:	2000      	movne	r0, #0
   184d8:	bd30      	popne	{r4, r5, pc}
   184da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   184de:	d105      	bne.n	184ec <__adddf3+0x230>
   184e0:	0040      	lsls	r0, r0, #1
   184e2:	4149      	adcs	r1, r1
   184e4:	bf28      	it	cs
   184e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   184ea:	bd30      	pop	{r4, r5, pc}
   184ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   184f0:	bf3c      	itt	cc
   184f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   184f6:	bd30      	popcc	{r4, r5, pc}
   184f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   184fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   18500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18504:	f04f 0000 	mov.w	r0, #0
   18508:	bd30      	pop	{r4, r5, pc}
   1850a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1850e:	bf1a      	itte	ne
   18510:	4619      	movne	r1, r3
   18512:	4610      	movne	r0, r2
   18514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18518:	bf1c      	itt	ne
   1851a:	460b      	movne	r3, r1
   1851c:	4602      	movne	r2, r0
   1851e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18522:	bf06      	itte	eq
   18524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18528:	ea91 0f03 	teqeq	r1, r3
   1852c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   18530:	bd30      	pop	{r4, r5, pc}
   18532:	bf00      	nop

00018534 <__aeabi_ui2d>:
   18534:	f090 0f00 	teq	r0, #0
   18538:	bf04      	itt	eq
   1853a:	2100      	moveq	r1, #0
   1853c:	4770      	bxeq	lr
   1853e:	b530      	push	{r4, r5, lr}
   18540:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18544:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18548:	f04f 0500 	mov.w	r5, #0
   1854c:	f04f 0100 	mov.w	r1, #0
   18550:	e750      	b.n	183f4 <__adddf3+0x138>
   18552:	bf00      	nop

00018554 <__aeabi_i2d>:
   18554:	f090 0f00 	teq	r0, #0
   18558:	bf04      	itt	eq
   1855a:	2100      	moveq	r1, #0
   1855c:	4770      	bxeq	lr
   1855e:	b530      	push	{r4, r5, lr}
   18560:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18564:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1856c:	bf48      	it	mi
   1856e:	4240      	negmi	r0, r0
   18570:	f04f 0100 	mov.w	r1, #0
   18574:	e73e      	b.n	183f4 <__adddf3+0x138>
   18576:	bf00      	nop

00018578 <__aeabi_f2d>:
   18578:	0042      	lsls	r2, r0, #1
   1857a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1857e:	ea4f 0131 	mov.w	r1, r1, rrx
   18582:	ea4f 7002 	mov.w	r0, r2, lsl #28
   18586:	bf1f      	itttt	ne
   18588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1858c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   18590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   18594:	4770      	bxne	lr
   18596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1859a:	bf08      	it	eq
   1859c:	4770      	bxeq	lr
   1859e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   185a2:	bf04      	itt	eq
   185a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   185a8:	4770      	bxeq	lr
   185aa:	b530      	push	{r4, r5, lr}
   185ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   185b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   185b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   185b8:	e71c      	b.n	183f4 <__adddf3+0x138>
   185ba:	bf00      	nop

000185bc <__aeabi_ul2d>:
   185bc:	ea50 0201 	orrs.w	r2, r0, r1
   185c0:	bf08      	it	eq
   185c2:	4770      	bxeq	lr
   185c4:	b530      	push	{r4, r5, lr}
   185c6:	f04f 0500 	mov.w	r5, #0
   185ca:	e00a      	b.n	185e2 <__aeabi_l2d+0x16>

000185cc <__aeabi_l2d>:
   185cc:	ea50 0201 	orrs.w	r2, r0, r1
   185d0:	bf08      	it	eq
   185d2:	4770      	bxeq	lr
   185d4:	b530      	push	{r4, r5, lr}
   185d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   185da:	d502      	bpl.n	185e2 <__aeabi_l2d+0x16>
   185dc:	4240      	negs	r0, r0
   185de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   185e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   185e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   185ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   185ee:	f43f aed8 	beq.w	183a2 <__adddf3+0xe6>
   185f2:	f04f 0203 	mov.w	r2, #3
   185f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   185fa:	bf18      	it	ne
   185fc:	3203      	addne	r2, #3
   185fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18602:	bf18      	it	ne
   18604:	3203      	addne	r2, #3
   18606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1860a:	f1c2 0320 	rsb	r3, r2, #32
   1860e:	fa00 fc03 	lsl.w	ip, r0, r3
   18612:	fa20 f002 	lsr.w	r0, r0, r2
   18616:	fa01 fe03 	lsl.w	lr, r1, r3
   1861a:	ea40 000e 	orr.w	r0, r0, lr
   1861e:	fa21 f102 	lsr.w	r1, r1, r2
   18622:	4414      	add	r4, r2
   18624:	e6bd      	b.n	183a2 <__adddf3+0xe6>
   18626:	bf00      	nop

00018628 <__aeabi_dmul>:
   18628:	b570      	push	{r4, r5, r6, lr}
   1862a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1862e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18636:	bf1d      	ittte	ne
   18638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1863c:	ea94 0f0c 	teqne	r4, ip
   18640:	ea95 0f0c 	teqne	r5, ip
   18644:	f000 f8de 	bleq	18804 <__aeabi_dmul+0x1dc>
   18648:	442c      	add	r4, r5
   1864a:	ea81 0603 	eor.w	r6, r1, r3
   1864e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   18652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   18656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1865a:	bf18      	it	ne
   1865c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   18660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18668:	d038      	beq.n	186dc <__aeabi_dmul+0xb4>
   1866a:	fba0 ce02 	umull	ip, lr, r0, r2
   1866e:	f04f 0500 	mov.w	r5, #0
   18672:	fbe1 e502 	umlal	lr, r5, r1, r2
   18676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1867a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1867e:	f04f 0600 	mov.w	r6, #0
   18682:	fbe1 5603 	umlal	r5, r6, r1, r3
   18686:	f09c 0f00 	teq	ip, #0
   1868a:	bf18      	it	ne
   1868c:	f04e 0e01 	orrne.w	lr, lr, #1
   18690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   18694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   18698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1869c:	d204      	bcs.n	186a8 <__aeabi_dmul+0x80>
   1869e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   186a2:	416d      	adcs	r5, r5
   186a4:	eb46 0606 	adc.w	r6, r6, r6
   186a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   186ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   186b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   186b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   186b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   186bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   186c0:	bf88      	it	hi
   186c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   186c6:	d81e      	bhi.n	18706 <__aeabi_dmul+0xde>
   186c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   186cc:	bf08      	it	eq
   186ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   186d2:	f150 0000 	adcs.w	r0, r0, #0
   186d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   186da:	bd70      	pop	{r4, r5, r6, pc}
   186dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   186e0:	ea46 0101 	orr.w	r1, r6, r1
   186e4:	ea40 0002 	orr.w	r0, r0, r2
   186e8:	ea81 0103 	eor.w	r1, r1, r3
   186ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   186f0:	bfc2      	ittt	gt
   186f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   186f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   186fa:	bd70      	popgt	{r4, r5, r6, pc}
   186fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18700:	f04f 0e00 	mov.w	lr, #0
   18704:	3c01      	subs	r4, #1
   18706:	f300 80ab 	bgt.w	18860 <__aeabi_dmul+0x238>
   1870a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1870e:	bfde      	ittt	le
   18710:	2000      	movle	r0, #0
   18712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   18716:	bd70      	pople	{r4, r5, r6, pc}
   18718:	f1c4 0400 	rsb	r4, r4, #0
   1871c:	3c20      	subs	r4, #32
   1871e:	da35      	bge.n	1878c <__aeabi_dmul+0x164>
   18720:	340c      	adds	r4, #12
   18722:	dc1b      	bgt.n	1875c <__aeabi_dmul+0x134>
   18724:	f104 0414 	add.w	r4, r4, #20
   18728:	f1c4 0520 	rsb	r5, r4, #32
   1872c:	fa00 f305 	lsl.w	r3, r0, r5
   18730:	fa20 f004 	lsr.w	r0, r0, r4
   18734:	fa01 f205 	lsl.w	r2, r1, r5
   18738:	ea40 0002 	orr.w	r0, r0, r2
   1873c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   18740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18748:	fa21 f604 	lsr.w	r6, r1, r4
   1874c:	eb42 0106 	adc.w	r1, r2, r6
   18750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18754:	bf08      	it	eq
   18756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1875a:	bd70      	pop	{r4, r5, r6, pc}
   1875c:	f1c4 040c 	rsb	r4, r4, #12
   18760:	f1c4 0520 	rsb	r5, r4, #32
   18764:	fa00 f304 	lsl.w	r3, r0, r4
   18768:	fa20 f005 	lsr.w	r0, r0, r5
   1876c:	fa01 f204 	lsl.w	r2, r1, r4
   18770:	ea40 0002 	orr.w	r0, r0, r2
   18774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1877c:	f141 0100 	adc.w	r1, r1, #0
   18780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18784:	bf08      	it	eq
   18786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1878a:	bd70      	pop	{r4, r5, r6, pc}
   1878c:	f1c4 0520 	rsb	r5, r4, #32
   18790:	fa00 f205 	lsl.w	r2, r0, r5
   18794:	ea4e 0e02 	orr.w	lr, lr, r2
   18798:	fa20 f304 	lsr.w	r3, r0, r4
   1879c:	fa01 f205 	lsl.w	r2, r1, r5
   187a0:	ea43 0302 	orr.w	r3, r3, r2
   187a4:	fa21 f004 	lsr.w	r0, r1, r4
   187a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   187ac:	fa21 f204 	lsr.w	r2, r1, r4
   187b0:	ea20 0002 	bic.w	r0, r0, r2
   187b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   187b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   187bc:	bf08      	it	eq
   187be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   187c2:	bd70      	pop	{r4, r5, r6, pc}
   187c4:	f094 0f00 	teq	r4, #0
   187c8:	d10f      	bne.n	187ea <__aeabi_dmul+0x1c2>
   187ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   187ce:	0040      	lsls	r0, r0, #1
   187d0:	eb41 0101 	adc.w	r1, r1, r1
   187d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   187d8:	bf08      	it	eq
   187da:	3c01      	subeq	r4, #1
   187dc:	d0f7      	beq.n	187ce <__aeabi_dmul+0x1a6>
   187de:	ea41 0106 	orr.w	r1, r1, r6
   187e2:	f095 0f00 	teq	r5, #0
   187e6:	bf18      	it	ne
   187e8:	4770      	bxne	lr
   187ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   187ee:	0052      	lsls	r2, r2, #1
   187f0:	eb43 0303 	adc.w	r3, r3, r3
   187f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   187f8:	bf08      	it	eq
   187fa:	3d01      	subeq	r5, #1
   187fc:	d0f7      	beq.n	187ee <__aeabi_dmul+0x1c6>
   187fe:	ea43 0306 	orr.w	r3, r3, r6
   18802:	4770      	bx	lr
   18804:	ea94 0f0c 	teq	r4, ip
   18808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1880c:	bf18      	it	ne
   1880e:	ea95 0f0c 	teqne	r5, ip
   18812:	d00c      	beq.n	1882e <__aeabi_dmul+0x206>
   18814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18818:	bf18      	it	ne
   1881a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1881e:	d1d1      	bne.n	187c4 <__aeabi_dmul+0x19c>
   18820:	ea81 0103 	eor.w	r1, r1, r3
   18824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18828:	f04f 0000 	mov.w	r0, #0
   1882c:	bd70      	pop	{r4, r5, r6, pc}
   1882e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18832:	bf06      	itte	eq
   18834:	4610      	moveq	r0, r2
   18836:	4619      	moveq	r1, r3
   18838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1883c:	d019      	beq.n	18872 <__aeabi_dmul+0x24a>
   1883e:	ea94 0f0c 	teq	r4, ip
   18842:	d102      	bne.n	1884a <__aeabi_dmul+0x222>
   18844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   18848:	d113      	bne.n	18872 <__aeabi_dmul+0x24a>
   1884a:	ea95 0f0c 	teq	r5, ip
   1884e:	d105      	bne.n	1885c <__aeabi_dmul+0x234>
   18850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   18854:	bf1c      	itt	ne
   18856:	4610      	movne	r0, r2
   18858:	4619      	movne	r1, r3
   1885a:	d10a      	bne.n	18872 <__aeabi_dmul+0x24a>
   1885c:	ea81 0103 	eor.w	r1, r1, r3
   18860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1886c:	f04f 0000 	mov.w	r0, #0
   18870:	bd70      	pop	{r4, r5, r6, pc}
   18872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1887a:	bd70      	pop	{r4, r5, r6, pc}

0001887c <__aeabi_ddiv>:
   1887c:	b570      	push	{r4, r5, r6, lr}
   1887e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1888a:	bf1d      	ittte	ne
   1888c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18890:	ea94 0f0c 	teqne	r4, ip
   18894:	ea95 0f0c 	teqne	r5, ip
   18898:	f000 f8a7 	bleq	189ea <__aeabi_ddiv+0x16e>
   1889c:	eba4 0405 	sub.w	r4, r4, r5
   188a0:	ea81 0e03 	eor.w	lr, r1, r3
   188a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   188a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   188ac:	f000 8088 	beq.w	189c0 <__aeabi_ddiv+0x144>
   188b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   188b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   188b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   188bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   188c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   188c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   188c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   188cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   188d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   188d4:	429d      	cmp	r5, r3
   188d6:	bf08      	it	eq
   188d8:	4296      	cmpeq	r6, r2
   188da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   188de:	f504 7440 	add.w	r4, r4, #768	; 0x300
   188e2:	d202      	bcs.n	188ea <__aeabi_ddiv+0x6e>
   188e4:	085b      	lsrs	r3, r3, #1
   188e6:	ea4f 0232 	mov.w	r2, r2, rrx
   188ea:	1ab6      	subs	r6, r6, r2
   188ec:	eb65 0503 	sbc.w	r5, r5, r3
   188f0:	085b      	lsrs	r3, r3, #1
   188f2:	ea4f 0232 	mov.w	r2, r2, rrx
   188f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   188fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   188fe:	ebb6 0e02 	subs.w	lr, r6, r2
   18902:	eb75 0e03 	sbcs.w	lr, r5, r3
   18906:	bf22      	ittt	cs
   18908:	1ab6      	subcs	r6, r6, r2
   1890a:	4675      	movcs	r5, lr
   1890c:	ea40 000c 	orrcs.w	r0, r0, ip
   18910:	085b      	lsrs	r3, r3, #1
   18912:	ea4f 0232 	mov.w	r2, r2, rrx
   18916:	ebb6 0e02 	subs.w	lr, r6, r2
   1891a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1891e:	bf22      	ittt	cs
   18920:	1ab6      	subcs	r6, r6, r2
   18922:	4675      	movcs	r5, lr
   18924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18928:	085b      	lsrs	r3, r3, #1
   1892a:	ea4f 0232 	mov.w	r2, r2, rrx
   1892e:	ebb6 0e02 	subs.w	lr, r6, r2
   18932:	eb75 0e03 	sbcs.w	lr, r5, r3
   18936:	bf22      	ittt	cs
   18938:	1ab6      	subcs	r6, r6, r2
   1893a:	4675      	movcs	r5, lr
   1893c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18940:	085b      	lsrs	r3, r3, #1
   18942:	ea4f 0232 	mov.w	r2, r2, rrx
   18946:	ebb6 0e02 	subs.w	lr, r6, r2
   1894a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1894e:	bf22      	ittt	cs
   18950:	1ab6      	subcs	r6, r6, r2
   18952:	4675      	movcs	r5, lr
   18954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18958:	ea55 0e06 	orrs.w	lr, r5, r6
   1895c:	d018      	beq.n	18990 <__aeabi_ddiv+0x114>
   1895e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18966:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1896a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1896e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1897a:	d1c0      	bne.n	188fe <__aeabi_ddiv+0x82>
   1897c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18980:	d10b      	bne.n	1899a <__aeabi_ddiv+0x11e>
   18982:	ea41 0100 	orr.w	r1, r1, r0
   18986:	f04f 0000 	mov.w	r0, #0
   1898a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1898e:	e7b6      	b.n	188fe <__aeabi_ddiv+0x82>
   18990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18994:	bf04      	itt	eq
   18996:	4301      	orreq	r1, r0
   18998:	2000      	moveq	r0, #0
   1899a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1899e:	bf88      	it	hi
   189a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   189a4:	f63f aeaf 	bhi.w	18706 <__aeabi_dmul+0xde>
   189a8:	ebb5 0c03 	subs.w	ip, r5, r3
   189ac:	bf04      	itt	eq
   189ae:	ebb6 0c02 	subseq.w	ip, r6, r2
   189b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   189b6:	f150 0000 	adcs.w	r0, r0, #0
   189ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   189be:	bd70      	pop	{r4, r5, r6, pc}
   189c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   189c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   189c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   189cc:	bfc2      	ittt	gt
   189ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   189d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   189d6:	bd70      	popgt	{r4, r5, r6, pc}
   189d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   189dc:	f04f 0e00 	mov.w	lr, #0
   189e0:	3c01      	subs	r4, #1
   189e2:	e690      	b.n	18706 <__aeabi_dmul+0xde>
   189e4:	ea45 0e06 	orr.w	lr, r5, r6
   189e8:	e68d      	b.n	18706 <__aeabi_dmul+0xde>
   189ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   189ee:	ea94 0f0c 	teq	r4, ip
   189f2:	bf08      	it	eq
   189f4:	ea95 0f0c 	teqeq	r5, ip
   189f8:	f43f af3b 	beq.w	18872 <__aeabi_dmul+0x24a>
   189fc:	ea94 0f0c 	teq	r4, ip
   18a00:	d10a      	bne.n	18a18 <__aeabi_ddiv+0x19c>
   18a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18a06:	f47f af34 	bne.w	18872 <__aeabi_dmul+0x24a>
   18a0a:	ea95 0f0c 	teq	r5, ip
   18a0e:	f47f af25 	bne.w	1885c <__aeabi_dmul+0x234>
   18a12:	4610      	mov	r0, r2
   18a14:	4619      	mov	r1, r3
   18a16:	e72c      	b.n	18872 <__aeabi_dmul+0x24a>
   18a18:	ea95 0f0c 	teq	r5, ip
   18a1c:	d106      	bne.n	18a2c <__aeabi_ddiv+0x1b0>
   18a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18a22:	f43f aefd 	beq.w	18820 <__aeabi_dmul+0x1f8>
   18a26:	4610      	mov	r0, r2
   18a28:	4619      	mov	r1, r3
   18a2a:	e722      	b.n	18872 <__aeabi_dmul+0x24a>
   18a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18a30:	bf18      	it	ne
   18a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18a36:	f47f aec5 	bne.w	187c4 <__aeabi_dmul+0x19c>
   18a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18a3e:	f47f af0d 	bne.w	1885c <__aeabi_dmul+0x234>
   18a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18a46:	f47f aeeb 	bne.w	18820 <__aeabi_dmul+0x1f8>
   18a4a:	e712      	b.n	18872 <__aeabi_dmul+0x24a>

00018a4c <__aeabi_d2f>:
   18a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18a54:	bf24      	itt	cs
   18a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   18a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18a5e:	d90d      	bls.n	18a7c <__aeabi_d2f+0x30>
   18a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18a74:	bf08      	it	eq
   18a76:	f020 0001 	biceq.w	r0, r0, #1
   18a7a:	4770      	bx	lr
   18a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18a80:	d121      	bne.n	18ac6 <__aeabi_d2f+0x7a>
   18a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18a86:	bfbc      	itt	lt
   18a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18a8c:	4770      	bxlt	lr
   18a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18a96:	f1c2 0218 	rsb	r2, r2, #24
   18a9a:	f1c2 0c20 	rsb	ip, r2, #32
   18a9e:	fa10 f30c 	lsls.w	r3, r0, ip
   18aa2:	fa20 f002 	lsr.w	r0, r0, r2
   18aa6:	bf18      	it	ne
   18aa8:	f040 0001 	orrne.w	r0, r0, #1
   18aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
   18ab8:	ea40 000c 	orr.w	r0, r0, ip
   18abc:	fa23 f302 	lsr.w	r3, r3, r2
   18ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18ac4:	e7cc      	b.n	18a60 <__aeabi_d2f+0x14>
   18ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18aca:	d107      	bne.n	18adc <__aeabi_d2f+0x90>
   18acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18ad0:	bf1e      	ittt	ne
   18ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18ada:	4770      	bxne	lr
   18adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18ae8:	4770      	bx	lr
   18aea:	bf00      	nop

00018aec <__aeabi_frsub>:
   18aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18af0:	e002      	b.n	18af8 <__addsf3>
   18af2:	bf00      	nop

00018af4 <__aeabi_fsub>:
   18af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018af8 <__addsf3>:
   18af8:	0042      	lsls	r2, r0, #1
   18afa:	bf1f      	itttt	ne
   18afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18b00:	ea92 0f03 	teqne	r2, r3
   18b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18b0c:	d06a      	beq.n	18be4 <__addsf3+0xec>
   18b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   18b16:	bfc1      	itttt	gt
   18b18:	18d2      	addgt	r2, r2, r3
   18b1a:	4041      	eorgt	r1, r0
   18b1c:	4048      	eorgt	r0, r1
   18b1e:	4041      	eorgt	r1, r0
   18b20:	bfb8      	it	lt
   18b22:	425b      	neglt	r3, r3
   18b24:	2b19      	cmp	r3, #25
   18b26:	bf88      	it	hi
   18b28:	4770      	bxhi	lr
   18b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18b36:	bf18      	it	ne
   18b38:	4240      	negne	r0, r0
   18b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18b46:	bf18      	it	ne
   18b48:	4249      	negne	r1, r1
   18b4a:	ea92 0f03 	teq	r2, r3
   18b4e:	d03f      	beq.n	18bd0 <__addsf3+0xd8>
   18b50:	f1a2 0201 	sub.w	r2, r2, #1
   18b54:	fa41 fc03 	asr.w	ip, r1, r3
   18b58:	eb10 000c 	adds.w	r0, r0, ip
   18b5c:	f1c3 0320 	rsb	r3, r3, #32
   18b60:	fa01 f103 	lsl.w	r1, r1, r3
   18b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18b68:	d502      	bpl.n	18b70 <__addsf3+0x78>
   18b6a:	4249      	negs	r1, r1
   18b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18b74:	d313      	bcc.n	18b9e <__addsf3+0xa6>
   18b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18b7a:	d306      	bcc.n	18b8a <__addsf3+0x92>
   18b7c:	0840      	lsrs	r0, r0, #1
   18b7e:	ea4f 0131 	mov.w	r1, r1, rrx
   18b82:	f102 0201 	add.w	r2, r2, #1
   18b86:	2afe      	cmp	r2, #254	; 0xfe
   18b88:	d251      	bcs.n	18c2e <__addsf3+0x136>
   18b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18b92:	bf08      	it	eq
   18b94:	f020 0001 	biceq.w	r0, r0, #1
   18b98:	ea40 0003 	orr.w	r0, r0, r3
   18b9c:	4770      	bx	lr
   18b9e:	0049      	lsls	r1, r1, #1
   18ba0:	eb40 0000 	adc.w	r0, r0, r0
   18ba4:	3a01      	subs	r2, #1
   18ba6:	bf28      	it	cs
   18ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   18bac:	d2ed      	bcs.n	18b8a <__addsf3+0x92>
   18bae:	fab0 fc80 	clz	ip, r0
   18bb2:	f1ac 0c08 	sub.w	ip, ip, #8
   18bb6:	ebb2 020c 	subs.w	r2, r2, ip
   18bba:	fa00 f00c 	lsl.w	r0, r0, ip
   18bbe:	bfaa      	itet	ge
   18bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18bc4:	4252      	neglt	r2, r2
   18bc6:	4318      	orrge	r0, r3
   18bc8:	bfbc      	itt	lt
   18bca:	40d0      	lsrlt	r0, r2
   18bcc:	4318      	orrlt	r0, r3
   18bce:	4770      	bx	lr
   18bd0:	f092 0f00 	teq	r2, #0
   18bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18bd8:	bf06      	itte	eq
   18bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18bde:	3201      	addeq	r2, #1
   18be0:	3b01      	subne	r3, #1
   18be2:	e7b5      	b.n	18b50 <__addsf3+0x58>
   18be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18bec:	bf18      	it	ne
   18bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18bf2:	d021      	beq.n	18c38 <__addsf3+0x140>
   18bf4:	ea92 0f03 	teq	r2, r3
   18bf8:	d004      	beq.n	18c04 <__addsf3+0x10c>
   18bfa:	f092 0f00 	teq	r2, #0
   18bfe:	bf08      	it	eq
   18c00:	4608      	moveq	r0, r1
   18c02:	4770      	bx	lr
   18c04:	ea90 0f01 	teq	r0, r1
   18c08:	bf1c      	itt	ne
   18c0a:	2000      	movne	r0, #0
   18c0c:	4770      	bxne	lr
   18c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18c12:	d104      	bne.n	18c1e <__addsf3+0x126>
   18c14:	0040      	lsls	r0, r0, #1
   18c16:	bf28      	it	cs
   18c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18c1c:	4770      	bx	lr
   18c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18c22:	bf3c      	itt	cc
   18c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18c28:	4770      	bxcc	lr
   18c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18c36:	4770      	bx	lr
   18c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18c3c:	bf16      	itet	ne
   18c3e:	4608      	movne	r0, r1
   18c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18c44:	4601      	movne	r1, r0
   18c46:	0242      	lsls	r2, r0, #9
   18c48:	bf06      	itte	eq
   18c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18c4e:	ea90 0f01 	teqeq	r0, r1
   18c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18c56:	4770      	bx	lr

00018c58 <__aeabi_ui2f>:
   18c58:	f04f 0300 	mov.w	r3, #0
   18c5c:	e004      	b.n	18c68 <__aeabi_i2f+0x8>
   18c5e:	bf00      	nop

00018c60 <__aeabi_i2f>:
   18c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18c64:	bf48      	it	mi
   18c66:	4240      	negmi	r0, r0
   18c68:	ea5f 0c00 	movs.w	ip, r0
   18c6c:	bf08      	it	eq
   18c6e:	4770      	bxeq	lr
   18c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18c74:	4601      	mov	r1, r0
   18c76:	f04f 0000 	mov.w	r0, #0
   18c7a:	e01c      	b.n	18cb6 <__aeabi_l2f+0x2a>

00018c7c <__aeabi_ul2f>:
   18c7c:	ea50 0201 	orrs.w	r2, r0, r1
   18c80:	bf08      	it	eq
   18c82:	4770      	bxeq	lr
   18c84:	f04f 0300 	mov.w	r3, #0
   18c88:	e00a      	b.n	18ca0 <__aeabi_l2f+0x14>
   18c8a:	bf00      	nop

00018c8c <__aeabi_l2f>:
   18c8c:	ea50 0201 	orrs.w	r2, r0, r1
   18c90:	bf08      	it	eq
   18c92:	4770      	bxeq	lr
   18c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18c98:	d502      	bpl.n	18ca0 <__aeabi_l2f+0x14>
   18c9a:	4240      	negs	r0, r0
   18c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18ca0:	ea5f 0c01 	movs.w	ip, r1
   18ca4:	bf02      	ittt	eq
   18ca6:	4684      	moveq	ip, r0
   18ca8:	4601      	moveq	r1, r0
   18caa:	2000      	moveq	r0, #0
   18cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18cb0:	bf08      	it	eq
   18cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18cba:	fabc f28c 	clz	r2, ip
   18cbe:	3a08      	subs	r2, #8
   18cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18cc4:	db10      	blt.n	18ce8 <__aeabi_l2f+0x5c>
   18cc6:	fa01 fc02 	lsl.w	ip, r1, r2
   18cca:	4463      	add	r3, ip
   18ccc:	fa00 fc02 	lsl.w	ip, r0, r2
   18cd0:	f1c2 0220 	rsb	r2, r2, #32
   18cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18cd8:	fa20 f202 	lsr.w	r2, r0, r2
   18cdc:	eb43 0002 	adc.w	r0, r3, r2
   18ce0:	bf08      	it	eq
   18ce2:	f020 0001 	biceq.w	r0, r0, #1
   18ce6:	4770      	bx	lr
   18ce8:	f102 0220 	add.w	r2, r2, #32
   18cec:	fa01 fc02 	lsl.w	ip, r1, r2
   18cf0:	f1c2 0220 	rsb	r2, r2, #32
   18cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18cf8:	fa21 f202 	lsr.w	r2, r1, r2
   18cfc:	eb43 0002 	adc.w	r0, r3, r2
   18d00:	bf08      	it	eq
   18d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18d06:	4770      	bx	lr

00018d08 <__aeabi_uldivmod>:
   18d08:	b953      	cbnz	r3, 18d20 <__aeabi_uldivmod+0x18>
   18d0a:	b94a      	cbnz	r2, 18d20 <__aeabi_uldivmod+0x18>
   18d0c:	2900      	cmp	r1, #0
   18d0e:	bf08      	it	eq
   18d10:	2800      	cmpeq	r0, #0
   18d12:	bf1c      	itt	ne
   18d14:	f04f 31ff 	movne.w	r1, #4294967295
   18d18:	f04f 30ff 	movne.w	r0, #4294967295
   18d1c:	f000 b80c 	b.w	18d38 <__aeabi_idiv0>
   18d20:	f1ad 0c08 	sub.w	ip, sp, #8
   18d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18d28:	f000 f808 	bl	18d3c <__udivmoddi4>
   18d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d34:	b004      	add	sp, #16
   18d36:	4770      	bx	lr

00018d38 <__aeabi_idiv0>:
   18d38:	4770      	bx	lr
   18d3a:	bf00      	nop

00018d3c <__udivmoddi4>:
   18d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18d40:	4686      	mov	lr, r0
   18d42:	468c      	mov	ip, r1
   18d44:	4608      	mov	r0, r1
   18d46:	9e08      	ldr	r6, [sp, #32]
   18d48:	4615      	mov	r5, r2
   18d4a:	4674      	mov	r4, lr
   18d4c:	4619      	mov	r1, r3
   18d4e:	2b00      	cmp	r3, #0
   18d50:	f040 80c1 	bne.w	18ed6 <__udivmoddi4+0x19a>
   18d54:	4285      	cmp	r5, r0
   18d56:	fab2 f282 	clz	r2, r2
   18d5a:	d945      	bls.n	18de8 <__udivmoddi4+0xac>
   18d5c:	b14a      	cbz	r2, 18d72 <__udivmoddi4+0x36>
   18d5e:	f1c2 0320 	rsb	r3, r2, #32
   18d62:	fa00 fc02 	lsl.w	ip, r0, r2
   18d66:	4095      	lsls	r5, r2
   18d68:	4094      	lsls	r4, r2
   18d6a:	fa2e f303 	lsr.w	r3, lr, r3
   18d6e:	ea43 0c0c 	orr.w	ip, r3, ip
   18d72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18d76:	b2a8      	uxth	r0, r5
   18d78:	0c23      	lsrs	r3, r4, #16
   18d7a:	fbbc f8fe 	udiv	r8, ip, lr
   18d7e:	fb0e cc18 	mls	ip, lr, r8, ip
   18d82:	fb08 f900 	mul.w	r9, r8, r0
   18d86:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   18d8a:	4599      	cmp	r9, r3
   18d8c:	d928      	bls.n	18de0 <__udivmoddi4+0xa4>
   18d8e:	18eb      	adds	r3, r5, r3
   18d90:	f108 37ff 	add.w	r7, r8, #4294967295
   18d94:	d204      	bcs.n	18da0 <__udivmoddi4+0x64>
   18d96:	4599      	cmp	r9, r3
   18d98:	d902      	bls.n	18da0 <__udivmoddi4+0x64>
   18d9a:	f1a8 0702 	sub.w	r7, r8, #2
   18d9e:	442b      	add	r3, r5
   18da0:	eba3 0309 	sub.w	r3, r3, r9
   18da4:	b2a4      	uxth	r4, r4
   18da6:	fbb3 fcfe 	udiv	ip, r3, lr
   18daa:	fb0e 331c 	mls	r3, lr, ip, r3
   18dae:	fb0c f000 	mul.w	r0, ip, r0
   18db2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   18db6:	42a0      	cmp	r0, r4
   18db8:	d914      	bls.n	18de4 <__udivmoddi4+0xa8>
   18dba:	192c      	adds	r4, r5, r4
   18dbc:	f10c 33ff 	add.w	r3, ip, #4294967295
   18dc0:	d204      	bcs.n	18dcc <__udivmoddi4+0x90>
   18dc2:	42a0      	cmp	r0, r4
   18dc4:	d902      	bls.n	18dcc <__udivmoddi4+0x90>
   18dc6:	f1ac 0302 	sub.w	r3, ip, #2
   18dca:	442c      	add	r4, r5
   18dcc:	1a24      	subs	r4, r4, r0
   18dce:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   18dd2:	b11e      	cbz	r6, 18ddc <__udivmoddi4+0xa0>
   18dd4:	40d4      	lsrs	r4, r2
   18dd6:	2300      	movs	r3, #0
   18dd8:	6034      	str	r4, [r6, #0]
   18dda:	6073      	str	r3, [r6, #4]
   18ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18de0:	4647      	mov	r7, r8
   18de2:	e7dd      	b.n	18da0 <__udivmoddi4+0x64>
   18de4:	4663      	mov	r3, ip
   18de6:	e7f1      	b.n	18dcc <__udivmoddi4+0x90>
   18de8:	bb92      	cbnz	r2, 18e50 <__udivmoddi4+0x114>
   18dea:	1b43      	subs	r3, r0, r5
   18dec:	2101      	movs	r1, #1
   18dee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18df2:	b2af      	uxth	r7, r5
   18df4:	0c20      	lsrs	r0, r4, #16
   18df6:	fbb3 fcfe 	udiv	ip, r3, lr
   18dfa:	fb0e 331c 	mls	r3, lr, ip, r3
   18dfe:	fb0c f807 	mul.w	r8, ip, r7
   18e02:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   18e06:	4598      	cmp	r8, r3
   18e08:	d961      	bls.n	18ece <__udivmoddi4+0x192>
   18e0a:	18eb      	adds	r3, r5, r3
   18e0c:	f10c 30ff 	add.w	r0, ip, #4294967295
   18e10:	d204      	bcs.n	18e1c <__udivmoddi4+0xe0>
   18e12:	4598      	cmp	r8, r3
   18e14:	d902      	bls.n	18e1c <__udivmoddi4+0xe0>
   18e16:	f1ac 0002 	sub.w	r0, ip, #2
   18e1a:	442b      	add	r3, r5
   18e1c:	eba3 0308 	sub.w	r3, r3, r8
   18e20:	b2a4      	uxth	r4, r4
   18e22:	fbb3 fcfe 	udiv	ip, r3, lr
   18e26:	fb0e 331c 	mls	r3, lr, ip, r3
   18e2a:	fb0c f707 	mul.w	r7, ip, r7
   18e2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   18e32:	42a7      	cmp	r7, r4
   18e34:	d94d      	bls.n	18ed2 <__udivmoddi4+0x196>
   18e36:	192c      	adds	r4, r5, r4
   18e38:	f10c 33ff 	add.w	r3, ip, #4294967295
   18e3c:	d204      	bcs.n	18e48 <__udivmoddi4+0x10c>
   18e3e:	42a7      	cmp	r7, r4
   18e40:	d902      	bls.n	18e48 <__udivmoddi4+0x10c>
   18e42:	f1ac 0302 	sub.w	r3, ip, #2
   18e46:	442c      	add	r4, r5
   18e48:	1be4      	subs	r4, r4, r7
   18e4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   18e4e:	e7c0      	b.n	18dd2 <__udivmoddi4+0x96>
   18e50:	f1c2 0320 	rsb	r3, r2, #32
   18e54:	4095      	lsls	r5, r2
   18e56:	4094      	lsls	r4, r2
   18e58:	fa20 f103 	lsr.w	r1, r0, r3
   18e5c:	fa2e f303 	lsr.w	r3, lr, r3
   18e60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18e64:	4090      	lsls	r0, r2
   18e66:	b2af      	uxth	r7, r5
   18e68:	4303      	orrs	r3, r0
   18e6a:	fbb1 fcfe 	udiv	ip, r1, lr
   18e6e:	fb0e 101c 	mls	r0, lr, ip, r1
   18e72:	0c19      	lsrs	r1, r3, #16
   18e74:	fb0c f807 	mul.w	r8, ip, r7
   18e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   18e7c:	4588      	cmp	r8, r1
   18e7e:	d922      	bls.n	18ec6 <__udivmoddi4+0x18a>
   18e80:	1869      	adds	r1, r5, r1
   18e82:	f10c 30ff 	add.w	r0, ip, #4294967295
   18e86:	d204      	bcs.n	18e92 <__udivmoddi4+0x156>
   18e88:	4588      	cmp	r8, r1
   18e8a:	d902      	bls.n	18e92 <__udivmoddi4+0x156>
   18e8c:	f1ac 0002 	sub.w	r0, ip, #2
   18e90:	4429      	add	r1, r5
   18e92:	eba1 0108 	sub.w	r1, r1, r8
   18e96:	b29b      	uxth	r3, r3
   18e98:	fbb1 fcfe 	udiv	ip, r1, lr
   18e9c:	fb0e 111c 	mls	r1, lr, ip, r1
   18ea0:	fb0c f707 	mul.w	r7, ip, r7
   18ea4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   18ea8:	429f      	cmp	r7, r3
   18eaa:	d90e      	bls.n	18eca <__udivmoddi4+0x18e>
   18eac:	18eb      	adds	r3, r5, r3
   18eae:	f10c 31ff 	add.w	r1, ip, #4294967295
   18eb2:	d204      	bcs.n	18ebe <__udivmoddi4+0x182>
   18eb4:	429f      	cmp	r7, r3
   18eb6:	d902      	bls.n	18ebe <__udivmoddi4+0x182>
   18eb8:	f1ac 0102 	sub.w	r1, ip, #2
   18ebc:	442b      	add	r3, r5
   18ebe:	1bdb      	subs	r3, r3, r7
   18ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   18ec4:	e793      	b.n	18dee <__udivmoddi4+0xb2>
   18ec6:	4660      	mov	r0, ip
   18ec8:	e7e3      	b.n	18e92 <__udivmoddi4+0x156>
   18eca:	4661      	mov	r1, ip
   18ecc:	e7f7      	b.n	18ebe <__udivmoddi4+0x182>
   18ece:	4660      	mov	r0, ip
   18ed0:	e7a4      	b.n	18e1c <__udivmoddi4+0xe0>
   18ed2:	4663      	mov	r3, ip
   18ed4:	e7b8      	b.n	18e48 <__udivmoddi4+0x10c>
   18ed6:	4283      	cmp	r3, r0
   18ed8:	d906      	bls.n	18ee8 <__udivmoddi4+0x1ac>
   18eda:	b916      	cbnz	r6, 18ee2 <__udivmoddi4+0x1a6>
   18edc:	2100      	movs	r1, #0
   18ede:	4608      	mov	r0, r1
   18ee0:	e77c      	b.n	18ddc <__udivmoddi4+0xa0>
   18ee2:	e9c6 e000 	strd	lr, r0, [r6]
   18ee6:	e7f9      	b.n	18edc <__udivmoddi4+0x1a0>
   18ee8:	fab3 f783 	clz	r7, r3
   18eec:	b98f      	cbnz	r7, 18f12 <__udivmoddi4+0x1d6>
   18eee:	4283      	cmp	r3, r0
   18ef0:	d301      	bcc.n	18ef6 <__udivmoddi4+0x1ba>
   18ef2:	4572      	cmp	r2, lr
   18ef4:	d808      	bhi.n	18f08 <__udivmoddi4+0x1cc>
   18ef6:	ebbe 0402 	subs.w	r4, lr, r2
   18efa:	eb60 0303 	sbc.w	r3, r0, r3
   18efe:	2001      	movs	r0, #1
   18f00:	469c      	mov	ip, r3
   18f02:	b91e      	cbnz	r6, 18f0c <__udivmoddi4+0x1d0>
   18f04:	2100      	movs	r1, #0
   18f06:	e769      	b.n	18ddc <__udivmoddi4+0xa0>
   18f08:	4638      	mov	r0, r7
   18f0a:	e7fa      	b.n	18f02 <__udivmoddi4+0x1c6>
   18f0c:	e9c6 4c00 	strd	r4, ip, [r6]
   18f10:	e7f8      	b.n	18f04 <__udivmoddi4+0x1c8>
   18f12:	f1c7 0c20 	rsb	ip, r7, #32
   18f16:	40bb      	lsls	r3, r7
   18f18:	fa0e f507 	lsl.w	r5, lr, r7
   18f1c:	fa22 f40c 	lsr.w	r4, r2, ip
   18f20:	fa2e f10c 	lsr.w	r1, lr, ip
   18f24:	40ba      	lsls	r2, r7
   18f26:	431c      	orrs	r4, r3
   18f28:	fa20 f30c 	lsr.w	r3, r0, ip
   18f2c:	40b8      	lsls	r0, r7
   18f2e:	ea4f 4914 	mov.w	r9, r4, lsr #16
   18f32:	4301      	orrs	r1, r0
   18f34:	fa1f fe84 	uxth.w	lr, r4
   18f38:	fbb3 f8f9 	udiv	r8, r3, r9
   18f3c:	fb09 3018 	mls	r0, r9, r8, r3
   18f40:	0c0b      	lsrs	r3, r1, #16
   18f42:	fb08 fa0e 	mul.w	sl, r8, lr
   18f46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   18f4a:	459a      	cmp	sl, r3
   18f4c:	d940      	bls.n	18fd0 <__udivmoddi4+0x294>
   18f4e:	18e3      	adds	r3, r4, r3
   18f50:	f108 30ff 	add.w	r0, r8, #4294967295
   18f54:	d204      	bcs.n	18f60 <__udivmoddi4+0x224>
   18f56:	459a      	cmp	sl, r3
   18f58:	d902      	bls.n	18f60 <__udivmoddi4+0x224>
   18f5a:	f1a8 0002 	sub.w	r0, r8, #2
   18f5e:	4423      	add	r3, r4
   18f60:	eba3 030a 	sub.w	r3, r3, sl
   18f64:	b289      	uxth	r1, r1
   18f66:	fbb3 f8f9 	udiv	r8, r3, r9
   18f6a:	fb09 3318 	mls	r3, r9, r8, r3
   18f6e:	fb08 fe0e 	mul.w	lr, r8, lr
   18f72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   18f76:	458e      	cmp	lr, r1
   18f78:	d92c      	bls.n	18fd4 <__udivmoddi4+0x298>
   18f7a:	1861      	adds	r1, r4, r1
   18f7c:	f108 33ff 	add.w	r3, r8, #4294967295
   18f80:	d204      	bcs.n	18f8c <__udivmoddi4+0x250>
   18f82:	458e      	cmp	lr, r1
   18f84:	d902      	bls.n	18f8c <__udivmoddi4+0x250>
   18f86:	f1a8 0302 	sub.w	r3, r8, #2
   18f8a:	4421      	add	r1, r4
   18f8c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   18f90:	eba1 010e 	sub.w	r1, r1, lr
   18f94:	fba0 9802 	umull	r9, r8, r0, r2
   18f98:	4541      	cmp	r1, r8
   18f9a:	46ce      	mov	lr, r9
   18f9c:	4643      	mov	r3, r8
   18f9e:	d302      	bcc.n	18fa6 <__udivmoddi4+0x26a>
   18fa0:	d106      	bne.n	18fb0 <__udivmoddi4+0x274>
   18fa2:	454d      	cmp	r5, r9
   18fa4:	d204      	bcs.n	18fb0 <__udivmoddi4+0x274>
   18fa6:	3801      	subs	r0, #1
   18fa8:	ebb9 0e02 	subs.w	lr, r9, r2
   18fac:	eb68 0304 	sbc.w	r3, r8, r4
   18fb0:	2e00      	cmp	r6, #0
   18fb2:	d0a7      	beq.n	18f04 <__udivmoddi4+0x1c8>
   18fb4:	ebb5 020e 	subs.w	r2, r5, lr
   18fb8:	eb61 0103 	sbc.w	r1, r1, r3
   18fbc:	fa01 fc0c 	lsl.w	ip, r1, ip
   18fc0:	fa22 f307 	lsr.w	r3, r2, r7
   18fc4:	40f9      	lsrs	r1, r7
   18fc6:	ea4c 0303 	orr.w	r3, ip, r3
   18fca:	e9c6 3100 	strd	r3, r1, [r6]
   18fce:	e799      	b.n	18f04 <__udivmoddi4+0x1c8>
   18fd0:	4640      	mov	r0, r8
   18fd2:	e7c5      	b.n	18f60 <__udivmoddi4+0x224>
   18fd4:	4643      	mov	r3, r8
   18fd6:	e7d9      	b.n	18f8c <__udivmoddi4+0x250>

00018fd8 <strcmp>:
   18fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
   18fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
   18fe0:	2a01      	cmp	r2, #1
   18fe2:	bf28      	it	cs
   18fe4:	429a      	cmpcs	r2, r3
   18fe6:	d0f7      	beq.n	18fd8 <strcmp>
   18fe8:	1ad0      	subs	r0, r2, r3
   18fea:	4770      	bx	lr

00018fec <strlen>:
   18fec:	4603      	mov	r3, r0
   18fee:	f813 2b01 	ldrb.w	r2, [r3], #1
   18ff2:	2a00      	cmp	r2, #0
   18ff4:	d1fb      	bne.n	18fee <strlen+0x2>
   18ff6:	1a18      	subs	r0, r3, r0
   18ff8:	3801      	subs	r0, #1
   18ffa:	4770      	bx	lr
   18ffc:	0000      	movs	r0, r0
	...

00019000 <parse_edrx>:

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   19000:	2300      	movs	r3, #0
{
   19002:	b5f0      	push	{r4, r5, r6, r7, lr}
   19004:	b08d      	sub	sp, #52	; 0x34
   19006:	af00      	add	r7, sp, #0
	struct at_param_list resp_list = {0};
   19008:	e9c7 3304 	strd	r3, r3, [r7, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1900c:	2304      	movs	r3, #4
{
   1900e:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   19010:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
   19012:	607b      	str	r3, [r7, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   19014:	2800      	cmp	r0, #0
   19016:	f000 80d5 	beq.w	191c4 <parse_edrx+0x1c4>
   1901a:	2900      	cmp	r1, #0
   1901c:	f000 80d2 	beq.w	191c4 <parse_edrx+0x1c4>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   19020:	2106      	movs	r1, #6
   19022:	f107 0010 	add.w	r0, r7, #16
   19026:	f010 fccb 	bl	299c0 <at_params_list_init>
	if (err) {
   1902a:	4604      	mov	r4, r0
   1902c:	b190      	cbz	r0, 19054 <parse_edrx+0x54>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1902e:	466d      	mov	r5, sp
   19030:	b088      	sub	sp, #32
   19032:	466a      	mov	r2, sp
   19034:	4b68      	ldr	r3, [pc, #416]	; (191d8 <parse_edrx+0x1d8>)
   19036:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1903a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1903e:	2303      	movs	r3, #3
   19040:	4866      	ldr	r0, [pc, #408]	; (191dc <parse_edrx+0x1dc>)
   19042:	f842 3f10 	str.w	r3, [r2, #16]!
   19046:	f010 fe19 	bl	29c7c <z_log_msg_static_create.constprop.0>
   1904a:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1904c:	4620      	mov	r0, r4
   1904e:	3734      	adds	r7, #52	; 0x34
   19050:	46bd      	mov	sp, r7
   19052:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   19054:	4601      	mov	r1, r0
   19056:	f107 0210 	add.w	r2, r7, #16
   1905a:	4630      	mov	r0, r6
   1905c:	f010 fc97 	bl	2998e <at_parser_params_from_str>
	if (err) {
   19060:	4604      	mov	r4, r0
   19062:	b198      	cbz	r0, 1908c <parse_edrx+0x8c>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   19064:	466d      	mov	r5, sp
   19066:	b088      	sub	sp, #32
   19068:	466a      	mov	r2, sp
   1906a:	4b5d      	ldr	r3, [pc, #372]	; (191e0 <parse_edrx+0x1e0>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1906c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   19070:	2303      	movs	r3, #3
   19072:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19076:	4859      	ldr	r0, [pc, #356]	; (191dc <parse_edrx+0x1dc>)
   19078:	f842 3f10 	str.w	r3, [r2, #16]!
   1907c:	f010 fdfe 	bl	29c7c <z_log_msg_static_create.constprop.0>
   19080:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   19082:	f107 0010 	add.w	r0, r7, #16
   19086:	f010 fcc5 	bl	29a14 <at_params_list_free>
	return err;
   1908a:	e7df      	b.n	1904c <parse_edrx+0x4c>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1908c:	2103      	movs	r1, #3
   1908e:	1d3b      	adds	r3, r7, #4
   19090:	f107 0208 	add.w	r2, r7, #8
   19094:	f107 0010 	add.w	r0, r7, #16
   19098:	f010 fd9a 	bl	29bd0 <at_params_string_get>
	if (err) {
   1909c:	4604      	mov	r4, r0
   1909e:	b120      	cbz	r0, 190aa <parse_edrx+0xaa>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   190a0:	466d      	mov	r5, sp
   190a2:	b088      	sub	sp, #32
   190a4:	466a      	mov	r2, sp
   190a6:	4b4f      	ldr	r3, [pc, #316]	; (191e4 <parse_edrx+0x1e4>)
   190a8:	e7e0      	b.n	1906c <parse_edrx+0x6c>
	tmp_buf[len] = '\0';
   190aa:	687b      	ldr	r3, [r7, #4]
	idx = strtoul(tmp_buf, NULL, 2);
   190ac:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   190ae:	3330      	adds	r3, #48	; 0x30
   190b0:	443b      	add	r3, r7
   190b2:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
   190b6:	2202      	movs	r2, #2
   190b8:	f107 0008 	add.w	r0, r7, #8
   190bc:	f00d fc8e 	bl	269dc <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   190c0:	463a      	mov	r2, r7
   190c2:	2101      	movs	r1, #1
	idx = strtoul(tmp_buf, NULL, 2);
   190c4:	b2c6      	uxtb	r6, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   190c6:	f107 0010 	add.w	r0, r7, #16
   190ca:	f010 fd55 	bl	29b78 <at_params_int_get>
	if (err) {
   190ce:	4604      	mov	r4, r0
   190d0:	b120      	cbz	r0, 190dc <parse_edrx+0xdc>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   190d2:	466d      	mov	r5, sp
   190d4:	b088      	sub	sp, #32
   190d6:	466a      	mov	r2, sp
   190d8:	4b43      	ldr	r3, [pc, #268]	; (191e8 <parse_edrx+0x1e8>)
   190da:	e7c7      	b.n	1906c <parse_edrx+0x6c>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   190dc:	683b      	ldr	r3, [r7, #0]
   190de:	2b04      	cmp	r3, #4
   190e0:	d028      	beq.n	19134 <parse_edrx+0x134>
   190e2:	2b05      	cmp	r3, #5
   190e4:	d00e      	beq.n	19104 <parse_edrx+0x104>
   190e6:	7028      	strb	r0, [r5, #0]
		LOG_WRN("Active LTE mode could not be determined");
   190e8:	4b40      	ldr	r3, [pc, #256]	; (191ec <parse_edrx+0x1ec>)
   190ea:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   190ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   190f0:	2302      	movs	r3, #2
   190f2:	483a      	ldr	r0, [pc, #232]	; (191dc <parse_edrx+0x1dc>)
   190f4:	62bb      	str	r3, [r7, #40]	; 0x28
   190f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   190fa:	f010 fdbf 	bl	29c7c <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   190fe:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   19102:	e7be      	b.n	19082 <parse_edrx+0x82>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19104:	2309      	movs	r3, #9
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   19106:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19108:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1910a:	d936      	bls.n	1917a <parse_edrx+0x17a>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1910c:	466c      	mov	r4, sp
   1910e:	b088      	sub	sp, #32
   19110:	466a      	mov	r2, sp
   19112:	4b37      	ldr	r3, [pc, #220]	; (191f0 <parse_edrx+0x1f0>)
   19114:	6153      	str	r3, [r2, #20]
   19116:	f06f 0315 	mvn.w	r3, #21
   1911a:	6193      	str	r3, [r2, #24]
   1911c:	2303      	movs	r3, #3
   1911e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19122:	482e      	ldr	r0, [pc, #184]	; (191dc <parse_edrx+0x1dc>)
   19124:	f842 3f10 	str.w	r3, [r2, #16]!
   19128:	f010 fda8 	bl	29c7c <z_log_msg_static_create.constprop.0>
   1912c:	46a5      	mov	sp, r4
		return -ENOTCONN;
   1912e:	f06f 0415 	mvn.w	r4, #21
   19132:	e7a6      	b.n	19082 <parse_edrx+0x82>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19134:	2307      	movs	r3, #7
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   19136:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19138:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1913a:	d8e7      	bhi.n	1910c <parse_edrx+0x10c>
		multiplier = edrx_lookup_ltem[idx];
   1913c:	4b2d      	ldr	r3, [pc, #180]	; (191f4 <parse_edrx+0x1f4>)
   1913e:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
		*ptw_multiplier = 1.28;
   19142:	4e2d      	ldr	r6, [pc, #180]	; (191f8 <parse_edrx+0x1f8>)
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   19144:	b1f0      	cbz	r0, 19184 <parse_edrx+0x184>
   19146:	f7ff fa05 	bl	18554 <__aeabi_i2d>
   1914a:	a321      	add	r3, pc, #132	; (adr r3, 191d0 <parse_edrx+0x1d0>)
   1914c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19150:	f7ff fa6a 	bl	18628 <__aeabi_dmul>
   19154:	f7ff fc7a 	bl	18a4c <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   19158:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1915a:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1915c:	187b      	adds	r3, r7, r1
   1915e:	f107 0208 	add.w	r2, r7, #8
   19162:	f107 0010 	add.w	r0, r7, #16
	len = sizeof(tmp_buf) - 1;
   19166:	6079      	str	r1, [r7, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   19168:	f010 fd32 	bl	29bd0 <at_params_string_get>
	if (err) {
   1916c:	4604      	mov	r4, r0
   1916e:	b158      	cbz	r0, 19188 <parse_edrx+0x188>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   19170:	466d      	mov	r5, sp
   19172:	b088      	sub	sp, #32
   19174:	466a      	mov	r2, sp
   19176:	4b21      	ldr	r3, [pc, #132]	; (191fc <parse_edrx+0x1fc>)
   19178:	e778      	b.n	1906c <parse_edrx+0x6c>
		multiplier = edrx_lookup_nbiot[idx];
   1917a:	4b21      	ldr	r3, [pc, #132]	; (19200 <parse_edrx+0x200>)
   1917c:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
		*ptw_multiplier = 2.56;
   19180:	4e20      	ldr	r6, [pc, #128]	; (19204 <parse_edrx+0x204>)
		break;
   19182:	e7df      	b.n	19144 <parse_edrx+0x144>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   19184:	4820      	ldr	r0, [pc, #128]	; (19208 <parse_edrx+0x208>)
   19186:	e7e7      	b.n	19158 <parse_edrx+0x158>
	tmp_buf[len] = '\0';
   19188:	687b      	ldr	r3, [r7, #4]
	idx = strtoul(tmp_buf, NULL, 2);
   1918a:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   1918c:	3330      	adds	r3, #48	; 0x30
   1918e:	443b      	add	r3, r7
   19190:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
   19194:	2202      	movs	r2, #2
   19196:	f107 0008 	add.w	r0, r7, #8
   1919a:	f00d fc1f 	bl	269dc <strtoul>
   1919e:	b2c0      	uxtb	r0, r0
	if (idx > 15) {
   191a0:	280f      	cmp	r0, #15
   191a2:	d906      	bls.n	191b2 <parse_edrx+0x1b2>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   191a4:	466c      	mov	r4, sp
   191a6:	b088      	sub	sp, #32
   191a8:	466a      	mov	r2, sp
   191aa:	4b18      	ldr	r3, [pc, #96]	; (1920c <parse_edrx+0x20c>)
   191ac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   191b0:	e7b4      	b.n	1911c <parse_edrx+0x11c>
	idx += 1;
   191b2:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   191b4:	b2c0      	uxtb	r0, r0
   191b6:	f7ff fd53 	bl	18c60 <__aeabi_i2f>
   191ba:	4631      	mov	r1, r6
   191bc:	f7fe ffc4 	bl	18148 <__aeabi_fmul>
   191c0:	60a8      	str	r0, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   191c2:	e75e      	b.n	19082 <parse_edrx+0x82>
		return -EINVAL;
   191c4:	f06f 0415 	mvn.w	r4, #21
   191c8:	e740      	b.n	1904c <parse_edrx+0x4c>
   191ca:	bf00      	nop
   191cc:	f3af 8000 	nop.w
   191d0:	47ae147b 	.word	0x47ae147b
   191d4:	40247ae1 	.word	0x40247ae1
   191d8:	0002e071 	.word	0x0002e071
   191dc:	0002bde8 	.word	0x0002bde8
   191e0:	0002e09a 	.word	0x0002e09a
   191e4:	0002e0c6 	.word	0x0002e0c6
   191e8:	0002e0f2 	.word	0x0002e0f2
   191ec:	0002e114 	.word	0x0002e114
   191f0:	0002e13c 	.word	0x0002e13c
   191f4:	0002c59c 	.word	0x0002c59c
   191f8:	3fa3d70a 	.word	0x3fa3d70a
   191fc:	0002e160 	.word	0x0002e160
   19200:	0002c57c 	.word	0x0002c57c
   19204:	4023d70a 	.word	0x4023d70a
   19208:	40a3d70a 	.word	0x40a3d70a
   1920c:	0002e18b 	.word	0x0002e18b

00019210 <data_print>:
}

/**@brief Function to print strings without null-termination
 */
static void data_print(uint8_t *prefix, uint8_t *data, size_t len)
{
   19210:	b5f0      	push	{r4, r5, r6, r7, lr}
	char buf[len + 1];
   19212:	f102 0308 	add.w	r3, r2, #8
{
   19216:	b083      	sub	sp, #12
	char buf[len + 1];
   19218:	f023 0307 	bic.w	r3, r3, #7
{
   1921c:	af00      	add	r7, sp, #0
	char buf[len + 1];
   1921e:	ebad 0d03 	sub.w	sp, sp, r3
{
   19222:	4605      	mov	r5, r0
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19224:	4668      	mov	r0, sp
   19226:	4614      	mov	r4, r2
   19228:	f012 f94c 	bl	2b4c4 <memcpy>

	memcpy(buf, data, len);
	buf[len] = 0;
   1922c:	2300      	movs	r3, #0
	char buf[len + 1];
   1922e:	466e      	mov	r6, sp
	buf[len] = 0;
   19230:	f80d 3004 	strb.w	r3, [sp, r4]
	LOG_INF("%s%s", (char *)prefix, (char *)buf);
   19234:	b08a      	sub	sp, #40	; 0x28
   19236:	466b      	mov	r3, sp
   19238:	490e      	ldr	r1, [pc, #56]	; (19274 <data_print+0x64>)
   1923a:	f103 0210 	add.w	r2, r3, #16
   1923e:	e9c3 1505 	strd	r1, r5, [r3, #20]
   19242:	490d      	ldr	r1, [pc, #52]	; (19278 <data_print+0x68>)
   19244:	61de      	str	r6, [r3, #28]
   19246:	6079      	str	r1, [r7, #4]
   19248:	1d38      	adds	r0, r7, #4
   1924a:	f103 011f 	add.w	r1, r3, #31
   1924e:	f103 0423 	add.w	r4, r3, #35	; 0x23
   19252:	f810 5b01 	ldrb.w	r5, [r0], #1
   19256:	f801 5f01 	strb.w	r5, [r1, #1]!
   1925a:	42a1      	cmp	r1, r4
   1925c:	d1f9      	bne.n	19252 <data_print+0x42>
   1925e:	4907      	ldr	r1, [pc, #28]	; (1927c <data_print+0x6c>)
   19260:	4807      	ldr	r0, [pc, #28]	; (19280 <data_print+0x70>)
   19262:	6119      	str	r1, [r3, #16]
   19264:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   19268:	f00e f904 	bl	27474 <z_log_msg_static_create.constprop.0>
}
   1926c:	370c      	adds	r7, #12
   1926e:	46bd      	mov	sp, r7
   19270:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19272:	bf00      	nop
   19274:	0002c5bc 	.word	0x0002c5bc
   19278:	03010200 	.word	0x03010200
   1927c:	02000004 	.word	0x02000004
   19280:	0002bd80 	.word	0x0002bd80

00019284 <mqtt_evt_handler>:
}
/**@brief MQTT client event handler
 */
void mqtt_evt_handler(struct mqtt_client *const c,
		      const struct mqtt_evt *evt)
{
   19284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19288:	b089      	sub	sp, #36	; 0x24
	int err;

	switch (evt->type) {
   1928a:	780b      	ldrb	r3, [r1, #0]
{
   1928c:	4606      	mov	r6, r0
   1928e:	460c      	mov	r4, r1
   19290:	af00      	add	r7, sp, #0
	switch (evt->type) {
   19292:	2b09      	cmp	r3, #9
   19294:	f200 8125 	bhi.w	194e2 <mqtt_evt_handler+0x25e>
   19298:	e8df f013 	tbh	[pc, r3, lsl #1]
   1929c:	004c000a 	.word	0x004c000a
   192a0:	01000059 	.word	0x01000059
   192a4:	01230123 	.word	0x01230123
   192a8:	010d0123 	.word	0x010d0123
   192ac:	011a0123 	.word	0x011a0123
	case MQTT_EVT_CONNACK:
	/* STEP 5 - Subscribe to the topic CONFIG_MQTT_SUB_TOPIC when we have a successful connection */
		if (evt->result != 0) {
   192b0:	69cb      	ldr	r3, [r1, #28]
   192b2:	b14b      	cbz	r3, 192c8 <mqtt_evt_handler+0x44>
			LOG_ERR("MQTT connect failed: %d", evt->result);
   192b4:	466c      	mov	r4, sp
   192b6:	b088      	sub	sp, #32
   192b8:	466a      	mov	r2, sp
   192ba:	498c      	ldr	r1, [pc, #560]	; (194ec <mqtt_evt_handler+0x268>)
		LOG_INF("SUBACK packet id: %u", evt->param.suback.message_id);
		break;

	case MQTT_EVT_PINGRESP:
		if (evt->result != 0) {
			LOG_ERR("MQTT PINGRESP error: %d", evt->result);
   192bc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   192c0:	2303      	movs	r3, #3
   192c2:	f842 3f10 	str.w	r3, [r2, #16]!
   192c6:	e0e6      	b.n	19496 <mqtt_evt_handler+0x212>
		LOG_INF("MQTT client connected");
   192c8:	466d      	mov	r5, sp
   192ca:	4b89      	ldr	r3, [pc, #548]	; (194f0 <mqtt_evt_handler+0x26c>)
	struct mqtt_topic subscribe_topic = {
   192cc:	4c89      	ldr	r4, [pc, #548]	; (194f4 <mqtt_evt_handler+0x270>)
		LOG_INF("MQTT client connected");
   192ce:	61fb      	str	r3, [r7, #28]
   192d0:	2302      	movs	r3, #2
   192d2:	f107 0218 	add.w	r2, r7, #24
   192d6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   192da:	61bb      	str	r3, [r7, #24]
   192dc:	4886      	ldr	r0, [pc, #536]	; (194f8 <mqtt_evt_handler+0x274>)
   192de:	f00e f8c9 	bl	27474 <z_log_msg_static_create.constprop.0>
			.size = strlen(CONFIG_MQTT_SUB_TOPIC)
   192e2:	4620      	mov	r0, r4
	struct mqtt_topic subscribe_topic = {
   192e4:	60bc      	str	r4, [r7, #8]
			.size = strlen(CONFIG_MQTT_SUB_TOPIC)
   192e6:	f7ff fe81 	bl	18fec <strlen>
	struct mqtt_topic subscribe_topic = {
   192ea:	2301      	movs	r3, #1
   192ec:	743b      	strb	r3, [r7, #16]
	const struct mqtt_subscription_list subscription_list = {
   192ee:	f107 0308 	add.w	r3, r7, #8
   192f2:	603b      	str	r3, [r7, #0]
   192f4:	4b81      	ldr	r3, [pc, #516]	; (194fc <mqtt_evt_handler+0x278>)
	struct mqtt_topic subscribe_topic = {
   192f6:	60f8      	str	r0, [r7, #12]
	const struct mqtt_subscription_list subscription_list = {
   192f8:	607b      	str	r3, [r7, #4]
	LOG_INF("Subscribing to: %s len %u", CONFIG_MQTT_SUB_TOPIC,
   192fa:	4620      	mov	r0, r4
   192fc:	f7ff fe76 	bl	18fec <strlen>
   19300:	b08a      	sub	sp, #40	; 0x28
   19302:	466a      	mov	r2, sp
   19304:	4b7e      	ldr	r3, [pc, #504]	; (19500 <mqtt_evt_handler+0x27c>)
   19306:	61d0      	str	r0, [r2, #28]
   19308:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1930c:	f44f 7300 	mov.w	r3, #512	; 0x200
   19310:	8413      	strh	r3, [r2, #32]
   19312:	4b7c      	ldr	r3, [pc, #496]	; (19504 <mqtt_evt_handler+0x280>)
   19314:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   19318:	4877      	ldr	r0, [pc, #476]	; (194f8 <mqtt_evt_handler+0x274>)
   1931a:	f842 3f10 	str.w	r3, [r2, #16]!
   1931e:	f00e f8a9 	bl	27474 <z_log_msg_static_create.constprop.0>
	return mqtt_subscribe(c, &subscription_list);
   19322:	4639      	mov	r1, r7
   19324:	46ad      	mov	sp, r5
   19326:	4630      	mov	r0, r6
   19328:	f00f fe17 	bl	28f5a <mqtt_subscribe>

	default:
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
		break;
	}
}
   1932c:	3724      	adds	r7, #36	; 0x24
   1932e:	46bd      	mov	sp, r7
   19330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_INF("MQTT client disconnected: %d", evt->result);
   19334:	466c      	mov	r4, sp
   19336:	b088      	sub	sp, #32
   19338:	69cb      	ldr	r3, [r1, #28]
   1933a:	466a      	mov	r2, sp
   1933c:	4972      	ldr	r1, [pc, #456]	; (19508 <mqtt_evt_handler+0x284>)
	switch (evt->type) {
   1933e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
   19342:	2303      	movs	r3, #3
   19344:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   19348:	f842 3f10 	str.w	r3, [r2, #16]!
   1934c:	e04d      	b.n	193ea <mqtt_evt_handler+0x166>
		LOG_INF("MQTT PUBLISH result=%d len=%d",
   1934e:	466d      	mov	r5, sp
   19350:	b088      	sub	sp, #32
   19352:	466a      	mov	r2, sp
   19354:	69c9      	ldr	r1, [r1, #28]
   19356:	6963      	ldr	r3, [r4, #20]
   19358:	61d3      	str	r3, [r2, #28]
   1935a:	2304      	movs	r3, #4
   1935c:	486b      	ldr	r0, [pc, #428]	; (1950c <mqtt_evt_handler+0x288>)
   1935e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   19362:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
   19366:	4864      	ldr	r0, [pc, #400]	; (194f8 <mqtt_evt_handler+0x274>)
   19368:	f842 3f10 	str.w	r3, [r2, #16]!
   1936c:	f00e f882 	bl	27474 <z_log_msg_static_create.constprop.0>
		err = get_received_payload(c, p->message.payload.len);
   19370:	f8d4 8014 	ldr.w	r8, [r4, #20]
   19374:	46ad      	mov	sp, r5
	if (length > sizeof(payload_buf)) {
   19376:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
   1937a:	d912      	bls.n	193a2 <mqtt_evt_handler+0x11e>
		ret = mqtt_read_publish_payload_blocking(
   1937c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 19510 <mqtt_evt_handler+0x28c>
   19380:	4649      	mov	r1, r9
   19382:	4630      	mov	r0, r6
   19384:	f1a8 0280 	sub.w	r2, r8, #128	; 0x80
   19388:	f00f fe94 	bl	290b4 <mqtt_read_publish_payload_blocking>
		if (ret == 0) {
   1938c:	1e05      	subs	r5, r0, #0
   1938e:	d031      	beq.n	193f4 <mqtt_evt_handler+0x170>
		} else if (ret < 0) {
   19390:	db32      	blt.n	193f8 <mqtt_evt_handler+0x174>
		length -= ret;
   19392:	eba8 0805 	sub.w	r8, r8, r5
	while (length > sizeof(payload_buf)) {
   19396:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
   1939a:	d8f1      	bhi.n	19380 <mqtt_evt_handler+0xfc>
		err = -EMSGSIZE;
   1939c:	f06f 0979 	mvn.w	r9, #121	; 0x79
   193a0:	e001      	b.n	193a6 <mqtt_evt_handler+0x122>
	int err = 0;
   193a2:	f04f 0900 	mov.w	r9, #0
	ret = mqtt_readall_publish_payload(c, payload_buf, length);
   193a6:	4642      	mov	r2, r8
   193a8:	4630      	mov	r0, r6
   193aa:	4959      	ldr	r1, [pc, #356]	; (19510 <mqtt_evt_handler+0x28c>)
   193ac:	f00f fe85 	bl	290ba <mqtt_readall_publish_payload>
	if (ret) {
   193b0:	4605      	mov	r5, r0
   193b2:	bb08      	cbnz	r0, 193f8 <mqtt_evt_handler+0x174>
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   193b4:	7b23      	ldrb	r3, [r4, #12]
   193b6:	2b01      	cmp	r3, #1
   193b8:	d106      	bne.n	193c8 <mqtt_evt_handler+0x144>
			const struct mqtt_puback_param ack = {
   193ba:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(c, &ack);
   193bc:	4630      	mov	r0, r6
			const struct mqtt_puback_param ack = {
   193be:	813b      	strh	r3, [r7, #8]
			mqtt_publish_qos1_ack(c, &ack);
   193c0:	f107 0108 	add.w	r1, r7, #8
   193c4:	f00f fd7b 	bl	28ebe <mqtt_publish_qos1_ack>
		if (err >= 0) {
   193c8:	f1b9 0f00 	cmp.w	r9, #0
   193cc:	d020      	beq.n	19410 <mqtt_evt_handler+0x18c>
			LOG_ERR("Received payload (%d bytes) is larger than the payload buffer size (%d bytes).",
   193ce:	6963      	ldr	r3, [r4, #20]
   193d0:	466c      	mov	r4, sp
   193d2:	b088      	sub	sp, #32
   193d4:	466a      	mov	r2, sp
   193d6:	494f      	ldr	r1, [pc, #316]	; (19514 <mqtt_evt_handler+0x290>)
   193d8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   193dc:	2380      	movs	r3, #128	; 0x80
   193de:	61d3      	str	r3, [r2, #28]
   193e0:	2304      	movs	r3, #4
   193e2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   193e6:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
   193ea:	4843      	ldr	r0, [pc, #268]	; (194f8 <mqtt_evt_handler+0x274>)
   193ec:	f00e f842 	bl	27474 <z_log_msg_static_create.constprop.0>
   193f0:	46a5      	mov	sp, r4
}
   193f2:	e79b      	b.n	1932c <mqtt_evt_handler+0xa8>
			return -EIO;
   193f4:	f06f 0504 	mvn.w	r5, #4
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   193f8:	7b23      	ldrb	r3, [r4, #12]
   193fa:	2b01      	cmp	r3, #1
   193fc:	d106      	bne.n	1940c <mqtt_evt_handler+0x188>
			const struct mqtt_puback_param ack = {
   193fe:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(c, &ack);
   19400:	4630      	mov	r0, r6
			const struct mqtt_puback_param ack = {
   19402:	813b      	strh	r3, [r7, #8]
			mqtt_publish_qos1_ack(c, &ack);
   19404:	f107 0108 	add.w	r1, r7, #8
   19408:	f00f fd59 	bl	28ebe <mqtt_publish_qos1_ack>
		if (err >= 0) {
   1940c:	2d00      	cmp	r5, #0
   1940e:	db18      	blt.n	19442 <mqtt_evt_handler+0x1be>
			data_print("Received: ", payload_buf, p->message.payload.len);
   19410:	6962      	ldr	r2, [r4, #20]
   19412:	493f      	ldr	r1, [pc, #252]	; (19510 <mqtt_evt_handler+0x28c>)
   19414:	4840      	ldr	r0, [pc, #256]	; (19518 <mqtt_evt_handler+0x294>)
   19416:	f7ff fefb 	bl	19210 <data_print>
			if(strncmp(payload_buf,CONFIG_TURN_LED_ON_CMD,sizeof(CONFIG_TURN_LED_ON_CMD)-1) == 0){
   1941a:	2206      	movs	r2, #6
   1941c:	493f      	ldr	r1, [pc, #252]	; (1951c <mqtt_evt_handler+0x298>)
   1941e:	483c      	ldr	r0, [pc, #240]	; (19510 <mqtt_evt_handler+0x28c>)
   19420:	f012 f87c 	bl	2b51c <strncmp>
   19424:	b150      	cbz	r0, 1943c <mqtt_evt_handler+0x1b8>
			else if(strncmp(payload_buf,CONFIG_TURN_LED_OFF_CMD,sizeof(CONFIG_TURN_LED_OFF_CMD)-1) == 0){
   19426:	2207      	movs	r2, #7
   19428:	493d      	ldr	r1, [pc, #244]	; (19520 <mqtt_evt_handler+0x29c>)
   1942a:	4839      	ldr	r0, [pc, #228]	; (19510 <mqtt_evt_handler+0x28c>)
   1942c:	f012 f876 	bl	2b51c <strncmp>
   19430:	2800      	cmp	r0, #0
   19432:	f47f af7b 	bne.w	1932c <mqtt_evt_handler+0xa8>
				dk_set_led_off(LED_CONTROL_OVER_MQTT);
   19436:	f010 fa84 	bl	29942 <dk_set_led_off>
   1943a:	e777      	b.n	1932c <mqtt_evt_handler+0xa8>
				dk_set_led_on(LED_CONTROL_OVER_MQTT);
   1943c:	f010 fa7e 	bl	2993c <dk_set_led_on>
   19440:	e774      	b.n	1932c <mqtt_evt_handler+0xa8>
		} else if (err == -EMSGSIZE) {
   19442:	f115 0f7a 	cmn.w	r5, #122	; 0x7a
   19446:	d0c2      	beq.n	193ce <mqtt_evt_handler+0x14a>
			LOG_ERR("get_received_payload failed: %d", err);
   19448:	466c      	mov	r4, sp
   1944a:	b088      	sub	sp, #32
   1944c:	466a      	mov	r2, sp
   1944e:	4b35      	ldr	r3, [pc, #212]	; (19524 <mqtt_evt_handler+0x2a0>)
   19450:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19454:	e9c2 3505 	strd	r3, r5, [r2, #20]
   19458:	2503      	movs	r5, #3
   1945a:	4827      	ldr	r0, [pc, #156]	; (194f8 <mqtt_evt_handler+0x274>)
   1945c:	f842 5f10 	str.w	r5, [r2, #16]!
   19460:	f00e f808 	bl	27474 <z_log_msg_static_create.constprop.0>
   19464:	46a5      	mov	sp, r4
			LOG_INF("Disconnecting MQTT client...");
   19466:	4b30      	ldr	r3, [pc, #192]	; (19528 <mqtt_evt_handler+0x2a4>)
   19468:	4823      	ldr	r0, [pc, #140]	; (194f8 <mqtt_evt_handler+0x274>)
   1946a:	61fb      	str	r3, [r7, #28]
   1946c:	2302      	movs	r3, #2
   1946e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   19472:	61bb      	str	r3, [r7, #24]
   19474:	f107 0218 	add.w	r2, r7, #24
   19478:	f00d fffc 	bl	27474 <z_log_msg_static_create.constprop.0>
			err = mqtt_disconnect(c);
   1947c:	4630      	mov	r0, r6
   1947e:	f00f fd44 	bl	28f0a <mqtt_disconnect>
			if (err) {
   19482:	2800      	cmp	r0, #0
   19484:	f43f af52 	beq.w	1932c <mqtt_evt_handler+0xa8>
				LOG_ERR("Could not disconnect: %d", err);
   19488:	b088      	sub	sp, #32
   1948a:	466a      	mov	r2, sp
   1948c:	4b27      	ldr	r3, [pc, #156]	; (1952c <mqtt_evt_handler+0x2a8>)
   1948e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19492:	f842 5f10 	str.w	r5, [r2, #16]!
			LOG_ERR("MQTT PINGRESP error: %d", evt->result);
   19496:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1949a:	e7a6      	b.n	193ea <mqtt_evt_handler+0x166>
		if (evt->result != 0) {
   1949c:	69cb      	ldr	r3, [r1, #28]
   1949e:	b123      	cbz	r3, 194aa <mqtt_evt_handler+0x226>
			LOG_ERR("MQTT PUBACK error: %d", evt->result);
   194a0:	466c      	mov	r4, sp
   194a2:	b088      	sub	sp, #32
   194a4:	466a      	mov	r2, sp
   194a6:	4922      	ldr	r1, [pc, #136]	; (19530 <mqtt_evt_handler+0x2ac>)
   194a8:	e708      	b.n	192bc <mqtt_evt_handler+0x38>
		LOG_INF("PUBACK packet id: %u", evt->param.puback.message_id);
   194aa:	466c      	mov	r4, sp
   194ac:	b088      	sub	sp, #32
   194ae:	466a      	mov	r2, sp
   194b0:	888b      	ldrh	r3, [r1, #4]
   194b2:	4920      	ldr	r1, [pc, #128]	; (19534 <mqtt_evt_handler+0x2b0>)
   194b4:	e743      	b.n	1933e <mqtt_evt_handler+0xba>
		if (evt->result != 0) {
   194b6:	69cb      	ldr	r3, [r1, #28]
   194b8:	b123      	cbz	r3, 194c4 <mqtt_evt_handler+0x240>
			LOG_ERR("MQTT SUBACK error: %d", evt->result);
   194ba:	466c      	mov	r4, sp
   194bc:	b088      	sub	sp, #32
   194be:	466a      	mov	r2, sp
   194c0:	491d      	ldr	r1, [pc, #116]	; (19538 <mqtt_evt_handler+0x2b4>)
   194c2:	e6fb      	b.n	192bc <mqtt_evt_handler+0x38>
		LOG_INF("SUBACK packet id: %u", evt->param.suback.message_id);
   194c4:	466c      	mov	r4, sp
   194c6:	b088      	sub	sp, #32
   194c8:	466a      	mov	r2, sp
   194ca:	888b      	ldrh	r3, [r1, #4]
   194cc:	491b      	ldr	r1, [pc, #108]	; (1953c <mqtt_evt_handler+0x2b8>)
   194ce:	e736      	b.n	1933e <mqtt_evt_handler+0xba>
		if (evt->result != 0) {
   194d0:	69cb      	ldr	r3, [r1, #28]
   194d2:	2b00      	cmp	r3, #0
   194d4:	f43f af2a 	beq.w	1932c <mqtt_evt_handler+0xa8>
			LOG_ERR("MQTT PINGRESP error: %d", evt->result);
   194d8:	466c      	mov	r4, sp
   194da:	b088      	sub	sp, #32
   194dc:	466a      	mov	r2, sp
   194de:	4918      	ldr	r1, [pc, #96]	; (19540 <mqtt_evt_handler+0x2bc>)
   194e0:	e6ec      	b.n	192bc <mqtt_evt_handler+0x38>
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
   194e2:	466c      	mov	r4, sp
   194e4:	b088      	sub	sp, #32
   194e6:	466a      	mov	r2, sp
   194e8:	4916      	ldr	r1, [pc, #88]	; (19544 <mqtt_evt_handler+0x2c0>)
   194ea:	e728      	b.n	1933e <mqtt_evt_handler+0xba>
   194ec:	0002c5c1 	.word	0x0002c5c1
   194f0:	0002c5d9 	.word	0x0002c5d9
   194f4:	0002c5ef 	.word	0x0002c5ef
   194f8:	0002bd80 	.word	0x0002bd80
   194fc:	04d20001 	.word	0x04d20001
   19500:	0002c60a 	.word	0x0002c60a
   19504:	01000004 	.word	0x01000004
   19508:	0002c624 	.word	0x0002c624
   1950c:	0002c641 	.word	0x0002c641
   19510:	2000d97a 	.word	0x2000d97a
   19514:	0002c65f 	.word	0x0002c65f
   19518:	0002c6ae 	.word	0x0002c6ae
   1951c:	0002c6b9 	.word	0x0002c6b9
   19520:	0002c6c0 	.word	0x0002c6c0
   19524:	0002c6c8 	.word	0x0002c6c8
   19528:	0002c6e8 	.word	0x0002c6e8
   1952c:	0002c705 	.word	0x0002c705
   19530:	0002c71e 	.word	0x0002c71e
   19534:	0002c734 	.word	0x0002c734
   19538:	0002c749 	.word	0x0002c749
   1953c:	0002c75f 	.word	0x0002c75f
   19540:	0002c774 	.word	0x0002c774
   19544:	0002c78c 	.word	0x0002c78c

00019548 <data_publish>:
{
   19548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
   1954c:	4c1b      	ldr	r4, [pc, #108]	; (195bc <data_publish+0x74>)
{
   1954e:	b086      	sub	sp, #24
   19550:	4680      	mov	r8, r0
   19552:	af00      	add	r7, sp, #0
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   19554:	4620      	mov	r0, r4
{
   19556:	4615      	mov	r5, r2
   19558:	461e      	mov	r6, r3
	param.message.topic.qos = qos;
   1955a:	7239      	strb	r1, [r7, #8]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
   1955c:	603c      	str	r4, [r7, #0]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   1955e:	f7ff fd45 	bl	18fec <strlen>
	param.message.payload.len = len;
   19562:	e9c7 5603 	strd	r5, r6, [r7, #12]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   19566:	6078      	str	r0, [r7, #4]
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
   19568:	f003 fe1c 	bl	1d1a4 <z_impl_sys_rand32_get>
	param.dup_flag = 0;
   1956c:	7dbb      	ldrb	r3, [r7, #22]
	data_print("Publishing: ", data, len);
   1956e:	4632      	mov	r2, r6
	param.dup_flag = 0;
   19570:	f023 0303 	bic.w	r3, r3, #3
	data_print("Publishing: ", data, len);
   19574:	4629      	mov	r1, r5
	param.message_id = sys_rand32_get();
   19576:	82b8      	strh	r0, [r7, #20]
	param.dup_flag = 0;
   19578:	75bb      	strb	r3, [r7, #22]
	data_print("Publishing: ", data, len);
   1957a:	4811      	ldr	r0, [pc, #68]	; (195c0 <data_publish+0x78>)
   1957c:	f7ff fe48 	bl	19210 <data_print>
	LOG_INF("to topic: %s len: %u",
   19580:	4620      	mov	r0, r4
   19582:	f7ff fd33 	bl	18fec <strlen>
   19586:	466d      	mov	r5, sp
   19588:	b08a      	sub	sp, #40	; 0x28
   1958a:	466a      	mov	r2, sp
   1958c:	4b0d      	ldr	r3, [pc, #52]	; (195c4 <data_publish+0x7c>)
   1958e:	61d0      	str	r0, [r2, #28]
   19590:	e9c2 3405 	strd	r3, r4, [r2, #20]
   19594:	f44f 7300 	mov.w	r3, #512	; 0x200
   19598:	8413      	strh	r3, [r2, #32]
   1959a:	4b0b      	ldr	r3, [pc, #44]	; (195c8 <data_publish+0x80>)
   1959c:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   195a0:	f842 3f10 	str.w	r3, [r2, #16]!
   195a4:	4809      	ldr	r0, [pc, #36]	; (195cc <data_publish+0x84>)
   195a6:	f00d ff65 	bl	27474 <z_log_msg_static_create.constprop.0>
	return mqtt_publish(c, &param);
   195aa:	4639      	mov	r1, r7
   195ac:	46ad      	mov	sp, r5
   195ae:	4640      	mov	r0, r8
   195b0:	f00f fc41 	bl	28e36 <mqtt_publish>
}
   195b4:	3718      	adds	r7, #24
   195b6:	46bd      	mov	sp, r7
   195b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   195bc:	0002c7aa 	.word	0x0002c7aa
   195c0:	0002c7c3 	.word	0x0002c7c3
   195c4:	0002c7d0 	.word	0x0002c7d0
   195c8:	01000004 	.word	0x01000004
   195cc:	0002bd80 	.word	0x0002bd80

000195d0 <client_init>:

/**@brief Initialize the MQTT client structure
 */
/* STEP 3 - Define the function client_init() to initialize the MQTT client instance.  */
int client_init(struct mqtt_client *client)
{
   195d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195d4:	b09d      	sub	sp, #116	; 0x74
   195d6:	af02      	add	r7, sp, #8
	struct addrinfo hints = {
   195d8:	f107 0818 	add.w	r8, r7, #24
{
   195dc:	4604      	mov	r4, r0
	int err;
	/* Initializes the client instance. */
	mqtt_client_init(client);
   195de:	f00f fbd1 	bl	28d84 <mqtt_client_init>
	struct addrinfo hints = {
   195e2:	2250      	movs	r2, #80	; 0x50
   195e4:	2100      	movs	r1, #0
   195e6:	4640      	mov	r0, r8
   195e8:	f011 ff79 	bl	2b4de <memset>
   195ec:	2301      	movs	r3, #1
/** POSIX wrapper for @ref zsock_getaddrinfo */
static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   195ee:	4642      	mov	r2, r8
   195f0:	e9c7 3308 	strd	r3, r3, [r7, #32]
   195f4:	2100      	movs	r1, #0
   195f6:	4856      	ldr	r0, [pc, #344]	; (19750 <client_init+0x180>)
   195f8:	1d3b      	adds	r3, r7, #4
   195fa:	f00e fd6b 	bl	280d4 <zsock_getaddrinfo>
	if (err) {
   195fe:	4605      	mov	r5, r0
   19600:	b300      	cbz	r0, 19644 <client_init+0x74>
		LOG_ERR("getaddrinfo failed: %d", err);
   19602:	466c      	mov	r4, sp
   19604:	b088      	sub	sp, #32
   19606:	aa02      	add	r2, sp, #8
   19608:	4b52      	ldr	r3, [pc, #328]	; (19754 <client_init+0x184>)
   1960a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1960e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19612:	2303      	movs	r3, #3
   19614:	4850      	ldr	r0, [pc, #320]	; (19758 <client_init+0x188>)
   19616:	f842 3f10 	str.w	r3, [r2, #16]!
   1961a:	f00d ff2b 	bl	27474 <z_log_msg_static_create.constprop.0>
   1961e:	46a5      	mov	sp, r4

	/* Resolves the configured hostname and initializes the MQTT broker structure */
	err = broker_init();
	if (err) {
		LOG_ERR("Failed to initialize broker connection");
   19620:	4b4e      	ldr	r3, [pc, #312]	; (1975c <client_init+0x18c>)
		return -ECHILD;
   19622:	f06f 0509 	mvn.w	r5, #9
		LOG_ERR("Failed to initialize broker connection");
   19626:	62fb      	str	r3, [r7, #44]	; 0x2c
   19628:	2302      	movs	r3, #2
   1962a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1962e:	484a      	ldr	r0, [pc, #296]	; (19758 <client_init+0x188>)
   19630:	62bb      	str	r3, [r7, #40]	; 0x28
   19632:	f107 0228 	add.w	r2, r7, #40	; 0x28
   19636:	f00d ff1d 	bl	27474 <z_log_msg_static_create.constprop.0>
	/* We are not using TLS in Exercise 1 */
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;


	return err;
}
   1963a:	4628      	mov	r0, r5
   1963c:	376c      	adds	r7, #108	; 0x6c
   1963e:	46bd      	mov	sp, r7
   19640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("ai_addrlen = %u should be %u or %u",
   19644:	f04f 0a08 	mov.w	sl, #8
	addr = result;
   19648:	687e      	ldr	r6, [r7, #4]
			LOG_ERR("ai_addrlen = %u should be %u or %u",
   1964a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 19760 <client_init+0x190>
		addr = addr->ai_next;
   1964e:	4842      	ldr	r0, [pc, #264]	; (19758 <client_init+0x188>)
	while (addr != NULL) {
   19650:	b32e      	cbz	r6, 1969e <client_init+0xce>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
   19652:	6973      	ldr	r3, [r6, #20]
   19654:	2b08      	cmp	r3, #8
   19656:	d146      	bne.n	196e6 <client_init+0x116>
				->sin_addr.s_addr;
   19658:	69b3      	ldr	r3, [r6, #24]
			broker4->sin_addr.s_addr =
   1965a:	4942      	ldr	r1, [pc, #264]	; (19764 <client_init+0x194>)
				->sin_addr.s_addr;
   1965c:	685b      	ldr	r3, [r3, #4]
			broker4->sin_family = AF_INET;
   1965e:	2001      	movs	r0, #1
			broker4->sin_addr.s_addr =
   19660:	604b      	str	r3, [r1, #4]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
   19662:	f645 3307 	movw	r3, #23303	; 0x5b07
			broker4->sin_family = AF_INET;
   19666:	8008      	strh	r0, [r1, #0]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
   19668:	804b      	strh	r3, [r1, #2]
		union { uintptr_t x; size_t val; } parm3 = { .val = size };
		return (char *) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   1966a:	f107 0608 	add.w	r6, r7, #8
   1966e:	2310      	movs	r3, #16
   19670:	4632      	mov	r2, r6
   19672:	3104      	adds	r1, #4
   19674:	f003 fbde 	bl	1ce34 <z_impl_net_addr_ntop>
			LOG_INF("IPv4 Address found %s", (char *)(ipv4_addr));
   19678:	46e9      	mov	r9, sp
   1967a:	b088      	sub	sp, #32
   1967c:	ab02      	add	r3, sp, #8
   1967e:	4a3a      	ldr	r2, [pc, #232]	; (19768 <client_init+0x198>)
   19680:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   19684:	e9c3 2605 	strd	r2, r6, [r3, #20]
   19688:	f44f 7200 	mov.w	r2, #512	; 0x200
   1968c:	839a      	strh	r2, [r3, #28]
   1968e:	461a      	mov	r2, r3
   19690:	4b36      	ldr	r3, [pc, #216]	; (1976c <client_init+0x19c>)
   19692:	4831      	ldr	r0, [pc, #196]	; (19758 <client_init+0x188>)
   19694:	f842 3f10 	str.w	r3, [r2, #16]!
   19698:	f00d feec 	bl	27474 <z_log_msg_static_create.constprop.0>
   1969c:	46cd      	mov	sp, r9
}

/** POSIX wrapper for @ref zsock_freeaddrinfo */
static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   1969e:	6878      	ldr	r0, [r7, #4]
   196a0:	f00e fd1a 	bl	280d8 <zsock_freeaddrinfo>
	client->broker = &broker;
   196a4:	4b2f      	ldr	r3, [pc, #188]	; (19764 <client_init+0x194>)
	if (strlen(CONFIG_MQTT_CLIENT_ID) > 0) {
   196a6:	4832      	ldr	r0, [pc, #200]	; (19770 <client_init+0x1a0>)
	client->broker = &broker;
   196a8:	6363      	str	r3, [r4, #52]	; 0x34
	client->evt_cb = mqtt_evt_handler;
   196aa:	4b32      	ldr	r3, [pc, #200]	; (19774 <client_init+0x1a4>)
   196ac:	64a3      	str	r3, [r4, #72]	; 0x48
	if (strlen(CONFIG_MQTT_CLIENT_ID) > 0) {
   196ae:	f7ff fc9d 	bl	18fec <strlen>
   196b2:	b358      	cbz	r0, 1970c <client_init+0x13c>
		snprintf(client_id, sizeof(client_id), "%s",
   196b4:	492e      	ldr	r1, [pc, #184]	; (19770 <client_init+0x1a0>)
   196b6:	4830      	ldr	r0, [pc, #192]	; (19778 <client_init+0x1a8>)
   196b8:	f011 ff28 	bl	2b50c <strcpy>
	client->client_id.utf8 = client_id_get();
   196bc:	482e      	ldr	r0, [pc, #184]	; (19778 <client_init+0x1a8>)
   196be:	62e0      	str	r0, [r4, #44]	; 0x2c
	client->client_id.size = strlen(client->client_id.utf8);
   196c0:	f7ff fc94 	bl	18fec <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
   196c4:	2204      	movs	r2, #4
   196c6:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	client->rx_buf = rx_buffer;
   196ca:	4a2c      	ldr	r2, [pc, #176]	; (1977c <client_init+0x1ac>)
	client->password = NULL;
   196cc:	2300      	movs	r3, #0
	client->rx_buf = rx_buffer;
   196ce:	64e2      	str	r2, [r4, #76]	; 0x4c
	client->rx_buf_size = sizeof(rx_buffer);
   196d0:	2280      	movs	r2, #128	; 0x80
	client->tx_buf = tx_buffer;
   196d2:	492b      	ldr	r1, [pc, #172]	; (19780 <client_init+0x1b0>)
	client->user_name = NULL;
   196d4:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
	client->tx_buf_size = sizeof(tx_buffer);
   196d8:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
	client->client_id.size = strlen(client->client_id.utf8);
   196dc:	6320      	str	r0, [r4, #48]	; 0x30
	client->rx_buf_size = sizeof(rx_buffer);
   196de:	6522      	str	r2, [r4, #80]	; 0x50
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;
   196e0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return err;
   196e4:	e7a9      	b.n	1963a <client_init+0x6a>
			LOG_ERR("ai_addrlen = %u should be %u or %u",
   196e6:	46eb      	mov	fp, sp
   196e8:	b08a      	sub	sp, #40	; 0x28
   196ea:	aa02      	add	r2, sp, #8
   196ec:	e9c2 9305 	strd	r9, r3, [r2, #20]
   196f0:	2318      	movs	r3, #24
   196f2:	6213      	str	r3, [r2, #32]
   196f4:	2305      	movs	r3, #5
   196f6:	f8c2 a01c 	str.w	sl, [r2, #28]
   196fa:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   196fe:	f842 3f10 	str.w	r3, [r2, #16]!
   19702:	f00d feb7 	bl	27474 <z_log_msg_static_create.constprop.0>
   19706:	46dd      	mov	sp, fp
		addr = addr->ai_next;
   19708:	6836      	ldr	r6, [r6, #0]
   1970a:	e7a0      	b.n	1964e <client_init+0x7e>
	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
   1970c:	2117      	movs	r1, #23
   1970e:	4640      	mov	r0, r8
   19710:	4a1c      	ldr	r2, [pc, #112]	; (19784 <client_init+0x1b4>)
   19712:	f00b f883 	bl	2481c <nrf_modem_at_cmd>
	if (err) {
   19716:	b178      	cbz	r0, 19738 <client_init+0x168>
		LOG_ERR("Failed to obtain IMEI, error: %d", err);
   19718:	466e      	mov	r6, sp
   1971a:	b088      	sub	sp, #32
   1971c:	aa02      	add	r2, sp, #8
   1971e:	4b1a      	ldr	r3, [pc, #104]	; (19788 <client_init+0x1b8>)
   19720:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19724:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19728:	2303      	movs	r3, #3
   1972a:	480b      	ldr	r0, [pc, #44]	; (19758 <client_init+0x188>)
   1972c:	f842 3f10 	str.w	r3, [r2, #16]!
   19730:	f00d fea0 	bl	27474 <z_log_msg_static_create.constprop.0>
   19734:	46b5      	mov	sp, r6
		goto exit;
   19736:	e7c1      	b.n	196bc <client_init+0xec>
	imei_buf[IMEI_LEN] = '\0';
   19738:	f887 0027 	strb.w	r0, [r7, #39]	; 0x27
	snprintf(client_id, sizeof(client_id), "nrf-%.*s", IMEI_LEN, imei_buf);
   1973c:	230f      	movs	r3, #15
   1973e:	2114      	movs	r1, #20
   19740:	4a12      	ldr	r2, [pc, #72]	; (1978c <client_init+0x1bc>)
   19742:	f8cd 8000 	str.w	r8, [sp]
   19746:	480c      	ldr	r0, [pc, #48]	; (19778 <client_init+0x1a8>)
   19748:	f00c ff7c 	bl	26644 <sniprintf>
   1974c:	e7b6      	b.n	196bc <client_init+0xec>
   1974e:	bf00      	nop
   19750:	0002c7e5 	.word	0x0002c7e5
   19754:	0002c7f8 	.word	0x0002c7f8
   19758:	0002bd80 	.word	0x0002bd80
   1975c:	0002c80f 	.word	0x0002c80f
   19760:	0002c84c 	.word	0x0002c84c
   19764:	2000d948 	.word	0x2000d948
   19768:	0002c836 	.word	0x0002c836
   1976c:	01000003 	.word	0x01000003
   19770:	0002e982 	.word	0x0002e982
   19774:	00019285 	.word	0x00019285
   19778:	2000d966 	.word	0x2000d966
   1977c:	2000da7a 	.word	0x2000da7a
   19780:	2000d9fa 	.word	0x2000d9fa
   19784:	0002c86f 	.word	0x0002c86f
   19788:	0002c877 	.word	0x0002c877
   1978c:	0002c898 	.word	0x0002c898

00019790 <button_handler.part.0>:
	k_sem_take(&lte_connected, K_FOREVER);
	LOG_INF("Connected to LTE network");
	dk_set_led_on(DK_LED2);
}

static void button_handler(uint32_t button_state, uint32_t has_changed)
   19790:	b598      	push	{r3, r4, r7, lr}
{
	switch (has_changed) {
	case DK_BTN1_MSK:
		/* STEP 7.2 - When button 1 is pressed, call data_publish() to publish a message */
		if (button_state & DK_BTN1_MSK){	
			int err = data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE,
   19792:	2101      	movs	r1, #1
static void button_handler(uint32_t button_state, uint32_t has_changed)
   19794:	af00      	add	r7, sp, #0
			int err = data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE,
   19796:	2317      	movs	r3, #23
   19798:	4a0a      	ldr	r2, [pc, #40]	; (197c4 <button_handler.part.0+0x34>)
   1979a:	480b      	ldr	r0, [pc, #44]	; (197c8 <button_handler.part.0+0x38>)
   1979c:	f7ff fed4 	bl	19548 <data_publish>
				   CONFIG_BUTTON_EVENT_PUBLISH_MSG, sizeof(CONFIG_BUTTON_EVENT_PUBLISH_MSG)-1);

			if (err) {
   197a0:	b170      	cbz	r0, 197c0 <button_handler.part.0+0x30>
				LOG_INF("Failed to send message, %d", err);
   197a2:	466c      	mov	r4, sp
   197a4:	b088      	sub	sp, #32
   197a6:	466a      	mov	r2, sp
   197a8:	4b08      	ldr	r3, [pc, #32]	; (197cc <button_handler.part.0+0x3c>)
   197aa:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   197ae:	e9c2 3005 	strd	r3, r0, [r2, #20]
   197b2:	2303      	movs	r3, #3
   197b4:	4806      	ldr	r0, [pc, #24]	; (197d0 <button_handler.part.0+0x40>)
   197b6:	f842 3f10 	str.w	r3, [r2, #16]!
   197ba:	f00d fe6a 	bl	27492 <z_log_msg_static_create.constprop.0>
   197be:	46a5      	mov	sp, r4
				return;	
			}
		}
		break;
	}
}
   197c0:	46bd      	mov	sp, r7
   197c2:	bd98      	pop	{r3, r4, r7, pc}
   197c4:	0002c8a1 	.word	0x0002c8a1
   197c8:	2000d068 	.word	0x2000d068
   197cc:	0002c8b9 	.word	0x0002c8b9
   197d0:	0002bd80 	.word	0x0002bd80

000197d4 <lte_handler>:
{
   197d4:	b598      	push	{r3, r4, r7, lr}
     switch (evt->type) {
   197d6:	7803      	ldrb	r3, [r0, #0]
{
   197d8:	af00      	add	r7, sp, #0
     switch (evt->type) {
   197da:	b11b      	cbz	r3, 197e4 <lte_handler+0x10>
   197dc:	2b03      	cmp	r3, #3
   197de:	d01f      	beq.n	19820 <lte_handler+0x4c>
}
   197e0:	46bd      	mov	sp, r7
   197e2:	bd98      	pop	{r3, r4, r7, pc}
        if ((evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   197e4:	7a03      	ldrb	r3, [r0, #8]
   197e6:	2b01      	cmp	r3, #1
   197e8:	d018      	beq.n	1981c <lte_handler+0x48>
   197ea:	2b05      	cmp	r3, #5
   197ec:	d1f8      	bne.n	197e0 <lte_handler+0xc>
		LOG_INF("Network registration status: %s",
   197ee:	4b19      	ldr	r3, [pc, #100]	; (19854 <lte_handler+0x80>)
   197f0:	466c      	mov	r4, sp
   197f2:	b088      	sub	sp, #32
   197f4:	466a      	mov	r2, sp
   197f6:	4918      	ldr	r1, [pc, #96]	; (19858 <lte_handler+0x84>)
   197f8:	4818      	ldr	r0, [pc, #96]	; (1985c <lte_handler+0x88>)
   197fa:	e9c2 1305 	strd	r1, r3, [r2, #20]
   197fe:	f44f 7300 	mov.w	r3, #512	; 0x200
   19802:	8393      	strh	r3, [r2, #28]
   19804:	4b16      	ldr	r3, [pc, #88]	; (19860 <lte_handler+0x8c>)
   19806:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   1980a:	f842 3f10 	str.w	r3, [r2, #16]!
   1980e:	f00d fe40 	bl	27492 <z_log_msg_static_create.constprop.0>
   19812:	46a5      	mov	sp, r4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   19814:	4813      	ldr	r0, [pc, #76]	; (19864 <lte_handler+0x90>)
   19816:	f00b fe45 	bl	254a4 <z_impl_k_sem_give>
}
   1981a:	e7e1      	b.n	197e0 <lte_handler+0xc>
   1981c:	4b12      	ldr	r3, [pc, #72]	; (19868 <lte_handler+0x94>)
   1981e:	e7e7      	b.n	197f0 <lte_handler+0x1c>
		LOG_INF("RRC mode: %s", evt->rrc_mode == LTE_LC_RRC_MODE_CONNECTED ? 
   19820:	7a01      	ldrb	r1, [r0, #8]
   19822:	4a12      	ldr	r2, [pc, #72]	; (1986c <lte_handler+0x98>)
   19824:	4b12      	ldr	r3, [pc, #72]	; (19870 <lte_handler+0x9c>)
   19826:	466c      	mov	r4, sp
   19828:	b088      	sub	sp, #32
   1982a:	2901      	cmp	r1, #1
   1982c:	bf08      	it	eq
   1982e:	4613      	moveq	r3, r2
   19830:	466a      	mov	r2, sp
   19832:	4910      	ldr	r1, [pc, #64]	; (19874 <lte_handler+0xa0>)
   19834:	4809      	ldr	r0, [pc, #36]	; (1985c <lte_handler+0x88>)
   19836:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1983a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1983e:	8393      	strh	r3, [r2, #28]
   19840:	4b07      	ldr	r3, [pc, #28]	; (19860 <lte_handler+0x8c>)
   19842:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   19846:	f842 3f10 	str.w	r3, [r2, #16]!
   1984a:	f00d fe22 	bl	27492 <z_log_msg_static_create.constprop.0>
   1984e:	46a5      	mov	sp, r4
}
   19850:	e7c6      	b.n	197e0 <lte_handler+0xc>
   19852:	bf00      	nop
   19854:	0002c8ed 	.word	0x0002c8ed
   19858:	0002c910 	.word	0x0002c910
   1985c:	0002bd80 	.word	0x0002bd80
   19860:	01000003 	.word	0x01000003
   19864:	2000c8fc 	.word	0x2000c8fc
   19868:	0002c8d4 	.word	0x0002c8d4
   1986c:	0002c901 	.word	0x0002c901
   19870:	0002c90b 	.word	0x0002c90b
   19874:	0002c930 	.word	0x0002c930

00019878 <main>:

void main(void)
{
   19878:	b5f0      	push	{r4, r5, r6, r7, lr}
   1987a:	b087      	sub	sp, #28
   1987c:	af00      	add	r7, sp, #0
	return z_impl_k_sleep(timeout);
   1987e:	2100      	movs	r1, #0
   19880:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   19884:	f00c fabc 	bl	25e00 <z_impl_k_sleep>
	uint32_t connect_attempt = 0;

	
	k_msleep(SLEEP_TIME_MS * 10);

	if (dk_leds_init() != 0) {
   19888:	f005 fe1a 	bl	1f4c0 <dk_leds_init>
   1988c:	b150      	cbz	r0, 198a4 <main+0x2c>
		LOG_ERR("Failed to initialize the LED library");
   1988e:	4b84      	ldr	r3, [pc, #528]	; (19aa0 <main+0x228>)
   19890:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19894:	617b      	str	r3, [r7, #20]
   19896:	2302      	movs	r3, #2
   19898:	4882      	ldr	r0, [pc, #520]	; (19aa4 <main+0x22c>)
   1989a:	613b      	str	r3, [r7, #16]
   1989c:	f107 0210 	add.w	r2, r7, #16
   198a0:	f00d fdf7 	bl	27492 <z_log_msg_static_create.constprop.0>
	LOG_INF("Connecting to LTE network"); 
   198a4:	466d      	mov	r5, sp
   198a6:	2402      	movs	r4, #2
   198a8:	4b7f      	ldr	r3, [pc, #508]	; (19aa8 <main+0x230>)
   198aa:	487e      	ldr	r0, [pc, #504]	; (19aa4 <main+0x22c>)
   198ac:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   198b0:	617b      	str	r3, [r7, #20]
   198b2:	613c      	str	r4, [r7, #16]
   198b4:	f107 0210 	add.w	r2, r7, #16
   198b8:	f00d fdeb 	bl	27492 <z_log_msg_static_create.constprop.0>
	int err = lte_lc_init_and_connect_async(lte_handler);
   198bc:	487b      	ldr	r0, [pc, #492]	; (19aac <main+0x234>)
   198be:	f010 f9d0 	bl	29c62 <lte_lc_init_and_connect_async>
	if (err) {
   198c2:	2800      	cmp	r0, #0
   198c4:	d034      	beq.n	19930 <main+0xb8>
		LOG_INF("Modem could not be configured, error: %d", err);
   198c6:	b088      	sub	sp, #32
   198c8:	466a      	mov	r2, sp
   198ca:	4b79      	ldr	r3, [pc, #484]	; (19ab0 <main+0x238>)
   198cc:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   198d0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   198d4:	2303      	movs	r3, #3
   198d6:	4873      	ldr	r0, [pc, #460]	; (19aa4 <main+0x22c>)
   198d8:	f842 3f10 	str.w	r3, [r2, #16]!
   198dc:	f00d fdd9 	bl	27492 <z_log_msg_static_create.constprop.0>
   198e0:	46ad      	mov	sp, r5
	}

	modem_configure();

	if (dk_buttons_init(button_handler) != 0) {
   198e2:	4874      	ldr	r0, [pc, #464]	; (19ab4 <main+0x23c>)
   198e4:	f005 fe26 	bl	1f534 <dk_buttons_init>
   198e8:	b150      	cbz	r0, 19900 <main+0x88>
		LOG_ERR("Failed to initialize the buttons library");
   198ea:	4b73      	ldr	r3, [pc, #460]	; (19ab8 <main+0x240>)
   198ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   198f0:	617b      	str	r3, [r7, #20]
   198f2:	2302      	movs	r3, #2
   198f4:	486b      	ldr	r0, [pc, #428]	; (19aa4 <main+0x22c>)
   198f6:	613b      	str	r3, [r7, #16]
   198f8:	f107 0210 	add.w	r2, r7, #16
   198fc:	f00d fdc9 	bl	27492 <z_log_msg_static_create.constprop.0>
	}

	err = client_init(&client);
   19900:	486e      	ldr	r0, [pc, #440]	; (19abc <main+0x244>)
   19902:	f7ff fe65 	bl	195d0 <client_init>
	if (err) {
   19906:	4604      	mov	r4, r0
   19908:	2800      	cmp	r0, #0
   1990a:	d051      	beq.n	199b0 <main+0x138>
		LOG_ERR("Failed to initialize MQTT client: %d", err);
   1990c:	466d      	mov	r5, sp
   1990e:	b088      	sub	sp, #32
   19910:	466a      	mov	r2, sp
   19912:	4b6b      	ldr	r3, [pc, #428]	; (19ac0 <main+0x248>)
   19914:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19918:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1991c:	2303      	movs	r3, #3
   1991e:	4861      	ldr	r0, [pc, #388]	; (19aa4 <main+0x22c>)
   19920:	f842 3f10 	str.w	r3, [r2, #16]!
   19924:	f00d fdb5 	bl	27492 <z_log_msg_static_create.constprop.0>
   19928:	46ad      	mov	sp, r5
	err = mqtt_disconnect(&client);
	if (err) {
		LOG_ERR("Could not disconnect MQTT client: %d", err);
	}
	goto do_connect;
   1992a:	371c      	adds	r7, #28
   1992c:	46bd      	mov	sp, r7
   1992e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   19930:	f04f 32ff 	mov.w	r2, #4294967295
   19934:	f04f 33ff 	mov.w	r3, #4294967295
   19938:	4862      	ldr	r0, [pc, #392]	; (19ac4 <main+0x24c>)
   1993a:	f00b fdd9 	bl	254f0 <z_impl_k_sem_take>
	LOG_INF("Connected to LTE network");
   1993e:	4b62      	ldr	r3, [pc, #392]	; (19ac8 <main+0x250>)
   19940:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   19944:	e9c7 4304 	strd	r4, r3, [r7, #16]
   19948:	4856      	ldr	r0, [pc, #344]	; (19aa4 <main+0x22c>)
   1994a:	f107 0210 	add.w	r2, r7, #16
   1994e:	f00d fda0 	bl	27492 <z_log_msg_static_create.constprop.0>
	dk_set_led_on(DK_LED2);
   19952:	2001      	movs	r0, #1
   19954:	f00f fff2 	bl	2993c <dk_set_led_on>
   19958:	e7c3      	b.n	198e2 <main+0x6a>
	if (connect_attempt++ > 0) {
   1995a:	3401      	adds	r4, #1
   1995c:	d014      	beq.n	19988 <main+0x110>
		LOG_INF("Reconnecting in %d seconds...",
   1995e:	466e      	mov	r6, sp
   19960:	b088      	sub	sp, #32
   19962:	466a      	mov	r2, sp
   19964:	4b59      	ldr	r3, [pc, #356]	; (19acc <main+0x254>)
   19966:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1996a:	6153      	str	r3, [r2, #20]
   1996c:	233c      	movs	r3, #60	; 0x3c
   1996e:	6193      	str	r3, [r2, #24]
   19970:	2303      	movs	r3, #3
   19972:	484c      	ldr	r0, [pc, #304]	; (19aa4 <main+0x22c>)
   19974:	f842 3f10 	str.w	r3, [r2, #16]!
   19978:	f00d fd8b 	bl	27492 <z_log_msg_static_create.constprop.0>
   1997c:	46b5      	mov	sp, r6
	return z_impl_k_sleep(timeout);
   1997e:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
   19982:	2100      	movs	r1, #0
   19984:	f00c fa3c 	bl	25e00 <z_impl_k_sleep>
	err = mqtt_connect(&client);
   19988:	484c      	ldr	r0, [pc, #304]	; (19abc <main+0x244>)
   1998a:	f00f fa12 	bl	28db2 <mqtt_connect>
	if (err) {
   1998e:	b188      	cbz	r0, 199b4 <main+0x13c>
		LOG_ERR("Error in mqtt_connect: %d", err);
   19990:	466e      	mov	r6, sp
   19992:	b088      	sub	sp, #32
   19994:	466a      	mov	r2, sp
   19996:	4b4e      	ldr	r3, [pc, #312]	; (19ad0 <main+0x258>)
		LOG_ERR("Could not disconnect MQTT client: %d", err);
   19998:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1999c:	2303      	movs	r3, #3
   1999e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   199a2:	4840      	ldr	r0, [pc, #256]	; (19aa4 <main+0x22c>)
   199a4:	f842 3f10 	str.w	r3, [r2, #16]!
   199a8:	f00d fd73 	bl	27492 <z_log_msg_static_create.constprop.0>
   199ac:	46b5      	mov	sp, r6
   199ae:	e7d4      	b.n	1995a <main+0xe2>
	err = fds_init(&client,&fds);
   199b0:	4d48      	ldr	r5, [pc, #288]	; (19ad4 <main+0x25c>)
   199b2:	e7e9      	b.n	19988 <main+0x110>
   199b4:	4629      	mov	r1, r5
   199b6:	4841      	ldr	r0, [pc, #260]	; (19abc <main+0x244>)
   199b8:	f00d fd5f 	bl	2747a <fds_init>
	if (err) {
   199bc:	bb88      	cbnz	r0, 19a22 <main+0x1aa>
		err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
   199be:	4e3f      	ldr	r6, [pc, #252]	; (19abc <main+0x244>)
   199c0:	4630      	mov	r0, r6
   199c2:	f00f fb3f 	bl	29044 <mqtt_keepalive_time_left>
   199c6:	4602      	mov	r2, r0
		union { uintptr_t x; int val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   199c8:	2101      	movs	r1, #1
   199ca:	4628      	mov	r0, r5
   199cc:	f00e fc7b 	bl	282c6 <z_impl_zsock_poll>
		if (err < 0) {
   199d0:	2800      	cmp	r0, #0
   199d2:	da36      	bge.n	19a42 <main+0x1ca>
			LOG_ERR("Error in poll(): %d", errno);
   199d4:	f00e fd1b 	bl	2840e <__errno>
   199d8:	466e      	mov	r6, sp
   199da:	b088      	sub	sp, #32
   199dc:	6803      	ldr	r3, [r0, #0]
   199de:	466a      	mov	r2, sp
   199e0:	493d      	ldr	r1, [pc, #244]	; (19ad8 <main+0x260>)
   199e2:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Error in mqtt_live: %d", err);
   199e6:	2303      	movs	r3, #3
   199e8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   199ec:	482d      	ldr	r0, [pc, #180]	; (19aa4 <main+0x22c>)
   199ee:	f842 3f10 	str.w	r3, [r2, #16]!
   199f2:	f00d fd4e 	bl	27492 <z_log_msg_static_create.constprop.0>
   199f6:	46b5      	mov	sp, r6
	LOG_INF("Disconnecting MQTT client");
   199f8:	466e      	mov	r6, sp
   199fa:	4b38      	ldr	r3, [pc, #224]	; (19adc <main+0x264>)
   199fc:	4829      	ldr	r0, [pc, #164]	; (19aa4 <main+0x22c>)
   199fe:	617b      	str	r3, [r7, #20]
   19a00:	2302      	movs	r3, #2
   19a02:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   19a06:	613b      	str	r3, [r7, #16]
   19a08:	f107 0210 	add.w	r2, r7, #16
   19a0c:	f00d fd41 	bl	27492 <z_log_msg_static_create.constprop.0>
	err = mqtt_disconnect(&client);
   19a10:	482a      	ldr	r0, [pc, #168]	; (19abc <main+0x244>)
   19a12:	f00f fa7a 	bl	28f0a <mqtt_disconnect>
	if (err) {
   19a16:	2800      	cmp	r0, #0
   19a18:	d09f      	beq.n	1995a <main+0xe2>
		LOG_ERR("Could not disconnect MQTT client: %d", err);
   19a1a:	b088      	sub	sp, #32
   19a1c:	466a      	mov	r2, sp
   19a1e:	4b30      	ldr	r3, [pc, #192]	; (19ae0 <main+0x268>)
   19a20:	e7ba      	b.n	19998 <main+0x120>
		LOG_ERR("Error in fds_init: %d", err);
   19a22:	466c      	mov	r4, sp
   19a24:	b088      	sub	sp, #32
   19a26:	466a      	mov	r2, sp
   19a28:	4b2e      	ldr	r3, [pc, #184]	; (19ae4 <main+0x26c>)
   19a2a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19a2e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19a32:	2303      	movs	r3, #3
   19a34:	481b      	ldr	r0, [pc, #108]	; (19aa4 <main+0x22c>)
   19a36:	f842 3f10 	str.w	r3, [r2, #16]!
   19a3a:	f00d fd2a 	bl	27492 <z_log_msg_static_create.constprop.0>
   19a3e:	46a5      	mov	sp, r4
		return;
   19a40:	e773      	b.n	1992a <main+0xb2>
		err = mqtt_live(&client);
   19a42:	4630      	mov	r0, r6
   19a44:	f00f fad9 	bl	28ffa <mqtt_live>
		if ((err != 0) && (err != -EAGAIN)) {
   19a48:	b148      	cbz	r0, 19a5e <main+0x1e6>
   19a4a:	f110 0f0b 	cmn.w	r0, #11
   19a4e:	d006      	beq.n	19a5e <main+0x1e6>
			LOG_ERR("Error in mqtt_live: %d", err);
   19a50:	466e      	mov	r6, sp
   19a52:	b088      	sub	sp, #32
   19a54:	466a      	mov	r2, sp
   19a56:	4b24      	ldr	r3, [pc, #144]	; (19ae8 <main+0x270>)
   19a58:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19a5c:	e7c3      	b.n	199e6 <main+0x16e>
		if ((fds.revents & POLLIN) == POLLIN) {
   19a5e:	88eb      	ldrh	r3, [r5, #6]
   19a60:	07d9      	lsls	r1, r3, #31
   19a62:	d508      	bpl.n	19a76 <main+0x1fe>
			err = mqtt_input(&client);
   19a64:	4630      	mov	r0, r6
   19a66:	f00f fb04 	bl	29072 <mqtt_input>
			if (err != 0) {
   19a6a:	b120      	cbz	r0, 19a76 <main+0x1fe>
				LOG_ERR("Error in mqtt_input: %d", err);
   19a6c:	466e      	mov	r6, sp
   19a6e:	b088      	sub	sp, #32
   19a70:	466a      	mov	r2, sp
   19a72:	4b1e      	ldr	r3, [pc, #120]	; (19aec <main+0x274>)
   19a74:	e7f0      	b.n	19a58 <main+0x1e0>
		if ((fds.revents & POLLERR) == POLLERR) {
   19a76:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   19a7a:	071a      	lsls	r2, r3, #28
   19a7c:	d50b      	bpl.n	19a96 <main+0x21e>
			LOG_ERR("POLLERR");
   19a7e:	4b1c      	ldr	r3, [pc, #112]	; (19af0 <main+0x278>)
			LOG_ERR("POLLNVAL");
   19a80:	617b      	str	r3, [r7, #20]
   19a82:	2302      	movs	r3, #2
   19a84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19a88:	4806      	ldr	r0, [pc, #24]	; (19aa4 <main+0x22c>)
   19a8a:	613b      	str	r3, [r7, #16]
   19a8c:	f107 0210 	add.w	r2, r7, #16
   19a90:	f00d fcff 	bl	27492 <z_log_msg_static_create.constprop.0>
   19a94:	e7b0      	b.n	199f8 <main+0x180>
		if ((fds.revents & POLLNVAL) == POLLNVAL) {
   19a96:	069b      	lsls	r3, r3, #26
   19a98:	d592      	bpl.n	199c0 <main+0x148>
			LOG_ERR("POLLNVAL");
   19a9a:	4b16      	ldr	r3, [pc, #88]	; (19af4 <main+0x27c>)
   19a9c:	e7f0      	b.n	19a80 <main+0x208>
   19a9e:	bf00      	nop
   19aa0:	0002c93d 	.word	0x0002c93d
   19aa4:	0002bd80 	.word	0x0002bd80
   19aa8:	0002c962 	.word	0x0002c962
   19aac:	000197d5 	.word	0x000197d5
   19ab0:	0002c97c 	.word	0x0002c97c
   19ab4:	00027499 	.word	0x00027499
   19ab8:	0002c9be 	.word	0x0002c9be
   19abc:	2000d068 	.word	0x2000d068
   19ac0:	0002c9e7 	.word	0x0002c9e7
   19ac4:	2000c8fc 	.word	0x2000c8fc
   19ac8:	0002c9a5 	.word	0x0002c9a5
   19acc:	0002ca0c 	.word	0x0002ca0c
   19ad0:	0002ca2a 	.word	0x0002ca2a
   19ad4:	2000d060 	.word	0x2000d060
   19ad8:	0002ca5a 	.word	0x0002ca5a
   19adc:	0002caae 	.word	0x0002caae
   19ae0:	0002cac8 	.word	0x0002cac8
   19ae4:	0002ca44 	.word	0x0002ca44
   19ae8:	0002ca6e 	.word	0x0002ca6e
   19aec:	0002ca85 	.word	0x0002ca85
   19af0:	0002ca9d 	.word	0x0002ca9d
   19af4:	0002caa5 	.word	0x0002caa5

00019af8 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   19af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19afc:	b091      	sub	sp, #68	; 0x44
   19afe:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   19b00:	f002 0304 	and.w	r3, r2, #4
   19b04:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   19b06:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   19b0a:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   19b0c:	0784      	lsls	r4, r0, #30
{
   19b0e:	4605      	mov	r5, r0
   19b10:	460e      	mov	r6, r1
   19b12:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   19b16:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   19b18:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   19b1a:	f040 81bd 	bne.w	19e98 <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   19b1e:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   19b20:	b130      	cbz	r0, 19b30 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   19b22:	2907      	cmp	r1, #7
   19b24:	d809      	bhi.n	19b3a <cbvprintf_package+0x42>
		return -ENOSPC;
   19b26:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   19b2a:	b011      	add	sp, #68	; 0x44
   19b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   19b30:	f001 0607 	and.w	r6, r1, #7
   19b34:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   19b36:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   19b3a:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   19b3c:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
   19b40:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
   19b44:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   19b46:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   19b4a:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   19b4c:	9301      	str	r3, [sp, #4]
	bool parsing = false;
   19b4e:	46cb      	mov	fp, r9
	size = sizeof(char *);
   19b50:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   19b52:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
   19b56:	b10d      	cbz	r5, 19b5c <cbvprintf_package+0x64>
				*(const char **)buf = s;
   19b58:	9a00      	ldr	r2, [sp, #0]
   19b5a:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   19b5c:	9805      	ldr	r0, [sp, #20]
   19b5e:	2800      	cmp	r0, #0
   19b60:	f300 80eb 	bgt.w	19d3a <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   19b64:	4899      	ldr	r0, [pc, #612]	; (19dcc <cbvprintf_package+0x2d4>)
   19b66:	9a00      	ldr	r2, [sp, #0]
   19b68:	4282      	cmp	r2, r0
   19b6a:	d303      	bcc.n	19b74 <cbvprintf_package+0x7c>
   19b6c:	4898      	ldr	r0, [pc, #608]	; (19dd0 <cbvprintf_package+0x2d8>)
   19b6e:	4282      	cmp	r2, r0
   19b70:	f0c0 80e3 	bcc.w	19d3a <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   19b74:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   19b76:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   19b7a:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   19b7c:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   19b80:	f100 8106 	bmi.w	19d90 <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   19b84:	2f0f      	cmp	r7, #15
   19b86:	f200 80b4 	bhi.w	19cf2 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
   19b8a:	2d00      	cmp	r5, #0
   19b8c:	f000 8108 	beq.w	19da0 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
   19b90:	f107 0240 	add.w	r2, r7, #64	; 0x40
   19b94:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   19b98:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   19b9a:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   19b9e:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   19ba2:	9804      	ldr	r0, [sp, #16]
   19ba4:	3001      	adds	r0, #1
   19ba6:	9004      	str	r0, [sp, #16]
   19ba8:	e0ea      	b.n	19d80 <cbvprintf_package+0x288>
			switch (*fmt) {
   19baa:	287a      	cmp	r0, #122	; 0x7a
   19bac:	d860      	bhi.n	19c70 <cbvprintf_package+0x178>
   19bae:	284b      	cmp	r0, #75	; 0x4b
   19bb0:	d80e      	bhi.n	19bd0 <cbvprintf_package+0xd8>
   19bb2:	2847      	cmp	r0, #71	; 0x47
   19bb4:	d85c      	bhi.n	19c70 <cbvprintf_package+0x178>
   19bb6:	2829      	cmp	r0, #41	; 0x29
   19bb8:	d82f      	bhi.n	19c1a <cbvprintf_package+0x122>
   19bba:	2825      	cmp	r0, #37	; 0x25
   19bbc:	d055      	beq.n	19c6a <cbvprintf_package+0x172>
   19bbe:	d857      	bhi.n	19c70 <cbvprintf_package+0x178>
   19bc0:	2820      	cmp	r0, #32
   19bc2:	d07d      	beq.n	19cc0 <cbvprintf_package+0x1c8>
   19bc4:	3823      	subs	r0, #35	; 0x23
   19bc6:	f1d0 0b00 	rsbs	fp, r0, #0
   19bca:	eb4b 0b00 	adc.w	fp, fp, r0
   19bce:	e077      	b.n	19cc0 <cbvprintf_package+0x1c8>
   19bd0:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   19bd4:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   19bd8:	d84a      	bhi.n	19c70 <cbvprintf_package+0x178>
   19bda:	e8df f00c 	tbb	[pc, ip]
   19bde:	4971      	.short	0x4971
   19be0:	49494949 	.word	0x49494949
   19be4:	49494949 	.word	0x49494949
   19be8:	494c4949 	.word	0x494c4949
   19bec:	49494949 	.word	0x49494949
   19bf0:	5a494949 	.word	0x5a494949
   19bf4:	5a4c4c49 	.word	0x5a4c4c49
   19bf8:	4c715a5a 	.word	0x4c715a5a
   19bfc:	4971496e 	.word	0x4971496e
   19c00:	49184c18 	.word	0x49184c18
   19c04:	4c808349 	.word	0x4c808349
   19c08:	494c4949 	.word	0x494c4949
   19c0c:	80          	.byte	0x80
   19c0d:	00          	.byte	0x00
   19c0e:	2000      	movs	r0, #0
   19c10:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   19c14:	f04f 0a04 	mov.w	sl, #4
   19c18:	e039      	b.n	19c8e <cbvprintf_package+0x196>
   19c1a:	2201      	movs	r2, #1
			switch (*fmt) {
   19c1c:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   19c20:	fa5f fc8c 	uxtb.w	ip, ip
   19c24:	fa02 fc0c 	lsl.w	ip, r2, ip
   19c28:	ea1c 0f0e 	tst.w	ip, lr
   19c2c:	d148      	bne.n	19cc0 <cbvprintf_package+0x1c8>
   19c2e:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   19c32:	d12e      	bne.n	19c92 <cbvprintf_package+0x19a>
   19c34:	ea1c 0b02 	ands.w	fp, ip, r2
   19c38:	d042      	beq.n	19cc0 <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
   19c3a:	3c01      	subs	r4, #1
   19c3c:	4454      	add	r4, sl
   19c3e:	f1ca 0c00 	rsb	ip, sl, #0
   19c42:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   19c46:	2d00      	cmp	r5, #0
   19c48:	d061      	beq.n	19d0e <cbvprintf_package+0x216>
   19c4a:	eba3 0c05 	sub.w	ip, r3, r5
   19c4e:	44a4      	add	ip, r4
   19c50:	4566      	cmp	r6, ip
   19c52:	f4ff af68 	bcc.w	19b26 <cbvprintf_package+0x2e>
		if (is_str_arg) {
   19c56:	2800      	cmp	r0, #0
   19c58:	d168      	bne.n	19d2c <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
   19c5a:	2b04      	cmp	r3, #4
   19c5c:	d147      	bne.n	19cee <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
   19c5e:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   19c62:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   19c64:	2304      	movs	r3, #4
   19c66:	3404      	adds	r4, #4
   19c68:	e02a      	b.n	19cc0 <cbvprintf_package+0x1c8>
				arg_idx--;
   19c6a:	9a01      	ldr	r2, [sp, #4]
   19c6c:	3a01      	subs	r2, #1
   19c6e:	9201      	str	r2, [sp, #4]
				parsing = false;
   19c70:	f04f 0b00 	mov.w	fp, #0
				continue;
   19c74:	e024      	b.n	19cc0 <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
   19c76:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   19c7a:	286c      	cmp	r0, #108	; 0x6c
   19c7c:	d134      	bne.n	19ce8 <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
   19c7e:	2000      	movs	r0, #0
   19c80:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
   19c84:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   19c86:	2b6c      	cmp	r3, #108	; 0x6c
   19c88:	d1c4      	bne.n	19c14 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
   19c8a:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   19c8e:	4653      	mov	r3, sl
   19c90:	e7d3      	b.n	19c3a <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
   19c92:	f108 0807 	add.w	r8, r8, #7
   19c96:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   19c9a:	3407      	adds	r4, #7
   19c9c:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
   19ca0:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
   19ca4:	b135      	cbz	r5, 19cb4 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
   19ca6:	9806      	ldr	r0, [sp, #24]
   19ca8:	4420      	add	r0, r4
   19caa:	42b0      	cmp	r0, r6
   19cac:	f63f af3b 	bhi.w	19b26 <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
   19cb0:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
   19cb4:	f04f 0b00 	mov.w	fp, #0
				buf += size;
   19cb8:	3408      	adds	r4, #8
			switch (*fmt) {
   19cba:	f04f 0a08 	mov.w	sl, #8
   19cbe:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   19cc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   19cc4:	2800      	cmp	r0, #0
   19cc6:	d078      	beq.n	19dba <cbvprintf_package+0x2c2>
			if (!parsing) {
   19cc8:	f1bb 0f00 	cmp.w	fp, #0
   19ccc:	f47f af6d 	bne.w	19baa <cbvprintf_package+0xb2>
				if (*fmt == '%') {
   19cd0:	2825      	cmp	r0, #37	; 0x25
   19cd2:	d1f5      	bne.n	19cc0 <cbvprintf_package+0x1c8>
					parsing = true;
   19cd4:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
   19cd8:	9b01      	ldr	r3, [sp, #4]
   19cda:	3301      	adds	r3, #1
   19cdc:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
   19cde:	f04f 0a04 	mov.w	sl, #4
   19ce2:	e7ec      	b.n	19cbe <cbvprintf_package+0x1c6>
			switch (*fmt) {
   19ce4:	4658      	mov	r0, fp
   19ce6:	e793      	b.n	19c10 <cbvprintf_package+0x118>
   19ce8:	2000      	movs	r0, #0
				parsing = false;
   19cea:	4683      	mov	fp, r0
   19cec:	e7a5      	b.n	19c3a <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
   19cee:	2b08      	cmp	r3, #8
   19cf0:	d002      	beq.n	19cf8 <cbvprintf_package+0x200>
					return -EINVAL;
   19cf2:	f06f 0015 	mvn.w	r0, #21
   19cf6:	e718      	b.n	19b2a <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
   19cf8:	f108 0807 	add.w	r8, r8, #7
   19cfc:	f028 0807 	bic.w	r8, r8, #7
   19d00:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   19d04:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   19d08:	2308      	movs	r3, #8
   19d0a:	3408      	adds	r4, #8
   19d0c:	e7d8      	b.n	19cc0 <cbvprintf_package+0x1c8>
		if (is_str_arg) {
   19d0e:	b968      	cbnz	r0, 19d2c <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
   19d10:	2b04      	cmp	r3, #4
   19d12:	d102      	bne.n	19d1a <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
   19d14:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   19d18:	e7a4      	b.n	19c64 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
   19d1a:	2b08      	cmp	r3, #8
   19d1c:	d1e9      	bne.n	19cf2 <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
   19d1e:	f108 0807 	add.w	r8, r8, #7
   19d22:	f028 0807 	bic.w	r8, r8, #7
   19d26:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   19d2a:	e7ed      	b.n	19d08 <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   19d2c:	9a05      	ldr	r2, [sp, #20]
   19d2e:	3a01      	subs	r2, #1
   19d30:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   19d32:	f858 2b04 	ldr.w	r2, [r8], #4
   19d36:	9200      	str	r2, [sp, #0]
   19d38:	e70d      	b.n	19b56 <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
   19d3a:	9a03      	ldr	r2, [sp, #12]
   19d3c:	0790      	lsls	r0, r2, #30
   19d3e:	d520      	bpl.n	19d82 <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   19d40:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   19d44:	eba4 0e05 	sub.w	lr, r4, r5
   19d48:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   19d4c:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   19d50:	d2cf      	bcs.n	19cf2 <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   19d52:	2f0f      	cmp	r7, #15
   19d54:	d8cd      	bhi.n	19cf2 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
   19d56:	b1f5      	cbz	r5, 19d96 <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
   19d58:	f107 0240 	add.w	r2, r7, #64	; 0x40
   19d5c:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   19d60:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   19d62:	b2c0      	uxtb	r0, r0
   19d64:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   19d68:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   19d6c:	f1bc 0f00 	cmp.w	ip, #0
   19d70:	f43f af17 	beq.w	19ba2 <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   19d74:	f060 007f 	orn	r0, r0, #127	; 0x7f
   19d78:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   19d7c:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   19d80:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   19d82:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
   19d86:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
   19d8a:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   19d8c:	9206      	str	r2, [sp, #24]
   19d8e:	e797      	b.n	19cc0 <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   19d90:	f04f 0c00 	mov.w	ip, #0
   19d94:	e7da      	b.n	19d4c <cbvprintf_package+0x254>
				} else if (is_ro) {
   19d96:	f1bc 0f00 	cmp.w	ip, #0
   19d9a:	d001      	beq.n	19da0 <cbvprintf_package+0x2a8>
					len += 1;
   19d9c:	3601      	adds	r6, #1
   19d9e:	e7ef      	b.n	19d80 <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
   19da0:	9802      	ldr	r0, [sp, #8]
					len += 2;
   19da2:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   19da4:	2800      	cmp	r0, #0
   19da6:	d1eb      	bne.n	19d80 <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
   19da8:	9800      	ldr	r0, [sp, #0]
   19daa:	e9cd 3106 	strd	r3, r1, [sp, #24]
   19dae:	f7ff f91d 	bl	18fec <strlen>
   19db2:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   19db6:	4406      	add	r6, r0
   19db8:	e7e2      	b.n	19d80 <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
   19dba:	1b63      	subs	r3, r4, r5
   19dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   19dc0:	d297      	bcs.n	19cf2 <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
   19dc2:	b93d      	cbnz	r5, 19dd4 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   19dc4:	f1a6 0408 	sub.w	r4, r6, #8
   19dc8:	18e0      	adds	r0, r4, r3
   19dca:	e6ae      	b.n	19b2a <cbvprintf_package+0x32>
   19dcc:	0002b9c8 	.word	0x0002b9c8
   19dd0:	0002ed84 	.word	0x0002ed84
	if (rws_pos_en) {
   19dd4:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   19dd6:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
   19dd8:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   19dda:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   19ddc:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   19de0:	b1c2      	cbz	r2, 19e14 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   19de2:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   19de4:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   19de8:	f1b9 0f00 	cmp.w	r9, #0
   19dec:	d005      	beq.n	19dfa <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
   19dee:	2200      	movs	r2, #0
   19df0:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
   19df2:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   19df6:	4297      	cmp	r7, r2
   19df8:	d10e      	bne.n	19e18 <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
   19dfa:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   19dfe:	f1c5 0301 	rsb	r3, r5, #1
   19e02:	f10d 0820 	add.w	r8, sp, #32
   19e06:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   19e08:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   19e0c:	4557      	cmp	r7, sl
   19e0e:	d112      	bne.n	19e36 <cbvprintf_package+0x33e>
	return BUF_OFFSET;
   19e10:	1b60      	subs	r0, r4, r5
   19e12:	e68a      	b.n	19b2a <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   19e14:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   19e16:	e7e5      	b.n	19de4 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   19e18:	f810 3b01 	ldrb.w	r3, [r0], #1
   19e1c:	0619      	lsls	r1, r3, #24
   19e1e:	d508      	bpl.n	19e32 <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
   19e20:	eb04 0e0c 	add.w	lr, r4, ip
   19e24:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   19e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   19e2a:	f4ff ae7c 	bcc.w	19b26 <cbvprintf_package+0x2e>
			*buf++ = pos;
   19e2e:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   19e32:	3201      	adds	r2, #1
   19e34:	e7df      	b.n	19df6 <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   19e36:	f1b9 0f00 	cmp.w	r9, #0
   19e3a:	d003      	beq.n	19e44 <cbvprintf_package+0x34c>
   19e3c:	f998 2000 	ldrsb.w	r2, [r8]
   19e40:	2a00      	cmp	r2, #0
   19e42:	db17      	blt.n	19e74 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
   19e44:	9b02      	ldr	r3, [sp, #8]
   19e46:	b1d3      	cbz	r3, 19e7e <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
   19e48:	f81a 200b 	ldrb.w	r2, [sl, fp]
   19e4c:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   19e50:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   19e52:	9b01      	ldr	r3, [sp, #4]
   19e54:	1898      	adds	r0, r3, r2
   19e56:	4420      	add	r0, r4
   19e58:	4286      	cmp	r6, r0
   19e5a:	f4ff ae64 	bcc.w	19b26 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
   19e5e:	f898 0000 	ldrb.w	r0, [r8]
   19e62:	9900      	ldr	r1, [sp, #0]
   19e64:	f804 0b01 	strb.w	r0, [r4], #1
   19e68:	4620      	mov	r0, r4
   19e6a:	9203      	str	r2, [sp, #12]
   19e6c:	f011 fb2a 	bl	2b4c4 <memcpy>
		buf += size;
   19e70:	9a03      	ldr	r2, [sp, #12]
   19e72:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   19e74:	f10a 0a01 	add.w	sl, sl, #1
   19e78:	f108 0801 	add.w	r8, r8, #1
   19e7c:	e7c6      	b.n	19e0c <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   19e7e:	f898 2000 	ldrb.w	r2, [r8]
   19e82:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   19e86:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   19e88:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
   19e8a:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   19e8c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   19e90:	f7ff f8ac 	bl	18fec <strlen>
   19e94:	1c42      	adds	r2, r0, #1
   19e96:	e7dc      	b.n	19e52 <cbvprintf_package+0x35a>
		return -EFAULT;
   19e98:	f06f 000d 	mvn.w	r0, #13
   19e9c:	e645      	b.n	19b2a <cbvprintf_package+0x32>
   19e9e:	bf00      	nop

00019ea0 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   19ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ea4:	b095      	sub	sp, #84	; 0x54
   19ea6:	af00      	add	r7, sp, #0
   19ea8:	61bb      	str	r3, [r7, #24]
   19eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19eac:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   19eae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   19eb2:	4688      	mov	r8, r1
{
   19eb4:	627a      	str	r2, [r7, #36]	; 0x24
   19eb6:	60fb      	str	r3, [r7, #12]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   19eb8:	b949      	cbnz	r1, 19ece <cbprintf_package_convert+0x2e>
	buf += ros_nbr;
   19eba:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   19ebc:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
   19ebe:	7880      	ldrb	r0, [r0, #2]
   19ec0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   19ec4:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   19ec6:	4545      	cmp	r5, r8
   19ec8:	d819      	bhi.n	19efe <cbprintf_package_convert+0x5e>
	return (size_t)(uintptr_t)(buf - start);
   19eca:	eba0 0804 	sub.w	r8, r0, r4
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   19ece:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
   19ed0:	f894 b002 	ldrb.w	fp, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
   19ed4:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
   19ed6:	f1bb 0f00 	cmp.w	fp, #0
   19eda:	d002      	beq.n	19ee2 <cbprintf_package_convert+0x42>
   19edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19ede:	07d8      	lsls	r0, r3, #31
   19ee0:	d416      	bmi.n	19f10 <cbprintf_package_convert+0x70>
	rw_cpy = rws_nbr > 0 &&
   19ee2:	697b      	ldr	r3, [r7, #20]
   19ee4:	bb53      	cbnz	r3, 19f3c <cbprintf_package_convert+0x9c>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   19ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19ee8:	b11b      	cbz	r3, 19ef2 <cbprintf_package_convert+0x52>
			cb(in_packaged, in_len, ctx);
   19eea:	4641      	mov	r1, r8
   19eec:	4620      	mov	r0, r4
   19eee:	69ba      	ldr	r2, [r7, #24]
   19ef0:	4798      	blx	r3
		}

		return in_len;
   19ef2:	4645      	mov	r5, r8

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   19ef4:	4628      	mov	r0, r5
   19ef6:	3754      	adds	r7, #84	; 0x54
   19ef8:	46bd      	mov	sp, r7
   19efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   19efe:	1c46      	adds	r6, r0, #1
		buf += strlen((const char *)buf) + 1;
   19f00:	4630      	mov	r0, r6
   19f02:	f7ff f873 	bl	18fec <strlen>
   19f06:	3001      	adds	r0, #1
   19f08:	4430      	add	r0, r6
	for (int i = 0; i < s_nbr; i++) {
   19f0a:	f108 0801 	add.w	r8, r8, #1
   19f0e:	e7da      	b.n	19ec6 <cbprintf_package_convert+0x26>
	rw_cpy = rws_nbr > 0 &&
   19f10:	7823      	ldrb	r3, [r4, #0]
   19f12:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
   19f14:	623b      	str	r3, [r7, #32]
   19f16:	009b      	lsls	r3, r3, #2
   19f18:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
   19f1a:	6a3b      	ldr	r3, [r7, #32]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   19f1c:	61fa      	str	r2, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
   19f1e:	eb04 0a83 	add.w	sl, r4, r3, lsl #2
	if (cb == NULL) {
   19f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19f24:	2b00      	cmp	r3, #0
   19f26:	f040 80ff 	bne.w	1a128 <cbprintf_package_convert+0x288>
		out_len = (int)in_len;
   19f2a:	4645      	mov	r5, r8
	size_t strl_cnt = 0;
   19f2c:	2600      	movs	r6, #0
   19f2e:	46d0      	mov	r8, sl
   19f30:	eb0b 090a 	add.w	r9, fp, sl
			for (int i = 0; i < ros_nbr; i++) {
   19f34:	45c1      	cmp	r9, r8
   19f36:	d151      	bne.n	19fdc <cbprintf_package_convert+0x13c>
   19f38:	44da      	add	sl, fp
   19f3a:	e013      	b.n	19f64 <cbprintf_package_convert+0xc4>
	rw_cpy = rws_nbr > 0 &&
   19f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19f3e:	0799      	lsls	r1, r3, #30
   19f40:	d5d1      	bpl.n	19ee6 <cbprintf_package_convert+0x46>
	args_size = in_desc->len * sizeof(int);
   19f42:	7823      	ldrb	r3, [r4, #0]
   19f44:	469a      	mov	sl, r3
   19f46:	623b      	str	r3, [r7, #32]
   19f48:	009b      	lsls	r3, r3, #2
   19f4a:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   19f4c:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
   19f4e:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
   19f52:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   19f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19f56:	2b00      	cmp	r3, #0
   19f58:	d17a      	bne.n	1a050 <cbprintf_package_convert+0x1b0>
		out_len = (int)in_len;
   19f5a:	4645      	mov	r5, r8
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   19f5c:	f1bb 0f00 	cmp.w	fp, #0
   19f60:	d14f      	bne.n	1a002 <cbprintf_package_convert+0x162>
	size_t strl_cnt = 0;
   19f62:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
   19f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19f66:	f013 0f05 	tst.w	r3, #5
   19f6a:	bf0c      	ite	eq
   19f6c:	f04f 0b02 	moveq.w	fp, #2
   19f70:	f04f 0b01 	movne.w	fp, #1
   19f74:	697b      	ldr	r3, [r7, #20]
   19f76:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   19f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   19f7c:	f003 0302 	and.w	r3, r3, #2
   19f80:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0; i < rws_nbr; i++) {
   19f82:	45ca      	cmp	sl, r9
   19f84:	d0b6      	beq.n	19ef4 <cbprintf_package_convert+0x54>
			uint8_t arg_idx = *str_pos++;
   19f86:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
   19f8a:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   19f8e:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
   19f92:	4bab      	ldr	r3, [pc, #684]	; (1a240 <cbprintf_package_convert+0x3a0>)
   19f94:	4598      	cmp	r8, r3
   19f96:	d302      	bcc.n	19f9e <cbprintf_package_convert+0xfe>
   19f98:	4baa      	ldr	r3, [pc, #680]	; (1a244 <cbprintf_package_convert+0x3a4>)
   19f9a:	4598      	cmp	r8, r3
   19f9c:	d338      	bcc.n	1a010 <cbprintf_package_convert+0x170>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   19f9e:	68fb      	ldr	r3, [r7, #12]
   19fa0:	2b00      	cmp	r3, #0
   19fa2:	d042      	beq.n	1a02a <cbprintf_package_convert+0x18a>
   19fa4:	69f8      	ldr	r0, [r7, #28]
   19fa6:	f00d faaf 	bl	27508 <is_ptr>
   19faa:	2800      	cmp	r0, #0
   19fac:	d03d      	beq.n	1a02a <cbprintf_package_convert+0x18a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   19fae:	46e8      	mov	r8, sp
   19fb0:	b08a      	sub	sp, #40	; 0x28
   19fb2:	466a      	mov	r2, sp
   19fb4:	4ba4      	ldr	r3, [pc, #656]	; (1a248 <cbprintf_package_convert+0x3a8>)
   19fb6:	6153      	str	r3, [r2, #20]
   19fb8:	69fb      	ldr	r3, [r7, #28]
   19fba:	e9c2 3106 	strd	r3, r1, [r2, #24]
   19fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
   19fc2:	8413      	strh	r3, [r2, #32]
   19fc4:	4ba1      	ldr	r3, [pc, #644]	; (1a24c <cbprintf_package_convert+0x3ac>)
   19fc6:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   19fca:	2300      	movs	r3, #0
   19fcc:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   19fd0:	489f      	ldr	r0, [pc, #636]	; (1a250 <cbprintf_package_convert+0x3b0>)
   19fd2:	f001 f9b1 	bl	1b338 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   19fd6:	3d02      	subs	r5, #2
   19fd8:	46c5      	mov	sp, r8
				continue;
   19fda:	e7d2      	b.n	19f82 <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
   19fdc:	f818 3b01 	ldrb.w	r3, [r8], #1
		return 1 + strlen(str);
   19fe0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   19fe4:	f7ff f802 	bl	18fec <strlen>
				if (strl && strl_cnt < strl_len) {
   19fe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   19fea:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   19fec:	b13b      	cbz	r3, 19ffe <cbprintf_package_convert+0x15e>
   19fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   19ff2:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   19ff4:	bf3e      	ittt	cc
   19ff6:	6ffb      	ldrcc	r3, [r7, #124]	; 0x7c
   19ff8:	f823 0016 	strhcc.w	r0, [r3, r6, lsl #1]
   19ffc:	3601      	addcc	r6, #1
				out_len += len;
   19ffe:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
   1a000:	e798      	b.n	19f34 <cbprintf_package_convert+0x94>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   1a002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1a004:	f013 0604 	ands.w	r6, r3, #4
	size_t strl_cnt = 0;
   1a008:	bf1c      	itt	ne
   1a00a:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   1a00c:	44da      	addne	sl, fp
   1a00e:	e7a9      	b.n	19f64 <cbprintf_package_convert+0xc4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   1a010:	68fb      	ldr	r3, [r7, #12]
   1a012:	b123      	cbz	r3, 1a01e <cbprintf_package_convert+0x17e>
   1a014:	69f8      	ldr	r0, [r7, #28]
   1a016:	f00d fa77 	bl	27508 <is_ptr>
   1a01a:	2800      	cmp	r0, #0
   1a01c:	d1c7      	bne.n	19fae <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   1a01e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1a020:	07da      	lsls	r2, r3, #31
   1a022:	d405      	bmi.n	1a030 <cbprintf_package_convert+0x190>
					out_len -= drop_ro_str_pos ? 2 : 1;
   1a024:	eba5 050b 	sub.w	r5, r5, fp
   1a028:	e7ab      	b.n	19f82 <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   1a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a02c:	2b00      	cmp	r3, #0
   1a02e:	d0a8      	beq.n	19f82 <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
   1a030:	4640      	mov	r0, r8
   1a032:	f7fe ffdb 	bl	18fec <strlen>
				if (strl && strl_cnt < strl_len) {
   1a036:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1a038:	b143      	cbz	r3, 1a04c <cbprintf_package_convert+0x1ac>
   1a03a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1a03e:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   1a040:	bf3f      	itttt	cc
   1a042:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   1a044:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   1a046:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   1a04a:	3601      	addcc	r6, #1
				out_len += (len - 1);
   1a04c:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
   1a04e:	e798      	b.n	19f82 <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   1a050:	f1bb 0f00 	cmp.w	fp, #0
   1a054:	d06e      	beq.n	1a134 <cbprintf_package_convert+0x294>
   1a056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1a058:	f013 0604 	ands.w	r6, r3, #4
   1a05c:	d06d      	beq.n	1a13a <cbprintf_package_convert+0x29a>
		keep_cnt = ros_nbr;
   1a05e:	46d9      	mov	r9, fp
		scpy_cnt = 0;
   1a060:	2600      	movs	r6, #0
		dst = keep_str_pos;
   1a062:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1a066:	465a      	mov	r2, fp
   1a068:	4651      	mov	r1, sl
   1a06a:	f011 fa2b 	bl	2b4c4 <memcpy>
	str_pos += ros_nbr;
   1a06e:	697b      	ldr	r3, [r7, #20]
   1a070:	44da      	add	sl, fp
	for (int i = 0; i < rws_nbr; i++) {
   1a072:	005b      	lsls	r3, r3, #1
   1a074:	607b      	str	r3, [r7, #4]
   1a076:	697b      	ldr	r3, [r7, #20]
   1a078:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
   1a07c:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   1a07e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1a080:	f003 0302 	and.w	r3, r3, #2
   1a084:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < rws_nbr; i++) {
   1a086:	68bb      	ldr	r3, [r7, #8]
   1a088:	4553      	cmp	r3, sl
   1a08a:	d158      	bne.n	1a13e <cbprintf_package_convert+0x29e>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   1a08c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1a08e:	7863      	ldrb	r3, [r4, #1]
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1a090:	6fb8      	ldr	r0, [r7, #120]	; 0x78
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   1a092:	0789      	lsls	r1, r1, #30
   1a094:	bf48      	it	mi
   1a096:	2100      	movmi	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1a098:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   1a09c:	bf58      	it	pl
   1a09e:	ea4f 0159 	movpl.w	r1, r9, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1a0a2:	07c5      	lsls	r5, r0, #31
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1a0a4:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1a0a6:	f100 809a 	bmi.w	1a1de <cbprintf_package_convert+0x33e>
   1a0aa:	f010 0f04 	tst.w	r0, #4
   1a0ae:	bf14      	ite	ne
   1a0b0:	4648      	movne	r0, r9
   1a0b2:	2000      	moveq	r0, #0
   1a0b4:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
   1a0b6:	7062      	strb	r2, [r4, #1]
   1a0b8:	70a0      	strb	r0, [r4, #2]
   1a0ba:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   1a0bc:	4620      	mov	r0, r4
   1a0be:	69ba      	ldr	r2, [r7, #24]
   1a0c0:	6939      	ldr	r1, [r7, #16]
   1a0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a0c4:	4798      	blx	r3
	if (rv < 0) {
   1a0c6:	1e05      	subs	r5, r0, #0
   1a0c8:	f6ff af14 	blt.w	19ef4 <cbprintf_package_convert+0x54>
	*in_desc = in_desc_backup;
   1a0cc:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   1a0ce:	4649      	mov	r1, r9
	*in_desc = in_desc_backup;
   1a0d0:	7023      	strb	r3, [r4, #0]
   1a0d2:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   1a0d4:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
   1a0d6:	7063      	strb	r3, [r4, #1]
   1a0d8:	697b      	ldr	r3, [r7, #20]
   1a0da:	f884 b002 	strb.w	fp, [r4, #2]
   1a0de:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   1a0e0:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a0e6:	4798      	blx	r3
	if (rv < 0) {
   1a0e8:	f1b0 0900 	subs.w	r9, r0, #0
   1a0ec:	f2c0 80a4 	blt.w	1a238 <cbprintf_package_convert+0x398>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   1a0f0:	693b      	ldr	r3, [r7, #16]
   1a0f2:	eba8 010b 	sub.w	r1, r8, fp
   1a0f6:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   1a0f8:	687b      	ldr	r3, [r7, #4]
   1a0fa:	4650      	mov	r0, sl
   1a0fc:	1ac9      	subs	r1, r1, r3
   1a0fe:	69ba      	ldr	r2, [r7, #24]
   1a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a102:	4798      	blx	r3
	if (rv < 0) {
   1a104:	2800      	cmp	r0, #0
   1a106:	f2c0 8099 	blt.w	1a23c <cbprintf_package_convert+0x39c>
	for (int i = 0; i < scpy_cnt; i++) {
   1a10a:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
   1a10e:	44a9      	add	r9, r5
	out_len += rv;
   1a110:	eb09 0500 	add.w	r5, r9, r0
		uint8_t loc = cpy_str_pos[i];
   1a114:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
   1a118:	45b3      	cmp	fp, r6
   1a11a:	db62      	blt.n	1a1e2 <cbprintf_package_convert+0x342>
	(void)cb(NULL, 0, ctx);
   1a11c:	2100      	movs	r1, #0
   1a11e:	69ba      	ldr	r2, [r7, #24]
   1a120:	4608      	mov	r0, r1
   1a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a124:	4798      	blx	r3
	return out_len;
   1a126:	e6e5      	b.n	19ef4 <cbprintf_package_convert+0x54>
	if (cb == NULL) {
   1a128:	465e      	mov	r6, fp
   1a12a:	f04f 0900 	mov.w	r9, #0
   1a12e:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1a132:	e798      	b.n	1a066 <cbprintf_package_convert+0x1c6>
		scpy_cnt = 0;
   1a134:	465e      	mov	r6, fp
		keep_cnt = 0;
   1a136:	46d9      	mov	r9, fp
   1a138:	e799      	b.n	1a06e <cbprintf_package_convert+0x1ce>
   1a13a:	46b1      	mov	r9, r6
   1a13c:	e797      	b.n	1a06e <cbprintf_package_convert+0x1ce>
		uint8_t arg_idx = *str_pos++;
   1a13e:	f81a 1b02 	ldrb.w	r1, [sl], #2
   1a142:	4b3f      	ldr	r3, [pc, #252]	; (1a240 <cbprintf_package_convert+0x3a0>)
		uint8_t arg_pos = *str_pos++;
   1a144:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   1a148:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1a14c:	4298      	cmp	r0, r3
   1a14e:	d302      	bcc.n	1a156 <cbprintf_package_convert+0x2b6>
   1a150:	4b3c      	ldr	r3, [pc, #240]	; (1a244 <cbprintf_package_convert+0x3a4>)
   1a152:	4298      	cmp	r0, r3
   1a154:	d31d      	bcc.n	1a192 <cbprintf_package_convert+0x2f2>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   1a156:	68fb      	ldr	r3, [r7, #12]
   1a158:	b123      	cbz	r3, 1a164 <cbprintf_package_convert+0x2c4>
   1a15a:	69f8      	ldr	r0, [r7, #28]
   1a15c:	f00d f9d4 	bl	27508 <is_ptr>
   1a160:	2800      	cmp	r0, #0
   1a162:	d190      	bne.n	1a086 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   1a164:	683b      	ldr	r3, [r7, #0]
   1a166:	b9fb      	cbnz	r3, 1a1a8 <cbprintf_package_convert+0x308>
				keep_str_pos[keep_cnt++] = arg_idx;
   1a168:	f109 0328 	add.w	r3, r9, #40	; 0x28
   1a16c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1a170:	f109 0001 	add.w	r0, r9, #1
   1a174:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
   1a178:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1a17c:	f109 0902 	add.w	r9, r9, #2
   1a180:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
   1a184:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   1a188:	fa5f f989 	uxtb.w	r9, r9
   1a18c:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
   1a190:	e779      	b.n	1a086 <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   1a192:	68fb      	ldr	r3, [r7, #12]
   1a194:	b12b      	cbz	r3, 1a1a2 <cbprintf_package_convert+0x302>
   1a196:	69f8      	ldr	r0, [r7, #28]
   1a198:	f00d f9b6 	bl	27508 <is_ptr>
   1a19c:	2800      	cmp	r0, #0
   1a19e:	f47f af72 	bne.w	1a086 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   1a1a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1a1a4:	07db      	lsls	r3, r3, #31
   1a1a6:	d509      	bpl.n	1a1bc <cbprintf_package_convert+0x31c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   1a1a8:	f106 0328 	add.w	r3, r6, #40	; 0x28
   1a1ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1a1b0:	1c71      	adds	r1, r6, #1
   1a1b2:	189e      	adds	r6, r3, r2
   1a1b4:	f806 5c20 	strb.w	r5, [r6, #-32]
   1a1b8:	b2ce      	uxtb	r6, r1
   1a1ba:	e764      	b.n	1a086 <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   1a1bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1a1be:	0758      	lsls	r0, r3, #29
   1a1c0:	f57f af61 	bpl.w	1a086 <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
   1a1c4:	f109 0328 	add.w	r3, r9, #40	; 0x28
   1a1c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1a1cc:	f109 0101 	add.w	r1, r9, #1
   1a1d0:	eb03 0902 	add.w	r9, r3, r2
   1a1d4:	f809 5c10 	strb.w	r5, [r9, #-16]
   1a1d8:	fa5f f981 	uxtb.w	r9, r1
   1a1dc:	e753      	b.n	1a086 <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1a1de:	2000      	movs	r0, #0
   1a1e0:	e768      	b.n	1a0b4 <cbprintf_package_convert+0x214>
		uint8_t loc = cpy_str_pos[i];
   1a1e2:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
   1a1e6:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
   1a1ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
   1a1ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1a1f0:	b1fb      	cbz	r3, 1a232 <cbprintf_package_convert+0x392>
   1a1f2:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   1a1f6:	2101      	movs	r1, #1
   1a1f8:	69ba      	ldr	r2, [r7, #24]
   1a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a1fc:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   1a200:	4798      	blx	r3
		if (rv < 0) {
   1a202:	2800      	cmp	r0, #0
   1a204:	db1a      	blt.n	1a23c <cbprintf_package_convert+0x39c>
		out_len += rv;
   1a206:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   1a208:	f1b8 0f00 	cmp.w	r8, #0
   1a20c:	d106      	bne.n	1a21c <cbprintf_package_convert+0x37c>
   1a20e:	4648      	mov	r0, r9
   1a210:	f7fe feec 	bl	18fec <strlen>
   1a214:	f100 0801 	add.w	r8, r0, #1
   1a218:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   1a21c:	4641      	mov	r1, r8
   1a21e:	4648      	mov	r0, r9
   1a220:	69ba      	ldr	r2, [r7, #24]
   1a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a224:	4798      	blx	r3
		if (rv < 0) {
   1a226:	2800      	cmp	r0, #0
   1a228:	db08      	blt.n	1a23c <cbprintf_package_convert+0x39c>
		out_len += rv;
   1a22a:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   1a22c:	f10b 0b01 	add.w	fp, fp, #1
   1a230:	e772      	b.n	1a118 <cbprintf_package_convert+0x278>
		uint16_t str_len = strl ? strl[i] : 0;
   1a232:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   1a236:	e7de      	b.n	1a1f6 <cbprintf_package_convert+0x356>
   1a238:	464d      	mov	r5, r9
   1a23a:	e65b      	b.n	19ef4 <cbprintf_package_convert+0x54>
   1a23c:	4605      	mov	r5, r0
   1a23e:	e659      	b.n	19ef4 <cbprintf_package_convert+0x54>
   1a240:	0002b9c8 	.word	0x0002b9c8
   1a244:	0002ed84 	.word	0x0002ed84
   1a248:	0002cb02 	.word	0x0002cb02
   1a24c:	01000004 	.word	0x01000004
   1a250:	0002bd98 	.word	0x0002bd98

0001a254 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   1a254:	2803      	cmp	r0, #3
{
   1a256:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   1a258:	d906      	bls.n	1a268 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   1a25a:	f00e f8d8 	bl	2840e <__errno>
   1a25e:	2309      	movs	r3, #9
   1a260:	6003      	str	r3, [r0, #0]
		return -1;
   1a262:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   1a266:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a268:	4b04      	ldr	r3, [pc, #16]	; (1a27c <_check_fd+0x28>)
   1a26a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
   1a26e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_get(&fdtable[fd].refcount)) {
   1a272:	2b00      	cmp	r3, #0
   1a274:	d0f1      	beq.n	1a25a <_check_fd+0x6>
	return 0;
   1a276:	2000      	movs	r0, #0
   1a278:	e7f5      	b.n	1a266 <_check_fd+0x12>
   1a27a:	bf00      	nop
   1a27c:	2000d0d4 	.word	0x2000d0d4

0001a280 <z_get_fd_obj_and_vtable>:
	return entry->obj;
}

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   1a280:	b570      	push	{r4, r5, r6, lr}
   1a282:	4604      	mov	r4, r0
   1a284:	460e      	mov	r6, r1
   1a286:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   1a288:	f7ff ffe4 	bl	1a254 <_check_fd>
   1a28c:	2800      	cmp	r0, #0
   1a28e:	db0c      	blt.n	1a2aa <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   1a290:	4b07      	ldr	r3, [pc, #28]	; (1a2b0 <z_get_fd_obj_and_vtable+0x30>)
   1a292:	0161      	lsls	r1, r4, #5
   1a294:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   1a298:	6862      	ldr	r2, [r4, #4]
   1a29a:	6032      	str	r2, [r6, #0]

	if (lock) {
   1a29c:	b11d      	cbz	r5, 1a2a6 <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   1a29e:	f101 020c 	add.w	r2, r1, #12
   1a2a2:	441a      	add	r2, r3
   1a2a4:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   1a2a6:	5858      	ldr	r0, [r3, r1]
}
   1a2a8:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1a2aa:	2000      	movs	r0, #0
   1a2ac:	e7fc      	b.n	1a2a8 <z_get_fd_obj_and_vtable+0x28>
   1a2ae:	bf00      	nop
   1a2b0:	2000d0cc 	.word	0x2000d0cc

0001a2b4 <z_reserve_fd>:

int z_reserve_fd(void)
{
   1a2b4:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1a2b6:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   1a2b8:	f04f 33ff 	mov.w	r3, #4294967295
   1a2bc:	f04f 32ff 	mov.w	r2, #4294967295
   1a2c0:	4814      	ldr	r0, [pc, #80]	; (1a314 <z_reserve_fd+0x60>)
   1a2c2:	f00b f805 	bl	252d0 <z_impl_k_mutex_lock>
   1a2c6:	4b14      	ldr	r3, [pc, #80]	; (1a318 <z_reserve_fd+0x64>)
   1a2c8:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   1a2cc:	b17a      	cbz	r2, 1a2ee <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1a2ce:	3401      	adds	r4, #1
   1a2d0:	2c04      	cmp	r4, #4
   1a2d2:	f103 0320 	add.w	r3, r3, #32
   1a2d6:	d1f7      	bne.n	1a2c8 <z_reserve_fd+0x14>
	errno = ENFILE;
   1a2d8:	f00e f899 	bl	2840e <__errno>
   1a2dc:	2317      	movs	r3, #23
	return -1;
   1a2de:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   1a2e2:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   1a2e4:	480b      	ldr	r0, [pc, #44]	; (1a314 <z_reserve_fd+0x60>)
   1a2e6:	f00b f86d 	bl	253c4 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   1a2ea:	4620      	mov	r0, r4
   1a2ec:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a2ee:	e8d3 0fef 	ldaex	r0, [r3]
   1a2f2:	3001      	adds	r0, #1
   1a2f4:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1a2f8:	2900      	cmp	r1, #0
   1a2fa:	d1f8      	bne.n	1a2ee <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   1a2fc:	4807      	ldr	r0, [pc, #28]	; (1a31c <z_reserve_fd+0x68>)
   1a2fe:	0163      	lsls	r3, r4, #5
   1a300:	eb00 1144 	add.w	r1, r0, r4, lsl #5
   1a304:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
   1a306:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
   1a308:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   1a30a:	4418      	add	r0, r3
   1a30c:	f010 fc80 	bl	2ac10 <z_impl_k_mutex_init>
   1a310:	e7e8      	b.n	1a2e4 <z_reserve_fd+0x30>
   1a312:	bf00      	nop
   1a314:	2000c86c 	.word	0x2000c86c
   1a318:	2000d0d4 	.word	0x2000d0d4
   1a31c:	2000d0cc 	.word	0x2000d0cc

0001a320 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   1a320:	b410      	push	{r4}
   1a322:	4604      	mov	r4, r0
   1a324:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   1a326:	4b09      	ldr	r3, [pc, #36]	; (1a34c <z_finalize_fd+0x2c>)
   1a328:	0162      	lsls	r2, r4, #5
   1a32a:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   1a32e:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   1a330:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   1a332:	b140      	cbz	r0, 1a346 <z_finalize_fd+0x26>
   1a334:	68c4      	ldr	r4, [r0, #12]
   1a336:	b134      	cbz	r4, 1a346 <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   1a338:	320c      	adds	r2, #12
   1a33a:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   1a33c:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   1a33e:	f240 1205 	movw	r2, #261	; 0x105
   1a342:	f00d b906 	b.w	27552 <z_fdtable_call_ioctl.constprop.0>
}
   1a346:	bc10      	pop	{r4}
   1a348:	4770      	bx	lr
   1a34a:	bf00      	nop
   1a34c:	2000d0cc 	.word	0x2000d0cc

0001a350 <z_free_fd>:

void z_free_fd(int fd)
{
   1a350:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   1a352:	490d      	ldr	r1, [pc, #52]	; (1a388 <z_free_fd+0x38>)
   1a354:	0140      	lsls	r0, r0, #5
   1a356:	f100 0308 	add.w	r3, r0, #8
   1a35a:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a35c:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
   1a360:	b182      	cbz	r2, 1a384 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   1a362:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a364:	e8d3 5fef 	ldaex	r5, [r3]
   1a368:	4295      	cmp	r5, r2
   1a36a:	d104      	bne.n	1a376 <z_free_fd+0x26>
   1a36c:	e8c3 4fec 	stlex	ip, r4, [r3]
   1a370:	f1bc 0f00 	cmp.w	ip, #0
   1a374:	d1f6      	bne.n	1a364 <z_free_fd+0x14>
   1a376:	d1f1      	bne.n	1a35c <z_free_fd+0xc>
	if (old_rc != 1) {
   1a378:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
   1a37a:	bf01      	itttt	eq
   1a37c:	2300      	moveq	r3, #0
   1a37e:	180a      	addeq	r2, r1, r0
   1a380:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
   1a382:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   1a384:	bd30      	pop	{r4, r5, pc}
   1a386:	bf00      	nop
   1a388:	2000d0cc 	.word	0x2000d0cc

0001a38c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   1a38c:	4b01      	ldr	r3, [pc, #4]	; (1a394 <__printk_hook_install+0x8>)
   1a38e:	6018      	str	r0, [r3, #0]
}
   1a390:	4770      	bx	lr
   1a392:	bf00      	nop
   1a394:	2000c580 	.word	0x2000c580

0001a398 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   1a398:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   1a39a:	2500      	movs	r5, #0
{
   1a39c:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   1a39e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   1a3a2:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1a3a4:	9500      	str	r5, [sp, #0]
   1a3a6:	a903      	add	r1, sp, #12
   1a3a8:	4805      	ldr	r0, [pc, #20]	; (1a3c0 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   1a3aa:	9505      	str	r5, [sp, #20]
   1a3ac:	f000 f97a 	bl	1a6a4 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   1a3b0:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   1a3b4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   1a3b6:	bfb8      	it	lt
   1a3b8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   1a3ba:	b007      	add	sp, #28
   1a3bc:	bd30      	pop	{r4, r5, pc}
   1a3be:	bf00      	nop
   1a3c0:	00027575 	.word	0x00027575

0001a3c4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1a3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a3c8:	8b05      	ldrh	r5, [r0, #24]
{
   1a3ca:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1a3cc:	0728      	lsls	r0, r5, #28
{
   1a3ce:	4690      	mov	r8, r2
	if (processing) {
   1a3d0:	d411      	bmi.n	1a3f6 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   1a3d2:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a3d4:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   1a3d8:	f040 80cd 	bne.w	1a576 <process_event+0x1b2>
			evt = process_recheck(mgr);
   1a3dc:	4620      	mov	r0, r4
   1a3de:	f00d fac5 	bl	2796c <process_recheck>
		}

		if (evt == EVT_NOP) {
   1a3e2:	b178      	cbz	r0, 1a404 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   1a3e4:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a3e6:	8b21      	ldrh	r1, [r4, #24]
   1a3e8:	2804      	cmp	r0, #4
   1a3ea:	d811      	bhi.n	1a410 <process_event+0x4c>
   1a3ec:	e8df f000 	tbb	[pc, r0]
   1a3f0:	856d10c3 	.word	0x856d10c3
   1a3f4:	95          	.byte	0x95
   1a3f5:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   1a3f6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1a3f8:	bf0c      	ite	eq
   1a3fa:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1a3fe:	f045 0520 	orrne.w	r5, r5, #32
   1a402:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1a404:	f388 8811 	msr	BASEPRI, r8
   1a408:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1a40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1a410:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1a414:	45aa      	cmp	sl, r5
   1a416:	f000 80a6 	beq.w	1a566 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   1a41a:	2700      	movs	r7, #0
   1a41c:	46b9      	mov	r9, r7
   1a41e:	463e      	mov	r6, r7
   1a420:	68a3      	ldr	r3, [r4, #8]
   1a422:	2b00      	cmp	r3, #0
   1a424:	f000 80bd 	beq.w	1a5a2 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1a428:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   1a42c:	8321      	strh	r1, [r4, #24]
   1a42e:	f388 8811 	msr	BASEPRI, r8
   1a432:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1a436:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1a438:	2900      	cmp	r1, #0
   1a43a:	f000 80bb 	beq.w	1a5b4 <process_event+0x1f0>
	return node->next;
   1a43e:	680d      	ldr	r5, [r1, #0]
   1a440:	2900      	cmp	r1, #0
   1a442:	f000 80b7 	beq.w	1a5b4 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   1a446:	4633      	mov	r3, r6
   1a448:	4652      	mov	r2, sl
   1a44a:	4620      	mov	r0, r4
   1a44c:	f8d1 8004 	ldr.w	r8, [r1, #4]
   1a450:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1a452:	2d00      	cmp	r5, #0
   1a454:	d076      	beq.n	1a544 <process_event+0x180>
   1a456:	682b      	ldr	r3, [r5, #0]
   1a458:	4629      	mov	r1, r5
   1a45a:	461d      	mov	r5, r3
   1a45c:	e7f0      	b.n	1a440 <process_event+0x7c>
   1a45e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1a462:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1a464:	2a01      	cmp	r2, #1
   1a466:	d81b      	bhi.n	1a4a0 <process_event+0xdc>
	list->head = NULL;
   1a468:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a46a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   1a46e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   1a470:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a472:	b289      	uxth	r1, r1
	list->tail = NULL;
   1a474:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1a478:	d109      	bne.n	1a48e <process_event+0xca>
   1a47a:	463b      	mov	r3, r7
   1a47c:	e003      	b.n	1a486 <process_event+0xc2>
				mgr->refs += 1U;
   1a47e:	8b62      	ldrh	r2, [r4, #26]
   1a480:	3201      	adds	r2, #1
   1a482:	8362      	strh	r2, [r4, #26]
	return node->next;
   1a484:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1a486:	2b00      	cmp	r3, #0
   1a488:	d1f9      	bne.n	1a47e <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a48a:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   1a48e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1a490:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1a492:	f00d fa6b 	bl	2796c <process_recheck>
   1a496:	2800      	cmp	r0, #0
   1a498:	d07b      	beq.n	1a592 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1a49a:	f041 0120 	orr.w	r1, r1, #32
   1a49e:	e077      	b.n	1a590 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1a4a0:	2b04      	cmp	r3, #4
   1a4a2:	d10a      	bne.n	1a4ba <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a4a4:	f021 0107 	bic.w	r1, r1, #7
   1a4a8:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   1a4aa:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1a4ac:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1a4ae:	f00d fa5d 	bl	2796c <process_recheck>
   1a4b2:	b110      	cbz	r0, 1a4ba <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1a4b4:	f041 0120 	orr.w	r1, r1, #32
   1a4b8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1a4ba:	8b21      	ldrh	r1, [r4, #24]
   1a4bc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1a4c0:	45aa      	cmp	sl, r5
   1a4c2:	d050      	beq.n	1a566 <process_event+0x1a2>
   1a4c4:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   1a4c6:	46b9      	mov	r9, r7
   1a4c8:	e7aa      	b.n	1a420 <process_event+0x5c>
			transit = mgr->transitions->start;
   1a4ca:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a4cc:	f021 0107 	bic.w	r1, r1, #7
   1a4d0:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   1a4d4:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   1a4d6:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   1a4da:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   1a4dc:	d12d      	bne.n	1a53a <process_event+0x176>
		    || (transit != NULL)) {
   1a4de:	f1b9 0f00 	cmp.w	r9, #0
   1a4e2:	d040      	beq.n	1a566 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1a4e4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   1a4e8:	8321      	strh	r1, [r4, #24]
   1a4ea:	f388 8811 	msr	BASEPRI, r8
   1a4ee:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   1a4f2:	4620      	mov	r0, r4
   1a4f4:	4939      	ldr	r1, [pc, #228]	; (1a5dc <process_event+0x218>)
   1a4f6:	47c8      	blx	r9
   1a4f8:	e029      	b.n	1a54e <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a4fa:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   1a4fe:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a500:	f041 0104 	orr.w	r1, r1, #4
   1a504:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   1a506:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   1a508:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   1a50c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   1a50e:	d0e6      	beq.n	1a4de <process_event+0x11a>
   1a510:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1a512:	f04f 0a04 	mov.w	sl, #4
		res = 0;
   1a516:	463e      	mov	r6, r7
   1a518:	e782      	b.n	1a420 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a51a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   1a51e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a520:	f041 0105 	orr.w	r1, r1, #5
   1a524:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   1a526:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   1a528:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   1a52c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   1a52e:	d0d6      	beq.n	1a4de <process_event+0x11a>
   1a530:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1a532:	f04f 0a05 	mov.w	sl, #5
		res = 0;
   1a536:	463e      	mov	r6, r7
   1a538:	e772      	b.n	1a420 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   1a53a:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1a53c:	f04f 0a06 	mov.w	sl, #6
		res = 0;
   1a540:	463e      	mov	r6, r7
   1a542:	e76d      	b.n	1a420 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1a544:	462b      	mov	r3, r5
   1a546:	e787      	b.n	1a458 <process_event+0x94>
			if (transit != NULL) {
   1a548:	f1b9 0f00 	cmp.w	r9, #0
   1a54c:	d1d1      	bne.n	1a4f2 <process_event+0x12e>
	__asm__ volatile(
   1a54e:	f04f 0320 	mov.w	r3, #32
   1a552:	f3ef 8811 	mrs	r8, BASEPRI
   1a556:	f383 8812 	msr	BASEPRI_MAX, r3
   1a55a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1a55e:	8b23      	ldrh	r3, [r4, #24]
   1a560:	f023 0308 	bic.w	r3, r3, #8
   1a564:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1a566:	8b25      	ldrh	r5, [r4, #24]
   1a568:	06ea      	lsls	r2, r5, #27
   1a56a:	d52e      	bpl.n	1a5ca <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1a56c:	f025 0310 	bic.w	r3, r5, #16
   1a570:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   1a572:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   1a576:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a578:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   1a57a:	2e00      	cmp	r6, #0
   1a57c:	f6bf af6f 	bge.w	1a45e <process_event+0x9a>
	list->head = NULL;
   1a580:	2300      	movs	r3, #0
		*clients = mgr->clients;
   1a582:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   1a584:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a588:	f021 0107 	bic.w	r1, r1, #7
   1a58c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1a590:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1a592:	8b21      	ldrh	r1, [r4, #24]
   1a594:	f04f 0900 	mov.w	r9, #0
   1a598:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1a59c:	45aa      	cmp	sl, r5
   1a59e:	f47f af3f 	bne.w	1a420 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   1a5a2:	2f00      	cmp	r7, #0
   1a5a4:	d09b      	beq.n	1a4de <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1a5a6:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   1a5aa:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   1a5ac:	f388 8811 	msr	BASEPRI, r8
   1a5b0:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   1a5b4:	2f00      	cmp	r7, #0
   1a5b6:	d0c7      	beq.n	1a548 <process_event+0x184>
	return node->next;
   1a5b8:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   1a5ba:	4639      	mov	r1, r7
   1a5bc:	4633      	mov	r3, r6
   1a5be:	4652      	mov	r2, sl
   1a5c0:	4620      	mov	r0, r4
   1a5c2:	f00d f9ff 	bl	279c4 <notify_one>
	list->head = node;
   1a5c6:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   1a5c8:	e7f4      	b.n	1a5b4 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1a5ca:	06ab      	lsls	r3, r5, #26
   1a5cc:	f57f af1a 	bpl.w	1a404 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1a5d0:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1a5d4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   1a5d6:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   1a5da:	e6ff      	b.n	1a3dc <process_event+0x18>
   1a5dc:	000279f1 	.word	0x000279f1

0001a5e0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   1a5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a5e2:	4602      	mov	r2, r0
   1a5e4:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   1a5e6:	270a      	movs	r7, #10
	size_t val = 0;
   1a5e8:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   1a5ea:	4e07      	ldr	r6, [pc, #28]	; (1a608 <extract_decimal+0x28>)
   1a5ec:	460b      	mov	r3, r1
   1a5ee:	781c      	ldrb	r4, [r3, #0]
   1a5f0:	3101      	adds	r1, #1
   1a5f2:	5d35      	ldrb	r5, [r6, r4]
   1a5f4:	076d      	lsls	r5, r5, #29
   1a5f6:	d401      	bmi.n	1a5fc <extract_decimal+0x1c>
	}
	*str = sp;
   1a5f8:	6013      	str	r3, [r2, #0]
	return val;
}
   1a5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   1a5fc:	fb07 4300 	mla	r3, r7, r0, r4
   1a600:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1a604:	e7f2      	b.n	1a5ec <extract_decimal+0xc>
   1a606:	bf00      	nop
   1a608:	0002ec21 	.word	0x0002ec21

0001a60c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   1a60c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a610:	4615      	mov	r5, r2
   1a612:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1a614:	78d3      	ldrb	r3, [r2, #3]
   1a616:	4a22      	ldr	r2, [pc, #136]	; (1a6a0 <encode_uint+0x94>)
	switch (specifier) {
   1a618:	2b6f      	cmp	r3, #111	; 0x6f
   1a61a:	f812 b003 	ldrb.w	fp, [r2, r3]
{
   1a61e:	4680      	mov	r8, r0
   1a620:	460f      	mov	r7, r1
   1a622:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   1a626:	d029      	beq.n	1a67c <encode_uint+0x70>
   1a628:	d824      	bhi.n	1a674 <encode_uint+0x68>
		return 10;
   1a62a:	2b58      	cmp	r3, #88	; 0x58
   1a62c:	bf0c      	ite	eq
   1a62e:	2610      	moveq	r6, #16
   1a630:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   1a632:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   1a636:	4632      	mov	r2, r6
   1a638:	2300      	movs	r3, #0
   1a63a:	4640      	mov	r0, r8
   1a63c:	4639      	mov	r1, r7
   1a63e:	f7fe fb63 	bl	18d08 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a642:	2a09      	cmp	r2, #9
   1a644:	b2d4      	uxtb	r4, r2
   1a646:	d81e      	bhi.n	1a686 <encode_uint+0x7a>
   1a648:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   1a64a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a64c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1a64e:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a652:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1a656:	d301      	bcc.n	1a65c <encode_uint+0x50>
   1a658:	45d1      	cmp	r9, sl
   1a65a:	d811      	bhi.n	1a680 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   1a65c:	782b      	ldrb	r3, [r5, #0]
   1a65e:	069b      	lsls	r3, r3, #26
   1a660:	d505      	bpl.n	1a66e <encode_uint+0x62>
		if (radix == 8) {
   1a662:	2e08      	cmp	r6, #8
   1a664:	d115      	bne.n	1a692 <encode_uint+0x86>
			conv->altform_0 = true;
   1a666:	78ab      	ldrb	r3, [r5, #2]
   1a668:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   1a66c:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
   1a66e:	4648      	mov	r0, r9
   1a670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1a674:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1a678:	2b70      	cmp	r3, #112	; 0x70
   1a67a:	e7d7      	b.n	1a62c <encode_uint+0x20>
	switch (specifier) {
   1a67c:	2608      	movs	r6, #8
   1a67e:	e7d8      	b.n	1a632 <encode_uint+0x26>
		value /= radix;
   1a680:	4680      	mov	r8, r0
   1a682:	460f      	mov	r7, r1
   1a684:	e7d7      	b.n	1a636 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a686:	f1bb 0f01 	cmp.w	fp, #1
   1a68a:	bf0c      	ite	eq
   1a68c:	3437      	addeq	r4, #55	; 0x37
   1a68e:	3457      	addne	r4, #87	; 0x57
   1a690:	e7db      	b.n	1a64a <encode_uint+0x3e>
		} else if (radix == 16) {
   1a692:	2e10      	cmp	r6, #16
   1a694:	d1eb      	bne.n	1a66e <encode_uint+0x62>
			conv->altform_0c = true;
   1a696:	78ab      	ldrb	r3, [r5, #2]
   1a698:	f043 0310 	orr.w	r3, r3, #16
   1a69c:	e7e6      	b.n	1a66c <encode_uint+0x60>
   1a69e:	bf00      	nop
   1a6a0:	0002ec21 	.word	0x0002ec21

0001a6a4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   1a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6a8:	4682      	mov	sl, r0
   1a6aa:	4617      	mov	r7, r2
   1a6ac:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1a6ae:	2500      	movs	r5, #0
{
   1a6b0:	b097      	sub	sp, #92	; 0x5c
   1a6b2:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1a6b4:	7838      	ldrb	r0, [r7, #0]
   1a6b6:	b908      	cbnz	r0, 1a6bc <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1a6b8:	4628      	mov	r0, r5
   1a6ba:	e349      	b.n	1ad50 <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
   1a6bc:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   1a6be:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   1a6c0:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
   1a6c2:	d006      	beq.n	1a6d2 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   1a6c4:	9903      	ldr	r1, [sp, #12]
   1a6c6:	47d0      	blx	sl
   1a6c8:	2800      	cmp	r0, #0
   1a6ca:	f2c0 8341 	blt.w	1ad50 <z_cbvprintf_impl+0x6ac>
   1a6ce:	3501      	adds	r5, #1
		if (bps == NULL) {
   1a6d0:	e1f0      	b.n	1aab4 <z_cbvprintf_impl+0x410>
		} state = {
   1a6d2:	2218      	movs	r2, #24
   1a6d4:	2100      	movs	r1, #0
   1a6d6:	a810      	add	r0, sp, #64	; 0x40
   1a6d8:	f010 ff01 	bl	2b4de <memset>
	if (*sp == '%') {
   1a6dc:	787b      	ldrb	r3, [r7, #1]
   1a6de:	2b25      	cmp	r3, #37	; 0x25
   1a6e0:	f000 80a3 	beq.w	1a82a <z_cbvprintf_impl+0x186>
   1a6e4:	2300      	movs	r3, #0
   1a6e6:	4698      	mov	r8, r3
   1a6e8:	469e      	mov	lr, r3
   1a6ea:	469c      	mov	ip, r3
   1a6ec:	4618      	mov	r0, r3
   1a6ee:	1c79      	adds	r1, r7, #1
   1a6f0:	460e      	mov	r6, r1
		switch (*sp) {
   1a6f2:	f811 2b01 	ldrb.w	r2, [r1], #1
   1a6f6:	2a2b      	cmp	r2, #43	; 0x2b
   1a6f8:	f000 80c6 	beq.w	1a888 <z_cbvprintf_impl+0x1e4>
   1a6fc:	f200 80bd 	bhi.w	1a87a <z_cbvprintf_impl+0x1d6>
   1a700:	2a20      	cmp	r2, #32
   1a702:	f000 80c4 	beq.w	1a88e <z_cbvprintf_impl+0x1ea>
   1a706:	2a23      	cmp	r2, #35	; 0x23
   1a708:	f000 80c4 	beq.w	1a894 <z_cbvprintf_impl+0x1f0>
   1a70c:	b12b      	cbz	r3, 1a71a <z_cbvprintf_impl+0x76>
   1a70e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a716:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1a71a:	f1b8 0f00 	cmp.w	r8, #0
   1a71e:	d005      	beq.n	1a72c <z_cbvprintf_impl+0x88>
   1a720:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a724:	f043 0320 	orr.w	r3, r3, #32
   1a728:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1a72c:	f1be 0f00 	cmp.w	lr, #0
   1a730:	d005      	beq.n	1a73e <z_cbvprintf_impl+0x9a>
   1a732:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a736:	f043 0310 	orr.w	r3, r3, #16
   1a73a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1a73e:	f1bc 0f00 	cmp.w	ip, #0
   1a742:	d005      	beq.n	1a750 <z_cbvprintf_impl+0xac>
   1a744:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a748:	f043 0308 	orr.w	r3, r3, #8
   1a74c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1a750:	b128      	cbz	r0, 1a75e <z_cbvprintf_impl+0xba>
   1a752:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a756:	f043 0304 	orr.w	r3, r3, #4
   1a75a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   1a75e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a762:	f003 0144 	and.w	r1, r3, #68	; 0x44
   1a766:	2944      	cmp	r1, #68	; 0x44
   1a768:	d103      	bne.n	1a772 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
   1a76a:	f36f 1386 	bfc	r3, #6, #1
   1a76e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   1a772:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   1a776:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   1a778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a77c:	9609      	str	r6, [sp, #36]	; 0x24
   1a77e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   1a782:	f040 808c 	bne.w	1a89e <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
   1a786:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1a78a:	f043 0301 	orr.w	r3, r3, #1
   1a78e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
   1a792:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
   1a794:	781a      	ldrb	r2, [r3, #0]
   1a796:	2a2e      	cmp	r2, #46	; 0x2e
   1a798:	bf0c      	ite	eq
   1a79a:	2101      	moveq	r1, #1
   1a79c:	2100      	movne	r1, #0
   1a79e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a7a2:	f361 0241 	bfi	r2, r1, #1, #1
   1a7a6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   1a7aa:	d10c      	bne.n	1a7c6 <z_cbvprintf_impl+0x122>
	++sp;
   1a7ac:	1c5a      	adds	r2, r3, #1
   1a7ae:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
   1a7b0:	785a      	ldrb	r2, [r3, #1]
   1a7b2:	2a2a      	cmp	r2, #42	; 0x2a
   1a7b4:	f040 8083 	bne.w	1a8be <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
   1a7b8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   1a7bc:	3302      	adds	r3, #2
		conv->prec_star = true;
   1a7be:	f042 0204 	orr.w	r2, r2, #4
   1a7c2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
   1a7c6:	781a      	ldrb	r2, [r3, #0]
   1a7c8:	2a6c      	cmp	r2, #108	; 0x6c
   1a7ca:	f000 80a4 	beq.w	1a916 <z_cbvprintf_impl+0x272>
   1a7ce:	f200 8086 	bhi.w	1a8de <z_cbvprintf_impl+0x23a>
   1a7d2:	2a68      	cmp	r2, #104	; 0x68
   1a7d4:	f000 808c 	beq.w	1a8f0 <z_cbvprintf_impl+0x24c>
   1a7d8:	2a6a      	cmp	r2, #106	; 0x6a
   1a7da:	f000 80a5 	beq.w	1a928 <z_cbvprintf_impl+0x284>
   1a7de:	2a4c      	cmp	r2, #76	; 0x4c
   1a7e0:	f000 80aa 	beq.w	1a938 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
   1a7e4:	461a      	mov	r2, r3
   1a7e6:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
   1a7ea:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
   1a7ec:	9204      	str	r2, [sp, #16]
   1a7ee:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a7f2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
   1a7f6:	f200 8117 	bhi.w	1aa28 <z_cbvprintf_impl+0x384>
   1a7fa:	2b6d      	cmp	r3, #109	; 0x6d
   1a7fc:	f200 80a9 	bhi.w	1a952 <z_cbvprintf_impl+0x2ae>
   1a800:	2b69      	cmp	r3, #105	; 0x69
   1a802:	f200 8111 	bhi.w	1aa28 <z_cbvprintf_impl+0x384>
   1a806:	2b57      	cmp	r3, #87	; 0x57
   1a808:	f200 80be 	bhi.w	1a988 <z_cbvprintf_impl+0x2e4>
   1a80c:	2b41      	cmp	r3, #65	; 0x41
   1a80e:	d003      	beq.n	1a818 <z_cbvprintf_impl+0x174>
   1a810:	3b45      	subs	r3, #69	; 0x45
   1a812:	2b02      	cmp	r3, #2
   1a814:	f200 8108 	bhi.w	1aa28 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
   1a818:	2204      	movs	r2, #4
   1a81a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a81e:	f362 0302 	bfi	r3, r2, #0, #3
   1a822:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
   1a826:	2301      	movs	r3, #1
			break;
   1a828:	e0ca      	b.n	1a9c0 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
   1a82a:	1cba      	adds	r2, r7, #2
   1a82c:	9204      	str	r2, [sp, #16]
   1a82e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   1a832:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1a836:	07da      	lsls	r2, r3, #31
   1a838:	f140 80fd 	bpl.w	1aa36 <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
   1a83c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   1a840:	f1b9 0f00 	cmp.w	r9, #0
   1a844:	da07      	bge.n	1a856 <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
   1a846:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
   1a84a:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
   1a84e:	f042 0204 	orr.w	r2, r2, #4
   1a852:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
   1a856:	075e      	lsls	r6, r3, #29
   1a858:	f140 80f6 	bpl.w	1aa48 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
   1a85c:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
   1a860:	f1bb 0f00 	cmp.w	fp, #0
   1a864:	f280 80f5 	bge.w	1aa52 <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
   1a868:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1a86c:	f36f 0341 	bfc	r3, #1, #1
   1a870:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   1a874:	f04f 3bff 	mov.w	fp, #4294967295
   1a878:	e0eb      	b.n	1aa52 <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
   1a87a:	2a2d      	cmp	r2, #45	; 0x2d
   1a87c:	d00d      	beq.n	1a89a <z_cbvprintf_impl+0x1f6>
   1a87e:	2a30      	cmp	r2, #48	; 0x30
   1a880:	f47f af44 	bne.w	1a70c <z_cbvprintf_impl+0x68>
   1a884:	2301      	movs	r3, #1
	} while (loop);
   1a886:	e733      	b.n	1a6f0 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
   1a888:	f04f 0c01 	mov.w	ip, #1
   1a88c:	e730      	b.n	1a6f0 <z_cbvprintf_impl+0x4c>
   1a88e:	f04f 0e01 	mov.w	lr, #1
   1a892:	e72d      	b.n	1a6f0 <z_cbvprintf_impl+0x4c>
   1a894:	f04f 0801 	mov.w	r8, #1
   1a898:	e72a      	b.n	1a6f0 <z_cbvprintf_impl+0x4c>
   1a89a:	2001      	movs	r0, #1
   1a89c:	e728      	b.n	1a6f0 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
   1a89e:	a809      	add	r0, sp, #36	; 0x24
   1a8a0:	f7ff fe9e 	bl	1a5e0 <extract_decimal>
	if (sp != wp) {
   1a8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a8a6:	42b3      	cmp	r3, r6
   1a8a8:	f43f af74 	beq.w	1a794 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
   1a8ac:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
   1a8b0:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   1a8b2:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
   1a8b4:	f360 0241 	bfi	r2, r0, #1, #1
   1a8b8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1a8bc:	e76a      	b.n	1a794 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
   1a8be:	a809      	add	r0, sp, #36	; 0x24
   1a8c0:	f7ff fe8e 	bl	1a5e0 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1a8c4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
   1a8c8:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   1a8ca:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1a8ce:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   1a8d2:	f362 0341 	bfi	r3, r2, #1, #1
   1a8d6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
   1a8da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a8dc:	e773      	b.n	1a7c6 <z_cbvprintf_impl+0x122>
	switch (*sp) {
   1a8de:	2a74      	cmp	r2, #116	; 0x74
   1a8e0:	d026      	beq.n	1a930 <z_cbvprintf_impl+0x28c>
   1a8e2:	2a7a      	cmp	r2, #122	; 0x7a
   1a8e4:	f47f af7e 	bne.w	1a7e4 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
   1a8e8:	2106      	movs	r1, #6
   1a8ea:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a8ee:	e00c      	b.n	1a90a <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
   1a8f0:	785a      	ldrb	r2, [r3, #1]
   1a8f2:	2a68      	cmp	r2, #104	; 0x68
   1a8f4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a8f8:	d106      	bne.n	1a908 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
   1a8fa:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1a8fc:	f361 02c6 	bfi	r2, r1, #3, #4
   1a900:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   1a904:	3302      	adds	r3, #2
   1a906:	e76d      	b.n	1a7e4 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
   1a908:	2102      	movs	r1, #2
   1a90a:	f361 02c6 	bfi	r2, r1, #3, #4
   1a90e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   1a912:	3301      	adds	r3, #1
   1a914:	e766      	b.n	1a7e4 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
   1a916:	785a      	ldrb	r2, [r3, #1]
   1a918:	2a6c      	cmp	r2, #108	; 0x6c
   1a91a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a91e:	d101      	bne.n	1a924 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
   1a920:	2104      	movs	r1, #4
   1a922:	e7eb      	b.n	1a8fc <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
   1a924:	2103      	movs	r1, #3
   1a926:	e7f0      	b.n	1a90a <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
   1a928:	2105      	movs	r1, #5
   1a92a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a92e:	e7ec      	b.n	1a90a <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
   1a930:	2107      	movs	r1, #7
   1a932:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1a936:	e7e8      	b.n	1a90a <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
   1a938:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1a93c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   1a940:	f022 0202 	bic.w	r2, r2, #2
   1a944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1a948:	f042 0202 	orr.w	r2, r2, #2
   1a94c:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   1a950:	e7df      	b.n	1a912 <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
   1a952:	3b6e      	subs	r3, #110	; 0x6e
   1a954:	b2d9      	uxtb	r1, r3
   1a956:	2301      	movs	r3, #1
   1a958:	408b      	lsls	r3, r1
   1a95a:	f240 4182 	movw	r1, #1154	; 0x482
   1a95e:	420b      	tst	r3, r1
   1a960:	d138      	bne.n	1a9d4 <z_cbvprintf_impl+0x330>
   1a962:	f013 0f24 	tst.w	r3, #36	; 0x24
   1a966:	d152      	bne.n	1aa0e <z_cbvprintf_impl+0x36a>
   1a968:	07d8      	lsls	r0, r3, #31
   1a96a:	d55d      	bpl.n	1aa28 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
   1a96c:	2103      	movs	r1, #3
   1a96e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a972:	f361 0302 	bfi	r3, r1, #0, #3
   1a976:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a97a:	f002 0378 	and.w	r3, r2, #120	; 0x78
   1a97e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   1a982:	424b      	negs	r3, r1
   1a984:	414b      	adcs	r3, r1
   1a986:	e01b      	b.n	1a9c0 <z_cbvprintf_impl+0x31c>
   1a988:	2001      	movs	r0, #1
	switch (conv->specifier) {
   1a98a:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   1a98e:	b2c9      	uxtb	r1, r1
   1a990:	fa00 f101 	lsl.w	r1, r0, r1
   1a994:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   1a998:	f47f af3e 	bne.w	1a818 <z_cbvprintf_impl+0x174>
   1a99c:	f640 0601 	movw	r6, #2049	; 0x801
   1a9a0:	4231      	tst	r1, r6
   1a9a2:	d11d      	bne.n	1a9e0 <z_cbvprintf_impl+0x33c>
   1a9a4:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   1a9a8:	d03e      	beq.n	1aa28 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
   1a9aa:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a9ae:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a9b2:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1a9b6:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   1a9b8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a9bc:	d034      	beq.n	1aa28 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
   1a9be:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   1a9c0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   1a9c4:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1a9c8:	430b      	orrs	r3, r1
   1a9ca:	f363 0241 	bfi	r2, r3, #1, #1
   1a9ce:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   1a9d2:	e72e      	b.n	1a832 <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
   1a9d4:	2102      	movs	r1, #2
   1a9d6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a9da:	f361 0302 	bfi	r3, r1, #0, #3
   1a9de:	e7e8      	b.n	1a9b2 <z_cbvprintf_impl+0x30e>
   1a9e0:	2002      	movs	r0, #2
   1a9e2:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a9e6:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1a9ea:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a9ee:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   1a9f0:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   1a9f4:	bf02      	ittt	eq
   1a9f6:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   1a9fa:	f041 0101 	orreq.w	r1, r1, #1
   1a9fe:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   1aa02:	2b63      	cmp	r3, #99	; 0x63
   1aa04:	d1db      	bne.n	1a9be <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1aa06:	1e13      	subs	r3, r2, #0
   1aa08:	bf18      	it	ne
   1aa0a:	2301      	movne	r3, #1
   1aa0c:	e7d8      	b.n	1a9c0 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
   1aa0e:	2103      	movs	r1, #3
   1aa10:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   1aa14:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1aa18:	f361 0302 	bfi	r3, r1, #0, #3
   1aa1c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   1aa20:	bf14      	ite	ne
   1aa22:	2301      	movne	r3, #1
   1aa24:	2300      	moveq	r3, #0
   1aa26:	e7cb      	b.n	1a9c0 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
   1aa28:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1aa2c:	f043 0301 	orr.w	r3, r3, #1
   1aa30:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   1aa34:	e7c3      	b.n	1a9be <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
   1aa36:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   1aa3a:	2a00      	cmp	r2, #0
		int width = -1;
   1aa3c:	bfac      	ite	ge
   1aa3e:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
   1aa42:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
   1aa46:	e706      	b.n	1a856 <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
   1aa48:	0798      	lsls	r0, r3, #30
   1aa4a:	f57f af13 	bpl.w	1a874 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
   1aa4e:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   1aa52:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1aa54:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
   1aa58:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
   1aa5c:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
   1aa60:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1aa64:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1aa66:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1aa6a:	d133      	bne.n	1aad4 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
   1aa6c:	1ecb      	subs	r3, r1, #3
   1aa6e:	2b04      	cmp	r3, #4
   1aa70:	d804      	bhi.n	1aa7c <z_cbvprintf_impl+0x3d8>
   1aa72:	e8df f003 	tbb	[pc, r3]
   1aa76:	4621      	.short	0x4621
   1aa78:	2146      	.short	0x2146
   1aa7a:	21          	.byte	0x21
   1aa7b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   1aa7c:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   1aa7e:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   1aa80:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1aa84:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   1aa88:	d11c      	bne.n	1aac4 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
   1aa8a:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   1aa8e:	17da      	asrs	r2, r3, #31
   1aa90:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   1aa94:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   1aa96:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1aa9a:	f013 0603 	ands.w	r6, r3, #3
   1aa9e:	d050      	beq.n	1ab42 <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
   1aaa0:	463a      	mov	r2, r7
   1aaa2:	4650      	mov	r0, sl
   1aaa4:	9b04      	ldr	r3, [sp, #16]
   1aaa6:	9903      	ldr	r1, [sp, #12]
   1aaa8:	f00d f848 	bl	27b3c <outs>
   1aaac:	2800      	cmp	r0, #0
   1aaae:	f2c0 814f 	blt.w	1ad50 <z_cbvprintf_impl+0x6ac>
   1aab2:	4405      	add	r5, r0
			continue;
   1aab4:	9f04      	ldr	r7, [sp, #16]
   1aab6:	e5fd      	b.n	1a6b4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1aab8:	f854 3b04 	ldr.w	r3, [r4], #4
   1aabc:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   1aabe:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
   1aac2:	e7e8      	b.n	1aa96 <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
   1aac4:	2902      	cmp	r1, #2
   1aac6:	d1e5      	bne.n	1aa94 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
   1aac8:	b21a      	sxth	r2, r3
   1aaca:	f343 33c0 	sbfx	r3, r3, #15, #1
   1aace:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1aad2:	e7df      	b.n	1aa94 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1aad4:	2b02      	cmp	r3, #2
   1aad6:	d124      	bne.n	1ab22 <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
   1aad8:	1ecb      	subs	r3, r1, #3
   1aada:	2b04      	cmp	r3, #4
   1aadc:	d804      	bhi.n	1aae8 <z_cbvprintf_impl+0x444>
   1aade:	e8df f003 	tbb	[pc, r3]
   1aae2:	1018      	.short	0x1018
   1aae4:	1810      	.short	0x1810
   1aae6:	18          	.byte	0x18
   1aae7:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   1aae8:	2901      	cmp	r1, #1
   1aaea:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
   1aaee:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1aaf2:	d014      	beq.n	1ab1e <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
   1aaf4:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   1aaf6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   1aafa:	d1cc      	bne.n	1aa96 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
   1aafc:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   1aafe:	9310      	str	r3, [sp, #64]	; 0x40
   1ab00:	e7c9      	b.n	1aa96 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
   1ab02:	3407      	adds	r4, #7
   1ab04:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   1ab08:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1ab0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   1ab10:	e7c1      	b.n	1aa96 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
   1ab12:	f854 3b04 	ldr.w	r3, [r4], #4
   1ab16:	9310      	str	r3, [sp, #64]	; 0x40
   1ab18:	2300      	movs	r3, #0
   1ab1a:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   1ab1c:	e7bb      	b.n	1aa96 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
   1ab1e:	b2db      	uxtb	r3, r3
   1ab20:	e7cd      	b.n	1aabe <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
   1ab22:	2b04      	cmp	r3, #4
   1ab24:	d108      	bne.n	1ab38 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
   1ab26:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   1ab28:	f024 0407 	bic.w	r4, r4, #7
   1ab2c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ab30:	3408      	adds	r4, #8
   1ab32:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1ab36:	e7ae      	b.n	1aa96 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1ab38:	2b03      	cmp	r3, #3
   1ab3a:	d1ac      	bne.n	1aa96 <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
   1ab3c:	f854 3b04 	ldr.w	r3, [r4], #4
   1ab40:	e7dd      	b.n	1aafe <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
   1ab42:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1ab46:	2878      	cmp	r0, #120	; 0x78
   1ab48:	d8b4      	bhi.n	1aab4 <z_cbvprintf_impl+0x410>
   1ab4a:	2862      	cmp	r0, #98	; 0x62
   1ab4c:	d81c      	bhi.n	1ab88 <z_cbvprintf_impl+0x4e4>
   1ab4e:	2825      	cmp	r0, #37	; 0x25
   1ab50:	f43f adb8 	beq.w	1a6c4 <z_cbvprintf_impl+0x20>
   1ab54:	2858      	cmp	r0, #88	; 0x58
   1ab56:	d1ad      	bne.n	1aab4 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
   1ab58:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1ab5c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1ab60:	9300      	str	r3, [sp, #0]
   1ab62:	aa12      	add	r2, sp, #72	; 0x48
   1ab64:	ab0a      	add	r3, sp, #40	; 0x28
   1ab66:	f7ff fd51 	bl	1a60c <encode_uint>
			if (precision >= 0) {
   1ab6a:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   1ab6e:	4607      	mov	r7, r0
			if (precision >= 0) {
   1ab70:	f280 8097 	bge.w	1aca2 <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
   1ab74:	2f00      	cmp	r7, #0
   1ab76:	d09d      	beq.n	1aab4 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
   1ab78:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
   1ab7c:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
   1ab80:	2e00      	cmp	r6, #0
   1ab82:	d04e      	beq.n	1ac22 <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
   1ab84:	3001      	adds	r0, #1
   1ab86:	e04c      	b.n	1ac22 <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
   1ab88:	3863      	subs	r0, #99	; 0x63
   1ab8a:	2815      	cmp	r0, #21
   1ab8c:	d892      	bhi.n	1aab4 <z_cbvprintf_impl+0x410>
   1ab8e:	a201      	add	r2, pc, #4	; (adr r2, 1ab94 <z_cbvprintf_impl+0x4f0>)
   1ab90:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1ab94:	0001ac13 	.word	0x0001ac13
   1ab98:	0001ac79 	.word	0x0001ac79
   1ab9c:	0001aab5 	.word	0x0001aab5
   1aba0:	0001aab5 	.word	0x0001aab5
   1aba4:	0001aab5 	.word	0x0001aab5
   1aba8:	0001aab5 	.word	0x0001aab5
   1abac:	0001ac79 	.word	0x0001ac79
   1abb0:	0001aab5 	.word	0x0001aab5
   1abb4:	0001aab5 	.word	0x0001aab5
   1abb8:	0001aab5 	.word	0x0001aab5
   1abbc:	0001aab5 	.word	0x0001aab5
   1abc0:	0001ad01 	.word	0x0001ad01
   1abc4:	0001ac9d 	.word	0x0001ac9d
   1abc8:	0001acc3 	.word	0x0001acc3
   1abcc:	0001aab5 	.word	0x0001aab5
   1abd0:	0001aab5 	.word	0x0001aab5
   1abd4:	0001abed 	.word	0x0001abed
   1abd8:	0001aab5 	.word	0x0001aab5
   1abdc:	0001ac9d 	.word	0x0001ac9d
   1abe0:	0001aab5 	.word	0x0001aab5
   1abe4:	0001aab5 	.word	0x0001aab5
   1abe8:	0001ac9d 	.word	0x0001ac9d
			if (precision >= 0) {
   1abec:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
   1abf0:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
   1abf2:	db0a      	blt.n	1ac0a <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
   1abf4:	4659      	mov	r1, fp
   1abf6:	4638      	mov	r0, r7
   1abf8:	f010 fcb5 	bl	2b566 <strnlen>
			bpe = bps + len;
   1abfc:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
   1ac00:	2f00      	cmp	r7, #0
   1ac02:	f43f af57 	beq.w	1aab4 <z_cbvprintf_impl+0x410>
		char sign = 0;
   1ac06:	2600      	movs	r6, #0
   1ac08:	e00b      	b.n	1ac22 <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
   1ac0a:	4638      	mov	r0, r7
   1ac0c:	f7fe f9ee 	bl	18fec <strlen>
   1ac10:	e7f4      	b.n	1abfc <z_cbvprintf_impl+0x558>
		char sign = 0;
   1ac12:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
   1ac14:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1ac16:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
   1ac18:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1ac1c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
   1ac20:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
   1ac22:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1ac26:	f013 0210 	ands.w	r2, r3, #16
   1ac2a:	9205      	str	r2, [sp, #20]
   1ac2c:	f000 8083 	beq.w	1ad36 <z_cbvprintf_impl+0x692>
			nj_len += 2U;
   1ac30:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   1ac32:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   1ac34:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
   1ac38:	bf48      	it	mi
   1ac3a:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   1ac3c:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
   1ac3e:	bf48      	it	mi
   1ac40:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   1ac42:	f1b9 0f00 	cmp.w	r9, #0
   1ac46:	f340 8090 	ble.w	1ad6a <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
   1ac4a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   1ac4e:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
   1ac52:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1ac56:	0750      	lsls	r0, r2, #29
   1ac58:	9306      	str	r3, [sp, #24]
   1ac5a:	f100 8086 	bmi.w	1ad6a <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
   1ac5e:	0651      	lsls	r1, r2, #25
   1ac60:	d579      	bpl.n	1ad56 <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
   1ac62:	b13e      	cbz	r6, 1ac74 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   1ac64:	4630      	mov	r0, r6
   1ac66:	9903      	ldr	r1, [sp, #12]
   1ac68:	47d0      	blx	sl
   1ac6a:	2800      	cmp	r0, #0
   1ac6c:	db70      	blt.n	1ad50 <z_cbvprintf_impl+0x6ac>
   1ac6e:	9b06      	ldr	r3, [sp, #24]
   1ac70:	3501      	adds	r5, #1
   1ac72:	461e      	mov	r6, r3
					pad = '0';
   1ac74:	2230      	movs	r2, #48	; 0x30
   1ac76:	e06f      	b.n	1ad58 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
   1ac78:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   1ac7a:	bf5a      	itte	pl
   1ac7c:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   1ac80:	015e      	lslpl	r6, r3, #5
				sign = '+';
   1ac82:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
   1ac84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
   1ac88:	2b00      	cmp	r3, #0
   1ac8a:	f6bf af65 	bge.w	1ab58 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
   1ac8e:	4252      	negs	r2, r2
   1ac90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   1ac94:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1ac96:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1ac9a:	e75d      	b.n	1ab58 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
   1ac9c:	2600      	movs	r6, #0
   1ac9e:	e75b      	b.n	1ab58 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
   1aca0:	2600      	movs	r6, #0
				conv->flag_zero = false;
   1aca2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   1aca6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1acaa:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   1acac:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1acb0:	459b      	cmp	fp, r3
				conv->flag_zero = false;
   1acb2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   1acb6:	f67f af5d 	bls.w	1ab74 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
   1acba:	ebab 0303 	sub.w	r3, fp, r3
   1acbe:	9313      	str	r3, [sp, #76]	; 0x4c
   1acc0:	e758      	b.n	1ab74 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
   1acc2:	9810      	ldr	r0, [sp, #64]	; 0x40
   1acc4:	b380      	cbz	r0, 1ad28 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1acc6:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
   1acca:	ab0a      	add	r3, sp, #40	; 0x28
   1accc:	2100      	movs	r1, #0
   1acce:	f8cd 8000 	str.w	r8, [sp]
   1acd2:	aa12      	add	r2, sp, #72	; 0x48
   1acd4:	f7ff fc9a 	bl	1a60c <encode_uint>
				conv->altform_0c = true;
   1acd8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
   1acdc:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
   1ace0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1ace4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1ace8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1acec:	4607      	mov	r7, r0
				conv->altform_0c = true;
   1acee:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
   1acf2:	dad5      	bge.n	1aca0 <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
   1acf4:	2800      	cmp	r0, #0
   1acf6:	f43f aedd 	beq.w	1aab4 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
   1acfa:	eba8 0000 	sub.w	r0, r8, r0
   1acfe:	e782      	b.n	1ac06 <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
   1ad00:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   1ad02:	2907      	cmp	r1, #7
   1ad04:	f63f aed6 	bhi.w	1aab4 <z_cbvprintf_impl+0x410>
   1ad08:	e8df f001 	tbb	[pc, r1]
   1ad0c:	0c06040c 	.word	0x0c06040c
   1ad10:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   1ad14:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   1ad16:	e6cd      	b.n	1aab4 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
   1ad18:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   1ad1a:	e6cb      	b.n	1aab4 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
   1ad1c:	17ea      	asrs	r2, r5, #31
   1ad1e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   1ad22:	e6c7      	b.n	1aab4 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1ad24:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   1ad26:	e6c5      	b.n	1aab4 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
   1ad28:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1ade8 <z_cbvprintf_impl+0x744>
		char sign = 0;
   1ad2c:	4606      	mov	r6, r0
   1ad2e:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
   1ad32:	2005      	movs	r0, #5
   1ad34:	e775      	b.n	1ac22 <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
   1ad36:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   1ad38:	bf48      	it	mi
   1ad3a:	3001      	addmi	r0, #1
   1ad3c:	e779      	b.n	1ac32 <z_cbvprintf_impl+0x58e>
					OUTC(pad);
   1ad3e:	4610      	mov	r0, r2
   1ad40:	9307      	str	r3, [sp, #28]
   1ad42:	9206      	str	r2, [sp, #24]
   1ad44:	9903      	ldr	r1, [sp, #12]
   1ad46:	47d0      	blx	sl
   1ad48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1ad4c:	2800      	cmp	r0, #0
   1ad4e:	da04      	bge.n	1ad5a <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
   1ad50:	b017      	add	sp, #92	; 0x5c
   1ad52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1ad56:	2220      	movs	r2, #32
					pad = '0';
   1ad58:	464b      	mov	r3, r9
				while (width-- > 0) {
   1ad5a:	4619      	mov	r1, r3
   1ad5c:	2900      	cmp	r1, #0
   1ad5e:	f103 33ff 	add.w	r3, r3, #4294967295
   1ad62:	dcec      	bgt.n	1ad3e <z_cbvprintf_impl+0x69a>
   1ad64:	444d      	add	r5, r9
   1ad66:	4699      	mov	r9, r3
   1ad68:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
   1ad6a:	b12e      	cbz	r6, 1ad78 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
   1ad6c:	4630      	mov	r0, r6
   1ad6e:	9903      	ldr	r1, [sp, #12]
   1ad70:	47d0      	blx	sl
   1ad72:	2800      	cmp	r0, #0
   1ad74:	dbec      	blt.n	1ad50 <z_cbvprintf_impl+0x6ac>
   1ad76:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1ad78:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1ad7c:	06da      	lsls	r2, r3, #27
   1ad7e:	d401      	bmi.n	1ad84 <z_cbvprintf_impl+0x6e0>
   1ad80:	071b      	lsls	r3, r3, #28
   1ad82:	d505      	bpl.n	1ad90 <z_cbvprintf_impl+0x6ec>
				OUTC('0');
   1ad84:	2030      	movs	r0, #48	; 0x30
   1ad86:	9903      	ldr	r1, [sp, #12]
   1ad88:	47d0      	blx	sl
   1ad8a:	2800      	cmp	r0, #0
   1ad8c:	dbe0      	blt.n	1ad50 <z_cbvprintf_impl+0x6ac>
   1ad8e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1ad90:	9b05      	ldr	r3, [sp, #20]
   1ad92:	b133      	cbz	r3, 1ada2 <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
   1ad94:	9903      	ldr	r1, [sp, #12]
   1ad96:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1ad9a:	47d0      	blx	sl
   1ad9c:	2800      	cmp	r0, #0
   1ad9e:	dbd7      	blt.n	1ad50 <z_cbvprintf_impl+0x6ac>
   1ada0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1ada2:	44ab      	add	fp, r5
   1ada4:	e005      	b.n	1adb2 <z_cbvprintf_impl+0x70e>
				OUTC('0');
   1ada6:	2030      	movs	r0, #48	; 0x30
   1ada8:	9903      	ldr	r1, [sp, #12]
   1adaa:	47d0      	blx	sl
   1adac:	2800      	cmp	r0, #0
   1adae:	dbcf      	blt.n	1ad50 <z_cbvprintf_impl+0x6ac>
   1adb0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1adb2:	ebab 0305 	sub.w	r3, fp, r5
   1adb6:	2b00      	cmp	r3, #0
   1adb8:	dcf5      	bgt.n	1ada6 <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
   1adba:	4643      	mov	r3, r8
   1adbc:	463a      	mov	r2, r7
   1adbe:	4650      	mov	r0, sl
   1adc0:	9903      	ldr	r1, [sp, #12]
   1adc2:	f00c febb 	bl	27b3c <outs>
   1adc6:	2800      	cmp	r0, #0
   1adc8:	dbc2      	blt.n	1ad50 <z_cbvprintf_impl+0x6ac>
   1adca:	4405      	add	r5, r0
		while (width > 0) {
   1adcc:	44a9      	add	r9, r5
   1adce:	eba9 0305 	sub.w	r3, r9, r5
   1add2:	2b00      	cmp	r3, #0
   1add4:	f77f ae6e 	ble.w	1aab4 <z_cbvprintf_impl+0x410>
			OUTC(' ');
   1add8:	2020      	movs	r0, #32
   1adda:	9903      	ldr	r1, [sp, #12]
   1addc:	47d0      	blx	sl
   1adde:	2800      	cmp	r0, #0
   1ade0:	dbb6      	blt.n	1ad50 <z_cbvprintf_impl+0x6ac>
   1ade2:	3501      	adds	r5, #1
			--width;
   1ade4:	e7f3      	b.n	1adce <z_cbvprintf_impl+0x72a>
   1ade6:	bf00      	nop
   1ade8:	0002cbbb 	.word	0x0002cbbb

0001adec <nordicsemi_nrf91_init>:
	__asm__ volatile(
   1adec:	f04f 0220 	mov.w	r2, #32
   1adf0:	f3ef 8311 	mrs	r3, BASEPRI
   1adf4:	f382 8812 	msr	BASEPRI_MAX, r2
   1adf8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1adfc:	2101      	movs	r1, #1
   1adfe:	4a04      	ldr	r2, [pc, #16]	; (1ae10 <nordicsemi_nrf91_init+0x24>)
   1ae00:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   1ae04:	f383 8811 	msr	BASEPRI, r3
   1ae08:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1ae0c:	2000      	movs	r0, #0
   1ae0e:	4770      	bx	lr
   1ae10:	40039000 	.word	0x40039000

0001ae14 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1ae14:	b120      	cbz	r0, 1ae20 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1ae16:	4b03      	ldr	r3, [pc, #12]	; (1ae24 <arch_busy_wait+0x10>)
   1ae18:	0180      	lsls	r0, r0, #6
   1ae1a:	f043 0301 	orr.w	r3, r3, #1
   1ae1e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1ae20:	4770      	bx	lr
   1ae22:	bf00      	nop
   1ae24:	0002beb0 	.word	0x0002beb0

0001ae28 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1ae28:	f006 bfa0 	b.w	21d6c <SystemInit>

0001ae2c <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   1ae2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ae30:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
   1ae32:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
   1ae34:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1ae38:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1ae8c <activate_foreach_backend+0x60>
	while (mask_cpy) {
   1ae3c:	b914      	cbnz	r4, 1ae44 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   1ae3e:	4638      	mov	r0, r7
   1ae40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   1ae44:	fa94 f5a4 	rbit	r5, r4
   1ae48:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   1ae4c:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1ae50:	012e      	lsls	r6, r5, #4
   1ae52:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   1ae56:	ea6f 0a03 	mvn.w	sl, r3
   1ae5a:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1ae5e:	7b2b      	ldrb	r3, [r5, #12]
   1ae60:	2b00      	cmp	r3, #0
   1ae62:	d0eb      	beq.n	1ae3c <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   1ae64:	f858 3006 	ldr.w	r3, [r8, r6]
   1ae68:	691b      	ldr	r3, [r3, #16]
   1ae6a:	b94b      	cbnz	r3, 1ae80 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   1ae6c:	4446      	add	r6, r8
			log_backend_enable(backend,
   1ae6e:	6873      	ldr	r3, [r6, #4]
   1ae70:	2204      	movs	r2, #4
   1ae72:	4628      	mov	r0, r5
   1ae74:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   1ae76:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   1ae7a:	f000 fa49 	bl	1b310 <log_backend_enable>
   1ae7e:	e7dd      	b.n	1ae3c <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   1ae80:	4628      	mov	r0, r5
   1ae82:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1ae84:	2800      	cmp	r0, #0
   1ae86:	d1d9      	bne.n	1ae3c <activate_foreach_backend+0x10>
   1ae88:	e7f0      	b.n	1ae6c <activate_foreach_backend+0x40>
   1ae8a:	bf00      	nop
   1ae8c:	0002be90 	.word	0x0002be90

0001ae90 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1ae90:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1ae92:	2200      	movs	r2, #0
{
   1ae94:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   1ae96:	490f      	ldr	r1, [pc, #60]	; (1aed4 <enable_logger+0x44>)
   1ae98:	480f      	ldr	r0, [pc, #60]	; (1aed8 <enable_logger+0x48>)
   1ae9a:	f010 f940 	bl	2b11e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ae9e:	2200      	movs	r2, #0
   1aea0:	2300      	movs	r3, #0
   1aea2:	2400      	movs	r4, #0
   1aea4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1aea8:	230e      	movs	r3, #14
   1aeaa:	4d0c      	ldr	r5, [pc, #48]	; (1aedc <enable_logger+0x4c>)
   1aeac:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1aeb0:	f44f 7240 	mov.w	r2, #768	; 0x300
   1aeb4:	4628      	mov	r0, r5
   1aeb6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1aeba:	4b09      	ldr	r3, [pc, #36]	; (1aee0 <enable_logger+0x50>)
   1aebc:	4909      	ldr	r1, [pc, #36]	; (1aee4 <enable_logger+0x54>)
   1aebe:	9400      	str	r4, [sp, #0]
   1aec0:	f00a f962 	bl	25188 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1aec4:	4908      	ldr	r1, [pc, #32]	; (1aee8 <enable_logger+0x58>)
   1aec6:	4628      	mov	r0, r5
   1aec8:	f00f fe8c 	bl	2abe4 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   1aecc:	4620      	mov	r0, r4
   1aece:	b009      	add	sp, #36	; 0x24
   1aed0:	bd30      	pop	{r4, r5, pc}
   1aed2:	bf00      	nop
   1aed4:	0001aeed 	.word	0x0001aeed
   1aed8:	2000cde8 	.word	0x2000cde8
   1aedc:	2000c958 	.word	0x2000c958
   1aee0:	0001b1bd 	.word	0x0001b1bd
   1aee4:	2000e058 	.word	0x2000e058
   1aee8:	0002cbc0 	.word	0x0002cbc0

0001aeec <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   1aeec:	4801      	ldr	r0, [pc, #4]	; (1aef4 <log_process_thread_timer_expiry_fn+0x8>)
   1aeee:	f00a bad9 	b.w	254a4 <z_impl_k_sem_give>
   1aef2:	bf00      	nop
   1aef4:	2000c8e4 	.word	0x2000c8e4

0001aef8 <z_log_init>:
{
   1aef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aefc:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   1aefe:	481f      	ldr	r0, [pc, #124]	; (1af7c <z_log_init+0x84>)
{
   1af00:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   1af02:	f00d f854 	bl	27fae <atomic_inc>
   1af06:	4606      	mov	r6, r0
   1af08:	2800      	cmp	r0, #0
   1af0a:	d030      	beq.n	1af6e <z_log_init+0x76>
	uint32_t mask = 0;
   1af0c:	2500      	movs	r5, #0
}
   1af0e:	4628      	mov	r0, r5
   1af10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   1af14:	7b23      	ldrb	r3, [r4, #12]
   1af16:	b173      	cbz	r3, 1af36 <z_log_init+0x3e>
	if (backend->api->init) {
   1af18:	6823      	ldr	r3, [r4, #0]
   1af1a:	68db      	ldr	r3, [r3, #12]
   1af1c:	b10b      	cbz	r3, 1af22 <z_log_init+0x2a>
		backend->api->init(backend);
   1af1e:	4620      	mov	r0, r4
   1af20:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   1af22:	6823      	ldr	r3, [r4, #0]
   1af24:	691b      	ldr	r3, [r3, #16]
   1af26:	b9d3      	cbnz	r3, 1af5e <z_log_init+0x66>
				log_backend_enable(backend,
   1af28:	6863      	ldr	r3, [r4, #4]
   1af2a:	2204      	movs	r2, #4
   1af2c:	4620      	mov	r0, r4
   1af2e:	6819      	ldr	r1, [r3, #0]
   1af30:	f000 f9ee 	bl	1b310 <log_backend_enable>
			i++;
   1af34:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1af36:	3410      	adds	r4, #16
   1af38:	454c      	cmp	r4, r9
   1af3a:	d3eb      	bcc.n	1af14 <z_log_init+0x1c>
	if (blocking) {
   1af3c:	f1b8 0f00 	cmp.w	r8, #0
   1af40:	d0e5      	beq.n	1af0e <z_log_init+0x16>
		while (mask) {
   1af42:	2d00      	cmp	r5, #0
   1af44:	d0e2      	beq.n	1af0c <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   1af46:	4628      	mov	r0, r5
   1af48:	f7ff ff70 	bl	1ae2c <activate_foreach_backend>
   1af4c:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   1af4e:	2f00      	cmp	r7, #0
   1af50:	d0f7      	beq.n	1af42 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   1af52:	2100      	movs	r1, #0
   1af54:	f44f 70a4 	mov.w	r0, #328	; 0x148
   1af58:	f00a ff52 	bl	25e00 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   1af5c:	e7f1      	b.n	1af42 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   1af5e:	4620      	mov	r0, r4
   1af60:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   1af62:	2800      	cmp	r0, #0
   1af64:	d0e0      	beq.n	1af28 <z_log_init+0x30>
				mask |= BIT(i);
   1af66:	fa0a f306 	lsl.w	r3, sl, r6
   1af6a:	431d      	orrs	r5, r3
   1af6c:	e7e2      	b.n	1af34 <z_log_init+0x3c>
	uint32_t mask = 0;
   1af6e:	4605      	mov	r5, r0
				mask |= BIT(i);
   1af70:	f04f 0a01 	mov.w	sl, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1af74:	4c02      	ldr	r4, [pc, #8]	; (1af80 <z_log_init+0x88>)
   1af76:	f8df 900c 	ldr.w	r9, [pc, #12]	; 1af84 <z_log_init+0x8c>
   1af7a:	e7dd      	b.n	1af38 <z_log_init+0x40>
   1af7c:	2000d15c 	.word	0x2000d15c
   1af80:	0002be90 	.word	0x0002be90
   1af84:	0002bea0 	.word	0x0002bea0

0001af88 <log_format_func_t_get>:
}
   1af88:	4b01      	ldr	r3, [pc, #4]	; (1af90 <log_format_func_t_get+0x8>)
   1af8a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1af8e:	4770      	bx	lr
   1af90:	0002becc 	.word	0x0002becc

0001af94 <log_set_timestamp_func>:
{
   1af94:	b508      	push	{r3, lr}
   1af96:	4603      	mov	r3, r0
   1af98:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   1af9a:	b12b      	cbz	r3, 1afa8 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   1af9c:	4a04      	ldr	r2, [pc, #16]	; (1afb0 <log_set_timestamp_func+0x1c>)
   1af9e:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   1afa0:	f000 fc3e 	bl	1b820 <log_output_timestamp_freq_set>
	return 0;
   1afa4:	2000      	movs	r0, #0
}
   1afa6:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1afa8:	f06f 0015 	mvn.w	r0, #21
   1afac:	e7fb      	b.n	1afa6 <log_set_timestamp_func+0x12>
   1afae:	bf00      	nop
   1afb0:	2000c584 	.word	0x2000c584

0001afb4 <z_log_notify_backend_enabled>:
{
   1afb4:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   1afb6:	4c04      	ldr	r4, [pc, #16]	; (1afc8 <z_log_notify_backend_enabled+0x14>)
   1afb8:	7823      	ldrb	r3, [r4, #0]
   1afba:	b913      	cbnz	r3, 1afc2 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   1afbc:	4803      	ldr	r0, [pc, #12]	; (1afcc <z_log_notify_backend_enabled+0x18>)
   1afbe:	f00a fa71 	bl	254a4 <z_impl_k_sem_give>
	backend_attached = true;
   1afc2:	2301      	movs	r3, #1
   1afc4:	7023      	strb	r3, [r4, #0]
}
   1afc6:	bd10      	pop	{r4, pc}
   1afc8:	2000dafa 	.word	0x2000dafa
   1afcc:	2000c8e4 	.word	0x2000c8e4

0001afd0 <z_log_dropped>:
{
   1afd0:	b510      	push	{r4, lr}
   1afd2:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   1afd4:	4806      	ldr	r0, [pc, #24]	; (1aff0 <z_log_dropped+0x20>)
   1afd6:	f00c ffea 	bl	27fae <atomic_inc>
	if (buffered) {
   1afda:	b13c      	cbz	r4, 1afec <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1afdc:	4b05      	ldr	r3, [pc, #20]	; (1aff4 <z_log_dropped+0x24>)
   1afde:	e8d3 1fef 	ldaex	r1, [r3]
   1afe2:	3901      	subs	r1, #1
   1afe4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1afe8:	2a00      	cmp	r2, #0
   1afea:	d1f8      	bne.n	1afde <z_log_dropped+0xe>
}
   1afec:	bd10      	pop	{r4, pc}
   1afee:	bf00      	nop
   1aff0:	2000d154 	.word	0x2000d154
   1aff4:	2000d158 	.word	0x2000d158

0001aff8 <z_log_dropped_read_and_clear>:
}
   1aff8:	2000      	movs	r0, #0
   1affa:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1affc:	4b03      	ldr	r3, [pc, #12]	; (1b00c <z_log_dropped_read_and_clear+0x14>)
   1affe:	e8d3 0fef 	ldaex	r0, [r3]
   1b002:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1b006:	2a00      	cmp	r2, #0
   1b008:	d1f9      	bne.n	1affe <z_log_dropped_read_and_clear+0x6>
   1b00a:	4770      	bx	lr
   1b00c:	2000d154 	.word	0x2000d154

0001b010 <dropped_notify>:
{
   1b010:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   1b012:	f7ff fff1 	bl	1aff8 <z_log_dropped_read_and_clear>
   1b016:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1b018:	4c07      	ldr	r4, [pc, #28]	; (1b038 <dropped_notify+0x28>)
   1b01a:	4e08      	ldr	r6, [pc, #32]	; (1b03c <dropped_notify+0x2c>)
   1b01c:	42b4      	cmp	r4, r6
   1b01e:	d300      	bcc.n	1b022 <dropped_notify+0x12>
}
   1b020:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1b022:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1b024:	795b      	ldrb	r3, [r3, #5]
   1b026:	b12b      	cbz	r3, 1b034 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   1b028:	6823      	ldr	r3, [r4, #0]
   1b02a:	685b      	ldr	r3, [r3, #4]
   1b02c:	b113      	cbz	r3, 1b034 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   1b02e:	4629      	mov	r1, r5
   1b030:	4620      	mov	r0, r4
   1b032:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1b034:	3410      	adds	r4, #16
   1b036:	e7f1      	b.n	1b01c <dropped_notify+0xc>
   1b038:	0002be90 	.word	0x0002be90
   1b03c:	0002bea0 	.word	0x0002bea0

0001b040 <z_log_msg_init>:
{
   1b040:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   1b042:	4c04      	ldr	r4, [pc, #16]	; (1b054 <z_log_msg_init+0x14>)
   1b044:	4904      	ldr	r1, [pc, #16]	; (1b058 <z_log_msg_init+0x18>)
   1b046:	4620      	mov	r0, r4
   1b048:	f00c fe3c 	bl	27cc4 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   1b04c:	4b03      	ldr	r3, [pc, #12]	; (1b05c <z_log_msg_init+0x1c>)
   1b04e:	601c      	str	r4, [r3, #0]
}
   1b050:	bd10      	pop	{r4, pc}
   1b052:	bf00      	nop
   1b054:	2000c7d8 	.word	0x2000c7d8
   1b058:	0002beb8 	.word	0x0002beb8
   1b05c:	2000d14c 	.word	0x2000d14c

0001b060 <log_core_init>:
{
   1b060:	b508      	push	{r3, lr}
	panic_mode = false;
   1b062:	2300      	movs	r3, #0
   1b064:	4a06      	ldr	r2, [pc, #24]	; (1b080 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
   1b066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
   1b06a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   1b06c:	4a05      	ldr	r2, [pc, #20]	; (1b084 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   1b06e:	4806      	ldr	r0, [pc, #24]	; (1b088 <log_core_init+0x28>)
	dropped_cnt = 0;
   1b070:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   1b072:	f7ff ff8f 	bl	1af94 <log_set_timestamp_func>
}
   1b076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   1b07a:	f7ff bfe1 	b.w	1b040 <z_log_msg_init>
   1b07e:	bf00      	nop
   1b080:	2000dafb 	.word	0x2000dafb
   1b084:	2000d154 	.word	0x2000d154
   1b088:	00027fab 	.word	0x00027fab

0001b08c <z_log_msg_alloc>:
{
   1b08c:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   1b08e:	2200      	movs	r2, #0
   1b090:	2300      	movs	r3, #0
   1b092:	4801      	ldr	r0, [pc, #4]	; (1b098 <z_log_msg_alloc+0xc>)
   1b094:	f00c be37 	b.w	27d06 <mpsc_pbuf_alloc>
   1b098:	2000c7d8 	.word	0x2000c7d8

0001b09c <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   1b09c:	4801      	ldr	r0, [pc, #4]	; (1b0a4 <z_log_msg_local_claim+0x8>)
   1b09e:	f00c bed0 	b.w	27e42 <mpsc_pbuf_claim>
   1b0a2:	bf00      	nop
   1b0a4:	2000c7d8 	.word	0x2000c7d8

0001b0a8 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   1b0a8:	4b02      	ldr	r3, [pc, #8]	; (1b0b4 <z_log_msg_free+0xc>)
{
   1b0aa:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   1b0ac:	6818      	ldr	r0, [r3, #0]
   1b0ae:	f00c bf18 	b.w	27ee2 <mpsc_pbuf_free>
   1b0b2:	bf00      	nop
   1b0b4:	2000d14c 	.word	0x2000d14c

0001b0b8 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   1b0b8:	4801      	ldr	r0, [pc, #4]	; (1b0c0 <z_log_msg_pending+0x8>)
   1b0ba:	f00c bf46 	b.w	27f4a <mpsc_pbuf_is_pending>
   1b0be:	bf00      	nop
   1b0c0:	2000c7d8 	.word	0x2000c7d8

0001b0c4 <z_impl_log_process>:
{
   1b0c4:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   1b0c6:	4b26      	ldr	r3, [pc, #152]	; (1b160 <z_impl_log_process+0x9c>)
   1b0c8:	7818      	ldrb	r0, [r3, #0]
   1b0ca:	2800      	cmp	r0, #0
   1b0cc:	d047      	beq.n	1b15e <z_impl_log_process+0x9a>
	return z_log_msg_local_claim();
   1b0ce:	f7ff ffe5 	bl	1b09c <z_log_msg_local_claim>
	if (msg) {
   1b0d2:	4605      	mov	r5, r0
   1b0d4:	b170      	cbz	r0, 1b0f4 <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1b0d6:	4b23      	ldr	r3, [pc, #140]	; (1b164 <z_impl_log_process+0xa0>)
   1b0d8:	e8d3 1fef 	ldaex	r1, [r3]
   1b0dc:	3901      	subs	r1, #1
   1b0de:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1b0e2:	2a00      	cmp	r2, #0
   1b0e4:	d1f8      	bne.n	1b0d8 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1b0e6:	4c20      	ldr	r4, [pc, #128]	; (1b168 <z_impl_log_process+0xa4>)
   1b0e8:	4e20      	ldr	r6, [pc, #128]	; (1b16c <z_impl_log_process+0xa8>)
   1b0ea:	42b4      	cmp	r4, r6
   1b0ec:	d32d      	bcc.n	1b14a <z_impl_log_process+0x86>
		z_log_msg_free(msg);
   1b0ee:	4628      	mov	r0, r5
   1b0f0:	f7ff ffda 	bl	1b0a8 <z_log_msg_free>
	return dropped_cnt > 0;
   1b0f4:	4b1e      	ldr	r3, [pc, #120]	; (1b170 <z_impl_log_process+0xac>)
   1b0f6:	4c1f      	ldr	r4, [pc, #124]	; (1b174 <z_impl_log_process+0xb0>)
		if ((dropped_pend || unordered_pend) &&
   1b0f8:	681b      	ldr	r3, [r3, #0]
   1b0fa:	2b00      	cmp	r3, #0
   1b0fc:	dd19      	ble.n	1b132 <z_impl_log_process+0x6e>
	return z_impl_k_uptime_ticks();
   1b0fe:	f00f ffe6 	bl	2b0ce <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1b102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b106:	fba0 0302 	umull	r0, r3, r0, r2
   1b10a:	fb02 3101 	mla	r1, r2, r1, r3
   1b10e:	0bc3      	lsrs	r3, r0, #15
   1b110:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   1b114:	e9d4 2000 	ldrd	r2, r0, [r4]
   1b118:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
   1b11a:	f240 32e9 	movw	r2, #1001	; 0x3e9
   1b11e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   1b122:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   1b126:	4293      	cmp	r3, r2
   1b128:	f171 0100 	sbcs.w	r1, r1, #0
   1b12c:	d301      	bcc.n	1b132 <z_impl_log_process+0x6e>
				dropped_notify();
   1b12e:	f7ff ff6f 	bl	1b010 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   1b132:	e9d4 3200 	ldrd	r3, r2, [r4]
   1b136:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   1b13a:	f142 0200 	adc.w	r2, r2, #0
   1b13e:	e9c4 3200 	strd	r3, r2, [r4]
}
   1b142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   1b146:	f7ff bfb7 	b.w	1b0b8 <z_log_msg_pending>
	return backend->cb->active;
   1b14a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   1b14c:	795b      	ldrb	r3, [r3, #5]
   1b14e:	b123      	cbz	r3, 1b15a <z_impl_log_process+0x96>
	backend->api->process(backend, msg);
   1b150:	6823      	ldr	r3, [r4, #0]
   1b152:	4629      	mov	r1, r5
   1b154:	4620      	mov	r0, r4
   1b156:	681b      	ldr	r3, [r3, #0]
   1b158:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1b15a:	3410      	adds	r4, #16
   1b15c:	e7c5      	b.n	1b0ea <z_impl_log_process+0x26>
}
   1b15e:	bd70      	pop	{r4, r5, r6, pc}
   1b160:	2000dafa 	.word	0x2000dafa
   1b164:	2000d158 	.word	0x2000d158
   1b168:	0002be90 	.word	0x0002be90
   1b16c:	0002bea0 	.word	0x0002bea0
   1b170:	2000d154 	.word	0x2000d154
   1b174:	2000cde0 	.word	0x2000cde0

0001b178 <z_impl_log_panic>:
{
   1b178:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   1b17a:	4d0d      	ldr	r5, [pc, #52]	; (1b1b0 <z_impl_log_panic+0x38>)
   1b17c:	7829      	ldrb	r1, [r5, #0]
   1b17e:	b961      	cbnz	r1, 1b19a <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   1b180:	2001      	movs	r0, #1
   1b182:	f7ff feb9 	bl	1aef8 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1b186:	4c0b      	ldr	r4, [pc, #44]	; (1b1b4 <z_impl_log_panic+0x3c>)
   1b188:	4e0b      	ldr	r6, [pc, #44]	; (1b1b8 <z_impl_log_panic+0x40>)
   1b18a:	42b4      	cmp	r4, r6
   1b18c:	d306      	bcc.n	1b19c <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   1b18e:	f7ff ff99 	bl	1b0c4 <z_impl_log_process>
		while (log_process() == true) {
   1b192:	2800      	cmp	r0, #0
   1b194:	d1fb      	bne.n	1b18e <z_impl_log_panic+0x16>
	panic_mode = true;
   1b196:	2301      	movs	r3, #1
   1b198:	702b      	strb	r3, [r5, #0]
}
   1b19a:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   1b19c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1b19e:	795b      	ldrb	r3, [r3, #5]
   1b1a0:	b11b      	cbz	r3, 1b1aa <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   1b1a2:	6823      	ldr	r3, [r4, #0]
   1b1a4:	4620      	mov	r0, r4
   1b1a6:	689b      	ldr	r3, [r3, #8]
   1b1a8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1b1aa:	3410      	adds	r4, #16
   1b1ac:	e7ed      	b.n	1b18a <z_impl_log_panic+0x12>
   1b1ae:	bf00      	nop
   1b1b0:	2000dafb 	.word	0x2000dafb
   1b1b4:	0002be90 	.word	0x0002be90
   1b1b8:	0002bea0 	.word	0x0002bea0

0001b1bc <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   1b1bc:	2100      	movs	r1, #0
{
   1b1be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   1b1c2:	4608      	mov	r0, r1
   1b1c4:	f7ff fe98 	bl	1aef8 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1b1c8:	4604      	mov	r4, r0
   1b1ca:	b348      	cbz	r0, 1b220 <log_process_thread_func+0x64>
   1b1cc:	f240 6867 	movw	r8, #1639	; 0x667
   1b1d0:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   1b1d4:	f00a fe2e 	bl	25e34 <z_impl_z_current_get>
	proc_tid = process_tid;
   1b1d8:	4b1a      	ldr	r3, [pc, #104]	; (1b244 <log_process_thread_func+0x88>)
   1b1da:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1b1dc:	b130      	cbz	r0, 1b1ec <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   1b1de:	4b1a      	ldr	r3, [pc, #104]	; (1b248 <log_process_thread_func+0x8c>)
	    process_tid &&
   1b1e0:	681b      	ldr	r3, [r3, #0]
   1b1e2:	2b09      	cmp	r3, #9
   1b1e4:	dd02      	ble.n	1b1ec <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   1b1e6:	4819      	ldr	r0, [pc, #100]	; (1b24c <log_process_thread_func+0x90>)
   1b1e8:	f00a f95c 	bl	254a4 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1b1ec:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1b1ee:	4f18      	ldr	r7, [pc, #96]	; (1b250 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   1b1f0:	f8df a058 	ldr.w	sl, [pc, #88]	; 1b24c <log_process_thread_func+0x90>
		if (activate_mask) {
   1b1f4:	b144      	cbz	r4, 1b208 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   1b1f6:	4620      	mov	r0, r4
   1b1f8:	f7ff fe18 	bl	1ae2c <activate_foreach_backend>
			if (!activate_mask) {
   1b1fc:	4604      	mov	r4, r0
   1b1fe:	b918      	cbnz	r0, 1b208 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   1b200:	f04f 38ff 	mov.w	r8, #4294967295
   1b204:	f04f 39ff 	mov.w	r9, #4294967295
   1b208:	f7ff ff5c 	bl	1b0c4 <z_impl_log_process>
		if (log_process() == false) {
   1b20c:	4606      	mov	r6, r0
   1b20e:	b928      	cbnz	r0, 1b21c <log_process_thread_func+0x60>
			if (processed_any) {
   1b210:	b9b5      	cbnz	r5, 1b240 <log_process_thread_func+0x84>
   1b212:	4642      	mov	r2, r8
   1b214:	464b      	mov	r3, r9
   1b216:	4650      	mov	r0, sl
   1b218:	f00a f96a 	bl	254f0 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1b21c:	4635      	mov	r5, r6
   1b21e:	e7e9      	b.n	1b1f4 <log_process_thread_func+0x38>
   1b220:	f04f 38ff 	mov.w	r8, #4294967295
   1b224:	f04f 39ff 	mov.w	r9, #4294967295
   1b228:	e7d4      	b.n	1b1d4 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   1b22a:	682b      	ldr	r3, [r5, #0]
   1b22c:	699b      	ldr	r3, [r3, #24]
   1b22e:	b11b      	cbz	r3, 1b238 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   1b230:	2200      	movs	r2, #0
   1b232:	4628      	mov	r0, r5
   1b234:	4611      	mov	r1, r2
   1b236:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1b238:	3510      	adds	r5, #16
   1b23a:	42bd      	cmp	r5, r7
   1b23c:	d3f5      	bcc.n	1b22a <log_process_thread_func+0x6e>
   1b23e:	e7e8      	b.n	1b212 <log_process_thread_func+0x56>
   1b240:	4d04      	ldr	r5, [pc, #16]	; (1b254 <log_process_thread_func+0x98>)
   1b242:	e7fa      	b.n	1b23a <log_process_thread_func+0x7e>
   1b244:	2000d150 	.word	0x2000d150
   1b248:	2000d158 	.word	0x2000d158
   1b24c:	2000c8e4 	.word	0x2000c8e4
   1b250:	0002bea0 	.word	0x0002bea0
   1b254:	0002be90 	.word	0x0002be90

0001b258 <z_log_msg_post_finalize>:
{
   1b258:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   1b25a:	4818      	ldr	r0, [pc, #96]	; (1b2bc <z_log_msg_post_finalize+0x64>)
   1b25c:	f00c fea7 	bl	27fae <atomic_inc>
	if (panic_mode) {
   1b260:	4b17      	ldr	r3, [pc, #92]	; (1b2c0 <z_log_msg_post_finalize+0x68>)
   1b262:	781b      	ldrb	r3, [r3, #0]
   1b264:	b17b      	cbz	r3, 1b286 <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
   1b266:	f04f 0320 	mov.w	r3, #32
   1b26a:	f3ef 8411 	mrs	r4, BASEPRI
   1b26e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b272:	f3bf 8f6f 	isb	sy
   1b276:	f7ff ff25 	bl	1b0c4 <z_impl_log_process>
	__asm__ volatile(
   1b27a:	f384 8811 	msr	BASEPRI, r4
   1b27e:	f3bf 8f6f 	isb	sy
}
   1b282:	b002      	add	sp, #8
   1b284:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   1b286:	4b0f      	ldr	r3, [pc, #60]	; (1b2c4 <z_log_msg_post_finalize+0x6c>)
   1b288:	681b      	ldr	r3, [r3, #0]
   1b28a:	2b00      	cmp	r3, #0
   1b28c:	d0f9      	beq.n	1b282 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   1b28e:	b950      	cbnz	r0, 1b2a6 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   1b290:	2200      	movs	r2, #0
   1b292:	2300      	movs	r3, #0
   1b294:	480c      	ldr	r0, [pc, #48]	; (1b2c8 <z_log_msg_post_finalize+0x70>)
   1b296:	e9cd 2300 	strd	r2, r3, [sp]
   1b29a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1b29e:	2300      	movs	r3, #0
   1b2a0:	f00b f806 	bl	262b0 <z_impl_k_timer_start>
   1b2a4:	e7ed      	b.n	1b282 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1b2a6:	280a      	cmp	r0, #10
   1b2a8:	d1eb      	bne.n	1b282 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   1b2aa:	4807      	ldr	r0, [pc, #28]	; (1b2c8 <z_log_msg_post_finalize+0x70>)
   1b2ac:	f00f ff43 	bl	2b136 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1b2b0:	4806      	ldr	r0, [pc, #24]	; (1b2cc <z_log_msg_post_finalize+0x74>)
}
   1b2b2:	b002      	add	sp, #8
   1b2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b2b8:	f00a b8f4 	b.w	254a4 <z_impl_k_sem_give>
   1b2bc:	2000d158 	.word	0x2000d158
   1b2c0:	2000dafb 	.word	0x2000dafb
   1b2c4:	2000d150 	.word	0x2000d150
   1b2c8:	2000cde8 	.word	0x2000cde8
   1b2cc:	2000c8e4 	.word	0x2000c8e4

0001b2d0 <z_log_msg_commit>:
{
   1b2d0:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   1b2d2:	4b06      	ldr	r3, [pc, #24]	; (1b2ec <z_log_msg_commit+0x1c>)
{
   1b2d4:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1b2d6:	681b      	ldr	r3, [r3, #0]
   1b2d8:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   1b2da:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   1b2dc:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   1b2de:	4804      	ldr	r0, [pc, #16]	; (1b2f0 <z_log_msg_commit+0x20>)
   1b2e0:	f00c fd8f 	bl	27e02 <mpsc_pbuf_commit>
}
   1b2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   1b2e8:	f7ff bfb6 	b.w	1b258 <z_log_msg_post_finalize>
   1b2ec:	2000c584 	.word	0x2000c584
   1b2f0:	2000c7d8 	.word	0x2000c7d8

0001b2f4 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   1b2f4:	4a04      	ldr	r2, [pc, #16]	; (1b308 <log_source_name_get+0x14>)
   1b2f6:	4b05      	ldr	r3, [pc, #20]	; (1b30c <log_source_name_get+0x18>)
   1b2f8:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   1b2fa:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   1b2fe:	bf34      	ite	cc
   1b300:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   1b304:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   1b306:	4770      	bx	lr
   1b308:	0002bd58 	.word	0x0002bd58
   1b30c:	0002be90 	.word	0x0002be90

0001b310 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1b310:	4b08      	ldr	r3, [pc, #32]	; (1b334 <log_backend_enable+0x24>)
{
   1b312:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   1b314:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
   1b316:	6844      	ldr	r4, [r0, #4]
   1b318:	111b      	asrs	r3, r3, #4
   1b31a:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   1b31c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   1b31e:	6843      	ldr	r3, [r0, #4]
   1b320:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
   1b322:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   1b324:	6843      	ldr	r3, [r0, #4]
   1b326:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   1b328:	6843      	ldr	r3, [r0, #4]
   1b32a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   1b32c:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
   1b32e:	f7ff be41 	b.w	1afb4 <z_log_notify_backend_enabled>
   1b332:	bf00      	nop
   1b334:	0002be90 	.word	0x0002be90

0001b338 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   1b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1b33c:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   1b340:	b08f      	sub	sp, #60	; 0x3c
   1b342:	f3c1 2649 	ubfx	r6, r1, #9, #10
   1b346:	460d      	mov	r5, r1
   1b348:	4690      	mov	r8, r2
   1b34a:	4699      	mov	r9, r3
   1b34c:	9005      	str	r0, [sp, #20]
   1b34e:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   1b350:	2e00      	cmp	r6, #0
   1b352:	d03c      	beq.n	1b3ce <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
   1b354:	f04f 0b04 	mov.w	fp, #4
   1b358:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
   1b35c:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
   1b35e:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   1b360:	4631      	mov	r1, r6
   1b362:	ab0b      	add	r3, sp, #44	; 0x2c
   1b364:	4640      	mov	r0, r8
   1b366:	f8cd b008 	str.w	fp, [sp, #8]
   1b36a:	9701      	str	r7, [sp, #4]
   1b36c:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
   1b370:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
   1b374:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   1b376:	9607      	str	r6, [sp, #28]
   1b378:	f7fe fd92 	bl	19ea0 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   1b37c:	f3c0 0309 	ubfx	r3, r0, #0, #10
   1b380:	1918      	adds	r0, r3, r4
   1b382:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1b386:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   1b388:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1b38a:	f363 2552 	bfi	r5, r3, #9, #10
   1b38e:	9306      	str	r3, [sp, #24]
   1b390:	f7ff fe7c 	bl	1b08c <z_log_msg_alloc>
		if (msg) {
   1b394:	4604      	mov	r4, r0
   1b396:	b178      	cbz	r0, 1b3b8 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
   1b398:	2200      	movs	r2, #0
   1b39a:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   1b39c:	3010      	adds	r0, #16
   1b39e:	900b      	str	r0, [sp, #44]	; 0x2c
   1b3a0:	930c      	str	r3, [sp, #48]	; 0x30
   1b3a2:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   1b3a4:	4640      	mov	r0, r8
   1b3a6:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   1b3aa:	4a0c      	ldr	r2, [pc, #48]	; (1b3dc <z_impl_z_log_msg_static_create+0xa4>)
   1b3ac:	9907      	ldr	r1, [sp, #28]
   1b3ae:	f8cd a000 	str.w	sl, [sp]
   1b3b2:	ab0b      	add	r3, sp, #44	; 0x2c
   1b3b4:	f7fe fd74 	bl	19ea0 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   1b3b8:	f366 2552 	bfi	r5, r6, #9, #10
   1b3bc:	464b      	mov	r3, r9
   1b3be:	462a      	mov	r2, r5
   1b3c0:	4620      	mov	r0, r4
   1b3c2:	9905      	ldr	r1, [sp, #20]
}
   1b3c4:	b00f      	add	sp, #60	; 0x3c
   1b3c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   1b3ca:	f00c be22 	b.w	28012 <z_log_msg_finalize>
   1b3ce:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1b3d2:	0880      	lsrs	r0, r0, #2
   1b3d4:	f7ff fe5a 	bl	1b08c <z_log_msg_alloc>
   1b3d8:	4604      	mov	r4, r0
   1b3da:	e7ed      	b.n	1b3b8 <z_impl_z_log_msg_static_create+0x80>
   1b3dc:	00027fe7 	.word	0x00027fe7

0001b3e0 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   1b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3e4:	b087      	sub	sp, #28
   1b3e6:	4604      	mov	r4, r0
   1b3e8:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   1b3ec:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   1b3f0:	460f      	mov	r7, r1
   1b3f2:	4693      	mov	fp, r2
   1b3f4:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   1b3f6:	b3b6      	cbz	r6, 1b466 <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   1b3f8:	2110      	movs	r1, #16
   1b3fa:	4633      	mov	r3, r6
   1b3fc:	4652      	mov	r2, sl
   1b3fe:	2000      	movs	r0, #0
   1b400:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
   1b404:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   1b408:	f7fe fb76 	bl	19af8 <cbvprintf_package>
   1b40c:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   1b40e:	4b17      	ldr	r3, [pc, #92]	; (1b46c <z_impl_z_log_msg_runtime_vcreate+0x8c>)
   1b410:	f004 0407 	and.w	r4, r4, #7
   1b414:	f00b 0b07 	and.w	fp, fp, #7
   1b418:	00e4      	lsls	r4, r4, #3
   1b41a:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1b41e:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
   1b422:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
   1b426:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1b428:	4408      	add	r0, r1
	struct log_msg_desc desc =
   1b42a:	4b11      	ldr	r3, [pc, #68]	; (1b470 <z_impl_z_log_msg_runtime_vcreate+0x90>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1b42c:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   1b430:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   1b434:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   1b436:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1b438:	9103      	str	r1, [sp, #12]
		msg = z_log_msg_alloc(msg_wlen);
   1b43a:	f7ff fe27 	bl	1b08c <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   1b43e:	4605      	mov	r5, r0
   1b440:	b140      	cbz	r0, 1b454 <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   1b442:	b13e      	cbz	r6, 1b454 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   1b444:	4633      	mov	r3, r6
   1b446:	4652      	mov	r2, sl
   1b448:	9903      	ldr	r1, [sp, #12]
   1b44a:	f8cd 9000 	str.w	r9, [sp]
   1b44e:	3010      	adds	r0, #16
   1b450:	f7fe fb52 	bl	19af8 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   1b454:	4643      	mov	r3, r8
   1b456:	4622      	mov	r2, r4
   1b458:	4639      	mov	r1, r7
   1b45a:	4628      	mov	r0, r5
	}
}
   1b45c:	b007      	add	sp, #28
   1b45e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   1b462:	f00c bdd6 	b.w	28012 <z_log_msg_finalize>
		plen = 0;
   1b466:	4631      	mov	r1, r6
   1b468:	e7d1      	b.n	1b40e <z_impl_z_log_msg_runtime_vcreate+0x2e>
   1b46a:	bf00      	nop
   1b46c:	0007fe00 	.word	0x0007fe00
   1b470:	7ff80000 	.word	0x7ff80000

0001b474 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1b474:	b40e      	push	{r1, r2, r3}
   1b476:	b503      	push	{r0, r1, lr}
   1b478:	ab03      	add	r3, sp, #12
   1b47a:	f853 2b04 	ldr.w	r2, [r3], #4
   1b47e:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1b480:	4804      	ldr	r0, [pc, #16]	; (1b494 <print_formatted+0x20>)
	va_start(args, fmt);
   1b482:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1b484:	f00c fdec 	bl	28060 <cbvprintf>
	va_end(args);

	return length;
}
   1b488:	b002      	add	sp, #8
   1b48a:	f85d eb04 	ldr.w	lr, [sp], #4
   1b48e:	b003      	add	sp, #12
   1b490:	4770      	bx	lr
   1b492:	bf00      	nop
   1b494:	00028089 	.word	0x00028089

0001b498 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1b498:	06ca      	lsls	r2, r1, #27
   1b49a:	d405      	bmi.n	1b4a8 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1b49c:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   1b49e:	bf4c      	ite	mi
   1b4a0:	4902      	ldrmi	r1, [pc, #8]	; (1b4ac <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   1b4a2:	4903      	ldrpl	r1, [pc, #12]	; (1b4b0 <newline_print+0x18>)
   1b4a4:	f7ff bfe6 	b.w	1b474 <print_formatted>
	}
}
   1b4a8:	4770      	bx	lr
   1b4aa:	bf00      	nop
   1b4ac:	0002e981 	.word	0x0002e981
   1b4b0:	0002e980 	.word	0x0002e980

0001b4b4 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   1b4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4b8:	b089      	sub	sp, #36	; 0x24
   1b4ba:	469a      	mov	sl, r3
   1b4bc:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
   1b4c0:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
   1b4c4:	9305      	str	r3, [sp, #20]
   1b4c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b4c8:	4604      	mov	r4, r0
   1b4ca:	460d      	mov	r5, r1
   1b4cc:	9e16      	ldr	r6, [sp, #88]	; 0x58
   1b4ce:	9206      	str	r2, [sp, #24]
   1b4d0:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   1b4d2:	f1bb 0f00 	cmp.w	fp, #0
   1b4d6:	f000 8085 	beq.w	1b5e4 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1b4da:	f006 0308 	and.w	r3, r6, #8
   1b4de:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   1b4e0:	f00c fd7f 	bl	27fe2 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   1b4e4:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
   1b4e8:	4602      	mov	r2, r0
   1b4ea:	2800      	cmp	r0, #0
   1b4ec:	d049      	beq.n	1b582 <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
   1b4ee:	4620      	mov	r0, r4
   1b4f0:	4985      	ldr	r1, [pc, #532]	; (1b708 <log_output_process+0x254>)
   1b4f2:	f7ff ffbf 	bl	1b474 <print_formatted>
   1b4f6:	4680      	mov	r8, r0
	if (stamp) {
   1b4f8:	f1b9 0f00 	cmp.w	r9, #0
   1b4fc:	d008      	beq.n	1b510 <log_output_process+0x5c>
	if (!format) {
   1b4fe:	f016 0f44 	tst.w	r6, #68	; 0x44
   1b502:	d140      	bne.n	1b586 <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
   1b504:	462a      	mov	r2, r5
   1b506:	4620      	mov	r0, r4
   1b508:	4980      	ldr	r1, [pc, #512]	; (1b70c <log_output_process+0x258>)
   1b50a:	f7ff ffb3 	bl	1b474 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   1b50e:	4480      	add	r8, r0
	if (color) {
   1b510:	f006 0301 	and.w	r3, r6, #1
   1b514:	b153      	cbz	r3, 1b52c <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
   1b516:	4b7e      	ldr	r3, [pc, #504]	; (1b710 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
   1b518:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
   1b51a:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
   1b51e:	4b7d      	ldr	r3, [pc, #500]	; (1b714 <log_output_process+0x260>)
   1b520:	497d      	ldr	r1, [pc, #500]	; (1b718 <log_output_process+0x264>)
   1b522:	2a00      	cmp	r2, #0
   1b524:	bf08      	it	eq
   1b526:	461a      	moveq	r2, r3
   1b528:	f7ff ffa4 	bl	1b474 <print_formatted>
	if (level_on) {
   1b52c:	f006 0308 	and.w	r3, r6, #8
   1b530:	2b00      	cmp	r3, #0
   1b532:	d054      	beq.n	1b5de <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
   1b534:	4b79      	ldr	r3, [pc, #484]	; (1b71c <log_output_process+0x268>)
   1b536:	4620      	mov	r0, r4
   1b538:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
   1b53c:	4978      	ldr	r1, [pc, #480]	; (1b720 <log_output_process+0x26c>)
   1b53e:	f7ff ff99 	bl	1b474 <print_formatted>
   1b542:	4605      	mov	r5, r0
	if (domain) {
   1b544:	9b06      	ldr	r3, [sp, #24]
   1b546:	b12b      	cbz	r3, 1b554 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
   1b548:	461a      	mov	r2, r3
   1b54a:	4620      	mov	r0, r4
   1b54c:	4975      	ldr	r1, [pc, #468]	; (1b724 <log_output_process+0x270>)
   1b54e:	f7ff ff91 	bl	1b474 <print_formatted>
   1b552:	4405      	add	r5, r0
	if (source) {
   1b554:	f1ba 0f00 	cmp.w	sl, #0
   1b558:	d005      	beq.n	1b566 <log_output_process+0xb2>
		total += print_formatted(output,
   1b55a:	4652      	mov	r2, sl
   1b55c:	4620      	mov	r0, r4
   1b55e:	4972      	ldr	r1, [pc, #456]	; (1b728 <log_output_process+0x274>)
   1b560:	f7ff ff88 	bl	1b474 <print_formatted>
   1b564:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   1b566:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   1b568:	2f00      	cmp	r7, #0
   1b56a:	d149      	bne.n	1b600 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   1b56c:	9b04      	ldr	r3, [sp, #16]
   1b56e:	2b00      	cmp	r3, #0
   1b570:	d14f      	bne.n	1b612 <log_output_process+0x15e>
	if (color) {
   1b572:	07f3      	lsls	r3, r6, #31
   1b574:	f100 80c1 	bmi.w	1b6fa <log_output_process+0x246>
	newline_print(output, flags);
   1b578:	4631      	mov	r1, r6
   1b57a:	4620      	mov	r0, r4
   1b57c:	f7ff ff8c 	bl	1b498 <newline_print>
}
   1b580:	e0b5      	b.n	1b6ee <log_output_process+0x23a>
	uint32_t length = 0U;
   1b582:	4680      	mov	r8, r0
   1b584:	e7b8      	b.n	1b4f8 <log_output_process+0x44>
	} else if (freq != 0U) {
   1b586:	4b69      	ldr	r3, [pc, #420]	; (1b72c <log_output_process+0x278>)
   1b588:	6818      	ldr	r0, [r3, #0]
   1b58a:	2800      	cmp	r0, #0
   1b58c:	d0bf      	beq.n	1b50e <log_output_process+0x5a>
		timestamp /= timestamp_div;
   1b58e:	4b68      	ldr	r3, [pc, #416]	; (1b730 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   1b590:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
   1b594:	681b      	ldr	r3, [r3, #0]
   1b596:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1b59a:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   1b59e:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   1b5a2:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
   1b5a6:	fb09 f505 	mul.w	r5, r9, r5
   1b5aa:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1b5ae:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
   1b5b2:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   1b5b6:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1b5ba:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
   1b5be:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1b5c2:	fb09 f505 	mul.w	r5, r9, r5
   1b5c6:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   1b5ca:	fb0c 1113 	mls	r1, ip, r3, r1
   1b5ce:	4620      	mov	r0, r4
   1b5d0:	9100      	str	r1, [sp, #0]
   1b5d2:	e9cd e501 	strd	lr, r5, [sp, #4]
   1b5d6:	4957      	ldr	r1, [pc, #348]	; (1b734 <log_output_process+0x280>)
   1b5d8:	f7ff ff4c 	bl	1b474 <print_formatted>
   1b5dc:	e797      	b.n	1b50e <log_output_process+0x5a>
	int total = 0;
   1b5de:	f006 0508 	and.w	r5, r6, #8
   1b5e2:	e7af      	b.n	1b544 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1b5e4:	f1ba 0f01 	cmp.w	sl, #1
   1b5e8:	d106      	bne.n	1b5f8 <log_output_process+0x144>
	if (package) {
   1b5ea:	2f00      	cmp	r7, #0
   1b5ec:	d165      	bne.n	1b6ba <log_output_process+0x206>
	if (data_len) {
   1b5ee:	9b04      	ldr	r3, [sp, #16]
   1b5f0:	2b00      	cmp	r3, #0
   1b5f2:	d07c      	beq.n	1b6ee <log_output_process+0x23a>
		prefix_offset = 0;
   1b5f4:	2500      	movs	r5, #0
   1b5f6:	e00c      	b.n	1b612 <log_output_process+0x15e>
	if (package) {
   1b5f8:	2f00      	cmp	r7, #0
   1b5fa:	d0f8      	beq.n	1b5ee <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1b5fc:	484e      	ldr	r0, [pc, #312]	; (1b738 <log_output_process+0x284>)
   1b5fe:	e05d      	b.n	1b6bc <log_output_process+0x208>
		cb = out_func;
   1b600:	484e      	ldr	r0, [pc, #312]	; (1b73c <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   1b602:	463b      	mov	r3, r7
   1b604:	4622      	mov	r2, r4
   1b606:	494e      	ldr	r1, [pc, #312]	; (1b740 <log_output_process+0x28c>)
   1b608:	f00b ff4d 	bl	274a6 <cbpprintf_external>
	if (data_len) {
   1b60c:	9b04      	ldr	r3, [sp, #16]
   1b60e:	2b00      	cmp	r3, #0
   1b610:	d069      	beq.n	1b6e6 <log_output_process+0x232>
		print_formatted(output, " ");
   1b612:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1b744 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
   1b616:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1b748 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1b61a:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
   1b61c:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1b61e:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   1b620:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1b622:	bf28      	it	cs
   1b624:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
   1b626:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
   1b62a:	f7ff ff35 	bl	1b498 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   1b62e:	4555      	cmp	r5, sl
   1b630:	dc46      	bgt.n	1b6c0 <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
   1b632:	9b05      	ldr	r3, [sp, #20]
   1b634:	4649      	mov	r1, r9
   1b636:	4620      	mov	r0, r4
   1b638:	781a      	ldrb	r2, [r3, #0]
   1b63a:	f7ff ff1b 	bl	1b474 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b63e:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
   1b642:	f01a 0f07 	tst.w	sl, #7
   1b646:	d103      	bne.n	1b650 <log_output_process+0x19c>
			print_formatted(output, " ");
   1b648:	4641      	mov	r1, r8
   1b64a:	4620      	mov	r0, r4
   1b64c:	f7ff ff12 	bl	1b474 <print_formatted>
		if (i < length) {
   1b650:	4557      	cmp	r7, sl
   1b652:	d93c      	bls.n	1b6ce <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
   1b654:	9b05      	ldr	r3, [sp, #20]
   1b656:	4649      	mov	r1, r9
   1b658:	4620      	mov	r0, r4
   1b65a:	f813 200a 	ldrb.w	r2, [r3, sl]
   1b65e:	f7ff ff09 	bl	1b474 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b662:	f10a 0a01 	add.w	sl, sl, #1
   1b666:	f1ba 0f10 	cmp.w	sl, #16
   1b66a:	d1ea      	bne.n	1b642 <log_output_process+0x18e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b66c:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
   1b670:	4620      	mov	r0, r4
   1b672:	4936      	ldr	r1, [pc, #216]	; (1b74c <log_output_process+0x298>)
   1b674:	f7ff fefe 	bl	1b474 <print_formatted>
		if (i < length) {
   1b678:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
   1b67a:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
   1b67c:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
   1b67e:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
   1b680:	4b33      	ldr	r3, [pc, #204]	; (1b750 <log_output_process+0x29c>)
   1b682:	5c99      	ldrb	r1, [r3, r2]
   1b684:	f011 0f97 	tst.w	r1, #151	; 0x97
   1b688:	bf08      	it	eq
   1b68a:	222e      	moveq	r2, #46	; 0x2e
   1b68c:	4931      	ldr	r1, [pc, #196]	; (1b754 <log_output_process+0x2a0>)
   1b68e:	f7ff fef1 	bl	1b474 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1b692:	f10a 0a01 	add.w	sl, sl, #1
   1b696:	f1ba 0f10 	cmp.w	sl, #16
   1b69a:	d01d      	beq.n	1b6d8 <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
   1b69c:	f01a 0f07 	tst.w	sl, #7
   1b6a0:	d103      	bne.n	1b6aa <log_output_process+0x1f6>
			print_formatted(output, " ");
   1b6a2:	4641      	mov	r1, r8
   1b6a4:	4620      	mov	r0, r4
   1b6a6:	f7ff fee5 	bl	1b474 <print_formatted>
		if (i < length) {
   1b6aa:	4557      	cmp	r7, sl
   1b6ac:	4652      	mov	r2, sl
   1b6ae:	d8e4      	bhi.n	1b67a <log_output_process+0x1c6>
			print_formatted(output, " ");
   1b6b0:	4641      	mov	r1, r8
   1b6b2:	4620      	mov	r0, r4
   1b6b4:	f7ff fede 	bl	1b474 <print_formatted>
   1b6b8:	e7eb      	b.n	1b692 <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1b6ba:	4820      	ldr	r0, [pc, #128]	; (1b73c <log_output_process+0x288>)
		prefix_offset = 0;
   1b6bc:	465d      	mov	r5, fp
   1b6be:	e7a0      	b.n	1b602 <log_output_process+0x14e>
		print_formatted(output, " ");
   1b6c0:	4641      	mov	r1, r8
   1b6c2:	4620      	mov	r0, r4
   1b6c4:	f7ff fed6 	bl	1b474 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1b6c8:	f10a 0a01 	add.w	sl, sl, #1
   1b6cc:	e7af      	b.n	1b62e <log_output_process+0x17a>
			print_formatted(output, "   ");
   1b6ce:	4620      	mov	r0, r4
   1b6d0:	4921      	ldr	r1, [pc, #132]	; (1b758 <log_output_process+0x2a4>)
   1b6d2:	f7ff fecf 	bl	1b474 <print_formatted>
   1b6d6:	e7c4      	b.n	1b662 <log_output_process+0x1ae>
		data += length;
   1b6d8:	9b05      	ldr	r3, [sp, #20]
   1b6da:	443b      	add	r3, r7
   1b6dc:	9305      	str	r3, [sp, #20]
	} while (len);
   1b6de:	9b04      	ldr	r3, [sp, #16]
   1b6e0:	1bdb      	subs	r3, r3, r7
   1b6e2:	9304      	str	r3, [sp, #16]
   1b6e4:	d199      	bne.n	1b61a <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   1b6e6:	f1bb 0f00 	cmp.w	fp, #0
   1b6ea:	f47f af42 	bne.w	1b572 <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   1b6ee:	4620      	mov	r0, r4
}
   1b6f0:	b009      	add	sp, #36	; 0x24
   1b6f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   1b6f6:	f00c bcba 	b.w	2806e <log_output_flush>
		print_formatted(output, "%s", log_color);
   1b6fa:	4620      	mov	r0, r4
   1b6fc:	4a05      	ldr	r2, [pc, #20]	; (1b714 <log_output_process+0x260>)
   1b6fe:	4906      	ldr	r1, [pc, #24]	; (1b718 <log_output_process+0x264>)
   1b700:	f7ff feb8 	bl	1b474 <print_formatted>
}
   1b704:	e738      	b.n	1b578 <log_output_process+0xc4>
   1b706:	bf00      	nop
   1b708:	0002cbda 	.word	0x0002cbda
   1b70c:	0002cbde 	.word	0x0002cbde
   1b710:	0002bedc 	.word	0x0002bedc
   1b714:	0002cbd5 	.word	0x0002cbd5
   1b718:	0002dc62 	.word	0x0002dc62
   1b71c:	0002bef0 	.word	0x0002bef0
   1b720:	0002cc03 	.word	0x0002cc03
   1b724:	0002cc09 	.word	0x0002cc09
   1b728:	0002cc0d 	.word	0x0002cc0d
   1b72c:	2000d164 	.word	0x2000d164
   1b730:	2000d160 	.word	0x2000d160
   1b734:	0002cbe7 	.word	0x0002cbe7
   1b738:	000280b7 	.word	0x000280b7
   1b73c:	00028089 	.word	0x00028089
   1b740:	00028061 	.word	0x00028061
   1b744:	0002cc1a 	.word	0x0002cc1a
   1b748:	0002cc12 	.word	0x0002cc12
   1b74c:	0002cc1c 	.word	0x0002cc1c
   1b750:	0002ec21 	.word	0x0002ec21
   1b754:	0002dd31 	.word	0x0002dd31
   1b758:	0002cc18 	.word	0x0002cc18

0001b75c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   1b75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   1b760:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   1b762:	684b      	ldr	r3, [r1, #4]
   1b764:	4605      	mov	r5, r0
   1b766:	460c      	mov	r4, r1
   1b768:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   1b76a:	688e      	ldr	r6, [r1, #8]
   1b76c:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
   1b76e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   1b772:	b15b      	cbz	r3, 1b78c <log_output_msg_process+0x30>
   1b774:	4a13      	ldr	r2, [pc, #76]	; (1b7c4 <log_output_msg_process+0x68>)
   1b776:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   1b778:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1b77c:	2900      	cmp	r1, #0
   1b77e:	db1f      	blt.n	1b7c0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   1b780:	7820      	ldrb	r0, [r4, #0]
   1b782:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   1b786:	f7ff fdb5 	bl	1b2f4 <log_source_name_get>
   1b78a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   1b78c:	4621      	mov	r1, r4
   1b78e:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
   1b792:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   1b794:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   1b798:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   1b79a:	eb01 0402 	add.w	r4, r1, r2
   1b79e:	bf08      	it	eq
   1b7a0:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
   1b7a2:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   1b7a6:	e9cd 0803 	strd	r0, r8, [sp, #12]
   1b7aa:	e9cd 1401 	strd	r1, r4, [sp, #4]
   1b7ae:	2200      	movs	r2, #0
   1b7b0:	4631      	mov	r1, r6
   1b7b2:	4628      	mov	r0, r5
   1b7b4:	9700      	str	r7, [sp, #0]
   1b7b6:	f7ff fe7d 	bl	1b4b4 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   1b7ba:	b006      	add	sp, #24
   1b7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1b7c0:	2300      	movs	r3, #0
   1b7c2:	e7e3      	b.n	1b78c <log_output_msg_process+0x30>
   1b7c4:	0002bd58 	.word	0x0002bd58

0001b7c8 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1b7c8:	f242 730f 	movw	r3, #9999	; 0x270f
{
   1b7cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1b7ce:	428b      	cmp	r3, r1
   1b7d0:	bf28      	it	cs
   1b7d2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   1b7d4:	6805      	ldr	r5, [r0, #0]
{
   1b7d6:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1b7d8:	2105      	movs	r1, #5
   1b7da:	4668      	mov	r0, sp
   1b7dc:	4a0d      	ldr	r2, [pc, #52]	; (1b814 <log_output_dropped_process+0x4c>)
   1b7de:	f00b fee9 	bl	275b4 <snprintk>
   1b7e2:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1b7e4:	6863      	ldr	r3, [r4, #4]
   1b7e6:	4628      	mov	r0, r5
   1b7e8:	220b      	movs	r2, #11
   1b7ea:	685b      	ldr	r3, [r3, #4]
   1b7ec:	490a      	ldr	r1, [pc, #40]	; (1b818 <log_output_dropped_process+0x50>)
   1b7ee:	f00c fc2a 	bl	28046 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   1b7f2:	6863      	ldr	r3, [r4, #4]
   1b7f4:	4632      	mov	r2, r6
   1b7f6:	4669      	mov	r1, sp
   1b7f8:	4628      	mov	r0, r5
   1b7fa:	685b      	ldr	r3, [r3, #4]
   1b7fc:	f00c fc23 	bl	28046 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1b800:	6863      	ldr	r3, [r4, #4]
   1b802:	221b      	movs	r2, #27
   1b804:	4628      	mov	r0, r5
   1b806:	685b      	ldr	r3, [r3, #4]
   1b808:	4904      	ldr	r1, [pc, #16]	; (1b81c <log_output_dropped_process+0x54>)
   1b80a:	f00c fc1c 	bl	28046 <buffer_write>
		     output->control_block->ctx);
}
   1b80e:	b002      	add	sp, #8
   1b810:	bd70      	pop	{r4, r5, r6, pc}
   1b812:	bf00      	nop
   1b814:	0002c8d1 	.word	0x0002c8d1
   1b818:	0002cc3a 	.word	0x0002cc3a
   1b81c:	0002cc1e 	.word	0x0002cc1e

0001b820 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1b820:	2100      	movs	r1, #0
   1b822:	2301      	movs	r3, #1
   1b824:	4a06      	ldr	r2, [pc, #24]	; (1b840 <log_output_timestamp_freq_set+0x20>)
   1b826:	4290      	cmp	r0, r2
   1b828:	d806      	bhi.n	1b838 <log_output_timestamp_freq_set+0x18>
   1b82a:	4a06      	ldr	r2, [pc, #24]	; (1b844 <log_output_timestamp_freq_set+0x24>)
   1b82c:	b901      	cbnz	r1, 1b830 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   1b82e:	2301      	movs	r3, #1
   1b830:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1b832:	4b05      	ldr	r3, [pc, #20]	; (1b848 <log_output_timestamp_freq_set+0x28>)
   1b834:	6018      	str	r0, [r3, #0]
}
   1b836:	4770      	bx	lr
		timestamp_div *= 2U;
   1b838:	2101      	movs	r1, #1
		frequency /= 2U;
   1b83a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1b83c:	005b      	lsls	r3, r3, #1
   1b83e:	e7f2      	b.n	1b826 <log_output_timestamp_freq_set+0x6>
   1b840:	000f4240 	.word	0x000f4240
   1b844:	2000d160 	.word	0x2000d160
   1b848:	2000d164 	.word	0x2000d164

0001b84c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   1b84c:	4b01      	ldr	r3, [pc, #4]	; (1b854 <format_set+0x8>)
	return 0;
}
   1b84e:	2000      	movs	r0, #0
	log_format_current = log_type;
   1b850:	6019      	str	r1, [r3, #0]
}
   1b852:	4770      	bx	lr
   1b854:	2000d17c 	.word	0x2000d17c

0001b858 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   1b858:	2201      	movs	r2, #1
   1b85a:	4b02      	ldr	r3, [pc, #8]	; (1b864 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   1b85c:	4802      	ldr	r0, [pc, #8]	; (1b868 <panic+0x10>)
   1b85e:	701a      	strb	r2, [r3, #0]
   1b860:	f00c bc05 	b.w	2806e <log_output_flush>
   1b864:	2000dafd 	.word	0x2000dafd
   1b868:	0002bf20 	.word	0x0002bf20

0001b86c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   1b86c:	4801      	ldr	r0, [pc, #4]	; (1b874 <dropped+0x8>)
   1b86e:	f7ff bfab 	b.w	1b7c8 <log_output_dropped_process>
   1b872:	bf00      	nop
   1b874:	0002bf20 	.word	0x0002bf20

0001b878 <process>:
{
   1b878:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1b87a:	4b06      	ldr	r3, [pc, #24]	; (1b894 <process+0x1c>)
{
   1b87c:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1b87e:	6818      	ldr	r0, [r3, #0]
   1b880:	f7ff fb82 	bl	1af88 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   1b884:	4621      	mov	r1, r4
}
   1b886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1b88a:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
   1b88c:	220f      	movs	r2, #15
   1b88e:	4802      	ldr	r0, [pc, #8]	; (1b898 <process+0x20>)
   1b890:	4718      	bx	r3
   1b892:	bf00      	nop
   1b894:	2000d17c 	.word	0x2000d17c
   1b898:	0002bf20 	.word	0x0002bf20

0001b89c <char_out>:
{
   1b89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b89e:	460d      	mov	r5, r1
   1b8a0:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1b8a2:	4f06      	ldr	r7, [pc, #24]	; (1b8bc <char_out+0x20>)
   1b8a4:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   1b8a6:	42b4      	cmp	r4, r6
   1b8a8:	d101      	bne.n	1b8ae <char_out+0x12>
}
   1b8aa:	4628      	mov	r0, r5
   1b8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   1b8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b8b2:	68bb      	ldr	r3, [r7, #8]
   1b8b4:	4801      	ldr	r0, [pc, #4]	; (1b8bc <char_out+0x20>)
   1b8b6:	685b      	ldr	r3, [r3, #4]
   1b8b8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   1b8ba:	e7f4      	b.n	1b8a6 <char_out+0xa>
   1b8bc:	0002bab0 	.word	0x0002bab0

0001b8c0 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   1b8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b8c4:	4605      	mov	r5, r0
   1b8c6:	460e      	mov	r6, r1
   1b8c8:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1b8ca:	4c10      	ldr	r4, [pc, #64]	; (1b90c <z_impl_zsock_socket+0x4c>)
   1b8cc:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1b910 <z_impl_zsock_socket+0x50>
   1b8d0:	4544      	cmp	r4, r8
   1b8d2:	d307      	bcc.n	1b8e4 <z_impl_zsock_socket+0x24>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   1b8d4:	f00c fd9b 	bl	2840e <__errno>
   1b8d8:	236a      	movs	r3, #106	; 0x6a
   1b8da:	6003      	str	r3, [r0, #0]
	return -1;
}
   1b8dc:	f04f 30ff 	mov.w	r0, #4294967295
   1b8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sock_family->family != family &&
   1b8e4:	6823      	ldr	r3, [r4, #0]
   1b8e6:	42ab      	cmp	r3, r5
   1b8e8:	d000      	beq.n	1b8ec <z_impl_zsock_socket+0x2c>
   1b8ea:	b963      	cbnz	r3, 1b906 <z_impl_zsock_socket+0x46>
		if (!sock_family->is_supported(family, type, proto)) {
   1b8ec:	463a      	mov	r2, r7
   1b8ee:	4631      	mov	r1, r6
   1b8f0:	4628      	mov	r0, r5
   1b8f2:	68a3      	ldr	r3, [r4, #8]
   1b8f4:	4798      	blx	r3
   1b8f6:	b130      	cbz	r0, 1b906 <z_impl_zsock_socket+0x46>
		return sock_family->handler(family, type, proto);
   1b8f8:	463a      	mov	r2, r7
   1b8fa:	4631      	mov	r1, r6
   1b8fc:	4628      	mov	r0, r5
   1b8fe:	68e3      	ldr	r3, [r4, #12]
}
   1b900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
   1b904:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1b906:	3410      	adds	r4, #16
   1b908:	e7e2      	b.n	1b8d0 <z_impl_zsock_socket+0x10>
   1b90a:	bf00      	nop
   1b90c:	0002bd48 	.word	0x0002bd48
   1b910:	0002bd58 	.word	0x0002bd58

0001b914 <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   1b914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
   1b918:	f04f 0800 	mov.w	r8, #0
{
   1b91c:	b09b      	sub	sp, #108	; 0x6c
   1b91e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b922:	4619      	mov	r1, r3
   1b924:	4610      	mov	r0, r2
   1b926:	461d      	mov	r5, r3
   1b928:	4614      	mov	r4, r2

	end = sys_clock_timeout_end_calc(timeout);
   1b92a:	f00f fbd6 	bl	2b0da <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   1b92e:	e9dd 9b04 	ldrd	r9, fp, [sp, #16]
	bool offload = false;
   1b932:	4647      	mov	r7, r8
	end = sys_clock_timeout_end_calc(timeout);
   1b934:	e9cd 0106 	strd	r0, r1, [sp, #24]
	pev = poll_events;
   1b938:	ab0b      	add	r3, sp, #44	; 0x2c
   1b93a:	9308      	str	r3, [sp, #32]
	const struct fd_op_vtable *offl_vtable = NULL;
   1b93c:	f8cd 800c 	str.w	r8, [sp, #12]
	for (pfd = fds, i = nfds; i--; pfd++) {
   1b940:	f1bb 0f00 	cmp.w	fp, #0
   1b944:	d120      	bne.n	1b988 <zsock_poll_internal+0x74>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   1b946:	2f00      	cmp	r7, #0
   1b948:	d064      	beq.n	1ba14 <zsock_poll_internal+0x100>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b94a:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b94e:	bf08      	it	eq
   1b950:	f1b4 3fff 	cmpeq.w	r4, #4294967295
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b954:	bf17      	itett	ne
   1b956:	f44f 737a 	movne.w	r3, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
   1b95a:	f04f 34ff 	moveq.w	r4, #4294967295
   1b95e:	fba4 3403 	umullne	r3, r4, r4, r3
   1b962:	0bdb      	lsrne	r3, r3, #15
   1b964:	bf18      	it	ne
   1b966:	ea43 4444 	orrne.w	r4, r3, r4, lsl #17
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   1b96a:	9b05      	ldr	r3, [sp, #20]
   1b96c:	f44f 7282 	mov.w	r2, #260	; 0x104
   1b970:	9300      	str	r3, [sp, #0]
   1b972:	4641      	mov	r1, r8
   1b974:	9b04      	ldr	r3, [sp, #16]
   1b976:	9803      	ldr	r0, [sp, #12]
   1b978:	9401      	str	r4, [sp, #4]
   1b97a:	f00c fbaf 	bl	280dc <z_fdtable_call_ioctl>
   1b97e:	4606      	mov	r6, r0
			}
		}
	} while (retry);

	return ret;
}
   1b980:	4630      	mov	r0, r6
   1b982:	b01b      	add	sp, #108	; 0x6c
   1b984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
   1b988:	f8d9 0000 	ldr.w	r0, [r9]
   1b98c:	2800      	cmp	r0, #0
   1b98e:	db20      	blt.n	1b9d2 <zsock_poll_internal+0xbe>
	ctx = z_get_fd_obj_and_vtable(sock,
   1b990:	aa0a      	add	r2, sp, #40	; 0x28
   1b992:	a909      	add	r1, sp, #36	; 0x24
   1b994:	f7fe fc74 	bl	1a280 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   1b998:	4606      	mov	r6, r0
   1b99a:	b1d0      	cbz	r0, 1b9d2 <zsock_poll_internal+0xbe>
		(void)k_mutex_lock(lock, K_FOREVER);
   1b99c:	f04f 32ff 	mov.w	r2, #4294967295
   1b9a0:	f04f 33ff 	mov.w	r3, #4294967295
   1b9a4:	980a      	ldr	r0, [sp, #40]	; 0x28
   1b9a6:	f00c fba8 	bl	280fa <k_mutex_lock.constprop.0.isra.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   1b9aa:	ab1a      	add	r3, sp, #104	; 0x68
   1b9ac:	9301      	str	r3, [sp, #4]
   1b9ae:	ab08      	add	r3, sp, #32
   1b9b0:	9300      	str	r3, [sp, #0]
   1b9b2:	f44f 7281 	mov.w	r2, #258	; 0x102
   1b9b6:	464b      	mov	r3, r9
   1b9b8:	4631      	mov	r1, r6
   1b9ba:	9809      	ldr	r0, [sp, #36]	; 0x24
   1b9bc:	f00c fb8e 	bl	280dc <z_fdtable_call_ioctl>
   1b9c0:	4682      	mov	sl, r0
		if (result == -EALREADY) {
   1b9c2:	f11a 0f78 	cmn.w	sl, #120	; 0x78
		k_mutex_unlock(lock);
   1b9c6:	980a      	ldr	r0, [sp, #40]	; 0x28
		if (result == -EALREADY) {
   1b9c8:	d108      	bne.n	1b9dc <zsock_poll_internal+0xc8>
			timeout = K_NO_WAIT;
   1b9ca:	2400      	movs	r4, #0
		k_mutex_unlock(lock);
   1b9cc:	f00c fb97 	bl	280fe <k_mutex_unlock.isra.0>
			timeout = K_NO_WAIT;
   1b9d0:	4625      	mov	r5, r4
	for (pfd = fds, i = nfds; i--; pfd++) {
   1b9d2:	f109 0908 	add.w	r9, r9, #8
   1b9d6:	f10b 3bff 	add.w	fp, fp, #4294967295
   1b9da:	e7b1      	b.n	1b940 <zsock_poll_internal+0x2c>
		} else if (result == -EXDEV) {
   1b9dc:	f11a 0f12 	cmn.w	sl, #18
   1b9e0:	d10b      	bne.n	1b9fa <zsock_poll_internal+0xe6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   1b9e2:	9b03      	ldr	r3, [sp, #12]
   1b9e4:	b11b      	cbz	r3, 1b9ee <zsock_poll_internal+0xda>
		k_mutex_unlock(lock);
   1b9e6:	f00c fb8a 	bl	280fe <k_mutex_unlock.isra.0>
			offload = true;
   1b9ea:	2701      	movs	r7, #1
   1b9ec:	e7f1      	b.n	1b9d2 <zsock_poll_internal+0xbe>
				offl_vtable = vtable;
   1b9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
		k_mutex_unlock(lock);
   1b9f0:	46b0      	mov	r8, r6
				offl_vtable = vtable;
   1b9f2:	9303      	str	r3, [sp, #12]
		k_mutex_unlock(lock);
   1b9f4:	f00c fb83 	bl	280fe <k_mutex_unlock.isra.0>
		if (result < 0) {
   1b9f8:	e7f7      	b.n	1b9ea <zsock_poll_internal+0xd6>
		k_mutex_unlock(lock);
   1b9fa:	f00c fb80 	bl	280fe <k_mutex_unlock.isra.0>
		if (result < 0) {
   1b9fe:	f1ba 0f00 	cmp.w	sl, #0
   1ba02:	dae6      	bge.n	1b9d2 <zsock_poll_internal+0xbe>
			errno = -result;
   1ba04:	f00c fd03 	bl	2840e <__errno>
   1ba08:	f1ca 0300 	rsb	r3, sl, #0
			return -1;
   1ba0c:	f04f 36ff 	mov.w	r6, #4294967295
			errno = -ret;
   1ba10:	6003      	str	r3, [r0, #0]
			return -1;
   1ba12:	e7b5      	b.n	1b980 <zsock_poll_internal+0x6c>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ba14:	ea54 0305 	orrs.w	r3, r4, r5
   1ba18:	d010      	beq.n	1ba3c <zsock_poll_internal+0x128>
   1ba1a:	f1b5 3fff 	cmp.w	r5, #4294967295
   1ba1e:	bf08      	it	eq
   1ba20:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1ba24:	d00a      	beq.n	1ba3c <zsock_poll_internal+0x128>
		int64_t remaining = end - sys_clock_tick_get();
   1ba26:	f00a fbbf 	bl	261a8 <sys_clock_tick_get>
   1ba2a:	9b06      	ldr	r3, [sp, #24]
   1ba2c:	1a1c      	subs	r4, r3, r0
   1ba2e:	9b07      	ldr	r3, [sp, #28]
   1ba30:	eb63 0501 	sbc.w	r5, r3, r1
		if (remaining <= 0) {
   1ba34:	2d00      	cmp	r5, #0
   1ba36:	bfbc      	itt	lt
   1ba38:	463c      	movlt	r4, r7
   1ba3a:	4625      	movlt	r5, r4
		retry = false;
   1ba3c:	f04f 0a00 	mov.w	sl, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   1ba40:	9908      	ldr	r1, [sp, #32]
   1ba42:	af0b      	add	r7, sp, #44	; 0x2c
   1ba44:	4b3a      	ldr	r3, [pc, #232]	; (1bb30 <zsock_poll_internal+0x21c>)
   1ba46:	1bc9      	subs	r1, r1, r7
   1ba48:	1089      	asrs	r1, r1, #2
   1ba4a:	4359      	muls	r1, r3
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1ba4c:	462b      	mov	r3, r5
   1ba4e:	4622      	mov	r2, r4
   1ba50:	4638      	mov	r0, r7
   1ba52:	f00a fc79 	bl	26348 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   1ba56:	f100 030b 	add.w	r3, r0, #11
   1ba5a:	2b0b      	cmp	r3, #11
   1ba5c:	4680      	mov	r8, r0
   1ba5e:	d804      	bhi.n	1ba6a <zsock_poll_internal+0x156>
   1ba60:	4e34      	ldr	r6, [pc, #208]	; (1bb34 <zsock_poll_internal+0x220>)
   1ba62:	411e      	asrs	r6, r3
   1ba64:	f016 0601 	ands.w	r6, r6, #1
   1ba68:	d004      	beq.n	1ba74 <zsock_poll_internal+0x160>
			errno = -ret;
   1ba6a:	f00c fcd0 	bl	2840e <__errno>
   1ba6e:	f1c8 0300 	rsb	r3, r8, #0
   1ba72:	e7cb      	b.n	1ba0c <zsock_poll_internal+0xf8>
		retry = false;
   1ba74:	46b1      	mov	r9, r6
		pev = poll_events;
   1ba76:	9708      	str	r7, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   1ba78:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   1ba7c:	f1b8 0f00 	cmp.w	r8, #0
   1ba80:	d11c      	bne.n	1babc <zsock_poll_internal+0x1a8>
		if (retry) {
   1ba82:	f1b9 0f00 	cmp.w	r9, #0
   1ba86:	f43f af7b 	beq.w	1b980 <zsock_poll_internal+0x6c>
			if (ret > 0) {
   1ba8a:	2e00      	cmp	r6, #0
   1ba8c:	f47f af78 	bne.w	1b980 <zsock_poll_internal+0x6c>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ba90:	ea54 0305 	orrs.w	r3, r4, r5
   1ba94:	f43f af74 	beq.w	1b980 <zsock_poll_internal+0x6c>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ba98:	f1b5 3fff 	cmp.w	r5, #4294967295
   1ba9c:	bf08      	it	eq
   1ba9e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1baa2:	d0cd      	beq.n	1ba40 <zsock_poll_internal+0x12c>
				int64_t remaining = end - sys_clock_tick_get();
   1baa4:	f00a fb80 	bl	261a8 <sys_clock_tick_get>
   1baa8:	9b06      	ldr	r3, [sp, #24]
   1baaa:	1a1c      	subs	r4, r3, r0
   1baac:	9b07      	ldr	r3, [sp, #28]
   1baae:	eb63 0501 	sbc.w	r5, r3, r1
				if (remaining <= 0) {
   1bab2:	2c01      	cmp	r4, #1
   1bab4:	f175 0300 	sbcs.w	r3, r5, #0
   1bab8:	dac2      	bge.n	1ba40 <zsock_poll_internal+0x12c>
   1baba:	e761      	b.n	1b980 <zsock_poll_internal+0x6c>
			if (pfd->fd < 0) {
   1babc:	6838      	ldr	r0, [r7, #0]
			pfd->revents = 0;
   1babe:	f8a7 a006 	strh.w	sl, [r7, #6]
			if (pfd->fd < 0) {
   1bac2:	2800      	cmp	r0, #0
   1bac4:	db2c      	blt.n	1bb20 <zsock_poll_internal+0x20c>
	ctx = z_get_fd_obj_and_vtable(sock,
   1bac6:	aa0a      	add	r2, sp, #40	; 0x28
   1bac8:	a909      	add	r1, sp, #36	; 0x24
   1baca:	f7fe fbd9 	bl	1a280 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   1bace:	4683      	mov	fp, r0
   1bad0:	b918      	cbnz	r0, 1bada <zsock_poll_internal+0x1c6>
				pfd->revents = ZSOCK_POLLNVAL;
   1bad2:	2320      	movs	r3, #32
   1bad4:	80fb      	strh	r3, [r7, #6]
				ret++;
   1bad6:	3601      	adds	r6, #1
   1bad8:	e022      	b.n	1bb20 <zsock_poll_internal+0x20c>
			(void)k_mutex_lock(lock, K_FOREVER);
   1bada:	f04f 32ff 	mov.w	r2, #4294967295
   1bade:	f04f 33ff 	mov.w	r3, #4294967295
   1bae2:	980a      	ldr	r0, [sp, #40]	; 0x28
   1bae4:	f00c fb09 	bl	280fa <k_mutex_lock.constprop.0.isra.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   1bae8:	ab08      	add	r3, sp, #32
   1baea:	4659      	mov	r1, fp
   1baec:	f240 1203 	movw	r2, #259	; 0x103
   1baf0:	9300      	str	r3, [sp, #0]
   1baf2:	9809      	ldr	r0, [sp, #36]	; 0x24
   1baf4:	463b      	mov	r3, r7
   1baf6:	f00c faf1 	bl	280dc <z_fdtable_call_ioctl>
   1bafa:	4683      	mov	fp, r0
			k_mutex_unlock(lock);
   1bafc:	980a      	ldr	r0, [sp, #40]	; 0x28
   1bafe:	f00c fafe 	bl	280fe <k_mutex_unlock.isra.0>
			if (result == -EAGAIN) {
   1bb02:	f11b 0f0b 	cmn.w	fp, #11
   1bb06:	d00f      	beq.n	1bb28 <zsock_poll_internal+0x214>
			} else if (result != 0) {
   1bb08:	f1bb 0f00 	cmp.w	fp, #0
   1bb0c:	d004      	beq.n	1bb18 <zsock_poll_internal+0x204>
				errno = -result;
   1bb0e:	f00c fc7e 	bl	2840e <__errno>
   1bb12:	f1cb 0300 	rsb	r3, fp, #0
   1bb16:	e779      	b.n	1ba0c <zsock_poll_internal+0xf8>
			if (pfd->revents != 0) {
   1bb18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1bb1c:	2b00      	cmp	r3, #0
   1bb1e:	d1da      	bne.n	1bad6 <zsock_poll_internal+0x1c2>
		for (pfd = fds, i = nfds; i--; pfd++) {
   1bb20:	3708      	adds	r7, #8
   1bb22:	f108 38ff 	add.w	r8, r8, #4294967295
   1bb26:	e7a9      	b.n	1ba7c <zsock_poll_internal+0x168>
				retry = true;
   1bb28:	f04f 0901 	mov.w	r9, #1
   1bb2c:	e7f8      	b.n	1bb20 <zsock_poll_internal+0x20c>
   1bb2e:	bf00      	nop
   1bb30:	cccccccd 	.word	0xcccccccd
   1bb34:	fffff77e 	.word	0xfffff77e

0001bb38 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   1bb38:	4b01      	ldr	r3, [pc, #4]	; (1bb40 <socket_offload_dns_register+0x8>)
   1bb3a:	6018      	str	r0, [r3, #0]
}
   1bb3c:	4770      	bx	lr
   1bb3e:	bf00      	nop
   1bb40:	2000d180 	.word	0x2000d180

0001bb44 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   1bb44:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
   1bb46:	4c03      	ldr	r4, [pc, #12]	; (1bb54 <socket_offload_getaddrinfo+0x10>)
   1bb48:	6824      	ldr	r4, [r4, #0]
   1bb4a:	6824      	ldr	r4, [r4, #0]
   1bb4c:	46a4      	mov	ip, r4
}
   1bb4e:	bc10      	pop	{r4}
	return dns_offload->getaddrinfo(node, service, hints, res);
   1bb50:	4760      	bx	ip
   1bb52:	bf00      	nop
   1bb54:	2000d180 	.word	0x2000d180

0001bb58 <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
   1bb58:	4b01      	ldr	r3, [pc, #4]	; (1bb60 <socket_offload_freeaddrinfo+0x8>)
   1bb5a:	681b      	ldr	r3, [r3, #0]
   1bb5c:	685b      	ldr	r3, [r3, #4]
   1bb5e:	4718      	bx	r3
   1bb60:	2000d180 	.word	0x2000d180

0001bb64 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   1bb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bb68:	4605      	mov	r5, r0
	__asm__ volatile(
   1bb6a:	f04f 0320 	mov.w	r3, #32
   1bb6e:	f3ef 8611 	mrs	r6, BASEPRI
   1bb72:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb76:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1bb7a:	f04f 090c 	mov.w	r9, #12
	return list->head;
   1bb7e:	4b0d      	ldr	r3, [pc, #52]	; (1bbb4 <pm_state_notify+0x50>)
   1bb80:	4f0d      	ldr	r7, [pc, #52]	; (1bbb8 <pm_state_notify+0x54>)
   1bb82:	681c      	ldr	r4, [r3, #0]
   1bb84:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1bbbc <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1bb88:	b92c      	cbnz	r4, 1bb96 <pm_state_notify+0x32>
	__asm__ volatile(
   1bb8a:	f386 8811 	msr	BASEPRI, r6
   1bb8e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1bb92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   1bb96:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   1bb9a:	2d00      	cmp	r5, #0
   1bb9c:	bf18      	it	ne
   1bb9e:	4613      	movne	r3, r2
		if (callback) {
   1bba0:	b12b      	cbz	r3, 1bbae <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1bba2:	f898 2014 	ldrb.w	r2, [r8, #20]
   1bba6:	fb09 f202 	mul.w	r2, r9, r2
   1bbaa:	5cb8      	ldrb	r0, [r7, r2]
   1bbac:	4798      	blx	r3
	return node->next;
   1bbae:	6824      	ldr	r4, [r4, #0]
   1bbb0:	e7ea      	b.n	1bb88 <pm_state_notify+0x24>
   1bbb2:	bf00      	nop
   1bbb4:	2000d19c 	.word	0x2000d19c
   1bbb8:	2000d190 	.word	0x2000d190
   1bbbc:	2000d8fc 	.word	0x2000d8fc

0001bbc0 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bbc0:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   1bbc2:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1bbc4:	4b16      	ldr	r3, [pc, #88]	; (1bc20 <pm_system_resume+0x60>)
   1bbc6:	7d1c      	ldrb	r4, [r3, #20]
   1bbc8:	f004 031f 	and.w	r3, r4, #31
   1bbcc:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bbce:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bbd0:	4b14      	ldr	r3, [pc, #80]	; (1bc24 <pm_system_resume+0x64>)
   1bbd2:	0961      	lsrs	r1, r4, #5
   1bbd4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1bbd8:	e8d3 1fef 	ldaex	r1, [r3]
   1bbdc:	ea01 0500 	and.w	r5, r1, r0
   1bbe0:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1bbe4:	2e00      	cmp	r6, #0
   1bbe6:	d1f7      	bne.n	1bbd8 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1bbe8:	420a      	tst	r2, r1
   1bbea:	d013      	beq.n	1bc14 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   1bbec:	4b0e      	ldr	r3, [pc, #56]	; (1bc28 <pm_system_resume+0x68>)
   1bbee:	4d0f      	ldr	r5, [pc, #60]	; (1bc2c <pm_system_resume+0x6c>)
   1bbf0:	b18b      	cbz	r3, 1bc16 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1bbf2:	230c      	movs	r3, #12
   1bbf4:	4363      	muls	r3, r4
   1bbf6:	18ea      	adds	r2, r5, r3
   1bbf8:	7851      	ldrb	r1, [r2, #1]
   1bbfa:	5ce8      	ldrb	r0, [r5, r3]
   1bbfc:	f00c f9bc 	bl	27f78 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   1bc00:	2000      	movs	r0, #0
   1bc02:	f7ff ffaf 	bl	1bb64 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1bc06:	230c      	movs	r3, #12
   1bc08:	435c      	muls	r4, r3
   1bc0a:	2300      	movs	r3, #0
   1bc0c:	192a      	adds	r2, r5, r4
   1bc0e:	512b      	str	r3, [r5, r4]
   1bc10:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   1bc14:	bd70      	pop	{r4, r5, r6, pc}
   1bc16:	f383 8811 	msr	BASEPRI, r3
   1bc1a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1bc1e:	e7ef      	b.n	1bc00 <pm_system_resume+0x40>
   1bc20:	2000d8fc 	.word	0x2000d8fc
   1bc24:	2000d1a4 	.word	0x2000d1a4
   1bc28:	00027f79 	.word	0x00027f79
   1bc2c:	2000d190 	.word	0x2000d190

0001bc30 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   1bc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   1bc34:	4b32      	ldr	r3, [pc, #200]	; (1bd00 <pm_system_suspend+0xd0>)
{
   1bc36:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   1bc38:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   1bc3a:	f04f 0320 	mov.w	r3, #32
   1bc3e:	f3ef 8811 	mrs	r8, BASEPRI
   1bc42:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc46:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   1bc4a:	240c      	movs	r4, #12
   1bc4c:	436c      	muls	r4, r5
   1bc4e:	4b2d      	ldr	r3, [pc, #180]	; (1bd04 <pm_system_suspend+0xd4>)
   1bc50:	4e2d      	ldr	r6, [pc, #180]	; (1bd08 <pm_system_suspend+0xd8>)
   1bc52:	5d19      	ldrb	r1, [r3, r4]
   1bc54:	191a      	adds	r2, r3, r4
   1bc56:	2900      	cmp	r1, #0
   1bc58:	d047      	beq.n	1bcea <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   1bc5a:	ca07      	ldmia	r2, {r0, r1, r2}
   1bc5c:	eb06 0c04 	add.w	ip, r6, r4
   1bc60:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   1bc64:	2200      	movs	r2, #0
   1bc66:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   1bc68:	f388 8811 	msr	BASEPRI, r8
   1bc6c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   1bc70:	230c      	movs	r3, #12
   1bc72:	436b      	muls	r3, r5
   1bc74:	5cf0      	ldrb	r0, [r6, r3]
   1bc76:	18f2      	adds	r2, r6, r3
   1bc78:	b3a8      	cbz	r0, 1bce6 <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1bc7a:	1c7b      	adds	r3, r7, #1
   1bc7c:	d010      	beq.n	1bca0 <pm_system_suspend+0x70>
   1bc7e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1bc82:	2100      	movs	r1, #0
   1bc84:	f8d2 c008 	ldr.w	ip, [r2, #8]
   1bc88:	4c20      	ldr	r4, [pc, #128]	; (1bd0c <pm_system_suspend+0xdc>)
   1bc8a:	2300      	movs	r3, #0
   1bc8c:	fbec 4100 	umlal	r4, r1, ip, r0
   1bc90:	4a1f      	ldr	r2, [pc, #124]	; (1bd10 <pm_system_suspend+0xe0>)
   1bc92:	4620      	mov	r0, r4
   1bc94:	f7fd f838 	bl	18d08 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1bc98:	2101      	movs	r1, #1
   1bc9a:	1a38      	subs	r0, r7, r0
   1bc9c:	f00f f9f7 	bl	2b08e <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1bca0:	f009 fff0 	bl	25c84 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1bca4:	2001      	movs	r0, #1
   1bca6:	f7ff ff5d 	bl	1bb64 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bcaa:	4b1a      	ldr	r3, [pc, #104]	; (1bd14 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bcac:	096a      	lsrs	r2, r5, #5
   1bcae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bcb2:	2201      	movs	r2, #1
   1bcb4:	f005 011f 	and.w	r1, r5, #31
   1bcb8:	408a      	lsls	r2, r1
   1bcba:	e8d3 0fef 	ldaex	r0, [r3]
   1bcbe:	4310      	orrs	r0, r2
   1bcc0:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1bcc4:	2900      	cmp	r1, #0
   1bcc6:	d1f8      	bne.n	1bcba <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
   1bcc8:	4b13      	ldr	r3, [pc, #76]	; (1bd18 <pm_system_suspend+0xe8>)
   1bcca:	b13b      	cbz	r3, 1bcdc <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
   1bccc:	230c      	movs	r3, #12
   1bcce:	fb03 f005 	mul.w	r0, r3, r5
   1bcd2:	1833      	adds	r3, r6, r0
   1bcd4:	7859      	ldrb	r1, [r3, #1]
   1bcd6:	5c30      	ldrb	r0, [r6, r0]
   1bcd8:	f00c f942 	bl	27f60 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   1bcdc:	f7ff ff70 	bl	1bbc0 <pm_system_resume>
	k_sched_unlock();
   1bce0:	f009 ffe4 	bl	25cac <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   1bce4:	2001      	movs	r0, #1
}
   1bce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   1bcea:	4601      	mov	r1, r0
   1bcec:	4628      	mov	r0, r5
   1bcee:	f000 f815 	bl	1bd1c <pm_policy_next_state>
		if (info != NULL) {
   1bcf2:	2800      	cmp	r0, #0
   1bcf4:	d0b8      	beq.n	1bc68 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   1bcf6:	c807      	ldmia	r0, {r0, r1, r2}
   1bcf8:	4434      	add	r4, r6
   1bcfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   1bcfe:	e7b3      	b.n	1bc68 <pm_system_suspend+0x38>
   1bd00:	2000d8fc 	.word	0x2000d8fc
   1bd04:	2000d184 	.word	0x2000d184
   1bd08:	2000d190 	.word	0x2000d190
   1bd0c:	000f423f 	.word	0x000f423f
   1bd10:	000f4240 	.word	0x000f4240
   1bd14:	2000d1a4 	.word	0x2000d1a4
   1bd18:	00027f61 	.word	0x00027f61

0001bd1c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   1bd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd20:	b085      	sub	sp, #20
   1bd22:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   1bd24:	a903      	add	r1, sp, #12
   1bd26:	f000 f843 	bl	1bdb0 <pm_state_cpu_get_all>
   1bd2a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1bd2e:	4604      	mov	r4, r0
   1bd30:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1bd34:	4b1b      	ldr	r3, [pc, #108]	; (1bda4 <pm_policy_next_state+0x88>)
   1bd36:	9d03      	ldr	r5, [sp, #12]
   1bd38:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1bd3c:	1e43      	subs	r3, r0, #1
   1bd3e:	b21b      	sxth	r3, r3
   1bd40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1bd44:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1bda8 <pm_policy_next_state+0x8c>
   1bd48:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1bd4c:	b924      	cbnz	r4, 1bd58 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   1bd4e:	46a1      	mov	r9, r4
}
   1bd50:	4648      	mov	r0, r9
   1bd52:	b005      	add	sp, #20
   1bd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd58:	46c4      	mov	ip, r8
   1bd5a:	4659      	mov	r1, fp
   1bd5c:	6868      	ldr	r0, [r5, #4]
   1bd5e:	2300      	movs	r3, #0
   1bd60:	fbe0 c107 	umlal	ip, r1, r0, r7
   1bd64:	4a11      	ldr	r2, [pc, #68]	; (1bdac <pm_policy_next_state+0x90>)
   1bd66:	4660      	mov	r0, ip
   1bd68:	f7fc ffce 	bl	18d08 <__aeabi_uldivmod>
   1bd6c:	46c4      	mov	ip, r8
   1bd6e:	4659      	mov	r1, fp
   1bd70:	9001      	str	r0, [sp, #4]
   1bd72:	68a8      	ldr	r0, [r5, #8]
   1bd74:	2300      	movs	r3, #0
   1bd76:	fbe0 c107 	umlal	ip, r1, r0, r7
   1bd7a:	4a0c      	ldr	r2, [pc, #48]	; (1bdac <pm_policy_next_state+0x90>)
   1bd7c:	4660      	mov	r0, ip
   1bd7e:	f7fc ffc3 	bl	18d08 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1bd82:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   1bd86:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1bd88:	d001      	beq.n	1bd8e <pm_policy_next_state+0x72>
   1bd8a:	4582      	cmp	sl, r0
   1bd8c:	d905      	bls.n	1bd9a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   1bd8e:	1c73      	adds	r3, r6, #1
   1bd90:	d0de      	beq.n	1bd50 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   1bd92:	9b01      	ldr	r3, [sp, #4]
   1bd94:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1bd96:	42b0      	cmp	r0, r6
   1bd98:	d9da      	bls.n	1bd50 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1bd9a:	3c01      	subs	r4, #1
   1bd9c:	b2a4      	uxth	r4, r4
   1bd9e:	3d0c      	subs	r5, #12
   1bda0:	e7d4      	b.n	1bd4c <pm_policy_next_state+0x30>
   1bda2:	bf00      	nop
   1bda4:	2000c588 	.word	0x2000c588
   1bda8:	000f423f 	.word	0x000f423f
   1bdac:	000f4240 	.word	0x000f4240

0001bdb0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   1bdb0:	b908      	cbnz	r0, 1bdb6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1bdb2:	4b02      	ldr	r3, [pc, #8]	; (1bdbc <pm_state_cpu_get_all+0xc>)
   1bdb4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1bdb6:	2000      	movs	r0, #0
   1bdb8:	4770      	bx	lr
   1bdba:	bf00      	nop
   1bdbc:	0002bf30 	.word	0x0002bf30

0001bdc0 <adp536x_reg_read>:
#define ADP536X_FUEL_GAUGE_EN_FG(x)			((x) & 0x01)

static const struct device *i2c_dev;

static int adp536x_reg_read(uint8_t reg, uint8_t *buff)
{
   1bdc0:	4603      	mov	r3, r0
   1bdc2:	b510      	push	{r4, lr}
   1bdc4:	b088      	sub	sp, #32
   1bdc6:	f88d 3007 	strb.w	r3, [sp, #7]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   1bdca:	f10d 0307 	add.w	r3, sp, #7
   1bdce:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
   1bdd0:	2301      	movs	r3, #1
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
   1bdd2:	4a09      	ldr	r2, [pc, #36]	; (1bdf8 <adp536x_reg_read+0x38>)
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
   1bdd4:	e9cd 1305 	strd	r1, r3, [sp, #20]
   1bdd8:	6810      	ldr	r0, [r2, #0]
	msg[0].len = num_write;
   1bdda:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1bddc:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1bdde:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   1bde0:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1bde4:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1bde8:	6883      	ldr	r3, [r0, #8]
   1bdea:	2202      	movs	r2, #2
   1bdec:	689c      	ldr	r4, [r3, #8]
   1bdee:	a902      	add	r1, sp, #8
   1bdf0:	2346      	movs	r3, #70	; 0x46
   1bdf2:	47a0      	blx	r4
}
   1bdf4:	b008      	add	sp, #32
   1bdf6:	bd10      	pop	{r4, pc}
   1bdf8:	2000d1a8 	.word	0x2000d1a8

0001bdfc <adp536x_reg_write_mask>:
}

static int adp536x_reg_write_mask(uint8_t reg_addr,
			       uint32_t mask,
			       uint8_t data)
{
   1bdfc:	b570      	push	{r4, r5, r6, lr}
   1bdfe:	b086      	sub	sp, #24
   1be00:	460e      	mov	r6, r1
	int err;
	uint8_t tmp;

	err = adp536x_reg_read(reg_addr, &tmp);
   1be02:	f10d 0107 	add.w	r1, sp, #7
{
   1be06:	4605      	mov	r5, r0
   1be08:	4614      	mov	r4, r2
	err = adp536x_reg_read(reg_addr, &tmp);
   1be0a:	f7ff ffd9 	bl	1bdc0 <adp536x_reg_read>
	if (err) {
   1be0e:	b9c8      	cbnz	r0, 1be44 <adp536x_reg_write_mask+0x48>
		return err;
	}

	tmp &= ~mask;
   1be10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   1be14:	f88d 5008 	strb.w	r5, [sp, #8]
   1be18:	ea23 0106 	bic.w	r1, r3, r6
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
   1be1c:	4b0a      	ldr	r3, [pc, #40]	; (1be48 <adp536x_reg_write_mask+0x4c>)
	tmp |= data;
   1be1e:	ea44 0201 	orr.w	r2, r4, r1
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
   1be22:	6818      	ldr	r0, [r3, #0]
	msg.buf = (uint8_t *)buf;
   1be24:	ab02      	add	r3, sp, #8
   1be26:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   1be28:	2302      	movs	r3, #2
	tmp |= data;
   1be2a:	f88d 2007 	strb.w	r2, [sp, #7]
	uint8_t tx_buf[2] = {reg_addr, value};
   1be2e:	f88d 2009 	strb.w	r2, [sp, #9]
	msg.len = num_bytes;
   1be32:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1be34:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1be38:	6883      	ldr	r3, [r0, #8]
   1be3a:	2201      	movs	r2, #1
   1be3c:	689c      	ldr	r4, [r3, #8]
   1be3e:	a903      	add	r1, sp, #12
   1be40:	2346      	movs	r3, #70	; 0x46
   1be42:	47a0      	blx	r4

	return adp536x_reg_write(reg_addr, tmp);
}
   1be44:	b006      	add	sp, #24
   1be46:	bd70      	pop	{r4, r5, r6, pc}
   1be48:	2000d1a8 	.word	0x2000d1a8

0001be4c <adp536x_init>:

	return 0;
}

int adp536x_init(const struct device *dev)
{
   1be4c:	b510      	push	{r4, lr}
   1be4e:	4604      	mov	r4, r0
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1be50:	f00e fe37 	bl	2aac2 <z_device_is_ready>
	if (!device_is_ready(dev)) {
   1be54:	b118      	cbz	r0, 1be5e <adp536x_init+0x12>
		return -ENODEV;
	}

	i2c_dev = dev;

	return 0;
   1be56:	2000      	movs	r0, #0
	i2c_dev = dev;
   1be58:	4b02      	ldr	r3, [pc, #8]	; (1be64 <adp536x_init+0x18>)
   1be5a:	601c      	str	r4, [r3, #0]
}
   1be5c:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1be5e:	f06f 0012 	mvn.w	r0, #18
   1be62:	e7fb      	b.n	1be5c <adp536x_init+0x10>
   1be64:	2000d1a8 	.word	0x2000d1a8

0001be68 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1be68:	4901      	ldr	r1, [pc, #4]	; (1be70 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1be6a:	2210      	movs	r2, #16
	str	r2, [r1]
   1be6c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1be6e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1be70:	e000ed10 	.word	0xe000ed10

0001be74 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1be74:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1be76:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1be78:	f380 8811 	msr	BASEPRI, r0
	isb
   1be7c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   1be80:	f3bf 8f4f 	dsb	sy
   1be84:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1be86:	b662      	cpsie	i
	isb
   1be88:	f3bf 8f6f 	isb	sy

	bx	lr
   1be8c:	4770      	bx	lr
   1be8e:	bf00      	nop

0001be90 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1be90:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1be92:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1be94:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   1be98:	f3bf 8f4f 	dsb	sy
   1be9c:	bf20      	wfe

	msr	BASEPRI, r0
   1be9e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1bea2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1bea4:	4770      	bx	lr
   1bea6:	bf00      	nop

0001bea8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1bea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1beac:	4681      	mov	r9, r0

	if (esf != NULL) {
   1beae:	460c      	mov	r4, r1
{
   1beb0:	af00      	add	r7, sp, #0
	if (esf != NULL) {
   1beb2:	2900      	cmp	r1, #0
   1beb4:	d04c      	beq.n	1bf50 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1beb6:	e9d1 1200 	ldrd	r1, r2, [r1]
   1beba:	466e      	mov	r6, sp
   1bebc:	b08a      	sub	sp, #40	; 0x28
   1bebe:	68a3      	ldr	r3, [r4, #8]
   1bec0:	466d      	mov	r5, sp
   1bec2:	f04f 0a05 	mov.w	sl, #5
   1bec6:	46a8      	mov	r8, r5
   1bec8:	4825      	ldr	r0, [pc, #148]	; (1bf60 <z_arm_fatal_error+0xb8>)
   1beca:	e9c5 2307 	strd	r2, r3, [r5, #28]
   1bece:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1bed2:	f848 af10 	str.w	sl, [r8, #16]!
   1bed6:	2300      	movs	r3, #0
   1bed8:	4642      	mov	r2, r8
   1beda:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1bede:	4821      	ldr	r0, [pc, #132]	; (1bf64 <z_arm_fatal_error+0xbc>)
   1bee0:	f7ff fa2a 	bl	1b338 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1bee4:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1bee8:	46b5      	mov	sp, r6
   1beea:	6963      	ldr	r3, [r4, #20]
   1beec:	46ad      	mov	sp, r5
   1beee:	481e      	ldr	r0, [pc, #120]	; (1bf68 <z_arm_fatal_error+0xc0>)
   1bef0:	e9c5 2307 	strd	r2, r3, [r5, #28]
   1bef4:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1bef8:	f8c5 a010 	str.w	sl, [r5, #16]
   1befc:	2300      	movs	r3, #0
   1befe:	4642      	mov	r2, r8
   1bf00:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1bf04:	4817      	ldr	r0, [pc, #92]	; (1bf64 <z_arm_fatal_error+0xbc>)
   1bf06:	f7ff fa17 	bl	1b338 <z_impl_z_log_msg_static_create>
   1bf0a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1bf0c:	b088      	sub	sp, #32
   1bf0e:	69e3      	ldr	r3, [r4, #28]
   1bf10:	466d      	mov	r5, sp
   1bf12:	f04f 0a03 	mov.w	sl, #3
   1bf16:	46a8      	mov	r8, r5
   1bf18:	4a14      	ldr	r2, [pc, #80]	; (1bf6c <z_arm_fatal_error+0xc4>)
   1bf1a:	e9c5 2305 	strd	r2, r3, [r5, #20]
   1bf1e:	f848 af10 	str.w	sl, [r8, #16]!
   1bf22:	2300      	movs	r3, #0
   1bf24:	4642      	mov	r2, r8
   1bf26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bf2a:	480e      	ldr	r0, [pc, #56]	; (1bf64 <z_arm_fatal_error+0xbc>)
   1bf2c:	f7ff fa04 	bl	1b338 <z_impl_z_log_msg_static_create>
   1bf30:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1bf32:	69a3      	ldr	r3, [r4, #24]
   1bf34:	46ad      	mov	sp, r5
   1bf36:	4a0e      	ldr	r2, [pc, #56]	; (1bf70 <z_arm_fatal_error+0xc8>)
   1bf38:	f8c5 a010 	str.w	sl, [r5, #16]
   1bf3c:	e9c5 2305 	strd	r2, r3, [r5, #20]
   1bf40:	2300      	movs	r3, #0
   1bf42:	4642      	mov	r2, r8
   1bf44:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bf48:	4806      	ldr	r0, [pc, #24]	; (1bf64 <z_arm_fatal_error+0xbc>)
   1bf4a:	f7ff f9f5 	bl	1b338 <z_impl_z_log_msg_static_create>
   1bf4e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1bf50:	4621      	mov	r1, r4
   1bf52:	4648      	mov	r0, r9
   1bf54:	f008 ff6a 	bl	24e2c <z_fatal_error>
}
   1bf58:	46bd      	mov	sp, r7
   1bf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bf5e:	bf00      	nop
   1bf60:	0002cd05 	.word	0x0002cd05
   1bf64:	0002be68 	.word	0x0002be68
   1bf68:	0002cd34 	.word	0x0002cd34
   1bf6c:	0002cd63 	.word	0x0002cd63
   1bf70:	0002cd72 	.word	0x0002cd72

0001bf74 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1bf74:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1bf76:	2800      	cmp	r0, #0
   1bf78:	db07      	blt.n	1bf8a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bf7a:	2301      	movs	r3, #1
   1bf7c:	0941      	lsrs	r1, r0, #5
   1bf7e:	4a03      	ldr	r2, [pc, #12]	; (1bf8c <arch_irq_enable+0x18>)
   1bf80:	f000 001f 	and.w	r0, r0, #31
   1bf84:	4083      	lsls	r3, r0
   1bf86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   1bf8a:	4770      	bx	lr
   1bf8c:	e000e100 	.word	0xe000e100

0001bf90 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1bf90:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1bf92:	2800      	cmp	r0, #0
   1bf94:	db0c      	blt.n	1bfb0 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bf96:	2201      	movs	r2, #1
   1bf98:	4906      	ldr	r1, [pc, #24]	; (1bfb4 <arch_irq_disable+0x24>)
   1bf9a:	0943      	lsrs	r3, r0, #5
   1bf9c:	f000 001f 	and.w	r0, r0, #31
   1bfa0:	4082      	lsls	r2, r0
   1bfa2:	3320      	adds	r3, #32
   1bfa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1bfa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bfac:	f3bf 8f6f 	isb	sy
}
   1bfb0:	4770      	bx	lr
   1bfb2:	bf00      	nop
   1bfb4:	e000e100 	.word	0xe000e100

0001bfb8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1bfb8:	4b05      	ldr	r3, [pc, #20]	; (1bfd0 <arch_irq_is_enabled+0x18>)
   1bfba:	0942      	lsrs	r2, r0, #5
   1bfbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1bfc0:	2301      	movs	r3, #1
   1bfc2:	f000 001f 	and.w	r0, r0, #31
   1bfc6:	fa03 f000 	lsl.w	r0, r3, r0
}
   1bfca:	4010      	ands	r0, r2
   1bfcc:	4770      	bx	lr
   1bfce:	bf00      	nop
   1bfd0:	e000e100 	.word	0xe000e100

0001bfd4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1bfd4:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1bfd6:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
   1bfd8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bfdc:	bfac      	ite	ge
   1bfde:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bfe2:	4b06      	ldrlt	r3, [pc, #24]	; (1bffc <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bfe4:	ea4f 1141 	mov.w	r1, r1, lsl #5
   1bfe8:	b2c9      	uxtb	r1, r1
   1bfea:	bfab      	itete	ge
   1bfec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bff0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bff4:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bff8:	5419      	strblt	r1, [r3, r0]
}
   1bffa:	4770      	bx	lr
   1bffc:	e000ed14 	.word	0xe000ed14

0001c000 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1c000:	bf30      	wfi
    b z_SysNmiOnReset
   1c002:	f7ff bffd 	b.w	1c000 <z_SysNmiOnReset>
   1c006:	bf00      	nop

0001c008 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1c008:	4a0b      	ldr	r2, [pc, #44]	; (1c038 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1c00a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1c00c:	4b0b      	ldr	r3, [pc, #44]	; (1c03c <z_arm_prep_c+0x34>)
   1c00e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1c012:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1c014:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c018:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1c01c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1c020:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1c024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1c028:	f008 ffba 	bl	24fa0 <z_bss_zero>
	z_data_copy();
   1c02c:	f009 ff7a 	bl	25f24 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1c030:	f000 fbb0 	bl	1c794 <z_arm_interrupt_init>
	z_cstart();
   1c034:	f008 fff4 	bl	25020 <z_cstart>
   1c038:	00018000 	.word	0x00018000
   1c03c:	e000ed00 	.word	0xe000ed00

0001c040 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1c040:	4a09      	ldr	r2, [pc, #36]	; (1c068 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1c042:	490a      	ldr	r1, [pc, #40]	; (1c06c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1c044:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1c046:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1c048:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   1c04a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1c04c:	4908      	ldr	r1, [pc, #32]	; (1c070 <arch_swap+0x30>)
   1c04e:	684b      	ldr	r3, [r1, #4]
   1c050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1c054:	604b      	str	r3, [r1, #4]
   1c056:	2300      	movs	r3, #0
   1c058:	f383 8811 	msr	BASEPRI, r3
   1c05c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1c060:	6893      	ldr	r3, [r2, #8]
}
   1c062:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1c064:	4770      	bx	lr
   1c066:	bf00      	nop
   1c068:	2000d8fc 	.word	0x2000d8fc
   1c06c:	0002c4ec 	.word	0x0002c4ec
   1c070:	e000ed00 	.word	0xe000ed00

0001c074 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1c074:	4915      	ldr	r1, [pc, #84]	; (1c0cc <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1c076:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   1c078:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1c07c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1c080:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1c082:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1c086:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1c08a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   1c08c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1c090:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1c094:	4f0e      	ldr	r7, [pc, #56]	; (1c0d0 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1c096:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1c09a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1c09c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1c09e:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   1c0a0:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1c0a4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1c0a6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1c0a8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1c0aa:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1c0ae:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1c0b2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1c0b6:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1c0ba:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1c0be:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1c0c0:	f00c f966 	bl	28390 <configure_builtin_stack_guard>
    pop {r2, lr}
   1c0c4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1c0c8:	4770      	bx	lr
   1c0ca:	0000      	.short	0x0000
    ldr r1, =_kernel
   1c0cc:	2000d8fc 	.word	0x2000d8fc
    ldr v4, =_SCS_ICSR
   1c0d0:	e000ed04 	.word	0xe000ed04

0001c0d4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1c0d4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1c0d8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1c0da:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1c0de:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1c0e2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1c0e4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1c0e8:	2902      	cmp	r1, #2
    beq _oops
   1c0ea:	d0ff      	beq.n	1c0ec <_oops>

0001c0ec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1c0ec:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1c0ee:	f00c f940 	bl	28372 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   1c0f2:	bd01      	pop	{r0, pc}

0001c0f4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1c0f4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1c0f8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   1c0fa:	490d      	ldr	r1, [pc, #52]	; (1c130 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   1c0fc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1c100:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1c102:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   1c106:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1c10a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   1c10c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1c110:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1c114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1c118:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1c11c:	2300      	movs	r3, #0
   1c11e:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   1c120:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1c124:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1c126:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   1c128:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1c12c:	4770      	bx	lr
   1c12e:	bf00      	nop
   1c130:	000275cf 	.word	0x000275cf

0001c134 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1c134:	4b08      	ldr	r3, [pc, #32]	; (1c158 <arch_switch_to_main_thread+0x24>)
   1c136:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1c138:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1c13a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1c13e:	4610      	mov	r0, r2
   1c140:	f381 8809 	msr	PSP, r1
   1c144:	2100      	movs	r1, #0
   1c146:	b663      	cpsie	if
   1c148:	f381 8811 	msr	BASEPRI, r1
   1c14c:	f3bf 8f6f 	isb	sy
   1c150:	2200      	movs	r2, #0
   1c152:	2300      	movs	r3, #0
   1c154:	f00b fa3b 	bl	275ce <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1c158:	2000d8fc 	.word	0x2000d8fc

0001c15c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1c15c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1c15e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1c160:	4a0b      	ldr	r2, [pc, #44]	; (1c190 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1c162:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   1c164:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1c166:	bf1e      	ittt	ne
	movne	r1, #0
   1c168:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1c16a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   1c16c:	f00e fd41 	blne	2abf2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1c170:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1c172:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1c176:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1c17a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1c17e:	4905      	ldr	r1, [pc, #20]	; (1c194 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1c180:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1c182:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1c184:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1c186:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1c18a:	4903      	ldr	r1, [pc, #12]	; (1c198 <_isr_wrapper+0x3c>)
	bx r1
   1c18c:	4708      	bx	r1
   1c18e:	0000      	.short	0x0000
	ldr r2, =_kernel
   1c190:	2000d8fc 	.word	0x2000d8fc
	ldr r1, =_sw_isr_table
   1c194:	0002bb10 	.word	0x0002bb10
	ldr r1, =z_arm_int_exit
   1c198:	0001c19d 	.word	0x0001c19d

0001c19c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1c19c:	4b04      	ldr	r3, [pc, #16]	; (1c1b0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1c19e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1c1a0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1c1a2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1c1a4:	d003      	beq.n	1c1ae <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1c1a6:	4903      	ldr	r1, [pc, #12]	; (1c1b4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1c1a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1c1ac:	600a      	str	r2, [r1, #0]

0001c1ae <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1c1ae:	4770      	bx	lr
	ldr r3, =_kernel
   1c1b0:	2000d8fc 	.word	0x2000d8fc
	ldr r1, =_SCS_ICSR
   1c1b4:	e000ed04 	.word	0xe000ed04

0001c1b8 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1c1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1bc:	b086      	sub	sp, #24
   1c1be:	4606      	mov	r6, r0
   1c1c0:	460d      	mov	r5, r1
   1c1c2:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   1c1c4:	2402      	movs	r4, #2
   1c1c6:	4b41      	ldr	r3, [pc, #260]	; (1c2cc <mem_manage_fault.constprop.0+0x114>)
   1c1c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c1cc:	617b      	str	r3, [r7, #20]
   1c1ce:	4840      	ldr	r0, [pc, #256]	; (1c2d0 <mem_manage_fault.constprop.0+0x118>)
   1c1d0:	613c      	str	r4, [r7, #16]
   1c1d2:	f107 0210 	add.w	r2, r7, #16
   1c1d6:	f00c f8df 	bl	28398 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1c1da:	4b3e      	ldr	r3, [pc, #248]	; (1c2d4 <mem_manage_fault.constprop.0+0x11c>)
   1c1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c1de:	06db      	lsls	r3, r3, #27
   1c1e0:	d509      	bpl.n	1c1f6 <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1c1e2:	4b3d      	ldr	r3, [pc, #244]	; (1c2d8 <mem_manage_fault.constprop.0+0x120>)
   1c1e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c1e8:	e9c7 4304 	strd	r4, r3, [r7, #16]
   1c1ec:	4838      	ldr	r0, [pc, #224]	; (1c2d0 <mem_manage_fault.constprop.0+0x118>)
   1c1ee:	f107 0210 	add.w	r2, r7, #16
   1c1f2:	f00c f8d1 	bl	28398 <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1c1f6:	4b37      	ldr	r3, [pc, #220]	; (1c2d4 <mem_manage_fault.constprop.0+0x11c>)
   1c1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c1fa:	0718      	lsls	r0, r3, #28
   1c1fc:	d50a      	bpl.n	1c214 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1c1fe:	4b37      	ldr	r3, [pc, #220]	; (1c2dc <mem_manage_fault.constprop.0+0x124>)
   1c200:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c204:	617b      	str	r3, [r7, #20]
   1c206:	2302      	movs	r3, #2
   1c208:	4831      	ldr	r0, [pc, #196]	; (1c2d0 <mem_manage_fault.constprop.0+0x118>)
   1c20a:	613b      	str	r3, [r7, #16]
   1c20c:	f107 0210 	add.w	r2, r7, #16
   1c210:	f00c f8c2 	bl	28398 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1c214:	4c2f      	ldr	r4, [pc, #188]	; (1c2d4 <mem_manage_fault.constprop.0+0x11c>)
   1c216:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c218:	0799      	lsls	r1, r3, #30
   1c21a:	d522      	bpl.n	1c262 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
   1c21c:	46e8      	mov	r8, sp
   1c21e:	4b30      	ldr	r3, [pc, #192]	; (1c2e0 <mem_manage_fault.constprop.0+0x128>)
   1c220:	f107 0210 	add.w	r2, r7, #16
   1c224:	617b      	str	r3, [r7, #20]
   1c226:	2302      	movs	r3, #2
   1c228:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c22c:	613b      	str	r3, [r7, #16]
   1c22e:	4828      	ldr	r0, [pc, #160]	; (1c2d0 <mem_manage_fault.constprop.0+0x118>)
   1c230:	f00c f8b2 	bl	28398 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   1c234:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1c236:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1c238:	0612      	lsls	r2, r2, #24
   1c23a:	d512      	bpl.n	1c262 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1c23c:	b088      	sub	sp, #32
   1c23e:	466a      	mov	r2, sp
   1c240:	4928      	ldr	r1, [pc, #160]	; (1c2e4 <mem_manage_fault.constprop.0+0x12c>)
   1c242:	4823      	ldr	r0, [pc, #140]	; (1c2d0 <mem_manage_fault.constprop.0+0x118>)
   1c244:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c248:	2303      	movs	r3, #3
   1c24a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c24e:	f842 3f10 	str.w	r3, [r2, #16]!
   1c252:	f00c f8a1 	bl	28398 <z_log_msg_static_create.constprop.0>
   1c256:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   1c258:	b11e      	cbz	r6, 1c262 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1c25a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c25c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1c260:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1c262:	4b1c      	ldr	r3, [pc, #112]	; (1c2d4 <mem_manage_fault.constprop.0+0x11c>)
   1c264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c266:	07dc      	lsls	r4, r3, #31
   1c268:	d50a      	bpl.n	1c280 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
   1c26a:	4b1f      	ldr	r3, [pc, #124]	; (1c2e8 <mem_manage_fault.constprop.0+0x130>)
   1c26c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c270:	617b      	str	r3, [r7, #20]
   1c272:	2302      	movs	r3, #2
   1c274:	4816      	ldr	r0, [pc, #88]	; (1c2d0 <mem_manage_fault.constprop.0+0x118>)
   1c276:	613b      	str	r3, [r7, #16]
   1c278:	f107 0210 	add.w	r2, r7, #16
   1c27c:	f00c f88c 	bl	28398 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1c280:	4b14      	ldr	r3, [pc, #80]	; (1c2d4 <mem_manage_fault.constprop.0+0x11c>)
   1c282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c284:	0698      	lsls	r0, r3, #26
   1c286:	d50a      	bpl.n	1c29e <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
   1c288:	4b18      	ldr	r3, [pc, #96]	; (1c2ec <mem_manage_fault.constprop.0+0x134>)
   1c28a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c28e:	617b      	str	r3, [r7, #20]
   1c290:	2302      	movs	r3, #2
   1c292:	480f      	ldr	r0, [pc, #60]	; (1c2d0 <mem_manage_fault.constprop.0+0x118>)
   1c294:	613b      	str	r3, [r7, #16]
   1c296:	f107 0210 	add.w	r2, r7, #16
   1c29a:	f00c f87d 	bl	28398 <z_log_msg_static_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1c29e:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1c2a0:	4b0c      	ldr	r3, [pc, #48]	; (1c2d4 <mem_manage_fault.constprop.0+0x11c>)

	return reason;
}
   1c2a2:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1c2a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1c2a6:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1c2a8:	bf58      	it	pl
   1c2aa:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1c2ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1c2ae:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1c2b0:	bf42      	ittt	mi
   1c2b2:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   1c2b4:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   1c2b8:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1c2ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1c2bc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1c2c0:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1c2c2:	7028      	strb	r0, [r5, #0]
}
   1c2c4:	46bd      	mov	sp, r7
   1c2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c2ca:	bf00      	nop
   1c2cc:	0002cda0 	.word	0x0002cda0
   1c2d0:	0002be68 	.word	0x0002be68
   1c2d4:	e000ed00 	.word	0xe000ed00
   1c2d8:	0002cdb6 	.word	0x0002cdb6
   1c2dc:	0002cde9 	.word	0x0002cde9
   1c2e0:	0002cdfc 	.word	0x0002cdfc
   1c2e4:	0002ce14 	.word	0x0002ce14
   1c2e8:	0002ce2a 	.word	0x0002ce2a
   1c2ec:	0002ce49 	.word	0x0002ce49

0001c2f0 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1c2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c2f4:	b086      	sub	sp, #24
   1c2f6:	4606      	mov	r6, r0
   1c2f8:	460d      	mov	r5, r1
   1c2fa:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   1c2fc:	2402      	movs	r4, #2
   1c2fe:	4b3e      	ldr	r3, [pc, #248]	; (1c3f8 <bus_fault.constprop.0+0x108>)
   1c300:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c304:	617b      	str	r3, [r7, #20]
   1c306:	483d      	ldr	r0, [pc, #244]	; (1c3fc <bus_fault.constprop.0+0x10c>)
   1c308:	613c      	str	r4, [r7, #16]
   1c30a:	f107 0210 	add.w	r2, r7, #16
   1c30e:	f00c f843 	bl	28398 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1c312:	4b3b      	ldr	r3, [pc, #236]	; (1c400 <bus_fault.constprop.0+0x110>)
   1c314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c316:	04d9      	lsls	r1, r3, #19
   1c318:	d509      	bpl.n	1c32e <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   1c31a:	4b3a      	ldr	r3, [pc, #232]	; (1c404 <bus_fault.constprop.0+0x114>)
   1c31c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c320:	e9c7 4304 	strd	r4, r3, [r7, #16]
   1c324:	4835      	ldr	r0, [pc, #212]	; (1c3fc <bus_fault.constprop.0+0x10c>)
   1c326:	f107 0210 	add.w	r2, r7, #16
   1c32a:	f00c f835 	bl	28398 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1c32e:	4b34      	ldr	r3, [pc, #208]	; (1c400 <bus_fault.constprop.0+0x110>)
   1c330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c332:	051a      	lsls	r2, r3, #20
   1c334:	d50a      	bpl.n	1c34c <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1c336:	4b34      	ldr	r3, [pc, #208]	; (1c408 <bus_fault.constprop.0+0x118>)
   1c338:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c33c:	617b      	str	r3, [r7, #20]
   1c33e:	2302      	movs	r3, #2
   1c340:	482e      	ldr	r0, [pc, #184]	; (1c3fc <bus_fault.constprop.0+0x10c>)
   1c342:	613b      	str	r3, [r7, #16]
   1c344:	f107 0210 	add.w	r2, r7, #16
   1c348:	f00c f826 	bl	28398 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1c34c:	4c2c      	ldr	r4, [pc, #176]	; (1c400 <bus_fault.constprop.0+0x110>)
   1c34e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c350:	059b      	lsls	r3, r3, #22
   1c352:	d522      	bpl.n	1c39a <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   1c354:	46e8      	mov	r8, sp
   1c356:	4b2d      	ldr	r3, [pc, #180]	; (1c40c <bus_fault.constprop.0+0x11c>)
   1c358:	4828      	ldr	r0, [pc, #160]	; (1c3fc <bus_fault.constprop.0+0x10c>)
   1c35a:	617b      	str	r3, [r7, #20]
   1c35c:	2302      	movs	r3, #2
   1c35e:	f107 0210 	add.w	r2, r7, #16
   1c362:	613b      	str	r3, [r7, #16]
   1c364:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c368:	f00c f816 	bl	28398 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1c36c:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1c36e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1c370:	0410      	lsls	r0, r2, #16
   1c372:	d512      	bpl.n	1c39a <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1c374:	b088      	sub	sp, #32
   1c376:	466a      	mov	r2, sp
   1c378:	4925      	ldr	r1, [pc, #148]	; (1c410 <bus_fault.constprop.0+0x120>)
   1c37a:	4820      	ldr	r0, [pc, #128]	; (1c3fc <bus_fault.constprop.0+0x10c>)
   1c37c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c380:	2303      	movs	r3, #3
   1c382:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c386:	f842 3f10 	str.w	r3, [r2, #16]!
   1c38a:	f00c f805 	bl	28398 <z_log_msg_static_create.constprop.0>
   1c38e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   1c390:	b11e      	cbz	r6, 1c39a <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1c392:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c394:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1c398:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1c39a:	4b19      	ldr	r3, [pc, #100]	; (1c400 <bus_fault.constprop.0+0x110>)
   1c39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c39e:	0559      	lsls	r1, r3, #21
   1c3a0:	d50a      	bpl.n	1c3b8 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   1c3a2:	4b1c      	ldr	r3, [pc, #112]	; (1c414 <bus_fault.constprop.0+0x124>)
   1c3a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c3a8:	617b      	str	r3, [r7, #20]
   1c3aa:	2302      	movs	r3, #2
   1c3ac:	4813      	ldr	r0, [pc, #76]	; (1c3fc <bus_fault.constprop.0+0x10c>)
   1c3ae:	613b      	str	r3, [r7, #16]
   1c3b0:	f107 0210 	add.w	r2, r7, #16
   1c3b4:	f00b fff0 	bl	28398 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1c3b8:	4b11      	ldr	r3, [pc, #68]	; (1c400 <bus_fault.constprop.0+0x110>)
   1c3ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1c3bc:	05d2      	lsls	r2, r2, #23
   1c3be:	d515      	bpl.n	1c3ec <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   1c3c0:	4b15      	ldr	r3, [pc, #84]	; (1c418 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1c3c2:	617b      	str	r3, [r7, #20]
   1c3c4:	2302      	movs	r3, #2
   1c3c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c3ca:	480c      	ldr	r0, [pc, #48]	; (1c3fc <bus_fault.constprop.0+0x10c>)
   1c3cc:	613b      	str	r3, [r7, #16]
   1c3ce:	f107 0210 	add.w	r2, r7, #16
   1c3d2:	f00b ffe1 	bl	28398 <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   1c3d6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1c3d8:	4a09      	ldr	r2, [pc, #36]	; (1c400 <bus_fault.constprop.0+0x110>)

	return reason;
}
   1c3da:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1c3dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1c3de:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1c3e2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1c3e4:	7028      	strb	r0, [r5, #0]
}
   1c3e6:	46bd      	mov	sp, r7
   1c3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1c3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c3ee:	049b      	lsls	r3, r3, #18
   1c3f0:	d5f1      	bpl.n	1c3d6 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1c3f2:	4b0a      	ldr	r3, [pc, #40]	; (1c41c <bus_fault.constprop.0+0x12c>)
   1c3f4:	e7e5      	b.n	1c3c2 <bus_fault.constprop.0+0xd2>
   1c3f6:	bf00      	nop
   1c3f8:	0002ce78 	.word	0x0002ce78
   1c3fc:	0002be68 	.word	0x0002be68
   1c400:	e000ed00 	.word	0xe000ed00
   1c404:	0002ce8e 	.word	0x0002ce8e
   1c408:	0002cde9 	.word	0x0002cde9
   1c40c:	0002ce9f 	.word	0x0002ce9f
   1c410:	0002ceb8 	.word	0x0002ceb8
   1c414:	0002cecd 	.word	0x0002cecd
   1c418:	0002cee8 	.word	0x0002cee8
   1c41c:	0002ce49 	.word	0x0002ce49

0001c420 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1c420:	b510      	push	{r4, lr}
   1c422:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1c424:	2402      	movs	r4, #2
   1c426:	4b3a      	ldr	r3, [pc, #232]	; (1c510 <usage_fault.constprop.0+0xf0>)
   1c428:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c42c:	4839      	ldr	r0, [pc, #228]	; (1c514 <usage_fault.constprop.0+0xf4>)
   1c42e:	aa04      	add	r2, sp, #16
   1c430:	9305      	str	r3, [sp, #20]
   1c432:	9404      	str	r4, [sp, #16]
   1c434:	f00b ffb0 	bl	28398 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1c438:	4b37      	ldr	r3, [pc, #220]	; (1c518 <usage_fault.constprop.0+0xf8>)
   1c43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c43c:	019b      	lsls	r3, r3, #6
   1c43e:	d508      	bpl.n	1c452 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   1c440:	4b36      	ldr	r3, [pc, #216]	; (1c51c <usage_fault.constprop.0+0xfc>)
   1c442:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c446:	4833      	ldr	r0, [pc, #204]	; (1c514 <usage_fault.constprop.0+0xf4>)
   1c448:	aa04      	add	r2, sp, #16
   1c44a:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1c44e:	f00b ffa3 	bl	28398 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1c452:	4b31      	ldr	r3, [pc, #196]	; (1c518 <usage_fault.constprop.0+0xf8>)
   1c454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c456:	01dc      	lsls	r4, r3, #7
   1c458:	d509      	bpl.n	1c46e <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   1c45a:	4b31      	ldr	r3, [pc, #196]	; (1c520 <usage_fault.constprop.0+0x100>)
   1c45c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c460:	9305      	str	r3, [sp, #20]
   1c462:	2302      	movs	r3, #2
   1c464:	482b      	ldr	r0, [pc, #172]	; (1c514 <usage_fault.constprop.0+0xf4>)
   1c466:	aa04      	add	r2, sp, #16
   1c468:	9304      	str	r3, [sp, #16]
   1c46a:	f00b ff95 	bl	28398 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1c46e:	4b2a      	ldr	r3, [pc, #168]	; (1c518 <usage_fault.constprop.0+0xf8>)
   1c470:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1c472:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   1c476:	d009      	beq.n	1c48c <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1c478:	2402      	movs	r4, #2
   1c47a:	4b2a      	ldr	r3, [pc, #168]	; (1c524 <usage_fault.constprop.0+0x104>)
   1c47c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c480:	4824      	ldr	r0, [pc, #144]	; (1c514 <usage_fault.constprop.0+0xf4>)
   1c482:	aa04      	add	r2, sp, #16
   1c484:	9305      	str	r3, [sp, #20]
   1c486:	9404      	str	r4, [sp, #16]
   1c488:	f00b ff86 	bl	28398 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1c48c:	4b22      	ldr	r3, [pc, #136]	; (1c518 <usage_fault.constprop.0+0xf8>)
   1c48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c490:	0318      	lsls	r0, r3, #12
   1c492:	d509      	bpl.n	1c4a8 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
   1c494:	4b24      	ldr	r3, [pc, #144]	; (1c528 <usage_fault.constprop.0+0x108>)
   1c496:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c49a:	9305      	str	r3, [sp, #20]
   1c49c:	2302      	movs	r3, #2
   1c49e:	481d      	ldr	r0, [pc, #116]	; (1c514 <usage_fault.constprop.0+0xf4>)
   1c4a0:	aa04      	add	r2, sp, #16
   1c4a2:	9304      	str	r3, [sp, #16]
   1c4a4:	f00b ff78 	bl	28398 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1c4a8:	4b1b      	ldr	r3, [pc, #108]	; (1c518 <usage_fault.constprop.0+0xf8>)
   1c4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c4ac:	0359      	lsls	r1, r3, #13
   1c4ae:	d509      	bpl.n	1c4c4 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1c4b0:	4b1e      	ldr	r3, [pc, #120]	; (1c52c <usage_fault.constprop.0+0x10c>)
   1c4b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c4b6:	9305      	str	r3, [sp, #20]
   1c4b8:	2302      	movs	r3, #2
   1c4ba:	4816      	ldr	r0, [pc, #88]	; (1c514 <usage_fault.constprop.0+0xf4>)
   1c4bc:	aa04      	add	r2, sp, #16
   1c4be:	9304      	str	r3, [sp, #16]
   1c4c0:	f00b ff6a 	bl	28398 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1c4c4:	4b14      	ldr	r3, [pc, #80]	; (1c518 <usage_fault.constprop.0+0xf8>)
   1c4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c4c8:	039a      	lsls	r2, r3, #14
   1c4ca:	d509      	bpl.n	1c4e0 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1c4cc:	4b18      	ldr	r3, [pc, #96]	; (1c530 <usage_fault.constprop.0+0x110>)
   1c4ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c4d2:	9305      	str	r3, [sp, #20]
   1c4d4:	2302      	movs	r3, #2
   1c4d6:	480f      	ldr	r0, [pc, #60]	; (1c514 <usage_fault.constprop.0+0xf4>)
   1c4d8:	aa04      	add	r2, sp, #16
   1c4da:	9304      	str	r3, [sp, #16]
   1c4dc:	f00b ff5c 	bl	28398 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1c4e0:	4b0d      	ldr	r3, [pc, #52]	; (1c518 <usage_fault.constprop.0+0xf8>)
   1c4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c4e4:	03db      	lsls	r3, r3, #15
   1c4e6:	d509      	bpl.n	1c4fc <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1c4e8:	4b12      	ldr	r3, [pc, #72]	; (1c534 <usage_fault.constprop.0+0x114>)
   1c4ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c4ee:	9305      	str	r3, [sp, #20]
   1c4f0:	2302      	movs	r3, #2
   1c4f2:	4808      	ldr	r0, [pc, #32]	; (1c514 <usage_fault.constprop.0+0xf4>)
   1c4f4:	aa04      	add	r2, sp, #16
   1c4f6:	9304      	str	r3, [sp, #16]
   1c4f8:	f00b ff4e 	bl	28398 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1c4fc:	4a06      	ldr	r2, [pc, #24]	; (1c518 <usage_fault.constprop.0+0xf8>)

	return reason;
}
   1c4fe:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1c500:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1c502:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1c506:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1c50a:	6293      	str	r3, [r2, #40]	; 0x28
}
   1c50c:	b006      	add	sp, #24
   1c50e:	bd10      	pop	{r4, pc}
   1c510:	0002cf00 	.word	0x0002cf00
   1c514:	0002be68 	.word	0x0002be68
   1c518:	e000ed00 	.word	0xe000ed00
   1c51c:	0002cf18 	.word	0x0002cf18
   1c520:	0002cf2b 	.word	0x0002cf2b
   1c524:	0002cf45 	.word	0x0002cf45
   1c528:	0002cf6f 	.word	0x0002cf6f
   1c52c:	0002cf8d 	.word	0x0002cf8d
   1c530:	0002cfb2 	.word	0x0002cfb2
   1c534:	0002cfcc 	.word	0x0002cfcc

0001c538 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1c538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c53c:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1c53e:	4b7d      	ldr	r3, [pc, #500]	; (1c734 <z_arm_fault+0x1fc>)
{
   1c540:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1c542:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
   1c546:	468a      	mov	sl, r1
   1c548:	4616      	mov	r6, r2
   1c54a:	2500      	movs	r5, #0
   1c54c:	af00      	add	r7, sp, #0
   1c54e:	f3c9 0808 	ubfx	r8, r9, #0, #9
   1c552:	f385 8811 	msr	BASEPRI, r5
   1c556:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1c55a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1c55e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1c562:	d125      	bne.n	1c5b0 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1c564:	07d3      	lsls	r3, r2, #31
   1c566:	d423      	bmi.n	1c5b0 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1c568:	0650      	lsls	r0, r2, #25
   1c56a:	d403      	bmi.n	1c574 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1c56c:	0711      	lsls	r1, r2, #28
   1c56e:	d40f      	bmi.n	1c590 <z_arm_fault+0x58>
			*nested_exc = true;
   1c570:	2501      	movs	r5, #1
   1c572:	e00f      	b.n	1c594 <z_arm_fault+0x5c>
		PR_FAULT_INFO("Exception occurred in Secure State");
   1c574:	4b70      	ldr	r3, [pc, #448]	; (1c738 <z_arm_fault+0x200>)
   1c576:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c57a:	61fb      	str	r3, [r7, #28]
   1c57c:	2302      	movs	r3, #2
   1c57e:	486f      	ldr	r0, [pc, #444]	; (1c73c <z_arm_fault+0x204>)
   1c580:	61bb      	str	r3, [r7, #24]
   1c582:	f107 0218 	add.w	r2, r7, #24
   1c586:	f00b ff07 	bl	28398 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1c58a:	f016 0604 	ands.w	r6, r6, #4
   1c58e:	d000      	beq.n	1c592 <z_arm_fault+0x5a>
			ptr_esf = (z_arch_esf_t *)psp;
   1c590:	4654      	mov	r4, sl
	*nested_exc = false;
   1c592:	2500      	movs	r5, #0
	*recoverable = false;
   1c594:	2300      	movs	r3, #0
   1c596:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   1c598:	f1a8 0303 	sub.w	r3, r8, #3
   1c59c:	2b09      	cmp	r3, #9
   1c59e:	f200 80a8 	bhi.w	1c6f2 <z_arm_fault+0x1ba>
   1c5a2:	e8df f003 	tbb	[pc, r3]
   1c5a6:	9b07      	.short	0x9b07
   1c5a8:	a6a6979e 	.word	0xa6a6979e
   1c5ac:	a1a6a6a6 	.word	0xa1a6a6a6
		return NULL;
   1c5b0:	462c      	mov	r4, r5
   1c5b2:	e7ef      	b.n	1c594 <z_arm_fault+0x5c>
	PR_FAULT_INFO("***** HARD FAULT *****");
   1c5b4:	46e9      	mov	r9, sp
   1c5b6:	f04f 0802 	mov.w	r8, #2
   1c5ba:	4b61      	ldr	r3, [pc, #388]	; (1c740 <z_arm_fault+0x208>)
   1c5bc:	f107 0218 	add.w	r2, r7, #24
   1c5c0:	61fb      	str	r3, [r7, #28]
   1c5c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c5c6:	485d      	ldr	r0, [pc, #372]	; (1c73c <z_arm_fault+0x204>)
   1c5c8:	f8c7 8018 	str.w	r8, [r7, #24]
   1c5cc:	f00b fee4 	bl	28398 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   1c5d0:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1c5d2:	4e58      	ldr	r6, [pc, #352]	; (1c734 <z_arm_fault+0x1fc>)
	*recoverable = false;
   1c5d4:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1c5d6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1c5d8:	079a      	lsls	r2, r3, #30
   1c5da:	d50b      	bpl.n	1c5f4 <z_arm_fault+0xbc>
		PR_EXC("  Bus fault on vector table read");
   1c5dc:	4b59      	ldr	r3, [pc, #356]	; (1c744 <z_arm_fault+0x20c>)
		PR_EXC("  Debug event");
   1c5de:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   1c5e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c5e6:	4855      	ldr	r0, [pc, #340]	; (1c73c <z_arm_fault+0x204>)
   1c5e8:	f107 0218 	add.w	r2, r7, #24
   1c5ec:	f00b fed4 	bl	28398 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1c5f0:	2300      	movs	r3, #0
   1c5f2:	e038      	b.n	1c666 <z_arm_fault+0x12e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1c5f4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1c5f6:	2b00      	cmp	r3, #0
   1c5f8:	da01      	bge.n	1c5fe <z_arm_fault+0xc6>
		PR_EXC("  Debug event");
   1c5fa:	4b53      	ldr	r3, [pc, #332]	; (1c748 <z_arm_fault+0x210>)
   1c5fc:	e7ef      	b.n	1c5de <z_arm_fault+0xa6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1c5fe:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1c600:	005b      	lsls	r3, r3, #1
   1c602:	d5f5      	bpl.n	1c5f0 <z_arm_fault+0xb8>
		PR_EXC("  Fault escalation (see below)");
   1c604:	4b51      	ldr	r3, [pc, #324]	; (1c74c <z_arm_fault+0x214>)
   1c606:	f107 0218 	add.w	r2, r7, #24
   1c60a:	e9c7 8306 	strd	r8, r3, [r7, #24]
   1c60e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c612:	484a      	ldr	r0, [pc, #296]	; (1c73c <z_arm_fault+0x204>)
   1c614:	f00b fec0 	bl	28398 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1c618:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   1c61a:	69a2      	ldr	r2, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1c61c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1c620:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1c622:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c626:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1c62a:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1c62c:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1c630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1c634:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1c636:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c63a:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1c63e:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1c642:	429a      	cmp	r2, r3
   1c644:	d131      	bne.n	1c6aa <z_arm_fault+0x172>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1c646:	b088      	sub	sp, #32
   1c648:	6823      	ldr	r3, [r4, #0]
   1c64a:	466a      	mov	r2, sp
   1c64c:	4940      	ldr	r1, [pc, #256]	; (1c750 <z_arm_fault+0x218>)
   1c64e:	483b      	ldr	r0, [pc, #236]	; (1c73c <z_arm_fault+0x204>)
   1c650:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c654:	2303      	movs	r3, #3
   1c656:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c65a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c65e:	f00b fe9b 	bl	28398 <z_log_msg_static_create.constprop.0>
   1c662:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   1c664:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1c666:	79fa      	ldrb	r2, [r7, #7]
   1c668:	b9da      	cbnz	r2, 1c6a2 <z_arm_fault+0x16a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1c66a:	f107 0608 	add.w	r6, r7, #8
   1c66e:	f104 0c20 	add.w	ip, r4, #32
   1c672:	4632      	mov	r2, r6
   1c674:	6820      	ldr	r0, [r4, #0]
   1c676:	6861      	ldr	r1, [r4, #4]
   1c678:	3408      	adds	r4, #8
   1c67a:	c203      	stmia	r2!, {r0, r1}
   1c67c:	4564      	cmp	r4, ip
   1c67e:	4616      	mov	r6, r2
   1c680:	d1f7      	bne.n	1c672 <z_arm_fault+0x13a>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1c682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c684:	2d00      	cmp	r5, #0
   1c686:	d050      	beq.n	1c72a <z_arm_fault+0x1f2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1c688:	f3c2 0108 	ubfx	r1, r2, #0, #9
   1c68c:	b921      	cbnz	r1, 1c698 <z_arm_fault+0x160>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1c68e:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   1c692:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1c696:	627a      	str	r2, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1c698:	4618      	mov	r0, r3
   1c69a:	f107 0108 	add.w	r1, r7, #8
   1c69e:	f7ff fc03 	bl	1bea8 <z_arm_fatal_error>
}
   1c6a2:	3728      	adds	r7, #40	; 0x28
   1c6a4:	46bd      	mov	sp, r7
   1c6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1c6aa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1c6ac:	b2db      	uxtb	r3, r3
   1c6ae:	b123      	cbz	r3, 1c6ba <z_arm_fault+0x182>
			reason = mem_manage_fault(esf, 1, recoverable);
   1c6b0:	2001      	movs	r0, #1
   1c6b2:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1c6b4:	f7ff fd80 	bl	1c1b8 <mem_manage_fault.constprop.0>
   1c6b8:	e00e      	b.n	1c6d8 <z_arm_fault+0x1a0>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1c6ba:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1c6bc:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   1c6c0:	d004      	beq.n	1c6cc <z_arm_fault+0x194>
			reason = bus_fault(esf, 1, recoverable);
   1c6c2:	2001      	movs	r0, #1
   1c6c4:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
   1c6c6:	f7ff fe13 	bl	1c2f0 <bus_fault.constprop.0>
   1c6ca:	e005      	b.n	1c6d8 <z_arm_fault+0x1a0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1c6cc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1c6ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1c6d2:	d38d      	bcc.n	1c5f0 <z_arm_fault+0xb8>
			reason = usage_fault(esf);
   1c6d4:	f7ff fea4 	bl	1c420 <usage_fault.constprop.0>
   1c6d8:	4603      	mov	r3, r0
   1c6da:	e7c4      	b.n	1c666 <z_arm_fault+0x12e>
		reason = mem_manage_fault(esf, 0, recoverable);
   1c6dc:	2000      	movs	r0, #0
   1c6de:	1df9      	adds	r1, r7, #7
   1c6e0:	e7e8      	b.n	1c6b4 <z_arm_fault+0x17c>
		reason = bus_fault(esf, 0, recoverable);
   1c6e2:	2000      	movs	r0, #0
   1c6e4:	1df9      	adds	r1, r7, #7
   1c6e6:	e7ee      	b.n	1c6c6 <z_arm_fault+0x18e>
	PR_FAULT_INFO(
   1c6e8:	4b1a      	ldr	r3, [pc, #104]	; (1c754 <z_arm_fault+0x21c>)
   1c6ea:	61fb      	str	r3, [r7, #28]
   1c6ec:	2302      	movs	r3, #2
   1c6ee:	61bb      	str	r3, [r7, #24]
   1c6f0:	e777      	b.n	1c5e2 <z_arm_fault+0xaa>
	PR_FAULT_INFO("***** %s %d) *****",
   1c6f2:	4a19      	ldr	r2, [pc, #100]	; (1c758 <z_arm_fault+0x220>)
   1c6f4:	466e      	mov	r6, sp
   1c6f6:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
   1c6fa:	b08a      	sub	sp, #40	; 0x28
   1c6fc:	4b17      	ldr	r3, [pc, #92]	; (1c75c <z_arm_fault+0x224>)
   1c6fe:	bf18      	it	ne
   1c700:	4613      	movne	r3, r2
   1c702:	466a      	mov	r2, sp
   1c704:	4916      	ldr	r1, [pc, #88]	; (1c760 <z_arm_fault+0x228>)
   1c706:	480d      	ldr	r0, [pc, #52]	; (1c73c <z_arm_fault+0x204>)
   1c708:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c70c:	f1a8 0310 	sub.w	r3, r8, #16
   1c710:	61d3      	str	r3, [r2, #28]
   1c712:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c716:	8413      	strh	r3, [r2, #32]
   1c718:	4b12      	ldr	r3, [pc, #72]	; (1c764 <z_arm_fault+0x22c>)
   1c71a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c71e:	f842 3f10 	str.w	r3, [r2, #16]!
   1c722:	f00b fe39 	bl	28398 <z_log_msg_static_create.constprop.0>
   1c726:	46b5      	mov	sp, r6
}
   1c728:	e762      	b.n	1c5f0 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1c72a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
   1c72e:	f022 0201 	bic.w	r2, r2, #1
   1c732:	e7b0      	b.n	1c696 <z_arm_fault+0x15e>
   1c734:	e000ed00 	.word	0xe000ed00
   1c738:	0002d025 	.word	0x0002d025
   1c73c:	0002be68 	.word	0x0002be68
   1c740:	0002d048 	.word	0x0002d048
   1c744:	0002d05f 	.word	0x0002d05f
   1c748:	0002d080 	.word	0x0002d080
   1c74c:	0002d08e 	.word	0x0002d08e
   1c750:	0002d0ad 	.word	0x0002d0ad
   1c754:	0002d0c9 	.word	0x0002d0c9
   1c758:	0002d00c 	.word	0x0002d00c
   1c75c:	0002cff7 	.word	0x0002cff7
   1c760:	0002d0ed 	.word	0x0002d0ed
   1c764:	01000004 	.word	0x01000004

0001c768 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1c768:	4b04      	ldr	r3, [pc, #16]	; (1c77c <z_arm_fault_init+0x14>)
   1c76a:	695a      	ldr	r2, [r3, #20]
   1c76c:	f042 0210 	orr.w	r2, r2, #16
   1c770:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1c772:	695a      	ldr	r2, [r3, #20]
   1c774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1c778:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1c77a:	4770      	bx	lr
   1c77c:	e000ed00 	.word	0xe000ed00

0001c780 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1c780:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1c784:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1c788:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1c78a:	4672      	mov	r2, lr
	bl z_arm_fault
   1c78c:	f7ff fed4 	bl	1c538 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1c790:	bd01      	pop	{r0, pc}
   1c792:	bf00      	nop

0001c794 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1c794:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c796:	2120      	movs	r1, #32
   1c798:	4803      	ldr	r0, [pc, #12]	; (1c7a8 <z_arm_interrupt_init+0x14>)
   1c79a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1c79c:	3301      	adds	r3, #1
   1c79e:	2b41      	cmp	r3, #65	; 0x41
   1c7a0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1c7a4:	d1f9      	bne.n	1c79a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1c7a6:	4770      	bx	lr
   1c7a8:	e000e100 	.word	0xe000e100

0001c7ac <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1c7ac:	2000      	movs	r0, #0
    msr CONTROL, r0
   1c7ae:	f380 8814 	msr	CONTROL, r0
    isb
   1c7b2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   1c7b6:	2000      	movs	r0, #0
    msr MSPLIM, r0
   1c7b8:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   1c7bc:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1c7c0:	f7fe fb32 	bl	1ae28 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1c7c4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1c7c6:	490e      	ldr	r1, [pc, #56]	; (1c800 <__start+0x54>)
    str r0, [r1]
   1c7c8:	6008      	str	r0, [r1, #0]
    dsb
   1c7ca:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1c7ce:	480d      	ldr	r0, [pc, #52]	; (1c804 <__start+0x58>)
    msr msp, r0
   1c7d0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1c7d4:	f000 f83e 	bl	1c854 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1c7d8:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1c7da:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1c7de:	480a      	ldr	r0, [pc, #40]	; (1c808 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1c7e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1c7e4:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1c7e6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1c7ea:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1c7ee:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1c7f0:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1c7f2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1c7f6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1c7fa:	f7ff fc05 	bl	1c008 <z_arm_prep_c>
   1c7fe:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   1c800:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1c804:	2000fd98 	.word	0x2000fd98
    ldr r0, =z_interrupt_stacks
   1c808:	2000e458 	.word	0x2000e458

0001c80c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1c80c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1c810:	4905      	ldr	r1, [pc, #20]	; (1c828 <sys_arch_reboot+0x1c>)
   1c812:	4b06      	ldr	r3, [pc, #24]	; (1c82c <sys_arch_reboot+0x20>)
   1c814:	68ca      	ldr	r2, [r1, #12]
   1c816:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c81a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1c81c:	60cb      	str	r3, [r1, #12]
   1c81e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1c822:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1c824:	e7fd      	b.n	1c822 <sys_arch_reboot+0x16>
   1c826:	bf00      	nop
   1c828:	e000ed00 	.word	0xe000ed00
   1c82c:	05fa0004 	.word	0x05fa0004

0001c830 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   1c830:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   1c832:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1c834:	4906      	ldr	r1, [pc, #24]	; (1c850 <z_arm_clear_arm_mpu_config+0x20>)
   1c836:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   1c83a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   1c83e:	4293      	cmp	r3, r2
   1c840:	db00      	blt.n	1c844 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1c842:	4770      	bx	lr
  mpu->RNR = rnr;
   1c844:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   1c848:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   1c84c:	3301      	adds	r3, #1
   1c84e:	e7f6      	b.n	1c83e <z_arm_clear_arm_mpu_config+0xe>
   1c850:	e000ed00 	.word	0xe000ed00

0001c854 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1c854:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1c856:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1c858:	2400      	movs	r4, #0
   1c85a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1c85e:	f7ff ffe7 	bl	1c830 <z_arm_clear_arm_mpu_config>
   1c862:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1c864:	f04f 30ff 	mov.w	r0, #4294967295
   1c868:	4a0c      	ldr	r2, [pc, #48]	; (1c89c <z_arm_init_arch_hw_at_boot+0x48>)
   1c86a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1c86e:	3301      	adds	r3, #1
   1c870:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   1c872:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1c876:	d1f8      	bne.n	1c86a <z_arm_init_arch_hw_at_boot+0x16>
   1c878:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1c87a:	f04f 30ff 	mov.w	r0, #4294967295
   1c87e:	4a07      	ldr	r2, [pc, #28]	; (1c89c <z_arm_init_arch_hw_at_boot+0x48>)
   1c880:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1c884:	3301      	adds	r3, #1
   1c886:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1c888:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1c88c:	d1f8      	bne.n	1c880 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1c88e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1c890:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c894:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1c898:	bd10      	pop	{r4, pc}
   1c89a:	bf00      	nop
   1c89c:	e000e100 	.word	0xe000e100

0001c8a0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1c8a0:	4b08      	ldr	r3, [pc, #32]	; (1c8c4 <z_impl_k_thread_abort+0x24>)
   1c8a2:	689b      	ldr	r3, [r3, #8]
   1c8a4:	4283      	cmp	r3, r0
   1c8a6:	d10b      	bne.n	1c8c0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1c8a8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1c8ac:	b143      	cbz	r3, 1c8c0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1c8ae:	4b06      	ldr	r3, [pc, #24]	; (1c8c8 <z_impl_k_thread_abort+0x28>)
   1c8b0:	685a      	ldr	r2, [r3, #4]
   1c8b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1c8b6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1c8b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1c8ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1c8be:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   1c8c0:	f009 babe 	b.w	25e40 <z_thread_abort>
   1c8c4:	2000d8fc 	.word	0x2000d8fc
   1c8c8:	e000ed00 	.word	0xe000ed00

0001c8cc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1c8cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1c8ce:	4c09      	ldr	r4, [pc, #36]	; (1c8f4 <z_arm_configure_static_mpu_regions+0x28>)
   1c8d0:	4a09      	ldr	r2, [pc, #36]	; (1c8f8 <z_arm_configure_static_mpu_regions+0x2c>)
   1c8d2:	4623      	mov	r3, r4
   1c8d4:	2101      	movs	r1, #1
   1c8d6:	4809      	ldr	r0, [pc, #36]	; (1c8fc <z_arm_configure_static_mpu_regions+0x30>)
   1c8d8:	f000 f92a 	bl	1cb30 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1c8dc:	2300      	movs	r3, #0
   1c8de:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1c8e0:	4b07      	ldr	r3, [pc, #28]	; (1c900 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c8e2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1c8e4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c8e6:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1c8e8:	9301      	str	r3, [sp, #4]
   1c8ea:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c8ec:	f000 f92a 	bl	1cb44 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1c8f0:	b004      	add	sp, #16
   1c8f2:	bd10      	pop	{r4, pc}
   1c8f4:	20040000 	.word	0x20040000
   1c8f8:	2000c580 	.word	0x2000c580
   1c8fc:	0002bf30 	.word	0x0002bf30
   1c900:	2000c958 	.word	0x2000c958

0001c904 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   1c904:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   1c906:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1c908:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1c90a:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1c90e:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   1c912:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1c914:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1c916:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1c918:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   1c91c:	4905      	ldr	r1, [pc, #20]	; (1c934 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1c91e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1c922:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   1c926:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   1c92a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   1c92e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1c932:	bd10      	pop	{r4, pc}
   1c934:	e000ed00 	.word	0xe000ed00

0001c938 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   1c938:	b580      	push	{r7, lr}
   1c93a:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1c93c:	b088      	sub	sp, #32
   1c93e:	466a      	mov	r2, sp
   1c940:	4b07      	ldr	r3, [pc, #28]	; (1c960 <region_allocate_and_init.part.0+0x28>)
   1c942:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c946:	2303      	movs	r3, #3
   1c948:	f842 3f10 	str.w	r3, [r2, #16]!
   1c94c:	2300      	movs	r3, #0
   1c94e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c952:	4804      	ldr	r0, [pc, #16]	; (1c964 <region_allocate_and_init.part.0+0x2c>)
   1c954:	f7fe fcf0 	bl	1b338 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   1c958:	f06f 0015 	mvn.w	r0, #21
   1c95c:	46bd      	mov	sp, r7
   1c95e:	bd80      	pop	{r7, pc}
   1c960:	0002d104 	.word	0x0002d104
   1c964:	0002bdf8 	.word	0x0002bdf8

0001c968 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c96c:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1c96e:	4606      	mov	r6, r0
   1c970:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1c974:	b087      	sub	sp, #28
	MPU->RNR = rnr;
   1c976:	4d5f      	ldr	r5, [pc, #380]	; (1caf4 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1c978:	af00      	add	r7, sp, #0
   1c97a:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
   1c97c:	687b      	ldr	r3, [r7, #4]
   1c97e:	4599      	cmp	r9, r3
   1c980:	da35      	bge.n	1c9ee <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
   1c982:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1c986:	f1b8 0f00 	cmp.w	r8, #0
   1c98a:	d054      	beq.n	1ca36 <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
   1c98c:	f1b8 0f1f 	cmp.w	r8, #31
   1c990:	d91b      	bls.n	1c9ca <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
   1c992:	f018 0f1f 	tst.w	r8, #31
   1c996:	d118      	bne.n	1c9ca <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
   1c998:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   1c99c:	f01b 0f1f 	tst.w	fp, #31
   1c9a0:	d113      	bne.n	1c9ca <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1c9a2:	4658      	mov	r0, fp
   1c9a4:	f00b fcfd 	bl	283a2 <arm_cmse_mpu_region_get>
   1c9a8:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1c9aa:	eb08 000b 	add.w	r0, r8, fp
   1c9ae:	3801      	subs	r0, #1
   1c9b0:	f00b fcf7 	bl	283a2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1c9b4:	4582      	cmp	sl, r0
   1c9b6:	d01f      	beq.n	1c9f8 <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   1c9b8:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1c9bc:	466c      	mov	r4, sp
   1c9be:	b088      	sub	sp, #32
   1c9c0:	466a      	mov	r2, sp
   1c9c2:	494d      	ldr	r1, [pc, #308]	; (1caf8 <mpu_configure_regions_and_partition.constprop.0+0x190>)
   1c9c4:	e9c2 1a05 	strd	r1, sl, [r2, #20]
   1c9c8:	e005      	b.n	1c9d6 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1c9ca:	466c      	mov	r4, sp
   1c9cc:	b088      	sub	sp, #32
   1c9ce:	466a      	mov	r2, sp
   1c9d0:	4b4a      	ldr	r3, [pc, #296]	; (1cafc <mpu_configure_regions_and_partition.constprop.0+0x194>)
   1c9d2:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
   1c9d6:	2303      	movs	r3, #3
   1c9d8:	f842 3f10 	str.w	r3, [r2, #16]!
   1c9dc:	2300      	movs	r3, #0
   1c9de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c9e2:	4847      	ldr	r0, [pc, #284]	; (1cb00 <mpu_configure_regions_and_partition.constprop.0+0x198>)
   1c9e4:	f7fe fca8 	bl	1b338 <z_impl_z_log_msg_static_create>
   1c9e8:	46a5      	mov	sp, r4
			return -EINVAL;
   1c9ea:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1c9ee:	4620      	mov	r0, r4
   1c9f0:	371c      	adds	r7, #28
   1c9f2:	46bd      	mov	sp, r7
   1c9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   1c9f8:	f11a 0f16 	cmn.w	sl, #22
   1c9fc:	d0de      	beq.n	1c9bc <mpu_configure_regions_and_partition.constprop.0+0x54>
   1c9fe:	4554      	cmp	r4, sl
   1ca00:	dddc      	ble.n	1c9bc <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
   1ca02:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1ca06:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   1ca0a:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
   1ca0e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1ca12:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1ca16:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1ca1a:	e9d6 2100 	ldrd	r2, r1, [r6]
   1ca1e:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
   1ca20:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1ca22:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
   1ca26:	d11e      	bne.n	1ca66 <mpu_configure_regions_and_partition.constprop.0+0xfe>
   1ca28:	45d8      	cmp	r8, fp
   1ca2a:	d108      	bne.n	1ca3e <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
   1ca2c:	4631      	mov	r1, r6
   1ca2e:	fa5f f08a 	uxtb.w	r0, sl
   1ca32:	f00b fcbf 	bl	283b4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1ca36:	f109 0901 	add.w	r9, r9, #1
   1ca3a:	360c      	adds	r6, #12
   1ca3c:	e79e      	b.n	1c97c <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
   1ca3e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1ca42:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   1ca46:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   1ca4a:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   1ca4e:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
   1ca50:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
   1ca52:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   1ca56:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   1ca58:	f00b fcac 	bl	283b4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1ca5c:	f110 0f16 	cmn.w	r0, #22
   1ca60:	d0c3      	beq.n	1c9ea <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
   1ca62:	1c44      	adds	r4, r0, #1
   1ca64:	e7e7      	b.n	1ca36 <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
   1ca66:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
   1ca68:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
   1ca6a:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1ca6c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   1ca70:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   1ca74:	d108      	bne.n	1ca88 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
   1ca76:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1ca7a:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   1ca7c:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1ca80:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   1ca82:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   1ca86:	e7e7      	b.n	1ca58 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
   1ca88:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   1ca8c:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1ca90:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
   1ca92:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1ca96:	4631      	mov	r1, r6
   1ca98:	f00b fc8c 	bl	283b4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1ca9c:	f110 0f16 	cmn.w	r0, #22
   1caa0:	d0a3      	beq.n	1c9ea <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
   1caa2:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1caa6:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1caaa:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   1caac:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
   1cab0:	f362 0304 	bfi	r3, r2, #0, #5
   1cab4:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
   1cab6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1caba:	7c3a      	ldrb	r2, [r7, #16]
   1cabc:	085b      	lsrs	r3, r3, #1
   1cabe:	f363 1247 	bfi	r2, r3, #5, #3
   1cac2:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
   1cac4:	e9d6 3200 	ldrd	r3, r2, [r6]
   1cac8:	4413      	add	r3, r2
   1caca:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   1cacc:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   1cad0:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1cad2:	4443      	add	r3, r8
   1cad4:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
   1cad8:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   1cada:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1cade:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   1cae0:	617b      	str	r3, [r7, #20]
   1cae2:	d902      	bls.n	1caea <mpu_configure_regions_and_partition.constprop.0+0x182>
   1cae4:	f7ff ff28 	bl	1c938 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   1cae8:	e7b8      	b.n	1ca5c <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
   1caea:	f107 0108 	add.w	r1, r7, #8
   1caee:	f7ff ff09 	bl	1c904 <region_init>
   1caf2:	e7b6      	b.n	1ca62 <mpu_configure_regions_and_partition.constprop.0+0xfa>
   1caf4:	e000ed00 	.word	0xe000ed00
   1caf8:	0002d14d 	.word	0x0002d14d
   1cafc:	0002d12a 	.word	0x0002d12a
   1cb00:	0002bdf8 	.word	0x0002bdf8

0001cb04 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1cb04:	2205      	movs	r2, #5
   1cb06:	4b04      	ldr	r3, [pc, #16]	; (1cb18 <arm_core_mpu_enable+0x14>)
   1cb08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1cb0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1cb10:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1cb14:	4770      	bx	lr
   1cb16:	bf00      	nop
   1cb18:	e000ed00 	.word	0xe000ed00

0001cb1c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1cb1c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1cb20:	2200      	movs	r2, #0
   1cb22:	4b02      	ldr	r3, [pc, #8]	; (1cb2c <arm_core_mpu_disable+0x10>)
   1cb24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   1cb28:	4770      	bx	lr
   1cb2a:	bf00      	nop
   1cb2c:	e000ed00 	.word	0xe000ed00

0001cb30 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1cb30:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1cb32:	4c03      	ldr	r4, [pc, #12]	; (1cb40 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1cb34:	7822      	ldrb	r2, [r4, #0]
   1cb36:	f7ff ff17 	bl	1c968 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1cb3a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1cb3c:	bd10      	pop	{r4, pc}
   1cb3e:	bf00      	nop
   1cb40:	2000dafe 	.word	0x2000dafe

0001cb44 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   1cb44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb48:	4d29      	ldr	r5, [pc, #164]	; (1cbf0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
   1cb4a:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
   1cb4c:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1cb4e:	f04f 0800 	mov.w	r8, #0
   1cb52:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
   1cb54:	4f27      	ldr	r7, [pc, #156]	; (1cbf4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1cb56:	45d0      	cmp	r8, sl
   1cb58:	da1b      	bge.n	1cb92 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   1cb5a:	f8d6 9004 	ldr.w	r9, [r6, #4]
   1cb5e:	f1b9 0f00 	cmp.w	r9, #0
   1cb62:	d03f      	beq.n	1cbe4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1cb64:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1cb66:	4608      	mov	r0, r1
   1cb68:	9101      	str	r1, [sp, #4]
   1cb6a:	f00b fc1a 	bl	283a2 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1cb6e:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1cb70:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1cb72:	eb09 0001 	add.w	r0, r9, r1
   1cb76:	3801      	subs	r0, #1
   1cb78:	f00b fc13 	bl	283a2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1cb7c:	4284      	cmp	r4, r0
   1cb7e:	f04f 0214 	mov.w	r2, #20
   1cb82:	4b1d      	ldr	r3, [pc, #116]	; (1cbf8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
   1cb84:	d008      	beq.n	1cb98 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   1cb86:	fb02 f308 	mul.w	r3, r2, r8
   1cb8a:	f06f 0215 	mvn.w	r2, #21
   1cb8e:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   1cb92:	b003      	add	sp, #12
   1cb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1cb98:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   1cb9c:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1cb9e:	d0f8      	beq.n	1cb92 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1cba0:	7819      	ldrb	r1, [r3, #0]
   1cba2:	42a1      	cmp	r1, r4
   1cba4:	ddf5      	ble.n	1cb92 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
   1cba6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   1cbaa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   1cbae:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   1cbb2:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1cbb6:	f100 0108 	add.w	r1, r0, #8
   1cbba:	7b00      	ldrb	r0, [r0, #12]
   1cbbc:	f364 0004 	bfi	r0, r4, #0, #5
   1cbc0:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   1cbc2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1cbc6:	790c      	ldrb	r4, [r1, #4]
   1cbc8:	0840      	lsrs	r0, r0, #1
   1cbca:	f360 1447 	bfi	r4, r0, #5, #3
   1cbce:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   1cbd0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1cbd4:	f021 011f 	bic.w	r1, r1, #31
   1cbd8:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
   1cbda:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   1cbde:	f021 011f 	bic.w	r1, r1, #31
   1cbe2:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1cbe4:	f108 0801 	add.w	r8, r8, #1
   1cbe8:	3514      	adds	r5, #20
   1cbea:	360c      	adds	r6, #12
   1cbec:	e7b3      	b.n	1cb56 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1cbee:	bf00      	nop
   1cbf0:	2000d1ac 	.word	0x2000d1ac
   1cbf4:	e000ed00 	.word	0xe000ed00
   1cbf8:	2000dafe 	.word	0x2000dafe

0001cbfc <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   1cbfc:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1cbfe:	4d0e      	ldr	r5, [pc, #56]	; (1cc38 <z_arm_mpu_init+0x3c>)
   1cc00:	682c      	ldr	r4, [r5, #0]
   1cc02:	2c10      	cmp	r4, #16
   1cc04:	d815      	bhi.n	1cc32 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1cc06:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   1cc08:	f7ff ff88 	bl	1cb1c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   1cc0c:	4b0b      	ldr	r3, [pc, #44]	; (1cc3c <z_arm_mpu_init+0x40>)
   1cc0e:	4a0c      	ldr	r2, [pc, #48]	; (1cc40 <z_arm_mpu_init+0x44>)
   1cc10:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1cc14:	4284      	cmp	r4, r0
   1cc16:	d105      	bne.n	1cc24 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1cc18:	4b0a      	ldr	r3, [pc, #40]	; (1cc44 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1cc1a:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
   1cc1c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   1cc1e:	f7ff ff71 	bl	1cb04 <arm_core_mpu_enable>
}
   1cc22:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1cc24:	6869      	ldr	r1, [r5, #4]
   1cc26:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1cc2a:	f7ff fe6b 	bl	1c904 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1cc2e:	3001      	adds	r0, #1
   1cc30:	e7f0      	b.n	1cc14 <z_arm_mpu_init+0x18>
		return -1;
   1cc32:	f04f 30ff 	mov.w	r0, #4294967295
   1cc36:	e7f4      	b.n	1cc22 <z_arm_mpu_init+0x26>
   1cc38:	0002bf3c 	.word	0x0002bf3c
   1cc3c:	e000ed00 	.word	0xe000ed00
   1cc40:	0044ffaa 	.word	0x0044ffaa
   1cc44:	2000dafe 	.word	0x2000dafe

0001cc48 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1cc48:	4b01      	ldr	r3, [pc, #4]	; (1cc50 <__stdout_hook_install+0x8>)
   1cc4a:	6018      	str	r0, [r3, #0]
}
   1cc4c:	4770      	bx	lr
   1cc4e:	bf00      	nop
   1cc50:	2000c58c 	.word	0x2000c58c

0001cc54 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   1cc54:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   1cc56:	4c07      	ldr	r4, [pc, #28]	; (1cc74 <_sbrk+0x20>)
   1cc58:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1cc5a:	18c2      	adds	r2, r0, r3
   1cc5c:	4806      	ldr	r0, [pc, #24]	; (1cc78 <_sbrk+0x24>)
   1cc5e:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1cc62:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1cc66:	428a      	cmp	r2, r1
		heap_sz += count;
   1cc68:	bf36      	itet	cc
   1cc6a:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   1cc6c:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1cc70:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   1cc72:	bd10      	pop	{r4, pc}
   1cc74:	2000d1c0 	.word	0x2000d1c0
   1cc78:	20010a18 	.word	0x20010a18

0001cc7c <thingy91_board_init>:

	return 0;
}

static int thingy91_board_init(const struct device *dev)
{
   1cc7c:	b5b0      	push	{r4, r5, r7, lr}
	err = adp536x_init(ADP536X_I2C_DEVICE);
   1cc7e:	483e      	ldr	r0, [pc, #248]	; (1cd78 <thingy91_board_init+0xfc>)
{
   1cc80:	af00      	add	r7, sp, #0
	err = adp536x_init(ADP536X_I2C_DEVICE);
   1cc82:	f7ff f8e3 	bl	1be4c <adp536x_init>
	if (err) {
   1cc86:	4604      	mov	r4, r0
   1cc88:	b300      	cbz	r0, 1cccc <thingy91_board_init+0x50>
		LOG_ERR("ADP536X failed to initialize, error: %d\n", err);
   1cc8a:	466d      	mov	r5, sp
   1cc8c:	b088      	sub	sp, #32
   1cc8e:	466a      	mov	r2, sp
   1cc90:	4b3a      	ldr	r3, [pc, #232]	; (1cd7c <thingy91_board_init+0x100>)
		LOG_ERR("Could not enable fuel gauge: %d", err);
   1cc92:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1cc96:	2303      	movs	r3, #3
   1cc98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cc9c:	4838      	ldr	r0, [pc, #224]	; (1cd80 <thingy91_board_init+0x104>)
   1cc9e:	f842 3f10 	str.w	r3, [r2, #16]!
   1cca2:	f00b fbb6 	bl	28412 <z_log_msg_static_create.constprop.0>
   1cca6:	46ad      	mov	sp, r5
	int err;

	err = power_mgmt_init();
	if (err) {
		LOG_ERR("power_mgmt_init failed with error: %d", err);
   1cca8:	466d      	mov	r5, sp
   1ccaa:	b088      	sub	sp, #32
   1ccac:	466a      	mov	r2, sp
   1ccae:	4b35      	ldr	r3, [pc, #212]	; (1cd84 <thingy91_board_init+0x108>)
   1ccb0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ccb4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1ccb8:	2303      	movs	r3, #3
   1ccba:	4831      	ldr	r0, [pc, #196]	; (1cd80 <thingy91_board_init+0x104>)
   1ccbc:	f842 3f10 	str.w	r3, [r2, #16]!
   1ccc0:	f00b fba7 	bl	28412 <z_log_msg_static_create.constprop.0>
   1ccc4:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   1ccc6:	4620      	mov	r0, r4
   1ccc8:	46bd      	mov	sp, r7
   1ccca:	bdb0      	pop	{r4, r5, r7, pc}
	err = adp536x_buck_1v8_set();
   1cccc:	f00b fb31 	bl	28332 <adp536x_buck_1v8_set>
	if (err) {
   1ccd0:	4604      	mov	r4, r0
   1ccd2:	b120      	cbz	r0, 1ccde <thingy91_board_init+0x62>
		LOG_ERR("Could not set buck to 1.8 V, error: %d\n", err);
   1ccd4:	466d      	mov	r5, sp
   1ccd6:	b088      	sub	sp, #32
   1ccd8:	466a      	mov	r2, sp
   1ccda:	4b2b      	ldr	r3, [pc, #172]	; (1cd88 <thingy91_board_init+0x10c>)
   1ccdc:	e7d9      	b.n	1cc92 <thingy91_board_init+0x16>
	err = adp536x_buckbst_3v3_set();
   1ccde:	f00b fb34 	bl	2834a <adp536x_buckbst_3v3_set>
	if (err) {
   1cce2:	4604      	mov	r4, r0
   1cce4:	b120      	cbz	r0, 1ccf0 <thingy91_board_init+0x74>
		LOG_ERR("Could not set buck/boost to 3.3 V, error: %d\n", err);
   1cce6:	466d      	mov	r5, sp
   1cce8:	b088      	sub	sp, #32
   1ccea:	466a      	mov	r2, sp
   1ccec:	4b27      	ldr	r3, [pc, #156]	; (1cd8c <thingy91_board_init+0x110>)
   1ccee:	e7d0      	b.n	1cc92 <thingy91_board_init+0x16>
	err = adp536x_buckbst_enable(true);
   1ccf0:	2001      	movs	r0, #1
   1ccf2:	f00b fb2f 	bl	28354 <adp536x_buckbst_enable>
	if (err) {
   1ccf6:	4604      	mov	r4, r0
   1ccf8:	b120      	cbz	r0, 1cd04 <thingy91_board_init+0x88>
		LOG_ERR("Could not enable buck/boost output, error: %d\n", err);
   1ccfa:	466d      	mov	r5, sp
   1ccfc:	b088      	sub	sp, #32
   1ccfe:	466a      	mov	r2, sp
   1cd00:	4b23      	ldr	r3, [pc, #140]	; (1cd90 <thingy91_board_init+0x114>)
   1cd02:	e7c6      	b.n	1cc92 <thingy91_board_init+0x16>
	err = adp536x_buck_discharge_set(true);
   1cd04:	2001      	movs	r0, #1
   1cd06:	f00b fb19 	bl	2833c <adp536x_buck_discharge_set>
	if (err) {
   1cd0a:	4604      	mov	r4, r0
   1cd0c:	2800      	cmp	r0, #0
   1cd0e:	d1cb      	bne.n	1cca8 <thingy91_board_init+0x2c>
	err = adp536x_vbus_current_set(ADP536X_VBUS_ILIM_500mA);
   1cd10:	2007      	movs	r0, #7
   1cd12:	f00b fafc 	bl	2830e <adp536x_vbus_current_set>
	if (err) {
   1cd16:	4604      	mov	r4, r0
   1cd18:	b120      	cbz	r0, 1cd24 <thingy91_board_init+0xa8>
		LOG_ERR("Could not set VBUS current limit, error: %d\n", err);
   1cd1a:	466d      	mov	r5, sp
   1cd1c:	b088      	sub	sp, #32
   1cd1e:	466a      	mov	r2, sp
   1cd20:	4b1c      	ldr	r3, [pc, #112]	; (1cd94 <thingy91_board_init+0x118>)
   1cd22:	e7b6      	b.n	1cc92 <thingy91_board_init+0x16>
	err = adp536x_charger_current_set(ADP536X_CHG_CURRENT_320mA);
   1cd24:	201f      	movs	r0, #31
   1cd26:	f00b faec 	bl	28302 <adp536x_charger_current_set>
	if (err) {
   1cd2a:	4604      	mov	r4, r0
   1cd2c:	b120      	cbz	r0, 1cd38 <thingy91_board_init+0xbc>
		LOG_ERR("Could not set charging current, error: %d\n", err);
   1cd2e:	466d      	mov	r5, sp
   1cd30:	b088      	sub	sp, #32
   1cd32:	466a      	mov	r2, sp
   1cd34:	4b18      	ldr	r3, [pc, #96]	; (1cd98 <thingy91_board_init+0x11c>)
   1cd36:	e7ac      	b.n	1cc92 <thingy91_board_init+0x16>
	err = adp536x_oc_chg_current_set(ADP536X_OC_CHG_THRESHOLD_400mA);
   1cd38:	2007      	movs	r0, #7
   1cd3a:	f00b faf3 	bl	28324 <adp536x_oc_chg_current_set>
	if (err) {
   1cd3e:	4604      	mov	r4, r0
   1cd40:	b120      	cbz	r0, 1cd4c <thingy91_board_init+0xd0>
		LOG_ERR("Could not set charge current protection, error: %d\n",
   1cd42:	466d      	mov	r5, sp
   1cd44:	b088      	sub	sp, #32
   1cd46:	466a      	mov	r2, sp
   1cd48:	4b14      	ldr	r3, [pc, #80]	; (1cd9c <thingy91_board_init+0x120>)
   1cd4a:	e7a2      	b.n	1cc92 <thingy91_board_init+0x16>
	err = adp536x_charging_enable(true);
   1cd4c:	2001      	movs	r0, #1
   1cd4e:	f00b fae4 	bl	2831a <adp536x_charging_enable>
	if (err) {
   1cd52:	4604      	mov	r4, r0
   1cd54:	b120      	cbz	r0, 1cd60 <thingy91_board_init+0xe4>
		LOG_ERR("Could not enable charging: %d\n", err);
   1cd56:	466d      	mov	r5, sp
   1cd58:	b088      	sub	sp, #32
   1cd5a:	466a      	mov	r2, sp
   1cd5c:	4b10      	ldr	r3, [pc, #64]	; (1cda0 <thingy91_board_init+0x124>)
   1cd5e:	e798      	b.n	1cc92 <thingy91_board_init+0x16>
	err = adp536x_fg_set_mode(ADP566X_FG_ENABLED, ADP566X_FG_MODE_SLEEP);
   1cd60:	2101      	movs	r1, #1
   1cd62:	4608      	mov	r0, r1
   1cd64:	f00b fafb 	bl	2835e <adp536x_fg_set_mode>
	if (err) {
   1cd68:	4604      	mov	r4, r0
   1cd6a:	2800      	cmp	r0, #0
   1cd6c:	d0ab      	beq.n	1ccc6 <thingy91_board_init+0x4a>
		LOG_ERR("Could not enable fuel gauge: %d", err);
   1cd6e:	466d      	mov	r5, sp
   1cd70:	b088      	sub	sp, #32
   1cd72:	466a      	mov	r2, sp
   1cd74:	4b0b      	ldr	r3, [pc, #44]	; (1cda4 <thingy91_board_init+0x128>)
   1cd76:	e78c      	b.n	1cc92 <thingy91_board_init+0x16>
   1cd78:	0002bae0 	.word	0x0002bae0
   1cd7c:	0002d17f 	.word	0x0002d17f
   1cd80:	0002bd90 	.word	0x0002bd90
   1cd84:	0002d2f8 	.word	0x0002d2f8
   1cd88:	0002d1a8 	.word	0x0002d1a8
   1cd8c:	0002d1d0 	.word	0x0002d1d0
   1cd90:	0002d1fe 	.word	0x0002d1fe
   1cd94:	0002d22d 	.word	0x0002d22d
   1cd98:	0002d25a 	.word	0x0002d25a
   1cd9c:	0002d285 	.word	0x0002d285
   1cda0:	0002d2b9 	.word	0x0002d2b9
   1cda4:	0002d2d8 	.word	0x0002d2d8

0001cda8 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   1cda8:	4602      	mov	r2, r0
   1cdaa:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1cdac:	4801      	ldr	r0, [pc, #4]	; (1cdb4 <k_mutex_lock.constprop.0.isra.0+0xc>)
   1cdae:	f008 ba8f 	b.w	252d0 <z_impl_k_mutex_lock>
   1cdb2:	bf00      	nop
   1cdb4:	2000c8a8 	.word	0x2000c8a8

0001cdb8 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1cdb8:	4801      	ldr	r0, [pc, #4]	; (1cdc0 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1cdba:	f008 bb03 	b.w	253c4 <z_impl_k_mutex_unlock>
   1cdbe:	bf00      	nop
   1cdc0:	2000c8a8 	.word	0x2000c8a8

0001cdc4 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1cdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   1cdc6:	f04f 30ff 	mov.w	r0, #4294967295
   1cdca:	f04f 31ff 	mov.w	r1, #4294967295
   1cdce:	f7ff ffeb 	bl	1cda8 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   1cdd2:	4c0c      	ldr	r4, [pc, #48]	; (1ce04 <net_if_init+0x40>)
   1cdd4:	4e0c      	ldr	r6, [pc, #48]	; (1ce08 <net_if_init+0x44>)
   1cdd6:	42b4      	cmp	r4, r6
   1cdd8:	4627      	mov	r7, r4
   1cdda:	d303      	bcc.n	1cde4 <net_if_init+0x20>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   1cddc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   1cde0:	f7ff bfea 	b.w	1cdb8 <k_mutex_unlock.constprop.0.isra.0>
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   1cde4:	f854 0b04 	ldr.w	r0, [r4], #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1cde8:	6803      	ldr	r3, [r0, #0]
   1cdea:	689d      	ldr	r5, [r3, #8]
	if (!api || !api->init) {
   1cdec:	2d00      	cmp	r5, #0
   1cdee:	d0f2      	beq.n	1cdd6 <net_if_init+0x12>
   1cdf0:	682b      	ldr	r3, [r5, #0]
   1cdf2:	2b00      	cmp	r3, #0
   1cdf4:	d0ef      	beq.n	1cdd6 <net_if_init+0x12>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
   1cdf6:	2109      	movs	r1, #9
   1cdf8:	f00b fb8d 	bl	28516 <net_if_flag_test_and_set.isra.0>
	api->init(iface);
   1cdfc:	4638      	mov	r0, r7
   1cdfe:	682b      	ldr	r3, [r5, #0]
   1ce00:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1ce02:	e7e8      	b.n	1cdd6 <net_if_init+0x12>
   1ce04:	2000c92c 	.word	0x2000c92c
   1ce08:	2000c930 	.word	0x2000c930

0001ce0c <net_if_post_init>:

void net_if_post_init(void)
{
   1ce0c:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1ce0e:	4c07      	ldr	r4, [pc, #28]	; (1ce2c <net_if_post_init+0x20>)
   1ce10:	4d07      	ldr	r5, [pc, #28]	; (1ce30 <net_if_post_init+0x24>)
   1ce12:	42ac      	cmp	r4, r5
   1ce14:	d300      	bcc.n	1ce18 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1ce16:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1ce18:	2103      	movs	r1, #3
   1ce1a:	4620      	mov	r0, r4
   1ce1c:	f00b fb27 	bl	2846e <net_if_flag_is_set>
   1ce20:	b910      	cbnz	r0, 1ce28 <net_if_post_init+0x1c>
			net_if_up(iface);
   1ce22:	4620      	mov	r0, r4
   1ce24:	f00b fb89 	bl	2853a <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1ce28:	3404      	adds	r4, #4
   1ce2a:	e7f2      	b.n	1ce12 <net_if_post_init+0x6>
   1ce2c:	2000c92c 	.word	0x2000c92c
   1ce30:	2000c930 	.word	0x2000c930

0001ce34 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   1ce34:	2300      	movs	r3, #0
{
   1ce36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   1ce3a:	2802      	cmp	r0, #2
{
   1ce3c:	b089      	sub	sp, #36	; 0x24
   1ce3e:	4605      	mov	r5, r0
   1ce40:	4688      	mov	r8, r1
   1ce42:	4693      	mov	fp, r2
	unsigned char zeros[8] = { 0 };
   1ce44:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
   1ce48:	d14d      	bne.n	1cee6 <z_impl_net_addr_ntop+0xb2>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   1ce4a:	a806      	add	r0, sp, #24
   1ce4c:	9104      	str	r1, [sp, #16]
   1ce4e:	4601      	mov	r1, r0
{
   1ce50:	461a      	mov	r2, r3
   1ce52:	e006      	b.n	1ce62 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   1ce54:	780c      	ldrb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   1ce56:	3201      	adds	r2, #1
				zeros[i]++;
   1ce58:	3401      	adds	r4, #1
   1ce5a:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   1ce5c:	b2d4      	uxtb	r4, r2
   1ce5e:	2c08      	cmp	r4, #8
   1ce60:	d003      	beq.n	1ce6a <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1ce62:	f838 4012 	ldrh.w	r4, [r8, r2, lsl #1]
   1ce66:	2c00      	cmp	r4, #0
   1ce68:	d0f4      	beq.n	1ce54 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   1ce6a:	3301      	adds	r3, #1
   1ce6c:	2b08      	cmp	r3, #8
   1ce6e:	f101 0101 	add.w	r1, r1, #1
   1ce72:	d1ed      	bne.n	1ce50 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   1ce74:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   1ce78:	2601      	movs	r6, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   1ce7a:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   1ce7c:	f810 2b01 	ldrb.w	r2, [r0], #1
   1ce80:	42b2      	cmp	r2, r6
				longest = zeros[i];
				pos = i;
   1ce82:	bf88      	it	hi
   1ce84:	b25f      	sxtbhi	r7, r3
		for (i = 0U; i < 8; i++) {
   1ce86:	f103 0301 	add.w	r3, r3, #1
   1ce8a:	b2db      	uxtb	r3, r3
				pos = i;
   1ce8c:	bf88      	it	hi
   1ce8e:	4616      	movhi	r6, r2
		for (i = 0U; i < 8; i++) {
   1ce90:	2b08      	cmp	r3, #8
   1ce92:	d1f3      	bne.n	1ce7c <z_impl_net_addr_ntop+0x48>
		len = 8;
   1ce94:	469a      	mov	sl, r3
   1ce96:	2e01      	cmp	r6, #1
   1ce98:	f04f 033a 	mov.w	r3, #58	; 0x3a
   1ce9c:	bf08      	it	eq
   1ce9e:	f04f 37ff 	moveq.w	r7, #4294967295
   1cea2:	9301      	str	r3, [sp, #4]
	bool needcolon = false;
   1cea4:	2200      	movs	r2, #0
	char delim = ':';
   1cea6:	4658      	mov	r0, fp
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   1cea8:	4614      	mov	r4, r2
   1ceaa:	4613      	mov	r3, r2
		/* IPv4 address a.b.c.d */
		if (len == 4) {
   1ceac:	f1ba 0f04 	cmp.w	sl, #4
   1ceb0:	d158      	bne.n	1cf64 <z_impl_net_addr_ntop+0x130>
			uint8_t l;

			value = (uint32_t)addr->s4_addr[i];
   1ceb2:	f818 1003 	ldrb.w	r1, [r8, r3]

			/* net_byte_to_udec() eats 0 */
			if (value == 0U) {
				*ptr++ = '0';
   1ceb6:	4603      	mov	r3, r0
			if (value == 0U) {
   1ceb8:	bb19      	cbnz	r1, 1cf02 <z_impl_net_addr_ntop+0xce>
				*ptr++ = '0';
   1ceba:	2130      	movs	r1, #48	; 0x30
   1cebc:	f803 1b02 	strb.w	r1, [r3], #2
				*ptr++ = delim;
   1cec0:	9901      	ldr	r1, [sp, #4]
   1cec2:	7041      	strb	r1, [r0, #1]
   1cec4:	4618      	mov	r0, r3
	for (i = 0U; i < len; i++) {
   1cec6:	3401      	adds	r4, #1
   1cec8:	b2e4      	uxtb	r4, r4
   1ceca:	4554      	cmp	r4, sl
   1cecc:	4623      	mov	r3, r4
   1cece:	dbed      	blt.n	1ceac <z_impl_net_addr_ntop+0x78>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   1ced0:	4558      	cmp	r0, fp
   1ced2:	d00a      	beq.n	1ceea <z_impl_net_addr_ntop+0xb6>
		return NULL;
	}

	if (family == AF_INET) {
   1ced4:	2d01      	cmp	r5, #1
   1ced6:	f04f 0300 	mov.w	r3, #0
   1ceda:	f040 8089 	bne.w	1cff0 <z_impl_net_addr_ntop+0x1bc>
		*(ptr - 1) = '\0';
   1cede:	f800 3c01 	strb.w	r3, [r0, #-1]
		return NULL;
   1cee2:	4658      	mov	r0, fp
   1cee4:	e002      	b.n	1ceec <z_impl_net_addr_ntop+0xb8>
	} else if (family == AF_INET) {
   1cee6:	2801      	cmp	r0, #1
   1cee8:	d003      	beq.n	1cef2 <z_impl_net_addr_ntop+0xbe>
		return NULL;
   1ceea:	2000      	movs	r0, #0
	} else {
		*ptr = '\0';
	}

	return dst;
}
   1ceec:	b009      	add	sp, #36	; 0x24
   1ceee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   1cef2:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   1cef4:	f04f 0a04 	mov.w	sl, #4
	int8_t pos = -1;
   1cef8:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   1cefc:	4606      	mov	r6, r0
		delim = '.';
   1cefe:	9301      	str	r3, [sp, #4]
   1cf00:	e7d0      	b.n	1cea4 <z_impl_net_addr_ntop+0x70>
			l = net_value_to_udec(ptr, value, 0);
   1cf02:	f04f 0e00 	mov.w	lr, #0
   1cf06:	f04f 0c09 	mov.w	ip, #9
   1cf0a:	f8cd e008 	str.w	lr, [sp, #8]
   1cf0e:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 1cff4 <z_impl_net_addr_ntop+0x1c0>
		temp = value / divisor;
   1cf12:	fbb1 f9fe 	udiv	r9, r1, lr
   1cf16:	9103      	str	r1, [sp, #12]
   1cf18:	f8cd 9014 	str.w	r9, [sp, #20]
		value = value % divisor;
   1cf1c:	fb0e 1119 	mls	r1, lr, r9, r1
		if ((precision > i) || (temp != 0)) {
   1cf20:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1cf24:	45cc      	cmp	ip, r9
   1cf26:	db03      	blt.n	1cf30 <z_impl_net_addr_ntop+0xfc>
   1cf28:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1cf2c:	45f1      	cmp	r9, lr
   1cf2e:	d307      	bcc.n	1cf40 <z_impl_net_addr_ntop+0x10c>
			*buf++ = (char) (temp + '0');
   1cf30:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1cf34:	f8cd c008 	str.w	ip, [sp, #8]
   1cf38:	f109 0930 	add.w	r9, r9, #48	; 0x30
   1cf3c:	f803 9b01 	strb.w	r9, [r3], #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   1cf40:	f04f 090a 	mov.w	r9, #10
   1cf44:	f10c 3cff 	add.w	ip, ip, #4294967295
   1cf48:	f1bc 3fff 	cmp.w	ip, #4294967295
   1cf4c:	fbbe fef9 	udiv	lr, lr, r9
   1cf50:	d1df      	bne.n	1cf12 <z_impl_net_addr_ntop+0xde>
	*buf = 0;
   1cf52:	2100      	movs	r1, #0
   1cf54:	7019      	strb	r1, [r3, #0]
	return buf - start;
   1cf56:	1a1b      	subs	r3, r3, r0
			*ptr++ = delim;
   1cf58:	fa50 f083 	uxtab	r0, r0, r3
   1cf5c:	9b01      	ldr	r3, [sp, #4]
   1cf5e:	f800 3b01 	strb.w	r3, [r0], #1
			continue;
   1cf62:	e7b0      	b.n	1cec6 <z_impl_net_addr_ntop+0x92>
		if (i == pos) {
   1cf64:	429f      	cmp	r7, r3
   1cf66:	d10d      	bne.n	1cf84 <z_impl_net_addr_ntop+0x150>
			if (needcolon || i == 0U) {
   1cf68:	b902      	cbnz	r2, 1cf6c <z_impl_net_addr_ntop+0x138>
   1cf6a:	b914      	cbnz	r4, 1cf72 <z_impl_net_addr_ntop+0x13e>
				*ptr++ = ':';
   1cf6c:	233a      	movs	r3, #58	; 0x3a
   1cf6e:	f800 3b01 	strb.w	r3, [r0], #1
			*ptr++ = ':';
   1cf72:	f04f 033a 	mov.w	r3, #58	; 0x3a
   1cf76:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   1cf7a:	1e73      	subs	r3, r6, #1
   1cf7c:	4423      	add	r3, r4
			needcolon = false;
   1cf7e:	2200      	movs	r2, #0
			i += longest - 1U;
   1cf80:	b2dc      	uxtb	r4, r3
			continue;
   1cf82:	e7a0      	b.n	1cec6 <z_impl_net_addr_ntop+0x92>
		if (needcolon) {
   1cf84:	b11a      	cbz	r2, 1cf8e <z_impl_net_addr_ntop+0x15a>
			*ptr++ = ':';
   1cf86:	f04f 033a 	mov.w	r3, #58	; 0x3a
   1cf8a:	f800 3b01 	strb.w	r3, [r0], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1cf8e:	9b04      	ldr	r3, [sp, #16]
   1cf90:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
   1cf94:	ba52      	rev16	r2, r2
		if (bh) {
   1cf96:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
		bh = value >> 8;
   1cf9a:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   1cf9e:	fa5f f982 	uxtb.w	r9, r2
		if (bh) {
   1cfa2:	d016      	beq.n	1cfd2 <z_impl_net_addr_ntop+0x19e>
			if (bh > 0x0f) {
   1cfa4:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   1cfa6:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   1cfa8:	d90a      	bls.n	1cfc0 <z_impl_net_addr_ntop+0x18c>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1cfaa:	2300      	movs	r3, #0
   1cfac:	2261      	movs	r2, #97	; 0x61
   1cfae:	f00b faf0 	bl	28592 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1cfb2:	2301      	movs	r3, #1
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1cfb4:	2261      	movs	r2, #97	; 0x61
   1cfb6:	4649      	mov	r1, r9
   1cfb8:	f00b faeb 	bl	28592 <net_byte_to_hex>
		needcolon = true;
   1cfbc:	2201      	movs	r2, #1
   1cfbe:	e782      	b.n	1cec6 <z_impl_net_addr_ntop+0x92>
				if (bh < 10) {
   1cfc0:	2b09      	cmp	r3, #9
   1cfc2:	d804      	bhi.n	1cfce <z_impl_net_addr_ntop+0x19a>
					*ptr++ = (char)(bh + '0');
   1cfc4:	3130      	adds	r1, #48	; 0x30
   1cfc6:	b2c9      	uxtb	r1, r1
   1cfc8:	f800 1b01 	strb.w	r1, [r0], #1
   1cfcc:	e7f1      	b.n	1cfb2 <z_impl_net_addr_ntop+0x17e>
					*ptr++ = (char) (bh - 10 + 'a');
   1cfce:	3157      	adds	r1, #87	; 0x57
   1cfd0:	e7f9      	b.n	1cfc6 <z_impl_net_addr_ntop+0x192>
		} else if (bl > 0x0f) {
   1cfd2:	f1b9 0f0f 	cmp.w	r9, #15
   1cfd6:	d8ed      	bhi.n	1cfb4 <z_impl_net_addr_ntop+0x180>
			if (bl < 10) {
   1cfd8:	f1b9 0f09 	cmp.w	r9, #9
				*ptr++ = (char)(bl + '0');
   1cfdc:	bf94      	ite	ls
   1cfde:	f109 0930 	addls.w	r9, r9, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   1cfe2:	f109 0957 	addhi.w	r9, r9, #87	; 0x57
   1cfe6:	fa5f f989 	uxtb.w	r9, r9
   1cfea:	f800 9b01 	strb.w	r9, [r0], #1
   1cfee:	e7e5      	b.n	1cfbc <z_impl_net_addr_ntop+0x188>
		*ptr = '\0';
   1cff0:	7003      	strb	r3, [r0, #0]
   1cff2:	e776      	b.n	1cee2 <z_impl_net_addr_ntop+0xae>
   1cff4:	3b9aca00 	.word	0x3b9aca00

0001cff8 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   1cff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1cffc:	680f      	ldr	r7, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   1cffe:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
	start = buf->cur;

	NET_HEXDUMP_DBG(mqtt_proto_desc->utf8, mqtt_proto_desc->size,
			 "Encoding Protocol Description.");

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1d002:	4b3c      	ldr	r3, [pc, #240]	; (1d0f4 <connect_request_encode+0xfc>)
   1d004:	4a3c      	ldr	r2, [pc, #240]	; (1d0f8 <connect_request_encode+0x100>)
{
   1d006:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1d008:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1d00c:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1d00e:	2804      	cmp	r0, #4
   1d010:	bf14      	ite	ne
   1d012:	4610      	movne	r0, r2
   1d014:	4618      	moveq	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1d016:	600f      	str	r7, [r1, #0]
{
   1d018:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1d01a:	f00b fb9d 	bl	28758 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   1d01e:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   1d022:	4603      	mov	r3, r0
   1d024:	b938      	cbnz	r0, 1d036 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1d026:	e9d4 2000 	ldrd	r2, r0, [r4]
   1d02a:	4290      	cmp	r0, r2
		return err_code;
	}

	NET_DBG("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   1d02c:	f896 105e 	ldrb.w	r1, [r6, #94]	; 0x5e
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1d030:	d104      	bne.n	1d03c <connect_request_encode+0x44>
		return -ENOMEM;
   1d032:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1d036:	4618      	mov	r0, r3
   1d038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	*(buf->cur++) = val;
   1d03c:	1c50      	adds	r0, r2, #1
   1d03e:	6020      	str	r0, [r4, #0]
   1d040:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1d042:	e9d4 8200 	ldrd	r8, r2, [r4]
   1d046:	4590      	cmp	r8, r2
   1d048:	d0f3      	beq.n	1d032 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   1d04a:	f108 0201 	add.w	r2, r8, #1
   1d04e:	6022      	str	r2, [r4, #0]
   1d050:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   1d054:	4621      	mov	r1, r4
   1d056:	f8b6 005c 	ldrh.w	r0, [r6, #92]	; 0x5c
   1d05a:	f00b fb6b 	bl	28734 <pack_uint16>
	if (err_code != 0) {
   1d05e:	4603      	mov	r3, r0
   1d060:	2800      	cmp	r0, #0
   1d062:	d1e8      	bne.n	1d036 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   1d064:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   1d068:	f00b fb76 	bl	28758 <pack_utf8_str>
	if (err_code != 0) {
   1d06c:	4603      	mov	r3, r0
   1d06e:	2800      	cmp	r0, #0
   1d070:	d1e1      	bne.n	1d036 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   1d072:	6c30      	ldr	r0, [r6, #64]	; 0x40
	uint8_t connect_flags = client->clean_session << 1;
   1d074:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   1d076:	b1e8      	cbz	r0, 1d0b4 <connect_request_encode+0xbc>
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1d078:	4621      	mov	r1, r4
		connect_flags |= client->will_retain << 5;
   1d07a:	f896 a060 	ldrb.w	sl, [r6, #96]	; 0x60
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1d07e:	f890 9008 	ldrb.w	r9, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1d082:	f00b fb69 	bl	28758 <pack_utf8_str>
		connect_flags |= client->will_retain << 5;
   1d086:	f00a 0a01 	and.w	sl, sl, #1
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1d08a:	4603      	mov	r3, r0
		if (err_code != 0) {
   1d08c:	2800      	cmp	r0, #0
   1d08e:	d1d2      	bne.n	1d036 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   1d090:	6c73      	ldr	r3, [r6, #68]	; 0x44
			err_code = pack_utf8_str(client->will_message, buf);
   1d092:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   1d094:	b35b      	cbz	r3, 1d0ee <connect_request_encode+0xf6>
			err_code = pack_utf8_str(client->will_message, buf);
   1d096:	4618      	mov	r0, r3
   1d098:	f00b fb5e 	bl	28758 <pack_utf8_str>
			if (err_code != 0) {
   1d09c:	4603      	mov	r3, r0
   1d09e:	2800      	cmp	r0, #0
   1d0a0:	d1c9      	bne.n	1d036 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   1d0a2:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1d0a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
		connect_flags |= client->will_retain << 5;
   1d0aa:	ea45 154a 	orr.w	r5, r5, sl, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1d0ae:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   1d0b2:	431d      	orrs	r5, r3
	if (client->user_name != NULL) {
   1d0b4:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   1d0b6:	b138      	cbz	r0, 1d0c8 <connect_request_encode+0xd0>
		err_code = pack_utf8_str(client->user_name, buf);
   1d0b8:	4621      	mov	r1, r4
   1d0ba:	f00b fb4d 	bl	28758 <pack_utf8_str>
		if (err_code != 0) {
   1d0be:	4603      	mov	r3, r0
   1d0c0:	2800      	cmp	r0, #0
   1d0c2:	d1b8      	bne.n	1d036 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   1d0c4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   1d0c8:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   1d0ca:	b138      	cbz	r0, 1d0dc <connect_request_encode+0xe4>
		err_code = pack_utf8_str(client->password, buf);
   1d0cc:	4621      	mov	r1, r4
   1d0ce:	f00b fb43 	bl	28758 <pack_utf8_str>
		if (err_code != 0) {
   1d0d2:	4603      	mov	r3, r0
   1d0d4:	2800      	cmp	r0, #0
   1d0d6:	d1ae      	bne.n	1d036 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   1d0d8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   1d0dc:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   1d0e0:	4622      	mov	r2, r4
   1d0e2:	4639      	mov	r1, r7
}
   1d0e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   1d0e8:	2010      	movs	r0, #16
   1d0ea:	f00b bb50 	b.w	2878e <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   1d0ee:	f00b fb21 	bl	28734 <pack_uint16>
   1d0f2:	e7d3      	b.n	1d09c <connect_request_encode+0xa4>
   1d0f4:	0002bf64 	.word	0x0002bf64
   1d0f8:	0002bf6c 	.word	0x0002bf6c

0001d0fc <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   1d0fc:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d100:	1a9b      	subs	r3, r3, r2
   1d102:	2b01      	cmp	r3, #1
   1d104:	bf81      	itttt	hi
   1d106:	4b05      	ldrhi	r3, [pc, #20]	; (1d11c <disconnect_encode+0x20>)
   1d108:	881b      	ldrhhi	r3, [r3, #0]
   1d10a:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   1d10c:	6803      	ldrhi	r3, [r0, #0]
   1d10e:	bf83      	ittte	hi
   1d110:	3302      	addhi	r3, #2
   1d112:	6043      	strhi	r3, [r0, #4]

	return 0;
   1d114:	2000      	movhi	r0, #0
		return -ENOMEM;
   1d116:	f06f 000b 	mvnls.w	r0, #11
}
   1d11a:	4770      	bx	lr
   1d11c:	0002d386 	.word	0x0002d386

0001d120 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   1d120:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d124:	1a9b      	subs	r3, r3, r2
   1d126:	2b01      	cmp	r3, #1
   1d128:	bf81      	itttt	hi
   1d12a:	4b05      	ldrhi	r3, [pc, #20]	; (1d140 <ping_request_encode+0x20>)
   1d12c:	881b      	ldrhhi	r3, [r3, #0]
   1d12e:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   1d130:	6803      	ldrhi	r3, [r0, #0]
   1d132:	bf83      	ittte	hi
   1d134:	3302      	addhi	r3, #2
   1d136:	6043      	strhi	r3, [r0, #4]

	return 0;
   1d138:	2000      	movhi	r0, #0
		return -ENOMEM;
   1d13a:	f06f 000b 	mvnls.w	r0, #11
}
   1d13e:	4770      	bx	lr
   1d140:	0002d388 	.word	0x0002d388

0001d144 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_CUSTOM_TRANSPORT */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   1d144:	2214      	movs	r2, #20
   1d146:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1d14a:	4353      	muls	r3, r2
   1d14c:	4a01      	ldr	r2, [pc, #4]	; (1d154 <mqtt_transport_connect+0x10>)
   1d14e:	58d3      	ldr	r3, [r2, r3]
   1d150:	4718      	bx	r3
   1d152:	bf00      	nop
   1d154:	0002bf74 	.word	0x0002bf74

0001d158 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   1d158:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1d15a:	2514      	movs	r5, #20
   1d15c:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   1d160:	4b02      	ldr	r3, [pc, #8]	; (1d16c <mqtt_transport_write+0x14>)
   1d162:	fb05 3304 	mla	r3, r5, r4, r3
							  datalen);
}
   1d166:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1d168:	685b      	ldr	r3, [r3, #4]
   1d16a:	4718      	bx	r3
   1d16c:	0002bf74 	.word	0x0002bf74

0001d170 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   1d170:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   1d172:	2414      	movs	r4, #20
   1d174:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1d178:	4b02      	ldr	r3, [pc, #8]	; (1d184 <mqtt_transport_write_msg+0x14>)
   1d17a:	fb04 3302 	mla	r3, r4, r2, r3
}
   1d17e:	bc10      	pop	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   1d180:	689b      	ldr	r3, [r3, #8]
   1d182:	4718      	bx	r3
   1d184:	0002bf74 	.word	0x0002bf74

0001d188 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   1d188:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1d18a:	2614      	movs	r6, #20
   1d18c:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   1d190:	4c03      	ldr	r4, [pc, #12]	; (1d1a0 <mqtt_transport_read+0x18>)
   1d192:	fb06 4405 	mla	r4, r6, r5, r4
   1d196:	68e4      	ldr	r4, [r4, #12]
   1d198:	46a4      	mov	ip, r4
							 shall_block);
}
   1d19a:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1d19c:	4760      	bx	ip
   1d19e:	bf00      	nop
   1d1a0:	0002bf74 	.word	0x0002bf74

0001d1a4 <z_impl_sys_rand32_get>:
static const struct device *const entropy_dev =
	DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
   1d1a4:	b507      	push	{r0, r1, r2, lr}
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1d1a6:	2204      	movs	r2, #4
   1d1a8:	4807      	ldr	r0, [pc, #28]	; (1d1c8 <z_impl_sys_rand32_get+0x24>)
   1d1aa:	eb0d 0102 	add.w	r1, sp, r2
   1d1ae:	6883      	ldr	r3, [r0, #8]
   1d1b0:	681b      	ldr	r3, [r3, #0]
   1d1b2:	4798      	blx	r3
	__ASSERT(device_is_ready(entropy_dev), "Entropy device %s not ready",
		 entropy_dev->name);

	ret = entropy_get_entropy(entropy_dev, (uint8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   1d1b4:	2800      	cmp	r0, #0
   1d1b6:	da02      	bge.n	1d1be <z_impl_sys_rand32_get+0x1a>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1d1b8:	f00c f983 	bl	294c2 <sys_clock_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   1d1bc:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   1d1be:	9801      	ldr	r0, [sp, #4]
   1d1c0:	b003      	add	sp, #12
   1d1c2:	f85d fb04 	ldr.w	pc, [sp], #4
   1d1c6:	bf00      	nop
   1d1c8:	0002ba98 	.word	0x0002ba98

0001d1cc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1d1cc:	4b08      	ldr	r3, [pc, #32]	; (1d1f0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d1ce:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1d1d0:	1ac3      	subs	r3, r0, r3
{
   1d1d2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d1d4:	4907      	ldr	r1, [pc, #28]	; (1d1f4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1d1d6:	109b      	asrs	r3, r3, #2
{
   1d1d8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d1da:	4359      	muls	r1, r3
   1d1dc:	2240      	movs	r2, #64	; 0x40
   1d1de:	4806      	ldr	r0, [pc, #24]	; (1d1f8 <onoff_stop+0x2c>)
   1d1e0:	f00b ff9c 	bl	2911c <stop>
	notify(mgr, res);
   1d1e4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d1e6:	4601      	mov	r1, r0
	notify(mgr, res);
   1d1e8:	4620      	mov	r0, r4
}
   1d1ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1d1ee:	4718      	bx	r3
   1d1f0:	2000d1d8 	.word	0x2000d1d8
   1d1f4:	b6db6db7 	.word	0xb6db6db7
   1d1f8:	0002ba68 	.word	0x0002ba68

0001d1fc <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d1fc:	2340      	movs	r3, #64	; 0x40
{
   1d1fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1d200:	4c0b      	ldr	r4, [pc, #44]	; (1d230 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d202:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1d204:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d206:	460b      	mov	r3, r1
{
   1d208:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d20a:	490a      	ldr	r1, [pc, #40]	; (1d234 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   1d20c:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d20e:	4361      	muls	r1, r4
{
   1d210:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d212:	4a09      	ldr	r2, [pc, #36]	; (1d238 <onoff_start+0x3c>)
   1d214:	4809      	ldr	r0, [pc, #36]	; (1d23c <onoff_start+0x40>)
   1d216:	f00b ffad 	bl	29174 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1d21a:	1e01      	subs	r1, r0, #0
   1d21c:	da05      	bge.n	1d22a <onoff_start+0x2e>
		notify(mgr, err);
   1d21e:	4630      	mov	r0, r6
   1d220:	462b      	mov	r3, r5
	}
}
   1d222:	b002      	add	sp, #8
   1d224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1d228:	4718      	bx	r3
}
   1d22a:	b002      	add	sp, #8
   1d22c:	bd70      	pop	{r4, r5, r6, pc}
   1d22e:	bf00      	nop
   1d230:	2000d1d8 	.word	0x2000d1d8
   1d234:	b6db6db7 	.word	0xb6db6db7
   1d238:	000291df 	.word	0x000291df
   1d23c:	0002ba68 	.word	0x0002ba68

0001d240 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1d240:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d242:	2200      	movs	r2, #0
   1d244:	2101      	movs	r1, #1
{
   1d246:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d248:	2005      	movs	r0, #5
   1d24a:	f7fe fec3 	bl	1bfd4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1d24e:	480f      	ldr	r0, [pc, #60]	; (1d28c <clk_init+0x4c>)
   1d250:	f004 fe26 	bl	21ea0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1d254:	4b0e      	ldr	r3, [pc, #56]	; (1d290 <clk_init+0x50>)
   1d256:	4298      	cmp	r0, r3
   1d258:	d115      	bne.n	1d286 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1d25a:	f004 fe31 	bl	21ec0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1d25e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d260:	490c      	ldr	r1, [pc, #48]	; (1d294 <clk_init+0x54>)
   1d262:	4630      	mov	r0, r6
   1d264:	f00a fbd2 	bl	27a0c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1d268:	2800      	cmp	r0, #0
   1d26a:	db0b      	blt.n	1d284 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d26c:	2501      	movs	r5, #1
   1d26e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   1d270:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d272:	4908      	ldr	r1, [pc, #32]	; (1d294 <clk_init+0x54>)
   1d274:	f104 001c 	add.w	r0, r4, #28
   1d278:	f00a fbc8 	bl	27a0c <onoff_manager_init>
		if (err < 0) {
   1d27c:	2800      	cmp	r0, #0
   1d27e:	db01      	blt.n	1d284 <clk_init+0x44>
	}

	return 0;
   1d280:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d282:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   1d284:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1d286:	f06f 0004 	mvn.w	r0, #4
   1d28a:	e7fb      	b.n	1d284 <clk_init+0x44>
   1d28c:	0001d2cd 	.word	0x0001d2cd
   1d290:	0bad0000 	.word	0x0bad0000
   1d294:	0002bf88 	.word	0x0002bf88

0001d298 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1d298:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1d29a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1d29c:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   1d29e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1d2a0:	434b      	muls	r3, r1
   1d2a2:	4808      	ldr	r0, [pc, #32]	; (1d2c4 <clkstarted_handle.constprop.0+0x2c>)
   1d2a4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1d2a6:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   1d2a8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1d2ac:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1d2ae:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1d2b0:	f00b ff21 	bl	290f6 <set_on_state>
	if (callback) {
   1d2b4:	b12d      	cbz	r5, 1d2c2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d2b6:	4632      	mov	r2, r6
   1d2b8:	462b      	mov	r3, r5
}
   1d2ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d2be:	4802      	ldr	r0, [pc, #8]	; (1d2c8 <clkstarted_handle.constprop.0+0x30>)
   1d2c0:	4718      	bx	r3
}
   1d2c2:	bd70      	pop	{r4, r5, r6, pc}
   1d2c4:	2000d1d8 	.word	0x2000d1d8
   1d2c8:	0002ba68 	.word	0x0002ba68

0001d2cc <clock_event_handler>:
	switch (event) {
   1d2cc:	b110      	cbz	r0, 1d2d4 <clock_event_handler+0x8>
   1d2ce:	2801      	cmp	r0, #1
   1d2d0:	d004      	beq.n	1d2dc <clock_event_handler+0x10>
   1d2d2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1d2d4:	4b03      	ldr	r3, [pc, #12]	; (1d2e4 <clock_event_handler+0x18>)
   1d2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d2d8:	075b      	lsls	r3, r3, #29
   1d2da:	d101      	bne.n	1d2e0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1d2dc:	f7ff bfdc 	b.w	1d298 <clkstarted_handle.constprop.0>
}
   1d2e0:	4770      	bx	lr
   1d2e2:	bf00      	nop
   1d2e4:	2000d1d8 	.word	0x2000d1d8

0001d2e8 <generic_hfclk_start>:
{
   1d2e8:	b508      	push	{r3, lr}
	__asm__ volatile(
   1d2ea:	f04f 0320 	mov.w	r3, #32
   1d2ee:	f3ef 8111 	mrs	r1, BASEPRI
   1d2f2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d2f6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1d2fa:	4a11      	ldr	r2, [pc, #68]	; (1d340 <generic_hfclk_start+0x58>)
   1d2fc:	6813      	ldr	r3, [r2, #0]
   1d2fe:	f043 0002 	orr.w	r0, r3, #2
   1d302:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1d304:	07da      	lsls	r2, r3, #31
   1d306:	d408      	bmi.n	1d31a <generic_hfclk_start+0x32>
	__asm__ volatile(
   1d308:	f381 8811 	msr	BASEPRI, r1
   1d30c:	f3bf 8f6f 	isb	sy
}
   1d310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1d314:	2001      	movs	r0, #1
   1d316:	f004 bde3 	b.w	21ee0 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d31a:	4b0a      	ldr	r3, [pc, #40]	; (1d344 <generic_hfclk_start+0x5c>)
   1d31c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d320:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1d324:	07d3      	lsls	r3, r2, #31
   1d326:	d5ef      	bpl.n	1d308 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1d328:	4807      	ldr	r0, [pc, #28]	; (1d348 <generic_hfclk_start+0x60>)
   1d32a:	f00b fee4 	bl	290f6 <set_on_state>
   1d32e:	f381 8811 	msr	BASEPRI, r1
   1d332:	f3bf 8f6f 	isb	sy
}
   1d336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1d33a:	2000      	movs	r0, #0
   1d33c:	f7ff bfac 	b.w	1d298 <clkstarted_handle.constprop.0>
   1d340:	2000d228 	.word	0x2000d228
   1d344:	40005000 	.word	0x40005000
   1d348:	2000d218 	.word	0x2000d218

0001d34c <api_blocking_start>:
{
   1d34c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d34e:	2200      	movs	r2, #0
   1d350:	2301      	movs	r3, #1
   1d352:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1d356:	ab04      	add	r3, sp, #16
   1d358:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d35c:	4a09      	ldr	r2, [pc, #36]	; (1d384 <api_blocking_start+0x38>)
   1d35e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d360:	f8cd d000 	str.w	sp, [sp]
   1d364:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d368:	f00b ff32 	bl	291d0 <api_start>
	if (err < 0) {
   1d36c:	2800      	cmp	r0, #0
   1d36e:	db05      	blt.n	1d37c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1d370:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d374:	2300      	movs	r3, #0
   1d376:	4668      	mov	r0, sp
   1d378:	f008 f8ba 	bl	254f0 <z_impl_k_sem_take>
}
   1d37c:	b007      	add	sp, #28
   1d37e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d382:	bf00      	nop
   1d384:	000291fd 	.word	0x000291fd

0001d388 <generic_hfclk_stop>:
{
   1d388:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d38a:	f04f 0320 	mov.w	r3, #32
   1d38e:	f3ef 8411 	mrs	r4, BASEPRI
   1d392:	f383 8812 	msr	BASEPRI_MAX, r3
   1d396:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1d39a:	4a07      	ldr	r2, [pc, #28]	; (1d3b8 <generic_hfclk_stop+0x30>)
   1d39c:	6813      	ldr	r3, [r2, #0]
   1d39e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1d3a2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1d3a4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1d3a6:	d402      	bmi.n	1d3ae <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1d3a8:	2001      	movs	r0, #1
   1d3aa:	f00c fcb8 	bl	29d1e <nrfx_clock_stop>
	__asm__ volatile(
   1d3ae:	f384 8811 	msr	BASEPRI, r4
   1d3b2:	f3bf 8f6f 	isb	sy
}
   1d3b6:	bd10      	pop	{r4, pc}
   1d3b8:	2000d228 	.word	0x2000d228

0001d3bc <z_nrf_clock_control_lf_on>:
{
   1d3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d3c0:	2201      	movs	r2, #1
   1d3c2:	4607      	mov	r7, r0
   1d3c4:	4935      	ldr	r1, [pc, #212]	; (1d49c <z_nrf_clock_control_lf_on+0xe0>)
   1d3c6:	e8d1 3fef 	ldaex	r3, [r1]
   1d3ca:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1d3ce:	2800      	cmp	r0, #0
   1d3d0:	d1f9      	bne.n	1d3c6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1d3d2:	b933      	cbnz	r3, 1d3e2 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1d3d4:	4932      	ldr	r1, [pc, #200]	; (1d4a0 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   1d3d6:	4833      	ldr	r0, [pc, #204]	; (1d4a4 <z_nrf_clock_control_lf_on+0xe8>)
   1d3d8:	604b      	str	r3, [r1, #4]
   1d3da:	60cb      	str	r3, [r1, #12]
   1d3dc:	608a      	str	r2, [r1, #8]
   1d3de:	f00a fb28 	bl	27a32 <onoff_request>
	switch (start_mode) {
   1d3e2:	1e7b      	subs	r3, r7, #1
   1d3e4:	2b01      	cmp	r3, #1
   1d3e6:	d828      	bhi.n	1d43a <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1d3e8:	2f01      	cmp	r7, #1
   1d3ea:	d106      	bne.n	1d3fa <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1d3ec:	4b2e      	ldr	r3, [pc, #184]	; (1d4a8 <z_nrf_clock_control_lf_on+0xec>)
   1d3ee:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1d3f2:	f003 0303 	and.w	r3, r3, #3
   1d3f6:	2b02      	cmp	r3, #2
   1d3f8:	d01f      	beq.n	1d43a <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d3fa:	f00d fbed 	bl	2abd8 <k_is_in_isr>
   1d3fe:	4605      	mov	r5, r0
   1d400:	b9e8      	cbnz	r0, 1d43e <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1d402:	4b2a      	ldr	r3, [pc, #168]	; (1d4ac <z_nrf_clock_control_lf_on+0xf0>)
   1d404:	781b      	ldrb	r3, [r3, #0]
   1d406:	b1d3      	cbz	r3, 1d43e <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   1d408:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1d40a:	4606      	mov	r6, r0
   1d40c:	4b26      	ldr	r3, [pc, #152]	; (1d4a8 <z_nrf_clock_control_lf_on+0xec>)
   1d40e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d412:	4c25      	ldr	r4, [pc, #148]	; (1d4a8 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d414:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1d4b0 <z_nrf_clock_control_lf_on+0xf4>
   1d418:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d41c:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1d420:	03d2      	lsls	r2, r2, #15
   1d422:	d516      	bpl.n	1d452 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1d424:	f003 0303 	and.w	r3, r3, #3
   1d428:	2b02      	cmp	r3, #2
   1d42a:	d001      	beq.n	1d430 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1d42c:	2f01      	cmp	r7, #1
   1d42e:	d110      	bne.n	1d452 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   1d430:	b375      	cbz	r5, 1d490 <z_nrf_clock_control_lf_on+0xd4>
   1d432:	f386 8811 	msr	BASEPRI, r6
   1d436:	f3bf 8f6f 	isb	sy
}
   1d43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1d43e:	f04f 0320 	mov.w	r3, #32
   1d442:	f3ef 8611 	mrs	r6, BASEPRI
   1d446:	f383 8812 	msr	BASEPRI_MAX, r3
   1d44a:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d44e:	2501      	movs	r5, #1
   1d450:	e7df      	b.n	1d412 <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1d452:	b1c5      	cbz	r5, 1d486 <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1d454:	4630      	mov	r0, r6
   1d456:	f7fe fd1b 	bl	1be90 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1d45a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1d45e:	b2db      	uxtb	r3, r3
   1d460:	2b01      	cmp	r3, #1
   1d462:	d1d9      	bne.n	1d418 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d464:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1d468:	2a00      	cmp	r2, #0
   1d46a:	d0d5      	beq.n	1d418 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d46c:	2200      	movs	r2, #0
   1d46e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1d472:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1d476:	2202      	movs	r2, #2
   1d478:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1d47c:	2220      	movs	r2, #32
   1d47e:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d482:	60a3      	str	r3, [r4, #8]
}
   1d484:	e7c8      	b.n	1d418 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   1d486:	2100      	movs	r1, #0
   1d488:	2021      	movs	r0, #33	; 0x21
   1d48a:	f008 fcb9 	bl	25e00 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d48e:	e7e4      	b.n	1d45a <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   1d490:	2202      	movs	r2, #2
   1d492:	4b05      	ldr	r3, [pc, #20]	; (1d4a8 <z_nrf_clock_control_lf_on+0xec>)
   1d494:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d498:	e7cf      	b.n	1d43a <z_nrf_clock_control_lf_on+0x7e>
   1d49a:	bf00      	nop
   1d49c:	2000d1d4 	.word	0x2000d1d4
   1d4a0:	2000d1c4 	.word	0x2000d1c4
   1d4a4:	2000d1f4 	.word	0x2000d1f4
   1d4a8:	40005000 	.word	0x40005000
   1d4ac:	2000e056 	.word	0x2000e056
   1d4b0:	e000e100 	.word	0xe000e100

0001d4b4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1d4b4:	b508      	push	{r3, lr}
   1d4b6:	4807      	ldr	r0, [pc, #28]	; (1d4d4 <uart_console_init+0x20>)
   1d4b8:	f00d fb03 	bl	2aac2 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1d4bc:	b138      	cbz	r0, 1d4ce <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1d4be:	4806      	ldr	r0, [pc, #24]	; (1d4d8 <uart_console_init+0x24>)
   1d4c0:	f7ff fbc2 	bl	1cc48 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1d4c4:	4804      	ldr	r0, [pc, #16]	; (1d4d8 <uart_console_init+0x24>)
   1d4c6:	f7fc ff61 	bl	1a38c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1d4ca:	2000      	movs	r0, #0
}
   1d4cc:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1d4ce:	f06f 0012 	mvn.w	r0, #18
   1d4d2:	e7fb      	b.n	1d4cc <uart_console_init+0x18>
   1d4d4:	0002bab0 	.word	0x0002bab0
   1d4d8:	0001d4dd 	.word	0x0001d4dd

0001d4dc <console_out>:
	if ('\n' == c) {
   1d4dc:	280a      	cmp	r0, #10
{
   1d4de:	b538      	push	{r3, r4, r5, lr}
   1d4e0:	4604      	mov	r4, r0
   1d4e2:	4d07      	ldr	r5, [pc, #28]	; (1d500 <console_out+0x24>)
	if ('\n' == c) {
   1d4e4:	d104      	bne.n	1d4f0 <console_out+0x14>
   1d4e6:	68ab      	ldr	r3, [r5, #8]
   1d4e8:	210d      	movs	r1, #13
   1d4ea:	4628      	mov	r0, r5
   1d4ec:	685b      	ldr	r3, [r3, #4]
   1d4ee:	4798      	blx	r3
   1d4f0:	68ab      	ldr	r3, [r5, #8]
   1d4f2:	4803      	ldr	r0, [pc, #12]	; (1d500 <console_out+0x24>)
   1d4f4:	685b      	ldr	r3, [r3, #4]
   1d4f6:	b2e1      	uxtb	r1, r4
   1d4f8:	4798      	blx	r3
}
   1d4fa:	4620      	mov	r0, r4
   1d4fc:	bd38      	pop	{r3, r4, r5, pc}
   1d4fe:	bf00      	nop
   1d500:	0002bab0 	.word	0x0002bab0

0001d504 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1d504:	b530      	push	{r4, r5, lr}
	return port->config;
   1d506:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d508:	f001 041f 	and.w	r4, r1, #31
   1d50c:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1d50e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1d512:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d514:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1d518:	d105      	bne.n	1d526 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1d51a:	4620      	mov	r0, r4
   1d51c:	f004 ffa4 	bl	22468 <nrfx_gpiote_trigger_disable>

		return 0;
   1d520:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   1d522:	b005      	add	sp, #20
   1d524:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d526:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d528:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d52c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d530:	d114      	bne.n	1d55c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1d532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d536:	bf0c      	ite	eq
   1d538:	2304      	moveq	r3, #4
   1d53a:	2305      	movne	r3, #5
   1d53c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d540:	2300      	movs	r3, #0
   1d542:	4620      	mov	r0, r4
   1d544:	4619      	mov	r1, r3
   1d546:	aa02      	add	r2, sp, #8
   1d548:	f004 fdc4 	bl	220d4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d54c:	4b1c      	ldr	r3, [pc, #112]	; (1d5c0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1d54e:	4298      	cmp	r0, r3
   1d550:	d133      	bne.n	1d5ba <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1d552:	2101      	movs	r1, #1
   1d554:	4620      	mov	r0, r4
   1d556:	f004 ff43 	bl	223e0 <nrfx_gpiote_trigger_enable>
	return 0;
   1d55a:	e7e1      	b.n	1d520 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1d55c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1d560:	d020      	beq.n	1d5a4 <gpio_nrfx_pin_interrupt_configure+0xa0>
   1d562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1d566:	bf14      	ite	ne
   1d568:	2301      	movne	r3, #1
   1d56a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d56c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1d570:	6883      	ldr	r3, [r0, #8]
   1d572:	40cb      	lsrs	r3, r1
   1d574:	07d9      	lsls	r1, r3, #31
   1d576:	d4e3      	bmi.n	1d540 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1d578:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1d57c:	d1e0      	bne.n	1d540 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d57e:	4a11      	ldr	r2, [pc, #68]	; (1d5c4 <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1d580:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d584:	3380      	adds	r3, #128	; 0x80
   1d586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1d58a:	07db      	lsls	r3, r3, #31
   1d58c:	d4d8      	bmi.n	1d540 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d58e:	f10d 0507 	add.w	r5, sp, #7
   1d592:	4629      	mov	r1, r5
   1d594:	4620      	mov	r0, r4
   1d596:	f004 fecf 	bl	22338 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1d59a:	4b0b      	ldr	r3, [pc, #44]	; (1d5c8 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1d59c:	4298      	cmp	r0, r3
   1d59e:	d003      	beq.n	1d5a8 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
   1d5a0:	9503      	str	r5, [sp, #12]
   1d5a2:	e7cd      	b.n	1d540 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1d5a4:	2303      	movs	r3, #3
   1d5a6:	e7e1      	b.n	1d56c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   1d5a8:	4628      	mov	r0, r5
   1d5aa:	f004 ff13 	bl	223d4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1d5ae:	4b04      	ldr	r3, [pc, #16]	; (1d5c0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1d5b0:	4298      	cmp	r0, r3
   1d5b2:	d0f5      	beq.n	1d5a0 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   1d5b4:	f06f 000b 	mvn.w	r0, #11
   1d5b8:	e7b3      	b.n	1d522 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1d5ba:	f06f 0015 	mvn.w	r0, #21
   1d5be:	e7b0      	b.n	1d522 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1d5c0:	0bad0000 	.word	0x0bad0000
   1d5c4:	40842500 	.word	0x40842500
   1d5c8:	0bad0004 	.word	0x0bad0004

0001d5cc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d5cc:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1d5ce:	f004 fef1 	bl	223b4 <nrfx_gpiote_is_init>
   1d5d2:	4604      	mov	r4, r0
   1d5d4:	b968      	cbnz	r0, 1d5f2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1d5d6:	f004 fec5 	bl	22364 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1d5da:	4b08      	ldr	r3, [pc, #32]	; (1d5fc <gpio_nrfx_init+0x30>)
   1d5dc:	4298      	cmp	r0, r3
   1d5de:	d10a      	bne.n	1d5f6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1d5e0:	4621      	mov	r1, r4
   1d5e2:	4807      	ldr	r0, [pc, #28]	; (1d600 <gpio_nrfx_init+0x34>)
   1d5e4:	f004 fea2 	bl	2232c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d5e8:	4622      	mov	r2, r4
   1d5ea:	2105      	movs	r1, #5
   1d5ec:	2031      	movs	r0, #49	; 0x31
   1d5ee:	f7fe fcf1 	bl	1bfd4 <z_arm_irq_priority_set>
		return 0;
   1d5f2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1d5f4:	bd10      	pop	{r4, pc}
		return -EIO;
   1d5f6:	f06f 0004 	mvn.w	r0, #4
   1d5fa:	e7fb      	b.n	1d5f4 <gpio_nrfx_init+0x28>
   1d5fc:	0bad0000 	.word	0x0bad0000
   1d600:	0001d605 	.word	0x0001d605

0001d604 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d604:	0943      	lsrs	r3, r0, #5
{
   1d606:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d608:	d107      	bne.n	1d61a <nrfx_gpio_handler+0x16>
	return list->head;
   1d60a:	4b0b      	ldr	r3, [pc, #44]	; (1d638 <nrfx_gpio_handler+0x34>)
   1d60c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d60e:	b121      	cbz	r1, 1d61a <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   1d610:	2501      	movs	r5, #1
	return node->next;
   1d612:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1d614:	4e09      	ldr	r6, [pc, #36]	; (1d63c <nrfx_gpio_handler+0x38>)
   1d616:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d618:	b901      	cbnz	r1, 1d61c <nrfx_gpio_handler+0x18>
}
   1d61a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   1d61c:	688a      	ldr	r2, [r1, #8]
   1d61e:	402a      	ands	r2, r5
   1d620:	d002      	beq.n	1d628 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   1d622:	4630      	mov	r0, r6
   1d624:	684b      	ldr	r3, [r1, #4]
   1d626:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d628:	b11c      	cbz	r4, 1d632 <nrfx_gpio_handler+0x2e>
   1d62a:	6823      	ldr	r3, [r4, #0]
   1d62c:	4621      	mov	r1, r4
   1d62e:	461c      	mov	r4, r3
   1d630:	e7f2      	b.n	1d618 <nrfx_gpio_handler+0x14>
   1d632:	4623      	mov	r3, r4
   1d634:	e7fa      	b.n	1d62c <nrfx_gpio_handler+0x28>
   1d636:	bf00      	nop
   1d638:	2000d22c 	.word	0x2000d22c
   1d63c:	0002ba80 	.word	0x0002ba80

0001d640 <gpio_nrfx_pin_configure>:
{
   1d640:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1d644:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d646:	f001 051f 	and.w	r5, r1, #31
   1d64a:	7b3b      	ldrb	r3, [r7, #12]
{
   1d64c:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d64e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1d652:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d654:	4628      	mov	r0, r5
   1d656:	f10d 0103 	add.w	r1, sp, #3
   1d65a:	f004 fe6d 	bl	22338 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1d65e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d662:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1d664:	d10b      	bne.n	1d67e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1d666:	4628      	mov	r0, r5
   1d668:	f004 ff26 	bl	224b8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1d66c:	4b3c      	ldr	r3, [pc, #240]	; (1d760 <gpio_nrfx_pin_configure+0x120>)
   1d66e:	4598      	cmp	r8, r3
   1d670:	d103      	bne.n	1d67a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   1d672:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1d676:	f004 fea7 	bl	223c8 <nrfx_gpiote_channel_free>
		return 0;
   1d67a:	2000      	movs	r0, #0
   1d67c:	e00c      	b.n	1d698 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d67e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d680:	4628      	mov	r0, r5
   1d682:	4619      	mov	r1, r3
   1d684:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d686:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d68a:	f004 fd23 	bl	220d4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d68e:	4b34      	ldr	r3, [pc, #208]	; (1d760 <gpio_nrfx_pin_configure+0x120>)
   1d690:	4298      	cmp	r0, r3
   1d692:	d004      	beq.n	1d69e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   1d694:	f06f 0015 	mvn.w	r0, #21
}
   1d698:	b004      	add	sp, #16
   1d69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1d69e:	4580      	cmp	r8, r0
   1d6a0:	d103      	bne.n	1d6aa <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1d6a2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1d6a6:	f004 fe8f 	bl	223c8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1d6aa:	03a3      	lsls	r3, r4, #14
   1d6ac:	d549      	bpl.n	1d742 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d6ae:	f240 3306 	movw	r3, #774	; 0x306
   1d6b2:	4023      	ands	r3, r4
   1d6b4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1d6b8:	d019      	beq.n	1d6ee <gpio_nrfx_pin_configure+0xae>
   1d6ba:	d80c      	bhi.n	1d6d6 <gpio_nrfx_pin_configure+0x96>
   1d6bc:	2b06      	cmp	r3, #6
   1d6be:	d017      	beq.n	1d6f0 <gpio_nrfx_pin_configure+0xb0>
   1d6c0:	d804      	bhi.n	1d6cc <gpio_nrfx_pin_configure+0x8c>
   1d6c2:	b1ab      	cbz	r3, 1d6f0 <gpio_nrfx_pin_configure+0xb0>
   1d6c4:	2b02      	cmp	r3, #2
   1d6c6:	d1e5      	bne.n	1d694 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   1d6c8:	2304      	movs	r3, #4
   1d6ca:	e011      	b.n	1d6f0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d6cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1d6d0:	d1e0      	bne.n	1d694 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   1d6d2:	2301      	movs	r3, #1
   1d6d4:	e00c      	b.n	1d6f0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d6d6:	f240 2202 	movw	r2, #514	; 0x202
   1d6da:	4293      	cmp	r3, r2
   1d6dc:	d026      	beq.n	1d72c <gpio_nrfx_pin_configure+0xec>
   1d6de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1d6e2:	d025      	beq.n	1d730 <gpio_nrfx_pin_configure+0xf0>
   1d6e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1d6e8:	d1d4      	bne.n	1d694 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   1d6ea:	2302      	movs	r3, #2
   1d6ec:	e000      	b.n	1d6f0 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   1d6ee:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1d6f0:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1d6f4:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1d6f8:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1d6fc:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1d6fe:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1d702:	bf4c      	ite	mi
   1d704:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1d706:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d70a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1d70c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d710:	d510      	bpl.n	1d734 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1d712:	2301      	movs	r3, #1
   1d714:	687a      	ldr	r2, [r7, #4]
   1d716:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1d718:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1d71a:	2200      	movs	r2, #0
   1d71c:	4628      	mov	r0, r5
   1d71e:	a901      	add	r1, sp, #4
   1d720:	f004 fd84 	bl	2222c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d724:	4b0e      	ldr	r3, [pc, #56]	; (1d760 <gpio_nrfx_pin_configure+0x120>)
   1d726:	4298      	cmp	r0, r3
   1d728:	d0a7      	beq.n	1d67a <gpio_nrfx_pin_configure+0x3a>
   1d72a:	e7b3      	b.n	1d694 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   1d72c:	2305      	movs	r3, #5
   1d72e:	e7df      	b.n	1d6f0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d730:	2303      	movs	r3, #3
   1d732:	e7dd      	b.n	1d6f0 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1d734:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1d736:	bf41      	itttt	mi
   1d738:	2301      	movmi	r3, #1
   1d73a:	687a      	ldrmi	r2, [r7, #4]
   1d73c:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   1d73e:	60d3      	strmi	r3, [r2, #12]
}
   1d740:	e7eb      	b.n	1d71a <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   1d742:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d744:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1d748:	bf4c      	ite	mi
   1d74a:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1d74c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d750:	461a      	mov	r2, r3
   1d752:	4628      	mov	r0, r5
   1d754:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1d756:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d75a:	f004 fcbb 	bl	220d4 <nrfx_gpiote_input_configure>
   1d75e:	e7e1      	b.n	1d724 <gpio_nrfx_pin_configure+0xe4>
   1d760:	0bad0000 	.word	0x0bad0000

0001d764 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
   1d764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1d766:	6844      	ldr	r4, [r0, #4]
{
   1d768:	af00      	add	r7, sp, #0
	struct i2c_nrfx_twim_data *dev_data = dev->data;

	dev_config->irq_connect();
   1d76a:	69e3      	ldr	r3, [r4, #28]
{
   1d76c:	4605      	mov	r5, r0
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1d76e:	6906      	ldr	r6, [r0, #16]
	dev_config->irq_connect();
   1d770:	4798      	blx	r3

#ifdef CONFIG_PINCTRL
	int err = pinctrl_apply_state(dev_config->pcfg,
   1d772:	6a20      	ldr	r0, [r4, #32]
   1d774:	f00b fd97 	bl	292a6 <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
   1d778:	2800      	cmp	r0, #0
   1d77a:	db1f      	blt.n	1d7bc <i2c_nrfx_twim_init+0x58>
		return err;
	}
#endif

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
   1d77c:	4633      	mov	r3, r6
   1d77e:	4620      	mov	r0, r4
   1d780:	4a12      	ldr	r2, [pc, #72]	; (1d7cc <i2c_nrfx_twim_init+0x68>)
   1d782:	f104 0108 	add.w	r1, r4, #8
   1d786:	f005 f99b 	bl	22ac0 <nrfx_twim_init>
   1d78a:	4b11      	ldr	r3, [pc, #68]	; (1d7d0 <i2c_nrfx_twim_init+0x6c>)
   1d78c:	4298      	cmp	r0, r3
   1d78e:	d017      	beq.n	1d7c0 <i2c_nrfx_twim_init+0x5c>
			   event_handler, dev_data) != NRFX_SUCCESS) {
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1d790:	466c      	mov	r4, sp
   1d792:	b088      	sub	sp, #32
   1d794:	682b      	ldr	r3, [r5, #0]
   1d796:	466a      	mov	r2, sp
   1d798:	490e      	ldr	r1, [pc, #56]	; (1d7d4 <i2c_nrfx_twim_init+0x70>)
   1d79a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1d79e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d7a2:	8393      	strh	r3, [r2, #28]
   1d7a4:	4b0c      	ldr	r3, [pc, #48]	; (1d7d8 <i2c_nrfx_twim_init+0x74>)
   1d7a6:	f842 3f10 	str.w	r3, [r2, #16]!
   1d7aa:	480c      	ldr	r0, [pc, #48]	; (1d7dc <i2c_nrfx_twim_init+0x78>)
   1d7ac:	2300      	movs	r3, #0
   1d7ae:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1d7b2:	f7fd fdc1 	bl	1b338 <z_impl_z_log_msg_static_create>
		return -EIO;
   1d7b6:	f06f 0004 	mvn.w	r0, #4
   1d7ba:	46a5      	mov	sp, r4
#else
	nrfx_twim_enable(&dev_config->twim);
#endif

	return 0;
}
   1d7bc:	46bd      	mov	sp, r7
   1d7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_twim_enable(&dev_config->twim);
   1d7c0:	4620      	mov	r0, r4
   1d7c2:	f005 f9cf 	bl	22b64 <nrfx_twim_enable>
	return 0;
   1d7c6:	2000      	movs	r0, #0
   1d7c8:	e7f8      	b.n	1d7bc <i2c_nrfx_twim_init+0x58>
   1d7ca:	bf00      	nop
   1d7cc:	0001d81d 	.word	0x0001d81d
   1d7d0:	0bad0000 	.word	0x0bad0000
   1d7d4:	0002d3ff 	.word	0x0002d3ff
   1d7d8:	01000003 	.word	0x01000003
   1d7dc:	0002bdc0 	.word	0x0002bdc0

0001d7e0 <i2c_nrfx_twim_recover_bus>:
{
   1d7e0:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1d7e2:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
   1d7e4:	6823      	ldr	r3, [r4, #0]
		nrfx_twim_disable(&dev_config->twim);
   1d7e6:	4620      	mov	r0, r4
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
   1d7e8:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
   1d7ec:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
   1d7f0:	f005 f9c8 	bl	22b84 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1d7f4:	4631      	mov	r1, r6
   1d7f6:	4628      	mov	r0, r5
   1d7f8:	f005 fc2e 	bl	23058 <nrfx_twi_twim_bus_recover>
   1d7fc:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
   1d7fe:	6a20      	ldr	r0, [r4, #32]
   1d800:	f00b fd51 	bl	292a6 <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
   1d804:	4620      	mov	r0, r4
   1d806:	f005 f9ad 	bl	22b64 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1d80a:	4b03      	ldr	r3, [pc, #12]	; (1d818 <i2c_nrfx_twim_recover_bus+0x38>)
   1d80c:	429d      	cmp	r5, r3
}
   1d80e:	bf14      	ite	ne
   1d810:	f06f 000f 	mvnne.w	r0, #15
   1d814:	2000      	moveq	r0, #0
   1d816:	bd70      	pop	{r4, r5, r6, pc}
   1d818:	0bad0000 	.word	0x0bad0000

0001d81c <event_handler>:
	switch (p_event->type) {
   1d81c:	7803      	ldrb	r3, [r0, #0]
   1d81e:	2b01      	cmp	r3, #1
   1d820:	d008      	beq.n	1d834 <event_handler+0x18>
   1d822:	2b02      	cmp	r3, #2
   1d824:	d008      	beq.n	1d838 <event_handler+0x1c>
   1d826:	b94b      	cbnz	r3, 1d83c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1d828:	4b05      	ldr	r3, [pc, #20]	; (1d840 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1d82a:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1d82c:	f101 0018 	add.w	r0, r1, #24
   1d830:	f007 be38 	b.w	254a4 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1d834:	4b03      	ldr	r3, [pc, #12]	; (1d844 <event_handler+0x28>)
   1d836:	e7f8      	b.n	1d82a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1d838:	4b03      	ldr	r3, [pc, #12]	; (1d848 <event_handler+0x2c>)
   1d83a:	e7f6      	b.n	1d82a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1d83c:	4b03      	ldr	r3, [pc, #12]	; (1d84c <event_handler+0x30>)
   1d83e:	e7f4      	b.n	1d82a <event_handler+0xe>
   1d840:	0bad0000 	.word	0x0bad0000
   1d844:	0bae0001 	.word	0x0bae0001
   1d848:	0bae0002 	.word	0x0bae0002
   1d84c:	0bad0001 	.word	0x0bad0001

0001d850 <i2c_nrfx_twim_configure>:
{
   1d850:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   1d852:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1d856:	6842      	ldr	r2, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
   1d858:	d10f      	bne.n	1d87a <i2c_nrfx_twim_configure+0x2a>
	switch (I2C_SPEED_GET(i2c_config)) {
   1d85a:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1d85e:	2901      	cmp	r1, #1
   1d860:	d00e      	beq.n	1d880 <i2c_nrfx_twim_configure+0x30>
   1d862:	2902      	cmp	r1, #2
   1d864:	d015      	beq.n	1d892 <i2c_nrfx_twim_configure+0x42>
		LOG_ERR("unsupported speed");
   1d866:	4a0d      	ldr	r2, [pc, #52]	; (1d89c <i2c_nrfx_twim_configure+0x4c>)
   1d868:	9205      	str	r2, [sp, #20]
   1d86a:	2202      	movs	r2, #2
   1d86c:	9204      	str	r2, [sp, #16]
   1d86e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d872:	480b      	ldr	r0, [pc, #44]	; (1d8a0 <i2c_nrfx_twim_configure+0x50>)
   1d874:	aa04      	add	r2, sp, #16
   1d876:	f7fd fd5f 	bl	1b338 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1d87a:	f06f 0015 	mvn.w	r0, #21
   1d87e:	e005      	b.n	1d88c <i2c_nrfx_twim_configure+0x3c>
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1d880:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1d882:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
	return 0;
   1d886:	2000      	movs	r0, #0
   1d888:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
   1d88c:	b007      	add	sp, #28
   1d88e:	f85d fb04 	ldr.w	pc, [sp], #4
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1d892:	6813      	ldr	r3, [r2, #0]
   1d894:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1d898:	e7f5      	b.n	1d886 <i2c_nrfx_twim_configure+0x36>
   1d89a:	bf00      	nop
   1d89c:	0002d41f 	.word	0x0002d41f
   1d8a0:	0002bdc0 	.word	0x0002bdc0

0001d8a4 <i2c_nrfx_twim_transfer>:
{
   1d8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8a8:	b08d      	sub	sp, #52	; 0x34
   1d8aa:	461d      	mov	r5, r3
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1d8ac:	f8d0 b004 	ldr.w	fp, [r0, #4]
{
   1d8b0:	af00      	add	r7, sp, #0
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1d8b2:	f8d0 9010 	ldr.w	r9, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1d8b6:	f8bb 3018 	ldrh.w	r3, [fp, #24]
{
   1d8ba:	613a      	str	r2, [r7, #16]
   1d8bc:	4606      	mov	r6, r0
   1d8be:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   1d8c0:	2214      	movs	r2, #20
   1d8c2:	2100      	movs	r1, #0
   1d8c4:	f107 001c 	add.w	r0, r7, #28
	uint8_t *msg_buf = dev_data->msg_buf;
   1d8c8:	f8d9 a034 	ldr.w	sl, [r9, #52]	; 0x34
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1d8cc:	617b      	str	r3, [r7, #20]
	nrfx_twim_xfer_desc_t cur_xfer = {
   1d8ce:	f00d fe06 	bl	2b4de <memset>
   1d8d2:	777d      	strb	r5, [r7, #29]
	return z_impl_k_sem_take(sem, timeout);
   1d8d4:	f04f 32ff 	mov.w	r2, #4294967295
   1d8d8:	f04f 33ff 	mov.w	r3, #4294967295
   1d8dc:	4648      	mov	r0, r9
   1d8de:	f007 fe07 	bl	254f0 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   1d8e2:	f109 0318 	add.w	r3, r9, #24
   1d8e6:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < num_msgs; i++) {
   1d8e8:	f04f 0800 	mov.w	r8, #0
   1d8ec:	2200      	movs	r2, #0
   1d8ee:	2300      	movs	r3, #0
   1d8f0:	f109 0018 	add.w	r0, r9, #24
   1d8f4:	f007 fdfc 	bl	254f0 <z_impl_k_sem_take>
	uint16_t msg_buf_used = 0;
   1d8f8:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   1d8fa:	693b      	ldr	r3, [r7, #16]
   1d8fc:	4598      	cmp	r8, r3
   1d8fe:	d301      	bcc.n	1d904 <i2c_nrfx_twim_transfer+0x60>
   1d900:	2400      	movs	r4, #0
   1d902:	e038      	b.n	1d976 <i2c_nrfx_twim_transfer+0xd2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1d904:	7a20      	ldrb	r0, [r4, #8]
   1d906:	0702      	lsls	r2, r0, #28
   1d908:	f100 80eb 	bmi.w	1dae2 <i2c_nrfx_twim_transfer+0x23e>
				&& ((msgs[i].flags & I2C_MSG_READ)
   1d90c:	693a      	ldr	r2, [r7, #16]
		bool concat_next = ((i + 1) < num_msgs)
   1d90e:	f108 0301 	add.w	r3, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   1d912:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
   1d914:	60bb      	str	r3, [r7, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
   1d916:	d20a      	bcs.n	1d92e <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   1d918:	0783      	lsls	r3, r0, #30
   1d91a:	d408      	bmi.n	1d92e <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1d91c:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   1d91e:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   1d922:	f002 0201 	and.w	r2, r2, #1
   1d926:	f003 0304 	and.w	r3, r3, #4
   1d92a:	431a      	orrs	r2, r3
   1d92c:	d02b      	beq.n	1d986 <i2c_nrfx_twim_transfer+0xe2>
		if (concat_next || (msg_buf_used != 0)) {
   1d92e:	2d00      	cmp	r5, #0
   1d930:	d03f      	beq.n	1d9b2 <i2c_nrfx_twim_transfer+0x10e>
		bool concat_next = ((i + 1) < num_msgs)
   1d932:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   1d934:	6862      	ldr	r2, [r4, #4]
   1d936:	f8d7 c014 	ldr.w	ip, [r7, #20]
   1d93a:	18a9      	adds	r1, r5, r2
   1d93c:	4561      	cmp	r1, ip
   1d93e:	d924      	bls.n	1d98a <i2c_nrfx_twim_transfer+0xe6>
				LOG_ERR("Need to use concatenation buffer and "
   1d940:	466c      	mov	r4, sp
   1d942:	b08c      	sub	sp, #48	; 0x30
   1d944:	6831      	ldr	r1, [r6, #0]
   1d946:	466b      	mov	r3, sp
   1d948:	61da      	str	r2, [r3, #28]
   1d94a:	697a      	ldr	r2, [r7, #20]
   1d94c:	4866      	ldr	r0, [pc, #408]	; (1dae8 <i2c_nrfx_twim_transfer+0x244>)
   1d94e:	e9c3 2108 	strd	r2, r1, [r3, #32]
   1d952:	f240 5203 	movw	r2, #1283	; 0x503
   1d956:	851a      	strh	r2, [r3, #40]	; 0x28
   1d958:	461a      	mov	r2, r3
   1d95a:	e9c3 0505 	strd	r0, r5, [r3, #20]
   1d95e:	4b63      	ldr	r3, [pc, #396]	; (1daec <i2c_nrfx_twim_transfer+0x248>)
   1d960:	f842 3f10 	str.w	r3, [r2, #16]!
   1d964:	2300      	movs	r3, #0
   1d966:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   1d96a:	4861      	ldr	r0, [pc, #388]	; (1daf0 <i2c_nrfx_twim_transfer+0x24c>)
   1d96c:	f7fd fce4 	bl	1b338 <z_impl_z_log_msg_static_create>
   1d970:	46a5      	mov	sp, r4
				ret = -ENOSPC;
   1d972:	f06f 041b 	mvn.w	r4, #27
	z_impl_k_sem_give(sem);
   1d976:	4648      	mov	r0, r9
   1d978:	f007 fd94 	bl	254a4 <z_impl_k_sem_give>
}
   1d97c:	4620      	mov	r0, r4
   1d97e:	3734      	adds	r7, #52	; 0x34
   1d980:	46bd      	mov	sp, r7
   1d982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bool concat_next = ((i + 1) < num_msgs)
   1d986:	2301      	movs	r3, #1
   1d988:	e7d4      	b.n	1d934 <i2c_nrfx_twim_transfer+0x90>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   1d98a:	07c1      	lsls	r1, r0, #31
   1d98c:	d406      	bmi.n	1d99c <i2c_nrfx_twim_transfer+0xf8>
   1d98e:	6821      	ldr	r1, [r4, #0]
   1d990:	eb0a 0005 	add.w	r0, sl, r5
   1d994:	607b      	str	r3, [r7, #4]
   1d996:	f00d fd95 	bl	2b4c4 <memcpy>
   1d99a:	687b      	ldr	r3, [r7, #4]
			msg_buf_used += msgs[i].len;
   1d99c:	6862      	ldr	r2, [r4, #4]
   1d99e:	442a      	add	r2, r5
   1d9a0:	b295      	uxth	r5, r2
		if (concat_next) {
   1d9a2:	2b00      	cmp	r3, #0
   1d9a4:	f040 8085 	bne.w	1dab2 <i2c_nrfx_twim_transfer+0x20e>
		if (msg_buf_used == 0) {
   1d9a8:	b13d      	cbz	r5, 1d9ba <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.primary_length = msg_buf_used;
   1d9aa:	462b      	mov	r3, r5
			cur_xfer.p_primary_buf = msg_buf;
   1d9ac:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
   1d9b0:	e007      	b.n	1d9c2 <i2c_nrfx_twim_transfer+0x11e>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1d9b2:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
   1d9b4:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1d9b8:	d51b      	bpl.n	1d9f2 <i2c_nrfx_twim_transfer+0x14e>
			cur_xfer.p_primary_buf = msgs[i].buf;
   1d9ba:	2500      	movs	r5, #0
   1d9bc:	6823      	ldr	r3, [r4, #0]
   1d9be:	62bb      	str	r3, [r7, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
   1d9c0:	6863      	ldr	r3, [r4, #4]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1d9c2:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
   1d9c4:	623b      	str	r3, [r7, #32]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   1d9c6:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1d9ca:	f082 0202 	eor.w	r2, r2, #2
   1d9ce:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1d9d2:	4658      	mov	r0, fp
   1d9d4:	0152      	lsls	r2, r2, #5
   1d9d6:	f107 011c 	add.w	r1, r7, #28
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1d9da:	773b      	strb	r3, [r7, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1d9dc:	f005 f8f0 	bl	22bc0 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1d9e0:	4b44      	ldr	r3, [pc, #272]	; (1daf4 <i2c_nrfx_twim_transfer+0x250>)
   1d9e2:	4298      	cmp	r0, r3
   1d9e4:	d02c      	beq.n	1da40 <i2c_nrfx_twim_transfer+0x19c>
			if (res == NRFX_ERROR_BUSY) {
   1d9e6:	330b      	adds	r3, #11
   1d9e8:	4298      	cmp	r0, r3
   1d9ea:	d144      	bne.n	1da76 <i2c_nrfx_twim_transfer+0x1d2>
				ret = -EBUSY;
   1d9ec:	f06f 040f 	mvn.w	r4, #15
   1d9f0:	e7c1      	b.n	1d976 <i2c_nrfx_twim_transfer+0xd2>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1d9f2:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1d9f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1d9fa:	d0de      	beq.n	1d9ba <i2c_nrfx_twim_transfer+0x116>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   1d9fc:	f8bb 301a 	ldrh.w	r3, [fp, #26]
   1da00:	4293      	cmp	r3, r2
   1da02:	d218      	bcs.n	1da36 <i2c_nrfx_twim_transfer+0x192>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   1da04:	466c      	mov	r4, sp
   1da06:	b08a      	sub	sp, #40	; 0x28
   1da08:	466b      	mov	r3, sp
   1da0a:	6831      	ldr	r1, [r6, #0]
   1da0c:	483a      	ldr	r0, [pc, #232]	; (1daf8 <i2c_nrfx_twim_transfer+0x254>)
   1da0e:	61d9      	str	r1, [r3, #28]
   1da10:	e9c3 0205 	strd	r0, r2, [r3, #20]
   1da14:	f240 3201 	movw	r2, #769	; 0x301
   1da18:	841a      	strh	r2, [r3, #32]
   1da1a:	461a      	mov	r2, r3
   1da1c:	4b37      	ldr	r3, [pc, #220]	; (1dafc <i2c_nrfx_twim_transfer+0x258>)
   1da1e:	f842 3f10 	str.w	r3, [r2, #16]!
   1da22:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1da26:	462b      	mov	r3, r5
   1da28:	4831      	ldr	r0, [pc, #196]	; (1daf0 <i2c_nrfx_twim_transfer+0x24c>)
   1da2a:	f7fd fc85 	bl	1b338 <z_impl_z_log_msg_static_create>
   1da2e:	46a5      	mov	sp, r4
				ret = -EINVAL;
   1da30:	f06f 0415 	mvn.w	r4, #21
				break;
   1da34:	e79f      	b.n	1d976 <i2c_nrfx_twim_transfer+0xd2>
   1da36:	4650      	mov	r0, sl
   1da38:	f00d fd44 	bl	2b4c4 <memcpy>
			msg_buf_used = msgs[i].len;
   1da3c:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
   1da3e:	e7b3      	b.n	1d9a8 <i2c_nrfx_twim_transfer+0x104>
	return z_impl_k_sem_take(sem, timeout);
   1da40:	2300      	movs	r3, #0
   1da42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1da46:	68f8      	ldr	r0, [r7, #12]
   1da48:	f007 fd52 	bl	254f0 <z_impl_k_sem_take>
		if (ret != 0) {
   1da4c:	4603      	mov	r3, r0
   1da4e:	b1a8      	cbz	r0, 1da7c <i2c_nrfx_twim_transfer+0x1d8>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1da50:	466c      	mov	r4, sp
   1da52:	b088      	sub	sp, #32
   1da54:	466a      	mov	r2, sp
   1da56:	4b2a      	ldr	r3, [pc, #168]	; (1db00 <i2c_nrfx_twim_transfer+0x25c>)
   1da58:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1da5c:	2303      	movs	r3, #3
   1da5e:	f842 3f10 	str.w	r3, [r2, #16]!
   1da62:	4823      	ldr	r0, [pc, #140]	; (1daf0 <i2c_nrfx_twim_transfer+0x24c>)
   1da64:	2300      	movs	r3, #0
   1da66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1da6a:	f7fd fc65 	bl	1b338 <z_impl_z_log_msg_static_create>
			(void)i2c_nrfx_twim_recover_bus(dev);
   1da6e:	4630      	mov	r0, r6
   1da70:	46a5      	mov	sp, r4
   1da72:	f7ff feb5 	bl	1d7e0 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
   1da76:	f06f 0404 	mvn.w	r4, #4
   1da7a:	e77c      	b.n	1d976 <i2c_nrfx_twim_transfer+0xd2>
		res = dev_data->res;
   1da7c:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1da80:	4a1c      	ldr	r2, [pc, #112]	; (1daf4 <i2c_nrfx_twim_transfer+0x250>)
   1da82:	4291      	cmp	r1, r2
   1da84:	d011      	beq.n	1daaa <i2c_nrfx_twim_transfer+0x206>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1da86:	466c      	mov	r4, sp
   1da88:	b088      	sub	sp, #32
   1da8a:	466a      	mov	r2, sp
   1da8c:	481d      	ldr	r0, [pc, #116]	; (1db04 <i2c_nrfx_twim_transfer+0x260>)
   1da8e:	f8c2 801c 	str.w	r8, [r2, #28]
   1da92:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1da96:	2104      	movs	r1, #4
   1da98:	f842 1f10 	str.w	r1, [r2, #16]!
   1da9c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1daa0:	4813      	ldr	r0, [pc, #76]	; (1daf0 <i2c_nrfx_twim_transfer+0x24c>)
   1daa2:	f7fd fc49 	bl	1b338 <z_impl_z_log_msg_static_create>
   1daa6:	46a5      	mov	sp, r4
			break;
   1daa8:	e7e5      	b.n	1da76 <i2c_nrfx_twim_transfer+0x1d2>
		if ((msgs[i].flags & I2C_MSG_READ)
   1daaa:	7a23      	ldrb	r3, [r4, #8]
   1daac:	07db      	lsls	r3, r3, #31
   1daae:	d404      	bmi.n	1daba <i2c_nrfx_twim_transfer+0x216>
		msg_buf_used = 0;
   1dab0:	2500      	movs	r5, #0
   1dab2:	f8d7 8008 	ldr.w	r8, [r7, #8]
   1dab6:	340c      	adds	r4, #12
   1dab8:	e71f      	b.n	1d8fa <i2c_nrfx_twim_transfer+0x56>
		    && cur_xfer.p_primary_buf == msg_buf) {
   1daba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1dabc:	459a      	cmp	sl, r3
   1dabe:	d1f7      	bne.n	1dab0 <i2c_nrfx_twim_transfer+0x20c>
   1dac0:	46a0      	mov	r8, r4
   1dac2:	e007      	b.n	1dad4 <i2c_nrfx_twim_transfer+0x230>
				msg_buf_used -= msgs[j].len;
   1dac4:	1aa9      	subs	r1, r5, r2
   1dac6:	b28d      	uxth	r5, r1
   1dac8:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1dacc:	fa1a f181 	uxtah	r1, sl, r1
   1dad0:	f00d fcf8 	bl	2b4c4 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   1dad4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1dad8:	f1a8 080c 	sub.w	r8, r8, #12
   1dadc:	4295      	cmp	r5, r2
   1dade:	d2f1      	bcs.n	1dac4 <i2c_nrfx_twim_transfer+0x220>
   1dae0:	e7e6      	b.n	1dab0 <i2c_nrfx_twim_transfer+0x20c>
			ret = -ENOTSUP;
   1dae2:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1dae6:	e746      	b.n	1d976 <i2c_nrfx_twim_transfer+0xd2>
   1dae8:	0002d431 	.word	0x0002d431
   1daec:	01000006 	.word	0x01000006
   1daf0:	0002bdc0 	.word	0x0002bdc0
   1daf4:	0bad0000 	.word	0x0bad0000
   1daf8:	0002d4c1 	.word	0x0002d4c1
   1dafc:	01000004 	.word	0x01000004
   1db00:	0002d527 	.word	0x0002d527
   1db04:	0002d551 	.word	0x0002d551

0001db08 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   1db08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1db0c:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1db0e:	6844      	ldr	r4, [r0, #4]
{
   1db10:	af00      	add	r7, sp, #0
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1db12:	6a66      	ldr	r6, [r4, #36]	; 0x24
	struct spi_nrfx_data *dev_data = dev->data;
   1db14:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1db16:	2100      	movs	r1, #0
   1db18:	4630      	mov	r0, r6
   1db1a:	1d3a      	adds	r2, r7, #4
   1db1c:	f00b fcd5 	bl	294ca <pinctrl_lookup_state>
	if (ret < 0) {
   1db20:	2800      	cmp	r0, #0
   1db22:	db32      	blt.n	1db8a <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1db24:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1db26:	6832      	ldr	r2, [r6, #0]
   1db28:	7919      	ldrb	r1, [r3, #4]
   1db2a:	6818      	ldr	r0, [r3, #0]
   1db2c:	f000 fe30 	bl	1e790 <pinctrl_configure_pins>
	if (err < 0) {
   1db30:	2800      	cmp	r0, #0
   1db32:	db2a      	blt.n	1db8a <spi_nrfx_init+0x82>

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1db34:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   1db36:	6a23      	ldr	r3, [r4, #32]
   1db38:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1db3a:	68ac      	ldr	r4, [r5, #8]
   1db3c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1db40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1db44:	429c      	cmp	r4, r3
   1db46:	d304      	bcc.n	1db52 <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1db48:	4628      	mov	r0, r5
   1db4a:	f00b fc0d 	bl	29368 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   1db4e:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   1db50:	e01b      	b.n	1db8a <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
   1db52:	6820      	ldr	r0, [r4, #0]
   1db54:	f00c ffb5 	bl	2aac2 <z_device_is_ready>
   1db58:	b9d8      	cbnz	r0, 1db92 <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1db5a:	6823      	ldr	r3, [r4, #0]
   1db5c:	6819      	ldr	r1, [r3, #0]
   1db5e:	7923      	ldrb	r3, [r4, #4]
   1db60:	466c      	mov	r4, sp
   1db62:	b08a      	sub	sp, #40	; 0x28
   1db64:	466a      	mov	r2, sp
   1db66:	61d3      	str	r3, [r2, #28]
   1db68:	f44f 7300 	mov.w	r3, #512	; 0x200
   1db6c:	481a      	ldr	r0, [pc, #104]	; (1dbd8 <spi_nrfx_init+0xd0>)
   1db6e:	8413      	strh	r3, [r2, #32]
   1db70:	4b1a      	ldr	r3, [pc, #104]	; (1dbdc <spi_nrfx_init+0xd4>)
   1db72:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1db76:	481a      	ldr	r0, [pc, #104]	; (1dbe0 <spi_nrfx_init+0xd8>)
   1db78:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1db7c:	f842 3f10 	str.w	r3, [r2, #16]!
   1db80:	f00b fbb9 	bl	292f6 <z_log_msg_static_create.constprop.0>
			return -ENODEV;
   1db84:	f06f 0012 	mvn.w	r0, #18
   1db88:	46a5      	mov	sp, r4
#endif
}
   1db8a:	370c      	adds	r7, #12
   1db8c:	46bd      	mov	sp, r7
   1db8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
   1db92:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1db94:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1db96:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   1db98:	f8d0 e010 	ldr.w	lr, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1db9c:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   1db9e:	bf54      	ite	pl
   1dba0:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1dba4:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1dba8:	f8de c000 	ldr.w	ip, [lr]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1dbac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1dbb0:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1dbb4:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1dbb6:	bf4c      	ite	mi
   1dbb8:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1dbbc:	ea2c 0308 	bicpl.w	r3, ip, r8
	const struct gpio_driver_api *api =
   1dbc0:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1dbc4:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   1dbc8:	f8d9 3000 	ldr.w	r3, [r9]
   1dbcc:	4798      	blx	r3
		if (ret < 0) {
   1dbce:	2800      	cmp	r0, #0
   1dbd0:	dbdb      	blt.n	1db8a <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1dbd2:	3408      	adds	r4, #8
   1dbd4:	e7b2      	b.n	1db3c <spi_nrfx_init+0x34>
   1dbd6:	bf00      	nop
   1dbd8:	0002d58d 	.word	0x0002d58d
   1dbdc:	01000004 	.word	0x01000004
   1dbe0:	0002be80 	.word	0x0002be80

0001dbe4 <transfer_next_chunk>:
{
   1dbe4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1dbe6:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1dbe8:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1dbea:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1dbec:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1dbee:	b98d      	cbnz	r5, 1dc14 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   1dbf0:	2b00      	cmp	r3, #0
   1dbf2:	d137      	bne.n	1dc64 <transfer_next_chunk+0x80>
	int error = 0;
   1dbf4:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   1dbf6:	2200      	movs	r2, #0
   1dbf8:	4620      	mov	r0, r4
   1dbfa:	4611      	mov	r1, r2
   1dbfc:	f00b fb92 	bl	29324 <_spi_context_cs_control>
	ctx->sync_status = status;
   1dc00:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1dc02:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1dc06:	f007 fc4d 	bl	254a4 <z_impl_k_sem_give>
	dev_data->busy = false;
   1dc0a:	2300      	movs	r3, #0
   1dc0c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1dc10:	b004      	add	sp, #16
   1dc12:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1dc14:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1dc16:	bb0b      	cbnz	r3, 1dc5c <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   1dc18:	bb39      	cbnz	r1, 1dc6a <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1dc1a:	f641 72ff 	movw	r2, #8191	; 0x1fff
   1dc1e:	42aa      	cmp	r2, r5
   1dc20:	bf28      	it	cs
   1dc22:	462a      	movcs	r2, r5
   1dc24:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   1dc26:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1dc28:	9100      	str	r1, [sp, #0]
   1dc2a:	b11b      	cbz	r3, 1dc34 <transfer_next_chunk+0x50>
   1dc2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1dc2e:	2b00      	cmp	r3, #0
   1dc30:	bf18      	it	ne
   1dc32:	4613      	movne	r3, r2
   1dc34:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1dc36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1dc38:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1dc3a:	b11b      	cbz	r3, 1dc44 <transfer_next_chunk+0x60>
   1dc3c:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1dc3e:	2b00      	cmp	r3, #0
   1dc40:	bf18      	it	ne
   1dc42:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1dc44:	2200      	movs	r2, #0
   1dc46:	4669      	mov	r1, sp
   1dc48:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1dc4a:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1dc4c:	f004 fe9e 	bl	2298c <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1dc50:	4b0d      	ldr	r3, [pc, #52]	; (1dc88 <transfer_next_chunk+0xa4>)
   1dc52:	4298      	cmp	r0, r3
   1dc54:	d0dc      	beq.n	1dc10 <transfer_next_chunk+0x2c>
			error = -EIO;
   1dc56:	f06f 0504 	mvn.w	r5, #4
   1dc5a:	e7cc      	b.n	1dbf6 <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1dc5c:	429d      	cmp	r5, r3
   1dc5e:	bf28      	it	cs
   1dc60:	461d      	movcs	r5, r3
   1dc62:	e7d9      	b.n	1dc18 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   1dc64:	461d      	mov	r5, r3
   1dc66:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1dc68:	e7d7      	b.n	1dc1a <transfer_next_chunk+0x36>
   1dc6a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1dc6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1dc72:	d0d2      	beq.n	1dc1a <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1dc74:	2d08      	cmp	r5, #8
   1dc76:	bf28      	it	cs
   1dc78:	2508      	movcs	r5, #8
   1dc7a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1dc7c:	462a      	mov	r2, r5
   1dc7e:	f00d fc21 	bl	2b4c4 <memcpy>
			tx_buf = dev_data->buffer;
   1dc82:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1dc84:	e7c9      	b.n	1dc1a <transfer_next_chunk+0x36>
   1dc86:	bf00      	nop
   1dc88:	0bad0000 	.word	0x0bad0000

0001dc8c <event_handler>:
{
   1dc8c:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1dc8e:	7803      	ldrb	r3, [r0, #0]
{
   1dc90:	460c      	mov	r4, r1
   1dc92:	b086      	sub	sp, #24
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1dc94:	2b00      	cmp	r3, #0
   1dc96:	d154      	bne.n	1dd42 <event_handler+0xb6>
	if (!ctx->tx_len) {
   1dc98:	6d8b      	ldr	r3, [r1, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1dc9a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   1dc9c:	b15b      	cbz	r3, 1dcb6 <event_handler+0x2a>
	if (len > ctx->tx_len) {
   1dc9e:	429a      	cmp	r2, r3
   1dca0:	d91e      	bls.n	1dce0 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
   1dca2:	4b29      	ldr	r3, [pc, #164]	; (1dd48 <event_handler+0xbc>)
   1dca4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dca8:	9305      	str	r3, [sp, #20]
   1dcaa:	2302      	movs	r3, #2
   1dcac:	4827      	ldr	r0, [pc, #156]	; (1dd4c <event_handler+0xc0>)
   1dcae:	aa04      	add	r2, sp, #16
   1dcb0:	9304      	str	r3, [sp, #16]
   1dcb2:	f00b fb20 	bl	292f6 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
   1dcb6:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1dcb8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1dcba:	b15b      	cbz	r3, 1dcd4 <event_handler+0x48>
	if (len > ctx->rx_len) {
   1dcbc:	429a      	cmp	r2, r3
   1dcbe:	d927      	bls.n	1dd10 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
   1dcc0:	4b21      	ldr	r3, [pc, #132]	; (1dd48 <event_handler+0xbc>)
   1dcc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dcc6:	9305      	str	r3, [sp, #20]
   1dcc8:	2302      	movs	r3, #2
   1dcca:	4820      	ldr	r0, [pc, #128]	; (1dd4c <event_handler+0xc0>)
   1dccc:	aa04      	add	r2, sp, #16
   1dcce:	9304      	str	r3, [sp, #16]
   1dcd0:	f00b fb11 	bl	292f6 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1dcd4:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1dcd6:	b006      	add	sp, #24
   1dcd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1dcdc:	f7ff bf82 	b.w	1dbe4 <transfer_next_chunk>
	ctx->tx_len -= len;
   1dce0:	1a9b      	subs	r3, r3, r2
   1dce2:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1dce4:	b973      	cbnz	r3, 1dd04 <event_handler+0x78>
		++ctx->current_tx;
   1dce6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1dce8:	f101 0258 	add.w	r2, r1, #88	; 0x58
		++ctx->current_tx;
   1dcec:	3308      	adds	r3, #8
   1dcee:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1dcf0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1dcf2:	f104 0044 	add.w	r0, r4, #68	; 0x44
		--ctx->tx_count;
   1dcf6:	3b01      	subs	r3, #1
   1dcf8:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1dcfa:	3148      	adds	r1, #72	; 0x48
   1dcfc:	f00b fae8 	bl	292d0 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1dd00:	6560      	str	r0, [r4, #84]	; 0x54
   1dd02:	e7d8      	b.n	1dcb6 <event_handler+0x2a>
	} else if (ctx->tx_buf) {
   1dd04:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1dd06:	2b00      	cmp	r3, #0
   1dd08:	d0d5      	beq.n	1dcb6 <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
   1dd0a:	4413      	add	r3, r2
   1dd0c:	654b      	str	r3, [r1, #84]	; 0x54
   1dd0e:	e7d2      	b.n	1dcb6 <event_handler+0x2a>
	ctx->rx_len -= len;
   1dd10:	1a9b      	subs	r3, r3, r2
   1dd12:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1dd14:	b97b      	cbnz	r3, 1dd36 <event_handler+0xaa>
		++ctx->current_rx;
   1dd16:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1dd18:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1dd1c:	3308      	adds	r3, #8
   1dd1e:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1dd20:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1dd22:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1dd26:	3b01      	subs	r3, #1
   1dd28:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1dd2a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1dd2e:	f00b facf 	bl	292d0 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1dd32:	65e0      	str	r0, [r4, #92]	; 0x5c
   1dd34:	e7ce      	b.n	1dcd4 <event_handler+0x48>
	} else if (ctx->rx_buf) {
   1dd36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1dd38:	2b00      	cmp	r3, #0
   1dd3a:	d0cb      	beq.n	1dcd4 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1dd3c:	4413      	add	r3, r2
   1dd3e:	65e3      	str	r3, [r4, #92]	; 0x5c
   1dd40:	e7c8      	b.n	1dcd4 <event_handler+0x48>
}
   1dd42:	b006      	add	sp, #24
   1dd44:	bd10      	pop	{r4, pc}
   1dd46:	bf00      	nop
   1dd48:	0002d5b1 	.word	0x0002d5b1
   1dd4c:	0002be80 	.word	0x0002be80

0001dd50 <spi_nrfx_transceive>:
{
   1dd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd54:	b08b      	sub	sp, #44	; 0x2c
   1dd56:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1dd58:	888b      	ldrh	r3, [r1, #4]
   1dd5a:	af00      	add	r7, sp, #0
   1dd5c:	049b      	lsls	r3, r3, #18
   1dd5e:	4680      	mov	r8, r0
   1dd60:	460e      	mov	r6, r1
	struct spi_nrfx_data *dev_data = dev->data;
   1dd62:	6904      	ldr	r4, [r0, #16]
{
   1dd64:	60ba      	str	r2, [r7, #8]
   1dd66:	d439      	bmi.n	1dddc <spi_nrfx_transceive+0x8c>
	return z_impl_k_sem_take(sem, timeout);
   1dd68:	f04f 32ff 	mov.w	r2, #4294967295
   1dd6c:	f04f 33ff 	mov.w	r3, #4294967295
   1dd70:	f104 0010 	add.w	r0, r4, #16
   1dd74:	f007 fbbc 	bl	254f0 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1dd78:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1dd7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1dd7e:	f8d8 9010 	ldr.w	r9, [r8, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1dd82:	60fb      	str	r3, [r7, #12]
	uint32_t max_freq = dev_config->max_freq;
   1dd84:	689b      	ldr	r3, [r3, #8]
   1dd86:	603b      	str	r3, [r7, #0]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1dd88:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
   1dd8c:	607b      	str	r3, [r7, #4]
   1dd8e:	b123      	cbz	r3, 1dd9a <spi_nrfx_transceive+0x4a>
   1dd90:	f8d9 3000 	ldr.w	r3, [r9]
   1dd94:	429e      	cmp	r6, r3
   1dd96:	f000 80d0 	beq.w	1df3a <spi_nrfx_transceive+0x1ea>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1dd9a:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   1dd9e:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   1dda2:	d022      	beq.n	1ddea <spi_nrfx_transceive+0x9a>
		LOG_ERR("Half-duplex not supported");
   1dda4:	4b9b      	ldr	r3, [pc, #620]	; (1e014 <spi_nrfx_transceive+0x2c4>)
		return -ENOTSUP;
   1dda6:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
   1ddaa:	627b      	str	r3, [r7, #36]	; 0x24
   1ddac:	2302      	movs	r3, #2
   1ddae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ddb2:	4899      	ldr	r0, [pc, #612]	; (1e018 <spi_nrfx_transceive+0x2c8>)
   1ddb4:	623b      	str	r3, [r7, #32]
   1ddb6:	f107 0220 	add.w	r2, r7, #32
   1ddba:	f00b fa9c 	bl	292f6 <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1ddbe:	6823      	ldr	r3, [r4, #0]
   1ddc0:	889b      	ldrh	r3, [r3, #4]
   1ddc2:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1ddc6:	d104      	bne.n	1ddd2 <spi_nrfx_transceive+0x82>
		ctx->owner = NULL;
   1ddc8:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1ddca:	f104 0010 	add.w	r0, r4, #16
   1ddce:	f007 fb69 	bl	254a4 <z_impl_k_sem_give>
}
   1ddd2:	4628      	mov	r0, r5
   1ddd4:	372c      	adds	r7, #44	; 0x2c
   1ddd6:	46bd      	mov	sp, r7
   1ddd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1dddc:	69a3      	ldr	r3, [r4, #24]
   1ddde:	2b00      	cmp	r3, #0
   1dde0:	d1c2      	bne.n	1dd68 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1dde2:	6863      	ldr	r3, [r4, #4]
   1dde4:	4299      	cmp	r1, r3
   1dde6:	d1bf      	bne.n	1dd68 <spi_nrfx_transceive+0x18>
   1dde8:	e7c7      	b.n	1dd7a <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1ddea:	f01c 0f01 	tst.w	ip, #1
   1ddee:	d016      	beq.n	1de1e <spi_nrfx_transceive+0xce>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1ddf0:	466d      	mov	r5, sp
   1ddf2:	b088      	sub	sp, #32
   1ddf4:	f8d8 3000 	ldr.w	r3, [r8]
   1ddf8:	466a      	mov	r2, sp
   1ddfa:	4988      	ldr	r1, [pc, #544]	; (1e01c <spi_nrfx_transceive+0x2cc>)
   1ddfc:	4886      	ldr	r0, [pc, #536]	; (1e018 <spi_nrfx_transceive+0x2c8>)
   1ddfe:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1de02:	f44f 7300 	mov.w	r3, #512	; 0x200
   1de06:	8393      	strh	r3, [r2, #28]
   1de08:	4b85      	ldr	r3, [pc, #532]	; (1e020 <spi_nrfx_transceive+0x2d0>)
   1de0a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1de0e:	f842 3f10 	str.w	r3, [r2, #16]!
   1de12:	f00b fa70 	bl	292f6 <z_log_msg_static_create.constprop.0>
   1de16:	46ad      	mov	sp, r5
		return -EINVAL;
   1de18:	f06f 0515 	mvn.w	r5, #21
   1de1c:	e7cf      	b.n	1ddbe <spi_nrfx_transceive+0x6e>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1de1e:	f01c 0f08 	tst.w	ip, #8
   1de22:	d00b      	beq.n	1de3c <spi_nrfx_transceive+0xec>
		LOG_ERR("Loopback mode is not supported");
   1de24:	4b7f      	ldr	r3, [pc, #508]	; (1e024 <spi_nrfx_transceive+0x2d4>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1de26:	627b      	str	r3, [r7, #36]	; 0x24
   1de28:	2302      	movs	r3, #2
   1de2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1de2e:	487a      	ldr	r0, [pc, #488]	; (1e018 <spi_nrfx_transceive+0x2c8>)
   1de30:	623b      	str	r3, [r7, #32]
   1de32:	f107 0220 	add.w	r2, r7, #32
   1de36:	f00b fa5e 	bl	292f6 <z_log_msg_static_create.constprop.0>
	if (error == 0) {
   1de3a:	e7ed      	b.n	1de18 <spi_nrfx_transceive+0xc8>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1de3c:	f3cc 1345 	ubfx	r3, ip, #5, #6
   1de40:	2b08      	cmp	r3, #8
   1de42:	d001      	beq.n	1de48 <spi_nrfx_transceive+0xf8>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1de44:	4b78      	ldr	r3, [pc, #480]	; (1e028 <spi_nrfx_transceive+0x2d8>)
   1de46:	e7ee      	b.n	1de26 <spi_nrfx_transceive+0xd6>
	if (spi_cfg->frequency < 125000) {
   1de48:	6835      	ldr	r5, [r6, #0]
   1de4a:	4b78      	ldr	r3, [pc, #480]	; (1e02c <spi_nrfx_transceive+0x2dc>)
   1de4c:	429d      	cmp	r5, r3
   1de4e:	d801      	bhi.n	1de54 <spi_nrfx_transceive+0x104>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1de50:	4b77      	ldr	r3, [pc, #476]	; (1e030 <spi_nrfx_transceive+0x2e0>)
   1de52:	e7e8      	b.n	1de26 <spi_nrfx_transceive+0xd6>
	config = dev_config->def_config;
   1de54:	68fb      	ldr	r3, [r7, #12]
   1de56:	f107 0e10 	add.w	lr, r7, #16
   1de5a:	f103 0b0c 	add.w	fp, r3, #12
   1de5e:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   1de62:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1de66:	f8db 3000 	ldr.w	r3, [fp]
   1de6a:	f8ce 3000 	str.w	r3, [lr]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1de6e:	683b      	ldr	r3, [r7, #0]
   1de70:	42ab      	cmp	r3, r5
   1de72:	bf28      	it	cs
   1de74:	462b      	movcs	r3, r5
   1de76:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1de78:	4b6e      	ldr	r3, [pc, #440]	; (1e034 <spi_nrfx_transceive+0x2e4>)
   1de7a:	429d      	cmp	r5, r3
   1de7c:	d945      	bls.n	1df0a <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 500000) {
   1de7e:	4b6e      	ldr	r3, [pc, #440]	; (1e038 <spi_nrfx_transceive+0x2e8>)
   1de80:	429d      	cmp	r5, r3
   1de82:	d945      	bls.n	1df10 <spi_nrfx_transceive+0x1c0>
	} else if (frequency < 1000000) {
   1de84:	4b6d      	ldr	r3, [pc, #436]	; (1e03c <spi_nrfx_transceive+0x2ec>)
   1de86:	429d      	cmp	r5, r3
   1de88:	d945      	bls.n	1df16 <spi_nrfx_transceive+0x1c6>
	} else if (frequency < 2000000) {
   1de8a:	4b6d      	ldr	r3, [pc, #436]	; (1e040 <spi_nrfx_transceive+0x2f0>)
   1de8c:	429d      	cmp	r5, r3
   1de8e:	d945      	bls.n	1df1c <spi_nrfx_transceive+0x1cc>
	} else if (frequency < 4000000) {
   1de90:	4b6c      	ldr	r3, [pc, #432]	; (1e044 <spi_nrfx_transceive+0x2f4>)
   1de92:	429d      	cmp	r5, r3
   1de94:	d945      	bls.n	1df22 <spi_nrfx_transceive+0x1d2>
		return NRF_SPIM_FREQ_4M;
   1de96:	4b6c      	ldr	r3, [pc, #432]	; (1e048 <spi_nrfx_transceive+0x2f8>)
   1de98:	429d      	cmp	r5, r3
   1de9a:	bf2c      	ite	cs
   1de9c:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
   1dea0:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1dea4:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1dea8:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1deaa:	f00c 0304 	and.w	r3, ip, #4
   1deae:	d03b      	beq.n	1df28 <spi_nrfx_transceive+0x1d8>
			return NRF_SPIM_MODE_2;
   1deb0:	2b00      	cmp	r3, #0
   1deb2:	bf14      	ite	ne
   1deb4:	2303      	movne	r3, #3
   1deb6:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1deb8:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   1deba:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1debc:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1dec0:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   1dec4:	b12b      	cbz	r3, 1ded2 <spi_nrfx_transceive+0x182>
		nrfx_spim_uninit(&dev_config->spim);
   1dec6:	68f8      	ldr	r0, [r7, #12]
   1dec8:	f004 fd18 	bl	228fc <nrfx_spim_uninit>
		dev_data->initialized = false;
   1decc:	2300      	movs	r3, #0
   1dece:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1ded2:	464b      	mov	r3, r9
   1ded4:	4a5d      	ldr	r2, [pc, #372]	; (1e04c <spi_nrfx_transceive+0x2fc>)
   1ded6:	68f8      	ldr	r0, [r7, #12]
   1ded8:	f107 0110 	add.w	r1, r7, #16
   1dedc:	f004 fc66 	bl	227ac <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1dee0:	4b5b      	ldr	r3, [pc, #364]	; (1e050 <spi_nrfx_transceive+0x300>)
   1dee2:	4298      	cmp	r0, r3
   1dee4:	d024      	beq.n	1df30 <spi_nrfx_transceive+0x1e0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1dee6:	466d      	mov	r5, sp
   1dee8:	b088      	sub	sp, #32
   1deea:	466a      	mov	r2, sp
   1deec:	4b59      	ldr	r3, [pc, #356]	; (1e054 <spi_nrfx_transceive+0x304>)
   1deee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1def2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1def6:	2303      	movs	r3, #3
   1def8:	4847      	ldr	r0, [pc, #284]	; (1e018 <spi_nrfx_transceive+0x2c8>)
   1defa:	f842 3f10 	str.w	r3, [r2, #16]!
   1defe:	f00b f9fa 	bl	292f6 <z_log_msg_static_create.constprop.0>
   1df02:	46ad      	mov	sp, r5
		return -EIO;
   1df04:	f06f 0504 	mvn.w	r5, #4
   1df08:	e759      	b.n	1ddbe <spi_nrfx_transceive+0x6e>
		return NRF_SPIM_FREQ_125K;
   1df0a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1df0e:	e7c9      	b.n	1dea4 <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_250K;
   1df10:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1df14:	e7c6      	b.n	1dea4 <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_500K;
   1df16:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1df1a:	e7c3      	b.n	1dea4 <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_1M;
   1df1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1df20:	e7c0      	b.n	1dea4 <spi_nrfx_transceive+0x154>
		return NRF_SPIM_FREQ_2M;
   1df22:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1df26:	e7bd      	b.n	1dea4 <spi_nrfx_transceive+0x154>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1df28:	3b00      	subs	r3, #0
   1df2a:	bf18      	it	ne
   1df2c:	2301      	movne	r3, #1
   1df2e:	e7c3      	b.n	1deb8 <spi_nrfx_transceive+0x168>
	dev_data->initialized = true;
   1df30:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1df32:	f8c9 6000 	str.w	r6, [r9]
	dev_data->initialized = true;
   1df36:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
		dev_data->busy = true;
   1df3a:	2301      	movs	r3, #1
   1df3c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1df40:	68bb      	ldr	r3, [r7, #8]
   1df42:	2b00      	cmp	r3, #0
   1df44:	d154      	bne.n	1dff0 <spi_nrfx_transceive+0x2a0>
   1df46:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1df48:	2300      	movs	r3, #0
   1df4a:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1df4c:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1df50:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1df54:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1df58:	f00b f9ba 	bl	292d0 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1df5c:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1df5e:	f1ba 0f00 	cmp.w	sl, #0
   1df62:	d14d      	bne.n	1e000 <spi_nrfx_transceive+0x2b0>
   1df64:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1df68:	2300      	movs	r3, #0
   1df6a:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1df6c:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1df70:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1df74:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1df78:	f00b f9aa 	bl	292d0 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1df7c:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1df7e:	2101      	movs	r1, #1
   1df80:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1df82:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1df84:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1df86:	4620      	mov	r0, r4
   1df88:	f00b f9cc 	bl	29324 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1df8c:	4640      	mov	r0, r8
   1df8e:	f7ff fe29 	bl	1dbe4 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1df92:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1df94:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1df96:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1df98:	429d      	cmp	r5, r3
   1df9a:	bf38      	it	cc
   1df9c:	461d      	movcc	r5, r3
   1df9e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1dfa2:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1dfa4:	f858 3b28 	ldr.w	r3, [r8], #40
			return ((t * to_hz + off) / from_hz);
   1dfa8:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1dfac:	681b      	ldr	r3, [r3, #0]
   1dfae:	4631      	mov	r1, r6
   1dfb0:	fbb5 f5f3 	udiv	r5, r5, r3
   1dfb4:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1dfb8:	35c8      	adds	r5, #200	; 0xc8
   1dfba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1dfbe:	2300      	movs	r3, #0
   1dfc0:	fbe5 010c 	umlal	r0, r1, r5, ip
   1dfc4:	f7fa fea0 	bl	18d08 <__aeabi_uldivmod>
   1dfc8:	4602      	mov	r2, r0
   1dfca:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1dfcc:	4640      	mov	r0, r8
   1dfce:	f007 fa8f 	bl	254f0 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1dfd2:	b1e8      	cbz	r0, 1e010 <spi_nrfx_transceive+0x2c0>
		LOG_ERR("Timeout waiting for transfer complete");
   1dfd4:	4b20      	ldr	r3, [pc, #128]	; (1e058 <spi_nrfx_transceive+0x308>)
   1dfd6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dfda:	627b      	str	r3, [r7, #36]	; 0x24
   1dfdc:	2302      	movs	r3, #2
   1dfde:	480e      	ldr	r0, [pc, #56]	; (1e018 <spi_nrfx_transceive+0x2c8>)
   1dfe0:	623b      	str	r3, [r7, #32]
   1dfe2:	f107 0220 	add.w	r2, r7, #32
   1dfe6:	f00b f986 	bl	292f6 <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
   1dfea:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1dfee:	e6e6      	b.n	1ddbe <spi_nrfx_transceive+0x6e>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1dff0:	68bb      	ldr	r3, [r7, #8]
   1dff2:	681b      	ldr	r3, [r3, #0]
   1dff4:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1dff6:	2b00      	cmp	r3, #0
   1dff8:	d0a6      	beq.n	1df48 <spi_nrfx_transceive+0x1f8>
   1dffa:	68bb      	ldr	r3, [r7, #8]
   1dffc:	685b      	ldr	r3, [r3, #4]
   1dffe:	e7a4      	b.n	1df4a <spi_nrfx_transceive+0x1fa>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1e000:	f8da 3000 	ldr.w	r3, [sl]
   1e004:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1e006:	2b00      	cmp	r3, #0
   1e008:	d0ae      	beq.n	1df68 <spi_nrfx_transceive+0x218>
   1e00a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1e00e:	e7ac      	b.n	1df6a <spi_nrfx_transceive+0x21a>
	status = ctx->sync_status;
   1e010:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1e012:	e6d4      	b.n	1ddbe <spi_nrfx_transceive+0x6e>
   1e014:	0002d5cf 	.word	0x0002d5cf
   1e018:	0002be80 	.word	0x0002be80
   1e01c:	0002d5e9 	.word	0x0002d5e9
   1e020:	01000003 	.word	0x01000003
   1e024:	0002d60b 	.word	0x0002d60b
   1e028:	0002d62a 	.word	0x0002d62a
   1e02c:	0001e847 	.word	0x0001e847
   1e030:	0002d659 	.word	0x0002d659
   1e034:	0003d08f 	.word	0x0003d08f
   1e038:	0007a11f 	.word	0x0007a11f
   1e03c:	000f423f 	.word	0x000f423f
   1e040:	001e847f 	.word	0x001e847f
   1e044:	003d08ff 	.word	0x003d08ff
   1e048:	007a1200 	.word	0x007a1200
   1e04c:	0001dc8d 	.word	0x0001dc8d
   1e050:	0bad0000 	.word	0x0bad0000
   1e054:	0002d68a 	.word	0x0002d68a
   1e058:	0002d6b1 	.word	0x0002d6b1

0001e05c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1e05c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1e05e:	794b      	ldrb	r3, [r1, #5]
   1e060:	2b01      	cmp	r3, #1
   1e062:	d026      	beq.n	1e0b2 <uarte_nrfx_configure+0x56>
   1e064:	2b03      	cmp	r3, #3
   1e066:	d121      	bne.n	1e0ac <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1e068:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e06a:	798b      	ldrb	r3, [r1, #6]
   1e06c:	2b03      	cmp	r3, #3
   1e06e:	d11d      	bne.n	1e0ac <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1e070:	79ce      	ldrb	r6, [r1, #7]
   1e072:	b10e      	cbz	r6, 1e078 <uarte_nrfx_configure+0x1c>
   1e074:	2e01      	cmp	r6, #1
   1e076:	d119      	bne.n	1e0ac <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1e078:	790a      	ldrb	r2, [r1, #4]
   1e07a:	b112      	cbz	r2, 1e082 <uarte_nrfx_configure+0x26>
   1e07c:	2a02      	cmp	r2, #2
   1e07e:	d115      	bne.n	1e0ac <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1e080:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e082:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1e084:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1e086:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1e08a:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   1e08c:	d067      	beq.n	1e15e <uarte_nrfx_configure+0x102>
   1e08e:	d82d      	bhi.n	1e0ec <uarte_nrfx_configure+0x90>
   1e090:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e094:	d066      	beq.n	1e164 <uarte_nrfx_configure+0x108>
   1e096:	d816      	bhi.n	1e0c6 <uarte_nrfx_configure+0x6a>
   1e098:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e09c:	d064      	beq.n	1e168 <uarte_nrfx_configure+0x10c>
   1e09e:	d80a      	bhi.n	1e0b6 <uarte_nrfx_configure+0x5a>
   1e0a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e0a4:	d063      	beq.n	1e16e <uarte_nrfx_configure+0x112>
   1e0a6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e0aa:	d063      	beq.n	1e174 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   1e0ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e0b0:	e054      	b.n	1e15c <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1e0b2:	2500      	movs	r5, #0
   1e0b4:	e7d9      	b.n	1e06a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1e0b6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e0ba:	d05e      	beq.n	1e17a <uarte_nrfx_configure+0x11e>
   1e0bc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e0c0:	d1f4      	bne.n	1e0ac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e0c2:	4b38      	ldr	r3, [pc, #224]	; (1e1a4 <uarte_nrfx_configure+0x148>)
   1e0c4:	e03c      	b.n	1e140 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e0c6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e0ca:	d059      	beq.n	1e180 <uarte_nrfx_configure+0x124>
   1e0cc:	d807      	bhi.n	1e0de <uarte_nrfx_configure+0x82>
   1e0ce:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e0d2:	d057      	beq.n	1e184 <uarte_nrfx_configure+0x128>
   1e0d4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e0d8:	d1e8      	bne.n	1e0ac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e0da:	4b33      	ldr	r3, [pc, #204]	; (1e1a8 <uarte_nrfx_configure+0x14c>)
   1e0dc:	e030      	b.n	1e140 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e0de:	f647 2412 	movw	r4, #31250	; 0x7a12
   1e0e2:	42a3      	cmp	r3, r4
   1e0e4:	d1e2      	bne.n	1e0ac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e0e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e0ea:	e029      	b.n	1e140 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e0ec:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e0f0:	d04a      	beq.n	1e188 <uarte_nrfx_configure+0x12c>
   1e0f2:	d813      	bhi.n	1e11c <uarte_nrfx_configure+0xc0>
   1e0f4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e0f8:	d049      	beq.n	1e18e <uarte_nrfx_configure+0x132>
   1e0fa:	d809      	bhi.n	1e110 <uarte_nrfx_configure+0xb4>
   1e0fc:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1e100:	42a3      	cmp	r3, r4
   1e102:	d046      	beq.n	1e192 <uarte_nrfx_configure+0x136>
   1e104:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e108:	d1d0      	bne.n	1e0ac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e10a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e10e:	e017      	b.n	1e140 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e110:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e114:	d1ca      	bne.n	1e0ac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e116:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e11a:	e011      	b.n	1e140 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e11c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e120:	d03a      	beq.n	1e198 <uarte_nrfx_configure+0x13c>
   1e122:	d808      	bhi.n	1e136 <uarte_nrfx_configure+0xda>
   1e124:	4c21      	ldr	r4, [pc, #132]	; (1e1ac <uarte_nrfx_configure+0x150>)
   1e126:	42a3      	cmp	r3, r4
   1e128:	d039      	beq.n	1e19e <uarte_nrfx_configure+0x142>
   1e12a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e12e:	d1bd      	bne.n	1e0ac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e130:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e134:	e004      	b.n	1e140 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e136:	4c1e      	ldr	r4, [pc, #120]	; (1e1b0 <uarte_nrfx_configure+0x154>)
   1e138:	42a3      	cmp	r3, r4
   1e13a:	d1b7      	bne.n	1e0ac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e13c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1e140:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e142:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   1e146:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   1e148:	4335      	orrs	r5, r6
   1e14a:	681b      	ldr	r3, [r3, #0]
   1e14c:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e14e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1e152:	1d23      	adds	r3, r4, #4
   1e154:	c903      	ldmia	r1, {r0, r1}
   1e156:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1e15a:	2000      	movs	r0, #0
}
   1e15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1e15e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1e162:	e7ed      	b.n	1e140 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1e164:	4b13      	ldr	r3, [pc, #76]	; (1e1b4 <uarte_nrfx_configure+0x158>)
   1e166:	e7eb      	b.n	1e140 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1e168:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e16c:	e7e8      	b.n	1e140 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1e16e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e172:	e7e5      	b.n	1e140 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e174:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e178:	e7e2      	b.n	1e140 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1e17a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e17e:	e7df      	b.n	1e140 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1e180:	4b0d      	ldr	r3, [pc, #52]	; (1e1b8 <uarte_nrfx_configure+0x15c>)
   1e182:	e7dd      	b.n	1e140 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1e184:	4b0d      	ldr	r3, [pc, #52]	; (1e1bc <uarte_nrfx_configure+0x160>)
   1e186:	e7db      	b.n	1e140 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1e188:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1e18c:	e7d8      	b.n	1e140 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1e18e:	4b0c      	ldr	r3, [pc, #48]	; (1e1c0 <uarte_nrfx_configure+0x164>)
   1e190:	e7d6      	b.n	1e140 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1e192:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e196:	e7d3      	b.n	1e140 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1e198:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e19c:	e7d0      	b.n	1e140 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1e19e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e1a2:	e7cd      	b.n	1e140 <uarte_nrfx_configure+0xe4>
   1e1a4:	0013b000 	.word	0x0013b000
   1e1a8:	004ea000 	.word	0x004ea000
   1e1ac:	0003d090 	.word	0x0003d090
   1e1b0:	000f4240 	.word	0x000f4240
   1e1b4:	00275000 	.word	0x00275000
   1e1b8:	0075c000 	.word	0x0075c000
   1e1bc:	003af000 	.word	0x003af000
   1e1c0:	013a9000 	.word	0x013a9000

0001e1c4 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1e1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e1c8:	4680      	mov	r8, r0
   1e1ca:	b087      	sub	sp, #28
   1e1cc:	2200      	movs	r2, #0
   1e1ce:	2101      	movs	r1, #1
   1e1d0:	2008      	movs	r0, #8
   1e1d2:	f7fd feff 	bl	1bfd4 <z_arm_irq_priority_set>
   1e1d6:	2008      	movs	r0, #8
   1e1d8:	f7fd fecc 	bl	1bf74 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e1dc:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   1e1de:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   1e1e2:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   1e1e6:	683c      	ldr	r4, [r7, #0]
	ret = pinctrl_lookup_state(config, id, &state);
   1e1e8:	466a      	mov	r2, sp
   1e1ea:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1e1ee:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1e1f2:	f8d7 900c 	ldr.w	r9, [r7, #12]
   1e1f6:	4648      	mov	r0, r9
   1e1f8:	f00b f967 	bl	294ca <pinctrl_lookup_state>
	if (ret < 0) {
   1e1fc:	1e05      	subs	r5, r0, #0
   1e1fe:	db25      	blt.n	1e24c <uarte_0_init+0x88>
	return pinctrl_apply_state_direct(config, state);
   1e200:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1e202:	f8d9 2000 	ldr.w	r2, [r9]
   1e206:	7919      	ldrb	r1, [r3, #4]
   1e208:	6818      	ldr	r0, [r3, #0]
   1e20a:	f000 fac1 	bl	1e790 <pinctrl_configure_pins>
	if (err < 0) {
   1e20e:	1e05      	subs	r5, r0, #0
   1e210:	db1c      	blt.n	1e24c <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1e212:	4640      	mov	r0, r8
   1e214:	1d31      	adds	r1, r6, #4
   1e216:	f7ff ff21 	bl	1e05c <uarte_nrfx_configure>
	if (err) {
   1e21a:	4605      	mov	r5, r0
   1e21c:	b9b0      	cbnz	r0, 1e24c <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1e21e:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1e220:	0799      	lsls	r1, r3, #30
   1e222:	d524      	bpl.n	1e26e <uarte_0_init+0xaa>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1e224:	f106 0018 	add.w	r0, r6, #24
   1e228:	f003 fece 	bl	21fc8 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1e22c:	4b24      	ldr	r3, [pc, #144]	; (1e2c0 <uarte_0_init+0xfc>)
   1e22e:	4298      	cmp	r0, r3
   1e230:	d010      	beq.n	1e254 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   1e232:	4b24      	ldr	r3, [pc, #144]	; (1e2c4 <uarte_0_init+0x100>)
   1e234:	9305      	str	r3, [sp, #20]
   1e236:	2302      	movs	r3, #2
   1e238:	9304      	str	r3, [sp, #16]
   1e23a:	462b      	mov	r3, r5
		return -EIO;
   1e23c:	f06f 0504 	mvn.w	r5, #4
   1e240:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e244:	4820      	ldr	r0, [pc, #128]	; (1e2c8 <uarte_0_init+0x104>)
   1e246:	aa04      	add	r2, sp, #16
   1e248:	f7fd f876 	bl	1b338 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   1e24c:	4628      	mov	r0, r5
   1e24e:	b007      	add	sp, #28
   1e250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1e254:	7e33      	ldrb	r3, [r6, #24]
   1e256:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1e25a:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1e25e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1e262:	2301      	movs	r3, #1
   1e264:	7e32      	ldrb	r2, [r6, #24]
   1e266:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1e268:	4a18      	ldr	r2, [pc, #96]	; (1e2cc <uarte_0_init+0x108>)
   1e26a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e26e:	2308      	movs	r3, #8
   1e270:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1e274:	7a3b      	ldrb	r3, [r7, #8]
   1e276:	b953      	cbnz	r3, 1e28e <uarte_0_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e278:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1e27c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e280:	6973      	ldr	r3, [r6, #20]
   1e282:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e286:	2301      	movs	r3, #1
   1e288:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e28c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1e28e:	687b      	ldr	r3, [r7, #4]
   1e290:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1e292:	bf5c      	itt	pl
   1e294:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1e298:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e29c:	687b      	ldr	r3, [r7, #4]
   1e29e:	06db      	lsls	r3, r3, #27
   1e2a0:	bf44      	itt	mi
   1e2a2:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1e2a6:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e2aa:	6933      	ldr	r3, [r6, #16]
   1e2ac:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e2b0:	2300      	movs	r3, #0
   1e2b2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e2b6:	2301      	movs	r3, #1
   1e2b8:	60a3      	str	r3, [r4, #8]
   1e2ba:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1e2bc:	e7c6      	b.n	1e24c <uarte_0_init+0x88>
   1e2be:	bf00      	nop
   1e2c0:	0bad0000 	.word	0x0bad0000
   1e2c4:	0002d6ee 	.word	0x0002d6ee
   1e2c8:	0002be88 	.word	0x0002be88
   1e2cc:	40017000 	.word	0x40017000

0001e2d0 <uarte_nrfx_poll_out>:
{
   1e2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e2d2:	4604      	mov	r4, r0
   1e2d4:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   1e2d6:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e2d8:	f00c fc7e 	bl	2abd8 <k_is_in_isr>
   1e2dc:	b9b0      	cbnz	r0, 1e30c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   1e2de:	4b2e      	ldr	r3, [pc, #184]	; (1e398 <uarte_nrfx_poll_out+0xc8>)
   1e2e0:	781b      	ldrb	r3, [r3, #0]
   1e2e2:	b19b      	cbz	r3, 1e30c <uarte_nrfx_poll_out+0x3c>
{
   1e2e4:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1e2e6:	6860      	ldr	r0, [r4, #4]
   1e2e8:	f00b f883 	bl	293f2 <is_tx_ready.isra.0>
   1e2ec:	bb00      	cbnz	r0, 1e330 <uarte_nrfx_poll_out+0x60>
   1e2ee:	2001      	movs	r0, #1
   1e2f0:	f00b fd13 	bl	29d1a <nrfx_busy_wait>
   1e2f4:	3e01      	subs	r6, #1
   1e2f6:	d1f6      	bne.n	1e2e6 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   1e2f8:	2100      	movs	r1, #0
   1e2fa:	2021      	movs	r0, #33	; 0x21
   1e2fc:	f007 fd80 	bl	25e00 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1e300:	e7f0      	b.n	1e2e4 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   1e302:	f386 8811 	msr	BASEPRI, r6
   1e306:	f3bf 8f6f 	isb	sy
}
   1e30a:	e7f5      	b.n	1e2f8 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   1e30c:	f04f 0320 	mov.w	r3, #32
   1e310:	f3ef 8611 	mrs	r6, BASEPRI
   1e314:	f383 8812 	msr	BASEPRI_MAX, r3
   1e318:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1e31c:	6860      	ldr	r0, [r4, #4]
   1e31e:	4631      	mov	r1, r6
   1e320:	f00b f867 	bl	293f2 <is_tx_ready.isra.0>
   1e324:	b990      	cbnz	r0, 1e34c <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1e326:	f386 8811 	msr	BASEPRI, r6
   1e32a:	f3bf 8f6f 	isb	sy
}
   1e32e:	e7ed      	b.n	1e30c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   1e330:	f04f 0320 	mov.w	r3, #32
   1e334:	f3ef 8611 	mrs	r6, BASEPRI
   1e338:	f383 8812 	msr	BASEPRI_MAX, r3
   1e33c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1e340:	6860      	ldr	r0, [r4, #4]
   1e342:	4631      	mov	r1, r6
   1e344:	f00b f855 	bl	293f2 <is_tx_ready.isra.0>
   1e348:	2800      	cmp	r0, #0
   1e34a:	d0da      	beq.n	1e302 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   1e34c:	693b      	ldr	r3, [r7, #16]
   1e34e:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   1e350:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e352:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   1e354:	6813      	ldr	r3, [r2, #0]
   1e356:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e35a:	2001      	movs	r0, #1
   1e35c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e360:	2000      	movs	r0, #0
   1e362:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1e366:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   1e36a:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e36e:	6852      	ldr	r2, [r2, #4]
   1e370:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   1e374:	06d2      	lsls	r2, r2, #27
   1e376:	d508      	bpl.n	1e38a <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e378:	2008      	movs	r0, #8
	return config->uarte_regs;
   1e37a:	6862      	ldr	r2, [r4, #4]
   1e37c:	6812      	ldr	r2, [r2, #0]
   1e37e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1e382:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1e386:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e38a:	2201      	movs	r2, #1
   1e38c:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1e38e:	f381 8811 	msr	BASEPRI, r1
   1e392:	f3bf 8f6f 	isb	sy
}
   1e396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e398:	2000e056 	.word	0x2000e056

0001e39c <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e39c:	2301      	movs	r3, #1
   1e39e:	4083      	lsls	r3, r0
{
   1e3a0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e3a2:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e3a4:	4a0b      	ldr	r2, [pc, #44]	; (1e3d4 <compare_int_lock+0x38>)
   1e3a6:	e8d2 1fef 	ldaex	r1, [r2]
   1e3aa:	ea01 0504 	and.w	r5, r1, r4
   1e3ae:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1e3b2:	2e00      	cmp	r6, #0
   1e3b4:	d1f7      	bne.n	1e3a6 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e3b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e3ba:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1e3bc:	4806      	ldr	r0, [pc, #24]	; (1e3d8 <compare_int_lock+0x3c>)
   1e3be:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1e3c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e3c6:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1e3ca:	420b      	tst	r3, r1
}
   1e3cc:	bf14      	ite	ne
   1e3ce:	2001      	movne	r0, #1
   1e3d0:	2000      	moveq	r0, #0
   1e3d2:	bd70      	pop	{r4, r5, r6, pc}
   1e3d4:	2000d23c 	.word	0x2000d23c
   1e3d8:	40015000 	.word	0x40015000

0001e3dc <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1e3dc:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1e3de:	490e      	ldr	r1, [pc, #56]	; (1e418 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
   1e3e0:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1e3e4:	e9d1 3400 	ldrd	r3, r4, [r1]
   1e3e8:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1e3ea:	18c3      	adds	r3, r0, r3
   1e3ec:	f144 0400 	adc.w	r4, r4, #0
   1e3f0:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1e3f4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1e3f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1e3fc:	d209      	bcs.n	1e412 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1e3fe:	4b07      	ldr	r3, [pc, #28]	; (1e41c <sys_clock_timeout_handler+0x40>)
   1e400:	681b      	ldr	r3, [r3, #0]
   1e402:	0a1a      	lsrs	r2, r3, #8
   1e404:	061b      	lsls	r3, r3, #24
   1e406:	199c      	adds	r4, r3, r6
   1e408:	4b05      	ldr	r3, [pc, #20]	; (1e420 <sys_clock_timeout_handler+0x44>)
   1e40a:	f142 0500 	adc.w	r5, r2, #0
   1e40e:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1e412:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1e414:	f007 be6c 	b.w	260f0 <sys_clock_announce>
   1e418:	2000ce30 	.word	0x2000ce30
   1e41c:	2000d240 	.word	0x2000d240
   1e420:	2000ce38 	.word	0x2000ce38

0001e424 <compare_int_unlock>:
	if (key) {
   1e424:	b1d9      	cbz	r1, 1e45e <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1e426:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e428:	4a0d      	ldr	r2, [pc, #52]	; (1e460 <compare_int_unlock+0x3c>)
   1e42a:	4083      	lsls	r3, r0
   1e42c:	e8d2 cfef 	ldaex	ip, [r2]
   1e430:	ea4c 0c03 	orr.w	ip, ip, r3
   1e434:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1e438:	2900      	cmp	r1, #0
   1e43a:	d1f7      	bne.n	1e42c <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e43c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1e440:	4a08      	ldr	r2, [pc, #32]	; (1e464 <compare_int_unlock+0x40>)
   1e442:	4083      	lsls	r3, r0
   1e444:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e448:	4b07      	ldr	r3, [pc, #28]	; (1e468 <compare_int_unlock+0x44>)
   1e44a:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1e44e:	40c3      	lsrs	r3, r0
   1e450:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e452:	bf42      	ittt	mi
   1e454:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1e458:	4b04      	ldrmi	r3, [pc, #16]	; (1e46c <compare_int_unlock+0x48>)
   1e45a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1e45e:	4770      	bx	lr
   1e460:	2000d23c 	.word	0x2000d23c
   1e464:	40015000 	.word	0x40015000
   1e468:	2000d238 	.word	0x2000d238
   1e46c:	e000e100 	.word	0xe000e100

0001e470 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1e470:	4b0d      	ldr	r3, [pc, #52]	; (1e4a8 <z_nrf_rtc_timer_read+0x38>)
   1e472:	6818      	ldr	r0, [r3, #0]
   1e474:	0a01      	lsrs	r1, r0, #8
   1e476:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1e478:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1e47c:	4b0b      	ldr	r3, [pc, #44]	; (1e4ac <z_nrf_rtc_timer_read+0x3c>)
   1e47e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1e482:	1818      	adds	r0, r3, r0
   1e484:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1e488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e48c:	d20a      	bcs.n	1e4a4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1e48e:	4b08      	ldr	r3, [pc, #32]	; (1e4b0 <z_nrf_rtc_timer_read+0x40>)
   1e490:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e494:	4290      	cmp	r0, r2
   1e496:	eb71 0303 	sbcs.w	r3, r1, r3
   1e49a:	d203      	bcs.n	1e4a4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1e49c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1e4a0:	f141 0100 	adc.w	r1, r1, #0
}
   1e4a4:	4770      	bx	lr
   1e4a6:	bf00      	nop
   1e4a8:	2000d240 	.word	0x2000d240
   1e4ac:	40015000 	.word	0x40015000
   1e4b0:	2000ce38 	.word	0x2000ce38

0001e4b4 <compare_set>:
{
   1e4b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4b8:	4616      	mov	r6, r2
   1e4ba:	461f      	mov	r7, r3
   1e4bc:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   1e4be:	f7ff ff6d 	bl	1e39c <compare_int_lock>
   1e4c2:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1e4c4:	f7ff ffd4 	bl	1e470 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1e4c8:	42b0      	cmp	r0, r6
   1e4ca:	eb71 0307 	sbcs.w	r3, r1, r7
   1e4ce:	d250      	bcs.n	1e572 <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1e4d0:	4b38      	ldr	r3, [pc, #224]	; (1e5b4 <compare_set+0x100>)
   1e4d2:	1a30      	subs	r0, r6, r0
   1e4d4:	eb67 0101 	sbc.w	r1, r7, r1
   1e4d8:	4298      	cmp	r0, r3
   1e4da:	f171 0100 	sbcs.w	r1, r1, #0
   1e4de:	d265      	bcs.n	1e5ac <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
   1e4e0:	4b35      	ldr	r3, [pc, #212]	; (1e5b8 <compare_set+0x104>)
   1e4e2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1e4e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1e4ea:	429f      	cmp	r7, r3
   1e4ec:	bf08      	it	eq
   1e4ee:	4296      	cmpeq	r6, r2
   1e4f0:	d049      	beq.n	1e586 <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e4f2:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1e4f6:	4931      	ldr	r1, [pc, #196]	; (1e5bc <compare_set+0x108>)
   1e4f8:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
   1e4fc:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
   1e4fe:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   1e502:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   1e506:	f00a ffd0 	bl	294aa <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1e50a:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
   1e50e:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1e510:	f104 0550 	add.w	r5, r4, #80	; 0x50
   1e514:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e516:	b2ad      	uxth	r5, r5
   1e518:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   1e51c:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1e520:	4a27      	ldr	r2, [pc, #156]	; (1e5c0 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e522:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
   1e526:	9301      	str	r3, [sp, #4]
   1e528:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e52c:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   1e530:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
   1e534:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   1e538:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1e53c:	eba0 0008 	sub.w	r0, r0, r8
   1e540:	3803      	subs	r0, #3
   1e542:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1e546:	4290      	cmp	r0, r2
   1e548:	d91d      	bls.n	1e586 <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e54a:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   1e54c:	b160      	cbz	r0, 1e568 <compare_set+0xb4>
     return p_reg->COUNTER;
   1e54e:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1e552:	eba8 000b 	sub.w	r0, r8, fp
   1e556:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1e55a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e55e:	d912      	bls.n	1e586 <compare_set+0xd2>
					event_clear(chan);
   1e560:	4620      	mov	r0, r4
   1e562:	f00a ffa2 	bl	294aa <event_clear>
   1e566:	4a16      	ldr	r2, [pc, #88]	; (1e5c0 <compare_set+0x10c>)
			cc_val = now + cc_inc;
   1e568:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
   1e56c:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   1e570:	e7da      	b.n	1e528 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1e572:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e574:	4a13      	ldr	r2, [pc, #76]	; (1e5c4 <compare_set+0x110>)
   1e576:	40a3      	lsls	r3, r4
   1e578:	e8d2 0fef 	ldaex	r0, [r2]
   1e57c:	4318      	orrs	r0, r3
   1e57e:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1e582:	2900      	cmp	r1, #0
   1e584:	d1f8      	bne.n	1e578 <compare_set+0xc4>
	return ret;
   1e586:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
   1e588:	490b      	ldr	r1, [pc, #44]	; (1e5b8 <compare_set+0x104>)
	cc_data[chan].callback = handler;
   1e58a:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   1e58c:	0123      	lsls	r3, r4, #4
   1e58e:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
   1e592:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   1e594:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
   1e598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e59a:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1e59c:	4620      	mov	r0, r4
   1e59e:	9900      	ldr	r1, [sp, #0]
   1e5a0:	f7ff ff40 	bl	1e424 <compare_int_unlock>
}
   1e5a4:	4628      	mov	r0, r5
   1e5a6:	b003      	add	sp, #12
   1e5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   1e5ac:	f06f 0515 	mvn.w	r5, #21
   1e5b0:	e7f4      	b.n	1e59c <compare_set+0xe8>
   1e5b2:	bf00      	nop
   1e5b4:	00800001 	.word	0x00800001
   1e5b8:	2000ce20 	.word	0x2000ce20
   1e5bc:	40015000 	.word	0x40015000
   1e5c0:	007ffffd 	.word	0x007ffffd
   1e5c4:	2000d238 	.word	0x2000d238

0001e5c8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1e5c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   1e5ca:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e5cc:	f04f 30ff 	mov.w	r0, #4294967295
   1e5d0:	f04f 31ff 	mov.w	r1, #4294967295
   1e5d4:	4d16      	ldr	r5, [pc, #88]	; (1e630 <sys_clock_driver_init+0x68>)
   1e5d6:	4b17      	ldr	r3, [pc, #92]	; (1e634 <sys_clock_driver_init+0x6c>)
   1e5d8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1e5dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1e5e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e5e4:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e5e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1e5ea:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   1e5ee:	4b12      	ldr	r3, [pc, #72]	; (1e638 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1e5f0:	2101      	movs	r1, #1
   1e5f2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1e5f6:	2015      	movs	r0, #21
   1e5f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1e5fc:	4622      	mov	r2, r4
   1e5fe:	f7fd fce9 	bl	1bfd4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1e602:	2015      	movs	r0, #21
   1e604:	f7fd fcb6 	bl	1bf74 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1e608:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1e60a:	4a0c      	ldr	r2, [pc, #48]	; (1e63c <sys_clock_driver_init+0x74>)
   1e60c:	60ab      	str	r3, [r5, #8]
   1e60e:	602b      	str	r3, [r5, #0]
   1e610:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e612:	4b0b      	ldr	r3, [pc, #44]	; (1e640 <sys_clock_driver_init+0x78>)
   1e614:	4a0b      	ldr	r2, [pc, #44]	; (1e644 <sys_clock_driver_init+0x7c>)
   1e616:	9300      	str	r3, [sp, #0]
   1e618:	4620      	mov	r0, r4
   1e61a:	2300      	movs	r3, #0
   1e61c:	9401      	str	r4, [sp, #4]
   1e61e:	f7ff ff49 	bl	1e4b4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1e622:	4630      	mov	r0, r6
   1e624:	f7fe feca 	bl	1d3bc <z_nrf_clock_control_lf_on>

	return 0;
}
   1e628:	4620      	mov	r0, r4
   1e62a:	b002      	add	sp, #8
   1e62c:	bd70      	pop	{r4, r5, r6, pc}
   1e62e:	bf00      	nop
   1e630:	40015000 	.word	0x40015000
   1e634:	2000ce20 	.word	0x2000ce20
   1e638:	e000e100 	.word	0xe000e100
   1e63c:	2000d23c 	.word	0x2000d23c
   1e640:	0001e3dd 	.word	0x0001e3dd
   1e644:	007fffff 	.word	0x007fffff

0001e648 <rtc_nrf_isr>:
{
   1e648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1e64c:	4b2e      	ldr	r3, [pc, #184]	; (1e708 <rtc_nrf_isr+0xc0>)
   1e64e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1e652:	0790      	lsls	r0, r2, #30
   1e654:	d50b      	bpl.n	1e66e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e656:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1e65a:	b142      	cbz	r2, 1e66e <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e65c:	2200      	movs	r2, #0
   1e65e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1e662:	4a2a      	ldr	r2, [pc, #168]	; (1e70c <rtc_nrf_isr+0xc4>)
   1e664:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1e668:	6813      	ldr	r3, [r2, #0]
   1e66a:	3301      	adds	r3, #1
   1e66c:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1e66e:	4a26      	ldr	r2, [pc, #152]	; (1e708 <rtc_nrf_isr+0xc0>)
   1e670:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1e674:	03d9      	lsls	r1, r3, #15
   1e676:	d527      	bpl.n	1e6c8 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e678:	4b25      	ldr	r3, [pc, #148]	; (1e710 <rtc_nrf_isr+0xc8>)
   1e67a:	e8d3 1fef 	ldaex	r1, [r3]
   1e67e:	f021 0001 	bic.w	r0, r1, #1
   1e682:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1e686:	2c00      	cmp	r4, #0
   1e688:	d1f7      	bne.n	1e67a <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1e68a:	07cb      	lsls	r3, r1, #31
   1e68c:	d402      	bmi.n	1e694 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e68e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   1e692:	b1cb      	cbz	r3, 1e6c8 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e694:	2500      	movs	r5, #0
   1e696:	4c1c      	ldr	r4, [pc, #112]	; (1e708 <rtc_nrf_isr+0xc0>)
   1e698:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1e69c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1e6a0:	f7ff fee6 	bl	1e470 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1e6a4:	f04f 0320 	mov.w	r3, #32
   1e6a8:	f3ef 8211 	mrs	r2, BASEPRI
   1e6ac:	f383 8812 	msr	BASEPRI_MAX, r3
   1e6b0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1e6b4:	4b17      	ldr	r3, [pc, #92]	; (1e714 <rtc_nrf_isr+0xcc>)
   1e6b6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1e6ba:	42b0      	cmp	r0, r6
   1e6bc:	41b9      	sbcs	r1, r7
   1e6be:	d206      	bcs.n	1e6ce <rtc_nrf_isr+0x86>
	__asm__ volatile(
   1e6c0:	f382 8811 	msr	BASEPRI, r2
   1e6c4:	f3bf 8f6f 	isb	sy
}
   1e6c8:	b003      	add	sp, #12
   1e6ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e6ce:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
   1e6d2:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e6d6:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   1e6da:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e6dc:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
   1e6e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e6e4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e6e8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1e6ec:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1e6f0:	f382 8811 	msr	BASEPRI, r2
   1e6f4:	f3bf 8f6f 	isb	sy
		if (handler) {
   1e6f8:	2900      	cmp	r1, #0
   1e6fa:	d0e5      	beq.n	1e6c8 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
   1e6fc:	9000      	str	r0, [sp, #0]
   1e6fe:	4632      	mov	r2, r6
   1e700:	463b      	mov	r3, r7
   1e702:	4628      	mov	r0, r5
   1e704:	4788      	blx	r1
   1e706:	e7df      	b.n	1e6c8 <rtc_nrf_isr+0x80>
   1e708:	40015000 	.word	0x40015000
   1e70c:	2000d240 	.word	0x2000d240
   1e710:	2000d238 	.word	0x2000d238
   1e714:	2000ce20 	.word	0x2000ce20

0001e718 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1e718:	1c43      	adds	r3, r0, #1
{
   1e71a:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1e71c:	d021      	beq.n	1e762 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1e71e:	2801      	cmp	r0, #1
   1e720:	dd21      	ble.n	1e766 <sys_clock_set_timeout+0x4e>
   1e722:	4a12      	ldr	r2, [pc, #72]	; (1e76c <sys_clock_set_timeout+0x54>)
   1e724:	4b12      	ldr	r3, [pc, #72]	; (1e770 <sys_clock_set_timeout+0x58>)
   1e726:	4290      	cmp	r0, r2
   1e728:	bfd4      	ite	le
   1e72a:	4604      	movle	r4, r0
   1e72c:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1e72e:	f7ff fe9f 	bl	1e470 <z_nrf_rtc_timer_read>
   1e732:	4b10      	ldr	r3, [pc, #64]	; (1e774 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   1e734:	490e      	ldr	r1, [pc, #56]	; (1e770 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1e736:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e73a:	1a80      	subs	r0, r0, r2
		cyc = 0;
   1e73c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e740:	bf28      	it	cs
   1e742:	2400      	movcs	r4, #0
	cyc += unannounced;
   1e744:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1e746:	428c      	cmp	r4, r1
   1e748:	bf28      	it	cs
   1e74a:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   1e74c:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e74e:	490a      	ldr	r1, [pc, #40]	; (1e778 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
   1e750:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e752:	9001      	str	r0, [sp, #4]
   1e754:	9100      	str	r1, [sp, #0]
   1e756:	f143 0300 	adc.w	r3, r3, #0
   1e75a:	f7ff feab 	bl	1e4b4 <compare_set>
}
   1e75e:	b002      	add	sp, #8
   1e760:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   1e762:	4c03      	ldr	r4, [pc, #12]	; (1e770 <sys_clock_set_timeout+0x58>)
   1e764:	e7e3      	b.n	1e72e <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1e766:	2401      	movs	r4, #1
   1e768:	e7e1      	b.n	1e72e <sys_clock_set_timeout+0x16>
   1e76a:	bf00      	nop
   1e76c:	007ffffe 	.word	0x007ffffe
   1e770:	007fffff 	.word	0x007fffff
   1e774:	2000ce30 	.word	0x2000ce30
   1e778:	0001e3dd 	.word	0x0001e3dd

0001e77c <sys_clock_elapsed>:
{
   1e77c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1e77e:	f7ff fe77 	bl	1e470 <z_nrf_rtc_timer_read>
   1e782:	4b02      	ldr	r3, [pc, #8]	; (1e78c <sys_clock_elapsed+0x10>)
   1e784:	681b      	ldr	r3, [r3, #0]
}
   1e786:	1ac0      	subs	r0, r0, r3
   1e788:	bd08      	pop	{r3, pc}
   1e78a:	bf00      	nop
   1e78c:	2000ce30 	.word	0x2000ce30

0001e790 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1e790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e794:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
   1e796:	4e3f      	ldr	r6, [pc, #252]	; (1e894 <pinctrl_configure_pins+0x104>)
   1e798:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1e79c:	4281      	cmp	r1, r0
   1e79e:	d102      	bne.n	1e7a6 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1e7a0:	2000      	movs	r0, #0
}
   1e7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1e7a6:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1e7a8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1e7ac:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
   1e7b0:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1e7b2:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   1e7b6:	bf08      	it	eq
   1e7b8:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1e7bc:	2d19      	cmp	r5, #25
   1e7be:	d866      	bhi.n	1e88e <pinctrl_configure_pins+0xfe>
   1e7c0:	e8df f005 	tbb	[pc, r5]
   1e7c4:	1e1b160d 	.word	0x1e1b160d
   1e7c8:	651e2d21 	.word	0x651e2d21
   1e7cc:	31656565 	.word	0x31656565
   1e7d0:	65656551 	.word	0x65656551
   1e7d4:	65656565 	.word	0x65656565
   1e7d8:	5c546565 	.word	0x5c546565
   1e7dc:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
   1e7de:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   1e7e2:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e7e6:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
   1e7ea:	60b5      	str	r5, [r6, #8]
}
   1e7ec:	2501      	movs	r5, #1
   1e7ee:	e002      	b.n	1e7f6 <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
   1e7f0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1e7f4:	2500      	movs	r5, #0
   1e7f6:	46ac      	mov	ip, r5
   1e7f8:	e01c      	b.n	1e834 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
   1e7fa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   1e7fe:	e7f0      	b.n	1e7e2 <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
   1e800:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   1e804:	e7f6      	b.n	1e7f4 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1e806:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1e808:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   1e80c:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1e810:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   1e814:	f8c6 c00c 	str.w	ip, [r6, #12]
}
   1e818:	f04f 0c01 	mov.w	ip, #1
   1e81c:	e00a      	b.n	1e834 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1e81e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   1e822:	2501      	movs	r5, #1
   1e824:	e7f2      	b.n	1e80c <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1e826:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1e82a:	2c00      	cmp	r4, #0
   1e82c:	d1e2      	bne.n	1e7f4 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1e82e:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
   1e830:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1e832:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1e834:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1e838:	0224      	lsls	r4, r4, #8
   1e83a:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1e83e:	f1b8 0f00 	cmp.w	r8, #0
   1e842:	bf1c      	itt	ne
   1e844:	f04f 0c00 	movne.w	ip, #0
   1e848:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1e84a:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
   1e84e:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
   1e852:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1e856:	ea44 040c 	orr.w	r4, r4, ip
   1e85a:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1e85e:	3380      	adds	r3, #128	; 0x80
   1e860:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1e864:	e79a      	b.n	1e79c <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1e866:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1e86a:	e7de      	b.n	1e82a <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1e86c:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1e870:	6805      	ldr	r5, [r0, #0]
   1e872:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
   1e876:	2d00      	cmp	r5, #0
   1e878:	d0d3      	beq.n	1e822 <pinctrl_configure_pins+0x92>
   1e87a:	e7b2      	b.n	1e7e2 <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1e87c:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1e880:	e7f6      	b.n	1e870 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1e882:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1e886:	e7f3      	b.n	1e870 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1e888:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   1e88c:	e7f0      	b.n	1e870 <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
   1e88e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e892:	e786      	b.n	1e7a2 <pinctrl_configure_pins+0x12>
   1e894:	40842500 	.word	0x40842500

0001e898 <_nrf_modem_lib_init>:
			nrf_modem_at_err(err), nrf_modem_at_err_type(err));
	}
}

static int _nrf_modem_lib_init(const struct device *unused)
{
   1e898:	b570      	push	{r4, r5, r6, lr}
	int err;
	(void) err;

	if (!first_time_init) {
   1e89a:	4d1a      	ldr	r5, [pc, #104]	; (1e904 <_nrf_modem_lib_init+0x6c>)
   1e89c:	4c1a      	ldr	r4, [pc, #104]	; (1e908 <_nrf_modem_lib_init+0x70>)
   1e89e:	782b      	ldrb	r3, [r5, #0]
   1e8a0:	b933      	cbnz	r3, 1e8b0 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   1e8a2:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   1e8a6:	4819      	ldr	r0, [pc, #100]	; (1e90c <_nrf_modem_lib_init+0x74>)
   1e8a8:	f00c f9b2 	bl	2ac10 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   1e8ac:	2301      	movs	r3, #1
   1e8ae:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
   1e8b0:	2200      	movs	r2, #0
   1e8b2:	2101      	movs	r1, #1
   1e8b4:	202a      	movs	r0, #42	; 0x2a
   1e8b6:	f7fd fb8d 	bl	1bfd4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params);
   1e8ba:	4815      	ldr	r0, [pc, #84]	; (1e910 <_nrf_modem_lib_init+0x78>)
   1e8bc:	f006 f9d0 	bl	24c60 <nrf_modem_init>
   1e8c0:	4d14      	ldr	r5, [pc, #80]	; (1e914 <_nrf_modem_lib_init+0x7c>)
   1e8c2:	6028      	str	r0, [r5, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1e8c4:	f04f 32ff 	mov.w	r2, #4294967295
   1e8c8:	f04f 33ff 	mov.w	r3, #4294967295
   1e8cc:	480f      	ldr	r0, [pc, #60]	; (1e90c <_nrf_modem_lib_init+0x74>)
   1e8ce:	f006 fcff 	bl	252d0 <z_impl_k_mutex_lock>
	return list->head;
   1e8d2:	6820      	ldr	r0, [r4, #0]
	if (IS_ENABLED(CONFIG_NRF_MODEM_LIB_LOG_FW_VERSION_UUID)) {
		log_fw_version_uuid();
	}

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   1e8d4:	b120      	cbz	r0, 1e8e0 <_nrf_modem_lib_init+0x48>
	return node->next;
   1e8d6:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   1e8d8:	3004      	adds	r0, #4
   1e8da:	f006 fde3 	bl	254a4 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   1e8de:	b944      	cbnz	r4, 1e8f2 <_nrf_modem_lib_init+0x5a>
	return z_impl_k_mutex_unlock(mutex);
   1e8e0:	480a      	ldr	r0, [pc, #40]	; (1e90c <_nrf_modem_lib_init+0x74>)
   1e8e2:	f006 fd6f 	bl	253c4 <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&slist_mutex);

	LOG_DBG("Modem library has initialized, ret %d", init_ret);
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   1e8e6:	4c0c      	ldr	r4, [pc, #48]	; (1e918 <_nrf_modem_lib_init+0x80>)
   1e8e8:	4e0c      	ldr	r6, [pc, #48]	; (1e91c <_nrf_modem_lib_init+0x84>)
   1e8ea:	42b4      	cmp	r4, r6
   1e8ec:	d304      	bcc.n	1e8f8 <_nrf_modem_lib_init+0x60>
		 */
		return 0;
	}

	return init_ret;
}
   1e8ee:	2000      	movs	r0, #0
   1e8f0:	bd70      	pop	{r4, r5, r6, pc}
   1e8f2:	4620      	mov	r0, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   1e8f4:	6824      	ldr	r4, [r4, #0]
   1e8f6:	e7ef      	b.n	1e8d8 <_nrf_modem_lib_init+0x40>
		e->callback(init_ret, e->context);
   1e8f8:	e9d4 3100 	ldrd	r3, r1, [r4]
   1e8fc:	6828      	ldr	r0, [r5, #0]
   1e8fe:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   1e900:	3408      	adds	r4, #8
   1e902:	e7f2      	b.n	1e8ea <_nrf_modem_lib_init+0x52>
   1e904:	2000db19 	.word	0x2000db19
   1e908:	2000d25c 	.word	0x2000d25c
   1e90c:	2000d248 	.word	0x2000d248
   1e910:	0002c104 	.word	0x0002c104
   1e914:	2000d244 	.word	0x2000d244
   1e918:	0002ed6c 	.word	0x0002ed6c
   1e91c:	0002ed7c 	.word	0x0002ed7c

0001e920 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   1e920:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1e922:	4b0f      	ldr	r3, [pc, #60]	; (1e960 <thread_monitor_entry_get+0x40>)
{
   1e924:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   1e926:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1e928:	4b0e      	ldr	r3, [pc, #56]	; (1e964 <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1e92a:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
   1e92c:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1e92e:	4618      	mov	r0, r3
   1e930:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1e932:	42b8      	cmp	r0, r7
   1e934:	d301      	bcc.n	1e93a <thread_monitor_entry_get+0x1a>
   1e936:	3d01      	subs	r5, #1
   1e938:	d104      	bne.n	1e944 <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   1e93a:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   1e93c:	3a01      	subs	r2, #1
	new_entry->id = id;
   1e93e:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1e940:	605a      	str	r2, [r3, #4]
}
   1e942:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
   1e944:	6804      	ldr	r4, [r0, #0]
   1e946:	428c      	cmp	r4, r1
   1e948:	d0fb      	beq.n	1e942 <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
   1e94a:	b13c      	cbz	r4, 1e95c <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
   1e94c:	6844      	ldr	r4, [r0, #4]
   1e94e:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   1e950:	42a6      	cmp	r6, r4
   1e952:	bfbc      	itt	lt
   1e954:	4603      	movlt	r3, r0
   1e956:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1e958:	3008      	adds	r0, #8
   1e95a:	e7ea      	b.n	1e932 <thread_monitor_entry_get+0x12>
   1e95c:	4603      	mov	r3, r0
   1e95e:	e7ec      	b.n	1e93a <thread_monitor_entry_get+0x1a>
   1e960:	2000d30c 	.word	0x2000d30c
   1e964:	2000d318 	.word	0x2000d318

0001e968 <on_init>:
	list->head = NULL;
   1e968:	2000      	movs	r0, #0
   1e96a:	4b05      	ldr	r3, [pc, #20]	; (1e980 <on_init+0x18>)
	list->tail = NULL;
   1e96c:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e970:	4b04      	ldr	r3, [pc, #16]	; (1e984 <on_init+0x1c>)
   1e972:	e8d3 2fef 	ldaex	r2, [r3]
   1e976:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1e97a:	2900      	cmp	r1, #0
   1e97c:	d1f9      	bne.n	1e972 <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   1e97e:	4770      	bx	lr
   1e980:	2000d310 	.word	0x2000d310
   1e984:	2000d30c 	.word	0x2000d30c

0001e988 <nrf_modem_os_timedwait>:
{
   1e988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e98c:	b088      	sub	sp, #32
   1e98e:	4605      	mov	r5, r0
   1e990:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
   1e992:	f00c f893 	bl	2aabc <nrf_modem_is_initialized>
   1e996:	b920      	cbnz	r0, 1e9a2 <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
   1e998:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   1e99c:	b008      	add	sp, #32
   1e99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   1e9a2:	f00c fb94 	bl	2b0ce <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1e9a6:	6833      	ldr	r3, [r6, #0]
   1e9a8:	4604      	mov	r4, r0
   1e9aa:	2b00      	cmp	r3, #0
   1e9ac:	460f      	mov	r7, r1
   1e9ae:	d104      	bne.n	1e9ba <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
   1e9b0:	f007 f9a4 	bl	25cfc <z_impl_k_yield>
		return -NRF_EAGAIN;
   1e9b4:	f06f 000a 	mvn.w	r0, #10
   1e9b8:	e7f0      	b.n	1e99c <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
   1e9ba:	bfbc      	itt	lt
   1e9bc:	f04f 33ff 	movlt.w	r3, #4294967295
   1e9c0:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e9c2:	2201      	movs	r2, #1
   1e9c4:	2100      	movs	r1, #0
   1e9c6:	a801      	add	r0, sp, #4
   1e9c8:	f00c f9a6 	bl	2ad18 <z_impl_k_sem_init>
   1e9cc:	46e8      	mov	r8, sp
	thread->context = context;
   1e9ce:	9507      	str	r5, [sp, #28]
	__asm__ volatile(
   1e9d0:	f04f 0320 	mov.w	r3, #32
   1e9d4:	f3ef 8a11 	mrs	sl, BASEPRI
   1e9d8:	f383 8812 	msr	BASEPRI_MAX, r3
   1e9dc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1e9e0:	f007 fa28 	bl	25e34 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1e9e4:	f7ff ff9c 	bl	1e920 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1e9e8:	f8df 9118 	ldr.w	r9, [pc, #280]	; 1eb04 <nrf_modem_os_timedwait+0x17c>
   1e9ec:	6842      	ldr	r2, [r0, #4]
   1e9ee:	f8d9 3000 	ldr.w	r3, [r9]
   1e9f2:	429a      	cmp	r2, r3
   1e9f4:	d16d      	bne.n	1ead2 <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
   1e9f6:	2300      	movs	r3, #0
	return list->tail;
   1e9f8:	4d43      	ldr	r5, [pc, #268]	; (1eb08 <nrf_modem_os_timedwait+0x180>)
	parent->next = child;
   1e9fa:	9300      	str	r3, [sp, #0]
	return list->tail;
   1e9fc:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1e9fe:	2b00      	cmp	r3, #0
   1ea00:	d16e      	bne.n	1eae0 <nrf_modem_os_timedwait+0x158>
	list->head = node;
   1ea02:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
   1ea06:	f38a 8811 	msr	BASEPRI, sl
   1ea0a:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1ea0e:	6833      	ldr	r3, [r6, #0]
   1ea10:	1c5a      	adds	r2, r3, #1
   1ea12:	d06a      	beq.n	1eaea <nrf_modem_os_timedwait+0x162>
   1ea14:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1ea18:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ea1c:	2100      	movs	r1, #0
   1ea1e:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   1ea22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ea26:	2300      	movs	r3, #0
   1ea28:	fbcc 010e 	smlal	r0, r1, ip, lr
   1ea2c:	f7fa f96c 	bl	18d08 <__aeabi_uldivmod>
   1ea30:	4602      	mov	r2, r0
   1ea32:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1ea34:	a801      	add	r0, sp, #4
   1ea36:	f006 fd5b 	bl	254f0 <z_impl_k_sem_take>
	__asm__ volatile(
   1ea3a:	f04f 0320 	mov.w	r3, #32
   1ea3e:	f3ef 8a11 	mrs	sl, BASEPRI
   1ea42:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea46:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ea4a:	2200      	movs	r2, #0
	return list->head;
   1ea4c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ea4e:	b15b      	cbz	r3, 1ea68 <nrf_modem_os_timedwait+0xe0>
   1ea50:	4543      	cmp	r3, r8
   1ea52:	d154      	bne.n	1eafe <nrf_modem_os_timedwait+0x176>
	return node->next;
   1ea54:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ea56:	2a00      	cmp	r2, #0
   1ea58:	d14b      	bne.n	1eaf2 <nrf_modem_os_timedwait+0x16a>
   1ea5a:	686a      	ldr	r2, [r5, #4]
	list->head = node;
   1ea5c:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ea5e:	429a      	cmp	r2, r3
   1ea60:	d100      	bne.n	1ea64 <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
   1ea62:	6069      	str	r1, [r5, #4]
	parent->next = child;
   1ea64:	2300      	movs	r3, #0
   1ea66:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
   1ea68:	f007 f9e4 	bl	25e34 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1ea6c:	f7ff ff58 	bl	1e920 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1ea70:	f8d9 3000 	ldr.w	r3, [r9]
   1ea74:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1ea76:	f38a 8811 	msr	BASEPRI, sl
   1ea7a:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   1ea7e:	f00c f81d 	bl	2aabc <nrf_modem_is_initialized>
   1ea82:	2800      	cmp	r0, #0
   1ea84:	d088      	beq.n	1e998 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
   1ea86:	6835      	ldr	r5, [r6, #0]
   1ea88:	1c6b      	adds	r3, r5, #1
   1ea8a:	d027      	beq.n	1eadc <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
   1ea8c:	f00c fb1f 	bl	2b0ce <z_impl_k_uptime_ticks>
   1ea90:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   1ea94:	fba0 320e 	umull	r3, r2, r0, lr
   1ea98:	fb0e 2101 	mla	r1, lr, r1, r2
   1ea9c:	fba4 420e 	umull	r4, r2, r4, lr
   1eaa0:	fb0e 2207 	mla	r2, lr, r7, r2
   1eaa4:	0bdb      	lsrs	r3, r3, #15
   1eaa6:	0be4      	lsrs	r4, r4, #15
   1eaa8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1eaac:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
   1eab0:	1b1b      	subs	r3, r3, r4
   1eab2:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   1eab6:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   1eaba:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
   1eabe:	1aed      	subs	r5, r5, r3
   1eac0:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   1eac4:	f1bc 0f00 	cmp.w	ip, #0
   1eac8:	bfb8      	it	lt
   1eaca:	2500      	movlt	r5, #0
   1eacc:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
   1eace:	b92d      	cbnz	r5, 1eadc <nrf_modem_os_timedwait+0x154>
   1ead0:	e770      	b.n	1e9b4 <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
   1ead2:	6043      	str	r3, [r0, #4]
   1ead4:	f38a 8811 	msr	BASEPRI, sl
   1ead8:	f3bf 8f6f 	isb	sy
		return 0;
   1eadc:	2000      	movs	r0, #0
   1eade:	e75d      	b.n	1e99c <nrf_modem_os_timedwait+0x14>
   1eae0:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   1eae4:	f8c5 8004 	str.w	r8, [r5, #4]
   1eae8:	e78d      	b.n	1ea06 <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1eaea:	f04f 32ff 	mov.w	r2, #4294967295
   1eaee:	4613      	mov	r3, r2
   1eaf0:	e7a0      	b.n	1ea34 <nrf_modem_os_timedwait+0xac>
	parent->next = child;
   1eaf2:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1eaf4:	6869      	ldr	r1, [r5, #4]
   1eaf6:	4299      	cmp	r1, r3
	list->tail = node;
   1eaf8:	bf08      	it	eq
   1eafa:	606a      	streq	r2, [r5, #4]
}
   1eafc:	e7b2      	b.n	1ea64 <nrf_modem_os_timedwait+0xdc>
	return node->next;
   1eafe:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1eb00:	681b      	ldr	r3, [r3, #0]
   1eb02:	e7a4      	b.n	1ea4e <nrf_modem_os_timedwait+0xc6>
   1eb04:	2000d30c 	.word	0x2000d30c
   1eb08:	2000d310 	.word	0x2000d310

0001eb0c <nrf_modem_os_sem_init>:
{
   1eb0c:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   1eb0e:	6804      	ldr	r4, [r0, #0]
   1eb10:	4b0a      	ldr	r3, [pc, #40]	; (1eb3c <nrf_modem_os_sem_init+0x30>)
   1eb12:	b12c      	cbz	r4, 1eb20 <nrf_modem_os_sem_init+0x14>
   1eb14:	429c      	cmp	r4, r3
   1eb16:	d303      	bcc.n	1eb20 <nrf_modem_os_sem_init+0x14>
   1eb18:	f103 05a8 	add.w	r5, r3, #168	; 0xa8
   1eb1c:	42ac      	cmp	r4, r5
   1eb1e:	d308      	bcc.n	1eb32 <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
   1eb20:	4d07      	ldr	r5, [pc, #28]	; (1eb40 <nrf_modem_os_sem_init+0x34>)
   1eb22:	782c      	ldrb	r4, [r5, #0]
   1eb24:	1c66      	adds	r6, r4, #1
   1eb26:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1eb2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1eb2e:	702e      	strb	r6, [r5, #0]
   1eb30:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   1eb32:	6800      	ldr	r0, [r0, #0]
}
   1eb34:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1eb36:	f00c b8ef 	b.w	2ad18 <z_impl_k_sem_init>
   1eb3a:	bf00      	nop
   1eb3c:	2000d264 	.word	0x2000d264
   1eb40:	2000db1a 	.word	0x2000db1a

0001eb44 <nrf_modem_os_event_notify>:
{
   1eb44:	b538      	push	{r3, r4, r5, lr}
   1eb46:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1eb48:	4b0a      	ldr	r3, [pc, #40]	; (1eb74 <nrf_modem_os_event_notify+0x30>)
   1eb4a:	e8d3 1fef 	ldaex	r1, [r3]
   1eb4e:	3101      	adds	r1, #1
   1eb50:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1eb54:	2a00      	cmp	r2, #0
   1eb56:	d1f8      	bne.n	1eb4a <nrf_modem_os_event_notify+0x6>
	return list->head;
   1eb58:	4b07      	ldr	r3, [pc, #28]	; (1eb78 <nrf_modem_os_event_notify+0x34>)
   1eb5a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1eb5c:	b904      	cbnz	r4, 1eb60 <nrf_modem_os_event_notify+0x1c>
}
   1eb5e:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
   1eb60:	69e3      	ldr	r3, [r4, #28]
   1eb62:	42ab      	cmp	r3, r5
   1eb64:	d000      	beq.n	1eb68 <nrf_modem_os_event_notify+0x24>
   1eb66:	b915      	cbnz	r5, 1eb6e <nrf_modem_os_event_notify+0x2a>
	z_impl_k_sem_give(sem);
   1eb68:	1d20      	adds	r0, r4, #4
   1eb6a:	f006 fc9b 	bl	254a4 <z_impl_k_sem_give>
	return node->next;
   1eb6e:	6824      	ldr	r4, [r4, #0]
   1eb70:	e7f4      	b.n	1eb5c <nrf_modem_os_event_notify+0x18>
   1eb72:	bf00      	nop
   1eb74:	2000d30c 	.word	0x2000d30c
   1eb78:	2000d310 	.word	0x2000d310

0001eb7c <nrf_modem_os_alloc>:
{
   1eb7c:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
   1eb7e:	2200      	movs	r2, #0
   1eb80:	2300      	movs	r3, #0
   1eb82:	4801      	ldr	r0, [pc, #4]	; (1eb88 <nrf_modem_os_alloc+0xc>)
   1eb84:	f00c b801 	b.w	2ab8a <k_heap_alloc>
   1eb88:	2000d368 	.word	0x2000d368

0001eb8c <nrf_modem_os_free>:
{
   1eb8c:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
   1eb8e:	4801      	ldr	r0, [pc, #4]	; (1eb94 <nrf_modem_os_free+0x8>)
   1eb90:	f00c b805 	b.w	2ab9e <k_heap_free>
   1eb94:	2000d368 	.word	0x2000d368

0001eb98 <nrf_modem_os_shm_tx_alloc>:
{
   1eb98:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
   1eb9a:	2200      	movs	r2, #0
   1eb9c:	2300      	movs	r3, #0
   1eb9e:	4801      	ldr	r0, [pc, #4]	; (1eba4 <nrf_modem_os_shm_tx_alloc+0xc>)
   1eba0:	f00b bff3 	b.w	2ab8a <k_heap_alloc>
   1eba4:	2000d37c 	.word	0x2000d37c

0001eba8 <nrf_modem_os_shm_tx_free>:
{
   1eba8:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
   1ebaa:	4801      	ldr	r0, [pc, #4]	; (1ebb0 <nrf_modem_os_shm_tx_free+0x8>)
   1ebac:	f00b bff7 	b.w	2ab9e <k_heap_free>
   1ebb0:	2000d37c 	.word	0x2000d37c

0001ebb4 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   1ebb4:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
   1ebb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ebba:	4906      	ldr	r1, [pc, #24]	; (1ebd4 <nrf_modem_os_init+0x20>)
   1ebbc:	4806      	ldr	r0, [pc, #24]	; (1ebd8 <nrf_modem_os_init+0x24>)
   1ebbe:	f00b ff8f 	bl	2aae0 <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
   1ebc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
   1ebc6:	f44f 5202 	mov.w	r2, #8320	; 0x2080
   1ebca:	4904      	ldr	r1, [pc, #16]	; (1ebdc <nrf_modem_os_init+0x28>)
   1ebcc:	4804      	ldr	r0, [pc, #16]	; (1ebe0 <nrf_modem_os_init+0x2c>)
   1ebce:	f00b bf87 	b.w	2aae0 <k_heap_init>
   1ebd2:	bf00      	nop
   1ebd4:	2000db1b 	.word	0x2000db1b
   1ebd8:	2000d368 	.word	0x2000d368
   1ebdc:	200084e8 	.word	0x200084e8
   1ebe0:	2000d37c 	.word	0x2000d37c

0001ebe4 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1ebe4:	2801      	cmp	r0, #1
   1ebe6:	d00e      	beq.n	1ec06 <z_to_nrf_optname+0x22>
   1ebe8:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1ebec:	d113      	bne.n	1ec16 <z_to_nrf_optname+0x32>
	case SOL_TLS:
		switch (z_in_optname) {
   1ebee:	1e4b      	subs	r3, r1, #1
   1ebf0:	2b0d      	cmp	r3, #13
   1ebf2:	d810      	bhi.n	1ec16 <z_to_nrf_optname+0x32>
   1ebf4:	e8df f003 	tbb	[pc, r3]
   1ebf8:	0f626262 	.word	0x0f626262
   1ebfc:	0f0f6262 	.word	0x0f0f6262
   1ec00:	620f0f0f 	.word	0x620f0f0f
   1ec04:	6262      	.short	0x6262
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   1ec06:	2937      	cmp	r1, #55	; 0x37
   1ec08:	dc05      	bgt.n	1ec16 <z_to_nrf_optname+0x32>
   1ec0a:	2913      	cmp	r1, #19
   1ec0c:	dc06      	bgt.n	1ec1c <z_to_nrf_optname+0x38>
   1ec0e:	2902      	cmp	r1, #2
   1ec10:	d054      	beq.n	1ecbc <z_to_nrf_optname+0xd8>
   1ec12:	2904      	cmp	r1, #4
   1ec14:	d052      	beq.n	1ecbc <z_to_nrf_optname+0xd8>
   1ec16:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   1ec1a:	4770      	bx	lr
   1ec1c:	f1a1 0314 	sub.w	r3, r1, #20
   1ec20:	2b23      	cmp	r3, #35	; 0x23
   1ec22:	d8f8      	bhi.n	1ec16 <z_to_nrf_optname+0x32>
   1ec24:	a001      	add	r0, pc, #4	; (adr r0, 1ec2c <z_to_nrf_optname+0x48>)
   1ec26:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1ec2a:	bf00      	nop
   1ec2c:	0001ecbd 	.word	0x0001ecbd
   1ec30:	0001ecbd 	.word	0x0001ecbd
   1ec34:	0001ec17 	.word	0x0001ec17
   1ec38:	0001ec17 	.word	0x0001ec17
   1ec3c:	0001ec17 	.word	0x0001ec17
   1ec40:	0001ecbd 	.word	0x0001ecbd
   1ec44:	0001ec17 	.word	0x0001ec17
   1ec48:	0001ec17 	.word	0x0001ec17
   1ec4c:	0001ec17 	.word	0x0001ec17
   1ec50:	0001ec17 	.word	0x0001ec17
   1ec54:	0001ecbd 	.word	0x0001ecbd
   1ec58:	0001ecbd 	.word	0x0001ecbd
   1ec5c:	0001ecbd 	.word	0x0001ecbd
   1ec60:	0001ec17 	.word	0x0001ec17
   1ec64:	0001ec17 	.word	0x0001ec17
   1ec68:	0001ec17 	.word	0x0001ec17
   1ec6c:	0001ec17 	.word	0x0001ec17
   1ec70:	0001ec17 	.word	0x0001ec17
   1ec74:	0001ec17 	.word	0x0001ec17
   1ec78:	0001ec17 	.word	0x0001ec17
   1ec7c:	0001ec17 	.word	0x0001ec17
   1ec80:	0001ec17 	.word	0x0001ec17
   1ec84:	0001ec17 	.word	0x0001ec17
   1ec88:	0001ec17 	.word	0x0001ec17
   1ec8c:	0001ec17 	.word	0x0001ec17
   1ec90:	0001ec17 	.word	0x0001ec17
   1ec94:	0001ec17 	.word	0x0001ec17
   1ec98:	0001ec17 	.word	0x0001ec17
   1ec9c:	0001ec17 	.word	0x0001ec17
   1eca0:	0001ec17 	.word	0x0001ec17
   1eca4:	0001ecbd 	.word	0x0001ecbd
   1eca8:	0001ecbd 	.word	0x0001ecbd
   1ecac:	0001ecbd 	.word	0x0001ecbd
   1ecb0:	0001ecbd 	.word	0x0001ecbd
   1ecb4:	0001ecbd 	.word	0x0001ecbd
   1ecb8:	0001ecbd 	.word	0x0001ecbd
	int retval = 0;
   1ecbc:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   1ecbe:	6011      	str	r1, [r2, #0]
   1ecc0:	4770      	bx	lr
   1ecc2:	bf00      	nop

0001ecc4 <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   1ecc4:	f04f 32ff 	mov.w	r2, #4294967295
   1ecc8:	4b06      	ldr	r3, [pc, #24]	; (1ece4 <nrf91_nrf_modem_lib_socket_offload_init+0x20>)
	}

	return 0;
}
   1ecca:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   1eccc:	601a      	str	r2, [r3, #0]
   1ecce:	619a      	str	r2, [r3, #24]
   1ecd0:	631a      	str	r2, [r3, #48]	; 0x30
   1ecd2:	649a      	str	r2, [r3, #72]	; 0x48
   1ecd4:	661a      	str	r2, [r3, #96]	; 0x60
   1ecd6:	679a      	str	r2, [r3, #120]	; 0x78
   1ecd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   1ecdc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
   1ece0:	4770      	bx	lr
   1ece2:	bf00      	nop
   1ece4:	2000d394 	.word	0x2000d394

0001ece8 <nrf91_socket_iface_init>:
	struct net_if *iface;
} nrf91_socket_iface_data;

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;
   1ece8:	4b03      	ldr	r3, [pc, #12]	; (1ecf8 <nrf91_socket_iface_init+0x10>)

	iface->if_dev->socket_offload = nrf91_socket_create;
   1ecea:	4a04      	ldr	r2, [pc, #16]	; (1ecfc <nrf91_socket_iface_init+0x14>)
	nrf91_socket_iface_data.iface = iface;
   1ecec:	6018      	str	r0, [r3, #0]
	iface->if_dev->socket_offload = nrf91_socket_create;
   1ecee:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1ecf0:	4803      	ldr	r0, [pc, #12]	; (1ed00 <nrf91_socket_iface_init+0x18>)
	iface->if_dev->socket_offload = nrf91_socket_create;
   1ecf2:	61da      	str	r2, [r3, #28]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1ecf4:	f7fc bf20 	b.w	1bb38 <socket_offload_dns_register>
   1ecf8:	2000d390 	.word	0x2000d390
   1ecfc:	0001f1d1 	.word	0x0001f1d1
   1ed00:	0002c12c 	.word	0x0002c12c

0001ed04 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   1ed04:	490b      	ldr	r1, [pc, #44]	; (1ed34 <nrf91_socket_is_supported+0x30>)
{
   1ed06:	4603      	mov	r3, r0
	if (offload_disabled) {
   1ed08:	7808      	ldrb	r0, [r1, #0]
   1ed0a:	b980      	cbnz	r0, 1ed2e <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   1ed0c:	490a      	ldr	r1, [pc, #40]	; (1ed38 <nrf91_socket_is_supported+0x34>)
   1ed0e:	7809      	ldrb	r1, [r1, #0]
   1ed10:	b139      	cbz	r1, 1ed22 <nrf91_socket_is_supported+0x1e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1ed12:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
   1ed16:	2902      	cmp	r1, #2
   1ed18:	d90a      	bls.n	1ed30 <nrf91_socket_is_supported+0x2c>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   1ed1a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1ed1e:	2a01      	cmp	r2, #1
   1ed20:	d906      	bls.n	1ed30 <nrf91_socket_is_supported+0x2c>
	return (family == AF_PACKET) || (family == AF_INET) || (family == AF_INET6);
   1ed22:	3b01      	subs	r3, #1
   1ed24:	2b02      	cmp	r3, #2
   1ed26:	bf8c      	ite	hi
   1ed28:	2000      	movhi	r0, #0
   1ed2a:	2001      	movls	r0, #1
	return af_is_supported(family);
   1ed2c:	4770      	bx	lr
		return false;
   1ed2e:	2000      	movs	r0, #0
}
   1ed30:	4770      	bx	lr
   1ed32:	bf00      	nop
   1ed34:	2000df9c 	.word	0x2000df9c
   1ed38:	2000df9b 	.word	0x2000df9b

0001ed3c <pollcb>:
{
   1ed3c:	b470      	push	{r4, r5, r6}
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1ed3e:	2300      	movs	r3, #0
   1ed40:	2518      	movs	r5, #24
	ctx = find_ctx(pollfd->fd);
   1ed42:	6801      	ldr	r1, [r0, #0]
		if (offload_ctx[i].nrf_fd == fd) {
   1ed44:	4c08      	ldr	r4, [pc, #32]	; (1ed68 <pollcb+0x2c>)
   1ed46:	fb05 f203 	mul.w	r2, r5, r3
   1ed4a:	58a6      	ldr	r6, [r4, r2]
   1ed4c:	42b1      	cmp	r1, r6
   1ed4e:	d106      	bne.n	1ed5e <pollcb+0x22>
	k_poll_signal_raise(&ctx->poll, pollfd->revents);
   1ed50:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   1ed54:	3208      	adds	r2, #8
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1ed56:	18a0      	adds	r0, r4, r2
}
   1ed58:	bc70      	pop	{r4, r5, r6}
   1ed5a:	f007 bb51 	b.w	26400 <z_impl_k_poll_signal_raise>
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1ed5e:	3301      	adds	r3, #1
   1ed60:	2b08      	cmp	r3, #8
   1ed62:	d1f0      	bne.n	1ed46 <pollcb+0xa>
}
   1ed64:	bc70      	pop	{r4, r5, r6}
   1ed66:	4770      	bx	lr
   1ed68:	2000d394 	.word	0x2000d394

0001ed6c <nrf91_socket_offload_getaddrinfo>:
{
   1ed6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed70:	4614      	mov	r4, r2
   1ed72:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1ed74:	2100      	movs	r1, #0
{
   1ed76:	b08b      	sub	sp, #44	; 0x2c
   1ed78:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1ed7a:	2220      	movs	r2, #32
   1ed7c:	a802      	add	r0, sp, #8
{
   1ed7e:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1ed80:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1ed82:	f00c fbac 	bl	2b4de <memset>
	if (hints != NULL) {
   1ed86:	b15c      	cbz	r4, 1eda0 <nrf91_socket_offload_getaddrinfo+0x34>
	nrf_out->ai_flags = z_in->ai_flags;
   1ed88:	6863      	ldr	r3, [r4, #4]
   1ed8a:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_in->ai_socktype;
   1ed8c:	68e3      	ldr	r3, [r4, #12]
   1ed8e:	9304      	str	r3, [sp, #16]
	nrf_out->ai_family = z_in->ai_family;
   1ed90:	68a3      	ldr	r3, [r4, #8]
   1ed92:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_in->ai_protocol;
   1ed94:	6923      	ldr	r3, [r4, #16]
   1ed96:	9305      	str	r3, [sp, #20]
	if (z_in->ai_canonname != NULL) {
   1ed98:	69e3      	ldr	r3, [r4, #28]
   1ed9a:	b103      	cbz	r3, 1ed9e <nrf91_socket_offload_getaddrinfo+0x32>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1ed9c:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   1ed9e:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   1eda0:	f04f 32ff 	mov.w	r2, #4294967295
   1eda4:	f04f 33ff 	mov.w	r3, #4294967295
   1eda8:	4834      	ldr	r0, [pc, #208]	; (1ee7c <nrf91_socket_offload_getaddrinfo+0x110>)
   1edaa:	f00a fd1d 	bl	297e8 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1edae:	4631      	mov	r1, r6
   1edb0:	4622      	mov	r2, r4
   1edb2:	4628      	mov	r0, r5
   1edb4:	ab01      	add	r3, sp, #4
   1edb6:	f004 fd7d 	bl	238b4 <nrf_getaddrinfo>
	if (retval != 0) {
   1edba:	4606      	mov	r6, r0
   1edbc:	b948      	cbnz	r0, 1edd2 <nrf91_socket_offload_getaddrinfo+0x66>
	struct zsock_addrinfo *latest_z_res = NULL;
   1edbe:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   1edc0:	4681      	mov	r9, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1edc2:	f04f 0a18 	mov.w	sl, #24
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1edc6:	9d01      	ldr	r5, [sp, #4]
	*res = NULL;
   1edc8:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1edca:	b94d      	cbnz	r5, 1ede0 <nrf91_socket_offload_getaddrinfo+0x74>
	nrf_freeaddrinfo(nrf_res);
   1edcc:	9801      	ldr	r0, [sp, #4]
   1edce:	f00b f9ff 	bl	2a1d0 <nrf_freeaddrinfo>
	k_mutex_unlock(&getaddrinfo_lock);
   1edd2:	482a      	ldr	r0, [pc, #168]	; (1ee7c <nrf91_socket_offload_getaddrinfo+0x110>)
   1edd4:	f00a fd0a 	bl	297ec <k_mutex_unlock.isra.0>
}
   1edd8:	4630      	mov	r0, r6
   1edda:	b00b      	add	sp, #44	; 0x2c
   1eddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					k_malloc(sizeof(struct zsock_addrinfo));
   1ede0:	2050      	movs	r0, #80	; 0x50
   1ede2:	f00c fb37 	bl	2b454 <k_malloc>
		if (next_z_res == NULL) {
   1ede6:	4604      	mov	r4, r0
   1ede8:	2800      	cmp	r0, #0
   1edea:	d040      	beq.n	1ee6e <nrf91_socket_offload_getaddrinfo+0x102>
	z_out->ai_next = NULL;
   1edec:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1edf0:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_in->ai_flags;
   1edf4:	682b      	ldr	r3, [r5, #0]
   1edf6:	6043      	str	r3, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1edf8:	68ab      	ldr	r3, [r5, #8]
   1edfa:	60c3      	str	r3, [r0, #12]
	z_out->ai_family = nrf_in->ai_family;
   1edfc:	686b      	ldr	r3, [r5, #4]
   1edfe:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_in->ai_protocol;
   1ee00:	68eb      	ldr	r3, [r5, #12]
   1ee02:	6103      	str	r3, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1ee04:	f8d5 b004 	ldr.w	fp, [r5, #4]
   1ee08:	f1bb 0f01 	cmp.w	fp, #1
   1ee0c:	d114      	bne.n	1ee38 <nrf91_socket_offload_getaddrinfo+0xcc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1ee0e:	2008      	movs	r0, #8
   1ee10:	f00c fb20 	bl	2b454 <k_malloc>
   1ee14:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1ee16:	b338      	cbz	r0, 1ee68 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1ee18:	2308      	movs	r3, #8
   1ee1a:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1ee1c:	696b      	ldr	r3, [r5, #20]
	ptr->sin_port = nrf_in->sin_port;
   1ee1e:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_family = AF_INET;
   1ee20:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_port = nrf_in->sin_port;
   1ee24:	8042      	strh	r2, [r0, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1ee26:	68db      	ldr	r3, [r3, #12]
   1ee28:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   1ee2a:	f1b8 0f00 	cmp.w	r8, #0
   1ee2e:	d121      	bne.n	1ee74 <nrf91_socket_offload_getaddrinfo+0x108>
			*res = next_z_res;
   1ee30:	603c      	str	r4, [r7, #0]
					k_malloc(sizeof(struct zsock_addrinfo));
   1ee32:	46a0      	mov	r8, r4
		next_nrf_res = next_nrf_res->ai_next;
   1ee34:	69ed      	ldr	r5, [r5, #28]
   1ee36:	e7c8      	b.n	1edca <nrf91_socket_offload_getaddrinfo+0x5e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1ee38:	f1bb 0f02 	cmp.w	fp, #2
   1ee3c:	d009      	beq.n	1ee52 <nrf91_socket_offload_getaddrinfo+0xe6>
			k_free(next_z_res);
   1ee3e:	f00c fb02 	bl	2b446 <k_free>
			retval = DNS_EAI_FAMILY;
   1ee42:	f06f 0605 	mvn.w	r6, #5
		nrf91_socket_offload_freeaddrinfo(*res);
   1ee46:	6838      	ldr	r0, [r7, #0]
   1ee48:	f00a fc03 	bl	29652 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1ee4c:	2300      	movs	r3, #0
   1ee4e:	603b      	str	r3, [r7, #0]
   1ee50:	e7bc      	b.n	1edcc <nrf91_socket_offload_getaddrinfo+0x60>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1ee52:	2018      	movs	r0, #24
   1ee54:	f00c fafe 	bl	2b454 <k_malloc>
   1ee58:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1ee5a:	b128      	cbz	r0, 1ee68 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1ee5c:	f8c4 a014 	str.w	sl, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   1ee60:	6969      	ldr	r1, [r5, #20]
   1ee62:	f00a fc03 	bl	2966c <nrf_to_z_ipv6>
		if (err == -ENOMEM) {
   1ee66:	e7e0      	b.n	1ee2a <nrf91_socket_offload_getaddrinfo+0xbe>
			k_free(next_z_res);
   1ee68:	4620      	mov	r0, r4
   1ee6a:	f00c faec 	bl	2b446 <k_free>
					k_malloc(sizeof(struct zsock_addrinfo));
   1ee6e:	f06f 0609 	mvn.w	r6, #9
   1ee72:	e7e8      	b.n	1ee46 <nrf91_socket_offload_getaddrinfo+0xda>
			latest_z_res->ai_next = next_z_res;
   1ee74:	f8c8 4000 	str.w	r4, [r8]
   1ee78:	e7db      	b.n	1ee32 <nrf91_socket_offload_getaddrinfo+0xc6>
   1ee7a:	bf00      	nop
   1ee7c:	2000c880 	.word	0x2000c880

0001ee80 <nrf91_socket_offload_sendmsg>:
{
   1ee80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1ee84:	4607      	mov	r7, r0
   1ee86:	4690      	mov	r8, r2
	if (msg == NULL) {
   1ee88:	460c      	mov	r4, r1
   1ee8a:	b379      	cbz	r1, 1eeec <nrf91_socket_offload_sendmsg+0x6c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1ee8c:	2300      	movs	r3, #0
	ssize_t len = 0;
   1ee8e:	461a      	mov	r2, r3
   1ee90:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1ee92:	4283      	cmp	r3, r0
   1ee94:	d134      	bne.n	1ef00 <nrf91_socket_offload_sendmsg+0x80>
	if (len <= sizeof(buf)) {
   1ee96:	2a80      	cmp	r2, #128	; 0x80
   1ee98:	d871      	bhi.n	1ef7e <nrf91_socket_offload_sendmsg+0xfe>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1ee9a:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   1ee9c:	f04f 32ff 	mov.w	r2, #4294967295
   1eea0:	f04f 33ff 	mov.w	r3, #4294967295
   1eea4:	4838      	ldr	r0, [pc, #224]	; (1ef88 <nrf91_socket_offload_sendmsg+0x108>)
   1eea6:	f00a fc9f 	bl	297e8 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   1eeaa:	46a9      	mov	r9, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1eeac:	4e37      	ldr	r6, [pc, #220]	; (1ef8c <nrf91_socket_offload_sendmsg+0x10c>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   1eeae:	68e3      	ldr	r3, [r4, #12]
   1eeb0:	429d      	cmp	r5, r3
   1eeb2:	d32c      	bcc.n	1ef0e <nrf91_socket_offload_sendmsg+0x8e>
		offset = 0;
   1eeb4:	2600      	movs	r6, #0
		ret = 0;
   1eeb6:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   1eeb8:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1ef8c <nrf91_socket_offload_sendmsg+0x10c>
		while ((offset < len) && (ret >= 0)) {
   1eebc:	45b1      	cmp	r9, r6
   1eebe:	dd11      	ble.n	1eee4 <nrf91_socket_offload_sendmsg+0x64>
   1eec0:	b985      	cbnz	r5, 1eee4 <nrf91_socket_offload_sendmsg+0x64>
			ret = nrf91_socket_offload_sendto(obj,
   1eec2:	6863      	ldr	r3, [r4, #4]
   1eec4:	4638      	mov	r0, r7
   1eec6:	9301      	str	r3, [sp, #4]
   1eec8:	6823      	ldr	r3, [r4, #0]
   1eeca:	eba9 0206 	sub.w	r2, r9, r6
   1eece:	9300      	str	r3, [sp, #0]
   1eed0:	eb0a 0106 	add.w	r1, sl, r6
   1eed4:	4643      	mov	r3, r8
   1eed6:	f00a fbf6 	bl	296c6 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   1eeda:	1e05      	subs	r5, r0, #0
   1eedc:	ddee      	ble.n	1eebc <nrf91_socket_offload_sendmsg+0x3c>
				offset += ret;
   1eede:	442e      	add	r6, r5
		while ((offset < len) && (ret >= 0)) {
   1eee0:	45b1      	cmp	r9, r6
   1eee2:	dcee      	bgt.n	1eec2 <nrf91_socket_offload_sendmsg+0x42>
		k_mutex_unlock(&sendmsg_lock);
   1eee4:	4828      	ldr	r0, [pc, #160]	; (1ef88 <nrf91_socket_offload_sendmsg+0x108>)
   1eee6:	f00a fc81 	bl	297ec <k_mutex_unlock.isra.0>
		return ret;
   1eeea:	e005      	b.n	1eef8 <nrf91_socket_offload_sendmsg+0x78>
		errno = EINVAL;
   1eeec:	f009 fa8f 	bl	2840e <__errno>
   1eef0:	2316      	movs	r3, #22
		return -1;
   1eef2:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   1eef6:	6003      	str	r3, [r0, #0]
}
   1eef8:	4628      	mov	r0, r5
   1eefa:	b002      	add	sp, #8
   1eefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   1ef00:	68a1      	ldr	r1, [r4, #8]
   1ef02:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1ef06:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1ef08:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   1ef0a:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   1ef0c:	e7c1      	b.n	1ee92 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1ef0e:	68a3      	ldr	r3, [r4, #8]
   1ef10:	eb06 0009 	add.w	r0, r6, r9
   1ef14:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
   1ef18:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   1ef1c:	6852      	ldr	r2, [r2, #4]
   1ef1e:	f00c fad1 	bl	2b4c4 <memcpy>
			len += msg->msg_iov[i].iov_len;
   1ef22:	68a3      	ldr	r3, [r4, #8]
   1ef24:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   1ef28:	4453      	add	r3, sl
   1ef2a:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   1ef2c:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   1ef2e:	4499      	add	r9, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   1ef30:	e7bd      	b.n	1eeae <nrf91_socket_offload_sendmsg+0x2e>
		if (msg->msg_iov[i].iov_len == 0) {
   1ef32:	68a3      	ldr	r3, [r4, #8]
   1ef34:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   1ef38:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1ef3c:	685b      	ldr	r3, [r3, #4]
   1ef3e:	b13b      	cbz	r3, 1ef50 <nrf91_socket_offload_sendmsg+0xd0>
		offset = 0;
   1ef40:	f04f 0900 	mov.w	r9, #0
		while (offset < msg->msg_iov[i].iov_len) {
   1ef44:	68a3      	ldr	r3, [r4, #8]
   1ef46:	eb03 020a 	add.w	r2, r3, sl
   1ef4a:	6852      	ldr	r2, [r2, #4]
   1ef4c:	4591      	cmp	r9, r2
   1ef4e:	d304      	bcc.n	1ef5a <nrf91_socket_offload_sendmsg+0xda>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1ef50:	3601      	adds	r6, #1
   1ef52:	68e3      	ldr	r3, [r4, #12]
   1ef54:	429e      	cmp	r6, r3
   1ef56:	d3ec      	bcc.n	1ef32 <nrf91_socket_offload_sendmsg+0xb2>
   1ef58:	e7ce      	b.n	1eef8 <nrf91_socket_offload_sendmsg+0x78>
			ret = nrf91_socket_offload_sendto(obj,
   1ef5a:	f853 100a 	ldr.w	r1, [r3, sl]
   1ef5e:	6863      	ldr	r3, [r4, #4]
   1ef60:	4449      	add	r1, r9
   1ef62:	9301      	str	r3, [sp, #4]
   1ef64:	6823      	ldr	r3, [r4, #0]
   1ef66:	4638      	mov	r0, r7
   1ef68:	9300      	str	r3, [sp, #0]
   1ef6a:	eba2 0209 	sub.w	r2, r2, r9
   1ef6e:	4643      	mov	r3, r8
   1ef70:	f00a fba9 	bl	296c6 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   1ef74:	1e01      	subs	r1, r0, #0
   1ef76:	db05      	blt.n	1ef84 <nrf91_socket_offload_sendmsg+0x104>
			offset += ret;
   1ef78:	4489      	add	r9, r1
			len += ret;
   1ef7a:	440d      	add	r5, r1
   1ef7c:	e7e2      	b.n	1ef44 <nrf91_socket_offload_sendmsg+0xc4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1ef7e:	2600      	movs	r6, #0
	len = 0;
   1ef80:	4635      	mov	r5, r6
   1ef82:	e7e6      	b.n	1ef52 <nrf91_socket_offload_sendmsg+0xd2>
			ret = nrf91_socket_offload_sendto(obj,
   1ef84:	460d      	mov	r5, r1
   1ef86:	e7b7      	b.n	1eef8 <nrf91_socket_offload_sendmsg+0x78>
   1ef88:	2000c8bc 	.word	0x2000c8bc
   1ef8c:	2000df1b 	.word	0x2000df1b

0001ef90 <allocate_ctx>:
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1ef90:	f04f 32ff 	mov.w	r2, #4294967295
   1ef94:	f04f 33ff 	mov.w	r3, #4294967295
{
   1ef98:	b570      	push	{r4, r5, r6, lr}
   1ef9a:	4605      	mov	r5, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1ef9c:	480b      	ldr	r0, [pc, #44]	; (1efcc <allocate_ctx+0x3c>)
   1ef9e:	f00a fc23 	bl	297e8 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1efa2:	2300      	movs	r3, #0
   1efa4:	2018      	movs	r0, #24
		if (offload_ctx[i].nrf_fd == -1) {
   1efa6:	4a0a      	ldr	r2, [pc, #40]	; (1efd0 <allocate_ctx+0x40>)
   1efa8:	fb00 f103 	mul.w	r1, r0, r3
   1efac:	5856      	ldr	r6, [r2, r1]
   1efae:	188c      	adds	r4, r1, r2
   1efb0:	3601      	adds	r6, #1
   1efb2:	d105      	bne.n	1efc0 <allocate_ctx+0x30>
			ctx->nrf_fd = nrf_fd;
   1efb4:	5055      	str	r5, [r2, r1]
	k_mutex_unlock(&ctx_lock);
   1efb6:	4805      	ldr	r0, [pc, #20]	; (1efcc <allocate_ctx+0x3c>)
   1efb8:	f00a fc18 	bl	297ec <k_mutex_unlock.isra.0>
}
   1efbc:	4620      	mov	r0, r4
   1efbe:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1efc0:	3301      	adds	r3, #1
   1efc2:	2b08      	cmp	r3, #8
   1efc4:	d1f0      	bne.n	1efa8 <allocate_ctx+0x18>
	struct nrf_sock_ctx *ctx = NULL;
   1efc6:	2400      	movs	r4, #0
   1efc8:	e7f5      	b.n	1efb6 <allocate_ctx+0x26>
   1efca:	bf00      	nop
   1efcc:	2000c858 	.word	0x2000c858
   1efd0:	2000d394 	.word	0x2000d394

0001efd4 <release_ctx>:
{
   1efd4:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1efd6:	4d09      	ldr	r5, [pc, #36]	; (1effc <release_ctx+0x28>)
{
   1efd8:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1efda:	f04f 32ff 	mov.w	r2, #4294967295
   1efde:	4628      	mov	r0, r5
   1efe0:	f04f 33ff 	mov.w	r3, #4294967295
   1efe4:	f00a fc00 	bl	297e8 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   1efe8:	2300      	movs	r3, #0
   1efea:	f04f 32ff 	mov.w	r2, #4294967295
   1efee:	e9c4 2300 	strd	r2, r3, [r4]
	k_mutex_unlock(&ctx_lock);
   1eff2:	4628      	mov	r0, r5
}
   1eff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   1eff8:	f00a bbf8 	b.w	297ec <k_mutex_unlock.isra.0>
   1effc:	2000c858 	.word	0x2000c858

0001f000 <nrf91_socket_offload_accept>:
{
   1f000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f004:	b08b      	sub	sp, #44	; 0x2c
   1f006:	4607      	mov	r7, r0
   1f008:	460c      	mov	r4, r1
   1f00a:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   1f00c:	f7fb f952 	bl	1a2b4 <z_reserve_fd>
   1f010:	4606      	mov	r6, r0
	if (fd < 0) {
   1f012:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   1f014:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   1f016:	db1e      	blt.n	1f056 <nrf91_socket_offload_accept+0x56>
	if ((addr != NULL) && (addrlen != NULL)) {
   1f018:	b304      	cbz	r4, 1f05c <nrf91_socket_offload_accept+0x5c>
   1f01a:	b315      	cbz	r5, 1f062 <nrf91_socket_offload_accept+0x62>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1f01c:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1f01e:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1f020:	2b08      	cmp	r3, #8
   1f022:	bf14      	ite	ne
   1f024:	2324      	movne	r3, #36	; 0x24
   1f026:	2310      	moveq	r3, #16
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1f028:	f10d 0904 	add.w	r9, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1f02c:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1f02e:	4649      	mov	r1, r9
   1f030:	f00b fa4d 	bl	2a4ce <nrf_accept>
	if (new_sd < 0) {
   1f034:	f1b0 0800 	subs.w	r8, r0, #0
   1f038:	db0a      	blt.n	1f050 <nrf91_socket_offload_accept+0x50>
	ctx = allocate_ctx(new_sd);
   1f03a:	f7ff ffa9 	bl	1ef90 <allocate_ctx>
	if (ctx == NULL) {
   1f03e:	4607      	mov	r7, r0
   1f040:	b990      	cbnz	r0, 1f068 <nrf91_socket_offload_accept+0x68>
		errno = ENOMEM;
   1f042:	f009 f9e4 	bl	2840e <__errno>
   1f046:	230c      	movs	r3, #12
   1f048:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1f04a:	4640      	mov	r0, r8
   1f04c:	f004 fee8 	bl	23e20 <nrf_close>
	z_free_fd(fd);
   1f050:	4630      	mov	r0, r6
   1f052:	f7fb f97d 	bl	1a350 <z_free_fd>
		return -1;
   1f056:	f04f 36ff 	mov.w	r6, #4294967295
   1f05a:	e018      	b.n	1f08e <nrf91_socket_offload_accept+0x8e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1f05c:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1f05e:	46a1      	mov	r9, r4
   1f060:	e7e5      	b.n	1f02e <nrf91_socket_offload_accept+0x2e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1f062:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1f064:	46a9      	mov	r9, r5
   1f066:	e7e2      	b.n	1f02e <nrf91_socket_offload_accept+0x2e>
	if ((addr != NULL) && (addrlen != NULL)) {
   1f068:	b164      	cbz	r4, 1f084 <nrf91_socket_offload_accept+0x84>
   1f06a:	b15d      	cbz	r5, 1f084 <nrf91_socket_offload_accept+0x84>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1f06c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f070:	2b01      	cmp	r3, #1
   1f072:	d110      	bne.n	1f096 <nrf91_socket_offload_accept+0x96>
			*addrlen = sizeof(struct sockaddr_in);
   1f074:	2208      	movs	r2, #8
   1f076:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   1f078:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   1f07c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1f07e:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   1f080:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1f082:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   1f084:	4639      	mov	r1, r7
   1f086:	4630      	mov	r0, r6
   1f088:	4a0d      	ldr	r2, [pc, #52]	; (1f0c0 <nrf91_socket_offload_accept+0xc0>)
   1f08a:	f7fb f949 	bl	1a320 <z_finalize_fd>
}
   1f08e:	4630      	mov	r0, r6
   1f090:	b00b      	add	sp, #44	; 0x2c
   1f092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   1f096:	2b02      	cmp	r3, #2
   1f098:	d106      	bne.n	1f0a8 <nrf91_socket_offload_accept+0xa8>
			*addrlen = sizeof(struct sockaddr_in6);
   1f09a:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1f09c:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   1f09e:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1f0a0:	a901      	add	r1, sp, #4
   1f0a2:	f00a fae3 	bl	2966c <nrf_to_z_ipv6>
   1f0a6:	e7ed      	b.n	1f084 <nrf91_socket_offload_accept+0x84>
			errno = ENOTSUP;
   1f0a8:	f009 f9b1 	bl	2840e <__errno>
   1f0ac:	2386      	movs	r3, #134	; 0x86
   1f0ae:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1f0b0:	4640      	mov	r0, r8
   1f0b2:	f004 feb5 	bl	23e20 <nrf_close>
		release_ctx(ctx);
   1f0b6:	4638      	mov	r0, r7
   1f0b8:	f7ff ff8c 	bl	1efd4 <release_ctx>
   1f0bc:	e7c8      	b.n	1f050 <nrf91_socket_offload_accept+0x50>
   1f0be:	bf00      	nop
   1f0c0:	0002c134 	.word	0x0002c134

0001f0c4 <nrf91_socket_offload_ioctl>:
{
   1f0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (request) {
   1f0c6:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
	int sd = OBJ_TO_SD(obj);
   1f0ca:	6804      	ldr	r4, [r0, #0]
{
   1f0cc:	b087      	sub	sp, #28
	switch (request) {
   1f0ce:	2b03      	cmp	r3, #3
   1f0d0:	d857      	bhi.n	1f182 <nrf91_socket_offload_ioctl+0xbe>
   1f0d2:	e8df f003 	tbb	[pc, r3]
   1f0d6:	4002      	.short	0x4002
   1f0d8:	5377      	.short	0x5377
	struct nrf_modem_pollcb pcb = {
   1f0da:	2701      	movs	r7, #1
		pev_end = va_arg(args, struct k_poll_event *);
   1f0dc:	e9d2 6101 	ldrd	r6, r1, [r2, #4]
		return nrf91_poll_prepare(obj, pfd, pev, pev_end);
   1f0e0:	6813      	ldr	r3, [r2, #0]
	struct nrf_modem_pollcb pcb = {
   1f0e2:	4a3a      	ldr	r2, [pc, #232]	; (1f1cc <nrf91_socket_offload_ioctl+0x108>)
   1f0e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1f0e8:	9204      	str	r2, [sp, #16]
   1f0ea:	f8ad 3014 	strh.w	r3, [sp, #20]
   1f0ee:	f88d 7016 	strb.w	r7, [sp, #22]
	if (*pev == pev_end) {
   1f0f2:	6833      	ldr	r3, [r6, #0]
   1f0f4:	4299      	cmp	r1, r3
   1f0f6:	d104      	bne.n	1f102 <nrf91_socket_offload_ioctl+0x3e>
		errno = ENOMEM;
   1f0f8:	f009 f989 	bl	2840e <__errno>
   1f0fc:	230c      	movs	r3, #12
		errno = EINVAL;
   1f0fe:	6003      	str	r3, [r0, #0]
   1f100:	e014      	b.n	1f12c <nrf91_socket_offload_ioctl+0x68>
	k_poll_signal_init(&ctx->poll);
   1f102:	f100 0508 	add.w	r5, r0, #8
	z_impl_k_poll_signal_init(sig);
   1f106:	4628      	mov	r0, r5
   1f108:	f00c f980 	bl	2b40c <z_impl_k_poll_signal_init>
	k_poll_event_init(*pev, K_POLL_TYPE_SIGNAL, K_POLL_MODE_NOTIFY_ONLY, &ctx->poll);
   1f10c:	462b      	mov	r3, r5
   1f10e:	2200      	movs	r2, #0
   1f110:	4639      	mov	r1, r7
   1f112:	6830      	ldr	r0, [r6, #0]
   1f114:	f00c f95d 	bl	2b3d2 <k_poll_event_init>
	err = nrf_setsockopt(fd, NRF_SOL_SOCKET, NRF_SO_POLLCB, &pcb, sizeof(pcb));
   1f118:	2308      	movs	r3, #8
   1f11a:	4620      	mov	r0, r4
   1f11c:	9300      	str	r3, [sp, #0]
   1f11e:	223c      	movs	r2, #60	; 0x3c
   1f120:	4639      	mov	r1, r7
   1f122:	ab04      	add	r3, sp, #16
   1f124:	f004 ffbc 	bl	240a0 <nrf_setsockopt>
	if (err) {
   1f128:	4604      	mov	r4, r0
   1f12a:	b110      	cbz	r0, 1f132 <nrf91_socket_offload_ioctl+0x6e>
		retval = -1;
   1f12c:	f04f 34ff 	mov.w	r4, #4294967295
		return nrf91_socket_offload_fcntl(sd, request, args);
   1f130:	e00e      	b.n	1f150 <nrf91_socket_offload_ioctl+0x8c>
	(*pev)++;
   1f132:	6833      	ldr	r3, [r6, #0]
   1f134:	3314      	adds	r3, #20
   1f136:	6033      	str	r3, [r6, #0]
	flags = 0;
   1f138:	e9cd 0002 	strd	r0, r0, [sp, #8]
	z_impl_k_poll_signal_check(sig, signaled, result);
   1f13c:	4628      	mov	r0, r5
   1f13e:	aa02      	add	r2, sp, #8
   1f140:	a903      	add	r1, sp, #12
   1f142:	f00c f968 	bl	2b416 <z_impl_k_poll_signal_check>
	if (!signaled) {
   1f146:	9b03      	ldr	r3, [sp, #12]
	return -EALREADY;
   1f148:	2b00      	cmp	r3, #0
   1f14a:	bf18      	it	ne
   1f14c:	f06f 0477 	mvnne.w	r4, #119	; 0x77
}
   1f150:	4620      	mov	r0, r4
   1f152:	b007      	add	sp, #28
   1f154:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pev = va_arg(args, struct k_poll_event **);
   1f156:	e9d2 4200 	ldrd	r4, r2, [r2]
	(*pev)++;
   1f15a:	6813      	ldr	r3, [r2, #0]
   1f15c:	3314      	adds	r3, #20
   1f15e:	6013      	str	r3, [r2, #0]
	signaled = 0;
   1f160:	2300      	movs	r3, #0
	flags = 0;
   1f162:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1f166:	aa03      	add	r2, sp, #12
   1f168:	a904      	add	r1, sp, #16
   1f16a:	3008      	adds	r0, #8
   1f16c:	f00c f953 	bl	2b416 <z_impl_k_poll_signal_check>
	if (!signaled) {
   1f170:	9b04      	ldr	r3, [sp, #16]
   1f172:	b10b      	cbz	r3, 1f178 <nrf91_socket_offload_ioctl+0xb4>
	pfd->revents = flags;
   1f174:	9b03      	ldr	r3, [sp, #12]
   1f176:	80e3      	strh	r3, [r4, #6]
		return nrf91_poll_update(obj, pfd, pev);
   1f178:	2400      	movs	r4, #0
   1f17a:	e7e9      	b.n	1f150 <nrf91_socket_offload_ioctl+0x8c>
		ctx->lock = va_arg(args, struct k_mutex *);
   1f17c:	6813      	ldr	r3, [r2, #0]
   1f17e:	6043      	str	r3, [r0, #4]
		return 0;
   1f180:	e7fa      	b.n	1f178 <nrf91_socket_offload_ioctl+0xb4>
	switch (cmd) {
   1f182:	2903      	cmp	r1, #3
   1f184:	d012      	beq.n	1f1ac <nrf91_socket_offload_ioctl+0xe8>
   1f186:	2904      	cmp	r1, #4
   1f188:	d118      	bne.n	1f1bc <nrf91_socket_offload_ioctl+0xf8>
		flags = va_arg(args, int);
   1f18a:	6815      	ldr	r5, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK) {
   1f18c:	f435 4380 	bics.w	r3, r5, #16384	; 0x4000
   1f190:	d003      	beq.n	1f19a <nrf91_socket_offload_ioctl+0xd6>
			errno = EINVAL;
   1f192:	f009 f93c 	bl	2840e <__errno>
   1f196:	2316      	movs	r3, #22
   1f198:	6003      	str	r3, [r0, #0]
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1f19a:	2104      	movs	r1, #4
   1f19c:	4620      	mov	r0, r4
   1f19e:	f3c5 3280 	ubfx	r2, r5, #14, #1
}
   1f1a2:	b007      	add	sp, #28
   1f1a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1f1a8:	f00b bbd1 	b.w	2a94e <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1f1ac:	4620      	mov	r0, r4
   1f1ae:	2200      	movs	r2, #0
   1f1b0:	f00b fbcd 	bl	2a94e <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1f1b4:	0384      	lsls	r4, r0, #14
   1f1b6:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
   1f1ba:	e7c9      	b.n	1f150 <nrf91_socket_offload_ioctl+0x8c>
		errno = EINVAL;
   1f1bc:	f009 f927 	bl	2840e <__errno>
   1f1c0:	2316      	movs	r3, #22
   1f1c2:	e79c      	b.n	1f0fe <nrf91_socket_offload_ioctl+0x3a>
	switch (request) {
   1f1c4:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1f1c8:	e7c2      	b.n	1f150 <nrf91_socket_offload_ioctl+0x8c>
   1f1ca:	bf00      	nop
   1f1cc:	0001ed3d 	.word	0x0001ed3d

0001f1d0 <nrf91_socket_create>:
{
   1f1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
   1f1d4:	1e0d      	subs	r5, r1, #0
{
   1f1d6:	4607      	mov	r7, r0
   1f1d8:	4690      	mov	r8, r2
	if (type & SOCK_NATIVE) {
   1f1da:	da12      	bge.n	1f202 <nrf91_socket_create+0x32>
	k_sched_lock();
   1f1dc:	f006 fd52 	bl	25c84 <k_sched_lock>
	*offload_lock = true;
   1f1e0:	4e1c      	ldr	r6, [pc, #112]	; (1f254 <nrf91_socket_create+0x84>)
   1f1e2:	2301      	movs	r3, #1
   1f1e4:	7033      	strb	r3, [r6, #0]
	return z_impl_zsock_socket(family, type, proto);
   1f1e6:	4642      	mov	r2, r8
   1f1e8:	4638      	mov	r0, r7
   1f1ea:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
   1f1ee:	f7fc fb67 	bl	1b8c0 <z_impl_zsock_socket>
	*offload_lock = false;
   1f1f2:	2300      	movs	r3, #0
   1f1f4:	7033      	strb	r3, [r6, #0]
   1f1f6:	4604      	mov	r4, r0
	k_sched_unlock();
   1f1f8:	f006 fd58 	bl	25cac <k_sched_unlock>
}
   1f1fc:	4620      	mov	r0, r4
   1f1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   1f202:	006b      	lsls	r3, r5, #1
   1f204:	d503      	bpl.n	1f20e <nrf91_socket_create+0x3e>
	k_sched_lock();
   1f206:	f006 fd3d 	bl	25c84 <k_sched_lock>
	*offload_lock = true;
   1f20a:	4e13      	ldr	r6, [pc, #76]	; (1f258 <nrf91_socket_create+0x88>)
   1f20c:	e7e9      	b.n	1f1e2 <nrf91_socket_create+0x12>
	fd = z_reserve_fd();
   1f20e:	f7fb f851 	bl	1a2b4 <z_reserve_fd>
	if (fd < 0) {
   1f212:	1e04      	subs	r4, r0, #0
   1f214:	db09      	blt.n	1f22a <nrf91_socket_create+0x5a>
	retval = nrf_socket(family, type, proto);
   1f216:	4629      	mov	r1, r5
   1f218:	4642      	mov	r2, r8
   1f21a:	4638      	mov	r0, r7
   1f21c:	f00a ffeb 	bl	2a1f6 <nrf_socket>
	if (sd < 0) {
   1f220:	1e05      	subs	r5, r0, #0
   1f222:	da05      	bge.n	1f230 <nrf91_socket_create+0x60>
		z_free_fd(fd);
   1f224:	4620      	mov	r0, r4
   1f226:	f7fb f893 	bl	1a350 <z_free_fd>
		return -1;
   1f22a:	f04f 34ff 	mov.w	r4, #4294967295
   1f22e:	e7e5      	b.n	1f1fc <nrf91_socket_create+0x2c>
	ctx = allocate_ctx(sd);
   1f230:	f7ff feae 	bl	1ef90 <allocate_ctx>
	if (ctx == NULL) {
   1f234:	4601      	mov	r1, r0
   1f236:	b938      	cbnz	r0, 1f248 <nrf91_socket_create+0x78>
		errno = ENOMEM;
   1f238:	f009 f8e9 	bl	2840e <__errno>
   1f23c:	230c      	movs	r3, #12
   1f23e:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   1f240:	4628      	mov	r0, r5
   1f242:	f004 fded 	bl	23e20 <nrf_close>
		z_free_fd(fd);
   1f246:	e7ed      	b.n	1f224 <nrf91_socket_create+0x54>
	z_finalize_fd(fd, ctx,
   1f248:	4620      	mov	r0, r4
   1f24a:	4a04      	ldr	r2, [pc, #16]	; (1f25c <nrf91_socket_create+0x8c>)
   1f24c:	f7fb f868 	bl	1a320 <z_finalize_fd>
	return fd;
   1f250:	e7d4      	b.n	1f1fc <nrf91_socket_create+0x2c>
   1f252:	bf00      	nop
   1f254:	2000df9c 	.word	0x2000df9c
   1f258:	2000df9b 	.word	0x2000df9b
   1f25c:	0002c134 	.word	0x0002c134

0001f260 <nrf_modem_fault_handler>:

LOG_MODULE_DECLARE(nrf_modem, CONFIG_NRF_MODEM_LIB_LOG_LEVEL);

#if CONFIG_NRF_MODEM_LIB_ON_FAULT_DO_NOTHING
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault_info)
{
   1f260:	b580      	push	{r7, lr}
   1f262:	af00      	add	r7, sp, #0
	LOG_ERR("Modem error: 0x%x, PC: 0x%x", fault_info->reason, fault_info->program_counter);
   1f264:	b088      	sub	sp, #32
   1f266:	466a      	mov	r2, sp
   1f268:	e9d0 1300 	ldrd	r1, r3, [r0]
   1f26c:	61d3      	str	r3, [r2, #28]
   1f26e:	2304      	movs	r3, #4
   1f270:	4806      	ldr	r0, [pc, #24]	; (1f28c <nrf_modem_fault_handler+0x2c>)
   1f272:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1f276:	f842 3f10 	str.w	r3, [r2, #16]!
   1f27a:	2300      	movs	r3, #0
   1f27c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f280:	4803      	ldr	r0, [pc, #12]	; (1f290 <nrf_modem_fault_handler+0x30>)
   1f282:	f7fc f859 	bl	1b338 <z_impl_z_log_msg_static_create>
}
   1f286:	46bd      	mov	sp, r7
   1f288:	bd80      	pop	{r7, pc}
   1f28a:	bf00      	nop
   1f28c:	0002d746 	.word	0x0002d746
   1f290:	0002be60 	.word	0x0002be60

0001f294 <get_buttons.part.0>:
	}

	return err;
}

static uint32_t get_buttons(void)
   1f294:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   1f296:	4b07      	ldr	r3, [pc, #28]	; (1f2b4 <get_buttons.part.0+0x20>)
   1f298:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f29c:	9305      	str	r3, [sp, #20]
   1f29e:	2302      	movs	r3, #2
   1f2a0:	4805      	ldr	r0, [pc, #20]	; (1f2b8 <get_buttons.part.0+0x24>)
   1f2a2:	aa04      	add	r2, sp, #16
   1f2a4:	9304      	str	r3, [sp, #16]
   1f2a6:	f00a fb46 	bl	29936 <z_log_msg_static_create.constprop.0>
			ret |= 1U << i;
		}
	}

	return ret;
}
   1f2aa:	2000      	movs	r0, #0
   1f2ac:	b007      	add	sp, #28
   1f2ae:	f85d fb04 	ldr.w	pc, [sp], #4
   1f2b2:	bf00      	nop
   1f2b4:	0002d762 	.word	0x0002d762
   1f2b8:	0002bda8 	.word	0x0002bda8

0001f2bc <get_buttons>:
{
   1f2bc:	b513      	push	{r0, r1, r4, lr}
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_port_get(const struct device *port,
				gpio_port_value_t *value)
{
	const struct gpio_driver_data *const data =
   1f2be:	480c      	ldr	r0, [pc, #48]	; (1f2f0 <get_buttons+0x34>)
   1f2c0:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
   1f2c2:	6883      	ldr	r3, [r0, #8]
   1f2c4:	a901      	add	r1, sp, #4
   1f2c6:	685b      	ldr	r3, [r3, #4]
   1f2c8:	4798      	blx	r3
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
   1f2ca:	2800      	cmp	r0, #0
   1f2cc:	d005      	beq.n	1f2da <get_buttons+0x1e>
		if (val < 0) {
   1f2ce:	da09      	bge.n	1f2e4 <get_buttons+0x28>
}
   1f2d0:	b002      	add	sp, #8
   1f2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f2d6:	f7ff bfdd 	b.w	1f294 <get_buttons.part.0>
		*value ^= data->invert;
   1f2da:	6823      	ldr	r3, [r4, #0]
   1f2dc:	9801      	ldr	r0, [sp, #4]
   1f2de:	4058      	eors	r0, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1f2e0:	f3c0 6080 	ubfx	r0, r0, #26, #1
   1f2e4:	3800      	subs	r0, #0
   1f2e6:	bf18      	it	ne
   1f2e8:	2001      	movne	r0, #1
   1f2ea:	b002      	add	sp, #8
   1f2ec:	bd10      	pop	{r4, pc}
   1f2ee:	bf00      	nop
   1f2f0:	0002ba80 	.word	0x0002ba80

0001f2f4 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1f2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f2f8:	4607      	mov	r7, r0
   1f2fa:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1f2fc:	2500      	movs	r5, #0
   1f2fe:	4e14      	ldr	r6, [pc, #80]	; (1f350 <dk_set_leds_state.part.0+0x5c>)
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1f300:	b086      	sub	sp, #24
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1f302:	fa27 f205 	lsr.w	r2, r7, r5
   1f306:	f012 0201 	ands.w	r2, r2, #1
   1f30a:	d117      	bne.n	1f33c <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1f30c:	fa28 f305 	lsr.w	r3, r8, r5
   1f310:	07db      	lsls	r3, r3, #31
   1f312:	d515      	bpl.n	1f340 <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1f314:	7931      	ldrb	r1, [r6, #4]
   1f316:	6830      	ldr	r0, [r6, #0]
   1f318:	f00a fafd 	bl	29916 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1f31c:	4604      	mov	r4, r0
   1f31e:	b178      	cbz	r0, 1f340 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   1f320:	4b0c      	ldr	r3, [pc, #48]	; (1f354 <dk_set_leds_state.part.0+0x60>)
   1f322:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f326:	9305      	str	r3, [sp, #20]
   1f328:	2302      	movs	r3, #2
   1f32a:	480b      	ldr	r0, [pc, #44]	; (1f358 <dk_set_leds_state.part.0+0x64>)
   1f32c:	aa04      	add	r2, sp, #16
   1f32e:	9304      	str	r3, [sp, #16]
   1f330:	f00a fb01 	bl	29936 <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   1f334:	4620      	mov	r0, r4
   1f336:	b006      	add	sp, #24
   1f338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1f33c:	2201      	movs	r2, #1
   1f33e:	e7e9      	b.n	1f314 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1f340:	3501      	adds	r5, #1
   1f342:	2d06      	cmp	r5, #6
   1f344:	f106 0608 	add.w	r6, r6, #8
   1f348:	d1db      	bne.n	1f302 <dk_set_leds_state.part.0+0xe>
	return 0;
   1f34a:	2400      	movs	r4, #0
   1f34c:	e7f2      	b.n	1f334 <dk_set_leds_state.part.0+0x40>
   1f34e:	bf00      	nop
   1f350:	0002c174 	.word	0x0002c174
   1f354:	0002d777 	.word	0x0002d777
   1f358:	0002bda8 	.word	0x0002bda8

0001f35c <button_pressed>:
{
   1f35c:	b510      	push	{r4, lr}
   1f35e:	b086      	sub	sp, #24
	__asm__ volatile(
   1f360:	f04f 0320 	mov.w	r3, #32
   1f364:	f3ef 8411 	mrs	r4, BASEPRI
   1f368:	f383 8812 	msr	BASEPRI_MAX, r3
   1f36c:	f3bf 8f6f 	isb	sy
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1f370:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1f374:	211a      	movs	r1, #26
   1f376:	480f      	ldr	r0, [pc, #60]	; (1f3b4 <button_pressed+0x58>)
   1f378:	f00a faa4 	bl	298c4 <z_impl_gpio_pin_interrupt_configure>
	if (err) {
   1f37c:	b148      	cbz	r0, 1f392 <button_pressed+0x36>
		LOG_ERR("Cannot disable callbacks");
   1f37e:	4b0e      	ldr	r3, [pc, #56]	; (1f3b8 <button_pressed+0x5c>)
   1f380:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f384:	9305      	str	r3, [sp, #20]
   1f386:	2302      	movs	r3, #2
   1f388:	480c      	ldr	r0, [pc, #48]	; (1f3bc <button_pressed+0x60>)
   1f38a:	aa04      	add	r2, sp, #16
   1f38c:	9304      	str	r3, [sp, #16]
   1f38e:	f00a fad2 	bl	29936 <z_log_msg_static_create.constprop.0>
	switch (state) {
   1f392:	4b0b      	ldr	r3, [pc, #44]	; (1f3c0 <button_pressed+0x64>)
   1f394:	781a      	ldrb	r2, [r3, #0]
   1f396:	b932      	cbnz	r2, 1f3a6 <button_pressed+0x4a>
		state = STATE_SCANNING;
   1f398:	2201      	movs	r2, #1
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1f39a:	480a      	ldr	r0, [pc, #40]	; (1f3c4 <button_pressed+0x68>)
		state = STATE_SCANNING;
   1f39c:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1f39e:	2221      	movs	r2, #33	; 0x21
   1f3a0:	2300      	movs	r3, #0
   1f3a2:	f006 fa5f 	bl	25864 <k_work_reschedule>
	__asm__ volatile(
   1f3a6:	f384 8811 	msr	BASEPRI, r4
   1f3aa:	f3bf 8f6f 	isb	sy
}
   1f3ae:	b006      	add	sp, #24
   1f3b0:	bd10      	pop	{r4, pc}
   1f3b2:	bf00      	nop
   1f3b4:	0002ba80 	.word	0x0002ba80
   1f3b8:	0002d78d 	.word	0x0002d78d
   1f3bc:	0002bda8 	.word	0x0002bda8
   1f3c0:	2000df9d 	.word	0x2000df9d
   1f3c4:	2000ce40 	.word	0x2000ce40

0001f3c8 <buttons_scan_fn>:
{
   1f3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3ca:	b087      	sub	sp, #28
	button_scan = get_buttons();
   1f3cc:	f7ff ff76 	bl	1f2bc <get_buttons>
   1f3d0:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f3d2:	4b30      	ldr	r3, [pc, #192]	; (1f494 <buttons_scan_fn+0xcc>)
   1f3d4:	e8d3 2fef 	ldaex	r2, [r3]
   1f3d8:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1f3dc:	2900      	cmp	r1, #0
   1f3de:	d1f9      	bne.n	1f3d4 <buttons_scan_fn+0xc>
	if (!initial_run) {
   1f3e0:	4b2d      	ldr	r3, [pc, #180]	; (1f498 <buttons_scan_fn+0xd0>)
   1f3e2:	4f2e      	ldr	r7, [pc, #184]	; (1f49c <buttons_scan_fn+0xd4>)
   1f3e4:	781a      	ldrb	r2, [r3, #0]
   1f3e6:	bb3a      	cbnz	r2, 1f438 <buttons_scan_fn+0x70>
		if (button_scan != last_button_scan) {
   1f3e8:	683e      	ldr	r6, [r7, #0]
   1f3ea:	42a6      	cmp	r6, r4
   1f3ec:	d019      	beq.n	1f422 <buttons_scan_fn+0x5a>
	if (button_handler_cb != NULL) {
   1f3ee:	4b2c      	ldr	r3, [pc, #176]	; (1f4a0 <buttons_scan_fn+0xd8>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   1f3f0:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   1f3f2:	681b      	ldr	r3, [r3, #0]
   1f3f4:	b10b      	cbz	r3, 1f3fa <buttons_scan_fn+0x32>
		button_handler_cb(button_state, has_changed);
   1f3f6:	4631      	mov	r1, r6
   1f3f8:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1f3fa:	f04f 33ff 	mov.w	r3, #4294967295
   1f3fe:	f04f 32ff 	mov.w	r2, #4294967295
   1f402:	4828      	ldr	r0, [pc, #160]	; (1f4a4 <buttons_scan_fn+0xdc>)
   1f404:	f005 ff64 	bl	252d0 <z_impl_k_mutex_lock>
	return list->head;
   1f408:	4b27      	ldr	r3, [pc, #156]	; (1f4a8 <buttons_scan_fn+0xe0>)
   1f40a:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1f40c:	b135      	cbz	r5, 1f41c <buttons_scan_fn+0x54>
   1f40e:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   1f410:	682b      	ldr	r3, [r5, #0]
   1f412:	4631      	mov	r1, r6
   1f414:	4620      	mov	r0, r4
   1f416:	4798      	blx	r3
	return node->next;
   1f418:	686d      	ldr	r5, [r5, #4]
   1f41a:	e7f7      	b.n	1f40c <buttons_scan_fn+0x44>
	return z_impl_k_mutex_unlock(mutex);
   1f41c:	4821      	ldr	r0, [pc, #132]	; (1f4a4 <buttons_scan_fn+0xdc>)
   1f41e:	f005 ffd1 	bl	253c4 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1f422:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   1f424:	b15c      	cbz	r4, 1f43e <buttons_scan_fn+0x76>
		k_work_reschedule(&buttons_scan,
   1f426:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1f42a:	2300      	movs	r3, #0
   1f42c:	481f      	ldr	r0, [pc, #124]	; (1f4ac <buttons_scan_fn+0xe4>)
}
   1f42e:	b007      	add	sp, #28
   1f430:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		k_work_reschedule(&buttons_scan,
   1f434:	f006 ba16 	b.w	25864 <k_work_reschedule>
		initial_run = false;
   1f438:	2200      	movs	r2, #0
   1f43a:	701a      	strb	r2, [r3, #0]
   1f43c:	e7f1      	b.n	1f422 <buttons_scan_fn+0x5a>
	__asm__ volatile(
   1f43e:	f04f 0320 	mov.w	r3, #32
   1f442:	f3ef 8511 	mrs	r5, BASEPRI
   1f446:	f383 8812 	msr	BASEPRI_MAX, r3
   1f44a:	f3bf 8f6f 	isb	sy
		switch (state) {
   1f44e:	4b18      	ldr	r3, [pc, #96]	; (1f4b0 <buttons_scan_fn+0xe8>)
   1f450:	781a      	ldrb	r2, [r3, #0]
   1f452:	2a01      	cmp	r2, #1
   1f454:	d005      	beq.n	1f462 <buttons_scan_fn+0x9a>
	__asm__ volatile(
   1f456:	f385 8811 	msr	BASEPRI, r5
   1f45a:	f3bf 8f6f 	isb	sy
}
   1f45e:	b007      	add	sp, #28
   1f460:	bdf0      	pop	{r4, r5, r6, r7, pc}
			state = STATE_WAITING;
   1f462:	701c      	strb	r4, [r3, #0]
   1f464:	f04f 6298 	mov.w	r2, #79691776	; 0x4c00000
   1f468:	211a      	movs	r1, #26
   1f46a:	4812      	ldr	r0, [pc, #72]	; (1f4b4 <buttons_scan_fn+0xec>)
   1f46c:	f00a fa2a 	bl	298c4 <z_impl_gpio_pin_interrupt_configure>
   1f470:	f385 8811 	msr	BASEPRI, r5
   1f474:	f3bf 8f6f 	isb	sy
		if (err) {
   1f478:	2800      	cmp	r0, #0
   1f47a:	d0f0      	beq.n	1f45e <buttons_scan_fn+0x96>
			LOG_ERR("Cannot enable callbacks");
   1f47c:	4b0e      	ldr	r3, [pc, #56]	; (1f4b8 <buttons_scan_fn+0xf0>)
   1f47e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f482:	9305      	str	r3, [sp, #20]
   1f484:	2302      	movs	r3, #2
   1f486:	480d      	ldr	r0, [pc, #52]	; (1f4bc <buttons_scan_fn+0xf4>)
   1f488:	aa04      	add	r2, sp, #16
   1f48a:	9304      	str	r3, [sp, #16]
   1f48c:	f00a fa53 	bl	29936 <z_log_msg_static_create.constprop.0>
}
   1f490:	e7e5      	b.n	1f45e <buttons_scan_fn+0x96>
   1f492:	bf00      	nop
   1f494:	2000d484 	.word	0x2000d484
   1f498:	2000c770 	.word	0x2000c770
   1f49c:	2000d458 	.word	0x2000d458
   1f4a0:	2000d488 	.word	0x2000d488
   1f4a4:	2000d45c 	.word	0x2000d45c
   1f4a8:	2000d470 	.word	0x2000d470
   1f4ac:	2000ce40 	.word	0x2000ce40
   1f4b0:	2000df9d 	.word	0x2000df9d
   1f4b4:	0002ba80 	.word	0x0002ba80
   1f4b8:	0002d7a6 	.word	0x0002d7a6
   1f4bc:	0002bda8 	.word	0x0002bda8

0001f4c0 <dk_leds_init>:
{
   1f4c0:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1f4c2:	2500      	movs	r5, #0
   1f4c4:	4e10      	ldr	r6, [pc, #64]	; (1f508 <dk_leds_init+0x48>)
{
   1f4c6:	b086      	sub	sp, #24
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
   1f4c8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1f4cc:	4630      	mov	r0, r6
   1f4ce:	f00a fa0d 	bl	298ec <gpio_pin_configure_dt>
		if (err) {
   1f4d2:	4604      	mov	r4, r0
   1f4d4:	b950      	cbnz	r0, 1f4ec <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1f4d6:	3501      	adds	r5, #1
   1f4d8:	2d06      	cmp	r5, #6
   1f4da:	f106 0608 	add.w	r6, r6, #8
   1f4de:	d1f3      	bne.n	1f4c8 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1f4e0:	210f      	movs	r1, #15
}
   1f4e2:	b006      	add	sp, #24
   1f4e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f4e8:	f7ff bf04 	b.w	1f2f4 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1f4ec:	4b07      	ldr	r3, [pc, #28]	; (1f50c <dk_leds_init+0x4c>)
   1f4ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f4f2:	9305      	str	r3, [sp, #20]
   1f4f4:	2302      	movs	r3, #2
   1f4f6:	4806      	ldr	r0, [pc, #24]	; (1f510 <dk_leds_init+0x50>)
   1f4f8:	aa04      	add	r2, sp, #16
   1f4fa:	9304      	str	r3, [sp, #16]
   1f4fc:	f00a fa1b 	bl	29936 <z_log_msg_static_create.constprop.0>
}
   1f500:	4620      	mov	r0, r4
   1f502:	b006      	add	sp, #24
   1f504:	bd70      	pop	{r4, r5, r6, pc}
   1f506:	bf00      	nop
   1f508:	0002c174 	.word	0x0002c174
   1f50c:	0002d7be 	.word	0x0002d7be
   1f510:	0002bda8 	.word	0x0002bda8

0001f514 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f514:	4b05      	ldr	r3, [pc, #20]	; (1f52c <dk_read_buttons+0x18>)
   1f516:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   1f51a:	b100      	cbz	r0, 1f51e <dk_read_buttons+0xa>
		*button_state = current_state;
   1f51c:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   1f51e:	4804      	ldr	r0, [pc, #16]	; (1f530 <dk_read_buttons+0x1c>)
   1f520:	b111      	cbz	r1, 1f528 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   1f522:	6802      	ldr	r2, [r0, #0]
   1f524:	405a      	eors	r2, r3
   1f526:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   1f528:	6003      	str	r3, [r0, #0]
}
   1f52a:	4770      	bx	lr
   1f52c:	2000d484 	.word	0x2000d484
   1f530:	2000d454 	.word	0x2000d454

0001f534 <dk_buttons_init>:
{
   1f534:	b530      	push	{r4, r5, lr}
	button_handler_cb = button_handler;
   1f536:	4b28      	ldr	r3, [pc, #160]	; (1f5d8 <dk_buttons_init+0xa4>)
{
   1f538:	b087      	sub	sp, #28
	button_handler_cb = button_handler;
   1f53a:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   1f53c:	4827      	ldr	r0, [pc, #156]	; (1f5dc <dk_buttons_init+0xa8>)
   1f53e:	f00b fb67 	bl	2ac10 <z_impl_k_mutex_init>
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   1f542:	4927      	ldr	r1, [pc, #156]	; (1f5e0 <dk_buttons_init+0xac>)
   1f544:	4827      	ldr	r0, [pc, #156]	; (1f5e4 <dk_buttons_init+0xb0>)
   1f546:	f00a f9d1 	bl	298ec <gpio_pin_configure_dt>
		if (err) {
   1f54a:	4604      	mov	r4, r0
   1f54c:	b160      	cbz	r0, 1f568 <dk_buttons_init+0x34>
			LOG_ERR("Cannot configure button gpio");
   1f54e:	4b26      	ldr	r3, [pc, #152]	; (1f5e8 <dk_buttons_init+0xb4>)
			LOG_ERR("Cannot disable callbacks()");
   1f550:	9305      	str	r3, [sp, #20]
   1f552:	2302      	movs	r3, #2
   1f554:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f558:	4824      	ldr	r0, [pc, #144]	; (1f5ec <dk_buttons_init+0xb8>)
   1f55a:	aa04      	add	r2, sp, #16
   1f55c:	9304      	str	r3, [sp, #16]
   1f55e:	f00a f9ea 	bl	29936 <z_log_msg_static_create.constprop.0>
}
   1f562:	4620      	mov	r0, r4
   1f564:	b007      	add	sp, #28
   1f566:	bd30      	pop	{r4, r5, pc}
   1f568:	4d21      	ldr	r5, [pc, #132]	; (1f5f0 <dk_buttons_init+0xbc>)
   1f56a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1f56e:	211a      	movs	r1, #26
   1f570:	4628      	mov	r0, r5
   1f572:	f00a f9a7 	bl	298c4 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   1f576:	4604      	mov	r4, r0
   1f578:	b108      	cbz	r0, 1f57e <dk_buttons_init+0x4a>
			LOG_ERR("Cannot disable callbacks()");
   1f57a:	4b1e      	ldr	r3, [pc, #120]	; (1f5f4 <dk_buttons_init+0xc0>)
   1f57c:	e7e8      	b.n	1f550 <dk_buttons_init+0x1c>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1f57e:	491e      	ldr	r1, [pc, #120]	; (1f5f8 <dk_buttons_init+0xc4>)
   1f580:	4b1e      	ldr	r3, [pc, #120]	; (1f5fc <dk_buttons_init+0xc8>)
   1f582:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   1f584:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1f588:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1f58a:	68ab      	ldr	r3, [r5, #8]
   1f58c:	69db      	ldr	r3, [r3, #28]
   1f58e:	b1f3      	cbz	r3, 1f5ce <dk_buttons_init+0x9a>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1f590:	2201      	movs	r2, #1
   1f592:	4628      	mov	r0, r5
   1f594:	4798      	blx	r3
		if (err) {
   1f596:	4604      	mov	r4, r0
   1f598:	b9d8      	cbnz	r0, 1f5d2 <dk_buttons_init+0x9e>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   1f59a:	4919      	ldr	r1, [pc, #100]	; (1f600 <dk_buttons_init+0xcc>)
   1f59c:	4819      	ldr	r0, [pc, #100]	; (1f604 <dk_buttons_init+0xd0>)
   1f59e:	f00b fc2f 	bl	2ae00 <k_work_init_delayable>
	state = STATE_SCANNING;
   1f5a2:	2201      	movs	r2, #1
   1f5a4:	4b18      	ldr	r3, [pc, #96]	; (1f608 <dk_buttons_init+0xd4>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1f5a6:	4817      	ldr	r0, [pc, #92]	; (1f604 <dk_buttons_init+0xd0>)
	state = STATE_SCANNING;
   1f5a8:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1f5aa:	2300      	movs	r3, #0
   1f5ac:	2200      	movs	r2, #0
   1f5ae:	f006 f925 	bl	257fc <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   1f5b2:	4621      	mov	r1, r4
   1f5b4:	4620      	mov	r0, r4
   1f5b6:	f7ff ffad 	bl	1f514 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   1f5ba:	f7ff fe7f 	bl	1f2bc <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f5be:	4b13      	ldr	r3, [pc, #76]	; (1f60c <dk_buttons_init+0xd8>)
   1f5c0:	e8d3 2fef 	ldaex	r2, [r3]
   1f5c4:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1f5c8:	2900      	cmp	r1, #0
   1f5ca:	d0ca      	beq.n	1f562 <dk_buttons_init+0x2e>
   1f5cc:	e7f8      	b.n	1f5c0 <dk_buttons_init+0x8c>
		return -ENOTSUP;
   1f5ce:	f06f 0485 	mvn.w	r4, #133	; 0x85
			LOG_ERR("Cannot add callback");
   1f5d2:	4b0f      	ldr	r3, [pc, #60]	; (1f610 <dk_buttons_init+0xdc>)
   1f5d4:	e7bc      	b.n	1f550 <dk_buttons_init+0x1c>
   1f5d6:	bf00      	nop
   1f5d8:	2000d488 	.word	0x2000d488
   1f5dc:	2000d45c 	.word	0x2000d45c
   1f5e0:	00010010 	.word	0x00010010
   1f5e4:	0002c1a4 	.word	0x0002c1a4
   1f5e8:	0002d7d8 	.word	0x0002d7d8
   1f5ec:	0002bda8 	.word	0x0002bda8
   1f5f0:	0002ba80 	.word	0x0002ba80
   1f5f4:	0002d7f5 	.word	0x0002d7f5
   1f5f8:	2000d478 	.word	0x2000d478
   1f5fc:	0001f35d 	.word	0x0001f35d
   1f600:	0001f3c9 	.word	0x0001f3c9
   1f604:	2000ce40 	.word	0x2000ce40
   1f608:	2000df9d 	.word	0x2000df9d
   1f60c:	2000d484 	.word	0x2000d484
   1f610:	0002d810 	.word	0x0002d810

0001f614 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1f614:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1f616:	2805      	cmp	r0, #5
{
   1f618:	460a      	mov	r2, r1
   1f61a:	b086      	sub	sp, #24
	if (led_idx >= ARRAY_SIZE(leds)) {
   1f61c:	d90e      	bls.n	1f63c <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   1f61e:	4b12      	ldr	r3, [pc, #72]	; (1f668 <dk_set_led+0x54>)
		return -EINVAL;
   1f620:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   1f624:	9305      	str	r3, [sp, #20]
   1f626:	2302      	movs	r3, #2
   1f628:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f62c:	480f      	ldr	r0, [pc, #60]	; (1f66c <dk_set_led+0x58>)
   1f62e:	aa04      	add	r2, sp, #16
   1f630:	9304      	str	r3, [sp, #16]
   1f632:	f00a f980 	bl	29936 <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1f636:	4620      	mov	r0, r4
   1f638:	b006      	add	sp, #24
   1f63a:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1f63c:	4b0c      	ldr	r3, [pc, #48]	; (1f670 <dk_set_led+0x5c>)
   1f63e:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1f642:	7909      	ldrb	r1, [r1, #4]
   1f644:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1f648:	f00a f965 	bl	29916 <gpio_pin_set>
	if (err) {
   1f64c:	4604      	mov	r4, r0
   1f64e:	2800      	cmp	r0, #0
   1f650:	d0f1      	beq.n	1f636 <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   1f652:	4b08      	ldr	r3, [pc, #32]	; (1f674 <dk_set_led+0x60>)
   1f654:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f658:	9305      	str	r3, [sp, #20]
   1f65a:	2302      	movs	r3, #2
   1f65c:	4803      	ldr	r0, [pc, #12]	; (1f66c <dk_set_led+0x58>)
   1f65e:	aa04      	add	r2, sp, #16
   1f660:	9304      	str	r3, [sp, #16]
   1f662:	f00a f968 	bl	29936 <z_log_msg_static_create.constprop.0>
   1f666:	e7e6      	b.n	1f636 <dk_set_led+0x22>
   1f668:	0002d824 	.word	0x0002d824
   1f66c:	0002bda8 	.word	0x0002bda8
   1f670:	0002c174 	.word	0x0002c174
   1f674:	0002d777 	.word	0x0002d777

0001f678 <at_monitor_dispatch>:
/* Dispatch AT notifications immediately, or schedules a workqueue task to do that.
 * Keep this function public so that it can be called by tests.
 * This function is called from an ISR.
 */
void at_monitor_dispatch(const char *notif)
{
   1f678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f67c:	4604      	mov	r4, r0
	struct at_notif_fifo *at_notif;
	size_t sz_needed;

	__ASSERT_NO_MSG(notif != NULL);

	monitored = false;
   1f67e:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f680:	4d24      	ldr	r5, [pc, #144]	; (1f714 <at_monitor_dispatch+0x9c>)
   1f682:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1f718 <at_monitor_dispatch+0xa0>
{
   1f686:	af00      	add	r7, sp, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f688:	4545      	cmp	r5, r8
   1f68a:	d321      	bcc.n	1f6d0 <at_monitor_dispatch+0x58>
				monitored = true;
			}
		}
	}

	if (!monitored) {
   1f68c:	b1ee      	cbz	r6, 1f6ca <at_monitor_dispatch+0x52>
		/* Only copy monitored notifications to save heap */
		return;
	}

	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   1f68e:	4620      	mov	r0, r4
   1f690:	f7f9 fcac 	bl	18fec <strlen>

	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   1f694:	2200      	movs	r2, #0
   1f696:	1d41      	adds	r1, r0, #5
   1f698:	2300      	movs	r3, #0
   1f69a:	4820      	ldr	r0, [pc, #128]	; (1f71c <at_monitor_dispatch+0xa4>)
   1f69c:	f00b fa75 	bl	2ab8a <k_heap_alloc>
	if (!at_notif) {
   1f6a0:	4605      	mov	r5, r0
   1f6a2:	bb50      	cbnz	r0, 1f6fa <at_monitor_dispatch+0x82>
		LOG_WRN("No heap space for incoming notification: %s",
   1f6a4:	466e      	mov	r6, sp
   1f6a6:	b088      	sub	sp, #32
   1f6a8:	466a      	mov	r2, sp
   1f6aa:	4b1d      	ldr	r3, [pc, #116]	; (1f720 <at_monitor_dispatch+0xa8>)
   1f6ac:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f6b0:	f44f 7300 	mov.w	r3, #512	; 0x200
   1f6b4:	8393      	strh	r3, [r2, #28]
   1f6b6:	4b1b      	ldr	r3, [pc, #108]	; (1f724 <at_monitor_dispatch+0xac>)
   1f6b8:	f842 3f10 	str.w	r3, [r2, #16]!
   1f6bc:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1f6c0:	4603      	mov	r3, r0
   1f6c2:	4819      	ldr	r0, [pc, #100]	; (1f728 <at_monitor_dispatch+0xb0>)
   1f6c4:	f7fb fe38 	bl	1b338 <z_impl_z_log_msg_static_create>
   1f6c8:	46b5      	mov	sp, r6

	strcpy(at_notif->data, notif);

	k_fifo_put(&at_monitor_fifo, at_notif);
	k_work_submit(&at_monitor_work);
}
   1f6ca:	46bd      	mov	sp, r7
   1f6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return mon->flags.paused;
   1f6d0:	7a2b      	ldrb	r3, [r5, #8]
		if (!is_paused(e) && has_match(e, notif)) {
   1f6d2:	07da      	lsls	r2, r3, #31
   1f6d4:	d405      	bmi.n	1f6e2 <at_monitor_dispatch+0x6a>
   1f6d6:	6829      	ldr	r1, [r5, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1f6d8:	b929      	cbnz	r1, 1f6e6 <at_monitor_dispatch+0x6e>
	return mon->flags.direct;
   1f6da:	7a2b      	ldrb	r3, [r5, #8]
			if (is_direct(e)) {
   1f6dc:	079b      	lsls	r3, r3, #30
   1f6de:	d408      	bmi.n	1f6f2 <at_monitor_dispatch+0x7a>
				monitored = true;
   1f6e0:	2601      	movs	r6, #1
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f6e2:	350c      	adds	r5, #12
   1f6e4:	e7d0      	b.n	1f688 <at_monitor_dispatch+0x10>
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1f6e6:	4620      	mov	r0, r4
   1f6e8:	f00b ff49 	bl	2b57e <strstr>
   1f6ec:	2800      	cmp	r0, #0
   1f6ee:	d1f4      	bne.n	1f6da <at_monitor_dispatch+0x62>
   1f6f0:	e7f7      	b.n	1f6e2 <at_monitor_dispatch+0x6a>
				e->handler(notif);
   1f6f2:	4620      	mov	r0, r4
   1f6f4:	686b      	ldr	r3, [r5, #4]
   1f6f6:	4798      	blx	r3
   1f6f8:	e7f3      	b.n	1f6e2 <at_monitor_dispatch+0x6a>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1f6fa:	4621      	mov	r1, r4
   1f6fc:	3004      	adds	r0, #4
   1f6fe:	f00b ff05 	bl	2b50c <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   1f702:	4629      	mov	r1, r5
   1f704:	4809      	ldr	r0, [pc, #36]	; (1f72c <at_monitor_dispatch+0xb4>)
   1f706:	f00b fafc 	bl	2ad02 <k_queue_append>
	k_work_submit(&at_monitor_work);
   1f70a:	4809      	ldr	r0, [pc, #36]	; (1f730 <at_monitor_dispatch+0xb8>)
   1f70c:	f006 f80e 	bl	2572c <k_work_submit>
   1f710:	e7db      	b.n	1f6ca <at_monitor_dispatch+0x52>
   1f712:	bf00      	nop
   1f714:	2000c774 	.word	0x2000c774
   1f718:	2000c7c8 	.word	0x2000c7c8
   1f71c:	2000c830 	.word	0x2000c830
   1f720:	0002d853 	.word	0x0002d853
   1f724:	01000003 	.word	0x01000003
   1f728:	0002bd88 	.word	0x0002bd88
   1f72c:	2000c914 	.word	0x2000c914
   1f730:	2000c65c 	.word	0x2000c65c

0001f734 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   1f734:	b598      	push	{r3, r4, r7, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1f736:	480c      	ldr	r0, [pc, #48]	; (1f768 <at_monitor_sys_init+0x34>)
{
   1f738:	af00      	add	r7, sp, #0
	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1f73a:	f005 f81d 	bl	24778 <nrf_modem_at_notif_handler_set>
	if (err) {
   1f73e:	b178      	cbz	r0, 1f760 <at_monitor_sys_init+0x2c>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   1f740:	466c      	mov	r4, sp
   1f742:	b088      	sub	sp, #32
   1f744:	466a      	mov	r2, sp
   1f746:	4b09      	ldr	r3, [pc, #36]	; (1f76c <at_monitor_sys_init+0x38>)
   1f748:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f74c:	2303      	movs	r3, #3
   1f74e:	f842 3f10 	str.w	r3, [r2, #16]!
   1f752:	2300      	movs	r3, #0
   1f754:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f758:	4805      	ldr	r0, [pc, #20]	; (1f770 <at_monitor_sys_init+0x3c>)
   1f75a:	f7fb fded 	bl	1b338 <z_impl_z_log_msg_static_create>
   1f75e:	46a5      	mov	sp, r4
	}

	return 0;
}
   1f760:	2000      	movs	r0, #0
   1f762:	46bd      	mov	sp, r7
   1f764:	bd98      	pop	{r3, r4, r7, pc}
   1f766:	bf00      	nop
   1f768:	0001f679 	.word	0x0001f679
   1f76c:	0002d87f 	.word	0x0002d87f
   1f770:	0002bd88 	.word	0x0002bd88

0001f774 <at_monitor_task>:
{
   1f774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   1f778:	4e14      	ldr	r6, [pc, #80]	; (1f7cc <at_monitor_task+0x58>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f77a:	4f15      	ldr	r7, [pc, #84]	; (1f7d0 <at_monitor_task+0x5c>)
		k_heap_free(&at_monitor_heap, at_notif);
   1f77c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1f7d4 <at_monitor_task+0x60>
   1f780:	2200      	movs	r2, #0
   1f782:	2300      	movs	r3, #0
   1f784:	4630      	mov	r0, r6
   1f786:	f005 fe59 	bl	2543c <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   1f78a:	4605      	mov	r5, r0
   1f78c:	b9c8      	cbnz	r0, 1f7c2 <at_monitor_task+0x4e>
}
   1f78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
   1f792:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   1f794:	07da      	lsls	r2, r3, #31
   1f796:	d406      	bmi.n	1f7a6 <at_monitor_task+0x32>
   1f798:	079b      	lsls	r3, r3, #30
   1f79a:	d404      	bmi.n	1f7a6 <at_monitor_task+0x32>
   1f79c:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1f79e:	b951      	cbnz	r1, 1f7b6 <at_monitor_task+0x42>
				e->handler(at_notif->data);
   1f7a0:	4648      	mov	r0, r9
   1f7a2:	6863      	ldr	r3, [r4, #4]
   1f7a4:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f7a6:	340c      	adds	r4, #12
   1f7a8:	42bc      	cmp	r4, r7
   1f7aa:	d3f2      	bcc.n	1f792 <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
   1f7ac:	4629      	mov	r1, r5
   1f7ae:	4640      	mov	r0, r8
   1f7b0:	f00b f9f5 	bl	2ab9e <k_heap_free>
   1f7b4:	e7e4      	b.n	1f780 <at_monitor_task+0xc>
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1f7b6:	4648      	mov	r0, r9
   1f7b8:	f00b fee1 	bl	2b57e <strstr>
   1f7bc:	2800      	cmp	r0, #0
   1f7be:	d1ef      	bne.n	1f7a0 <at_monitor_task+0x2c>
   1f7c0:	e7f1      	b.n	1f7a6 <at_monitor_task+0x32>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f7c2:	4c05      	ldr	r4, [pc, #20]	; (1f7d8 <at_monitor_task+0x64>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   1f7c4:	f105 0904 	add.w	r9, r5, #4
   1f7c8:	e7ee      	b.n	1f7a8 <at_monitor_task+0x34>
   1f7ca:	bf00      	nop
   1f7cc:	2000c914 	.word	0x2000c914
   1f7d0:	2000c7c8 	.word	0x2000c7c8
   1f7d4:	2000c830 	.word	0x2000c830
   1f7d8:	2000c774 	.word	0x2000c774

0001f7dc <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   1f7dc:	4b09      	ldr	r3, [pc, #36]	; (1f804 <is_valid_notification_char+0x28>)
   1f7de:	5c1b      	ldrb	r3, [r3, r0]
   1f7e0:	f003 0303 	and.w	r3, r3, #3
   1f7e4:	2b02      	cmp	r3, #2
   1f7e6:	bf08      	it	eq
   1f7e8:	3820      	subeq	r0, #32
   1f7ea:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
   1f7ec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1f7f0:	2b19      	cmp	r3, #25
   1f7f2:	d904      	bls.n	1f7fe <is_valid_notification_char+0x22>
   1f7f4:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   1f7f8:	4258      	negs	r0, r3
   1f7fa:	4158      	adcs	r0, r3
   1f7fc:	4770      	bx	lr
		return true;
   1f7fe:	2001      	movs	r0, #1
	}

	return false;
}
   1f800:	4770      	bx	lr
   1f802:	bf00      	nop
   1f804:	0002ec21 	.word	0x0002ec21

0001f808 <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1f808:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
   1f80c:	b2db      	uxtb	r3, r3
   1f80e:	2b11      	cmp	r3, #17
   1f810:	bf9d      	ittte	ls
   1f812:	4803      	ldrls	r0, [pc, #12]	; (1f820 <is_separator+0x18>)
   1f814:	40d8      	lsrls	r0, r3
   1f816:	f000 0001 	andls.w	r0, r0, #1
{
   1f81a:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
   1f81c:	4770      	bx	lr
   1f81e:	bf00      	nop
   1f820:	00024001 	.word	0x00024001

0001f824 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   1f824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f826:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1f828:	2400      	movs	r4, #0
   1f82a:	4e09      	ldr	r6, [pc, #36]	; (1f850 <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   1f82c:	f856 7b04 	ldr.w	r7, [r6], #4
   1f830:	4638      	mov	r0, r7
   1f832:	f7f9 fbdb 	bl	18fec <strlen>
   1f836:	4639      	mov	r1, r7
   1f838:	4602      	mov	r2, r0
   1f83a:	4628      	mov	r0, r5
   1f83c:	f00b fe6e 	bl	2b51c <strncmp>
		if (!diff) {
   1f840:	b120      	cbz	r0, 1f84c <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1f842:	3401      	adds	r4, #1
   1f844:	2c04      	cmp	r4, #4
   1f846:	d1f1      	bne.n	1f82c <is_result+0x8>
			return true;
		}
	}

	return false;
   1f848:	2000      	movs	r0, #0
}
   1f84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
   1f84c:	2001      	movs	r0, #1
   1f84e:	e7fc      	b.n	1f84a <is_result+0x26>
   1f850:	0002c1ac 	.word	0x0002c1ac

0001f854 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   1f854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   1f858:	6804      	ldr	r4, [r0, #0]
{
   1f85a:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f85c:	7823      	ldrb	r3, [r4, #0]
   1f85e:	4680      	mov	r8, r0
   1f860:	460e      	mov	r6, r1
   1f862:	4615      	mov	r5, r2
	const char *tmpstr = *str;
   1f864:	9400      	str	r4, [sp, #0]
   1f866:	2b00      	cmp	r3, #0
   1f868:	f000 80cd 	beq.w	1fa06 <at_parse_process_element+0x1b2>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1f86c:	4b67      	ldr	r3, [pc, #412]	; (1fa0c <at_parse_process_element+0x1b8>)
   1f86e:	781b      	ldrb	r3, [r3, #0]
   1f870:	2b06      	cmp	r3, #6
   1f872:	d113      	bne.n	1f89c <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
   1f874:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
   1f876:	1c62      	adds	r2, r4, #1
   1f878:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
   1f87a:	4611      	mov	r1, r2
   1f87c:	4607      	mov	r7, r0
   1f87e:	f812 0b01 	ldrb.w	r0, [r2], #1
   1f882:	f7ff ffab 	bl	1f7dc <is_valid_notification_char>
   1f886:	2800      	cmp	r0, #0
   1f888:	d1f7      	bne.n	1f87a <at_parse_process_element+0x26>
   1f88a:	b107      	cbz	r7, 1f88e <at_parse_process_element+0x3a>
   1f88c:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1f88e:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1f890:	4622      	mov	r2, r4
   1f892:	4631      	mov	r1, r6
   1f894:	4628      	mov	r0, r5
   1f896:	f00a f8f5 	bl	29a84 <at_params_string_put>
   1f89a:	e046      	b.n	1f92a <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
   1f89c:	3b01      	subs	r3, #1
   1f89e:	2b08      	cmp	r3, #8
   1f8a0:	d843      	bhi.n	1f92a <at_parse_process_element+0xd6>
   1f8a2:	e8df f003 	tbb	[pc, r3]
   1f8a6:	4964      	.short	0x4964
   1f8a8:	420da05a 	.word	0x420da05a
   1f8ac:	3f1c      	.short	0x3f1c
   1f8ae:	05          	.byte	0x05
   1f8af:	00          	.byte	0x00
   1f8b0:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
   1f8b2:	2100      	movs	r1, #0
   1f8b4:	4613      	mov	r3, r2
   1f8b6:	f812 0b01 	ldrb.w	r0, [r2], #1
   1f8ba:	b160      	cbz	r0, 1f8d6 <at_parse_process_element+0x82>
   1f8bc:	2101      	movs	r1, #1
   1f8be:	e7f9      	b.n	1f8b4 <at_parse_process_element+0x60>
   1f8c0:	4622      	mov	r2, r4
   1f8c2:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
   1f8c4:	4f52      	ldr	r7, [pc, #328]	; (1fa10 <at_parse_process_element+0x1bc>)
   1f8c6:	4613      	mov	r3, r2
   1f8c8:	f812 0b01 	ldrb.w	r0, [r2], #1
   1f8cc:	5c38      	ldrb	r0, [r7, r0]
   1f8ce:	f010 0f44 	tst.w	r0, #68	; 0x44
   1f8d2:	f040 8096 	bne.w	1fa02 <at_parse_process_element+0x1ae>
   1f8d6:	b101      	cbz	r1, 1f8da <at_parse_process_element+0x86>
   1f8d8:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1f8da:	1b1b      	subs	r3, r3, r4
   1f8dc:	e7d8      	b.n	1f890 <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
   1f8de:	4668      	mov	r0, sp
   1f8e0:	f00a f847 	bl	29972 <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
   1f8e4:	2200      	movs	r2, #0
   1f8e6:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   1f8e8:	4849      	ldr	r0, [pc, #292]	; (1fa10 <at_parse_process_element+0x1bc>)
   1f8ea:	461f      	mov	r7, r3
   1f8ec:	f813 1b01 	ldrb.w	r1, [r3], #1
   1f8f0:	5c41      	ldrb	r1, [r0, r1]
   1f8f2:	0749      	lsls	r1, r1, #29
   1f8f4:	d110      	bne.n	1f918 <at_parse_process_element+0xc4>
   1f8f6:	b102      	cbz	r2, 1f8fa <at_parse_process_element+0xa6>
   1f8f8:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1f8fa:	1b3b      	subs	r3, r7, r4
   1f8fc:	4622      	mov	r2, r4
   1f8fe:	4631      	mov	r1, r6
   1f900:	4628      	mov	r0, r5
   1f902:	f00a f8bf 	bl	29a84 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1f906:	783b      	ldrb	r3, [r7, #0]
   1f908:	2b3d      	cmp	r3, #61	; 0x3d
   1f90a:	d107      	bne.n	1f91c <at_parse_process_element+0xc8>
   1f90c:	787b      	ldrb	r3, [r7, #1]
   1f90e:	2b3f      	cmp	r3, #63	; 0x3f
   1f910:	d10b      	bne.n	1f92a <at_parse_process_element+0xd6>
			tmpstr += 2;
   1f912:	3702      	adds	r7, #2
		tmpstr++;
   1f914:	9700      	str	r7, [sp, #0]
   1f916:	e008      	b.n	1f92a <at_parse_process_element+0xd6>
   1f918:	2201      	movs	r2, #1
   1f91a:	e7e6      	b.n	1f8ea <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1f91c:	2b3f      	cmp	r3, #63	; 0x3f
   1f91e:	d104      	bne.n	1f92a <at_parse_process_element+0xd6>
			tmpstr++;
   1f920:	3701      	adds	r7, #1
   1f922:	e7f7      	b.n	1f914 <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
   1f924:	4628      	mov	r0, r5
   1f926:	f00a f883 	bl	29a30 <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1f92a:	2000      	movs	r0, #0
	*str = tmpstr;
   1f92c:	9b00      	ldr	r3, [sp, #0]
   1f92e:	f8c8 3000 	str.w	r3, [r8]
}
   1f932:	b023      	add	sp, #140	; 0x8c
   1f934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
   1f938:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1f93a:	783a      	ldrb	r2, [r7, #0]
   1f93c:	4610      	mov	r0, r2
   1f93e:	f00a f80f 	bl	29960 <is_lfcr>
   1f942:	463b      	mov	r3, r7
			tmpstr++;
   1f944:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1f946:	b908      	cbnz	r0, 1f94c <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f948:	2a00      	cmp	r2, #0
   1f94a:	d1f6      	bne.n	1f93a <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
   1f94c:	4622      	mov	r2, r4
   1f94e:	4631      	mov	r1, r6
   1f950:	4628      	mov	r0, r5
   1f952:	1b1b      	subs	r3, r3, r4
   1f954:	f00a f896 	bl	29a84 <at_params_string_put>
   1f958:	e7dc      	b.n	1f914 <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
   1f95a:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   1f95c:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   1f95e:	463b      	mov	r3, r7
   1f960:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
   1f962:	f107 0701 	add.w	r7, r7, #1
   1f966:	d0f1      	beq.n	1f94c <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f968:	2a00      	cmp	r2, #0
   1f96a:	d1f7      	bne.n	1f95c <at_parse_process_element+0x108>
   1f96c:	e7ee      	b.n	1f94c <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1f96e:	4620      	mov	r0, r4
   1f970:	220a      	movs	r2, #10
   1f972:	a901      	add	r1, sp, #4
   1f974:	f007 f832 	bl	269dc <strtoul>
   1f978:	2401      	movs	r4, #1
		tmpstr = next;
   1f97a:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1f97c:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1f97e:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   1f980:	9b00      	ldr	r3, [sp, #0]
   1f982:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   1f984:	2829      	cmp	r0, #41	; 0x29
   1f986:	d023      	beq.n	1f9d0 <at_parse_process_element+0x17c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f988:	b310      	cbz	r0, 1f9d0 <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1f98a:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
   1f98e:	f7ff ff3b 	bl	1f808 <is_separator>
				tmparray[i++] =
   1f992:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
   1f996:	b908      	cbnz	r0, 1f99c <at_parse_process_element+0x148>
					tmpstr = next;
   1f998:	4627      	mov	r7, r4
   1f99a:	e017      	b.n	1f9cc <at_parse_process_element+0x178>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1f99c:	220a      	movs	r2, #10
   1f99e:	a901      	add	r1, sp, #4
   1f9a0:	4648      	mov	r0, r9
   1f9a2:	f007 f81b 	bl	269dc <strtoul>
				tmparray[i++] =
   1f9a6:	ab22      	add	r3, sp, #136	; 0x88
   1f9a8:	1c67      	adds	r7, r4, #1
   1f9aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1f9ae:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1f9b2:	4648      	mov	r0, r9
   1f9b4:	f7f9 fb1a 	bl	18fec <strlen>
   1f9b8:	4604      	mov	r4, r0
   1f9ba:	9801      	ldr	r0, [sp, #4]
   1f9bc:	f7f9 fb16 	bl	18fec <strlen>
   1f9c0:	4284      	cmp	r4, r0
   1f9c2:	d006      	beq.n	1f9d2 <at_parse_process_element+0x17e>
					tmpstr = next;
   1f9c4:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1f9c6:	2f20      	cmp	r7, #32
					tmpstr = next;
   1f9c8:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1f9ca:	d002      	beq.n	1f9d2 <at_parse_process_element+0x17e>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1f9cc:	463c      	mov	r4, r7
   1f9ce:	e7d7      	b.n	1f980 <at_parse_process_element+0x12c>
   1f9d0:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   1f9d2:	00bb      	lsls	r3, r7, #2
   1f9d4:	4631      	mov	r1, r6
   1f9d6:	4628      	mov	r0, r5
   1f9d8:	aa02      	add	r2, sp, #8
   1f9da:	f00a f876 	bl	29aca <at_params_array_put>
		tmpstr++;
   1f9de:	9b00      	ldr	r3, [sp, #0]
   1f9e0:	3301      	adds	r3, #1
   1f9e2:	9300      	str	r3, [sp, #0]
   1f9e4:	e7a1      	b.n	1f92a <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1f9e6:	220a      	movs	r2, #10
   1f9e8:	4620      	mov	r0, r4
   1f9ea:	a902      	add	r1, sp, #8
   1f9ec:	f006 ff7a 	bl	268e4 <strtoll>
   1f9f0:	460b      	mov	r3, r1
		tmpstr = next;
   1f9f2:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1f9f4:	4602      	mov	r2, r0
		tmpstr = next;
   1f9f6:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   1f9f8:	4628      	mov	r0, r5
   1f9fa:	4631      	mov	r1, r6
   1f9fc:	f00a f82d 	bl	29a5a <at_params_int_put>
   1fa00:	e793      	b.n	1f92a <at_parse_process_element+0xd6>
   1fa02:	2101      	movs	r1, #1
   1fa04:	e75f      	b.n	1f8c6 <at_parse_process_element+0x72>
		return -1;
   1fa06:	f04f 30ff 	mov.w	r0, #4294967295
   1fa0a:	e792      	b.n	1f932 <at_parse_process_element+0xde>
   1fa0c:	2000df9f 	.word	0x2000df9f
   1fa10:	0002ec21 	.word	0x0002ec21

0001fa14 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1fa14:	b510      	push	{r4, lr}
   1fa16:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1fa18:	f7f9 fae8 	bl	18fec <strlen>
   1fa1c:	2801      	cmp	r0, #1
   1fa1e:	d921      	bls.n	1fa64 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   1fa20:	7823      	ldrb	r3, [r4, #0]
   1fa22:	4912      	ldr	r1, [pc, #72]	; (1fa6c <is_command+0x58>)
   1fa24:	5cca      	ldrb	r2, [r1, r3]
   1fa26:	f002 0203 	and.w	r2, r2, #3
   1fa2a:	2a02      	cmp	r2, #2
   1fa2c:	bf08      	it	eq
   1fa2e:	3b20      	subeq	r3, #32
   1fa30:	2b41      	cmp	r3, #65	; 0x41
   1fa32:	d117      	bne.n	1fa64 <is_command+0x50>
   1fa34:	7863      	ldrb	r3, [r4, #1]
   1fa36:	5cca      	ldrb	r2, [r1, r3]
   1fa38:	f002 0203 	and.w	r2, r2, #3
   1fa3c:	2a02      	cmp	r2, #2
   1fa3e:	bf08      	it	eq
   1fa40:	3b20      	subeq	r3, #32
   1fa42:	2b54      	cmp	r3, #84	; 0x54
   1fa44:	d10e      	bne.n	1fa64 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1fa46:	78a2      	ldrb	r2, [r4, #2]
   1fa48:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1fa4c:	2b23      	cmp	r3, #35	; 0x23
   1fa4e:	d00b      	beq.n	1fa68 <is_command+0x54>
   1fa50:	2a25      	cmp	r2, #37	; 0x25
   1fa52:	d009      	beq.n	1fa68 <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1fa54:	4610      	mov	r0, r2
   1fa56:	f009 ff83 	bl	29960 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1fa5a:	b910      	cbnz	r0, 1fa62 <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1fa5c:	fab2 f082 	clz	r0, r2
   1fa60:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1fa62:	bd10      	pop	{r4, pc}
		return false;
   1fa64:	2000      	movs	r0, #0
   1fa66:	e7fc      	b.n	1fa62 <is_command+0x4e>
		return true;
   1fa68:	2001      	movs	r0, #1
   1fa6a:	e7fa      	b.n	1fa62 <is_command+0x4e>
   1fa6c:	0002ec21 	.word	0x0002ec21

0001fa70 <at_parse_detect_type>:
{
   1fa70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa74:	4606      	mov	r6, r0
	const char *tmpstr = *str;
   1fa76:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1fa78:	f8df 818c 	ldr.w	r8, [pc, #396]	; 1fc08 <at_parse_detect_type+0x198>
   1fa7c:	2900      	cmp	r1, #0
   1fa7e:	d13d      	bne.n	1fafc <at_parse_detect_type+0x8c>
   1fa80:	7820      	ldrb	r0, [r4, #0]
   1fa82:	f009 ff61 	bl	29948 <is_notification>
   1fa86:	4f61      	ldr	r7, [pc, #388]	; (1fc0c <at_parse_detect_type+0x19c>)
   1fa88:	4605      	mov	r5, r0
   1fa8a:	b360      	cbz	r0, 1fae6 <at_parse_detect_type+0x76>
	state = new_state;
   1fa8c:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1fa8e:	2205      	movs	r2, #5
   1fa90:	4620      	mov	r0, r4
   1fa92:	495f      	ldr	r1, [pc, #380]	; (1fc10 <at_parse_detect_type+0x1a0>)
	state = new_state;
   1fa94:	703b      	strb	r3, [r7, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1fa96:	f00b fd41 	bl	2b51c <strncmp>
   1fa9a:	b1f8      	cbz	r0, 1fadc <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1fa9c:	2205      	movs	r2, #5
   1fa9e:	4620      	mov	r0, r4
   1faa0:	495c      	ldr	r1, [pc, #368]	; (1fc14 <at_parse_detect_type+0x1a4>)
   1faa2:	f00b fd3b 	bl	2b51c <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1faa6:	b1c8      	cbz	r0, 1fadc <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1faa8:	220b      	movs	r2, #11
   1faaa:	4620      	mov	r0, r4
   1faac:	495a      	ldr	r1, [pc, #360]	; (1fc18 <at_parse_detect_type+0x1a8>)
   1faae:	f00b fd35 	bl	2b51c <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1fab2:	b198      	cbz	r0, 1fadc <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1fab4:	220a      	movs	r2, #10
   1fab6:	4620      	mov	r0, r4
   1fab8:	4958      	ldr	r1, [pc, #352]	; (1fc1c <at_parse_detect_type+0x1ac>)
   1faba:	f00b fd2f 	bl	2b51c <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1fabe:	b168      	cbz	r0, 1fadc <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1fac0:	220b      	movs	r2, #11
   1fac2:	4620      	mov	r0, r4
   1fac4:	4956      	ldr	r1, [pc, #344]	; (1fc20 <at_parse_detect_type+0x1b0>)
   1fac6:	f00b fd29 	bl	2b51c <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1faca:	b138      	cbz	r0, 1fadc <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   1facc:	2207      	movs	r2, #7
   1face:	4620      	mov	r0, r4
   1fad0:	4954      	ldr	r1, [pc, #336]	; (1fc24 <at_parse_detect_type+0x1b4>)
   1fad2:	f00b fd23 	bl	2b51c <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1fad6:	fab0 f580 	clz	r5, r0
   1fada:	096d      	lsrs	r5, r5, #5
		set_type_string = check_response_for_forced_string(tmpstr);
   1fadc:	f888 5000 	strb.w	r5, [r8]
	return 0;
   1fae0:	2000      	movs	r0, #0
	*str = tmpstr;
   1fae2:	6034      	str	r4, [r6, #0]
	return 0;
   1fae4:	e04c      	b.n	1fb80 <at_parse_detect_type+0x110>
	} else if (set_type_string) {
   1fae6:	f898 3000 	ldrb.w	r3, [r8]
   1faea:	b953      	cbnz	r3, 1fb02 <at_parse_detect_type+0x92>
	} else if ((index == 0) && is_command(tmpstr)) {
   1faec:	4620      	mov	r0, r4
   1faee:	f7ff ff91 	bl	1fa14 <is_command>
   1faf2:	2800      	cmp	r0, #0
   1faf4:	d04e      	beq.n	1fb94 <at_parse_detect_type+0x124>
	state = new_state;
   1faf6:	2307      	movs	r3, #7
   1faf8:	703b      	strb	r3, [r7, #0]
}
   1fafa:	e7f1      	b.n	1fae0 <at_parse_detect_type+0x70>
	} else if (set_type_string) {
   1fafc:	f898 3000 	ldrb.w	r3, [r8]
   1fb00:	b11b      	cbz	r3, 1fb0a <at_parse_detect_type+0x9a>
	state = new_state;
   1fb02:	2202      	movs	r2, #2
   1fb04:	4b41      	ldr	r3, [pc, #260]	; (1fc0c <at_parse_detect_type+0x19c>)
   1fb06:	701a      	strb	r2, [r3, #0]
}
   1fb08:	e7ea      	b.n	1fae0 <at_parse_detect_type+0x70>
	} else if ((index > 0) && is_clac(tmpstr)) {
   1fb0a:	2900      	cmp	r1, #0
   1fb0c:	dd44      	ble.n	1fb98 <at_parse_detect_type+0x128>
   1fb0e:	4622      	mov	r2, r4
   1fb10:	4615      	mov	r5, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   1fb12:	f812 0b01 	ldrb.w	r0, [r2], #1
   1fb16:	f009 ff23 	bl	29960 <is_lfcr>
   1fb1a:	2800      	cmp	r0, #0
   1fb1c:	d1f8      	bne.n	1fb10 <at_parse_detect_type+0xa0>
		str++;
	}

	if (strlen(str) < 4) {
   1fb1e:	4628      	mov	r0, r5
   1fb20:	f7f9 fa64 	bl	18fec <strlen>
   1fb24:	2803      	cmp	r0, #3
   1fb26:	d92d      	bls.n	1fb84 <at_parse_detect_type+0x114>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1fb28:	782b      	ldrb	r3, [r5, #0]
   1fb2a:	4a3f      	ldr	r2, [pc, #252]	; (1fc28 <at_parse_detect_type+0x1b8>)
   1fb2c:	5cd1      	ldrb	r1, [r2, r3]
   1fb2e:	f001 0103 	and.w	r1, r1, #3
   1fb32:	2902      	cmp	r1, #2
   1fb34:	bf08      	it	eq
   1fb36:	3b20      	subeq	r3, #32
   1fb38:	2b41      	cmp	r3, #65	; 0x41
   1fb3a:	d123      	bne.n	1fb84 <at_parse_detect_type+0x114>
   1fb3c:	786b      	ldrb	r3, [r5, #1]
   1fb3e:	5cd1      	ldrb	r1, [r2, r3]
   1fb40:	f001 0103 	and.w	r1, r1, #3
   1fb44:	2902      	cmp	r1, #2
   1fb46:	bf08      	it	eq
   1fb48:	3b20      	subeq	r3, #32
   1fb4a:	2b54      	cmp	r3, #84	; 0x54
   1fb4c:	d11a      	bne.n	1fb84 <at_parse_detect_type+0x114>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   1fb4e:	78ab      	ldrb	r3, [r5, #2]
   1fb50:	5cd1      	ldrb	r1, [r2, r3]
   1fb52:	f001 0103 	and.w	r1, r1, #3
   1fb56:	2902      	cmp	r1, #2
   1fb58:	bf08      	it	eq
   1fb5a:	3b20      	subeq	r3, #32
   1fb5c:	2b2b      	cmp	r3, #43	; 0x2b
   1fb5e:	d00a      	beq.n	1fb76 <at_parse_detect_type+0x106>
   1fb60:	2b25      	cmp	r3, #37	; 0x25
   1fb62:	d10f      	bne.n	1fb84 <at_parse_detect_type+0x114>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   1fb64:	78eb      	ldrb	r3, [r5, #3]
   1fb66:	5cd2      	ldrb	r2, [r2, r3]
   1fb68:	f002 0203 	and.w	r2, r2, #3
   1fb6c:	2a02      	cmp	r2, #2
   1fb6e:	bf08      	it	eq
   1fb70:	3b20      	subeq	r3, #32
   1fb72:	2b58      	cmp	r3, #88	; 0x58
   1fb74:	d006      	beq.n	1fb84 <at_parse_detect_type+0x114>
	state = new_state;
   1fb76:	2209      	movs	r2, #9
		return -2;
   1fb78:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   1fb7c:	4b23      	ldr	r3, [pc, #140]	; (1fc0c <at_parse_detect_type+0x19c>)
   1fb7e:	701a      	strb	r2, [r3, #0]
}
   1fb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1fb84:	7820      	ldrb	r0, [r4, #0]
   1fb86:	f009 fedf 	bl	29948 <is_notification>
   1fb8a:	b128      	cbz	r0, 1fb98 <at_parse_detect_type+0x128>
		return -1;
   1fb8c:	f04f 30ff 	mov.w	r0, #4294967295
		*str = tmpstr;
   1fb90:	6034      	str	r4, [r6, #0]
   1fb92:	e7f5      	b.n	1fb80 <at_parse_detect_type+0x110>
	state = new_state;
   1fb94:	2302      	movs	r3, #2
   1fb96:	e7af      	b.n	1faf8 <at_parse_detect_type+0x88>
	} else if (is_number(*tmpstr)) {
   1fb98:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   1fb9a:	4b23      	ldr	r3, [pc, #140]	; (1fc28 <at_parse_detect_type+0x1b8>)
   1fb9c:	5c9b      	ldrb	r3, [r3, r2]
   1fb9e:	075b      	lsls	r3, r3, #29
   1fba0:	d40a      	bmi.n	1fbb8 <at_parse_detect_type+0x148>
   1fba2:	2a2d      	cmp	r2, #45	; 0x2d
   1fba4:	d008      	beq.n	1fbb8 <at_parse_detect_type+0x148>
   1fba6:	2a2b      	cmp	r2, #43	; 0x2b
   1fba8:	d006      	beq.n	1fbb8 <at_parse_detect_type+0x148>
	if (chr == '"') {
   1fbaa:	2a22      	cmp	r2, #34	; 0x22
   1fbac:	d107      	bne.n	1fbbe <at_parse_detect_type+0x14e>
	state = new_state;
   1fbae:	2203      	movs	r2, #3
   1fbb0:	4b16      	ldr	r3, [pc, #88]	; (1fc0c <at_parse_detect_type+0x19c>)
		tmpstr++;
   1fbb2:	3401      	adds	r4, #1
	state = new_state;
   1fbb4:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1fbb6:	e793      	b.n	1fae0 <at_parse_detect_type+0x70>
	state = new_state;
   1fbb8:	2204      	movs	r2, #4
   1fbba:	4b14      	ldr	r3, [pc, #80]	; (1fc0c <at_parse_detect_type+0x19c>)
   1fbbc:	e7a3      	b.n	1fb06 <at_parse_detect_type+0x96>
	if (chr == '(') {
   1fbbe:	2a28      	cmp	r2, #40	; 0x28
   1fbc0:	d104      	bne.n	1fbcc <at_parse_detect_type+0x15c>
   1fbc2:	2201      	movs	r2, #1
   1fbc4:	4b11      	ldr	r3, [pc, #68]	; (1fc0c <at_parse_detect_type+0x19c>)
		tmpstr++;
   1fbc6:	4414      	add	r4, r2
	state = new_state;
   1fbc8:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1fbca:	e789      	b.n	1fae0 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1fbcc:	4610      	mov	r0, r2
   1fbce:	f009 fec7 	bl	29960 <is_lfcr>
   1fbd2:	b188      	cbz	r0, 1fbf8 <at_parse_detect_type+0x188>
   1fbd4:	490d      	ldr	r1, [pc, #52]	; (1fc0c <at_parse_detect_type+0x19c>)
   1fbd6:	780b      	ldrb	r3, [r1, #0]
   1fbd8:	2b04      	cmp	r3, #4
   1fbda:	d10a      	bne.n	1fbf2 <at_parse_detect_type+0x182>
   1fbdc:	4622      	mov	r2, r4
   1fbde:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
   1fbe0:	f812 0b01 	ldrb.w	r0, [r2], #1
   1fbe4:	f009 febc 	bl	29960 <is_lfcr>
   1fbe8:	2800      	cmp	r0, #0
   1fbea:	d1f8      	bne.n	1fbde <at_parse_detect_type+0x16e>
	state = new_state;
   1fbec:	2305      	movs	r3, #5
   1fbee:	700b      	strb	r3, [r1, #0]
}
   1fbf0:	e776      	b.n	1fae0 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1fbf2:	2b08      	cmp	r3, #8
   1fbf4:	f43f af74 	beq.w	1fae0 <at_parse_detect_type+0x70>
	} else if (is_separator(*tmpstr)) {
   1fbf8:	4610      	mov	r0, r2
   1fbfa:	f7ff fe05 	bl	1f808 <is_separator>
   1fbfe:	2800      	cmp	r0, #0
   1fc00:	d0c4      	beq.n	1fb8c <at_parse_detect_type+0x11c>
	state = new_state;
   1fc02:	2208      	movs	r2, #8
   1fc04:	4b01      	ldr	r3, [pc, #4]	; (1fc0c <at_parse_detect_type+0x19c>)
   1fc06:	e77e      	b.n	1fb06 <at_parse_detect_type+0x96>
   1fc08:	2000df9e 	.word	0x2000df9e
   1fc0c:	2000df9f 	.word	0x2000df9f
   1fc10:	0002d8b7 	.word	0x0002d8b7
   1fc14:	0002d8bd 	.word	0x0002d8bd
   1fc18:	0002d8c3 	.word	0x0002d8c3
   1fc1c:	0002d8cf 	.word	0x0002d8cf
   1fc20:	0002d8da 	.word	0x0002d8da
   1fc24:	0002d8e6 	.word	0x0002d8e6
   1fc28:	0002ec21 	.word	0x0002ec21

0001fc2c <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   1fc2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc30:	4689      	mov	r9, r1
   1fc32:	4616      	mov	r6, r2
   1fc34:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1fc36:	4680      	mov	r8, r0
   1fc38:	2800      	cmp	r0, #0
   1fc3a:	f000 809a 	beq.w	1fd72 <at_parser_max_params_from_str+0x146>
   1fc3e:	2a00      	cmp	r2, #0
   1fc40:	f000 8097 	beq.w	1fd72 <at_parser_max_params_from_str+0x146>
   1fc44:	6853      	ldr	r3, [r2, #4]
   1fc46:	2b00      	cmp	r3, #0
   1fc48:	f000 8093 	beq.w	1fd72 <at_parser_max_params_from_str+0x146>
	state = IDLE;
   1fc4c:	2400      	movs	r4, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   1fc4e:	4610      	mov	r0, r2
   1fc50:	f009 fec9 	bl	299e6 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1fc54:	4642      	mov	r2, r8
   1fc56:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   1fc58:	f8cd 8004 	str.w	r8, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   1fc5c:	429f      	cmp	r7, r3
   1fc5e:	bf28      	it	cs
   1fc60:	461f      	movcs	r7, r3
	state = IDLE;
   1fc62:	4b45      	ldr	r3, [pc, #276]	; (1fd78 <at_parser_max_params_from_str+0x14c>)
   1fc64:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
   1fc66:	4b45      	ldr	r3, [pc, #276]	; (1fd7c <at_parser_max_params_from_str+0x150>)
   1fc68:	701c      	strb	r4, [r3, #0]
   1fc6a:	4611      	mov	r1, r2
	while (is_lfcr(*str)) {
   1fc6c:	7808      	ldrb	r0, [r1, #0]
   1fc6e:	f009 fe77 	bl	29960 <is_lfcr>
   1fc72:	4625      	mov	r5, r4
   1fc74:	3201      	adds	r2, #1
   1fc76:	4604      	mov	r4, r0
   1fc78:	2800      	cmp	r0, #0
   1fc7a:	d1f6      	bne.n	1fc6a <at_parser_max_params_from_str+0x3e>
   1fc7c:	b105      	cbz	r5, 1fc80 <at_parser_max_params_from_str+0x54>
   1fc7e:	9101      	str	r1, [sp, #4]
	int index = 0;
   1fc80:	2500      	movs	r5, #0
		if (isspace((int)*str)) {
   1fc82:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 1fd80 <at_parser_max_params_from_str+0x154>
	while ((!is_terminated(*str)) && (index < max_params)) {
   1fc86:	9b01      	ldr	r3, [sp, #4]
   1fc88:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1fc8a:	2a00      	cmp	r2, #0
   1fc8c:	d048      	beq.n	1fd20 <at_parser_max_params_from_str+0xf4>
   1fc8e:	42af      	cmp	r7, r5
   1fc90:	d946      	bls.n	1fd20 <at_parser_max_params_from_str+0xf4>
		if (isspace((int)*str)) {
   1fc92:	f81b 2002 	ldrb.w	r2, [fp, r2]
		ret = at_parse_detect_type(&str, index);
   1fc96:	4629      	mov	r1, r5
		if (isspace((int)*str)) {
   1fc98:	0712      	lsls	r2, r2, #28
			str++;
   1fc9a:	bf48      	it	mi
   1fc9c:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   1fc9e:	a801      	add	r0, sp, #4
			str++;
   1fca0:	bf48      	it	mi
   1fca2:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
   1fca4:	f7ff fee4 	bl	1fa70 <at_parse_detect_type>
		if (ret == -1) {
   1fca8:	1c43      	adds	r3, r0, #1
   1fcaa:	d039      	beq.n	1fd20 <at_parser_max_params_from_str+0xf4>
		if (ret == -2) {
   1fcac:	3002      	adds	r0, #2
			index = 0;
   1fcae:	bf08      	it	eq
   1fcb0:	2500      	moveq	r5, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   1fcb2:	4632      	mov	r2, r6
   1fcb4:	4629      	mov	r1, r5
   1fcb6:	a801      	add	r0, sp, #4
			str = *at_params_str;
   1fcb8:	bf08      	it	eq
   1fcba:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
   1fcbe:	f7ff fdc9 	bl	1f854 <at_parse_process_element>
   1fcc2:	3001      	adds	r0, #1
   1fcc4:	d02c      	beq.n	1fd20 <at_parser_max_params_from_str+0xf4>
		if (is_separator(*str)) {
   1fcc6:	9a01      	ldr	r2, [sp, #4]
   1fcc8:	7810      	ldrb	r0, [r2, #0]
   1fcca:	f7ff fd9d 	bl	1f808 <is_separator>
   1fcce:	b1b0      	cbz	r0, 1fcfe <at_parser_max_params_from_str+0xd2>
			if (is_lfcr(*(str + 1))) {
   1fcd0:	7850      	ldrb	r0, [r2, #1]
   1fcd2:	f009 fe45 	bl	29960 <is_lfcr>
   1fcd6:	b178      	cbz	r0, 1fcf8 <at_parser_max_params_from_str+0xcc>
				index++;
   1fcd8:	3501      	adds	r5, #1
				if (index == max_params) {
   1fcda:	42bd      	cmp	r5, r7
   1fcdc:	d03c      	beq.n	1fd58 <at_parser_max_params_from_str+0x12c>
				if (at_parse_detect_type(&str, index) == -1) {
   1fcde:	4629      	mov	r1, r5
   1fce0:	a801      	add	r0, sp, #4
   1fce2:	f7ff fec5 	bl	1fa70 <at_parse_detect_type>
   1fce6:	3001      	adds	r0, #1
   1fce8:	d01a      	beq.n	1fd20 <at_parser_max_params_from_str+0xf4>
				if (at_parse_process_element(&str, index,
   1fcea:	4632      	mov	r2, r6
   1fcec:	4629      	mov	r1, r5
   1fcee:	a801      	add	r0, sp, #4
   1fcf0:	f7ff fdb0 	bl	1f854 <at_parse_process_element>
   1fcf4:	3001      	adds	r0, #1
   1fcf6:	d013      	beq.n	1fd20 <at_parser_max_params_from_str+0xf4>
			str++;
   1fcf8:	9b01      	ldr	r3, [sp, #4]
   1fcfa:	3301      	adds	r3, #1
   1fcfc:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   1fcfe:	9a01      	ldr	r2, [sp, #4]
   1fd00:	7810      	ldrb	r0, [r2, #0]
   1fd02:	f009 fe2d 	bl	29960 <is_lfcr>
   1fd06:	b310      	cbz	r0, 1fd4e <at_parser_max_params_from_str+0x122>
   1fd08:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   1fd0a:	7811      	ldrb	r1, [r2, #0]
   1fd0c:	4692      	mov	sl, r2
   1fd0e:	4608      	mov	r0, r1
   1fd10:	3201      	adds	r2, #1
   1fd12:	f009 fe25 	bl	29960 <is_lfcr>
   1fd16:	2800      	cmp	r0, #0
   1fd18:	d1f7      	bne.n	1fd0a <at_parser_max_params_from_str+0xde>
   1fd1a:	b971      	cbnz	r1, 1fd3a <at_parser_max_params_from_str+0x10e>
				str += i;
   1fd1c:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   1fd20:	9d01      	ldr	r5, [sp, #4]
	if (oversized) {
   1fd22:	bb1c      	cbnz	r4, 1fd6c <at_parser_max_params_from_str+0x140>
   1fd24:	782b      	ldrb	r3, [r5, #0]
   1fd26:	b9cb      	cbnz	r3, 1fd5c <at_parser_max_params_from_str+0x130>
	return 0;
   1fd28:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1fd2a:	f1b9 0f00 	cmp.w	r9, #0
   1fd2e:	d001      	beq.n	1fd34 <at_parser_max_params_from_str+0x108>
		*next_param_str = (char *)at_params_str;
   1fd30:	f8c9 5000 	str.w	r5, [r9]
	}

	return err;
}
   1fd34:	b003      	add	sp, #12
   1fd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1fd3a:	4608      	mov	r0, r1
   1fd3c:	f009 fe04 	bl	29948 <is_notification>
   1fd40:	2800      	cmp	r0, #0
   1fd42:	d1eb      	bne.n	1fd1c <at_parser_max_params_from_str+0xf0>
			    is_result(str + i)) {
   1fd44:	4650      	mov	r0, sl
   1fd46:	f7ff fd6d 	bl	1f824 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1fd4a:	2800      	cmp	r0, #0
   1fd4c:	d1e6      	bne.n	1fd1c <at_parser_max_params_from_str+0xf0>
		index++;
   1fd4e:	3501      	adds	r5, #1
			oversized = true;
   1fd50:	42bd      	cmp	r5, r7
   1fd52:	bf08      	it	eq
   1fd54:	2401      	moveq	r4, #1
   1fd56:	e796      	b.n	1fc86 <at_parser_max_params_from_str+0x5a>
					oversized = true;
   1fd58:	4604      	mov	r4, r0
   1fd5a:	e7e1      	b.n	1fd20 <at_parser_max_params_from_str+0xf4>
	if (!is_terminated(*str) && !is_result(str)) {
   1fd5c:	4628      	mov	r0, r5
   1fd5e:	f7ff fd61 	bl	1f824 <is_result>
   1fd62:	2800      	cmp	r0, #0
   1fd64:	d1e0      	bne.n	1fd28 <at_parser_max_params_from_str+0xfc>
		return -EAGAIN;
   1fd66:	f06f 000a 	mvn.w	r0, #10
   1fd6a:	e7de      	b.n	1fd2a <at_parser_max_params_from_str+0xfe>
		return -E2BIG;
   1fd6c:	f06f 0006 	mvn.w	r0, #6
   1fd70:	e7db      	b.n	1fd2a <at_parser_max_params_from_str+0xfe>
		return -EINVAL;
   1fd72:	f06f 0015 	mvn.w	r0, #21
   1fd76:	e7dd      	b.n	1fd34 <at_parser_max_params_from_str+0x108>
   1fd78:	2000df9f 	.word	0x2000df9f
   1fd7c:	2000df9e 	.word	0x2000df9e
   1fd80:	0002ec21 	.word	0x0002ec21

0001fd84 <lte_lc_connect_async.part.0>:
	const struct device *x = 0;

	return init_and_connect(x);
}

int lte_lc_connect_async(lte_lc_evt_handler_t handler)
   1fd84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	if (handler) {
		event_handler_list_append_handler(handler);
	} else if (event_handler_list_is_empty()) {
		LOG_ERR("No handler registered");
   1fd86:	4b07      	ldr	r3, [pc, #28]	; (1fda4 <lte_lc_connect_async.part.0+0x20>)
   1fd88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1fd8c:	9305      	str	r3, [sp, #20]
   1fd8e:	2302      	movs	r3, #2
   1fd90:	4805      	ldr	r0, [pc, #20]	; (1fda8 <lte_lc_connect_async.part.0+0x24>)
   1fd92:	aa04      	add	r2, sp, #16
   1fd94:	9304      	str	r3, [sp, #16]
   1fd96:	f009 ff50 	bl	29c3a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
	}

	return connect_lte(false);
}
   1fd9a:	f06f 0015 	mvn.w	r0, #21
   1fd9e:	b007      	add	sp, #28
   1fda0:	f85d fb04 	ldr.w	pc, [sp], #4
   1fda4:	0002d911 	.word	0x0002d911
   1fda8:	0002bde0 	.word	0x0002bde0

0001fdac <enable_notifications>:
{
   1fdac:	b5b0      	push	{r4, r5, r7, lr}
   1fdae:	b08e      	sub	sp, #56	; 0x38
	err = nrf_modem_at_printf(AT_CEREG_5);
   1fdb0:	482c      	ldr	r0, [pc, #176]	; (1fe64 <enable_notifications+0xb8>)
{
   1fdb2:	af00      	add	r7, sp, #0
	err = nrf_modem_at_printf(AT_CEREG_5);
   1fdb4:	f004 fce6 	bl	24784 <nrf_modem_at_printf>
	if (err) {
   1fdb8:	4604      	mov	r4, r0
   1fdba:	b1a0      	cbz	r0, 1fde6 <enable_notifications+0x3a>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   1fdbc:	466d      	mov	r5, sp
   1fdbe:	b088      	sub	sp, #32
   1fdc0:	466a      	mov	r2, sp
   1fdc2:	4b29      	ldr	r3, [pc, #164]	; (1fe68 <enable_notifications+0xbc>)
   1fdc4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fdc8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1fdcc:	2303      	movs	r3, #3
   1fdce:	4827      	ldr	r0, [pc, #156]	; (1fe6c <enable_notifications+0xc0>)
   1fdd0:	f842 3f10 	str.w	r3, [r2, #16]!
   1fdd4:	f009 ff31 	bl	29c3a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1fdd8:	f06f 040d 	mvn.w	r4, #13
   1fddc:	46ad      	mov	sp, r5
}
   1fdde:	4620      	mov	r0, r4
   1fde0:	3738      	adds	r7, #56	; 0x38
   1fde2:	46bd      	mov	sp, r7
   1fde4:	bdb0      	pop	{r4, r5, r7, pc}
	err = nrf_modem_at_printf(cscon);
   1fde6:	4822      	ldr	r0, [pc, #136]	; (1fe70 <enable_notifications+0xc4>)
   1fde8:	f004 fccc 	bl	24784 <nrf_modem_at_printf>
	if (err) {
   1fdec:	2800      	cmp	r0, #0
   1fdee:	d0f6      	beq.n	1fdde <enable_notifications+0x32>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   1fdf0:	466d      	mov	r5, sp
   1fdf2:	b088      	sub	sp, #32
   1fdf4:	466a      	mov	r2, sp
   1fdf6:	4b1f      	ldr	r3, [pc, #124]	; (1fe74 <enable_notifications+0xc8>)
   1fdf8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1fdfc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1fe00:	2303      	movs	r3, #3
   1fe02:	481a      	ldr	r0, [pc, #104]	; (1fe6c <enable_notifications+0xc0>)
   1fe04:	f842 3f10 	str.w	r3, [r2, #16]!
   1fe08:	f009 ff17 	bl	29c3a <z_log_msg_static_create.constprop.0>
   1fe0c:	46ad      	mov	sp, r5
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   1fe0e:	4b1a      	ldr	r3, [pc, #104]	; (1fe78 <enable_notifications+0xcc>)
   1fe10:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1fe14:	617b      	str	r3, [r7, #20]
   1fe16:	2302      	movs	r3, #2
   1fe18:	4814      	ldr	r0, [pc, #80]	; (1fe6c <enable_notifications+0xc0>)
   1fe1a:	f107 0210 	add.w	r2, r7, #16
   1fe1e:	613b      	str	r3, [r7, #16]
   1fe20:	f009 ff0b 	bl	29c3a <z_log_msg_static_create.constprop.0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   1fe24:	2132      	movs	r1, #50	; 0x32
   1fe26:	4638      	mov	r0, r7
   1fe28:	4a14      	ldr	r2, [pc, #80]	; (1fe7c <enable_notifications+0xd0>)
   1fe2a:	f004 fcf7 	bl	2481c <nrf_modem_at_cmd>
		if (err == 0) {
   1fe2e:	2800      	cmp	r0, #0
   1fe30:	d1d5      	bne.n	1fdde <enable_notifications+0x32>
			char *end = strstr(buf, "\r\nOK");
   1fe32:	4638      	mov	r0, r7
   1fe34:	4912      	ldr	r1, [pc, #72]	; (1fe80 <enable_notifications+0xd4>)
   1fe36:	f00b fba2 	bl	2b57e <strstr>
			if (end) {
   1fe3a:	b100      	cbz	r0, 1fe3e <enable_notifications+0x92>
				*end = '\0';
   1fe3c:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", buf);
   1fe3e:	466d      	mov	r5, sp
   1fe40:	b088      	sub	sp, #32
   1fe42:	466a      	mov	r2, sp
   1fe44:	4b0f      	ldr	r3, [pc, #60]	; (1fe84 <enable_notifications+0xd8>)
   1fe46:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1fe4a:	e9c2 3705 	strd	r3, r7, [r2, #20]
   1fe4e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1fe52:	8393      	strh	r3, [r2, #28]
   1fe54:	4b0c      	ldr	r3, [pc, #48]	; (1fe88 <enable_notifications+0xdc>)
   1fe56:	4805      	ldr	r0, [pc, #20]	; (1fe6c <enable_notifications+0xc0>)
   1fe58:	f842 3f10 	str.w	r3, [r2, #16]!
   1fe5c:	f009 feed 	bl	29c3a <z_log_msg_static_create.constprop.0>
   1fe60:	46ad      	mov	sp, r5
   1fe62:	e7bc      	b.n	1fdde <enable_notifications+0x32>
   1fe64:	0002d927 	.word	0x0002d927
   1fe68:	0002d932 	.word	0x0002d932
   1fe6c:	0002bde0 	.word	0x0002bde0
   1fe70:	0002e04d 	.word	0x0002e04d
   1fe74:	0002d968 	.word	0x0002d968
   1fe78:	0002d9a0 	.word	0x0002d9a0
   1fe7c:	0002d9d1 	.word	0x0002d9d1
   1fe80:	0002d9d9 	.word	0x0002d9d9
   1fe84:	0002d9de 	.word	0x0002d9de
   1fe88:	01000003 	.word	0x01000003

0001fe8c <at_handler_mdmev>:
{
   1fe8c:	b590      	push	{r4, r7, lr}
   1fe8e:	4604      	mov	r4, r0
   1fe90:	b093      	sub	sp, #76	; 0x4c
   1fe92:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1fe94:	2100      	movs	r1, #0
   1fe96:	2248      	movs	r2, #72	; 0x48
   1fe98:	4638      	mov	r0, r7
   1fe9a:	f00b fb20 	bl	2b4de <memset>
	err = parse_mdmev(response, &evt.modem_evt);
   1fe9e:	4620      	mov	r0, r4
   1fea0:	f107 0108 	add.w	r1, r7, #8
   1fea4:	f001 fe64 	bl	21b70 <parse_mdmev>
	if (err) {
   1fea8:	b188      	cbz	r0, 1fece <at_handler_mdmev+0x42>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   1feaa:	466c      	mov	r4, sp
   1feac:	b088      	sub	sp, #32
   1feae:	466a      	mov	r2, sp
   1feb0:	4b0a      	ldr	r3, [pc, #40]	; (1fedc <at_handler_mdmev+0x50>)
   1feb2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1feb6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1feba:	2303      	movs	r3, #3
   1febc:	4808      	ldr	r0, [pc, #32]	; (1fee0 <at_handler_mdmev+0x54>)
   1febe:	f842 3f10 	str.w	r3, [r2, #16]!
   1fec2:	f009 feba 	bl	29c3a <z_log_msg_static_create.constprop.0>
   1fec6:	46a5      	mov	sp, r4
}
   1fec8:	374c      	adds	r7, #76	; 0x4c
   1feca:	46bd      	mov	sp, r7
   1fecc:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1fece:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   1fed0:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1fed2:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1fed4:	f000 fe68 	bl	20ba8 <event_handler_list_dispatch>
   1fed8:	e7f6      	b.n	1fec8 <at_handler_mdmev+0x3c>
   1feda:	bf00      	nop
   1fedc:	0002da01 	.word	0x0002da01
   1fee0:	0002bde0 	.word	0x0002bde0

0001fee4 <at_handler_xmodemsleep>:
{
   1fee4:	b590      	push	{r4, r7, lr}
   1fee6:	4604      	mov	r4, r0
   1fee8:	b093      	sub	sp, #76	; 0x4c
   1feea:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1feec:	2100      	movs	r1, #0
   1feee:	2248      	movs	r2, #72	; 0x48
   1fef0:	4638      	mov	r0, r7
   1fef2:	f00b faf4 	bl	2b4de <memset>
	err = parse_xmodemsleep(response, &evt.modem_sleep);
   1fef6:	4620      	mov	r0, r4
   1fef8:	f107 0108 	add.w	r1, r7, #8
   1fefc:	f001 fdbe 	bl	21a7c <parse_xmodemsleep>
	if (err) {
   1ff00:	b188      	cbz	r0, 1ff26 <at_handler_xmodemsleep+0x42>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   1ff02:	466c      	mov	r4, sp
   1ff04:	b088      	sub	sp, #32
   1ff06:	466a      	mov	r2, sp
   1ff08:	4b13      	ldr	r3, [pc, #76]	; (1ff58 <at_handler_xmodemsleep+0x74>)
   1ff0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ff0e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ff12:	2303      	movs	r3, #3
   1ff14:	4811      	ldr	r0, [pc, #68]	; (1ff5c <at_handler_xmodemsleep+0x78>)
   1ff16:	f842 3f10 	str.w	r3, [r2, #16]!
   1ff1a:	f009 fe8e 	bl	29c3a <z_log_msg_static_create.constprop.0>
   1ff1e:	46a5      	mov	sp, r4
}
   1ff20:	374c      	adds	r7, #76	; 0x4c
   1ff22:	46bd      	mov	sp, r7
   1ff24:	bd90      	pop	{r4, r7, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   1ff26:	7a3b      	ldrb	r3, [r7, #8]
   1ff28:	1e5a      	subs	r2, r3, #1
   1ff2a:	2a01      	cmp	r2, #1
   1ff2c:	d901      	bls.n	1ff32 <at_handler_xmodemsleep+0x4e>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   1ff2e:	2b04      	cmp	r3, #4
   1ff30:	d1f6      	bne.n	1ff20 <at_handler_xmodemsleep+0x3c>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   1ff32:	e9d7 2104 	ldrd	r2, r1, [r7, #16]
   1ff36:	f5a2 539c 	sub.w	r3, r2, #4992	; 0x1380
   1ff3a:	3b08      	subs	r3, #8
   1ff3c:	430b      	orrs	r3, r1
   1ff3e:	d007      	beq.n	1ff50 <at_handler_xmodemsleep+0x6c>
	} else if (evt.modem_sleep.time == 0) {
   1ff40:	430a      	orrs	r2, r1
   1ff42:	d007      	beq.n	1ff54 <at_handler_xmodemsleep+0x70>
   1ff44:	230a      	movs	r3, #10
	event_handler_list_dispatch(&evt);
   1ff46:	4638      	mov	r0, r7
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   1ff48:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1ff4a:	f000 fe2d 	bl	20ba8 <event_handler_list_dispatch>
   1ff4e:	e7e7      	b.n	1ff20 <at_handler_xmodemsleep+0x3c>
   1ff50:	2308      	movs	r3, #8
   1ff52:	e7f8      	b.n	1ff46 <at_handler_xmodemsleep+0x62>
   1ff54:	2309      	movs	r3, #9
   1ff56:	e7f6      	b.n	1ff46 <at_handler_xmodemsleep+0x62>
   1ff58:	0002da31 	.word	0x0002da31
   1ff5c:	0002bde0 	.word	0x0002bde0

0001ff60 <at_handler_ncellmeas>:
{
   1ff60:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff62:	b0ab      	sub	sp, #172	; 0xac
   1ff64:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1ff66:	2100      	movs	r1, #0
   1ff68:	2248      	movs	r2, #72	; 0x48
{
   1ff6a:	4606      	mov	r6, r0
	struct lte_lc_evt evt = {0};
   1ff6c:	f107 0018 	add.w	r0, r7, #24
   1ff70:	f00b fab5 	bl	2b4de <memset>
	if (event_handler_list_is_empty() || !ncellmeas_ongoing) {
   1ff74:	f000 fde4 	bl	20b40 <event_handler_list_is_empty>
   1ff78:	4d5e      	ldr	r5, [pc, #376]	; (200f4 <at_handler_ncellmeas+0x194>)
   1ff7a:	4601      	mov	r1, r0
   1ff7c:	b9e0      	cbnz	r0, 1ffb8 <at_handler_ncellmeas+0x58>
   1ff7e:	782b      	ldrb	r3, [r5, #0]
   1ff80:	b1d3      	cbz	r3, 1ffb8 <at_handler_ncellmeas+0x58>
	if (ncellmeas_params.search_type > LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   1ff82:	4c5d      	ldr	r4, [pc, #372]	; (200f8 <at_handler_ncellmeas+0x198>)
   1ff84:	7823      	ldrb	r3, [r4, #0]
   1ff86:	2b03      	cmp	r3, #3
   1ff88:	d962      	bls.n	20050 <at_handler_ncellmeas+0xf0>
	struct lte_lc_evt evt = {0};
   1ff8a:	2248      	movs	r2, #72	; 0x48
   1ff8c:	f107 0060 	add.w	r0, r7, #96	; 0x60
   1ff90:	f00b faa5 	bl	2b4de <memset>
	int max_cell_count = ncellmeas_params.gci_count;
   1ff94:	7860      	ldrb	r0, [r4, #1]
	if (max_cell_count != 0) {
   1ff96:	b1a0      	cbz	r0, 1ffc2 <at_handler_ncellmeas+0x62>
		cells = k_calloc(max_cell_count, sizeof(struct lte_lc_cell));
   1ff98:	2130      	movs	r1, #48	; 0x30
   1ff9a:	f00b fa5f 	bl	2b45c <k_calloc>
		if (cells == NULL) {
   1ff9e:	4604      	mov	r4, r0
   1ffa0:	b980      	cbnz	r0, 1ffc4 <at_handler_ncellmeas+0x64>
			LOG_ERR("Failed to allocate memory for the GCI cells");
   1ffa2:	4b56      	ldr	r3, [pc, #344]	; (200fc <at_handler_ncellmeas+0x19c>)
   1ffa4:	f107 0210 	add.w	r2, r7, #16
   1ffa8:	617b      	str	r3, [r7, #20]
   1ffaa:	2302      	movs	r3, #2
   1ffac:	613b      	str	r3, [r7, #16]
			LOG_ERR("Failed to allocate memory for neighbor cells");
   1ffae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ffb2:	4853      	ldr	r0, [pc, #332]	; (20100 <at_handler_ncellmeas+0x1a0>)
   1ffb4:	f009 fe41 	bl	29c3a <z_log_msg_static_create.constprop.0>
	ncellmeas_ongoing = false;
   1ffb8:	2300      	movs	r3, #0
}
   1ffba:	37ac      	adds	r7, #172	; 0xac
	ncellmeas_ongoing = false;
   1ffbc:	702b      	strb	r3, [r5, #0]
}
   1ffbe:	46bd      	mov	sp, r7
   1ffc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct lte_lc_cell *cells = NULL;
   1ffc2:	4604      	mov	r4, r0
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   1ffc4:	f107 0268 	add.w	r2, r7, #104	; 0x68
   1ffc8:	4631      	mov	r1, r6
   1ffca:	484b      	ldr	r0, [pc, #300]	; (200f8 <at_handler_ncellmeas+0x198>)
	evt.cells_info.gci_cells = cells;
   1ffcc:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   1ffd0:	f001 fa88 	bl	214e4 <parse_ncellmeas_gci>
	switch (err) {
   1ffd4:	1dc2      	adds	r2, r0, #7
   1ffd6:	d011      	beq.n	1fffc <at_handler_ncellmeas+0x9c>
   1ffd8:	2801      	cmp	r0, #1
   1ffda:	d92a      	bls.n	20032 <at_handler_ncellmeas+0xd2>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1ffdc:	466e      	mov	r6, sp
   1ffde:	b088      	sub	sp, #32
   1ffe0:	466a      	mov	r2, sp
   1ffe2:	4b48      	ldr	r3, [pc, #288]	; (20104 <at_handler_ncellmeas+0x1a4>)
   1ffe4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ffe8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ffec:	2303      	movs	r3, #3
   1ffee:	4844      	ldr	r0, [pc, #272]	; (20100 <at_handler_ncellmeas+0x1a0>)
   1fff0:	f842 3f10 	str.w	r3, [r2, #16]!
   1fff4:	f009 fe21 	bl	29c3a <z_log_msg_static_create.constprop.0>
   1fff8:	46b5      	mov	sp, r6
   1fffa:	e021      	b.n	20040 <at_handler_ncellmeas+0xe0>
		LOG_WRN("Not all neighbor cells could be parsed");
   1fffc:	466e      	mov	r6, sp
   1fffe:	4b42      	ldr	r3, [pc, #264]	; (20108 <at_handler_ncellmeas+0x1a8>)
   20000:	f107 0210 	add.w	r2, r7, #16
   20004:	617b      	str	r3, [r7, #20]
   20006:	2302      	movs	r3, #2
   20008:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2000c:	483c      	ldr	r0, [pc, #240]	; (20100 <at_handler_ncellmeas+0x1a0>)
   2000e:	613b      	str	r3, [r7, #16]
   20010:	f009 fe13 	bl	29c3a <z_log_msg_static_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   20014:	b088      	sub	sp, #32
   20016:	466a      	mov	r2, sp
   20018:	4b3c      	ldr	r3, [pc, #240]	; (2010c <at_handler_ncellmeas+0x1ac>)
   2001a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2001e:	6153      	str	r3, [r2, #20]
   20020:	230a      	movs	r3, #10
   20022:	6193      	str	r3, [r2, #24]
   20024:	2303      	movs	r3, #3
   20026:	4836      	ldr	r0, [pc, #216]	; (20100 <at_handler_ncellmeas+0x1a0>)
   20028:	f842 3f10 	str.w	r3, [r2, #16]!
   2002c:	f009 fe05 	bl	29c3a <z_log_msg_static_create.constprop.0>
   20030:	46b5      	mov	sp, r6
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   20032:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   20034:	f107 0060 	add.w	r0, r7, #96	; 0x60
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   20038:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   2003c:	f000 fdb4 	bl	20ba8 <event_handler_list_dispatch>
	k_free(cells);
   20040:	4620      	mov	r0, r4
   20042:	f00b fa00 	bl	2b446 <k_free>
	k_free(evt.cells_info.neighbor_cells);
   20046:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
		k_free(neighbor_cells);
   2004a:	f00b f9fc 	bl	2b446 <k_free>
   2004e:	e7b3      	b.n	1ffb8 <at_handler_ncellmeas+0x58>
	int ncell_count = neighborcell_count_get(response);
   20050:	4630      	mov	r0, r6
   20052:	f001 f887 	bl	21164 <neighborcell_count_get>
   20056:	4604      	mov	r4, r0
	if (ncell_count != 0) {
   20058:	b158      	cbz	r0, 20072 <at_handler_ncellmeas+0x112>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   2005a:	2110      	movs	r1, #16
   2005c:	f00b f9fe 	bl	2b45c <k_calloc>
		if (neighbor_cells == NULL) {
   20060:	4604      	mov	r4, r0
   20062:	b930      	cbnz	r0, 20072 <at_handler_ncellmeas+0x112>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   20064:	4b2a      	ldr	r3, [pc, #168]	; (20110 <at_handler_ncellmeas+0x1b0>)
   20066:	f107 0270 	add.w	r2, r7, #112	; 0x70
   2006a:	677b      	str	r3, [r7, #116]	; 0x74
   2006c:	2302      	movs	r3, #2
   2006e:	673b      	str	r3, [r7, #112]	; 0x70
   20070:	e79d      	b.n	1ffae <at_handler_ncellmeas+0x4e>
	err = parse_ncellmeas(response, &evt.cells_info);
   20072:	4630      	mov	r0, r6
   20074:	f107 0120 	add.w	r1, r7, #32
	evt.cells_info.neighbor_cells = neighbor_cells;
   20078:	657c      	str	r4, [r7, #84]	; 0x54
	err = parse_ncellmeas(response, &evt.cells_info);
   2007a:	f001 f899 	bl	211b0 <parse_ncellmeas>
	switch (err) {
   2007e:	1dc3      	adds	r3, r0, #7
   20080:	d011      	beq.n	200a6 <at_handler_ncellmeas+0x146>
   20082:	2801      	cmp	r0, #1
   20084:	d92a      	bls.n	200dc <at_handler_ncellmeas+0x17c>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   20086:	466e      	mov	r6, sp
   20088:	b088      	sub	sp, #32
   2008a:	466a      	mov	r2, sp
   2008c:	4b1d      	ldr	r3, [pc, #116]	; (20104 <at_handler_ncellmeas+0x1a4>)
   2008e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20092:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20096:	2303      	movs	r3, #3
   20098:	4819      	ldr	r0, [pc, #100]	; (20100 <at_handler_ncellmeas+0x1a0>)
   2009a:	f842 3f10 	str.w	r3, [r2, #16]!
   2009e:	f009 fdcc 	bl	29c3a <z_log_msg_static_create.constprop.0>
   200a2:	46b5      	mov	sp, r6
   200a4:	e020      	b.n	200e8 <at_handler_ncellmeas+0x188>
		LOG_WRN("Not all neighbor cells could be parsed");
   200a6:	466e      	mov	r6, sp
   200a8:	4b17      	ldr	r3, [pc, #92]	; (20108 <at_handler_ncellmeas+0x1a8>)
   200aa:	f107 0270 	add.w	r2, r7, #112	; 0x70
   200ae:	677b      	str	r3, [r7, #116]	; 0x74
   200b0:	2302      	movs	r3, #2
   200b2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   200b6:	4812      	ldr	r0, [pc, #72]	; (20100 <at_handler_ncellmeas+0x1a0>)
   200b8:	673b      	str	r3, [r7, #112]	; 0x70
   200ba:	f009 fdbe 	bl	29c3a <z_log_msg_static_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   200be:	b088      	sub	sp, #32
   200c0:	466a      	mov	r2, sp
   200c2:	4b12      	ldr	r3, [pc, #72]	; (2010c <at_handler_ncellmeas+0x1ac>)
   200c4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   200c8:	6153      	str	r3, [r2, #20]
   200ca:	230a      	movs	r3, #10
   200cc:	6193      	str	r3, [r2, #24]
   200ce:	2303      	movs	r3, #3
   200d0:	480b      	ldr	r0, [pc, #44]	; (20100 <at_handler_ncellmeas+0x1a0>)
   200d2:	f842 3f10 	str.w	r3, [r2, #16]!
   200d6:	f009 fdb0 	bl	29c3a <z_log_msg_static_create.constprop.0>
   200da:	46b5      	mov	sp, r6
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   200dc:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   200de:	f107 0018 	add.w	r0, r7, #24
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   200e2:	763b      	strb	r3, [r7, #24]
		event_handler_list_dispatch(&evt);
   200e4:	f000 fd60 	bl	20ba8 <event_handler_list_dispatch>
	if (neighbor_cells) {
   200e8:	2c00      	cmp	r4, #0
   200ea:	f43f af65 	beq.w	1ffb8 <at_handler_ncellmeas+0x58>
		k_free(neighbor_cells);
   200ee:	4620      	mov	r0, r4
   200f0:	e7ab      	b.n	2004a <at_handler_ncellmeas+0xea>
   200f2:	bf00      	nop
   200f4:	2000e045 	.word	0x2000e045
   200f8:	2000e046 	.word	0x2000e046
   200fc:	0002da6d 	.word	0x0002da6d
   20100:	0002bde0 	.word	0x0002bde0
   20104:	0002dafa 	.word	0x0002dafa
   20108:	0002da99 	.word	0x0002da99
   2010c:	0002dac0 	.word	0x0002dac0
   20110:	0002db24 	.word	0x0002db24

00020114 <at_handler_xt3412>:
{
   20114:	b590      	push	{r4, r7, lr}
   20116:	4604      	mov	r4, r0
   20118:	b093      	sub	sp, #76	; 0x4c
   2011a:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   2011c:	2100      	movs	r1, #0
   2011e:	2248      	movs	r2, #72	; 0x48
   20120:	4638      	mov	r0, r7
   20122:	f00b f9dc 	bl	2b4de <memset>
	err = parse_xt3412(response, &evt.time);
   20126:	4620      	mov	r0, r4
   20128:	f107 0108 	add.w	r1, r7, #8
   2012c:	f000 ffaa 	bl	21084 <parse_xt3412>
	if (err) {
   20130:	b188      	cbz	r0, 20156 <at_handler_xt3412+0x42>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   20132:	466c      	mov	r4, sp
   20134:	b088      	sub	sp, #32
   20136:	466a      	mov	r2, sp
   20138:	4b0d      	ldr	r3, [pc, #52]	; (20170 <at_handler_xt3412+0x5c>)
   2013a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2013e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20142:	2303      	movs	r3, #3
   20144:	480b      	ldr	r0, [pc, #44]	; (20174 <at_handler_xt3412+0x60>)
   20146:	f842 3f10 	str.w	r3, [r2, #16]!
   2014a:	f009 fd76 	bl	29c3a <z_log_msg_static_create.constprop.0>
   2014e:	46a5      	mov	sp, r4
}
   20150:	374c      	adds	r7, #76	; 0x4c
   20152:	46bd      	mov	sp, r7
   20154:	bd90      	pop	{r4, r7, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   20156:	68bb      	ldr	r3, [r7, #8]
   20158:	68fa      	ldr	r2, [r7, #12]
   2015a:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   2015e:	3b08      	subs	r3, #8
   20160:	4313      	orrs	r3, r2
   20162:	d1f5      	bne.n	20150 <at_handler_xt3412+0x3c>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   20164:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   20166:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   20168:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   2016a:	f000 fd1d 	bl	20ba8 <event_handler_list_dispatch>
   2016e:	e7ef      	b.n	20150 <at_handler_xt3412+0x3c>
   20170:	0002db51 	.word	0x0002db51
   20174:	0002bde0 	.word	0x0002bde0

00020178 <at_handler_cedrxp>:
{
   20178:	b590      	push	{r4, r7, lr}
   2017a:	4604      	mov	r4, r0
   2017c:	b093      	sub	sp, #76	; 0x4c
   2017e:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   20180:	2100      	movs	r1, #0
   20182:	2248      	movs	r2, #72	; 0x48
   20184:	4638      	mov	r0, r7
   20186:	f00b f9aa 	bl	2b4de <memset>
	err = parse_edrx(response, &evt.edrx_cfg);
   2018a:	4620      	mov	r0, r4
   2018c:	f107 0108 	add.w	r1, r7, #8
   20190:	f7f8 ff36 	bl	19000 <parse_edrx>
	if (err) {
   20194:	b188      	cbz	r0, 201ba <at_handler_cedrxp+0x42>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   20196:	466c      	mov	r4, sp
   20198:	b088      	sub	sp, #32
   2019a:	466a      	mov	r2, sp
   2019c:	4b0a      	ldr	r3, [pc, #40]	; (201c8 <at_handler_cedrxp+0x50>)
   2019e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   201a2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   201a6:	2303      	movs	r3, #3
   201a8:	4808      	ldr	r0, [pc, #32]	; (201cc <at_handler_cedrxp+0x54>)
   201aa:	f842 3f10 	str.w	r3, [r2, #16]!
   201ae:	f009 fd44 	bl	29c3a <z_log_msg_static_create.constprop.0>
   201b2:	46a5      	mov	sp, r4
}
   201b4:	374c      	adds	r7, #76	; 0x4c
   201b6:	46bd      	mov	sp, r7
   201b8:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   201ba:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   201bc:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   201be:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   201c0:	f000 fcf2 	bl	20ba8 <event_handler_list_dispatch>
   201c4:	e7f6      	b.n	201b4 <at_handler_cedrxp+0x3c>
   201c6:	bf00      	nop
   201c8:	0002db85 	.word	0x0002db85
   201cc:	0002bde0 	.word	0x0002bde0

000201d0 <at_handler_cscon>:
{
   201d0:	b590      	push	{r4, r7, lr}
   201d2:	4604      	mov	r4, r0
   201d4:	b093      	sub	sp, #76	; 0x4c
   201d6:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   201d8:	2248      	movs	r2, #72	; 0x48
   201da:	2100      	movs	r1, #0
   201dc:	4638      	mov	r0, r7
   201de:	f00b f97e 	bl	2b4de <memset>
	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   201e2:	2201      	movs	r2, #1
   201e4:	4620      	mov	r0, r4
   201e6:	f107 0108 	add.w	r1, r7, #8
   201ea:	f000 fdbb 	bl	20d64 <parse_rrc_mode>
	if (err) {
   201ee:	b188      	cbz	r0, 20214 <at_handler_cscon+0x44>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   201f0:	466c      	mov	r4, sp
   201f2:	b088      	sub	sp, #32
   201f4:	466a      	mov	r2, sp
   201f6:	4b0a      	ldr	r3, [pc, #40]	; (20220 <at_handler_cscon+0x50>)
   201f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   201fc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20200:	2303      	movs	r3, #3
   20202:	4808      	ldr	r0, [pc, #32]	; (20224 <at_handler_cscon+0x54>)
   20204:	f842 3f10 	str.w	r3, [r2, #16]!
   20208:	f009 fd17 	bl	29c3a <z_log_msg_static_create.constprop.0>
   2020c:	46a5      	mov	sp, r4
}
   2020e:	374c      	adds	r7, #76	; 0x4c
   20210:	46bd      	mov	sp, r7
   20212:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   20214:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   20216:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   20218:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   2021a:	f000 fcc5 	bl	20ba8 <event_handler_list_dispatch>
   2021e:	e7f6      	b.n	2020e <at_handler_cscon+0x3e>
   20220:	0002dba1 	.word	0x0002dba1
   20224:	0002bde0 	.word	0x0002bde0

00020228 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   20228:	2300      	movs	r3, #0
{
   2022a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2022e:	b090      	sub	sp, #64	; 0x40
   20230:	af00      	add	r7, sp, #0
   20232:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   20234:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   20236:	e9c7 3301 	strd	r3, r3, [r7, #4]
	char tau_ext_str[9] = {0};
   2023a:	e9c7 3304 	strd	r3, r3, [r7, #16]
	char tau_legacy_str[9] = {0};
   2023e:	e9c7 3307 	strd	r3, r3, [r7, #28]
	char active_time_str[9] = {0};
   20242:	733b      	strb	r3, [r7, #12]
	char tau_ext_str[9] = {0};
   20244:	763b      	strb	r3, [r7, #24]
	char tau_legacy_str[9] = {0};
   20246:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if ((tau == NULL) || (active_time == NULL)) {
   2024a:	2800      	cmp	r0, #0
   2024c:	d07e      	beq.n	2034c <lte_lc_psm_get+0x124>
   2024e:	2900      	cmp	r1, #0
   20250:	d07c      	beq.n	2034c <lte_lc_psm_get+0x124>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   20252:	4c40      	ldr	r4, [pc, #256]	; (20354 <lte_lc_psm_get+0x12c>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   20254:	21a0      	movs	r1, #160	; 0xa0
   20256:	4620      	mov	r0, r4
   20258:	4a3f      	ldr	r2, [pc, #252]	; (20358 <lte_lc_psm_get+0x130>)
	response[0] = '\0';
   2025a:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   2025c:	f004 fade 	bl	2481c <nrf_modem_at_cmd>
	if (err) {
   20260:	b1a8      	cbz	r0, 2028e <lte_lc_psm_get+0x66>
		LOG_ERR("AT command failed, error: %d", err);
   20262:	466c      	mov	r4, sp
   20264:	b088      	sub	sp, #32
   20266:	466a      	mov	r2, sp
   20268:	4b3c      	ldr	r3, [pc, #240]	; (2035c <lte_lc_psm_get+0x134>)
   2026a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2026e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20272:	2303      	movs	r3, #3
   20274:	483a      	ldr	r0, [pc, #232]	; (20360 <lte_lc_psm_get+0x138>)
   20276:	f842 3f10 	str.w	r3, [r2, #16]!
   2027a:	f009 fcde 	bl	29c3a <z_log_msg_static_create.constprop.0>
   2027e:	46a5      	mov	sp, r4
		return -EFAULT;
   20280:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec", *tau, *active_time);

	return 0;
}
   20284:	4620      	mov	r0, r4
   20286:	3740      	adds	r7, #64	; 0x40
   20288:	46bd      	mov	sp, r7
   2028a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	comma_ptr = strchr(response, ch);
   2028e:	4620      	mov	r0, r4
   20290:	212c      	movs	r1, #44	; 0x2c
   20292:	f00b f92e 	bl	2b4f2 <strchr>
	if (!comma_ptr) {
   20296:	4604      	mov	r4, r0
   20298:	2800      	cmp	r0, #0
   2029a:	d048      	beq.n	2032e <lte_lc_psm_get+0x106>
   2029c:	f04f 080c 	mov.w	r8, #12
			comma_ptr = strchr(comma_ptr + 1, ch);
   202a0:	1c60      	adds	r0, r4, #1
   202a2:	212c      	movs	r1, #44	; 0x2c
   202a4:	f00b f925 	bl	2b4f2 <strchr>
	for (int i = 0; i < 12; i++) {
   202a8:	f1b8 0801 	subs.w	r8, r8, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   202ac:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   202ae:	d131      	bne.n	20314 <lte_lc_psm_get+0xec>
	if (comma_ptr) {
   202b0:	b390      	cbz	r0, 20318 <lte_lc_psm_get+0xf0>
		strncpy(active_time_str, comma_ptr + 2, 8);
   202b2:	1c81      	adds	r1, r0, #2
   202b4:	2208      	movs	r2, #8
   202b6:	1d38      	adds	r0, r7, #4
   202b8:	f00b f942 	bl	2b540 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   202bc:	1c60      	adds	r0, r4, #1
   202be:	212c      	movs	r1, #44	; 0x2c
   202c0:	f00b f917 	bl	2b4f2 <strchr>
	if (comma_ptr) {
   202c4:	4604      	mov	r4, r0
   202c6:	b338      	cbz	r0, 20318 <lte_lc_psm_get+0xf0>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   202c8:	1c81      	adds	r1, r0, #2
   202ca:	2208      	movs	r2, #8
   202cc:	f107 0010 	add.w	r0, r7, #16
   202d0:	f00b f936 	bl	2b540 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   202d4:	212c      	movs	r1, #44	; 0x2c
   202d6:	1c60      	adds	r0, r4, #1
   202d8:	f00b f90b 	bl	2b4f2 <strchr>
	if (comma_ptr) {
   202dc:	bb50      	cbnz	r0, 20334 <lte_lc_psm_get+0x10c>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   202de:	f107 0328 	add.w	r3, r7, #40	; 0x28
   202e2:	f107 021c 	add.w	r2, r7, #28
   202e6:	f107 0110 	add.w	r1, r7, #16
   202ea:	1d38      	adds	r0, r7, #4
   202ec:	f000 fca6 	bl	20c3c <parse_psm>
	if (err) {
   202f0:	4604      	mov	r4, r0
   202f2:	b330      	cbz	r0, 20342 <lte_lc_psm_get+0x11a>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   202f4:	466d      	mov	r5, sp
   202f6:	b088      	sub	sp, #32
   202f8:	466a      	mov	r2, sp
   202fa:	4b1a      	ldr	r3, [pc, #104]	; (20364 <lte_lc_psm_get+0x13c>)
   202fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20300:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20304:	2303      	movs	r3, #3
   20306:	4816      	ldr	r0, [pc, #88]	; (20360 <lte_lc_psm_get+0x138>)
   20308:	f842 3f10 	str.w	r3, [r2, #16]!
   2030c:	f009 fc95 	bl	29c3a <z_log_msg_static_create.constprop.0>
   20310:	46ad      	mov	sp, r5
		return err;
   20312:	e7b7      	b.n	20284 <lte_lc_psm_get+0x5c>
		if (comma_ptr) {
   20314:	2c00      	cmp	r4, #0
   20316:	d1c3      	bne.n	202a0 <lte_lc_psm_get+0x78>
		LOG_ERR("AT command parsing failed");
   20318:	4b13      	ldr	r3, [pc, #76]	; (20368 <lte_lc_psm_get+0x140>)
   2031a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2031e:	63fb      	str	r3, [r7, #60]	; 0x3c
   20320:	2302      	movs	r3, #2
   20322:	480f      	ldr	r0, [pc, #60]	; (20360 <lte_lc_psm_get+0x138>)
   20324:	63bb      	str	r3, [r7, #56]	; 0x38
   20326:	f107 0238 	add.w	r2, r7, #56	; 0x38
   2032a:	f009 fc86 	bl	29c3a <z_log_msg_static_create.constprop.0>
		return -EBADMSG;
   2032e:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   20332:	e7a7      	b.n	20284 <lte_lc_psm_get+0x5c>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   20334:	1c81      	adds	r1, r0, #2
   20336:	2208      	movs	r2, #8
   20338:	f107 001c 	add.w	r0, r7, #28
   2033c:	f00b f900 	bl	2b540 <strncpy>
   20340:	e7cd      	b.n	202de <lte_lc_psm_get+0xb6>
	*tau = psm_cfg.tau;
   20342:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20344:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   20346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20348:	602b      	str	r3, [r5, #0]
	return 0;
   2034a:	e79b      	b.n	20284 <lte_lc_psm_get+0x5c>
		return -EINVAL;
   2034c:	f06f 0415 	mvn.w	r4, #21
   20350:	e798      	b.n	20284 <lte_lc_psm_get+0x5c>
   20352:	bf00      	nop
   20354:	2000dfa0 	.word	0x2000dfa0
   20358:	0002dbc8 	.word	0x0002dbc8
   2035c:	0002dbd5 	.word	0x0002dbd5
   20360:	0002bde0 	.word	0x0002bde0
   20364:	0002dc0c 	.word	0x0002dc0c
   20368:	0002dbf2 	.word	0x0002dbf2

0002036c <at_handler_cereg>:
{
   2036c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	enum lte_lc_nw_reg_status reg_status = 0;
   20370:	2500      	movs	r5, #0
{
   20372:	4604      	mov	r4, r0
   20374:	b0aa      	sub	sp, #168	; 0xa8
   20376:	af02      	add	r7, sp, #8
	struct lte_lc_evt evt = {0};
   20378:	2248      	movs	r2, #72	; 0x48
   2037a:	2100      	movs	r1, #0
   2037c:	f107 0058 	add.w	r0, r7, #88	; 0x58
   20380:	f00b f8ad 	bl	2b4de <memset>
	struct lte_lc_cell cell = {0};
   20384:	2230      	movs	r2, #48	; 0x30
   20386:	4629      	mov	r1, r5
   20388:	f107 0028 	add.w	r0, r7, #40	; 0x28
	enum lte_lc_nw_reg_status reg_status = 0;
   2038c:	71bd      	strb	r5, [r7, #6]
	struct lte_lc_psm_cfg psm_cfg = {0};
   2038e:	f107 0808 	add.w	r8, r7, #8
	struct lte_lc_cell cell = {0};
   20392:	f00b f8a4 	bl	2b4de <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   20396:	1dfb      	adds	r3, r7, #7
	struct lte_lc_psm_cfg psm_cfg = {0};
   20398:	60bd      	str	r5, [r7, #8]
   2039a:	f8c8 5004 	str.w	r5, [r8, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   2039e:	2101      	movs	r1, #1
   203a0:	9300      	str	r3, [sp, #0]
   203a2:	4620      	mov	r0, r4
   203a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
   203a8:	1dba      	adds	r2, r7, #6
   203aa:	f000 fd4d 	bl	20e48 <parse_cereg>
	if (err) {
   203ae:	b1b0      	cbz	r0, 203de <at_handler_cereg+0x72>
		LOG_ERR("Failed to parse notification (error %d): %s",
   203b0:	466d      	mov	r5, sp
   203b2:	b08a      	sub	sp, #40	; 0x28
   203b4:	aa02      	add	r2, sp, #8
   203b6:	4b4e      	ldr	r3, [pc, #312]	; (204f0 <at_handler_cereg+0x184>)
   203b8:	61d4      	str	r4, [r2, #28]
   203ba:	e9c2 3005 	strd	r3, r0, [r2, #20]
   203be:	f240 3301 	movw	r3, #769	; 0x301
   203c2:	8413      	strh	r3, [r2, #32]
   203c4:	4b4b      	ldr	r3, [pc, #300]	; (204f4 <at_handler_cereg+0x188>)
   203c6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   203ca:	484b      	ldr	r0, [pc, #300]	; (204f8 <at_handler_cereg+0x18c>)
   203cc:	f842 3f10 	str.w	r3, [r2, #16]!
   203d0:	f009 fc33 	bl	29c3a <z_log_msg_static_create.constprop.0>
   203d4:	46ad      	mov	sp, r5
}
   203d6:	37a0      	adds	r7, #160	; 0xa0
   203d8:	46bd      	mov	sp, r7
   203da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   203de:	79bb      	ldrb	r3, [r7, #6]
   203e0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   203e4:	2b01      	cmp	r3, #1
   203e6:	d104      	bne.n	203f2 <at_handler_cereg+0x86>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   203e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   203ea:	3301      	adds	r3, #1
   203ec:	d162      	bne.n	204b4 <at_handler_cereg+0x148>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   203ee:	2304      	movs	r3, #4
   203f0:	71bb      	strb	r3, [r7, #6]
	if (event_handler_list_is_empty()) {
   203f2:	f000 fba5 	bl	20b40 <event_handler_list_is_empty>
   203f6:	2800      	cmp	r0, #0
   203f8:	d1ed      	bne.n	203d6 <at_handler_cereg+0x6a>
	if (reg_status != prev_reg_status) {
   203fa:	4a40      	ldr	r2, [pc, #256]	; (204fc <at_handler_cereg+0x190>)
   203fc:	79bb      	ldrb	r3, [r7, #6]
   203fe:	7811      	ldrb	r1, [r2, #0]
   20400:	4299      	cmp	r1, r3
   20402:	d008      	beq.n	20416 <at_handler_cereg+0xaa>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   20404:	f887 0058 	strb.w	r0, [r7, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   20408:	f107 0058 	add.w	r0, r7, #88	; 0x58
		prev_reg_status = reg_status;
   2040c:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   2040e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   20412:	f000 fbc9 	bl	20ba8 <event_handler_list_dispatch>
	if ((cell.id != prev_cell.id) || (cell.tac != prev_cell.tac)) {
   20416:	4b3a      	ldr	r3, [pc, #232]	; (20500 <at_handler_cereg+0x194>)
   20418:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2041a:	689a      	ldr	r2, [r3, #8]
   2041c:	4291      	cmp	r1, r2
   2041e:	d103      	bne.n	20428 <at_handler_cereg+0xbc>
   20420:	68db      	ldr	r3, [r3, #12]
   20422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   20424:	429a      	cmp	r2, r3
   20426:	d01d      	beq.n	20464 <at_handler_cereg+0xf8>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   20428:	2304      	movs	r3, #4
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   2042a:	4d35      	ldr	r5, [pc, #212]	; (20500 <at_handler_cereg+0x194>)
   2042c:	f107 0428 	add.w	r4, r7, #40	; 0x28
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   20430:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   20434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   20436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2043a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2043c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   20440:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   20444:	f107 0660 	add.w	r6, r7, #96	; 0x60
   20448:	f107 0528 	add.w	r5, r7, #40	; 0x28
   2044c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2044e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20452:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20454:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   20458:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   2045c:	f107 0058 	add.w	r0, r7, #88	; 0x58
   20460:	f000 fba2 	bl	20ba8 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   20464:	4a27      	ldr	r2, [pc, #156]	; (20504 <at_handler_cereg+0x198>)
   20466:	79fb      	ldrb	r3, [r7, #7]
   20468:	7811      	ldrb	r1, [r2, #0]
   2046a:	4299      	cmp	r1, r3
   2046c:	d009      	beq.n	20482 <at_handler_cereg+0x116>
		prev_lte_mode = lte_mode;
   2046e:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   20470:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   20472:	f107 0058 	add.w	r0, r7, #88	; 0x58
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   20476:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
		evt.lte_mode = lte_mode;
   2047a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   2047e:	f000 fb93 	bl	20ba8 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   20482:	79bb      	ldrb	r3, [r7, #6]
   20484:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   20488:	2b01      	cmp	r3, #1
   2048a:	d1a4      	bne.n	203d6 <at_handler_cereg+0x6a>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   2048c:	4640      	mov	r0, r8
   2048e:	f107 010c 	add.w	r1, r7, #12
   20492:	f7ff fec9 	bl	20228 <lte_lc_psm_get>
	if (err) {
   20496:	b188      	cbz	r0, 204bc <at_handler_cereg+0x150>
		if (err != -EBADMSG) {
   20498:	304d      	adds	r0, #77	; 0x4d
   2049a:	d09c      	beq.n	203d6 <at_handler_cereg+0x6a>
			LOG_ERR("Failed to get PSM information");
   2049c:	4b1a      	ldr	r3, [pc, #104]	; (20508 <at_handler_cereg+0x19c>)
   2049e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   204a2:	627b      	str	r3, [r7, #36]	; 0x24
   204a4:	2302      	movs	r3, #2
   204a6:	4814      	ldr	r0, [pc, #80]	; (204f8 <at_handler_cereg+0x18c>)
   204a8:	623b      	str	r3, [r7, #32]
   204aa:	f107 0220 	add.w	r2, r7, #32
   204ae:	f009 fbc4 	bl	29c3a <z_log_msg_static_create.constprop.0>
   204b2:	e790      	b.n	203d6 <at_handler_cereg+0x6a>
	z_impl_k_sem_give(sem);
   204b4:	4815      	ldr	r0, [pc, #84]	; (2050c <at_handler_cereg+0x1a0>)
   204b6:	f004 fff5 	bl	254a4 <z_impl_k_sem_give>
}
   204ba:	e79a      	b.n	203f2 <at_handler_cereg+0x86>
	if ((psm_cfg.tau != prev_psm_cfg.tau) ||
   204bc:	4b14      	ldr	r3, [pc, #80]	; (20510 <at_handler_cereg+0x1a4>)
   204be:	68b9      	ldr	r1, [r7, #8]
   204c0:	681a      	ldr	r2, [r3, #0]
   204c2:	4291      	cmp	r1, r2
   204c4:	461a      	mov	r2, r3
   204c6:	d103      	bne.n	204d0 <at_handler_cereg+0x164>
   204c8:	685b      	ldr	r3, [r3, #4]
   204ca:	68f9      	ldr	r1, [r7, #12]
   204cc:	4299      	cmp	r1, r3
   204ce:	d082      	beq.n	203d6 <at_handler_cereg+0x6a>
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   204d0:	e898 0003 	ldmia.w	r8, {r0, r1}
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   204d4:	2301      	movs	r3, #1
   204d6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   204da:	f107 0360 	add.w	r3, r7, #96	; 0x60
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   204de:	e882 0003 	stmia.w	r2, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   204e2:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   204e6:	f107 0058 	add.w	r0, r7, #88	; 0x58
   204ea:	f000 fb5d 	bl	20ba8 <event_handler_list_dispatch>
   204ee:	e772      	b.n	203d6 <at_handler_cereg+0x6a>
   204f0:	0002dc39 	.word	0x0002dc39
   204f4:	01000004 	.word	0x01000004
   204f8:	0002bde0 	.word	0x0002bde0
   204fc:	2000e041 	.word	0x2000e041
   20500:	2000ce70 	.word	0x2000ce70
   20504:	2000e040 	.word	0x2000e040
   20508:	0002dc65 	.word	0x0002dc65
   2050c:	2000d498 	.word	0x2000d498
   20510:	2000d490 	.word	0x2000d490

00020514 <lte_lc_nw_reg_status_get>:

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   20514:	2300      	movs	r3, #0
{
   20516:	b590      	push	{r4, r7, lr}
   20518:	b083      	sub	sp, #12
   2051a:	af00      	add	r7, sp, #0

	if (status == NULL) {
   2051c:	4604      	mov	r4, r0
	uint32_t cell_id = 0;
   2051e:	607b      	str	r3, [r7, #4]
	if (status == NULL) {
   20520:	b320      	cbz	r0, 2056c <lte_lc_nw_reg_status_get+0x58>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   20522:	4914      	ldr	r1, [pc, #80]	; (20574 <lte_lc_nw_reg_status_get+0x60>)
   20524:	4814      	ldr	r0, [pc, #80]	; (20578 <lte_lc_nw_reg_status_get+0x64>)
   20526:	1d3b      	adds	r3, r7, #4
   20528:	1cba      	adds	r2, r7, #2
   2052a:	f004 fa15 	bl	24958 <nrf_modem_at_scanf>
		"%hu,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   2052e:	2800      	cmp	r0, #0
   20530:	dc13      	bgt.n	2055a <lte_lc_nw_reg_status_get+0x46>
		LOG_ERR("Could not get registration status, error: %d", err);
   20532:	466c      	mov	r4, sp
   20534:	b088      	sub	sp, #32
   20536:	466a      	mov	r2, sp
   20538:	4b10      	ldr	r3, [pc, #64]	; (2057c <lte_lc_nw_reg_status_get+0x68>)
   2053a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2053e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20542:	2303      	movs	r3, #3
   20544:	480e      	ldr	r0, [pc, #56]	; (20580 <lte_lc_nw_reg_status_get+0x6c>)
   20546:	f842 3f10 	str.w	r3, [r2, #16]!
   2054a:	f009 fb76 	bl	29c3a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   2054e:	f06f 000d 	mvn.w	r0, #13
   20552:	46a5      	mov	sp, r4
	} else {
		*status = status_tmp;
	}

	return 0;
}
   20554:	370c      	adds	r7, #12
   20556:	46bd      	mov	sp, r7
   20558:	bd90      	pop	{r4, r7, pc}
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   2055a:	687b      	ldr	r3, [r7, #4]
   2055c:	3301      	adds	r3, #1
   2055e:	d103      	bne.n	20568 <lte_lc_nw_reg_status_get+0x54>
   20560:	2304      	movs	r3, #4
	return 0;
   20562:	2000      	movs	r0, #0
		*status = LTE_LC_NW_REG_UNKNOWN;
   20564:	7023      	strb	r3, [r4, #0]
   20566:	e7f5      	b.n	20554 <lte_lc_nw_reg_status_get+0x40>
		*status = status_tmp;
   20568:	78bb      	ldrb	r3, [r7, #2]
   2056a:	e7fa      	b.n	20562 <lte_lc_nw_reg_status_get+0x4e>
		return -EINVAL;
   2056c:	f06f 0015 	mvn.w	r0, #21
   20570:	e7f0      	b.n	20554 <lte_lc_nw_reg_status_get+0x40>
   20572:	bf00      	nop
   20574:	0002dc83 	.word	0x0002dc83
   20578:	0002dca0 	.word	0x0002dca0
   2057c:	0002dcaa 	.word	0x0002dcaa
   20580:	0002bde0 	.word	0x0002bde0

00020584 <lte_lc_system_mode_set>:

int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
   20584:	b5b0      	push	{r4, r5, r7, lr}
	int err;

	switch (mode) {
   20586:	2807      	cmp	r0, #7
{
   20588:	4605      	mov	r5, r0
   2058a:	460c      	mov	r4, r1
   2058c:	af00      	add	r7, sp, #0
	switch (mode) {
   2058e:	d912      	bls.n	205b6 <lte_lc_system_mode_set+0x32>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   20590:	466c      	mov	r4, sp
   20592:	b088      	sub	sp, #32
   20594:	466a      	mov	r2, sp
   20596:	4b23      	ldr	r3, [pc, #140]	; (20624 <lte_lc_system_mode_set+0xa0>)
   20598:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2059c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   205a0:	2303      	movs	r3, #3
   205a2:	4821      	ldr	r0, [pc, #132]	; (20628 <lte_lc_system_mode_set+0xa4>)
   205a4:	f842 3f10 	str.w	r3, [r2, #16]!
   205a8:	f009 fb47 	bl	29c3a <z_log_msg_static_create.constprop.0>
   205ac:	46a5      	mov	sp, r4
		return -EINVAL;
   205ae:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   205b2:	46bd      	mov	sp, r7
   205b4:	bdb0      	pop	{r4, r5, r7, pc}
	switch (preference) {
   205b6:	2904      	cmp	r1, #4
   205b8:	d90f      	bls.n	205da <lte_lc_system_mode_set+0x56>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   205ba:	466d      	mov	r5, sp
   205bc:	b088      	sub	sp, #32
   205be:	466a      	mov	r2, sp
   205c0:	4b1a      	ldr	r3, [pc, #104]	; (2062c <lte_lc_system_mode_set+0xa8>)
   205c2:	4819      	ldr	r0, [pc, #100]	; (20628 <lte_lc_system_mode_set+0xa4>)
   205c4:	e9c2 3105 	strd	r3, r1, [r2, #20]
   205c8:	2303      	movs	r3, #3
   205ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   205ce:	f842 3f10 	str.w	r3, [r2, #16]!
   205d2:	f009 fb32 	bl	29c3a <z_log_msg_static_create.constprop.0>
   205d6:	46ad      	mov	sp, r5
		return -EINVAL;
   205d8:	e7e9      	b.n	205ae <lte_lc_system_mode_set+0x2a>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   205da:	4b15      	ldr	r3, [pc, #84]	; (20630 <lte_lc_system_mode_set+0xac>)
   205dc:	5c5a      	ldrb	r2, [r3, r1]
   205de:	4b15      	ldr	r3, [pc, #84]	; (20634 <lte_lc_system_mode_set+0xb0>)
   205e0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   205e4:	4814      	ldr	r0, [pc, #80]	; (20638 <lte_lc_system_mode_set+0xb4>)
   205e6:	f004 f8cd 	bl	24784 <nrf_modem_at_printf>
	if (err) {
   205ea:	b188      	cbz	r0, 20610 <lte_lc_system_mode_set+0x8c>
		LOG_ERR("Could not send AT command, error: %d", err);
   205ec:	466c      	mov	r4, sp
   205ee:	b088      	sub	sp, #32
   205f0:	466a      	mov	r2, sp
   205f2:	4b12      	ldr	r3, [pc, #72]	; (2063c <lte_lc_system_mode_set+0xb8>)
   205f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   205f8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   205fc:	2303      	movs	r3, #3
   205fe:	480a      	ldr	r0, [pc, #40]	; (20628 <lte_lc_system_mode_set+0xa4>)
   20600:	f842 3f10 	str.w	r3, [r2, #16]!
   20604:	f009 fb19 	bl	29c3a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   20608:	f06f 000d 	mvn.w	r0, #13
   2060c:	46a5      	mov	sp, r4
   2060e:	e7d0      	b.n	205b2 <lte_lc_system_mode_set+0x2e>
	sys_mode_current = mode;
   20610:	4b0b      	ldr	r3, [pc, #44]	; (20640 <lte_lc_system_mode_set+0xbc>)
   20612:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   20614:	4b0b      	ldr	r3, [pc, #44]	; (20644 <lte_lc_system_mode_set+0xc0>)
   20616:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   20618:	4b0b      	ldr	r3, [pc, #44]	; (20648 <lte_lc_system_mode_set+0xc4>)
   2061a:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   2061c:	4b0b      	ldr	r3, [pc, #44]	; (2064c <lte_lc_system_mode_set+0xc8>)
   2061e:	701c      	strb	r4, [r3, #0]
	return 0;
   20620:	e7c7      	b.n	205b2 <lte_lc_system_mode_set+0x2e>
   20622:	bf00      	nop
   20624:	0002dcd7 	.word	0x0002dcd7
   20628:	0002bde0 	.word	0x0002bde0
   2062c:	0002dcf9 	.word	0x0002dcf9
   20630:	0002e048 	.word	0x0002e048
   20634:	0002c1bc 	.word	0x0002c1bc
   20638:	0002dd1e 	.word	0x0002dd1e
   2063c:	0002dd34 	.word	0x0002dd34
   20640:	2000e042 	.word	0x2000e042
   20644:	2000c771 	.word	0x2000c771
   20648:	2000e043 	.word	0x2000e043
   2064c:	2000e044 	.word	0x2000e044

00020650 <lte_lc_system_mode_get>:
int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
	int err;
	int mode_bitmask = 0;
	int ltem_mode = 0;
   20650:	2300      	movs	r3, #0
{
   20652:	b5b0      	push	{r4, r5, r7, lr}
   20654:	b08c      	sub	sp, #48	; 0x30
   20656:	af02      	add	r7, sp, #8
   20658:	460c      	mov	r4, r1
	int nbiot_mode = 0;
	int gps_mode = 0;
	int mode_preference = 0;

	if (mode == NULL) {
   2065a:	4605      	mov	r5, r0
	int nbiot_mode = 0;
   2065c:	e9c7 3300 	strd	r3, r3, [r7]
	int mode_preference = 0;
   20660:	e9c7 3302 	strd	r3, r3, [r7, #8]
	if (mode == NULL) {
   20664:	2800      	cmp	r0, #0
   20666:	f000 808b 	beq.w	20780 <lte_lc_system_mode_get+0x130>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   2066a:	f107 030c 	add.w	r3, r7, #12
   2066e:	9301      	str	r3, [sp, #4]
   20670:	f107 0308 	add.w	r3, r7, #8
   20674:	9300      	str	r3, [sp, #0]
   20676:	463a      	mov	r2, r7
   20678:	4943      	ldr	r1, [pc, #268]	; (20788 <lte_lc_system_mode_get+0x138>)
   2067a:	4844      	ldr	r0, [pc, #272]	; (2078c <lte_lc_system_mode_get+0x13c>)
   2067c:	1d3b      	adds	r3, r7, #4
   2067e:	f004 f96b 	bl	24958 <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   20682:	2804      	cmp	r0, #4
   20684:	d00f      	beq.n	206a6 <lte_lc_system_mode_get+0x56>
		LOG_ERR("Failed to get system mode, error: %d", err);
   20686:	466c      	mov	r4, sp
   20688:	b088      	sub	sp, #32
   2068a:	aa02      	add	r2, sp, #8
   2068c:	4b40      	ldr	r3, [pc, #256]	; (20790 <lte_lc_system_mode_get+0x140>)
   2068e:	e9c2 3005 	strd	r3, r0, [r2, #20]
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   20692:	2303      	movs	r3, #3
   20694:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20698:	483e      	ldr	r0, [pc, #248]	; (20794 <lte_lc_system_mode_get+0x144>)
   2069a:	f842 3f10 	str.w	r3, [r2, #16]!
   2069e:	f009 facc 	bl	29c3a <z_log_msg_static_create.constprop.0>
   206a2:	46a5      	mov	sp, r4
			return -EFAULT;
   206a4:	e03d      	b.n	20722 <lte_lc_system_mode_get+0xd2>
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   206a6:	687b      	ldr	r3, [r7, #4]
   206a8:	1e1a      	subs	r2, r3, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   206aa:	683b      	ldr	r3, [r7, #0]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   206ac:	bf18      	it	ne
   206ae:	2201      	movne	r2, #1
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   206b0:	3b00      	subs	r3, #0
   206b2:	bf18      	it	ne
   206b4:	2301      	movne	r3, #1
   206b6:	005b      	lsls	r3, r3, #1
   206b8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   206bc:	68ba      	ldr	r2, [r7, #8]
   206be:	3a00      	subs	r2, #0
   206c0:	bf18      	it	ne
   206c2:	2201      	movne	r2, #1
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   206c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
	switch (mode_bitmask) {
   206c8:	2b0e      	cmp	r3, #14
   206ca:	d81f      	bhi.n	2070c <lte_lc_system_mode_get+0xbc>
   206cc:	e8df f003 	tbb	[pc, r3]
   206d0:	1e081e2c 	.word	0x1e081e2c
   206d4:	1e1a1e2e 	.word	0x1e1a1e2e
   206d8:	1e161e14 	.word	0x1e161e14
   206dc:	1e18      	.short	0x1e18
   206de:	1c          	.byte	0x1c
   206df:	00          	.byte	0x00
   206e0:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   206e2:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   206e4:	2c00      	cmp	r4, #0
   206e6:	d040      	beq.n	2076a <lte_lc_system_mode_get+0x11a>
		switch (mode_preference) {
   206e8:	68fb      	ldr	r3, [r7, #12]
   206ea:	2b04      	cmp	r3, #4
   206ec:	d836      	bhi.n	2075c <lte_lc_system_mode_get+0x10c>
   206ee:	e8df f003 	tbb	[pc, r3]
   206f2:	2d1f      	.short	0x2d1f
   206f4:	312f      	.short	0x312f
   206f6:	33          	.byte	0x33
   206f7:	00          	.byte	0x00
		break;
   206f8:	2303      	movs	r3, #3
   206fa:	e7f2      	b.n	206e2 <lte_lc_system_mode_get+0x92>
		break;
   206fc:	2304      	movs	r3, #4
   206fe:	e7f0      	b.n	206e2 <lte_lc_system_mode_get+0x92>
		break;
   20700:	2305      	movs	r3, #5
   20702:	e7ee      	b.n	206e2 <lte_lc_system_mode_get+0x92>
		break;
   20704:	2306      	movs	r3, #6
   20706:	e7ec      	b.n	206e2 <lte_lc_system_mode_get+0x92>
		break;
   20708:	2307      	movs	r3, #7
   2070a:	e7ea      	b.n	206e2 <lte_lc_system_mode_get+0x92>
		LOG_ERR("Invalid system mode, assuming parsing error");
   2070c:	4b22      	ldr	r3, [pc, #136]	; (20798 <lte_lc_system_mode_get+0x148>)
   2070e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20712:	627b      	str	r3, [r7, #36]	; 0x24
   20714:	2302      	movs	r3, #2
   20716:	481f      	ldr	r0, [pc, #124]	; (20794 <lte_lc_system_mode_get+0x144>)
   20718:	623b      	str	r3, [r7, #32]
   2071a:	f107 0220 	add.w	r2, r7, #32
   2071e:	f009 fa8c 	bl	29c3a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   20722:	f06f 000d 	mvn.w	r0, #13
   20726:	e026      	b.n	20776 <lte_lc_system_mode_get+0x126>
	switch (mode_bitmask) {
   20728:	2300      	movs	r3, #0
   2072a:	e7da      	b.n	206e2 <lte_lc_system_mode_get+0x92>
   2072c:	2302      	movs	r3, #2
   2072e:	e7d8      	b.n	206e2 <lte_lc_system_mode_get+0x92>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   20730:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   20732:	7023      	strb	r3, [r4, #0]
		}
	}

	if (sys_mode_current != *mode) {
   20734:	4b19      	ldr	r3, [pc, #100]	; (2079c <lte_lc_system_mode_get+0x14c>)
   20736:	782a      	ldrb	r2, [r5, #0]
   20738:	7819      	ldrb	r1, [r3, #0]
   2073a:	4291      	cmp	r1, r2
   2073c:	d11e      	bne.n	2077c <lte_lc_system_mode_get+0x12c>
		LOG_DBG("Current system mode updated from %d to %d",
			sys_mode_current, *mode);
		sys_mode_current = *mode;
	}

	if ((preference != NULL) && (mode_pref_current != *preference)) {
   2073e:	4b18      	ldr	r3, [pc, #96]	; (207a0 <lte_lc_system_mode_get+0x150>)
   20740:	7822      	ldrb	r2, [r4, #0]
   20742:	7819      	ldrb	r1, [r3, #0]
   20744:	4291      	cmp	r1, r2
   20746:	d015      	beq.n	20774 <lte_lc_system_mode_get+0x124>
		LOG_DBG("Current system mode preference updated from %d to %d",
			mode_pref_current, *preference);
		mode_pref_current = *preference;
   20748:	701a      	strb	r2, [r3, #0]
   2074a:	e013      	b.n	20774 <lte_lc_system_mode_get+0x124>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   2074c:	2301      	movs	r3, #1
   2074e:	e7f0      	b.n	20732 <lte_lc_system_mode_get+0xe2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   20750:	2302      	movs	r3, #2
   20752:	e7ee      	b.n	20732 <lte_lc_system_mode_get+0xe2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   20754:	2303      	movs	r3, #3
   20756:	e7ec      	b.n	20732 <lte_lc_system_mode_get+0xe2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   20758:	2304      	movs	r3, #4
   2075a:	e7ea      	b.n	20732 <lte_lc_system_mode_get+0xe2>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   2075c:	466c      	mov	r4, sp
   2075e:	b088      	sub	sp, #32
   20760:	aa02      	add	r2, sp, #8
   20762:	4910      	ldr	r1, [pc, #64]	; (207a4 <lte_lc_system_mode_get+0x154>)
   20764:	e9c2 1305 	strd	r1, r3, [r2, #20]
   20768:	e793      	b.n	20692 <lte_lc_system_mode_get+0x42>
	if (sys_mode_current != *mode) {
   2076a:	4a0c      	ldr	r2, [pc, #48]	; (2079c <lte_lc_system_mode_get+0x14c>)
   2076c:	7811      	ldrb	r1, [r2, #0]
   2076e:	4299      	cmp	r1, r3
		sys_mode_current = *mode;
   20770:	bf18      	it	ne
   20772:	7013      	strbne	r3, [r2, #0]
	}

	return 0;
   20774:	2000      	movs	r0, #0
}
   20776:	3728      	adds	r7, #40	; 0x28
   20778:	46bd      	mov	sp, r7
   2077a:	bdb0      	pop	{r4, r5, r7, pc}
		sys_mode_current = *mode;
   2077c:	701a      	strb	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   2077e:	e7de      	b.n	2073e <lte_lc_system_mode_get+0xee>
		return -EINVAL;
   20780:	f06f 0015 	mvn.w	r0, #21
   20784:	e7f7      	b.n	20776 <lte_lc_system_mode_get+0x126>
   20786:	bf00      	nop
   20788:	0002dd59 	.word	0x0002dd59
   2078c:	0002dd74 	.word	0x0002dd74
   20790:	0002dd84 	.word	0x0002dd84
   20794:	0002bde0 	.word	0x0002bde0
   20798:	0002dda9 	.word	0x0002dda9
   2079c:	2000e042 	.word	0x2000e042
   207a0:	2000e043 	.word	0x2000e043
   207a4:	0002ddd5 	.word	0x0002ddd5

000207a8 <init_and_config>:
{
   207a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   207ac:	b086      	sub	sp, #24
	if (is_initialized) {
   207ae:	4d27      	ldr	r5, [pc, #156]	; (2084c <init_and_config+0xa4>)
{
   207b0:	af00      	add	r7, sp, #0
	if (is_initialized) {
   207b2:	7829      	ldrb	r1, [r5, #0]
   207b4:	2900      	cmp	r1, #0
   207b6:	d146      	bne.n	20846 <init_and_config+0x9e>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   207b8:	4e25      	ldr	r6, [pc, #148]	; (20850 <init_and_config+0xa8>)
   207ba:	f8df 8098 	ldr.w	r8, [pc, #152]	; 20854 <init_and_config+0xac>
	return z_impl_k_sem_init(sem, initial_count, limit);
   207be:	2201      	movs	r2, #1
   207c0:	4825      	ldr	r0, [pc, #148]	; (20858 <init_and_config+0xb0>)
   207c2:	f00a faa9 	bl	2ad18 <z_impl_k_sem_init>
   207c6:	4631      	mov	r1, r6
   207c8:	4640      	mov	r0, r8
   207ca:	f7ff ff41 	bl	20650 <lte_lc_system_mode_get>
	if (err) {
   207ce:	4604      	mov	r4, r0
   207d0:	b198      	cbz	r0, 207fa <init_and_config+0x52>
		LOG_ERR("Could not get current system mode, error: %d", err);
   207d2:	466d      	mov	r5, sp
   207d4:	b088      	sub	sp, #32
   207d6:	466a      	mov	r2, sp
   207d8:	4b20      	ldr	r3, [pc, #128]	; (2085c <init_and_config+0xb4>)
			LOG_ERR("Could not set system mode, error: %d", err);
   207da:	e9c2 3405 	strd	r3, r4, [r2, #20]
   207de:	2303      	movs	r3, #3
   207e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   207e4:	481e      	ldr	r0, [pc, #120]	; (20860 <init_and_config+0xb8>)
   207e6:	f842 3f10 	str.w	r3, [r2, #16]!
   207ea:	f009 fa26 	bl	29c3a <z_log_msg_static_create.constprop.0>
   207ee:	46ad      	mov	sp, r5
}
   207f0:	4620      	mov	r0, r4
   207f2:	3718      	adds	r7, #24
   207f4:	46bd      	mov	sp, r7
   207f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((sys_mode_current != sys_mode_target) ||
   207fa:	4b1a      	ldr	r3, [pc, #104]	; (20864 <init_and_config+0xbc>)
   207fc:	7818      	ldrb	r0, [r3, #0]
	    (mode_pref_current != mode_pref_target)) {
   207fe:	4b1a      	ldr	r3, [pc, #104]	; (20868 <init_and_config+0xc0>)
   20800:	7819      	ldrb	r1, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   20802:	f898 3000 	ldrb.w	r3, [r8]
   20806:	4283      	cmp	r3, r0
   20808:	d102      	bne.n	20810 <init_and_config+0x68>
   2080a:	7833      	ldrb	r3, [r6, #0]
   2080c:	428b      	cmp	r3, r1
   2080e:	d008      	beq.n	20822 <init_and_config+0x7a>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   20810:	f7ff feb8 	bl	20584 <lte_lc_system_mode_set>
		if (err) {
   20814:	4604      	mov	r4, r0
   20816:	b120      	cbz	r0, 20822 <init_and_config+0x7a>
			LOG_ERR("Could not set system mode, error: %d", err);
   20818:	466d      	mov	r5, sp
   2081a:	b088      	sub	sp, #32
   2081c:	466a      	mov	r2, sp
   2081e:	4b13      	ldr	r3, [pc, #76]	; (2086c <init_and_config+0xc4>)
   20820:	e7db      	b.n	207da <init_and_config+0x32>
	err = enable_notifications();
   20822:	f7ff fac3 	bl	1fdac <enable_notifications>
	if (err) {
   20826:	4604      	mov	r4, r0
   20828:	b158      	cbz	r0, 20842 <init_and_config+0x9a>
		LOG_ERR("Failed to enable notifications");
   2082a:	4b11      	ldr	r3, [pc, #68]	; (20870 <init_and_config+0xc8>)
   2082c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20830:	617b      	str	r3, [r7, #20]
   20832:	2302      	movs	r3, #2
   20834:	480a      	ldr	r0, [pc, #40]	; (20860 <init_and_config+0xb8>)
   20836:	613b      	str	r3, [r7, #16]
   20838:	f107 0210 	add.w	r2, r7, #16
   2083c:	f009 f9fd 	bl	29c3a <z_log_msg_static_create.constprop.0>
		return err;
   20840:	e7d6      	b.n	207f0 <init_and_config+0x48>
	is_initialized = true;
   20842:	2301      	movs	r3, #1
   20844:	702b      	strb	r3, [r5, #0]
		return 0;
   20846:	2400      	movs	r4, #0
   20848:	e7d2      	b.n	207f0 <init_and_config+0x48>
   2084a:	bf00      	nop
   2084c:	2000e048 	.word	0x2000e048
   20850:	2000e043 	.word	0x2000e043
   20854:	2000e042 	.word	0x2000e042
   20858:	2000d498 	.word	0x2000d498
   2085c:	0002ddf4 	.word	0x0002ddf4
   20860:	0002bde0 	.word	0x0002bde0
   20864:	2000c771 	.word	0x2000c771
   20868:	2000e044 	.word	0x2000e044
   2086c:	0002de21 	.word	0x0002de21
   20870:	0002de46 	.word	0x0002de46

00020874 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   20874:	b590      	push	{r4, r7, lr}
   20876:	b083      	sub	sp, #12
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   20878:	4604      	mov	r4, r0
{
   2087a:	af00      	add	r7, sp, #0
	if (mode == NULL) {
   2087c:	b1f0      	cbz	r0, 208bc <lte_lc_func_mode_get+0x48>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   2087e:	4911      	ldr	r1, [pc, #68]	; (208c4 <lte_lc_func_mode_get+0x50>)
   20880:	4811      	ldr	r0, [pc, #68]	; (208c8 <lte_lc_func_mode_get+0x54>)
   20882:	1dba      	adds	r2, r7, #6
   20884:	f004 f868 	bl	24958 <nrf_modem_at_scanf>
	if (err != 1) {
   20888:	2801      	cmp	r0, #1
   2088a:	d013      	beq.n	208b4 <lte_lc_func_mode_get+0x40>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   2088c:	466c      	mov	r4, sp
   2088e:	b088      	sub	sp, #32
   20890:	466a      	mov	r2, sp
   20892:	4b0e      	ldr	r3, [pc, #56]	; (208cc <lte_lc_func_mode_get+0x58>)
   20894:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20898:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2089c:	2303      	movs	r3, #3
   2089e:	480c      	ldr	r0, [pc, #48]	; (208d0 <lte_lc_func_mode_get+0x5c>)
   208a0:	f842 3f10 	str.w	r3, [r2, #16]!
   208a4:	f009 f9c9 	bl	29c3a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   208a8:	f06f 000d 	mvn.w	r0, #13
   208ac:	46a5      	mov	sp, r4
	}

	*mode = mode_tmp;

	return 0;
}
   208ae:	370c      	adds	r7, #12
   208b0:	46bd      	mov	sp, r7
   208b2:	bd90      	pop	{r4, r7, pc}
	*mode = mode_tmp;
   208b4:	88fb      	ldrh	r3, [r7, #6]
	return 0;
   208b6:	2000      	movs	r0, #0
	*mode = mode_tmp;
   208b8:	7023      	strb	r3, [r4, #0]
	return 0;
   208ba:	e7f8      	b.n	208ae <lte_lc_func_mode_get+0x3a>
		return -EINVAL;
   208bc:	f06f 0015 	mvn.w	r0, #21
   208c0:	e7f5      	b.n	208ae <lte_lc_func_mode_get+0x3a>
   208c2:	bf00      	nop
   208c4:	0002de65 	.word	0x0002de65
   208c8:	0002de70 	.word	0x0002de70
   208cc:	0002de79 	.word	0x0002de79
   208d0:	0002bde0 	.word	0x0002bde0

000208d4 <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   208d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	switch (mode) {
   208d8:	2804      	cmp	r0, #4
{
   208da:	b086      	sub	sp, #24
   208dc:	4604      	mov	r4, r0
   208de:	af00      	add	r7, sp, #0
	switch (mode) {
   208e0:	d826      	bhi.n	20930 <lte_lc_func_mode_set+0x5c>
   208e2:	2804      	cmp	r0, #4
   208e4:	d829      	bhi.n	2093a <lte_lc_func_mode_set+0x66>
   208e6:	e8df f000 	tbb	[pc, r0]
   208ea:	0a3a      	.short	0x0a3a
   208ec:	283a      	.short	0x283a
   208ee:	3a          	.byte	0x3a
   208ef:	00          	.byte	0x00
   208f0:	2201      	movs	r2, #1
   208f2:	492a      	ldr	r1, [pc, #168]	; (2099c <lte_lc_func_mode_set+0xc8>)
   208f4:	409a      	lsls	r2, r3
   208f6:	420a      	tst	r2, r1
   208f8:	d131      	bne.n	2095e <lte_lc_func_mode_set+0x8a>
   208fa:	2b01      	cmp	r3, #1
   208fc:	d11d      	bne.n	2093a <lte_lc_func_mode_set+0x66>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   208fe:	f7ff fa55 	bl	1fdac <enable_notifications>
		if (err) {
   20902:	b360      	cbz	r0, 2095e <lte_lc_func_mode_set+0x8a>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   20904:	466c      	mov	r4, sp
   20906:	b088      	sub	sp, #32
   20908:	466a      	mov	r2, sp
   2090a:	4b25      	ldr	r3, [pc, #148]	; (209a0 <lte_lc_func_mode_set+0xcc>)
   2090c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20910:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20914:	2303      	movs	r3, #3
   20916:	4823      	ldr	r0, [pc, #140]	; (209a4 <lte_lc_func_mode_set+0xd0>)
   20918:	f842 3f10 	str.w	r3, [r2, #16]!
   2091c:	f009 f98d 	bl	29c3a <z_log_msg_static_create.constprop.0>
   20920:	46a5      	mov	sp, r4
			return -EFAULT;
   20922:	f06f 050d 	mvn.w	r5, #13
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   20926:	4628      	mov	r0, r5
   20928:	3718      	adds	r7, #24
   2092a:	46bd      	mov	sp, r7
   2092c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (mode) {
   20930:	f1a0 0314 	sub.w	r3, r0, #20
   20934:	b2db      	uxtb	r3, r3
   20936:	2b18      	cmp	r3, #24
   20938:	d9da      	bls.n	208f0 <lte_lc_func_mode_set+0x1c>
		LOG_ERR("Invalid functional mode: %d", mode);
   2093a:	466d      	mov	r5, sp
   2093c:	b088      	sub	sp, #32
   2093e:	466a      	mov	r2, sp
   20940:	4b19      	ldr	r3, [pc, #100]	; (209a8 <lte_lc_func_mode_set+0xd4>)
   20942:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20946:	e9c2 3405 	strd	r3, r4, [r2, #20]
   2094a:	2303      	movs	r3, #3
   2094c:	4815      	ldr	r0, [pc, #84]	; (209a4 <lte_lc_func_mode_set+0xd0>)
   2094e:	f842 3f10 	str.w	r3, [r2, #16]!
   20952:	f009 f972 	bl	29c3a <z_log_msg_static_create.constprop.0>
   20956:	46ad      	mov	sp, r5
		return -EINVAL;
   20958:	f06f 0515 	mvn.w	r5, #21
   2095c:	e7e3      	b.n	20926 <lte_lc_func_mode_set+0x52>
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   2095e:	4621      	mov	r1, r4
   20960:	4812      	ldr	r0, [pc, #72]	; (209ac <lte_lc_func_mode_set+0xd8>)
   20962:	f003 ff0f 	bl	24784 <nrf_modem_at_printf>
	if (err) {
   20966:	4605      	mov	r5, r0
   20968:	b198      	cbz	r0, 20992 <lte_lc_func_mode_set+0xbe>
		LOG_ERR("Failed to set functional mode. Please check XSYSTEMMODE.");
   2096a:	4b11      	ldr	r3, [pc, #68]	; (209b0 <lte_lc_func_mode_set+0xdc>)
   2096c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20970:	617b      	str	r3, [r7, #20]
   20972:	2302      	movs	r3, #2
   20974:	480b      	ldr	r0, [pc, #44]	; (209a4 <lte_lc_func_mode_set+0xd0>)
   20976:	613b      	str	r3, [r7, #16]
   20978:	f107 0210 	add.w	r2, r7, #16
   2097c:	f009 f95d 	bl	29c3a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   20980:	e7cf      	b.n	20922 <lte_lc_func_mode_set+0x4e>
		e->callback(mode, e->context);
   20982:	e9d6 3100 	ldrd	r3, r1, [r6]
   20986:	4620      	mov	r0, r4
   20988:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   2098a:	3608      	adds	r6, #8
   2098c:	4546      	cmp	r6, r8
   2098e:	d3f8      	bcc.n	20982 <lte_lc_func_mode_set+0xae>
   20990:	e7c9      	b.n	20926 <lte_lc_func_mode_set+0x52>
   20992:	4e08      	ldr	r6, [pc, #32]	; (209b4 <lte_lc_func_mode_set+0xe0>)
   20994:	f8df 8020 	ldr.w	r8, [pc, #32]	; 209b8 <lte_lc_func_mode_set+0xe4>
   20998:	e7f8      	b.n	2098c <lte_lc_func_mode_set+0xb8>
   2099a:	bf00      	nop
   2099c:	01300c01 	.word	0x01300c01
   209a0:	0002deb4 	.word	0x0002deb4
   209a4:	0002bde0 	.word	0x0002bde0
   209a8:	0002dede 	.word	0x0002dede
   209ac:	0002defa 	.word	0x0002defa
   209b0:	0002df05 	.word	0x0002df05
   209b4:	0002ed6c 	.word	0x0002ed6c
   209b8:	0002ed6c 	.word	0x0002ed6c

000209bc <connect_lte>:
{
   209bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   209c0:	4b4a      	ldr	r3, [pc, #296]	; (20aec <connect_lte+0x130>)
{
   209c2:	4605      	mov	r5, r0
	if (!is_initialized) {
   209c4:	781b      	ldrb	r3, [r3, #0]
{
   209c6:	b089      	sub	sp, #36	; 0x24
	if (!is_initialized) {
   209c8:	b973      	cbnz	r3, 209e8 <connect_lte+0x2c>
		LOG_ERR("The LTE link controller is not initialized");
   209ca:	4b49      	ldr	r3, [pc, #292]	; (20af0 <connect_lte+0x134>)
   209cc:	4849      	ldr	r0, [pc, #292]	; (20af4 <connect_lte+0x138>)
   209ce:	9307      	str	r3, [sp, #28]
   209d0:	2302      	movs	r3, #2
   209d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   209d6:	aa06      	add	r2, sp, #24
   209d8:	9306      	str	r3, [sp, #24]
   209da:	f009 f92e 	bl	29c3a <z_log_msg_static_create.constprop.0>
		return -EPERM;
   209de:	f04f 30ff 	mov.w	r0, #4294967295
}
   209e2:	b009      	add	sp, #36	; 0x24
   209e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   209e8:	2601      	movs	r6, #1
   209ea:	4c43      	ldr	r4, [pc, #268]	; (20af8 <connect_lte+0x13c>)
   209ec:	e8d4 3fef 	ldaex	r3, [r4]
   209f0:	e8c4 6fe2 	stlex	r2, r6, [r4]
   209f4:	2a00      	cmp	r2, #0
   209f6:	d1f9      	bne.n	209ec <connect_lte+0x30>
	if (atomic_set(&in_progress, 1)) {
   209f8:	2b00      	cmp	r3, #0
   209fa:	d173      	bne.n	20ae4 <connect_lte+0x128>
	err = lte_lc_nw_reg_status_get(&reg_status);
   209fc:	f10d 0007 	add.w	r0, sp, #7
   20a00:	f7ff fd88 	bl	20514 <lte_lc_nw_reg_status_get>
	if (err) {
   20a04:	b160      	cbz	r0, 20a20 <connect_lte+0x64>
		LOG_ERR("Failed to get current registration status");
   20a06:	4b3d      	ldr	r3, [pc, #244]	; (20afc <connect_lte+0x140>)
   20a08:	483a      	ldr	r0, [pc, #232]	; (20af4 <connect_lte+0x138>)
   20a0a:	9307      	str	r3, [sp, #28]
   20a0c:	2302      	movs	r3, #2
   20a0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20a12:	aa06      	add	r2, sp, #24
   20a14:	9306      	str	r3, [sp, #24]
   20a16:	f009 f910 	bl	29c3a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   20a1a:	f06f 000d 	mvn.w	r0, #13
   20a1e:	e7e0      	b.n	209e2 <connect_lte+0x26>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   20a20:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20a24:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   20a28:	2b01      	cmp	r3, #1
   20a2a:	d017      	beq.n	20a5c <connect_lte+0xa0>
	if (blocking) {
   20a2c:	b125      	cbz	r5, 20a38 <connect_lte+0x7c>
   20a2e:	4601      	mov	r1, r0
   20a30:	4632      	mov	r2, r6
   20a32:	4833      	ldr	r0, [pc, #204]	; (20b00 <connect_lte+0x144>)
   20a34:	f00a f970 	bl	2ad18 <z_impl_k_sem_init>
{
   20a38:	2702      	movs	r7, #2
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   20a3a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 20b04 <connect_lte+0x148>
   20a3e:	4e32      	ldr	r6, [pc, #200]	; (20b08 <connect_lte+0x14c>)
		err = lte_lc_func_mode_get(&current_func_mode);
   20a40:	f10d 0006 	add.w	r0, sp, #6
   20a44:	f7ff ff16 	bl	20874 <lte_lc_func_mode_get>
		if (err) {
   20a48:	b9b8      	cbnz	r0, 20a7a <connect_lte+0xbe>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   20a4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   20a4e:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   20a52:	d00b      	beq.n	20a6c <connect_lte+0xb0>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   20a54:	2001      	movs	r0, #1
   20a56:	f7ff ff3d 	bl	208d4 <lte_lc_func_mode_set>
		if (err || !blocking) {
   20a5a:	b188      	cbz	r0, 20a80 <connect_lte+0xc4>
   20a5c:	2300      	movs	r3, #0
   20a5e:	e8d4 2fef 	ldaex	r2, [r4]
   20a62:	e8c4 3fe1 	stlex	r1, r3, [r4]
   20a66:	2900      	cmp	r1, #0
   20a68:	d0bb      	beq.n	209e2 <connect_lte+0x26>
   20a6a:	e7f8      	b.n	20a5e <connect_lte+0xa2>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   20a6c:	f898 1000 	ldrb.w	r1, [r8]
   20a70:	7830      	ldrb	r0, [r6, #0]
   20a72:	f7ff fd87 	bl	20584 <lte_lc_system_mode_set>
			if (err) {
   20a76:	2800      	cmp	r0, #0
   20a78:	d0ec      	beq.n	20a54 <connect_lte+0x98>
			err = -EFAULT;
   20a7a:	f06f 000d 	mvn.w	r0, #13
   20a7e:	e7ed      	b.n	20a5c <connect_lte+0xa0>
		if (err || !blocking) {
   20a80:	2d00      	cmp	r5, #0
   20a82:	d0eb      	beq.n	20a5c <connect_lte+0xa0>
	return z_impl_k_sem_take(sem, timeout);
   20a84:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   20a88:	2300      	movs	r3, #0
   20a8a:	481d      	ldr	r0, [pc, #116]	; (20b00 <connect_lte+0x144>)
   20a8c:	f004 fd30 	bl	254f0 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   20a90:	f110 0f0b 	cmn.w	r0, #11
   20a94:	d1e2      	bne.n	20a5c <connect_lte+0xa0>
			LOG_INF("Network connection attempt timed out");
   20a96:	f04f 0902 	mov.w	r9, #2
   20a9a:	4b1c      	ldr	r3, [pc, #112]	; (20b0c <connect_lte+0x150>)
   20a9c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   20aa0:	4814      	ldr	r0, [pc, #80]	; (20af4 <connect_lte+0x138>)
   20aa2:	aa06      	add	r2, sp, #24
   20aa4:	9307      	str	r3, [sp, #28]
   20aa6:	f8cd 9018 	str.w	r9, [sp, #24]
   20aaa:	f009 f8c6 	bl	29c3a <z_log_msg_static_create.constprop.0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   20aae:	2f01      	cmp	r7, #1
   20ab0:	d015      	beq.n	20ade <connect_lte+0x122>
				if (sys_mode_target == sys_mode_preferred) {
   20ab2:	7833      	ldrb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   20ab4:	2004      	movs	r0, #4
					sys_mode_target = sys_mode_fallback;
   20ab6:	454b      	cmp	r3, r9
   20ab8:	bf14      	ite	ne
   20aba:	464b      	movne	r3, r9
   20abc:	2301      	moveq	r3, #1
   20abe:	7033      	strb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   20ac0:	f7ff ff08 	bl	208d4 <lte_lc_func_mode_set>
				if (err) {
   20ac4:	2800      	cmp	r0, #0
   20ac6:	d1d8      	bne.n	20a7a <connect_lte+0xbe>
				LOG_INF("Using fallback network mode");
   20ac8:	4b11      	ldr	r3, [pc, #68]	; (20b10 <connect_lte+0x154>)
   20aca:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   20ace:	4809      	ldr	r0, [pc, #36]	; (20af4 <connect_lte+0x138>)
   20ad0:	aa06      	add	r2, sp, #24
   20ad2:	e9cd 9306 	strd	r9, r3, [sp, #24]
   20ad6:	2701      	movs	r7, #1
   20ad8:	f009 f8af 	bl	29c3a <z_log_msg_static_create.constprop.0>
	} while (tries > 0);
   20adc:	e7b0      	b.n	20a40 <connect_lte+0x84>
				err = -ETIMEDOUT;
   20ade:	f06f 0073 	mvn.w	r0, #115	; 0x73
   20ae2:	e7bb      	b.n	20a5c <connect_lte+0xa0>
		return -EINPROGRESS;
   20ae4:	f06f 0076 	mvn.w	r0, #118	; 0x76
   20ae8:	e77b      	b.n	209e2 <connect_lte+0x26>
   20aea:	bf00      	nop
   20aec:	2000e048 	.word	0x2000e048
   20af0:	0002df3e 	.word	0x0002df3e
   20af4:	0002bde0 	.word	0x0002bde0
   20af8:	2000d48c 	.word	0x2000d48c
   20afc:	0002df69 	.word	0x0002df69
   20b00:	2000d498 	.word	0x2000d498
   20b04:	2000e043 	.word	0x2000e043
   20b08:	2000c771 	.word	0x2000c771
   20b0c:	0002df93 	.word	0x0002df93
   20b10:	0002dfb8 	.word	0x0002dfb8

00020b14 <lte_lc_deinit>:
{
   20b14:	b508      	push	{r3, lr}
	if (is_initialized) {
   20b16:	4b06      	ldr	r3, [pc, #24]	; (20b30 <lte_lc_deinit+0x1c>)
   20b18:	781a      	ldrb	r2, [r3, #0]
   20b1a:	b122      	cbz	r2, 20b26 <lte_lc_deinit+0x12>
		is_initialized = false;
   20b1c:	2000      	movs	r0, #0
   20b1e:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   20b20:	f7ff fed8 	bl	208d4 <lte_lc_func_mode_set>
   20b24:	b908      	cbnz	r0, 20b2a <lte_lc_deinit+0x16>
   20b26:	2000      	movs	r0, #0
}
   20b28:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   20b2a:	f06f 000d 	mvn.w	r0, #13
   20b2e:	e7fb      	b.n	20b28 <lte_lc_deinit+0x14>
   20b30:	2000e048 	.word	0x2000e048

00020b34 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   20b34:	4801      	ldr	r0, [pc, #4]	; (20b3c <k_mutex_unlock.constprop.0.isra.0+0x8>)
   20b36:	f004 bc45 	b.w	253c4 <z_impl_k_mutex_unlock>
   20b3a:	bf00      	nop
   20b3c:	2000c894 	.word	0x2000c894

00020b40 <event_handler_list_is_empty>:
	return list->head;
   20b40:	4b02      	ldr	r3, [pc, #8]	; (20b4c <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   20b42:	6818      	ldr	r0, [r3, #0]
}
   20b44:	fab0 f080 	clz	r0, r0
   20b48:	0940      	lsrs	r0, r0, #5
   20b4a:	4770      	bx	lr
   20b4c:	2000d4b0 	.word	0x2000d4b0

00020b50 <event_handler_list_append_handler>:
{
   20b50:	b570      	push	{r4, r5, r6, lr}
   20b52:	4606      	mov	r6, r0
	return list->head;
   20b54:	4d12      	ldr	r5, [pc, #72]	; (20ba0 <event_handler_list_append_handler+0x50>)
	return z_impl_k_mutex_lock(mutex, timeout);
   20b56:	f04f 32ff 	mov.w	r2, #4294967295
   20b5a:	f04f 33ff 	mov.w	r3, #4294967295
   20b5e:	4811      	ldr	r0, [pc, #68]	; (20ba4 <event_handler_list_append_handler+0x54>)
   20b60:	f004 fbb6 	bl	252d0 <z_impl_k_mutex_lock>
   20b64:	682c      	ldr	r4, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   20b66:	b944      	cbnz	r4, 20b7a <event_handler_list_append_handler+0x2a>
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   20b68:	2008      	movs	r0, #8
   20b6a:	f00a fc73 	bl	2b454 <k_malloc>
	if (to_ins == NULL) {
   20b6e:	b948      	cbnz	r0, 20b84 <event_handler_list_append_handler+0x34>
		k_mutex_unlock(&list_mtx);
   20b70:	f7ff ffe0 	bl	20b34 <k_mutex_unlock.constprop.0.isra.0>
		return -ENOBUFS;
   20b74:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20b78:	e00d      	b.n	20b96 <event_handler_list_append_handler+0x46>
		if (curr->handler == handler) {
   20b7a:	6863      	ldr	r3, [r4, #4]
   20b7c:	429e      	cmp	r6, r3
   20b7e:	d007      	beq.n	20b90 <event_handler_list_append_handler+0x40>
	return node->next;
   20b80:	6824      	ldr	r4, [r4, #0]
   20b82:	e7f0      	b.n	20b66 <event_handler_list_append_handler+0x16>
__ssp_bos_icheck3(memset, void *, int)
   20b84:	6004      	str	r4, [r0, #0]
	to_ins->handler = handler;
   20b86:	6046      	str	r6, [r0, #4]
	return list->tail;
   20b88:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   20b8a:	b92b      	cbnz	r3, 20b98 <event_handler_list_append_handler+0x48>
	list->head = node;
   20b8c:	e9c5 0000 	strd	r0, r0, [r5]
		k_mutex_unlock(&list_mtx);
   20b90:	f7ff ffd0 	bl	20b34 <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   20b94:	2000      	movs	r0, #0
}
   20b96:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   20b98:	6018      	str	r0, [r3, #0]
	list->tail = node;
   20b9a:	6068      	str	r0, [r5, #4]
}
   20b9c:	e7f8      	b.n	20b90 <event_handler_list_append_handler+0x40>
   20b9e:	bf00      	nop
   20ba0:	2000d4b0 	.word	0x2000d4b0
   20ba4:	2000c894 	.word	0x2000c894

00020ba8 <event_handler_list_dispatch>:
{
   20ba8:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   20baa:	4c0f      	ldr	r4, [pc, #60]	; (20be8 <event_handler_list_dispatch+0x40>)
   20bac:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   20bae:	6823      	ldr	r3, [r4, #0]
   20bb0:	b1c3      	cbz	r3, 20be4 <event_handler_list_dispatch+0x3c>
   20bb2:	f04f 33ff 	mov.w	r3, #4294967295
   20bb6:	f04f 32ff 	mov.w	r2, #4294967295
   20bba:	480c      	ldr	r0, [pc, #48]	; (20bec <event_handler_list_dispatch+0x44>)
   20bbc:	f004 fb88 	bl	252d0 <z_impl_k_mutex_lock>
   20bc0:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20bc2:	b10b      	cbz	r3, 20bc8 <event_handler_list_dispatch+0x20>
	return node->next;
   20bc4:	681c      	ldr	r4, [r3, #0]
   20bc6:	b91b      	cbnz	r3, 20bd0 <event_handler_list_dispatch+0x28>
}
   20bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   20bcc:	f7ff bfb2 	b.w	20b34 <k_mutex_unlock.constprop.0.isra.0>
		curr->handler(evt);
   20bd0:	4628      	mov	r0, r5
   20bd2:	685b      	ldr	r3, [r3, #4]
   20bd4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20bd6:	b11c      	cbz	r4, 20be0 <event_handler_list_dispatch+0x38>
   20bd8:	6822      	ldr	r2, [r4, #0]
   20bda:	4623      	mov	r3, r4
   20bdc:	4614      	mov	r4, r2
   20bde:	e7f2      	b.n	20bc6 <event_handler_list_dispatch+0x1e>
   20be0:	4622      	mov	r2, r4
   20be2:	e7fa      	b.n	20bda <event_handler_list_dispatch+0x32>
}
   20be4:	bd38      	pop	{r3, r4, r5, pc}
   20be6:	bf00      	nop
   20be8:	2000d4b0 	.word	0x2000d4b0
   20bec:	2000c894 	.word	0x2000c894

00020bf0 <response_is_valid>:
{
   20bf0:	b570      	push	{r4, r5, r6, lr}
   20bf2:	460e      	mov	r6, r1
   20bf4:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   20bf6:	4605      	mov	r5, r0
{
   20bf8:	b086      	sub	sp, #24
	if ((response == NULL) || (check == NULL)) {
   20bfa:	b100      	cbz	r0, 20bfe <response_is_valid+0xe>
   20bfc:	b962      	cbnz	r2, 20c18 <response_is_valid+0x28>
		LOG_ERR("Invalid pointer provided");
   20bfe:	4b0d      	ldr	r3, [pc, #52]	; (20c34 <response_is_valid+0x44>)
   20c00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20c04:	9305      	str	r3, [sp, #20]
   20c06:	2302      	movs	r3, #2
   20c08:	480b      	ldr	r0, [pc, #44]	; (20c38 <response_is_valid+0x48>)
   20c0a:	aa04      	add	r2, sp, #16
   20c0c:	9304      	str	r3, [sp, #16]
   20c0e:	f009 f835 	bl	29c7c <z_log_msg_static_create.constprop.0>
		return false;
   20c12:	2000      	movs	r0, #0
}
   20c14:	b006      	add	sp, #24
   20c16:	bd70      	pop	{r4, r5, r6, pc}
	if ((response_len < strlen(check)) ||
   20c18:	4610      	mov	r0, r2
   20c1a:	f7f8 f9e7 	bl	18fec <strlen>
   20c1e:	42b0      	cmp	r0, r6
   20c20:	d8f7      	bhi.n	20c12 <response_is_valid+0x22>
	    (memcmp(response, check, response_len) != 0)) {
   20c22:	4632      	mov	r2, r6
   20c24:	4621      	mov	r1, r4
   20c26:	4628      	mov	r0, r5
   20c28:	f00a fc3c 	bl	2b4a4 <memcmp>
	if ((response_len < strlen(check)) ||
   20c2c:	fab0 f080 	clz	r0, r0
   20c30:	0940      	lsrs	r0, r0, #5
   20c32:	e7ef      	b.n	20c14 <response_is_valid+0x24>
   20c34:	0002e058 	.word	0x0002e058
   20c38:	0002bde8 	.word	0x0002bde8

00020c3c <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   20c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   20c40:	f04f 0900 	mov.w	r9, #0
{
   20c44:	b089      	sub	sp, #36	; 0x24
   20c46:	4607      	mov	r7, r0
   20c48:	460e      	mov	r6, r1
   20c4a:	4614      	mov	r4, r2
   20c4c:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   20c4e:	f8cd 9004 	str.w	r9, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   20c52:	f7f8 f9cb 	bl	18fec <strlen>
   20c56:	2808      	cmp	r0, #8
   20c58:	d11b      	bne.n	20c92 <parse_psm+0x56>
   20c5a:	4630      	mov	r0, r6
   20c5c:	f7f8 f9c6 	bl	18fec <strlen>
   20c60:	2808      	cmp	r0, #8
   20c62:	d116      	bne.n	20c92 <parse_psm+0x56>
		return -EINVAL;
	}

	/* Parse T3412-extended (periodic TAU) timer */
	memcpy(unit_str, tau_ext_str, unit_str_len);
   20c64:	8832      	ldrh	r2, [r6, #0]
   20c66:	78b3      	ldrb	r3, [r6, #2]
   20c68:	f8ad 2004 	strh.w	r2, [sp, #4]

	lut_idx = strtoul(unit_str, NULL, 2);
   20c6c:	4649      	mov	r1, r9
   20c6e:	2202      	movs	r2, #2
   20c70:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   20c72:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   20c76:	f005 feb1 	bl	269dc <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   20c7a:	2807      	cmp	r0, #7
   20c7c:	d90e      	bls.n	20c9c <parse_psm+0x60>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   20c7e:	4b32      	ldr	r3, [pc, #200]	; (20d48 <parse_psm+0x10c>)
   20c80:	9307      	str	r3, [sp, #28]
   20c82:	2302      	movs	r3, #2
   20c84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20c88:	4830      	ldr	r0, [pc, #192]	; (20d4c <parse_psm+0x110>)
   20c8a:	aa06      	add	r2, sp, #24
   20c8c:	9306      	str	r3, [sp, #24]
   20c8e:	f008 fff5 	bl	29c7c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   20c92:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   20c96:	b009      	add	sp, #36	; 0x24
   20c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	timer_unit = t3412_ext_lookup[lut_idx];
   20c9c:	4b2c      	ldr	r3, [pc, #176]	; (20d50 <parse_psm+0x114>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   20c9e:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   20ca0:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   20ca4:	4649      	mov	r1, r9
   20ca6:	1cf0      	adds	r0, r6, #3
   20ca8:	f005 fe98 	bl	269dc <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   20cac:	f1b8 0f00 	cmp.w	r8, #0
   20cb0:	d117      	bne.n	20ce2 <parse_psm+0xa6>
   20cb2:	f04f 33ff 	mov.w	r3, #4294967295
   20cb6:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   20cb8:	b1c4      	cbz	r4, 20cec <parse_psm+0xb0>
   20cba:	4620      	mov	r0, r4
   20cbc:	f7f8 f996 	bl	18fec <strlen>
   20cc0:	2808      	cmp	r0, #8
   20cc2:	d113      	bne.n	20cec <parse_psm+0xb0>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   20cc4:	8822      	ldrh	r2, [r4, #0]
   20cc6:	78a3      	ldrb	r3, [r4, #2]
   20cc8:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   20ccc:	2100      	movs	r1, #0
   20cce:	2202      	movs	r2, #2
   20cd0:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   20cd2:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   20cd6:	f005 fe81 	bl	269dc <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   20cda:	2807      	cmp	r0, #7
   20cdc:	d915      	bls.n	20d0a <parse_psm+0xce>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   20cde:	4b1d      	ldr	r3, [pc, #116]	; (20d54 <parse_psm+0x118>)
   20ce0:	e7ce      	b.n	20c80 <parse_psm+0x44>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   20ce2:	fb00 f008 	mul.w	r0, r0, r8
   20ce6:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   20ce8:	3001      	adds	r0, #1
   20cea:	d0e5      	beq.n	20cb8 <parse_psm+0x7c>
	memcpy(unit_str, active_time_str, unit_str_len);
   20cec:	883a      	ldrh	r2, [r7, #0]
   20cee:	78bb      	ldrb	r3, [r7, #2]
   20cf0:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   20cf4:	2100      	movs	r1, #0
   20cf6:	2202      	movs	r2, #2
   20cf8:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   20cfa:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   20cfe:	f005 fe6d 	bl	269dc <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   20d02:	2807      	cmp	r0, #7
   20d04:	d910      	bls.n	20d28 <parse_psm+0xec>
		LOG_ERR("Unable to parse active time string");
   20d06:	4b14      	ldr	r3, [pc, #80]	; (20d58 <parse_psm+0x11c>)
   20d08:	e7ba      	b.n	20c80 <parse_psm+0x44>
		timer_unit = t3412_lookup[lut_idx];
   20d0a:	4b14      	ldr	r3, [pc, #80]	; (20d5c <parse_psm+0x120>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   20d0c:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   20d0e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   20d12:	2100      	movs	r1, #0
   20d14:	1ce0      	adds	r0, r4, #3
   20d16:	f005 fe61 	bl	269dc <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   20d1a:	b116      	cbz	r6, 20d22 <parse_psm+0xe6>
   20d1c:	4370      	muls	r0, r6
   20d1e:	6028      	str	r0, [r5, #0]
   20d20:	e7e4      	b.n	20cec <parse_psm+0xb0>
   20d22:	f04f 30ff 	mov.w	r0, #4294967295
   20d26:	e7fa      	b.n	20d1e <parse_psm+0xe2>
	timer_unit = t3324_lookup[lut_idx];
   20d28:	4b0d      	ldr	r3, [pc, #52]	; (20d60 <parse_psm+0x124>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   20d2a:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   20d2c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   20d30:	2100      	movs	r1, #0
   20d32:	1cf8      	adds	r0, r7, #3
   20d34:	f005 fe52 	bl	269dc <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   20d38:	b11c      	cbz	r4, 20d42 <parse_psm+0x106>
   20d3a:	4360      	muls	r0, r4
   20d3c:	6068      	str	r0, [r5, #4]
	return 0;
   20d3e:	2000      	movs	r0, #0
   20d40:	e7a9      	b.n	20c96 <parse_psm+0x5a>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   20d42:	f04f 30ff 	mov.w	r0, #4294967295
   20d46:	e7f9      	b.n	20d3c <parse_psm+0x100>
   20d48:	0002e1a8 	.word	0x0002e1a8
   20d4c:	0002bde8 	.word	0x0002bde8
   20d50:	0002c210 	.word	0x0002c210
   20d54:	0002e1dd 	.word	0x0002e1dd
   20d58:	0002e209 	.word	0x0002e209
   20d5c:	0002c1f0 	.word	0x0002c1f0
   20d60:	0002c1f0 	.word	0x0002c1f0

00020d64 <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   20d64:	2300      	movs	r3, #0
{
   20d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d6a:	b084      	sub	sp, #16
   20d6c:	af00      	add	r7, sp, #0
   20d6e:	4680      	mov	r8, r0
   20d70:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   20d72:	f107 0008 	add.w	r0, r7, #8
   20d76:	2104      	movs	r1, #4
{
   20d78:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   20d7a:	e9c7 3302 	strd	r3, r3, [r7, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   20d7e:	f008 fe1f 	bl	299c0 <at_params_list_init>
	if (err) {
   20d82:	4604      	mov	r4, r0
   20d84:	b198      	cbz	r0, 20dae <parse_rrc_mode+0x4a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   20d86:	466d      	mov	r5, sp
   20d88:	b088      	sub	sp, #32
   20d8a:	466a      	mov	r2, sp
   20d8c:	4b29      	ldr	r3, [pc, #164]	; (20e34 <parse_rrc_mode+0xd0>)
   20d8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20d92:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20d96:	2303      	movs	r3, #3
   20d98:	4827      	ldr	r0, [pc, #156]	; (20e38 <parse_rrc_mode+0xd4>)
   20d9a:	f842 3f10 	str.w	r3, [r2, #16]!
   20d9e:	f008 ff6d 	bl	29c7c <z_log_msg_static_create.constprop.0>
   20da2:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   20da4:	4620      	mov	r0, r4
   20da6:	3710      	adds	r7, #16
   20da8:	46bd      	mov	sp, r7
   20daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
   20dae:	4601      	mov	r1, r0
   20db0:	f107 0208 	add.w	r2, r7, #8
   20db4:	4640      	mov	r0, r8
   20db6:	f008 fdea 	bl	2998e <at_parser_params_from_str>
	if (err) {
   20dba:	4604      	mov	r4, r0
   20dbc:	b198      	cbz	r0, 20de6 <parse_rrc_mode+0x82>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   20dbe:	466d      	mov	r5, sp
   20dc0:	b088      	sub	sp, #32
   20dc2:	466a      	mov	r2, sp
   20dc4:	4b1d      	ldr	r3, [pc, #116]	; (20e3c <parse_rrc_mode+0xd8>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   20dc6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   20dca:	2303      	movs	r3, #3
   20dcc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20dd0:	4819      	ldr	r0, [pc, #100]	; (20e38 <parse_rrc_mode+0xd4>)
   20dd2:	f842 3f10 	str.w	r3, [r2, #16]!
   20dd6:	f008 ff51 	bl	29c7c <z_log_msg_static_create.constprop.0>
   20dda:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   20ddc:	f107 0008 	add.w	r0, r7, #8
   20de0:	f008 fe18 	bl	29a14 <at_params_list_free>
	return err;
   20de4:	e7de      	b.n	20da4 <parse_rrc_mode+0x40>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   20de6:	4631      	mov	r1, r6
   20de8:	1d3a      	adds	r2, r7, #4
   20dea:	f107 0008 	add.w	r0, r7, #8
   20dee:	f008 fec3 	bl	29b78 <at_params_int_get>
	if (err) {
   20df2:	4604      	mov	r4, r0
   20df4:	b120      	cbz	r0, 20e00 <parse_rrc_mode+0x9c>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   20df6:	466d      	mov	r5, sp
   20df8:	b088      	sub	sp, #32
   20dfa:	466a      	mov	r2, sp
   20dfc:	4b10      	ldr	r3, [pc, #64]	; (20e40 <parse_rrc_mode+0xdc>)
   20dfe:	e7e2      	b.n	20dc6 <parse_rrc_mode+0x62>
	if (temp_mode == 0) {
   20e00:	687b      	ldr	r3, [r7, #4]
   20e02:	b11b      	cbz	r3, 20e0c <parse_rrc_mode+0xa8>
	} else if (temp_mode == 1) {
   20e04:	2b01      	cmp	r3, #1
   20e06:	d103      	bne.n	20e10 <parse_rrc_mode+0xac>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   20e08:	702b      	strb	r3, [r5, #0]
   20e0a:	e7e7      	b.n	20ddc <parse_rrc_mode+0x78>
   20e0c:	4603      	mov	r3, r0
   20e0e:	e7fb      	b.n	20e08 <parse_rrc_mode+0xa4>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   20e10:	466c      	mov	r4, sp
   20e12:	b088      	sub	sp, #32
   20e14:	466a      	mov	r2, sp
   20e16:	490b      	ldr	r1, [pc, #44]	; (20e44 <parse_rrc_mode+0xe0>)
   20e18:	4807      	ldr	r0, [pc, #28]	; (20e38 <parse_rrc_mode+0xd4>)
   20e1a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   20e1e:	2303      	movs	r3, #3
   20e20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20e24:	f842 3f10 	str.w	r3, [r2, #16]!
   20e28:	f008 ff28 	bl	29c7c <z_log_msg_static_create.constprop.0>
   20e2c:	46a5      	mov	sp, r4
		err = -EINVAL;
   20e2e:	f06f 0415 	mvn.w	r4, #21
   20e32:	e7d3      	b.n	20ddc <parse_rrc_mode+0x78>
   20e34:	0002e071 	.word	0x0002e071
   20e38:	0002bde8 	.word	0x0002bde8
   20e3c:	0002e22c 	.word	0x0002e22c
   20e40:	0002e257 	.word	0x0002e257
   20e44:	0002e280 	.word	0x0002e280

00020e48 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   20e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20e4c:	461d      	mov	r5, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   20e4e:	2300      	movs	r3, #0
{
   20e50:	b08a      	sub	sp, #40	; 0x28
   20e52:	af00      	add	r7, sp, #0
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   20e54:	60fb      	str	r3, [r7, #12]
   20e56:	823b      	strh	r3, [r7, #16]
   20e58:	74bb      	strb	r3, [r7, #18]
{
   20e5a:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   20e5c:	2309      	movs	r3, #9
   20e5e:	2207      	movs	r2, #7
{
   20e60:	4680      	mov	r8, r0
   20e62:	4689      	mov	r9, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   20e64:	f107 0014 	add.w	r0, r7, #20
   20e68:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   20e6a:	e9c7 2300 	strd	r2, r3, [r7]
{
   20e6e:	f8d7 a048 	ldr.w	sl, [r7, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   20e72:	f008 fda5 	bl	299c0 <at_params_list_init>
	if (err) {
   20e76:	4604      	mov	r4, r0
   20e78:	b198      	cbz	r0, 20ea2 <parse_cereg+0x5a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   20e7a:	466d      	mov	r5, sp
   20e7c:	b088      	sub	sp, #32
   20e7e:	466a      	mov	r2, sp
   20e80:	4b77      	ldr	r3, [pc, #476]	; (21060 <parse_cereg+0x218>)
   20e82:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20e86:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20e8a:	2303      	movs	r3, #3
   20e8c:	4875      	ldr	r0, [pc, #468]	; (21064 <parse_cereg+0x21c>)
   20e8e:	f842 3f10 	str.w	r3, [r2, #16]!
   20e92:	f008 fef3 	bl	29c7c <z_log_msg_static_create.constprop.0>
   20e96:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   20e98:	4620      	mov	r0, r4
   20e9a:	3728      	adds	r7, #40	; 0x28
   20e9c:	46bd      	mov	sp, r7
   20e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   20ea2:	4601      	mov	r1, r0
   20ea4:	f107 0214 	add.w	r2, r7, #20
   20ea8:	4640      	mov	r0, r8
   20eaa:	f008 fd70 	bl	2998e <at_parser_params_from_str>
	if (err) {
   20eae:	4604      	mov	r4, r0
   20eb0:	b198      	cbz	r0, 20eda <parse_cereg+0x92>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   20eb2:	466d      	mov	r5, sp
   20eb4:	b088      	sub	sp, #32
   20eb6:	466a      	mov	r2, sp
   20eb8:	4b6b      	ldr	r3, [pc, #428]	; (21068 <parse_cereg+0x220>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   20eba:	e9c2 3405 	strd	r3, r4, [r2, #20]
   20ebe:	2303      	movs	r3, #3
   20ec0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20ec4:	4867      	ldr	r0, [pc, #412]	; (21064 <parse_cereg+0x21c>)
   20ec6:	f842 3f10 	str.w	r3, [r2, #16]!
   20eca:	f008 fed7 	bl	29c7c <z_log_msg_static_create.constprop.0>
   20ece:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   20ed0:	f107 0014 	add.w	r0, r7, #20
   20ed4:	f008 fd9e 	bl	29a14 <at_params_list_free>
	return err;
   20ed8:	e7de      	b.n	20e98 <parse_cereg+0x50>
	err = at_params_string_get(&resp_list,
   20eda:	4601      	mov	r1, r0
   20edc:	463b      	mov	r3, r7
   20ede:	f107 020c 	add.w	r2, r7, #12
   20ee2:	f107 0014 	add.w	r0, r7, #20
   20ee6:	f008 fe73 	bl	29bd0 <at_params_string_get>
	if (err) {
   20eea:	4604      	mov	r4, r0
   20eec:	b120      	cbz	r0, 20ef8 <parse_cereg+0xb0>
		LOG_ERR("Could not get response prefix, error: %d", err);
   20eee:	466d      	mov	r5, sp
   20ef0:	b088      	sub	sp, #32
   20ef2:	466a      	mov	r2, sp
   20ef4:	4b5d      	ldr	r3, [pc, #372]	; (2106c <parse_cereg+0x224>)
   20ef6:	e7e0      	b.n	20eba <parse_cereg+0x72>
	if (!response_is_valid(response_prefix, response_prefix_len,
   20ef8:	4a5d      	ldr	r2, [pc, #372]	; (21070 <parse_cereg+0x228>)
   20efa:	6839      	ldr	r1, [r7, #0]
   20efc:	f107 000c 	add.w	r0, r7, #12
   20f00:	f7ff fe76 	bl	20bf0 <response_is_valid>
   20f04:	2800      	cmp	r0, #0
   20f06:	d0e3      	beq.n	20ed0 <parse_cereg+0x88>
	err = at_params_int_get(list, reg_status_index, &reg_status);
   20f08:	f107 021c 	add.w	r2, r7, #28
   20f0c:	f1c9 0102 	rsb	r1, r9, #2
   20f10:	f107 0014 	add.w	r0, r7, #20
   20f14:	f008 fe30 	bl	29b78 <at_params_int_get>
	if (err) {
   20f18:	f1b0 0800 	subs.w	r8, r0, #0
   20f1c:	d165      	bne.n	20fea <parse_cereg+0x1a2>
	switch (reg_status) {
   20f1e:	69fb      	ldr	r3, [r7, #28]
   20f20:	2b08      	cmp	r3, #8
   20f22:	d03b      	beq.n	20f9c <parse_cereg+0x154>
   20f24:	dc23      	bgt.n	20f6e <parse_cereg+0x126>
   20f26:	2b05      	cmp	r3, #5
   20f28:	d938      	bls.n	20f9c <parse_cereg+0x154>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   20f2a:	466c      	mov	r4, sp
   20f2c:	b088      	sub	sp, #32
   20f2e:	466a      	mov	r2, sp
   20f30:	4950      	ldr	r1, [pc, #320]	; (21074 <parse_cereg+0x22c>)
   20f32:	484c      	ldr	r0, [pc, #304]	; (21064 <parse_cereg+0x21c>)
   20f34:	e9c2 1305 	strd	r1, r3, [r2, #20]
   20f38:	2303      	movs	r3, #3
   20f3a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20f3e:	f842 3f10 	str.w	r3, [r2, #16]!
   20f42:	f008 fe9b 	bl	29c7c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   20f46:	f06f 0815 	mvn.w	r8, #21
   20f4a:	46a5      	mov	sp, r4
		LOG_ERR("Could not get registration status, error: %d", status);
   20f4c:	466c      	mov	r4, sp
   20f4e:	b088      	sub	sp, #32
   20f50:	466a      	mov	r2, sp
   20f52:	4b49      	ldr	r3, [pc, #292]	; (21078 <parse_cereg+0x230>)
   20f54:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20f58:	e9c2 3805 	strd	r3, r8, [r2, #20]
   20f5c:	2303      	movs	r3, #3
   20f5e:	4841      	ldr	r0, [pc, #260]	; (21064 <parse_cereg+0x21c>)
   20f60:	f842 3f10 	str.w	r3, [r2, #16]!
   20f64:	f008 fe8a 	bl	29c7c <z_log_msg_static_create.constprop.0>
   20f68:	46a5      	mov	sp, r4
		goto clean_exit;
   20f6a:	4644      	mov	r4, r8
   20f6c:	e7b0      	b.n	20ed0 <parse_cereg+0x88>
	switch (reg_status) {
   20f6e:	2b5a      	cmp	r3, #90	; 0x5a
   20f70:	d1db      	bne.n	20f2a <parse_cereg+0xe2>
	if (reg_status) {
   20f72:	b106      	cbz	r6, 20f76 <parse_cereg+0x12e>
		*reg_status = status;
   20f74:	7033      	strb	r3, [r6, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   20f76:	2d00      	cmp	r5, #0
   20f78:	d140      	bne.n	20ffc <parse_cereg+0x1b4>
	if (lte_mode) {
   20f7a:	f1ba 0f00 	cmp.w	sl, #0
   20f7e:	d0a7      	beq.n	20ed0 <parse_cereg+0x88>
		err = at_params_int_get(&resp_list,
   20f80:	f107 0208 	add.w	r2, r7, #8
   20f84:	f1c9 0105 	rsb	r1, r9, #5
   20f88:	f107 0014 	add.w	r0, r7, #20
   20f8c:	f008 fdf4 	bl	29b78 <at_params_int_get>
		if (err) {
   20f90:	2800      	cmp	r0, #0
   20f92:	d163      	bne.n	2105c <parse_cereg+0x214>
			*lte_mode = mode;
   20f94:	7a3b      	ldrb	r3, [r7, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   20f96:	f88a 3000 	strb.w	r3, [sl]
   20f9a:	e799      	b.n	20ed0 <parse_cereg+0x88>
	if (reg_status) {
   20f9c:	bb1e      	cbnz	r6, 20fe6 <parse_cereg+0x19e>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   20f9e:	2d00      	cmp	r5, #0
   20fa0:	d0eb      	beq.n	20f7a <parse_cereg+0x132>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   20fa2:	f107 0014 	add.w	r0, r7, #20
   20fa6:	f008 fe33 	bl	29c10 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   20faa:	2803      	cmp	r0, #3
   20fac:	d926      	bls.n	20ffc <parse_cereg+0x1b4>
		err = at_params_string_get(
   20fae:	1d3b      	adds	r3, r7, #4
   20fb0:	f107 021c 	add.w	r2, r7, #28
   20fb4:	f1c9 0103 	rsb	r1, r9, #3
   20fb8:	f107 0014 	add.w	r0, r7, #20
   20fbc:	f008 fe08 	bl	29bd0 <at_params_string_get>
		if (err) {
   20fc0:	4606      	mov	r6, r0
   20fc2:	b300      	cbz	r0, 21006 <parse_cereg+0x1be>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   20fc4:	466c      	mov	r4, sp
   20fc6:	b088      	sub	sp, #32
   20fc8:	466a      	mov	r2, sp
   20fca:	4b2c      	ldr	r3, [pc, #176]	; (2107c <parse_cereg+0x234>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   20fcc:	e9c2 3605 	strd	r3, r6, [r2, #20]
   20fd0:	2303      	movs	r3, #3
   20fd2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20fd6:	4823      	ldr	r0, [pc, #140]	; (21064 <parse_cereg+0x21c>)
   20fd8:	f842 3f10 	str.w	r3, [r2, #16]!
   20fdc:	f008 fe4e 	bl	29c7c <z_log_msg_static_create.constprop.0>
   20fe0:	46a5      	mov	sp, r4
			goto clean_exit;
   20fe2:	4634      	mov	r4, r6
   20fe4:	e774      	b.n	20ed0 <parse_cereg+0x88>
		*reg_status = status;
   20fe6:	7033      	strb	r3, [r6, #0]
   20fe8:	e7d9      	b.n	20f9e <parse_cereg+0x156>
	if (status < 0) {
   20fea:	dbaf      	blt.n	20f4c <parse_cereg+0x104>
	if (reg_status) {
   20fec:	b10e      	cbz	r6, 20ff2 <parse_cereg+0x1aa>
		*reg_status = status;
   20fee:	f886 8000 	strb.w	r8, [r6]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   20ff2:	2d00      	cmp	r5, #0
   20ff4:	d0c1      	beq.n	20f7a <parse_cereg+0x132>
   20ff6:	f1b8 0f5a 	cmp.w	r8, #90	; 0x5a
   20ffa:	d1d2      	bne.n	20fa2 <parse_cereg+0x15a>
		cell->tac = UINT32_MAX;
   20ffc:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   21000:	e9c5 3302 	strd	r3, r3, [r5, #8]
   21004:	e7b9      	b.n	20f7a <parse_cereg+0x132>
		str_buf[len] = '\0';
   21006:	687b      	ldr	r3, [r7, #4]
		cell->tac = strtoul(str_buf, NULL, 16);
   21008:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   2100a:	3328      	adds	r3, #40	; 0x28
   2100c:	443b      	add	r3, r7
   2100e:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   21012:	2210      	movs	r2, #16
   21014:	f107 001c 	add.w	r0, r7, #28
   21018:	f005 fce0 	bl	269dc <strtoul>
		len = sizeof(str_buf) - 1;
   2101c:	2309      	movs	r3, #9
		cell->tac = strtoul(str_buf, NULL, 16);
   2101e:	60e8      	str	r0, [r5, #12]
		len = sizeof(str_buf) - 1;
   21020:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&resp_list,
   21022:	f107 021c 	add.w	r2, r7, #28
   21026:	1d3b      	adds	r3, r7, #4
   21028:	f1c9 0104 	rsb	r1, r9, #4
   2102c:	f107 0014 	add.w	r0, r7, #20
   21030:	f008 fdce 	bl	29bd0 <at_params_string_get>
		if (err) {
   21034:	4606      	mov	r6, r0
   21036:	b120      	cbz	r0, 21042 <parse_cereg+0x1fa>
			LOG_ERR("Could not get cell ID, error: %d", err);
   21038:	466c      	mov	r4, sp
   2103a:	b088      	sub	sp, #32
   2103c:	466a      	mov	r2, sp
   2103e:	4b10      	ldr	r3, [pc, #64]	; (21080 <parse_cereg+0x238>)
   21040:	e7c4      	b.n	20fcc <parse_cereg+0x184>
		str_buf[len] = '\0';
   21042:	687b      	ldr	r3, [r7, #4]
		cell->id = strtoul(str_buf, NULL, 16);
   21044:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   21046:	3328      	adds	r3, #40	; 0x28
   21048:	443b      	add	r3, r7
   2104a:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   2104e:	2210      	movs	r2, #16
   21050:	f107 001c 	add.w	r0, r7, #28
   21054:	f005 fcc2 	bl	269dc <strtoul>
   21058:	60a8      	str	r0, [r5, #8]
   2105a:	e78e      	b.n	20f7a <parse_cereg+0x132>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   2105c:	2300      	movs	r3, #0
   2105e:	e79a      	b.n	20f96 <parse_cereg+0x14e>
   21060:	0002e071 	.word	0x0002e071
   21064:	0002bde8 	.word	0x0002bde8
   21068:	0002e29c 	.word	0x0002e29c
   2106c:	0002e2c9 	.word	0x0002e2c9
   21070:	0002e00a 	.word	0x0002e00a
   21074:	0002e2f2 	.word	0x0002e2f2
   21078:	0002dcaa 	.word	0x0002dcaa
   2107c:	0002e31a 	.word	0x0002e31a
   21080:	0002e346 	.word	0x0002e346

00021084 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   21084:	2300      	movs	r3, #0
{
   21086:	b5f0      	push	{r4, r5, r6, r7, lr}
   21088:	b089      	sub	sp, #36	; 0x24
   2108a:	af00      	add	r7, sp, #0
   2108c:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   2108e:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   21090:	e9c7 3300 	strd	r3, r3, [r7]
	if (time == NULL || at_response == NULL) {
   21094:	2900      	cmp	r1, #0
   21096:	d056      	beq.n	21146 <parse_xt3412+0xc2>
   21098:	2800      	cmp	r0, #0
   2109a:	d054      	beq.n	21146 <parse_xt3412+0xc2>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   2109c:	2104      	movs	r1, #4
   2109e:	4638      	mov	r0, r7
   210a0:	f008 fc8e 	bl	299c0 <at_params_list_init>
	if (err) {
   210a4:	4604      	mov	r4, r0
   210a6:	b190      	cbz	r0, 210ce <parse_xt3412+0x4a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   210a8:	466d      	mov	r5, sp
   210aa:	b088      	sub	sp, #32
   210ac:	466a      	mov	r2, sp
   210ae:	4b27      	ldr	r3, [pc, #156]	; (2114c <parse_xt3412+0xc8>)
   210b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   210b4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   210b8:	2303      	movs	r3, #3
   210ba:	4825      	ldr	r0, [pc, #148]	; (21150 <parse_xt3412+0xcc>)
   210bc:	f842 3f10 	str.w	r3, [r2, #16]!
   210c0:	f008 fddc 	bl	29c7c <z_log_msg_static_create.constprop.0>
   210c4:	46ad      	mov	sp, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   210c6:	4620      	mov	r0, r4
   210c8:	3724      	adds	r7, #36	; 0x24
   210ca:	46bd      	mov	sp, r7
   210cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   210ce:	4601      	mov	r1, r0
   210d0:	463a      	mov	r2, r7
   210d2:	4630      	mov	r0, r6
   210d4:	f008 fc5b 	bl	2998e <at_parser_params_from_str>
	if (err) {
   210d8:	4604      	mov	r4, r0
   210da:	b190      	cbz	r0, 21102 <parse_xt3412+0x7e>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   210dc:	466d      	mov	r5, sp
   210de:	b088      	sub	sp, #32
   210e0:	466a      	mov	r2, sp
   210e2:	4b1c      	ldr	r3, [pc, #112]	; (21154 <parse_xt3412+0xd0>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   210e4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   210e8:	2303      	movs	r3, #3
   210ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   210ee:	4818      	ldr	r0, [pc, #96]	; (21150 <parse_xt3412+0xcc>)
   210f0:	f842 3f10 	str.w	r3, [r2, #16]!
   210f4:	f008 fdc2 	bl	29c7c <z_log_msg_static_create.constprop.0>
   210f8:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   210fa:	4638      	mov	r0, r7
   210fc:	f008 fc8a 	bl	29a14 <at_params_list_free>
	return err;
   21100:	e7e1      	b.n	210c6 <parse_xt3412+0x42>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   21102:	462a      	mov	r2, r5
   21104:	2102      	movs	r1, #2
   21106:	4638      	mov	r0, r7
   21108:	f008 fd4e 	bl	29ba8 <at_params_int64_get>
	if (err) {
   2110c:	4604      	mov	r4, r0
   2110e:	b120      	cbz	r0, 2111a <parse_xt3412+0x96>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   21110:	466d      	mov	r5, sp
   21112:	b088      	sub	sp, #32
   21114:	466a      	mov	r2, sp
   21116:	4b10      	ldr	r3, [pc, #64]	; (21158 <parse_xt3412+0xd4>)
   21118:	e7e4      	b.n	210e4 <parse_xt3412+0x60>
	if ((*time > T3412_MAX) || *time < 0) {
   2111a:	4910      	ldr	r1, [pc, #64]	; (2115c <parse_xt3412+0xd8>)
   2111c:	e9d5 3200 	ldrd	r3, r2, [r5]
   21120:	4299      	cmp	r1, r3
   21122:	f04f 0308 	mov.w	r3, #8
   21126:	4193      	sbcs	r3, r2
   21128:	d2e7      	bcs.n	210fa <parse_xt3412+0x76>
		LOG_WRN("Parsed time parameter not within valid range");
   2112a:	4b0d      	ldr	r3, [pc, #52]	; (21160 <parse_xt3412+0xdc>)
   2112c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   21130:	61fb      	str	r3, [r7, #28]
   21132:	2302      	movs	r3, #2
   21134:	4806      	ldr	r0, [pc, #24]	; (21150 <parse_xt3412+0xcc>)
   21136:	61bb      	str	r3, [r7, #24]
   21138:	f107 0218 	add.w	r2, r7, #24
   2113c:	f008 fd9e 	bl	29c7c <z_log_msg_static_create.constprop.0>
		err = -EINVAL;
   21140:	f06f 0415 	mvn.w	r4, #21
   21144:	e7d9      	b.n	210fa <parse_xt3412+0x76>
		return -EINVAL;
   21146:	f06f 0415 	mvn.w	r4, #21
   2114a:	e7bc      	b.n	210c6 <parse_xt3412+0x42>
   2114c:	0002e071 	.word	0x0002e071
   21150:	0002bde8 	.word	0x0002bde8
   21154:	0002e367 	.word	0x0002e367
   21158:	0002e394 	.word	0x0002e394
   2115c:	5099e000 	.word	0x5099e000
   21160:	0002e3c1 	.word	0x0002e3c1

00021164 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   21164:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   21166:	b968      	cbnz	r0, 21184 <neighborcell_count_get+0x20>
		LOG_ERR("at_response is NULL, can't get cell count");
   21168:	4b0f      	ldr	r3, [pc, #60]	; (211a8 <neighborcell_count_get+0x44>)
   2116a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2116e:	9305      	str	r3, [sp, #20]
   21170:	2302      	movs	r3, #2
   21172:	480e      	ldr	r0, [pc, #56]	; (211ac <neighborcell_count_get+0x48>)
   21174:	aa04      	add	r2, sp, #16
   21176:	9304      	str	r3, [sp, #16]
   21178:	f008 fd80 	bl	29c7c <z_log_msg_static_create.constprop.0>
		return 0;
   2117c:	2000      	movs	r0, #0
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   2117e:	b007      	add	sp, #28
   21180:	f85d fb04 	ldr.w	pc, [sp], #4
	uint32_t count = 0;
   21184:	2300      	movs	r3, #0
   21186:	3801      	subs	r0, #1
		if (*str == c) {
   21188:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   2118c:	2a2c      	cmp	r2, #44	; 0x2c
   2118e:	d101      	bne.n	21194 <neighborcell_count_get+0x30>
			count++;
   21190:	3301      	adds	r3, #1
	} while (*(str++) != '\0');
   21192:	e7f9      	b.n	21188 <neighborcell_count_get+0x24>
   21194:	2a00      	cmp	r2, #0
   21196:	d1f7      	bne.n	21188 <neighborcell_count_get+0x24>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   21198:	2b0a      	cmp	r3, #10
   2119a:	d9ef      	bls.n	2117c <neighborcell_count_get+0x18>
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   2119c:	f1a3 0009 	sub.w	r0, r3, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   211a0:	2305      	movs	r3, #5
   211a2:	fbb0 f0f3 	udiv	r0, r0, r3
	return ncell_count;
   211a6:	e7ea      	b.n	2117e <neighborcell_count_get+0x1a>
   211a8:	0002e3ee 	.word	0x0002e3ee
   211ac:	0002bde8 	.word	0x0002bde8

000211b0 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   211b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   211b4:	230b      	movs	r3, #11
{
   211b6:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   211b8:	2100      	movs	r1, #0
{
   211ba:	4680      	mov	r8, r0
   211bc:	b08c      	sub	sp, #48	; 0x30
   211be:	af00      	add	r7, sp, #0
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   211c0:	e9c7 1109 	strd	r1, r1, [r7, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   211c4:	613b      	str	r3, [r7, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   211c6:	f8c7 102b 	str.w	r1, [r7, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   211ca:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   211cc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   211d0:	2b2c      	cmp	r3, #44	; 0x2c
   211d2:	d101      	bne.n	211d8 <parse_ncellmeas+0x28>
			count++;
   211d4:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   211d6:	e7f9      	b.n	211cc <parse_ncellmeas+0x1c>
   211d8:	2b00      	cmp	r3, #0
   211da:	d1f7      	bne.n	211cc <parse_ncellmeas+0x1c>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   211dc:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   211e0:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   211e4:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   211e6:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   211e8:	f107 001c 	add.w	r0, r7, #28
   211ec:	f008 fbe8 	bl	299c0 <at_params_list_init>
	if (err) {
   211f0:	4604      	mov	r4, r0
   211f2:	b198      	cbz	r0, 2121c <parse_ncellmeas+0x6c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   211f4:	466d      	mov	r5, sp
   211f6:	b088      	sub	sp, #32
   211f8:	466a      	mov	r2, sp
   211fa:	4bb5      	ldr	r3, [pc, #724]	; (214d0 <parse_ncellmeas+0x320>)
   211fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21200:	e9c2 3005 	strd	r3, r0, [r2, #20]
   21204:	2303      	movs	r3, #3
   21206:	48b3      	ldr	r0, [pc, #716]	; (214d4 <parse_ncellmeas+0x324>)
   21208:	f842 3f10 	str.w	r3, [r2, #16]!
   2120c:	f008 fd36 	bl	29c7c <z_log_msg_static_create.constprop.0>
   21210:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   21212:	4620      	mov	r0, r4
   21214:	3730      	adds	r7, #48	; 0x30
   21216:	46bd      	mov	sp, r7
   21218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   2121c:	4601      	mov	r1, r0
   2121e:	f107 021c 	add.w	r2, r7, #28
   21222:	4640      	mov	r0, r8
   21224:	f008 fbb3 	bl	2998e <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   21228:	4604      	mov	r4, r0
   2122a:	b1a8      	cbz	r0, 21258 <parse_ncellmeas+0xa8>
   2122c:	1dc3      	adds	r3, r0, #7
   2122e:	d024      	beq.n	2127a <parse_ncellmeas+0xca>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   21230:	466d      	mov	r5, sp
   21232:	b088      	sub	sp, #32
   21234:	466a      	mov	r2, sp
   21236:	4ba8      	ldr	r3, [pc, #672]	; (214d8 <parse_ncellmeas+0x328>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   21238:	e9c2 3405 	strd	r3, r4, [r2, #20]
   2123c:	2303      	movs	r3, #3
   2123e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21242:	48a4      	ldr	r0, [pc, #656]	; (214d4 <parse_ncellmeas+0x324>)
   21244:	f842 3f10 	str.w	r3, [r2, #16]!
   21248:	f008 fd18 	bl	29c7c <z_log_msg_static_create.constprop.0>
   2124c:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   2124e:	f107 001c 	add.w	r0, r7, #28
   21252:	f008 fbdf 	bl	29a14 <at_params_list_free>
	return err;
   21256:	e7dc      	b.n	21212 <parse_ncellmeas+0x62>
	bool incomplete = false;
   21258:	4606      	mov	r6, r0
	err = at_params_string_get(&resp_list,
   2125a:	2100      	movs	r1, #0
   2125c:	f107 0310 	add.w	r3, r7, #16
   21260:	f107 0224 	add.w	r2, r7, #36	; 0x24
   21264:	f107 001c 	add.w	r0, r7, #28
   21268:	f008 fcb2 	bl	29bd0 <at_params_string_get>
	if (err) {
   2126c:	4604      	mov	r4, r0
   2126e:	b130      	cbz	r0, 2127e <parse_ncellmeas+0xce>
		LOG_ERR("Could not get response prefix, error: %d", err);
   21270:	466d      	mov	r5, sp
   21272:	b088      	sub	sp, #32
   21274:	466a      	mov	r2, sp
   21276:	4b99      	ldr	r3, [pc, #612]	; (214dc <parse_ncellmeas+0x32c>)
   21278:	e7de      	b.n	21238 <parse_ncellmeas+0x88>
		incomplete = true;
   2127a:	2601      	movs	r6, #1
   2127c:	e7ed      	b.n	2125a <parse_ncellmeas+0xaa>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2127e:	4a98      	ldr	r2, [pc, #608]	; (214e0 <parse_ncellmeas+0x330>)
   21280:	6939      	ldr	r1, [r7, #16]
   21282:	f107 0024 	add.w	r0, r7, #36	; 0x24
   21286:	f7ff fcb3 	bl	20bf0 <response_is_valid>
   2128a:	2800      	cmp	r0, #0
   2128c:	f000 80b9 	beq.w	21402 <parse_ncellmeas+0x252>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   21290:	2101      	movs	r1, #1
   21292:	1d3a      	adds	r2, r7, #4
   21294:	f107 001c 	add.w	r0, r7, #28
   21298:	f008 fc6e 	bl	29b78 <at_params_int_get>
	if (err) {
   2129c:	4604      	mov	r4, r0
   2129e:	2800      	cmp	r0, #0
   212a0:	d1d5      	bne.n	2124e <parse_ncellmeas+0x9e>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   212a2:	687b      	ldr	r3, [r7, #4]
   212a4:	2b00      	cmp	r3, #0
   212a6:	f040 8110 	bne.w	214ca <parse_ncellmeas+0x31a>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   212aa:	2102      	movs	r1, #2
   212ac:	f107 0208 	add.w	r2, r7, #8
   212b0:	f107 001c 	add.w	r0, r7, #28
   212b4:	f008 fd0b 	bl	29cce <string_param_to_int.constprop.0>
	if (err) {
   212b8:	4604      	mov	r4, r0
   212ba:	2800      	cmp	r0, #0
   212bc:	d1c7      	bne.n	2124e <parse_ncellmeas+0x9e>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   212be:	68bb      	ldr	r3, [r7, #8]
	len = sizeof(tmp_str);
   212c0:	f04f 0907 	mov.w	r9, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   212c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   212c8:	bfa4      	itt	ge
   212ca:	f04f 33ff 	movge.w	r3, #4294967295
   212ce:	60bb      	strge	r3, [r7, #8]
	cells->current_cell.id = tmp;
   212d0:	68bb      	ldr	r3, [r7, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   212d2:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   212d4:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   212d6:	f107 0214 	add.w	r2, r7, #20
   212da:	f107 030c 	add.w	r3, r7, #12
   212de:	f107 001c 	add.w	r0, r7, #28
	len = sizeof(tmp_str);
   212e2:	f8c7 900c 	str.w	r9, [r7, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   212e6:	f008 fc73 	bl	29bd0 <at_params_string_get>
	if (err) {
   212ea:	4604      	mov	r4, r0
   212ec:	2800      	cmp	r0, #0
   212ee:	d1ae      	bne.n	2124e <parse_ncellmeas+0x9e>
	tmp_str[len] = '\0';
   212f0:	68fb      	ldr	r3, [r7, #12]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   212f2:	210a      	movs	r1, #10
	tmp_str[len] = '\0';
   212f4:	3330      	adds	r3, #48	; 0x30
   212f6:	443b      	add	r3, r7
   212f8:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   212fc:	1d2a      	adds	r2, r5, #4
   212fe:	f107 0017 	add.w	r0, r7, #23
   21302:	f008 fcbe 	bl	29c82 <string_to_int>
	if (err) {
   21306:	4604      	mov	r4, r0
   21308:	2800      	cmp	r0, #0
   2130a:	d1a0      	bne.n	2124e <parse_ncellmeas+0x9e>
	tmp_str[3] = '\0';
   2130c:	75f8      	strb	r0, [r7, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   2130e:	462a      	mov	r2, r5
   21310:	210a      	movs	r1, #10
   21312:	f107 0014 	add.w	r0, r7, #20
   21316:	f008 fcb4 	bl	29c82 <string_to_int>
	if (err) {
   2131a:	4604      	mov	r4, r0
   2131c:	2800      	cmp	r0, #0
   2131e:	d196      	bne.n	2124e <parse_ncellmeas+0x9e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   21320:	2104      	movs	r1, #4
   21322:	f107 0208 	add.w	r2, r7, #8
   21326:	f107 001c 	add.w	r0, r7, #28
   2132a:	f008 fcd0 	bl	29cce <string_param_to_int.constprop.0>
	if (err) {
   2132e:	4604      	mov	r4, r0
   21330:	2800      	cmp	r0, #0
   21332:	d18c      	bne.n	2124e <parse_ncellmeas+0x9e>
	cells->current_cell.tac = tmp;
   21334:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   21336:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   21338:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   2133a:	f107 0208 	add.w	r2, r7, #8
   2133e:	f107 001c 	add.w	r0, r7, #28
   21342:	f008 fc19 	bl	29b78 <at_params_int_get>
	if (err) {
   21346:	4604      	mov	r4, r0
   21348:	2800      	cmp	r0, #0
   2134a:	d180      	bne.n	2124e <parse_ncellmeas+0x9e>
	cells->current_cell.timing_advance = tmp;
   2134c:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   2134e:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   21350:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   21352:	f105 0210 	add.w	r2, r5, #16
   21356:	f107 001c 	add.w	r0, r7, #28
   2135a:	f008 fc0d 	bl	29b78 <at_params_int_get>
	if (err) {
   2135e:	4604      	mov	r4, r0
   21360:	2800      	cmp	r0, #0
   21362:	f47f af74 	bne.w	2124e <parse_ncellmeas+0x9e>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   21366:	4649      	mov	r1, r9
   21368:	f105 0228 	add.w	r2, r5, #40	; 0x28
   2136c:	f107 001c 	add.w	r0, r7, #28
   21370:	f008 fbce 	bl	29b10 <at_params_short_get>
	if (err) {
   21374:	4604      	mov	r4, r0
   21376:	2800      	cmp	r0, #0
   21378:	f47f af69 	bne.w	2124e <parse_ncellmeas+0x9e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   2137c:	2108      	movs	r1, #8
   2137e:	f107 0208 	add.w	r2, r7, #8
   21382:	f107 001c 	add.w	r0, r7, #28
   21386:	f008 fbf7 	bl	29b78 <at_params_int_get>
	if (err) {
   2138a:	4604      	mov	r4, r0
   2138c:	2800      	cmp	r0, #0
   2138e:	f47f af5e 	bne.w	2124e <parse_ncellmeas+0x9e>
	cells->current_cell.rsrp = tmp;
   21392:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   21394:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   21396:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   21398:	f107 0208 	add.w	r2, r7, #8
   2139c:	f107 001c 	add.w	r0, r7, #28
   213a0:	f008 fbea 	bl	29b78 <at_params_int_get>
	if (err) {
   213a4:	4604      	mov	r4, r0
   213a6:	2800      	cmp	r0, #0
   213a8:	f47f af51 	bne.w	2124e <parse_ncellmeas+0x9e>
	cells->current_cell.rsrq = tmp;
   213ac:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   213ae:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   213b0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   213b2:	f105 0220 	add.w	r2, r5, #32
   213b6:	f107 001c 	add.w	r0, r7, #28
   213ba:	f008 fbf5 	bl	29ba8 <at_params_int64_get>
	if (err) {
   213be:	4604      	mov	r4, r0
   213c0:	2800      	cmp	r0, #0
   213c2:	f47f af44 	bne.w	2124e <parse_ncellmeas+0x9e>
	cells->ncells_count = neighborcell_count_get(at_response);
   213c6:	4640      	mov	r0, r8
   213c8:	f7ff fecc 	bl	21164 <neighborcell_count_get>
   213cc:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   213d0:	b2c0      	uxtb	r0, r0
   213d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   213d6:	f100 040b 	add.w	r4, r0, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   213da:	f107 001c 	add.w	r0, r7, #28
   213de:	f008 fc17 	bl	29c10 <at_params_valid_count_get>
   213e2:	4284      	cmp	r4, r0
   213e4:	d20f      	bcs.n	21406 <parse_ncellmeas+0x256>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   213e6:	4621      	mov	r1, r4
   213e8:	f105 0218 	add.w	r2, r5, #24
   213ec:	f107 001c 	add.w	r0, r7, #28
   213f0:	f008 fbda 	bl	29ba8 <at_params_int64_get>
		if (err) {
   213f4:	4604      	mov	r4, r0
   213f6:	2800      	cmp	r0, #0
   213f8:	f47f af29 	bne.w	2124e <parse_ncellmeas+0x9e>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   213fc:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   21400:	b933      	cbnz	r3, 21410 <parse_ncellmeas+0x260>
	err = at_params_string_get(&resp_list,
   21402:	2400      	movs	r4, #0
   21404:	e723      	b.n	2124e <parse_ncellmeas+0x9e>
		cells->current_cell.timing_advance_meas_time = 0;
   21406:	2200      	movs	r2, #0
   21408:	2300      	movs	r3, #0
   2140a:	e9c5 2306 	strd	r2, r3, [r5, #24]
   2140e:	e7f5      	b.n	213fc <parse_ncellmeas+0x24c>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   21410:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   21412:	2b00      	cmp	r3, #0
   21414:	d0f5      	beq.n	21402 <parse_ncellmeas+0x252>
   21416:	f04f 080f 	mov.w	r8, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   2141a:	f04f 0900 	mov.w	r9, #0
   2141e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   21422:	4599      	cmp	r9, r3
   21424:	d304      	bcc.n	21430 <parse_ncellmeas+0x280>
	if (incomplete) {
   21426:	2e00      	cmp	r6, #0
   21428:	d0eb      	beq.n	21402 <parse_ncellmeas+0x252>
		err = -E2BIG;
   2142a:	f06f 0406 	mvn.w	r4, #6
   2142e:	e70e      	b.n	2124e <parse_ncellmeas+0x9e>
					&cells->neighbor_cells[i].earfcn);
   21430:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   21432:	f1a8 0104 	sub.w	r1, r8, #4
   21436:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   2143a:	f107 001c 	add.w	r0, r7, #28
   2143e:	f008 fb9b 	bl	29b78 <at_params_int_get>
		if (err) {
   21442:	ea4f 1a09 	mov.w	sl, r9, lsl #4
   21446:	4604      	mov	r4, r0
   21448:	2800      	cmp	r0, #0
   2144a:	f47f af00 	bne.w	2124e <parse_ncellmeas+0x9e>
					  &cells->neighbor_cells[i].phys_cell_id);
   2144e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   21450:	f1a8 0103 	sub.w	r1, r8, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   21454:	4452      	add	r2, sl
		err = at_params_short_get(&resp_list,
   21456:	3208      	adds	r2, #8
   21458:	f107 001c 	add.w	r0, r7, #28
   2145c:	f008 fb58 	bl	29b10 <at_params_short_get>
		if (err) {
   21460:	4604      	mov	r4, r0
   21462:	2800      	cmp	r0, #0
   21464:	f47f aef3 	bne.w	2124e <parse_ncellmeas+0x9e>
		err = at_params_int_get(&resp_list,
   21468:	f107 0208 	add.w	r2, r7, #8
   2146c:	f1a8 0102 	sub.w	r1, r8, #2
   21470:	f107 001c 	add.w	r0, r7, #28
   21474:	f008 fb80 	bl	29b78 <at_params_int_get>
		if (err) {
   21478:	4604      	mov	r4, r0
   2147a:	2800      	cmp	r0, #0
   2147c:	f47f aee7 	bne.w	2124e <parse_ncellmeas+0x9e>
		cells->neighbor_cells[i].rsrp = tmp;
   21480:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   21482:	68ba      	ldr	r2, [r7, #8]
   21484:	4453      	add	r3, sl
   21486:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   21488:	f108 31ff 	add.w	r1, r8, #4294967295
   2148c:	f107 0208 	add.w	r2, r7, #8
   21490:	f107 001c 	add.w	r0, r7, #28
   21494:	f008 fb70 	bl	29b78 <at_params_int_get>
		if (err) {
   21498:	4604      	mov	r4, r0
   2149a:	2800      	cmp	r0, #0
   2149c:	f47f aed7 	bne.w	2124e <parse_ncellmeas+0x9e>
		cells->neighbor_cells[i].rsrq = tmp;
   214a0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   214a2:	68ba      	ldr	r2, [r7, #8]
   214a4:	4453      	add	r3, sl
   214a6:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   214a8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   214aa:	4641      	mov	r1, r8
					&cells->neighbor_cells[i].time_diff);
   214ac:	4452      	add	r2, sl
		err = at_params_int_get(&resp_list,
   214ae:	3204      	adds	r2, #4
   214b0:	f107 001c 	add.w	r0, r7, #28
   214b4:	f008 fb60 	bl	29b78 <at_params_int_get>
		if (err) {
   214b8:	f108 0805 	add.w	r8, r8, #5
   214bc:	4604      	mov	r4, r0
   214be:	2800      	cmp	r0, #0
   214c0:	f47f aec5 	bne.w	2124e <parse_ncellmeas+0x9e>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   214c4:	f109 0901 	add.w	r9, r9, #1
   214c8:	e7a9      	b.n	2141e <parse_ncellmeas+0x26e>
		err = 1;
   214ca:	2401      	movs	r4, #1
   214cc:	e6bf      	b.n	2124e <parse_ncellmeas+0x9e>
   214ce:	bf00      	nop
   214d0:	0002e071 	.word	0x0002e071
   214d4:	0002bde8 	.word	0x0002bde8
   214d8:	0002e418 	.word	0x0002e418
   214dc:	0002e2c9 	.word	0x0002e2c9
   214e0:	0002dfe8 	.word	0x0002dfe8

000214e4 <parse_ncellmeas_gci>:
{
	struct at_param_list resp_list;
	struct lte_lc_ncell *ncells = NULL;
	int err, status, tmp_int, len;
	int16_t tmp_short;
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   214e4:	2300      	movs	r3, #0
{
   214e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   214ea:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
   214ec:	220b      	movs	r2, #11
{
   214ee:	460d      	mov	r5, r1
	uint32_t count = 0;
   214f0:	4699      	mov	r9, r3
{
   214f2:	b0a5      	sub	sp, #148	; 0x94
   214f4:	af00      	add	r7, sp, #0
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   214f6:	e9c7 330f 	strd	r3, r3, [r7, #60]	; 0x3c
	size_t response_prefix_len = sizeof(response_prefix);
   214fa:	62ba      	str	r2, [r7, #40]	; 0x28
{
   214fc:	60f8      	str	r0, [r7, #12]
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   214fe:	f8c7 3043 	str.w	r3, [r7, #67]	; 0x43
static uint32_t get_char_frequency(const char *str, char c)
   21502:	1e4a      	subs	r2, r1, #1
		if (*str == c) {
   21504:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   21508:	2b2c      	cmp	r3, #44	; 0x2c
   2150a:	d102      	bne.n	21512 <parse_ncellmeas_gci+0x2e>
			count++;
   2150c:	f109 0901 	add.w	r9, r9, #1
	} while (*(str++) != '\0');
   21510:	e7f8      	b.n	21504 <parse_ncellmeas_gci+0x20>
   21512:	2b00      	cmp	r3, #0
   21514:	d1f6      	bne.n	21504 <parse_ncellmeas_gci+0x20>
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	/* Fill the defaults */
	cells->gci_cells_count = 0;
	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   21516:	f04f 32ff 	mov.w	r2, #4294967295
   2151a:	2430      	movs	r4, #48	; 0x30
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   2151c:	f109 0803 	add.w	r8, r9, #3
	cells->gci_cells_count = 0;
   21520:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	cells->ncells_count = 0;
   21524:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   21528:	60b2      	str	r2, [r6, #8]

	for (i = 0; i < params->gci_count; i++) {
   2152a:	68f9      	ldr	r1, [r7, #12]
   2152c:	7849      	ldrb	r1, [r1, #1]
   2152e:	4299      	cmp	r1, r3
   21530:	d812      	bhi.n	21558 <parse_ncellmeas_gci+0x74>
	 *		<meas_time>,<serving>,<neighbor_count>
	 *	[,<n_earfcn1>,<n_phys_cell_id1>,<n_rsrp1>,<n_rsrq1>,<time_diff1>]
	 *	[,<n_earfcn2>,<n_phys_cell_id2>,<n_rsrp2>,<n_rsrq2>,<time_diff2>]...]...
	 */

	err = at_params_list_init(&resp_list, param_count);
   21532:	4641      	mov	r1, r8
   21534:	f107 0034 	add.w	r0, r7, #52	; 0x34
   21538:	f008 fa42 	bl	299c0 <at_params_list_init>
	if (err) {
   2153c:	4604      	mov	r4, r0
   2153e:	b1a8      	cbz	r0, 2156c <parse_ncellmeas_gci+0x88>
		LOG_ERR("Could not init AT params list for cell_list, error: %d", err);
   21540:	466d      	mov	r5, sp
   21542:	b088      	sub	sp, #32
   21544:	466a      	mov	r2, sp
   21546:	4bb1      	ldr	r3, [pc, #708]	; (2180c <parse_ncellmeas_gci+0x328>)

				/* <n_rsrq[j]> */
				curr_index++;
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
				if (err) {
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   21548:	6153      	str	r3, [r2, #20]
		}
	}

	if (incomplete) {
		err = -E2BIG;
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   2154a:	2303      	movs	r3, #3
   2154c:	6194      	str	r4, [r2, #24]
   2154e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21552:	f842 3f10 	str.w	r3, [r2, #16]!
   21556:	e0a7      	b.n	216a8 <parse_ncellmeas_gci+0x1c4>
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   21558:	fb04 f003 	mul.w	r0, r4, r3
   2155c:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
	for (i = 0; i < params->gci_count; i++) {
   2155e:	3301      	adds	r3, #1
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   21560:	4401      	add	r1, r0
   21562:	608a      	str	r2, [r1, #8]
		cells->gci_cells[i].timing_advance = LTE_LC_CELL_TIMING_ADVANCE_INVALID;
   21564:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   21566:	4401      	add	r1, r0
   21568:	828a      	strh	r2, [r1, #20]
	for (i = 0; i < params->gci_count; i++) {
   2156a:	e7de      	b.n	2152a <parse_ncellmeas_gci+0x46>
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   2156c:	4601      	mov	r1, r0
   2156e:	f107 0234 	add.w	r2, r7, #52	; 0x34
   21572:	4628      	mov	r0, r5
   21574:	f008 fa0b 	bl	2998e <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   21578:	4604      	mov	r4, r0
   2157a:	b360      	cbz	r0, 215d6 <parse_ncellmeas_gci+0xf2>
   2157c:	1dc3      	adds	r3, r0, #7
   2157e:	d004      	beq.n	2158a <parse_ncellmeas_gci+0xa6>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   21580:	466d      	mov	r5, sp
   21582:	b088      	sub	sp, #32
   21584:	466a      	mov	r2, sp
   21586:	4ba2      	ldr	r3, [pc, #648]	; (21810 <parse_ncellmeas_gci+0x32c>)
   21588:	e7de      	b.n	21548 <parse_ncellmeas_gci+0x64>
		LOG_WRN("E2BIG was returned, continue. param_count %d, err %d, str %s",
   2158a:	46ea      	mov	sl, sp
   2158c:	b08a      	sub	sp, #40	; 0x28
   2158e:	466a      	mov	r2, sp
   21590:	4ba0      	ldr	r3, [pc, #640]	; (21814 <parse_ncellmeas_gci+0x330>)
   21592:	e9c2 0507 	strd	r0, r5, [r2, #28]
   21596:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2159a:	f240 4302 	movw	r3, #1026	; 0x402
   2159e:	8493      	strh	r3, [r2, #36]	; 0x24
   215a0:	4b9d      	ldr	r3, [pc, #628]	; (21818 <parse_ncellmeas_gci+0x334>)
   215a2:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   215a6:	f842 3f10 	str.w	r3, [r2, #16]!
   215aa:	489c      	ldr	r0, [pc, #624]	; (2181c <parse_ncellmeas_gci+0x338>)
   215ac:	f008 fb66 	bl	29c7c <z_log_msg_static_create.constprop.0>
		incomplete = true;
   215b0:	2301      	movs	r3, #1
   215b2:	46d5      	mov	sp, sl
   215b4:	617b      	str	r3, [r7, #20]
	err = at_params_string_get(&resp_list,
   215b6:	2100      	movs	r1, #0
   215b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
   215bc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   215c0:	f107 0034 	add.w	r0, r7, #52	; 0x34
   215c4:	f008 fb04 	bl	29bd0 <at_params_string_get>
	if (err) {
   215c8:	4604      	mov	r4, r0
   215ca:	b130      	cbz	r0, 215da <parse_ncellmeas_gci+0xf6>
		LOG_ERR("Could not get response prefix, error: %d", err);
   215cc:	466d      	mov	r5, sp
   215ce:	b088      	sub	sp, #32
   215d0:	466a      	mov	r2, sp
   215d2:	4b93      	ldr	r3, [pc, #588]	; (21820 <parse_ncellmeas_gci+0x33c>)
   215d4:	e7b8      	b.n	21548 <parse_ncellmeas_gci+0x64>
	bool incomplete = false;
   215d6:	6178      	str	r0, [r7, #20]
   215d8:	e7ed      	b.n	215b6 <parse_ncellmeas_gci+0xd2>
	if (!response_is_valid(response_prefix, response_prefix_len,
   215da:	4a92      	ldr	r2, [pc, #584]	; (21824 <parse_ncellmeas_gci+0x340>)
   215dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   215de:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   215e2:	f7ff fb05 	bl	20bf0 <response_is_valid>
   215e6:	6138      	str	r0, [r7, #16]
   215e8:	b9a0      	cbnz	r0, 21614 <parse_ncellmeas_gci+0x130>
		LOG_ERR("Not a valid NCELLMEAS response");
   215ea:	4b8f      	ldr	r3, [pc, #572]	; (21828 <parse_ncellmeas_gci+0x344>)
   215ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   215f0:	677b      	str	r3, [r7, #116]	; 0x74
   215f2:	2302      	movs	r3, #2
   215f4:	4889      	ldr	r0, [pc, #548]	; (2181c <parse_ncellmeas_gci+0x338>)
   215f6:	673b      	str	r3, [r7, #112]	; 0x70
   215f8:	f107 0270 	add.w	r2, r7, #112	; 0x70
   215fc:	f008 fb3e 	bl	29c7c <z_log_msg_static_create.constprop.0>
	err = at_params_string_get(&resp_list,
   21600:	2400      	movs	r4, #0
	}

clean_exit:
	at_params_list_free(&resp_list);
   21602:	f107 0034 	add.w	r0, r7, #52	; 0x34
   21606:	f008 fa05 	bl	29a14 <at_params_list_free>

	return err;
}
   2160a:	4620      	mov	r0, r4
   2160c:	3794      	adds	r7, #148	; 0x94
   2160e:	46bd      	mov	sp, r7
   21610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = at_params_int_get(&resp_list, curr_index, &status);
   21614:	2101      	movs	r1, #1
   21616:	f107 021c 	add.w	r2, r7, #28
   2161a:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2161e:	f008 faab 	bl	29b78 <at_params_int_get>
	if (err) {
   21622:	4604      	mov	r4, r0
   21624:	2800      	cmp	r0, #0
   21626:	d1ec      	bne.n	21602 <parse_ncellmeas_gci+0x11e>
	if (status == AT_NCELLMEAS_STATUS_VALUE_FAIL) {
   21628:	69fc      	ldr	r4, [r7, #28]
   2162a:	2c01      	cmp	r4, #1
   2162c:	d0e9      	beq.n	21602 <parse_ncellmeas_gci+0x11e>
	} else if (status == AT_NCELLMEAS_STATUS_VALUE_INCOMPLETE) {
   2162e:	2c02      	cmp	r4, #2
   21630:	d109      	bne.n	21646 <parse_ncellmeas_gci+0x162>
		LOG_WRN("NCELLMEAS measurements interrupted; results incomplete");
   21632:	4b7e      	ldr	r3, [pc, #504]	; (2182c <parse_ncellmeas_gci+0x348>)
   21634:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   21638:	e9c7 431c 	strd	r4, r3, [r7, #112]	; 0x70
   2163c:	4877      	ldr	r0, [pc, #476]	; (2181c <parse_ncellmeas_gci+0x338>)
   2163e:	f107 0270 	add.w	r2, r7, #112	; 0x70
   21642:	f008 fb1b 	bl	29c7c <z_log_msg_static_create.constprop.0>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   21646:	f04f 0a00 	mov.w	sl, #0
   2164a:	2501      	movs	r5, #1
   2164c:	46d0      	mov	r8, sl
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   2164e:	f1a9 030a 	sub.w	r3, r9, #10
   21652:	607b      	str	r3, [r7, #4]
   21654:	687b      	ldr	r3, [r7, #4]
   21656:	42ab      	cmp	r3, r5
   21658:	d903      	bls.n	21662 <parse_ncellmeas_gci+0x17e>
			i < params->gci_count; i++) {
   2165a:	68fb      	ldr	r3, [r7, #12]
   2165c:	785b      	ldrb	r3, [r3, #1]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   2165e:	4543      	cmp	r3, r8
   21660:	d80a      	bhi.n	21678 <parse_ncellmeas_gci+0x194>
	if (incomplete) {
   21662:	697b      	ldr	r3, [r7, #20]
   21664:	2b00      	cmp	r3, #0
   21666:	d0cb      	beq.n	21600 <parse_ncellmeas_gci+0x11c>
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   21668:	466d      	mov	r5, sp
   2166a:	b088      	sub	sp, #32
   2166c:	466a      	mov	r2, sp
   2166e:	4b70      	ldr	r3, [pc, #448]	; (21830 <parse_ncellmeas_gci+0x34c>)
   21670:	f06f 0406 	mvn.w	r4, #6
   21674:	6153      	str	r3, [r2, #20]
   21676:	e768      	b.n	2154a <parse_ncellmeas_gci+0x66>
		curr_index++;
   21678:	f105 0901 	add.w	r9, r5, #1
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   2167c:	4649      	mov	r1, r9
   2167e:	f107 0220 	add.w	r2, r7, #32
   21682:	f107 0034 	add.w	r0, r7, #52	; 0x34
   21686:	f008 fb22 	bl	29cce <string_param_to_int.constprop.0>
		if (err) {
   2168a:	4604      	mov	r4, r0
   2168c:	b188      	cbz	r0, 216b2 <parse_ncellmeas_gci+0x1ce>
			LOG_ERR("Could not parse cell_id, index %d, i %d error: %d",
   2168e:	466d      	mov	r5, sp
   21690:	b08a      	sub	sp, #40	; 0x28
   21692:	466a      	mov	r2, sp
   21694:	4b67      	ldr	r3, [pc, #412]	; (21834 <parse_ncellmeas_gci+0x350>)
   21696:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   2169a:	e9c2 3905 	strd	r3, r9, [r2, #20]
   2169e:	2305      	movs	r3, #5
   216a0:	e9c2 8007 	strd	r8, r0, [r2, #28]
   216a4:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   216a8:	485c      	ldr	r0, [pc, #368]	; (2181c <parse_ncellmeas_gci+0x338>)
   216aa:	f008 fae7 	bl	29c7c <z_log_msg_static_create.constprop.0>
   216ae:	46ad      	mov	sp, r5
   216b0:	e7a7      	b.n	21602 <parse_ncellmeas_gci+0x11e>
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   216b2:	6a3b      	ldr	r3, [r7, #32]
   216b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   216b8:	db11      	blt.n	216de <parse_ncellmeas_gci+0x1fa>
			LOG_WRN("cell_id = %d which is > LTE_LC_CELL_EUTRAN_ID_MAX; "
   216ba:	466c      	mov	r4, sp
   216bc:	b088      	sub	sp, #32
   216be:	466a      	mov	r2, sp
   216c0:	495d      	ldr	r1, [pc, #372]	; (21838 <parse_ncellmeas_gci+0x354>)
   216c2:	4856      	ldr	r0, [pc, #344]	; (2181c <parse_ncellmeas_gci+0x338>)
   216c4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   216c8:	2303      	movs	r3, #3
   216ca:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   216ce:	f842 3f10 	str.w	r3, [r2, #16]!
   216d2:	f008 fad3 	bl	29c7c <z_log_msg_static_create.constprop.0>
			tmp_int = LTE_LC_CELL_EUTRAN_ID_INVALID;
   216d6:	f04f 33ff 	mov.w	r3, #4294967295
   216da:	46a5      	mov	sp, r4
   216dc:	623b      	str	r3, [r7, #32]
		parsed_cell.id = tmp_int;
   216de:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   216e0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
		parsed_cell.id = tmp_int;
   216e4:	66bb      	str	r3, [r7, #104]	; 0x68
		len = sizeof(tmp_str);
   216e6:	2307      	movs	r3, #7
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   216e8:	1ca9      	adds	r1, r5, #2
		len = sizeof(tmp_str);
   216ea:	627b      	str	r3, [r7, #36]	; 0x24
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   216ec:	f107 0034 	add.w	r0, r7, #52	; 0x34
   216f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
   216f4:	f008 fa6c 	bl	29bd0 <at_params_string_get>
		if (err) {
   216f8:	4604      	mov	r4, r0
   216fa:	b120      	cbz	r0, 21706 <parse_ncellmeas_gci+0x222>
			LOG_ERR("Could not parse plmn, error: %d", err);
   216fc:	466d      	mov	r5, sp
   216fe:	b088      	sub	sp, #32
   21700:	466a      	mov	r2, sp
   21702:	4b4e      	ldr	r3, [pc, #312]	; (2183c <parse_ncellmeas_gci+0x358>)
   21704:	e720      	b.n	21548 <parse_ncellmeas_gci+0x64>
		tmp_str[len] = '\0';
   21706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21708:	f107 0218 	add.w	r2, r7, #24
   2170c:	3378      	adds	r3, #120	; 0x78
   2170e:	4413      	add	r3, r2
   21710:	f803 0c64 	strb.w	r0, [r3, #-100]
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
   21714:	210a      	movs	r1, #10
   21716:	f107 0264 	add.w	r2, r7, #100	; 0x64
   2171a:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   2171e:	f008 fab0 	bl	29c82 <string_to_int>
		if (err) {
   21722:	4604      	mov	r4, r0
   21724:	b120      	cbz	r0, 21730 <parse_ncellmeas_gci+0x24c>
			LOG_ERR("string_to_int, error: %d", err);
   21726:	466d      	mov	r5, sp
   21728:	b088      	sub	sp, #32
   2172a:	466a      	mov	r2, sp
   2172c:	4b44      	ldr	r3, [pc, #272]	; (21840 <parse_ncellmeas_gci+0x35c>)
   2172e:	e70b      	b.n	21548 <parse_ncellmeas_gci+0x64>
		tmp_str[3] = '\0';
   21730:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
		err = string_to_int(tmp_str, 10, &parsed_cell.mcc);
   21734:	210a      	movs	r1, #10
   21736:	f107 0260 	add.w	r2, r7, #96	; 0x60
   2173a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   2173e:	f008 faa0 	bl	29c82 <string_to_int>
		if (err) {
   21742:	4604      	mov	r4, r0
   21744:	2800      	cmp	r0, #0
   21746:	d1ee      	bne.n	21726 <parse_ncellmeas_gci+0x242>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   21748:	f107 0220 	add.w	r2, r7, #32
   2174c:	1ce9      	adds	r1, r5, #3
   2174e:	f107 0034 	add.w	r0, r7, #52	; 0x34
   21752:	f008 fabc 	bl	29cce <string_param_to_int.constprop.0>
		if (err) {
   21756:	4604      	mov	r4, r0
   21758:	b160      	cbz	r0, 21774 <parse_ncellmeas_gci+0x290>
			LOG_ERR("Could not parse tracking_area_code in i %d, error: %d", i, err);
   2175a:	466d      	mov	r5, sp
   2175c:	b088      	sub	sp, #32
   2175e:	466a      	mov	r2, sp
   21760:	4b38      	ldr	r3, [pc, #224]	; (21844 <parse_ncellmeas_gci+0x360>)
   21762:	61d0      	str	r0, [r2, #28]
   21764:	e9c2 3805 	strd	r3, r8, [r2, #20]
   21768:	2304      	movs	r3, #4
   2176a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2176e:	f842 3f10 	str.w	r3, [r2, #16]!
   21772:	e799      	b.n	216a8 <parse_ncellmeas_gci+0x1c4>
		parsed_cell.tac = tmp_int;
   21774:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   21776:	f107 0220 	add.w	r2, r7, #32
		parsed_cell.tac = tmp_int;
   2177a:	66fb      	str	r3, [r7, #108]	; 0x6c
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   2177c:	1d29      	adds	r1, r5, #4
   2177e:	f107 0034 	add.w	r0, r7, #52	; 0x34
   21782:	f008 f9f9 	bl	29b78 <at_params_int_get>
		if (err) {
   21786:	4604      	mov	r4, r0
   21788:	b120      	cbz	r0, 21794 <parse_ncellmeas_gci+0x2b0>
			LOG_ERR("Could not parse timing_advance, error: %d", err);
   2178a:	466d      	mov	r5, sp
   2178c:	b088      	sub	sp, #32
   2178e:	466a      	mov	r2, sp
   21790:	4b2d      	ldr	r3, [pc, #180]	; (21848 <parse_ncellmeas_gci+0x364>)
   21792:	e6d9      	b.n	21548 <parse_ncellmeas_gci+0x64>
		parsed_cell.timing_advance = tmp_int;
   21794:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_int64_get(&resp_list, curr_index,
   21796:	f107 0278 	add.w	r2, r7, #120	; 0x78
		parsed_cell.timing_advance = tmp_int;
   2179a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		err = at_params_int64_get(&resp_list, curr_index,
   2179e:	1d69      	adds	r1, r5, #5
   217a0:	f107 0034 	add.w	r0, r7, #52	; 0x34
   217a4:	f008 fa00 	bl	29ba8 <at_params_int64_get>
		if (err) {
   217a8:	4604      	mov	r4, r0
   217aa:	b120      	cbz	r0, 217b6 <parse_ncellmeas_gci+0x2d2>
			LOG_ERR("Could not parse timing_advance_meas_time, error: %d", err);
   217ac:	466d      	mov	r5, sp
   217ae:	b088      	sub	sp, #32
   217b0:	466a      	mov	r2, sp
   217b2:	4b26      	ldr	r3, [pc, #152]	; (2184c <parse_ncellmeas_gci+0x368>)
   217b4:	e6c8      	b.n	21548 <parse_ncellmeas_gci+0x64>
		err = at_params_int_get(&resp_list, curr_index, &parsed_cell.earfcn);
   217b6:	f107 0270 	add.w	r2, r7, #112	; 0x70
   217ba:	1da9      	adds	r1, r5, #6
   217bc:	f107 0034 	add.w	r0, r7, #52	; 0x34
   217c0:	f008 f9da 	bl	29b78 <at_params_int_get>
		if (err) {
   217c4:	4604      	mov	r4, r0
   217c6:	b120      	cbz	r0, 217d2 <parse_ncellmeas_gci+0x2ee>
			LOG_ERR("Could not parse earfcn, error: %d", err);
   217c8:	466d      	mov	r5, sp
   217ca:	b088      	sub	sp, #32
   217cc:	466a      	mov	r2, sp
   217ce:	4b20      	ldr	r3, [pc, #128]	; (21850 <parse_ncellmeas_gci+0x36c>)
   217d0:	e6ba      	b.n	21548 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.phys_cell_id);
   217d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
   217d6:	1de9      	adds	r1, r5, #7
   217d8:	f107 0034 	add.w	r0, r7, #52	; 0x34
   217dc:	f008 f998 	bl	29b10 <at_params_short_get>
		if (err) {
   217e0:	4604      	mov	r4, r0
   217e2:	b120      	cbz	r0, 217ee <parse_ncellmeas_gci+0x30a>
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   217e4:	466d      	mov	r5, sp
   217e6:	b088      	sub	sp, #32
   217e8:	466a      	mov	r2, sp
   217ea:	4b1a      	ldr	r3, [pc, #104]	; (21854 <parse_ncellmeas_gci+0x370>)
   217ec:	e6ac      	b.n	21548 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrp);
   217ee:	f107 028a 	add.w	r2, r7, #138	; 0x8a
   217f2:	f105 0108 	add.w	r1, r5, #8
   217f6:	f107 0034 	add.w	r0, r7, #52	; 0x34
   217fa:	f008 f989 	bl	29b10 <at_params_short_get>
		if (err) {
   217fe:	4604      	mov	r4, r0
   21800:	b360      	cbz	r0, 2185c <parse_ncellmeas_gci+0x378>
			LOG_ERR("Could not parse rsrp, error: %d", err);
   21802:	466d      	mov	r5, sp
   21804:	b088      	sub	sp, #32
   21806:	466a      	mov	r2, sp
   21808:	4b13      	ldr	r3, [pc, #76]	; (21858 <parse_ncellmeas_gci+0x374>)
   2180a:	e69d      	b.n	21548 <parse_ncellmeas_gci+0x64>
   2180c:	0002e44a 	.word	0x0002e44a
   21810:	0002e418 	.word	0x0002e418
   21814:	0002e481 	.word	0x0002e481
   21818:	01000005 	.word	0x01000005
   2181c:	0002bde8 	.word	0x0002bde8
   21820:	0002e2c9 	.word	0x0002e2c9
   21824:	0002dfe8 	.word	0x0002dfe8
   21828:	0002e4be 	.word	0x0002e4be
   2182c:	0002e4dd 	.word	0x0002e4dd
   21830:	0002e895 	.word	0x0002e895
   21834:	0002e514 	.word	0x0002e514
   21838:	0002e546 	.word	0x0002e546
   2183c:	0002e589 	.word	0x0002e589
   21840:	0002e5a9 	.word	0x0002e5a9
   21844:	0002e5c2 	.word	0x0002e5c2
   21848:	0002e5f8 	.word	0x0002e5f8
   2184c:	0002e622 	.word	0x0002e622
   21850:	0002e656 	.word	0x0002e656
   21854:	0002e678 	.word	0x0002e678
   21858:	0002e6a0 	.word	0x0002e6a0
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrq);
   2185c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
   21860:	f105 0109 	add.w	r1, r5, #9
   21864:	f107 0034 	add.w	r0, r7, #52	; 0x34
   21868:	f008 f952 	bl	29b10 <at_params_short_get>
		if (err) {
   2186c:	4604      	mov	r4, r0
   2186e:	b120      	cbz	r0, 2187a <parse_ncellmeas_gci+0x396>
			LOG_ERR("Could not parse rsrq, error: %d", err);
   21870:	466d      	mov	r5, sp
   21872:	b088      	sub	sp, #32
   21874:	466a      	mov	r2, sp
   21876:	4b75      	ldr	r3, [pc, #468]	; (21a4c <parse_ncellmeas_gci+0x568>)
   21878:	e666      	b.n	21548 <parse_ncellmeas_gci+0x64>
		err = at_params_int64_get(&resp_list, curr_index, &parsed_cell.measurement_time);
   2187a:	f107 0280 	add.w	r2, r7, #128	; 0x80
   2187e:	f105 010a 	add.w	r1, r5, #10
   21882:	f107 0034 	add.w	r0, r7, #52	; 0x34
   21886:	f008 f98f 	bl	29ba8 <at_params_int64_get>
		if (err) {
   2188a:	4604      	mov	r4, r0
   2188c:	b120      	cbz	r0, 21898 <parse_ncellmeas_gci+0x3b4>
			LOG_ERR("Could not parse meas_time, error: %d", err);
   2188e:	466d      	mov	r5, sp
   21890:	b088      	sub	sp, #32
   21892:	466a      	mov	r2, sp
   21894:	4b6e      	ldr	r3, [pc, #440]	; (21a50 <parse_ncellmeas_gci+0x56c>)
   21896:	e657      	b.n	21548 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   21898:	f107 021a 	add.w	r2, r7, #26
   2189c:	f105 010b 	add.w	r1, r5, #11
   218a0:	f107 0034 	add.w	r0, r7, #52	; 0x34
   218a4:	f008 f934 	bl	29b10 <at_params_short_get>
		if (err) {
   218a8:	4604      	mov	r4, r0
   218aa:	b120      	cbz	r0, 218b6 <parse_ncellmeas_gci+0x3d2>
			LOG_ERR("Could not parse serving, error: %d", err);
   218ac:	466d      	mov	r5, sp
   218ae:	b088      	sub	sp, #32
   218b0:	466a      	mov	r2, sp
   218b2:	4b68      	ldr	r3, [pc, #416]	; (21a54 <parse_ncellmeas_gci+0x570>)
   218b4:	e648      	b.n	21548 <parse_ncellmeas_gci+0x64>
		curr_index++;
   218b6:	350c      	adds	r5, #12
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   218b8:	4629      	mov	r1, r5
   218ba:	f107 021a 	add.w	r2, r7, #26
   218be:	f107 0034 	add.w	r0, r7, #52	; 0x34
		is_serving_cell = tmp_short;
   218c2:	f9b7 901a 	ldrsh.w	r9, [r7, #26]
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   218c6:	f008 f923 	bl	29b10 <at_params_short_get>
		if (err) {
   218ca:	4604      	mov	r4, r0
   218cc:	b120      	cbz	r0, 218d8 <parse_ncellmeas_gci+0x3f4>
			LOG_ERR("Could not parse neighbor_count, error: %d", err);
   218ce:	466d      	mov	r5, sp
   218d0:	b088      	sub	sp, #32
   218d2:	466a      	mov	r2, sp
   218d4:	4b60      	ldr	r3, [pc, #384]	; (21a58 <parse_ncellmeas_gci+0x574>)
   218d6:	e637      	b.n	21548 <parse_ncellmeas_gci+0x64>
		if (is_serving_cell) {
   218d8:	f1b9 0f00 	cmp.w	r9, #0
   218dc:	f000 809e 	beq.w	21a1c <parse_ncellmeas_gci+0x538>
			cells->current_cell = parsed_cell;
   218e0:	46b4      	mov	ip, r6
   218e2:	f107 0e60 	add.w	lr, r7, #96	; 0x60
   218e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   218ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   218ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   218f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   218f6:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
		parsed_ncells_count = tmp_short;
   218fa:	f897 901a 	ldrb.w	r9, [r7, #26]
			cells->current_cell = parsed_cell;
   218fe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			if (parsed_ncells_count != 0) {
   21902:	f1b9 0f00 	cmp.w	r9, #0
   21906:	d02c      	beq.n	21962 <parse_ncellmeas_gci+0x47e>
				if (parsed_ncells_count > CONFIG_LTE_NEIGHBOR_CELLS_MAX) {
   21908:	f1b9 0f0a 	cmp.w	r9, #10
   2190c:	d924      	bls.n	21958 <parse_ncellmeas_gci+0x474>
					LOG_WRN("Cutting response, because received neigbor cell"
   2190e:	46e9      	mov	r9, sp
   21910:	b088      	sub	sp, #32
   21912:	466a      	mov	r2, sp
   21914:	4b51      	ldr	r3, [pc, #324]	; (21a5c <parse_ncellmeas_gci+0x578>)
   21916:	240a      	movs	r4, #10
   21918:	6153      	str	r3, [r2, #20]
   2191a:	2303      	movs	r3, #3
   2191c:	6194      	str	r4, [r2, #24]
   2191e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   21922:	f842 3f10 	str.w	r3, [r2, #16]!
   21926:	484e      	ldr	r0, [pc, #312]	; (21a60 <parse_ncellmeas_gci+0x57c>)
   21928:	f008 f9a8 	bl	29c7c <z_log_msg_static_create.constprop.0>
   2192c:	46cd      	mov	sp, r9
					incomplete = true;
   2192e:	693b      	ldr	r3, [r7, #16]
   21930:	617b      	str	r3, [r7, #20]
				ncells = k_calloc(
   21932:	2110      	movs	r1, #16
   21934:	4620      	mov	r0, r4
   21936:	f009 fd91 	bl	2b45c <k_calloc>
				if (ncells == NULL) {
   2193a:	b978      	cbnz	r0, 2195c <parse_ncellmeas_gci+0x478>
					LOG_WRN("Failed to allocate memory for the ncells"
   2193c:	4b49      	ldr	r3, [pc, #292]	; (21a64 <parse_ncellmeas_gci+0x580>)
   2193e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   21942:	65fb      	str	r3, [r7, #92]	; 0x5c
   21944:	2302      	movs	r3, #2
   21946:	4846      	ldr	r0, [pc, #280]	; (21a60 <parse_ncellmeas_gci+0x57c>)
   21948:	65bb      	str	r3, [r7, #88]	; 0x58
   2194a:	f107 0258 	add.w	r2, r7, #88	; 0x58
   2194e:	f008 f995 	bl	29c7c <z_log_msg_static_create.constprop.0>
			i < params->gci_count; i++) {
   21952:	f108 0801 	add.w	r8, r8, #1
   21956:	e67d      	b.n	21654 <parse_ncellmeas_gci+0x170>
					to_be_parsed_ncell_count = parsed_ncells_count;
   21958:	464c      	mov	r4, r9
   2195a:	e7ea      	b.n	21932 <parse_ncellmeas_gci+0x44e>
				cells->neighbor_cells = ncells;
   2195c:	6370      	str	r0, [r6, #52]	; 0x34
				cells->ncells_count = to_be_parsed_ncell_count;
   2195e:	f886 4030 	strb.w	r4, [r6, #48]	; 0x30
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   21962:	f04f 0900 	mov.w	r9, #0
   21966:	60bc      	str	r4, [r7, #8]
   21968:	68bb      	ldr	r3, [r7, #8]
   2196a:	454b      	cmp	r3, r9
   2196c:	d0f1      	beq.n	21952 <parse_ncellmeas_gci+0x46e>
							&cells->neighbor_cells[j].earfcn);
   2196e:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_int_get(&resp_list,
   21970:	1c69      	adds	r1, r5, #1
   21972:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   21976:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2197a:	f008 f8fd 	bl	29b78 <at_params_int_get>
				if (err) {
   2197e:	ea4f 1b09 	mov.w	fp, r9, lsl #4
   21982:	4604      	mov	r4, r0
   21984:	b120      	cbz	r0, 21990 <parse_ncellmeas_gci+0x4ac>
					LOG_ERR("Could not parse n_earfcn, error: %d", err);
   21986:	466d      	mov	r5, sp
   21988:	b088      	sub	sp, #32
   2198a:	466a      	mov	r2, sp
   2198c:	4b36      	ldr	r3, [pc, #216]	; (21a68 <parse_ncellmeas_gci+0x584>)
   2198e:	e5db      	b.n	21548 <parse_ncellmeas_gci+0x64>
							  &cells->neighbor_cells[j].phys_cell_id);
   21990:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_short_get(&resp_list,
   21992:	1ca9      	adds	r1, r5, #2
							  &cells->neighbor_cells[j].phys_cell_id);
   21994:	445a      	add	r2, fp
				err = at_params_short_get(&resp_list,
   21996:	3208      	adds	r2, #8
   21998:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2199c:	f008 f8b8 	bl	29b10 <at_params_short_get>
				if (err) {
   219a0:	4604      	mov	r4, r0
   219a2:	b120      	cbz	r0, 219ae <parse_ncellmeas_gci+0x4ca>
					LOG_ERR("Could not parse n_phys_cell_id, error: %d", err);
   219a4:	466d      	mov	r5, sp
   219a6:	b088      	sub	sp, #32
   219a8:	466a      	mov	r2, sp
   219aa:	4b30      	ldr	r3, [pc, #192]	; (21a6c <parse_ncellmeas_gci+0x588>)
   219ac:	e5cc      	b.n	21548 <parse_ncellmeas_gci+0x64>
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   219ae:	f107 0220 	add.w	r2, r7, #32
   219b2:	1ce9      	adds	r1, r5, #3
   219b4:	f107 0034 	add.w	r0, r7, #52	; 0x34
   219b8:	f008 f8de 	bl	29b78 <at_params_int_get>
				if (err) {
   219bc:	4604      	mov	r4, r0
   219be:	b120      	cbz	r0, 219ca <parse_ncellmeas_gci+0x4e6>
					LOG_ERR("Could not parse n_rsrp, error: %d", err);
   219c0:	466d      	mov	r5, sp
   219c2:	b088      	sub	sp, #32
   219c4:	466a      	mov	r2, sp
   219c6:	4b2a      	ldr	r3, [pc, #168]	; (21a70 <parse_ncellmeas_gci+0x58c>)
   219c8:	e5be      	b.n	21548 <parse_ncellmeas_gci+0x64>
				cells->neighbor_cells[j].rsrp = tmp_int;
   219ca:	6b73      	ldr	r3, [r6, #52]	; 0x34
   219cc:	6a3a      	ldr	r2, [r7, #32]
   219ce:	445b      	add	r3, fp
   219d0:	815a      	strh	r2, [r3, #10]
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   219d2:	1d29      	adds	r1, r5, #4
   219d4:	f107 0220 	add.w	r2, r7, #32
   219d8:	f107 0034 	add.w	r0, r7, #52	; 0x34
   219dc:	f008 f8cc 	bl	29b78 <at_params_int_get>
				if (err) {
   219e0:	4604      	mov	r4, r0
   219e2:	b120      	cbz	r0, 219ee <parse_ncellmeas_gci+0x50a>
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   219e4:	466d      	mov	r5, sp
   219e6:	b088      	sub	sp, #32
   219e8:	466a      	mov	r2, sp
   219ea:	4b22      	ldr	r3, [pc, #136]	; (21a74 <parse_ncellmeas_gci+0x590>)
   219ec:	e5ac      	b.n	21548 <parse_ncellmeas_gci+0x64>
				cells->neighbor_cells[j].rsrq = tmp_int;
   219ee:	6b73      	ldr	r3, [r6, #52]	; 0x34
   219f0:	6a3a      	ldr	r2, [r7, #32]
   219f2:	445b      	add	r3, fp
   219f4:	819a      	strh	r2, [r3, #12]
							&cells->neighbor_cells[j].time_diff);
   219f6:	6b72      	ldr	r2, [r6, #52]	; 0x34
				curr_index++;
   219f8:	3505      	adds	r5, #5
							&cells->neighbor_cells[j].time_diff);
   219fa:	445a      	add	r2, fp
				err = at_params_int_get(&resp_list,
   219fc:	4629      	mov	r1, r5
   219fe:	3204      	adds	r2, #4
   21a00:	f107 0034 	add.w	r0, r7, #52	; 0x34
   21a04:	f008 f8b8 	bl	29b78 <at_params_int_get>
				if (err) {
   21a08:	4604      	mov	r4, r0
   21a0a:	b120      	cbz	r0, 21a16 <parse_ncellmeas_gci+0x532>
					LOG_ERR("Could not parse time_diff, error: %d", err);
   21a0c:	466d      	mov	r5, sp
   21a0e:	b088      	sub	sp, #32
   21a10:	466a      	mov	r2, sp
   21a12:	4b19      	ldr	r3, [pc, #100]	; (21a78 <parse_ncellmeas_gci+0x594>)
   21a14:	e598      	b.n	21548 <parse_ncellmeas_gci+0x64>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   21a16:	f109 0901 	add.w	r9, r9, #1
   21a1a:	e7a5      	b.n	21968 <parse_ncellmeas_gci+0x484>
			cells->gci_cells[k] = parsed_cell;
   21a1c:	2330      	movs	r3, #48	; 0x30
   21a1e:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
   21a20:	f107 0c60 	add.w	ip, r7, #96	; 0x60
   21a24:	fb03 440a 	mla	r4, r3, sl, r4
   21a28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   21a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21a2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   21a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21a34:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   21a38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   21a3c:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
			k++;
   21a40:	f10a 0a01 	add.w	sl, sl, #1
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   21a44:	3301      	adds	r3, #1
   21a46:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
			k++;
   21a4a:	e782      	b.n	21952 <parse_ncellmeas_gci+0x46e>
   21a4c:	0002e6c0 	.word	0x0002e6c0
   21a50:	0002e6e0 	.word	0x0002e6e0
   21a54:	0002e705 	.word	0x0002e705
   21a58:	0002e728 	.word	0x0002e728
   21a5c:	0002e752 	.word	0x0002e752
   21a60:	0002bde8 	.word	0x0002bde8
   21a64:	0002e7aa 	.word	0x0002e7aa
   21a68:	0002e7de 	.word	0x0002e7de
   21a6c:	0002e802 	.word	0x0002e802
   21a70:	0002e82c 	.word	0x0002e82c
   21a74:	0002e84e 	.word	0x0002e84e
   21a78:	0002e870 	.word	0x0002e870

00021a7c <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
	int err;
	struct at_param_list resp_list = {0};
   21a7c:	2300      	movs	r3, #0
{
   21a7e:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a80:	b085      	sub	sp, #20
   21a82:	af00      	add	r7, sp, #0
   21a84:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   21a86:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   21a88:	e9c7 3302 	strd	r3, r3, [r7, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   21a8c:	2900      	cmp	r1, #0
   21a8e:	d062      	beq.n	21b56 <parse_xmodemsleep+0xda>
   21a90:	2800      	cmp	r0, #0
   21a92:	d060      	beq.n	21b56 <parse_xmodemsleep+0xda>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   21a94:	2104      	movs	r1, #4
   21a96:	f107 0008 	add.w	r0, r7, #8
   21a9a:	f007 ff91 	bl	299c0 <at_params_list_init>
	if (err) {
   21a9e:	4604      	mov	r4, r0
   21aa0:	b190      	cbz	r0, 21ac8 <parse_xmodemsleep+0x4c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   21aa2:	466d      	mov	r5, sp
   21aa4:	b088      	sub	sp, #32
   21aa6:	466a      	mov	r2, sp
   21aa8:	4b2c      	ldr	r3, [pc, #176]	; (21b5c <parse_xmodemsleep+0xe0>)
   21aaa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21aae:	e9c2 3005 	strd	r3, r0, [r2, #20]
   21ab2:	2303      	movs	r3, #3
   21ab4:	482a      	ldr	r0, [pc, #168]	; (21b60 <parse_xmodemsleep+0xe4>)
   21ab6:	f842 3f10 	str.w	r3, [r2, #16]!
   21aba:	f008 f8df 	bl	29c7c <z_log_msg_static_create.constprop.0>
   21abe:	46ad      	mov	sp, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   21ac0:	4620      	mov	r0, r4
   21ac2:	3714      	adds	r7, #20
   21ac4:	46bd      	mov	sp, r7
   21ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   21ac8:	4601      	mov	r1, r0
   21aca:	f107 0208 	add.w	r2, r7, #8
   21ace:	4630      	mov	r0, r6
   21ad0:	f007 ff5d 	bl	2998e <at_parser_params_from_str>
	if (err) {
   21ad4:	4604      	mov	r4, r0
   21ad6:	b178      	cbz	r0, 21af8 <parse_xmodemsleep+0x7c>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   21ad8:	466d      	mov	r5, sp
   21ada:	b088      	sub	sp, #32
   21adc:	466a      	mov	r2, sp
   21ade:	4b21      	ldr	r3, [pc, #132]	; (21b64 <parse_xmodemsleep+0xe8>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   21ae0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   21ae4:	2303      	movs	r3, #3
   21ae6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21aea:	481d      	ldr	r0, [pc, #116]	; (21b60 <parse_xmodemsleep+0xe4>)
   21aec:	f842 3f10 	str.w	r3, [r2, #16]!
   21af0:	f008 f8c4 	bl	29c7c <z_log_msg_static_create.constprop.0>
   21af4:	46ad      	mov	sp, r5
		goto clean_exit;
   21af6:	e01a      	b.n	21b2e <parse_xmodemsleep+0xb2>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   21af8:	2101      	movs	r1, #1
   21afa:	1dba      	adds	r2, r7, #6
   21afc:	f107 0008 	add.w	r0, r7, #8
   21b00:	f008 f822 	bl	29b48 <at_params_unsigned_short_get>
	if (err) {
   21b04:	4604      	mov	r4, r0
   21b06:	b120      	cbz	r0, 21b12 <parse_xmodemsleep+0x96>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   21b08:	466d      	mov	r5, sp
   21b0a:	b088      	sub	sp, #32
   21b0c:	466a      	mov	r2, sp
   21b0e:	4b16      	ldr	r3, [pc, #88]	; (21b68 <parse_xmodemsleep+0xec>)
   21b10:	e7e6      	b.n	21ae0 <parse_xmodemsleep+0x64>
	modem_sleep->type = type;
   21b12:	88fb      	ldrh	r3, [r7, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   21b14:	f107 0008 	add.w	r0, r7, #8
	modem_sleep->type = type;
   21b18:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   21b1a:	f008 f879 	bl	29c10 <at_params_valid_count_get>
   21b1e:	2802      	cmp	r0, #2
   21b20:	d80a      	bhi.n	21b38 <parse_xmodemsleep+0xbc>
		modem_sleep->time = -1;
   21b22:	f04f 32ff 	mov.w	r2, #4294967295
   21b26:	f04f 33ff 	mov.w	r3, #4294967295
   21b2a:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   21b2e:	f107 0008 	add.w	r0, r7, #8
   21b32:	f007 ff6f 	bl	29a14 <at_params_list_free>
	return err;
   21b36:	e7c3      	b.n	21ac0 <parse_xmodemsleep+0x44>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   21b38:	2102      	movs	r1, #2
   21b3a:	f105 0208 	add.w	r2, r5, #8
   21b3e:	f107 0008 	add.w	r0, r7, #8
   21b42:	f008 f831 	bl	29ba8 <at_params_int64_get>
	if (err) {
   21b46:	4604      	mov	r4, r0
   21b48:	2800      	cmp	r0, #0
   21b4a:	d0f0      	beq.n	21b2e <parse_xmodemsleep+0xb2>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   21b4c:	466d      	mov	r5, sp
   21b4e:	b088      	sub	sp, #32
   21b50:	466a      	mov	r2, sp
   21b52:	4b06      	ldr	r3, [pc, #24]	; (21b6c <parse_xmodemsleep+0xf0>)
   21b54:	e7c4      	b.n	21ae0 <parse_xmodemsleep+0x64>
		return -EINVAL;
   21b56:	f06f 0415 	mvn.w	r4, #21
   21b5a:	e7b1      	b.n	21ac0 <parse_xmodemsleep+0x44>
   21b5c:	0002e071 	.word	0x0002e071
   21b60:	0002bde8 	.word	0x0002bde8
   21b64:	0002e8c1 	.word	0x0002e8c1
   21b68:	0002e8f3 	.word	0x0002e8f3
   21b6c:	0002e91c 	.word	0x0002e91c

00021b70 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   21b70:	b5f0      	push	{r4, r5, r6, r7, lr}
   21b72:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   21b74:	4604      	mov	r4, r0
{
   21b76:	b087      	sub	sp, #28
	if (at_response == NULL || modem_evt == NULL) {
   21b78:	b320      	cbz	r0, 21bc4 <parse_mdmev+0x54>
   21b7a:	b319      	cbz	r1, 21bc4 <parse_mdmev+0x54>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   21b7c:	2108      	movs	r1, #8
   21b7e:	4a13      	ldr	r2, [pc, #76]	; (21bcc <parse_mdmev+0x5c>)
   21b80:	f7ff f836 	bl	20bf0 <response_is_valid>
   21b84:	b968      	cbnz	r0, 21ba2 <parse_mdmev+0x32>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   21b86:	4b12      	ldr	r3, [pc, #72]	; (21bd0 <parse_mdmev+0x60>)
   21b88:	4812      	ldr	r0, [pc, #72]	; (21bd4 <parse_mdmev+0x64>)
   21b8a:	9305      	str	r3, [sp, #20]
   21b8c:	2302      	movs	r3, #2
   21b8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21b92:	aa04      	add	r2, sp, #16
   21b94:	9304      	str	r3, [sp, #16]
   21b96:	f008 f871 	bl	29c7c <z_log_msg_static_create.constprop.0>
		return -EIO;
   21b9a:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", at_response);

	return -ENODATA;
}
   21b9e:	b007      	add	sp, #28
   21ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   21ba2:	2500      	movs	r5, #0
   21ba4:	4f0c      	ldr	r7, [pc, #48]	; (21bd8 <parse_mdmev+0x68>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   21ba6:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   21ba8:	4621      	mov	r1, r4
   21baa:	f857 0b04 	ldr.w	r0, [r7], #4
   21bae:	f7f7 fa13 	bl	18fd8 <strcmp>
   21bb2:	b908      	cbnz	r0, 21bb8 <parse_mdmev+0x48>
			*modem_evt = i;
   21bb4:	7035      	strb	r5, [r6, #0]
			return 0;
   21bb6:	e7f2      	b.n	21b9e <parse_mdmev+0x2e>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   21bb8:	3501      	adds	r5, #1
   21bba:	2d05      	cmp	r5, #5
   21bbc:	d1f4      	bne.n	21ba8 <parse_mdmev+0x38>
	return -ENODATA;
   21bbe:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   21bc2:	e7ec      	b.n	21b9e <parse_mdmev+0x2e>
		return -EINVAL;
   21bc4:	f06f 0015 	mvn.w	r0, #21
   21bc8:	e7e9      	b.n	21b9e <parse_mdmev+0x2e>
   21bca:	bf00      	nop
   21bcc:	0002e951 	.word	0x0002e951
   21bd0:	0002e95a 	.word	0x0002e95a
   21bd4:	0002bde8 	.word	0x0002bde8
   21bd8:	0002c1dc 	.word	0x0002c1dc

00021bdc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   21bdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   21bde:	f7f9 facb 	bl	1b178 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   21be2:	4b07      	ldr	r3, [pc, #28]	; (21c00 <k_sys_fatal_error_handler+0x24>)
   21be4:	9305      	str	r3, [sp, #20]
   21be6:	2302      	movs	r3, #2
   21be8:	9304      	str	r3, [sp, #16]
   21bea:	4806      	ldr	r0, [pc, #24]	; (21c04 <k_sys_fatal_error_handler+0x28>)
   21bec:	2300      	movs	r3, #0
   21bee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21bf2:	aa04      	add	r2, sp, #16
   21bf4:	f7f9 fba0 	bl	1b338 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   21bf8:	2000      	movs	r0, #0
   21bfa:	f7fa fe07 	bl	1c80c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   21bfe:	bf00      	nop
   21c00:	0002e9d2 	.word	0x0002e9d2
   21c04:	0002bdb0 	.word	0x0002bdb0

00021c08 <on_modem_lib_init.part.0>:

LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
   21c08:	b598      	push	{r3, r4, r7, lr}

	if (ret != 0) {
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   21c0a:	481a      	ldr	r0, [pc, #104]	; (21c74 <on_modem_lib_init.part.0+0x6c>)
static void on_modem_lib_init(int ret, void *ctx)
   21c0c:	af00      	add	r7, sp, #0
	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   21c0e:	f7f7 f9ed 	bl	18fec <strlen>
   21c12:	b1a0      	cbz	r0, 21c3e <on_modem_lib_init.part.0+0x36>
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   21c14:	4917      	ldr	r1, [pc, #92]	; (21c74 <on_modem_lib_init.part.0+0x6c>)
   21c16:	4818      	ldr	r0, [pc, #96]	; (21c78 <on_modem_lib_init.part.0+0x70>)
   21c18:	f002 fdb4 	bl	24784 <nrf_modem_at_printf>
		if (err) {
   21c1c:	b178      	cbz	r0, 21c3e <on_modem_lib_init.part.0+0x36>
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
   21c1e:	466c      	mov	r4, sp
   21c20:	b088      	sub	sp, #32
   21c22:	466a      	mov	r2, sp
   21c24:	4b15      	ldr	r3, [pc, #84]	; (21c7c <on_modem_lib_init.part.0+0x74>)
   21c26:	e9c2 3005 	strd	r3, r0, [r2, #20]
   21c2a:	2303      	movs	r3, #3
   21c2c:	f842 3f10 	str.w	r3, [r2, #16]!
   21c30:	2300      	movs	r3, #0
   21c32:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21c36:	4812      	ldr	r0, [pc, #72]	; (21c80 <on_modem_lib_init.part.0+0x78>)
   21c38:	f7f9 fb7e 	bl	1b338 <z_impl_z_log_msg_static_create>
   21c3c:	46a5      	mov	sp, r4
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
   21c3e:	4811      	ldr	r0, [pc, #68]	; (21c84 <on_modem_lib_init.part.0+0x7c>)
   21c40:	f7f7 f9d4 	bl	18fec <strlen>
   21c44:	b1a0      	cbz	r0, 21c70 <on_modem_lib_init.part.0+0x68>
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
   21c46:	490f      	ldr	r1, [pc, #60]	; (21c84 <on_modem_lib_init.part.0+0x7c>)
   21c48:	480b      	ldr	r0, [pc, #44]	; (21c78 <on_modem_lib_init.part.0+0x70>)
   21c4a:	f002 fd9b 	bl	24784 <nrf_modem_at_printf>
		if (err) {
   21c4e:	b178      	cbz	r0, 21c70 <on_modem_lib_init.part.0+0x68>
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
   21c50:	466c      	mov	r4, sp
   21c52:	b088      	sub	sp, #32
   21c54:	466a      	mov	r2, sp
   21c56:	4b0c      	ldr	r3, [pc, #48]	; (21c88 <on_modem_lib_init.part.0+0x80>)
   21c58:	e9c2 3005 	strd	r3, r0, [r2, #20]
   21c5c:	2303      	movs	r3, #3
   21c5e:	f842 3f10 	str.w	r3, [r2, #16]!
   21c62:	2300      	movs	r3, #0
   21c64:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21c68:	4805      	ldr	r0, [pc, #20]	; (21c80 <on_modem_lib_init.part.0+0x78>)
   21c6a:	f7f9 fb65 	bl	1b338 <z_impl_z_log_msg_static_create>
   21c6e:	46a5      	mov	sp, r4
		}
	}
}
   21c70:	46bd      	mov	sp, r7
   21c72:	bd98      	pop	{r3, r4, r7, pc}
   21c74:	0002e9ef 	.word	0x0002e9ef
   21c78:	0002dc62 	.word	0x0002dc62
   21c7c:	0002ea4c 	.word	0x0002ea4c
   21c80:	0002bdf0 	.word	0x0002bdf0
   21c84:	0002ea79 	.word	0x0002ea79
   21c88:	0002ea91 	.word	0x0002ea91

00021c8c <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   21c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c90:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   21c92:	4b15      	ldr	r3, [pc, #84]	; (21ce8 <tfm_ns_interface_dispatch+0x5c>)
   21c94:	4604      	mov	r4, r0
   21c96:	f893 8000 	ldrb.w	r8, [r3]
   21c9a:	460d      	mov	r5, r1
   21c9c:	4616      	mov	r6, r2
   21c9e:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   21ca0:	f1b8 0f00 	cmp.w	r8, #0
   21ca4:	d115      	bne.n	21cd2 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   21ca6:	4668      	mov	r0, sp
   21ca8:	f006 fb79 	bl	2839e <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   21cac:	463a      	mov	r2, r7
   21cae:	4631      	mov	r1, r6
   21cb0:	4628      	mov	r0, r5
   21cb2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   21cb4:	47a0      	blx	r4
   21cb6:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   21cb8:	4668      	mov	r0, sp
   21cba:	f006 fb71 	bl	283a0 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   21cbe:	f1b8 0f00 	cmp.w	r8, #0
   21cc2:	d002      	beq.n	21cca <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   21cc4:	4809      	ldr	r0, [pc, #36]	; (21cec <tfm_ns_interface_dispatch+0x60>)
   21cc6:	f003 fb7d 	bl	253c4 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   21cca:	4620      	mov	r0, r4
   21ccc:	b022      	add	sp, #136	; 0x88
   21cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   21cd2:	f04f 32ff 	mov.w	r2, #4294967295
   21cd6:	f04f 33ff 	mov.w	r3, #4294967295
   21cda:	4804      	ldr	r0, [pc, #16]	; (21cec <tfm_ns_interface_dispatch+0x60>)
   21cdc:	f003 faf8 	bl	252d0 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   21ce0:	2800      	cmp	r0, #0
   21ce2:	d0e0      	beq.n	21ca6 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   21ce4:	241f      	movs	r4, #31
   21ce6:	e7f0      	b.n	21cca <tfm_ns_interface_dispatch+0x3e>
   21ce8:	2000e056 	.word	0x2000e056
   21cec:	2000c8d0 	.word	0x2000c8d0

00021cf0 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   21cf0:	b530      	push	{r4, r5, lr}
   21cf2:	b095      	sub	sp, #84	; 0x54
   21cf4:	4605      	mov	r5, r0
   21cf6:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   21cf8:	2230      	movs	r2, #48	; 0x30
   21cfa:	2100      	movs	r1, #0
   21cfc:	a808      	add	r0, sp, #32
   21cfe:	f009 fbee 	bl	2b4de <memset>
   21d02:	233f      	movs	r3, #63	; 0x3f
   21d04:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   21d06:	ab07      	add	r3, sp, #28
   21d08:	9303      	str	r3, [sp, #12]
   21d0a:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   21d0c:	9406      	str	r4, [sp, #24]
   21d0e:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   21d12:	b154      	cbz	r4, 21d2a <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   21d14:	2301      	movs	r3, #1
   21d16:	aa05      	add	r2, sp, #20
   21d18:	9200      	str	r2, [sp, #0]
   21d1a:	2100      	movs	r1, #0
   21d1c:	4804      	ldr	r0, [pc, #16]	; (21d30 <psa_generate_random+0x40>)
   21d1e:	9301      	str	r3, [sp, #4]
   21d20:	aa03      	add	r2, sp, #12
   21d22:	f000 f807 	bl	21d34 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   21d26:	b015      	add	sp, #84	; 0x54
   21d28:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   21d2a:	4620      	mov	r0, r4
   21d2c:	e7fb      	b.n	21d26 <psa_generate_random+0x36>
   21d2e:	bf00      	nop
   21d30:	40000100 	.word	0x40000100

00021d34 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   21d34:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   21d36:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   21d3a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   21d3e:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   21d40:	d20d      	bcs.n	21d5e <psa_call+0x2a>
        (type < INT16_MIN) ||
   21d42:	ea43 0504 	orr.w	r5, r3, r4
   21d46:	2dff      	cmp	r5, #255	; 0xff
   21d48:	d809      	bhi.n	21d5e <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   21d4a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   21d4e:	4613      	mov	r3, r2
   21d50:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   21d54:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   21d56:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   21d58:	4803      	ldr	r0, [pc, #12]	; (21d68 <psa_call+0x34>)
   21d5a:	f7ff bf97 	b.w	21c8c <tfm_ns_interface_dispatch>
}
   21d5e:	f06f 0080 	mvn.w	r0, #128	; 0x80
   21d62:	bc30      	pop	{r4, r5}
   21d64:	4770      	bx	lr
   21d66:	bf00      	nop
   21d68:	00017c21 	.word	0x00017c21

00021d6c <SystemInit>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   21d6c:	4b01      	ldr	r3, [pc, #4]	; (21d74 <SystemInit+0x8>)
   21d6e:	4a02      	ldr	r2, [pc, #8]	; (21d78 <SystemInit+0xc>)
   21d70:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   21d72:	4770      	bx	lr
   21d74:	2000c66c 	.word	0x2000c66c
   21d78:	03d09000 	.word	0x03d09000

00021d7c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   21d7c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   21d7e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   21d80:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   21d82:	fab2 f382 	clz	r3, r2
   21d86:	f1c3 031f 	rsb	r3, r3, #31
   21d8a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   21d8c:	fa05 f403 	lsl.w	r4, r5, r3
   21d90:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21d94:	e8d0 6fef 	ldaex	r6, [r0]
   21d98:	4296      	cmp	r6, r2
   21d9a:	d104      	bne.n	21da6 <nrfx_flag32_alloc+0x2a>
   21d9c:	e8c0 4fec 	stlex	ip, r4, [r0]
   21da0:	f1bc 0f00 	cmp.w	ip, #0
   21da4:	d1f6      	bne.n	21d94 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   21da6:	d1eb      	bne.n	21d80 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   21da8:	4801      	ldr	r0, [pc, #4]	; (21db0 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   21daa:	700b      	strb	r3, [r1, #0]
}
   21dac:	bd70      	pop	{r4, r5, r6, pc}
   21dae:	bf00      	nop
   21db0:	0bad0000 	.word	0x0bad0000

00021db4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   21db4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   21db6:	6803      	ldr	r3, [r0, #0]
   21db8:	40cb      	lsrs	r3, r1
   21dba:	07db      	lsls	r3, r3, #31
   21dbc:	d410      	bmi.n	21de0 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   21dbe:	2301      	movs	r3, #1
   21dc0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   21dc2:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   21dc4:	ea43 0102 	orr.w	r1, r3, r2
   21dc8:	e8d0 4fef 	ldaex	r4, [r0]
   21dcc:	4294      	cmp	r4, r2
   21dce:	d104      	bne.n	21dda <nrfx_flag32_free+0x26>
   21dd0:	e8c0 1fec 	stlex	ip, r1, [r0]
   21dd4:	f1bc 0f00 	cmp.w	ip, #0
   21dd8:	d1f6      	bne.n	21dc8 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   21dda:	d1f2      	bne.n	21dc2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   21ddc:	4801      	ldr	r0, [pc, #4]	; (21de4 <nrfx_flag32_free+0x30>)
}
   21dde:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21de0:	4801      	ldr	r0, [pc, #4]	; (21de8 <nrfx_flag32_free+0x34>)
   21de2:	e7fc      	b.n	21dde <nrfx_flag32_free+0x2a>
   21de4:	0bad0000 	.word	0x0bad0000
   21de8:	0bad0004 	.word	0x0bad0004

00021dec <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   21dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   21dee:	4604      	mov	r4, r0
   21df0:	b118      	cbz	r0, 21dfa <clock_stop+0xe>
   21df2:	2801      	cmp	r0, #1
   21df4:	d01e      	beq.n	21e34 <clock_stop+0x48>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   21df6:	b003      	add	sp, #12
   21df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   21dfa:	2202      	movs	r2, #2
   21dfc:	4b27      	ldr	r3, [pc, #156]	; (21e9c <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   21dfe:	4607      	mov	r7, r0
   21e00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21e04:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   21e08:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21e0c:	2201      	movs	r2, #1
   21e0e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   21e10:	2301      	movs	r3, #1
   21e12:	f242 7510 	movw	r5, #10000	; 0x2710
   21e16:	4e21      	ldr	r6, [pc, #132]	; (21e9c <clock_stop+0xb0>)
   21e18:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   21e1c:	b1b4      	cbz	r4, 21e4c <clock_stop+0x60>
   21e1e:	2c01      	cmp	r4, #1
   21e20:	d1e9      	bne.n	21df6 <clock_stop+0xa>
            if (p_clk_src != NULL)
   21e22:	b387      	cbz	r7, 21e86 <clock_stop+0x9a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   21e24:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   21e28:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   21e2c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21e2e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   21e32:	e013      	b.n	21e5c <clock_stop+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21e34:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   21e36:	4b19      	ldr	r3, [pc, #100]	; (21e9c <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   21e38:	f10d 0707 	add.w	r7, sp, #7
   21e3c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21e40:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   21e44:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21e48:	6058      	str	r0, [r3, #4]
   21e4a:	e7e1      	b.n	21e10 <clock_stop+0x24>
            if (p_clk_src != NULL)
   21e4c:	b18f      	cbz	r7, 21e72 <clock_stop+0x86>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   21e4e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   21e52:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   21e56:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21e58:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21e5c:	03da      	lsls	r2, r3, #15
   21e5e:	d5ca      	bpl.n	21df6 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   21e60:	f89d 0007 	ldrb.w	r0, [sp, #7]
   21e64:	2801      	cmp	r0, #1
   21e66:	d1c6      	bne.n	21df6 <clock_stop+0xa>
   21e68:	f007 ff57 	bl	29d1a <nrfx_busy_wait>
   21e6c:	3d01      	subs	r5, #1
   21e6e:	d1d5      	bne.n	21e1c <clock_stop+0x30>
   21e70:	e7c1      	b.n	21df6 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21e72:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   21e76:	03d9      	lsls	r1, r3, #15
   21e78:	d5bd      	bpl.n	21df6 <clock_stop+0xa>
   21e7a:	2001      	movs	r0, #1
   21e7c:	f007 ff4d 	bl	29d1a <nrfx_busy_wait>
   21e80:	3d01      	subs	r5, #1
   21e82:	d1f6      	bne.n	21e72 <clock_stop+0x86>
   21e84:	e7b7      	b.n	21df6 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21e86:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   21e8a:	03db      	lsls	r3, r3, #15
   21e8c:	d5b3      	bpl.n	21df6 <clock_stop+0xa>
   21e8e:	2001      	movs	r0, #1
   21e90:	f007 ff43 	bl	29d1a <nrfx_busy_wait>
   21e94:	3d01      	subs	r5, #1
   21e96:	d1f6      	bne.n	21e86 <clock_stop+0x9a>
   21e98:	e7ad      	b.n	21df6 <clock_stop+0xa>
   21e9a:	bf00      	nop
   21e9c:	40005000 	.word	0x40005000

00021ea0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   21ea0:	4b04      	ldr	r3, [pc, #16]	; (21eb4 <nrfx_clock_init+0x14>)
   21ea2:	791a      	ldrb	r2, [r3, #4]
   21ea4:	b922      	cbnz	r2, 21eb0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   21ea6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   21ea8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   21eaa:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   21eac:	4802      	ldr	r0, [pc, #8]	; (21eb8 <nrfx_clock_init+0x18>)
   21eae:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   21eb0:	4802      	ldr	r0, [pc, #8]	; (21ebc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21eb2:	4770      	bx	lr
   21eb4:	2000d4b8 	.word	0x2000d4b8
   21eb8:	0bad0000 	.word	0x0bad0000
   21ebc:	0bad000c 	.word	0x0bad000c

00021ec0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   21ec0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   21ec2:	2005      	movs	r0, #5
   21ec4:	f7fa f878 	bl	1bfb8 <arch_irq_is_enabled>
   21ec8:	b910      	cbnz	r0, 21ed0 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   21eca:	2005      	movs	r0, #5
   21ecc:	f7fa f852 	bl	1bf74 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   21ed0:	2201      	movs	r2, #1
   21ed2:	4b02      	ldr	r3, [pc, #8]	; (21edc <nrfx_clock_enable+0x1c>)
   21ed4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   21ed8:	bd08      	pop	{r3, pc}
   21eda:	bf00      	nop
   21edc:	40005000 	.word	0x40005000

00021ee0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   21ee0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   21ee2:	b110      	cbz	r0, 21eea <nrfx_clock_start+0xa>
   21ee4:	2801      	cmp	r0, #1
   21ee6:	d02e      	beq.n	21f46 <nrfx_clock_start+0x66>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   21ee8:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   21eea:	4a1c      	ldr	r2, [pc, #112]	; (21f5c <nrfx_clock_start+0x7c>)
   21eec:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21ef0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   21ef4:	03c9      	lsls	r1, r1, #15
   21ef6:	d40e      	bmi.n	21f16 <nrfx_clock_start+0x36>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   21ef8:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   21efc:	07db      	lsls	r3, r3, #31
   21efe:	d513      	bpl.n	21f28 <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   21f00:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   21f04:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   21f08:	3b01      	subs	r3, #1
   21f0a:	2b01      	cmp	r3, #1
   21f0c:	d809      	bhi.n	21f22 <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
   21f0e:	2302      	movs	r3, #2
   21f10:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   21f14:	e7e8      	b.n	21ee8 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   21f16:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   21f1a:	2b02      	cmp	r3, #2
   21f1c:	d005      	beq.n	21f2a <nrfx_clock_start+0x4a>
   21f1e:	2b01      	cmp	r3, #1
   21f20:	d002      	beq.n	21f28 <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   21f22:	2000      	movs	r0, #0
   21f24:	f7ff ff62 	bl	21dec <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   21f28:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   21f2a:	4a0c      	ldr	r2, [pc, #48]	; (21f5c <nrfx_clock_start+0x7c>)
   21f2c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21f30:	2300      	movs	r3, #0
   21f32:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   21f36:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   21f3a:	2302      	movs	r3, #2
   21f3c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21f40:	2301      	movs	r3, #1
   21f42:	6093      	str	r3, [r2, #8]
}
   21f44:	e7d0      	b.n	21ee8 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21f46:	2200      	movs	r2, #0
   21f48:	4b04      	ldr	r3, [pc, #16]	; (21f5c <nrfx_clock_start+0x7c>)
   21f4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   21f4e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   21f52:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21f56:	6018      	str	r0, [r3, #0]
}
   21f58:	e7c6      	b.n	21ee8 <nrfx_clock_start+0x8>
   21f5a:	bf00      	nop
   21f5c:	40005000 	.word	0x40005000

00021f60 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   21f60:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   21f62:	4b17      	ldr	r3, [pc, #92]	; (21fc0 <nrfx_power_clock_irq_handler+0x60>)
   21f64:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   21f68:	b152      	cbz	r2, 21f80 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21f6a:	2000      	movs	r0, #0
   21f6c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   21f70:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   21f74:	2201      	movs	r2, #1
   21f76:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   21f7a:	4b12      	ldr	r3, [pc, #72]	; (21fc4 <nrfx_power_clock_irq_handler+0x64>)
   21f7c:	681b      	ldr	r3, [r3, #0]
   21f7e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   21f80:	4b0f      	ldr	r3, [pc, #60]	; (21fc0 <nrfx_power_clock_irq_handler+0x60>)
   21f82:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   21f86:	b18a      	cbz	r2, 21fac <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21f88:	2200      	movs	r2, #0
   21f8a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   21f8e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   21f92:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21f96:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   21f9a:	f002 0203 	and.w	r2, r2, #3
   21f9e:	2a01      	cmp	r2, #1
   21fa0:	f04f 0102 	mov.w	r1, #2
   21fa4:	d103      	bne.n	21fae <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   21fa6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21faa:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   21fac:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   21fae:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   21fb2:	4b04      	ldr	r3, [pc, #16]	; (21fc4 <nrfx_power_clock_irq_handler+0x64>)
   21fb4:	2001      	movs	r0, #1
}
   21fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   21fba:	681b      	ldr	r3, [r3, #0]
   21fbc:	4718      	bx	r3
   21fbe:	bf00      	nop
   21fc0:	40005000 	.word	0x40005000
   21fc4:	2000d4b8 	.word	0x2000d4b8

00021fc8 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   21fc8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   21fca:	4801      	ldr	r0, [pc, #4]	; (21fd0 <nrfx_dppi_channel_alloc+0x8>)
   21fcc:	f7ff bed6 	b.w	21d7c <nrfx_flag32_alloc>
   21fd0:	2000c670 	.word	0x2000c670

00021fd4 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
   21fd4:	4a06      	ldr	r2, [pc, #24]	; (21ff0 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   21fd6:	f000 001f 	and.w	r0, r0, #31
   21fda:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   21fde:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
   21fe2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   21fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   21fea:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
   21fee:	4770      	bx	lr
   21ff0:	40842500 	.word	0x40842500

00021ff4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   21ff4:	4b03      	ldr	r3, [pc, #12]	; (22004 <pin_in_use_by_te+0x10>)
   21ff6:	3008      	adds	r0, #8
   21ff8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   21ffc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   22000:	4770      	bx	lr
   22002:	bf00      	nop
   22004:	2000c674 	.word	0x2000c674

00022008 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   22008:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2200a:	4c0d      	ldr	r4, [pc, #52]	; (22040 <call_handler+0x38>)
   2200c:	f100 0308 	add.w	r3, r0, #8
   22010:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   22014:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22016:	05da      	lsls	r2, r3, #23
{
   22018:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2201a:	d507      	bpl.n	2202c <call_handler+0x24>
   2201c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   22020:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   22024:	6852      	ldr	r2, [r2, #4]
   22026:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   2202a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   2202c:	68a3      	ldr	r3, [r4, #8]
   2202e:	b12b      	cbz	r3, 2203c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   22030:	4631      	mov	r1, r6
   22032:	4628      	mov	r0, r5
   22034:	68e2      	ldr	r2, [r4, #12]
    }
}
   22036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2203a:	4718      	bx	r3
}
   2203c:	bd70      	pop	{r4, r5, r6, pc}
   2203e:	bf00      	nop
   22040:	2000c674 	.word	0x2000c674

00022044 <release_handler>:
{
   22044:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22046:	4a12      	ldr	r2, [pc, #72]	; (22090 <release_handler+0x4c>)
   22048:	3008      	adds	r0, #8
   2204a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   2204e:	05d9      	lsls	r1, r3, #23
   22050:	d51b      	bpl.n	2208a <release_handler+0x46>
   22052:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   22056:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2205a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2205e:	2000      	movs	r0, #0
   22060:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   22064:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   22068:	f413 7f80 	tst.w	r3, #256	; 0x100
   2206c:	d003      	beq.n	22076 <release_handler+0x32>
   2206e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   22072:	4299      	cmp	r1, r3
   22074:	d009      	beq.n	2208a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   22076:	3001      	adds	r0, #1
   22078:	2820      	cmp	r0, #32
   2207a:	d1f3      	bne.n	22064 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   2207c:	2300      	movs	r3, #0
   2207e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   22082:	4804      	ldr	r0, [pc, #16]	; (22094 <release_handler+0x50>)
}
   22084:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   22086:	f7ff be95 	b.w	21db4 <nrfx_flag32_free>
}
   2208a:	bc10      	pop	{r4}
   2208c:	4770      	bx	lr
   2208e:	bf00      	nop
   22090:	2000c674 	.word	0x2000c674
   22094:	2000c6c8 	.word	0x2000c6c8

00022098 <pin_handler_trigger_uninit>:
{
   22098:	b538      	push	{r3, r4, r5, lr}
   2209a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   2209c:	f7ff ffaa 	bl	21ff4 <pin_in_use_by_te>
   220a0:	4c0b      	ldr	r4, [pc, #44]	; (220d0 <pin_handler_trigger_uninit+0x38>)
   220a2:	f102 0508 	add.w	r5, r2, #8
   220a6:	b160      	cbz	r0, 220c2 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   220a8:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   220aa:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   220ae:	0b5b      	lsrs	r3, r3, #13
   220b0:	009b      	lsls	r3, r3, #2
   220b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   220b6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   220ba:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   220be:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   220c2:	4610      	mov	r0, r2
   220c4:	f7ff ffbe 	bl	22044 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   220c8:	2300      	movs	r3, #0
   220ca:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   220ce:	bd38      	pop	{r3, r4, r5, pc}
   220d0:	2000c674 	.word	0x2000c674

000220d4 <nrfx_gpiote_input_configure>:
{
   220d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   220d8:	4604      	mov	r4, r0
   220da:	461d      	mov	r5, r3
    if (p_input_config)
   220dc:	b309      	cbz	r1, 22122 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   220de:	4f4e      	ldr	r7, [pc, #312]	; (22218 <nrfx_gpiote_input_configure+0x144>)
   220e0:	f100 0808 	add.w	r8, r0, #8
   220e4:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   220e8:	07b3      	lsls	r3, r6, #30
   220ea:	d506      	bpl.n	220fa <nrfx_gpiote_input_configure+0x26>
   220ec:	f7ff ff82 	bl	21ff4 <pin_in_use_by_te>
   220f0:	b118      	cbz	r0, 220fa <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   220f2:	484a      	ldr	r0, [pc, #296]	; (2221c <nrfx_gpiote_input_configure+0x148>)
}
   220f4:	b002      	add	sp, #8
   220f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
   220fa:	4849      	ldr	r0, [pc, #292]	; (22220 <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
   220fc:	f004 031f 	and.w	r3, r4, #31
   22100:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   22104:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   22108:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   2210a:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2210e:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   22112:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   22116:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
   2211a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   2211e:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
   22122:	b19a      	cbz	r2, 2214c <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22124:	4e3c      	ldr	r6, [pc, #240]	; (22218 <nrfx_gpiote_input_configure+0x144>)
   22126:	f104 0708 	add.w	r7, r4, #8
   2212a:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   2212e:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
   22130:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   22134:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
   22136:	d00c      	beq.n	22152 <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
   22138:	2800      	cmp	r0, #0
   2213a:	d1da      	bne.n	220f2 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   2213c:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
   22140:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   22144:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
   22148:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   2214c:	bbd5      	cbnz	r5, 221c4 <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
   2214e:	4835      	ldr	r0, [pc, #212]	; (22224 <nrfx_gpiote_input_configure+0x150>)
   22150:	e7d0      	b.n	220f4 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   22152:	f021 0120 	bic.w	r1, r1, #32
   22156:	04c9      	lsls	r1, r1, #19
   22158:	0cc9      	lsrs	r1, r1, #19
   2215a:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   2215e:	2800      	cmp	r0, #0
   22160:	d0ec      	beq.n	2213c <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   22162:	2b03      	cmp	r3, #3
   22164:	d8c5      	bhi.n	220f2 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   22166:	6852      	ldr	r2, [r2, #4]
   22168:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   2216c:	4662      	mov	r2, ip
   2216e:	0092      	lsls	r2, r2, #2
   22170:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   22174:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   22178:	b923      	cbnz	r3, 22184 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
   2217a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   2217e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
   22182:	e7db      	b.n	2213c <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   22184:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   22188:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   2218c:	f020 0003 	bic.w	r0, r0, #3
   22190:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   22194:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   22198:	f041 0120 	orr.w	r1, r1, #32
   2219c:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   221a0:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   221a4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   221a8:	0220      	lsls	r0, r4, #8
   221aa:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   221ae:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   221b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   221b6:	ea40 000e 	orr.w	r0, r0, lr
   221ba:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   221be:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   221c2:	e7bb      	b.n	2213c <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
   221c4:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   221c6:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   221ca:	f7ff ff3b 	bl	22044 <release_handler>
    if (!handler)
   221ce:	2e00      	cmp	r6, #0
   221d0:	d0bd      	beq.n	2214e <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   221d2:	4d11      	ldr	r5, [pc, #68]	; (22218 <nrfx_gpiote_input_configure+0x144>)
   221d4:	e9d5 2300 	ldrd	r2, r3, [r5]
   221d8:	4296      	cmp	r6, r2
   221da:	d101      	bne.n	221e0 <nrfx_gpiote_input_configure+0x10c>
   221dc:	429f      	cmp	r7, r3
   221de:	d018      	beq.n	22212 <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   221e0:	4811      	ldr	r0, [pc, #68]	; (22228 <nrfx_gpiote_input_configure+0x154>)
   221e2:	f10d 0107 	add.w	r1, sp, #7
   221e6:	f7ff fdc9 	bl	21d7c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   221ea:	4b0e      	ldr	r3, [pc, #56]	; (22224 <nrfx_gpiote_input_configure+0x150>)
   221ec:	4298      	cmp	r0, r3
   221ee:	d181      	bne.n	220f4 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   221f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
   221f4:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   221f8:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   221fa:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   221fc:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   22200:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   22204:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   22208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2220c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   22210:	e79d      	b.n	2214e <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   22212:	2200      	movs	r2, #0
   22214:	e7ee      	b.n	221f4 <nrfx_gpiote_input_configure+0x120>
   22216:	bf00      	nop
   22218:	2000c674 	.word	0x2000c674
   2221c:	0bad0004 	.word	0x0bad0004
   22220:	40842500 	.word	0x40842500
   22224:	0bad0000 	.word	0x0bad0000
   22228:	2000c6c8 	.word	0x2000c6c8

0002222c <nrfx_gpiote_output_configure>:
{
   2222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2222e:	4604      	mov	r4, r0
    if (p_config)
   22230:	b379      	cbz	r1, 22292 <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22232:	4e3a      	ldr	r6, [pc, #232]	; (2231c <nrfx_gpiote_output_configure+0xf0>)
   22234:	f100 0708 	add.w	r7, r0, #8
   22238:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   2223c:	07ab      	lsls	r3, r5, #30
   2223e:	d404      	bmi.n	2224a <nrfx_gpiote_output_configure+0x1e>
   22240:	f7ff fed8 	bl	21ff4 <pin_in_use_by_te>
   22244:	b108      	cbz	r0, 2224a <nrfx_gpiote_output_configure+0x1e>
{
   22246:	4836      	ldr	r0, [pc, #216]	; (22320 <nrfx_gpiote_output_configure+0xf4>)
}
   22248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2224a:	f015 0f1c 	tst.w	r5, #28
   2224e:	784b      	ldrb	r3, [r1, #1]
   22250:	d122      	bne.n	22298 <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
   22252:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   22256:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 22324 <nrfx_gpiote_output_configure+0xf8>
   2225a:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   2225e:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   22262:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   22266:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   22268:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2226c:	7809      	ldrb	r1, [r1, #0]
   2226e:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
   22272:	f02c 0c07 	bic.w	ip, ip, #7
   22276:	ea43 030c 	orr.w	r3, r3, ip
   2227a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   2227e:	4929      	ldr	r1, [pc, #164]	; (22324 <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   22280:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   22284:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   22286:	f045 0503 	orr.w	r5, r5, #3
   2228a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   2228e:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
   22292:	b922      	cbnz	r2, 2229e <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
   22294:	4824      	ldr	r0, [pc, #144]	; (22328 <nrfx_gpiote_output_configure+0xfc>)
   22296:	e7d7      	b.n	22248 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   22298:	2b01      	cmp	r3, #1
   2229a:	d1da      	bne.n	22252 <nrfx_gpiote_output_configure+0x26>
   2229c:	e7d3      	b.n	22246 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2229e:	4e1f      	ldr	r6, [pc, #124]	; (2231c <nrfx_gpiote_output_configure+0xf0>)
   222a0:	f104 0708 	add.w	r7, r4, #8
   222a4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   222a8:	0783      	lsls	r3, r0, #30
   222aa:	d5cc      	bpl.n	22246 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   222ac:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   222b0:	2300      	movs	r3, #0
   222b2:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   222b4:	f020 0020 	bic.w	r0, r0, #32
   222b8:	0089      	lsls	r1, r1, #2
   222ba:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   222be:	04c0      	lsls	r0, r0, #19
   222c0:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   222c4:	0cc0      	lsrs	r0, r0, #19
   222c6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   222ca:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   222ce:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   222d2:	7855      	ldrb	r5, [r2, #1]
   222d4:	2d00      	cmp	r5, #0
   222d6:	d0dd      	beq.n	22294 <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   222d8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   222dc:	7892      	ldrb	r2, [r2, #2]
   222de:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   222e2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   222e6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   222ea:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   222ee:	0223      	lsls	r3, r4, #8
   222f0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   222f4:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   222f6:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   222fa:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   222fe:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22300:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   22302:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   22306:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2230a:	4313      	orrs	r3, r2
   2230c:	f040 0020 	orr.w	r0, r0, #32
   22310:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   22314:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   22318:	e7bc      	b.n	22294 <nrfx_gpiote_output_configure+0x68>
   2231a:	bf00      	nop
   2231c:	2000c674 	.word	0x2000c674
   22320:	0bad0004 	.word	0x0bad0004
   22324:	40842500 	.word	0x40842500
   22328:	0bad0000 	.word	0x0bad0000

0002232c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   2232c:	4b01      	ldr	r3, [pc, #4]	; (22334 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   2232e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   22332:	4770      	bx	lr
   22334:	2000c674 	.word	0x2000c674

00022338 <nrfx_gpiote_channel_get>:
{
   22338:	b508      	push	{r3, lr}
   2233a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   2233c:	f7ff fe5a 	bl	21ff4 <pin_in_use_by_te>
   22340:	b138      	cbz	r0, 22352 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22342:	4b05      	ldr	r3, [pc, #20]	; (22358 <nrfx_gpiote_channel_get+0x20>)
   22344:	3208      	adds	r2, #8
   22346:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   2234a:	4804      	ldr	r0, [pc, #16]	; (2235c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2234c:	0b5b      	lsrs	r3, r3, #13
   2234e:	700b      	strb	r3, [r1, #0]
}
   22350:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   22352:	4803      	ldr	r0, [pc, #12]	; (22360 <nrfx_gpiote_channel_get+0x28>)
   22354:	e7fc      	b.n	22350 <nrfx_gpiote_channel_get+0x18>
   22356:	bf00      	nop
   22358:	2000c674 	.word	0x2000c674
   2235c:	0bad0000 	.word	0x0bad0000
   22360:	0bad0004 	.word	0x0bad0004

00022364 <nrfx_gpiote_init>:
{
   22364:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   22366:	4c0f      	ldr	r4, [pc, #60]	; (223a4 <nrfx_gpiote_init+0x40>)
   22368:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   2236c:	b9bd      	cbnz	r5, 2239e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2236e:	2240      	movs	r2, #64	; 0x40
   22370:	4629      	mov	r1, r5
   22372:	f104 0010 	add.w	r0, r4, #16
   22376:	f009 f8b2 	bl	2b4de <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   2237a:	2031      	movs	r0, #49	; 0x31
   2237c:	f7f9 fdfa 	bl	1bf74 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22380:	4b09      	ldr	r3, [pc, #36]	; (223a8 <nrfx_gpiote_init+0x44>)
    return err_code;
   22382:	480a      	ldr	r0, [pc, #40]	; (223ac <nrfx_gpiote_init+0x48>)
   22384:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   22388:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   2238c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   22390:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   22394:	2301      	movs	r3, #1
   22396:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2239a:	6563      	str	r3, [r4, #84]	; 0x54
}
   2239c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   2239e:	4804      	ldr	r0, [pc, #16]	; (223b0 <nrfx_gpiote_init+0x4c>)
   223a0:	e7fc      	b.n	2239c <nrfx_gpiote_init+0x38>
   223a2:	bf00      	nop
   223a4:	2000c674 	.word	0x2000c674
   223a8:	40031000 	.word	0x40031000
   223ac:	0bad0000 	.word	0x0bad0000
   223b0:	0bad0005 	.word	0x0bad0005

000223b4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   223b4:	4b03      	ldr	r3, [pc, #12]	; (223c4 <nrfx_gpiote_is_init+0x10>)
   223b6:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   223ba:	3800      	subs	r0, #0
   223bc:	bf18      	it	ne
   223be:	2001      	movne	r0, #1
   223c0:	4770      	bx	lr
   223c2:	bf00      	nop
   223c4:	2000c674 	.word	0x2000c674

000223c8 <nrfx_gpiote_channel_free>:
{
   223c8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   223ca:	4801      	ldr	r0, [pc, #4]	; (223d0 <nrfx_gpiote_channel_free+0x8>)
   223cc:	f7ff bcf2 	b.w	21db4 <nrfx_flag32_free>
   223d0:	2000c6c4 	.word	0x2000c6c4

000223d4 <nrfx_gpiote_channel_alloc>:
{
   223d4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   223d6:	4801      	ldr	r0, [pc, #4]	; (223dc <nrfx_gpiote_channel_alloc+0x8>)
   223d8:	f7ff bcd0 	b.w	21d7c <nrfx_flag32_alloc>
   223dc:	2000c6c4 	.word	0x2000c6c4

000223e0 <nrfx_gpiote_trigger_enable>:
{
   223e0:	4602      	mov	r2, r0
   223e2:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   223e4:	f7ff fe06 	bl	21ff4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   223e8:	4b1b      	ldr	r3, [pc, #108]	; (22458 <nrfx_gpiote_trigger_enable+0x78>)
   223ea:	f102 0408 	add.w	r4, r2, #8
   223ee:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   223f2:	b1c8      	cbz	r0, 22428 <nrfx_gpiote_trigger_enable+0x48>
   223f4:	f013 0402 	ands.w	r4, r3, #2
   223f8:	d116      	bne.n	22428 <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
   223fa:	4818      	ldr	r0, [pc, #96]	; (2245c <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   223fc:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   223fe:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22400:	5084      	str	r4, [r0, r2]
   22402:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   22404:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   22408:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   2240c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   22410:	f040 0001 	orr.w	r0, r0, #1
   22414:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   22418:	b129      	cbz	r1, 22426 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   2241a:	2201      	movs	r2, #1
   2241c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   22420:	4a0f      	ldr	r2, [pc, #60]	; (22460 <nrfx_gpiote_trigger_enable+0x80>)
   22422:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   22426:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22428:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2242c:	2b04      	cmp	r3, #4
   2242e:	d00e      	beq.n	2244e <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   22430:	2b05      	cmp	r3, #5
   22432:	d00e      	beq.n	22452 <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
   22434:	4b0b      	ldr	r3, [pc, #44]	; (22464 <nrfx_gpiote_trigger_enable+0x84>)
   22436:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
   22438:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2243c:	40d9      	lsrs	r1, r3
   2243e:	f001 0101 	and.w	r1, r1, #1
   22442:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   22444:	4610      	mov	r0, r2
}
   22446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   2244a:	f7ff bdc3 	b.w	21fd4 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2244e:	2103      	movs	r1, #3
   22450:	e7f8      	b.n	22444 <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   22452:	2102      	movs	r1, #2
   22454:	e7f6      	b.n	22444 <nrfx_gpiote_trigger_enable+0x64>
   22456:	bf00      	nop
   22458:	2000c674 	.word	0x2000c674
   2245c:	40031100 	.word	0x40031100
   22460:	40031000 	.word	0x40031000
   22464:	40842500 	.word	0x40842500

00022468 <nrfx_gpiote_trigger_disable>:
{
   22468:	b508      	push	{r3, lr}
   2246a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2246c:	f7ff fdc2 	bl	21ff4 <pin_in_use_by_te>
   22470:	b1c0      	cbz	r0, 224a4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22472:	4b0f      	ldr	r3, [pc, #60]	; (224b0 <nrfx_gpiote_trigger_disable+0x48>)
   22474:	f102 0108 	add.w	r1, r2, #8
   22478:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2247c:	0799      	lsls	r1, r3, #30
   2247e:	d411      	bmi.n	224a4 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   22480:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22482:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   22484:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   22486:	490b      	ldr	r1, [pc, #44]	; (224b4 <nrfx_gpiote_trigger_disable+0x4c>)
   22488:	009b      	lsls	r3, r3, #2
   2248a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2248e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   22492:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   22496:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2249a:	f022 0203 	bic.w	r2, r2, #3
   2249e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   224a2:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   224a4:	2100      	movs	r1, #0
}
   224a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   224aa:	4610      	mov	r0, r2
   224ac:	f7ff bd92 	b.w	21fd4 <nrf_gpio_cfg_sense_set>
   224b0:	2000c674 	.word	0x2000c674
   224b4:	40031000 	.word	0x40031000

000224b8 <nrfx_gpiote_pin_uninit>:
{
   224b8:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   224ba:	4b0c      	ldr	r3, [pc, #48]	; (224ec <nrfx_gpiote_pin_uninit+0x34>)
   224bc:	f100 0208 	add.w	r2, r0, #8
   224c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   224c4:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   224c6:	07db      	lsls	r3, r3, #31
   224c8:	d50d      	bpl.n	224e6 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
   224ca:	f7ff ffcd 	bl	22468 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   224ce:	4620      	mov	r0, r4
   224d0:	f7ff fde2 	bl	22098 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   224d4:	2202      	movs	r2, #2
   224d6:	4b06      	ldr	r3, [pc, #24]	; (224f0 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
   224d8:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   224dc:	3480      	adds	r4, #128	; 0x80
   224de:	4805      	ldr	r0, [pc, #20]	; (224f4 <nrfx_gpiote_pin_uninit+0x3c>)
   224e0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   224e4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   224e6:	4804      	ldr	r0, [pc, #16]	; (224f8 <nrfx_gpiote_pin_uninit+0x40>)
   224e8:	e7fc      	b.n	224e4 <nrfx_gpiote_pin_uninit+0x2c>
   224ea:	bf00      	nop
   224ec:	2000c674 	.word	0x2000c674
   224f0:	40842500 	.word	0x40842500
   224f4:	0bad0000 	.word	0x0bad0000
   224f8:	0bad0004 	.word	0x0bad0004

000224fc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   224fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   22500:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   22502:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22504:	462c      	mov	r4, r5
{
   22506:	4b4d      	ldr	r3, [pc, #308]	; (2263c <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   22508:	484d      	ldr	r0, [pc, #308]	; (22640 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2250a:	494e      	ldr	r1, [pc, #312]	; (22644 <nrfx_gpiote_irq_handler+0x148>)
{
   2250c:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2250e:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   22510:	b136      	cbz	r6, 22520 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   22512:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   22516:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22518:	bf1e      	ittt	ne
   2251a:	601c      	strne	r4, [r3, #0]
   2251c:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   2251e:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22520:	3304      	adds	r3, #4
   22522:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   22524:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22528:	d1f1      	bne.n	2250e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2252a:	4f45      	ldr	r7, [pc, #276]	; (22640 <nrfx_gpiote_irq_handler+0x144>)
   2252c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   22530:	b193      	cbz	r3, 22558 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
   22532:	4e45      	ldr	r6, [pc, #276]	; (22648 <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   22534:	f10d 090c 	add.w	r9, sp, #12
   22538:	6a33      	ldr	r3, [r6, #32]
   2253a:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   2253c:	6233      	str	r3, [r6, #32]
   2253e:	f04f 0a01 	mov.w	sl, #1
            while (latch[i])
   22542:	9803      	ldr	r0, [sp, #12]
   22544:	b970      	cbnz	r0, 22564 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22546:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
   2254a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   2254e:	6a33      	ldr	r3, [r6, #32]
   22550:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   22552:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
   22554:	2b00      	cmp	r3, #0
   22556:	d1f2      	bne.n	2253e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   22558:	2401      	movs	r4, #1
    while (mask)
   2255a:	2d00      	cmp	r5, #0
   2255c:	d156      	bne.n	2260c <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   2255e:	b005      	add	sp, #20
   22560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   22564:	fa90 fba0 	rbit	fp, r0
   22568:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2256c:	4a37      	ldr	r2, [pc, #220]	; (2264c <nrfx_gpiote_irq_handler+0x150>)
   2256e:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   22572:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
   22576:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   2257a:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   2257e:	f819 300c 	ldrb.w	r3, [r9, ip]
   22582:	fa0a f404 	lsl.w	r4, sl, r4
   22586:	ea23 0304 	bic.w	r3, r3, r4
   2258a:	f809 300c 	strb.w	r3, [r9, ip]
   2258e:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   22592:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   22596:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
   2259a:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2259c:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   2259e:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
   225a2:	d518      	bpl.n	225d6 <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
   225a4:	4611      	mov	r1, r2
   225a6:	4658      	mov	r0, fp
   225a8:	9301      	str	r3, [sp, #4]
   225aa:	f7ff fd2d 	bl	22008 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   225ae:	9b01      	ldr	r3, [sp, #4]
   225b0:	b2e4      	uxtb	r4, r4
   225b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
   225b6:	f3c3 4301 	ubfx	r3, r3, #16, #2
   225ba:	429c      	cmp	r4, r3
   225bc:	d107      	bne.n	225ce <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   225be:	2100      	movs	r1, #0
   225c0:	4658      	mov	r0, fp
   225c2:	f7ff fd07 	bl	21fd4 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   225c6:	4621      	mov	r1, r4
   225c8:	4658      	mov	r0, fp
   225ca:	f7ff fd03 	bl	21fd4 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   225ce:	fa0a f00b 	lsl.w	r0, sl, fp
   225d2:	6230      	str	r0, [r6, #32]
}
   225d4:	e7b5      	b.n	22542 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   225d6:	2c02      	cmp	r4, #2
   225d8:	d10c      	bne.n	225f4 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   225da:	2103      	movs	r1, #3
   225dc:	4658      	mov	r0, fp
   225de:	f7ff fcf9 	bl	21fd4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   225e2:	f008 0305 	and.w	r3, r8, #5
   225e6:	2b01      	cmp	r3, #1
   225e8:	d1f1      	bne.n	225ce <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
   225ea:	4641      	mov	r1, r8
   225ec:	4658      	mov	r0, fp
   225ee:	f7ff fd0b 	bl	22008 <call_handler>
   225f2:	e7ec      	b.n	225ce <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   225f4:	2102      	movs	r1, #2
   225f6:	4658      	mov	r0, fp
   225f8:	9201      	str	r2, [sp, #4]
   225fa:	f7ff fceb 	bl	21fd4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   225fe:	9a01      	ldr	r2, [sp, #4]
   22600:	2a03      	cmp	r2, #3
   22602:	d0f2      	beq.n	225ea <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   22604:	2c03      	cmp	r4, #3
   22606:	d1e2      	bne.n	225ce <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   22608:	428a      	cmp	r2, r1
   2260a:	e7ed      	b.n	225e8 <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
   2260c:	fa95 f3a5 	rbit	r3, r5
   22610:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   22614:	fa04 f203 	lsl.w	r2, r4, r3
   22618:	009b      	lsls	r3, r3, #2
   2261a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2261e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   22622:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   22626:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   2262a:	f3c0 2004 	ubfx	r0, r0, #8, #5
   2262e:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   22632:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   22636:	f7ff fce7 	bl	22008 <call_handler>
   2263a:	e78e      	b.n	2255a <nrfx_gpiote_irq_handler+0x5e>
   2263c:	40031100 	.word	0x40031100
   22640:	40031000 	.word	0x40031000
   22644:	40031120 	.word	0x40031120
   22648:	40842500 	.word	0x40842500
   2264c:	2000c674 	.word	0x2000c674

00022650 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   22650:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   22652:	4c08      	ldr	r4, [pc, #32]	; (22674 <nrfx_ipc_init+0x24>)
{
   22654:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   22656:	7923      	ldrb	r3, [r4, #4]
{
   22658:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2265a:	b943      	cbnz	r3, 2266e <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   2265c:	202a      	movs	r0, #42	; 0x2a
   2265e:	f7f9 fc89 	bl	1bf74 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   22662:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   22664:	4804      	ldr	r0, [pc, #16]	; (22678 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   22666:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   22668:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   2266a:	60a5      	str	r5, [r4, #8]
}
   2266c:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   2266e:	4803      	ldr	r0, [pc, #12]	; (2267c <nrfx_ipc_init+0x2c>)
   22670:	e7fc      	b.n	2266c <nrfx_ipc_init+0x1c>
   22672:	bf00      	nop
   22674:	2000d4c0 	.word	0x2000d4c0
   22678:	0bad0000 	.word	0x0bad0000
   2267c:	0bad000c 	.word	0x0bad000c

00022680 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   22680:	2300      	movs	r3, #0
{
   22682:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   22684:	4a0d      	ldr	r2, [pc, #52]	; (226bc <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   22686:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2268a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   2268e:	3301      	adds	r3, #1
   22690:	2b08      	cmp	r3, #8
   22692:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   22696:	d1f6      	bne.n	22686 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   22698:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   2269a:	4a08      	ldr	r2, [pc, #32]	; (226bc <nrfx_ipc_config_load+0x3c>)
   2269c:	f100 011c 	add.w	r1, r0, #28
   226a0:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   226a4:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   226a8:	3301      	adds	r3, #1
   226aa:	2b08      	cmp	r3, #8
   226ac:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   226b0:	d1f6      	bne.n	226a0 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   226b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   226b4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   226b8:	bd30      	pop	{r4, r5, pc}
   226ba:	bf00      	nop
   226bc:	4002a000 	.word	0x4002a000

000226c0 <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   226c0:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   226c2:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   226c6:	4a13      	ldr	r2, [pc, #76]	; (22714 <nrfx_ipc_uninit+0x54>)
   226c8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   226cc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   226d0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   226d4:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   226d8:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   226dc:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   226e0:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   226e4:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   226e8:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   226ec:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   226f0:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   226f4:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   226f8:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   226fc:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   22700:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   22704:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   22708:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   2270c:	4a02      	ldr	r2, [pc, #8]	; (22718 <nrfx_ipc_uninit+0x58>)
   2270e:	7113      	strb	r3, [r2, #4]
}
   22710:	4770      	bx	lr
   22712:	bf00      	nop
   22714:	4002a000 	.word	0x4002a000
   22718:	2000d4c0 	.word	0x2000d4c0

0002271c <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   2271c:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   2271e:	4a02      	ldr	r2, [pc, #8]	; (22728 <nrfx_ipc_receive_event_enable+0xc>)
   22720:	4083      	lsls	r3, r0
   22722:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   22726:	4770      	bx	lr
   22728:	4002a000 	.word	0x4002a000

0002272c <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   2272c:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   2272e:	4a02      	ldr	r2, [pc, #8]	; (22738 <nrfx_ipc_receive_event_disable+0xc>)
   22730:	4083      	lsls	r3, r0
   22732:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   22736:	4770      	bx	lr
   22738:	4002a000 	.word	0x4002a000

0002273c <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   2273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   2273e:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22740:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   22742:	4b0b      	ldr	r3, [pc, #44]	; (22770 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   22744:	4d0b      	ldr	r5, [pc, #44]	; (22774 <nrfx_ipc_irq_handler+0x38>)
   22746:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   2274a:	b904      	cbnz	r4, 2274e <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   2274c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   2274e:	fa94 f0a4 	rbit	r0, r4
   22752:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   22756:	fa06 f300 	lsl.w	r3, r6, r0
   2275a:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2275e:	4b06      	ldr	r3, [pc, #24]	; (22778 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   22760:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22762:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   22764:	682b      	ldr	r3, [r5, #0]
   22766:	2b00      	cmp	r3, #0
   22768:	d0ef      	beq.n	2274a <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   2276a:	68a9      	ldr	r1, [r5, #8]
   2276c:	4798      	blx	r3
   2276e:	e7ec      	b.n	2274a <nrfx_ipc_irq_handler+0xe>
   22770:	4002a000 	.word	0x4002a000
   22774:	2000d4c0 	.word	0x2000d4c0
   22778:	4002a100 	.word	0x4002a100

0002277c <spim_pin_uninit>:
    return err_code;
}

static void spim_pin_uninit(uint32_t pin)
{
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2277c:	1c43      	adds	r3, r0, #1
   2277e:	d006      	beq.n	2278e <spim_pin_uninit+0x12>
    reg->PIN_CNF[pin_number] = cnf;
   22780:	2202      	movs	r2, #2
   22782:	4b03      	ldr	r3, [pc, #12]	; (22790 <spim_pin_uninit+0x14>)
    *p_pin = pin_number & 0x1F;
   22784:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
   22788:	3080      	adds	r0, #128	; 0x80
   2278a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    {
        return;
    }

    nrf_gpio_cfg_default(pin);
}
   2278e:	4770      	bx	lr
   22790:	40842500 	.word	0x40842500

00022794 <nrf_gpio_pin_write>:
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22794:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
   22796:	f000 001f 	and.w	r0, r0, #31
   2279a:	4a03      	ldr	r2, [pc, #12]	; (227a8 <nrf_gpio_pin_write+0x14>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2279c:	4083      	lsls	r3, r0
    if (value == 0)
   2279e:	b909      	cbnz	r1, 227a4 <nrf_gpio_pin_write+0x10>
    p_reg->OUTCLR = clr_mask;
   227a0:	60d3      	str	r3, [r2, #12]
}
   227a2:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
   227a4:	6093      	str	r3, [r2, #8]
}
   227a6:	4770      	bx	lr
   227a8:	40842500 	.word	0x40842500

000227ac <nrfx_spim_init>:
{
   227ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   227b0:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   227b2:	4d4e      	ldr	r5, [pc, #312]	; (228ec <nrfx_spim_init+0x140>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   227b4:	7901      	ldrb	r1, [r0, #4]
{
   227b6:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   227b8:	014f      	lsls	r7, r1, #5
   227ba:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   227be:	7f08      	ldrb	r0, [r1, #28]
   227c0:	2800      	cmp	r0, #0
   227c2:	f040 8090 	bne.w	228e6 <nrfx_spim_init+0x13a>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   227c6:	f8d6 8000 	ldr.w	r8, [r6]
    p_cb->handler = handler;
   227ca:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
   227cc:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   227ce:	7be0      	ldrb	r0, [r4, #15]
   227d0:	7f8a      	ldrb	r2, [r1, #30]
   227d2:	f360 0200 	bfi	r2, r0, #0, #1
   227d6:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   227d8:	7920      	ldrb	r0, [r4, #4]
   227da:	b2d2      	uxtb	r2, r2
   227dc:	f360 0241 	bfi	r2, r0, #1, #1
   227e0:	778a      	strb	r2, [r1, #30]
    p_cb->ss_pin = p_config->ss_pin;
   227e2:	78e3      	ldrb	r3, [r4, #3]
   227e4:	77cb      	strb	r3, [r1, #31]
    if (!p_config->skip_gpio_cfg)
   227e6:	7be3      	ldrb	r3, [r4, #15]
   227e8:	f8d6 a000 	ldr.w	sl, [r6]
   227ec:	2b00      	cmp	r3, #0
   227ee:	d138      	bne.n	22862 <nrfx_spim_init+0xb6>
        nrf_gpio_pin_write(p_config->sck_pin,
   227f0:	7b21      	ldrb	r1, [r4, #12]
   227f2:	7820      	ldrb	r0, [r4, #0]
   227f4:	2901      	cmp	r1, #1
   227f6:	bf94      	ite	ls
   227f8:	2100      	movls	r1, #0
   227fa:	2101      	movhi	r1, #1
   227fc:	f7ff ffca 	bl	22794 <nrf_gpio_pin_write>
    reg->PIN_CNF[pin_number] = cnf;
   22800:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   22802:	7823      	ldrb	r3, [r4, #0]
    reg->PIN_CNF[pin_number] = cnf;
   22804:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 228f0 <nrfx_spim_init+0x144>
    *p_pin = pin_number & 0x1F;
   22808:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   2280c:	3380      	adds	r3, #128	; 0x80
   2280e:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   22812:	7863      	ldrb	r3, [r4, #1]
   22814:	2bff      	cmp	r3, #255	; 0xff
   22816:	d00b      	beq.n	22830 <nrfx_spim_init+0x84>
    *p_pin = pin_number & 0x1F;
   22818:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2281c:	409a      	lsls	r2, r3
    p_reg->OUTCLR = clr_mask;
   2281e:	f8c9 200c 	str.w	r2, [r9, #12]
    reg->PIN_CNF[pin_number] = cnf;
   22822:	2203      	movs	r2, #3
    *p_pin = pin_number & 0x1F;
   22824:	7863      	ldrb	r3, [r4, #1]
   22826:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   2282a:	3380      	adds	r3, #128	; 0x80
   2282c:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   22830:	78a3      	ldrb	r3, [r4, #2]
   22832:	2bff      	cmp	r3, #255	; 0xff
   22834:	d006      	beq.n	22844 <nrfx_spim_init+0x98>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22836:	7ba2      	ldrb	r2, [r4, #14]
    *p_pin = pin_number & 0x1F;
   22838:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2283c:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
   2283e:	3380      	adds	r3, #128	; 0x80
   22840:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   22844:	78e0      	ldrb	r0, [r4, #3]
   22846:	28ff      	cmp	r0, #255	; 0xff
   22848:	d00b      	beq.n	22862 <nrfx_spim_init+0xb6>
                               p_config->ss_active_high ? 0 : 1);
   2284a:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
   2284c:	f081 0101 	eor.w	r1, r1, #1
   22850:	f7ff ffa0 	bl	22794 <nrf_gpio_pin_write>
   22854:	2203      	movs	r2, #3
    *p_pin = pin_number & 0x1F;
   22856:	78e3      	ldrb	r3, [r4, #3]
   22858:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   2285c:	3380      	adds	r3, #128	; 0x80
   2285e:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   22862:	7c23      	ldrb	r3, [r4, #16]
   22864:	b993      	cbnz	r3, 2288c <nrfx_spim_init+0xe0>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   22866:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   22868:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   2286a:	2bff      	cmp	r3, #255	; 0xff
   2286c:	bf18      	it	ne
   2286e:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   22870:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   22872:	bf08      	it	eq
   22874:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   22878:	2bff      	cmp	r3, #255	; 0xff
   2287a:	bf08      	it	eq
   2287c:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   22880:	f8ca 1508 	str.w	r1, [sl, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   22884:	f8ca 250c 	str.w	r2, [sl, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   22888:	f8ca 3510 	str.w	r3, [sl, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   2288c:	68a3      	ldr	r3, [r4, #8]
   2288e:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   22892:	7b63      	ldrb	r3, [r4, #13]
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   22894:	7b22      	ldrb	r2, [r4, #12]
   22896:	3b00      	subs	r3, #0
   22898:	bf18      	it	ne
   2289a:	2301      	movne	r3, #1
    switch (spi_mode)
   2289c:	2a02      	cmp	r2, #2
   2289e:	d01c      	beq.n	228da <nrfx_spim_init+0x12e>
   228a0:	2a03      	cmp	r2, #3
   228a2:	d01d      	beq.n	228e0 <nrfx_spim_init+0x134>
   228a4:	2a01      	cmp	r2, #1
   228a6:	d101      	bne.n	228ac <nrfx_spim_init+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   228a8:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   228ac:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   228b0:	79a3      	ldrb	r3, [r4, #6]
   228b2:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   228b6:	2307      	movs	r3, #7
   228b8:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    if (p_cb->handler)
   228bc:	59eb      	ldr	r3, [r5, r7]
   228be:	b123      	cbz	r3, 228ca <nrfx_spim_init+0x11e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   228c0:	6830      	ldr	r0, [r6, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   228c2:	f340 3007 	sbfx	r0, r0, #12, #8
   228c6:	f7f9 fb55 	bl	1bf74 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   228ca:	2300      	movs	r3, #0
   228cc:	443d      	add	r5, r7
   228ce:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   228d0:	2301      	movs	r3, #1
    return err_code;
   228d2:	4808      	ldr	r0, [pc, #32]	; (228f4 <nrfx_spim_init+0x148>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   228d4:	772b      	strb	r3, [r5, #28]
}
   228d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   228da:	f043 0304 	orr.w	r3, r3, #4
        break;
   228de:	e7e5      	b.n	228ac <nrfx_spim_init+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   228e0:	f043 0306 	orr.w	r3, r3, #6
        break;
   228e4:	e7e2      	b.n	228ac <nrfx_spim_init+0x100>
        return err_code;
   228e6:	4804      	ldr	r0, [pc, #16]	; (228f8 <nrfx_spim_init+0x14c>)
   228e8:	e7f5      	b.n	228d6 <nrfx_spim_init+0x12a>
   228ea:	bf00      	nop
   228ec:	2000d4cc 	.word	0x2000d4cc
   228f0:	40842500 	.word	0x40842500
   228f4:	0bad0000 	.word	0x0bad0000
   228f8:	0bad0005 	.word	0x0bad0005

000228fc <nrfx_spim_uninit>:

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   228fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   228fe:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   22900:	4d1f      	ldr	r5, [pc, #124]	; (22980 <nrfx_spim_uninit+0x84>)
   22902:	015e      	lsls	r6, r3, #5
   22904:	eb05 1743 	add.w	r7, r5, r3, lsl #5
   22908:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   2290a:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   2290c:	b1b3      	cbz	r3, 2293c <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   2290e:	f344 3007 	sbfx	r0, r4, #12, #8
   22912:	f7f9 fb3d 	bl	1bf90 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   22916:	4b1b      	ldr	r3, [pc, #108]	; (22984 <nrfx_spim_uninit+0x88>)
   22918:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   2291c:	7f7b      	ldrb	r3, [r7, #29]
   2291e:	b16b      	cbz	r3, 2293c <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22920:	2301      	movs	r3, #1
   22922:	2764      	movs	r7, #100	; 0x64
   22924:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22926:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   2292a:	b923      	cbnz	r3, 22936 <nrfx_spim_uninit+0x3a>
   2292c:	2001      	movs	r0, #1
   2292e:	f007 f9f4 	bl	29d1a <nrfx_busy_wait>
   22932:	3f01      	subs	r7, #1
   22934:	d1f7      	bne.n	22926 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
   22936:	2200      	movs	r2, #0
   22938:	19ab      	adds	r3, r5, r6
   2293a:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   2293c:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   2293e:	19a9      	adds	r1, r5, r6
   22940:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   22944:	7f8b      	ldrb	r3, [r1, #30]
   22946:	07db      	lsls	r3, r3, #31
   22948:	d415      	bmi.n	22976 <nrfx_spim_uninit+0x7a>
    return p_reg->PSEL.SCK;
   2294a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   2294e:	f7ff ff15 	bl	2277c <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   22952:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   22956:	f7ff ff11 	bl	2277c <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   2295a:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   2295e:	f7ff ff0d 	bl	2277c <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   22962:	7fcb      	ldrb	r3, [r1, #31]
   22964:	2bff      	cmp	r3, #255	; 0xff
   22966:	d006      	beq.n	22976 <nrfx_spim_uninit+0x7a>
   22968:	2102      	movs	r1, #2
   2296a:	4a07      	ldr	r2, [pc, #28]	; (22988 <nrfx_spim_uninit+0x8c>)
    *p_pin = pin_number & 0x1F;
   2296c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   22970:	3380      	adds	r3, #128	; 0x80
   22972:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   22976:	2300      	movs	r3, #0
   22978:	4435      	add	r5, r6
   2297a:	772b      	strb	r3, [r5, #28]
}
   2297c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2297e:	bf00      	nop
   22980:	2000d4cc 	.word	0x2000d4cc
   22984:	00080152 	.word	0x00080152
   22988:	40842500 	.word	0x40842500

0002298c <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   2298c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22990:	4f38      	ldr	r7, [pc, #224]	; (22a74 <nrfx_spim_xfer+0xe8>)
   22992:	7903      	ldrb	r3, [r0, #4]
{
   22994:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22996:	eb07 1843 	add.w	r8, r7, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   2299a:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   2299e:	4681      	mov	r9, r0
   229a0:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
   229a2:	015e      	lsls	r6, r3, #5
   229a4:	2a00      	cmp	r2, #0
   229a6:	d163      	bne.n	22a70 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   229a8:	59ba      	ldr	r2, [r7, r6]
   229aa:	b12a      	cbz	r2, 229b8 <nrfx_spim_xfer+0x2c>
   229ac:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   229b0:	bf04      	itt	eq
   229b2:	2201      	moveq	r2, #1
   229b4:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   229b8:	eb07 0c06 	add.w	ip, r7, r6
   229bc:	f10c 0c0c 	add.w	ip, ip, #12
   229c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   229c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   229c8:	2101      	movs	r1, #1
   229ca:	4640      	mov	r0, r8
   229cc:	f007 f9a9 	bl	29d22 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   229d0:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   229d2:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   229d6:	b121      	cbz	r1, 229e2 <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   229d8:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   229dc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   229e0:	d106      	bne.n	229f0 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   229e2:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   229e4:	b152      	cbz	r2, 229fc <nrfx_spim_xfer+0x70>
   229e6:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   229ea:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   229ee:	d005      	beq.n	229fc <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
   229f0:	2300      	movs	r3, #0
   229f2:	443e      	add	r6, r7
        return err_code;
   229f4:	4820      	ldr	r0, [pc, #128]	; (22a78 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
   229f6:	7773      	strb	r3, [r6, #29]
}
   229f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   229fc:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   229fe:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22a02:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   22a06:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   22a0a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   22a0e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22a12:	2200      	movs	r2, #0
   22a14:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   22a18:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   22a1c:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   22a20:	bf18      	it	ne
   22a22:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   22a24:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   22a28:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   22a2c:	bf18      	it	ne
   22a2e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   22a30:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   22a34:	072a      	lsls	r2, r5, #28
   22a36:	d507      	bpl.n	22a48 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
   22a38:	59ba      	ldr	r2, [r7, r6]
   22a3a:	b972      	cbnz	r2, 22a5a <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
   22a3c:	2100      	movs	r1, #0
   22a3e:	4640      	mov	r0, r8
   22a40:	f007 f96f 	bl	29d22 <set_ss_pin_state>
    return err_code;
   22a44:	480d      	ldr	r0, [pc, #52]	; (22a7c <nrfx_spim_xfer+0xf0>)
   22a46:	e7d7      	b.n	229f8 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22a48:	2201      	movs	r2, #1
   22a4a:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   22a4c:	59ba      	ldr	r2, [r7, r6]
   22a4e:	b922      	cbnz	r2, 22a5a <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a50:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   22a54:	2a00      	cmp	r2, #0
   22a56:	d0fb      	beq.n	22a50 <nrfx_spim_xfer+0xc4>
   22a58:	e7f0      	b.n	22a3c <nrfx_spim_xfer+0xb0>
    if (!enable)
   22a5a:	f015 0f04 	tst.w	r5, #4
   22a5e:	f04f 0240 	mov.w	r2, #64	; 0x40
   22a62:	d002      	beq.n	22a6a <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
   22a64:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   22a68:	e7ec      	b.n	22a44 <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
   22a6a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   22a6e:	e7e9      	b.n	22a44 <nrfx_spim_xfer+0xb8>
        return err_code;
   22a70:	4803      	ldr	r0, [pc, #12]	; (22a80 <nrfx_spim_xfer+0xf4>)
   22a72:	e7c1      	b.n	229f8 <nrfx_spim_xfer+0x6c>
   22a74:	2000d4cc 	.word	0x2000d4cc
   22a78:	0bad000a 	.word	0x0bad000a
   22a7c:	0bad0000 	.word	0x0bad0000
   22a80:	0bad000b 	.word	0x0bad000b

00022a84 <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   22a84:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a86:	4b0c      	ldr	r3, [pc, #48]	; (22ab8 <nrfx_spim_3_irq_handler+0x34>)
   22a88:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   22a8c:	b192      	cbz	r2, 22ab4 <nrfx_spim_3_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22a8e:	2500      	movs	r5, #0
    set_ss_pin_state(p_cb, false);
   22a90:	4c0a      	ldr	r4, [pc, #40]	; (22abc <nrfx_spim_3_irq_handler+0x38>)
   22a92:	4629      	mov	r1, r5
   22a94:	4620      	mov	r0, r4
   22a96:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   22a9a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   22a9e:	f007 f940 	bl	29d22 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   22aa2:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   22aa6:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   22aa8:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   22aaa:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   22aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   22ab2:	4718      	bx	r3
}
   22ab4:	bd70      	pop	{r4, r5, r6, pc}
   22ab6:	bf00      	nop
   22ab8:	4000b000 	.word	0x4000b000
   22abc:	2000d4cc 	.word	0x2000d4cc

00022ac0 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   22ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   22ac2:	f04f 0e34 	mov.w	lr, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   22ac6:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   22ac8:	4d22      	ldr	r5, [pc, #136]	; (22b54 <nrfx_twim_init+0x94>)
   22aca:	fb0e fe06 	mul.w	lr, lr, r6
   22ace:	eb05 040e 	add.w	r4, r5, lr
   22ad2:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   22ad6:	2f00      	cmp	r7, #0
   22ad8:	d139      	bne.n	22b4e <nrfx_twim_init+0x8e>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   22ada:	f8d0 c000 	ldr.w	ip, [r0]
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   22ade:	60a7      	str	r7, [r4, #8]
    p_cb->handler         = event_handler;
   22ae0:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->p_context       = p_context;
   22ae4:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
   22ae6:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   22aea:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   22aee:	7b4b      	ldrb	r3, [r1, #13]
   22af0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   22af4:	7b8b      	ldrb	r3, [r1, #14]
   22af6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   22afa:	b1c3      	cbz	r3, 22b2e <nrfx_twim_init+0x6e>
   22afc:	7bcb      	ldrb	r3, [r1, #15]
   22afe:	b92b      	cbnz	r3, 22b0c <nrfx_twim_init+0x4c>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   22b00:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   22b04:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   22b08:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   22b0c:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   22b0e:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524

    if (p_cb->handler)
   22b12:	b122      	cbz	r2, 22b1e <nrfx_twim_init+0x5e>
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   22b14:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   22b16:	f340 3007 	sbfx	r0, r0, #12, #8
   22b1a:	f7f9 fa2b 	bl	1bf74 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22b1e:	2334      	movs	r3, #52	; 0x34
   22b20:	fb03 5506 	mla	r5, r3, r6, r5
   22b24:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   22b26:	480c      	ldr	r0, [pc, #48]	; (22b58 <nrfx_twim_init+0x98>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22b28:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   22b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22b2e:	f240 670c 	movw	r7, #1548	; 0x60c
    *p_pin = pin_number & 0x1F;
   22b32:	680b      	ldr	r3, [r1, #0]
    reg->PIN_CNF[pin_number] = cnf;
   22b34:	4c09      	ldr	r4, [pc, #36]	; (22b5c <nrfx_twim_init+0x9c>)
    *p_pin = pin_number & 0x1F;
   22b36:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   22b3a:	3380      	adds	r3, #128	; 0x80
   22b3c:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   22b40:	684b      	ldr	r3, [r1, #4]
   22b42:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   22b46:	3380      	adds	r3, #128	; 0x80
   22b48:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   22b4c:	e7d6      	b.n	22afc <nrfx_twim_init+0x3c>
        return err_code;
   22b4e:	4804      	ldr	r0, [pc, #16]	; (22b60 <nrfx_twim_init+0xa0>)
   22b50:	e7ec      	b.n	22b2c <nrfx_twim_init+0x6c>
   22b52:	bf00      	nop
   22b54:	2000d4ec 	.word	0x2000d4ec
   22b58:	0bad0000 	.word	0x0bad0000
   22b5c:	40842500 	.word	0x40842500
   22b60:	0bad0005 	.word	0x0bad0005

00022b64 <nrfx_twim_enable>:
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   22b64:	2106      	movs	r1, #6
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
   22b66:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22b68:	7902      	ldrb	r2, [r0, #4]
   22b6a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   22b6e:	2134      	movs	r1, #52	; 0x34
   22b70:	4b03      	ldr	r3, [pc, #12]	; (22b80 <nrfx_twim_enable+0x1c>)
   22b72:	fb01 3302 	mla	r3, r1, r2, r3
   22b76:	2202      	movs	r2, #2
   22b78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   22b7c:	4770      	bx	lr
   22b7e:	bf00      	nop
   22b80:	2000d4ec 	.word	0x2000d4ec

00022b84 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22b84:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   22b86:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   22b88:	2034      	movs	r0, #52	; 0x34
   22b8a:	4b0b      	ldr	r3, [pc, #44]	; (22bb8 <nrfx_twim_disable+0x34>)
   22b8c:	fb00 3301 	mla	r3, r0, r1, r3
   22b90:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   22b92:	480a      	ldr	r0, [pc, #40]	; (22bbc <nrfx_twim_disable+0x38>)
   22b94:	6099      	str	r1, [r3, #8]
   22b96:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   22b9a:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   22b9e:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   22ba2:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   22ba6:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22baa:	2201      	movs	r2, #1
    p_cb->busy = false;
   22bac:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22bb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   22bb4:	4770      	bx	lr
   22bb6:	bf00      	nop
   22bb8:	2000d4ec 	.word	0x2000d4ec
   22bbc:	019c0202 	.word	0x019c0202

00022bc0 <nrfx_twim_xfer>:
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
   22bc0:	2334      	movs	r3, #52	; 0x34


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   22bc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22bc6:	4617      	mov	r7, r2
    p_cb->error = false;
   22bc8:	2200      	movs	r2, #0
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22bca:	f890 e004 	ldrb.w	lr, [r0, #4]
    p_cb->error = false;
   22bce:	f8df c2e4 	ldr.w	ip, [pc, #740]	; 22eb4 <nrfx_twim_xfer+0x2f4>
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   22bd2:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   22bd4:	fb03 c30e 	mla	r3, r3, lr, ip
   22bd8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   22bdc:	684b      	ldr	r3, [r1, #4]
{
   22bde:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   22be0:	b14b      	cbz	r3, 22bf6 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   22be2:	68cb      	ldr	r3, [r1, #12]
   22be4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   22be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   22bec:	d003      	beq.n	22bf6 <nrfx_twim_xfer+0x36>
        return err_code;
   22bee:	4eb2      	ldr	r6, [pc, #712]	; (22eb8 <nrfx_twim_xfer+0x2f8>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   22bf0:	4630      	mov	r0, r6
   22bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   22bf6:	2634      	movs	r6, #52	; 0x34
   22bf8:	fb06 c60e 	mla	r6, r6, lr, ip
    p_reg->INTENCLR = mask;
   22bfc:	4baf      	ldr	r3, [pc, #700]	; (22ebc <nrfx_twim_xfer+0x2fc>)
   22bfe:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   22c02:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   22c06:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   22c0a:	b123      	cbz	r3, 22c16 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   22c0c:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   22c0e:	4eac      	ldr	r6, [pc, #688]	; (22ec0 <nrfx_twim_xfer+0x300>)
    p_reg->INTENSET = mask;
   22c10:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   22c14:	e7ec      	b.n	22bf0 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   22c16:	f017 0f14 	tst.w	r7, #20
   22c1a:	bf0c      	ite	eq
   22c1c:	2301      	moveq	r3, #1
   22c1e:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   22c20:	46a9      	mov	r9, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   22c22:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   22c26:	f106 080c 	add.w	r8, r6, #12
   22c2a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   22c2e:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   22c32:	f8d9 3000 	ldr.w	r3, [r9]
    p_cb->flags = flags;
   22c36:	6237      	str	r7, [r6, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   22c38:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   22c3c:	f3c7 1300 	ubfx	r3, r7, #4, #1
   22c40:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   22c44:	786b      	ldrb	r3, [r5, #1]
   22c46:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22c4a:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   22c4e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   22c52:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   22c56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22c5a:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   22c5e:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   22c62:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   22c66:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   22c6a:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   22c6e:	bf18      	it	ne
   22c70:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   22c72:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   22c76:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   22c7a:	bf18      	it	ne
   22c7c:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   22c7e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   22c82:	782b      	ldrb	r3, [r5, #0]
   22c84:	2b03      	cmp	r3, #3
   22c86:	f200 80b9 	bhi.w	22dfc <nrfx_twim_xfer+0x23c>
   22c8a:	e8df f003 	tbb	[pc, r3]
   22c8e:	a48b      	.short	0xa48b
   22c90:	026d      	.short	0x026d
   22c92:	692b      	ldr	r3, [r5, #16]
   22c94:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   22c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   22c9c:	d1a7      	bne.n	22bee <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   22c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
   22ca2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   22ca6:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22ca8:	68ea      	ldr	r2, [r5, #12]
   22caa:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22cae:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22cb2:	2300      	movs	r3, #0
   22cb4:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   22cb8:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22cbc:	2201      	movs	r2, #1
   22cbe:	6222      	str	r2, [r4, #32]
   22cc0:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22cc2:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   22cc6:	2a00      	cmp	r2, #0
   22cc8:	d0fb      	beq.n	22cc2 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22cca:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   22cce:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22cd2:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   22cd4:	68ab      	ldr	r3, [r5, #8]
   22cd6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22cda:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   22cde:	2334      	movs	r3, #52	; 0x34
   22ce0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   22ce4:	fb03 c30e 	mla	r3, r3, lr, ip
   22ce8:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   22cea:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   22cec:	4e75      	ldr	r6, [pc, #468]	; (22ec4 <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   22cee:	0738      	lsls	r0, r7, #28
   22cf0:	d407      	bmi.n	22d02 <nrfx_twim_xfer+0x142>
   22cf2:	782a      	ldrb	r2, [r5, #0]
   22cf4:	2a03      	cmp	r2, #3
   22cf6:	d004      	beq.n	22d02 <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22cf8:	2201      	movs	r2, #1
   22cfa:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   22cfc:	686b      	ldr	r3, [r5, #4]
   22cfe:	b903      	cbnz	r3, 22d02 <nrfx_twim_xfer+0x142>
   22d00:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   22d02:	2334      	movs	r3, #52	; 0x34
   22d04:	fb03 f30e 	mul.w	r3, r3, lr
   22d08:	f85c 1003 	ldr.w	r1, [ip, r3]
   22d0c:	eb0c 0203 	add.w	r2, ip, r3
   22d10:	2900      	cmp	r1, #0
   22d12:	d176      	bne.n	22e02 <nrfx_twim_xfer+0x242>
   22d14:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22d16:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   22d1a:	2b00      	cmp	r3, #0
   22d1c:	f000 8089 	beq.w	22e32 <nrfx_twim_xfer+0x272>
   22d20:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   22d24:	2b00      	cmp	r3, #0
   22d26:	f040 8087 	bne.w	22e38 <nrfx_twim_xfer+0x278>
   22d2a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   22d2e:	2b00      	cmp	r3, #0
   22d30:	f000 8095 	beq.w	22e5e <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
   22d34:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22d36:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   22d3a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22d3e:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   22d42:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   22d46:	2d00      	cmp	r5, #0
   22d48:	f000 8081 	beq.w	22e4e <nrfx_twim_xfer+0x28e>
   22d4c:	f412 7f00 	tst.w	r2, #512	; 0x200
   22d50:	f402 7280 	and.w	r2, r2, #256	; 0x100
   22d54:	d17e      	bne.n	22e54 <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22d56:	6220      	str	r0, [r4, #32]
   22d58:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   22d5a:	2a00      	cmp	r2, #0
   22d5c:	d0db      	beq.n	22d16 <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22d5e:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
   22d62:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   22d66:	e7d6      	b.n	22d16 <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   22d68:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22d6a:	68ea      	ldr	r2, [r5, #12]
   22d6c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22d70:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   22d74:	692b      	ldr	r3, [r5, #16]
   22d76:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   22d7a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   22d7e:	f47f af36 	bne.w	22bee <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   22d82:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   22d84:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   22d88:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   22d8c:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   22d90:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22d94:	2334      	movs	r3, #52	; 0x34
   22d96:	2202      	movs	r2, #2
   22d98:	fb03 c30e 	mla	r3, r3, lr, ip
   22d9c:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22d9e:	2301      	movs	r3, #1
   22da0:	6223      	str	r3, [r4, #32]
   22da2:	e7a2      	b.n	22cea <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   22da4:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22da6:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   22da8:	f017 0f20 	tst.w	r7, #32
   22dac:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22db0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   22db4:	f04f 0334 	mov.w	r3, #52	; 0x34
   22db8:	d008      	beq.n	22dcc <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
   22dba:	f44f 7280 	mov.w	r2, #256	; 0x100
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   22dbe:	fb03 c30e 	mla	r3, r3, lr, ip
   22dc2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   22dc6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   22dca:	e7e7      	b.n	22d9c <nrfx_twim_xfer+0x1dc>
   22dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
   22dd0:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22dd4:	e7df      	b.n	22d96 <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   22dd6:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   22dd8:	68ea      	ldr	r2, [r5, #12]
   22dda:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   22dde:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   22de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   22de6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22dea:	2334      	movs	r3, #52	; 0x34
   22dec:	2202      	movs	r2, #2
   22dee:	fb03 c30e 	mla	r3, r3, lr, ip
   22df2:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22df4:	2301      	movs	r3, #1
   22df6:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   22df8:	2300      	movs	r3, #0
   22dfa:	e777      	b.n	22cec <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
   22dfc:	2308      	movs	r3, #8
   22dfe:	4e32      	ldr	r6, [pc, #200]	; (22ec8 <nrfx_twim_xfer+0x308>)
   22e00:	e775      	b.n	22cee <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   22e02:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
   22e04:	bf44      	itt	mi
   22e06:	2300      	movmi	r3, #0
   22e08:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   22e0a:	067a      	lsls	r2, r7, #25
   22e0c:	d406      	bmi.n	22e1c <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   22e0e:	2334      	movs	r3, #52	; 0x34
   22e10:	fb03 c30e 	mla	r3, r3, lr, ip
   22e14:	689a      	ldr	r2, [r3, #8]
   22e16:	f042 0202 	orr.w	r2, r2, #2
   22e1a:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   22e1c:	2334      	movs	r3, #52	; 0x34
   22e1e:	fb03 c30e 	mla	r3, r3, lr, ip
   22e22:	689a      	ldr	r2, [r3, #8]
   22e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   22e28:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   22e2a:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
   22e2c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   22e30:	e6de      	b.n	22bf0 <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22e32:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   22e36:	b123      	cbz	r3, 22e42 <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22e38:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   22e3c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22e40:	e773      	b.n	22d2a <nrfx_twim_xfer+0x16a>
   22e42:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   22e46:	2a00      	cmp	r2, #0
   22e48:	f43f af65 	beq.w	22d16 <nrfx_twim_xfer+0x156>
   22e4c:	e773      	b.n	22d36 <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22e4e:	6220      	str	r0, [r4, #32]
   22e50:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   22e52:	e760      	b.n	22d16 <nrfx_twim_xfer+0x156>
   22e54:	2a00      	cmp	r2, #0
   22e56:	d182      	bne.n	22d5e <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
   22e58:	2b00      	cmp	r3, #0
   22e5a:	f43f af5c 	beq.w	22d16 <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
   22e5e:	2134      	movs	r1, #52	; 0x34
   22e60:	2000      	movs	r0, #0
   22e62:	fb01 c20e 	mla	r2, r1, lr, ip
    uint32_t error_source = p_reg->ERRORSRC;
   22e66:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   22e6a:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   22e6e:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   22e72:	b18b      	cbz	r3, 22e98 <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   22e74:	4a15      	ldr	r2, [pc, #84]	; (22ecc <nrfx_twim_xfer+0x30c>)
   22e76:	f013 0f01 	tst.w	r3, #1
   22e7a:	4e15      	ldr	r6, [pc, #84]	; (22ed0 <nrfx_twim_xfer+0x310>)
   22e7c:	bf18      	it	ne
   22e7e:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   22e80:	f013 0f02 	tst.w	r3, #2
   22e84:	f102 0201 	add.w	r2, r2, #1
   22e88:	bf18      	it	ne
   22e8a:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   22e8c:	f013 0f04 	tst.w	r3, #4
   22e90:	4b10      	ldr	r3, [pc, #64]	; (22ed4 <nrfx_twim_xfer+0x314>)
   22e92:	bf18      	it	ne
   22e94:	461e      	movne	r6, r3
   22e96:	e6ab      	b.n	22bf0 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   22e98:	067b      	lsls	r3, r7, #25
   22e9a:	f53f aea9 	bmi.w	22bf0 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   22e9e:	4620      	mov	r0, r4
   22ea0:	fb0e c101 	mla	r1, lr, r1, ip
   22ea4:	f006 ff49 	bl	29d3a <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   22ea8:	4b09      	ldr	r3, [pc, #36]	; (22ed0 <nrfx_twim_xfer+0x310>)
   22eaa:	2800      	cmp	r0, #0
   22eac:	bf08      	it	eq
   22eae:	461e      	moveq	r6, r3
   22eb0:	e69e      	b.n	22bf0 <nrfx_twim_xfer+0x30>
   22eb2:	bf00      	nop
   22eb4:	2000d4ec 	.word	0x2000d4ec
   22eb8:	0bad000a 	.word	0x0bad000a
   22ebc:	019c0202 	.word	0x019c0202
   22ec0:	0bad000b 	.word	0x0bad000b
   22ec4:	0bad0000 	.word	0x0bad0000
   22ec8:	0bad0004 	.word	0x0bad0004
   22ecc:	0bae0000 	.word	0x0bae0000
   22ed0:	0bad0001 	.word	0x0bad0001
   22ed4:	0bae0002 	.word	0x0bae0002

00022ed8 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   22ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22eda:	4d5a      	ldr	r5, [pc, #360]	; (23044 <nrfx_twim_2_irq_handler+0x16c>)
   22edc:	4c5a      	ldr	r4, [pc, #360]	; (23048 <nrfx_twim_2_irq_handler+0x170>)
   22ede:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   22ee2:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   22ee4:	b1fb      	cbz	r3, 22f26 <nrfx_twim_2_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22ee6:	2300      	movs	r3, #0
   22ee8:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   22eec:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22ef0:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   22ef4:	b9bb      	cbnz	r3, 22f26 <nrfx_twim_2_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   22ef6:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   22ef8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22efc:	2302      	movs	r3, #2
   22efe:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   22f00:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   22f02:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22f06:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   22f0a:	b11b      	cbz	r3, 22f14 <nrfx_twim_2_irq_handler+0x3c>
    return p_reg->SHORTS;
   22f0c:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   22f10:	059e      	lsls	r6, r3, #22
   22f12:	d403      	bmi.n	22f1c <nrfx_twim_2_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22f14:	2201      	movs	r2, #1
   22f16:	4b4b      	ldr	r3, [pc, #300]	; (23044 <nrfx_twim_2_irq_handler+0x16c>)
   22f18:	621a      	str	r2, [r3, #32]
   22f1a:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   22f1c:	2301      	movs	r3, #1
   22f1e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   22f22:	b007      	add	sp, #28
   22f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22f26:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   22f2a:	2b00      	cmp	r3, #0
   22f2c:	d05a      	beq.n	22fe4 <nrfx_twim_2_irq_handler+0x10c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22f2e:	2300      	movs	r3, #0
   22f30:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   22f34:	6a27      	ldr	r7, [r4, #32]
   22f36:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   22f3a:	067d      	lsls	r5, r7, #25
   22f3c:	d40a      	bmi.n	22f54 <nrfx_twim_2_irq_handler+0x7c>
   22f3e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   22f42:	b93b      	cbnz	r3, 22f54 <nrfx_twim_2_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   22f44:	4940      	ldr	r1, [pc, #256]	; (23048 <nrfx_twim_2_irq_handler+0x170>)
   22f46:	483f      	ldr	r0, [pc, #252]	; (23044 <nrfx_twim_2_irq_handler+0x16c>)
   22f48:	f006 fef7 	bl	29d3a <xfer_completeness_check>
   22f4c:	f080 0001 	eor.w	r0, r0, #1
   22f50:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   22f54:	f017 0704 	ands.w	r7, r7, #4
            if (!p_cb->repeated || p_cb->error)
   22f58:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   22f5c:	d120      	bne.n	22fa0 <nrfx_twim_2_irq_handler+0xc8>
            event.xfer_desc = p_cb->xfer_desc;
   22f5e:	4e3b      	ldr	r6, [pc, #236]	; (2304c <nrfx_twim_2_irq_handler+0x174>)
   22f60:	ad01      	add	r5, sp, #4
   22f62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   22f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   22f66:	6833      	ldr	r3, [r6, #0]
   22f68:	602b      	str	r3, [r5, #0]
   22f6a:	4b36      	ldr	r3, [pc, #216]	; (23044 <nrfx_twim_2_irq_handler+0x16c>)
   22f6c:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   22f70:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   22f74:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   22f78:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   22f7c:	f1bc 0f00 	cmp.w	ip, #0
   22f80:	d002      	beq.n	22f88 <nrfx_twim_2_irq_handler+0xb0>
   22f82:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   22f86:	b15a      	cbz	r2, 22fa0 <nrfx_twim_2_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   22f88:	2200      	movs	r2, #0
   22f8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   22f8e:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   22f90:	4a2f      	ldr	r2, [pc, #188]	; (23050 <nrfx_twim_2_irq_handler+0x178>)
   22f92:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   22f96:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22f9a:	4b2e      	ldr	r3, [pc, #184]	; (23054 <nrfx_twim_2_irq_handler+0x17c>)
   22f9c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   22fa0:	4a28      	ldr	r2, [pc, #160]	; (23044 <nrfx_twim_2_irq_handler+0x16c>)
   22fa2:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   22fa6:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   22fa8:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   22fac:	d443      	bmi.n	23036 <nrfx_twim_2_irq_handler+0x15e>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   22fae:	0759      	lsls	r1, r3, #29
   22fb0:	d443      	bmi.n	2303a <nrfx_twim_2_irq_handler+0x162>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   22fb2:	07da      	lsls	r2, r3, #31
   22fb4:	d443      	bmi.n	2303e <nrfx_twim_2_irq_handler+0x166>
    else if (p_cb->error)
   22fb6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   22fba:	009b      	lsls	r3, r3, #2
   22fbc:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   22fbe:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   22fc2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   22fc6:	b90b      	cbnz	r3, 22fcc <nrfx_twim_2_irq_handler+0xf4>
        p_cb->busy = false;
   22fc8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   22fcc:	6a23      	ldr	r3, [r4, #32]
   22fce:	075b      	lsls	r3, r3, #29
   22fd0:	d503      	bpl.n	22fda <nrfx_twim_2_irq_handler+0x102>
   22fd2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   22fd6:	2b00      	cmp	r3, #0
   22fd8:	d0a3      	beq.n	22f22 <nrfx_twim_2_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
   22fda:	e9d4 3100 	ldrd	r3, r1, [r4]
   22fde:	4668      	mov	r0, sp
   22fe0:	4798      	blx	r3
}
   22fe2:	e79e      	b.n	22f22 <nrfx_twim_2_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22fe4:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   22fe8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   22fec:	7b23      	ldrb	r3, [r4, #12]
   22fee:	b983      	cbnz	r3, 23012 <nrfx_twim_2_irq_handler+0x13a>
            event.xfer_desc = p_cb->xfer_desc;
   22ff0:	4f16      	ldr	r7, [pc, #88]	; (2304c <nrfx_twim_2_irq_handler+0x174>)
   22ff2:	ae01      	add	r6, sp, #4
   22ff4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   22ff6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   22ff8:	683b      	ldr	r3, [r7, #0]
   22ffa:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   22ffc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   23000:	2b00      	cmp	r3, #0
   23002:	d1cd      	bne.n	22fa0 <nrfx_twim_2_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   23004:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   23008:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   2300a:	4b11      	ldr	r3, [pc, #68]	; (23050 <nrfx_twim_2_irq_handler+0x178>)
   2300c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   23010:	e7c1      	b.n	22f96 <nrfx_twim_2_irq_handler+0xbe>
    p_reg->SHORTS = mask;
   23012:	f44f 7300 	mov.w	r3, #512	; 0x200
   23016:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   2301a:	f240 2302 	movw	r3, #514	; 0x202
   2301e:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   23020:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   23024:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   23028:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   2302a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2302e:	2301      	movs	r3, #1
   23030:	60ab      	str	r3, [r5, #8]
   23032:	622b      	str	r3, [r5, #32]
            return;
   23034:	e775      	b.n	22f22 <nrfx_twim_2_irq_handler+0x4a>
   23036:	2301      	movs	r3, #1
   23038:	e7c1      	b.n	22fbe <nrfx_twim_2_irq_handler+0xe6>
   2303a:	2302      	movs	r3, #2
   2303c:	e7bf      	b.n	22fbe <nrfx_twim_2_irq_handler+0xe6>
   2303e:	2303      	movs	r3, #3
   23040:	e7bd      	b.n	22fbe <nrfx_twim_2_irq_handler+0xe6>
   23042:	bf00      	nop
   23044:	4000a000 	.word	0x4000a000
   23048:	2000d4ec 	.word	0x2000d4ec
   2304c:	2000d4f8 	.word	0x2000d4f8
   23050:	019c0202 	.word	0x019c0202
   23054:	e000e100 	.word	0xe000e100

00023058 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   23058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2305c:	2501      	movs	r5, #1
    reg->PIN_CNF[pin_number] = cnf;
   2305e:	f240 630d 	movw	r3, #1549	; 0x60d
    p_reg->OUTSET = set_mask;
   23062:	4c1b      	ldr	r4, [pc, #108]	; (230d0 <nrfx_twi_twim_bus_recover+0x78>)
    *p_pin = pin_number & 0x1F;
   23064:	f001 061f 	and.w	r6, r1, #31
   23068:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2306c:	fa05 f800 	lsl.w	r8, r5, r0
    reg->PIN_CNF[pin_number] = cnf;
   23070:	f106 0280 	add.w	r2, r6, #128	; 0x80
   23074:	3080      	adds	r0, #128	; 0x80
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   23076:	40b5      	lsls	r5, r6
    p_reg->OUTSET = set_mask;
   23078:	f8c4 8008 	str.w	r8, [r4, #8]
   2307c:	60a5      	str	r5, [r4, #8]
    reg->PIN_CNF[pin_number] = cnf;
   2307e:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   23082:	2004      	movs	r0, #4
   23084:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
   23088:	f006 fe47 	bl	29d1a <nrfx_busy_wait>
   2308c:	2709      	movs	r7, #9
    return p_reg->IN;
   2308e:	6923      	ldr	r3, [r4, #16]

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   23090:	421d      	tst	r5, r3
   23092:	d10d      	bne.n	230b0 <nrfx_twi_twim_bus_recover+0x58>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   23094:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   23096:	f8c4 800c 	str.w	r8, [r4, #12]
   2309a:	f006 fe3e 	bl	29d1a <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   2309e:	3f01      	subs	r7, #1
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   230a0:	2004      	movs	r0, #4
    p_reg->OUTSET = set_mask;
   230a2:	f8c4 8008 	str.w	r8, [r4, #8]
   230a6:	f006 fe38 	bl	29d1a <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   230aa:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   230ae:	d1ee      	bne.n	2308e <nrfx_twi_twim_bus_recover+0x36>
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   230b0:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   230b2:	60e5      	str	r5, [r4, #12]
   230b4:	f006 fe31 	bl	29d1a <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   230b8:	2004      	movs	r0, #4
    p_reg->OUTSET = set_mask;
   230ba:	60a5      	str	r5, [r4, #8]
   230bc:	f006 fe2d 	bl	29d1a <nrfx_busy_wait>
    return p_reg->IN;
   230c0:	6923      	ldr	r3, [r4, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   230c2:	4804      	ldr	r0, [pc, #16]	; (230d4 <nrfx_twi_twim_bus_recover+0x7c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   230c4:	40f3      	lsrs	r3, r6
   230c6:	f003 0301 	and.w	r3, r3, #1
   230ca:	1ac0      	subs	r0, r0, r3
   230cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   230d0:	40842500 	.word	0x40842500
   230d4:	0bad0001 	.word	0x0bad0001

000230d8 <rpc_handle_data_message>:
   230d8:	b570      	push	{r4, r5, r6, lr}
   230da:	6803      	ldr	r3, [r0, #0]
   230dc:	4604      	mov	r4, r0
   230de:	b2db      	uxtb	r3, r3
   230e0:	2b04      	cmp	r3, #4
   230e2:	d009      	beq.n	230f8 <rpc_handle_data_message+0x20>
   230e4:	2b03      	cmp	r3, #3
   230e6:	d015      	beq.n	23114 <rpc_handle_data_message+0x3c>
   230e8:	2b06      	cmp	r3, #6
   230ea:	d015      	beq.n	23118 <rpc_handle_data_message+0x40>
   230ec:	2b07      	cmp	r3, #7
   230ee:	d015      	beq.n	2311c <rpc_handle_data_message+0x44>
   230f0:	6880      	ldr	r0, [r0, #8]
   230f2:	b9a8      	cbnz	r0, 23120 <rpc_handle_data_message+0x48>
   230f4:	2000      	movs	r0, #0
   230f6:	bd70      	pop	{r4, r5, r6, pc}
   230f8:	2300      	movs	r3, #0
   230fa:	4a0b      	ldr	r2, [pc, #44]	; (23128 <rpc_handle_data_message+0x50>)
   230fc:	4620      	mov	r0, r4
   230fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   23102:	685d      	ldr	r5, [r3, #4]
   23104:	f006 fe9c 	bl	29e40 <rpc_client_msg_from_rpc_msg_get>
   23108:	6821      	ldr	r1, [r4, #0]
   2310a:	462b      	mov	r3, r5
   2310c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23110:	0c09      	lsrs	r1, r1, #16
   23112:	4718      	bx	r3
   23114:	2301      	movs	r3, #1
   23116:	e7f0      	b.n	230fa <rpc_handle_data_message+0x22>
   23118:	2302      	movs	r3, #2
   2311a:	e7ee      	b.n	230fa <rpc_handle_data_message+0x22>
   2311c:	2303      	movs	r3, #3
   2311e:	e7ec      	b.n	230fa <rpc_handle_data_message+0x22>
   23120:	f000 f81c 	bl	2315c <rpc_transport_msg_data_rx_free>
   23124:	e7e6      	b.n	230f4 <rpc_handle_data_message+0x1c>
   23126:	bf00      	nop
   23128:	0002c230 	.word	0x0002c230

0002312c <rpc_transport_init>:
   2312c:	4b01      	ldr	r3, [pc, #4]	; (23134 <rpc_transport_init+0x8>)
   2312e:	699b      	ldr	r3, [r3, #24]
   23130:	4718      	bx	r3
   23132:	bf00      	nop
   23134:	2000c6d0 	.word	0x2000c6d0

00023138 <rpc_transport_msg_alloc>:
   23138:	4b01      	ldr	r3, [pc, #4]	; (23140 <rpc_transport_msg_alloc+0x8>)
   2313a:	681b      	ldr	r3, [r3, #0]
   2313c:	4718      	bx	r3
   2313e:	bf00      	nop
   23140:	2000c6d0 	.word	0x2000c6d0

00023144 <rpc_transport_msg_data_tx_size>:
   23144:	4b01      	ldr	r3, [pc, #4]	; (2314c <rpc_transport_msg_data_tx_size+0x8>)
   23146:	685b      	ldr	r3, [r3, #4]
   23148:	4718      	bx	r3
   2314a:	bf00      	nop
   2314c:	2000c6d0 	.word	0x2000c6d0

00023150 <rpc_transport_msg_rx_free>:
   23150:	4b01      	ldr	r3, [pc, #4]	; (23158 <rpc_transport_msg_rx_free+0x8>)
   23152:	68db      	ldr	r3, [r3, #12]
   23154:	4718      	bx	r3
   23156:	bf00      	nop
   23158:	2000c6d0 	.word	0x2000c6d0

0002315c <rpc_transport_msg_data_rx_free>:
   2315c:	4b01      	ldr	r3, [pc, #4]	; (23164 <rpc_transport_msg_data_rx_free+0x8>)
   2315e:	695b      	ldr	r3, [r3, #20]
   23160:	4718      	bx	r3
   23162:	bf00      	nop
   23164:	2000c6d0 	.word	0x2000c6d0

00023168 <rpc_transport_msg_send>:
   23168:	4b01      	ldr	r3, [pc, #4]	; (23170 <rpc_transport_msg_send+0x8>)
   2316a:	689b      	ldr	r3, [r3, #8]
   2316c:	4718      	bx	r3
   2316e:	bf00      	nop
   23170:	2000c6d0 	.word	0x2000c6d0

00023174 <rpc_transport_data_rx_suspend>:
   23174:	4b01      	ldr	r3, [pc, #4]	; (2317c <rpc_transport_data_rx_suspend+0x8>)
   23176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23178:	4718      	bx	r3
   2317a:	bf00      	nop
   2317c:	2000c6d0 	.word	0x2000c6d0

00023180 <rpc_transport_data_rx_resume>:
   23180:	4b01      	ldr	r3, [pc, #4]	; (23188 <rpc_transport_data_rx_resume+0x8>)
   23182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23184:	4718      	bx	r3
   23186:	bf00      	nop
   23188:	2000c6d0 	.word	0x2000c6d0

0002318c <rpc_transport_ipc_msg_data_tx_size>:
   2318c:	4b01      	ldr	r3, [pc, #4]	; (23194 <rpc_transport_ipc_msg_data_tx_size+0x8>)
   2318e:	681b      	ldr	r3, [r3, #0]
   23190:	68d8      	ldr	r0, [r3, #12]
   23192:	4770      	bx	lr
   23194:	2000d520 	.word	0x2000d520

00023198 <rpc_transport_ipc_msg_rx_free>:
   23198:	2300      	movs	r3, #0
   2319a:	b530      	push	{r4, r5, lr}
   2319c:	4910      	ldr	r1, [pc, #64]	; (231e0 <rpc_transport_ipc_msg_rx_free+0x48>)
   2319e:	680a      	ldr	r2, [r1, #0]
   231a0:	6814      	ldr	r4, [r2, #0]
   231a2:	42a3      	cmp	r3, r4
   231a4:	d10b      	bne.n	231be <rpc_transport_ipc_msg_rx_free+0x26>
   231a6:	2300      	movs	r3, #0
   231a8:	684a      	ldr	r2, [r1, #4]
   231aa:	6811      	ldr	r1, [r2, #0]
   231ac:	428b      	cmp	r3, r1
   231ae:	d015      	beq.n	231dc <rpc_transport_ipc_msg_rx_free+0x44>
   231b0:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   231b4:	68a4      	ldr	r4, [r4, #8]
   231b6:	42a0      	cmp	r0, r4
   231b8:	d008      	beq.n	231cc <rpc_transport_ipc_msg_rx_free+0x34>
   231ba:	3301      	adds	r3, #1
   231bc:	e7f6      	b.n	231ac <rpc_transport_ipc_msg_rx_free+0x14>
   231be:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   231c2:	68ad      	ldr	r5, [r5, #8]
   231c4:	42a8      	cmp	r0, r5
   231c6:	d001      	beq.n	231cc <rpc_transport_ipc_msg_rx_free+0x34>
   231c8:	3301      	adds	r3, #1
   231ca:	e7ea      	b.n	231a2 <rpc_transport_ipc_msg_rx_free+0xa>
   231cc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   231d0:	6853      	ldr	r3, [r2, #4]
   231d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   231d6:	f043 0303 	orr.w	r3, r3, #3
   231da:	6053      	str	r3, [r2, #4]
   231dc:	bd30      	pop	{r4, r5, pc}
   231de:	bf00      	nop
   231e0:	2000d540 	.word	0x2000d540

000231e4 <rpc_transport_ipc_msg_tx_free>:
   231e4:	2200      	movs	r2, #0
   231e6:	b530      	push	{r4, r5, lr}
   231e8:	4b0b      	ldr	r3, [pc, #44]	; (23218 <rpc_transport_ipc_msg_tx_free+0x34>)
   231ea:	6819      	ldr	r1, [r3, #0]
   231ec:	680c      	ldr	r4, [r1, #0]
   231ee:	4294      	cmp	r4, r2
   231f0:	d00f      	beq.n	23212 <rpc_transport_ipc_msg_tx_free+0x2e>
   231f2:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   231f6:	689d      	ldr	r5, [r3, #8]
   231f8:	42a8      	cmp	r0, r5
   231fa:	d10b      	bne.n	23214 <rpc_transport_ipc_msg_tx_free+0x30>
   231fc:	f04f 0203 	mov.w	r2, #3
   23200:	3304      	adds	r3, #4
   23202:	e8d3 1fcf 	ldaexb	r1, [r3]
   23206:	2900      	cmp	r1, #0
   23208:	d103      	bne.n	23212 <rpc_transport_ipc_msg_tx_free+0x2e>
   2320a:	e8c3 2fc0 	stlexb	r0, r2, [r3]
   2320e:	2800      	cmp	r0, #0
   23210:	d1f7      	bne.n	23202 <rpc_transport_ipc_msg_tx_free+0x1e>
   23212:	bd30      	pop	{r4, r5, pc}
   23214:	3201      	adds	r2, #1
   23216:	e7ea      	b.n	231ee <rpc_transport_ipc_msg_tx_free+0xa>
   23218:	2000d538 	.word	0x2000d538

0002321c <handle_modem_rpc_msg>:
   2321c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23220:	2500      	movs	r5, #0
   23222:	4606      	mov	r6, r0
   23224:	460f      	mov	r7, r1
   23226:	4628      	mov	r0, r5
   23228:	f8df 8064 	ldr.w	r8, [pc, #100]	; 23290 <handle_modem_rpc_msg+0x74>
   2322c:	6833      	ldr	r3, [r6, #0]
   2322e:	42ab      	cmp	r3, r5
   23230:	d801      	bhi.n	23236 <handle_modem_rpc_msg+0x1a>
   23232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23236:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   2323a:	6863      	ldr	r3, [r4, #4]
   2323c:	b2db      	uxtb	r3, r3
   2323e:	2b01      	cmp	r3, #1
   23240:	d117      	bne.n	23272 <handle_modem_rpc_msg+0x56>
   23242:	6862      	ldr	r2, [r4, #4]
   23244:	f8b8 3000 	ldrh.w	r3, [r8]
   23248:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   2324c:	d111      	bne.n	23272 <handle_modem_rpc_msg+0x56>
   2324e:	2f02      	cmp	r7, #2
   23250:	68a0      	ldr	r0, [r4, #8]
   23252:	d110      	bne.n	23276 <handle_modem_rpc_msg+0x5a>
   23254:	f7ff ff40 	bl	230d8 <rpc_handle_data_message>
   23258:	b990      	cbnz	r0, 23280 <handle_modem_rpc_msg+0x64>
   2325a:	6863      	ldr	r3, [r4, #4]
   2325c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   23260:	f043 0303 	orr.w	r3, r3, #3
   23264:	6063      	str	r3, [r4, #4]
   23266:	2001      	movs	r0, #1
   23268:	f8b8 3000 	ldrh.w	r3, [r8]
   2326c:	3301      	adds	r3, #1
   2326e:	f8a8 3000 	strh.w	r3, [r8]
   23272:	3501      	adds	r5, #1
   23274:	e7da      	b.n	2322c <handle_modem_rpc_msg+0x10>
   23276:	6801      	ldr	r1, [r0, #0]
   23278:	0c09      	lsrs	r1, r1, #16
   2327a:	f006 fd8e 	bl	29d9a <rpc_handle_ctrl_message>
   2327e:	e7eb      	b.n	23258 <handle_modem_rpc_msg+0x3c>
   23280:	2801      	cmp	r0, #1
   23282:	d1f0      	bne.n	23266 <handle_modem_rpc_msg+0x4a>
   23284:	6863      	ldr	r3, [r4, #4]
   23286:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2328a:	f043 0302 	orr.w	r3, r3, #2
   2328e:	e7e9      	b.n	23264 <handle_modem_rpc_msg+0x48>
   23290:	2000d960 	.word	0x2000d960

00023294 <rpc_message_handler>:
   23294:	b538      	push	{r3, r4, r5, lr}
   23296:	4d07      	ldr	r5, [pc, #28]	; (232b4 <rpc_message_handler+0x20>)
   23298:	2101      	movs	r1, #1
   2329a:	6828      	ldr	r0, [r5, #0]
   2329c:	f7ff ffbe 	bl	2321c <handle_modem_rpc_msg>
   232a0:	2102      	movs	r1, #2
   232a2:	4604      	mov	r4, r0
   232a4:	6868      	ldr	r0, [r5, #4]
   232a6:	f7ff ffb9 	bl	2321c <handle_modem_rpc_msg>
   232aa:	2800      	cmp	r0, #0
   232ac:	d1f4      	bne.n	23298 <rpc_message_handler+0x4>
   232ae:	2c00      	cmp	r4, #0
   232b0:	d1f2      	bne.n	23298 <rpc_message_handler+0x4>
   232b2:	bd38      	pop	{r3, r4, r5, pc}
   232b4:	2000d540 	.word	0x2000d540

000232b8 <ipc_irq_handler>:
   232b8:	b570      	push	{r4, r5, r6, lr}
   232ba:	2807      	cmp	r0, #7
   232bc:	d868      	bhi.n	23390 <ipc_irq_handler+0xd8>
   232be:	e8df f000 	tbb	[pc, r0]
   232c2:	670b      	.short	0x670b
   232c4:	674b674f 	.word	0x674b674f
   232c8:	0440      	.short	0x0440
   232ca:	f001 fd45 	bl	24d58 <ipc_trace_handler>
   232ce:	2003      	movs	r0, #3
   232d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   232d4:	f7fb bc36 	b.w	1eb44 <nrf_modem_os_event_notify>
   232d8:	2003      	movs	r0, #3
   232da:	4b2e      	ldr	r3, [pc, #184]	; (23394 <ipc_irq_handler+0xdc>)
   232dc:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
   232e0:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
   232e4:	4b2c      	ldr	r3, [pc, #176]	; (23398 <ipc_irq_handler+0xe0>)
   232e6:	781d      	ldrb	r5, [r3, #0]
   232e8:	7018      	strb	r0, [r3, #0]
   232ea:	f001 fd0b 	bl	24d04 <nrf_modem_state_set>
   232ee:	4b2b      	ldr	r3, [pc, #172]	; (2339c <ipc_irq_handler+0xe4>)
   232f0:	b2ed      	uxtb	r5, r5
   232f2:	6818      	ldr	r0, [r3, #0]
   232f4:	f006 f906 	bl	29504 <nrf_modem_os_sem_give>
   232f8:	2d01      	cmp	r5, #1
   232fa:	d11c      	bne.n	23336 <ipc_irq_handler+0x7e>
   232fc:	4b28      	ldr	r3, [pc, #160]	; (233a0 <ipc_irq_handler+0xe8>)
   232fe:	429c      	cmp	r4, r3
   23300:	d010      	beq.n	23324 <ipc_irq_handler+0x6c>
   23302:	d809      	bhi.n	23318 <ipc_irq_handler+0x60>
   23304:	3b02      	subs	r3, #2
   23306:	429c      	cmp	r4, r3
   23308:	d00f      	beq.n	2332a <ipc_irq_handler+0x72>
   2330a:	3301      	adds	r3, #1
   2330c:	429c      	cmp	r4, r3
   2330e:	d00f      	beq.n	23330 <ipc_irq_handler+0x78>
   23310:	4b24      	ldr	r3, [pc, #144]	; (233a4 <ipc_irq_handler+0xec>)
   23312:	601c      	str	r4, [r3, #0]
   23314:	2000      	movs	r0, #0
   23316:	e7db      	b.n	232d0 <ipc_irq_handler+0x18>
   23318:	4b23      	ldr	r3, [pc, #140]	; (233a8 <ipc_irq_handler+0xf0>)
   2331a:	429c      	cmp	r4, r3
   2331c:	d1f8      	bne.n	23310 <ipc_irq_handler+0x58>
   2331e:	f06f 040c 	mvn.w	r4, #12
   23322:	e7f5      	b.n	23310 <ipc_irq_handler+0x58>
   23324:	f06f 040b 	mvn.w	r4, #11
   23328:	e7f2      	b.n	23310 <ipc_irq_handler+0x58>
   2332a:	f06f 0415 	mvn.w	r4, #21
   2332e:	e7ef      	b.n	23310 <ipc_irq_handler+0x58>
   23330:	f06f 0485 	mvn.w	r4, #133	; 0x85
   23334:	e7ec      	b.n	23310 <ipc_irq_handler+0x58>
   23336:	4631      	mov	r1, r6
   23338:	f3c4 000b 	ubfx	r0, r4, #0, #12
   2333c:	f001 fcd6 	bl	24cec <nrf_modem_fault_handler_internal>
   23340:	e7e8      	b.n	23314 <ipc_irq_handler+0x5c>
   23342:	2202      	movs	r2, #2
   23344:	4b14      	ldr	r3, [pc, #80]	; (23398 <ipc_irq_handler+0xe0>)
   23346:	2000      	movs	r0, #0
   23348:	701a      	strb	r2, [r3, #0]
   2334a:	f001 fcdb 	bl	24d04 <nrf_modem_state_set>
   2334e:	4b13      	ldr	r3, [pc, #76]	; (2339c <ipc_irq_handler+0xe4>)
   23350:	6818      	ldr	r0, [r3, #0]
   23352:	f006 f8d7 	bl	29504 <nrf_modem_os_sem_give>
   23356:	e7dd      	b.n	23314 <ipc_irq_handler+0x5c>
   23358:	f7ff ff9c 	bl	23294 <rpc_message_handler>
   2335c:	2002      	movs	r0, #2
   2335e:	e7b7      	b.n	232d0 <ipc_irq_handler+0x18>
   23360:	4b0d      	ldr	r3, [pc, #52]	; (23398 <ipc_irq_handler+0xe0>)
   23362:	781a      	ldrb	r2, [r3, #0]
   23364:	2a01      	cmp	r2, #1
   23366:	b2d0      	uxtb	r0, r2
   23368:	d10e      	bne.n	23388 <ipc_irq_handler+0xd0>
   2336a:	4a10      	ldr	r2, [pc, #64]	; (233ac <ipc_irq_handler+0xf4>)
   2336c:	6811      	ldr	r1, [r2, #0]
   2336e:	4a10      	ldr	r2, [pc, #64]	; (233b0 <ipc_irq_handler+0xf8>)
   23370:	688c      	ldr	r4, [r1, #8]
   23372:	6054      	str	r4, [r2, #4]
   23374:	6849      	ldr	r1, [r1, #4]
   23376:	6011      	str	r1, [r2, #0]
   23378:	2200      	movs	r2, #0
   2337a:	701a      	strb	r2, [r3, #0]
   2337c:	f001 fcc2 	bl	24d04 <nrf_modem_state_set>
   23380:	4b06      	ldr	r3, [pc, #24]	; (2339c <ipc_irq_handler+0xe4>)
   23382:	6818      	ldr	r0, [r3, #0]
   23384:	f006 f8be 	bl	29504 <nrf_modem_os_sem_give>
   23388:	f7ff ff84 	bl	23294 <rpc_message_handler>
   2338c:	2001      	movs	r0, #1
   2338e:	e79f      	b.n	232d0 <ipc_irq_handler+0x18>
   23390:	bd70      	pop	{r4, r5, r6, pc}
   23392:	bf00      	nop
   23394:	4002a000 	.word	0x4002a000
   23398:	2000e04a 	.word	0x2000e04a
   2339c:	2000d528 	.word	0x2000d528
   233a0:	00010022 	.word	0x00010022
   233a4:	2000d53c 	.word	0x2000d53c
   233a8:	00013032 	.word	0x00013032
   233ac:	2000d524 	.word	0x2000d524
   233b0:	2000d540 	.word	0x2000d540

000233b4 <rpc_transport_ipc_data_msg_send>:
   233b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   233b6:	4b16      	ldr	r3, [pc, #88]	; (23410 <rpc_transport_ipc_data_msg_send+0x5c>)
   233b8:	6842      	ldr	r2, [r0, #4]
   233ba:	681b      	ldr	r3, [r3, #0]
   233bc:	4c15      	ldr	r4, [pc, #84]	; (23414 <rpc_transport_ipc_data_msg_send+0x60>)
   233be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   233c2:	f042 0202 	orr.w	r2, r2, #2
   233c6:	1ac3      	subs	r3, r0, r3
   233c8:	6042      	str	r2, [r0, #4]
   233ca:	6821      	ldr	r1, [r4, #0]
   233cc:	4a12      	ldr	r2, [pc, #72]	; (23418 <rpc_transport_ipc_data_msg_send+0x64>)
   233ce:	f3c3 1389 	ubfx	r3, r3, #6, #10
   233d2:	e8d2 5fdf 	ldaexh	r5, [r2]
   233d6:	1c6e      	adds	r6, r5, #1
   233d8:	e8c2 6fd7 	stlexh	r7, r6, [r2]
   233dc:	2f00      	cmp	r7, #0
   233de:	d1f8      	bne.n	233d2 <rpc_transport_ipc_data_msg_send+0x1e>
   233e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   233e4:	684a      	ldr	r2, [r1, #4]
   233e6:	b292      	uxth	r2, r2
   233e8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   233ec:	604a      	str	r2, [r1, #4]
   233ee:	6822      	ldr	r2, [r4, #0]
   233f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   233f4:	6098      	str	r0, [r3, #8]
   233f6:	685a      	ldr	r2, [r3, #4]
   233f8:	2003      	movs	r0, #3
   233fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   233fe:	f042 0201 	orr.w	r2, r2, #1
   23402:	605a      	str	r2, [r3, #4]
   23404:	f006 f874 	bl	294f0 <nrf_modem_os_busywait>
   23408:	2201      	movs	r2, #1
   2340a:	4b04      	ldr	r3, [pc, #16]	; (2341c <rpc_transport_ipc_data_msg_send+0x68>)
   2340c:	60da      	str	r2, [r3, #12]
   2340e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23410:	2000d530 	.word	0x2000d530
   23414:	2000d538 	.word	0x2000d538
   23418:	2000d962 	.word	0x2000d962
   2341c:	4002a000 	.word	0x4002a000

00023420 <rpc_transport_ipc_ctrl_msg_alloc>:
   23420:	230a      	movs	r3, #10
   23422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23424:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   23428:	4e0c      	ldr	r6, [pc, #48]	; (2345c <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   2342a:	4f0d      	ldr	r7, [pc, #52]	; (23460 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   2342c:	9301      	str	r3, [sp, #4]
   2342e:	6831      	ldr	r1, [r6, #0]
   23430:	6838      	ldr	r0, [r7, #0]
   23432:	f006 fce4 	bl	29dfe <rpc_transport_ipc_msg_alloc>
   23436:	4604      	mov	r4, r0
   23438:	b940      	cbnz	r0, 2344c <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
   2343a:	f006 f861 	bl	29500 <nrf_modem_os_is_in_isr>
   2343e:	b940      	cbnz	r0, 23452 <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   23440:	2001      	movs	r0, #1
   23442:	a901      	add	r1, sp, #4
   23444:	f7fb faa0 	bl	1e988 <nrf_modem_os_timedwait>
   23448:	306e      	adds	r0, #110	; 0x6e
   2344a:	d1f0      	bne.n	2342e <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   2344c:	4620      	mov	r0, r4
   2344e:	b003      	add	sp, #12
   23450:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23452:	9801      	ldr	r0, [sp, #4]
   23454:	4368      	muls	r0, r5
   23456:	f006 f84b 	bl	294f0 <nrf_modem_os_busywait>
   2345a:	e7e8      	b.n	2342e <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   2345c:	2000d52c 	.word	0x2000d52c
   23460:	2000d534 	.word	0x2000d534

00023464 <rpc_transport_ipc_data_msg_alloc>:
   23464:	4b05      	ldr	r3, [pc, #20]	; (2347c <rpc_transport_ipc_data_msg_alloc+0x18>)
   23466:	781b      	ldrb	r3, [r3, #0]
   23468:	b92b      	cbnz	r3, 23476 <rpc_transport_ipc_data_msg_alloc+0x12>
   2346a:	4b05      	ldr	r3, [pc, #20]	; (23480 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   2346c:	6819      	ldr	r1, [r3, #0]
   2346e:	4b05      	ldr	r3, [pc, #20]	; (23484 <rpc_transport_ipc_data_msg_alloc+0x20>)
   23470:	6818      	ldr	r0, [r3, #0]
   23472:	f006 bcc4 	b.w	29dfe <rpc_transport_ipc_msg_alloc>
   23476:	2000      	movs	r0, #0
   23478:	4770      	bx	lr
   2347a:	bf00      	nop
   2347c:	2000e049 	.word	0x2000e049
   23480:	2000d530 	.word	0x2000d530
   23484:	2000d538 	.word	0x2000d538

00023488 <rpc_transport_ipc_init>:
   23488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2348c:	b095      	sub	sp, #84	; 0x54
   2348e:	2238      	movs	r2, #56	; 0x38
   23490:	2100      	movs	r1, #0
   23492:	4606      	mov	r6, r0
   23494:	a803      	add	r0, sp, #12
   23496:	f008 f822 	bl	2b4de <memset>
   2349a:	2302      	movs	r3, #2
   2349c:	9304      	str	r3, [sp, #16]
   2349e:	2308      	movs	r3, #8
   234a0:	9306      	str	r3, [sp, #24]
   234a2:	2320      	movs	r3, #32
   234a4:	9308      	str	r3, [sp, #32]
   234a6:	2304      	movs	r3, #4
   234a8:	930d      	str	r3, [sp, #52]	; 0x34
   234aa:	2310      	movs	r3, #16
   234ac:	2540      	movs	r5, #64	; 0x40
   234ae:	930f      	str	r3, [sp, #60]	; 0x3c
   234b0:	2380      	movs	r3, #128	; 0x80
   234b2:	2201      	movs	r2, #1
   234b4:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
   234b8:	23d5      	movs	r3, #213	; 0xd5
   234ba:	2100      	movs	r1, #0
   234bc:	4855      	ldr	r0, [pc, #340]	; (23614 <rpc_transport_ipc_init+0x18c>)
   234be:	920b      	str	r2, [sp, #44]	; 0x2c
   234c0:	9313      	str	r3, [sp, #76]	; 0x4c
   234c2:	f7fb fb23 	bl	1eb0c <nrf_modem_os_sem_init>
   234c6:	4605      	mov	r5, r0
   234c8:	2800      	cmp	r0, #0
   234ca:	f040 809f 	bne.w	2360c <rpc_transport_ipc_init+0x184>
   234ce:	4602      	mov	r2, r0
   234d0:	4951      	ldr	r1, [pc, #324]	; (23618 <rpc_transport_ipc_init+0x190>)
   234d2:	7930      	ldrb	r0, [r6, #4]
   234d4:	f7ff f8bc 	bl	22650 <nrfx_ipc_init>
   234d8:	a803      	add	r0, sp, #12
   234da:	f7ff f8d1 	bl	22680 <nrfx_ipc_config_load>
   234de:	6834      	ldr	r4, [r6, #0]
   234e0:	6862      	ldr	r2, [r4, #4]
   234e2:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   234e6:	f040 8089 	bne.w	235fc <rpc_transport_ipc_init+0x174>
   234ea:	6961      	ldr	r1, [r4, #20]
   234ec:	68e3      	ldr	r3, [r4, #12]
   234ee:	440b      	add	r3, r1
   234f0:	69e1      	ldr	r1, [r4, #28]
   234f2:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   234f6:	440b      	add	r3, r1
   234f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   234fc:	d87e      	bhi.n	235fc <rpc_transport_ipc_init+0x174>
   234fe:	6820      	ldr	r0, [r4, #0]
   23500:	4629      	mov	r1, r5
   23502:	f007 ffec 	bl	2b4de <memset>
   23506:	6833      	ldr	r3, [r6, #0]
   23508:	681c      	ldr	r4, [r3, #0]
   2350a:	f8d3 901c 	ldr.w	r9, [r3, #28]
   2350e:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   23512:	9201      	str	r2, [sp, #4]
   23514:	f104 0760 	add.w	r7, r4, #96	; 0x60
   23518:	4a40      	ldr	r2, [pc, #256]	; (2361c <rpc_transport_ipc_init+0x194>)
   2351a:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
   2351e:	f104 0b20 	add.w	fp, r4, #32
   23522:	f1b9 0f00 	cmp.w	r9, #0
   23526:	d15c      	bne.n	235e2 <rpc_transport_ipc_init+0x15a>
   23528:	f8c2 b000 	str.w	fp, [r2]
   2352c:	2500      	movs	r5, #0
   2352e:	f04f 0a01 	mov.w	sl, #1
   23532:	7025      	strb	r5, [r4, #0]
   23534:	7065      	strb	r5, [r4, #1]
   23536:	f884 a002 	strb.w	sl, [r4, #2]
   2353a:	70e5      	strb	r5, [r4, #3]
   2353c:	6833      	ldr	r3, [r6, #0]
   2353e:	4640      	mov	r0, r8
   23540:	691b      	ldr	r3, [r3, #16]
   23542:	6063      	str	r3, [r4, #4]
   23544:	6833      	ldr	r3, [r6, #0]
   23546:	695b      	ldr	r3, [r3, #20]
   23548:	f8c4 b014 	str.w	fp, [r4, #20]
   2354c:	60a3      	str	r3, [r4, #8]
   2354e:	4b34      	ldr	r3, [pc, #208]	; (23620 <rpc_transport_ipc_init+0x198>)
   23550:	f8c4 9018 	str.w	r9, [r4, #24]
   23554:	f8c3 8000 	str.w	r8, [r3]
   23558:	4b32      	ldr	r3, [pc, #200]	; (23624 <rpc_transport_ipc_init+0x19c>)
   2355a:	60e7      	str	r7, [r4, #12]
   2355c:	601f      	str	r7, [r3, #0]
   2355e:	2308      	movs	r3, #8
   23560:	f8c4 8010 	str.w	r8, [r4, #16]
   23564:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
   23568:	f888 5001 	strb.w	r5, [r8, #1]
   2356c:	f888 5002 	strb.w	r5, [r8, #2]
   23570:	f888 5003 	strb.w	r5, [r8, #3]
   23574:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   23578:	707d      	strb	r5, [r7, #1]
   2357a:	70bd      	strb	r5, [r7, #2]
   2357c:	70fd      	strb	r5, [r7, #3]
   2357e:	f006 fc26 	bl	29dce <rpc_list_preambles_init>
   23582:	4638      	mov	r0, r7
   23584:	f006 fc23 	bl	29dce <rpc_list_preambles_init>
   23588:	4b27      	ldr	r3, [pc, #156]	; (23628 <rpc_transport_ipc_init+0x1a0>)
   2358a:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   2358e:	601a      	str	r2, [r3, #0]
   23590:	4b26      	ldr	r3, [pc, #152]	; (2362c <rpc_transport_ipc_init+0x1a4>)
   23592:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
   23596:	601a      	str	r2, [r3, #0]
   23598:	6831      	ldr	r1, [r6, #0]
   2359a:	4b25      	ldr	r3, [pc, #148]	; (23630 <rpc_transport_ipc_init+0x1a8>)
   2359c:	6019      	str	r1, [r3, #0]
   2359e:	4b25      	ldr	r3, [pc, #148]	; (23634 <rpc_transport_ipc_init+0x1ac>)
   235a0:	4925      	ldr	r1, [pc, #148]	; (23638 <rpc_transport_ipc_init+0x1b0>)
   235a2:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
   235a6:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
   235aa:	4b24      	ldr	r3, [pc, #144]	; (2363c <rpc_transport_ipc_init+0x1b4>)
   235ac:	4c24      	ldr	r4, [pc, #144]	; (23640 <rpc_transport_ipc_init+0x1b8>)
   235ae:	801d      	strh	r5, [r3, #0]
   235b0:	4b24      	ldr	r3, [pc, #144]	; (23644 <rpc_transport_ipc_init+0x1bc>)
   235b2:	6025      	str	r5, [r4, #0]
   235b4:	801d      	strh	r5, [r3, #0]
   235b6:	4b24      	ldr	r3, [pc, #144]	; (23648 <rpc_transport_ipc_init+0x1c0>)
   235b8:	f883 a000 	strb.w	sl, [r3]
   235bc:	4b23      	ldr	r3, [pc, #140]	; (2364c <rpc_transport_ipc_init+0x1c4>)
   235be:	9502      	str	r5, [sp, #8]
   235c0:	611d      	str	r5, [r3, #16]
   235c2:	691b      	ldr	r3, [r3, #16]
   235c4:	9302      	str	r3, [sp, #8]
   235c6:	9b02      	ldr	r3, [sp, #8]
   235c8:	4b12      	ldr	r3, [pc, #72]	; (23614 <rpc_transport_ipc_init+0x18c>)
   235ca:	6818      	ldr	r0, [r3, #0]
   235cc:	f005 ff9c 	bl	29508 <nrf_modem_os_sem_take>
   235d0:	b9c8      	cbnz	r0, 23606 <rpc_transport_ipc_init+0x17e>
   235d2:	6824      	ldr	r4, [r4, #0]
   235d4:	b9a4      	cbnz	r4, 23600 <rpc_transport_ipc_init+0x178>
   235d6:	4b1e      	ldr	r3, [pc, #120]	; (23650 <rpc_transport_ipc_init+0x1c8>)
   235d8:	701c      	strb	r4, [r3, #0]
   235da:	4620      	mov	r0, r4
   235dc:	b015      	add	sp, #84	; 0x54
   235de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   235e2:	699b      	ldr	r3, [r3, #24]
   235e4:	f104 0940 	add.w	r9, r4, #64	; 0x40
   235e8:	6463      	str	r3, [r4, #68]	; 0x44
   235ea:	6833      	ldr	r3, [r6, #0]
   235ec:	4648      	mov	r0, r9
   235ee:	69db      	ldr	r3, [r3, #28]
   235f0:	f8c2 b000 	str.w	fp, [r2]
   235f4:	6423      	str	r3, [r4, #64]	; 0x40
   235f6:	f001 fb93 	bl	24d20 <ipc_trace_init>
   235fa:	e797      	b.n	2352c <rpc_transport_ipc_init+0xa4>
   235fc:	f06f 0415 	mvn.w	r4, #21
   23600:	f7ff f85e 	bl	226c0 <nrfx_ipc_uninit>
   23604:	e7e9      	b.n	235da <rpc_transport_ipc_init+0x152>
   23606:	f06f 0473 	mvn.w	r4, #115	; 0x73
   2360a:	e7f9      	b.n	23600 <rpc_transport_ipc_init+0x178>
   2360c:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   23610:	e7e3      	b.n	235da <rpc_transport_ipc_init+0x152>
   23612:	bf00      	nop
   23614:	2000d528 	.word	0x2000d528
   23618:	000232b9 	.word	0x000232b9
   2361c:	2000d524 	.word	0x2000d524
   23620:	2000d538 	.word	0x2000d538
   23624:	2000d534 	.word	0x2000d534
   23628:	2000d530 	.word	0x2000d530
   2362c:	2000d52c 	.word	0x2000d52c
   23630:	2000d520 	.word	0x2000d520
   23634:	4002a000 	.word	0x4002a000
   23638:	000249f0 	.word	0x000249f0
   2363c:	2000d962 	.word	0x2000d962
   23640:	2000d53c 	.word	0x2000d53c
   23644:	2000d960 	.word	0x2000d960
   23648:	2000e04a 	.word	0x2000e04a
   2364c:	40005600 	.word	0x40005600
   23650:	2000e049 	.word	0x2000e049

00023654 <rpc_transport_ipc_ctrl_msg_send>:
   23654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23656:	4b16      	ldr	r3, [pc, #88]	; (236b0 <rpc_transport_ipc_ctrl_msg_send+0x5c>)
   23658:	6842      	ldr	r2, [r0, #4]
   2365a:	681b      	ldr	r3, [r3, #0]
   2365c:	4c15      	ldr	r4, [pc, #84]	; (236b4 <rpc_transport_ipc_ctrl_msg_send+0x60>)
   2365e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   23662:	f042 0201 	orr.w	r2, r2, #1
   23666:	1ac3      	subs	r3, r0, r3
   23668:	6042      	str	r2, [r0, #4]
   2366a:	6821      	ldr	r1, [r4, #0]
   2366c:	4a12      	ldr	r2, [pc, #72]	; (236b8 <rpc_transport_ipc_ctrl_msg_send+0x64>)
   2366e:	f3c3 1389 	ubfx	r3, r3, #6, #10
   23672:	e8d2 5fdf 	ldaexh	r5, [r2]
   23676:	1c6e      	adds	r6, r5, #1
   23678:	e8c2 6fd7 	stlexh	r7, r6, [r2]
   2367c:	2f00      	cmp	r7, #0
   2367e:	d1f8      	bne.n	23672 <rpc_transport_ipc_ctrl_msg_send+0x1e>
   23680:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   23684:	684a      	ldr	r2, [r1, #4]
   23686:	b292      	uxth	r2, r2
   23688:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   2368c:	604a      	str	r2, [r1, #4]
   2368e:	6822      	ldr	r2, [r4, #0]
   23690:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   23694:	6098      	str	r0, [r3, #8]
   23696:	685a      	ldr	r2, [r3, #4]
   23698:	2003      	movs	r0, #3
   2369a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2369e:	f042 0201 	orr.w	r2, r2, #1
   236a2:	605a      	str	r2, [r3, #4]
   236a4:	f005 ff24 	bl	294f0 <nrf_modem_os_busywait>
   236a8:	2201      	movs	r2, #1
   236aa:	4b04      	ldr	r3, [pc, #16]	; (236bc <rpc_transport_ipc_ctrl_msg_send+0x68>)
   236ac:	605a      	str	r2, [r3, #4]
   236ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   236b0:	2000d52c 	.word	0x2000d52c
   236b4:	2000d534 	.word	0x2000d534
   236b8:	2000d962 	.word	0x2000d962
   236bc:	4002a000 	.word	0x4002a000

000236c0 <rpc_transport_ipc_request_shutdown>:
   236c0:	b510      	push	{r4, lr}
   236c2:	f7ff fead 	bl	23420 <rpc_transport_ipc_ctrl_msg_alloc>
   236c6:	2401      	movs	r4, #1
   236c8:	2200      	movs	r2, #0
   236ca:	2103      	movs	r1, #3
   236cc:	7004      	strb	r4, [r0, #0]
   236ce:	7081      	strb	r1, [r0, #2]
   236d0:	7042      	strb	r2, [r0, #1]
   236d2:	70c2      	strb	r2, [r0, #3]
   236d4:	f7ff ffbe 	bl	23654 <rpc_transport_ipc_ctrl_msg_send>
   236d8:	4b05      	ldr	r3, [pc, #20]	; (236f0 <rpc_transport_ipc_request_shutdown+0x30>)
   236da:	701c      	strb	r4, [r3, #0]
   236dc:	f006 fb8a 	bl	29df4 <rpc_transport_ipc_data_rx_suspend>
   236e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   236e4:	4b03      	ldr	r3, [pc, #12]	; (236f4 <rpc_transport_ipc_request_shutdown+0x34>)
   236e6:	f247 5130 	movw	r1, #30000	; 0x7530
   236ea:	6818      	ldr	r0, [r3, #0]
   236ec:	f005 bf0c 	b.w	29508 <nrf_modem_os_sem_take>
   236f0:	2000e049 	.word	0x2000e049
   236f4:	2000d528 	.word	0x2000d528

000236f8 <rpc_transport_ipc_msg_data_rx_free>:
   236f8:	b510      	push	{r4, lr}
   236fa:	4b0a      	ldr	r3, [pc, #40]	; (23724 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
   236fc:	4604      	mov	r4, r0
   236fe:	781b      	ldrb	r3, [r3, #0]
   23700:	2b03      	cmp	r3, #3
   23702:	d00e      	beq.n	23722 <rpc_transport_ipc_msg_data_rx_free+0x2a>
   23704:	f7ff fe8c 	bl	23420 <rpc_transport_ipc_ctrl_msg_alloc>
   23708:	b158      	cbz	r0, 23722 <rpc_transport_ipc_msg_data_rx_free+0x2a>
   2370a:	2101      	movs	r1, #1
   2370c:	2200      	movs	r2, #0
   2370e:	7001      	strb	r1, [r0, #0]
   23710:	2102      	movs	r1, #2
   23712:	6084      	str	r4, [r0, #8]
   23714:	7042      	strb	r2, [r0, #1]
   23716:	7081      	strb	r1, [r0, #2]
   23718:	70c2      	strb	r2, [r0, #3]
   2371a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2371e:	f7ff bf99 	b.w	23654 <rpc_transport_ipc_ctrl_msg_send>
   23722:	bd10      	pop	{r4, pc}
   23724:	2000e04a 	.word	0x2000e04a

00023728 <sock_init>:
   23728:	f44f 7250 	mov.w	r2, #832	; 0x340
   2372c:	2100      	movs	r1, #0
   2372e:	b508      	push	{r3, lr}
   23730:	4808      	ldr	r0, [pc, #32]	; (23754 <sock_init+0x2c>)
   23732:	f007 fed4 	bl	2b4de <memset>
   23736:	2300      	movs	r3, #0
   23738:	4619      	mov	r1, r3
   2373a:	4a07      	ldr	r2, [pc, #28]	; (23758 <sock_init+0x30>)
   2373c:	4807      	ldr	r0, [pc, #28]	; (2375c <sock_init+0x34>)
   2373e:	7013      	strb	r3, [r2, #0]
   23740:	4a04      	ldr	r2, [pc, #16]	; (23754 <sock_init+0x2c>)
   23742:	3301      	adds	r3, #1
   23744:	2b08      	cmp	r3, #8
   23746:	e9c2 0100 	strd	r0, r1, [r2]
   2374a:	6091      	str	r1, [r2, #8]
   2374c:	f102 0268 	add.w	r2, r2, #104	; 0x68
   23750:	d1f7      	bne.n	23742 <sock_init+0x1a>
   23752:	bd08      	pop	{r3, pc}
   23754:	2000d548 	.word	0x2000d548
   23758:	2000e04b 	.word	0x2000e04b
   2375c:	1badf11e 	.word	0x1badf11e

00023760 <sock_open>:
   23760:	b570      	push	{r4, r5, r6, lr}
   23762:	2300      	movs	r3, #0
   23764:	2468      	movs	r4, #104	; 0x68
   23766:	4a0e      	ldr	r2, [pc, #56]	; (237a0 <sock_open+0x40>)
   23768:	4d0e      	ldr	r5, [pc, #56]	; (237a4 <sock_open+0x44>)
   2376a:	fb04 f103 	mul.w	r1, r4, r3
   2376e:	5856      	ldr	r6, [r2, r1]
   23770:	1888      	adds	r0, r1, r2
   23772:	42ae      	cmp	r6, r5
   23774:	d10e      	bne.n	23794 <sock_open+0x34>
   23776:	f04f 33ff 	mov.w	r3, #4294967295
   2377a:	5053      	str	r3, [r2, r1]
   2377c:	4a0a      	ldr	r2, [pc, #40]	; (237a8 <sock_open+0x48>)
   2377e:	7f03      	ldrb	r3, [r0, #28]
   23780:	7812      	ldrb	r2, [r2, #0]
   23782:	f362 1386 	bfi	r3, r2, #6, #1
   23786:	7703      	strb	r3, [r0, #28]
   23788:	2302      	movs	r3, #2
   2378a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   2378e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   23792:	bd70      	pop	{r4, r5, r6, pc}
   23794:	3301      	adds	r3, #1
   23796:	2b08      	cmp	r3, #8
   23798:	d1e7      	bne.n	2376a <sock_open+0xa>
   2379a:	2000      	movs	r0, #0
   2379c:	e7f9      	b.n	23792 <sock_open+0x32>
   2379e:	bf00      	nop
   237a0:	2000d548 	.word	0x2000d548
   237a4:	1badf11e 	.word	0x1badf11e
   237a8:	2000e04b 	.word	0x2000e04b

000237ac <sock_find>:
   237ac:	b530      	push	{r4, r5, lr}
   237ae:	4602      	mov	r2, r0
   237b0:	2300      	movs	r3, #0
   237b2:	2568      	movs	r5, #104	; 0x68
   237b4:	4905      	ldr	r1, [pc, #20]	; (237cc <sock_find+0x20>)
   237b6:	fb05 f403 	mul.w	r4, r5, r3
   237ba:	1860      	adds	r0, r4, r1
   237bc:	590c      	ldr	r4, [r1, r4]
   237be:	4294      	cmp	r4, r2
   237c0:	d003      	beq.n	237ca <sock_find+0x1e>
   237c2:	3301      	adds	r3, #1
   237c4:	2b08      	cmp	r3, #8
   237c6:	d1f6      	bne.n	237b6 <sock_find+0xa>
   237c8:	2000      	movs	r0, #0
   237ca:	bd30      	pop	{r4, r5, pc}
   237cc:	2000d548 	.word	0x2000d548

000237d0 <_sock_close>:
   237d0:	b538      	push	{r3, r4, r5, lr}
   237d2:	f7ff ffeb 	bl	237ac <sock_find>
   237d6:	4604      	mov	r4, r0
   237d8:	1d05      	adds	r5, r0, #4
   237da:	4628      	mov	r0, r5
   237dc:	f006 fce8 	bl	2a1b0 <pkt_flush>
   237e0:	6c20      	ldr	r0, [r4, #64]	; 0x40
   237e2:	b108      	cbz	r0, 237e8 <_sock_close+0x18>
   237e4:	f7fb f9d2 	bl	1eb8c <nrf_modem_os_free>
   237e8:	2264      	movs	r2, #100	; 0x64
   237ea:	2100      	movs	r1, #0
   237ec:	4628      	mov	r0, r5
   237ee:	f007 fe76 	bl	2b4de <memset>
   237f2:	4b01      	ldr	r3, [pc, #4]	; (237f8 <_sock_close+0x28>)
   237f4:	6023      	str	r3, [r4, #0]
   237f6:	bd38      	pop	{r3, r4, r5, pc}
   237f8:	1badf11e 	.word	0x1badf11e

000237fc <sock_flow_control_set>:
   237fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23800:	1e02      	subs	r2, r0, #0
   23802:	4c10      	ldr	r4, [pc, #64]	; (23844 <sock_flow_control_set+0x48>)
   23804:	bf18      	it	ne
   23806:	2201      	movne	r2, #1
   23808:	4606      	mov	r6, r0
   2380a:	2500      	movs	r5, #0
   2380c:	46a0      	mov	r8, r4
   2380e:	f04f 0968 	mov.w	r9, #104	; 0x68
   23812:	4b0d      	ldr	r3, [pc, #52]	; (23848 <sock_flow_control_set+0x4c>)
   23814:	4f0d      	ldr	r7, [pc, #52]	; (2384c <sock_flow_control_set+0x50>)
   23816:	701a      	strb	r2, [r3, #0]
   23818:	6823      	ldr	r3, [r4, #0]
   2381a:	42bb      	cmp	r3, r7
   2381c:	d00a      	beq.n	23834 <sock_flow_control_set+0x38>
   2381e:	fb09 8305 	mla	r3, r9, r5, r8
   23822:	7f1a      	ldrb	r2, [r3, #28]
   23824:	f366 1286 	bfi	r2, r6, #6, #1
   23828:	771a      	strb	r2, [r3, #28]
   2382a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2382c:	b113      	cbz	r3, 23834 <sock_flow_control_set+0x38>
   2382e:	4620      	mov	r0, r4
   23830:	f006 fb75 	bl	29f1e <sock_pollcb>
   23834:	3501      	adds	r5, #1
   23836:	2d08      	cmp	r5, #8
   23838:	f104 0468 	add.w	r4, r4, #104	; 0x68
   2383c:	d1ec      	bne.n	23818 <sock_flow_control_set+0x1c>
   2383e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23842:	bf00      	nop
   23844:	2000d548 	.word	0x2000d548
   23848:	2000e04b 	.word	0x2000e04b
   2384c:	1badf11e 	.word	0x1badf11e

00023850 <sock_proto_is_valid>:
   23850:	2811      	cmp	r0, #17
   23852:	dc06      	bgt.n	23862 <sock_proto_is_valid+0x12>
   23854:	2800      	cmp	r0, #0
   23856:	db0d      	blt.n	23874 <sock_proto_is_valid+0x24>
   23858:	4b08      	ldr	r3, [pc, #32]	; (2387c <sock_proto_is_valid+0x2c>)
   2385a:	40c3      	lsrs	r3, r0
   2385c:	f003 0001 	and.w	r0, r3, #1
   23860:	4770      	bx	lr
   23862:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   23866:	d007      	beq.n	23878 <sock_proto_is_valid+0x28>
   23868:	f240 1311 	movw	r3, #273	; 0x111
   2386c:	1ac3      	subs	r3, r0, r3
   2386e:	4258      	negs	r0, r3
   23870:	4158      	adcs	r0, r3
   23872:	4770      	bx	lr
   23874:	2000      	movs	r0, #0
   23876:	4770      	bx	lr
   23878:	2001      	movs	r0, #1
   2387a:	4770      	bx	lr
   2387c:	00020041 	.word	0x00020041

00023880 <on_getaddrinfo_res>:
   23880:	2301      	movs	r3, #1
   23882:	4a03      	ldr	r2, [pc, #12]	; (23890 <on_getaddrinfo_res+0x10>)
   23884:	7013      	strb	r3, [r2, #0]
   23886:	4a03      	ldr	r2, [pc, #12]	; (23894 <on_getaddrinfo_res+0x14>)
   23888:	6010      	str	r0, [r2, #0]
   2388a:	4618      	mov	r0, r3
   2388c:	4770      	bx	lr
   2388e:	bf00      	nop
   23890:	2000e04c 	.word	0x2000e04c
   23894:	2000d888 	.word	0x2000d888

00023898 <addrinfo_init>:
   23898:	2201      	movs	r2, #1
   2389a:	b508      	push	{r3, lr}
   2389c:	4611      	mov	r1, r2
   2389e:	4804      	ldr	r0, [pc, #16]	; (238b0 <addrinfo_init+0x18>)
   238a0:	f7fb f934 	bl	1eb0c <nrf_modem_os_sem_init>
   238a4:	2800      	cmp	r0, #0
   238a6:	bf18      	it	ne
   238a8:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   238ac:	bd08      	pop	{r3, pc}
   238ae:	bf00      	nop
   238b0:	2000d88c 	.word	0x2000d88c

000238b4 <nrf_getaddrinfo>:
   238b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238b8:	b085      	sub	sp, #20
   238ba:	4680      	mov	r8, r0
   238bc:	460f      	mov	r7, r1
   238be:	4616      	mov	r6, r2
   238c0:	461d      	mov	r5, r3
   238c2:	f001 fa25 	bl	24d10 <nrf_modem_state_is_initialized>
   238c6:	b928      	cbnz	r0, 238d4 <nrf_getaddrinfo+0x20>
   238c8:	2001      	movs	r0, #1
   238ca:	f005 fe13 	bl	294f4 <nrf_modem_os_errno_set>
   238ce:	f06f 040a 	mvn.w	r4, #10
   238d2:	e01c      	b.n	2390e <nrf_getaddrinfo+0x5a>
   238d4:	ea58 0307 	orrs.w	r3, r8, r7
   238d8:	f000 8164 	beq.w	23ba4 <nrf_getaddrinfo+0x2f0>
   238dc:	b31e      	cbz	r6, 23926 <nrf_getaddrinfo+0x72>
   238de:	6833      	ldr	r3, [r6, #0]
   238e0:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   238e4:	f023 0302 	bic.w	r3, r3, #2
   238e8:	2b00      	cmp	r3, #0
   238ea:	f040 815e 	bne.w	23baa <nrf_getaddrinfo+0x2f6>
   238ee:	6870      	ldr	r0, [r6, #4]
   238f0:	b938      	cbnz	r0, 23902 <nrf_getaddrinfo+0x4e>
   238f2:	68b0      	ldr	r0, [r6, #8]
   238f4:	b178      	cbz	r0, 23916 <nrf_getaddrinfo+0x62>
   238f6:	f006 fbf8 	bl	2a0ea <sock_type_is_valid>
   238fa:	b960      	cbnz	r0, 23916 <nrf_getaddrinfo+0x62>
   238fc:	f06f 0406 	mvn.w	r4, #6
   23900:	e005      	b.n	2390e <nrf_getaddrinfo+0x5a>
   23902:	f006 fbec 	bl	2a0de <sock_family_is_valid>
   23906:	2800      	cmp	r0, #0
   23908:	d1f3      	bne.n	238f2 <nrf_getaddrinfo+0x3e>
   2390a:	f06f 0405 	mvn.w	r4, #5
   2390e:	4620      	mov	r0, r4
   23910:	b005      	add	sp, #20
   23912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23916:	68f0      	ldr	r0, [r6, #12]
   23918:	b128      	cbz	r0, 23926 <nrf_getaddrinfo+0x72>
   2391a:	68b1      	ldr	r1, [r6, #8]
   2391c:	f006 fbeb 	bl	2a0f6 <sock_proto_supports_type>
   23920:	b908      	cbnz	r0, 23926 <nrf_getaddrinfo+0x72>
   23922:	206b      	movs	r0, #107	; 0x6b
   23924:	e7d1      	b.n	238ca <nrf_getaddrinfo+0x16>
   23926:	4ba4      	ldr	r3, [pc, #656]	; (23bb8 <nrf_getaddrinfo+0x304>)
   23928:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   2392c:	6818      	ldr	r0, [r3, #0]
   2392e:	f005 fdeb 	bl	29508 <nrf_modem_os_sem_take>
   23932:	4604      	mov	r4, r0
   23934:	2800      	cmp	r0, #0
   23936:	f040 813b 	bne.w	23bb0 <nrf_getaddrinfo+0x2fc>
   2393a:	2f00      	cmp	r7, #0
   2393c:	d057      	beq.n	239ee <nrf_getaddrinfo+0x13a>
   2393e:	b326      	cbz	r6, 2398a <nrf_getaddrinfo+0xd6>
   23940:	6833      	ldr	r3, [r6, #0]
   23942:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   23946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2394a:	d11e      	bne.n	2398a <nrf_getaddrinfo+0xd6>
   2394c:	6833      	ldr	r3, [r6, #0]
   2394e:	04db      	lsls	r3, r3, #19
   23950:	d551      	bpl.n	239f6 <nrf_getaddrinfo+0x142>
   23952:	213a      	movs	r1, #58	; 0x3a
   23954:	4638      	mov	r0, r7
   23956:	f007 fdcc 	bl	2b4f2 <strchr>
   2395a:	4682      	mov	sl, r0
   2395c:	b120      	cbz	r0, 23968 <nrf_getaddrinfo+0xb4>
   2395e:	4897      	ldr	r0, [pc, #604]	; (23bbc <nrf_getaddrinfo+0x308>)
   23960:	f7f5 fb44 	bl	18fec <strlen>
   23964:	eb0a 0700 	add.w	r7, sl, r0
   23968:	4638      	mov	r0, r7
   2396a:	4995      	ldr	r1, [pc, #596]	; (23bc0 <nrf_getaddrinfo+0x30c>)
   2396c:	f007 fe07 	bl	2b57e <strstr>
   23970:	4682      	mov	sl, r0
   23972:	2800      	cmp	r0, #0
   23974:	d037      	beq.n	239e6 <nrf_getaddrinfo+0x132>
   23976:	4892      	ldr	r0, [pc, #584]	; (23bc0 <nrf_getaddrinfo+0x30c>)
   23978:	f7f5 fb38 	bl	18fec <strlen>
   2397c:	220a      	movs	r2, #10
   2397e:	2100      	movs	r1, #0
   23980:	4450      	add	r0, sl
   23982:	f002 ff11 	bl	267a8 <strtol>
   23986:	4682      	mov	sl, r0
   23988:	e037      	b.n	239fa <nrf_getaddrinfo+0x146>
   2398a:	220a      	movs	r2, #10
   2398c:	2100      	movs	r1, #0
   2398e:	4638      	mov	r0, r7
   23990:	f003 f824 	bl	269dc <strtoul>
   23994:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   23998:	1e42      	subs	r2, r0, #1
   2399a:	429a      	cmp	r2, r3
   2399c:	f200 80ff 	bhi.w	23b9e <nrf_getaddrinfo+0x2ea>
   239a0:	4a88      	ldr	r2, [pc, #544]	; (23bc4 <nrf_getaddrinfo+0x310>)
   239a2:	0203      	lsls	r3, r0, #8
   239a4:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   239a8:	8013      	strh	r3, [r2, #0]
   239aa:	2e00      	cmp	r6, #0
   239ac:	d1ce      	bne.n	2394c <nrf_getaddrinfo+0x98>
   239ae:	2300      	movs	r3, #0
   239b0:	2101      	movs	r1, #1
   239b2:	4a85      	ldr	r2, [pc, #532]	; (23bc8 <nrf_getaddrinfo+0x314>)
   239b4:	f04f 3aff 	mov.w	sl, #4294967295
   239b8:	6013      	str	r3, [r2, #0]
   239ba:	4a84      	ldr	r2, [pc, #528]	; (23bcc <nrf_getaddrinfo+0x318>)
   239bc:	6011      	str	r1, [r2, #0]
   239be:	2106      	movs	r1, #6
   239c0:	4a83      	ldr	r2, [pc, #524]	; (23bd0 <nrf_getaddrinfo+0x31c>)
   239c2:	6011      	str	r1, [r2, #0]
   239c4:	4f83      	ldr	r7, [pc, #524]	; (23bd4 <nrf_getaddrinfo+0x320>)
   239c6:	4640      	mov	r0, r8
   239c8:	603b      	str	r3, [r7, #0]
   239ca:	f1b8 0f00 	cmp.w	r8, #0
   239ce:	d173      	bne.n	23ab8 <nrf_getaddrinfo+0x204>
   239d0:	f006 fa38 	bl	29e44 <rpc_client_msg_alloc>
   239d4:	4606      	mov	r6, r0
   239d6:	bb20      	cbnz	r0, 23a22 <nrf_getaddrinfo+0x16e>
   239d8:	f06f 0409 	mvn.w	r4, #9
   239dc:	4b76      	ldr	r3, [pc, #472]	; (23bb8 <nrf_getaddrinfo+0x304>)
   239de:	6818      	ldr	r0, [r3, #0]
   239e0:	f005 fd90 	bl	29504 <nrf_modem_os_sem_give>
   239e4:	e793      	b.n	2390e <nrf_getaddrinfo+0x5a>
   239e6:	4601      	mov	r1, r0
   239e8:	220a      	movs	r2, #10
   239ea:	4638      	mov	r0, r7
   239ec:	e7c9      	b.n	23982 <nrf_getaddrinfo+0xce>
   239ee:	4b75      	ldr	r3, [pc, #468]	; (23bc4 <nrf_getaddrinfo+0x310>)
   239f0:	8018      	strh	r0, [r3, #0]
   239f2:	2e00      	cmp	r6, #0
   239f4:	d0db      	beq.n	239ae <nrf_getaddrinfo+0xfa>
   239f6:	f04f 3aff 	mov.w	sl, #4294967295
   239fa:	6870      	ldr	r0, [r6, #4]
   239fc:	b108      	cbz	r0, 23a02 <nrf_getaddrinfo+0x14e>
   239fe:	f000 fe15 	bl	2462c <nrf_af_to_rpc_af>
   23a02:	4b71      	ldr	r3, [pc, #452]	; (23bc8 <nrf_getaddrinfo+0x314>)
   23a04:	4a71      	ldr	r2, [pc, #452]	; (23bcc <nrf_getaddrinfo+0x318>)
   23a06:	6018      	str	r0, [r3, #0]
   23a08:	68b3      	ldr	r3, [r6, #8]
   23a0a:	2b00      	cmp	r3, #0
   23a0c:	bf08      	it	eq
   23a0e:	2301      	moveq	r3, #1
   23a10:	6013      	str	r3, [r2, #0]
   23a12:	68f3      	ldr	r3, [r6, #12]
   23a14:	4a6e      	ldr	r2, [pc, #440]	; (23bd0 <nrf_getaddrinfo+0x31c>)
   23a16:	2b00      	cmp	r3, #0
   23a18:	bf08      	it	eq
   23a1a:	2306      	moveq	r3, #6
   23a1c:	6013      	str	r3, [r2, #0]
   23a1e:	6833      	ldr	r3, [r6, #0]
   23a20:	e7d0      	b.n	239c4 <nrf_getaddrinfo+0x110>
   23a22:	f8c0 a010 	str.w	sl, [r0, #16]
   23a26:	4b68      	ldr	r3, [pc, #416]	; (23bc8 <nrf_getaddrinfo+0x314>)
   23a28:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 23bcc <nrf_getaddrinfo+0x318>
   23a2c:	681b      	ldr	r3, [r3, #0]
   23a2e:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 23bd0 <nrf_getaddrinfo+0x31c>
   23a32:	61b3      	str	r3, [r6, #24]
   23a34:	f8db 3000 	ldr.w	r3, [fp]
   23a38:	4632      	mov	r2, r6
   23a3a:	61f3      	str	r3, [r6, #28]
   23a3c:	f8da 3000 	ldr.w	r3, [sl]
   23a40:	f247 010d 	movw	r1, #28685	; 0x700d
   23a44:	6233      	str	r3, [r6, #32]
   23a46:	683b      	ldr	r3, [r7, #0]
   23a48:	2004      	movs	r0, #4
   23a4a:	6173      	str	r3, [r6, #20]
   23a4c:	f006 fa16 	bl	29e7c <rpc_client_msg_send>
   23a50:	2300      	movs	r3, #0
   23a52:	4e61      	ldr	r6, [pc, #388]	; (23bd8 <nrf_getaddrinfo+0x324>)
   23a54:	7033      	strb	r3, [r6, #0]
   23a56:	f04f 33ff 	mov.w	r3, #4294967295
   23a5a:	9303      	str	r3, [sp, #12]
   23a5c:	7833      	ldrb	r3, [r6, #0]
   23a5e:	2b01      	cmp	r3, #1
   23a60:	d13e      	bne.n	23ae0 <nrf_getaddrinfo+0x22c>
   23a62:	f8df 8178 	ldr.w	r8, [pc, #376]	; 23bdc <nrf_getaddrinfo+0x328>
   23a66:	f8d8 3000 	ldr.w	r3, [r8]
   23a6a:	6958      	ldr	r0, [r3, #20]
   23a6c:	2800      	cmp	r0, #0
   23a6e:	f040 8092 	bne.w	23b96 <nrf_getaddrinfo+0x2e2>
   23a72:	2020      	movs	r0, #32
   23a74:	f8d3 9000 	ldr.w	r9, [r3]
   23a78:	f7fb f880 	bl	1eb7c <nrf_modem_os_alloc>
   23a7c:	6028      	str	r0, [r5, #0]
   23a7e:	b170      	cbz	r0, 23a9e <nrf_getaddrinfo+0x1ea>
   23a80:	f109 0318 	add.w	r3, r9, #24
   23a84:	4a4f      	ldr	r2, [pc, #316]	; (23bc4 <nrf_getaddrinfo+0x310>)
   23a86:	9301      	str	r3, [sp, #4]
   23a88:	4618      	mov	r0, r3
   23a8a:	8812      	ldrh	r2, [r2, #0]
   23a8c:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   23a90:	f006 fa0c 	bl	29eac <sockaddr_init>
   23a94:	4606      	mov	r6, r0
   23a96:	bb78      	cbnz	r0, 23af8 <nrf_getaddrinfo+0x244>
   23a98:	6828      	ldr	r0, [r5, #0]
   23a9a:	f7fb f877 	bl	1eb8c <nrf_modem_os_free>
   23a9e:	f06f 0409 	mvn.w	r4, #9
   23aa2:	f8d8 3000 	ldr.w	r3, [r8]
   23aa6:	6818      	ldr	r0, [r3, #0]
   23aa8:	b108      	cbz	r0, 23aae <nrf_getaddrinfo+0x1fa>
   23aaa:	f006 f9f1 	bl	29e90 <rpc_client_msg_data_rx_free>
   23aae:	f8d8 0000 	ldr.w	r0, [r8]
   23ab2:	f006 f9ea 	bl	29e8a <rpc_client_msg_rx_free>
   23ab6:	e791      	b.n	239dc <nrf_getaddrinfo+0x128>
   23ab8:	f7f5 fa98 	bl	18fec <strlen>
   23abc:	f006 f9c2 	bl	29e44 <rpc_client_msg_alloc>
   23ac0:	4606      	mov	r6, r0
   23ac2:	2800      	cmp	r0, #0
   23ac4:	d088      	beq.n	239d8 <nrf_getaddrinfo+0x124>
   23ac6:	f8c0 a010 	str.w	sl, [r0, #16]
   23aca:	f8d0 a000 	ldr.w	sl, [r0]
   23ace:	4640      	mov	r0, r8
   23ad0:	f7f5 fa8c 	bl	18fec <strlen>
   23ad4:	4641      	mov	r1, r8
   23ad6:	4602      	mov	r2, r0
   23ad8:	4650      	mov	r0, sl
   23ada:	f007 fcf3 	bl	2b4c4 <memcpy>
   23ade:	e7a2      	b.n	23a26 <nrf_getaddrinfo+0x172>
   23ae0:	2002      	movs	r0, #2
   23ae2:	a903      	add	r1, sp, #12
   23ae4:	f7fa ff50 	bl	1e988 <nrf_modem_os_timedwait>
   23ae8:	2800      	cmp	r0, #0
   23aea:	d0b7      	beq.n	23a5c <nrf_getaddrinfo+0x1a8>
   23aec:	206e      	movs	r0, #110	; 0x6e
   23aee:	f005 fd01 	bl	294f4 <nrf_modem_os_errno_set>
   23af2:	f06f 040a 	mvn.w	r4, #10
   23af6:	e771      	b.n	239dc <nrf_getaddrinfo+0x128>
   23af8:	f8d9 2008 	ldr.w	r2, [r9, #8]
   23afc:	2a01      	cmp	r2, #1
   23afe:	d004      	beq.n	23b0a <nrf_getaddrinfo+0x256>
   23b00:	2a02      	cmp	r2, #2
   23b02:	d01a      	beq.n	23b3a <nrf_getaddrinfo+0x286>
   23b04:	f06f 0405 	mvn.w	r4, #5
   23b08:	e7cb      	b.n	23aa2 <nrf_getaddrinfo+0x1ee>
   23b0a:	2110      	movs	r1, #16
   23b0c:	682a      	ldr	r2, [r5, #0]
   23b0e:	6111      	str	r1, [r2, #16]
   23b10:	683a      	ldr	r2, [r7, #0]
   23b12:	6829      	ldr	r1, [r5, #0]
   23b14:	f012 0202 	ands.w	r2, r2, #2
   23b18:	d03b      	beq.n	23b92 <nrf_getaddrinfo+0x2de>
   23b1a:	9101      	str	r1, [sp, #4]
   23b1c:	f8b9 0016 	ldrh.w	r0, [r9, #22]
   23b20:	3001      	adds	r0, #1
   23b22:	f7fb f82b 	bl	1eb7c <nrf_modem_os_alloc>
   23b26:	9901      	ldr	r1, [sp, #4]
   23b28:	6188      	str	r0, [r1, #24]
   23b2a:	682a      	ldr	r2, [r5, #0]
   23b2c:	6990      	ldr	r0, [r2, #24]
   23b2e:	b938      	cbnz	r0, 23b40 <nrf_getaddrinfo+0x28c>
   23b30:	4628      	mov	r0, r5
   23b32:	f7fb f82b 	bl	1eb8c <nrf_modem_os_free>
   23b36:	4630      	mov	r0, r6
   23b38:	e7af      	b.n	23a9a <nrf_getaddrinfo+0x1e6>
   23b3a:	2124      	movs	r1, #36	; 0x24
   23b3c:	682a      	ldr	r2, [r5, #0]
   23b3e:	e7e6      	b.n	23b0e <nrf_getaddrinfo+0x25a>
   23b40:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   23b44:	f109 0318 	add.w	r3, r9, #24
   23b48:	440b      	add	r3, r1
   23b4a:	4619      	mov	r1, r3
   23b4c:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   23b50:	f007 fcb8 	bl	2b4c4 <memcpy>
   23b54:	2000      	movs	r0, #0
   23b56:	6829      	ldr	r1, [r5, #0]
   23b58:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   23b5c:	6989      	ldr	r1, [r1, #24]
   23b5e:	5488      	strb	r0, [r1, r2]
   23b60:	682a      	ldr	r2, [r5, #0]
   23b62:	9201      	str	r2, [sp, #4]
   23b64:	f8d9 0008 	ldr.w	r0, [r9, #8]
   23b68:	f006 ff0a 	bl	2a980 <rpc_af_to_nrf_af>
   23b6c:	9a01      	ldr	r2, [sp, #4]
   23b6e:	6050      	str	r0, [r2, #4]
   23b70:	682b      	ldr	r3, [r5, #0]
   23b72:	f8db 2000 	ldr.w	r2, [fp]
   23b76:	609a      	str	r2, [r3, #8]
   23b78:	682b      	ldr	r3, [r5, #0]
   23b7a:	f8da 2000 	ldr.w	r2, [sl]
   23b7e:	60da      	str	r2, [r3, #12]
   23b80:	682b      	ldr	r3, [r5, #0]
   23b82:	683a      	ldr	r2, [r7, #0]
   23b84:	601a      	str	r2, [r3, #0]
   23b86:	2200      	movs	r2, #0
   23b88:	682b      	ldr	r3, [r5, #0]
   23b8a:	615e      	str	r6, [r3, #20]
   23b8c:	682b      	ldr	r3, [r5, #0]
   23b8e:	61da      	str	r2, [r3, #28]
   23b90:	e787      	b.n	23aa2 <nrf_getaddrinfo+0x1ee>
   23b92:	618a      	str	r2, [r1, #24]
   23b94:	e7e4      	b.n	23b60 <nrf_getaddrinfo+0x2ac>
   23b96:	f006 ff39 	bl	2aa0c <rpc_error_to_nrf_gai_errno>
   23b9a:	4604      	mov	r4, r0
   23b9c:	e781      	b.n	23aa2 <nrf_getaddrinfo+0x1ee>
   23b9e:	f06f 0407 	mvn.w	r4, #7
   23ba2:	e71b      	b.n	239dc <nrf_getaddrinfo+0x128>
   23ba4:	f06f 0401 	mvn.w	r4, #1
   23ba8:	e6b1      	b.n	2390e <nrf_getaddrinfo+0x5a>
   23baa:	f04f 34ff 	mov.w	r4, #4294967295
   23bae:	e6ae      	b.n	2390e <nrf_getaddrinfo+0x5a>
   23bb0:	f06f 0402 	mvn.w	r4, #2
   23bb4:	e6ab      	b.n	2390e <nrf_getaddrinfo+0x5a>
   23bb6:	bf00      	nop
   23bb8:	2000d88c 	.word	0x2000d88c
   23bbc:	0002eb12 	.word	0x0002eb12
   23bc0:	0002eb00 	.word	0x0002eb00
   23bc4:	2000d964 	.word	0x2000d964
   23bc8:	2000d898 	.word	0x2000d898
   23bcc:	2000d894 	.word	0x2000d894
   23bd0:	2000d890 	.word	0x2000d890
   23bd4:	2000d89c 	.word	0x2000d89c
   23bd8:	2000e04c 	.word	0x2000e04c
   23bdc:	2000d888 	.word	0x2000d888

00023be0 <rpc_ip_event_handler>:
   23be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23be2:	f248 030f 	movw	r3, #32783	; 0x800f
   23be6:	4299      	cmp	r1, r3
   23be8:	4606      	mov	r6, r0
   23bea:	460d      	mov	r5, r1
   23bec:	d03b      	beq.n	23c66 <rpc_ip_event_handler+0x86>
   23bee:	d822      	bhi.n	23c36 <rpc_ip_event_handler+0x56>
   23bf0:	f248 030d 	movw	r3, #32781	; 0x800d
   23bf4:	4299      	cmp	r1, r3
   23bf6:	d02f      	beq.n	23c58 <rpc_ip_event_handler+0x78>
   23bf8:	f248 030e 	movw	r3, #32782	; 0x800e
   23bfc:	4299      	cmp	r1, r3
   23bfe:	d02f      	beq.n	23c60 <rpc_ip_event_handler+0x80>
   23c00:	6900      	ldr	r0, [r0, #16]
   23c02:	f7ff fdd3 	bl	237ac <sock_find>
   23c06:	4604      	mov	r4, r0
   23c08:	b308      	cbz	r0, 23c4e <rpc_ip_event_handler+0x6e>
   23c0a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   23c0e:	d91e      	bls.n	23c4e <rpc_ip_event_handler+0x6e>
   23c10:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
   23c14:	3d01      	subs	r5, #1
   23c16:	2d0b      	cmp	r5, #11
   23c18:	d819      	bhi.n	23c4e <rpc_ip_event_handler+0x6e>
   23c1a:	e8df f015 	tbh	[pc, r5, lsl #1]
   23c1e:	0090      	.short	0x0090
   23c20:	009400b3 	.word	0x009400b3
   23c24:	00940094 	.word	0x00940094
   23c28:	00ee00ee 	.word	0x00ee00ee
   23c2c:	00990094 	.word	0x00990094
   23c30:	00180018 	.word	0x00180018
   23c34:	00d2      	.short	0x00d2
   23c36:	f249 0304 	movw	r3, #36868	; 0x9004
   23c3a:	4299      	cmp	r1, r3
   23c3c:	d016      	beq.n	23c6c <rpc_ip_event_handler+0x8c>
   23c3e:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   23c42:	d924      	bls.n	23c8e <rpc_ip_event_handler+0xae>
   23c44:	68c0      	ldr	r0, [r0, #12]
   23c46:	f7ff fdb1 	bl	237ac <sock_find>
   23c4a:	4604      	mov	r4, r0
   23c4c:	bb70      	cbnz	r0, 23cac <rpc_ip_event_handler+0xcc>
   23c4e:	6830      	ldr	r0, [r6, #0]
   23c50:	b1b0      	cbz	r0, 23c80 <rpc_ip_event_handler+0xa0>
   23c52:	f006 f91d 	bl	29e90 <rpc_client_msg_data_rx_free>
   23c56:	e013      	b.n	23c80 <rpc_ip_event_handler+0xa0>
   23c58:	f7ff fe12 	bl	23880 <on_getaddrinfo_res>
   23c5c:	b2c0      	uxtb	r0, r0
   23c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23c60:	f006 fac7 	bl	2a1f2 <on_getifaddrs_res>
   23c64:	e7fa      	b.n	23c5c <rpc_ip_event_handler+0x7c>
   23c66:	f006 fab1 	bl	2a1cc <on_conf_dnssrv_res>
   23c6a:	e7f7      	b.n	23c5c <rpc_ip_event_handler+0x7c>
   23c6c:	6903      	ldr	r3, [r0, #16]
   23c6e:	2b03      	cmp	r3, #3
   23c70:	d806      	bhi.n	23c80 <rpc_ip_event_handler+0xa0>
   23c72:	e8df f003 	tbb	[pc, r3]
   23c76:	0a02      	.short	0x0a02
   23c78:	0702      	.short	0x0702
   23c7a:	2000      	movs	r0, #0
   23c7c:	f7ff fdbe 	bl	237fc <sock_flow_control_set>
   23c80:	2000      	movs	r0, #0
   23c82:	e7ec      	b.n	23c5e <rpc_ip_event_handler+0x7e>
   23c84:	2201      	movs	r2, #1
   23c86:	4b65      	ldr	r3, [pc, #404]	; (23e1c <rpc_ip_event_handler+0x23c>)
   23c88:	701a      	strb	r2, [r3, #0]
   23c8a:	2001      	movs	r0, #1
   23c8c:	e7f6      	b.n	23c7c <rpc_ip_event_handler+0x9c>
   23c8e:	6900      	ldr	r0, [r0, #16]
   23c90:	f7ff fd8c 	bl	237ac <sock_find>
   23c94:	4604      	mov	r4, r0
   23c96:	2800      	cmp	r0, #0
   23c98:	d0d9      	beq.n	23c4e <rpc_ip_event_handler+0x6e>
   23c9a:	f248 0381 	movw	r3, #32897	; 0x8081
   23c9e:	429d      	cmp	r5, r3
   23ca0:	d1d5      	bne.n	23c4e <rpc_ip_event_handler+0x6e>
   23ca2:	4601      	mov	r1, r0
   23ca4:	4630      	mov	r0, r6
   23ca6:	f000 fc1d 	bl	244e4 <on_tls_attach_res>
   23caa:	e04f      	b.n	23d4c <rpc_ip_event_handler+0x16c>
   23cac:	f249 0302 	movw	r3, #36866	; 0x9002
   23cb0:	429d      	cmp	r5, r3
   23cb2:	f000 809e 	beq.w	23df2 <rpc_ip_event_handler+0x212>
   23cb6:	d835      	bhi.n	23d24 <rpc_ip_event_handler+0x144>
   23cb8:	f006 f9ac 	bl	2a014 <sock_has_stream_error>
   23cbc:	4607      	mov	r7, r0
   23cbe:	b9e0      	cbnz	r0, 23cfa <rpc_ip_event_handler+0x11a>
   23cc0:	2010      	movs	r0, #16
   23cc2:	f7fa ff5b 	bl	1eb7c <nrf_modem_os_alloc>
   23cc6:	4605      	mov	r5, r0
   23cc8:	b1b8      	cbz	r0, 23cfa <rpc_ip_event_handler+0x11a>
   23cca:	4639      	mov	r1, r7
   23ccc:	2210      	movs	r2, #16
   23cce:	f007 fc06 	bl	2b4de <memset>
   23cd2:	6833      	ldr	r3, [r6, #0]
   23cd4:	606b      	str	r3, [r5, #4]
   23cd6:	6873      	ldr	r3, [r6, #4]
   23cd8:	812b      	strh	r3, [r5, #8]
   23cda:	8a71      	ldrh	r1, [r6, #18]
   23cdc:	2900      	cmp	r1, #0
   23cde:	f000 8097 	beq.w	23e10 <rpc_ip_event_handler+0x230>
   23ce2:	8a32      	ldrh	r2, [r6, #16]
   23ce4:	f106 0014 	add.w	r0, r6, #20
   23ce8:	f006 f8e0 	bl	29eac <sockaddr_init>
   23cec:	60e8      	str	r0, [r5, #12]
   23cee:	2800      	cmp	r0, #0
   23cf0:	f040 808e 	bne.w	23e10 <rpc_ip_event_handler+0x230>
   23cf4:	4628      	mov	r0, r5
   23cf6:	f7fa ff49 	bl	1eb8c <nrf_modem_os_free>
   23cfa:	6830      	ldr	r0, [r6, #0]
   23cfc:	f006 f8c8 	bl	29e90 <rpc_client_msg_data_rx_free>
   23d00:	4620      	mov	r0, r4
   23d02:	f006 f949 	bl	29f98 <sock_is_stream>
   23d06:	b148      	cbz	r0, 23d1c <rpc_ip_event_handler+0x13c>
   23d08:	4620      	mov	r0, r4
   23d0a:	f006 f983 	bl	2a014 <sock_has_stream_error>
   23d0e:	b928      	cbnz	r0, 23d1c <rpc_ip_event_handler+0x13c>
   23d10:	230c      	movs	r3, #12
   23d12:	61a3      	str	r3, [r4, #24]
   23d14:	7f23      	ldrb	r3, [r4, #28]
   23d16:	f063 037e 	orn	r3, r3, #126	; 0x7e
   23d1a:	7723      	strb	r3, [r4, #28]
   23d1c:	4620      	mov	r0, r4
   23d1e:	f006 f940 	bl	29fa2 <sock_is_datagram>
   23d22:	e025      	b.n	23d70 <rpc_ip_event_handler+0x190>
   23d24:	f249 0303 	movw	r3, #36867	; 0x9003
   23d28:	429d      	cmp	r5, r3
   23d2a:	d018      	beq.n	23d5e <rpc_ip_event_handler+0x17e>
   23d2c:	f249 0382 	movw	r3, #36994	; 0x9082
   23d30:	429d      	cmp	r5, r3
   23d32:	d18c      	bne.n	23c4e <rpc_ip_event_handler+0x6e>
   23d34:	4601      	mov	r1, r0
   23d36:	4630      	mov	r0, r6
   23d38:	f000 fbe8 	bl	2450c <on_tls_handshake_ntf>
   23d3c:	e006      	b.n	23d4c <rpc_ip_event_handler+0x16c>
   23d3e:	6973      	ldr	r3, [r6, #20]
   23d40:	b90b      	cbnz	r3, 23d46 <rpc_ip_event_handler+0x166>
   23d42:	69b3      	ldr	r3, [r6, #24]
   23d44:	6003      	str	r3, [r0, #0]
   23d46:	4630      	mov	r0, r6
   23d48:	f006 fea9 	bl	2aa9e <res_forward>
   23d4c:	4605      	mov	r5, r0
   23d4e:	e010      	b.n	23d72 <rpc_ip_event_handler+0x192>
   23d50:	7f03      	ldrb	r3, [r0, #28]
   23d52:	f023 0303 	bic.w	r3, r3, #3
   23d56:	f043 0303 	orr.w	r3, r3, #3
   23d5a:	7703      	strb	r3, [r0, #28]
   23d5c:	e7f3      	b.n	23d46 <rpc_ip_event_handler+0x166>
   23d5e:	7f03      	ldrb	r3, [r0, #28]
   23d60:	f043 0301 	orr.w	r3, r3, #1
   23d64:	7703      	strb	r3, [r0, #28]
   23d66:	6930      	ldr	r0, [r6, #16]
   23d68:	2869      	cmp	r0, #105	; 0x69
   23d6a:	d112      	bne.n	23d92 <rpc_ip_event_handler+0x1b2>
   23d6c:	2368      	movs	r3, #104	; 0x68
   23d6e:	61a3      	str	r3, [r4, #24]
   23d70:	2500      	movs	r5, #0
   23d72:	4620      	mov	r0, r4
   23d74:	f006 f95c 	bl	2a030 <sock_has_pollcb>
   23d78:	b110      	cbz	r0, 23d80 <rpc_ip_event_handler+0x1a0>
   23d7a:	4620      	mov	r0, r4
   23d7c:	f006 f8cf 	bl	29f1e <sock_pollcb>
   23d80:	b2e8      	uxtb	r0, r5
   23d82:	e76c      	b.n	23c5e <rpc_ip_event_handler+0x7e>
   23d84:	7f03      	ldrb	r3, [r0, #28]
   23d86:	68f5      	ldr	r5, [r6, #12]
   23d88:	f36f 0382 	bfc	r3, #2, #1
   23d8c:	7703      	strb	r3, [r0, #28]
   23d8e:	6970      	ldr	r0, [r6, #20]
   23d90:	b118      	cbz	r0, 23d9a <rpc_ip_event_handler+0x1ba>
   23d92:	f000 fc5f 	bl	24654 <rpc_error_to_nrf_errno>
   23d96:	61a0      	str	r0, [r4, #24]
   23d98:	e7ea      	b.n	23d70 <rpc_ip_event_handler+0x190>
   23d9a:	4620      	mov	r0, r4
   23d9c:	f006 f90b 	bl	29fb6 <sock_proto_is_secure>
   23da0:	b918      	cbnz	r0, 23daa <rpc_ip_event_handler+0x1ca>
   23da2:	7f23      	ldrb	r3, [r4, #28]
   23da4:	f043 0308 	orr.w	r3, r3, #8
   23da8:	7723      	strb	r3, [r4, #28]
   23daa:	4620      	mov	r0, r4
   23dac:	f006 f903 	bl	29fb6 <sock_proto_is_secure>
   23db0:	2800      	cmp	r0, #0
   23db2:	d0cb      	beq.n	23d4c <rpc_ip_event_handler+0x16c>
   23db4:	2d00      	cmp	r5, #0
   23db6:	d0dc      	beq.n	23d72 <rpc_ip_event_handler+0x192>
   23db8:	2100      	movs	r1, #0
   23dba:	4620      	mov	r0, r4
   23dbc:	f000 fbc0 	bl	24540 <tls_attach>
   23dc0:	e7d6      	b.n	23d70 <rpc_ip_event_handler+0x190>
   23dc2:	7f43      	ldrb	r3, [r0, #29]
   23dc4:	3b01      	subs	r3, #1
   23dc6:	7743      	strb	r3, [r0, #29]
   23dc8:	6973      	ldr	r3, [r6, #20]
   23dca:	2b00      	cmp	r3, #0
   23dcc:	d1bb      	bne.n	23d46 <rpc_ip_event_handler+0x166>
   23dce:	4630      	mov	r0, r6
   23dd0:	f006 fe63 	bl	2aa9a <res_cookie_get>
   23dd4:	69b2      	ldr	r2, [r6, #24]
   23dd6:	6843      	ldr	r3, [r0, #4]
   23dd8:	601a      	str	r2, [r3, #0]
   23dda:	6842      	ldr	r2, [r0, #4]
   23ddc:	7f13      	ldrb	r3, [r2, #28]
   23dde:	f043 0308 	orr.w	r3, r3, #8
   23de2:	7713      	strb	r3, [r2, #28]
   23de4:	6843      	ldr	r3, [r0, #4]
   23de6:	6922      	ldr	r2, [r4, #16]
   23de8:	611a      	str	r2, [r3, #16]
   23dea:	6843      	ldr	r3, [r0, #4]
   23dec:	6962      	ldr	r2, [r4, #20]
   23dee:	615a      	str	r2, [r3, #20]
   23df0:	e7a9      	b.n	23d46 <rpc_ip_event_handler+0x166>
   23df2:	7f43      	ldrb	r3, [r0, #29]
   23df4:	3301      	adds	r3, #1
   23df6:	7743      	strb	r3, [r0, #29]
   23df8:	e7ba      	b.n	23d70 <rpc_ip_event_handler+0x190>
   23dfa:	4630      	mov	r0, r6
   23dfc:	f006 fe4d 	bl	2aa9a <res_cookie_get>
   23e00:	6973      	ldr	r3, [r6, #20]
   23e02:	b913      	cbnz	r3, 23e0a <rpc_ip_event_handler+0x22a>
   23e04:	69b3      	ldr	r3, [r6, #24]
   23e06:	6043      	str	r3, [r0, #4]
   23e08:	e79d      	b.n	23d46 <rpc_ip_event_handler+0x166>
   23e0a:	f04f 33ff 	mov.w	r3, #4294967295
   23e0e:	e7fa      	b.n	23e06 <rpc_ip_event_handler+0x226>
   23e10:	4629      	mov	r1, r5
   23e12:	4620      	mov	r0, r4
   23e14:	f006 f8a0 	bl	29f58 <sock_pkt_append>
   23e18:	e7aa      	b.n	23d70 <rpc_ip_event_handler+0x190>
   23e1a:	bf00      	nop
   23e1c:	2000e04d 	.word	0x2000e04d

00023e20 <nrf_close>:
   23e20:	b570      	push	{r4, r5, r6, lr}
   23e22:	4604      	mov	r4, r0
   23e24:	f7ff fcc2 	bl	237ac <sock_find>
   23e28:	4605      	mov	r5, r0
   23e2a:	b930      	cbnz	r0, 23e3a <nrf_close+0x1a>
   23e2c:	2009      	movs	r0, #9
   23e2e:	f005 fb61 	bl	294f4 <nrf_modem_os_errno_set>
   23e32:	f04f 36ff 	mov.w	r6, #4294967295
   23e36:	4630      	mov	r0, r6
   23e38:	bd70      	pop	{r4, r5, r6, pc}
   23e3a:	f000 ff69 	bl	24d10 <nrf_modem_state_is_initialized>
   23e3e:	b960      	cbnz	r0, 23e5a <nrf_close+0x3a>
   23e40:	2600      	movs	r6, #0
   23e42:	4628      	mov	r0, r5
   23e44:	f006 f8cb 	bl	29fde <sock_is_attaching>
   23e48:	b118      	cbz	r0, 23e52 <nrf_close+0x32>
   23e4a:	4b0e      	ldr	r3, [pc, #56]	; (23e84 <nrf_close+0x64>)
   23e4c:	6818      	ldr	r0, [r3, #0]
   23e4e:	f005 fb59 	bl	29504 <nrf_modem_os_sem_give>
   23e52:	4620      	mov	r0, r4
   23e54:	f7ff fcbc 	bl	237d0 <_sock_close>
   23e58:	e7ed      	b.n	23e36 <nrf_close+0x16>
   23e5a:	2000      	movs	r0, #0
   23e5c:	f005 fff2 	bl	29e44 <rpc_client_msg_alloc>
   23e60:	4601      	mov	r1, r0
   23e62:	b908      	cbnz	r0, 23e68 <nrf_close+0x48>
   23e64:	2069      	movs	r0, #105	; 0x69
   23e66:	e7e2      	b.n	23e2e <nrf_close+0xe>
   23e68:	6104      	str	r4, [r0, #16]
   23e6a:	f247 0009 	movw	r0, #28681	; 0x7009
   23e6e:	f006 fde7 	bl	2aa40 <req_forward>
   23e72:	2800      	cmp	r0, #0
   23e74:	d0e4      	beq.n	23e40 <nrf_close+0x20>
   23e76:	2816      	cmp	r0, #22
   23e78:	d0e2      	beq.n	23e40 <nrf_close+0x20>
   23e7a:	f005 fb3b 	bl	294f4 <nrf_modem_os_errno_set>
   23e7e:	f04f 36ff 	mov.w	r6, #4294967295
   23e82:	e7de      	b.n	23e42 <nrf_close+0x22>
   23e84:	2000d8a0 	.word	0x2000d8a0

00023e88 <nrf_sendto>:
   23e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e8c:	4698      	mov	r8, r3
   23e8e:	2300      	movs	r3, #0
   23e90:	b085      	sub	sp, #20
   23e92:	4682      	mov	sl, r0
   23e94:	4689      	mov	r9, r1
   23e96:	4616      	mov	r6, r2
   23e98:	e9cd 3302 	strd	r3, r3, [sp, #8]
   23e9c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   23e9e:	f7ff fc85 	bl	237ac <sock_find>
   23ea2:	4605      	mov	r5, r0
   23ea4:	b940      	cbnz	r0, 23eb8 <nrf_sendto+0x30>
   23ea6:	2009      	movs	r0, #9
   23ea8:	f005 fb24 	bl	294f4 <nrf_modem_os_errno_set>
   23eac:	f04f 34ff 	mov.w	r4, #4294967295
   23eb0:	4620      	mov	r0, r4
   23eb2:	b005      	add	sp, #20
   23eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23eb8:	f038 0340 	bics.w	r3, r8, #64	; 0x40
   23ebc:	d001      	beq.n	23ec2 <nrf_sendto+0x3a>
   23ebe:	205f      	movs	r0, #95	; 0x5f
   23ec0:	e7f2      	b.n	23ea8 <nrf_sendto+0x20>
   23ec2:	f006 f8ba 	bl	2a03a <sock_has_rai_no_data>
   23ec6:	b128      	cbz	r0, 23ed4 <nrf_sendto+0x4c>
   23ec8:	4628      	mov	r0, r5
   23eca:	f006 f8a6 	bl	2a01a <sock_has_error>
   23ece:	b128      	cbz	r0, 23edc <nrf_sendto+0x54>
   23ed0:	69a8      	ldr	r0, [r5, #24]
   23ed2:	e7e9      	b.n	23ea8 <nrf_sendto+0x20>
   23ed4:	4628      	mov	r0, r5
   23ed6:	f006 f88a 	bl	29fee <sock_is_closed>
   23eda:	e7f8      	b.n	23ece <nrf_sendto+0x46>
   23edc:	4628      	mov	r0, r5
   23ede:	b1d7      	cbz	r7, 23f16 <nrf_sendto+0x8e>
   23ee0:	f006 f85a 	bl	29f98 <sock_is_stream>
   23ee4:	bb00      	cbnz	r0, 23f28 <nrf_sendto+0xa0>
   23ee6:	4639      	mov	r1, r7
   23ee8:	4628      	mov	r0, r5
   23eea:	f006 f932 	bl	2a152 <sock_sockaddr_fam_is_valid>
   23eee:	b908      	cbnz	r0, 23ef4 <nrf_sendto+0x6c>
   23ef0:	206a      	movs	r0, #106	; 0x6a
   23ef2:	e7d9      	b.n	23ea8 <nrf_sendto+0x20>
   23ef4:	4638      	mov	r0, r7
   23ef6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   23ef8:	f006 f917 	bl	2a12a <sock_sockaddr_len_is_valid>
   23efc:	b908      	cbnz	r0, 23f02 <nrf_sendto+0x7a>
   23efe:	2016      	movs	r0, #22
   23f00:	e7d2      	b.n	23ea8 <nrf_sendto+0x20>
   23f02:	4628      	mov	r0, r5
   23f04:	f006 f84d 	bl	29fa2 <sock_is_datagram>
   23f08:	b170      	cbz	r0, 23f28 <nrf_sendto+0xa0>
   23f0a:	4628      	mov	r0, r5
   23f0c:	f006 f853 	bl	29fb6 <sock_proto_is_secure>
   23f10:	b150      	cbz	r0, 23f28 <nrf_sendto+0xa0>
   23f12:	207f      	movs	r0, #127	; 0x7f
   23f14:	e7c8      	b.n	23ea8 <nrf_sendto+0x20>
   23f16:	f006 f844 	bl	29fa2 <sock_is_datagram>
   23f1a:	b128      	cbz	r0, 23f28 <nrf_sendto+0xa0>
   23f1c:	4628      	mov	r0, r5
   23f1e:	f006 f85a 	bl	29fd6 <sock_is_connected>
   23f22:	b908      	cbnz	r0, 23f28 <nrf_sendto+0xa0>
   23f24:	2079      	movs	r0, #121	; 0x79
   23f26:	e7bf      	b.n	23ea8 <nrf_sendto+0x20>
   23f28:	4628      	mov	r0, r5
   23f2a:	f006 f8c6 	bl	2a0ba <sock_sndtimeo_ms_get>
   23f2e:	9001      	str	r0, [sp, #4]
   23f30:	4628      	mov	r0, r5
   23f32:	f006 f858 	bl	29fe6 <sock_is_nonblock>
   23f36:	bb78      	cbnz	r0, 23f98 <nrf_sendto+0x110>
   23f38:	f3c8 1880 	ubfx	r8, r8, #6, #1
   23f3c:	4628      	mov	r0, r5
   23f3e:	f006 f82b 	bl	29f98 <sock_is_stream>
   23f42:	b140      	cbz	r0, 23f56 <nrf_sendto+0xce>
   23f44:	4628      	mov	r0, r5
   23f46:	f006 f836 	bl	29fb6 <sock_proto_is_secure>
   23f4a:	b120      	cbz	r0, 23f56 <nrf_sendto+0xce>
   23f4c:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
   23f50:	bf28      	it	cs
   23f52:	f44f 6600 	movcs.w	r6, #2048	; 0x800
   23f56:	f005 ff9d 	bl	29e94 <rpc_client_msg_data_tx_size>
   23f5a:	42b0      	cmp	r0, r6
   23f5c:	d206      	bcs.n	23f6c <nrf_sendto+0xe4>
   23f5e:	4628      	mov	r0, r5
   23f60:	f006 f81a 	bl	29f98 <sock_is_stream>
   23f64:	b1d8      	cbz	r0, 23f9e <nrf_sendto+0x116>
   23f66:	f005 ff95 	bl	29e94 <rpc_client_msg_data_tx_size>
   23f6a:	4606      	mov	r6, r0
   23f6c:	4628      	mov	r0, r5
   23f6e:	f006 f85b 	bl	2a028 <sock_has_flow_control>
   23f72:	b118      	cbz	r0, 23f7c <nrf_sendto+0xf4>
   23f74:	4628      	mov	r0, r5
   23f76:	f006 f83a 	bl	29fee <sock_is_closed>
   23f7a:	b190      	cbz	r0, 23fa2 <nrf_sendto+0x11a>
   23f7c:	4630      	mov	r0, r6
   23f7e:	f005 ff61 	bl	29e44 <rpc_client_msg_alloc>
   23f82:	4604      	mov	r4, r0
   23f84:	b9d8      	cbnz	r0, 23fbe <nrf_sendto+0x136>
   23f86:	2001      	movs	r0, #1
   23f88:	a901      	add	r1, sp, #4
   23f8a:	f7fa fcfd 	bl	1e988 <nrf_modem_os_timedwait>
   23f8e:	b998      	cbnz	r0, 23fb8 <nrf_sendto+0x130>
   23f90:	f1b8 0f00 	cmp.w	r8, #0
   23f94:	d0f2      	beq.n	23f7c <nrf_sendto+0xf4>
   23f96:	e007      	b.n	23fa8 <nrf_sendto+0x120>
   23f98:	f04f 0801 	mov.w	r8, #1
   23f9c:	e7ce      	b.n	23f3c <nrf_sendto+0xb4>
   23f9e:	207a      	movs	r0, #122	; 0x7a
   23fa0:	e782      	b.n	23ea8 <nrf_sendto+0x20>
   23fa2:	f1b8 0f00 	cmp.w	r8, #0
   23fa6:	d001      	beq.n	23fac <nrf_sendto+0x124>
   23fa8:	200b      	movs	r0, #11
   23faa:	e77d      	b.n	23ea8 <nrf_sendto+0x20>
   23fac:	2002      	movs	r0, #2
   23fae:	a901      	add	r1, sp, #4
   23fb0:	f7fa fcea 	bl	1e988 <nrf_modem_os_timedwait>
   23fb4:	2800      	cmp	r0, #0
   23fb6:	d0d9      	beq.n	23f6c <nrf_sendto+0xe4>
   23fb8:	f007 fa62 	bl	2b480 <abs>
   23fbc:	e774      	b.n	23ea8 <nrf_sendto+0x20>
   23fbe:	f8c0 a010 	str.w	sl, [r0, #16]
   23fc2:	f1b9 0f00 	cmp.w	r9, #0
   23fc6:	d004      	beq.n	23fd2 <nrf_sendto+0x14a>
   23fc8:	4632      	mov	r2, r6
   23fca:	4649      	mov	r1, r9
   23fcc:	6800      	ldr	r0, [r0, #0]
   23fce:	f007 fa79 	bl	2b4c4 <memcpy>
   23fd2:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
   23fd6:	f1bb 0f00 	cmp.w	fp, #0
   23fda:	d001      	beq.n	23fe0 <nrf_sendto+0x158>
   23fdc:	2300      	movs	r3, #0
   23fde:	632b      	str	r3, [r5, #48]	; 0x30
   23fe0:	b3cf      	cbz	r7, 24056 <nrf_sendto+0x1ce>
   23fe2:	4628      	mov	r0, r5
   23fe4:	f005 ffd8 	bl	29f98 <sock_is_stream>
   23fe8:	bba8      	cbnz	r0, 24056 <nrf_sendto+0x1ce>
   23fea:	2318      	movs	r3, #24
   23fec:	7260      	strb	r0, [r4, #9]
   23fee:	7223      	strb	r3, [r4, #8]
   23ff0:	72a0      	strb	r0, [r4, #10]
   23ff2:	72e0      	strb	r0, [r4, #11]
   23ff4:	f8c4 b014 	str.w	fp, [r4, #20]
   23ff8:	687b      	ldr	r3, [r7, #4]
   23ffa:	2b01      	cmp	r3, #1
   23ffc:	d012      	beq.n	24024 <nrf_sendto+0x19c>
   23ffe:	2b02      	cmp	r3, #2
   24000:	d018      	beq.n	24034 <nrf_sendto+0x1ac>
   24002:	f247 0b07 	movw	fp, #28679	; 0x7007
   24006:	4620      	mov	r0, r4
   24008:	a902      	add	r1, sp, #8
   2400a:	f006 fd44 	bl	2aa96 <req_cookie_set>
   2400e:	4621      	mov	r1, r4
   24010:	4658      	mov	r0, fp
   24012:	f006 fd15 	bl	2aa40 <req_forward>
   24016:	4603      	mov	r3, r0
   24018:	bb40      	cbnz	r0, 2406c <nrf_sendto+0x1e4>
   2401a:	e9dd 0402 	ldrd	r0, r4, [sp, #8]
   2401e:	f005 ff34 	bl	29e8a <rpc_client_msg_rx_free>
   24022:	e745      	b.n	23eb0 <nrf_sendto+0x28>
   24024:	893b      	ldrh	r3, [r7, #8]
   24026:	76e0      	strb	r0, [r4, #27]
   24028:	8323      	strh	r3, [r4, #24]
   2402a:	2304      	movs	r3, #4
   2402c:	76a3      	strb	r3, [r4, #26]
   2402e:	68fb      	ldr	r3, [r7, #12]
   24030:	61e3      	str	r3, [r4, #28]
   24032:	e7e6      	b.n	24002 <nrf_sendto+0x17a>
   24034:	893b      	ldrh	r3, [r7, #8]
   24036:	f104 021c 	add.w	r2, r4, #28
   2403a:	8323      	strh	r3, [r4, #24]
   2403c:	2310      	movs	r3, #16
   2403e:	76e0      	strb	r0, [r4, #27]
   24040:	76a3      	strb	r3, [r4, #26]
   24042:	f107 0120 	add.w	r1, r7, #32
   24046:	18fb      	adds	r3, r7, r3
   24048:	f853 0b04 	ldr.w	r0, [r3], #4
   2404c:	428b      	cmp	r3, r1
   2404e:	f842 0b04 	str.w	r0, [r2], #4
   24052:	d1f9      	bne.n	24048 <nrf_sendto+0x1c0>
   24054:	e7d5      	b.n	24002 <nrf_sendto+0x17a>
   24056:	2300      	movs	r3, #0
   24058:	2204      	movs	r2, #4
   2405a:	f8c4 b014 	str.w	fp, [r4, #20]
   2405e:	7222      	strb	r2, [r4, #8]
   24060:	f247 0b06 	movw	fp, #28678	; 0x7006
   24064:	7263      	strb	r3, [r4, #9]
   24066:	72a3      	strb	r3, [r4, #10]
   24068:	72e3      	strb	r3, [r4, #11]
   2406a:	e7cc      	b.n	24006 <nrf_sendto+0x17e>
   2406c:	280c      	cmp	r0, #12
   2406e:	dc0f      	bgt.n	24090 <nrf_sendto+0x208>
   24070:	280a      	cmp	r0, #10
   24072:	dd10      	ble.n	24096 <nrf_sendto+0x20e>
   24074:	4b09      	ldr	r3, [pc, #36]	; (2409c <nrf_sendto+0x214>)
   24076:	781b      	ldrb	r3, [r3, #0]
   24078:	b92b      	cbnz	r3, 24086 <nrf_sendto+0x1fe>
   2407a:	2001      	movs	r0, #1
   2407c:	a901      	add	r1, sp, #4
   2407e:	f7fa fc83 	bl	1e988 <nrf_modem_os_timedwait>
   24082:	2800      	cmp	r0, #0
   24084:	d198      	bne.n	23fb8 <nrf_sendto+0x130>
   24086:	f1b8 0f00 	cmp.w	r8, #0
   2408a:	f43f af6f 	beq.w	23f6c <nrf_sendto+0xe4>
   2408e:	e78b      	b.n	23fa8 <nrf_sendto+0x120>
   24090:	288c      	cmp	r0, #140	; 0x8c
   24092:	f43f af09 	beq.w	23ea8 <nrf_sendto+0x20>
   24096:	4618      	mov	r0, r3
   24098:	e706      	b.n	23ea8 <nrf_sendto+0x20>
   2409a:	bf00      	nop
   2409c:	2000e04d 	.word	0x2000e04d

000240a0 <nrf_setsockopt>:
   240a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   240a4:	b085      	sub	sp, #20
   240a6:	4681      	mov	r9, r0
   240a8:	4688      	mov	r8, r1
   240aa:	4617      	mov	r7, r2
   240ac:	461e      	mov	r6, r3
   240ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   240b0:	f7ff fb7c 	bl	237ac <sock_find>
   240b4:	4604      	mov	r4, r0
   240b6:	b938      	cbnz	r0, 240c8 <nrf_setsockopt+0x28>
   240b8:	2009      	movs	r0, #9
   240ba:	f005 fa1b 	bl	294f4 <nrf_modem_os_errno_set>
   240be:	f04f 30ff 	mov.w	r0, #4294967295
   240c2:	b005      	add	sp, #20
   240c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   240c8:	b916      	cbnz	r6, 240d0 <nrf_setsockopt+0x30>
   240ca:	b10d      	cbz	r5, 240d0 <nrf_setsockopt+0x30>
   240cc:	2016      	movs	r0, #22
   240ce:	e7f4      	b.n	240ba <nrf_setsockopt+0x1a>
   240d0:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   240d4:	f000 80fe 	beq.w	242d4 <nrf_setsockopt+0x234>
   240d8:	dc0c      	bgt.n	240f4 <nrf_setsockopt+0x54>
   240da:	f1b8 0f01 	cmp.w	r8, #1
   240de:	d012      	beq.n	24106 <nrf_setsockopt+0x66>
   240e0:	f1b8 0f06 	cmp.w	r8, #6
   240e4:	f000 80f0 	beq.w	242c8 <nrf_setsockopt+0x228>
   240e8:	f1b8 0f00 	cmp.w	r8, #0
   240ec:	f000 80f0 	beq.w	242d0 <nrf_setsockopt+0x230>
   240f0:	206d      	movs	r0, #109	; 0x6d
   240f2:	e7e2      	b.n	240ba <nrf_setsockopt+0x1a>
   240f4:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   240f8:	f000 809b 	beq.w	24232 <nrf_setsockopt+0x192>
   240fc:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   24100:	d1f6      	bne.n	240f0 <nrf_setsockopt+0x50>
   24102:	2f1e      	cmp	r7, #30
   24104:	e0e1      	b.n	242ca <nrf_setsockopt+0x22a>
   24106:	2f3c      	cmp	r7, #60	; 0x3c
   24108:	dcf2      	bgt.n	240f0 <nrf_setsockopt+0x50>
   2410a:	2f31      	cmp	r7, #49	; 0x31
   2410c:	dc0f      	bgt.n	2412e <nrf_setsockopt+0x8e>
   2410e:	2f15      	cmp	r7, #21
   24110:	d04c      	beq.n	241ac <nrf_setsockopt+0x10c>
   24112:	dc29      	bgt.n	24168 <nrf_setsockopt+0xc8>
   24114:	2f02      	cmp	r7, #2
   24116:	d040      	beq.n	2419a <nrf_setsockopt+0xfa>
   24118:	2f14      	cmp	r7, #20
   2411a:	d1e9      	bne.n	240f0 <nrf_setsockopt+0x50>
   2411c:	f104 0020 	add.w	r0, r4, #32
   24120:	2d00      	cmp	r5, #0
   24122:	d149      	bne.n	241b8 <nrf_setsockopt+0x118>
   24124:	2300      	movs	r3, #0
   24126:	6223      	str	r3, [r4, #32]
   24128:	6043      	str	r3, [r0, #4]
   2412a:	2000      	movs	r0, #0
   2412c:	e7c9      	b.n	240c2 <nrf_setsockopt+0x22>
   2412e:	3f32      	subs	r7, #50	; 0x32
   24130:	2f0a      	cmp	r7, #10
   24132:	d8dd      	bhi.n	240f0 <nrf_setsockopt+0x50>
   24134:	a301      	add	r3, pc, #4	; (adr r3, 2413c <nrf_setsockopt+0x9c>)
   24136:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
   2413a:	bf00      	nop
   2413c:	00024213 	.word	0x00024213
   24140:	000241f9 	.word	0x000241f9
   24144:	00024201 	.word	0x00024201
   24148:	00024207 	.word	0x00024207
   2414c:	0002420d 	.word	0x0002420d
   24150:	000240f1 	.word	0x000240f1
   24154:	000240f1 	.word	0x000240f1
   24158:	000240f1 	.word	0x000240f1
   2415c:	000240f1 	.word	0x000240f1
   24160:	000240f1 	.word	0x000240f1
   24164:	000241c9 	.word	0x000241c9
   24168:	2f19      	cmp	r7, #25
   2416a:	d1c1      	bne.n	240f0 <nrf_setsockopt+0x50>
   2416c:	2e00      	cmp	r6, #0
   2416e:	d0ad      	beq.n	240cc <nrf_setsockopt+0x2c>
   24170:	4869      	ldr	r0, [pc, #420]	; (24318 <nrf_setsockopt+0x278>)
   24172:	f7f4 ff3b 	bl	18fec <strlen>
   24176:	4968      	ldr	r1, [pc, #416]	; (24318 <nrf_setsockopt+0x278>)
   24178:	4602      	mov	r2, r0
   2417a:	4630      	mov	r0, r6
   2417c:	f007 f992 	bl	2b4a4 <memcmp>
   24180:	2800      	cmp	r0, #0
   24182:	d152      	bne.n	2422a <nrf_setsockopt+0x18a>
   24184:	4864      	ldr	r0, [pc, #400]	; (24318 <nrf_setsockopt+0x278>)
   24186:	f7f4 ff31 	bl	18fec <strlen>
   2418a:	220a      	movs	r2, #10
   2418c:	2100      	movs	r1, #0
   2418e:	4430      	add	r0, r6
   24190:	f002 fc24 	bl	269dc <strtoul>
   24194:	2504      	movs	r5, #4
   24196:	9003      	str	r0, [sp, #12]
   24198:	ae03      	add	r6, sp, #12
   2419a:	4628      	mov	r0, r5
   2419c:	f005 fe52 	bl	29e44 <rpc_client_msg_alloc>
   241a0:	4604      	mov	r4, r0
   241a2:	2800      	cmp	r0, #0
   241a4:	f040 8098 	bne.w	242d8 <nrf_setsockopt+0x238>
   241a8:	2069      	movs	r0, #105	; 0x69
   241aa:	e786      	b.n	240ba <nrf_setsockopt+0x1a>
   241ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
   241b0:	b915      	cbnz	r5, 241b8 <nrf_setsockopt+0x118>
   241b2:	62a5      	str	r5, [r4, #40]	; 0x28
   241b4:	6045      	str	r5, [r0, #4]
   241b6:	e7b8      	b.n	2412a <nrf_setsockopt+0x8a>
   241b8:	2d08      	cmp	r5, #8
   241ba:	462a      	mov	r2, r5
   241bc:	4631      	mov	r1, r6
   241be:	bf28      	it	cs
   241c0:	2208      	movcs	r2, #8
   241c2:	f007 f97f 	bl	2b4c4 <memcpy>
   241c6:	e7b0      	b.n	2412a <nrf_setsockopt+0x8a>
   241c8:	b186      	cbz	r6, 241ec <nrf_setsockopt+0x14c>
   241ca:	2d08      	cmp	r5, #8
   241cc:	f47f af7e 	bne.w	240cc <nrf_setsockopt+0x2c>
   241d0:	f7fe ffd0 	bl	23174 <rpc_transport_data_rx_suspend>
   241d4:	e896 0003 	ldmia.w	r6, {r0, r1}
   241d8:	f104 0334 	add.w	r3, r4, #52	; 0x34
   241dc:	e883 0003 	stmia.w	r3, {r0, r1}
   241e0:	4620      	mov	r0, r4
   241e2:	f005 fe9c 	bl	29f1e <sock_pollcb>
   241e6:	f7fe ffcb 	bl	23180 <rpc_transport_data_rx_resume>
   241ea:	e79e      	b.n	2412a <nrf_setsockopt+0x8a>
   241ec:	2d00      	cmp	r5, #0
   241ee:	f47f af6d 	bne.w	240cc <nrf_setsockopt+0x2c>
   241f2:	6365      	str	r5, [r4, #52]	; 0x34
   241f4:	63a5      	str	r5, [r4, #56]	; 0x38
   241f6:	e798      	b.n	2412a <nrf_setsockopt+0x8a>
   241f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   241fc:	6323      	str	r3, [r4, #48]	; 0x30
   241fe:	e794      	b.n	2412a <nrf_setsockopt+0x8a>
   24200:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   24204:	e7fa      	b.n	241fc <nrf_setsockopt+0x15c>
   24206:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   2420a:	e7f7      	b.n	241fc <nrf_setsockopt+0x15c>
   2420c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24210:	e7f4      	b.n	241fc <nrf_setsockopt+0x15c>
   24212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   24216:	6323      	str	r3, [r4, #48]	; 0x30
   24218:	2300      	movs	r3, #0
   2421a:	4648      	mov	r0, r9
   2421c:	461a      	mov	r2, r3
   2421e:	4619      	mov	r1, r3
   24220:	e9cd 3300 	strd	r3, r3, [sp]
   24224:	f7ff fe30 	bl	23e88 <nrf_sendto>
   24228:	e74b      	b.n	240c2 <nrf_setsockopt+0x22>
   2422a:	220a      	movs	r2, #10
   2422c:	2100      	movs	r1, #0
   2422e:	4630      	mov	r0, r6
   24230:	e7ae      	b.n	24190 <nrf_setsockopt+0xf0>
   24232:	1e7b      	subs	r3, r7, #1
   24234:	2b0d      	cmp	r3, #13
   24236:	f63f af5b 	bhi.w	240f0 <nrf_setsockopt+0x50>
   2423a:	a201      	add	r2, pc, #4	; (adr r2, 24240 <nrf_setsockopt+0x1a0>)
   2423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   24240:	00024289 	.word	0x00024289
   24244:	000242b9 	.word	0x000242b9
   24248:	0002419b 	.word	0x0002419b
   2424c:	000240f1 	.word	0x000240f1
   24250:	000242a9 	.word	0x000242a9
   24254:	00024279 	.word	0x00024279
   24258:	000240f1 	.word	0x000240f1
   2425c:	000240f1 	.word	0x000240f1
   24260:	000240f1 	.word	0x000240f1
   24264:	000240f1 	.word	0x000240f1
   24268:	000240f1 	.word	0x000240f1
   2426c:	00024299 	.word	0x00024299
   24270:	0002419b 	.word	0x0002419b
   24274:	0002419b 	.word	0x0002419b
   24278:	462a      	mov	r2, r5
   2427a:	4631      	mov	r1, r6
   2427c:	4620      	mov	r0, r4
   2427e:	b005      	add	sp, #20
   24280:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24284:	f006 baab 	b.w	2a7de <tls_setopt_role>
   24288:	462a      	mov	r2, r5
   2428a:	4631      	mov	r1, r6
   2428c:	4620      	mov	r0, r4
   2428e:	b005      	add	sp, #20
   24290:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24294:	f006 bab7 	b.w	2a806 <tls_setopt_taglist>
   24298:	462a      	mov	r2, r5
   2429a:	4631      	mov	r1, r6
   2429c:	4620      	mov	r0, r4
   2429e:	b005      	add	sp, #20
   242a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   242a4:	f006 bac2 	b.w	2a82c <tls_setopt_sess_cache>
   242a8:	462a      	mov	r2, r5
   242aa:	4631      	mov	r1, r6
   242ac:	4620      	mov	r0, r4
   242ae:	b005      	add	sp, #20
   242b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   242b4:	f006 bacc 	b.w	2a850 <tls_setopt_peer_verify>
   242b8:	462a      	mov	r2, r5
   242ba:	4631      	mov	r1, r6
   242bc:	4620      	mov	r0, r4
   242be:	b005      	add	sp, #20
   242c0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   242c4:	f006 bad3 	b.w	2a86e <tls_setopt_hostname>
   242c8:	2f37      	cmp	r7, #55	; 0x37
   242ca:	f43f af66 	beq.w	2419a <nrf_setsockopt+0xfa>
   242ce:	e70f      	b.n	240f0 <nrf_setsockopt+0x50>
   242d0:	2f1f      	cmp	r7, #31
   242d2:	e7fa      	b.n	242ca <nrf_setsockopt+0x22a>
   242d4:	2f20      	cmp	r7, #32
   242d6:	e7f8      	b.n	242ca <nrf_setsockopt+0x22a>
   242d8:	2300      	movs	r3, #0
   242da:	2208      	movs	r2, #8
   242dc:	7243      	strb	r3, [r0, #9]
   242de:	7202      	strb	r2, [r0, #8]
   242e0:	7283      	strb	r3, [r0, #10]
   242e2:	72c3      	strb	r3, [r0, #11]
   242e4:	f8c0 9010 	str.w	r9, [r0, #16]
   242e8:	4640      	mov	r0, r8
   242ea:	f006 fb72 	bl	2a9d2 <nrf_sol_to_rpc_sol>
   242ee:	6160      	str	r0, [r4, #20]
   242f0:	4638      	mov	r0, r7
   242f2:	f000 f9a3 	bl	2463c <nrf_so_to_rpc_so>
   242f6:	4631      	mov	r1, r6
   242f8:	61a0      	str	r0, [r4, #24]
   242fa:	462a      	mov	r2, r5
   242fc:	6820      	ldr	r0, [r4, #0]
   242fe:	f007 f8e1 	bl	2b4c4 <memcpy>
   24302:	4621      	mov	r1, r4
   24304:	f247 0003 	movw	r0, #28675	; 0x7003
   24308:	6065      	str	r5, [r4, #4]
   2430a:	f006 fb99 	bl	2aa40 <req_forward>
   2430e:	2800      	cmp	r0, #0
   24310:	f43f af0b 	beq.w	2412a <nrf_setsockopt+0x8a>
   24314:	e6d1      	b.n	240ba <nrf_setsockopt+0x1a>
   24316:	bf00      	nop
   24318:	0002eb00 	.word	0x0002eb00

0002431c <nrf_getsockopt>:
   2431c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24320:	9c08      	ldr	r4, [sp, #32]
   24322:	4681      	mov	r9, r0
   24324:	4688      	mov	r8, r1
   24326:	4617      	mov	r7, r2
   24328:	461e      	mov	r6, r3
   2432a:	f7ff fa3f 	bl	237ac <sock_find>
   2432e:	4605      	mov	r5, r0
   24330:	b930      	cbnz	r0, 24340 <nrf_getsockopt+0x24>
   24332:	2009      	movs	r0, #9
   24334:	f005 f8de 	bl	294f4 <nrf_modem_os_errno_set>
   24338:	f04f 30ff 	mov.w	r0, #4294967295
   2433c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24340:	b106      	cbz	r6, 24344 <nrf_getsockopt+0x28>
   24342:	b90c      	cbnz	r4, 24348 <nrf_getsockopt+0x2c>
   24344:	200e      	movs	r0, #14
   24346:	e7f5      	b.n	24334 <nrf_getsockopt+0x18>
   24348:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   2434c:	f000 808a 	beq.w	24464 <nrf_getsockopt+0x148>
   24350:	dc0a      	bgt.n	24368 <nrf_getsockopt+0x4c>
   24352:	f1b8 0f01 	cmp.w	r8, #1
   24356:	d00f      	beq.n	24378 <nrf_getsockopt+0x5c>
   24358:	f1b8 0f06 	cmp.w	r8, #6
   2435c:	d077      	beq.n	2444e <nrf_getsockopt+0x132>
   2435e:	f1b8 0f00 	cmp.w	r8, #0
   24362:	d07d      	beq.n	24460 <nrf_getsockopt+0x144>
   24364:	206d      	movs	r0, #109	; 0x6d
   24366:	e7e5      	b.n	24334 <nrf_getsockopt+0x18>
   24368:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   2436c:	d024      	beq.n	243b8 <nrf_getsockopt+0x9c>
   2436e:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   24372:	d1f7      	bne.n	24364 <nrf_getsockopt+0x48>
   24374:	2f1e      	cmp	r7, #30
   24376:	e06b      	b.n	24450 <nrf_getsockopt+0x134>
   24378:	2f14      	cmp	r7, #20
   2437a:	d00a      	beq.n	24392 <nrf_getsockopt+0x76>
   2437c:	2f15      	cmp	r7, #21
   2437e:	d013      	beq.n	243a8 <nrf_getsockopt+0x8c>
   24380:	2f04      	cmp	r7, #4
   24382:	d1ef      	bne.n	24364 <nrf_getsockopt+0x48>
   24384:	6983      	ldr	r3, [r0, #24]
   24386:	6027      	str	r7, [r4, #0]
   24388:	6033      	str	r3, [r6, #0]
   2438a:	2300      	movs	r3, #0
   2438c:	6183      	str	r3, [r0, #24]
   2438e:	2000      	movs	r0, #0
   24390:	e7d4      	b.n	2433c <nrf_getsockopt+0x20>
   24392:	6822      	ldr	r2, [r4, #0]
   24394:	f100 0120 	add.w	r1, r0, #32
   24398:	2a08      	cmp	r2, #8
   2439a:	bf28      	it	cs
   2439c:	2208      	movcs	r2, #8
   2439e:	6022      	str	r2, [r4, #0]
   243a0:	4630      	mov	r0, r6
   243a2:	f007 f88f 	bl	2b4c4 <memcpy>
   243a6:	e7f2      	b.n	2438e <nrf_getsockopt+0x72>
   243a8:	6822      	ldr	r2, [r4, #0]
   243aa:	f100 0128 	add.w	r1, r0, #40	; 0x28
   243ae:	2a08      	cmp	r2, #8
   243b0:	bf28      	it	cs
   243b2:	2208      	movcs	r2, #8
   243b4:	6022      	str	r2, [r4, #0]
   243b6:	e7f3      	b.n	243a0 <nrf_getsockopt+0x84>
   243b8:	1e7b      	subs	r3, r7, #1
   243ba:	2b0d      	cmp	r3, #13
   243bc:	d8d2      	bhi.n	24364 <nrf_getsockopt+0x48>
   243be:	a201      	add	r2, pc, #4	; (adr r2, 243c4 <nrf_getsockopt+0xa8>)
   243c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   243c4:	0002441d 	.word	0x0002441d
   243c8:	00024433 	.word	0x00024433
   243cc:	00024453 	.word	0x00024453
   243d0:	00024365 	.word	0x00024365
   243d4:	00024413 	.word	0x00024413
   243d8:	000243fd 	.word	0x000243fd
   243dc:	00024365 	.word	0x00024365
   243e0:	00024365 	.word	0x00024365
   243e4:	00024365 	.word	0x00024365
   243e8:	00024365 	.word	0x00024365
   243ec:	00024365 	.word	0x00024365
   243f0:	00024409 	.word	0x00024409
   243f4:	00024365 	.word	0x00024365
   243f8:	00024453 	.word	0x00024453
   243fc:	2304      	movs	r3, #4
   243fe:	6023      	str	r3, [r4, #0]
   24400:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   24404:	6033      	str	r3, [r6, #0]
   24406:	e7c2      	b.n	2438e <nrf_getsockopt+0x72>
   24408:	2304      	movs	r3, #4
   2440a:	6023      	str	r3, [r4, #0]
   2440c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
   24410:	e7f8      	b.n	24404 <nrf_getsockopt+0xe8>
   24412:	2304      	movs	r3, #4
   24414:	6023      	str	r3, [r4, #0]
   24416:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   2441a:	e7f3      	b.n	24404 <nrf_getsockopt+0xe8>
   2441c:	f890 2047 	ldrb.w	r2, [r0, #71]	; 0x47
   24420:	6823      	ldr	r3, [r4, #0]
   24422:	0092      	lsls	r2, r2, #2
   24424:	429a      	cmp	r2, r3
   24426:	bf28      	it	cs
   24428:	461a      	movcs	r2, r3
   2442a:	f100 0148 	add.w	r1, r0, #72	; 0x48
   2442e:	6022      	str	r2, [r4, #0]
   24430:	e7b6      	b.n	243a0 <nrf_getsockopt+0x84>
   24432:	6c00      	ldr	r0, [r0, #64]	; 0x40
   24434:	f7f4 fdda 	bl	18fec <strlen>
   24438:	6822      	ldr	r2, [r4, #0]
   2443a:	3001      	adds	r0, #1
   2443c:	4290      	cmp	r0, r2
   2443e:	d203      	bcs.n	24448 <nrf_getsockopt+0x12c>
   24440:	6c28      	ldr	r0, [r5, #64]	; 0x40
   24442:	f7f4 fdd3 	bl	18fec <strlen>
   24446:	1c42      	adds	r2, r0, #1
   24448:	6c29      	ldr	r1, [r5, #64]	; 0x40
   2444a:	6022      	str	r2, [r4, #0]
   2444c:	e7a8      	b.n	243a0 <nrf_getsockopt+0x84>
   2444e:	2f37      	cmp	r7, #55	; 0x37
   24450:	d188      	bne.n	24364 <nrf_getsockopt+0x48>
   24452:	6820      	ldr	r0, [r4, #0]
   24454:	f005 fcf6 	bl	29e44 <rpc_client_msg_alloc>
   24458:	4605      	mov	r5, r0
   2445a:	b928      	cbnz	r0, 24468 <nrf_getsockopt+0x14c>
   2445c:	2069      	movs	r0, #105	; 0x69
   2445e:	e769      	b.n	24334 <nrf_getsockopt+0x18>
   24460:	2f1f      	cmp	r7, #31
   24462:	e7f5      	b.n	24450 <nrf_getsockopt+0x134>
   24464:	2f20      	cmp	r7, #32
   24466:	e7f3      	b.n	24450 <nrf_getsockopt+0x134>
   24468:	2300      	movs	r3, #0
   2446a:	2208      	movs	r2, #8
   2446c:	7243      	strb	r3, [r0, #9]
   2446e:	7202      	strb	r2, [r0, #8]
   24470:	7283      	strb	r3, [r0, #10]
   24472:	72c3      	strb	r3, [r0, #11]
   24474:	f8c0 9010 	str.w	r9, [r0, #16]
   24478:	4640      	mov	r0, r8
   2447a:	f006 faaa 	bl	2a9d2 <nrf_sol_to_rpc_sol>
   2447e:	6168      	str	r0, [r5, #20]
   24480:	4638      	mov	r0, r7
   24482:	f000 f8db 	bl	2463c <nrf_so_to_rpc_so>
   24486:	4629      	mov	r1, r5
   24488:	61a8      	str	r0, [r5, #24]
   2448a:	f247 0004 	movw	r0, #28676	; 0x7004
   2448e:	682f      	ldr	r7, [r5, #0]
   24490:	f006 fad6 	bl	2aa40 <req_forward>
   24494:	2800      	cmp	r0, #0
   24496:	f47f af4d 	bne.w	24334 <nrf_getsockopt+0x18>
   2449a:	686a      	ldr	r2, [r5, #4]
   2449c:	6823      	ldr	r3, [r4, #0]
   2449e:	4639      	mov	r1, r7
   244a0:	429a      	cmp	r2, r3
   244a2:	bf28      	it	cs
   244a4:	461a      	movcs	r2, r3
   244a6:	4630      	mov	r0, r6
   244a8:	6022      	str	r2, [r4, #0]
   244aa:	f007 f80b 	bl	2b4c4 <memcpy>
   244ae:	4638      	mov	r0, r7
   244b0:	f005 fcf4 	bl	29e9c <rpc_client_msg_data_tx_free>
   244b4:	e76b      	b.n	2438e <nrf_getsockopt+0x72>
   244b6:	bf00      	nop

000244b8 <rpc_ip_init>:
   244b8:	b508      	push	{r3, lr}
   244ba:	f7ff f935 	bl	23728 <sock_init>
   244be:	f7ff f9eb 	bl	23898 <addrinfo_init>
   244c2:	2200      	movs	r2, #0
   244c4:	4b05      	ldr	r3, [pc, #20]	; (244dc <rpc_ip_init+0x24>)
   244c6:	4806      	ldr	r0, [pc, #24]	; (244e0 <rpc_ip_init+0x28>)
   244c8:	701a      	strb	r2, [r3, #0]
   244ca:	2201      	movs	r2, #1
   244cc:	4611      	mov	r1, r2
   244ce:	f7fa fb1d 	bl	1eb0c <nrf_modem_os_sem_init>
   244d2:	2800      	cmp	r0, #0
   244d4:	bf18      	it	ne
   244d6:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   244da:	bd08      	pop	{r3, pc}
   244dc:	2000e04d 	.word	0x2000e04d
   244e0:	2000d8a0 	.word	0x2000d8a0

000244e4 <on_tls_attach_res>:
   244e4:	b510      	push	{r4, lr}
   244e6:	6943      	ldr	r3, [r0, #20]
   244e8:	460c      	mov	r4, r1
   244ea:	b15b      	cbz	r3, 24504 <on_tls_attach_res+0x20>
   244ec:	7f0b      	ldrb	r3, [r1, #28]
   244ee:	f36f 1304 	bfc	r3, #4, #1
   244f2:	770b      	strb	r3, [r1, #28]
   244f4:	6940      	ldr	r0, [r0, #20]
   244f6:	f000 f8ad 	bl	24654 <rpc_error_to_nrf_errno>
   244fa:	4b03      	ldr	r3, [pc, #12]	; (24508 <on_tls_attach_res+0x24>)
   244fc:	61a0      	str	r0, [r4, #24]
   244fe:	6818      	ldr	r0, [r3, #0]
   24500:	f005 f800 	bl	29504 <nrf_modem_os_sem_give>
   24504:	2000      	movs	r0, #0
   24506:	bd10      	pop	{r4, pc}
   24508:	2000d8a0 	.word	0x2000d8a0

0002450c <on_tls_handshake_ntf>:
   2450c:	b510      	push	{r4, lr}
   2450e:	7f0b      	ldrb	r3, [r1, #28]
   24510:	460c      	mov	r4, r1
   24512:	f36f 1304 	bfc	r3, #4, #1
   24516:	770b      	strb	r3, [r1, #28]
   24518:	6900      	ldr	r0, [r0, #16]
   2451a:	b958      	cbnz	r0, 24534 <on_tls_handshake_ntf+0x28>
   2451c:	b2db      	uxtb	r3, r3
   2451e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   24522:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   24526:	770b      	strb	r3, [r1, #28]
   24528:	4b04      	ldr	r3, [pc, #16]	; (2453c <on_tls_handshake_ntf+0x30>)
   2452a:	6818      	ldr	r0, [r3, #0]
   2452c:	f004 ffea 	bl	29504 <nrf_modem_os_sem_give>
   24530:	2000      	movs	r0, #0
   24532:	bd10      	pop	{r4, pc}
   24534:	f000 f88e 	bl	24654 <rpc_error_to_nrf_errno>
   24538:	61a0      	str	r0, [r4, #24]
   2453a:	e7f5      	b.n	24528 <on_tls_handshake_ntf+0x1c>
   2453c:	2000d8a0 	.word	0x2000d8a0

00024540 <tls_attach>:
   24540:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24544:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 24628 <tls_attach+0xe8>
   24548:	4605      	mov	r5, r0
   2454a:	f8d8 0000 	ldr.w	r0, [r8]
   2454e:	9101      	str	r1, [sp, #4]
   24550:	f004 ffda 	bl	29508 <nrf_modem_os_sem_take>
   24554:	4607      	mov	r7, r0
   24556:	b150      	cbz	r0, 2456e <tls_attach+0x2e>
   24558:	9b01      	ldr	r3, [sp, #4]
   2455a:	2b00      	cmp	r3, #0
   2455c:	d162      	bne.n	24624 <tls_attach+0xe4>
   2455e:	2310      	movs	r3, #16
   24560:	61ab      	str	r3, [r5, #24]
   24562:	f04f 37ff 	mov.w	r7, #4294967295
   24566:	4638      	mov	r0, r7
   24568:	b002      	add	sp, #8
   2456a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2456e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   24570:	b1a8      	cbz	r0, 2459e <tls_attach+0x5e>
   24572:	f7f4 fd3b 	bl	18fec <strlen>
   24576:	1c46      	adds	r6, r0, #1
   24578:	4630      	mov	r0, r6
   2457a:	f005 fc63 	bl	29e44 <rpc_client_msg_alloc>
   2457e:	4604      	mov	r4, r0
   24580:	b978      	cbnz	r0, 245a2 <tls_attach+0x62>
   24582:	4628      	mov	r0, r5
   24584:	f005 fd2f 	bl	29fe6 <sock_is_nonblock>
   24588:	b108      	cbz	r0, 2458e <tls_attach+0x4e>
   2458a:	2369      	movs	r3, #105	; 0x69
   2458c:	61ab      	str	r3, [r5, #24]
   2458e:	f8d8 0000 	ldr.w	r0, [r8]
   24592:	f004 ffb7 	bl	29504 <nrf_modem_os_sem_give>
   24596:	2069      	movs	r0, #105	; 0x69
   24598:	f004 ffac 	bl	294f4 <nrf_modem_os_errno_set>
   2459c:	e7e1      	b.n	24562 <tls_attach+0x22>
   2459e:	463e      	mov	r6, r7
   245a0:	e7ea      	b.n	24578 <tls_attach+0x38>
   245a2:	682b      	ldr	r3, [r5, #0]
   245a4:	2204      	movs	r2, #4
   245a6:	6103      	str	r3, [r0, #16]
   245a8:	2300      	movs	r3, #0
   245aa:	7202      	strb	r2, [r0, #8]
   245ac:	7243      	strb	r3, [r0, #9]
   245ae:	7283      	strb	r3, [r0, #10]
   245b0:	72c3      	strb	r3, [r0, #11]
   245b2:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
   245b6:	f105 0144 	add.w	r1, r5, #68	; 0x44
   245ba:	3201      	adds	r2, #1
   245bc:	0092      	lsls	r2, r2, #2
   245be:	6082      	str	r2, [r0, #8]
   245c0:	3014      	adds	r0, #20
   245c2:	f006 ff7f 	bl	2b4c4 <memcpy>
   245c6:	b1e6      	cbz	r6, 24602 <tls_attach+0xc2>
   245c8:	4632      	mov	r2, r6
   245ca:	6c29      	ldr	r1, [r5, #64]	; 0x40
   245cc:	6820      	ldr	r0, [r4, #0]
   245ce:	f006 ffb7 	bl	2b540 <strncpy>
   245d2:	6066      	str	r6, [r4, #4]
   245d4:	7f2b      	ldrb	r3, [r5, #28]
   245d6:	2004      	movs	r0, #4
   245d8:	f043 0310 	orr.w	r3, r3, #16
   245dc:	4622      	mov	r2, r4
   245de:	f247 0181 	movw	r1, #28801	; 0x7081
   245e2:	772b      	strb	r3, [r5, #28]
   245e4:	f005 fc4a 	bl	29e7c <rpc_client_msg_send>
   245e8:	4628      	mov	r0, r5
   245ea:	f005 fcfc 	bl	29fe6 <sock_is_nonblock>
   245ee:	2800      	cmp	r0, #0
   245f0:	d1b9      	bne.n	24566 <tls_attach+0x26>
   245f2:	4628      	mov	r0, r5
   245f4:	f005 fcf3 	bl	29fde <sock_is_attaching>
   245f8:	b940      	cbnz	r0, 2460c <tls_attach+0xcc>
   245fa:	69a8      	ldr	r0, [r5, #24]
   245fc:	2800      	cmp	r0, #0
   245fe:	d0b2      	beq.n	24566 <tls_attach+0x26>
   24600:	e7ca      	b.n	24598 <tls_attach+0x58>
   24602:	7026      	strb	r6, [r4, #0]
   24604:	7066      	strb	r6, [r4, #1]
   24606:	70a6      	strb	r6, [r4, #2]
   24608:	70e6      	strb	r6, [r4, #3]
   2460a:	e7e2      	b.n	245d2 <tls_attach+0x92>
   2460c:	2002      	movs	r0, #2
   2460e:	a901      	add	r1, sp, #4
   24610:	f7fa f9ba 	bl	1e988 <nrf_modem_os_timedwait>
   24614:	f110 0f0b 	cmn.w	r0, #11
   24618:	d004      	beq.n	24624 <tls_attach+0xe4>
   2461a:	2800      	cmp	r0, #0
   2461c:	d0e9      	beq.n	245f2 <tls_attach+0xb2>
   2461e:	f006 ff2f 	bl	2b480 <abs>
   24622:	e7b9      	b.n	24598 <tls_attach+0x58>
   24624:	2074      	movs	r0, #116	; 0x74
   24626:	e7b7      	b.n	24598 <tls_attach+0x58>
   24628:	2000d8a0 	.word	0x2000d8a0

0002462c <nrf_af_to_rpc_af>:
   2462c:	2803      	cmp	r0, #3
   2462e:	bf9c      	itt	ls
   24630:	4b01      	ldrls	r3, [pc, #4]	; (24638 <nrf_af_to_rpc_af+0xc>)
   24632:	5618      	ldrsbls	r0, [r3, r0]
   24634:	4770      	bx	lr
   24636:	bf00      	nop
   24638:	0002eb04 	.word	0x0002eb04

0002463c <nrf_so_to_rpc_so>:
   2463c:	3802      	subs	r0, #2
   2463e:	2835      	cmp	r0, #53	; 0x35
   24640:	bf9a      	itte	ls
   24642:	4b03      	ldrls	r3, [pc, #12]	; (24650 <nrf_so_to_rpc_so+0x14>)
   24644:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   24648:	f04f 30ff 	movhi.w	r0, #4294967295
   2464c:	4770      	bx	lr
   2464e:	bf00      	nop
   24650:	0002c404 	.word	0x0002c404

00024654 <rpc_error_to_nrf_errno>:
   24654:	286c      	cmp	r0, #108	; 0x6c
   24656:	bf9a      	itte	ls
   24658:	4b02      	ldrls	r3, [pc, #8]	; (24664 <rpc_error_to_nrf_errno+0x10>)
   2465a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   2465e:	4802      	ldrhi	r0, [pc, #8]	; (24668 <rpc_error_to_nrf_errno+0x14>)
   24660:	4770      	bx	lr
   24662:	bf00      	nop
   24664:	0002c250 	.word	0x0002c250
   24668:	baadbaad 	.word	0xbaadbaad

0002466c <at_cmd_send>:
   2466c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24670:	4605      	mov	r5, r0
   24672:	2000      	movs	r0, #0
   24674:	4617      	mov	r7, r2
   24676:	4688      	mov	r8, r1
   24678:	461e      	mov	r6, r3
   2467a:	f005 fbe3 	bl	29e44 <rpc_client_msg_alloc>
   2467e:	4602      	mov	r2, r0
   24680:	b940      	cbnz	r0, 24694 <at_cmd_send+0x28>
   24682:	b115      	cbz	r5, 2468a <at_cmd_send+0x1e>
   24684:	4628      	mov	r0, r5
   24686:	f005 fc09 	bl	29e9c <rpc_client_msg_data_tx_free>
   2468a:	f06f 000b 	mvn.w	r0, #11
   2468e:	b002      	add	sp, #8
   24690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24694:	f06f 0358 	mvn.w	r3, #88	; 0x58
   24698:	2400      	movs	r4, #0
   2469a:	7303      	strb	r3, [r0, #12]
   2469c:	2304      	movs	r3, #4
   2469e:	6005      	str	r5, [r0, #0]
   246a0:	4d0e      	ldr	r5, [pc, #56]	; (246dc <at_cmd_send+0x70>)
   246a2:	7203      	strb	r3, [r0, #8]
   246a4:	7344      	strb	r4, [r0, #13]
   246a6:	7384      	strb	r4, [r0, #14]
   246a8:	73c4      	strb	r4, [r0, #15]
   246aa:	7244      	strb	r4, [r0, #9]
   246ac:	7284      	strb	r4, [r0, #10]
   246ae:	72c4      	strb	r4, [r0, #11]
   246b0:	f8c0 8004 	str.w	r8, [r0, #4]
   246b4:	4639      	mov	r1, r7
   246b6:	2003      	movs	r0, #3
   246b8:	702c      	strb	r4, [r5, #0]
   246ba:	f005 fbdf 	bl	29e7c <rpc_client_msg_send>
   246be:	f04f 33ff 	mov.w	r3, #4294967295
   246c2:	9301      	str	r3, [sp, #4]
   246c4:	782b      	ldrb	r3, [r5, #0]
   246c6:	42b3      	cmp	r3, r6
   246c8:	d101      	bne.n	246ce <at_cmd_send+0x62>
   246ca:	2000      	movs	r0, #0
   246cc:	e7df      	b.n	2468e <at_cmd_send+0x22>
   246ce:	2002      	movs	r0, #2
   246d0:	a901      	add	r1, sp, #4
   246d2:	f7fa f959 	bl	1e988 <nrf_modem_os_timedwait>
   246d6:	2800      	cmp	r0, #0
   246d8:	d0f4      	beq.n	246c4 <at_cmd_send+0x58>
   246da:	e7d8      	b.n	2468e <at_cmd_send+0x22>
   246dc:	2000e04e 	.word	0x2000e04e

000246e0 <at_response_match>:
   246e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   246e2:	4605      	mov	r5, r0
   246e4:	2400      	movs	r4, #0
   246e6:	4f0f      	ldr	r7, [pc, #60]	; (24724 <at_response_match+0x44>)
   246e8:	f857 6b04 	ldr.w	r6, [r7], #4
   246ec:	4628      	mov	r0, r5
   246ee:	4631      	mov	r1, r6
   246f0:	f006 ff45 	bl	2b57e <strstr>
   246f4:	b928      	cbnz	r0, 24702 <at_response_match+0x22>
   246f6:	3401      	adds	r4, #1
   246f8:	2c04      	cmp	r4, #4
   246fa:	d1f5      	bne.n	246e8 <at_response_match+0x8>
   246fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   24700:	e00d      	b.n	2471e <at_response_match+0x3e>
   24702:	b16c      	cbz	r4, 24720 <at_response_match+0x40>
   24704:	1ea3      	subs	r3, r4, #2
   24706:	2b01      	cmp	r3, #1
   24708:	d8f8      	bhi.n	246fc <at_response_match+0x1c>
   2470a:	4630      	mov	r0, r6
   2470c:	f7f4 fc6e 	bl	18fec <strlen>
   24710:	220a      	movs	r2, #10
   24712:	2100      	movs	r1, #0
   24714:	4428      	add	r0, r5
   24716:	f002 f847 	bl	267a8 <strtol>
   2471a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   2471e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24720:	4620      	mov	r0, r4
   24722:	e7fc      	b.n	2471e <at_response_match+0x3e>
   24724:	0002c4dc 	.word	0x0002c4dc

00024728 <at_vsprintf>:
   24728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2472c:	2500      	movs	r5, #0
   2472e:	4681      	mov	r9, r0
   24730:	460f      	mov	r7, r1
   24732:	4810      	ldr	r0, [pc, #64]	; (24774 <at_vsprintf+0x4c>)
   24734:	4629      	mov	r1, r5
   24736:	4690      	mov	r8, r2
   24738:	461e      	mov	r6, r3
   2473a:	9301      	str	r3, [sp, #4]
   2473c:	f002 f958 	bl	269f0 <vsniprintf>
   24740:	1e04      	subs	r4, r0, #0
   24742:	db11      	blt.n	24768 <at_vsprintf+0x40>
   24744:	3401      	adds	r4, #1
   24746:	4620      	mov	r0, r4
   24748:	f005 fba6 	bl	29e98 <rpc_client_msg_data_tx_alloc>
   2474c:	f8c9 0000 	str.w	r0, [r9]
   24750:	b168      	cbz	r0, 2476e <at_vsprintf+0x46>
   24752:	4633      	mov	r3, r6
   24754:	4642      	mov	r2, r8
   24756:	4621      	mov	r1, r4
   24758:	9601      	str	r6, [sp, #4]
   2475a:	f002 f949 	bl	269f0 <vsniprintf>
   2475e:	4628      	mov	r0, r5
   24760:	603c      	str	r4, [r7, #0]
   24762:	b003      	add	sp, #12
   24764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24768:	f06f 0015 	mvn.w	r0, #21
   2476c:	e7f9      	b.n	24762 <at_vsprintf+0x3a>
   2476e:	f06f 000b 	mvn.w	r0, #11
   24772:	e7f6      	b.n	24762 <at_vsprintf+0x3a>
   24774:	0002beac 	.word	0x0002beac

00024778 <nrf_modem_at_notif_handler_set>:
   24778:	4b01      	ldr	r3, [pc, #4]	; (24780 <nrf_modem_at_notif_handler_set+0x8>)
   2477a:	6018      	str	r0, [r3, #0]
   2477c:	2000      	movs	r0, #0
   2477e:	4770      	bx	lr
   24780:	2000d8b0 	.word	0x2000d8b0

00024784 <nrf_modem_at_printf>:
   24784:	b40f      	push	{r0, r1, r2, r3}
   24786:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   24788:	9c08      	ldr	r4, [sp, #32]
   2478a:	f000 fac1 	bl	24d10 <nrf_modem_state_is_initialized>
   2478e:	2800      	cmp	r0, #0
   24790:	d039      	beq.n	24806 <nrf_modem_at_printf+0x82>
   24792:	2c00      	cmp	r4, #0
   24794:	d03a      	beq.n	2480c <nrf_modem_at_printf+0x88>
   24796:	4622      	mov	r2, r4
   24798:	ab09      	add	r3, sp, #36	; 0x24
   2479a:	a903      	add	r1, sp, #12
   2479c:	a802      	add	r0, sp, #8
   2479e:	9301      	str	r3, [sp, #4]
   247a0:	f7ff ffc2 	bl	24728 <at_vsprintf>
   247a4:	4604      	mov	r4, r0
   247a6:	b960      	cbnz	r0, 247c2 <nrf_modem_at_printf+0x3e>
   247a8:	4e1a      	ldr	r6, [pc, #104]	; (24814 <nrf_modem_at_printf+0x90>)
   247aa:	f04f 31ff 	mov.w	r1, #4294967295
   247ae:	6830      	ldr	r0, [r6, #0]
   247b0:	f004 feaa 	bl	29508 <nrf_modem_os_sem_take>
   247b4:	4603      	mov	r3, r0
   247b6:	9802      	ldr	r0, [sp, #8]
   247b8:	b14b      	cbz	r3, 247ce <nrf_modem_at_printf+0x4a>
   247ba:	f005 fb6f 	bl	29e9c <rpc_client_msg_data_tx_free>
   247be:	f06f 040a 	mvn.w	r4, #10
   247c2:	4620      	mov	r0, r4
   247c4:	b004      	add	sp, #16
   247c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   247ca:	b004      	add	sp, #16
   247cc:	4770      	bx	lr
   247ce:	2302      	movs	r3, #2
   247d0:	2201      	movs	r2, #1
   247d2:	9903      	ldr	r1, [sp, #12]
   247d4:	f7ff ff4a 	bl	2466c <at_cmd_send>
   247d8:	4604      	mov	r4, r0
   247da:	b118      	cbz	r0, 247e4 <nrf_modem_at_printf+0x60>
   247dc:	6830      	ldr	r0, [r6, #0]
   247de:	f004 fe91 	bl	29504 <nrf_modem_os_sem_give>
   247e2:	e7ee      	b.n	247c2 <nrf_modem_at_printf+0x3e>
   247e4:	4d0c      	ldr	r5, [pc, #48]	; (24818 <nrf_modem_at_printf+0x94>)
   247e6:	682b      	ldr	r3, [r5, #0]
   247e8:	6818      	ldr	r0, [r3, #0]
   247ea:	f7ff ff79 	bl	246e0 <at_response_match>
   247ee:	4604      	mov	r4, r0
   247f0:	6830      	ldr	r0, [r6, #0]
   247f2:	f004 fe87 	bl	29504 <nrf_modem_os_sem_give>
   247f6:	682b      	ldr	r3, [r5, #0]
   247f8:	6818      	ldr	r0, [r3, #0]
   247fa:	f005 fb49 	bl	29e90 <rpc_client_msg_data_rx_free>
   247fe:	6828      	ldr	r0, [r5, #0]
   24800:	f005 fb43 	bl	29e8a <rpc_client_msg_rx_free>
   24804:	e7dd      	b.n	247c2 <nrf_modem_at_printf+0x3e>
   24806:	f04f 34ff 	mov.w	r4, #4294967295
   2480a:	e7da      	b.n	247c2 <nrf_modem_at_printf+0x3e>
   2480c:	f06f 040d 	mvn.w	r4, #13
   24810:	e7d7      	b.n	247c2 <nrf_modem_at_printf+0x3e>
   24812:	bf00      	nop
   24814:	2000d8b8 	.word	0x2000d8b8
   24818:	2000d8b4 	.word	0x2000d8b4

0002481c <nrf_modem_at_cmd>:
   2481c:	b40c      	push	{r2, r3}
   2481e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24822:	b085      	sub	sp, #20
   24824:	4606      	mov	r6, r0
   24826:	460d      	mov	r5, r1
   24828:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   2482a:	f000 fa71 	bl	24d10 <nrf_modem_state_is_initialized>
   2482e:	2800      	cmp	r0, #0
   24830:	f000 8081 	beq.w	24936 <nrf_modem_at_cmd+0x11a>
   24834:	2e00      	cmp	r6, #0
   24836:	f000 8081 	beq.w	2493c <nrf_modem_at_cmd+0x120>
   2483a:	2c00      	cmp	r4, #0
   2483c:	d07e      	beq.n	2493c <nrf_modem_at_cmd+0x120>
   2483e:	2d00      	cmp	r5, #0
   24840:	d07f      	beq.n	24942 <nrf_modem_at_cmd+0x126>
   24842:	4622      	mov	r2, r4
   24844:	ab0f      	add	r3, sp, #60	; 0x3c
   24846:	a903      	add	r1, sp, #12
   24848:	a802      	add	r0, sp, #8
   2484a:	9301      	str	r3, [sp, #4]
   2484c:	f7ff ff6c 	bl	24728 <at_vsprintf>
   24850:	4604      	mov	r4, r0
   24852:	2800      	cmp	r0, #0
   24854:	d13c      	bne.n	248d0 <nrf_modem_at_cmd+0xb4>
   24856:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 24948 <nrf_modem_at_cmd+0x12c>
   2485a:	9f02      	ldr	r7, [sp, #8]
   2485c:	f8d8 3000 	ldr.w	r3, [r8]
   24860:	b1c3      	cbz	r3, 24894 <nrf_modem_at_cmd+0x78>
   24862:	f04f 0b0c 	mov.w	fp, #12
   24866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2494c <nrf_modem_at_cmd+0x130>
   2486a:	f8da 3000 	ldr.w	r3, [sl]
   2486e:	429c      	cmp	r4, r3
   24870:	d210      	bcs.n	24894 <nrf_modem_at_cmd+0x78>
   24872:	fb0b f904 	mul.w	r9, fp, r4
   24876:	f8d8 3000 	ldr.w	r3, [r8]
   2487a:	4638      	mov	r0, r7
   2487c:	f853 1009 	ldr.w	r1, [r3, r9]
   24880:	f006 fe7d 	bl	2b57e <strstr>
   24884:	b1a8      	cbz	r0, 248b2 <nrf_modem_at_cmd+0x96>
   24886:	f8d8 3000 	ldr.w	r3, [r8]
   2488a:	444b      	add	r3, r9
   2488c:	7a1a      	ldrb	r2, [r3, #8]
   2488e:	b982      	cbnz	r2, 248b2 <nrf_modem_at_cmd+0x96>
   24890:	685b      	ldr	r3, [r3, #4]
   24892:	b983      	cbnz	r3, 248b6 <nrf_modem_at_cmd+0x9a>
   24894:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 24950 <nrf_modem_at_cmd+0x134>
   24898:	f04f 31ff 	mov.w	r1, #4294967295
   2489c:	f8d8 0000 	ldr.w	r0, [r8]
   248a0:	f004 fe32 	bl	29508 <nrf_modem_os_sem_take>
   248a4:	b1d0      	cbz	r0, 248dc <nrf_modem_at_cmd+0xc0>
   248a6:	4638      	mov	r0, r7
   248a8:	f005 faf8 	bl	29e9c <rpc_client_msg_data_tx_free>
   248ac:	f06f 040a 	mvn.w	r4, #10
   248b0:	e00e      	b.n	248d0 <nrf_modem_at_cmd+0xb4>
   248b2:	3401      	adds	r4, #1
   248b4:	e7d9      	b.n	2486a <nrf_modem_at_cmd+0x4e>
   248b6:	463a      	mov	r2, r7
   248b8:	4629      	mov	r1, r5
   248ba:	4630      	mov	r0, r6
   248bc:	4798      	blx	r3
   248be:	4604      	mov	r4, r0
   248c0:	b918      	cbnz	r0, 248ca <nrf_modem_at_cmd+0xae>
   248c2:	4630      	mov	r0, r6
   248c4:	f7ff ff0c 	bl	246e0 <at_response_match>
   248c8:	4604      	mov	r4, r0
   248ca:	4638      	mov	r0, r7
   248cc:	f005 fae6 	bl	29e9c <rpc_client_msg_data_tx_free>
   248d0:	4620      	mov	r0, r4
   248d2:	b005      	add	sp, #20
   248d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   248d8:	b002      	add	sp, #8
   248da:	4770      	bx	lr
   248dc:	2302      	movs	r3, #2
   248de:	2201      	movs	r2, #1
   248e0:	4638      	mov	r0, r7
   248e2:	9903      	ldr	r1, [sp, #12]
   248e4:	f7ff fec2 	bl	2466c <at_cmd_send>
   248e8:	4604      	mov	r4, r0
   248ea:	b120      	cbz	r0, 248f6 <nrf_modem_at_cmd+0xda>
   248ec:	f8d8 0000 	ldr.w	r0, [r8]
   248f0:	f004 fe08 	bl	29504 <nrf_modem_os_sem_give>
   248f4:	e7ec      	b.n	248d0 <nrf_modem_at_cmd+0xb4>
   248f6:	4f17      	ldr	r7, [pc, #92]	; (24954 <nrf_modem_at_cmd+0x138>)
   248f8:	4630      	mov	r0, r6
   248fa:	683c      	ldr	r4, [r7, #0]
   248fc:	6862      	ldr	r2, [r4, #4]
   248fe:	6821      	ldr	r1, [r4, #0]
   24900:	42aa      	cmp	r2, r5
   24902:	bf28      	it	cs
   24904:	462a      	movcs	r2, r5
   24906:	f006 fddd 	bl	2b4c4 <memcpy>
   2490a:	6863      	ldr	r3, [r4, #4]
   2490c:	42ab      	cmp	r3, r5
   2490e:	d80f      	bhi.n	24930 <nrf_modem_at_cmd+0x114>
   24910:	6820      	ldr	r0, [r4, #0]
   24912:	f7ff fee5 	bl	246e0 <at_response_match>
   24916:	4604      	mov	r4, r0
   24918:	f8d8 0000 	ldr.w	r0, [r8]
   2491c:	f004 fdf2 	bl	29504 <nrf_modem_os_sem_give>
   24920:	683b      	ldr	r3, [r7, #0]
   24922:	6818      	ldr	r0, [r3, #0]
   24924:	f005 fab4 	bl	29e90 <rpc_client_msg_data_rx_free>
   24928:	6838      	ldr	r0, [r7, #0]
   2492a:	f005 faae 	bl	29e8a <rpc_client_msg_rx_free>
   2492e:	e7cf      	b.n	248d0 <nrf_modem_at_cmd+0xb4>
   24930:	f06f 0406 	mvn.w	r4, #6
   24934:	e7f0      	b.n	24918 <nrf_modem_at_cmd+0xfc>
   24936:	f04f 34ff 	mov.w	r4, #4294967295
   2493a:	e7c9      	b.n	248d0 <nrf_modem_at_cmd+0xb4>
   2493c:	f06f 040d 	mvn.w	r4, #13
   24940:	e7c6      	b.n	248d0 <nrf_modem_at_cmd+0xb4>
   24942:	f06f 0415 	mvn.w	r4, #21
   24946:	e7c3      	b.n	248d0 <nrf_modem_at_cmd+0xb4>
   24948:	2000d8a8 	.word	0x2000d8a8
   2494c:	2000d8a4 	.word	0x2000d8a4
   24950:	2000d8b8 	.word	0x2000d8b8
   24954:	2000d8b4 	.word	0x2000d8b4

00024958 <nrf_modem_at_scanf>:
   24958:	b40e      	push	{r1, r2, r3}
   2495a:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   2495c:	9f07      	ldr	r7, [sp, #28]
   2495e:	4606      	mov	r6, r0
   24960:	f000 f9d6 	bl	24d10 <nrf_modem_state_is_initialized>
   24964:	2800      	cmp	r0, #0
   24966:	d042      	beq.n	249ee <nrf_modem_at_scanf+0x96>
   24968:	2e00      	cmp	r6, #0
   2496a:	d043      	beq.n	249f4 <nrf_modem_at_scanf+0x9c>
   2496c:	2f00      	cmp	r7, #0
   2496e:	d041      	beq.n	249f4 <nrf_modem_at_scanf+0x9c>
   24970:	4630      	mov	r0, r6
   24972:	f7f4 fb3b 	bl	18fec <strlen>
   24976:	1c45      	adds	r5, r0, #1
   24978:	4628      	mov	r0, r5
   2497a:	f005 fa8d 	bl	29e98 <rpc_client_msg_data_tx_alloc>
   2497e:	4604      	mov	r4, r0
   24980:	2800      	cmp	r0, #0
   24982:	d03a      	beq.n	249fa <nrf_modem_at_scanf+0xa2>
   24984:	4631      	mov	r1, r6
   24986:	4e1e      	ldr	r6, [pc, #120]	; (24a00 <nrf_modem_at_scanf+0xa8>)
   24988:	462a      	mov	r2, r5
   2498a:	f006 fdd9 	bl	2b540 <strncpy>
   2498e:	f04f 31ff 	mov.w	r1, #4294967295
   24992:	6830      	ldr	r0, [r6, #0]
   24994:	f004 fdb8 	bl	29508 <nrf_modem_os_sem_take>
   24998:	b150      	cbz	r0, 249b0 <nrf_modem_at_scanf+0x58>
   2499a:	4620      	mov	r0, r4
   2499c:	f005 fa7e 	bl	29e9c <rpc_client_msg_data_tx_free>
   249a0:	f06f 040a 	mvn.w	r4, #10
   249a4:	4620      	mov	r0, r4
   249a6:	b002      	add	sp, #8
   249a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   249ac:	b003      	add	sp, #12
   249ae:	4770      	bx	lr
   249b0:	4620      	mov	r0, r4
   249b2:	2302      	movs	r3, #2
   249b4:	2201      	movs	r2, #1
   249b6:	4629      	mov	r1, r5
   249b8:	f7ff fe58 	bl	2466c <at_cmd_send>
   249bc:	4604      	mov	r4, r0
   249be:	b990      	cbnz	r0, 249e6 <nrf_modem_at_scanf+0x8e>
   249c0:	4d10      	ldr	r5, [pc, #64]	; (24a04 <nrf_modem_at_scanf+0xac>)
   249c2:	aa08      	add	r2, sp, #32
   249c4:	682b      	ldr	r3, [r5, #0]
   249c6:	4639      	mov	r1, r7
   249c8:	6818      	ldr	r0, [r3, #0]
   249ca:	9201      	str	r2, [sp, #4]
   249cc:	f002 f842 	bl	26a54 <vsiscanf>
   249d0:	682b      	ldr	r3, [r5, #0]
   249d2:	1e04      	subs	r4, r0, #0
   249d4:	6818      	ldr	r0, [r3, #0]
   249d6:	bf08      	it	eq
   249d8:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   249dc:	f005 fa58 	bl	29e90 <rpc_client_msg_data_rx_free>
   249e0:	6828      	ldr	r0, [r5, #0]
   249e2:	f005 fa52 	bl	29e8a <rpc_client_msg_rx_free>
   249e6:	6830      	ldr	r0, [r6, #0]
   249e8:	f004 fd8c 	bl	29504 <nrf_modem_os_sem_give>
   249ec:	e7da      	b.n	249a4 <nrf_modem_at_scanf+0x4c>
   249ee:	f04f 34ff 	mov.w	r4, #4294967295
   249f2:	e7d7      	b.n	249a4 <nrf_modem_at_scanf+0x4c>
   249f4:	f06f 040d 	mvn.w	r4, #13
   249f8:	e7d4      	b.n	249a4 <nrf_modem_at_scanf+0x4c>
   249fa:	f06f 040b 	mvn.w	r4, #11
   249fe:	e7d1      	b.n	249a4 <nrf_modem_at_scanf+0x4c>
   24a00:	2000d8b8 	.word	0x2000d8b8
   24a04:	2000d8b4 	.word	0x2000d8b4

00024a08 <rpc_at_event_handler>:
   24a08:	b538      	push	{r3, r4, r5, lr}
   24a0a:	68c3      	ldr	r3, [r0, #12]
   24a0c:	4604      	mov	r4, r0
   24a0e:	2ba7      	cmp	r3, #167	; 0xa7
   24a10:	d003      	beq.n	24a1a <rpc_at_event_handler+0x12>
   24a12:	6820      	ldr	r0, [r4, #0]
   24a14:	f005 fa3c 	bl	29e90 <rpc_client_msg_data_rx_free>
   24a18:	e008      	b.n	24a2c <rpc_at_event_handler+0x24>
   24a1a:	2903      	cmp	r1, #3
   24a1c:	d008      	beq.n	24a30 <rpc_at_event_handler+0x28>
   24a1e:	2904      	cmp	r1, #4
   24a20:	d021      	beq.n	24a66 <rpc_at_event_handler+0x5e>
   24a22:	2902      	cmp	r1, #2
   24a24:	bf02      	ittt	eq
   24a26:	2201      	moveq	r2, #1
   24a28:	4b12      	ldreq	r3, [pc, #72]	; (24a74 <rpc_at_event_handler+0x6c>)
   24a2a:	701a      	strbeq	r2, [r3, #0]
   24a2c:	2000      	movs	r0, #0
   24a2e:	bd38      	pop	{r3, r4, r5, pc}
   24a30:	4d11      	ldr	r5, [pc, #68]	; (24a78 <rpc_at_event_handler+0x70>)
   24a32:	682b      	ldr	r3, [r5, #0]
   24a34:	b13b      	cbz	r3, 24a46 <rpc_at_event_handler+0x3e>
   24a36:	6800      	ldr	r0, [r0, #0]
   24a38:	4798      	blx	r3
   24a3a:	2300      	movs	r3, #0
   24a3c:	6820      	ldr	r0, [r4, #0]
   24a3e:	602b      	str	r3, [r5, #0]
   24a40:	f005 fa26 	bl	29e90 <rpc_client_msg_data_rx_free>
   24a44:	e006      	b.n	24a54 <rpc_at_event_handler+0x4c>
   24a46:	4b0b      	ldr	r3, [pc, #44]	; (24a74 <rpc_at_event_handler+0x6c>)
   24a48:	781a      	ldrb	r2, [r3, #0]
   24a4a:	2a02      	cmp	r2, #2
   24a4c:	d105      	bne.n	24a5a <rpc_at_event_handler+0x52>
   24a4e:	6800      	ldr	r0, [r0, #0]
   24a50:	2800      	cmp	r0, #0
   24a52:	d1f5      	bne.n	24a40 <rpc_at_event_handler+0x38>
   24a54:	2000      	movs	r0, #0
   24a56:	b2c0      	uxtb	r0, r0
   24a58:	e7e9      	b.n	24a2e <rpc_at_event_handler+0x26>
   24a5a:	4a08      	ldr	r2, [pc, #32]	; (24a7c <rpc_at_event_handler+0x74>)
   24a5c:	6010      	str	r0, [r2, #0]
   24a5e:	2202      	movs	r2, #2
   24a60:	2001      	movs	r0, #1
   24a62:	701a      	strb	r2, [r3, #0]
   24a64:	e7f7      	b.n	24a56 <rpc_at_event_handler+0x4e>
   24a66:	4b06      	ldr	r3, [pc, #24]	; (24a80 <rpc_at_event_handler+0x78>)
   24a68:	681b      	ldr	r3, [r3, #0]
   24a6a:	2b00      	cmp	r3, #0
   24a6c:	d0d1      	beq.n	24a12 <rpc_at_event_handler+0xa>
   24a6e:	6800      	ldr	r0, [r0, #0]
   24a70:	4798      	blx	r3
   24a72:	e7ce      	b.n	24a12 <rpc_at_event_handler+0xa>
   24a74:	2000e04e 	.word	0x2000e04e
   24a78:	2000d8ac 	.word	0x2000d8ac
   24a7c:	2000d8b4 	.word	0x2000d8b4
   24a80:	2000d8b0 	.word	0x2000d8b0

00024a84 <rpc_at_init>:
   24a84:	2201      	movs	r2, #1
   24a86:	b510      	push	{r4, lr}
   24a88:	4611      	mov	r1, r2
   24a8a:	4807      	ldr	r0, [pc, #28]	; (24aa8 <rpc_at_init+0x24>)
   24a8c:	f7fa f83e 	bl	1eb0c <nrf_modem_os_sem_init>
   24a90:	4601      	mov	r1, r0
   24a92:	b928      	cbnz	r0, 24aa0 <rpc_at_init+0x1c>
   24a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24a98:	2301      	movs	r3, #1
   24a9a:	2205      	movs	r2, #5
   24a9c:	f7ff bde6 	b.w	2466c <at_cmd_send>
   24aa0:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   24aa4:	bd10      	pop	{r4, pc}
   24aa6:	bf00      	nop
   24aa8:	2000d8b8 	.word	0x2000d8b8

00024aac <rpc_gnss_event_handler>:
   24aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24aae:	6804      	ldr	r4, [r0, #0]
   24ab0:	4606      	mov	r6, r0
   24ab2:	b13c      	cbz	r4, 24ac4 <rpc_gnss_event_handler+0x18>
   24ab4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   24ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   24abc:	d104      	bne.n	24ac8 <rpc_gnss_event_handler+0x1c>
   24abe:	4b41      	ldr	r3, [pc, #260]	; (24bc4 <rpc_gnss_event_handler+0x118>)
   24ac0:	e9c3 1400 	strd	r1, r4, [r3]
   24ac4:	2000      	movs	r0, #0
   24ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24ac8:	4d3f      	ldr	r5, [pc, #252]	; (24bc8 <rpc_gnss_event_handler+0x11c>)
   24aca:	682b      	ldr	r3, [r5, #0]
   24acc:	2b00      	cmp	r3, #0
   24ace:	d06f      	beq.n	24bb0 <rpc_gnss_event_handler+0x104>
   24ad0:	f244 0204 	movw	r2, #16388	; 0x4004
   24ad4:	4291      	cmp	r1, r2
   24ad6:	d80b      	bhi.n	24af0 <rpc_gnss_event_handler+0x44>
   24ad8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   24adc:	d968      	bls.n	24bb0 <rpc_gnss_event_handler+0x104>
   24ade:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
   24ae2:	3902      	subs	r1, #2
   24ae4:	2902      	cmp	r1, #2
   24ae6:	d82a      	bhi.n	24b3e <rpc_gnss_event_handler+0x92>
   24ae8:	e8df f001 	tbb	[pc, r1]
   24aec:	5047      	.short	0x5047
   24aee:	59          	.byte	0x59
   24aef:	00          	.byte	0x00
   24af0:	f244 1301 	movw	r3, #16641	; 0x4101
   24af4:	4299      	cmp	r1, r3
   24af6:	d02e      	beq.n	24b56 <rpc_gnss_event_handler+0xaa>
   24af8:	f244 2301 	movw	r3, #16897	; 0x4201
   24afc:	4299      	cmp	r1, r3
   24afe:	d157      	bne.n	24bb0 <rpc_gnss_event_handler+0x104>
   24b00:	4e32      	ldr	r6, [pc, #200]	; (24bcc <rpc_gnss_event_handler+0x120>)
   24b02:	6830      	ldr	r0, [r6, #0]
   24b04:	b108      	cbz	r0, 24b0a <rpc_gnss_event_handler+0x5e>
   24b06:	f005 f9c3 	bl	29e90 <rpc_client_msg_data_rx_free>
   24b0a:	2202      	movs	r2, #2
   24b0c:	4b30      	ldr	r3, [pc, #192]	; (24bd0 <rpc_gnss_event_handler+0x124>)
   24b0e:	6034      	str	r4, [r6, #0]
   24b10:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   24b14:	701a      	strb	r2, [r3, #0]
   24b16:	4e2f      	ldr	r6, [pc, #188]	; (24bd4 <rpc_gnss_event_handler+0x128>)
   24b18:	f014 0708 	ands.w	r7, r4, #8
   24b1c:	682b      	ldr	r3, [r5, #0]
   24b1e:	7832      	ldrb	r2, [r6, #0]
   24b20:	d025      	beq.n	24b6e <rpc_gnss_event_handler+0xc2>
   24b22:	b91a      	cbnz	r2, 24b2c <rpc_gnss_event_handler+0x80>
   24b24:	2005      	movs	r0, #5
   24b26:	4798      	blx	r3
   24b28:	2301      	movs	r3, #1
   24b2a:	7033      	strb	r3, [r6, #0]
   24b2c:	07e3      	lsls	r3, r4, #31
   24b2e:	d502      	bpl.n	24b36 <rpc_gnss_event_handler+0x8a>
   24b30:	2002      	movs	r0, #2
   24b32:	682b      	ldr	r3, [r5, #0]
   24b34:	4798      	blx	r3
   24b36:	2001      	movs	r0, #1
   24b38:	682b      	ldr	r3, [r5, #0]
   24b3a:	4798      	blx	r3
   24b3c:	e7c2      	b.n	24ac4 <rpc_gnss_event_handler+0x18>
   24b3e:	4e23      	ldr	r6, [pc, #140]	; (24bcc <rpc_gnss_event_handler+0x120>)
   24b40:	6830      	ldr	r0, [r6, #0]
   24b42:	b108      	cbz	r0, 24b48 <rpc_gnss_event_handler+0x9c>
   24b44:	f005 f9a4 	bl	29e90 <rpc_client_msg_data_rx_free>
   24b48:	2200      	movs	r2, #0
   24b4a:	4b21      	ldr	r3, [pc, #132]	; (24bd0 <rpc_gnss_event_handler+0x124>)
   24b4c:	6034      	str	r4, [r6, #0]
   24b4e:	701a      	strb	r2, [r3, #0]
   24b50:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
   24b54:	e7df      	b.n	24b16 <rpc_gnss_event_handler+0x6a>
   24b56:	4e1d      	ldr	r6, [pc, #116]	; (24bcc <rpc_gnss_event_handler+0x120>)
   24b58:	6830      	ldr	r0, [r6, #0]
   24b5a:	b108      	cbz	r0, 24b60 <rpc_gnss_event_handler+0xb4>
   24b5c:	f005 f998 	bl	29e90 <rpc_client_msg_data_rx_free>
   24b60:	2201      	movs	r2, #1
   24b62:	4b1b      	ldr	r3, [pc, #108]	; (24bd0 <rpc_gnss_event_handler+0x124>)
   24b64:	6034      	str	r4, [r6, #0]
   24b66:	701a      	strb	r2, [r3, #0]
   24b68:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
   24b6c:	e7d3      	b.n	24b16 <rpc_gnss_event_handler+0x6a>
   24b6e:	2a00      	cmp	r2, #0
   24b70:	d0dc      	beq.n	24b2c <rpc_gnss_event_handler+0x80>
   24b72:	2006      	movs	r0, #6
   24b74:	4798      	blx	r3
   24b76:	7037      	strb	r7, [r6, #0]
   24b78:	e7d8      	b.n	24b2c <rpc_gnss_event_handler+0x80>
   24b7a:	4e17      	ldr	r6, [pc, #92]	; (24bd8 <rpc_gnss_event_handler+0x12c>)
   24b7c:	6830      	ldr	r0, [r6, #0]
   24b7e:	b108      	cbz	r0, 24b84 <rpc_gnss_event_handler+0xd8>
   24b80:	f005 f986 	bl	29e90 <rpc_client_msg_data_rx_free>
   24b84:	2003      	movs	r0, #3
   24b86:	682b      	ldr	r3, [r5, #0]
   24b88:	6034      	str	r4, [r6, #0]
   24b8a:	e7d6      	b.n	24b3a <rpc_gnss_event_handler+0x8e>
   24b8c:	4e13      	ldr	r6, [pc, #76]	; (24bdc <rpc_gnss_event_handler+0x130>)
   24b8e:	6830      	ldr	r0, [r6, #0]
   24b90:	b108      	cbz	r0, 24b96 <rpc_gnss_event_handler+0xea>
   24b92:	f005 f97d 	bl	29e90 <rpc_client_msg_data_rx_free>
   24b96:	2004      	movs	r0, #4
   24b98:	682b      	ldr	r3, [r5, #0]
   24b9a:	6034      	str	r4, [r6, #0]
   24b9c:	e7cd      	b.n	24b3a <rpc_gnss_event_handler+0x8e>
   24b9e:	7822      	ldrb	r2, [r4, #0]
   24ba0:	2a03      	cmp	r2, #3
   24ba2:	d805      	bhi.n	24bb0 <rpc_gnss_event_handler+0x104>
   24ba4:	e8df f002 	tbb	[pc, r2]
   24ba8:	0c0a0802 	.word	0x0c0a0802
   24bac:	2007      	movs	r0, #7
   24bae:	4798      	blx	r3
   24bb0:	6830      	ldr	r0, [r6, #0]
   24bb2:	f005 f96d 	bl	29e90 <rpc_client_msg_data_rx_free>
   24bb6:	e785      	b.n	24ac4 <rpc_gnss_event_handler+0x18>
   24bb8:	2008      	movs	r0, #8
   24bba:	e7f8      	b.n	24bae <rpc_gnss_event_handler+0x102>
   24bbc:	2009      	movs	r0, #9
   24bbe:	e7f6      	b.n	24bae <rpc_gnss_event_handler+0x102>
   24bc0:	200a      	movs	r0, #10
   24bc2:	e7f4      	b.n	24bae <rpc_gnss_event_handler+0x102>
   24bc4:	2000d8cc 	.word	0x2000d8cc
   24bc8:	2000d8bc 	.word	0x2000d8bc
   24bcc:	2000d8c8 	.word	0x2000d8c8
   24bd0:	2000e04f 	.word	0x2000e04f
   24bd4:	2000e050 	.word	0x2000e050
   24bd8:	2000d8c4 	.word	0x2000d8c4
   24bdc:	2000d8c0 	.word	0x2000d8c0

00024be0 <rpc_gnss_init>:
   24be0:	b508      	push	{r3, lr}
   24be2:	2300      	movs	r3, #0
   24be4:	4a09      	ldr	r2, [pc, #36]	; (24c0c <rpc_gnss_init+0x2c>)
   24be6:	480a      	ldr	r0, [pc, #40]	; (24c10 <rpc_gnss_init+0x30>)
   24be8:	7013      	strb	r3, [r2, #0]
   24bea:	4a0a      	ldr	r2, [pc, #40]	; (24c14 <rpc_gnss_init+0x34>)
   24bec:	7013      	strb	r3, [r2, #0]
   24bee:	4a0a      	ldr	r2, [pc, #40]	; (24c18 <rpc_gnss_init+0x38>)
   24bf0:	7013      	strb	r3, [r2, #0]
   24bf2:	4a0a      	ldr	r2, [pc, #40]	; (24c1c <rpc_gnss_init+0x3c>)
   24bf4:	7013      	strb	r3, [r2, #0]
   24bf6:	4a0a      	ldr	r2, [pc, #40]	; (24c20 <rpc_gnss_init+0x40>)
   24bf8:	6013      	str	r3, [r2, #0]
   24bfa:	2201      	movs	r2, #1
   24bfc:	4611      	mov	r1, r2
   24bfe:	f7f9 ff85 	bl	1eb0c <nrf_modem_os_sem_init>
   24c02:	2800      	cmp	r0, #0
   24c04:	bf18      	it	ne
   24c06:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   24c0a:	bd08      	pop	{r3, pc}
   24c0c:	2000e050 	.word	0x2000e050
   24c10:	2000d8d4 	.word	0x2000d8d4
   24c14:	2000e052 	.word	0x2000e052
   24c18:	2000e051 	.word	0x2000e051
   24c1c:	2000e04f 	.word	0x2000e04f
   24c20:	2000d8bc 	.word	0x2000d8bc

00024c24 <modem_off>:
   24c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24c26:	2501      	movs	r5, #1
   24c28:	4c07      	ldr	r4, [pc, #28]	; (24c48 <modem_off+0x24>)
   24c2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   24c2e:	6165      	str	r5, [r4, #20]
   24c30:	f004 fc5e 	bl	294f0 <nrf_modem_os_busywait>
   24c34:	2300      	movs	r3, #0
   24c36:	6163      	str	r3, [r4, #20]
   24c38:	9301      	str	r3, [sp, #4]
   24c3a:	6125      	str	r5, [r4, #16]
   24c3c:	6923      	ldr	r3, [r4, #16]
   24c3e:	9301      	str	r3, [sp, #4]
   24c40:	9b01      	ldr	r3, [sp, #4]
   24c42:	b003      	add	sp, #12
   24c44:	bd30      	pop	{r4, r5, pc}
   24c46:	bf00      	nop
   24c48:	40005600 	.word	0x40005600

00024c4c <atomic_set.constprop.0.isra.0>:
   24c4c:	4b03      	ldr	r3, [pc, #12]	; (24c5c <atomic_set.constprop.0.isra.0+0x10>)
   24c4e:	e8d3 2fef 	ldaex	r2, [r3]
   24c52:	e8c3 0fe1 	stlex	r1, r0, [r3]
   24c56:	2900      	cmp	r1, #0
   24c58:	d1f9      	bne.n	24c4e <atomic_set.constprop.0.isra.0+0x2>
   24c5a:	4770      	bx	lr
   24c5c:	2000d8d8 	.word	0x2000d8d8

00024c60 <nrf_modem_init>:
   24c60:	b513      	push	{r0, r1, r4, lr}
   24c62:	4604      	mov	r4, r0
   24c64:	b380      	cbz	r0, 24cc8 <nrf_modem_init+0x68>
   24c66:	6a43      	ldr	r3, [r0, #36]	; 0x24
   24c68:	b38b      	cbz	r3, 24cce <nrf_modem_init+0x6e>
   24c6a:	2201      	movs	r2, #1
   24c6c:	4b1b      	ldr	r3, [pc, #108]	; (24cdc <nrf_modem_init+0x7c>)
   24c6e:	e8d3 1fef 	ldaex	r1, [r3]
   24c72:	2900      	cmp	r1, #0
   24c74:	d103      	bne.n	24c7e <nrf_modem_init+0x1e>
   24c76:	e8c3 2fe0 	stlex	r0, r2, [r3]
   24c7a:	2800      	cmp	r0, #0
   24c7c:	d1f7      	bne.n	24c6e <nrf_modem_init+0xe>
   24c7e:	d129      	bne.n	24cd4 <nrf_modem_init+0x74>
   24c80:	6a60      	ldr	r0, [r4, #36]	; 0x24
   24c82:	f000 f82d 	bl	24ce0 <nrf_modem_fault_handler_set>
   24c86:	f7f9 ff95 	bl	1ebb4 <nrf_modem_os_init>
   24c8a:	6a23      	ldr	r3, [r4, #32]
   24c8c:	4668      	mov	r0, sp
   24c8e:	9400      	str	r4, [sp, #0]
   24c90:	f88d 3004 	strb.w	r3, [sp, #4]
   24c94:	f005 f899 	bl	29dca <rpc_init>
   24c98:	4604      	mov	r4, r0
   24c9a:	b958      	cbnz	r0, 24cb4 <nrf_modem_init+0x54>
   24c9c:	f7ff fef2 	bl	24a84 <rpc_at_init>
   24ca0:	4604      	mov	r4, r0
   24ca2:	b938      	cbnz	r0, 24cb4 <nrf_modem_init+0x54>
   24ca4:	f7ff fc08 	bl	244b8 <rpc_ip_init>
   24ca8:	4604      	mov	r4, r0
   24caa:	b918      	cbnz	r0, 24cb4 <nrf_modem_init+0x54>
   24cac:	f7ff ff98 	bl	24be0 <rpc_gnss_init>
   24cb0:	4604      	mov	r4, r0
   24cb2:	b138      	cbz	r0, 24cc4 <nrf_modem_init+0x64>
   24cb4:	f7ff ffb6 	bl	24c24 <modem_off>
   24cb8:	2000      	movs	r0, #0
   24cba:	f7ff ffc7 	bl	24c4c <atomic_set.constprop.0.isra.0>
   24cbe:	4620      	mov	r0, r4
   24cc0:	b002      	add	sp, #8
   24cc2:	bd10      	pop	{r4, pc}
   24cc4:	2002      	movs	r0, #2
   24cc6:	e7f8      	b.n	24cba <nrf_modem_init+0x5a>
   24cc8:	f06f 040d 	mvn.w	r4, #13
   24ccc:	e7f7      	b.n	24cbe <nrf_modem_init+0x5e>
   24cce:	f06f 0415 	mvn.w	r4, #21
   24cd2:	e7f4      	b.n	24cbe <nrf_modem_init+0x5e>
   24cd4:	f04f 34ff 	mov.w	r4, #4294967295
   24cd8:	e7f1      	b.n	24cbe <nrf_modem_init+0x5e>
   24cda:	bf00      	nop
   24cdc:	2000d8d8 	.word	0x2000d8d8

00024ce0 <nrf_modem_fault_handler_set>:
   24ce0:	4b01      	ldr	r3, [pc, #4]	; (24ce8 <nrf_modem_fault_handler_set+0x8>)
   24ce2:	6018      	str	r0, [r3, #0]
   24ce4:	4770      	bx	lr
   24ce6:	bf00      	nop
   24ce8:	2000d8dc 	.word	0x2000d8dc

00024cec <nrf_modem_fault_handler_internal>:
   24cec:	b507      	push	{r0, r1, r2, lr}
   24cee:	4b04      	ldr	r3, [pc, #16]	; (24d00 <nrf_modem_fault_handler_internal+0x14>)
   24cf0:	e9cd 0100 	strd	r0, r1, [sp]
   24cf4:	681b      	ldr	r3, [r3, #0]
   24cf6:	4668      	mov	r0, sp
   24cf8:	4798      	blx	r3
   24cfa:	b003      	add	sp, #12
   24cfc:	f85d fb04 	ldr.w	pc, [sp], #4
   24d00:	2000d8dc 	.word	0x2000d8dc

00024d04 <nrf_modem_state_set>:
   24d04:	4b01      	ldr	r3, [pc, #4]	; (24d0c <nrf_modem_state_set+0x8>)
   24d06:	7018      	strb	r0, [r3, #0]
   24d08:	4770      	bx	lr
   24d0a:	bf00      	nop
   24d0c:	2000e053 	.word	0x2000e053

00024d10 <nrf_modem_state_is_initialized>:
   24d10:	4b02      	ldr	r3, [pc, #8]	; (24d1c <nrf_modem_state_is_initialized+0xc>)
   24d12:	7818      	ldrb	r0, [r3, #0]
   24d14:	1e43      	subs	r3, r0, #1
   24d16:	4258      	negs	r0, r3
   24d18:	4158      	adcs	r0, r3
   24d1a:	4770      	bx	lr
   24d1c:	2000e053 	.word	0x2000e053

00024d20 <ipc_trace_init>:
   24d20:	2100      	movs	r1, #0
   24d22:	4b07      	ldr	r3, [pc, #28]	; (24d40 <ipc_trace_init+0x20>)
   24d24:	2201      	movs	r2, #1
   24d26:	7019      	strb	r1, [r3, #0]
   24d28:	4b06      	ldr	r3, [pc, #24]	; (24d44 <ipc_trace_init+0x24>)
   24d2a:	7019      	strb	r1, [r3, #0]
   24d2c:	4b06      	ldr	r3, [pc, #24]	; (24d48 <ipc_trace_init+0x28>)
   24d2e:	6019      	str	r1, [r3, #0]
   24d30:	4b06      	ldr	r3, [pc, #24]	; (24d4c <ipc_trace_init+0x2c>)
   24d32:	6019      	str	r1, [r3, #0]
   24d34:	4b06      	ldr	r3, [pc, #24]	; (24d50 <ipc_trace_init+0x30>)
   24d36:	6018      	str	r0, [r3, #0]
   24d38:	4806      	ldr	r0, [pc, #24]	; (24d54 <ipc_trace_init+0x34>)
   24d3a:	f7f9 bee7 	b.w	1eb0c <nrf_modem_os_sem_init>
   24d3e:	bf00      	nop
   24d40:	2000e054 	.word	0x2000e054
   24d44:	2000e055 	.word	0x2000e055
   24d48:	2000d8e4 	.word	0x2000d8e4
   24d4c:	2000d8e8 	.word	0x2000d8e8
   24d50:	2000d8f8 	.word	0x2000d8f8
   24d54:	2000d8e0 	.word	0x2000d8e0

00024d58 <ipc_trace_handler>:
   24d58:	b470      	push	{r4, r5, r6}
   24d5a:	4b2d      	ldr	r3, [pc, #180]	; (24e10 <ipc_trace_handler+0xb8>)
   24d5c:	681b      	ldr	r3, [r3, #0]
   24d5e:	6919      	ldr	r1, [r3, #16]
   24d60:	6958      	ldr	r0, [r3, #20]
   24d62:	7c1a      	ldrb	r2, [r3, #16]
   24d64:	2200      	movs	r2, #0
   24d66:	741a      	strb	r2, [r3, #16]
   24d68:	7c5c      	ldrb	r4, [r3, #17]
   24d6a:	745a      	strb	r2, [r3, #17]
   24d6c:	7c9c      	ldrb	r4, [r3, #18]
   24d6e:	749a      	strb	r2, [r3, #18]
   24d70:	7cdc      	ldrb	r4, [r3, #19]
   24d72:	74da      	strb	r2, [r3, #19]
   24d74:	7d1c      	ldrb	r4, [r3, #20]
   24d76:	751a      	strb	r2, [r3, #20]
   24d78:	7d5c      	ldrb	r4, [r3, #21]
   24d7a:	755a      	strb	r2, [r3, #21]
   24d7c:	7d9c      	ldrb	r4, [r3, #22]
   24d7e:	2903      	cmp	r1, #3
   24d80:	759a      	strb	r2, [r3, #22]
   24d82:	7ddc      	ldrb	r4, [r3, #23]
   24d84:	75da      	strb	r2, [r3, #23]
   24d86:	d029      	beq.n	24ddc <ipc_trace_handler+0x84>
   24d88:	2904      	cmp	r1, #4
   24d8a:	d033      	beq.n	24df4 <ipc_trace_handler+0x9c>
   24d8c:	2901      	cmp	r1, #1
   24d8e:	d12f      	bne.n	24df0 <ipc_trace_handler+0x98>
   24d90:	6885      	ldr	r5, [r0, #8]
   24d92:	4e20      	ldr	r6, [pc, #128]	; (24e14 <ipc_trace_handler+0xbc>)
   24d94:	4295      	cmp	r5, r2
   24d96:	d110      	bne.n	24dba <ipc_trace_handler+0x62>
   24d98:	2101      	movs	r1, #1
   24d9a:	7a1a      	ldrb	r2, [r3, #8]
   24d9c:	2200      	movs	r2, #0
   24d9e:	7219      	strb	r1, [r3, #8]
   24da0:	7a59      	ldrb	r1, [r3, #9]
   24da2:	725a      	strb	r2, [r3, #9]
   24da4:	7a99      	ldrb	r1, [r3, #10]
   24da6:	729a      	strb	r2, [r3, #10]
   24da8:	7ada      	ldrb	r2, [r3, #11]
   24daa:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   24dae:	72da      	strb	r2, [r3, #11]
   24db0:	4b19      	ldr	r3, [pc, #100]	; (24e18 <ipc_trace_handler+0xc0>)
   24db2:	bc70      	pop	{r4, r5, r6}
   24db4:	6818      	ldr	r0, [r3, #0]
   24db6:	f004 bba5 	b.w	29504 <nrf_modem_os_sem_give>
   24dba:	1c91      	adds	r1, r2, #2
   24dbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   24dc0:	684c      	ldr	r4, [r1, #4]
   24dc2:	7821      	ldrb	r1, [r4, #0]
   24dc4:	2962      	cmp	r1, #98	; 0x62
   24dc6:	d007      	beq.n	24dd8 <ipc_trace_handler+0x80>
   24dc8:	3963      	subs	r1, #99	; 0x63
   24dca:	bf18      	it	ne
   24dcc:	2101      	movne	r1, #1
   24dce:	0049      	lsls	r1, r1, #1
   24dd0:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
   24dd4:	3201      	adds	r2, #1
   24dd6:	e7dd      	b.n	24d94 <ipc_trace_handler+0x3c>
   24dd8:	2101      	movs	r1, #1
   24dda:	e7f9      	b.n	24dd0 <ipc_trace_handler+0x78>
   24ddc:	7a18      	ldrb	r0, [r3, #8]
   24dde:	7219      	strb	r1, [r3, #8]
   24de0:	7a59      	ldrb	r1, [r3, #9]
   24de2:	725a      	strb	r2, [r3, #9]
   24de4:	7a99      	ldrb	r1, [r3, #10]
   24de6:	729a      	strb	r2, [r3, #10]
   24de8:	7ada      	ldrb	r2, [r3, #11]
   24dea:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   24dee:	72da      	strb	r2, [r3, #11]
   24df0:	bc70      	pop	{r4, r5, r6}
   24df2:	4770      	bx	lr
   24df4:	7a18      	ldrb	r0, [r3, #8]
   24df6:	7219      	strb	r1, [r3, #8]
   24df8:	7a59      	ldrb	r1, [r3, #9]
   24dfa:	725a      	strb	r2, [r3, #9]
   24dfc:	7a99      	ldrb	r1, [r3, #10]
   24dfe:	729a      	strb	r2, [r3, #10]
   24e00:	7ada      	ldrb	r2, [r3, #11]
   24e02:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   24e06:	72da      	strb	r2, [r3, #11]
   24e08:	2201      	movs	r2, #1
   24e0a:	4b04      	ldr	r3, [pc, #16]	; (24e1c <ipc_trace_handler+0xc4>)
   24e0c:	701a      	strb	r2, [r3, #0]
   24e0e:	e7ef      	b.n	24df0 <ipc_trace_handler+0x98>
   24e10:	2000d8f8 	.word	0x2000d8f8
   24e14:	2000d8ec 	.word	0x2000d8ec
   24e18:	2000d8e0 	.word	0x2000d8e0
   24e1c:	2000e055 	.word	0x2000e055

00024e20 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   24e20:	4b01      	ldr	r3, [pc, #4]	; (24e28 <z_impl_z_errno+0x8>)
   24e22:	6898      	ldr	r0, [r3, #8]
}
   24e24:	3064      	adds	r0, #100	; 0x64
   24e26:	4770      	bx	lr
   24e28:	2000d8fc 	.word	0x2000d8fc

00024e2c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   24e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24e30:	b086      	sub	sp, #24
   24e32:	4605      	mov	r5, r0
   24e34:	460e      	mov	r6, r1
   24e36:	af00      	add	r7, sp, #0
	__asm__ volatile(
   24e38:	f04f 0320 	mov.w	r3, #32
   24e3c:	f3ef 8811 	mrs	r8, BASEPRI
   24e40:	f383 8812 	msr	BASEPRI_MAX, r3
   24e44:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   24e48:	f000 fff4 	bl	25e34 <z_impl_z_current_get>
   24e4c:	2d04      	cmp	r5, #4
   24e4e:	bf98      	it	ls
   24e50:	4b2c      	ldrls	r3, [pc, #176]	; (24f04 <z_fatal_error+0xd8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   24e52:	46e9      	mov	r9, sp
   24e54:	b08a      	sub	sp, #40	; 0x28
   24e56:	4604      	mov	r4, r0
   24e58:	466a      	mov	r2, sp
   24e5a:	bf94      	ite	ls
   24e5c:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   24e60:	4b29      	ldrhi	r3, [pc, #164]	; (24f08 <z_fatal_error+0xdc>)
   24e62:	61d3      	str	r3, [r2, #28]
   24e64:	f240 3301 	movw	r3, #769	; 0x301
   24e68:	f04f 0a00 	mov.w	sl, #0
   24e6c:	8493      	strh	r3, [r2, #36]	; 0x24
   24e6e:	4927      	ldr	r1, [pc, #156]	; (24f0c <z_fatal_error+0xe0>)
   24e70:	4b27      	ldr	r3, [pc, #156]	; (24f10 <z_fatal_error+0xe4>)
   24e72:	e9c2 1505 	strd	r1, r5, [r2, #20]
   24e76:	f8c2 a020 	str.w	sl, [r2, #32]
   24e7a:	f842 3f10 	str.w	r3, [r2, #16]!
   24e7e:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   24e82:	4653      	mov	r3, sl
   24e84:	4823      	ldr	r0, [pc, #140]	; (24f14 <z_fatal_error+0xe8>)
   24e86:	f7f6 fa57 	bl	1b338 <z_impl_z_log_msg_static_create>
   24e8a:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   24e8c:	b17e      	cbz	r6, 24eae <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   24e8e:	69f3      	ldr	r3, [r6, #28]
   24e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
   24e94:	b15b      	cbz	r3, 24eae <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   24e96:	4b20      	ldr	r3, [pc, #128]	; (24f18 <z_fatal_error+0xec>)
   24e98:	617b      	str	r3, [r7, #20]
   24e9a:	2302      	movs	r3, #2
   24e9c:	613b      	str	r3, [r7, #16]
   24e9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   24ea2:	4653      	mov	r3, sl
   24ea4:	481b      	ldr	r0, [pc, #108]	; (24f14 <z_fatal_error+0xe8>)
   24ea6:	f107 0210 	add.w	r2, r7, #16
   24eaa:	f7f6 fa45 	bl	1b338 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   24eae:	b12c      	cbz	r4, 24ebc <z_fatal_error+0x90>
   24eb0:	4620      	mov	r0, r4
   24eb2:	f005 fe9a 	bl	2abea <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   24eb6:	b108      	cbz	r0, 24ebc <z_fatal_error+0x90>
   24eb8:	7803      	ldrb	r3, [r0, #0]
   24eba:	b903      	cbnz	r3, 24ebe <z_fatal_error+0x92>
		thread_name = "unknown";
   24ebc:	4817      	ldr	r0, [pc, #92]	; (24f1c <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   24ebe:	46e9      	mov	r9, sp
   24ec0:	b08a      	sub	sp, #40	; 0x28
   24ec2:	466a      	mov	r2, sp
   24ec4:	4b16      	ldr	r3, [pc, #88]	; (24f20 <z_fatal_error+0xf4>)
   24ec6:	61d0      	str	r0, [r2, #28]
   24ec8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   24ecc:	f240 3301 	movw	r3, #769	; 0x301
   24ed0:	8413      	strh	r3, [r2, #32]
   24ed2:	4b14      	ldr	r3, [pc, #80]	; (24f24 <z_fatal_error+0xf8>)
   24ed4:	f842 3f10 	str.w	r3, [r2, #16]!
   24ed8:	2300      	movs	r3, #0
   24eda:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   24ede:	480d      	ldr	r0, [pc, #52]	; (24f14 <z_fatal_error+0xe8>)
   24ee0:	f7f6 fa2a 	bl	1b338 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   24ee4:	4631      	mov	r1, r6
   24ee6:	46cd      	mov	sp, r9
   24ee8:	4628      	mov	r0, r5
   24eea:	f7fc fe77 	bl	21bdc <k_sys_fatal_error_handler>
	__asm__ volatile(
   24eee:	f388 8811 	msr	BASEPRI, r8
   24ef2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   24ef6:	4620      	mov	r0, r4
   24ef8:	f7f7 fcd2 	bl	1c8a0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   24efc:	3718      	adds	r7, #24
   24efe:	46bd      	mov	sp, r7
   24f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24f04:	0002c4f0 	.word	0x0002c4f0
   24f08:	0002eb20 	.word	0x0002eb20
   24f0c:	0002eb36 	.word	0x0002eb36
   24f10:	01000005 	.word	0x01000005
   24f14:	0002be68 	.word	0x0002be68
   24f18:	0002eb5e 	.word	0x0002eb5e
   24f1c:	0002eb2e 	.word	0x0002eb2e
   24f20:	0002eb7f 	.word	0x0002eb7f
   24f24:	01000004 	.word	0x01000004

00024f28 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24f28:	4b0f      	ldr	r3, [pc, #60]	; (24f68 <z_sys_init_run_level+0x40>)
{
   24f2a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24f2c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   24f30:	3001      	adds	r0, #1
   24f32:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   24f36:	42a6      	cmp	r6, r4
   24f38:	d800      	bhi.n	24f3c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   24f3a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   24f3c:	e9d4 3500 	ldrd	r3, r5, [r4]
   24f40:	4628      	mov	r0, r5
   24f42:	4798      	blx	r3
		if (dev != NULL) {
   24f44:	b16d      	cbz	r5, 24f62 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   24f46:	b138      	cbz	r0, 24f58 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   24f48:	2800      	cmp	r0, #0
   24f4a:	bfb8      	it	lt
   24f4c:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   24f4e:	28ff      	cmp	r0, #255	; 0xff
   24f50:	bfa8      	it	ge
   24f52:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   24f54:	68eb      	ldr	r3, [r5, #12]
   24f56:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   24f58:	68ea      	ldr	r2, [r5, #12]
   24f5a:	7853      	ldrb	r3, [r2, #1]
   24f5c:	f043 0301 	orr.w	r3, r3, #1
   24f60:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24f62:	3408      	adds	r4, #8
   24f64:	e7e7      	b.n	24f36 <z_sys_init_run_level+0xe>
   24f66:	bf00      	nop
   24f68:	0002c504 	.word	0x0002c504

00024f6c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   24f6c:	2201      	movs	r2, #1
{
   24f6e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   24f70:	4b09      	ldr	r3, [pc, #36]	; (24f98 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   24f72:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   24f74:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   24f76:	f7ff ffd7 	bl	24f28 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   24f7a:	f001 fa8f 	bl	2649c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   24f7e:	2004      	movs	r0, #4
   24f80:	f7ff ffd2 	bl	24f28 <z_sys_init_run_level>

	z_init_static_threads();
   24f84:	f000 f92c 	bl	251e0 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   24f88:	f7f4 fc76 	bl	19878 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   24f8c:	4a03      	ldr	r2, [pc, #12]	; (24f9c <bg_thread_main+0x30>)
   24f8e:	7b13      	ldrb	r3, [r2, #12]
   24f90:	f023 0301 	bic.w	r3, r3, #1
   24f94:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   24f96:	bd08      	pop	{r3, pc}
   24f98:	2000e056 	.word	0x2000e056
   24f9c:	2000cf28 	.word	0x2000cf28

00024fa0 <z_bss_zero>:
{
   24fa0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   24fa2:	4803      	ldr	r0, [pc, #12]	; (24fb0 <z_bss_zero+0x10>)
   24fa4:	4a03      	ldr	r2, [pc, #12]	; (24fb4 <z_bss_zero+0x14>)
   24fa6:	2100      	movs	r1, #0
   24fa8:	1a12      	subs	r2, r2, r0
   24faa:	f005 fd95 	bl	2aad8 <z_early_memset>
}
   24fae:	bd08      	pop	{r3, pc}
   24fb0:	2000c958 	.word	0x2000c958
   24fb4:	2000e058 	.word	0x2000e058

00024fb8 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   24fb8:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   24fba:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   24fbc:	4e13      	ldr	r6, [pc, #76]	; (2500c <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   24fbe:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   24fc0:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   24fc4:	2300      	movs	r3, #0
{
   24fc6:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   24fc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   24fcc:	220f      	movs	r2, #15
   24fce:	9301      	str	r3, [sp, #4]
   24fd0:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   24fd4:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   24fd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   24fda:	4d0d      	ldr	r5, [pc, #52]	; (25010 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   24fdc:	490d      	ldr	r1, [pc, #52]	; (25014 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   24fde:	fb03 5500 	mla	r5, r3, r0, r5
{
   24fe2:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   24fe4:	fb02 1100 	mla	r1, r2, r0, r1
   24fe8:	4b0b      	ldr	r3, [pc, #44]	; (25018 <z_init_cpu+0x60>)
   24fea:	4630      	mov	r0, r6
   24fec:	9500      	str	r5, [sp, #0]
   24fee:	f000 f89b 	bl	25128 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24ff2:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   24ff4:	752c      	strb	r4, [r5, #20]
   24ff6:	f023 0304 	bic.w	r3, r3, #4
   24ffa:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   24ffc:	4b07      	ldr	r3, [pc, #28]	; (2501c <z_init_cpu+0x64>)
   24ffe:	3401      	adds	r4, #1
   25000:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   25004:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   25006:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   25008:	b006      	add	sp, #24
   2500a:	bd70      	pop	{r4, r5, r6, pc}
   2500c:	2000cea0 	.word	0x2000cea0
   25010:	2000d8fc 	.word	0x2000d8fc
   25014:	2000ec58 	.word	0x2000ec58
   25018:	00025299 	.word	0x00025299
   2501c:	2000e458 	.word	0x2000e458

00025020 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   25020:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   25022:	2000      	movs	r0, #0
{
   25024:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   25026:	f7ff ff7f 	bl	24f28 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   2502a:	4b2f      	ldr	r3, [pc, #188]	; (250e8 <z_cstart+0xc8>)
	uint32_t msp =
   2502c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   25030:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   25034:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25038:	2400      	movs	r4, #0
   2503a:	23e0      	movs	r3, #224	; 0xe0
   2503c:	4d2b      	ldr	r5, [pc, #172]	; (250ec <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   2503e:	4e2c      	ldr	r6, [pc, #176]	; (250f0 <z_cstart+0xd0>)
   25040:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   25044:	77ec      	strb	r4, [r5, #31]
   25046:	762c      	strb	r4, [r5, #24]
   25048:	766c      	strb	r4, [r5, #25]
   2504a:	76ac      	strb	r4, [r5, #26]
   2504c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   25050:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25052:	4f28      	ldr	r7, [pc, #160]	; (250f4 <z_cstart+0xd4>)
   25054:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   25058:	626b      	str	r3, [r5, #36]	; 0x24
   2505a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2505e:	f7f7 fb83 	bl	1c768 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   25062:	f7f6 ff01 	bl	1be68 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   25066:	f04f 33ff 	mov.w	r3, #4294967295
   2506a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2506c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2506e:	f7f7 fdc5 	bl	1cbfc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   25072:	f7f7 fc2b 	bl	1c8cc <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   25076:	f7f5 fff3 	bl	1b060 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2507a:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   2507e:	ad06      	add	r5, sp, #24
   25080:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   25082:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   25086:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   2508a:	f001 f9e9 	bl	26460 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   2508e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   25090:	f005 fd16 	bl	2aac0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   25094:	2001      	movs	r0, #1
   25096:	f7ff ff47 	bl	24f28 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2509a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   2509c:	4d16      	ldr	r5, [pc, #88]	; (250f8 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2509e:	f7ff ff43 	bl	24f28 <z_sys_init_run_level>
	z_sched_init();
   250a2:	f000 fe1f 	bl	25ce4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   250a6:	4b15      	ldr	r3, [pc, #84]	; (250fc <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   250a8:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   250aa:	9305      	str	r3, [sp, #20]
   250ac:	2301      	movs	r3, #1
   250ae:	4914      	ldr	r1, [pc, #80]	; (25100 <z_cstart+0xe0>)
   250b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   250b4:	e9cd 4303 	strd	r4, r3, [sp, #12]
   250b8:	4628      	mov	r0, r5
   250ba:	463b      	mov	r3, r7
   250bc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   250c0:	9400      	str	r4, [sp, #0]
   250c2:	f000 f831 	bl	25128 <z_setup_new_thread>
   250c6:	4606      	mov	r6, r0
   250c8:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   250ca:	4628      	mov	r0, r5
   250cc:	f022 0204 	bic.w	r2, r2, #4
   250d0:	736a      	strb	r2, [r5, #13]
   250d2:	f005 ff06 	bl	2aee2 <z_ready_thread>
	z_init_cpu(0);
   250d6:	4620      	mov	r0, r4
   250d8:	f7ff ff6e 	bl	24fb8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   250dc:	463a      	mov	r2, r7
   250de:	4631      	mov	r1, r6
   250e0:	4628      	mov	r0, r5
   250e2:	f7f7 f827 	bl	1c134 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   250e6:	bf00      	nop
   250e8:	2000e458 	.word	0x2000e458
   250ec:	e000ed00 	.word	0xe000ed00
   250f0:	2000d8fc 	.word	0x2000d8fc
   250f4:	00024f6d 	.word	0x00024f6d
   250f8:	2000cf28 	.word	0x2000cf28
   250fc:	0002ebe1 	.word	0x0002ebe1
   25100:	2000ed98 	.word	0x2000ed98

00025104 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   25104:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25106:	4c06      	ldr	r4, [pc, #24]	; (25120 <statics_init+0x1c>)
   25108:	4d06      	ldr	r5, [pc, #24]	; (25124 <statics_init+0x20>)
   2510a:	42ac      	cmp	r4, r5
   2510c:	d301      	bcc.n	25112 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   2510e:	2000      	movs	r0, #0
   25110:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   25112:	4620      	mov	r0, r4
   25114:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   25118:	f005 fce2 	bl	2aae0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2511c:	3414      	adds	r4, #20
   2511e:	e7f4      	b.n	2510a <statics_init+0x6>
   25120:	2000c81c 	.word	0x2000c81c
   25124:	2000c844 	.word	0x2000c844

00025128 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   25128:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2512c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2512e:	f100 0558 	add.w	r5, r0, #88	; 0x58
   25132:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   25134:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   25136:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   2513a:	2500      	movs	r5, #0
{
   2513c:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   2513e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   25140:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   25142:	e9c0 5506 	strd	r5, r5, [r0, #24]
   25146:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25148:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2514a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2514c:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   25150:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   25154:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   25156:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   25158:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2515a:	9202      	str	r2, [sp, #8]
   2515c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   2515e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25162:	9201      	str	r2, [sp, #4]
   25164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25166:	9200      	str	r2, [sp, #0]
   25168:	4642      	mov	r2, r8
   2516a:	f7f6 ffc3 	bl	1c0f4 <arch_new_thread>
	if (!_current) {
   2516e:	4b05      	ldr	r3, [pc, #20]	; (25184 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   25170:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   25172:	689b      	ldr	r3, [r3, #8]
   25174:	b103      	cbz	r3, 25178 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   25176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   25178:	4640      	mov	r0, r8
   2517a:	6763      	str	r3, [r4, #116]	; 0x74
   2517c:	b004      	add	sp, #16
   2517e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25182:	bf00      	nop
   25184:	2000d8fc 	.word	0x2000d8fc

00025188 <z_impl_k_thread_create>:
{
   25188:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2518a:	2500      	movs	r5, #0
{
   2518c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2518e:	9505      	str	r5, [sp, #20]
   25190:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   25192:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   25196:	9504      	str	r5, [sp, #16]
   25198:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   2519a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2519c:	9503      	str	r5, [sp, #12]
   2519e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   251a0:	9502      	str	r5, [sp, #8]
   251a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   251a4:	9501      	str	r5, [sp, #4]
   251a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   251a8:	9500      	str	r5, [sp, #0]
   251aa:	f7ff ffbd 	bl	25128 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   251ae:	f1b6 3fff 	cmp.w	r6, #4294967295
   251b2:	bf08      	it	eq
   251b4:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   251b8:	d005      	beq.n	251c6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   251ba:	ea56 0307 	orrs.w	r3, r6, r7
   251be:	d105      	bne.n	251cc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   251c0:	4620      	mov	r0, r4
   251c2:	f000 fd0f 	bl	25be4 <z_sched_start>
}
   251c6:	4620      	mov	r0, r4
   251c8:	b007      	add	sp, #28
   251ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   251cc:	463a      	mov	r2, r7
   251ce:	4633      	mov	r3, r6
   251d0:	4902      	ldr	r1, [pc, #8]	; (251dc <z_impl_k_thread_create+0x54>)
   251d2:	f104 0018 	add.w	r0, r4, #24
   251d6:	f000 ff0d 	bl	25ff4 <z_add_timeout>
   251da:	e7f4      	b.n	251c6 <z_impl_k_thread_create+0x3e>
   251dc:	0002ae4f 	.word	0x0002ae4f

000251e0 <z_init_static_threads>:
{
   251e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   251e4:	4c29      	ldr	r4, [pc, #164]	; (2528c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   251e6:	4d2a      	ldr	r5, [pc, #168]	; (25290 <z_init_static_threads+0xb0>)
{
   251e8:	b087      	sub	sp, #28
   251ea:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   251ec:	42ae      	cmp	r6, r5
   251ee:	f104 0430 	add.w	r4, r4, #48	; 0x30
   251f2:	d30f      	bcc.n	25214 <z_init_static_threads+0x34>
	k_sched_lock();
   251f4:	f000 fd46 	bl	25c84 <k_sched_lock>
   251f8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   251fc:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   25200:	4c22      	ldr	r4, [pc, #136]	; (2528c <z_init_static_threads+0xac>)
   25202:	f8df 9090 	ldr.w	r9, [pc, #144]	; 25294 <z_init_static_threads+0xb4>
   25206:	42ac      	cmp	r4, r5
   25208:	d320      	bcc.n	2524c <z_init_static_threads+0x6c>
}
   2520a:	b007      	add	sp, #28
   2520c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   25210:	f000 bd4c 	b.w	25cac <k_sched_unlock>
		z_setup_new_thread(
   25214:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25218:	9305      	str	r3, [sp, #20]
   2521a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2521e:	9304      	str	r3, [sp, #16]
   25220:	f854 3c14 	ldr.w	r3, [r4, #-20]
   25224:	9303      	str	r3, [sp, #12]
   25226:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2522a:	9302      	str	r3, [sp, #8]
   2522c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   25230:	9301      	str	r3, [sp, #4]
   25232:	f854 3c20 	ldr.w	r3, [r4, #-32]
   25236:	9300      	str	r3, [sp, #0]
   25238:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2523c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   25240:	f7ff ff72 	bl	25128 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   25244:	f854 3c30 	ldr.w	r3, [r4, #-48]
   25248:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2524a:	e7ce      	b.n	251ea <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2524c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2524e:	1c5a      	adds	r2, r3, #1
   25250:	d00d      	beq.n	2526e <z_init_static_threads+0x8e>
   25252:	2100      	movs	r1, #0
   25254:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   25256:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2525a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2525e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   25262:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25266:	d104      	bne.n	25272 <z_init_static_threads+0x92>
	z_sched_start(thread);
   25268:	4640      	mov	r0, r8
   2526a:	f000 fcbb 	bl	25be4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2526e:	3430      	adds	r4, #48	; 0x30
   25270:	e7c9      	b.n	25206 <z_init_static_threads+0x26>
   25272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25276:	2300      	movs	r3, #0
   25278:	f7f3 fd46 	bl	18d08 <__aeabi_uldivmod>
   2527c:	4602      	mov	r2, r0
   2527e:	460b      	mov	r3, r1
   25280:	f108 0018 	add.w	r0, r8, #24
   25284:	4649      	mov	r1, r9
   25286:	f000 feb5 	bl	25ff4 <z_add_timeout>
   2528a:	e7f0      	b.n	2526e <z_init_static_threads+0x8e>
   2528c:	0002bd18 	.word	0x0002bd18
   25290:	0002bd18 	.word	0x0002bd18
   25294:	0002ae4f 	.word	0x0002ae4f

00025298 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   25298:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2529a:	4c0b      	ldr	r4, [pc, #44]	; (252c8 <idle+0x30>)
   2529c:	4d0b      	ldr	r5, [pc, #44]	; (252cc <idle+0x34>)
	__asm__ volatile(
   2529e:	f04f 0220 	mov.w	r2, #32
   252a2:	f3ef 8311 	mrs	r3, BASEPRI
   252a6:	f382 8812 	msr	BASEPRI_MAX, r2
   252aa:	f3bf 8f6f 	isb	sy
   252ae:	f005 fede 	bl	2b06e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   252b2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   252b4:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   252b6:	b913      	cbnz	r3, 252be <idle+0x26>
	arch_cpu_idle();
   252b8:	f7f6 fddc 	bl	1be74 <arch_cpu_idle>
}
   252bc:	e7ef      	b.n	2529e <idle+0x6>
   252be:	f7f6 fcb7 	bl	1bc30 <pm_system_suspend>
   252c2:	2800      	cmp	r0, #0
   252c4:	d1eb      	bne.n	2529e <idle+0x6>
   252c6:	e7f7      	b.n	252b8 <idle+0x20>
   252c8:	2000d8fc 	.word	0x2000d8fc
   252cc:	2000e056 	.word	0x2000e056

000252d0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   252d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   252d4:	4604      	mov	r4, r0
   252d6:	4617      	mov	r7, r2
   252d8:	461e      	mov	r6, r3
   252da:	f04f 0320 	mov.w	r3, #32
   252de:	f3ef 8811 	mrs	r8, BASEPRI
   252e2:	f383 8812 	msr	BASEPRI_MAX, r3
   252e6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   252ea:	68c3      	ldr	r3, [r0, #12]
   252ec:	4a33      	ldr	r2, [pc, #204]	; (253bc <z_impl_k_mutex_lock+0xec>)
   252ee:	b17b      	cbz	r3, 25310 <z_impl_k_mutex_lock+0x40>
   252f0:	6880      	ldr	r0, [r0, #8]
   252f2:	6891      	ldr	r1, [r2, #8]
   252f4:	4288      	cmp	r0, r1
   252f6:	d019      	beq.n	2532c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   252f8:	ea57 0306 	orrs.w	r3, r7, r6
   252fc:	d118      	bne.n	25330 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   252fe:	f388 8811 	msr	BASEPRI, r8
   25302:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   25306:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2530a:	b002      	add	sp, #8
   2530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   25310:	6891      	ldr	r1, [r2, #8]
   25312:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   25316:	3301      	adds	r3, #1
   25318:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2531a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2531c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   2531e:	60a3      	str	r3, [r4, #8]
   25320:	f388 8811 	msr	BASEPRI, r8
   25324:	f3bf 8f6f 	isb	sy
		return 0;
   25328:	2000      	movs	r0, #0
   2532a:	e7ee      	b.n	2530a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   2532c:	6921      	ldr	r1, [r4, #16]
   2532e:	e7f2      	b.n	25316 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   25330:	f991 100e 	ldrsb.w	r1, [r1, #14]
   25334:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   25338:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2533c:	4299      	cmp	r1, r3
   2533e:	bfa8      	it	ge
   25340:	4619      	movge	r1, r3
   25342:	4291      	cmp	r1, r2
   25344:	bfb8      	it	lt
   25346:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   25348:	428b      	cmp	r3, r1
   2534a:	dd2e      	ble.n	253aa <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   2534c:	f005 fc58 	bl	2ac00 <adjust_owner_prio.isra.0>
   25350:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   25352:	4622      	mov	r2, r4
   25354:	4641      	mov	r1, r8
   25356:	e9cd 7600 	strd	r7, r6, [sp]
   2535a:	4819      	ldr	r0, [pc, #100]	; (253c0 <z_impl_k_mutex_lock+0xf0>)
   2535c:	f000 fbcc 	bl	25af8 <z_pend_curr>
	if (got_mutex == 0) {
   25360:	2800      	cmp	r0, #0
   25362:	d0e1      	beq.n	25328 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   25364:	f04f 0320 	mov.w	r3, #32
   25368:	f3ef 8611 	mrs	r6, BASEPRI
   2536c:	f383 8812 	msr	BASEPRI_MAX, r3
   25370:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   25374:	68a0      	ldr	r0, [r4, #8]
   25376:	b1d0      	cbz	r0, 253ae <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   25378:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2537a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2537c:	429c      	cmp	r4, r3
   2537e:	d00a      	beq.n	25396 <z_impl_k_mutex_lock+0xc6>
   25380:	b14b      	cbz	r3, 25396 <z_impl_k_mutex_lock+0xc6>
   25382:	f993 300e 	ldrsb.w	r3, [r3, #14]
   25386:	4299      	cmp	r1, r3
   25388:	bfa8      	it	ge
   2538a:	4619      	movge	r1, r3
   2538c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   25390:	4299      	cmp	r1, r3
   25392:	bfb8      	it	lt
   25394:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   25396:	f005 fc33 	bl	2ac00 <adjust_owner_prio.isra.0>
   2539a:	b140      	cbz	r0, 253ae <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   2539c:	4631      	mov	r1, r6
   2539e:	4808      	ldr	r0, [pc, #32]	; (253c0 <z_impl_k_mutex_lock+0xf0>)
   253a0:	f000 fc0e 	bl	25bc0 <z_reschedule>
	return -EAGAIN;
   253a4:	f06f 000a 	mvn.w	r0, #10
   253a8:	e7af      	b.n	2530a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   253aa:	2500      	movs	r5, #0
   253ac:	e7d1      	b.n	25352 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   253ae:	2d00      	cmp	r5, #0
   253b0:	d1f4      	bne.n	2539c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   253b2:	f386 8811 	msr	BASEPRI, r6
   253b6:	f3bf 8f6f 	isb	sy
   253ba:	e7f3      	b.n	253a4 <z_impl_k_mutex_lock+0xd4>
   253bc:	2000d8fc 	.word	0x2000d8fc
   253c0:	2000e057 	.word	0x2000e057

000253c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   253c4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   253c6:	6883      	ldr	r3, [r0, #8]
{
   253c8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   253ca:	b36b      	cbz	r3, 25428 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   253cc:	4a19      	ldr	r2, [pc, #100]	; (25434 <z_impl_k_mutex_unlock+0x70>)
   253ce:	6892      	ldr	r2, [r2, #8]
   253d0:	4293      	cmp	r3, r2
   253d2:	d12c      	bne.n	2542e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   253d4:	68c3      	ldr	r3, [r0, #12]
   253d6:	2b01      	cmp	r3, #1
   253d8:	d903      	bls.n	253e2 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   253da:	3b01      	subs	r3, #1
   253dc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   253de:	2000      	movs	r0, #0
}
   253e0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   253e2:	f04f 0320 	mov.w	r3, #32
   253e6:	f3ef 8511 	mrs	r5, BASEPRI
   253ea:	f383 8812 	msr	BASEPRI_MAX, r3
   253ee:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   253f2:	6901      	ldr	r1, [r0, #16]
   253f4:	6880      	ldr	r0, [r0, #8]
   253f6:	f005 fc03 	bl	2ac00 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   253fa:	4620      	mov	r0, r4
   253fc:	f005 fda8 	bl	2af50 <z_unpend_first_thread>
	mutex->owner = new_owner;
   25400:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   25402:	b158      	cbz	r0, 2541c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   25404:	f990 200e 	ldrsb.w	r2, [r0, #14]
   25408:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2540a:	2200      	movs	r2, #0
   2540c:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2540e:	f005 fd68 	bl	2aee2 <z_ready_thread>
		z_reschedule(&lock, key);
   25412:	4629      	mov	r1, r5
   25414:	4808      	ldr	r0, [pc, #32]	; (25438 <z_impl_k_mutex_unlock+0x74>)
   25416:	f000 fbd3 	bl	25bc0 <z_reschedule>
   2541a:	e7e0      	b.n	253de <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   2541c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2541e:	f385 8811 	msr	BASEPRI, r5
   25422:	f3bf 8f6f 	isb	sy
   25426:	e7da      	b.n	253de <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   25428:	f06f 0015 	mvn.w	r0, #21
   2542c:	e7d8      	b.n	253e0 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   2542e:	f04f 30ff 	mov.w	r0, #4294967295
   25432:	e7d5      	b.n	253e0 <z_impl_k_mutex_unlock+0x1c>
   25434:	2000d8fc 	.word	0x2000d8fc
   25438:	2000e057 	.word	0x2000e057

0002543c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2543c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2543e:	4611      	mov	r1, r2
	__asm__ volatile(
   25440:	f04f 0220 	mov.w	r2, #32
   25444:	f3ef 8511 	mrs	r5, BASEPRI
   25448:	f382 8812 	msr	BASEPRI_MAX, r2
   2544c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   25450:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   25452:	b19c      	cbz	r4, 2547c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25454:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25456:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25458:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2545c:	4294      	cmp	r4, r2
	list->head = node;
   2545e:	6003      	str	r3, [r0, #0]
	list->tail = node;
   25460:	bf08      	it	eq
   25462:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   25464:	2101      	movs	r1, #1
   25466:	4620      	mov	r0, r4
   25468:	f005 fc3f 	bl	2acea <z_queue_node_peek>
   2546c:	4604      	mov	r4, r0
	__asm__ volatile(
   2546e:	f385 8811 	msr	BASEPRI, r5
   25472:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   25476:	4620      	mov	r0, r4
   25478:	b003      	add	sp, #12
   2547a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2547c:	ea51 0203 	orrs.w	r2, r1, r3
   25480:	d0f5      	beq.n	2546e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25482:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   25486:	e9cd 1300 	strd	r1, r3, [sp]
   2548a:	4610      	mov	r0, r2
   2548c:	4629      	mov	r1, r5
   2548e:	f000 fb33 	bl	25af8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   25492:	2800      	cmp	r0, #0
   25494:	d1ef      	bne.n	25476 <z_impl_k_queue_get+0x3a>
   25496:	4b02      	ldr	r3, [pc, #8]	; (254a0 <z_impl_k_queue_get+0x64>)
   25498:	689b      	ldr	r3, [r3, #8]
   2549a:	695c      	ldr	r4, [r3, #20]
   2549c:	e7eb      	b.n	25476 <z_impl_k_queue_get+0x3a>
   2549e:	bf00      	nop
   254a0:	2000d8fc 	.word	0x2000d8fc

000254a4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   254a4:	b538      	push	{r3, r4, r5, lr}
   254a6:	4604      	mov	r4, r0
	__asm__ volatile(
   254a8:	f04f 0320 	mov.w	r3, #32
   254ac:	f3ef 8511 	mrs	r5, BASEPRI
   254b0:	f383 8812 	msr	BASEPRI_MAX, r3
   254b4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   254b8:	f005 fd4a 	bl	2af50 <z_unpend_first_thread>

	if (thread != NULL) {
   254bc:	b148      	cbz	r0, 254d2 <z_impl_k_sem_give+0x2e>
   254be:	2200      	movs	r2, #0
   254c0:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   254c2:	f005 fd0e 	bl	2aee2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   254c6:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   254c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   254cc:	4807      	ldr	r0, [pc, #28]	; (254ec <z_impl_k_sem_give+0x48>)
   254ce:	f000 bb77 	b.w	25bc0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   254d2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   254d6:	429a      	cmp	r2, r3
   254d8:	bf18      	it	ne
   254da:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   254dc:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   254de:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   254e0:	f104 0010 	add.w	r0, r4, #16
   254e4:	f005 ff84 	bl	2b3f0 <z_handle_obj_poll_events>
}
   254e8:	e7ed      	b.n	254c6 <z_impl_k_sem_give+0x22>
   254ea:	bf00      	nop
   254ec:	2000e057 	.word	0x2000e057

000254f0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   254f0:	b513      	push	{r0, r1, r4, lr}
   254f2:	f04f 0420 	mov.w	r4, #32
   254f6:	f3ef 8111 	mrs	r1, BASEPRI
   254fa:	f384 8812 	msr	BASEPRI_MAX, r4
   254fe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   25502:	6884      	ldr	r4, [r0, #8]
   25504:	b144      	cbz	r4, 25518 <z_impl_k_sem_take+0x28>
		sem->count--;
   25506:	3c01      	subs	r4, #1
   25508:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   2550a:	f381 8811 	msr	BASEPRI, r1
   2550e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   25512:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   25514:	b002      	add	sp, #8
   25516:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25518:	ea52 0403 	orrs.w	r4, r2, r3
   2551c:	d106      	bne.n	2552c <z_impl_k_sem_take+0x3c>
   2551e:	f381 8811 	msr	BASEPRI, r1
   25522:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   25526:	f06f 000f 	mvn.w	r0, #15
   2552a:	e7f3      	b.n	25514 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2552c:	e9cd 2300 	strd	r2, r3, [sp]
   25530:	4602      	mov	r2, r0
   25532:	4802      	ldr	r0, [pc, #8]	; (2553c <z_impl_k_sem_take+0x4c>)
   25534:	f000 fae0 	bl	25af8 <z_pend_curr>
	return ret;
   25538:	e7ec      	b.n	25514 <z_impl_k_sem_take+0x24>
   2553a:	bf00      	nop
   2553c:	2000e057 	.word	0x2000e057

00025540 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   25540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25544:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   25546:	f04f 38ff 	mov.w	r8, #4294967295
   2554a:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
   2554e:	4e48      	ldr	r6, [pc, #288]	; (25670 <work_queue_main+0x130>)
{
   25550:	b085      	sub	sp, #20
	__asm__ volatile(
   25552:	f04f 0320 	mov.w	r3, #32
   25556:	f3ef 8711 	mrs	r7, BASEPRI
   2555a:	f383 8812 	msr	BASEPRI_MAX, r3
   2555e:	f3bf 8f6f 	isb	sy
   25562:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   25566:	b98d      	cbnz	r5, 2558c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   25568:	2102      	movs	r1, #2
   2556a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   2556e:	f005 fbe3 	bl	2ad38 <flag_test_and_clear>
   25572:	2800      	cmp	r0, #0
   25574:	d143      	bne.n	255fe <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   25576:	2300      	movs	r3, #0
   25578:	4639      	mov	r1, r7
   2557a:	e9cd 8900 	strd	r8, r9, [sp]
   2557e:	9302      	str	r3, [sp, #8]
   25580:	f104 0290 	add.w	r2, r4, #144	; 0x90
   25584:	483b      	ldr	r0, [pc, #236]	; (25674 <work_queue_main+0x134>)
   25586:	f000 fcbb 	bl	25f00 <z_sched_wait>
			continue;
   2558a:	e7e2      	b.n	25552 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2558c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   25590:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25592:	4295      	cmp	r5, r2
	list->head = node;
   25594:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	list->tail = node;
   25598:	bf08      	it	eq
   2559a:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	*flagp |= BIT(bit);
   2559e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   255a2:	f043 0302 	orr.w	r3, r3, #2
   255a6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   255aa:	68eb      	ldr	r3, [r5, #12]
   255ac:	f023 0304 	bic.w	r3, r3, #4
   255b0:	f043 0301 	orr.w	r3, r3, #1
   255b4:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   255b6:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   255b8:	f387 8811 	msr	BASEPRI, r7
   255bc:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   255c0:	4628      	mov	r0, r5
   255c2:	4798      	blx	r3
	__asm__ volatile(
   255c4:	f04f 0320 	mov.w	r3, #32
   255c8:	f3ef 8b11 	mrs	fp, BASEPRI
   255cc:	f383 8812 	msr	BASEPRI_MAX, r3
   255d0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   255d4:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   255d6:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   255d8:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   255dc:	d419      	bmi.n	25612 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   255de:	60ea      	str	r2, [r5, #12]
   255e0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   255e4:	f023 0302 	bic.w	r3, r3, #2
   255e8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	__asm__ volatile(
   255ec:	f38b 8811 	msr	BASEPRI, fp
   255f0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   255f4:	05db      	lsls	r3, r3, #23
   255f6:	d4ac      	bmi.n	25552 <work_queue_main+0x12>
	z_impl_k_yield();
   255f8:	f000 fb80 	bl	25cfc <z_impl_k_yield>
}
   255fc:	e7a9      	b.n	25552 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   255fe:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   25602:	2200      	movs	r2, #0
   25604:	2101      	movs	r1, #1
   25606:	4628      	mov	r0, r5
   25608:	f005 fcf8 	bl	2affc <z_sched_wake>
   2560c:	2800      	cmp	r0, #0
   2560e:	d1f8      	bne.n	25602 <work_queue_main+0xc2>
   25610:	e7b1      	b.n	25576 <work_queue_main+0x36>
	return list->head;
   25612:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   25614:	f023 0303 	bic.w	r3, r3, #3
   25618:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2561a:	2800      	cmp	r0, #0
   2561c:	d0e0      	beq.n	255e0 <work_queue_main+0xa0>
	return node->next;
   2561e:	2700      	movs	r7, #0
	parent->next = child;
   25620:	463b      	mov	r3, r7
	return node->next;
   25622:	f8d0 a000 	ldr.w	sl, [r0]
   25626:	2800      	cmp	r0, #0
   25628:	d0da      	beq.n	255e0 <work_queue_main+0xa0>
		if (wc->work == work) {
   2562a:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   2562c:	4601      	mov	r1, r0
		if (wc->work == work) {
   2562e:	4295      	cmp	r5, r2
   25630:	d10c      	bne.n	2564c <work_queue_main+0x10c>
   25632:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   25634:	b99f      	cbnz	r7, 2565e <work_queue_main+0x11e>
   25636:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   25638:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2563a:	4282      	cmp	r2, r0
   2563c:	d100      	bne.n	25640 <work_queue_main+0x100>
	list->tail = node;
   2563e:	6071      	str	r1, [r6, #4]
	parent->next = child;
   25640:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   25644:	f7ff ff2e 	bl	254a4 <z_impl_k_sem_give>
}
   25648:	4639      	mov	r1, r7
   2564a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2564c:	f1ba 0f00 	cmp.w	sl, #0
   25650:	d00b      	beq.n	2566a <work_queue_main+0x12a>
	return node->next;
   25652:	f8da 2000 	ldr.w	r2, [sl]
   25656:	4650      	mov	r0, sl
   25658:	460f      	mov	r7, r1
   2565a:	4692      	mov	sl, r2
   2565c:	e7e3      	b.n	25626 <work_queue_main+0xe6>
	parent->next = child;
   2565e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   25660:	6872      	ldr	r2, [r6, #4]
   25662:	4282      	cmp	r2, r0
	list->tail = node;
   25664:	bf08      	it	eq
   25666:	6077      	streq	r7, [r6, #4]
}
   25668:	e7ea      	b.n	25640 <work_queue_main+0x100>
   2566a:	4652      	mov	r2, sl
   2566c:	e7f3      	b.n	25656 <work_queue_main+0x116>
   2566e:	bf00      	nop
   25670:	2000d924 	.word	0x2000d924
   25674:	2000e057 	.word	0x2000e057

00025678 <submit_to_queue_locked>:
{
   25678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2567a:	68c3      	ldr	r3, [r0, #12]
{
   2567c:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2567e:	079a      	lsls	r2, r3, #30
{
   25680:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25682:	f3c3 0640 	ubfx	r6, r3, #1, #1
   25686:	d42c      	bmi.n	256e2 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   25688:	075b      	lsls	r3, r3, #29
   2568a:	d41a      	bmi.n	256c2 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   2568c:	680b      	ldr	r3, [r1, #0]
   2568e:	b90b      	cbnz	r3, 25694 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   25690:	6883      	ldr	r3, [r0, #8]
   25692:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   25694:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   25696:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   25698:	bf42      	ittt	mi
   2569a:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   2569c:	2602      	movmi	r6, #2
			*queuep = work->queue;
   2569e:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   256a0:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   256a2:	bf58      	it	pl
   256a4:	2601      	movpl	r6, #1
	if (queue == NULL) {
   256a6:	2d00      	cmp	r5, #0
   256a8:	d03a      	beq.n	25720 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   256aa:	4b1f      	ldr	r3, [pc, #124]	; (25728 <submit_to_queue_locked+0xb0>)
   256ac:	689b      	ldr	r3, [r3, #8]
   256ae:	42ab      	cmp	r3, r5
   256b0:	d00a      	beq.n	256c8 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   256b2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   256b6:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   256b8:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   256bc:	d414      	bmi.n	256e8 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   256be:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   256c2:	2300      	movs	r3, #0
   256c4:	603b      	str	r3, [r7, #0]
	return ret;
   256c6:	e025      	b.n	25714 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   256c8:	f005 fa86 	bl	2abd8 <k_is_in_isr>
   256cc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   256d0:	2800      	cmp	r0, #0
   256d2:	d1f0      	bne.n	256b6 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   256d4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   256d6:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   256da:	d5f0      	bpl.n	256be <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   256dc:	b152      	cbz	r2, 256f4 <submit_to_queue_locked+0x7c>
   256de:	075b      	lsls	r3, r3, #29
   256e0:	d408      	bmi.n	256f4 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   256e2:	f06f 060f 	mvn.w	r6, #15
   256e6:	e7ec      	b.n	256c2 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   256e8:	2a00      	cmp	r2, #0
   256ea:	d1fa      	bne.n	256e2 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   256ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   256f0:	2b00      	cmp	r3, #0
   256f2:	d1f6      	bne.n	256e2 <submit_to_queue_locked+0x6a>
	parent->next = child;
   256f4:	2300      	movs	r3, #0
   256f6:	6023      	str	r3, [r4, #0]
	return list->tail;
   256f8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   256fc:	b963      	cbnz	r3, 25718 <submit_to_queue_locked+0xa0>
	list->head = node;
   256fe:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   25702:	4628      	mov	r0, r5
   25704:	f005 fb31 	bl	2ad6a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   25708:	68e3      	ldr	r3, [r4, #12]
   2570a:	f043 0304 	orr.w	r3, r3, #4
   2570e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   25710:	683b      	ldr	r3, [r7, #0]
   25712:	60a3      	str	r3, [r4, #8]
}
   25714:	4630      	mov	r0, r6
   25716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   25718:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2571a:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   2571e:	e7f0      	b.n	25702 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   25720:	f06f 0615 	mvn.w	r6, #21
   25724:	e7cd      	b.n	256c2 <submit_to_queue_locked+0x4a>
   25726:	bf00      	nop
   25728:	2000d8fc 	.word	0x2000d8fc

0002572c <k_work_submit>:
{
   2572c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2572e:	4801      	ldr	r0, [pc, #4]	; (25734 <k_work_submit+0x8>)
   25730:	f005 bb55 	b.w	2adde <k_work_submit_to_queue>
   25734:	2000cfb8 	.word	0x2000cfb8

00025738 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   25738:	b5f0      	push	{r4, r5, r6, r7, lr}
   2573a:	4604      	mov	r4, r0
	list->head = NULL;
   2573c:	2000      	movs	r0, #0
   2573e:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   25740:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   25744:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   25746:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   2574a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   2574e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   25752:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   25756:	b31d      	cbz	r5, 257a0 <k_work_queue_start+0x68>
   25758:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2575a:	2800      	cmp	r0, #0
   2575c:	f240 1001 	movw	r0, #257	; 0x101
   25760:	bf08      	it	eq
   25762:	2001      	moveq	r0, #1
	*flagp = flags;
   25764:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   25768:	2000      	movs	r0, #0
   2576a:	f04f 36ff 	mov.w	r6, #4294967295
   2576e:	f04f 37ff 	mov.w	r7, #4294967295
   25772:	e9cd 3003 	strd	r3, r0, [sp, #12]
   25776:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2577a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2577e:	4620      	mov	r0, r4
   25780:	4b08      	ldr	r3, [pc, #32]	; (257a4 <k_work_queue_start+0x6c>)
   25782:	9400      	str	r4, [sp, #0]
   25784:	f7ff fd00 	bl	25188 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   25788:	b125      	cbz	r5, 25794 <k_work_queue_start+0x5c>
   2578a:	6829      	ldr	r1, [r5, #0]
   2578c:	b111      	cbz	r1, 25794 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   2578e:	4620      	mov	r0, r4
   25790:	f005 fa28 	bl	2abe4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   25794:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   25796:	b009      	add	sp, #36	; 0x24
   25798:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2579c:	f005 ba27 	b.w	2abee <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   257a0:	2001      	movs	r0, #1
   257a2:	e7df      	b.n	25764 <k_work_queue_start+0x2c>
   257a4:	00025541 	.word	0x00025541

000257a8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   257a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   257aa:	9001      	str	r0, [sp, #4]
   257ac:	4608      	mov	r0, r1
	__asm__ volatile(
   257ae:	f04f 0120 	mov.w	r1, #32
   257b2:	f3ef 8411 	mrs	r4, BASEPRI
   257b6:	f381 8812 	msr	BASEPRI_MAX, r1
   257ba:	f3bf 8f6f 	isb	sy
	return *flagp;
   257be:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   257c0:	f011 0f0e 	tst.w	r1, #14
   257c4:	d116      	bne.n	257f4 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   257c6:	ea53 0502 	orrs.w	r5, r3, r2
   257ca:	d108      	bne.n	257de <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   257cc:	a901      	add	r1, sp, #4
   257ce:	f7ff ff53 	bl	25678 <submit_to_queue_locked>
	__asm__ volatile(
   257d2:	f384 8811 	msr	BASEPRI, r4
   257d6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   257da:	b003      	add	sp, #12
   257dc:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   257de:	f041 0108 	orr.w	r1, r1, #8
   257e2:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   257e4:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   257e6:	3010      	adds	r0, #16
	dwork->queue = *queuep;
   257e8:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   257ea:	4903      	ldr	r1, [pc, #12]	; (257f8 <k_work_schedule_for_queue+0x50>)
   257ec:	f000 fc02 	bl	25ff4 <z_add_timeout>
	return ret;
   257f0:	2001      	movs	r0, #1
   257f2:	e7ee      	b.n	257d2 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   257f4:	2000      	movs	r0, #0
   257f6:	e7ec      	b.n	257d2 <k_work_schedule_for_queue+0x2a>
   257f8:	0002ad79 	.word	0x0002ad79

000257fc <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   257fc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   257fe:	4801      	ldr	r0, [pc, #4]	; (25804 <k_work_schedule+0x8>)
   25800:	f7ff bfd2 	b.w	257a8 <k_work_schedule_for_queue>
   25804:	2000cfb8 	.word	0x2000cfb8

00025808 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   25808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2580a:	460c      	mov	r4, r1
   2580c:	4616      	mov	r6, r2
   2580e:	461d      	mov	r5, r3
   25810:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   25812:	f04f 0320 	mov.w	r3, #32
   25816:	f3ef 8711 	mrs	r7, BASEPRI
   2581a:	f383 8812 	msr	BASEPRI_MAX, r3
   2581e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   25822:	4608      	mov	r0, r1
   25824:	f005 fa93 	bl	2ad4e <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25828:	ea55 0306 	orrs.w	r3, r5, r6
   2582c:	d109      	bne.n	25842 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   2582e:	4620      	mov	r0, r4
   25830:	a901      	add	r1, sp, #4
   25832:	f7ff ff21 	bl	25678 <submit_to_queue_locked>
	__asm__ volatile(
   25836:	f387 8811 	msr	BASEPRI, r7
   2583a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2583e:	b003      	add	sp, #12
   25840:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   25842:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25844:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   25848:	f043 0308 	orr.w	r3, r3, #8
   2584c:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2584e:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25850:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   25852:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25854:	4902      	ldr	r1, [pc, #8]	; (25860 <k_work_reschedule_for_queue+0x58>)
   25856:	462b      	mov	r3, r5
   25858:	f000 fbcc 	bl	25ff4 <z_add_timeout>
	return ret;
   2585c:	2001      	movs	r0, #1
   2585e:	e7ea      	b.n	25836 <k_work_reschedule_for_queue+0x2e>
   25860:	0002ad79 	.word	0x0002ad79

00025864 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   25864:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   25866:	4801      	ldr	r0, [pc, #4]	; (2586c <k_work_reschedule+0x8>)
   25868:	f7ff bfce 	b.w	25808 <k_work_reschedule_for_queue>
   2586c:	2000cfb8 	.word	0x2000cfb8

00025870 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   25870:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   25872:	4d07      	ldr	r5, [pc, #28]	; (25890 <z_reset_time_slice+0x20>)
   25874:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   25876:	b154      	cbz	r4, 2588e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   25878:	f7f8 ff80 	bl	1e77c <sys_clock_elapsed>
   2587c:	4b05      	ldr	r3, [pc, #20]	; (25894 <z_reset_time_slice+0x24>)
   2587e:	4404      	add	r4, r0
   25880:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   25882:	6828      	ldr	r0, [r5, #0]
   25884:	2100      	movs	r1, #0
	}
}
   25886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   2588a:	f005 bc00 	b.w	2b08e <z_set_timeout_expiry>
}
   2588e:	bd38      	pop	{r3, r4, r5, pc}
   25890:	2000d934 	.word	0x2000d934
   25894:	2000d8fc 	.word	0x2000d8fc

00025898 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   25898:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2589a:	4d0d      	ldr	r5, [pc, #52]	; (258d0 <update_cache+0x38>)
   2589c:	462b      	mov	r3, r5
   2589e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   258a2:	429c      	cmp	r4, r3
   258a4:	d000      	beq.n	258a8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   258a6:	b904      	cbnz	r4, 258aa <update_cache+0x12>
   258a8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   258aa:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   258ac:	b938      	cbnz	r0, 258be <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   258ae:	7b5a      	ldrb	r2, [r3, #13]
   258b0:	06d2      	lsls	r2, r2, #27
   258b2:	d104      	bne.n	258be <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   258b4:	69a2      	ldr	r2, [r4, #24]
   258b6:	b912      	cbnz	r2, 258be <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   258b8:	89da      	ldrh	r2, [r3, #14]
   258ba:	2a7f      	cmp	r2, #127	; 0x7f
   258bc:	d805      	bhi.n	258ca <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   258be:	429c      	cmp	r4, r3
   258c0:	d002      	beq.n	258c8 <update_cache+0x30>
			z_reset_time_slice(thread);
   258c2:	4620      	mov	r0, r4
   258c4:	f7ff ffd4 	bl	25870 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   258c8:	4623      	mov	r3, r4
   258ca:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   258cc:	bd38      	pop	{r3, r4, r5, pc}
   258ce:	bf00      	nop
   258d0:	2000d8fc 	.word	0x2000d8fc

000258d4 <move_thread_to_end_of_prio_q>:
{
   258d4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   258d6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   258da:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   258dc:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   258de:	7b43      	ldrb	r3, [r0, #13]
   258e0:	da04      	bge.n	258ec <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   258e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   258e6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   258e8:	f005 fa96 	bl	2ae18 <sys_dlist_remove>
	return list->head == list;
   258ec:	4a15      	ldr	r2, [pc, #84]	; (25944 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   258ee:	7b4b      	ldrb	r3, [r1, #13]
   258f0:	4610      	mov	r0, r2
   258f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   258f6:	734b      	strb	r3, [r1, #13]
   258f8:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   258fc:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   258fe:	4283      	cmp	r3, r0
   25900:	bf08      	it	eq
   25902:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25904:	b923      	cbnz	r3, 25910 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   25906:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   2590a:	6021      	str	r1, [r4, #0]
	list->tail = node;
   2590c:	6251      	str	r1, [r2, #36]	; 0x24
}
   2590e:	e00c      	b.n	2592a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   25910:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   25914:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   25918:	42b5      	cmp	r5, r6
   2591a:	d00e      	beq.n	2593a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2591c:	42ae      	cmp	r6, r5
   2591e:	dd0c      	ble.n	2593a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   25920:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   25922:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   25926:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   25928:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   2592a:	6890      	ldr	r0, [r2, #8]
}
   2592c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   25930:	1a43      	subs	r3, r0, r1
   25932:	4258      	negs	r0, r3
   25934:	4158      	adcs	r0, r3
   25936:	f7ff bfaf 	b.w	25898 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2593a:	429c      	cmp	r4, r3
   2593c:	d0e3      	beq.n	25906 <move_thread_to_end_of_prio_q+0x32>
   2593e:	681b      	ldr	r3, [r3, #0]
   25940:	e7e0      	b.n	25904 <move_thread_to_end_of_prio_q+0x30>
   25942:	bf00      	nop
   25944:	2000d8fc 	.word	0x2000d8fc

00025948 <ready_thread>:
{
   25948:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2594a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2594e:	7b42      	ldrb	r2, [r0, #13]
   25950:	2b00      	cmp	r3, #0
   25952:	db29      	blt.n	259a8 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25954:	06d3      	lsls	r3, r2, #27
   25956:	d127      	bne.n	259a8 <ready_thread+0x60>
	return node->next != NULL;
   25958:	6983      	ldr	r3, [r0, #24]
   2595a:	bb2b      	cbnz	r3, 259a8 <ready_thread+0x60>
	return list->head == list;
   2595c:	4913      	ldr	r1, [pc, #76]	; (259ac <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2595e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   25962:	7342      	strb	r2, [r0, #13]
   25964:	460a      	mov	r2, r1
   25966:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2596a:	4294      	cmp	r4, r2
   2596c:	bf18      	it	ne
   2596e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   25970:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25972:	b923      	cbnz	r3, 2597e <ready_thread+0x36>
	node->prev = tail;
   25974:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   25978:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2597a:	6248      	str	r0, [r1, #36]	; 0x24
}
   2597c:	e00c      	b.n	25998 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   2597e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   25982:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   25986:	42b5      	cmp	r5, r6
   25988:	d00a      	beq.n	259a0 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2598a:	42ae      	cmp	r6, r5
   2598c:	dd08      	ble.n	259a0 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   2598e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25990:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   25994:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   25996:	6058      	str	r0, [r3, #4]
		update_cache(0);
   25998:	2000      	movs	r0, #0
}
   2599a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   2599c:	f7ff bf7c 	b.w	25898 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   259a0:	42a3      	cmp	r3, r4
   259a2:	d0e7      	beq.n	25974 <ready_thread+0x2c>
   259a4:	681b      	ldr	r3, [r3, #0]
   259a6:	e7e4      	b.n	25972 <ready_thread+0x2a>
}
   259a8:	bc70      	pop	{r4, r5, r6}
   259aa:	4770      	bx	lr
   259ac:	2000d8fc 	.word	0x2000d8fc

000259b0 <unready_thread>:
{
   259b0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   259b2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   259b6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   259b8:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   259ba:	7b43      	ldrb	r3, [r0, #13]
   259bc:	da04      	bge.n	259c8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   259be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   259c2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   259c4:	f005 fa28 	bl	2ae18 <sys_dlist_remove>
	update_cache(thread == _current);
   259c8:	4b04      	ldr	r3, [pc, #16]	; (259dc <unready_thread+0x2c>)
   259ca:	6898      	ldr	r0, [r3, #8]
   259cc:	1a43      	subs	r3, r0, r1
   259ce:	4258      	negs	r0, r3
   259d0:	4158      	adcs	r0, r3
}
   259d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   259d6:	f7ff bf5f 	b.w	25898 <update_cache>
   259da:	bf00      	nop
   259dc:	2000d8fc 	.word	0x2000d8fc

000259e0 <pend_locked>:
{
   259e0:	b570      	push	{r4, r5, r6, lr}
   259e2:	4615      	mov	r5, r2
   259e4:	461c      	mov	r4, r3
   259e6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   259e8:	f005 fa53 	bl	2ae92 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   259ec:	f1b4 3fff 	cmp.w	r4, #4294967295
   259f0:	bf08      	it	eq
   259f2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   259f6:	d008      	beq.n	25a0a <pend_locked+0x2a>
   259f8:	462a      	mov	r2, r5
   259fa:	4623      	mov	r3, r4
   259fc:	f106 0018 	add.w	r0, r6, #24
   25a00:	4902      	ldr	r1, [pc, #8]	; (25a0c <pend_locked+0x2c>)
}
   25a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25a06:	f000 baf5 	b.w	25ff4 <z_add_timeout>
   25a0a:	bd70      	pop	{r4, r5, r6, pc}
   25a0c:	0002ae4f 	.word	0x0002ae4f

00025a10 <k_sched_time_slice_set>:
{
   25a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25a12:	4604      	mov	r4, r0
   25a14:	460d      	mov	r5, r1
	__asm__ volatile(
   25a16:	f04f 0320 	mov.w	r3, #32
   25a1a:	f3ef 8711 	mrs	r7, BASEPRI
   25a1e:	f383 8812 	msr	BASEPRI_MAX, r3
   25a22:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   25a26:	2600      	movs	r6, #0
   25a28:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   25a2c:	f240 30e7 	movw	r0, #999	; 0x3e7
   25a30:	4631      	mov	r1, r6
   25a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25a36:	2300      	movs	r3, #0
   25a38:	fbe4 010c 	umlal	r0, r1, r4, ip
   25a3c:	f7f3 f964 	bl	18d08 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   25a40:	42b4      	cmp	r4, r6
   25a42:	dd02      	ble.n	25a4a <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   25a44:	2802      	cmp	r0, #2
   25a46:	bfb8      	it	lt
   25a48:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   25a4a:	4a07      	ldr	r2, [pc, #28]	; (25a68 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   25a4c:	4b07      	ldr	r3, [pc, #28]	; (25a6c <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   25a4e:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   25a50:	4a07      	ldr	r2, [pc, #28]	; (25a70 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   25a52:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   25a54:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   25a56:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   25a58:	f7ff ff0a 	bl	25870 <z_reset_time_slice>
	__asm__ volatile(
   25a5c:	f387 8811 	msr	BASEPRI, r7
   25a60:	f3bf 8f6f 	isb	sy
}
   25a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25a66:	bf00      	nop
   25a68:	2000d934 	.word	0x2000d934
   25a6c:	2000d8fc 	.word	0x2000d8fc
   25a70:	2000d930 	.word	0x2000d930

00025a74 <z_time_slice>:
{
   25a74:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25a76:	f04f 0320 	mov.w	r3, #32
   25a7a:	f3ef 8511 	mrs	r5, BASEPRI
   25a7e:	f383 8812 	msr	BASEPRI_MAX, r3
   25a82:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   25a86:	4b17      	ldr	r3, [pc, #92]	; (25ae4 <z_time_slice+0x70>)
   25a88:	4a17      	ldr	r2, [pc, #92]	; (25ae8 <z_time_slice+0x74>)
   25a8a:	689c      	ldr	r4, [r3, #8]
   25a8c:	6811      	ldr	r1, [r2, #0]
   25a8e:	428c      	cmp	r4, r1
   25a90:	d107      	bne.n	25aa2 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   25a92:	4620      	mov	r0, r4
   25a94:	f7ff feec 	bl	25870 <z_reset_time_slice>
	__asm__ volatile(
   25a98:	f385 8811 	msr	BASEPRI, r5
   25a9c:	f3bf 8f6f 	isb	sy
}
   25aa0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   25aa2:	2100      	movs	r1, #0
   25aa4:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   25aa6:	4a11      	ldr	r2, [pc, #68]	; (25aec <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   25aa8:	6812      	ldr	r2, [r2, #0]
   25aaa:	b1c2      	cbz	r2, 25ade <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   25aac:	89e2      	ldrh	r2, [r4, #14]
   25aae:	2a7f      	cmp	r2, #127	; 0x7f
   25ab0:	d815      	bhi.n	25ade <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   25ab2:	7b62      	ldrb	r2, [r4, #13]
   25ab4:	06d2      	lsls	r2, r2, #27
   25ab6:	d112      	bne.n	25ade <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   25ab8:	4a0d      	ldr	r2, [pc, #52]	; (25af0 <z_time_slice+0x7c>)
   25aba:	f994 100e 	ldrsb.w	r1, [r4, #14]
   25abe:	6812      	ldr	r2, [r2, #0]
   25ac0:	4291      	cmp	r1, r2
   25ac2:	db0c      	blt.n	25ade <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   25ac4:	4a0b      	ldr	r2, [pc, #44]	; (25af4 <z_time_slice+0x80>)
   25ac6:	4294      	cmp	r4, r2
   25ac8:	d009      	beq.n	25ade <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   25aca:	691a      	ldr	r2, [r3, #16]
   25acc:	4282      	cmp	r2, r0
   25ace:	dc03      	bgt.n	25ad8 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   25ad0:	4620      	mov	r0, r4
   25ad2:	f7ff feff 	bl	258d4 <move_thread_to_end_of_prio_q>
   25ad6:	e7dc      	b.n	25a92 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   25ad8:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   25ada:	611a      	str	r2, [r3, #16]
   25adc:	e7dc      	b.n	25a98 <z_time_slice+0x24>
   25ade:	2200      	movs	r2, #0
   25ae0:	e7fb      	b.n	25ada <z_time_slice+0x66>
   25ae2:	bf00      	nop
   25ae4:	2000d8fc 	.word	0x2000d8fc
   25ae8:	2000d92c 	.word	0x2000d92c
   25aec:	2000d934 	.word	0x2000d934
   25af0:	2000d930 	.word	0x2000d930
   25af4:	2000cea0 	.word	0x2000cea0

00025af8 <z_pend_curr>:
{
   25af8:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   25afa:	480c      	ldr	r0, [pc, #48]	; (25b2c <z_pend_curr+0x34>)
   25afc:	4d0c      	ldr	r5, [pc, #48]	; (25b30 <z_pend_curr+0x38>)
   25afe:	6886      	ldr	r6, [r0, #8]
{
   25b00:	460c      	mov	r4, r1
	pending_current = _current;
   25b02:	602e      	str	r6, [r5, #0]
{
   25b04:	4611      	mov	r1, r2
   25b06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   25b0a:	f04f 0620 	mov.w	r6, #32
   25b0e:	f3ef 8511 	mrs	r5, BASEPRI
   25b12:	f386 8812 	msr	BASEPRI_MAX, r6
   25b16:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   25b1a:	6880      	ldr	r0, [r0, #8]
   25b1c:	f7ff ff60 	bl	259e0 <pend_locked>
	ret = arch_swap(key);
   25b20:	4620      	mov	r0, r4
}
   25b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25b26:	f7f6 ba8b 	b.w	1c040 <arch_swap>
   25b2a:	bf00      	nop
   25b2c:	2000d8fc 	.word	0x2000d8fc
   25b30:	2000d92c 	.word	0x2000d92c

00025b34 <z_set_prio>:
{
   25b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25b36:	4604      	mov	r4, r0
   25b38:	f04f 0320 	mov.w	r3, #32
   25b3c:	f3ef 8611 	mrs	r6, BASEPRI
   25b40:	f383 8812 	msr	BASEPRI_MAX, r3
   25b44:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   25b48:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   25b4a:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25b4c:	06da      	lsls	r2, r3, #27
   25b4e:	d119      	bne.n	25b84 <z_set_prio+0x50>
	return node->next != NULL;
   25b50:	6985      	ldr	r5, [r0, #24]
   25b52:	b9bd      	cbnz	r5, 25b84 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25b58:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25b5a:	f005 f95d 	bl	2ae18 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   25b5e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   25b60:	4a16      	ldr	r2, [pc, #88]	; (25bbc <z_set_prio+0x88>)
   25b62:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25b66:	7343      	strb	r3, [r0, #13]
   25b68:	4613      	mov	r3, r2
				thread->base.prio = prio;
   25b6a:	7381      	strb	r1, [r0, #14]
   25b6c:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25b70:	4298      	cmp	r0, r3
   25b72:	bf18      	it	ne
   25b74:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   25b76:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25b78:	b95d      	cbnz	r5, 25b92 <z_set_prio+0x5e>
	node->prev = tail;
   25b7a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   25b7e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   25b80:	6254      	str	r4, [r2, #36]	; 0x24
}
   25b82:	e011      	b.n	25ba8 <z_set_prio+0x74>
   25b84:	2000      	movs	r0, #0
			thread->base.prio = prio;
   25b86:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   25b88:	f386 8811 	msr	BASEPRI, r6
   25b8c:	f3bf 8f6f 	isb	sy
}
   25b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   25b92:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   25b96:	42b9      	cmp	r1, r7
   25b98:	d00b      	beq.n	25bb2 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25b9a:	428f      	cmp	r7, r1
   25b9c:	dd09      	ble.n	25bb2 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   25b9e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   25ba0:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   25ba4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   25ba6:	606c      	str	r4, [r5, #4]
			update_cache(1);
   25ba8:	2001      	movs	r0, #1
   25baa:	f7ff fe75 	bl	25898 <update_cache>
   25bae:	2001      	movs	r0, #1
   25bb0:	e7ea      	b.n	25b88 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   25bb2:	42a8      	cmp	r0, r5
   25bb4:	d0e1      	beq.n	25b7a <z_set_prio+0x46>
   25bb6:	682d      	ldr	r5, [r5, #0]
   25bb8:	e7de      	b.n	25b78 <z_set_prio+0x44>
   25bba:	bf00      	nop
   25bbc:	2000d8fc 	.word	0x2000d8fc

00025bc0 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25bc0:	b949      	cbnz	r1, 25bd6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25bc2:	f3ef 8005 	mrs	r0, IPSR
   25bc6:	b930      	cbnz	r0, 25bd6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   25bc8:	4b05      	ldr	r3, [pc, #20]	; (25be0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   25bca:	69da      	ldr	r2, [r3, #28]
   25bcc:	689b      	ldr	r3, [r3, #8]
   25bce:	429a      	cmp	r2, r3
   25bd0:	d001      	beq.n	25bd6 <z_reschedule+0x16>
   25bd2:	f7f6 ba35 	b.w	1c040 <arch_swap>
   25bd6:	f381 8811 	msr	BASEPRI, r1
   25bda:	f3bf 8f6f 	isb	sy
}
   25bde:	4770      	bx	lr
   25be0:	2000d8fc 	.word	0x2000d8fc

00025be4 <z_sched_start>:
{
   25be4:	b510      	push	{r4, lr}
	__asm__ volatile(
   25be6:	f04f 0220 	mov.w	r2, #32
   25bea:	f3ef 8411 	mrs	r4, BASEPRI
   25bee:	f382 8812 	msr	BASEPRI_MAX, r2
   25bf2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   25bf6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   25bf8:	0751      	lsls	r1, r2, #29
   25bfa:	d404      	bmi.n	25c06 <z_sched_start+0x22>
	__asm__ volatile(
   25bfc:	f384 8811 	msr	BASEPRI, r4
   25c00:	f3bf 8f6f 	isb	sy
}
   25c04:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25c06:	f022 0204 	bic.w	r2, r2, #4
   25c0a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   25c0c:	f7ff fe9c 	bl	25948 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   25c10:	4621      	mov	r1, r4
}
   25c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   25c16:	4801      	ldr	r0, [pc, #4]	; (25c1c <z_sched_start+0x38>)
   25c18:	f7ff bfd2 	b.w	25bc0 <z_reschedule>
   25c1c:	2000e057 	.word	0x2000e057

00025c20 <z_impl_k_thread_suspend>:
{
   25c20:	b570      	push	{r4, r5, r6, lr}
   25c22:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   25c24:	3018      	adds	r0, #24
   25c26:	f005 fa0c 	bl	2b042 <z_abort_timeout>
	__asm__ volatile(
   25c2a:	f04f 0320 	mov.w	r3, #32
   25c2e:	f3ef 8611 	mrs	r6, BASEPRI
   25c32:	f383 8812 	msr	BASEPRI_MAX, r3
   25c36:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   25c3a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   25c3e:	7b63      	ldrb	r3, [r4, #13]
   25c40:	2a00      	cmp	r2, #0
   25c42:	da05      	bge.n	25c50 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   25c48:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25c4a:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25c4c:	f005 f8e4 	bl	2ae18 <sys_dlist_remove>
		update_cache(thread == _current);
   25c50:	4d0b      	ldr	r5, [pc, #44]	; (25c80 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   25c52:	7b63      	ldrb	r3, [r4, #13]
   25c54:	68a8      	ldr	r0, [r5, #8]
   25c56:	f043 0310 	orr.w	r3, r3, #16
   25c5a:	7363      	strb	r3, [r4, #13]
   25c5c:	1b03      	subs	r3, r0, r4
   25c5e:	4258      	negs	r0, r3
   25c60:	4158      	adcs	r0, r3
   25c62:	f7ff fe19 	bl	25898 <update_cache>
	__asm__ volatile(
   25c66:	f386 8811 	msr	BASEPRI, r6
   25c6a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   25c6e:	68ab      	ldr	r3, [r5, #8]
   25c70:	42a3      	cmp	r3, r4
   25c72:	d103      	bne.n	25c7c <z_impl_k_thread_suspend+0x5c>
}
   25c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   25c78:	f005 b9a6 	b.w	2afc8 <z_reschedule_unlocked>
}
   25c7c:	bd70      	pop	{r4, r5, r6, pc}
   25c7e:	bf00      	nop
   25c80:	2000d8fc 	.word	0x2000d8fc

00025c84 <k_sched_lock>:
	__asm__ volatile(
   25c84:	f04f 0320 	mov.w	r3, #32
   25c88:	f3ef 8111 	mrs	r1, BASEPRI
   25c8c:	f383 8812 	msr	BASEPRI_MAX, r3
   25c90:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   25c94:	4b04      	ldr	r3, [pc, #16]	; (25ca8 <k_sched_lock+0x24>)
   25c96:	689a      	ldr	r2, [r3, #8]
   25c98:	7bd3      	ldrb	r3, [r2, #15]
   25c9a:	3b01      	subs	r3, #1
   25c9c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   25c9e:	f381 8811 	msr	BASEPRI, r1
   25ca2:	f3bf 8f6f 	isb	sy
}
   25ca6:	4770      	bx	lr
   25ca8:	2000d8fc 	.word	0x2000d8fc

00025cac <k_sched_unlock>:
{
   25cac:	b510      	push	{r4, lr}
	__asm__ volatile(
   25cae:	f04f 0320 	mov.w	r3, #32
   25cb2:	f3ef 8411 	mrs	r4, BASEPRI
   25cb6:	f383 8812 	msr	BASEPRI_MAX, r3
   25cba:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   25cbe:	4b08      	ldr	r3, [pc, #32]	; (25ce0 <k_sched_unlock+0x34>)
		update_cache(0);
   25cc0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   25cc2:	689a      	ldr	r2, [r3, #8]
   25cc4:	7bd3      	ldrb	r3, [r2, #15]
   25cc6:	3301      	adds	r3, #1
   25cc8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   25cca:	f7ff fde5 	bl	25898 <update_cache>
	__asm__ volatile(
   25cce:	f384 8811 	msr	BASEPRI, r4
   25cd2:	f3bf 8f6f 	isb	sy
}
   25cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   25cda:	f005 b975 	b.w	2afc8 <z_reschedule_unlocked>
   25cde:	bf00      	nop
   25ce0:	2000d8fc 	.word	0x2000d8fc

00025ce4 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   25ce4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   25ce6:	4b04      	ldr	r3, [pc, #16]	; (25cf8 <z_sched_init+0x14>)
   25ce8:	4608      	mov	r0, r1
   25cea:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   25cee:	e9c3 2208 	strd	r2, r2, [r3, #32]
   25cf2:	f7ff be8d 	b.w	25a10 <k_sched_time_slice_set>
   25cf6:	bf00      	nop
   25cf8:	2000d8fc 	.word	0x2000d8fc

00025cfc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   25cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   25cfe:	f04f 0320 	mov.w	r3, #32
   25d02:	f3ef 8511 	mrs	r5, BASEPRI
   25d06:	f383 8812 	msr	BASEPRI_MAX, r3
   25d0a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   25d0e:	4919      	ldr	r1, [pc, #100]	; (25d74 <z_impl_k_yield+0x78>)
   25d10:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25d12:	7b43      	ldrb	r3, [r0, #13]
   25d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25d18:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25d1a:	f005 f87d 	bl	2ae18 <sys_dlist_remove>
	return list->head == list;
   25d1e:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   25d20:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   25d22:	7b5a      	ldrb	r2, [r3, #13]
   25d24:	f062 027f 	orn	r2, r2, #127	; 0x7f
   25d28:	735a      	strb	r2, [r3, #13]
   25d2a:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   25d2e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25d30:	4282      	cmp	r2, r0
   25d32:	bf08      	it	eq
   25d34:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25d36:	b922      	cbnz	r2, 25d42 <z_impl_k_yield+0x46>
	node->prev = tail;
   25d38:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   25d3c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   25d3e:	624b      	str	r3, [r1, #36]	; 0x24
}
   25d40:	e00c      	b.n	25d5c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   25d42:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   25d46:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   25d4a:	42be      	cmp	r6, r7
   25d4c:	d00e      	beq.n	25d6c <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25d4e:	42b7      	cmp	r7, r6
   25d50:	dd0c      	ble.n	25d6c <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   25d52:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   25d54:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   25d58:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   25d5a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   25d5c:	2001      	movs	r0, #1
   25d5e:	f7ff fd9b 	bl	25898 <update_cache>
   25d62:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   25d64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   25d68:	f7f6 b96a 	b.w	1c040 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   25d6c:	42a2      	cmp	r2, r4
   25d6e:	d0e3      	beq.n	25d38 <z_impl_k_yield+0x3c>
   25d70:	6812      	ldr	r2, [r2, #0]
   25d72:	e7e0      	b.n	25d36 <z_impl_k_yield+0x3a>
   25d74:	2000d8fc 	.word	0x2000d8fc

00025d78 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   25d78:	ea50 0301 	orrs.w	r3, r0, r1
{
   25d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25d80:	4605      	mov	r5, r0
   25d82:	460e      	mov	r6, r1
	if (ticks == 0) {
   25d84:	d103      	bne.n	25d8e <z_tick_sleep+0x16>
	z_impl_k_yield();
   25d86:	f7ff ffb9 	bl	25cfc <z_impl_k_yield>
		k_yield();
		return 0;
   25d8a:	2000      	movs	r0, #0
   25d8c:	e02c      	b.n	25de8 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   25d8e:	1c83      	adds	r3, r0, #2
   25d90:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   25d94:	db2a      	blt.n	25dec <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   25d96:	f005 f996 	bl	2b0c6 <sys_clock_tick_get_32>
   25d9a:	182c      	adds	r4, r5, r0
   25d9c:	f04f 0320 	mov.w	r3, #32
   25da0:	f3ef 8811 	mrs	r8, BASEPRI
   25da4:	f383 8812 	msr	BASEPRI_MAX, r3
   25da8:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   25dac:	4f11      	ldr	r7, [pc, #68]	; (25df4 <z_tick_sleep+0x7c>)
   25dae:	4b12      	ldr	r3, [pc, #72]	; (25df8 <z_tick_sleep+0x80>)
   25db0:	68b8      	ldr	r0, [r7, #8]
   25db2:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   25db4:	f7ff fdfc 	bl	259b0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   25db8:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25dba:	4910      	ldr	r1, [pc, #64]	; (25dfc <z_tick_sleep+0x84>)
   25dbc:	462a      	mov	r2, r5
   25dbe:	4633      	mov	r3, r6
   25dc0:	3018      	adds	r0, #24
   25dc2:	f000 f917 	bl	25ff4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   25dc6:	68ba      	ldr	r2, [r7, #8]
   25dc8:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   25dca:	7b53      	ldrb	r3, [r2, #13]
   25dcc:	f043 0310 	orr.w	r3, r3, #16
   25dd0:	7353      	strb	r3, [r2, #13]
   25dd2:	f7f6 f935 	bl	1c040 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   25dd6:	f005 f976 	bl	2b0c6 <sys_clock_tick_get_32>
   25dda:	1a20      	subs	r0, r4, r0
   25ddc:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   25de0:	2801      	cmp	r0, #1
   25de2:	f173 0300 	sbcs.w	r3, r3, #0
   25de6:	dbd0      	blt.n	25d8a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   25de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   25dec:	f06f 0401 	mvn.w	r4, #1
   25df0:	1a24      	subs	r4, r4, r0
   25df2:	e7d3      	b.n	25d9c <z_tick_sleep+0x24>
   25df4:	2000d8fc 	.word	0x2000d8fc
   25df8:	2000d92c 	.word	0x2000d92c
   25dfc:	0002ae4f 	.word	0x0002ae4f

00025e00 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25e00:	f1b1 3fff 	cmp.w	r1, #4294967295
   25e04:	bf08      	it	eq
   25e06:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   25e0a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25e0c:	d106      	bne.n	25e1c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   25e0e:	4b08      	ldr	r3, [pc, #32]	; (25e30 <z_impl_k_sleep+0x30>)
   25e10:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   25e12:	f7ff ff05 	bl	25c20 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   25e16:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   25e1a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   25e1c:	f7ff ffac 	bl	25d78 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   25e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   25e24:	fb80 0303 	smull	r0, r3, r0, r3
   25e28:	0bc0      	lsrs	r0, r0, #15
   25e2a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   25e2e:	e7f4      	b.n	25e1a <z_impl_k_sleep+0x1a>
   25e30:	2000d8fc 	.word	0x2000d8fc

00025e34 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   25e34:	4b01      	ldr	r3, [pc, #4]	; (25e3c <z_impl_z_current_get+0x8>)
   25e36:	6898      	ldr	r0, [r3, #8]
   25e38:	4770      	bx	lr
   25e3a:	bf00      	nop
   25e3c:	2000d8fc 	.word	0x2000d8fc

00025e40 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   25e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25e44:	4604      	mov	r4, r0
   25e46:	f04f 0320 	mov.w	r3, #32
   25e4a:	f3ef 8611 	mrs	r6, BASEPRI
   25e4e:	f383 8812 	msr	BASEPRI_MAX, r3
   25e52:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   25e56:	7b03      	ldrb	r3, [r0, #12]
   25e58:	07d9      	lsls	r1, r3, #31
   25e5a:	d50b      	bpl.n	25e74 <z_thread_abort+0x34>
	__asm__ volatile(
   25e5c:	f386 8811 	msr	BASEPRI, r6
   25e60:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   25e64:	4040      	eors	r0, r0
   25e66:	f380 8811 	msr	BASEPRI, r0
   25e6a:	f04f 0004 	mov.w	r0, #4
   25e6e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   25e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   25e74:	7b43      	ldrb	r3, [r0, #13]
   25e76:	071a      	lsls	r2, r3, #28
   25e78:	d504      	bpl.n	25e84 <z_thread_abort+0x44>
   25e7a:	f386 8811 	msr	BASEPRI, r6
   25e7e:	f3bf 8f6f 	isb	sy
   25e82:	e7f5      	b.n	25e70 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   25e84:	f023 0220 	bic.w	r2, r3, #32
   25e88:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   25e8c:	09d2      	lsrs	r2, r2, #7
   25e8e:	d120      	bne.n	25ed2 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   25e90:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   25e92:	68a3      	ldr	r3, [r4, #8]
   25e94:	b113      	cbz	r3, 25e9c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   25e96:	4620      	mov	r0, r4
   25e98:	f004 ffc6 	bl	2ae28 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   25e9c:	f104 0018 	add.w	r0, r4, #24
   25ea0:	f005 f8cf 	bl	2b042 <z_abort_timeout>
   25ea4:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   25ea8:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   25eac:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25eae:	42bd      	cmp	r5, r7
   25eb0:	d000      	beq.n	25eb4 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   25eb2:	b9b5      	cbnz	r5, 25ee2 <z_thread_abort+0xa2>
		update_cache(1);
   25eb4:	2001      	movs	r0, #1
   25eb6:	f7ff fcef 	bl	25898 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   25eba:	4b10      	ldr	r3, [pc, #64]	; (25efc <z_thread_abort+0xbc>)
   25ebc:	689b      	ldr	r3, [r3, #8]
   25ebe:	42a3      	cmp	r3, r4
   25ec0:	d1db      	bne.n	25e7a <z_thread_abort+0x3a>
   25ec2:	f3ef 8305 	mrs	r3, IPSR
   25ec6:	2b00      	cmp	r3, #0
   25ec8:	d1d7      	bne.n	25e7a <z_thread_abort+0x3a>
   25eca:	4630      	mov	r0, r6
   25ecc:	f7f6 f8b8 	bl	1c040 <arch_swap>
	return ret;
   25ed0:	e7d3      	b.n	25e7a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25ed2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   25ed6:	f043 0308 	orr.w	r3, r3, #8
   25eda:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25edc:	f004 ff9c 	bl	2ae18 <sys_dlist_remove>
}
   25ee0:	e7d7      	b.n	25e92 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   25ee2:	4628      	mov	r0, r5
   25ee4:	f004 ffa0 	bl	2ae28 <unpend_thread_no_timeout>
   25ee8:	f105 0018 	add.w	r0, r5, #24
   25eec:	f005 f8a9 	bl	2b042 <z_abort_timeout>
		ready_thread(thread);
   25ef0:	4628      	mov	r0, r5
   25ef2:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   25ef6:	f7ff fd27 	bl	25948 <ready_thread>
   25efa:	e7d7      	b.n	25eac <z_thread_abort+0x6c>
   25efc:	2000d8fc 	.word	0x2000d8fc

00025f00 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   25f00:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   25f02:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   25f06:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   25f08:	e9cd 6700 	strd	r6, r7, [sp]
   25f0c:	f7ff fdf4 	bl	25af8 <z_pend_curr>

	if (data != NULL) {
   25f10:	b11c      	cbz	r4, 25f1a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   25f12:	4b03      	ldr	r3, [pc, #12]	; (25f20 <z_sched_wait+0x20>)
   25f14:	689b      	ldr	r3, [r3, #8]
   25f16:	695b      	ldr	r3, [r3, #20]
   25f18:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   25f1a:	b002      	add	sp, #8
   25f1c:	bdd0      	pop	{r4, r6, r7, pc}
   25f1e:	bf00      	nop
   25f20:	2000d8fc 	.word	0x2000d8fc

00025f24 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   25f24:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   25f26:	4806      	ldr	r0, [pc, #24]	; (25f40 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   25f28:	4a06      	ldr	r2, [pc, #24]	; (25f44 <z_data_copy+0x20>)
   25f2a:	4907      	ldr	r1, [pc, #28]	; (25f48 <z_data_copy+0x24>)
   25f2c:	1a12      	subs	r2, r2, r0
   25f2e:	f004 fdd5 	bl	2aadc <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   25f32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   25f36:	4a05      	ldr	r2, [pc, #20]	; (25f4c <z_data_copy+0x28>)
   25f38:	4905      	ldr	r1, [pc, #20]	; (25f50 <z_data_copy+0x2c>)
   25f3a:	4806      	ldr	r0, [pc, #24]	; (25f54 <z_data_copy+0x30>)
   25f3c:	f004 bdce 	b.w	2aadc <z_early_memcpy>
   25f40:	2000c580 	.word	0x2000c580
   25f44:	2000c954 	.word	0x2000c954
   25f48:	0002ed9c 	.word	0x0002ed9c
   25f4c:	00000000 	.word	0x00000000
   25f50:	0002ed84 	.word	0x0002ed84
   25f54:	2000c580 	.word	0x2000c580

00025f58 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   25f58:	4b03      	ldr	r3, [pc, #12]	; (25f68 <elapsed+0x10>)
   25f5a:	681b      	ldr	r3, [r3, #0]
   25f5c:	b90b      	cbnz	r3, 25f62 <elapsed+0xa>
   25f5e:	f7f8 bc0d 	b.w	1e77c <sys_clock_elapsed>
}
   25f62:	2000      	movs	r0, #0
   25f64:	4770      	bx	lr
   25f66:	bf00      	nop
   25f68:	2000d938 	.word	0x2000d938

00025f6c <next_timeout>:

static int32_t next_timeout(void)
{
   25f6c:	b510      	push	{r4, lr}
	return list->head == list;
   25f6e:	4b11      	ldr	r3, [pc, #68]	; (25fb4 <next_timeout+0x48>)
   25f70:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25f72:	429c      	cmp	r4, r3
   25f74:	d10a      	bne.n	25f8c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   25f76:	f7ff ffef 	bl	25f58 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   25f7a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   25f7e:	4b0e      	ldr	r3, [pc, #56]	; (25fb8 <next_timeout+0x4c>)
   25f80:	691b      	ldr	r3, [r3, #16]
   25f82:	b113      	cbz	r3, 25f8a <next_timeout+0x1e>
   25f84:	4298      	cmp	r0, r3
   25f86:	bfa8      	it	ge
   25f88:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   25f8a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   25f8c:	f7ff ffe4 	bl	25f58 <elapsed>
	if ((to == NULL) ||
   25f90:	2c00      	cmp	r4, #0
   25f92:	d0f2      	beq.n	25f7a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   25f94:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   25f98:	1a1b      	subs	r3, r3, r0
   25f9a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   25f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   25fa2:	f172 0100 	sbcs.w	r1, r2, #0
   25fa6:	dae8      	bge.n	25f7a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   25fa8:	2a00      	cmp	r2, #0
   25faa:	bfac      	ite	ge
   25fac:	4618      	movge	r0, r3
   25fae:	2000      	movlt	r0, #0
   25fb0:	e7e5      	b.n	25f7e <next_timeout+0x12>
   25fb2:	bf00      	nop
   25fb4:	2000c6fc 	.word	0x2000c6fc
   25fb8:	2000d8fc 	.word	0x2000d8fc

00025fbc <remove_timeout>:
{
   25fbc:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25fbe:	b170      	cbz	r0, 25fde <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   25fc0:	4b0b      	ldr	r3, [pc, #44]	; (25ff0 <remove_timeout+0x34>)
   25fc2:	685b      	ldr	r3, [r3, #4]
   25fc4:	4298      	cmp	r0, r3
   25fc6:	d00a      	beq.n	25fde <remove_timeout+0x22>
   25fc8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   25fca:	b143      	cbz	r3, 25fde <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   25fcc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   25fd0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   25fd4:	1912      	adds	r2, r2, r4
   25fd6:	eb41 0105 	adc.w	r1, r1, r5
   25fda:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   25fde:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   25fe2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25fe4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25fe6:	2300      	movs	r3, #0
	node->prev = NULL;
   25fe8:	e9c0 3300 	strd	r3, r3, [r0]
}
   25fec:	bd30      	pop	{r4, r5, pc}
   25fee:	bf00      	nop
   25ff0:	2000c6fc 	.word	0x2000c6fc

00025ff4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
   25ff8:	bf08      	it	eq
   25ffa:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   25ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26000:	4604      	mov	r4, r0
   26002:	461d      	mov	r5, r3
   26004:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26006:	d061      	beq.n	260cc <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   26008:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2600a:	f04f 0320 	mov.w	r3, #32
   2600e:	f3ef 8711 	mrs	r7, BASEPRI
   26012:	f383 8812 	msr	BASEPRI_MAX, r3
   26016:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2601a:	3201      	adds	r2, #1
   2601c:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   26020:	da24      	bge.n	2606c <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   26022:	f06f 0301 	mvn.w	r3, #1
   26026:	492f      	ldr	r1, [pc, #188]	; (260e4 <z_add_timeout+0xf0>)
   26028:	e9d1 2000 	ldrd	r2, r0, [r1]
   2602c:	1a9b      	subs	r3, r3, r2
   2602e:	f04f 32ff 	mov.w	r2, #4294967295
   26032:	eb62 0000 	sbc.w	r0, r2, r0
   26036:	1b9e      	subs	r6, r3, r6
   26038:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   2603c:	2e01      	cmp	r6, #1
   2603e:	f170 0300 	sbcs.w	r3, r0, #0
   26042:	da01      	bge.n	26048 <z_add_timeout+0x54>
   26044:	2601      	movs	r6, #1
   26046:	2000      	movs	r0, #0
   26048:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   2604c:	4e26      	ldr	r6, [pc, #152]	; (260e8 <z_add_timeout+0xf4>)
   2604e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   26052:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26054:	45b4      	cmp	ip, r6
   26056:	bf08      	it	eq
   26058:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   2605c:	f1bc 0f00 	cmp.w	ip, #0
   26060:	d10d      	bne.n	2607e <z_add_timeout+0x8a>
	node->prev = tail;
   26062:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   26066:	602c      	str	r4, [r5, #0]
	list->tail = node;
   26068:	6074      	str	r4, [r6, #4]
}
   2606a:	e01c      	b.n	260a6 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   2606c:	f7ff ff74 	bl	25f58 <elapsed>
   26070:	3601      	adds	r6, #1
   26072:	f145 0500 	adc.w	r5, r5, #0
   26076:	1836      	adds	r6, r6, r0
   26078:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   2607c:	e7e4      	b.n	26048 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   2607e:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   26082:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   26086:	4293      	cmp	r3, r2
   26088:	eb71 0e00 	sbcs.w	lr, r1, r0
   2608c:	da1f      	bge.n	260ce <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   2608e:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   26090:	f8dc 3004 	ldr.w	r3, [ip, #4]
   26094:	eb60 0001 	sbc.w	r0, r0, r1
   26098:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   2609c:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   260a0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   260a2:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   260a6:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   260a8:	42b3      	cmp	r3, r6
   260aa:	d00b      	beq.n	260c4 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   260ac:	429c      	cmp	r4, r3
   260ae:	d109      	bne.n	260c4 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   260b0:	f7ff ff5c 	bl	25f6c <next_timeout>

			if (next_time == 0 ||
   260b4:	b118      	cbz	r0, 260be <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   260b6:	4b0d      	ldr	r3, [pc, #52]	; (260ec <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   260b8:	691b      	ldr	r3, [r3, #16]
   260ba:	4283      	cmp	r3, r0
   260bc:	d002      	beq.n	260c4 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   260be:	2100      	movs	r1, #0
   260c0:	f7f8 fb2a 	bl	1e718 <sys_clock_set_timeout>
	__asm__ volatile(
   260c4:	f387 8811 	msr	BASEPRI, r7
   260c8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   260cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   260ce:	1a9b      	subs	r3, r3, r2
   260d0:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   260d4:	45ac      	cmp	ip, r5
   260d6:	e9c4 3104 	strd	r3, r1, [r4, #16]
   260da:	d0c2      	beq.n	26062 <z_add_timeout+0x6e>
   260dc:	f8dc c000 	ldr.w	ip, [ip]
   260e0:	e7bc      	b.n	2605c <z_add_timeout+0x68>
   260e2:	bf00      	nop
   260e4:	2000cfb0 	.word	0x2000cfb0
   260e8:	2000c6fc 	.word	0x2000c6fc
   260ec:	2000d8fc 	.word	0x2000d8fc

000260f0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   260f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   260f4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   260f6:	f7ff fcbd 	bl	25a74 <z_time_slice>
	__asm__ volatile(
   260fa:	f04f 0320 	mov.w	r3, #32
   260fe:	f3ef 8611 	mrs	r6, BASEPRI
   26102:	f383 8812 	msr	BASEPRI_MAX, r3
   26106:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   2610a:	4f24      	ldr	r7, [pc, #144]	; (2619c <sys_clock_announce+0xac>)
	return list->head == list;
   2610c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 261a0 <sys_clock_announce+0xb0>
   26110:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   26114:	4a23      	ldr	r2, [pc, #140]	; (261a4 <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26116:	4540      	cmp	r0, r8
	announce_remaining = ticks;
   26118:	603c      	str	r4, [r7, #0]
	return list->head == list;
   2611a:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   2611e:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26122:	d00b      	beq.n	2613c <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   26124:	b150      	cbz	r0, 2613c <sys_clock_announce+0x4c>
   26126:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   2612a:	42ac      	cmp	r4, r5
   2612c:	eb71 090c 	sbcs.w	r9, r1, ip
   26130:	da17      	bge.n	26162 <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   26132:	1b2d      	subs	r5, r5, r4
   26134:	eb6c 0c01 	sbc.w	ip, ip, r1
   26138:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   2613c:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   2613e:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   26142:	eb4e 0101 	adc.w	r1, lr, r1
   26146:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   2614a:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   2614c:	f7ff ff0e 	bl	25f6c <next_timeout>
   26150:	4621      	mov	r1, r4
   26152:	f7f8 fae1 	bl	1e718 <sys_clock_set_timeout>
	__asm__ volatile(
   26156:	f386 8811 	msr	BASEPRI, r6
   2615a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2615e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   26162:	18eb      	adds	r3, r5, r3
   26164:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   26168:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   2616c:	2200      	movs	r2, #0
   2616e:	2300      	movs	r3, #0
   26170:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   26174:	f7ff ff22 	bl	25fbc <remove_timeout>
   26178:	f386 8811 	msr	BASEPRI, r6
   2617c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   26180:	6883      	ldr	r3, [r0, #8]
   26182:	4798      	blx	r3
	__asm__ volatile(
   26184:	f04f 0320 	mov.w	r3, #32
   26188:	f3ef 8611 	mrs	r6, BASEPRI
   2618c:	f383 8812 	msr	BASEPRI_MAX, r3
   26190:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   26194:	683c      	ldr	r4, [r7, #0]
   26196:	1b64      	subs	r4, r4, r5
   26198:	e7ba      	b.n	26110 <sys_clock_announce+0x20>
   2619a:	bf00      	nop
   2619c:	2000d938 	.word	0x2000d938
   261a0:	2000c6fc 	.word	0x2000c6fc
   261a4:	2000cfb0 	.word	0x2000cfb0

000261a8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   261a8:	b510      	push	{r4, lr}
   261aa:	f04f 0320 	mov.w	r3, #32
   261ae:	f3ef 8411 	mrs	r4, BASEPRI
   261b2:	f383 8812 	msr	BASEPRI_MAX, r3
   261b6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   261ba:	f7ff fecd 	bl	25f58 <elapsed>
   261be:	4603      	mov	r3, r0
   261c0:	4a05      	ldr	r2, [pc, #20]	; (261d8 <sys_clock_tick_get+0x30>)
   261c2:	e9d2 0100 	ldrd	r0, r1, [r2]
   261c6:	1818      	adds	r0, r3, r0
   261c8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   261cc:	f384 8811 	msr	BASEPRI, r4
   261d0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   261d4:	bd10      	pop	{r4, pc}
   261d6:	bf00      	nop
   261d8:	2000cfb0 	.word	0x2000cfb0

000261dc <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   261dc:	b570      	push	{r4, r5, r6, lr}
   261de:	4604      	mov	r4, r0
	__asm__ volatile(
   261e0:	f04f 0320 	mov.w	r3, #32
   261e4:	f3ef 8511 	mrs	r5, BASEPRI
   261e8:	f383 8812 	msr	BASEPRI_MAX, r3
   261ec:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   261f0:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   261f4:	3301      	adds	r3, #1
   261f6:	f142 0200 	adc.w	r2, r2, #0
   261fa:	2b02      	cmp	r3, #2
   261fc:	f172 0200 	sbcs.w	r2, r2, #0
   26200:	d322      	bcc.n	26248 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   26202:	f004 ff64 	bl	2b0ce <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   26206:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   2620a:	3001      	adds	r0, #1
   2620c:	f141 0100 	adc.w	r1, r1, #0
   26210:	18c0      	adds	r0, r0, r3
   26212:	eb41 0102 	adc.w	r1, r1, r2
   26216:	2801      	cmp	r0, #1
   26218:	f171 0100 	sbcs.w	r1, r1, #0
   2621c:	db32      	blt.n	26284 <z_timer_expiration_handler+0xa8>
   2621e:	f004 ff56 	bl	2b0ce <z_impl_k_uptime_ticks>
   26222:	3001      	adds	r0, #1
   26224:	f141 0300 	adc.w	r3, r1, #0
   26228:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   2622c:	1880      	adds	r0, r0, r2
   2622e:	f06f 0201 	mvn.w	r2, #1
   26232:	eb43 0301 	adc.w	r3, r3, r1
   26236:	f04f 31ff 	mov.w	r1, #4294967295
   2623a:	1a12      	subs	r2, r2, r0
   2623c:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26240:	4620      	mov	r0, r4
   26242:	491a      	ldr	r1, [pc, #104]	; (262ac <z_timer_expiration_handler+0xd0>)
   26244:	f7ff fed6 	bl	25ff4 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   26248:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2624a:	3301      	adds	r3, #1
   2624c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2624e:	6a23      	ldr	r3, [r4, #32]
   26250:	b173      	cbz	r3, 26270 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   26252:	f385 8811 	msr	BASEPRI, r5
   26256:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   2625a:	4620      	mov	r0, r4
   2625c:	6a23      	ldr	r3, [r4, #32]
   2625e:	4798      	blx	r3
	__asm__ volatile(
   26260:	f04f 0320 	mov.w	r3, #32
   26264:	f3ef 8511 	mrs	r5, BASEPRI
   26268:	f383 8812 	msr	BASEPRI_MAX, r3
   2626c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   26270:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26274:	42a6      	cmp	r6, r4
   26276:	d000      	beq.n	2627a <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   26278:	b94e      	cbnz	r6, 2628e <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   2627a:	f385 8811 	msr	BASEPRI, r5
   2627e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   26282:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   26284:	f06f 0201 	mvn.w	r2, #1
   26288:	f04f 33ff 	mov.w	r3, #4294967295
   2628c:	e7d8      	b.n	26240 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   2628e:	4630      	mov	r0, r6
   26290:	f004 fe37 	bl	2af02 <z_unpend_thread_no_timeout>
   26294:	2300      	movs	r3, #0
   26296:	67f3      	str	r3, [r6, #124]	; 0x7c
   26298:	f385 8811 	msr	BASEPRI, r5
   2629c:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   262a0:	4630      	mov	r0, r6
}
   262a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   262a6:	f004 be1c 	b.w	2aee2 <z_ready_thread>
   262aa:	bf00      	nop
   262ac:	000261dd 	.word	0x000261dd

000262b0 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   262b0:	f1b3 3fff 	cmp.w	r3, #4294967295
   262b4:	bf08      	it	eq
   262b6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   262ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   262be:	4619      	mov	r1, r3
   262c0:	4605      	mov	r5, r0
   262c2:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   262c6:	4614      	mov	r4, r2
   262c8:	4691      	mov	r9, r2
   262ca:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   262cc:	d037      	beq.n	2633e <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   262ce:	f1b0 3fff 	cmp.w	r0, #4294967295
   262d2:	bf08      	it	eq
   262d4:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   262d8:	4637      	mov	r7, r6
   262da:	4682      	mov	sl, r0
   262dc:	d011      	beq.n	26302 <z_impl_k_timer_start+0x52>
   262de:	ea50 0306 	orrs.w	r3, r0, r6
   262e2:	d00e      	beq.n	26302 <z_impl_k_timer_start+0x52>
   262e4:	1c72      	adds	r2, r6, #1
   262e6:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   262ea:	db0a      	blt.n	26302 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   262ec:	2e02      	cmp	r6, #2
   262ee:	4684      	mov	ip, r0
   262f0:	f170 0000 	sbcs.w	r0, r0, #0
   262f4:	bfbc      	itt	lt
   262f6:	2702      	movlt	r7, #2
   262f8:	f04f 0c00 	movlt.w	ip, #0
   262fc:	3f01      	subs	r7, #1
   262fe:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   26302:	1c63      	adds	r3, r4, #1
   26304:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   26308:	db0a      	blt.n	26320 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2630a:	2c01      	cmp	r4, #1
   2630c:	f171 0300 	sbcs.w	r3, r1, #0
   26310:	4622      	mov	r2, r4
   26312:	bfbc      	itt	lt
   26314:	2201      	movlt	r2, #1
   26316:	2100      	movlt	r1, #0
   26318:	f112 39ff 	adds.w	r9, r2, #4294967295
   2631c:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   26320:	4628      	mov	r0, r5
   26322:	f004 fe8e 	bl	2b042 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   26326:	2300      	movs	r3, #0
	timer->period = period;
   26328:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   2632c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2632e:	464a      	mov	r2, r9
   26330:	4643      	mov	r3, r8
   26332:	4628      	mov	r0, r5
		     duration);
}
   26334:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26338:	4902      	ldr	r1, [pc, #8]	; (26344 <z_impl_k_timer_start+0x94>)
   2633a:	f7ff be5b 	b.w	25ff4 <z_add_timeout>
}
   2633e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26342:	bf00      	nop
   26344:	000261dd 	.word	0x000261dd

00026348 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   26348:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2634c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2634e:	4b29      	ldr	r3, [pc, #164]	; (263f4 <z_impl_k_poll+0xac>)
{
   26350:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   26352:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   26354:	2301      	movs	r3, #1
   26356:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   2635a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2635e:	ea52 0305 	orrs.w	r3, r2, r5
   26362:	bf0c      	ite	eq
   26364:	2301      	moveq	r3, #1
   26366:	2300      	movne	r3, #0
   26368:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   2636c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   2636e:	f004 ff30 	bl	2b1d2 <register_events>
   26372:	4681      	mov	r9, r0
	__asm__ volatile(
   26374:	f04f 0320 	mov.w	r3, #32
   26378:	f3ef 8a11 	mrs	sl, BASEPRI
   2637c:	f383 8812 	msr	BASEPRI_MAX, r3
   26380:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   26384:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   26388:	b964      	cbnz	r4, 263a4 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   2638a:	4601      	mov	r1, r0
   2638c:	4652      	mov	r2, sl
   2638e:	4640      	mov	r0, r8
   26390:	f004 fff0 	bl	2b374 <clear_event_registrations>
	__asm__ volatile(
   26394:	f38a 8811 	msr	BASEPRI, sl
   26398:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   2639c:	4620      	mov	r0, r4
   2639e:	b002      	add	sp, #8
   263a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   263a4:	2300      	movs	r3, #0
   263a6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   263aa:	ea56 0305 	orrs.w	r3, r6, r5
   263ae:	d106      	bne.n	263be <z_impl_k_poll+0x76>
   263b0:	f38a 8811 	msr	BASEPRI, sl
   263b4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   263b8:	f06f 040a 	mvn.w	r4, #10
   263bc:	e7ee      	b.n	2639c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   263be:	4651      	mov	r1, sl
   263c0:	e9cd 6500 	strd	r6, r5, [sp]
   263c4:	4a0c      	ldr	r2, [pc, #48]	; (263f8 <z_impl_k_poll+0xb0>)
   263c6:	480d      	ldr	r0, [pc, #52]	; (263fc <z_impl_k_poll+0xb4>)
   263c8:	f7ff fb96 	bl	25af8 <z_pend_curr>
   263cc:	4604      	mov	r4, r0
	__asm__ volatile(
   263ce:	f04f 0320 	mov.w	r3, #32
   263d2:	f3ef 8511 	mrs	r5, BASEPRI
   263d6:	f383 8812 	msr	BASEPRI_MAX, r3
   263da:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   263de:	462a      	mov	r2, r5
   263e0:	4649      	mov	r1, r9
   263e2:	4640      	mov	r0, r8
   263e4:	f004 ffc6 	bl	2b374 <clear_event_registrations>
	__asm__ volatile(
   263e8:	f385 8811 	msr	BASEPRI, r5
   263ec:	f3bf 8f6f 	isb	sy
	return swap_rc;
   263f0:	e7d4      	b.n	2639c <z_impl_k_poll+0x54>
   263f2:	bf00      	nop
   263f4:	2000d8fc 	.word	0x2000d8fc
   263f8:	2000c704 	.word	0x2000c704
   263fc:	2000e057 	.word	0x2000e057

00026400 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   26400:	b538      	push	{r3, r4, r5, lr}
   26402:	4603      	mov	r3, r0
	__asm__ volatile(
   26404:	f04f 0220 	mov.w	r2, #32
   26408:	f3ef 8511 	mrs	r5, BASEPRI
   2640c:	f382 8812 	msr	BASEPRI_MAX, r2
   26410:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   26414:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   26416:	2101      	movs	r1, #1
   26418:	6081      	str	r1, [r0, #8]
	return list->head == list;
   2641a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2641c:	4283      	cmp	r3, r0
   2641e:	d106      	bne.n	2642e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   26420:	f385 8811 	msr	BASEPRI, r5
   26424:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   26428:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   2642a:	4620      	mov	r0, r4
   2642c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   2642e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   26432:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26434:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26436:	2300      	movs	r3, #0
	node->prev = NULL;
   26438:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2643c:	f004 ff40 	bl	2b2c0 <signal_poll_event>
	z_reschedule(&lock, key);
   26440:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   26442:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   26444:	4801      	ldr	r0, [pc, #4]	; (2644c <z_impl_k_poll_signal_raise+0x4c>)
   26446:	f7ff fbbb 	bl	25bc0 <z_reschedule>
	return rc;
   2644a:	e7ee      	b.n	2642a <z_impl_k_poll_signal_raise+0x2a>
   2644c:	2000e057 	.word	0x2000e057

00026450 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   26450:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   26452:	4601      	mov	r1, r0
   26454:	4801      	ldr	r0, [pc, #4]	; (2645c <k_aligned_alloc+0xc>)
   26456:	f004 bfe3 	b.w	2b420 <z_heap_aligned_alloc>
   2645a:	bf00      	nop
   2645c:	2000c81c 	.word	0x2000c81c

00026460 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   26460:	4b01      	ldr	r3, [pc, #4]	; (26468 <k_thread_system_pool_assign+0x8>)
   26462:	6743      	str	r3, [r0, #116]	; 0x74
}
   26464:	4770      	bx	lr
   26466:	bf00      	nop
   26468:	2000c81c 	.word	0x2000c81c

0002646c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2646c:	b538      	push	{r3, r4, r5, lr}
   2646e:	4604      	mov	r4, r0
   26470:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   26472:	f004 fbb1 	bl	2abd8 <k_is_in_isr>
   26476:	b920      	cbnz	r0, 26482 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   26478:	4b06      	ldr	r3, [pc, #24]	; (26494 <z_thread_aligned_alloc+0x28>)
   2647a:	689b      	ldr	r3, [r3, #8]
   2647c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2647e:	b90b      	cbnz	r3, 26484 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   26480:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   26482:	4b05      	ldr	r3, [pc, #20]	; (26498 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   26484:	462a      	mov	r2, r5
   26486:	4621      	mov	r1, r4
   26488:	4618      	mov	r0, r3
}
   2648a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   2648e:	f004 bfc7 	b.w	2b420 <z_heap_aligned_alloc>
   26492:	bf00      	nop
   26494:	2000d8fc 	.word	0x2000d8fc
   26498:	2000c81c 	.word	0x2000c81c

0002649c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   2649c:	4801      	ldr	r0, [pc, #4]	; (264a4 <boot_banner+0x8>)
   2649e:	f001 b87c 	b.w	2759a <printk>
   264a2:	bf00      	nop
   264a4:	0002ebe9 	.word	0x0002ebe9

000264a8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   264a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   264aa:	2400      	movs	r4, #0
   264ac:	4b08      	ldr	r3, [pc, #32]	; (264d0 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   264ae:	f44f 6290 	mov.w	r2, #1152	; 0x480
	struct k_work_queue_config cfg = {
   264b2:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   264b4:	ab02      	add	r3, sp, #8
   264b6:	9300      	str	r3, [sp, #0]
   264b8:	4906      	ldr	r1, [pc, #24]	; (264d4 <k_sys_work_q_init+0x2c>)
   264ba:	f04f 33ff 	mov.w	r3, #4294967295
   264be:	4806      	ldr	r0, [pc, #24]	; (264d8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   264c0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   264c4:	f7ff f938 	bl	25738 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   264c8:	4620      	mov	r0, r4
   264ca:	b004      	add	sp, #16
   264cc:	bd10      	pop	{r4, pc}
   264ce:	bf00      	nop
   264d0:	0002ec17 	.word	0x0002ec17
   264d4:	20010598 	.word	0x20010598
   264d8:	2000cfb8 	.word	0x2000cfb8

000264dc <_free_r>:
   264dc:	b538      	push	{r3, r4, r5, lr}
   264de:	4605      	mov	r5, r0
   264e0:	2900      	cmp	r1, #0
   264e2:	d041      	beq.n	26568 <_free_r+0x8c>
   264e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   264e8:	1f0c      	subs	r4, r1, #4
   264ea:	2b00      	cmp	r3, #0
   264ec:	bfb8      	it	lt
   264ee:	18e4      	addlt	r4, r4, r3
   264f0:	f000 faba 	bl	26a68 <__malloc_lock>
   264f4:	4a1d      	ldr	r2, [pc, #116]	; (2656c <_free_r+0x90>)
   264f6:	6813      	ldr	r3, [r2, #0]
   264f8:	b933      	cbnz	r3, 26508 <_free_r+0x2c>
   264fa:	6063      	str	r3, [r4, #4]
   264fc:	6014      	str	r4, [r2, #0]
   264fe:	4628      	mov	r0, r5
   26500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26504:	f000 bab6 	b.w	26a74 <__malloc_unlock>
   26508:	42a3      	cmp	r3, r4
   2650a:	d908      	bls.n	2651e <_free_r+0x42>
   2650c:	6820      	ldr	r0, [r4, #0]
   2650e:	1821      	adds	r1, r4, r0
   26510:	428b      	cmp	r3, r1
   26512:	bf01      	itttt	eq
   26514:	6819      	ldreq	r1, [r3, #0]
   26516:	685b      	ldreq	r3, [r3, #4]
   26518:	1809      	addeq	r1, r1, r0
   2651a:	6021      	streq	r1, [r4, #0]
   2651c:	e7ed      	b.n	264fa <_free_r+0x1e>
   2651e:	461a      	mov	r2, r3
   26520:	685b      	ldr	r3, [r3, #4]
   26522:	b10b      	cbz	r3, 26528 <_free_r+0x4c>
   26524:	42a3      	cmp	r3, r4
   26526:	d9fa      	bls.n	2651e <_free_r+0x42>
   26528:	6811      	ldr	r1, [r2, #0]
   2652a:	1850      	adds	r0, r2, r1
   2652c:	42a0      	cmp	r0, r4
   2652e:	d10b      	bne.n	26548 <_free_r+0x6c>
   26530:	6820      	ldr	r0, [r4, #0]
   26532:	4401      	add	r1, r0
   26534:	1850      	adds	r0, r2, r1
   26536:	6011      	str	r1, [r2, #0]
   26538:	4283      	cmp	r3, r0
   2653a:	d1e0      	bne.n	264fe <_free_r+0x22>
   2653c:	6818      	ldr	r0, [r3, #0]
   2653e:	685b      	ldr	r3, [r3, #4]
   26540:	4408      	add	r0, r1
   26542:	6053      	str	r3, [r2, #4]
   26544:	6010      	str	r0, [r2, #0]
   26546:	e7da      	b.n	264fe <_free_r+0x22>
   26548:	d902      	bls.n	26550 <_free_r+0x74>
   2654a:	230c      	movs	r3, #12
   2654c:	602b      	str	r3, [r5, #0]
   2654e:	e7d6      	b.n	264fe <_free_r+0x22>
   26550:	6820      	ldr	r0, [r4, #0]
   26552:	1821      	adds	r1, r4, r0
   26554:	428b      	cmp	r3, r1
   26556:	bf02      	ittt	eq
   26558:	6819      	ldreq	r1, [r3, #0]
   2655a:	685b      	ldreq	r3, [r3, #4]
   2655c:	1809      	addeq	r1, r1, r0
   2655e:	6063      	str	r3, [r4, #4]
   26560:	bf08      	it	eq
   26562:	6021      	streq	r1, [r4, #0]
   26564:	6054      	str	r4, [r2, #4]
   26566:	e7ca      	b.n	264fe <_free_r+0x22>
   26568:	bd38      	pop	{r3, r4, r5, pc}
   2656a:	bf00      	nop
   2656c:	2000d940 	.word	0x2000d940

00026570 <_malloc_r>:
   26570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26572:	1ccd      	adds	r5, r1, #3
   26574:	4606      	mov	r6, r0
   26576:	f025 0503 	bic.w	r5, r5, #3
   2657a:	3508      	adds	r5, #8
   2657c:	2d0c      	cmp	r5, #12
   2657e:	bf38      	it	cc
   26580:	250c      	movcc	r5, #12
   26582:	2d00      	cmp	r5, #0
   26584:	db01      	blt.n	2658a <_malloc_r+0x1a>
   26586:	42a9      	cmp	r1, r5
   26588:	d903      	bls.n	26592 <_malloc_r+0x22>
   2658a:	230c      	movs	r3, #12
   2658c:	6033      	str	r3, [r6, #0]
   2658e:	2000      	movs	r0, #0
   26590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26592:	f000 fa69 	bl	26a68 <__malloc_lock>
   26596:	4921      	ldr	r1, [pc, #132]	; (2661c <_malloc_r+0xac>)
   26598:	680a      	ldr	r2, [r1, #0]
   2659a:	4614      	mov	r4, r2
   2659c:	b99c      	cbnz	r4, 265c6 <_malloc_r+0x56>
   2659e:	4f20      	ldr	r7, [pc, #128]	; (26620 <_malloc_r+0xb0>)
   265a0:	683b      	ldr	r3, [r7, #0]
   265a2:	b923      	cbnz	r3, 265ae <_malloc_r+0x3e>
   265a4:	4621      	mov	r1, r4
   265a6:	4630      	mov	r0, r6
   265a8:	f000 f83c 	bl	26624 <_sbrk_r>
   265ac:	6038      	str	r0, [r7, #0]
   265ae:	4629      	mov	r1, r5
   265b0:	4630      	mov	r0, r6
   265b2:	f000 f837 	bl	26624 <_sbrk_r>
   265b6:	1c43      	adds	r3, r0, #1
   265b8:	d123      	bne.n	26602 <_malloc_r+0x92>
   265ba:	230c      	movs	r3, #12
   265bc:	4630      	mov	r0, r6
   265be:	6033      	str	r3, [r6, #0]
   265c0:	f000 fa58 	bl	26a74 <__malloc_unlock>
   265c4:	e7e3      	b.n	2658e <_malloc_r+0x1e>
   265c6:	6823      	ldr	r3, [r4, #0]
   265c8:	1b5b      	subs	r3, r3, r5
   265ca:	d417      	bmi.n	265fc <_malloc_r+0x8c>
   265cc:	2b0b      	cmp	r3, #11
   265ce:	d903      	bls.n	265d8 <_malloc_r+0x68>
   265d0:	6023      	str	r3, [r4, #0]
   265d2:	441c      	add	r4, r3
   265d4:	6025      	str	r5, [r4, #0]
   265d6:	e004      	b.n	265e2 <_malloc_r+0x72>
   265d8:	6863      	ldr	r3, [r4, #4]
   265da:	42a2      	cmp	r2, r4
   265dc:	bf0c      	ite	eq
   265de:	600b      	streq	r3, [r1, #0]
   265e0:	6053      	strne	r3, [r2, #4]
   265e2:	4630      	mov	r0, r6
   265e4:	f000 fa46 	bl	26a74 <__malloc_unlock>
   265e8:	f104 000b 	add.w	r0, r4, #11
   265ec:	1d23      	adds	r3, r4, #4
   265ee:	f020 0007 	bic.w	r0, r0, #7
   265f2:	1ac2      	subs	r2, r0, r3
   265f4:	bf1c      	itt	ne
   265f6:	1a1b      	subne	r3, r3, r0
   265f8:	50a3      	strne	r3, [r4, r2]
   265fa:	e7c9      	b.n	26590 <_malloc_r+0x20>
   265fc:	4622      	mov	r2, r4
   265fe:	6864      	ldr	r4, [r4, #4]
   26600:	e7cc      	b.n	2659c <_malloc_r+0x2c>
   26602:	1cc4      	adds	r4, r0, #3
   26604:	f024 0403 	bic.w	r4, r4, #3
   26608:	42a0      	cmp	r0, r4
   2660a:	d0e3      	beq.n	265d4 <_malloc_r+0x64>
   2660c:	1a21      	subs	r1, r4, r0
   2660e:	4630      	mov	r0, r6
   26610:	f000 f808 	bl	26624 <_sbrk_r>
   26614:	3001      	adds	r0, #1
   26616:	d1dd      	bne.n	265d4 <_malloc_r+0x64>
   26618:	e7cf      	b.n	265ba <_malloc_r+0x4a>
   2661a:	bf00      	nop
   2661c:	2000d940 	.word	0x2000d940
   26620:	2000d93c 	.word	0x2000d93c

00026624 <_sbrk_r>:
   26624:	b538      	push	{r3, r4, r5, lr}
   26626:	2300      	movs	r3, #0
   26628:	4d05      	ldr	r5, [pc, #20]	; (26640 <_sbrk_r+0x1c>)
   2662a:	4604      	mov	r4, r0
   2662c:	4608      	mov	r0, r1
   2662e:	602b      	str	r3, [r5, #0]
   26630:	f7f6 fb10 	bl	1cc54 <_sbrk>
   26634:	1c43      	adds	r3, r0, #1
   26636:	d102      	bne.n	2663e <_sbrk_r+0x1a>
   26638:	682b      	ldr	r3, [r5, #0]
   2663a:	b103      	cbz	r3, 2663e <_sbrk_r+0x1a>
   2663c:	6023      	str	r3, [r4, #0]
   2663e:	bd38      	pop	{r3, r4, r5, pc}
   26640:	2000d944 	.word	0x2000d944

00026644 <sniprintf>:
   26644:	b40c      	push	{r2, r3}
   26646:	4b18      	ldr	r3, [pc, #96]	; (266a8 <sniprintf+0x64>)
   26648:	b530      	push	{r4, r5, lr}
   2664a:	1e0c      	subs	r4, r1, #0
   2664c:	b09d      	sub	sp, #116	; 0x74
   2664e:	681d      	ldr	r5, [r3, #0]
   26650:	da08      	bge.n	26664 <sniprintf+0x20>
   26652:	238b      	movs	r3, #139	; 0x8b
   26654:	f04f 30ff 	mov.w	r0, #4294967295
   26658:	602b      	str	r3, [r5, #0]
   2665a:	b01d      	add	sp, #116	; 0x74
   2665c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   26660:	b002      	add	sp, #8
   26662:	4770      	bx	lr
   26664:	f44f 7302 	mov.w	r3, #520	; 0x208
   26668:	9002      	str	r0, [sp, #8]
   2666a:	9006      	str	r0, [sp, #24]
   2666c:	a902      	add	r1, sp, #8
   2666e:	f8ad 3014 	strh.w	r3, [sp, #20]
   26672:	bf14      	ite	ne
   26674:	f104 33ff 	addne.w	r3, r4, #4294967295
   26678:	4623      	moveq	r3, r4
   2667a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2667c:	4628      	mov	r0, r5
   2667e:	9304      	str	r3, [sp, #16]
   26680:	9307      	str	r3, [sp, #28]
   26682:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26686:	f8ad 3016 	strh.w	r3, [sp, #22]
   2668a:	ab21      	add	r3, sp, #132	; 0x84
   2668c:	9301      	str	r3, [sp, #4]
   2668e:	f000 f9f7 	bl	26a80 <_svfiprintf_r>
   26692:	1c43      	adds	r3, r0, #1
   26694:	bfbc      	itt	lt
   26696:	238b      	movlt	r3, #139	; 0x8b
   26698:	602b      	strlt	r3, [r5, #0]
   2669a:	2c00      	cmp	r4, #0
   2669c:	d0dd      	beq.n	2665a <sniprintf+0x16>
   2669e:	9b02      	ldr	r3, [sp, #8]
   266a0:	2200      	movs	r2, #0
   266a2:	701a      	strb	r2, [r3, #0]
   266a4:	e7d9      	b.n	2665a <sniprintf+0x16>
   266a6:	bf00      	nop
   266a8:	2000c70c 	.word	0x2000c70c

000266ac <_strtol_l.constprop.0>:
   266ac:	2b24      	cmp	r3, #36	; 0x24
   266ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   266b2:	4686      	mov	lr, r0
   266b4:	4690      	mov	r8, r2
   266b6:	d801      	bhi.n	266bc <_strtol_l.constprop.0+0x10>
   266b8:	2b01      	cmp	r3, #1
   266ba:	d106      	bne.n	266ca <_strtol_l.constprop.0+0x1e>
   266bc:	f001 fea7 	bl	2840e <__errno>
   266c0:	2316      	movs	r3, #22
   266c2:	6003      	str	r3, [r0, #0]
   266c4:	2000      	movs	r0, #0
   266c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   266ca:	460d      	mov	r5, r1
   266cc:	4835      	ldr	r0, [pc, #212]	; (267a4 <_strtol_l.constprop.0+0xf8>)
   266ce:	462a      	mov	r2, r5
   266d0:	f815 4b01 	ldrb.w	r4, [r5], #1
   266d4:	5d06      	ldrb	r6, [r0, r4]
   266d6:	f016 0608 	ands.w	r6, r6, #8
   266da:	d1f8      	bne.n	266ce <_strtol_l.constprop.0+0x22>
   266dc:	2c2d      	cmp	r4, #45	; 0x2d
   266de:	d124      	bne.n	2672a <_strtol_l.constprop.0+0x7e>
   266e0:	782c      	ldrb	r4, [r5, #0]
   266e2:	2601      	movs	r6, #1
   266e4:	1c95      	adds	r5, r2, #2
   266e6:	bb2b      	cbnz	r3, 26734 <_strtol_l.constprop.0+0x88>
   266e8:	2c30      	cmp	r4, #48	; 0x30
   266ea:	d030      	beq.n	2674e <_strtol_l.constprop.0+0xa2>
   266ec:	230a      	movs	r3, #10
   266ee:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   266f2:	2200      	movs	r2, #0
   266f4:	f10c 3cff 	add.w	ip, ip, #4294967295
   266f8:	4610      	mov	r0, r2
   266fa:	fbbc f9f3 	udiv	r9, ip, r3
   266fe:	fb03 ca19 	mls	sl, r3, r9, ip
   26702:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   26706:	2f09      	cmp	r7, #9
   26708:	d828      	bhi.n	2675c <_strtol_l.constprop.0+0xb0>
   2670a:	463c      	mov	r4, r7
   2670c:	42a3      	cmp	r3, r4
   2670e:	dd34      	ble.n	2677a <_strtol_l.constprop.0+0xce>
   26710:	1c57      	adds	r7, r2, #1
   26712:	d007      	beq.n	26724 <_strtol_l.constprop.0+0x78>
   26714:	4581      	cmp	r9, r0
   26716:	d32d      	bcc.n	26774 <_strtol_l.constprop.0+0xc8>
   26718:	d101      	bne.n	2671e <_strtol_l.constprop.0+0x72>
   2671a:	45a2      	cmp	sl, r4
   2671c:	db2a      	blt.n	26774 <_strtol_l.constprop.0+0xc8>
   2671e:	fb00 4003 	mla	r0, r0, r3, r4
   26722:	2201      	movs	r2, #1
   26724:	f815 4b01 	ldrb.w	r4, [r5], #1
   26728:	e7eb      	b.n	26702 <_strtol_l.constprop.0+0x56>
   2672a:	2c2b      	cmp	r4, #43	; 0x2b
   2672c:	bf04      	itt	eq
   2672e:	782c      	ldrbeq	r4, [r5, #0]
   26730:	1c95      	addeq	r5, r2, #2
   26732:	e7d8      	b.n	266e6 <_strtol_l.constprop.0+0x3a>
   26734:	2b10      	cmp	r3, #16
   26736:	d1da      	bne.n	266ee <_strtol_l.constprop.0+0x42>
   26738:	2c30      	cmp	r4, #48	; 0x30
   2673a:	d1d8      	bne.n	266ee <_strtol_l.constprop.0+0x42>
   2673c:	782a      	ldrb	r2, [r5, #0]
   2673e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   26742:	2a58      	cmp	r2, #88	; 0x58
   26744:	d1d3      	bne.n	266ee <_strtol_l.constprop.0+0x42>
   26746:	786c      	ldrb	r4, [r5, #1]
   26748:	2310      	movs	r3, #16
   2674a:	3502      	adds	r5, #2
   2674c:	e7cf      	b.n	266ee <_strtol_l.constprop.0+0x42>
   2674e:	782b      	ldrb	r3, [r5, #0]
   26750:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   26754:	2b58      	cmp	r3, #88	; 0x58
   26756:	d0f6      	beq.n	26746 <_strtol_l.constprop.0+0x9a>
   26758:	2308      	movs	r3, #8
   2675a:	e7c8      	b.n	266ee <_strtol_l.constprop.0+0x42>
   2675c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   26760:	2f19      	cmp	r7, #25
   26762:	d801      	bhi.n	26768 <_strtol_l.constprop.0+0xbc>
   26764:	3c37      	subs	r4, #55	; 0x37
   26766:	e7d1      	b.n	2670c <_strtol_l.constprop.0+0x60>
   26768:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   2676c:	2f19      	cmp	r7, #25
   2676e:	d804      	bhi.n	2677a <_strtol_l.constprop.0+0xce>
   26770:	3c57      	subs	r4, #87	; 0x57
   26772:	e7cb      	b.n	2670c <_strtol_l.constprop.0+0x60>
   26774:	f04f 32ff 	mov.w	r2, #4294967295
   26778:	e7d4      	b.n	26724 <_strtol_l.constprop.0+0x78>
   2677a:	1c53      	adds	r3, r2, #1
   2677c:	d108      	bne.n	26790 <_strtol_l.constprop.0+0xe4>
   2677e:	2322      	movs	r3, #34	; 0x22
   26780:	4660      	mov	r0, ip
   26782:	f8ce 3000 	str.w	r3, [lr]
   26786:	f1b8 0f00 	cmp.w	r8, #0
   2678a:	d09c      	beq.n	266c6 <_strtol_l.constprop.0+0x1a>
   2678c:	1e69      	subs	r1, r5, #1
   2678e:	e006      	b.n	2679e <_strtol_l.constprop.0+0xf2>
   26790:	b106      	cbz	r6, 26794 <_strtol_l.constprop.0+0xe8>
   26792:	4240      	negs	r0, r0
   26794:	f1b8 0f00 	cmp.w	r8, #0
   26798:	d095      	beq.n	266c6 <_strtol_l.constprop.0+0x1a>
   2679a:	2a00      	cmp	r2, #0
   2679c:	d1f6      	bne.n	2678c <_strtol_l.constprop.0+0xe0>
   2679e:	f8c8 1000 	str.w	r1, [r8]
   267a2:	e790      	b.n	266c6 <_strtol_l.constprop.0+0x1a>
   267a4:	0002ec21 	.word	0x0002ec21

000267a8 <strtol>:
   267a8:	4613      	mov	r3, r2
   267aa:	460a      	mov	r2, r1
   267ac:	4601      	mov	r1, r0
   267ae:	4802      	ldr	r0, [pc, #8]	; (267b8 <strtol+0x10>)
   267b0:	6800      	ldr	r0, [r0, #0]
   267b2:	f7ff bf7b 	b.w	266ac <_strtol_l.constprop.0>
   267b6:	bf00      	nop
   267b8:	2000c70c 	.word	0x2000c70c

000267bc <_strtoll_l.constprop.0>:
   267bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267c0:	4690      	mov	r8, r2
   267c2:	b085      	sub	sp, #20
   267c4:	4689      	mov	r9, r1
   267c6:	461e      	mov	r6, r3
   267c8:	460d      	mov	r5, r1
   267ca:	4a45      	ldr	r2, [pc, #276]	; (268e0 <_strtoll_l.constprop.0+0x124>)
   267cc:	9002      	str	r0, [sp, #8]
   267ce:	462b      	mov	r3, r5
   267d0:	f815 4b01 	ldrb.w	r4, [r5], #1
   267d4:	5d17      	ldrb	r7, [r2, r4]
   267d6:	f017 0708 	ands.w	r7, r7, #8
   267da:	d1f8      	bne.n	267ce <_strtoll_l.constprop.0+0x12>
   267dc:	2c2d      	cmp	r4, #45	; 0x2d
   267de:	d141      	bne.n	26864 <_strtoll_l.constprop.0+0xa8>
   267e0:	782c      	ldrb	r4, [r5, #0]
   267e2:	2701      	movs	r7, #1
   267e4:	1c9d      	adds	r5, r3, #2
   267e6:	2e00      	cmp	r6, #0
   267e8:	d141      	bne.n	2686e <_strtoll_l.constprop.0+0xb2>
   267ea:	2c30      	cmp	r4, #48	; 0x30
   267ec:	d04c      	beq.n	26888 <_strtoll_l.constprop.0+0xcc>
   267ee:	260a      	movs	r6, #10
   267f0:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   267f4:	f107 3bff 	add.w	fp, r7, #4294967295
   267f8:	17f3      	asrs	r3, r6, #31
   267fa:	4632      	mov	r2, r6
   267fc:	f10a 3aff 	add.w	sl, sl, #4294967295
   26800:	4658      	mov	r0, fp
   26802:	9303      	str	r3, [sp, #12]
   26804:	4651      	mov	r1, sl
   26806:	f7f2 fa7f 	bl	18d08 <__aeabi_uldivmod>
   2680a:	9201      	str	r2, [sp, #4]
   2680c:	2200      	movs	r2, #0
   2680e:	468e      	mov	lr, r1
   26810:	4684      	mov	ip, r0
   26812:	4611      	mov	r1, r2
   26814:	4610      	mov	r0, r2
   26816:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   2681a:	2b09      	cmp	r3, #9
   2681c:	d905      	bls.n	2682a <_strtoll_l.constprop.0+0x6e>
   2681e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   26822:	2b19      	cmp	r3, #25
   26824:	d837      	bhi.n	26896 <_strtoll_l.constprop.0+0xda>
   26826:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   2682a:	429e      	cmp	r6, r3
   2682c:	dd3d      	ble.n	268aa <_strtoll_l.constprop.0+0xee>
   2682e:	1c54      	adds	r4, r2, #1
   26830:	d015      	beq.n	2685e <_strtoll_l.constprop.0+0xa2>
   26832:	4584      	cmp	ip, r0
   26834:	eb7e 0201 	sbcs.w	r2, lr, r1
   26838:	d334      	bcc.n	268a4 <_strtoll_l.constprop.0+0xe8>
   2683a:	458e      	cmp	lr, r1
   2683c:	bf08      	it	eq
   2683e:	4584      	cmpeq	ip, r0
   26840:	d102      	bne.n	26848 <_strtoll_l.constprop.0+0x8c>
   26842:	9a01      	ldr	r2, [sp, #4]
   26844:	429a      	cmp	r2, r3
   26846:	db2d      	blt.n	268a4 <_strtoll_l.constprop.0+0xe8>
   26848:	9a03      	ldr	r2, [sp, #12]
   2684a:	4371      	muls	r1, r6
   2684c:	fb00 1102 	mla	r1, r0, r2, r1
   26850:	fba6 0200 	umull	r0, r2, r6, r0
   26854:	440a      	add	r2, r1
   26856:	1818      	adds	r0, r3, r0
   26858:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
   2685c:	2201      	movs	r2, #1
   2685e:	f815 4b01 	ldrb.w	r4, [r5], #1
   26862:	e7d8      	b.n	26816 <_strtoll_l.constprop.0+0x5a>
   26864:	2c2b      	cmp	r4, #43	; 0x2b
   26866:	bf04      	itt	eq
   26868:	782c      	ldrbeq	r4, [r5, #0]
   2686a:	1c9d      	addeq	r5, r3, #2
   2686c:	e7bb      	b.n	267e6 <_strtoll_l.constprop.0+0x2a>
   2686e:	2e10      	cmp	r6, #16
   26870:	d1be      	bne.n	267f0 <_strtoll_l.constprop.0+0x34>
   26872:	2c30      	cmp	r4, #48	; 0x30
   26874:	d1bc      	bne.n	267f0 <_strtoll_l.constprop.0+0x34>
   26876:	782b      	ldrb	r3, [r5, #0]
   26878:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2687c:	2b58      	cmp	r3, #88	; 0x58
   2687e:	d1b7      	bne.n	267f0 <_strtoll_l.constprop.0+0x34>
   26880:	786c      	ldrb	r4, [r5, #1]
   26882:	2610      	movs	r6, #16
   26884:	3502      	adds	r5, #2
   26886:	e7b3      	b.n	267f0 <_strtoll_l.constprop.0+0x34>
   26888:	782b      	ldrb	r3, [r5, #0]
   2688a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2688e:	2b58      	cmp	r3, #88	; 0x58
   26890:	d0f6      	beq.n	26880 <_strtoll_l.constprop.0+0xc4>
   26892:	2608      	movs	r6, #8
   26894:	e7ac      	b.n	267f0 <_strtoll_l.constprop.0+0x34>
   26896:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   2689a:	2b19      	cmp	r3, #25
   2689c:	d805      	bhi.n	268aa <_strtoll_l.constprop.0+0xee>
   2689e:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   268a2:	e7c2      	b.n	2682a <_strtoll_l.constprop.0+0x6e>
   268a4:	f04f 32ff 	mov.w	r2, #4294967295
   268a8:	e7d9      	b.n	2685e <_strtoll_l.constprop.0+0xa2>
   268aa:	1c53      	adds	r3, r2, #1
   268ac:	d10a      	bne.n	268c4 <_strtoll_l.constprop.0+0x108>
   268ae:	2322      	movs	r3, #34	; 0x22
   268b0:	9a02      	ldr	r2, [sp, #8]
   268b2:	4658      	mov	r0, fp
   268b4:	4651      	mov	r1, sl
   268b6:	6013      	str	r3, [r2, #0]
   268b8:	f1b8 0f00 	cmp.w	r8, #0
   268bc:	d10a      	bne.n	268d4 <_strtoll_l.constprop.0+0x118>
   268be:	b005      	add	sp, #20
   268c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   268c4:	b117      	cbz	r7, 268cc <_strtoll_l.constprop.0+0x110>
   268c6:	4240      	negs	r0, r0
   268c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   268cc:	f1b8 0f00 	cmp.w	r8, #0
   268d0:	d0f5      	beq.n	268be <_strtoll_l.constprop.0+0x102>
   268d2:	b10a      	cbz	r2, 268d8 <_strtoll_l.constprop.0+0x11c>
   268d4:	f105 39ff 	add.w	r9, r5, #4294967295
   268d8:	f8c8 9000 	str.w	r9, [r8]
   268dc:	e7ef      	b.n	268be <_strtoll_l.constprop.0+0x102>
   268de:	bf00      	nop
   268e0:	0002ec21 	.word	0x0002ec21

000268e4 <strtoll>:
   268e4:	4613      	mov	r3, r2
   268e6:	460a      	mov	r2, r1
   268e8:	4601      	mov	r1, r0
   268ea:	4802      	ldr	r0, [pc, #8]	; (268f4 <strtoll+0x10>)
   268ec:	6800      	ldr	r0, [r0, #0]
   268ee:	f7ff bf65 	b.w	267bc <_strtoll_l.constprop.0>
   268f2:	bf00      	nop
   268f4:	2000c70c 	.word	0x2000c70c

000268f8 <_strtoul_l.constprop.0>:
   268f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   268fc:	4686      	mov	lr, r0
   268fe:	460d      	mov	r5, r1
   26900:	4e35      	ldr	r6, [pc, #212]	; (269d8 <_strtoul_l.constprop.0+0xe0>)
   26902:	4628      	mov	r0, r5
   26904:	f815 4b01 	ldrb.w	r4, [r5], #1
   26908:	5d37      	ldrb	r7, [r6, r4]
   2690a:	f017 0708 	ands.w	r7, r7, #8
   2690e:	d1f8      	bne.n	26902 <_strtoul_l.constprop.0+0xa>
   26910:	2c2d      	cmp	r4, #45	; 0x2d
   26912:	d126      	bne.n	26962 <_strtoul_l.constprop.0+0x6a>
   26914:	782c      	ldrb	r4, [r5, #0]
   26916:	2701      	movs	r7, #1
   26918:	1c85      	adds	r5, r0, #2
   2691a:	bb3b      	cbnz	r3, 2696c <_strtoul_l.constprop.0+0x74>
   2691c:	2c30      	cmp	r4, #48	; 0x30
   2691e:	d032      	beq.n	26986 <_strtoul_l.constprop.0+0x8e>
   26920:	230a      	movs	r3, #10
   26922:	f04f 38ff 	mov.w	r8, #4294967295
   26926:	2600      	movs	r6, #0
   26928:	fbb8 f8f3 	udiv	r8, r8, r3
   2692c:	fb03 f908 	mul.w	r9, r3, r8
   26930:	4630      	mov	r0, r6
   26932:	ea6f 0909 	mvn.w	r9, r9
   26936:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   2693a:	f1bc 0f09 	cmp.w	ip, #9
   2693e:	d829      	bhi.n	26994 <_strtoul_l.constprop.0+0x9c>
   26940:	4664      	mov	r4, ip
   26942:	42a3      	cmp	r3, r4
   26944:	dd37      	ble.n	269b6 <_strtoul_l.constprop.0+0xbe>
   26946:	f1b6 3fff 	cmp.w	r6, #4294967295
   2694a:	d007      	beq.n	2695c <_strtoul_l.constprop.0+0x64>
   2694c:	4580      	cmp	r8, r0
   2694e:	d32f      	bcc.n	269b0 <_strtoul_l.constprop.0+0xb8>
   26950:	d101      	bne.n	26956 <_strtoul_l.constprop.0+0x5e>
   26952:	45a1      	cmp	r9, r4
   26954:	db2c      	blt.n	269b0 <_strtoul_l.constprop.0+0xb8>
   26956:	fb00 4003 	mla	r0, r0, r3, r4
   2695a:	2601      	movs	r6, #1
   2695c:	f815 4b01 	ldrb.w	r4, [r5], #1
   26960:	e7e9      	b.n	26936 <_strtoul_l.constprop.0+0x3e>
   26962:	2c2b      	cmp	r4, #43	; 0x2b
   26964:	bf04      	itt	eq
   26966:	782c      	ldrbeq	r4, [r5, #0]
   26968:	1c85      	addeq	r5, r0, #2
   2696a:	e7d6      	b.n	2691a <_strtoul_l.constprop.0+0x22>
   2696c:	2b10      	cmp	r3, #16
   2696e:	d1d8      	bne.n	26922 <_strtoul_l.constprop.0+0x2a>
   26970:	2c30      	cmp	r4, #48	; 0x30
   26972:	d1d6      	bne.n	26922 <_strtoul_l.constprop.0+0x2a>
   26974:	7828      	ldrb	r0, [r5, #0]
   26976:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2697a:	2858      	cmp	r0, #88	; 0x58
   2697c:	d1d1      	bne.n	26922 <_strtoul_l.constprop.0+0x2a>
   2697e:	786c      	ldrb	r4, [r5, #1]
   26980:	2310      	movs	r3, #16
   26982:	3502      	adds	r5, #2
   26984:	e7cd      	b.n	26922 <_strtoul_l.constprop.0+0x2a>
   26986:	782b      	ldrb	r3, [r5, #0]
   26988:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2698c:	2b58      	cmp	r3, #88	; 0x58
   2698e:	d0f6      	beq.n	2697e <_strtoul_l.constprop.0+0x86>
   26990:	2308      	movs	r3, #8
   26992:	e7c6      	b.n	26922 <_strtoul_l.constprop.0+0x2a>
   26994:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   26998:	f1bc 0f19 	cmp.w	ip, #25
   2699c:	d801      	bhi.n	269a2 <_strtoul_l.constprop.0+0xaa>
   2699e:	3c37      	subs	r4, #55	; 0x37
   269a0:	e7cf      	b.n	26942 <_strtoul_l.constprop.0+0x4a>
   269a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   269a6:	f1bc 0f19 	cmp.w	ip, #25
   269aa:	d804      	bhi.n	269b6 <_strtoul_l.constprop.0+0xbe>
   269ac:	3c57      	subs	r4, #87	; 0x57
   269ae:	e7c8      	b.n	26942 <_strtoul_l.constprop.0+0x4a>
   269b0:	f04f 36ff 	mov.w	r6, #4294967295
   269b4:	e7d2      	b.n	2695c <_strtoul_l.constprop.0+0x64>
   269b6:	1c73      	adds	r3, r6, #1
   269b8:	d106      	bne.n	269c8 <_strtoul_l.constprop.0+0xd0>
   269ba:	2322      	movs	r3, #34	; 0x22
   269bc:	4630      	mov	r0, r6
   269be:	f8ce 3000 	str.w	r3, [lr]
   269c2:	b932      	cbnz	r2, 269d2 <_strtoul_l.constprop.0+0xda>
   269c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   269c8:	b107      	cbz	r7, 269cc <_strtoul_l.constprop.0+0xd4>
   269ca:	4240      	negs	r0, r0
   269cc:	2a00      	cmp	r2, #0
   269ce:	d0f9      	beq.n	269c4 <_strtoul_l.constprop.0+0xcc>
   269d0:	b106      	cbz	r6, 269d4 <_strtoul_l.constprop.0+0xdc>
   269d2:	1e69      	subs	r1, r5, #1
   269d4:	6011      	str	r1, [r2, #0]
   269d6:	e7f5      	b.n	269c4 <_strtoul_l.constprop.0+0xcc>
   269d8:	0002ec21 	.word	0x0002ec21

000269dc <strtoul>:
   269dc:	4613      	mov	r3, r2
   269de:	460a      	mov	r2, r1
   269e0:	4601      	mov	r1, r0
   269e2:	4802      	ldr	r0, [pc, #8]	; (269ec <strtoul+0x10>)
   269e4:	6800      	ldr	r0, [r0, #0]
   269e6:	f7ff bf87 	b.w	268f8 <_strtoul_l.constprop.0>
   269ea:	bf00      	nop
   269ec:	2000c70c 	.word	0x2000c70c

000269f0 <vsniprintf>:
   269f0:	b507      	push	{r0, r1, r2, lr}
   269f2:	9300      	str	r3, [sp, #0]
   269f4:	4613      	mov	r3, r2
   269f6:	460a      	mov	r2, r1
   269f8:	4601      	mov	r1, r0
   269fa:	4803      	ldr	r0, [pc, #12]	; (26a08 <vsniprintf+0x18>)
   269fc:	6800      	ldr	r0, [r0, #0]
   269fe:	f004 fdd8 	bl	2b5b2 <_vsniprintf_r>
   26a02:	b003      	add	sp, #12
   26a04:	f85d fb04 	ldr.w	pc, [sp], #4
   26a08:	2000c70c 	.word	0x2000c70c

00026a0c <_vsiscanf_r>:
   26a0c:	b570      	push	{r4, r5, r6, lr}
   26a0e:	461e      	mov	r6, r3
   26a10:	b09a      	sub	sp, #104	; 0x68
   26a12:	f44f 7301 	mov.w	r3, #516	; 0x204
   26a16:	4604      	mov	r4, r0
   26a18:	4608      	mov	r0, r1
   26a1a:	4615      	mov	r5, r2
   26a1c:	f8ad 300c 	strh.w	r3, [sp, #12]
   26a20:	9100      	str	r1, [sp, #0]
   26a22:	9104      	str	r1, [sp, #16]
   26a24:	f7f2 fae2 	bl	18fec <strlen>
   26a28:	4b09      	ldr	r3, [pc, #36]	; (26a50 <_vsiscanf_r+0x44>)
   26a2a:	462a      	mov	r2, r5
   26a2c:	4669      	mov	r1, sp
   26a2e:	9001      	str	r0, [sp, #4]
   26a30:	9309      	str	r3, [sp, #36]	; 0x24
   26a32:	2300      	movs	r3, #0
   26a34:	9005      	str	r0, [sp, #20]
   26a36:	4620      	mov	r0, r4
   26a38:	930d      	str	r3, [sp, #52]	; 0x34
   26a3a:	9312      	str	r3, [sp, #72]	; 0x48
   26a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26a40:	f8ad 300e 	strh.w	r3, [sp, #14]
   26a44:	4633      	mov	r3, r6
   26a46:	f000 f917 	bl	26c78 <__ssvfiscanf_r>
   26a4a:	b01a      	add	sp, #104	; 0x68
   26a4c:	bd70      	pop	{r4, r5, r6, pc}
   26a4e:	bf00      	nop
   26a50:	0002b4ef 	.word	0x0002b4ef

00026a54 <vsiscanf>:
   26a54:	4613      	mov	r3, r2
   26a56:	460a      	mov	r2, r1
   26a58:	4601      	mov	r1, r0
   26a5a:	4802      	ldr	r0, [pc, #8]	; (26a64 <vsiscanf+0x10>)
   26a5c:	6800      	ldr	r0, [r0, #0]
   26a5e:	f7ff bfd5 	b.w	26a0c <_vsiscanf_r>
   26a62:	bf00      	nop
   26a64:	2000c70c 	.word	0x2000c70c

00026a68 <__malloc_lock>:
   26a68:	4801      	ldr	r0, [pc, #4]	; (26a70 <__malloc_lock+0x8>)
   26a6a:	f001 bcc8 	b.w	283fe <__retarget_lock_acquire_recursive>
   26a6e:	bf00      	nop
   26a70:	2000c844 	.word	0x2000c844

00026a74 <__malloc_unlock>:
   26a74:	4801      	ldr	r0, [pc, #4]	; (26a7c <__malloc_unlock+0x8>)
   26a76:	f001 bcc8 	b.w	2840a <__retarget_lock_release_recursive>
   26a7a:	bf00      	nop
   26a7c:	2000c844 	.word	0x2000c844

00026a80 <_svfiprintf_r>:
   26a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26a84:	4698      	mov	r8, r3
   26a86:	898b      	ldrh	r3, [r1, #12]
   26a88:	b09d      	sub	sp, #116	; 0x74
   26a8a:	4607      	mov	r7, r0
   26a8c:	061b      	lsls	r3, r3, #24
   26a8e:	460d      	mov	r5, r1
   26a90:	4614      	mov	r4, r2
   26a92:	d510      	bpl.n	26ab6 <_svfiprintf_r+0x36>
   26a94:	690b      	ldr	r3, [r1, #16]
   26a96:	b973      	cbnz	r3, 26ab6 <_svfiprintf_r+0x36>
   26a98:	2140      	movs	r1, #64	; 0x40
   26a9a:	f7ff fd69 	bl	26570 <_malloc_r>
   26a9e:	6028      	str	r0, [r5, #0]
   26aa0:	6128      	str	r0, [r5, #16]
   26aa2:	b930      	cbnz	r0, 26ab2 <_svfiprintf_r+0x32>
   26aa4:	230c      	movs	r3, #12
   26aa6:	603b      	str	r3, [r7, #0]
   26aa8:	f04f 30ff 	mov.w	r0, #4294967295
   26aac:	b01d      	add	sp, #116	; 0x74
   26aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ab2:	2340      	movs	r3, #64	; 0x40
   26ab4:	616b      	str	r3, [r5, #20]
   26ab6:	2300      	movs	r3, #0
   26ab8:	f8cd 800c 	str.w	r8, [sp, #12]
   26abc:	f04f 0901 	mov.w	r9, #1
   26ac0:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 26c64 <_svfiprintf_r+0x1e4>
   26ac4:	9309      	str	r3, [sp, #36]	; 0x24
   26ac6:	2320      	movs	r3, #32
   26ac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   26acc:	2330      	movs	r3, #48	; 0x30
   26ace:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   26ad2:	4623      	mov	r3, r4
   26ad4:	469a      	mov	sl, r3
   26ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
   26ada:	b10a      	cbz	r2, 26ae0 <_svfiprintf_r+0x60>
   26adc:	2a25      	cmp	r2, #37	; 0x25
   26ade:	d1f9      	bne.n	26ad4 <_svfiprintf_r+0x54>
   26ae0:	ebba 0b04 	subs.w	fp, sl, r4
   26ae4:	d00b      	beq.n	26afe <_svfiprintf_r+0x7e>
   26ae6:	465b      	mov	r3, fp
   26ae8:	4622      	mov	r2, r4
   26aea:	4629      	mov	r1, r5
   26aec:	4638      	mov	r0, r7
   26aee:	f004 fd8b 	bl	2b608 <__ssputs_r>
   26af2:	3001      	adds	r0, #1
   26af4:	f000 80a7 	beq.w	26c46 <_svfiprintf_r+0x1c6>
   26af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26afa:	445a      	add	r2, fp
   26afc:	9209      	str	r2, [sp, #36]	; 0x24
   26afe:	f89a 3000 	ldrb.w	r3, [sl]
   26b02:	2b00      	cmp	r3, #0
   26b04:	f000 809f 	beq.w	26c46 <_svfiprintf_r+0x1c6>
   26b08:	2300      	movs	r3, #0
   26b0a:	f04f 32ff 	mov.w	r2, #4294967295
   26b0e:	f10a 0a01 	add.w	sl, sl, #1
   26b12:	9304      	str	r3, [sp, #16]
   26b14:	9307      	str	r3, [sp, #28]
   26b16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   26b1a:	931a      	str	r3, [sp, #104]	; 0x68
   26b1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
   26b20:	4654      	mov	r4, sl
   26b22:	2205      	movs	r2, #5
   26b24:	484f      	ldr	r0, [pc, #316]	; (26c64 <_svfiprintf_r+0x1e4>)
   26b26:	f814 1b01 	ldrb.w	r1, [r4], #1
   26b2a:	f004 fcad 	bl	2b488 <memchr>
   26b2e:	9a04      	ldr	r2, [sp, #16]
   26b30:	b9d8      	cbnz	r0, 26b6a <_svfiprintf_r+0xea>
   26b32:	06d0      	lsls	r0, r2, #27
   26b34:	bf44      	itt	mi
   26b36:	2320      	movmi	r3, #32
   26b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   26b3c:	0711      	lsls	r1, r2, #28
   26b3e:	bf44      	itt	mi
   26b40:	232b      	movmi	r3, #43	; 0x2b
   26b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   26b46:	f89a 3000 	ldrb.w	r3, [sl]
   26b4a:	2b2a      	cmp	r3, #42	; 0x2a
   26b4c:	d015      	beq.n	26b7a <_svfiprintf_r+0xfa>
   26b4e:	9a07      	ldr	r2, [sp, #28]
   26b50:	4654      	mov	r4, sl
   26b52:	2000      	movs	r0, #0
   26b54:	f04f 0c0a 	mov.w	ip, #10
   26b58:	4621      	mov	r1, r4
   26b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
   26b5e:	3b30      	subs	r3, #48	; 0x30
   26b60:	2b09      	cmp	r3, #9
   26b62:	d94b      	bls.n	26bfc <_svfiprintf_r+0x17c>
   26b64:	b1b0      	cbz	r0, 26b94 <_svfiprintf_r+0x114>
   26b66:	9207      	str	r2, [sp, #28]
   26b68:	e014      	b.n	26b94 <_svfiprintf_r+0x114>
   26b6a:	eba0 0308 	sub.w	r3, r0, r8
   26b6e:	46a2      	mov	sl, r4
   26b70:	fa09 f303 	lsl.w	r3, r9, r3
   26b74:	4313      	orrs	r3, r2
   26b76:	9304      	str	r3, [sp, #16]
   26b78:	e7d2      	b.n	26b20 <_svfiprintf_r+0xa0>
   26b7a:	9b03      	ldr	r3, [sp, #12]
   26b7c:	1d19      	adds	r1, r3, #4
   26b7e:	681b      	ldr	r3, [r3, #0]
   26b80:	2b00      	cmp	r3, #0
   26b82:	9103      	str	r1, [sp, #12]
   26b84:	bfbb      	ittet	lt
   26b86:	425b      	neglt	r3, r3
   26b88:	f042 0202 	orrlt.w	r2, r2, #2
   26b8c:	9307      	strge	r3, [sp, #28]
   26b8e:	9307      	strlt	r3, [sp, #28]
   26b90:	bfb8      	it	lt
   26b92:	9204      	strlt	r2, [sp, #16]
   26b94:	7823      	ldrb	r3, [r4, #0]
   26b96:	2b2e      	cmp	r3, #46	; 0x2e
   26b98:	d10a      	bne.n	26bb0 <_svfiprintf_r+0x130>
   26b9a:	7863      	ldrb	r3, [r4, #1]
   26b9c:	2b2a      	cmp	r3, #42	; 0x2a
   26b9e:	d132      	bne.n	26c06 <_svfiprintf_r+0x186>
   26ba0:	9b03      	ldr	r3, [sp, #12]
   26ba2:	3402      	adds	r4, #2
   26ba4:	1d1a      	adds	r2, r3, #4
   26ba6:	681b      	ldr	r3, [r3, #0]
   26ba8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   26bac:	9203      	str	r2, [sp, #12]
   26bae:	9305      	str	r3, [sp, #20]
   26bb0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 26c68 <_svfiprintf_r+0x1e8>
   26bb4:	2203      	movs	r2, #3
   26bb6:	7821      	ldrb	r1, [r4, #0]
   26bb8:	4650      	mov	r0, sl
   26bba:	f004 fc65 	bl	2b488 <memchr>
   26bbe:	b138      	cbz	r0, 26bd0 <_svfiprintf_r+0x150>
   26bc0:	eba0 000a 	sub.w	r0, r0, sl
   26bc4:	2240      	movs	r2, #64	; 0x40
   26bc6:	9b04      	ldr	r3, [sp, #16]
   26bc8:	3401      	adds	r4, #1
   26bca:	4082      	lsls	r2, r0
   26bcc:	4313      	orrs	r3, r2
   26bce:	9304      	str	r3, [sp, #16]
   26bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
   26bd4:	2206      	movs	r2, #6
   26bd6:	4825      	ldr	r0, [pc, #148]	; (26c6c <_svfiprintf_r+0x1ec>)
   26bd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   26bdc:	f004 fc54 	bl	2b488 <memchr>
   26be0:	2800      	cmp	r0, #0
   26be2:	d036      	beq.n	26c52 <_svfiprintf_r+0x1d2>
   26be4:	4b22      	ldr	r3, [pc, #136]	; (26c70 <_svfiprintf_r+0x1f0>)
   26be6:	bb1b      	cbnz	r3, 26c30 <_svfiprintf_r+0x1b0>
   26be8:	9b03      	ldr	r3, [sp, #12]
   26bea:	3307      	adds	r3, #7
   26bec:	f023 0307 	bic.w	r3, r3, #7
   26bf0:	3308      	adds	r3, #8
   26bf2:	9303      	str	r3, [sp, #12]
   26bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26bf6:	4433      	add	r3, r6
   26bf8:	9309      	str	r3, [sp, #36]	; 0x24
   26bfa:	e76a      	b.n	26ad2 <_svfiprintf_r+0x52>
   26bfc:	fb0c 3202 	mla	r2, ip, r2, r3
   26c00:	460c      	mov	r4, r1
   26c02:	2001      	movs	r0, #1
   26c04:	e7a8      	b.n	26b58 <_svfiprintf_r+0xd8>
   26c06:	2300      	movs	r3, #0
   26c08:	3401      	adds	r4, #1
   26c0a:	f04f 0c0a 	mov.w	ip, #10
   26c0e:	4619      	mov	r1, r3
   26c10:	9305      	str	r3, [sp, #20]
   26c12:	4620      	mov	r0, r4
   26c14:	f810 2b01 	ldrb.w	r2, [r0], #1
   26c18:	3a30      	subs	r2, #48	; 0x30
   26c1a:	2a09      	cmp	r2, #9
   26c1c:	d903      	bls.n	26c26 <_svfiprintf_r+0x1a6>
   26c1e:	2b00      	cmp	r3, #0
   26c20:	d0c6      	beq.n	26bb0 <_svfiprintf_r+0x130>
   26c22:	9105      	str	r1, [sp, #20]
   26c24:	e7c4      	b.n	26bb0 <_svfiprintf_r+0x130>
   26c26:	fb0c 2101 	mla	r1, ip, r1, r2
   26c2a:	4604      	mov	r4, r0
   26c2c:	2301      	movs	r3, #1
   26c2e:	e7f0      	b.n	26c12 <_svfiprintf_r+0x192>
   26c30:	ab03      	add	r3, sp, #12
   26c32:	462a      	mov	r2, r5
   26c34:	a904      	add	r1, sp, #16
   26c36:	4638      	mov	r0, r7
   26c38:	9300      	str	r3, [sp, #0]
   26c3a:	4b0e      	ldr	r3, [pc, #56]	; (26c74 <_svfiprintf_r+0x1f4>)
   26c3c:	f3af 8000 	nop.w
   26c40:	1c42      	adds	r2, r0, #1
   26c42:	4606      	mov	r6, r0
   26c44:	d1d6      	bne.n	26bf4 <_svfiprintf_r+0x174>
   26c46:	89ab      	ldrh	r3, [r5, #12]
   26c48:	065b      	lsls	r3, r3, #25
   26c4a:	f53f af2d 	bmi.w	26aa8 <_svfiprintf_r+0x28>
   26c4e:	9809      	ldr	r0, [sp, #36]	; 0x24
   26c50:	e72c      	b.n	26aac <_svfiprintf_r+0x2c>
   26c52:	ab03      	add	r3, sp, #12
   26c54:	462a      	mov	r2, r5
   26c56:	a904      	add	r1, sp, #16
   26c58:	4638      	mov	r0, r7
   26c5a:	9300      	str	r3, [sp, #0]
   26c5c:	4b05      	ldr	r3, [pc, #20]	; (26c74 <_svfiprintf_r+0x1f4>)
   26c5e:	f000 f983 	bl	26f68 <_printf_i>
   26c62:	e7ed      	b.n	26c40 <_svfiprintf_r+0x1c0>
   26c64:	0002ed21 	.word	0x0002ed21
   26c68:	0002ed27 	.word	0x0002ed27
   26c6c:	0002ed2b 	.word	0x0002ed2b
   26c70:	00000000 	.word	0x00000000
   26c74:	0002b609 	.word	0x0002b609

00026c78 <__ssvfiscanf_r>:
   26c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26c7c:	460c      	mov	r4, r1
   26c7e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   26c82:	2100      	movs	r1, #0
   26c84:	4606      	mov	r6, r0
   26c86:	f10d 0804 	add.w	r8, sp, #4
   26c8a:	4fa7      	ldr	r7, [pc, #668]	; (26f28 <__ssvfiscanf_r+0x2b0>)
   26c8c:	9300      	str	r3, [sp, #0]
   26c8e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   26c92:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   26c96:	49a5      	ldr	r1, [pc, #660]	; (26f2c <__ssvfiscanf_r+0x2b4>)
   26c98:	91a0      	str	r1, [sp, #640]	; 0x280
   26c9a:	49a5      	ldr	r1, [pc, #660]	; (26f30 <__ssvfiscanf_r+0x2b8>)
   26c9c:	91a1      	str	r1, [sp, #644]	; 0x284
   26c9e:	7813      	ldrb	r3, [r2, #0]
   26ca0:	2b00      	cmp	r3, #0
   26ca2:	f000 815c 	beq.w	26f5e <__ssvfiscanf_r+0x2e6>
   26ca6:	5cf9      	ldrb	r1, [r7, r3]
   26ca8:	1c55      	adds	r5, r2, #1
   26caa:	f011 0108 	ands.w	r1, r1, #8
   26cae:	d019      	beq.n	26ce4 <__ssvfiscanf_r+0x6c>
   26cb0:	6863      	ldr	r3, [r4, #4]
   26cb2:	2b00      	cmp	r3, #0
   26cb4:	dd0f      	ble.n	26cd6 <__ssvfiscanf_r+0x5e>
   26cb6:	6823      	ldr	r3, [r4, #0]
   26cb8:	781a      	ldrb	r2, [r3, #0]
   26cba:	5cba      	ldrb	r2, [r7, r2]
   26cbc:	0712      	lsls	r2, r2, #28
   26cbe:	d401      	bmi.n	26cc4 <__ssvfiscanf_r+0x4c>
   26cc0:	462a      	mov	r2, r5
   26cc2:	e7ec      	b.n	26c9e <__ssvfiscanf_r+0x26>
   26cc4:	9a45      	ldr	r2, [sp, #276]	; 0x114
   26cc6:	3301      	adds	r3, #1
   26cc8:	3201      	adds	r2, #1
   26cca:	6023      	str	r3, [r4, #0]
   26ccc:	9245      	str	r2, [sp, #276]	; 0x114
   26cce:	6862      	ldr	r2, [r4, #4]
   26cd0:	3a01      	subs	r2, #1
   26cd2:	6062      	str	r2, [r4, #4]
   26cd4:	e7ec      	b.n	26cb0 <__ssvfiscanf_r+0x38>
   26cd6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   26cd8:	4621      	mov	r1, r4
   26cda:	4630      	mov	r0, r6
   26cdc:	4798      	blx	r3
   26cde:	2800      	cmp	r0, #0
   26ce0:	d0e9      	beq.n	26cb6 <__ssvfiscanf_r+0x3e>
   26ce2:	e7ed      	b.n	26cc0 <__ssvfiscanf_r+0x48>
   26ce4:	2b25      	cmp	r3, #37	; 0x25
   26ce6:	d012      	beq.n	26d0e <__ssvfiscanf_r+0x96>
   26ce8:	4699      	mov	r9, r3
   26cea:	6863      	ldr	r3, [r4, #4]
   26cec:	2b00      	cmp	r3, #0
   26cee:	f340 8094 	ble.w	26e1a <__ssvfiscanf_r+0x1a2>
   26cf2:	6822      	ldr	r2, [r4, #0]
   26cf4:	7813      	ldrb	r3, [r2, #0]
   26cf6:	454b      	cmp	r3, r9
   26cf8:	f040 8131 	bne.w	26f5e <__ssvfiscanf_r+0x2e6>
   26cfc:	6863      	ldr	r3, [r4, #4]
   26cfe:	3201      	adds	r2, #1
   26d00:	3b01      	subs	r3, #1
   26d02:	6022      	str	r2, [r4, #0]
   26d04:	6063      	str	r3, [r4, #4]
   26d06:	9b45      	ldr	r3, [sp, #276]	; 0x114
   26d08:	3301      	adds	r3, #1
   26d0a:	9345      	str	r3, [sp, #276]	; 0x114
   26d0c:	e7d8      	b.n	26cc0 <__ssvfiscanf_r+0x48>
   26d0e:	9141      	str	r1, [sp, #260]	; 0x104
   26d10:	9143      	str	r1, [sp, #268]	; 0x10c
   26d12:	7853      	ldrb	r3, [r2, #1]
   26d14:	2b2a      	cmp	r3, #42	; 0x2a
   26d16:	bf04      	itt	eq
   26d18:	2310      	moveq	r3, #16
   26d1a:	1c95      	addeq	r5, r2, #2
   26d1c:	f04f 020a 	mov.w	r2, #10
   26d20:	bf08      	it	eq
   26d22:	9341      	streq	r3, [sp, #260]	; 0x104
   26d24:	46a9      	mov	r9, r5
   26d26:	f819 1b01 	ldrb.w	r1, [r9], #1
   26d2a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   26d2e:	2b09      	cmp	r3, #9
   26d30:	d91e      	bls.n	26d70 <__ssvfiscanf_r+0xf8>
   26d32:	f8df a200 	ldr.w	sl, [pc, #512]	; 26f34 <__ssvfiscanf_r+0x2bc>
   26d36:	2203      	movs	r2, #3
   26d38:	4650      	mov	r0, sl
   26d3a:	f004 fba5 	bl	2b488 <memchr>
   26d3e:	b138      	cbz	r0, 26d50 <__ssvfiscanf_r+0xd8>
   26d40:	eba0 000a 	sub.w	r0, r0, sl
   26d44:	2301      	movs	r3, #1
   26d46:	9a41      	ldr	r2, [sp, #260]	; 0x104
   26d48:	464d      	mov	r5, r9
   26d4a:	4083      	lsls	r3, r0
   26d4c:	4313      	orrs	r3, r2
   26d4e:	9341      	str	r3, [sp, #260]	; 0x104
   26d50:	f815 3b01 	ldrb.w	r3, [r5], #1
   26d54:	2b78      	cmp	r3, #120	; 0x78
   26d56:	d806      	bhi.n	26d66 <__ssvfiscanf_r+0xee>
   26d58:	2b57      	cmp	r3, #87	; 0x57
   26d5a:	d810      	bhi.n	26d7e <__ssvfiscanf_r+0x106>
   26d5c:	2b25      	cmp	r3, #37	; 0x25
   26d5e:	d0c3      	beq.n	26ce8 <__ssvfiscanf_r+0x70>
   26d60:	d856      	bhi.n	26e10 <__ssvfiscanf_r+0x198>
   26d62:	2b00      	cmp	r3, #0
   26d64:	d064      	beq.n	26e30 <__ssvfiscanf_r+0x1b8>
   26d66:	2303      	movs	r3, #3
   26d68:	9347      	str	r3, [sp, #284]	; 0x11c
   26d6a:	230a      	movs	r3, #10
   26d6c:	9342      	str	r3, [sp, #264]	; 0x108
   26d6e:	e06a      	b.n	26e46 <__ssvfiscanf_r+0x1ce>
   26d70:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   26d72:	464d      	mov	r5, r9
   26d74:	fb02 1103 	mla	r1, r2, r3, r1
   26d78:	3930      	subs	r1, #48	; 0x30
   26d7a:	9143      	str	r1, [sp, #268]	; 0x10c
   26d7c:	e7d2      	b.n	26d24 <__ssvfiscanf_r+0xac>
   26d7e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   26d82:	2a20      	cmp	r2, #32
   26d84:	d8ef      	bhi.n	26d66 <__ssvfiscanf_r+0xee>
   26d86:	a101      	add	r1, pc, #4	; (adr r1, 26d8c <__ssvfiscanf_r+0x114>)
   26d88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   26d8c:	00026e7b 	.word	0x00026e7b
   26d90:	00026d67 	.word	0x00026d67
   26d94:	00026d67 	.word	0x00026d67
   26d98:	00026e9d 	.word	0x00026e9d
   26d9c:	00026d67 	.word	0x00026d67
   26da0:	00026d67 	.word	0x00026d67
   26da4:	00026d67 	.word	0x00026d67
   26da8:	00026d67 	.word	0x00026d67
   26dac:	00026d67 	.word	0x00026d67
   26db0:	00026d67 	.word	0x00026d67
   26db4:	00026d67 	.word	0x00026d67
   26db8:	00026eb3 	.word	0x00026eb3
   26dbc:	00026e99 	.word	0x00026e99
   26dc0:	00026e17 	.word	0x00026e17
   26dc4:	00026e17 	.word	0x00026e17
   26dc8:	00026e17 	.word	0x00026e17
   26dcc:	00026d67 	.word	0x00026d67
   26dd0:	00026e8d 	.word	0x00026e8d
   26dd4:	00026d67 	.word	0x00026d67
   26dd8:	00026d67 	.word	0x00026d67
   26ddc:	00026d67 	.word	0x00026d67
   26de0:	00026d67 	.word	0x00026d67
   26de4:	00026ec3 	.word	0x00026ec3
   26de8:	00026e95 	.word	0x00026e95
   26dec:	00026e37 	.word	0x00026e37
   26df0:	00026d67 	.word	0x00026d67
   26df4:	00026d67 	.word	0x00026d67
   26df8:	00026ebf 	.word	0x00026ebf
   26dfc:	00026d67 	.word	0x00026d67
   26e00:	00026e99 	.word	0x00026e99
   26e04:	00026d67 	.word	0x00026d67
   26e08:	00026d67 	.word	0x00026d67
   26e0c:	00026e7b 	.word	0x00026e7b
   26e10:	3b45      	subs	r3, #69	; 0x45
   26e12:	2b02      	cmp	r3, #2
   26e14:	d8a7      	bhi.n	26d66 <__ssvfiscanf_r+0xee>
   26e16:	2305      	movs	r3, #5
   26e18:	e014      	b.n	26e44 <__ssvfiscanf_r+0x1cc>
   26e1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   26e1c:	4621      	mov	r1, r4
   26e1e:	4630      	mov	r0, r6
   26e20:	4798      	blx	r3
   26e22:	2800      	cmp	r0, #0
   26e24:	f43f af65 	beq.w	26cf2 <__ssvfiscanf_r+0x7a>
   26e28:	9844      	ldr	r0, [sp, #272]	; 0x110
   26e2a:	2800      	cmp	r0, #0
   26e2c:	f040 808f 	bne.w	26f4e <__ssvfiscanf_r+0x2d6>
   26e30:	f04f 30ff 	mov.w	r0, #4294967295
   26e34:	e08f      	b.n	26f56 <__ssvfiscanf_r+0x2de>
   26e36:	9b41      	ldr	r3, [sp, #260]	; 0x104
   26e38:	f443 7308 	orr.w	r3, r3, #544	; 0x220
   26e3c:	9341      	str	r3, [sp, #260]	; 0x104
   26e3e:	2310      	movs	r3, #16
   26e40:	9342      	str	r3, [sp, #264]	; 0x108
   26e42:	2304      	movs	r3, #4
   26e44:	9347      	str	r3, [sp, #284]	; 0x11c
   26e46:	6863      	ldr	r3, [r4, #4]
   26e48:	2b00      	cmp	r3, #0
   26e4a:	dd4a      	ble.n	26ee2 <__ssvfiscanf_r+0x26a>
   26e4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   26e4e:	0659      	lsls	r1, r3, #25
   26e50:	d404      	bmi.n	26e5c <__ssvfiscanf_r+0x1e4>
   26e52:	6823      	ldr	r3, [r4, #0]
   26e54:	781a      	ldrb	r2, [r3, #0]
   26e56:	5cba      	ldrb	r2, [r7, r2]
   26e58:	0712      	lsls	r2, r2, #28
   26e5a:	d449      	bmi.n	26ef0 <__ssvfiscanf_r+0x278>
   26e5c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   26e5e:	2b02      	cmp	r3, #2
   26e60:	dc58      	bgt.n	26f14 <__ssvfiscanf_r+0x29c>
   26e62:	466b      	mov	r3, sp
   26e64:	4622      	mov	r2, r4
   26e66:	a941      	add	r1, sp, #260	; 0x104
   26e68:	4630      	mov	r0, r6
   26e6a:	f000 f9ab 	bl	271c4 <_scanf_chars>
   26e6e:	2801      	cmp	r0, #1
   26e70:	d075      	beq.n	26f5e <__ssvfiscanf_r+0x2e6>
   26e72:	2802      	cmp	r0, #2
   26e74:	f47f af24 	bne.w	26cc0 <__ssvfiscanf_r+0x48>
   26e78:	e7d6      	b.n	26e28 <__ssvfiscanf_r+0x1b0>
   26e7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
   26e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   26e80:	9241      	str	r2, [sp, #260]	; 0x104
   26e82:	2210      	movs	r2, #16
   26e84:	2b6e      	cmp	r3, #110	; 0x6e
   26e86:	9242      	str	r2, [sp, #264]	; 0x108
   26e88:	d902      	bls.n	26e90 <__ssvfiscanf_r+0x218>
   26e8a:	e7da      	b.n	26e42 <__ssvfiscanf_r+0x1ca>
   26e8c:	2300      	movs	r3, #0
   26e8e:	9342      	str	r3, [sp, #264]	; 0x108
   26e90:	2303      	movs	r3, #3
   26e92:	e7d7      	b.n	26e44 <__ssvfiscanf_r+0x1cc>
   26e94:	2308      	movs	r3, #8
   26e96:	e7d3      	b.n	26e40 <__ssvfiscanf_r+0x1c8>
   26e98:	220a      	movs	r2, #10
   26e9a:	e7f3      	b.n	26e84 <__ssvfiscanf_r+0x20c>
   26e9c:	4629      	mov	r1, r5
   26e9e:	4640      	mov	r0, r8
   26ea0:	f004 fcd7 	bl	2b852 <__sccl>
   26ea4:	9b41      	ldr	r3, [sp, #260]	; 0x104
   26ea6:	4605      	mov	r5, r0
   26ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26eac:	9341      	str	r3, [sp, #260]	; 0x104
   26eae:	2301      	movs	r3, #1
   26eb0:	e7c8      	b.n	26e44 <__ssvfiscanf_r+0x1cc>
   26eb2:	9b41      	ldr	r3, [sp, #260]	; 0x104
   26eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26eb8:	9341      	str	r3, [sp, #260]	; 0x104
   26eba:	2300      	movs	r3, #0
   26ebc:	e7c2      	b.n	26e44 <__ssvfiscanf_r+0x1cc>
   26ebe:	2302      	movs	r3, #2
   26ec0:	e7c0      	b.n	26e44 <__ssvfiscanf_r+0x1cc>
   26ec2:	9841      	ldr	r0, [sp, #260]	; 0x104
   26ec4:	06c3      	lsls	r3, r0, #27
   26ec6:	f53f aefb 	bmi.w	26cc0 <__ssvfiscanf_r+0x48>
   26eca:	9b00      	ldr	r3, [sp, #0]
   26ecc:	f010 0f01 	tst.w	r0, #1
   26ed0:	9a45      	ldr	r2, [sp, #276]	; 0x114
   26ed2:	f103 0104 	add.w	r1, r3, #4
   26ed6:	9100      	str	r1, [sp, #0]
   26ed8:	681b      	ldr	r3, [r3, #0]
   26eda:	bf14      	ite	ne
   26edc:	801a      	strhne	r2, [r3, #0]
   26ede:	601a      	streq	r2, [r3, #0]
   26ee0:	e6ee      	b.n	26cc0 <__ssvfiscanf_r+0x48>
   26ee2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   26ee4:	4621      	mov	r1, r4
   26ee6:	4630      	mov	r0, r6
   26ee8:	4798      	blx	r3
   26eea:	2800      	cmp	r0, #0
   26eec:	d0ae      	beq.n	26e4c <__ssvfiscanf_r+0x1d4>
   26eee:	e79b      	b.n	26e28 <__ssvfiscanf_r+0x1b0>
   26ef0:	9a45      	ldr	r2, [sp, #276]	; 0x114
   26ef2:	3201      	adds	r2, #1
   26ef4:	9245      	str	r2, [sp, #276]	; 0x114
   26ef6:	6862      	ldr	r2, [r4, #4]
   26ef8:	3a01      	subs	r2, #1
   26efa:	2a00      	cmp	r2, #0
   26efc:	6062      	str	r2, [r4, #4]
   26efe:	dd02      	ble.n	26f06 <__ssvfiscanf_r+0x28e>
   26f00:	3301      	adds	r3, #1
   26f02:	6023      	str	r3, [r4, #0]
   26f04:	e7a5      	b.n	26e52 <__ssvfiscanf_r+0x1da>
   26f06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   26f08:	4621      	mov	r1, r4
   26f0a:	4630      	mov	r0, r6
   26f0c:	4798      	blx	r3
   26f0e:	2800      	cmp	r0, #0
   26f10:	d09f      	beq.n	26e52 <__ssvfiscanf_r+0x1da>
   26f12:	e789      	b.n	26e28 <__ssvfiscanf_r+0x1b0>
   26f14:	2b04      	cmp	r3, #4
   26f16:	dc0f      	bgt.n	26f38 <__ssvfiscanf_r+0x2c0>
   26f18:	466b      	mov	r3, sp
   26f1a:	4622      	mov	r2, r4
   26f1c:	a941      	add	r1, sp, #260	; 0x104
   26f1e:	4630      	mov	r0, r6
   26f20:	f000 f9aa 	bl	27278 <_scanf_i>
   26f24:	e7a3      	b.n	26e6e <__ssvfiscanf_r+0x1f6>
   26f26:	bf00      	nop
   26f28:	0002ec21 	.word	0x0002ec21
   26f2c:	0002b6bf 	.word	0x0002b6bf
   26f30:	0002b735 	.word	0x0002b735
   26f34:	0002ed27 	.word	0x0002ed27
   26f38:	4b0a      	ldr	r3, [pc, #40]	; (26f64 <__ssvfiscanf_r+0x2ec>)
   26f3a:	2b00      	cmp	r3, #0
   26f3c:	f43f aec0 	beq.w	26cc0 <__ssvfiscanf_r+0x48>
   26f40:	466b      	mov	r3, sp
   26f42:	4622      	mov	r2, r4
   26f44:	a941      	add	r1, sp, #260	; 0x104
   26f46:	4630      	mov	r0, r6
   26f48:	f3af 8000 	nop.w
   26f4c:	e78f      	b.n	26e6e <__ssvfiscanf_r+0x1f6>
   26f4e:	89a3      	ldrh	r3, [r4, #12]
   26f50:	065b      	lsls	r3, r3, #25
   26f52:	f53f af6d 	bmi.w	26e30 <__ssvfiscanf_r+0x1b8>
   26f56:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   26f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26f5e:	9844      	ldr	r0, [sp, #272]	; 0x110
   26f60:	e7f9      	b.n	26f56 <__ssvfiscanf_r+0x2de>
   26f62:	bf00      	nop
   26f64:	00000000 	.word	0x00000000

00026f68 <_printf_i>:
   26f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   26f6c:	7e0f      	ldrb	r7, [r1, #24]
   26f6e:	4691      	mov	r9, r2
   26f70:	4680      	mov	r8, r0
   26f72:	460c      	mov	r4, r1
   26f74:	2f78      	cmp	r7, #120	; 0x78
   26f76:	469a      	mov	sl, r3
   26f78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   26f7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
   26f7e:	d807      	bhi.n	26f90 <_printf_i+0x28>
   26f80:	2f62      	cmp	r7, #98	; 0x62
   26f82:	d80a      	bhi.n	26f9a <_printf_i+0x32>
   26f84:	2f00      	cmp	r7, #0
   26f86:	f000 80e0 	beq.w	2714a <_printf_i+0x1e2>
   26f8a:	2f58      	cmp	r7, #88	; 0x58
   26f8c:	f000 80bb 	beq.w	27106 <_printf_i+0x19e>
   26f90:	f104 0642 	add.w	r6, r4, #66	; 0x42
   26f94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   26f98:	e03a      	b.n	27010 <_printf_i+0xa8>
   26f9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   26f9e:	2b15      	cmp	r3, #21
   26fa0:	d8f6      	bhi.n	26f90 <_printf_i+0x28>
   26fa2:	a101      	add	r1, pc, #4	; (adr r1, 26fa8 <_printf_i+0x40>)
   26fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   26fa8:	00027001 	.word	0x00027001
   26fac:	00027015 	.word	0x00027015
   26fb0:	00026f91 	.word	0x00026f91
   26fb4:	00026f91 	.word	0x00026f91
   26fb8:	00026f91 	.word	0x00026f91
   26fbc:	00026f91 	.word	0x00026f91
   26fc0:	00027015 	.word	0x00027015
   26fc4:	00026f91 	.word	0x00026f91
   26fc8:	00026f91 	.word	0x00026f91
   26fcc:	00026f91 	.word	0x00026f91
   26fd0:	00026f91 	.word	0x00026f91
   26fd4:	00027131 	.word	0x00027131
   26fd8:	000270a5 	.word	0x000270a5
   26fdc:	000270e7 	.word	0x000270e7
   26fe0:	00026f91 	.word	0x00026f91
   26fe4:	00026f91 	.word	0x00026f91
   26fe8:	00027153 	.word	0x00027153
   26fec:	00026f91 	.word	0x00026f91
   26ff0:	000270a5 	.word	0x000270a5
   26ff4:	00026f91 	.word	0x00026f91
   26ff8:	00026f91 	.word	0x00026f91
   26ffc:	000270ef 	.word	0x000270ef
   27000:	682b      	ldr	r3, [r5, #0]
   27002:	f104 0642 	add.w	r6, r4, #66	; 0x42
   27006:	1d1a      	adds	r2, r3, #4
   27008:	681b      	ldr	r3, [r3, #0]
   2700a:	602a      	str	r2, [r5, #0]
   2700c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   27010:	2301      	movs	r3, #1
   27012:	e0ab      	b.n	2716c <_printf_i+0x204>
   27014:	6823      	ldr	r3, [r4, #0]
   27016:	6829      	ldr	r1, [r5, #0]
   27018:	061f      	lsls	r7, r3, #24
   2701a:	f101 0004 	add.w	r0, r1, #4
   2701e:	6028      	str	r0, [r5, #0]
   27020:	d501      	bpl.n	27026 <_printf_i+0xbe>
   27022:	680d      	ldr	r5, [r1, #0]
   27024:	e003      	b.n	2702e <_printf_i+0xc6>
   27026:	065e      	lsls	r6, r3, #25
   27028:	d5fb      	bpl.n	27022 <_printf_i+0xba>
   2702a:	f9b1 5000 	ldrsh.w	r5, [r1]
   2702e:	2d00      	cmp	r5, #0
   27030:	6861      	ldr	r1, [r4, #4]
   27032:	da7a      	bge.n	2712a <_printf_i+0x1c2>
   27034:	202d      	movs	r0, #45	; 0x2d
   27036:	2900      	cmp	r1, #0
   27038:	60a1      	str	r1, [r4, #8]
   2703a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   2703e:	da2d      	bge.n	2709c <_printf_i+0x134>
   27040:	426d      	negs	r5, r5
   27042:	485e      	ldr	r0, [pc, #376]	; (271bc <_printf_i+0x254>)
   27044:	230a      	movs	r3, #10
   27046:	4616      	mov	r6, r2
   27048:	fbb5 f1f3 	udiv	r1, r5, r3
   2704c:	fb03 5711 	mls	r7, r3, r1, r5
   27050:	5dc7      	ldrb	r7, [r0, r7]
   27052:	f806 7d01 	strb.w	r7, [r6, #-1]!
   27056:	462f      	mov	r7, r5
   27058:	460d      	mov	r5, r1
   2705a:	42bb      	cmp	r3, r7
   2705c:	d9f4      	bls.n	27048 <_printf_i+0xe0>
   2705e:	2b08      	cmp	r3, #8
   27060:	d10b      	bne.n	2707a <_printf_i+0x112>
   27062:	6823      	ldr	r3, [r4, #0]
   27064:	07df      	lsls	r7, r3, #31
   27066:	d508      	bpl.n	2707a <_printf_i+0x112>
   27068:	6923      	ldr	r3, [r4, #16]
   2706a:	6861      	ldr	r1, [r4, #4]
   2706c:	4299      	cmp	r1, r3
   2706e:	bfde      	ittt	le
   27070:	2330      	movle	r3, #48	; 0x30
   27072:	f806 3c01 	strble.w	r3, [r6, #-1]
   27076:	f106 36ff 	addle.w	r6, r6, #4294967295
   2707a:	1b92      	subs	r2, r2, r6
   2707c:	6122      	str	r2, [r4, #16]
   2707e:	464b      	mov	r3, r9
   27080:	aa03      	add	r2, sp, #12
   27082:	4621      	mov	r1, r4
   27084:	4640      	mov	r0, r8
   27086:	f8cd a000 	str.w	sl, [sp]
   2708a:	f004 fb70 	bl	2b76e <_printf_common>
   2708e:	3001      	adds	r0, #1
   27090:	d171      	bne.n	27176 <_printf_i+0x20e>
   27092:	f04f 30ff 	mov.w	r0, #4294967295
   27096:	b004      	add	sp, #16
   27098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2709c:	f023 0304 	bic.w	r3, r3, #4
   270a0:	6023      	str	r3, [r4, #0]
   270a2:	e7cd      	b.n	27040 <_printf_i+0xd8>
   270a4:	682b      	ldr	r3, [r5, #0]
   270a6:	6820      	ldr	r0, [r4, #0]
   270a8:	1d19      	adds	r1, r3, #4
   270aa:	6029      	str	r1, [r5, #0]
   270ac:	0605      	lsls	r5, r0, #24
   270ae:	d501      	bpl.n	270b4 <_printf_i+0x14c>
   270b0:	681d      	ldr	r5, [r3, #0]
   270b2:	e002      	b.n	270ba <_printf_i+0x152>
   270b4:	0641      	lsls	r1, r0, #25
   270b6:	d5fb      	bpl.n	270b0 <_printf_i+0x148>
   270b8:	881d      	ldrh	r5, [r3, #0]
   270ba:	2f6f      	cmp	r7, #111	; 0x6f
   270bc:	483f      	ldr	r0, [pc, #252]	; (271bc <_printf_i+0x254>)
   270be:	bf14      	ite	ne
   270c0:	230a      	movne	r3, #10
   270c2:	2308      	moveq	r3, #8
   270c4:	2100      	movs	r1, #0
   270c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   270ca:	6866      	ldr	r6, [r4, #4]
   270cc:	2e00      	cmp	r6, #0
   270ce:	60a6      	str	r6, [r4, #8]
   270d0:	dbb9      	blt.n	27046 <_printf_i+0xde>
   270d2:	6821      	ldr	r1, [r4, #0]
   270d4:	f021 0104 	bic.w	r1, r1, #4
   270d8:	6021      	str	r1, [r4, #0]
   270da:	2d00      	cmp	r5, #0
   270dc:	d1b3      	bne.n	27046 <_printf_i+0xde>
   270de:	2e00      	cmp	r6, #0
   270e0:	d1b1      	bne.n	27046 <_printf_i+0xde>
   270e2:	4616      	mov	r6, r2
   270e4:	e7bb      	b.n	2705e <_printf_i+0xf6>
   270e6:	6823      	ldr	r3, [r4, #0]
   270e8:	f043 0320 	orr.w	r3, r3, #32
   270ec:	6023      	str	r3, [r4, #0]
   270ee:	2778      	movs	r7, #120	; 0x78
   270f0:	4833      	ldr	r0, [pc, #204]	; (271c0 <_printf_i+0x258>)
   270f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   270f6:	6829      	ldr	r1, [r5, #0]
   270f8:	6823      	ldr	r3, [r4, #0]
   270fa:	1d0e      	adds	r6, r1, #4
   270fc:	602e      	str	r6, [r5, #0]
   270fe:	061e      	lsls	r6, r3, #24
   27100:	d503      	bpl.n	2710a <_printf_i+0x1a2>
   27102:	680d      	ldr	r5, [r1, #0]
   27104:	e004      	b.n	27110 <_printf_i+0x1a8>
   27106:	482d      	ldr	r0, [pc, #180]	; (271bc <_printf_i+0x254>)
   27108:	e7f3      	b.n	270f2 <_printf_i+0x18a>
   2710a:	065d      	lsls	r5, r3, #25
   2710c:	d5f9      	bpl.n	27102 <_printf_i+0x19a>
   2710e:	880d      	ldrh	r5, [r1, #0]
   27110:	07d9      	lsls	r1, r3, #31
   27112:	bf44      	itt	mi
   27114:	f043 0320 	orrmi.w	r3, r3, #32
   27118:	6023      	strmi	r3, [r4, #0]
   2711a:	b10d      	cbz	r5, 27120 <_printf_i+0x1b8>
   2711c:	2310      	movs	r3, #16
   2711e:	e7d1      	b.n	270c4 <_printf_i+0x15c>
   27120:	6823      	ldr	r3, [r4, #0]
   27122:	f023 0320 	bic.w	r3, r3, #32
   27126:	6023      	str	r3, [r4, #0]
   27128:	e7f8      	b.n	2711c <_printf_i+0x1b4>
   2712a:	4824      	ldr	r0, [pc, #144]	; (271bc <_printf_i+0x254>)
   2712c:	230a      	movs	r3, #10
   2712e:	e7cc      	b.n	270ca <_printf_i+0x162>
   27130:	682b      	ldr	r3, [r5, #0]
   27132:	6826      	ldr	r6, [r4, #0]
   27134:	1d18      	adds	r0, r3, #4
   27136:	6961      	ldr	r1, [r4, #20]
   27138:	6028      	str	r0, [r5, #0]
   2713a:	0635      	lsls	r5, r6, #24
   2713c:	681b      	ldr	r3, [r3, #0]
   2713e:	d501      	bpl.n	27144 <_printf_i+0x1dc>
   27140:	6019      	str	r1, [r3, #0]
   27142:	e002      	b.n	2714a <_printf_i+0x1e2>
   27144:	0670      	lsls	r0, r6, #25
   27146:	d5fb      	bpl.n	27140 <_printf_i+0x1d8>
   27148:	8019      	strh	r1, [r3, #0]
   2714a:	2300      	movs	r3, #0
   2714c:	4616      	mov	r6, r2
   2714e:	6123      	str	r3, [r4, #16]
   27150:	e795      	b.n	2707e <_printf_i+0x116>
   27152:	682b      	ldr	r3, [r5, #0]
   27154:	2100      	movs	r1, #0
   27156:	1d1a      	adds	r2, r3, #4
   27158:	602a      	str	r2, [r5, #0]
   2715a:	681e      	ldr	r6, [r3, #0]
   2715c:	6862      	ldr	r2, [r4, #4]
   2715e:	4630      	mov	r0, r6
   27160:	f004 f992 	bl	2b488 <memchr>
   27164:	b108      	cbz	r0, 2716a <_printf_i+0x202>
   27166:	1b80      	subs	r0, r0, r6
   27168:	6060      	str	r0, [r4, #4]
   2716a:	6863      	ldr	r3, [r4, #4]
   2716c:	6123      	str	r3, [r4, #16]
   2716e:	2300      	movs	r3, #0
   27170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   27174:	e783      	b.n	2707e <_printf_i+0x116>
   27176:	6923      	ldr	r3, [r4, #16]
   27178:	4632      	mov	r2, r6
   2717a:	4649      	mov	r1, r9
   2717c:	4640      	mov	r0, r8
   2717e:	47d0      	blx	sl
   27180:	3001      	adds	r0, #1
   27182:	d086      	beq.n	27092 <_printf_i+0x12a>
   27184:	6823      	ldr	r3, [r4, #0]
   27186:	079b      	lsls	r3, r3, #30
   27188:	d414      	bmi.n	271b4 <_printf_i+0x24c>
   2718a:	68e0      	ldr	r0, [r4, #12]
   2718c:	9b03      	ldr	r3, [sp, #12]
   2718e:	4298      	cmp	r0, r3
   27190:	bfb8      	it	lt
   27192:	4618      	movlt	r0, r3
   27194:	e77f      	b.n	27096 <_printf_i+0x12e>
   27196:	2301      	movs	r3, #1
   27198:	4632      	mov	r2, r6
   2719a:	4649      	mov	r1, r9
   2719c:	4640      	mov	r0, r8
   2719e:	47d0      	blx	sl
   271a0:	3001      	adds	r0, #1
   271a2:	f43f af76 	beq.w	27092 <_printf_i+0x12a>
   271a6:	3501      	adds	r5, #1
   271a8:	68e3      	ldr	r3, [r4, #12]
   271aa:	9903      	ldr	r1, [sp, #12]
   271ac:	1a5b      	subs	r3, r3, r1
   271ae:	42ab      	cmp	r3, r5
   271b0:	dcf1      	bgt.n	27196 <_printf_i+0x22e>
   271b2:	e7ea      	b.n	2718a <_printf_i+0x222>
   271b4:	2500      	movs	r5, #0
   271b6:	f104 0619 	add.w	r6, r4, #25
   271ba:	e7f5      	b.n	271a8 <_printf_i+0x240>
   271bc:	0002ed32 	.word	0x0002ed32
   271c0:	0002ed43 	.word	0x0002ed43

000271c4 <_scanf_chars>:
   271c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   271c8:	4615      	mov	r5, r2
   271ca:	688a      	ldr	r2, [r1, #8]
   271cc:	4680      	mov	r8, r0
   271ce:	460c      	mov	r4, r1
   271d0:	b932      	cbnz	r2, 271e0 <_scanf_chars+0x1c>
   271d2:	698a      	ldr	r2, [r1, #24]
   271d4:	2a00      	cmp	r2, #0
   271d6:	bf14      	ite	ne
   271d8:	f04f 32ff 	movne.w	r2, #4294967295
   271dc:	2201      	moveq	r2, #1
   271de:	608a      	str	r2, [r1, #8]
   271e0:	6822      	ldr	r2, [r4, #0]
   271e2:	2700      	movs	r7, #0
   271e4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 27274 <_scanf_chars+0xb0>
   271e8:	06d1      	lsls	r1, r2, #27
   271ea:	bf5f      	itttt	pl
   271ec:	681a      	ldrpl	r2, [r3, #0]
   271ee:	1d11      	addpl	r1, r2, #4
   271f0:	6019      	strpl	r1, [r3, #0]
   271f2:	6816      	ldrpl	r6, [r2, #0]
   271f4:	69a0      	ldr	r0, [r4, #24]
   271f6:	b188      	cbz	r0, 2721c <_scanf_chars+0x58>
   271f8:	2801      	cmp	r0, #1
   271fa:	d107      	bne.n	2720c <_scanf_chars+0x48>
   271fc:	682b      	ldr	r3, [r5, #0]
   271fe:	781a      	ldrb	r2, [r3, #0]
   27200:	6963      	ldr	r3, [r4, #20]
   27202:	5c9b      	ldrb	r3, [r3, r2]
   27204:	b953      	cbnz	r3, 2721c <_scanf_chars+0x58>
   27206:	2f00      	cmp	r7, #0
   27208:	d031      	beq.n	2726e <_scanf_chars+0xaa>
   2720a:	e022      	b.n	27252 <_scanf_chars+0x8e>
   2720c:	2802      	cmp	r0, #2
   2720e:	d120      	bne.n	27252 <_scanf_chars+0x8e>
   27210:	682b      	ldr	r3, [r5, #0]
   27212:	781b      	ldrb	r3, [r3, #0]
   27214:	f819 3003 	ldrb.w	r3, [r9, r3]
   27218:	071b      	lsls	r3, r3, #28
   2721a:	d41a      	bmi.n	27252 <_scanf_chars+0x8e>
   2721c:	6823      	ldr	r3, [r4, #0]
   2721e:	3701      	adds	r7, #1
   27220:	06da      	lsls	r2, r3, #27
   27222:	bf5e      	ittt	pl
   27224:	682b      	ldrpl	r3, [r5, #0]
   27226:	781b      	ldrbpl	r3, [r3, #0]
   27228:	f806 3b01 	strbpl.w	r3, [r6], #1
   2722c:	682a      	ldr	r2, [r5, #0]
   2722e:	686b      	ldr	r3, [r5, #4]
   27230:	3201      	adds	r2, #1
   27232:	3b01      	subs	r3, #1
   27234:	602a      	str	r2, [r5, #0]
   27236:	68a2      	ldr	r2, [r4, #8]
   27238:	606b      	str	r3, [r5, #4]
   2723a:	3a01      	subs	r2, #1
   2723c:	60a2      	str	r2, [r4, #8]
   2723e:	b142      	cbz	r2, 27252 <_scanf_chars+0x8e>
   27240:	2b00      	cmp	r3, #0
   27242:	dcd7      	bgt.n	271f4 <_scanf_chars+0x30>
   27244:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   27248:	4629      	mov	r1, r5
   2724a:	4640      	mov	r0, r8
   2724c:	4798      	blx	r3
   2724e:	2800      	cmp	r0, #0
   27250:	d0d0      	beq.n	271f4 <_scanf_chars+0x30>
   27252:	6823      	ldr	r3, [r4, #0]
   27254:	f013 0310 	ands.w	r3, r3, #16
   27258:	d105      	bne.n	27266 <_scanf_chars+0xa2>
   2725a:	68e2      	ldr	r2, [r4, #12]
   2725c:	3201      	adds	r2, #1
   2725e:	60e2      	str	r2, [r4, #12]
   27260:	69a2      	ldr	r2, [r4, #24]
   27262:	b102      	cbz	r2, 27266 <_scanf_chars+0xa2>
   27264:	7033      	strb	r3, [r6, #0]
   27266:	6923      	ldr	r3, [r4, #16]
   27268:	2000      	movs	r0, #0
   2726a:	443b      	add	r3, r7
   2726c:	6123      	str	r3, [r4, #16]
   2726e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27272:	bf00      	nop
   27274:	0002ec21 	.word	0x0002ec21

00027278 <_scanf_i>:
   27278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2727c:	4698      	mov	r8, r3
   2727e:	b087      	sub	sp, #28
   27280:	4b78      	ldr	r3, [pc, #480]	; (27464 <_scanf_i+0x1ec>)
   27282:	460c      	mov	r4, r1
   27284:	4682      	mov	sl, r0
   27286:	4616      	mov	r6, r2
   27288:	4627      	mov	r7, r4
   2728a:	f04f 0b00 	mov.w	fp, #0
   2728e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   27292:	ab03      	add	r3, sp, #12
   27294:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   27298:	4b73      	ldr	r3, [pc, #460]	; (27468 <_scanf_i+0x1f0>)
   2729a:	69a1      	ldr	r1, [r4, #24]
   2729c:	4a73      	ldr	r2, [pc, #460]	; (2746c <_scanf_i+0x1f4>)
   2729e:	2903      	cmp	r1, #3
   272a0:	bf08      	it	eq
   272a2:	461a      	moveq	r2, r3
   272a4:	68a3      	ldr	r3, [r4, #8]
   272a6:	9201      	str	r2, [sp, #4]
   272a8:	1e5a      	subs	r2, r3, #1
   272aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   272ae:	bf89      	itett	hi
   272b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   272b4:	f04f 0900 	movls.w	r9, #0
   272b8:	eb03 0905 	addhi.w	r9, r3, r5
   272bc:	f240 135d 	movwhi	r3, #349	; 0x15d
   272c0:	bf88      	it	hi
   272c2:	60a3      	strhi	r3, [r4, #8]
   272c4:	f857 3b1c 	ldr.w	r3, [r7], #28
   272c8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   272cc:	463d      	mov	r5, r7
   272ce:	6023      	str	r3, [r4, #0]
   272d0:	6831      	ldr	r1, [r6, #0]
   272d2:	ab03      	add	r3, sp, #12
   272d4:	2202      	movs	r2, #2
   272d6:	7809      	ldrb	r1, [r1, #0]
   272d8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   272dc:	f004 f8d4 	bl	2b488 <memchr>
   272e0:	2800      	cmp	r0, #0
   272e2:	d040      	beq.n	27366 <_scanf_i+0xee>
   272e4:	f1bb 0f01 	cmp.w	fp, #1
   272e8:	d112      	bne.n	27310 <_scanf_i+0x98>
   272ea:	6862      	ldr	r2, [r4, #4]
   272ec:	b92a      	cbnz	r2, 272fa <_scanf_i+0x82>
   272ee:	6822      	ldr	r2, [r4, #0]
   272f0:	2108      	movs	r1, #8
   272f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   272f6:	6061      	str	r1, [r4, #4]
   272f8:	6022      	str	r2, [r4, #0]
   272fa:	6822      	ldr	r2, [r4, #0]
   272fc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   27300:	6022      	str	r2, [r4, #0]
   27302:	68a2      	ldr	r2, [r4, #8]
   27304:	1e51      	subs	r1, r2, #1
   27306:	60a1      	str	r1, [r4, #8]
   27308:	b9da      	cbnz	r2, 27342 <_scanf_i+0xca>
   2730a:	f04f 0b02 	mov.w	fp, #2
   2730e:	e7df      	b.n	272d0 <_scanf_i+0x58>
   27310:	f1bb 0f02 	cmp.w	fp, #2
   27314:	d006      	beq.n	27324 <_scanf_i+0xac>
   27316:	68a2      	ldr	r2, [r4, #8]
   27318:	1e51      	subs	r1, r2, #1
   2731a:	60a1      	str	r1, [r4, #8]
   2731c:	b98a      	cbnz	r2, 27342 <_scanf_i+0xca>
   2731e:	f04f 0b01 	mov.w	fp, #1
   27322:	e7d5      	b.n	272d0 <_scanf_i+0x58>
   27324:	6822      	ldr	r2, [r4, #0]
   27326:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   2732a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2732e:	d11f      	bne.n	27370 <_scanf_i+0xf8>
   27330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   27334:	2110      	movs	r1, #16
   27336:	6022      	str	r2, [r4, #0]
   27338:	68a2      	ldr	r2, [r4, #8]
   2733a:	6061      	str	r1, [r4, #4]
   2733c:	1e51      	subs	r1, r2, #1
   2733e:	60a1      	str	r1, [r4, #8]
   27340:	b1b2      	cbz	r2, 27370 <_scanf_i+0xf8>
   27342:	6832      	ldr	r2, [r6, #0]
   27344:	1c51      	adds	r1, r2, #1
   27346:	6031      	str	r1, [r6, #0]
   27348:	7812      	ldrb	r2, [r2, #0]
   2734a:	f805 2b01 	strb.w	r2, [r5], #1
   2734e:	6872      	ldr	r2, [r6, #4]
   27350:	3a01      	subs	r2, #1
   27352:	2a00      	cmp	r2, #0
   27354:	6072      	str	r2, [r6, #4]
   27356:	dc06      	bgt.n	27366 <_scanf_i+0xee>
   27358:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   2735c:	4631      	mov	r1, r6
   2735e:	4650      	mov	r0, sl
   27360:	4790      	blx	r2
   27362:	2800      	cmp	r0, #0
   27364:	d174      	bne.n	27450 <_scanf_i+0x1d8>
   27366:	f10b 0b01 	add.w	fp, fp, #1
   2736a:	f1bb 0f03 	cmp.w	fp, #3
   2736e:	d1af      	bne.n	272d0 <_scanf_i+0x58>
   27370:	6863      	ldr	r3, [r4, #4]
   27372:	b90b      	cbnz	r3, 27378 <_scanf_i+0x100>
   27374:	230a      	movs	r3, #10
   27376:	6063      	str	r3, [r4, #4]
   27378:	6863      	ldr	r3, [r4, #4]
   2737a:	f04f 0b00 	mov.w	fp, #0
   2737e:	493c      	ldr	r1, [pc, #240]	; (27470 <_scanf_i+0x1f8>)
   27380:	6960      	ldr	r0, [r4, #20]
   27382:	1ac9      	subs	r1, r1, r3
   27384:	f004 fa65 	bl	2b852 <__sccl>
   27388:	68a3      	ldr	r3, [r4, #8]
   2738a:	6822      	ldr	r2, [r4, #0]
   2738c:	b373      	cbz	r3, 273ec <_scanf_i+0x174>
   2738e:	6831      	ldr	r1, [r6, #0]
   27390:	6960      	ldr	r0, [r4, #20]
   27392:	f891 c000 	ldrb.w	ip, [r1]
   27396:	f810 000c 	ldrb.w	r0, [r0, ip]
   2739a:	b338      	cbz	r0, 273ec <_scanf_i+0x174>
   2739c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   273a0:	d116      	bne.n	273d0 <_scanf_i+0x158>
   273a2:	0510      	lsls	r0, r2, #20
   273a4:	d514      	bpl.n	273d0 <_scanf_i+0x158>
   273a6:	f10b 0b01 	add.w	fp, fp, #1
   273aa:	f1b9 0f00 	cmp.w	r9, #0
   273ae:	d003      	beq.n	273b8 <_scanf_i+0x140>
   273b0:	3301      	adds	r3, #1
   273b2:	f109 39ff 	add.w	r9, r9, #4294967295
   273b6:	60a3      	str	r3, [r4, #8]
   273b8:	6873      	ldr	r3, [r6, #4]
   273ba:	3b01      	subs	r3, #1
   273bc:	2b00      	cmp	r3, #0
   273be:	6073      	str	r3, [r6, #4]
   273c0:	dd0d      	ble.n	273de <_scanf_i+0x166>
   273c2:	6833      	ldr	r3, [r6, #0]
   273c4:	3301      	adds	r3, #1
   273c6:	6033      	str	r3, [r6, #0]
   273c8:	68a3      	ldr	r3, [r4, #8]
   273ca:	3b01      	subs	r3, #1
   273cc:	60a3      	str	r3, [r4, #8]
   273ce:	e7db      	b.n	27388 <_scanf_i+0x110>
   273d0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   273d4:	6022      	str	r2, [r4, #0]
   273d6:	780b      	ldrb	r3, [r1, #0]
   273d8:	f805 3b01 	strb.w	r3, [r5], #1
   273dc:	e7ec      	b.n	273b8 <_scanf_i+0x140>
   273de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   273e2:	4631      	mov	r1, r6
   273e4:	4650      	mov	r0, sl
   273e6:	4798      	blx	r3
   273e8:	2800      	cmp	r0, #0
   273ea:	d0ed      	beq.n	273c8 <_scanf_i+0x150>
   273ec:	6823      	ldr	r3, [r4, #0]
   273ee:	05d9      	lsls	r1, r3, #23
   273f0:	d50d      	bpl.n	2740e <_scanf_i+0x196>
   273f2:	42bd      	cmp	r5, r7
   273f4:	d909      	bls.n	2740a <_scanf_i+0x192>
   273f6:	f105 39ff 	add.w	r9, r5, #4294967295
   273fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   273fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   27402:	4632      	mov	r2, r6
   27404:	464d      	mov	r5, r9
   27406:	4650      	mov	r0, sl
   27408:	4798      	blx	r3
   2740a:	42bd      	cmp	r5, r7
   2740c:	d028      	beq.n	27460 <_scanf_i+0x1e8>
   2740e:	6822      	ldr	r2, [r4, #0]
   27410:	f012 0210 	ands.w	r2, r2, #16
   27414:	d113      	bne.n	2743e <_scanf_i+0x1c6>
   27416:	702a      	strb	r2, [r5, #0]
   27418:	4639      	mov	r1, r7
   2741a:	6863      	ldr	r3, [r4, #4]
   2741c:	4650      	mov	r0, sl
   2741e:	9e01      	ldr	r6, [sp, #4]
   27420:	47b0      	blx	r6
   27422:	f8d8 3000 	ldr.w	r3, [r8]
   27426:	6821      	ldr	r1, [r4, #0]
   27428:	1d1a      	adds	r2, r3, #4
   2742a:	f011 0f20 	tst.w	r1, #32
   2742e:	f8c8 2000 	str.w	r2, [r8]
   27432:	681b      	ldr	r3, [r3, #0]
   27434:	d00f      	beq.n	27456 <_scanf_i+0x1de>
   27436:	6018      	str	r0, [r3, #0]
   27438:	68e3      	ldr	r3, [r4, #12]
   2743a:	3301      	adds	r3, #1
   2743c:	60e3      	str	r3, [r4, #12]
   2743e:	1bed      	subs	r5, r5, r7
   27440:	6923      	ldr	r3, [r4, #16]
   27442:	2000      	movs	r0, #0
   27444:	445d      	add	r5, fp
   27446:	442b      	add	r3, r5
   27448:	6123      	str	r3, [r4, #16]
   2744a:	b007      	add	sp, #28
   2744c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27450:	f04f 0b00 	mov.w	fp, #0
   27454:	e7ca      	b.n	273ec <_scanf_i+0x174>
   27456:	07ca      	lsls	r2, r1, #31
   27458:	bf4c      	ite	mi
   2745a:	8018      	strhmi	r0, [r3, #0]
   2745c:	6018      	strpl	r0, [r3, #0]
   2745e:	e7eb      	b.n	27438 <_scanf_i+0x1c0>
   27460:	2001      	movs	r0, #1
   27462:	e7f2      	b.n	2744a <_scanf_i+0x1d2>
   27464:	0002bea0 	.word	0x0002bea0
   27468:	0002b5ab 	.word	0x0002b5ab
   2746c:	0002b5af 	.word	0x0002b5af
   27470:	0002ed64 	.word	0x0002ed64

00027474 <z_log_msg_static_create.constprop.0>:
   27474:	2300      	movs	r3, #0
   27476:	f7f3 bf5f 	b.w	1b338 <z_impl_z_log_msg_static_create>

0002747a <fds_init>:

/**@brief Initialize the file descriptor structure used by poll.
 */
int fds_init(struct mqtt_client *c, struct pollfd *fds)
{
   2747a:	4603      	mov	r3, r0
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
   2747c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   27480:	b920      	cbnz	r0, 2748c <fds_init+0x12>
		fds->fd = c->transport.tcp.sock;
   27482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27484:	600b      	str	r3, [r1, #0]
	} else {
		return -ENOTSUP;
	}

	fds->events = POLLIN;
   27486:	2301      	movs	r3, #1
   27488:	808b      	strh	r3, [r1, #4]

	return 0;
   2748a:	4770      	bx	lr
		return -ENOTSUP;
   2748c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27490:	4770      	bx	lr

00027492 <z_log_msg_static_create.constprop.0>:
   27492:	2300      	movs	r3, #0
   27494:	f7f3 bf50 	b.w	1b338 <z_impl_z_log_msg_static_create>

00027498 <button_handler>:
	switch (has_changed) {
   27498:	2901      	cmp	r1, #1
   2749a:	d103      	bne.n	274a4 <button_handler+0xc>
		if (button_state & DK_BTN1_MSK){	
   2749c:	07c3      	lsls	r3, r0, #31
   2749e:	d501      	bpl.n	274a4 <button_handler+0xc>
   274a0:	f7f2 b976 	b.w	19790 <button_handler.part.0>
}
   274a4:	4770      	bx	lr

000274a6 <cbpprintf_external>:
{
   274a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   274aa:	4606      	mov	r6, r0
   274ac:	460d      	mov	r5, r1
   274ae:	4617      	mov	r7, r2
	if (buf == NULL) {
   274b0:	4698      	mov	r8, r3
   274b2:	b32b      	cbz	r3, 27500 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   274b4:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   274b8:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   274bc:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   274c0:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   274c2:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   274c4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   274c8:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   274cc:	441c      	add	r4, r3
   274ce:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   274d0:	45ca      	cmp	sl, r9
   274d2:	d309      	bcc.n	274e8 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   274d4:	4639      	mov	r1, r7
   274d6:	4630      	mov	r0, r6
   274d8:	46ac      	mov	ip, r5
   274da:	f8d8 2004 	ldr.w	r2, [r8, #4]
   274de:	f108 0308 	add.w	r3, r8, #8
}
   274e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   274e6:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   274e8:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   274ec:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   274f0:	4620      	mov	r0, r4
		*ps = s;
   274f2:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   274f6:	f7f1 fd79 	bl	18fec <strlen>
   274fa:	3001      	adds	r0, #1
   274fc:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   274fe:	e7e7      	b.n	274d0 <cbpprintf_external+0x2a>
}
   27500:	f06f 0015 	mvn.w	r0, #21
   27504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00027508 <is_ptr>:
{
   27508:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   2750a:	2500      	movs	r5, #0
{
   2750c:	4602      	mov	r2, r0
	bool mod = false;
   2750e:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   27510:	4614      	mov	r4, r2
   27512:	f814 3b01 	ldrb.w	r3, [r4], #1
   27516:	b90b      	cbnz	r3, 2751c <is_ptr+0x14>
					return false;
   27518:	4618      	mov	r0, r3
   2751a:	e009      	b.n	27530 <is_ptr+0x28>
		if (mod) {
   2751c:	b198      	cbz	r0, 27546 <is_ptr+0x3e>
			if (cnt == n) {
   2751e:	428d      	cmp	r5, r1
   27520:	d107      	bne.n	27532 <is_ptr+0x2a>
				if (c == 'p') {
   27522:	2b70      	cmp	r3, #112	; 0x70
   27524:	d004      	beq.n	27530 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   27526:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   2752a:	2a3a      	cmp	r2, #58	; 0x3a
   2752c:	d80b      	bhi.n	27546 <is_ptr+0x3e>
					return false;
   2752e:	2000      	movs	r0, #0
}
   27530:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   27532:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   27536:	2e3a      	cmp	r6, #58	; 0x3a
   27538:	d805      	bhi.n	27546 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   2753a:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   2753c:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2753e:	1c94      	adds	r4, r2, #2
   27540:	2b00      	cmp	r3, #0
   27542:	d0e9      	beq.n	27518 <is_ptr+0x10>
   27544:	2000      	movs	r0, #0
		if (c == '%') {
   27546:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   27548:	4622      	mov	r2, r4
			mod = !mod;
   2754a:	bf08      	it	eq
   2754c:	f080 0001 	eoreq.w	r0, r0, #1
   27550:	e7de      	b.n	27510 <is_ptr+0x8>

00027552 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   27552:	b40c      	push	{r2, r3}
   27554:	4603      	mov	r3, r0
   27556:	b507      	push	{r0, r1, r2, lr}
   27558:	4608      	mov	r0, r1
				       unsigned long request, ...)
{
	va_list args;
	int res;

	va_start(args, request);
   2755a:	aa05      	add	r2, sp, #20
	res = vtable->ioctl(obj, request, args);
   2755c:	f240 1105 	movw	r1, #261	; 0x105
   27560:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   27562:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   27564:	4798      	blx	r3
	va_end(args);

	return res;
}
   27566:	b003      	add	sp, #12
   27568:	f85d eb04 	ldr.w	lr, [sp], #4
   2756c:	b002      	add	sp, #8
   2756e:	4770      	bx	lr

00027570 <arch_printk_char_out>:
}
   27570:	2000      	movs	r0, #0
   27572:	4770      	bx	lr

00027574 <str_out>:
{
   27574:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   27576:	688a      	ldr	r2, [r1, #8]
   27578:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2757a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2757c:	b114      	cbz	r4, 27584 <str_out+0x10>
   2757e:	684b      	ldr	r3, [r1, #4]
   27580:	4293      	cmp	r3, r2
   27582:	dc01      	bgt.n	27588 <str_out+0x14>
		ctx->count++;
   27584:	608d      	str	r5, [r1, #8]
}
   27586:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   27588:	3b01      	subs	r3, #1
   2758a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2758c:	bf08      	it	eq
   2758e:	2200      	moveq	r2, #0
   27590:	608d      	str	r5, [r1, #8]
   27592:	bf0c      	ite	eq
   27594:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   27596:	54a0      	strbne	r0, [r4, r2]
   27598:	e7f5      	b.n	27586 <str_out+0x12>

0002759a <printk>:
{
   2759a:	b40f      	push	{r0, r1, r2, r3}
   2759c:	b507      	push	{r0, r1, r2, lr}
   2759e:	a904      	add	r1, sp, #16
   275a0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   275a4:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   275a6:	f000 fd0b 	bl	27fc0 <z_log_vprintk>
}
   275aa:	b003      	add	sp, #12
   275ac:	f85d eb04 	ldr.w	lr, [sp], #4
   275b0:	b004      	add	sp, #16
   275b2:	4770      	bx	lr

000275b4 <snprintk>:
{
   275b4:	b40c      	push	{r2, r3}
   275b6:	b507      	push	{r0, r1, r2, lr}
   275b8:	ab04      	add	r3, sp, #16
   275ba:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   275be:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   275c0:	f7f2 feea 	bl	1a398 <vsnprintk>
}
   275c4:	b003      	add	sp, #12
   275c6:	f85d eb04 	ldr.w	lr, [sp], #4
   275ca:	b002      	add	sp, #8
   275cc:	4770      	bx	lr

000275ce <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   275ce:	4604      	mov	r4, r0
   275d0:	b508      	push	{r3, lr}
   275d2:	4608      	mov	r0, r1
   275d4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   275d6:	461a      	mov	r2, r3
   275d8:	47a0      	blx	r4
	return z_impl_z_current_get();
   275da:	f7fe fc2b 	bl	25e34 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   275de:	f7f5 f95f 	bl	1c8a0 <z_impl_k_thread_abort>

000275e2 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   275e2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   275e6:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   275e8:	0840      	lsrs	r0, r0, #1
   275ea:	4770      	bx	lr

000275ec <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   275ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   275ee:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   275f0:	f7ff fff7 	bl	275e2 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   275f4:	fab0 f080 	clz	r0, r0
   275f8:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   275fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   27600:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   27604:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   27606:	1d17      	adds	r7, r2, #4
{
   27608:	460c      	mov	r4, r1
   2760a:	3206      	adds	r2, #6
   2760c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2760e:	b956      	cbnz	r6, 27626 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   27610:	2101      	movs	r1, #1
   27612:	fa01 f000 	lsl.w	r0, r1, r0
   27616:	68d9      	ldr	r1, [r3, #12]
   27618:	4301      	orrs	r1, r0
   2761a:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2761c:	f8cc 4010 	str.w	r4, [ip, #16]
   27620:	53dd      	strh	r5, [r3, r7]
   27622:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   27624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   27626:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   27628:	3104      	adds	r1, #4
   2762a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2762c:	53d8      	strh	r0, [r3, r7]
   2762e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   27632:	529e      	strh	r6, [r3, r2]
   27634:	80c5      	strh	r5, [r0, #6]
   27636:	525d      	strh	r5, [r3, r1]
   27638:	e7f4      	b.n	27624 <free_list_add+0x38>

0002763a <free_list_remove_bidx>:
{
   2763a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2763c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   27640:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   27642:	4299      	cmp	r1, r3
   27644:	f102 0104 	add.w	r1, r2, #4
   27648:	d10a      	bne.n	27660 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2764a:	2301      	movs	r3, #1
   2764c:	fa03 f202 	lsl.w	r2, r3, r2
   27650:	68c3      	ldr	r3, [r0, #12]
   27652:	ea23 0302 	bic.w	r3, r3, r2
   27656:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   27658:	2300      	movs	r3, #0
   2765a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2765e:	bd10      	pop	{r4, pc}
   27660:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   27662:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   27666:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2766a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2766e:	80cb      	strh	r3, [r1, #6]
   27670:	8082      	strh	r2, [r0, #4]
}
   27672:	e7f4      	b.n	2765e <free_list_remove_bidx+0x24>

00027674 <free_list_remove>:
{
   27674:	b508      	push	{r3, lr}
   27676:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   27678:	f7ff ffb3 	bl	275e2 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2767c:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   27680:	4618      	mov	r0, r3
}
   27682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   27686:	f1c2 021f 	rsb	r2, r2, #31
   2768a:	f7ff bfd6 	b.w	2763a <free_list_remove_bidx>

0002768e <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2768e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27692:	fab1 f581 	clz	r5, r1
   27696:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2769a:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   2769e:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   276a2:	4603      	mov	r3, r0
   276a4:	460e      	mov	r6, r1
	if (b->next) {
   276a6:	b1c2      	cbz	r2, 276da <alloc_chunk+0x4c>
   276a8:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   276aa:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   276ae:	4618      	mov	r0, r3
   276b0:	4621      	mov	r1, r4
   276b2:	f7ff ff96 	bl	275e2 <chunk_size>
   276b6:	42b0      	cmp	r0, r6
   276b8:	d306      	bcc.n	276c8 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   276ba:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   276bc:	4618      	mov	r0, r3
   276be:	f7ff ffbc 	bl	2763a <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   276c2:	4620      	mov	r0, r4
   276c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   276c8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   276cc:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   276ce:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   276d0:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   276d4:	d001      	beq.n	276da <alloc_chunk+0x4c>
   276d6:	4282      	cmp	r2, r0
   276d8:	d1e7      	bne.n	276aa <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   276da:	f04f 34ff 	mov.w	r4, #4294967295
   276de:	f1c5 0220 	rsb	r2, r5, #32
   276e2:	4094      	lsls	r4, r2
   276e4:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   276e6:	4014      	ands	r4, r2
   276e8:	d0eb      	beq.n	276c2 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   276ea:	fa94 f2a4 	rbit	r2, r4
   276ee:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   276f2:	1d11      	adds	r1, r2, #4
   276f4:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   276f8:	4621      	mov	r1, r4
   276fa:	e7df      	b.n	276bc <alloc_chunk+0x2e>

000276fc <merge_chunks>:
{
   276fc:	b538      	push	{r3, r4, r5, lr}
   276fe:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   27700:	f7ff ff6f 	bl	275e2 <chunk_size>
{
   27704:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   27706:	4604      	mov	r4, r0
   27708:	4611      	mov	r1, r2
   2770a:	4618      	mov	r0, r3
   2770c:	f7ff ff69 	bl	275e2 <chunk_size>
   27710:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27712:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   27714:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   27718:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2771a:	4618      	mov	r0, r3
   2771c:	f7ff ff61 	bl	275e2 <chunk_size>
	void *cmem = &buf[c];
   27720:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   27722:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   27726:	bd38      	pop	{r3, r4, r5, pc}

00027728 <split_chunks>:
{
   27728:	b538      	push	{r3, r4, r5, lr}
   2772a:	460c      	mov	r4, r1
   2772c:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2772e:	f7ff ff58 	bl	275e2 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   27732:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   27734:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   27736:	4405      	add	r5, r0
   27738:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2773c:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2773e:	8060      	strh	r0, [r4, #2]
   27740:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27744:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   27746:	8044      	strh	r4, [r0, #2]
   27748:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2774c:	4618      	mov	r0, r3
   2774e:	4611      	mov	r1, r2
   27750:	f7ff ff47 	bl	275e2 <chunk_size>
	void *cmem = &buf[c];
   27754:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   27756:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2775a:	bd38      	pop	{r3, r4, r5, pc}

0002775c <free_chunk>:
{
   2775c:	b538      	push	{r3, r4, r5, lr}
   2775e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   27760:	f7ff ff3f 	bl	275e2 <chunk_size>
   27764:	460c      	mov	r4, r1
   27766:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   27768:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2776c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2776e:	07da      	lsls	r2, r3, #31
   27770:	d40a      	bmi.n	27788 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   27772:	4628      	mov	r0, r5
   27774:	f7ff ff7e 	bl	27674 <free_list_remove>
	return c + chunk_size(h, c);
   27778:	4621      	mov	r1, r4
   2777a:	4628      	mov	r0, r5
   2777c:	f7ff ff31 	bl	275e2 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   27780:	1822      	adds	r2, r4, r0
   27782:	4628      	mov	r0, r5
   27784:	f7ff ffba 	bl	276fc <merge_chunks>
		return ((uint16_t *)cmem)[f];
   27788:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2778c:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2778e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   27792:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   27794:	07db      	lsls	r3, r3, #31
   27796:	d40c      	bmi.n	277b2 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   27798:	4628      	mov	r0, r5
   2779a:	f7ff ff6b 	bl	27674 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2779e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   277a2:	4622      	mov	r2, r4
   277a4:	1a61      	subs	r1, r4, r1
   277a6:	4628      	mov	r0, r5
   277a8:	f7ff ffa8 	bl	276fc <merge_chunks>
   277ac:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   277b0:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   277b2:	4621      	mov	r1, r4
   277b4:	4628      	mov	r0, r5
}
   277b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   277ba:	f7ff bf17 	b.w	275ec <free_list_add>

000277be <sys_heap_free>:
	if (mem == NULL) {
   277be:	b161      	cbz	r1, 277da <sys_heap_free+0x1c>
   277c0:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   277c2:	3904      	subs	r1, #4
   277c4:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   277c6:	f021 0307 	bic.w	r3, r1, #7
   277ca:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   277cc:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   277ce:	08c9      	lsrs	r1, r1, #3
   277d0:	f022 0201 	bic.w	r2, r2, #1
   277d4:	805a      	strh	r2, [r3, #2]
   277d6:	f7ff bfc1 	b.w	2775c <free_chunk>
}
   277da:	4770      	bx	lr

000277dc <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   277dc:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   277de:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   277e0:	b909      	cbnz	r1, 277e6 <sys_heap_alloc+0xa>
		return NULL;
   277e2:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   277e4:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   277e6:	68ab      	ldr	r3, [r5, #8]
   277e8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   277ec:	d9f9      	bls.n	277e2 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   277ee:	310b      	adds	r1, #11
   277f0:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   277f2:	4621      	mov	r1, r4
   277f4:	4628      	mov	r0, r5
   277f6:	f7ff ff4a 	bl	2768e <alloc_chunk>
	if (c == 0U) {
   277fa:	4606      	mov	r6, r0
   277fc:	2800      	cmp	r0, #0
   277fe:	d0f0      	beq.n	277e2 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   27800:	4601      	mov	r1, r0
   27802:	4628      	mov	r0, r5
   27804:	f7ff feed 	bl	275e2 <chunk_size>
   27808:	42a0      	cmp	r0, r4
   2780a:	d907      	bls.n	2781c <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2780c:	4628      	mov	r0, r5
   2780e:	1932      	adds	r2, r6, r4
   27810:	f7ff ff8a 	bl	27728 <split_chunks>
		free_list_add(h, c + chunk_sz);
   27814:	4611      	mov	r1, r2
   27816:	4628      	mov	r0, r5
   27818:	f7ff fee8 	bl	275ec <free_list_add>
	void *cmem = &buf[c];
   2781c:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   27820:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27822:	8853      	ldrh	r3, [r2, #2]
   27824:	3004      	adds	r0, #4
   27826:	f043 0301 	orr.w	r3, r3, #1
   2782a:	8053      	strh	r3, [r2, #2]
	return mem;
   2782c:	e7da      	b.n	277e4 <sys_heap_alloc+0x8>

0002782e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2782e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27832:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   27836:	ea19 0901 	ands.w	r9, r9, r1
{
   2783a:	460f      	mov	r7, r1
   2783c:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   2783e:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   27840:	d00c      	beq.n	2785c <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   27842:	424b      	negs	r3, r1
   27844:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   27846:	2b04      	cmp	r3, #4
   27848:	461a      	mov	r2, r3
   2784a:	464f      	mov	r7, r9
   2784c:	bf28      	it	cs
   2784e:	2204      	movcs	r2, #4
	rew = align & -align;
   27850:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   27852:	b964      	cbnz	r4, 2786e <sys_heap_aligned_alloc+0x40>
		return NULL;
   27854:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   27856:	4628      	mov	r0, r5
   27858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2785c:	2904      	cmp	r1, #4
   2785e:	d804      	bhi.n	2786a <sys_heap_aligned_alloc+0x3c>
}
   27860:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   27864:	4611      	mov	r1, r2
   27866:	f7ff bfb9 	b.w	277dc <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   2786a:	2204      	movs	r2, #4
   2786c:	e7f1      	b.n	27852 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   2786e:	68b3      	ldr	r3, [r6, #8]
   27870:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   27874:	d9ee      	bls.n	27854 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27876:	f104 010b 	add.w	r1, r4, #11
   2787a:	4439      	add	r1, r7
   2787c:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2787e:	4630      	mov	r0, r6
   27880:	08c9      	lsrs	r1, r1, #3
   27882:	f7ff ff04 	bl	2768e <alloc_chunk>
	if (c0 == 0) {
   27886:	4680      	mov	r8, r0
   27888:	2800      	cmp	r0, #0
   2788a:	d0e3      	beq.n	27854 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2788c:	f109 0504 	add.w	r5, r9, #4
   27890:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   27894:	1e7b      	subs	r3, r7, #1
   27896:	4435      	add	r5, r6
   27898:	441d      	add	r5, r3
   2789a:	427f      	negs	r7, r7
   2789c:	403d      	ands	r5, r7
   2789e:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   278a2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   278a4:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   278a6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   278a8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   278aa:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   278ae:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   278b0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   278b4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   278b8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   278bc:	d208      	bcs.n	278d0 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   278be:	4601      	mov	r1, r0
   278c0:	463a      	mov	r2, r7
   278c2:	4630      	mov	r0, r6
   278c4:	f7ff ff30 	bl	27728 <split_chunks>
		free_list_add(h, c0);
   278c8:	4641      	mov	r1, r8
   278ca:	4630      	mov	r0, r6
   278cc:	f7ff fe8e 	bl	275ec <free_list_add>
	return c + chunk_size(h, c);
   278d0:	4639      	mov	r1, r7
   278d2:	4630      	mov	r0, r6
   278d4:	f7ff fe85 	bl	275e2 <chunk_size>
   278d8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   278da:	4284      	cmp	r4, r0
   278dc:	d207      	bcs.n	278ee <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   278de:	4630      	mov	r0, r6
   278e0:	4622      	mov	r2, r4
   278e2:	f7ff ff21 	bl	27728 <split_chunks>
		free_list_add(h, c_end);
   278e6:	4621      	mov	r1, r4
   278e8:	4630      	mov	r0, r6
   278ea:	f7ff fe7f 	bl	275ec <free_list_add>
	void *cmem = &buf[c];
   278ee:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   278f2:	8873      	ldrh	r3, [r6, #2]
   278f4:	f043 0301 	orr.w	r3, r3, #1
   278f8:	8073      	strh	r3, [r6, #2]
   278fa:	e7ac      	b.n	27856 <sys_heap_aligned_alloc+0x28>

000278fc <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   278fc:	b4f0      	push	{r4, r5, r6, r7}
   278fe:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   27900:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   27902:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   27904:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   27906:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2790a:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2790e:	1a0e      	subs	r6, r1, r0
   27910:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   27912:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   27916:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   27918:	2700      	movs	r7, #0
   2791a:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2791c:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   27920:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   27922:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27924:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   27926:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2792a:	f1c2 0220 	rsb	r2, r2, #32
   2792e:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   27930:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   27934:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   27938:	4294      	cmp	r4, r2
   2793a:	d1fb      	bne.n	27934 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2793c:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2793e:	f042 0201 	orr.w	r2, r2, #1
   27942:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   27944:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27946:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   27948:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2794c:	8007      	strh	r7, [r0, #0]
   2794e:	8065      	strh	r5, [r4, #2]
   27950:	1984      	adds	r4, r0, r6
   27952:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   27956:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   2795a:	8067      	strh	r7, [r4, #2]
   2795c:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2795e:	885a      	ldrh	r2, [r3, #2]
   27960:	f042 0201 	orr.w	r2, r2, #1
   27964:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   27966:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   27968:	f7ff be40 	b.w	275ec <free_list_add>

0002796c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2796c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2796e:	f013 0307 	ands.w	r3, r3, #7
   27972:	d105      	bne.n	27980 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   27974:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   27976:	2b00      	cmp	r3, #0
   27978:	bf0c      	ite	eq
   2797a:	2000      	moveq	r0, #0
   2797c:	2003      	movne	r0, #3
   2797e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   27980:	2b02      	cmp	r3, #2
   27982:	d105      	bne.n	27990 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   27984:	8b40      	ldrh	r0, [r0, #26]
   27986:	fab0 f080 	clz	r0, r0
   2798a:	0940      	lsrs	r0, r0, #5
   2798c:	0080      	lsls	r0, r0, #2
   2798e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   27990:	2b01      	cmp	r3, #1
   27992:	d105      	bne.n	279a0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   27994:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   27996:	2b00      	cmp	r3, #0
   27998:	bf0c      	ite	eq
   2799a:	2000      	moveq	r0, #0
   2799c:	2005      	movne	r0, #5
   2799e:	4770      	bx	lr
	int evt = EVT_NOP;
   279a0:	2000      	movs	r0, #0
}
   279a2:	4770      	bx	lr

000279a4 <validate_args>:
{
   279a4:	b510      	push	{r4, lr}
   279a6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   279a8:	b100      	cbz	r0, 279ac <validate_args+0x8>
   279aa:	b911      	cbnz	r1, 279b2 <validate_args+0xe>
		return -EINVAL;
   279ac:	f06f 0015 	mvn.w	r0, #21
}
   279b0:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   279b2:	1d08      	adds	r0, r1, #4
   279b4:	f000 f895 	bl	27ae2 <sys_notify_validate>
	if ((rv == 0)
   279b8:	2800      	cmp	r0, #0
   279ba:	d1f9      	bne.n	279b0 <validate_args+0xc>
	    && ((cli->notify.flags
   279bc:	68a3      	ldr	r3, [r4, #8]
   279be:	2b03      	cmp	r3, #3
   279c0:	d9f6      	bls.n	279b0 <validate_args+0xc>
   279c2:	e7f3      	b.n	279ac <validate_args+0x8>

000279c4 <notify_one>:
{
   279c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   279c8:	460d      	mov	r5, r1
   279ca:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   279cc:	4619      	mov	r1, r3
   279ce:	1d28      	adds	r0, r5, #4
{
   279d0:	4690      	mov	r8, r2
   279d2:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   279d4:	f000 f899 	bl	27b0a <sys_notify_finalize>
	if (cb) {
   279d8:	4604      	mov	r4, r0
   279da:	b138      	cbz	r0, 279ec <notify_one+0x28>
		cb(mgr, cli, state, res);
   279dc:	4633      	mov	r3, r6
   279de:	4642      	mov	r2, r8
   279e0:	4629      	mov	r1, r5
   279e2:	4638      	mov	r0, r7
   279e4:	46a4      	mov	ip, r4
}
   279e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   279ea:	4760      	bx	ip
}
   279ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000279f0 <transition_complete>:
{
   279f0:	b410      	push	{r4}
	__asm__ volatile(
   279f2:	f04f 0420 	mov.w	r4, #32
   279f6:	f3ef 8211 	mrs	r2, BASEPRI
   279fa:	f384 8812 	msr	BASEPRI_MAX, r4
   279fe:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   27a02:	6141      	str	r1, [r0, #20]
}
   27a04:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   27a06:	2101      	movs	r1, #1
   27a08:	f7f2 bcdc 	b.w	1a3c4 <process_event>

00027a0c <onoff_manager_init>:
{
   27a0c:	b538      	push	{r3, r4, r5, lr}
   27a0e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   27a10:	4605      	mov	r5, r0
   27a12:	b158      	cbz	r0, 27a2c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   27a14:	b151      	cbz	r1, 27a2c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   27a16:	680b      	ldr	r3, [r1, #0]
   27a18:	b143      	cbz	r3, 27a2c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   27a1a:	684b      	ldr	r3, [r1, #4]
   27a1c:	b133      	cbz	r3, 27a2c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   27a1e:	221c      	movs	r2, #28
   27a20:	2100      	movs	r1, #0
   27a22:	f003 fd5c 	bl	2b4de <memset>
	return 0;
   27a26:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   27a28:	612c      	str	r4, [r5, #16]
}
   27a2a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   27a2c:	f06f 0015 	mvn.w	r0, #21
   27a30:	e7fb      	b.n	27a2a <onoff_manager_init+0x1e>

00027a32 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   27a32:	b570      	push	{r4, r5, r6, lr}
   27a34:	4605      	mov	r5, r0
   27a36:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   27a38:	f7ff ffb4 	bl	279a4 <validate_args>

	if (rv < 0) {
   27a3c:	1e04      	subs	r4, r0, #0
   27a3e:	db15      	blt.n	27a6c <onoff_request+0x3a>
   27a40:	f04f 0320 	mov.w	r3, #32
   27a44:	f3ef 8211 	mrs	r2, BASEPRI
   27a48:	f383 8812 	msr	BASEPRI_MAX, r3
   27a4c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   27a50:	f64f 71ff 	movw	r1, #65535	; 0xffff
   27a54:	8b6b      	ldrh	r3, [r5, #26]
   27a56:	8b2c      	ldrh	r4, [r5, #24]
   27a58:	428b      	cmp	r3, r1
   27a5a:	f004 0407 	and.w	r4, r4, #7
   27a5e:	d107      	bne.n	27a70 <onoff_request+0x3e>
	__asm__ volatile(
   27a60:	f382 8811 	msr	BASEPRI, r2
   27a64:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   27a68:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   27a6c:	4620      	mov	r0, r4
   27a6e:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   27a70:	2c02      	cmp	r4, #2
   27a72:	d10c      	bne.n	27a8e <onoff_request+0x5c>
		mgr->refs += 1U;
   27a74:	3301      	adds	r3, #1
   27a76:	836b      	strh	r3, [r5, #26]
   27a78:	f382 8811 	msr	BASEPRI, r2
   27a7c:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   27a80:	2300      	movs	r3, #0
   27a82:	4622      	mov	r2, r4
   27a84:	4631      	mov	r1, r6
   27a86:	4628      	mov	r0, r5
   27a88:	f7ff ff9c 	bl	279c4 <notify_one>
   27a8c:	e7ee      	b.n	27a6c <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   27a8e:	2c06      	cmp	r4, #6
   27a90:	d814      	bhi.n	27abc <onoff_request+0x8a>
   27a92:	e8df f004 	tbb	[pc, r4]
   27a96:	1304      	.short	0x1304
   27a98:	1a041313 	.word	0x1a041313
   27a9c:	04          	.byte	0x04
   27a9d:	00          	.byte	0x00
	parent->next = child;
   27a9e:	2300      	movs	r3, #0
   27aa0:	6033      	str	r3, [r6, #0]
	return list->tail;
   27aa2:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   27aa4:	b93b      	cbnz	r3, 27ab6 <onoff_request+0x84>
	list->head = node;
   27aa6:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   27aaa:	b9ac      	cbnz	r4, 27ad8 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   27aac:	2102      	movs	r1, #2
   27aae:	4628      	mov	r0, r5
   27ab0:	f7f2 fc88 	bl	1a3c4 <process_event>
   27ab4:	e7da      	b.n	27a6c <onoff_request+0x3a>
	parent->next = child;
   27ab6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   27ab8:	606e      	str	r6, [r5, #4]
}
   27aba:	e7f6      	b.n	27aaa <onoff_request+0x78>
   27abc:	f382 8811 	msr	BASEPRI, r2
   27ac0:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   27ac4:	f06f 0404 	mvn.w	r4, #4
   27ac8:	e7d0      	b.n	27a6c <onoff_request+0x3a>
   27aca:	f382 8811 	msr	BASEPRI, r2
   27ace:	f3bf 8f6f 	isb	sy
   27ad2:	f06f 0485 	mvn.w	r4, #133	; 0x85
   27ad6:	e7c9      	b.n	27a6c <onoff_request+0x3a>
   27ad8:	f382 8811 	msr	BASEPRI, r2
   27adc:	f3bf 8f6f 	isb	sy
		if (notify) {
   27ae0:	e7c4      	b.n	27a6c <onoff_request+0x3a>

00027ae2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   27ae2:	4603      	mov	r3, r0
   27ae4:	b140      	cbz	r0, 27af8 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27ae6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   27ae8:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   27aec:	2a02      	cmp	r2, #2
   27aee:	d006      	beq.n	27afe <sys_notify_validate+0x1c>
   27af0:	2a03      	cmp	r2, #3
   27af2:	d004      	beq.n	27afe <sys_notify_validate+0x1c>
   27af4:	2a01      	cmp	r2, #1
   27af6:	d005      	beq.n	27b04 <sys_notify_validate+0x22>
   27af8:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   27afc:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   27afe:	681a      	ldr	r2, [r3, #0]
   27b00:	2a00      	cmp	r2, #0
   27b02:	d0f9      	beq.n	27af8 <sys_notify_validate+0x16>
		notify->result = 0;
   27b04:	2000      	movs	r0, #0
   27b06:	6098      	str	r0, [r3, #8]
   27b08:	4770      	bx	lr

00027b0a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   27b0a:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27b0c:	6842      	ldr	r2, [r0, #4]
   27b0e:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   27b10:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   27b14:	2a02      	cmp	r2, #2
   27b16:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   27b1a:	6081      	str	r1, [r0, #8]
	switch (method) {
   27b1c:	d007      	beq.n	27b2e <sys_notify_finalize+0x24>
   27b1e:	2a03      	cmp	r2, #3
   27b20:	d002      	beq.n	27b28 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   27b22:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   27b24:	2000      	movs	r0, #0
   27b26:	e001      	b.n	27b2c <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   27b28:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   27b2a:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   27b2c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   27b2e:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   27b30:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   27b32:	2800      	cmp	r0, #0
   27b34:	d0f6      	beq.n	27b24 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   27b36:	f7fe fc63 	bl	26400 <z_impl_k_poll_signal_raise>
   27b3a:	e7f3      	b.n	27b24 <sys_notify_finalize+0x1a>

00027b3c <outs>:
{
   27b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27b40:	4607      	mov	r7, r0
   27b42:	4688      	mov	r8, r1
   27b44:	4615      	mov	r5, r2
   27b46:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   27b48:	4614      	mov	r4, r2
   27b4a:	42b4      	cmp	r4, r6
   27b4c:	d305      	bcc.n	27b5a <outs+0x1e>
   27b4e:	b10e      	cbz	r6, 27b54 <outs+0x18>
	return (int)count;
   27b50:	1b60      	subs	r0, r4, r5
   27b52:	e008      	b.n	27b66 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   27b54:	7823      	ldrb	r3, [r4, #0]
   27b56:	2b00      	cmp	r3, #0
   27b58:	d0fa      	beq.n	27b50 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   27b5a:	4641      	mov	r1, r8
   27b5c:	f814 0b01 	ldrb.w	r0, [r4], #1
   27b60:	47b8      	blx	r7
		if (rc < 0) {
   27b62:	2800      	cmp	r0, #0
   27b64:	daf1      	bge.n	27b4a <outs+0xe>
}
   27b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027b6a <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   27b6a:	68c3      	ldr	r3, [r0, #12]
   27b6c:	6802      	ldr	r2, [r0, #0]
   27b6e:	4293      	cmp	r3, r2
   27b70:	d904      	bls.n	27b7c <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   27b72:	3b01      	subs	r3, #1
   27b74:	1a9a      	subs	r2, r3, r2

		return false;
   27b76:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   27b78:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   27b7a:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   27b7c:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
   27b7e:	b913      	cbnz	r3, 27b86 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   27b80:	3801      	subs	r0, #1
   27b82:	1a82      	subs	r2, r0, r2
		return false;
   27b84:	e7f7      	b.n	27b76 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   27b86:	1a82      	subs	r2, r0, r2
	return true;
   27b88:	2001      	movs	r0, #1
   27b8a:	e7f5      	b.n	27b78 <free_space+0xe>

00027b8c <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   27b8c:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   27b8e:	a901      	add	r1, sp, #4
{
   27b90:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   27b92:	f7ff ffea 	bl	27b6a <free_space>
   27b96:	b120      	cbz	r0, 27ba2 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   27b98:	9b01      	ldr	r3, [sp, #4]
   27b9a:	68e2      	ldr	r2, [r4, #12]
   27b9c:	3b01      	subs	r3, #1
   27b9e:	4413      	add	r3, r2
   27ba0:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   27ba2:	6a20      	ldr	r0, [r4, #32]
   27ba4:	9b01      	ldr	r3, [sp, #4]
   27ba6:	1ac0      	subs	r0, r0, r3
}
   27ba8:	3801      	subs	r0, #1
   27baa:	b002      	add	sp, #8
   27bac:	bd10      	pop	{r4, pc}

00027bae <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   27bae:	b510      	push	{r4, lr}
   27bb0:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   27bb2:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27bb4:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   27bb6:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27bb8:	07d2      	lsls	r2, r2, #31
   27bba:	d502      	bpl.n	27bc2 <idx_inc+0x14>
		return i & (buffer->size - 1);
   27bbc:	3b01      	subs	r3, #1
   27bbe:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   27bc0:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   27bc2:	4298      	cmp	r0, r3
   27bc4:	bf28      	it	cs
   27bc6:	1ac0      	subcs	r0, r0, r3
   27bc8:	e7fa      	b.n	27bc0 <idx_inc+0x12>

00027bca <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   27bca:	b538      	push	{r3, r4, r5, lr}
   27bcc:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   27bce:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   27bd0:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   27bd2:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   27bd4:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   27bd8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27bdc:	6801      	ldr	r1, [r0, #0]
   27bde:	462a      	mov	r2, r5
{
   27be0:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27be2:	f7ff ffe4 	bl	27bae <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27be6:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27be8:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27bea:	462a      	mov	r2, r5
   27bec:	4620      	mov	r0, r4
   27bee:	f7ff ffde 	bl	27bae <idx_inc>
   27bf2:	6060      	str	r0, [r4, #4]
}
   27bf4:	bd38      	pop	{r3, r4, r5, pc}

00027bf6 <max_utilization_update>:
{
   27bf6:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   27bf8:	6903      	ldr	r3, [r0, #16]
{
   27bfa:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   27bfc:	075b      	lsls	r3, r3, #29
   27bfe:	d506      	bpl.n	27c0e <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   27c00:	6a45      	ldr	r5, [r0, #36]	; 0x24
   27c02:	f7ff ffc3 	bl	27b8c <get_usage>
   27c06:	4285      	cmp	r5, r0
   27c08:	bf2c      	ite	cs
   27c0a:	6265      	strcs	r5, [r4, #36]	; 0x24
   27c0c:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   27c0e:	bd38      	pop	{r3, r4, r5, pc}

00027c10 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   27c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c14:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   27c16:	2300      	movs	r3, #0
   27c18:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   27c1a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   27c1e:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   27c22:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   27c24:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   27c28:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   27c2a:	f003 0303 	and.w	r3, r3, #3
   27c2e:	2b02      	cmp	r3, #2
{
   27c30:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   27c32:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   27c36:	d103      	bne.n	27c40 <drop_item_locked+0x30>
		return item->skip.len;
   27c38:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   27c3c:	08ad      	lsrs	r5, r5, #2
   27c3e:	d12e      	bne.n	27c9e <drop_item_locked+0x8e>
   27c40:	4630      	mov	r0, r6
   27c42:	69a3      	ldr	r3, [r4, #24]
   27c44:	4798      	blx	r3
   27c46:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   27c48:	f1b8 0f00 	cmp.w	r8, #0
   27c4c:	d038      	beq.n	27cc0 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   27c4e:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   27c52:	079b      	lsls	r3, r3, #30
   27c54:	d531      	bpl.n	27cba <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   27c56:	4620      	mov	r0, r4
   27c58:	f10b 0101 	add.w	r1, fp, #1
   27c5c:	f7ff ffb5 	bl	27bca <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   27c60:	6861      	ldr	r1, [r4, #4]
   27c62:	462a      	mov	r2, r5
   27c64:	4620      	mov	r0, r4
   27c66:	f7ff ffa2 	bl	27bae <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   27c6a:	6821      	ldr	r1, [r4, #0]
   27c6c:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   27c6e:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   27c70:	4620      	mov	r0, r4
   27c72:	f7ff ff9c 	bl	27bae <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   27c76:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   27c78:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   27c7a:	68e1      	ldr	r1, [r4, #12]
   27c7c:	4620      	mov	r0, r4
   27c7e:	f7ff ff96 	bl	27bae <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   27c82:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   27c84:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   27c88:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   27c8c:	f002 0203 	and.w	r2, r2, #3
   27c90:	2a02      	cmp	r2, #2
   27c92:	d10e      	bne.n	27cb2 <drop_item_locked+0xa2>
		return item->skip.len;
   27c94:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   27c98:	089b      	lsrs	r3, r3, #2
   27c9a:	d00a      	beq.n	27cb2 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   27c9c:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   27c9e:	68e1      	ldr	r1, [r4, #12]
   27ca0:	462a      	mov	r2, r5
   27ca2:	4620      	mov	r0, r4
   27ca4:	f7ff ff83 	bl	27bae <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   27ca8:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
   27cac:	4630      	mov	r0, r6
   27cae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   27cb2:	4630      	mov	r0, r6
   27cb4:	69a3      	ldr	r3, [r4, #24]
   27cb6:	4798      	blx	r3
   27cb8:	4405      	add	r5, r0
			*user_packet = true;
   27cba:	2301      	movs	r3, #1
   27cbc:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   27cbe:	e7ee      	b.n	27c9e <drop_item_locked+0x8e>
		item = NULL;
   27cc0:	4646      	mov	r6, r8
	return item;
   27cc2:	e7f3      	b.n	27cac <drop_item_locked+0x9c>

00027cc4 <mpsc_pbuf_init>:
{
   27cc4:	b538      	push	{r3, r4, r5, lr}
   27cc6:	460d      	mov	r5, r1
   27cc8:	4604      	mov	r4, r0
   27cca:	221c      	movs	r2, #28
   27ccc:	2100      	movs	r1, #0
   27cce:	f003 fc06 	bl	2b4de <memset>
	buffer->max_usage = 0;
   27cd2:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
   27cd4:	68eb      	ldr	r3, [r5, #12]
   27cd6:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   27cd8:	68ab      	ldr	r3, [r5, #8]
   27cda:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   27cdc:	682b      	ldr	r3, [r5, #0]
   27cde:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   27ce0:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
   27ce2:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   27ce4:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
   27ce6:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   27ce8:	b123      	cbz	r3, 27cf4 <mpsc_pbuf_init+0x30>
   27cea:	1e59      	subs	r1, r3, #1
   27cec:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   27cee:	bf08      	it	eq
   27cf0:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   27cf4:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   27cf6:	2201      	movs	r2, #1
   27cf8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   27cfc:	2100      	movs	r1, #0
}
   27cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27d02:	f003 b809 	b.w	2ad18 <z_impl_k_sem_init>

00027d06 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   27d06:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   27d0a:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   27d0c:	6a03      	ldr	r3, [r0, #32]
{
   27d0e:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
   27d10:	3b01      	subs	r3, #1
   27d12:	428b      	cmp	r3, r1
{
   27d14:	460e      	mov	r6, r1
   27d16:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
   27d18:	d351      	bcc.n	27dbe <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
   27d1a:	2500      	movs	r5, #0
	__asm__ volatile(
   27d1c:	f04f 0320 	mov.w	r3, #32
   27d20:	f3ef 8911 	mrs	r9, BASEPRI
   27d24:	f383 8812 	msr	BASEPRI_MAX, r3
   27d28:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
   27d2c:	4620      	mov	r0, r4
   27d2e:	a901      	add	r1, sp, #4
   27d30:	f7ff ff1b 	bl	27b6a <free_space>

		if (free_wlen >= wlen) {
   27d34:	f8dd a004 	ldr.w	sl, [sp, #4]
   27d38:	45b2      	cmp	sl, r6
   27d3a:	d317      	bcc.n	27d6c <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   27d3c:	6822      	ldr	r2, [r4, #0]
			item =
   27d3e:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   27d40:	4620      	mov	r0, r4
			item->hdr.valid = 0;
   27d42:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
   27d46:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.valid = 0;
   27d4a:	f021 0103 	bic.w	r1, r1, #3
   27d4e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   27d52:	6821      	ldr	r1, [r4, #0]
   27d54:	4632      	mov	r2, r6
   27d56:	f7ff ff2a 	bl	27bae <idx_inc>
   27d5a:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   27d5c:	f389 8811 	msr	BASEPRI, r9
   27d60:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   27d64:	4628      	mov	r0, r5
   27d66:	b002      	add	sp, #8
   27d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
   27d6c:	b150      	cbz	r0, 27d84 <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
   27d6e:	4651      	mov	r1, sl
   27d70:	4620      	mov	r0, r4
   27d72:	f7ff ff2a 	bl	27bca <add_skip_item>
   27d76:	f389 8811 	msr	BASEPRI, r9
   27d7a:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   27d7e:	2d00      	cmp	r5, #0
   27d80:	d0cb      	beq.n	27d1a <mpsc_pbuf_alloc+0x14>
   27d82:	e033      	b.n	27dec <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   27d84:	ea57 0308 	orrs.w	r3, r7, r8
   27d88:	d020      	beq.n	27dcc <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
   27d8a:	f002 ff25 	bl	2abd8 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   27d8e:	b9e8      	cbnz	r0, 27dcc <mpsc_pbuf_alloc+0xc6>
   27d90:	f389 8811 	msr	BASEPRI, r9
   27d94:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   27d98:	463a      	mov	r2, r7
   27d9a:	4643      	mov	r3, r8
   27d9c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   27da0:	f7fd fba6 	bl	254f0 <z_impl_k_sem_take>
	__asm__ volatile(
   27da4:	f04f 0220 	mov.w	r2, #32
   27da8:	f3ef 8311 	mrs	r3, BASEPRI
   27dac:	f382 8812 	msr	BASEPRI_MAX, r2
   27db0:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   27db4:	b128      	cbz	r0, 27dc2 <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
   27db6:	f383 8811 	msr	BASEPRI, r3
   27dba:	f3bf 8f6f 	isb	sy
		return NULL;
   27dbe:	2500      	movs	r5, #0
   27dc0:	e7d0      	b.n	27d64 <mpsc_pbuf_alloc+0x5e>
   27dc2:	f383 8811 	msr	BASEPRI, r3
   27dc6:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   27dca:	e7d8      	b.n	27d7e <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   27dcc:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   27dce:	4651      	mov	r1, sl
   27dd0:	4620      	mov	r0, r4
   27dd2:	f10d 0303 	add.w	r3, sp, #3
   27dd6:	f3c2 0240 	ubfx	r2, r2, #1, #1
   27dda:	f7ff ff19 	bl	27c10 <drop_item_locked>
   27dde:	4605      	mov	r5, r0
   27de0:	f389 8811 	msr	BASEPRI, r9
   27de4:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   27de8:	2800      	cmp	r0, #0
   27dea:	d0e8      	beq.n	27dbe <mpsc_pbuf_alloc+0xb8>
   27dec:	f89d 3003 	ldrb.w	r3, [sp, #3]
   27df0:	2b00      	cmp	r3, #0
   27df2:	d093      	beq.n	27d1c <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
   27df4:	6963      	ldr	r3, [r4, #20]
   27df6:	2b00      	cmp	r3, #0
   27df8:	d08f      	beq.n	27d1a <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
   27dfa:	4629      	mov	r1, r5
   27dfc:	4620      	mov	r0, r4
   27dfe:	4798      	blx	r3
   27e00:	e78b      	b.n	27d1a <mpsc_pbuf_alloc+0x14>

00027e02 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   27e02:	b570      	push	{r4, r5, r6, lr}
   27e04:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   27e06:	6983      	ldr	r3, [r0, #24]
   27e08:	4608      	mov	r0, r1
{
   27e0a:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   27e0c:	4798      	blx	r3
   27e0e:	4602      	mov	r2, r0
	__asm__ volatile(
   27e10:	f04f 0320 	mov.w	r3, #32
   27e14:	f3ef 8611 	mrs	r6, BASEPRI
   27e18:	f383 8812 	msr	BASEPRI_MAX, r3
   27e1c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   27e20:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27e22:	4620      	mov	r0, r4
	item->hdr.valid = 1;
   27e24:	f043 0301 	orr.w	r3, r3, #1
   27e28:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27e2a:	6861      	ldr	r1, [r4, #4]
   27e2c:	f7ff febf 	bl	27bae <idx_inc>
   27e30:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   27e32:	4620      	mov	r0, r4
   27e34:	f7ff fedf 	bl	27bf6 <max_utilization_update>
	__asm__ volatile(
   27e38:	f386 8811 	msr	BASEPRI, r6
   27e3c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   27e40:	bd70      	pop	{r4, r5, r6, pc}

00027e42 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   27e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27e44:	4604      	mov	r4, r0
	__asm__ volatile(
   27e46:	f04f 0320 	mov.w	r3, #32
   27e4a:	f3ef 8611 	mrs	r6, BASEPRI
   27e4e:	f383 8812 	msr	BASEPRI_MAX, r3
   27e52:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   27e56:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   27e5a:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   27e5c:	bf88      	it	hi
   27e5e:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   27e60:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
   27e62:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   27e64:	b132      	cbz	r2, 27e74 <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
   27e66:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
   27e6a:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   27e6e:	f012 0003 	ands.w	r0, r2, #3
   27e72:	d105      	bne.n	27e80 <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
   27e74:	f386 8811 	msr	BASEPRI, r6
   27e78:	f3bf 8f6f 	isb	sy
			item = NULL;
   27e7c:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   27e7e:	e02e      	b.n	27ede <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
   27e80:	2802      	cmp	r0, #2
   27e82:	d103      	bne.n	27e8c <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
   27e84:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   27e88:	08ad      	lsrs	r5, r5, #2
   27e8a:	d105      	bne.n	27e98 <mpsc_pbuf_claim+0x56>
   27e8c:	07d0      	lsls	r0, r2, #31
   27e8e:	d414      	bmi.n	27eba <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
   27e90:	4638      	mov	r0, r7
   27e92:	69a3      	ldr	r3, [r4, #24]
   27e94:	4798      	blx	r3
   27e96:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   27e98:	68a1      	ldr	r1, [r4, #8]
   27e9a:	462a      	mov	r2, r5
   27e9c:	4620      	mov	r0, r4
   27e9e:	f7ff fe86 	bl	27bae <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   27ea2:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   27ea4:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   27ea6:	462a      	mov	r2, r5
   27ea8:	4620      	mov	r0, r4
   27eaa:	f7ff fe80 	bl	27bae <idx_inc>
				buffer->rd_idx =
   27eae:	60e0      	str	r0, [r4, #12]
   27eb0:	f386 8811 	msr	BASEPRI, r6
   27eb4:	f3bf 8f6f 	isb	sy
	} while (cont);
   27eb8:	e7c5      	b.n	27e46 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   27eba:	f042 0202 	orr.w	r2, r2, #2
   27ebe:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   27ec2:	69a3      	ldr	r3, [r4, #24]
   27ec4:	4638      	mov	r0, r7
   27ec6:	68a5      	ldr	r5, [r4, #8]
   27ec8:	4798      	blx	r3
   27eca:	4629      	mov	r1, r5
   27ecc:	4602      	mov	r2, r0
   27ece:	4620      	mov	r0, r4
   27ed0:	f7ff fe6d 	bl	27bae <idx_inc>
				buffer->tmp_rd_idx =
   27ed4:	60a0      	str	r0, [r4, #8]
   27ed6:	f386 8811 	msr	BASEPRI, r6
   27eda:	f3bf 8f6f 	isb	sy
}
   27ede:	4638      	mov	r0, r7
   27ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027ee2 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   27ee2:	b570      	push	{r4, r5, r6, lr}
   27ee4:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   27ee6:	6983      	ldr	r3, [r0, #24]
   27ee8:	4608      	mov	r0, r1
{
   27eea:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   27eec:	4798      	blx	r3
   27eee:	4602      	mov	r2, r0
	__asm__ volatile(
   27ef0:	f04f 0320 	mov.w	r3, #32
   27ef4:	f3ef 8611 	mrs	r6, BASEPRI
   27ef8:	f383 8812 	msr	BASEPRI_MAX, r3
   27efc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   27f00:	782b      	ldrb	r3, [r5, #0]
   27f02:	f36f 0300 	bfc	r3, #0, #1
   27f06:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   27f08:	6923      	ldr	r3, [r4, #16]
   27f0a:	079b      	lsls	r3, r3, #30
   27f0c:	d505      	bpl.n	27f1a <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   27f0e:	68e1      	ldr	r1, [r4, #12]
   27f10:	69e3      	ldr	r3, [r4, #28]
   27f12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   27f16:	429d      	cmp	r5, r3
   27f18:	d112      	bne.n	27f40 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   27f1a:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   27f1c:	4620      	mov	r0, r4
		witem->hdr.busy = 0;
   27f1e:	f36f 0341 	bfc	r3, #1, #1
   27f22:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   27f24:	68e1      	ldr	r1, [r4, #12]
   27f26:	f7ff fe42 	bl	27bae <idx_inc>
   27f2a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   27f2c:	f386 8811 	msr	BASEPRI, r6
   27f30:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   27f34:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   27f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27f3c:	f7fd bab2 	b.w	254a4 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   27f40:	682b      	ldr	r3, [r5, #0]
   27f42:	f360 039f 	bfi	r3, r0, #2, #30
   27f46:	602b      	str	r3, [r5, #0]
   27f48:	e7f0      	b.n	27f2c <mpsc_pbuf_free+0x4a>

00027f4a <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   27f4a:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   27f4e:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   27f50:	bf88      	it	hi
   27f52:	6a02      	ldrhi	r2, [r0, #32]
   27f54:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   27f56:	1e18      	subs	r0, r3, #0
   27f58:	bf18      	it	ne
   27f5a:	2001      	movne	r0, #1
   27f5c:	4770      	bx	lr

00027f5e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   27f5e:	4770      	bx	lr

00027f60 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   27f60:	2806      	cmp	r0, #6
   27f62:	d108      	bne.n	27f76 <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   27f64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   27f68:	2201      	movs	r2, #1
   27f6a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   27f6e:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   27f72:	bf20      	wfe
    while (true)
   27f74:	e7fd      	b.n	27f72 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   27f76:	4770      	bx	lr

00027f78 <pm_state_exit_post_ops>:
   27f78:	2300      	movs	r3, #0
   27f7a:	f383 8811 	msr	BASEPRI, r3
   27f7e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   27f82:	4770      	bx	lr

00027f84 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   27f84:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   27f86:	075b      	lsls	r3, r3, #29
   27f88:	d40b      	bmi.n	27fa2 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   27f8a:	6803      	ldr	r3, [r0, #0]
   27f8c:	8842      	ldrh	r2, [r0, #2]
   27f8e:	f3c3 2349 	ubfx	r3, r3, #9, #10
   27f92:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   27f96:	1898      	adds	r0, r3, r2
   27f98:	3017      	adds	r0, #23
   27f9a:	f020 0007 	bic.w	r0, r0, #7
   27f9e:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   27fa0:	4770      	bx	lr
	return 0;
   27fa2:	2000      	movs	r0, #0
}
   27fa4:	4770      	bx	lr

00027fa6 <dummy_timestamp>:
}
   27fa6:	2000      	movs	r0, #0
   27fa8:	4770      	bx	lr

00027faa <default_get_timestamp>:
   27faa:	f001 ba8a 	b.w	294c2 <sys_clock_cycle_get_32>

00027fae <atomic_inc>:
{
   27fae:	4603      	mov	r3, r0
}
   27fb0:	e8d3 0fef 	ldaex	r0, [r3]
   27fb4:	1c42      	adds	r2, r0, #1
   27fb6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   27fba:	2900      	cmp	r1, #0
   27fbc:	d1f8      	bne.n	27fb0 <atomic_inc+0x2>
   27fbe:	4770      	bx	lr

00027fc0 <z_log_vprintk>:
{
   27fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   27fc2:	2300      	movs	r3, #0
   27fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   27fc8:	461a      	mov	r2, r3
   27fca:	4619      	mov	r1, r3
   27fcc:	4618      	mov	r0, r3
   27fce:	e9cd 3300 	strd	r3, r3, [sp]
   27fd2:	f7f3 fa05 	bl	1b3e0 <z_impl_z_log_msg_runtime_vcreate>
}
   27fd6:	b005      	add	sp, #20
   27fd8:	f85d fb04 	ldr.w	pc, [sp], #4

00027fdc <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   27fdc:	2001      	movs	r0, #1
   27fde:	f7f2 bff7 	b.w	1afd0 <z_log_dropped>

00027fe2 <z_log_get_tag>:
}
   27fe2:	2000      	movs	r0, #0
   27fe4:	4770      	bx	lr

00027fe6 <z_cbprintf_cpy>:
{
   27fe6:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   27fe8:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   27fec:	1b9b      	subs	r3, r3, r6
   27fee:	428b      	cmp	r3, r1
{
   27ff0:	460c      	mov	r4, r1
   27ff2:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   27ff4:	d30a      	bcc.n	2800c <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   27ff6:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27ff8:	460a      	mov	r2, r1
   27ffa:	4601      	mov	r1, r0
   27ffc:	1998      	adds	r0, r3, r6
   27ffe:	f003 fa61 	bl	2b4c4 <memcpy>
	return len;
   28002:	4620      	mov	r0, r4
	desc->off += len;
   28004:	68ab      	ldr	r3, [r5, #8]
   28006:	4423      	add	r3, r4
   28008:	60ab      	str	r3, [r5, #8]
}
   2800a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2800c:	f06f 001b 	mvn.w	r0, #27
   28010:	e7fb      	b.n	2800a <z_cbprintf_cpy+0x24>

00028012 <z_log_msg_finalize>:
{
   28012:	b570      	push	{r4, r5, r6, lr}
   28014:	460e      	mov	r6, r1
   28016:	4615      	mov	r5, r2
   28018:	4619      	mov	r1, r3
	if (!msg) {
   2801a:	4604      	mov	r4, r0
   2801c:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   28020:	b918      	cbnz	r0, 2802a <z_log_msg_finalize+0x18>
}
   28022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   28026:	f7f2 bfd3 	b.w	1afd0 <z_log_dropped>
	if (data) {
   2802a:	b12b      	cbz	r3, 28038 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   2802c:	3010      	adds	r0, #16
   2802e:	f3c5 2349 	ubfx	r3, r5, #9, #10
   28032:	4418      	add	r0, r3
   28034:	f003 fa46 	bl	2b4c4 <memcpy>
	msg->hdr.source = source;
   28038:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2803c:	4620      	mov	r0, r4
}
   2803e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   28042:	f7f3 b945 	b.w	1b2d0 <z_log_msg_commit>

00028046 <buffer_write>:
{
   28046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28048:	4606      	mov	r6, r0
   2804a:	460d      	mov	r5, r1
   2804c:	4614      	mov	r4, r2
   2804e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   28050:	4621      	mov	r1, r4
   28052:	4628      	mov	r0, r5
   28054:	463a      	mov	r2, r7
   28056:	47b0      	blx	r6
	} while (len != 0);
   28058:	1a24      	subs	r4, r4, r0
		buf += processed;
   2805a:	4405      	add	r5, r0
	} while (len != 0);
   2805c:	d1f8      	bne.n	28050 <buffer_write+0xa>
}
   2805e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028060 <cbvprintf>:
{
   28060:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   28062:	2400      	movs	r4, #0
   28064:	9400      	str	r4, [sp, #0]
   28066:	f7f2 fb1d 	bl	1a6a4 <z_cbvprintf_impl>
}
   2806a:	b002      	add	sp, #8
   2806c:	bd10      	pop	{r4, pc}

0002806e <log_output_flush>:
{
   2806e:	b510      	push	{r4, lr}
		     output->control_block->offset,
   28070:	6842      	ldr	r2, [r0, #4]
{
   28072:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   28074:	e9d2 2300 	ldrd	r2, r3, [r2]
   28078:	6881      	ldr	r1, [r0, #8]
   2807a:	6800      	ldr	r0, [r0, #0]
   2807c:	f7ff ffe3 	bl	28046 <buffer_write>
	output->control_block->offset = 0;
   28080:	2200      	movs	r2, #0
   28082:	6863      	ldr	r3, [r4, #4]
   28084:	601a      	str	r2, [r3, #0]
}
   28086:	bd10      	pop	{r4, pc}

00028088 <out_func>:
{
   28088:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   2808a:	684b      	ldr	r3, [r1, #4]
{
   2808c:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   2808e:	681a      	ldr	r2, [r3, #0]
   28090:	68cb      	ldr	r3, [r1, #12]
{
   28092:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   28094:	429a      	cmp	r2, r3
   28096:	d102      	bne.n	2809e <out_func+0x16>
		log_output_flush(out_ctx);
   28098:	4608      	mov	r0, r1
   2809a:	f7ff ffe8 	bl	2806e <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2809e:	6863      	ldr	r3, [r4, #4]
   280a0:	e8d3 2fef 	ldaex	r2, [r3]
   280a4:	1c51      	adds	r1, r2, #1
   280a6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   280aa:	2800      	cmp	r0, #0
   280ac:	d1f8      	bne.n	280a0 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   280ae:	68a3      	ldr	r3, [r4, #8]
}
   280b0:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   280b2:	549d      	strb	r5, [r3, r2]
}
   280b4:	bd38      	pop	{r3, r4, r5, pc}

000280b6 <cr_out_func>:
	if (c == '\n') {
   280b6:	280a      	cmp	r0, #10
{
   280b8:	b538      	push	{r3, r4, r5, lr}
   280ba:	4604      	mov	r4, r0
   280bc:	460d      	mov	r5, r1
	if (c == '\n') {
   280be:	d102      	bne.n	280c6 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   280c0:	200d      	movs	r0, #13
   280c2:	f7ff ffe1 	bl	28088 <out_func>
	out_func(c, ctx);
   280c6:	4629      	mov	r1, r5
   280c8:	4620      	mov	r0, r4
   280ca:	f7ff ffdd 	bl	28088 <out_func>
}
   280ce:	2000      	movs	r0, #0
   280d0:	bd38      	pop	{r3, r4, r5, pc}

000280d2 <log_backend_uart_init>:
}
   280d2:	4770      	bx	lr

000280d4 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   280d4:	f7f3 bd36 	b.w	1bb44 <socket_offload_getaddrinfo>

000280d8 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   280d8:	f7f3 bd3e 	b.w	1bb58 <socket_offload_freeaddrinfo>

000280dc <z_fdtable_call_ioctl>:
{
   280dc:	b40c      	push	{r2, r3}
   280de:	4603      	mov	r3, r0
   280e0:	b507      	push	{r0, r1, r2, lr}
   280e2:	aa04      	add	r2, sp, #16
   280e4:	4608      	mov	r0, r1
   280e6:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   280ea:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   280ec:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   280ee:	4798      	blx	r3
}
   280f0:	b003      	add	sp, #12
   280f2:	f85d eb04 	ldr.w	lr, [sp], #4
   280f6:	b002      	add	sp, #8
   280f8:	4770      	bx	lr

000280fa <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   280fa:	f7fd b8e9 	b.w	252d0 <z_impl_k_mutex_lock>

000280fe <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   280fe:	f7fd b961 	b.w	253c4 <z_impl_k_mutex_unlock>

00028102 <z_impl_zsock_close>:
{
   28102:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   28104:	4669      	mov	r1, sp
   28106:	aa01      	add	r2, sp, #4
{
   28108:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   2810a:	f7f2 f8b9 	bl	1a280 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   2810e:	4604      	mov	r4, r0
   28110:	b940      	cbnz	r0, 28124 <z_impl_zsock_close+0x22>
		errno = EBADF;
   28112:	f000 f97c 	bl	2840e <__errno>
   28116:	2309      	movs	r3, #9
		return -1;
   28118:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   2811c:	6003      	str	r3, [r0, #0]
}
   2811e:	4620      	mov	r0, r4
   28120:	b003      	add	sp, #12
   28122:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   28124:	f04f 32ff 	mov.w	r2, #4294967295
   28128:	9801      	ldr	r0, [sp, #4]
   2812a:	f04f 33ff 	mov.w	r3, #4294967295
   2812e:	f7ff ffe4 	bl	280fa <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->fd_vtable.close(ctx);
   28132:	9b00      	ldr	r3, [sp, #0]
   28134:	4620      	mov	r0, r4
   28136:	689b      	ldr	r3, [r3, #8]
   28138:	4798      	blx	r3
   2813a:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   2813c:	9801      	ldr	r0, [sp, #4]
   2813e:	f7ff ffde 	bl	280fe <k_mutex_unlock.isra.0>
	z_free_fd(sock);
   28142:	4628      	mov	r0, r5
   28144:	f7f2 f904 	bl	1a350 <z_free_fd>
	return ret;
   28148:	e7e9      	b.n	2811e <z_impl_zsock_close+0x1c>

0002814a <z_impl_zsock_connect>:
{
   2814a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2814c:	460d      	mov	r5, r1
   2814e:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   28150:	4669      	mov	r1, sp
   28152:	aa01      	add	r2, sp, #4
   28154:	f7f2 f894 	bl	1a280 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   28158:	4604      	mov	r4, r0
   2815a:	b940      	cbnz	r0, 2816e <z_impl_zsock_connect+0x24>
   2815c:	f000 f957 	bl	2840e <__errno>
   28160:	2309      	movs	r3, #9
   28162:	f04f 34ff 	mov.w	r4, #4294967295
   28166:	6003      	str	r3, [r0, #0]
}
   28168:	4620      	mov	r0, r4
   2816a:	b002      	add	sp, #8
   2816c:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   2816e:	9b00      	ldr	r3, [sp, #0]
   28170:	699b      	ldr	r3, [r3, #24]
   28172:	b91b      	cbnz	r3, 2817c <z_impl_zsock_connect+0x32>
   28174:	f000 f94b 	bl	2840e <__errno>
   28178:	235f      	movs	r3, #95	; 0x5f
   2817a:	e7f2      	b.n	28162 <z_impl_zsock_connect+0x18>
   2817c:	9801      	ldr	r0, [sp, #4]
   2817e:	f04f 32ff 	mov.w	r2, #4294967295
   28182:	f04f 33ff 	mov.w	r3, #4294967295
   28186:	f7ff ffb8 	bl	280fa <k_mutex_lock.constprop.0.isra.0>
   2818a:	9b00      	ldr	r3, [sp, #0]
   2818c:	4632      	mov	r2, r6
   2818e:	4629      	mov	r1, r5
   28190:	4620      	mov	r0, r4
   28192:	699b      	ldr	r3, [r3, #24]
   28194:	4798      	blx	r3
   28196:	4604      	mov	r4, r0
   28198:	9801      	ldr	r0, [sp, #4]
   2819a:	f7ff ffb0 	bl	280fe <k_mutex_unlock.isra.0>
   2819e:	e7e3      	b.n	28168 <z_impl_zsock_connect+0x1e>

000281a0 <z_impl_zsock_sendto>:
{
   281a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   281a4:	460d      	mov	r5, r1
   281a6:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   281a8:	a902      	add	r1, sp, #8
   281aa:	aa03      	add	r2, sp, #12
{
   281ac:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   281ae:	f7f2 f867 	bl	1a280 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   281b2:	4604      	mov	r4, r0
   281b4:	b948      	cbnz	r0, 281ca <z_impl_zsock_sendto+0x2a>
   281b6:	f000 f92a 	bl	2840e <__errno>
   281ba:	2309      	movs	r3, #9
   281bc:	f04f 34ff 	mov.w	r4, #4294967295
   281c0:	6003      	str	r3, [r0, #0]
}
   281c2:	4620      	mov	r0, r4
   281c4:	b004      	add	sp, #16
   281c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   281ca:	9b02      	ldr	r3, [sp, #8]
   281cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   281ce:	b91b      	cbnz	r3, 281d8 <z_impl_zsock_sendto+0x38>
   281d0:	f000 f91d 	bl	2840e <__errno>
   281d4:	235f      	movs	r3, #95	; 0x5f
   281d6:	e7f1      	b.n	281bc <z_impl_zsock_sendto+0x1c>
   281d8:	9803      	ldr	r0, [sp, #12]
   281da:	f04f 32ff 	mov.w	r2, #4294967295
   281de:	f04f 33ff 	mov.w	r3, #4294967295
   281e2:	f7ff ff8a 	bl	280fa <k_mutex_lock.constprop.0.isra.0>
   281e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   281e8:	4632      	mov	r2, r6
   281ea:	9301      	str	r3, [sp, #4]
   281ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   281ee:	4629      	mov	r1, r5
   281f0:	9300      	str	r3, [sp, #0]
   281f2:	9b02      	ldr	r3, [sp, #8]
   281f4:	4620      	mov	r0, r4
   281f6:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   281fa:	463b      	mov	r3, r7
   281fc:	47c0      	blx	r8
   281fe:	4604      	mov	r4, r0
   28200:	9803      	ldr	r0, [sp, #12]
   28202:	f7ff ff7c 	bl	280fe <k_mutex_unlock.isra.0>
   28206:	e7dc      	b.n	281c2 <z_impl_zsock_sendto+0x22>

00028208 <z_impl_zsock_sendmsg>:
{
   28208:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2820a:	460d      	mov	r5, r1
   2820c:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2820e:	4669      	mov	r1, sp
   28210:	aa01      	add	r2, sp, #4
   28212:	f7f2 f835 	bl	1a280 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   28216:	4604      	mov	r4, r0
   28218:	b940      	cbnz	r0, 2822c <z_impl_zsock_sendmsg+0x24>
   2821a:	f000 f8f8 	bl	2840e <__errno>
   2821e:	2309      	movs	r3, #9
   28220:	f04f 34ff 	mov.w	r4, #4294967295
   28224:	6003      	str	r3, [r0, #0]
}
   28226:	4620      	mov	r0, r4
   28228:	b002      	add	sp, #8
   2822a:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2822c:	9b00      	ldr	r3, [sp, #0]
   2822e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   28230:	b91b      	cbnz	r3, 2823a <z_impl_zsock_sendmsg+0x32>
   28232:	f000 f8ec 	bl	2840e <__errno>
   28236:	235f      	movs	r3, #95	; 0x5f
   28238:	e7f2      	b.n	28220 <z_impl_zsock_sendmsg+0x18>
   2823a:	9801      	ldr	r0, [sp, #4]
   2823c:	f04f 32ff 	mov.w	r2, #4294967295
   28240:	f04f 33ff 	mov.w	r3, #4294967295
   28244:	f7ff ff59 	bl	280fa <k_mutex_lock.constprop.0.isra.0>
   28248:	9b00      	ldr	r3, [sp, #0]
   2824a:	4632      	mov	r2, r6
   2824c:	4629      	mov	r1, r5
   2824e:	4620      	mov	r0, r4
   28250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   28252:	4798      	blx	r3
   28254:	4604      	mov	r4, r0
   28256:	9801      	ldr	r0, [sp, #4]
   28258:	f7ff ff51 	bl	280fe <k_mutex_unlock.isra.0>
   2825c:	e7e3      	b.n	28226 <z_impl_zsock_sendmsg+0x1e>

0002825e <z_impl_zsock_recvfrom>:
{
   2825e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   28262:	460d      	mov	r5, r1
   28264:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   28266:	a902      	add	r1, sp, #8
   28268:	aa03      	add	r2, sp, #12
{
   2826a:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2826c:	f7f2 f808 	bl	1a280 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   28270:	4604      	mov	r4, r0
   28272:	b948      	cbnz	r0, 28288 <z_impl_zsock_recvfrom+0x2a>
   28274:	f000 f8cb 	bl	2840e <__errno>
   28278:	2309      	movs	r3, #9
   2827a:	f04f 34ff 	mov.w	r4, #4294967295
   2827e:	6003      	str	r3, [r0, #0]
}
   28280:	4620      	mov	r0, r4
   28282:	b004      	add	sp, #16
   28284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   28288:	9b02      	ldr	r3, [sp, #8]
   2828a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2828c:	b91b      	cbnz	r3, 28296 <z_impl_zsock_recvfrom+0x38>
   2828e:	f000 f8be 	bl	2840e <__errno>
   28292:	235f      	movs	r3, #95	; 0x5f
   28294:	e7f1      	b.n	2827a <z_impl_zsock_recvfrom+0x1c>
   28296:	9803      	ldr	r0, [sp, #12]
   28298:	f04f 32ff 	mov.w	r2, #4294967295
   2829c:	f04f 33ff 	mov.w	r3, #4294967295
   282a0:	f7ff ff2b 	bl	280fa <k_mutex_lock.constprop.0.isra.0>
   282a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   282a6:	4632      	mov	r2, r6
   282a8:	9301      	str	r3, [sp, #4]
   282aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   282ac:	4629      	mov	r1, r5
   282ae:	9300      	str	r3, [sp, #0]
   282b0:	9b02      	ldr	r3, [sp, #8]
   282b2:	4620      	mov	r0, r4
   282b4:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   282b8:	463b      	mov	r3, r7
   282ba:	47c0      	blx	r8
   282bc:	4604      	mov	r4, r0
   282be:	9803      	ldr	r0, [sp, #12]
   282c0:	f7ff ff1d 	bl	280fe <k_mutex_unlock.isra.0>
   282c4:	e7dc      	b.n	28280 <z_impl_zsock_recvfrom+0x22>

000282c6 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   282c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   282ca:	1e14      	subs	r4, r2, #0
{
   282cc:	4605      	mov	r5, r0
   282ce:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   282d0:	db13      	blt.n	282fa <z_impl_zsock_poll+0x34>
   282d2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   282d6:	f240 30e7 	movw	r0, #999	; 0x3e7
   282da:	2100      	movs	r1, #0
   282dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   282e0:	2300      	movs	r3, #0
   282e2:	fbc4 0107 	smlal	r0, r1, r4, r7
   282e6:	f7f0 fd0f 	bl	18d08 <__aeabi_uldivmod>
   282ea:	4602      	mov	r2, r0
   282ec:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   282ee:	4631      	mov	r1, r6
   282f0:	4628      	mov	r0, r5
}
   282f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   282f6:	f7f3 bb0d 	b.w	1b914 <zsock_poll_internal>
		timeout = K_FOREVER;
   282fa:	f04f 32ff 	mov.w	r2, #4294967295
   282fe:	4613      	mov	r3, r2
   28300:	e7f5      	b.n	282ee <z_impl_zsock_poll+0x28>

00028302 <adp536x_charger_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_CURRENT_SET,
   28302:	f000 021f 	and.w	r2, r0, #31
   28306:	211f      	movs	r1, #31
   28308:	2004      	movs	r0, #4
   2830a:	f7f3 bd77 	b.w	1bdfc <adp536x_reg_write_mask>

0002830e <adp536x_vbus_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_VBUS_ILIM,
   2830e:	f000 0207 	and.w	r2, r0, #7
   28312:	2107      	movs	r1, #7
   28314:	2002      	movs	r0, #2
   28316:	f7f3 bd71 	b.w	1bdfc <adp536x_reg_write_mask>

0002831a <adp536x_charging_enable>:
{
   2831a:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_CHG_FUNC,
   2831c:	2101      	movs	r1, #1
   2831e:	2007      	movs	r0, #7
   28320:	f7f3 bd6c 	b.w	1bdfc <adp536x_reg_write_mask>

00028324 <adp536x_oc_chg_current_set>:
					ADP536X_BAT_OC_CHG_OC_CHG(value));
   28324:	0142      	lsls	r2, r0, #5
	return adp536x_reg_write_mask(ADP536X_BAT_OC_CHG,
   28326:	21e0      	movs	r1, #224	; 0xe0
   28328:	2015      	movs	r0, #21
   2832a:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   2832e:	f7f3 bd65 	b.w	1bdfc <adp536x_reg_write_mask>

00028332 <adp536x_buck_1v8_set>:
	return adp536x_reg_write_mask(ADP536X_BUCK_OUTPUT,
   28332:	2218      	movs	r2, #24
   28334:	213f      	movs	r1, #63	; 0x3f
   28336:	202a      	movs	r0, #42	; 0x2a
   28338:	f7f3 bd60 	b.w	1bdfc <adp536x_reg_write_mask>

0002833c <adp536x_buck_discharge_set>:
				ADP536X_BUCK_CFG_DISCHG_BUCK(enable));
   2833c:	0042      	lsls	r2, r0, #1
	return adp536x_reg_write_mask(ADP536X_BUCK_CFG,
   2833e:	2102      	movs	r1, #2
   28340:	2029      	movs	r0, #41	; 0x29
   28342:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   28346:	f7f3 bd59 	b.w	1bdfc <adp536x_reg_write_mask>

0002834a <adp536x_buckbst_3v3_set>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_OUTPUT,
   2834a:	2213      	movs	r2, #19
   2834c:	213f      	movs	r1, #63	; 0x3f
   2834e:	202c      	movs	r0, #44	; 0x2c
   28350:	f7f3 bd54 	b.w	1bdfc <adp536x_reg_write_mask>

00028354 <adp536x_buckbst_enable>:
{
   28354:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_BUCKBST_CFG,
   28356:	2101      	movs	r1, #1
   28358:	202b      	movs	r0, #43	; 0x2b
   2835a:	f7f3 bd4f 	b.w	1bdfc <adp536x_reg_write_mask>

0002835e <adp536x_fg_set_mode>:
int adp536x_fg_set_mode(enum adp536x_fg_enabled en, enum adp536x_fg_mode mode)
{
	return adp536x_reg_write_mask(
		ADP536X_FUEL_GAUGE_MODE,
		ADP536X_FUEL_GAUGE_MODE_FG_MODE_MSK | ADP536X_FUEL_GAUGE_EN_FG_MSK,
		ADP536X_FUEL_GAUGE_MODE_FG_MODE(mode) | ADP536X_FUEL_GAUGE_EN_FG(en));
   2835e:	0049      	lsls	r1, r1, #1
   28360:	f001 0102 	and.w	r1, r1, #2
	return adp536x_reg_write_mask(
   28364:	f000 0201 	and.w	r2, r0, #1
   28368:	430a      	orrs	r2, r1
   2836a:	2027      	movs	r0, #39	; 0x27
   2836c:	2103      	movs	r1, #3
   2836e:	f7f3 bd45 	b.w	1bdfc <adp536x_reg_write_mask>

00028372 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   28372:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   28374:	6800      	ldr	r0, [r0, #0]
   28376:	f7f3 bd97 	b.w	1bea8 <z_arm_fatal_error>

0002837a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2837a:	2100      	movs	r1, #0
   2837c:	2001      	movs	r0, #1
   2837e:	f7f3 bd93 	b.w	1bea8 <z_arm_fatal_error>

00028382 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   28382:	b508      	push	{r3, lr}
	handler();
   28384:	f7f3 fe3c 	bl	1c000 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   28388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2838c:	f7f3 bf06 	b.w	1c19c <z_arm_exc_exit>

00028390 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   28390:	6e83      	ldr	r3, [r0, #104]	; 0x68
   28392:	f383 880b 	msr	PSPLIM, r3
}
   28396:	4770      	bx	lr

00028398 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   28398:	2300      	movs	r3, #0
   2839a:	f7f2 bfcd 	b.w	1b338 <z_impl_z_log_msg_static_create>

0002839e <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2839e:	4770      	bx	lr

000283a0 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   283a0:	4770      	bx	lr

000283a2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   283a2:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   283a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   283aa:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   283ac:	bf08      	it	eq
   283ae:	f06f 0015 	mvneq.w	r0, #21
   283b2:	4770      	bx	lr

000283b4 <mpu_configure_region>:
{
   283b4:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   283b6:	890a      	ldrh	r2, [r1, #8]
   283b8:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   283ba:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   283bc:	684c      	ldr	r4, [r1, #4]
   283be:	f002 021f 	and.w	r2, r2, #31
{
   283c2:	b085      	sub	sp, #20
   283c4:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   283c8:	9300      	str	r3, [sp, #0]
   283ca:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   283ce:	f023 031f 	bic.w	r3, r3, #31
   283d2:	1e62      	subs	r2, r4, #1
   283d4:	4413      	add	r3, r2
   283d6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   283da:	280f      	cmp	r0, #15
   283dc:	9303      	str	r3, [sp, #12]
   283de:	d904      	bls.n	283ea <mpu_configure_region+0x36>
}
   283e0:	b005      	add	sp, #20
   283e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   283e6:	f7f4 baa7 	b.w	1c938 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   283ea:	4669      	mov	r1, sp
   283ec:	f7f4 fa8a 	bl	1c904 <region_init>
}
   283f0:	b005      	add	sp, #20
   283f2:	bd30      	pop	{r4, r5, pc}

000283f4 <malloc_prepare>:
}
   283f4:	2000      	movs	r0, #0
   283f6:	4770      	bx	lr

000283f8 <_stdout_hook_default>:
}
   283f8:	f04f 30ff 	mov.w	r0, #4294967295
   283fc:	4770      	bx	lr

000283fe <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   283fe:	f04f 32ff 	mov.w	r2, #4294967295
   28402:	f04f 33ff 	mov.w	r3, #4294967295
   28406:	f7fc bf63 	b.w	252d0 <z_impl_k_mutex_lock>

0002840a <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   2840a:	f7fc bfdb 	b.w	253c4 <z_impl_k_mutex_unlock>

0002840e <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2840e:	f7fc bd07 	b.w	24e20 <z_impl_z_errno>

00028412 <z_log_msg_static_create.constprop.0>:
   28412:	2300      	movs	r3, #0
   28414:	f7f2 bf90 	b.w	1b338 <z_impl_z_log_msg_static_create>

00028418 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   28418:	b508      	push	{r3, lr}
	net_if_init();
   2841a:	f7f4 fcd3 	bl	1cdc4 <net_if_init>
	net_if_post_init();
   2841e:	f7f4 fcf5 	bl	1ce0c <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   28422:	2000      	movs	r0, #0
   28424:	bd08      	pop	{r3, pc}

00028426 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   28426:	b110      	cbz	r0, 2842e <net_if_l2+0x8>
   28428:	6800      	ldr	r0, [r0, #0]
   2842a:	b100      	cbz	r0, 2842e <net_if_l2+0x8>
	return iface->if_dev->l2;
   2842c:	6840      	ldr	r0, [r0, #4]
}
   2842e:	4770      	bx	lr

00028430 <atomic_set_bit>:
   28430:	2301      	movs	r3, #1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   28432:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   28434:	f001 011f 	and.w	r1, r1, #31
   28438:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2843a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   2843e:	e8d0 2fef 	ldaex	r2, [r0]
   28442:	431a      	orrs	r2, r3
   28444:	e8c0 2fe1 	stlex	r1, r2, [r0]
   28448:	2900      	cmp	r1, #0
   2844a:	d1f8      	bne.n	2843e <atomic_set_bit+0xe>
}
   2844c:	4770      	bx	lr

0002844e <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2844e:	2301      	movs	r3, #1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28450:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   28452:	f001 011f 	and.w	r1, r1, #31
   28456:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28458:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2845a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   2845e:	e8d0 2fef 	ldaex	r2, [r0]
   28462:	401a      	ands	r2, r3
   28464:	e8c0 2fe1 	stlex	r1, r2, [r0]
   28468:	2900      	cmp	r1, #0
   2846a:	d1f8      	bne.n	2845e <atomic_clear_bit+0x10>
}
   2846c:	4770      	bx	lr

0002846e <net_if_flag_is_set>:
	if (iface == NULL) {
   2846e:	b130      	cbz	r0, 2847e <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28470:	6803      	ldr	r3, [r0, #0]
   28472:	330c      	adds	r3, #12
   28474:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28478:	4108      	asrs	r0, r1
   2847a:	f000 0001 	and.w	r0, r0, #1
}
   2847e:	4770      	bx	lr

00028480 <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   28480:	b510      	push	{r4, lr}
   28482:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   28484:	f7ff ffcf 	bl	28426 <net_if_l2>
   28488:	b128      	cbz	r0, 28496 <l2_flags_get.isra.0+0x16>
   2848a:	68c2      	ldr	r2, [r0, #12]
   2848c:	b11a      	cbz	r2, 28496 <l2_flags_get.isra.0+0x16>
}
   2848e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   28492:	4618      	mov	r0, r3
   28494:	4710      	bx	r2
}
   28496:	bd10      	pop	{r4, pc}

00028498 <update_operational_state>:
{
   28498:	b510      	push	{r4, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   2849a:	6803      	ldr	r3, [r0, #0]
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
   2849c:	2100      	movs	r1, #0
{
   2849e:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   284a0:	f893 2020 	ldrb.w	r2, [r3, #32]
   284a4:	f7ff ffe3 	bl	2846e <net_if_flag_is_set>
	if (!net_if_is_admin_up(iface)) {
   284a8:	b978      	cbnz	r0, 284ca <update_operational_state+0x32>
		iface->if_dev->oper_state = oper_state;
   284aa:	2102      	movs	r1, #2
   284ac:	6823      	ldr	r3, [r4, #0]
   284ae:	f883 1020 	strb.w	r1, [r3, #32]
	return iface->if_dev->oper_state;
   284b2:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   284b4:	f890 3020 	ldrb.w	r3, [r0, #32]
   284b8:	428b      	cmp	r3, r1
   284ba:	d12b      	bne.n	28514 <update_operational_state+0x7c>
		if (prev_state == NET_IF_OPER_UP) {
   284bc:	2a06      	cmp	r2, #6
   284be:	d129      	bne.n	28514 <update_operational_state+0x7c>
	atomic_clear_bit(iface->if_dev->flags, value);
   284c0:	2108      	movs	r1, #8
   284c2:	300c      	adds	r0, #12
   284c4:	f7ff ffc3 	bl	2844e <atomic_clear_bit>
	return (iface->if_dev->socket_offload != NULL);
   284c8:	e01c      	b.n	28504 <update_operational_state+0x6c>
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
   284ca:	2109      	movs	r1, #9
   284cc:	4620      	mov	r0, r4
   284ce:	f7ff ffce 	bl	2846e <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
   284d2:	2800      	cmp	r0, #0
   284d4:	d0e9      	beq.n	284aa <update_operational_state+0x12>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
   284d6:	210a      	movs	r1, #10
   284d8:	4620      	mov	r0, r4
   284da:	f7ff ffc8 	bl	2846e <net_if_flag_is_set>
		iface->if_dev->oper_state = oper_state;
   284de:	6821      	ldr	r1, [r4, #0]
   284e0:	f1c0 0306 	rsb	r3, r0, #6
   284e4:	b2db      	uxtb	r3, r3
   284e6:	f881 3020 	strb.w	r3, [r1, #32]
	return iface->if_dev->oper_state;
   284ea:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   284ec:	f890 1020 	ldrb.w	r1, [r0, #32]
   284f0:	4299      	cmp	r1, r3
   284f2:	d10f      	bne.n	28514 <update_operational_state+0x7c>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
   284f4:	2906      	cmp	r1, #6
   284f6:	d1e1      	bne.n	284bc <update_operational_state+0x24>
		if (prev_state != NET_IF_OPER_UP) {
   284f8:	2a06      	cmp	r2, #6
   284fa:	d00b      	beq.n	28514 <update_operational_state+0x7c>
	atomic_set_bit(iface->if_dev->flags, value);
   284fc:	2108      	movs	r1, #8
   284fe:	300c      	adds	r0, #12
   28500:	f7ff ff96 	bl	28430 <atomic_set_bit>
	return (iface->if_dev->socket_offload != NULL);
   28504:	6823      	ldr	r3, [r4, #0]
	if (!is_iface_offloaded(iface) &&
   28506:	69db      	ldr	r3, [r3, #28]
   28508:	b923      	cbnz	r3, 28514 <update_operational_state+0x7c>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   2850a:	4620      	mov	r0, r4
}
   2850c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   28510:	f7ff bfb6 	b.w	28480 <l2_flags_get.isra.0>
}
   28514:	bd10      	pop	{r4, pc}

00028516 <net_if_flag_test_and_set.isra.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28516:	2301      	movs	r3, #1
static inline bool net_if_flag_test_and_set(struct net_if *iface,
   28518:	b510      	push	{r4, lr}
   2851a:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2851e:	300c      	adds	r0, #12
   28520:	e8d0 3fef 	ldaex	r3, [r0]
   28524:	ea43 0201 	orr.w	r2, r3, r1
   28528:	e8c0 2fe4 	stlex	r4, r2, [r0]
   2852c:	2c00      	cmp	r4, #0
   2852e:	d1f7      	bne.n	28520 <net_if_flag_test_and_set.isra.0+0xa>
	return (old & mask) != 0;
   28530:	4219      	tst	r1, r3
}
   28532:	bf14      	ite	ne
   28534:	2001      	movne	r0, #1
   28536:	2000      	moveq	r0, #0
   28538:	bd10      	pop	{r4, pc}

0002853a <net_if_up>:
{
   2853a:	b538      	push	{r3, r4, r5, lr}
   2853c:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   2853e:	f04f 31ff 	mov.w	r1, #4294967295
   28542:	f04f 30ff 	mov.w	r0, #4294967295
   28546:	f7f4 fc2f 	bl	1cda8 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   2854a:	2100      	movs	r1, #0
   2854c:	4628      	mov	r0, r5
   2854e:	f7ff ff8e 	bl	2846e <net_if_flag_is_set>
   28552:	4604      	mov	r4, r0
   28554:	b9d0      	cbnz	r0, 2858c <net_if_up+0x52>
	return (iface->if_dev->socket_offload != NULL);
   28556:	682b      	ldr	r3, [r5, #0]
	if (is_iface_offloaded(iface)) {
   28558:	69db      	ldr	r3, [r3, #28]
   2855a:	b95b      	cbnz	r3, 28574 <net_if_up+0x3a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   2855c:	4628      	mov	r0, r5
   2855e:	f7ff ff62 	bl	28426 <net_if_l2>
   28562:	4604      	mov	r4, r0
   28564:	b130      	cbz	r0, 28574 <net_if_up+0x3a>
   28566:	6884      	ldr	r4, [r0, #8]
   28568:	b124      	cbz	r4, 28574 <net_if_up+0x3a>
	status = net_if_l2(iface)->enable(iface, true);
   2856a:	2101      	movs	r1, #1
   2856c:	4628      	mov	r0, r5
   2856e:	47a0      	blx	r4
	if (status < 0) {
   28570:	1e04      	subs	r4, r0, #0
   28572:	db07      	blt.n	28584 <net_if_up+0x4a>
	atomic_set_bit(iface->if_dev->flags, value);
   28574:	6828      	ldr	r0, [r5, #0]
   28576:	2100      	movs	r1, #0
   28578:	300c      	adds	r0, #12
   2857a:	f7ff ff59 	bl	28430 <atomic_set_bit>
	update_operational_state(iface);
   2857e:	4628      	mov	r0, r5
   28580:	f7ff ff8a 	bl	28498 <update_operational_state>
	k_mutex_unlock(&lock);
   28584:	f7f4 fc18 	bl	1cdb8 <k_mutex_unlock.constprop.0.isra.0>
}
   28588:	4620      	mov	r0, r4
   2858a:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
   2858c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   28590:	e7f8      	b.n	28584 <net_if_up+0x4a>

00028592 <net_byte_to_hex>:
{
   28592:	b510      	push	{r4, lr}
   28594:	4604      	mov	r4, r0
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   28596:	0908      	lsrs	r0, r1, #4
		if (i == 0 && !pad && !val) {
   28598:	b1b3      	cbz	r3, 285c8 <net_byte_to_hex+0x36>
		if (val < 10) {
   2859a:	2809      	cmp	r0, #9
   2859c:	d912      	bls.n	285c4 <net_byte_to_hex+0x32>
			*ptr++ = (char) (val - 10 + base);
   2859e:	f1a2 030a 	sub.w	r3, r2, #10
   285a2:	4418      	add	r0, r3
   285a4:	b2c0      	uxtb	r0, r0
   285a6:	f804 0b01 	strb.w	r0, [r4], #1
	*ptr = '\0';
   285aa:	2300      	movs	r3, #0
   285ac:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   285b0:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   285b2:	bf83      	ittte	hi
   285b4:	3a0a      	subhi	r2, #10
   285b6:	1889      	addhi	r1, r1, r2
   285b8:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   285ba:	3130      	addls	r1, #48	; 0x30
   285bc:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   285be:	7063      	strb	r3, [r4, #1]
			*ptr++ = (char) (val - 10 + base);
   285c0:	1c60      	adds	r0, r4, #1
}
   285c2:	bd10      	pop	{r4, pc}
			*ptr++ = (char) (val + '0');
   285c4:	3030      	adds	r0, #48	; 0x30
   285c6:	e7ee      	b.n	285a6 <net_byte_to_hex+0x14>
		if (i == 0 && !pad && !val) {
   285c8:	2800      	cmp	r0, #0
   285ca:	d1e6      	bne.n	2859a <net_byte_to_hex+0x8>
   285cc:	e7ed      	b.n	285aa <net_byte_to_hex+0x18>

000285ce <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	NET_DBG(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   285ce:	e9d0 3200 	ldrd	r3, r2, [r0]
   285d2:	1ad2      	subs	r2, r2, r3
   285d4:	2a01      	cmp	r2, #1
   285d6:	d90d      	bls.n	285f4 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   285d8:	1c5a      	adds	r2, r3, #1
   285da:	6002      	str	r2, [r0, #0]
   285dc:	781b      	ldrb	r3, [r3, #0]
   285de:	021b      	lsls	r3, r3, #8
   285e0:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   285e2:	6803      	ldr	r3, [r0, #0]
   285e4:	1c5a      	adds	r2, r3, #1
   285e6:	6002      	str	r2, [r0, #0]
   285e8:	781b      	ldrb	r3, [r3, #0]
   285ea:	880a      	ldrh	r2, [r1, #0]

	NET_DBG("<< val:%04x", *val);

	return 0;
   285ec:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   285ee:	4313      	orrs	r3, r2
   285f0:	800b      	strh	r3, [r1, #0]
	return 0;
   285f2:	4770      	bx	lr
		return -EINVAL;
   285f4:	f06f 0015 	mvn.w	r0, #21
}
   285f8:	4770      	bx	lr

000285fa <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   285fa:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   285fc:	e9d0 3400 	ldrd	r3, r4, [r0]
   28600:	429c      	cmp	r4, r3
   28602:	d020      	beq.n	28646 <fixed_header_decode+0x4c>
	*val = *(buf->cur++);
   28604:	1c5c      	adds	r4, r3, #1
   28606:	6004      	str	r4, [r0, #0]
   28608:	781b      	ldrb	r3, [r3, #0]
   2860a:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   2860c:	2300      	movs	r3, #0
   2860e:	6013      	str	r3, [r2, #0]
		if (buf->cur >= buf->end) {
   28610:	e9d0 1400 	ldrd	r1, r4, [r0]
   28614:	42a1      	cmp	r1, r4
   28616:	d219      	bcs.n	2864c <fixed_header_decode+0x52>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   28618:	7809      	ldrb	r1, [r1, #0]
   2861a:	6814      	ldr	r4, [r2, #0]
   2861c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
								<< shift;
   28620:	4099      	lsls	r1, r3
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   28622:	440c      	add	r4, r1
   28624:	6014      	str	r4, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   28626:	6801      	ldr	r1, [r0, #0]
   28628:	1c4c      	adds	r4, r1, #1
   2862a:	6004      	str	r4, [r0, #0]
   2862c:	f991 1000 	ldrsb.w	r1, [r1]
   28630:	2900      	cmp	r1, #0
   28632:	db05      	blt.n	28640 <fixed_header_decode+0x46>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   28634:	6813      	ldr	r3, [r2, #0]
   28636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   2863a:	d204      	bcs.n	28646 <fixed_header_decode+0x4c>
	return 0;
   2863c:	2000      	movs	r0, #0
   2863e:	e004      	b.n	2864a <fixed_header_decode+0x50>
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   28640:	3307      	adds	r3, #7
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   28642:	2b1c      	cmp	r3, #28
   28644:	d1e4      	bne.n	28610 <fixed_header_decode+0x16>
			return -EINVAL;
   28646:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   2864a:	bd10      	pop	{r4, pc}
			return -EAGAIN;
   2864c:	f06f 000a 	mvn.w	r0, #10
   28650:	e7fb      	b.n	2864a <fixed_header_decode+0x50>

00028652 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   28652:	b570      	push	{r4, r5, r6, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   28654:	e9d1 3600 	ldrd	r3, r6, [r1]
   28658:	429e      	cmp	r6, r3
   2865a:	d102      	bne.n	28662 <connect_ack_decode+0x10>
		return -EINVAL;
   2865c:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   28660:	bd70      	pop	{r4, r5, r6, pc}
	*val = *(buf->cur++);
   28662:	1c5d      	adds	r5, r3, #1
   28664:	600d      	str	r5, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   28666:	42ae      	cmp	r6, r5
	*val = *(buf->cur++);
   28668:	781c      	ldrb	r4, [r3, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2866a:	d0f7      	beq.n	2865c <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   2866c:	1c9d      	adds	r5, r3, #2
   2866e:	600d      	str	r5, [r1, #0]
   28670:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   28672:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
	return 0;
   28676:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   28678:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   2867a:	bf04      	itt	eq
   2867c:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   28680:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   28682:	7051      	strb	r1, [r2, #1]
	return 0;
   28684:	e7ec      	b.n	28660 <connect_ack_decode+0xe>

00028686 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   28686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28688:	461c      	mov	r4, r3
   2868a:	4615      	mov	r5, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2868c:	7da2      	ldrb	r2, [r4, #22]
   2868e:	0043      	lsls	r3, r0, #1
   28690:	f003 0302 	and.w	r3, r3, #2
   28694:	f022 0203 	bic.w	r2, r2, #3
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   28698:	f3c0 0041 	ubfx	r0, r0, #1, #2
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2869c:	4313      	orrs	r3, r2
{
   2869e:	460e      	mov	r6, r1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   286a0:	7220      	strb	r0, [r4, #8]
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   286a2:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   286a4:	4628      	mov	r0, r5
   286a6:	f10d 0106 	add.w	r1, sp, #6
   286aa:	f7ff ff90 	bl	285ce <unpack_uint16>
	if (err_code != 0) {
   286ae:	b9d8      	cbnz	r0, 286e8 <publish_decode+0x62>
	if ((buf->end - buf->cur) < utf8_strlen) {
   286b0:	e9d5 1200 	ldrd	r1, r2, [r5]
   286b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   286b8:	1a52      	subs	r2, r2, r1
   286ba:	429a      	cmp	r2, r3
   286bc:	db12      	blt.n	286e4 <publish_decode+0x5e>
	str->size = utf8_strlen;
   286be:	6063      	str	r3, [r4, #4]
	if (utf8_strlen) {
   286c0:	b173      	cbz	r3, 286e0 <publish_decode+0x5a>
		str->utf8 = buf->cur;
   286c2:	682a      	ldr	r2, [r5, #0]
   286c4:	6022      	str	r2, [r4, #0]
		buf->cur += utf8_strlen;
   286c6:	441a      	add	r2, r3
   286c8:	602a      	str	r2, [r5, #0]
		return err_code;
	}

	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);

	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   286ca:	7a23      	ldrb	r3, [r4, #8]
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   286cc:	6867      	ldr	r7, [r4, #4]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   286ce:	b96b      	cbnz	r3, 286ec <publish_decode+0x66>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   286d0:	1cbb      	adds	r3, r7, #2
		}

		var_header_length += sizeof(uint16_t);
	}

	if (var_length < var_header_length) {
   286d2:	429e      	cmp	r6, r3
   286d4:	d306      	bcc.n	286e4 <publish_decode+0x5e>
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
	}

	param->message.payload.data = NULL;
   286d6:	2000      	movs	r0, #0
	param->message.payload.len = var_length - var_header_length;
   286d8:	1af6      	subs	r6, r6, r3
	param->message.payload.data = NULL;
   286da:	60e0      	str	r0, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   286dc:	6126      	str	r6, [r4, #16]

	return 0;
   286de:	e003      	b.n	286e8 <publish_decode+0x62>
		str->utf8 = NULL;
   286e0:	6023      	str	r3, [r4, #0]
	if (err_code != 0) {
   286e2:	e7f2      	b.n	286ca <publish_decode+0x44>
		return -EINVAL;
   286e4:	f06f 0015 	mvn.w	r0, #21
}
   286e8:	b003      	add	sp, #12
   286ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err_code = unpack_uint16(buf, &param->message_id);
   286ec:	4628      	mov	r0, r5
   286ee:	f104 0114 	add.w	r1, r4, #20
   286f2:	f7ff ff6c 	bl	285ce <unpack_uint16>
		if (err_code != 0) {
   286f6:	2800      	cmp	r0, #0
   286f8:	d1f6      	bne.n	286e8 <publish_decode+0x62>
		var_header_length += sizeof(uint16_t);
   286fa:	1d3b      	adds	r3, r7, #4
   286fc:	e7e9      	b.n	286d2 <publish_decode+0x4c>

000286fe <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   286fe:	f7ff bf66 	b.w	285ce <unpack_uint16>

00028702 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
   28702:	f7ff bf64 	b.w	285ce <unpack_uint16>

00028706 <publish_release_decode>:
{
	return unpack_uint16(buf, &param->message_id);
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
   28706:	f7ff bf62 	b.w	285ce <unpack_uint16>

0002870a <publish_complete_decode>:
{
	return unpack_uint16(buf, &param->message_id);
}

int publish_complete_decode(struct buf_ctx *buf,
   2870a:	f7ff bf60 	b.w	285ce <unpack_uint16>

0002870e <subscribe_ack_decode>:
{
	return unpack_uint16(buf, &param->message_id);
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   2870e:	b538      	push	{r3, r4, r5, lr}
   28710:	4604      	mov	r4, r0
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   28712:	f7ff ff5c 	bl	285ce <unpack_uint16>
	if (err_code != 0) {
   28716:	b940      	cbnz	r0, 2872a <subscribe_ack_decode+0x1c>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   28718:	e9d4 2300 	ldrd	r2, r3, [r4]
   2871c:	1a9b      	subs	r3, r3, r2
	str->len = length;
   2871e:	608b      	str	r3, [r1, #8]
	if (length > 0) {
   28720:	b123      	cbz	r3, 2872c <subscribe_ack_decode+0x1e>
		str->data = buf->cur;
   28722:	6822      	ldr	r2, [r4, #0]
   28724:	604a      	str	r2, [r1, #4]
		buf->cur += length;
   28726:	441a      	add	r2, r3
   28728:	6022      	str	r2, [r4, #0]
}
   2872a:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   2872c:	6048      	str	r0, [r1, #4]
   2872e:	e7fc      	b.n	2872a <subscribe_ack_decode+0x1c>

00028730 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
   28730:	f7ff bf4d 	b.w	285ce <unpack_uint16>

00028734 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   28734:	e9d1 3200 	ldrd	r3, r2, [r1]
   28738:	1ad2      	subs	r2, r2, r3
   2873a:	2a01      	cmp	r2, #1
   2873c:	d909      	bls.n	28752 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   2873e:	1c5a      	adds	r2, r3, #1
   28740:	600a      	str	r2, [r1, #0]
   28742:	0a02      	lsrs	r2, r0, #8
   28744:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   28746:	680b      	ldr	r3, [r1, #0]
   28748:	1c5a      	adds	r2, r3, #1
   2874a:	600a      	str	r2, [r1, #0]
   2874c:	7018      	strb	r0, [r3, #0]
	return 0;
   2874e:	2000      	movs	r0, #0
   28750:	4770      	bx	lr
		return -ENOMEM;
   28752:	f06f 000b 	mvn.w	r0, #11
}
   28756:	4770      	bx	lr

00028758 <pack_utf8_str>:
{
   28758:	b538      	push	{r3, r4, r5, lr}
   2875a:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2875c:	e9d1 2300 	ldrd	r2, r3, [r1]
   28760:	6840      	ldr	r0, [r0, #4]
   28762:	1a9b      	subs	r3, r3, r2
   28764:	1c82      	adds	r2, r0, #2
   28766:	4293      	cmp	r3, r2
{
   28768:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2876a:	d30d      	bcc.n	28788 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   2876c:	b280      	uxth	r0, r0
   2876e:	f7ff ffe1 	bl	28734 <pack_uint16>
   28772:	e9d5 1200 	ldrd	r1, r2, [r5]
   28776:	6820      	ldr	r0, [r4, #0]
   28778:	f002 fea4 	bl	2b4c4 <memcpy>
	return 0;
   2877c:	2000      	movs	r0, #0
	buf->cur += str->size;
   2877e:	6823      	ldr	r3, [r4, #0]
   28780:	686a      	ldr	r2, [r5, #4]
   28782:	4413      	add	r3, r2
   28784:	6023      	str	r3, [r4, #0]
}
   28786:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   28788:	f06f 000b 	mvn.w	r0, #11
   2878c:	e7fb      	b.n	28786 <pack_utf8_str+0x2e>

0002878e <mqtt_encode_fixed_header>:
{
   2878e:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   28790:	6814      	ldr	r4, [r2, #0]
   28792:	1a64      	subs	r4, r4, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   28794:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   28798:	d227      	bcs.n	287ea <mqtt_encode_fixed_header+0x5c>
   2879a:	4625      	mov	r5, r4
   2879c:	2600      	movs	r6, #0
	} while (length > 0);
   2879e:	09ed      	lsrs	r5, r5, #7
   287a0:	4633      	mov	r3, r6
   287a2:	f106 0601 	add.w	r6, r6, #1
   287a6:	d1fa      	bne.n	2879e <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   287a8:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   287aa:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   287ac:	b2db      	uxtb	r3, r3
   287ae:	425d      	negs	r5, r3
   287b0:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   287b2:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   287b4:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   287b6:	bf1e      	ittt	ne
   287b8:	3301      	addne	r3, #1
   287ba:	6013      	strne	r3, [r2, #0]
   287bc:	5548      	strbne	r0, [r1, r5]
	return 0;
   287be:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   287c0:	6813      	ldr	r3, [r2, #0]
   287c2:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   287c6:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   287c8:	09c0      	lsrs	r0, r0, #7
   287ca:	6813      	ldr	r3, [r2, #0]
   287cc:	d105      	bne.n	287da <mqtt_encode_fixed_header+0x4c>
			buf->cur++;
   287ce:	3301      	adds	r3, #1
	buf->cur = buf->cur - fixed_header_length;
   287d0:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   287d2:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   287d4:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   287d6:	6053      	str	r3, [r2, #4]
}
   287d8:	bd70      	pop	{r4, r5, r6, pc}
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   287da:	7819      	ldrb	r1, [r3, #0]
   287dc:	f061 017f 	orn	r1, r1, #127	; 0x7f
   287e0:	7019      	strb	r1, [r3, #0]
			buf->cur++;
   287e2:	6813      	ldr	r3, [r2, #0]
   287e4:	3301      	adds	r3, #1
   287e6:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   287e8:	e7ea      	b.n	287c0 <mqtt_encode_fixed_header+0x32>
		return -EMSGSIZE;
   287ea:	f06f 0079 	mvn.w	r0, #121	; 0x79
   287ee:	e7f3      	b.n	287d8 <mqtt_encode_fixed_header+0x4a>

000287f0 <mqtt_message_id_only_enc>:
{
   287f0:	b570      	push	{r4, r5, r6, lr}
   287f2:	4606      	mov	r6, r0
   287f4:	4614      	mov	r4, r2
	if (message_id == 0U) {
   287f6:	4608      	mov	r0, r1
   287f8:	b169      	cbz	r1, 28816 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   287fa:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   287fc:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   287fe:	3505      	adds	r5, #5
   28800:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   28802:	f7ff ff97 	bl	28734 <pack_uint16>
	if (err_code != 0) {
   28806:	b940      	cbnz	r0, 2881a <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   28808:	4622      	mov	r2, r4
   2880a:	4629      	mov	r1, r5
   2880c:	4630      	mov	r0, r6
}
   2880e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   28812:	f7ff bfbc 	b.w	2878e <mqtt_encode_fixed_header>
		return -EINVAL;
   28816:	f06f 0015 	mvn.w	r0, #21
}
   2881a:	bd70      	pop	{r4, r5, r6, pc}

0002881c <publish_encode>:
{
   2881c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   28820:	7d87      	ldrb	r7, [r0, #22]
   28822:	7a04      	ldrb	r4, [r0, #8]
   28824:	f007 0801 	and.w	r8, r7, #1
{
   28828:	4605      	mov	r5, r0
   2882a:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2882c:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   28830:	b10c      	cbz	r4, 28836 <publish_encode+0x1a>
   28832:	8a83      	ldrh	r3, [r0, #20]
   28834:	b383      	cbz	r3, 28898 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   28836:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2883a:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2883c:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2883e:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   28840:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   28844:	f7ff ff88 	bl	28758 <pack_utf8_str>
	if (err_code != 0) {
   28848:	b9b0      	cbnz	r0, 28878 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   2884a:	7a2b      	ldrb	r3, [r5, #8]
   2884c:	b9b3      	cbnz	r3, 2887c <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2884e:	0060      	lsls	r0, r4, #1
   28850:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   28854:	692a      	ldr	r2, [r5, #16]
   28856:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2885a:	4338      	orrs	r0, r7
   2885c:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   28860:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   28862:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   28866:	464a      	mov	r2, r9
   28868:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   2886a:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   2886e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   28872:	f7ff ff8c 	bl	2878e <mqtt_encode_fixed_header>
	if (err_code != 0) {
   28876:	b140      	cbz	r0, 2888a <publish_encode+0x6e>
}
   28878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   2887c:	4649      	mov	r1, r9
   2887e:	8aa8      	ldrh	r0, [r5, #20]
   28880:	f7ff ff58 	bl	28734 <pack_uint16>
		if (err_code != 0) {
   28884:	2800      	cmp	r0, #0
   28886:	d0e2      	beq.n	2884e <publish_encode+0x32>
   28888:	e7f6      	b.n	28878 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   2888a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2888e:	692a      	ldr	r2, [r5, #16]
   28890:	1a9b      	subs	r3, r3, r2
   28892:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   28896:	e7ef      	b.n	28878 <publish_encode+0x5c>
		return -EINVAL;
   28898:	f06f 0015 	mvn.w	r0, #21
   2889c:	e7ec      	b.n	28878 <publish_encode+0x5c>

0002889e <publish_ack_encode>:
{
   2889e:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   288a0:	8801      	ldrh	r1, [r0, #0]
   288a2:	2040      	movs	r0, #64	; 0x40
   288a4:	f7ff bfa4 	b.w	287f0 <mqtt_message_id_only_enc>

000288a8 <subscribe_encode>:
{
   288a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (param->message_id == 0U) {
   288ac:	88c3      	ldrh	r3, [r0, #6]
{
   288ae:	4606      	mov	r6, r0
   288b0:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   288b2:	b33b      	cbz	r3, 28904 <subscribe_encode+0x5c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   288b4:	680f      	ldr	r7, [r1, #0]
   288b6:	3705      	adds	r7, #5
   288b8:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   288ba:	88c0      	ldrh	r0, [r0, #6]
   288bc:	f7ff ff3a 	bl	28734 <pack_uint16>
	if (err_code != 0) {
   288c0:	4604      	mov	r4, r0
   288c2:	bb08      	cbnz	r0, 28908 <subscribe_encode+0x60>
   288c4:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   288c8:	88b3      	ldrh	r3, [r6, #4]
   288ca:	42a3      	cmp	r3, r4
   288cc:	dc06      	bgt.n	288dc <subscribe_encode+0x34>
	return mqtt_encode_fixed_header(message_type, start, buf);
   288ce:	462a      	mov	r2, r5
   288d0:	4639      	mov	r1, r7
}
   288d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   288d6:	2082      	movs	r0, #130	; 0x82
   288d8:	f7ff bf59 	b.w	2878e <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   288dc:	fb08 f904 	mul.w	r9, r8, r4
   288e0:	6830      	ldr	r0, [r6, #0]
   288e2:	4629      	mov	r1, r5
   288e4:	4448      	add	r0, r9
   288e6:	f7ff ff37 	bl	28758 <pack_utf8_str>
		if (err_code != 0) {
   288ea:	b980      	cbnz	r0, 2890e <subscribe_encode+0x66>
		err_code = pack_uint8(param->list[i].qos, buf);
   288ec:	6833      	ldr	r3, [r6, #0]
   288ee:	444b      	add	r3, r9
   288f0:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   288f2:	e9d5 3100 	ldrd	r3, r1, [r5]
   288f6:	4299      	cmp	r1, r3
   288f8:	d00b      	beq.n	28912 <subscribe_encode+0x6a>
	*(buf->cur++) = val;
   288fa:	1c59      	adds	r1, r3, #1
   288fc:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   288fe:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   28900:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   28902:	e7e1      	b.n	288c8 <subscribe_encode+0x20>
		return -EINVAL;
   28904:	f06f 0415 	mvn.w	r4, #21
}
   28908:	4620      	mov	r0, r4
   2890a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   2890e:	4604      	mov	r4, r0
   28910:	e7fa      	b.n	28908 <subscribe_encode+0x60>
		return -ENOMEM;
   28912:	f06f 040b 	mvn.w	r4, #11
   28916:	e7f7      	b.n	28908 <subscribe_encode+0x60>

00028918 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   28918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2891a:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   2891c:	e9d1 3100 	ldrd	r3, r1, [r1]
   28920:	1acb      	subs	r3, r1, r3
   28922:	4293      	cmp	r3, r2
{
   28924:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   28926:	d301      	bcc.n	2892c <mqtt_read_message_chunk+0x14>
		return 0;
   28928:	2000      	movs	r0, #0
		NET_ERR("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   2892a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   2892c:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   2892e:	190f      	adds	r7, r1, r4
   28930:	e9d0 2313 	ldrd	r2, r3, [r0, #76]	; 0x4c
   28934:	4413      	add	r3, r2
   28936:	429f      	cmp	r7, r3
   28938:	d813      	bhi.n	28962 <mqtt_read_message_chunk+0x4a>
   2893a:	4297      	cmp	r7, r2
   2893c:	d311      	bcc.n	28962 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   2893e:	2300      	movs	r3, #0
   28940:	4622      	mov	r2, r4
   28942:	f7f4 fc21 	bl	1d188 <mqtt_transport_read>
	if (len < 0) {
   28946:	2800      	cmp	r0, #0
   28948:	dbef      	blt.n	2892a <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   2894a:	d00d      	beq.n	28968 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   2894c:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   2894e:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   28950:	4403      	add	r3, r0
   28952:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   28954:	686b      	ldr	r3, [r5, #4]
   28956:	4403      	add	r3, r0
   28958:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   2895a:	d2e5      	bcs.n	28928 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   2895c:	f06f 000a 	mvn.w	r0, #10
   28960:	e7e3      	b.n	2892a <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   28962:	f06f 000b 	mvn.w	r0, #11
   28966:	e7e0      	b.n	2892a <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   28968:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2896c:	e7dd      	b.n	2892a <mqtt_read_message_chunk+0x12>

0002896e <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   2896e:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   28970:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   28972:	69c2      	ldr	r2, [r0, #28]
{
   28974:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   28976:	9302      	str	r3, [sp, #8]
{
   28978:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2897a:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   2897c:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2897e:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   28980:	4628      	mov	r0, r5
   28982:	a902      	add	r1, sp, #8
   28984:	f7ff ffc8 	bl	28918 <mqtt_read_message_chunk>
		if (err_code < 0) {
   28988:	1e04      	subs	r4, r0, #0
   2898a:	db2d      	blt.n	289e8 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   2898c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2898e:	aa01      	add	r2, sp, #4
   28990:	f10d 0103 	add.w	r1, sp, #3
   28994:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   28996:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   28998:	f7ff fe2f 	bl	285fa <fixed_header_decode>
	} while (err_code == -EAGAIN);
   2899c:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   289a0:	4604      	mov	r4, r0
		chunk_size = 1U;
   289a2:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   289a6:	d0eb      	beq.n	28980 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   289a8:	2800      	cmp	r0, #0
   289aa:	db3c      	blt.n	28a26 <mqtt_handle_rx+0xb8>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   289ac:	f89d 6003 	ldrb.w	r6, [sp, #3]
   289b0:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   289b4:	2b30      	cmp	r3, #48	; 0x30
   289b6:	d11b      	bne.n	289f0 <mqtt_handle_rx+0x82>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   289b8:	2202      	movs	r2, #2
   289ba:	4628      	mov	r0, r5
   289bc:	a902      	add	r1, sp, #8
   289be:	f7ff ffab 	bl	28918 <mqtt_read_message_chunk>
	if (err_code < 0) {
   289c2:	1e04      	subs	r4, r0, #0
   289c4:	db10      	blt.n	289e8 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   289c6:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   289c8:	f016 0f06 	tst.w	r6, #6
   289cc:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   289ce:	4628      	mov	r0, r5
   289d0:	ba52      	rev16	r2, r2
   289d2:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   289d4:	bf0c      	ite	eq
   289d6:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   289d8:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   289da:	a902      	add	r1, sp, #8
   289dc:	f7ff ff9c 	bl	28918 <mqtt_read_message_chunk>
	if (err_code < 0) {
   289e0:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   289e4:	2c00      	cmp	r4, #0
   289e6:	da0a      	bge.n	289fe <mqtt_handle_rx+0x90>
		return (err_code == -EAGAIN) ? 0 : err_code;
   289e8:	f114 0f0b 	cmn.w	r4, #11
   289ec:	d11b      	bne.n	28a26 <mqtt_handle_rx+0xb8>
   289ee:	e019      	b.n	28a24 <mqtt_handle_rx+0xb6>
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   289f0:	4628      	mov	r0, r5
   289f2:	9a01      	ldr	r2, [sp, #4]
   289f4:	a902      	add	r1, sp, #8
   289f6:	f7ff ff8f 	bl	28918 <mqtt_read_message_chunk>
   289fa:	4604      	mov	r4, r0
   289fc:	e7f2      	b.n	289e4 <mqtt_handle_rx+0x76>
	evt.result = 0;
   289fe:	2200      	movs	r2, #0
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	/* At this point, packet is ready to be passed to the application. */
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   28a00:	f89d 0003 	ldrb.w	r0, [sp, #3]
   28a04:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   28a06:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   28a0a:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   28a0c:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   28a0e:	d06f      	beq.n	28af0 <mqtt_handle_rx+0x182>
   28a10:	d816      	bhi.n	28a40 <mqtt_handle_rx+0xd2>
   28a12:	2b40      	cmp	r3, #64	; 0x40
   28a14:	d062      	beq.n	28adc <mqtt_handle_rx+0x16e>
   28a16:	d809      	bhi.n	28a2c <mqtt_handle_rx+0xbe>
   28a18:	2b20      	cmp	r3, #32
   28a1a:	d02f      	beq.n	28a7c <mqtt_handle_rx+0x10e>
   28a1c:	2b30      	cmp	r3, #48	; 0x30
   28a1e:	d04b      	beq.n	28ab8 <mqtt_handle_rx+0x14a>
	if (err_code < 0) {
		return err_code;
	}

	client->internal.rx_buf_datalen = 0U;
   28a20:	2300      	movs	r3, #0
   28a22:	61eb      	str	r3, [r5, #28]
		return (err_code == -EAGAIN) ? 0 : err_code;
   28a24:	2400      	movs	r4, #0

	return 0;
}
   28a26:	4620      	mov	r0, r4
   28a28:	b00c      	add	sp, #48	; 0x30
   28a2a:	bd70      	pop	{r4, r5, r6, pc}
	switch (type_and_flags & 0xF0) {
   28a2c:	2b50      	cmp	r3, #80	; 0x50
   28a2e:	d1f7      	bne.n	28a20 <mqtt_handle_rx+0xb2>
		evt.type = MQTT_EVT_PUBREC;
   28a30:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   28a32:	a905      	add	r1, sp, #20
   28a34:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   28a36:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   28a3a:	f7ff fe62 	bl	28702 <publish_receive_decode>
   28a3e:	e054      	b.n	28aea <mqtt_handle_rx+0x17c>
	switch (type_and_flags & 0xF0) {
   28a40:	2bb0      	cmp	r3, #176	; 0xb0
   28a42:	d065      	beq.n	28b10 <mqtt_handle_rx+0x1a2>
   28a44:	d80b      	bhi.n	28a5e <mqtt_handle_rx+0xf0>
   28a46:	2b70      	cmp	r3, #112	; 0x70
   28a48:	d05a      	beq.n	28b00 <mqtt_handle_rx+0x192>
   28a4a:	2b90      	cmp	r3, #144	; 0x90
   28a4c:	d1e8      	bne.n	28a20 <mqtt_handle_rx+0xb2>
		evt.type = MQTT_EVT_SUBACK;
   28a4e:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   28a50:	a905      	add	r1, sp, #20
   28a52:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   28a54:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   28a58:	f7ff fe59 	bl	2870e <subscribe_ack_decode>
   28a5c:	e045      	b.n	28aea <mqtt_handle_rx+0x17c>
	switch (type_and_flags & 0xF0) {
   28a5e:	2bd0      	cmp	r3, #208	; 0xd0
   28a60:	d1de      	bne.n	28a20 <mqtt_handle_rx+0xb2>
		if (client->unacked_ping <= 0) {
   28a62:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
   28a66:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   28a68:	bfc4      	itt	gt
   28a6a:	f103 33ff 	addgt.w	r3, r3, #4294967295
   28a6e:	b25a      	sxtbgt	r2, r3
		evt.type = MQTT_EVT_PINGRESP;
   28a70:	2309      	movs	r3, #9
   28a72:	f885 205f 	strb.w	r2, [r5, #95]	; 0x5f
   28a76:	f88d 3010 	strb.w	r3, [sp, #16]
   28a7a:	e010      	b.n	28a9e <mqtt_handle_rx+0x130>
		evt.type = MQTT_EVT_CONNACK;
   28a7c:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   28a80:	4628      	mov	r0, r5
   28a82:	aa05      	add	r2, sp, #20
   28a84:	a902      	add	r1, sp, #8
   28a86:	f7ff fde4 	bl	28652 <connect_ack_decode>
		if (err_code == 0) {
   28a8a:	4604      	mov	r4, r0
   28a8c:	bb70      	cbnz	r0, 28aec <mqtt_handle_rx+0x17e>
			if (evt.param.connack.return_code ==
   28a8e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   28a92:	b94b      	cbnz	r3, 28aa8 <mqtt_handle_rx+0x13a>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   28a94:	69ab      	ldr	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   28a96:	900b      	str	r0, [sp, #44]	; 0x2c
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   28a98:	f043 0304 	orr.w	r3, r3, #4
   28a9c:	61ab      	str	r3, [r5, #24]
		event_notify(client, &evt);
   28a9e:	4628      	mov	r0, r5
   28aa0:	a904      	add	r1, sp, #16
   28aa2:	f000 f905 	bl	28cb0 <event_notify>
	if (err_code < 0) {
   28aa6:	e7bb      	b.n	28a20 <mqtt_handle_rx+0xb2>
		event_notify(client, &evt);
   28aa8:	4628      	mov	r0, r5
   28aaa:	a904      	add	r1, sp, #16
			evt.result = evt.param.connack.return_code;
   28aac:	930b      	str	r3, [sp, #44]	; 0x2c
				err_code = -ECONNREFUSED;
   28aae:	f06f 046e 	mvn.w	r4, #110	; 0x6e
		event_notify(client, &evt);
   28ab2:	f000 f8fd 	bl	28cb0 <event_notify>
	if (err_code < 0) {
   28ab6:	e7b6      	b.n	28a26 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBLISH;
   28ab8:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   28aba:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   28abc:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   28ac0:	ab05      	add	r3, sp, #20
   28ac2:	f7ff fde0 	bl	28686 <publish_decode>
   28ac6:	4604      	mov	r4, r0
		client->internal.remaining_payload =
   28ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
		evt.result = err_code;
   28aca:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   28acc:	622b      	str	r3, [r5, #32]
		event_notify(client, &evt);
   28ace:	4628      	mov	r0, r5
   28ad0:	a904      	add	r1, sp, #16
   28ad2:	f000 f8ed 	bl	28cb0 <event_notify>
	if (err_code < 0) {
   28ad6:	2c00      	cmp	r4, #0
   28ad8:	daa2      	bge.n	28a20 <mqtt_handle_rx+0xb2>
   28ada:	e7a4      	b.n	28a26 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBACK;
   28adc:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   28ade:	a905      	add	r1, sp, #20
   28ae0:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   28ae2:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   28ae6:	f7ff fe0a 	bl	286fe <publish_ack_decode>
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   28aea:	4604      	mov	r4, r0
		evt.result = err_code;
   28aec:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   28aee:	e7ee      	b.n	28ace <mqtt_handle_rx+0x160>
		evt.type = MQTT_EVT_PUBREL;
   28af0:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   28af2:	a905      	add	r1, sp, #20
   28af4:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   28af6:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   28afa:	f7ff fe04 	bl	28706 <publish_release_decode>
   28afe:	e7f4      	b.n	28aea <mqtt_handle_rx+0x17c>
		evt.type = MQTT_EVT_PUBCOMP;
   28b00:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   28b02:	a905      	add	r1, sp, #20
   28b04:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   28b06:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   28b0a:	f7ff fdfe 	bl	2870a <publish_complete_decode>
   28b0e:	e7ec      	b.n	28aea <mqtt_handle_rx+0x17c>
		evt.type = MQTT_EVT_UNSUBACK;
   28b10:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   28b12:	a905      	add	r1, sp, #20
   28b14:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   28b18:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   28b1c:	f7ff fe08 	bl	28730 <unsubscribe_ack_decode>
   28b20:	e7e3      	b.n	28aea <mqtt_handle_rx+0x17c>

00028b22 <mqtt_client_tcp_connect>:
#include <zephyr/net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   28b22:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   28b24:	6b45      	ldr	r5, [r0, #52]	; 0x34
{
   28b26:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   28b28:	8828      	ldrh	r0, [r5, #0]
   28b2a:	2206      	movs	r2, #6
   28b2c:	2101      	movs	r1, #1
   28b2e:	f7f2 fec7 	bl	1b8c0 <z_impl_zsock_socket>
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   28b32:	2800      	cmp	r0, #0
	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   28b34:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   28b36:	da04      	bge.n	28b42 <mqtt_client_tcp_connect+0x20>
	NET_DBG("Connect completed");
	return 0;

error:
	(void)zsock_close(client->transport.tcp.sock);
	return -errno;
   28b38:	f7ff fc69 	bl	2840e <__errno>
   28b3c:	6800      	ldr	r0, [r0, #0]
   28b3e:	4240      	negs	r0, r0
}
   28b40:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   28b42:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   28b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   28b46:	2b01      	cmp	r3, #1
   28b48:	bf0c      	ite	eq
   28b4a:	2208      	moveq	r2, #8
   28b4c:	2218      	movne	r2, #24
	return z_impl_zsock_connect(sock, addr, addrlen);
   28b4e:	f7ff fafc 	bl	2814a <z_impl_zsock_connect>
	if (ret < 0) {
   28b52:	2800      	cmp	r0, #0
   28b54:	da03      	bge.n	28b5e <mqtt_client_tcp_connect+0x3c>
	(void)zsock_close(client->transport.tcp.sock);
   28b56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   28b58:	f7ff fad3 	bl	28102 <z_impl_zsock_close>
   28b5c:	e7ec      	b.n	28b38 <mqtt_client_tcp_connect+0x16>
	return 0;
   28b5e:	2000      	movs	r0, #0
   28b60:	e7ee      	b.n	28b40 <mqtt_client_tcp_connect+0x1e>

00028b62 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   28b62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   28b66:	2400      	movs	r4, #0
{
   28b68:	4606      	mov	r6, r0
   28b6a:	460f      	mov	r7, r1
   28b6c:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   28b6e:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   28b70:	42ac      	cmp	r4, r5
   28b72:	d301      	bcc.n	28b78 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   28b74:	2000      	movs	r0, #0
   28b76:	e00d      	b.n	28b94 <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   28b78:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   28b7a:	2300      	movs	r3, #0
   28b7c:	e9cd 8800 	strd	r8, r8, [sp]
   28b80:	1b2a      	subs	r2, r5, r4
   28b82:	1939      	adds	r1, r7, r4
   28b84:	f7ff fb0c 	bl	281a0 <z_impl_zsock_sendto>
		if (ret < 0) {
   28b88:	1e03      	subs	r3, r0, #0
   28b8a:	da06      	bge.n	28b9a <mqtt_client_tcp_write+0x38>
			return -errno;
   28b8c:	f7ff fc3f 	bl	2840e <__errno>
   28b90:	6800      	ldr	r0, [r0, #0]
   28b92:	4240      	negs	r0, r0
}
   28b94:	b002      	add	sp, #8
   28b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   28b9a:	441c      	add	r4, r3
   28b9c:	e7e8      	b.n	28b70 <mqtt_client_tcp_write+0xe>

00028b9e <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   28b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   28ba2:	2500      	movs	r5, #0
{
   28ba4:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   28ba6:	462b      	mov	r3, r5
{
   28ba8:	460c      	mov	r4, r1
   28baa:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   28bac:	428b      	cmp	r3, r1
   28bae:	d110      	bne.n	28bd2 <mqtt_client_tcp_write_msg+0x34>
	size_t offset = 0;
   28bb0:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   28bb2:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   28bb4:	42ae      	cmp	r6, r5
   28bb6:	d216      	bcs.n	28be6 <mqtt_client_tcp_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   28bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   28bba:	2200      	movs	r2, #0
   28bbc:	4621      	mov	r1, r4
   28bbe:	f7ff fb23 	bl	28208 <z_impl_zsock_sendmsg>
		if (ret < 0) {
   28bc2:	1e03      	subs	r3, r0, #0
   28bc4:	da0c      	bge.n	28be0 <mqtt_client_tcp_write_msg+0x42>
			return -errno;
   28bc6:	f7ff fc22 	bl	2840e <__errno>
   28bca:	6800      	ldr	r0, [r0, #0]
   28bcc:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   28bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   28bd2:	68a2      	ldr	r2, [r4, #8]
   28bd4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   28bd8:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   28bda:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   28bdc:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   28bde:	e7e5      	b.n	28bac <mqtt_client_tcp_write_msg+0xe>
		offset += ret;
   28be0:	441e      	add	r6, r3
		if (offset >= total_len) {
   28be2:	42b5      	cmp	r5, r6
   28be4:	d817      	bhi.n	28c16 <mqtt_client_tcp_write_msg+0x78>
	return 0;
   28be6:	2000      	movs	r0, #0
   28be8:	e7f1      	b.n	28bce <mqtt_client_tcp_write_msg+0x30>
			ret -= message->msg_iov[i].iov_len;
   28bea:	1a1b      	subs	r3, r3, r0
			message->msg_iov[i].iov_len = 0;
   28bec:	f8c1 8004 	str.w	r8, [r1, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   28bf0:	3201      	adds	r2, #1
   28bf2:	68e1      	ldr	r1, [r4, #12]
   28bf4:	4291      	cmp	r1, r2
   28bf6:	d9dd      	bls.n	28bb4 <mqtt_client_tcp_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   28bf8:	68a1      	ldr	r1, [r4, #8]
   28bfa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   28bfe:	6848      	ldr	r0, [r1, #4]
   28c00:	4298      	cmp	r0, r3
   28c02:	d9f2      	bls.n	28bea <mqtt_client_tcp_write_msg+0x4c>
				message->msg_iov[i].iov_len -= ret;
   28c04:	1ac0      	subs	r0, r0, r3
   28c06:	6048      	str	r0, [r1, #4]
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   28c08:	68a0      	ldr	r0, [r4, #8]
   28c0a:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
   28c0e:	4419      	add	r1, r3
				message->msg_iov[i].iov_base =
   28c10:	f840 1032 	str.w	r1, [r0, r2, lsl #3]
				break;
   28c14:	e7ce      	b.n	28bb4 <mqtt_client_tcp_write_msg+0x16>
		for (i = 0; i < message->msg_iovlen; i++) {
   28c16:	2200      	movs	r2, #0
   28c18:	e7eb      	b.n	28bf2 <mqtt_client_tcp_write_msg+0x54>

00028c1a <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   28c1a:	b513      	push	{r0, r1, r4, lr}

	if (!shall_block) {
		flags |= ZSOCK_MSG_DONTWAIT;
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   28c1c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   28c1e:	2400      	movs	r4, #0
	if (!shall_block) {
   28c20:	f083 0301 	eor.w	r3, r3, #1
   28c24:	e9cd 4400 	strd	r4, r4, [sp]
   28c28:	019b      	lsls	r3, r3, #6
   28c2a:	f7ff fb18 	bl	2825e <z_impl_zsock_recvfrom>
	if (ret < 0) {
   28c2e:	2800      	cmp	r0, #0
   28c30:	da03      	bge.n	28c3a <mqtt_client_tcp_read+0x20>
		return -errno;
   28c32:	f7ff fbec 	bl	2840e <__errno>
   28c36:	6800      	ldr	r0, [r0, #0]
   28c38:	4240      	negs	r0, r0
	}

	return ret;
}
   28c3a:	b002      	add	sp, #8
   28c3c:	bd10      	pop	{r4, pc}

00028c3e <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   28c3e:	b508      	push	{r3, lr}
	int ret;

	NET_INFO("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   28c40:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   28c42:	f7ff fa5e 	bl	28102 <z_impl_zsock_close>
	if (ret < 0) {
   28c46:	2800      	cmp	r0, #0
   28c48:	da04      	bge.n	28c54 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   28c4a:	f7ff fbe0 	bl	2840e <__errno>
   28c4e:	6800      	ldr	r0, [r0, #0]
   28c50:	4240      	negs	r0, r0
	}

	return 0;
}
   28c52:	bd08      	pop	{r3, pc}
	return 0;
   28c54:	2000      	movs	r0, #0
   28c56:	e7fc      	b.n	28c52 <mqtt_client_tcp_disconnect+0x14>

00028c58 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   28c58:	f7ff bff1 	b.w	28c3e <mqtt_client_tcp_disconnect>

00028c5c <k_uptime_get_32>:
{
   28c5c:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   28c5e:	f002 fa36 	bl	2b0ce <z_impl_k_uptime_ticks>
   28c62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28c66:	fba0 0302 	umull	r0, r3, r0, r2
   28c6a:	fb02 3301 	mla	r3, r2, r1, r3
   28c6e:	0bc0      	lsrs	r0, r0, #15
}
   28c70:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   28c74:	bd08      	pop	{r3, pc}

00028c76 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   28c76:	b538      	push	{r3, r4, r5, lr}
   28c78:	4604      	mov	r4, r0
   28c7a:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   28c7c:	6d82      	ldr	r2, [r0, #88]	; 0x58
   28c7e:	2100      	movs	r1, #0
   28c80:	6d40      	ldr	r0, [r0, #84]	; 0x54
   28c82:	f002 fc2c 	bl	2b4de <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   28c86:	6d63      	ldr	r3, [r4, #84]	; 0x54
   28c88:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   28c8a:	6da2      	ldr	r2, [r4, #88]	; 0x58
   28c8c:	4413      	add	r3, r2
   28c8e:	606b      	str	r3, [r5, #4]
}
   28c90:	bd38      	pop	{r3, r4, r5, pc}

00028c92 <mqtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   28c92:	f04f 32ff 	mov.w	r2, #4294967295
   28c96:	f04f 33ff 	mov.w	r3, #4294967295
   28c9a:	f7fc bb19 	b.w	252d0 <z_impl_k_mutex_lock>

00028c9e <verify_tx_state.isra.0>:
{
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
		return -ENOTCONN;
	}

	return 0;
   28c9e:	f010 0f04 	tst.w	r0, #4
}
   28ca2:	bf0c      	ite	eq
   28ca4:	f06f 007f 	mvneq.w	r0, #127	; 0x7f
   28ca8:	2000      	movne	r0, #0
   28caa:	4770      	bx	lr

00028cac <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   28cac:	f7fc bb8a 	b.w	253c4 <z_impl_k_mutex_unlock>

00028cb0 <event_notify>:
{
   28cb0:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   28cb2:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   28cb4:	4604      	mov	r4, r0
   28cb6:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   28cb8:	b153      	cbz	r3, 28cd0 <event_notify+0x20>
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	return k_mutex_unlock(&mutex->kernel_mutex);
   28cba:	f7ff fff7 	bl	28cac <k_mutex_unlock.isra.0>
		client->evt_cb(client, evt);
   28cbe:	4620      	mov	r0, r4
   28cc0:	4629      	mov	r1, r5
   28cc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   28cc4:	4798      	blx	r3
		mqtt_mutex_lock(client);
   28cc6:	4620      	mov	r0, r4
}
   28cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   28ccc:	f7ff bfe1 	b.w	28c92 <mqtt_mutex_lock>
}
   28cd0:	bd38      	pop	{r3, r4, r5, pc}

00028cd2 <client_disconnect.constprop.0>:
static void client_disconnect(struct mqtt_client *client, int result,
   28cd2:	b530      	push	{r4, r5, lr}
   28cd4:	b089      	sub	sp, #36	; 0x24
   28cd6:	4604      	mov	r4, r0
   28cd8:	460d      	mov	r5, r1
	err_code = mqtt_transport_disconnect(client);
   28cda:	f7ff ffbd 	bl	28c58 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   28cde:	2100      	movs	r1, #0
		struct mqtt_evt evt = {
   28ce0:	221c      	movs	r2, #28
	client->internal.last_activity = 0U;
   28ce2:	e9c4 1105 	strd	r1, r1, [r4, #20]
	client->internal.remaining_payload = 0U;
   28ce6:	e9c4 1107 	strd	r1, r1, [r4, #28]
		struct mqtt_evt evt = {
   28cea:	4668      	mov	r0, sp
   28cec:	f002 fbf7 	bl	2b4de <memset>
   28cf0:	2301      	movs	r3, #1
		event_notify(client, &evt);
   28cf2:	4669      	mov	r1, sp
   28cf4:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   28cf6:	f88d 3000 	strb.w	r3, [sp]
   28cfa:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   28cfc:	f7ff ffd8 	bl	28cb0 <event_notify>
}
   28d00:	b009      	add	sp, #36	; 0x24
   28d02:	bd30      	pop	{r4, r5, pc}

00028d04 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   28d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28d08:	460f      	mov	r7, r1
   28d0a:	4690      	mov	r8, r2
   28d0c:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   28d0e:	4605      	mov	r5, r0
   28d10:	b320      	cbz	r0, 28d5c <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   28d12:	f7ff ffbe 	bl	28c92 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   28d16:	6a2c      	ldr	r4, [r5, #32]
   28d18:	b1b4      	cbz	r4, 28d48 <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   28d1a:	4544      	cmp	r4, r8
   28d1c:	4622      	mov	r2, r4
   28d1e:	4633      	mov	r3, r6
   28d20:	bf28      	it	cs
   28d22:	4642      	movcs	r2, r8
   28d24:	4639      	mov	r1, r7
   28d26:	4628      	mov	r0, r5
   28d28:	f7f4 fa2e 	bl	1d188 <mqtt_transport_read>
   28d2c:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   28d2e:	b916      	cbnz	r6, 28d36 <read_publish_payload+0x32>
   28d30:	f110 0f0b 	cmn.w	r0, #11
   28d34:	d008      	beq.n	28d48 <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   28d36:	2c00      	cmp	r4, #0
   28d38:	dc0c      	bgt.n	28d54 <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   28d3a:	bf08      	it	eq
   28d3c:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   28d40:	4628      	mov	r0, r5
   28d42:	4621      	mov	r1, r4
   28d44:	f7ff ffc5 	bl	28cd2 <client_disconnect.constprop.0>
   28d48:	4628      	mov	r0, r5
   28d4a:	f7ff ffaf 	bl	28cac <k_mutex_unlock.isra.0>

exit:
	mqtt_mutex_unlock(client);

	return ret;
}
   28d4e:	4620      	mov	r0, r4
   28d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   28d54:	6a2b      	ldr	r3, [r5, #32]
   28d56:	1b1b      	subs	r3, r3, r4
   28d58:	622b      	str	r3, [r5, #32]
   28d5a:	e7f5      	b.n	28d48 <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   28d5c:	f06f 0415 	mvn.w	r4, #21
   28d60:	e7f5      	b.n	28d4e <read_publish_payload+0x4a>

00028d62 <client_write>:
{
   28d62:	b538      	push	{r3, r4, r5, lr}
   28d64:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   28d66:	f7f4 f9f7 	bl	1d158 <mqtt_transport_write>
	if (err_code < 0) {
   28d6a:	1e04      	subs	r4, r0, #0
   28d6c:	da05      	bge.n	28d7a <client_write+0x18>
		client_disconnect(client, err_code, true);
   28d6e:	4621      	mov	r1, r4
   28d70:	4628      	mov	r0, r5
   28d72:	f7ff ffae 	bl	28cd2 <client_disconnect.constprop.0>
}
   28d76:	4620      	mov	r0, r4
   28d78:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @retval Current wall clock or sys tick value in milliseconds.
 */
static inline uint32_t mqtt_sys_tick_in_ms_get(void)
{
	return k_uptime_get_32();
   28d7a:	f7ff ff6f 	bl	28c5c <k_uptime_get_32>
	return 0;
   28d7e:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   28d80:	6168      	str	r0, [r5, #20]
	return 0;
   28d82:	e7f8      	b.n	28d76 <client_write+0x14>

00028d84 <mqtt_client_init>:
{
   28d84:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   28d86:	4604      	mov	r4, r0
   28d88:	b190      	cbz	r0, 28db0 <mqtt_client_init+0x2c>
   28d8a:	2264      	movs	r2, #100	; 0x64
   28d8c:	2100      	movs	r1, #0
   28d8e:	f002 fba6 	bl	2b4de <memset>
	return z_impl_k_mutex_init(mutex);
   28d92:	4620      	mov	r0, r4
   28d94:	f001 ff3c 	bl	2ac10 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   28d98:	2304      	movs	r3, #4
   28d9a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->clean_session = MQTT_CLEAN_SESSION;
   28d9e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   28da2:	f043 0302 	orr.w	r3, r3, #2
   28da6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	client->keepalive = MQTT_KEEPALIVE;
   28daa:	233c      	movs	r3, #60	; 0x3c
   28dac:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
   28db0:	bd10      	pop	{r4, pc}

00028db2 <mqtt_connect>:
{
   28db2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   28db4:	4605      	mov	r5, r0
   28db6:	2800      	cmp	r0, #0
   28db8:	d03a      	beq.n	28e30 <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   28dba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28dbc:	b3c3      	cbz	r3, 28e30 <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   28dbe:	f7ff ff68 	bl	28c92 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   28dc2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   28dc4:	b38b      	cbz	r3, 28e2a <mqtt_connect+0x78>
   28dc6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   28dc8:	b37b      	cbz	r3, 28e2a <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   28dca:	4628      	mov	r0, r5
   28dcc:	f7f4 f9ba 	bl	1d144 <mqtt_transport_connect>
	if (err_code < 0) {
   28dd0:	1e04      	subs	r4, r0, #0
   28dd2:	db24      	blt.n	28e1e <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   28dd4:	4669      	mov	r1, sp
   28dd6:	4628      	mov	r0, r5
   28dd8:	f7ff ff4d 	bl	28c76 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   28ddc:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   28dde:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   28de0:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   28de4:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   28de6:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   28de8:	f7f4 f906 	bl	1cff8 <connect_request_encode>
	if (err_code < 0) {
   28dec:	1e04      	subs	r4, r0, #0
   28dee:	db13      	blt.n	28e18 <mqtt_connect+0x66>
	err_code = mqtt_transport_write(client, packet.cur,
   28df0:	e9dd 1200 	ldrd	r1, r2, [sp]
   28df4:	4628      	mov	r0, r5
   28df6:	1a52      	subs	r2, r2, r1
   28df8:	f7f4 f9ae 	bl	1d158 <mqtt_transport_write>
	if (err_code < 0) {
   28dfc:	1e04      	subs	r4, r0, #0
   28dfe:	db0b      	blt.n	28e18 <mqtt_connect+0x66>
   28e00:	f7ff ff2c 	bl	28c5c <k_uptime_get_32>
	client->unacked_ping = 0;
   28e04:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   28e06:	6168      	str	r0, [r5, #20]
	client->unacked_ping = 0;
   28e08:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
   28e0c:	4628      	mov	r0, r5
   28e0e:	f7ff ff4d 	bl	28cac <k_mutex_unlock.isra.0>
}
   28e12:	4620      	mov	r0, r4
   28e14:	b003      	add	sp, #12
   28e16:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   28e18:	4628      	mov	r0, r5
   28e1a:	f7ff ff1d 	bl	28c58 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   28e1e:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   28e20:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   28e24:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   28e28:	e7f0      	b.n	28e0c <mqtt_connect+0x5a>
		err_code = -ENOMEM;
   28e2a:	f06f 040b 	mvn.w	r4, #11
   28e2e:	e7f6      	b.n	28e1e <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   28e30:	f06f 0415 	mvn.w	r4, #21
   28e34:	e7ed      	b.n	28e12 <mqtt_connect+0x60>

00028e36 <mqtt_publish>:
{
   28e36:	b570      	push	{r4, r5, r6, lr}
   28e38:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   28e3a:	4605      	mov	r5, r0
{
   28e3c:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   28e3e:	2800      	cmp	r0, #0
   28e40:	d03a      	beq.n	28eb8 <mqtt_publish+0x82>
	NULL_PARAM_CHECK(param);
   28e42:	2900      	cmp	r1, #0
   28e44:	d038      	beq.n	28eb8 <mqtt_publish+0x82>
	mqtt_mutex_lock(client);
   28e46:	f7ff ff24 	bl	28c92 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   28e4a:	4628      	mov	r0, r5
   28e4c:	a901      	add	r1, sp, #4
   28e4e:	f7ff ff12 	bl	28c76 <tx_buf_init>
	err_code = verify_tx_state(client);
   28e52:	69a8      	ldr	r0, [r5, #24]
   28e54:	f7ff ff23 	bl	28c9e <verify_tx_state.isra.0>
	if (err_code < 0) {
   28e58:	1e04      	subs	r4, r0, #0
   28e5a:	db22      	blt.n	28ea2 <mqtt_publish+0x6c>
	err_code = publish_encode(param, &packet);
   28e5c:	4630      	mov	r0, r6
   28e5e:	a901      	add	r1, sp, #4
   28e60:	f7ff fcdc 	bl	2881c <publish_encode>
	if (err_code < 0) {
   28e64:	1e04      	subs	r4, r0, #0
   28e66:	db1c      	blt.n	28ea2 <mqtt_publish+0x6c>
	io_vector[0].iov_base = packet.cur;
   28e68:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   28e6a:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   28e6c:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   28e6e:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   28e70:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   28e72:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   28e74:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   28e76:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   28e78:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   28e7a:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   28e7c:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   28e80:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   28e82:	f002 fb2c 	bl	2b4de <memset>
	msg.msg_iov = io_vector;
   28e86:	ab03      	add	r3, sp, #12
   28e88:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   28e8a:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   28e8c:	4628      	mov	r0, r5
   28e8e:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   28e90:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   28e92:	f7f4 f96d 	bl	1d170 <mqtt_transport_write_msg>
	if (err_code < 0) {
   28e96:	1e04      	subs	r4, r0, #0
   28e98:	da09      	bge.n	28eae <mqtt_publish+0x78>
		client_disconnect(client, err_code, true);
   28e9a:	4621      	mov	r1, r4
   28e9c:	4628      	mov	r0, r5
   28e9e:	f7ff ff18 	bl	28cd2 <client_disconnect.constprop.0>
   28ea2:	4628      	mov	r0, r5
   28ea4:	f7ff ff02 	bl	28cac <k_mutex_unlock.isra.0>
}
   28ea8:	4620      	mov	r0, r4
   28eaa:	b00e      	add	sp, #56	; 0x38
   28eac:	bd70      	pop	{r4, r5, r6, pc}
   28eae:	f7ff fed5 	bl	28c5c <k_uptime_get_32>
	return 0;
   28eb2:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   28eb4:	6168      	str	r0, [r5, #20]
	return 0;
   28eb6:	e7f4      	b.n	28ea2 <mqtt_publish+0x6c>
	NULL_PARAM_CHECK(client);
   28eb8:	f06f 0415 	mvn.w	r4, #21
   28ebc:	e7f4      	b.n	28ea8 <mqtt_publish+0x72>

00028ebe <mqtt_publish_qos1_ack>:
{
   28ebe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28ec0:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   28ec2:	4605      	mov	r5, r0
   28ec4:	b1f0      	cbz	r0, 28f04 <mqtt_publish_qos1_ack+0x46>
	NULL_PARAM_CHECK(param);
   28ec6:	b1e9      	cbz	r1, 28f04 <mqtt_publish_qos1_ack+0x46>
	mqtt_mutex_lock(client);
   28ec8:	f7ff fee3 	bl	28c92 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   28ecc:	4628      	mov	r0, r5
   28ece:	4669      	mov	r1, sp
   28ed0:	f7ff fed1 	bl	28c76 <tx_buf_init>
	err_code = verify_tx_state(client);
   28ed4:	69a8      	ldr	r0, [r5, #24]
   28ed6:	f7ff fee2 	bl	28c9e <verify_tx_state.isra.0>
	if (err_code < 0) {
   28eda:	1e04      	subs	r4, r0, #0
   28edc:	db0c      	blt.n	28ef8 <mqtt_publish_qos1_ack+0x3a>
	err_code = publish_ack_encode(param, &packet);
   28ede:	4669      	mov	r1, sp
   28ee0:	4630      	mov	r0, r6
   28ee2:	f7ff fcdc 	bl	2889e <publish_ack_encode>
	if (err_code < 0) {
   28ee6:	1e04      	subs	r4, r0, #0
   28ee8:	db06      	blt.n	28ef8 <mqtt_publish_qos1_ack+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   28eea:	e9dd 1200 	ldrd	r1, r2, [sp]
   28eee:	4628      	mov	r0, r5
   28ef0:	1a52      	subs	r2, r2, r1
   28ef2:	f7ff ff36 	bl	28d62 <client_write>
   28ef6:	4604      	mov	r4, r0
   28ef8:	4628      	mov	r0, r5
   28efa:	f7ff fed7 	bl	28cac <k_mutex_unlock.isra.0>
}
   28efe:	4620      	mov	r0, r4
   28f00:	b002      	add	sp, #8
   28f02:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   28f04:	f06f 0415 	mvn.w	r4, #21
   28f08:	e7f9      	b.n	28efe <mqtt_publish_qos1_ack+0x40>

00028f0a <mqtt_disconnect>:
{
   28f0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   28f0c:	4605      	mov	r5, r0
   28f0e:	b308      	cbz	r0, 28f54 <mqtt_disconnect+0x4a>
	mqtt_mutex_lock(client);
   28f10:	f7ff febf 	bl	28c92 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   28f14:	4628      	mov	r0, r5
   28f16:	4669      	mov	r1, sp
   28f18:	f7ff fead 	bl	28c76 <tx_buf_init>
	err_code = verify_tx_state(client);
   28f1c:	69a8      	ldr	r0, [r5, #24]
   28f1e:	f7ff febe 	bl	28c9e <verify_tx_state.isra.0>
	if (err_code < 0) {
   28f22:	1e04      	subs	r4, r0, #0
   28f24:	db10      	blt.n	28f48 <mqtt_disconnect+0x3e>
	err_code = disconnect_encode(&packet);
   28f26:	4668      	mov	r0, sp
   28f28:	f7f4 f8e8 	bl	1d0fc <disconnect_encode>
	if (err_code < 0) {
   28f2c:	1e04      	subs	r4, r0, #0
   28f2e:	db0b      	blt.n	28f48 <mqtt_disconnect+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   28f30:	e9dd 1200 	ldrd	r1, r2, [sp]
   28f34:	4628      	mov	r0, r5
   28f36:	1a52      	subs	r2, r2, r1
   28f38:	f7ff ff13 	bl	28d62 <client_write>
	if (err_code < 0) {
   28f3c:	1e04      	subs	r4, r0, #0
   28f3e:	db03      	blt.n	28f48 <mqtt_disconnect+0x3e>
	client_disconnect(client, 0, true);
   28f40:	2100      	movs	r1, #0
   28f42:	4628      	mov	r0, r5
   28f44:	f7ff fec5 	bl	28cd2 <client_disconnect.constprop.0>
   28f48:	4628      	mov	r0, r5
   28f4a:	f7ff feaf 	bl	28cac <k_mutex_unlock.isra.0>
}
   28f4e:	4620      	mov	r0, r4
   28f50:	b003      	add	sp, #12
   28f52:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   28f54:	f06f 0415 	mvn.w	r4, #21
   28f58:	e7f9      	b.n	28f4e <mqtt_disconnect+0x44>

00028f5a <mqtt_subscribe>:
{
   28f5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28f5c:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   28f5e:	4605      	mov	r5, r0
   28f60:	b1f0      	cbz	r0, 28fa0 <mqtt_subscribe+0x46>
	NULL_PARAM_CHECK(param);
   28f62:	b1e9      	cbz	r1, 28fa0 <mqtt_subscribe+0x46>
	mqtt_mutex_lock(client);
   28f64:	f7ff fe95 	bl	28c92 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   28f68:	4628      	mov	r0, r5
   28f6a:	4669      	mov	r1, sp
   28f6c:	f7ff fe83 	bl	28c76 <tx_buf_init>
	err_code = verify_tx_state(client);
   28f70:	69a8      	ldr	r0, [r5, #24]
   28f72:	f7ff fe94 	bl	28c9e <verify_tx_state.isra.0>
	if (err_code < 0) {
   28f76:	1e04      	subs	r4, r0, #0
   28f78:	db0c      	blt.n	28f94 <mqtt_subscribe+0x3a>
	err_code = subscribe_encode(param, &packet);
   28f7a:	4669      	mov	r1, sp
   28f7c:	4630      	mov	r0, r6
   28f7e:	f7ff fc93 	bl	288a8 <subscribe_encode>
	if (err_code < 0) {
   28f82:	1e04      	subs	r4, r0, #0
   28f84:	db06      	blt.n	28f94 <mqtt_subscribe+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   28f86:	e9dd 1200 	ldrd	r1, r2, [sp]
   28f8a:	4628      	mov	r0, r5
   28f8c:	1a52      	subs	r2, r2, r1
   28f8e:	f7ff fee8 	bl	28d62 <client_write>
   28f92:	4604      	mov	r4, r0
   28f94:	4628      	mov	r0, r5
   28f96:	f7ff fe89 	bl	28cac <k_mutex_unlock.isra.0>
}
   28f9a:	4620      	mov	r0, r4
   28f9c:	b002      	add	sp, #8
   28f9e:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   28fa0:	f06f 0415 	mvn.w	r4, #21
   28fa4:	e7f9      	b.n	28f9a <mqtt_subscribe+0x40>

00028fa6 <mqtt_ping>:
{
   28fa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   28fa8:	4605      	mov	r5, r0
   28faa:	b318      	cbz	r0, 28ff4 <mqtt_ping+0x4e>
	mqtt_mutex_lock(client);
   28fac:	f7ff fe71 	bl	28c92 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   28fb0:	4628      	mov	r0, r5
   28fb2:	4669      	mov	r1, sp
   28fb4:	f7ff fe5f 	bl	28c76 <tx_buf_init>
	err_code = verify_tx_state(client);
   28fb8:	69a8      	ldr	r0, [r5, #24]
   28fba:	f7ff fe70 	bl	28c9e <verify_tx_state.isra.0>
	if (err_code < 0) {
   28fbe:	1e04      	subs	r4, r0, #0
   28fc0:	db12      	blt.n	28fe8 <mqtt_ping+0x42>
	err_code = ping_request_encode(&packet);
   28fc2:	4668      	mov	r0, sp
   28fc4:	f7f4 f8ac 	bl	1d120 <ping_request_encode>
	if (err_code < 0) {
   28fc8:	1e04      	subs	r4, r0, #0
   28fca:	db0d      	blt.n	28fe8 <mqtt_ping+0x42>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   28fcc:	e9dd 1200 	ldrd	r1, r2, [sp]
   28fd0:	4628      	mov	r0, r5
   28fd2:	1a52      	subs	r2, r2, r1
   28fd4:	f7ff fec5 	bl	28d62 <client_write>
   28fd8:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   28fda:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
   28fde:	2b7f      	cmp	r3, #127	; 0x7f
		client->unacked_ping++;
   28fe0:	bf1c      	itt	ne
   28fe2:	3301      	addne	r3, #1
   28fe4:	f885 305f 	strbne.w	r3, [r5, #95]	; 0x5f
   28fe8:	4628      	mov	r0, r5
   28fea:	f7ff fe5f 	bl	28cac <k_mutex_unlock.isra.0>
}
   28fee:	4620      	mov	r0, r4
   28ff0:	b003      	add	sp, #12
   28ff2:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   28ff4:	f06f 0415 	mvn.w	r4, #21
   28ff8:	e7f9      	b.n	28fee <mqtt_ping+0x48>

00028ffa <mqtt_live>:
{
   28ffa:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   28ffc:	4604      	mov	r4, r0
   28ffe:	b1f0      	cbz	r0, 2903e <mqtt_live+0x44>
	mqtt_mutex_lock(client);
   29000:	f7ff fe47 	bl	28c92 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   29004:	6965      	ldr	r5, [r4, #20]
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   29006:	f7ff fe29 	bl	28c5c <k_uptime_get_32>

	if (diff < 0) {
   2900a:	1b40      	subs	r0, r0, r5
   2900c:	d506      	bpl.n	2901c <mqtt_live+0x22>
   2900e:	4620      	mov	r0, r4
   29010:	f7ff fe4c 	bl	28cac <k_mutex_unlock.isra.0>
		return -EAGAIN;
   29014:	f06f 050a 	mvn.w	r5, #10
}
   29018:	4628      	mov	r0, r5
   2901a:	bd38      	pop	{r3, r4, r5, pc}
	if ((client->keepalive > 0) &&
   2901c:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   29020:	2b00      	cmp	r3, #0
   29022:	d0f4      	beq.n	2900e <mqtt_live+0x14>
	    (elapsed_time >= (client->keepalive * 1000))) {
   29024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29028:	4353      	muls	r3, r2
	if ((client->keepalive > 0) &&
   2902a:	4283      	cmp	r3, r0
   2902c:	d8ef      	bhi.n	2900e <mqtt_live+0x14>
		err_code = mqtt_ping(client);
   2902e:	4620      	mov	r0, r4
   29030:	f7ff ffb9 	bl	28fa6 <mqtt_ping>
   29034:	4605      	mov	r5, r0
   29036:	4620      	mov	r0, r4
   29038:	f7ff fe38 	bl	28cac <k_mutex_unlock.isra.0>
	if (ping_sent) {
   2903c:	e7ec      	b.n	29018 <mqtt_live+0x1e>
	NULL_PARAM_CHECK(client);
   2903e:	f06f 0515 	mvn.w	r5, #21
   29042:	e7e9      	b.n	29018 <mqtt_live+0x1e>

00029044 <mqtt_keepalive_time_left>:
{
   29044:	b538      	push	{r3, r4, r5, lr}
   29046:	4604      	mov	r4, r0
					client->internal.last_activity);
   29048:	6945      	ldr	r5, [r0, #20]
	int32_t diff = k_uptime_get_32() - last_activity;
   2904a:	f7ff fe07 	bl	28c5c <k_uptime_get_32>
   2904e:	1b43      	subs	r3, r0, r5
	uint32_t keepalive_ms = 1000U * client->keepalive;
   29050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   29054:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		return 0;
   29058:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2905c:	4350      	muls	r0, r2
	if (client->keepalive == 0) {
   2905e:	b11a      	cbz	r2, 29068 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   29060:	4298      	cmp	r0, r3
   29062:	d904      	bls.n	2906e <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   29064:	1ac0      	subs	r0, r0, r3
}
   29066:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   29068:	f04f 30ff 	mov.w	r0, #4294967295
   2906c:	e7fb      	b.n	29066 <mqtt_keepalive_time_left+0x22>
		return 0;
   2906e:	2000      	movs	r0, #0
   29070:	e7f9      	b.n	29066 <mqtt_keepalive_time_left+0x22>

00029072 <mqtt_input>:
{
   29072:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   29074:	4605      	mov	r5, r0
   29076:	b1d0      	cbz	r0, 290ae <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   29078:	f7ff fe0b 	bl	28c92 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   2907c:	69ab      	ldr	r3, [r5, #24]
   2907e:	079b      	lsls	r3, r3, #30
   29080:	d50f      	bpl.n	290a2 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   29082:	6a2b      	ldr	r3, [r5, #32]
   29084:	b983      	cbnz	r3, 290a8 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   29086:	4628      	mov	r0, r5
   29088:	f7ff fc71 	bl	2896e <mqtt_handle_rx>
	if (err_code < 0) {
   2908c:	1e04      	subs	r4, r0, #0
   2908e:	da03      	bge.n	29098 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   29090:	4621      	mov	r1, r4
   29092:	4628      	mov	r0, r5
   29094:	f7ff fe1d 	bl	28cd2 <client_disconnect.constprop.0>
   29098:	4628      	mov	r0, r5
   2909a:	f7ff fe07 	bl	28cac <k_mutex_unlock.isra.0>
}
   2909e:	4620      	mov	r0, r4
   290a0:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -ENOTCONN;
   290a2:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   290a6:	e7f7      	b.n	29098 <mqtt_input+0x26>
		return -EBUSY;
   290a8:	f06f 040f 	mvn.w	r4, #15
   290ac:	e7f4      	b.n	29098 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   290ae:	f06f 0415 	mvn.w	r4, #21
   290b2:	e7f4      	b.n	2909e <mqtt_input+0x2c>

000290b4 <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   290b4:	2301      	movs	r3, #1
   290b6:	f7ff be25 	b.w	28d04 <read_publish_payload>

000290ba <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   290ba:	b570      	push	{r4, r5, r6, lr}
   290bc:	4606      	mov	r6, r0
   290be:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   290c0:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   290c2:	42ac      	cmp	r4, r5
   290c4:	d301      	bcc.n	290ca <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   290c6:	2000      	movs	r0, #0
}
   290c8:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   290ca:	4621      	mov	r1, r4
   290cc:	4630      	mov	r0, r6
   290ce:	1b2a      	subs	r2, r5, r4
   290d0:	f7ff fff0 	bl	290b4 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   290d4:	2800      	cmp	r0, #0
   290d6:	dbf7      	blt.n	290c8 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   290d8:	d001      	beq.n	290de <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   290da:	4404      	add	r4, r0
   290dc:	e7f1      	b.n	290c2 <mqtt_readall_publish_payload+0x8>
			return -EIO;
   290de:	f06f 0004 	mvn.w	r0, #4
   290e2:	e7f1      	b.n	290c8 <mqtt_readall_publish_payload+0xe>

000290e4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   290e4:	220c      	movs	r2, #12
   290e6:	6903      	ldr	r3, [r0, #16]
   290e8:	b2c9      	uxtb	r1, r1
   290ea:	fb01 3302 	mla	r3, r1, r2, r3
   290ee:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   290f0:	f000 0007 	and.w	r0, r0, #7
   290f4:	4770      	bx	lr

000290f6 <set_on_state>:
	__asm__ volatile(
   290f6:	f04f 0320 	mov.w	r3, #32
   290fa:	f3ef 8211 	mrs	r2, BASEPRI
   290fe:	f383 8812 	msr	BASEPRI_MAX, r3
   29102:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   29106:	6803      	ldr	r3, [r0, #0]
   29108:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2910c:	f043 0302 	orr.w	r3, r3, #2
   29110:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   29112:	f382 8811 	msr	BASEPRI, r2
   29116:	f3bf 8f6f 	isb	sy
}
   2911a:	4770      	bx	lr

0002911c <stop>:
{
   2911c:	b570      	push	{r4, r5, r6, lr}
   2911e:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   29120:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   29122:	f04f 0420 	mov.w	r4, #32
   29126:	f3ef 8511 	mrs	r5, BASEPRI
   2912a:	f384 8812 	msr	BASEPRI_MAX, r4
   2912e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   29132:	260c      	movs	r6, #12
   29134:	fb06 3401 	mla	r4, r6, r1, r3
   29138:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2913a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2913e:	d008      	beq.n	29152 <stop+0x36>
   29140:	42a2      	cmp	r2, r4
   29142:	d006      	beq.n	29152 <stop+0x36>
	__asm__ volatile(
   29144:	f385 8811 	msr	BASEPRI, r5
   29148:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   2914c:	f04f 30ff 	mov.w	r0, #4294967295
}
   29150:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   29152:	2201      	movs	r2, #1
   29154:	4371      	muls	r1, r6
   29156:	440b      	add	r3, r1
   29158:	641a      	str	r2, [r3, #64]	; 0x40
   2915a:	f385 8811 	msr	BASEPRI, r5
   2915e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   29162:	6843      	ldr	r3, [r0, #4]
   29164:	440b      	add	r3, r1
   29166:	685b      	ldr	r3, [r3, #4]
   29168:	4798      	blx	r3
	return 0;
   2916a:	2000      	movs	r0, #0
   2916c:	e7f0      	b.n	29150 <stop+0x34>

0002916e <api_stop>:
	return stop(dev, subsys, CTX_API);
   2916e:	2280      	movs	r2, #128	; 0x80
   29170:	f7ff bfd4 	b.w	2911c <stop>

00029174 <async_start>:
{
   29174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29176:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   29178:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2917a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2917c:	f04f 0520 	mov.w	r5, #32
   29180:	f3ef 8611 	mrs	r6, BASEPRI
   29184:	f385 8812 	msr	BASEPRI_MAX, r5
   29188:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2918c:	250c      	movs	r5, #12
   2918e:	4369      	muls	r1, r5
   29190:	440c      	add	r4, r1
   29192:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   29194:	f005 0c07 	and.w	ip, r5, #7
   29198:	f1bc 0f01 	cmp.w	ip, #1
   2919c:	d10b      	bne.n	291b6 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2919e:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   291a0:	f386 8811 	msr	BASEPRI, r6
   291a4:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   291a8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   291ac:	6843      	ldr	r3, [r0, #4]
   291ae:	585b      	ldr	r3, [r3, r1]
   291b0:	4798      	blx	r3
	return 0;
   291b2:	2000      	movs	r0, #0
}
   291b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   291b6:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   291ba:	42af      	cmp	r7, r5
   291bc:	f386 8811 	msr	BASEPRI, r6
   291c0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   291c4:	bf0c      	ite	eq
   291c6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   291ca:	f04f 30ff 	movne.w	r0, #4294967295
   291ce:	e7f1      	b.n	291b4 <async_start+0x40>

000291d0 <api_start>:
{
   291d0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   291d2:	2480      	movs	r4, #128	; 0x80
   291d4:	9400      	str	r4, [sp, #0]
   291d6:	f7ff ffcd 	bl	29174 <async_start>
}
   291da:	b002      	add	sp, #8
   291dc:	bd10      	pop	{r4, pc}

000291de <onoff_started_callback>:
{
   291de:	b410      	push	{r4}
	notify(mgr, 0);
   291e0:	241c      	movs	r4, #28
	return &data->mgr[type];
   291e2:	6900      	ldr	r0, [r0, #16]
   291e4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   291e6:	fb03 0004 	mla	r0, r3, r4, r0
   291ea:	2100      	movs	r1, #0
}
   291ec:	bc10      	pop	{r4}
	notify(mgr, 0);
   291ee:	4710      	bx	r2

000291f0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   291f0:	2000      	movs	r0, #0
   291f2:	f7f8 be75 	b.w	21ee0 <nrfx_clock_start>

000291f6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   291f6:	2000      	movs	r0, #0
   291f8:	f000 bd91 	b.w	29d1e <nrfx_clock_stop>

000291fc <blocking_start_callback>:
{
   291fc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   291fe:	f7fc b951 	b.w	254a4 <z_impl_k_sem_give>

00029202 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29202:	6843      	ldr	r3, [r0, #4]
}
   29204:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29206:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   29208:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2920a:	600b      	str	r3, [r1, #0]
}
   2920c:	4770      	bx	lr

0002920e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2920e:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   29210:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29214:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   29216:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2921a:	6098      	str	r0, [r3, #8]
}
   2921c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2921e:	60d9      	str	r1, [r3, #12]
   29220:	4770      	bx	lr

00029222 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29222:	6843      	ldr	r3, [r0, #4]
}
   29224:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29226:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   29228:	6099      	str	r1, [r3, #8]
}
   2922a:	4770      	bx	lr

0002922c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2922c:	6843      	ldr	r3, [r0, #4]
}
   2922e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29230:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   29232:	60d9      	str	r1, [r3, #12]
}
   29234:	4770      	bx	lr

00029236 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29236:	6843      	ldr	r3, [r0, #4]
   29238:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2923a:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   2923c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   29240:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   29242:	6090      	str	r0, [r2, #8]
}
   29244:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   29246:	60d3      	str	r3, [r2, #12]
   29248:	4770      	bx	lr

0002924a <gpio_nrfx_manage_callback>:
{
   2924a:	b510      	push	{r4, lr}
	return port->data;
   2924c:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2924e:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   29250:	b1f8      	cbz	r0, 29292 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29252:	4288      	cmp	r0, r1
   29254:	d119      	bne.n	2928a <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   29256:	689c      	ldr	r4, [r3, #8]
	return node->next;
   29258:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2925a:	42a1      	cmp	r1, r4
	list->head = node;
   2925c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2925e:	d100      	bne.n	29262 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   29260:	6098      	str	r0, [r3, #8]
	parent->next = child;
   29262:	2000      	movs	r0, #0
   29264:	6008      	str	r0, [r1, #0]
	if (set) {
   29266:	b12a      	cbz	r2, 29274 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   29268:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2926a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2926c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2926e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   29270:	b902      	cbnz	r2, 29274 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   29272:	6099      	str	r1, [r3, #8]
	return 0;
   29274:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   29276:	e010      	b.n	2929a <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29278:	4281      	cmp	r1, r0
   2927a:	d106      	bne.n	2928a <gpio_nrfx_manage_callback+0x40>
	return node->next;
   2927c:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   2927e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   29280:	6898      	ldr	r0, [r3, #8]
   29282:	4281      	cmp	r1, r0
   29284:	d1ed      	bne.n	29262 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   29286:	609c      	str	r4, [r3, #8]
}
   29288:	e7eb      	b.n	29262 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   2928a:	4604      	mov	r4, r0
   2928c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2928e:	2800      	cmp	r0, #0
   29290:	d1f2      	bne.n	29278 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   29292:	2a00      	cmp	r2, #0
   29294:	d1e8      	bne.n	29268 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   29296:	f06f 0015 	mvn.w	r0, #21
}
   2929a:	bd10      	pop	{r4, pc}

0002929c <irq_connect2>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   2929c:	2200      	movs	r2, #0
   2929e:	2101      	movs	r1, #1
   292a0:	200a      	movs	r0, #10
   292a2:	f7f2 be97 	b.w	1bfd4 <z_arm_irq_priority_set>

000292a6 <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   292a6:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   292a8:	2100      	movs	r1, #0
   292aa:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   292ac:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   292ae:	f000 f90c 	bl	294ca <pinctrl_lookup_state>
	if (ret < 0) {
   292b2:	2800      	cmp	r0, #0
   292b4:	db05      	blt.n	292c2 <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
   292b6:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   292b8:	6822      	ldr	r2, [r4, #0]
   292ba:	7919      	ldrb	r1, [r3, #4]
   292bc:	6818      	ldr	r0, [r3, #0]
   292be:	f7f5 fa67 	bl	1e790 <pinctrl_configure_pins>
}
   292c2:	b002      	add	sp, #8
   292c4:	bd10      	pop	{r4, pc}

000292c6 <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
   292c6:	2200      	movs	r2, #0
   292c8:	2101      	movs	r1, #1
   292ca:	200b      	movs	r0, #11
   292cc:	f7f2 be82 	b.w	1bfd4 <z_arm_irq_priority_set>

000292d0 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   292d0:	b510      	push	{r4, lr}
	while (*count) {
   292d2:	680b      	ldr	r3, [r1, #0]
   292d4:	b913      	cbnz	r3, 292dc <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   292d6:	4618      	mov	r0, r3
	*buf_len = 0;
   292d8:	6013      	str	r3, [r2, #0]
	return NULL;
   292da:	e005      	b.n	292e8 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   292dc:	6803      	ldr	r3, [r0, #0]
   292de:	685c      	ldr	r4, [r3, #4]
   292e0:	b11c      	cbz	r4, 292ea <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   292e2:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   292e4:	6803      	ldr	r3, [r0, #0]
   292e6:	6818      	ldr	r0, [r3, #0]
}
   292e8:	bd10      	pop	{r4, pc}
		++(*current);
   292ea:	3308      	adds	r3, #8
   292ec:	6003      	str	r3, [r0, #0]
		--(*count);
   292ee:	680b      	ldr	r3, [r1, #0]
   292f0:	3b01      	subs	r3, #1
   292f2:	600b      	str	r3, [r1, #0]
   292f4:	e7ed      	b.n	292d2 <spi_context_get_next_buf.constprop.0+0x2>

000292f6 <z_log_msg_static_create.constprop.0>:
   292f6:	2300      	movs	r3, #0
   292f8:	f7f2 b81e 	b.w	1b338 <z_impl_z_log_msg_static_create>

000292fc <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   292fc:	4603      	mov	r3, r0
   292fe:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   29300:	7919      	ldrb	r1, [r3, #4]
   29302:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   29304:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   29306:	fa03 f101 	lsl.w	r1, r3, r1
   2930a:	6903      	ldr	r3, [r0, #16]
   2930c:	681b      	ldr	r3, [r3, #0]
   2930e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   29310:	bf18      	it	ne
   29312:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   29316:	b112      	cbz	r2, 2931e <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   29318:	6883      	ldr	r3, [r0, #8]
   2931a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2931c:	4718      	bx	r3
   2931e:	6883      	ldr	r3, [r0, #8]
   29320:	691b      	ldr	r3, [r3, #16]
   29322:	e7fb      	b.n	2931c <gpio_pin_set_dt.isra.0+0x20>

00029324 <_spi_context_cs_control>:
{
   29324:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   29326:	6803      	ldr	r3, [r0, #0]
{
   29328:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2932a:	b1e3      	cbz	r3, 29366 <_spi_context_cs_control+0x42>
   2932c:	6898      	ldr	r0, [r3, #8]
   2932e:	b1d0      	cbz	r0, 29366 <_spi_context_cs_control+0x42>
   29330:	6805      	ldr	r5, [r0, #0]
   29332:	b1c5      	cbz	r5, 29366 <_spi_context_cs_control+0x42>
		if (on) {
   29334:	b149      	cbz	r1, 2934a <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   29336:	2101      	movs	r1, #1
   29338:	f7ff ffe0 	bl	292fc <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2933c:	6823      	ldr	r3, [r4, #0]
   2933e:	689b      	ldr	r3, [r3, #8]
   29340:	6898      	ldr	r0, [r3, #8]
}
   29342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   29346:	f001 bec4 	b.w	2b0d2 <z_impl_k_busy_wait>
			if (!force_off &&
   2934a:	b912      	cbnz	r2, 29352 <_spi_context_cs_control+0x2e>
   2934c:	889b      	ldrh	r3, [r3, #4]
   2934e:	04db      	lsls	r3, r3, #19
   29350:	d409      	bmi.n	29366 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   29352:	6880      	ldr	r0, [r0, #8]
   29354:	f001 febd 	bl	2b0d2 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   29358:	6823      	ldr	r3, [r4, #0]
   2935a:	2100      	movs	r1, #0
   2935c:	6898      	ldr	r0, [r3, #8]
}
   2935e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   29362:	f7ff bfcb 	b.w	292fc <gpio_pin_set_dt.isra.0>
}
   29366:	bd38      	pop	{r3, r4, r5, pc}

00029368 <spi_context_unlock_unconditionally>:
{
   29368:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2936a:	2201      	movs	r2, #1
   2936c:	2100      	movs	r1, #0
{
   2936e:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   29370:	f7ff ffd8 	bl	29324 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   29374:	69a3      	ldr	r3, [r4, #24]
   29376:	b933      	cbnz	r3, 29386 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   29378:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2937a:	f104 0010 	add.w	r0, r4, #16
}
   2937e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29382:	f7fc b88f 	b.w	254a4 <z_impl_k_sem_give>
   29386:	bd10      	pop	{r4, pc}

00029388 <spi_nrfx_release>:
{
   29388:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   2938a:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2938c:	6803      	ldr	r3, [r0, #0]
   2938e:	428b      	cmp	r3, r1
   29390:	d106      	bne.n	293a0 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   29392:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   29396:	b934      	cbnz	r4, 293a6 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   29398:	f7ff ffe6 	bl	29368 <spi_context_unlock_unconditionally>
	return 0;
   2939c:	4620      	mov	r0, r4
}
   2939e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   293a0:	f06f 0015 	mvn.w	r0, #21
   293a4:	e7fb      	b.n	2939e <spi_nrfx_release+0x16>
		return -EBUSY;
   293a6:	f06f 000f 	mvn.w	r0, #15
   293aa:	e7f8      	b.n	2939e <spi_nrfx_release+0x16>

000293ac <uarte_nrfx_config_get>:
{
   293ac:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   293ae:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   293b0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   293b4:	e883 0003 	stmia.w	r3, {r0, r1}
}
   293b8:	2000      	movs	r0, #0
   293ba:	4770      	bx	lr

000293bc <uarte_nrfx_err_check>:
	return config->uarte_regs;
   293bc:	6843      	ldr	r3, [r0, #4]
   293be:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   293c0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   293c4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   293c8:	4770      	bx	lr

000293ca <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   293ca:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   293cc:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   293ce:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   293d0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   293d4:	b150      	cbz	r0, 293ec <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   293d6:	2000      	movs	r0, #0
	*c = *data->rx_data;
   293d8:	6952      	ldr	r2, [r2, #20]
   293da:	7812      	ldrb	r2, [r2, #0]
   293dc:	700a      	strb	r2, [r1, #0]
   293de:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   293e2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   293e6:	2201      	movs	r2, #1
   293e8:	601a      	str	r2, [r3, #0]
	return 0;
   293ea:	4770      	bx	lr
		return -1;
   293ec:	f04f 30ff 	mov.w	r0, #4294967295
}
   293f0:	4770      	bx	lr

000293f2 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   293f2:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   293f4:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   293f6:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   293fa:	b940      	cbnz	r0, 2940e <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   293fc:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   293fe:	079b      	lsls	r3, r3, #30
   29400:	d406      	bmi.n	29410 <is_tx_ready.isra.0+0x1e>
   29402:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   29406:	3800      	subs	r0, #0
   29408:	bf18      	it	ne
   2940a:	2001      	movne	r0, #1
   2940c:	4770      	bx	lr
   2940e:	2001      	movs	r0, #1
}
   29410:	4770      	bx	lr

00029412 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   29412:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   29414:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   29416:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2941a:	05c9      	lsls	r1, r1, #23
   2941c:	d518      	bpl.n	29450 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2941e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   29422:	b1a9      	cbz	r1, 29450 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   29424:	f04f 0020 	mov.w	r0, #32
   29428:	f3ef 8111 	mrs	r1, BASEPRI
   2942c:	f380 8812 	msr	BASEPRI_MAX, r0
   29430:	f3bf 8f6f 	isb	sy
   29434:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   29438:	b130      	cbz	r0, 29448 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2943a:	2000      	movs	r0, #0
   2943c:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   29440:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29444:	2001      	movs	r0, #1
   29446:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   29448:	f381 8811 	msr	BASEPRI, r1
   2944c:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   29450:	6852      	ldr	r2, [r2, #4]
   29452:	06d2      	lsls	r2, r2, #27
   29454:	d515      	bpl.n	29482 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   29456:	f04f 0120 	mov.w	r1, #32
   2945a:	f3ef 8211 	mrs	r2, BASEPRI
   2945e:	f381 8812 	msr	BASEPRI_MAX, r1
   29462:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29466:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2946a:	b111      	cbz	r1, 29472 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2946c:	2100      	movs	r1, #0
   2946e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   29472:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   29476:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   2947a:	f382 8811 	msr	BASEPRI, r2
   2947e:	f3bf 8f6f 	isb	sy
}
   29482:	4770      	bx	lr

00029484 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   29484:	4608      	mov	r0, r1
   29486:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   29488:	4611      	mov	r1, r2
   2948a:	f7f8 fc31 	bl	21cf0 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   2948e:	2800      	cmp	r0, #0
	}

	return 0;
}
   29490:	bf18      	it	ne
   29492:	f06f 0004 	mvnne.w	r0, #4
   29496:	bd08      	pop	{r3, pc}

00029498 <entropy_psa_crypto_rng_init>:
{
   29498:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   2949a:	f000 fc3b 	bl	29d14 <psa_crypto_init>
		return -EIO;
   2949e:	2800      	cmp	r0, #0
}
   294a0:	bf18      	it	ne
   294a2:	f06f 0004 	mvnne.w	r0, #4
   294a6:	bd08      	pop	{r3, pc}

000294a8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   294a8:	4770      	bx	lr

000294aa <event_clear>:
   294aa:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   294ac:	f100 0350 	add.w	r3, r0, #80	; 0x50
   294b0:	009b      	lsls	r3, r3, #2
   294b2:	b29b      	uxth	r3, r3
   294b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   294b8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   294bc:	601a      	str	r2, [r3, #0]
   294be:	681b      	ldr	r3, [r3, #0]
}
   294c0:	4770      	bx	lr

000294c2 <sys_clock_cycle_get_32>:
{
   294c2:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   294c4:	f7f4 ffd4 	bl	1e470 <z_nrf_rtc_timer_read>
}
   294c8:	bd08      	pop	{r3, pc}

000294ca <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   294ca:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   294cc:	6843      	ldr	r3, [r0, #4]
   294ce:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   294d0:	7a05      	ldrb	r5, [r0, #8]
   294d2:	6844      	ldr	r4, [r0, #4]
   294d4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   294d8:	42a3      	cmp	r3, r4
   294da:	d302      	bcc.n	294e2 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   294dc:	f06f 0001 	mvn.w	r0, #1
}
   294e0:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   294e2:	795c      	ldrb	r4, [r3, #5]
   294e4:	428c      	cmp	r4, r1
   294e6:	d001      	beq.n	294ec <pinctrl_lookup_state+0x22>
		(*state)++;
   294e8:	3308      	adds	r3, #8
   294ea:	e7f0      	b.n	294ce <pinctrl_lookup_state+0x4>
			return 0;
   294ec:	2000      	movs	r0, #0
   294ee:	e7f7      	b.n	294e0 <pinctrl_lookup_state+0x16>

000294f0 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   294f0:	f001 bdef 	b.w	2b0d2 <z_impl_k_busy_wait>

000294f4 <nrf_modem_os_errno_set>:
{
   294f4:	b510      	push	{r4, lr}
   294f6:	4604      	mov	r4, r0
	errno = err_code;
   294f8:	f7fe ff89 	bl	2840e <__errno>
   294fc:	6004      	str	r4, [r0, #0]
}
   294fe:	bd10      	pop	{r4, pc}

00029500 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   29500:	f001 bb6a 	b.w	2abd8 <k_is_in_isr>

00029504 <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
   29504:	f7fb bfce 	b.w	254a4 <z_impl_k_sem_give>

00029508 <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   29508:	1c4b      	adds	r3, r1, #1
{
   2950a:	b570      	push	{r4, r5, r6, lr}
   2950c:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   2950e:	d017      	beq.n	29540 <nrf_modem_os_sem_take+0x38>
   29510:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   29514:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   29518:	f240 30e7 	movw	r0, #999	; 0x3e7
   2951c:	2100      	movs	r1, #0
   2951e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29522:	2300      	movs	r3, #0
   29524:	fbc4 0106 	smlal	r0, r1, r4, r6
   29528:	f7ef fbee 	bl	18d08 <__aeabi_uldivmod>
   2952c:	4602      	mov	r2, r0
   2952e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   29530:	4628      	mov	r0, r5
   29532:	f7fb ffdd 	bl	254f0 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   29536:	2800      	cmp	r0, #0
}
   29538:	bf18      	it	ne
   2953a:	f06f 000a 	mvnne.w	r0, #10
   2953e:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   29540:	f04f 32ff 	mov.w	r2, #4294967295
   29544:	4613      	mov	r3, r2
   29546:	e7f3      	b.n	29530 <nrf_modem_os_sem_take+0x28>

00029548 <nrf91_socket_offload_setsockopt>:
{
   29548:	b5f0      	push	{r4, r5, r6, r7, lr}
   2954a:	460d      	mov	r5, r1
   2954c:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = { 0 };
   2954e:	2300      	movs	r3, #0
{
   29550:	b087      	sub	sp, #28
   29552:	4611      	mov	r1, r2
	int sd = OBJ_TO_SD(obj);
   29554:	6807      	ldr	r7, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   29556:	aa03      	add	r2, sp, #12
   29558:	4628      	mov	r0, r5
	struct nrf_timeval nrf_timeo = { 0 };
   2955a:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   2955e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   29560:	f7f5 fb40 	bl	1ebe4 <z_to_nrf_optname>
   29564:	2800      	cmp	r0, #0
   29566:	da07      	bge.n	29578 <nrf91_socket_offload_setsockopt+0x30>
		errno = ENOPROTOOPT;
   29568:	f7fe ff51 	bl	2840e <__errno>
   2956c:	236d      	movs	r3, #109	; 0x6d
   2956e:	6003      	str	r3, [r0, #0]
		return -1;
   29570:	f04f 30ff 	mov.w	r0, #4294967295
}
   29574:	b007      	add	sp, #28
   29576:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   29578:	2d01      	cmp	r5, #1
   2957a:	d112      	bne.n	295a2 <nrf91_socket_offload_setsockopt+0x5a>
   2957c:	f1a1 0214 	sub.w	r2, r1, #20
   29580:	2a01      	cmp	r2, #1
   29582:	d806      	bhi.n	29592 <nrf91_socket_offload_setsockopt+0x4a>
		if (optval != NULL) {
   29584:	b12c      	cbz	r4, 29592 <nrf91_socket_offload_setsockopt+0x4a>
			nrf_optlen = sizeof(struct nrf_timeval);
   29586:	2608      	movs	r6, #8
			nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   29588:	6823      	ldr	r3, [r4, #0]
   2958a:	9304      	str	r3, [sp, #16]
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2958c:	68a3      	ldr	r3, [r4, #8]
			nrf_optval = &nrf_timeo;
   2958e:	ac04      	add	r4, sp, #16
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   29590:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   29592:	4623      	mov	r3, r4
   29594:	4629      	mov	r1, r5
   29596:	4638      	mov	r0, r7
   29598:	9a03      	ldr	r2, [sp, #12]
   2959a:	9600      	str	r6, [sp, #0]
   2959c:	f7fa fd80 	bl	240a0 <nrf_setsockopt>
	return retval;
   295a0:	e7e8      	b.n	29574 <nrf91_socket_offload_setsockopt+0x2c>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   295a2:	f5b5 7f8d 	cmp.w	r5, #282	; 0x11a
   295a6:	d1f4      	bne.n	29592 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   295a8:	290c      	cmp	r1, #12
   295aa:	bf08      	it	eq
   295ac:	2604      	moveq	r6, #4
   295ae:	e7f0      	b.n	29592 <nrf91_socket_offload_setsockopt+0x4a>

000295b0 <nrf91_socket_offload_getsockopt>:
{
   295b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   295b4:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   295b6:	2300      	movs	r3, #0
{
   295b8:	b086      	sub	sp, #24
   295ba:	460f      	mov	r7, r1
   295bc:	4615      	mov	r5, r2
	struct nrf_timeval nrf_timeo = {0, 0};
   295be:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   295c2:	2308      	movs	r3, #8
	int sd = OBJ_TO_SD(obj);
   295c4:	6806      	ldr	r6, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   295c6:	4629      	mov	r1, r5
   295c8:	4638      	mov	r0, r7
   295ca:	eb0d 0203 	add.w	r2, sp, r3
{
   295ce:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   295d2:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   295d4:	f7f5 fb06 	bl	1ebe4 <z_to_nrf_optname>
   295d8:	2800      	cmp	r0, #0
   295da:	da09      	bge.n	295f0 <nrf91_socket_offload_getsockopt+0x40>
		errno = ENOPROTOOPT;
   295dc:	f7fe ff17 	bl	2840e <__errno>
   295e0:	236d      	movs	r3, #109	; 0x6d
		return -1;
   295e2:	f04f 36ff 	mov.w	r6, #4294967295
		errno = ENOPROTOOPT;
   295e6:	6003      	str	r3, [r0, #0]
}
   295e8:	4630      	mov	r0, r6
   295ea:	b006      	add	sp, #24
   295ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   295f0:	2f01      	cmp	r7, #1
   295f2:	d11c      	bne.n	2962e <nrf91_socket_offload_getsockopt+0x7e>
   295f4:	f1a5 0314 	sub.w	r3, r5, #20
   295f8:	2b01      	cmp	r3, #1
   295fa:	d818      	bhi.n	2962e <nrf91_socket_offload_getsockopt+0x7e>
		nrf_optlen = &nrf_timeo_size;
   295fc:	aa03      	add	r2, sp, #12
		nrf_optval = &nrf_timeo;
   295fe:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   29600:	4630      	mov	r0, r6
   29602:	9200      	str	r2, [sp, #0]
   29604:	4639      	mov	r1, r7
   29606:	9a02      	ldr	r2, [sp, #8]
   29608:	f7fa fe88 	bl	2431c <nrf_getsockopt>
	if (retval == 0) {
   2960c:	4606      	mov	r6, r0
   2960e:	2800      	cmp	r0, #0
   29610:	d1ea      	bne.n	295e8 <nrf91_socket_offload_getsockopt+0x38>
		if (level == SOL_SOCKET) {
   29612:	2f01      	cmp	r7, #1
   29614:	d1e8      	bne.n	295e8 <nrf91_socket_offload_getsockopt+0x38>
			if (optname == SO_ERROR) {
   29616:	2d04      	cmp	r5, #4
   29618:	d10c      	bne.n	29634 <nrf91_socket_offload_getsockopt+0x84>
				if (*(int *)optval != 0) {
   2961a:	6820      	ldr	r0, [r4, #0]
   2961c:	2800      	cmp	r0, #0
   2961e:	d0e3      	beq.n	295e8 <nrf91_socket_offload_getsockopt+0x38>
					nrf_modem_os_errno_set(*(int *)optval);
   29620:	f7ff ff68 	bl	294f4 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   29624:	f7fe fef3 	bl	2840e <__errno>
   29628:	6803      	ldr	r3, [r0, #0]
   2962a:	6023      	str	r3, [r4, #0]
   2962c:	e7dc      	b.n	295e8 <nrf91_socket_offload_getsockopt+0x38>
	nrf_socklen_t *nrf_optlen = (nrf_socklen_t *)optlen;
   2962e:	4642      	mov	r2, r8
   29630:	4623      	mov	r3, r4
   29632:	e7e5      	b.n	29600 <nrf91_socket_offload_getsockopt+0x50>
			} else if ((optname == SO_RCVTIMEO) ||
   29634:	3d14      	subs	r5, #20
   29636:	2d01      	cmp	r5, #1
   29638:	d8d6      	bhi.n	295e8 <nrf91_socket_offload_getsockopt+0x38>
					nrf_timeo.tv_sec;
   2963a:	9b04      	ldr	r3, [sp, #16]
   2963c:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   29640:	9b05      	ldr	r3, [sp, #20]
   29642:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   29644:	2310      	movs	r3, #16
   29646:	f8c8 3000 	str.w	r3, [r8]
   2964a:	e7cd      	b.n	295e8 <nrf91_socket_offload_getsockopt+0x38>

0002964c <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   2964c:	6800      	ldr	r0, [r0, #0]
   2964e:	f000 bf13 	b.w	2a478 <nrf_listen>

00029652 <nrf91_socket_offload_freeaddrinfo>:
{
   29652:	b538      	push	{r3, r4, r5, lr}
   29654:	4604      	mov	r4, r0
	while (next != NULL) {
   29656:	b904      	cbnz	r4, 2965a <nrf91_socket_offload_freeaddrinfo+0x8>
}
   29658:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   2965a:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   2965c:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   2965e:	f001 fef2 	bl	2b446 <k_free>
		k_free(this);
   29662:	4620      	mov	r0, r4
   29664:	f001 feef 	bl	2b446 <k_free>
		next = next->ai_next;
   29668:	462c      	mov	r4, r5
   2966a:	e7f4      	b.n	29656 <nrf91_socket_offload_freeaddrinfo+0x4>

0002966c <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   2966c:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   2966e:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   29670:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   29672:	4603      	mov	r3, r0
{
   29674:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   29676:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2967a:	f101 0420 	add.w	r4, r1, #32
   2967e:	f101 0210 	add.w	r2, r1, #16
   29682:	f852 5b04 	ldr.w	r5, [r2], #4
   29686:	42a2      	cmp	r2, r4
   29688:	f843 5b04 	str.w	r5, [r3], #4
   2968c:	d1f9      	bne.n	29682 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   2968e:	6a0b      	ldr	r3, [r1, #32]
   29690:	7503      	strb	r3, [r0, #20]
}
   29692:	bd30      	pop	{r4, r5, pc}

00029694 <z_to_nrf_ipv6>:
{
   29694:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   29696:	2124      	movs	r1, #36	; 0x24
{
   29698:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2969a:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   2969c:	8841      	ldrh	r1, [r0, #2]
{
   2969e:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   296a0:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   296a2:	2102      	movs	r1, #2
   296a4:	1d04      	adds	r4, r0, #4
   296a6:	6059      	str	r1, [r3, #4]
   296a8:	f103 0610 	add.w	r6, r3, #16
   296ac:	f100 0714 	add.w	r7, r0, #20
   296b0:	4635      	mov	r5, r6
   296b2:	6820      	ldr	r0, [r4, #0]
   296b4:	6861      	ldr	r1, [r4, #4]
   296b6:	3408      	adds	r4, #8
   296b8:	c503      	stmia	r5!, {r0, r1}
   296ba:	42bc      	cmp	r4, r7
   296bc:	462e      	mov	r6, r5
   296be:	d1f7      	bne.n	296b0 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   296c0:	7d12      	ldrb	r2, [r2, #20]
   296c2:	621a      	str	r2, [r3, #32]
}
   296c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000296c6 <nrf91_socket_offload_sendto>:
{
   296c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   296ca:	4604      	mov	r4, r0
   296cc:	b08c      	sub	sp, #48	; 0x30
   296ce:	9812      	ldr	r0, [sp, #72]	; 0x48
   296d0:	460d      	mov	r5, r1
   296d2:	4616      	mov	r6, r2
   296d4:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   296d6:	6824      	ldr	r4, [r4, #0]
	if (to == NULL) {
   296d8:	b930      	cbnz	r0, 296e8 <nrf91_socket_offload_sendto+0x22>
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   296da:	9013      	str	r0, [sp, #76]	; 0x4c
   296dc:	4620      	mov	r0, r4
}
   296de:	b00c      	add	sp, #48	; 0x30
   296e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   296e4:	f7fa bbd0 	b.w	23e88 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   296e8:	f8b0 c000 	ldrh.w	ip, [r0]
   296ec:	f1bc 0f01 	cmp.w	ip, #1
   296f0:	d112      	bne.n	29718 <nrf91_socket_offload_sendto+0x52>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   296f2:	2510      	movs	r5, #16
	nrf_out->sin_port = ptr->sin_port;
   296f4:	8846      	ldrh	r6, [r0, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   296f6:	6840      	ldr	r0, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   296f8:	f88d 500c 	strb.w	r5, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   296fc:	9006      	str	r0, [sp, #24]
		retval = nrf_sendto(sd, buf, len, flags,
   296fe:	a803      	add	r0, sp, #12
	nrf_out->sin_port = ptr->sin_port;
   29700:	f8ad 6014 	strh.w	r6, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   29704:	f8cd c010 	str.w	ip, [sp, #16]
		retval = nrf_sendto(sd, buf, len, flags,
   29708:	9501      	str	r5, [sp, #4]
   2970a:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, flags,
   2970c:	4620      	mov	r0, r4
   2970e:	f7fa fbbb 	bl	23e88 <nrf_sendto>
}
   29712:	b00c      	add	sp, #48	; 0x30
   29714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   29718:	f1bc 0f02 	cmp.w	ip, #2
   2971c:	d10b      	bne.n	29736 <nrf91_socket_offload_sendto+0x70>
		z_to_nrf_ipv6(to, &ipv6);
   2971e:	f10d 080c 	add.w	r8, sp, #12
   29722:	4641      	mov	r1, r8
   29724:	f7ff ffb6 	bl	29694 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, flags,
   29728:	2324      	movs	r3, #36	; 0x24
   2972a:	4632      	mov	r2, r6
   2972c:	e9cd 8300 	strd	r8, r3, [sp]
   29730:	4629      	mov	r1, r5
   29732:	463b      	mov	r3, r7
   29734:	e7ea      	b.n	2970c <nrf91_socket_offload_sendto+0x46>
		errno = EAFNOSUPPORT;
   29736:	f7fe fe6a 	bl	2840e <__errno>
   2973a:	236a      	movs	r3, #106	; 0x6a
   2973c:	6003      	str	r3, [r0, #0]
		retval = -1;
   2973e:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   29742:	e7e6      	b.n	29712 <nrf91_socket_offload_sendto+0x4c>

00029744 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   29744:	2300      	movs	r3, #0
{
   29746:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   29748:	e9cd 3300 	strd	r3, r3, [sp]
   2974c:	f7ff ffbb 	bl	296c6 <nrf91_socket_offload_sendto>
}
   29750:	b003      	add	sp, #12
   29752:	f85d fb04 	ldr.w	pc, [sp], #4

00029756 <nrf91_socket_offload_connect>:
{
   29756:	4603      	mov	r3, r0
   29758:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   2975a:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   2975c:	880b      	ldrh	r3, [r1, #0]
{
   2975e:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   29760:	2b01      	cmp	r3, #1
{
   29762:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   29764:	d10e      	bne.n	29784 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   29766:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   29768:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   2976a:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2976c:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2976e:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   29772:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   29776:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   29778:	4620      	mov	r0, r4
   2977a:	a901      	add	r1, sp, #4
   2977c:	f000 fd9a 	bl	2a2b4 <nrf_connect>
}
   29780:	b00a      	add	sp, #40	; 0x28
   29782:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   29784:	2b02      	cmp	r3, #2
   29786:	d104      	bne.n	29792 <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   29788:	a901      	add	r1, sp, #4
   2978a:	f7ff ff83 	bl	29694 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   2978e:	2224      	movs	r2, #36	; 0x24
   29790:	e7f2      	b.n	29778 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   29792:	4620      	mov	r0, r4
}
   29794:	b00a      	add	sp, #40	; 0x28
   29796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2979a:	f000 bd8b 	b.w	2a2b4 <nrf_connect>

0002979e <nrf91_socket_offload_bind>:
{
   2979e:	4603      	mov	r3, r0
   297a0:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   297a2:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   297a4:	880b      	ldrh	r3, [r1, #0]
{
   297a6:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   297a8:	2b01      	cmp	r3, #1
{
   297aa:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   297ac:	d10e      	bne.n	297cc <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   297ae:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   297b0:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   297b2:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   297b4:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   297b6:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   297ba:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   297be:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   297c0:	4620      	mov	r0, r4
   297c2:	a901      	add	r1, sp, #4
   297c4:	f000 fe0f 	bl	2a3e6 <nrf_bind>
}
   297c8:	b00a      	add	sp, #40	; 0x28
   297ca:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   297cc:	2b02      	cmp	r3, #2
   297ce:	d104      	bne.n	297da <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   297d0:	a901      	add	r1, sp, #4
   297d2:	f7ff ff5f 	bl	29694 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   297d6:	2224      	movs	r2, #36	; 0x24
   297d8:	e7f2      	b.n	297c0 <nrf91_socket_offload_bind+0x22>
		errno = EAFNOSUPPORT;
   297da:	f7fe fe18 	bl	2840e <__errno>
   297de:	236a      	movs	r3, #106	; 0x6a
   297e0:	6003      	str	r3, [r0, #0]
		retval = -1;
   297e2:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   297e6:	e7ef      	b.n	297c8 <nrf91_socket_offload_bind+0x2a>

000297e8 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   297e8:	f7fb bd72 	b.w	252d0 <z_impl_k_mutex_lock>

000297ec <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   297ec:	f7fb bdea 	b.w	253c4 <z_impl_k_mutex_unlock>

000297f0 <nrf91_socket_offload_recvfrom>:
{
   297f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   297f4:	4605      	mov	r5, r0
	if (ctx->lock) {
   297f6:	6840      	ldr	r0, [r0, #4]
{
   297f8:	b08d      	sub	sp, #52	; 0x34
   297fa:	460c      	mov	r4, r1
   297fc:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   29800:	4691      	mov	r9, r2
   29802:	469a      	mov	sl, r3
	if (ctx->lock) {
   29804:	b108      	cbz	r0, 2980a <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   29806:	f7ff fff1 	bl	297ec <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   2980a:	f8d5 b000 	ldr.w	fp, [r5]
	if (from == NULL || fromlen == NULL) {
   2980e:	b106      	cbz	r6, 29812 <nrf91_socket_offload_recvfrom+0x22>
   29810:	b9af      	cbnz	r7, 2983e <nrf91_socket_offload_recvfrom+0x4e>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   29812:	2300      	movs	r3, #0
   29814:	4621      	mov	r1, r4
   29816:	e9cd 3300 	strd	r3, r3, [sp]
   2981a:	464a      	mov	r2, r9
   2981c:	4653      	mov	r3, sl
   2981e:	4658      	mov	r0, fp
   29820:	f000 feef 	bl	2a602 <nrf_recvfrom>
   29824:	4604      	mov	r4, r0
	if (ctx->lock) {
   29826:	6868      	ldr	r0, [r5, #4]
   29828:	b128      	cbz	r0, 29836 <nrf91_socket_offload_recvfrom+0x46>
		k_mutex_lock(ctx->lock, K_FOREVER);
   2982a:	f04f 32ff 	mov.w	r2, #4294967295
   2982e:	f04f 33ff 	mov.w	r3, #4294967295
   29832:	f7ff ffd9 	bl	297e8 <k_mutex_lock.constprop.0.isra.0>
}
   29836:	4620      	mov	r0, r4
   29838:	b00d      	add	sp, #52	; 0x34
   2983a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   2983e:	f10d 080c 	add.w	r8, sp, #12
   29842:	2224      	movs	r2, #36	; 0x24
   29844:	2100      	movs	r1, #0
   29846:	4640      	mov	r0, r8
   29848:	f001 fe49 	bl	2b4de <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2984c:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   2984e:	ab02      	add	r3, sp, #8
   29850:	4621      	mov	r1, r4
   29852:	e9cd 8300 	strd	r8, r3, [sp]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   29856:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   29858:	4653      	mov	r3, sl
   2985a:	464a      	mov	r2, r9
   2985c:	4658      	mov	r0, fp
   2985e:	f000 fed0 	bl	2a602 <nrf_recvfrom>
		if (retval < 0) {
   29862:	1e04      	subs	r4, r0, #0
   29864:	dbdf      	blt.n	29826 <nrf91_socket_offload_recvfrom+0x36>
		if (cliaddr->sa_family == NRF_AF_INET &&
   29866:	9b04      	ldr	r3, [sp, #16]
   29868:	2b01      	cmp	r3, #1
   2986a:	d10b      	bne.n	29884 <nrf91_socket_offload_recvfrom+0x94>
   2986c:	9a02      	ldr	r2, [sp, #8]
   2986e:	2a10      	cmp	r2, #16
   29870:	d1d9      	bne.n	29826 <nrf91_socket_offload_recvfrom+0x36>
	ptr->sin_family = AF_INET;
   29872:	8033      	strh	r3, [r6, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   29874:	9b06      	ldr	r3, [sp, #24]
	ptr->sin_port = nrf_in->sin_port;
   29876:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2987a:	6073      	str	r3, [r6, #4]
			*fromlen = sizeof(struct sockaddr_in);
   2987c:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   2987e:	8072      	strh	r2, [r6, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   29880:	603b      	str	r3, [r7, #0]
   29882:	e7d0      	b.n	29826 <nrf91_socket_offload_recvfrom+0x36>
		} else if (cliaddr->sa_family == NRF_AF_INET6 &&
   29884:	2b02      	cmp	r3, #2
   29886:	d1ce      	bne.n	29826 <nrf91_socket_offload_recvfrom+0x36>
   29888:	9b02      	ldr	r3, [sp, #8]
   2988a:	2b24      	cmp	r3, #36	; 0x24
   2988c:	d1cb      	bne.n	29826 <nrf91_socket_offload_recvfrom+0x36>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   2988e:	4641      	mov	r1, r8
   29890:	4630      	mov	r0, r6
   29892:	f7ff feeb 	bl	2966c <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   29896:	2318      	movs	r3, #24
   29898:	e7f2      	b.n	29880 <nrf91_socket_offload_recvfrom+0x90>

0002989a <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2989a:	2300      	movs	r3, #0
{
   2989c:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2989e:	e9cd 3300 	strd	r3, r3, [sp]
   298a2:	f7ff ffa5 	bl	297f0 <nrf91_socket_offload_recvfrom>
}
   298a6:	b003      	add	sp, #12
   298a8:	f85d fb04 	ldr.w	pc, [sp], #4

000298ac <nrf91_socket_offload_close>:
{
   298ac:	b538      	push	{r3, r4, r5, lr}
   298ae:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   298b0:	6800      	ldr	r0, [r0, #0]
   298b2:	f7fa fab5 	bl	23e20 <nrf_close>
	if (retval == 0) {
   298b6:	4604      	mov	r4, r0
   298b8:	b910      	cbnz	r0, 298c0 <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   298ba:	4628      	mov	r0, r5
   298bc:	f7f5 fb8a 	bl	1efd4 <release_ctx>
}
   298c0:	4620      	mov	r0, r4
   298c2:	bd38      	pop	{r3, r4, r5, pc}

000298c4 <z_impl_gpio_pin_interrupt_configure>:
{
   298c4:	b430      	push	{r4, r5}
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   298c6:	0213      	lsls	r3, r2, #8
	const struct gpio_driver_api *api =
   298c8:	6884      	ldr	r4, [r0, #8]
	const struct gpio_driver_data *const data =
   298ca:	6905      	ldr	r5, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   298cc:	d506      	bpl.n	298dc <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   298ce:	2301      	movs	r3, #1
   298d0:	682d      	ldr	r5, [r5, #0]
   298d2:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   298d4:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   298d6:	bf18      	it	ne
   298d8:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   298dc:	69a4      	ldr	r4, [r4, #24]
   298de:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   298e2:	46a4      	mov	ip, r4
}
   298e4:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   298e6:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   298ea:	4760      	bx	ip

000298ec <gpio_pin_configure_dt>:
{
   298ec:	4603      	mov	r3, r0
   298ee:	b470      	push	{r4, r5, r6}
   298f0:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   298f2:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   298f4:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   298f6:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   298f8:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
   298fa:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
   298fc:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   298fe:	408c      	lsls	r4, r1
   29900:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   29902:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
   29906:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   29908:	bf14      	ite	ne
   2990a:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2990c:	43a3      	biceq	r3, r4
   2990e:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   29910:	6833      	ldr	r3, [r6, #0]
}
   29912:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   29914:	4718      	bx	r3

00029916 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   29916:	2301      	movs	r3, #1
   29918:	fa03 f101 	lsl.w	r1, r3, r1
   2991c:	6903      	ldr	r3, [r0, #16]
   2991e:	681b      	ldr	r3, [r3, #0]
   29920:	4219      	tst	r1, r3
   29922:	d003      	beq.n	2992c <gpio_pin_set+0x16>
	if (value != 0)	{
   29924:	b122      	cbz	r2, 29930 <gpio_pin_set+0x1a>
	return api->port_clear_bits_raw(port, pins);
   29926:	6883      	ldr	r3, [r0, #8]
   29928:	691b      	ldr	r3, [r3, #16]
   2992a:	e003      	b.n	29934 <gpio_pin_set+0x1e>
	if (value != 0)	{
   2992c:	2a00      	cmp	r2, #0
   2992e:	d0fa      	beq.n	29926 <gpio_pin_set+0x10>
	return api->port_set_bits_raw(port, pins);
   29930:	6883      	ldr	r3, [r0, #8]
   29932:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   29934:	4718      	bx	r3

00029936 <z_log_msg_static_create.constprop.0>:
   29936:	2300      	movs	r3, #0
   29938:	f7f1 bcfe 	b.w	1b338 <z_impl_z_log_msg_static_create>

0002993c <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   2993c:	2101      	movs	r1, #1
   2993e:	f7f5 be69 	b.w	1f614 <dk_set_led>

00029942 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   29942:	2100      	movs	r1, #0
   29944:	f7f5 be66 	b.w	1f614 <dk_set_led>

00029948 <is_notification>:
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   29948:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
   2994c:	b2db      	uxtb	r3, r3
   2994e:	2b08      	cmp	r3, #8
   29950:	bf9d      	ittte	ls
   29952:	f240 1005 	movwls	r0, #261	; 0x105
   29956:	40d8      	lsrls	r0, r3
   29958:	f000 0001 	andls.w	r0, r0, #1
{
   2995c:	2000      	movhi	r0, #0
}
   2995e:	4770      	bx	lr

00029960 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   29960:	280d      	cmp	r0, #13
   29962:	d004      	beq.n	2996e <is_lfcr+0xe>
   29964:	f1a0 030a 	sub.w	r3, r0, #10
   29968:	4258      	negs	r0, r3
   2996a:	4158      	adcs	r0, r3
   2996c:	4770      	bx	lr
		return true;
   2996e:	2001      	movs	r0, #1
}
   29970:	4770      	bx	lr

00029972 <skip_command_prefix>:
{
   29972:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   29974:	6801      	ldr	r1, [r0, #0]
{
   29976:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   29978:	1c8b      	adds	r3, r1, #2
   2997a:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   2997c:	788c      	ldrb	r4, [r1, #2]
   2997e:	4620      	mov	r0, r4
   29980:	f7ff ffee 	bl	29960 <is_lfcr>
   29984:	b910      	cbnz	r0, 2998c <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   29986:	b10c      	cbz	r4, 2998c <skip_command_prefix+0x1a>
	(*cmd)++;
   29988:	3103      	adds	r1, #3
   2998a:	6011      	str	r1, [r2, #0]
}
   2998c:	bd10      	pop	{r4, pc}

0002998e <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   2998e:	6813      	ldr	r3, [r2, #0]
   29990:	f7f6 b94c 	b.w	1fc2c <at_parser_max_params_from_str>

00029994 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   29994:	6803      	ldr	r3, [r0, #0]
   29996:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   29998:	bf86      	itte	hi
   2999a:	6840      	ldrhi	r0, [r0, #4]
   2999c:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
		return NULL;
   299a0:	2000      	movls	r0, #0
}
   299a2:	4770      	bx	lr

000299a4 <at_param_clear>:
{
   299a4:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   299a6:	7803      	ldrb	r3, [r0, #0]
{
   299a8:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   299aa:	3b02      	subs	r3, #2
   299ac:	2b01      	cmp	r3, #1
   299ae:	d802      	bhi.n	299b6 <at_param_clear+0x12>
		k_free(param->value.str_val);
   299b0:	6880      	ldr	r0, [r0, #8]
   299b2:	f001 fd48 	bl	2b446 <k_free>
	param->value.int_val = 0;
   299b6:	2200      	movs	r2, #0
   299b8:	2300      	movs	r3, #0
   299ba:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   299be:	bd10      	pop	{r4, pc}

000299c0 <at_params_list_init>:

	return 0;
}

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   299c0:	b538      	push	{r3, r4, r5, lr}
   299c2:	460d      	mov	r5, r1
	if (list == NULL) {
   299c4:	4604      	mov	r4, r0
   299c6:	b140      	cbz	r0, 299da <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   299c8:	2110      	movs	r1, #16
   299ca:	4628      	mov	r0, r5
   299cc:	f001 fd46 	bl	2b45c <k_calloc>
   299d0:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   299d2:	b128      	cbz	r0, 299e0 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   299d4:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   299d6:	6025      	str	r5, [r4, #0]
}
   299d8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   299da:	f06f 0015 	mvn.w	r0, #21
   299de:	e7fb      	b.n	299d8 <at_params_list_init+0x18>
		return -ENOMEM;
   299e0:	f06f 000b 	mvn.w	r0, #11
   299e4:	e7f8      	b.n	299d8 <at_params_list_init+0x18>

000299e6 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   299e6:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   299e8:	4604      	mov	r4, r0
   299ea:	b128      	cbz	r0, 299f8 <at_params_list_clear+0x12>
   299ec:	6843      	ldr	r3, [r0, #4]
   299ee:	b11b      	cbz	r3, 299f8 <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   299f0:	2500      	movs	r5, #0
   299f2:	6823      	ldr	r3, [r4, #0]
   299f4:	429d      	cmp	r5, r3
   299f6:	d300      	bcc.n	299fa <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   299f8:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   299fa:	6866      	ldr	r6, [r4, #4]
   299fc:	eb06 1605 	add.w	r6, r6, r5, lsl #4
   29a00:	4630      	mov	r0, r6
   29a02:	f7ff ffcf 	bl	299a4 <at_param_clear>
__ssp_bos_icheck3(memset, void *, int)
   29a06:	2210      	movs	r2, #16
   29a08:	2100      	movs	r1, #0
   29a0a:	4630      	mov	r0, r6
   29a0c:	f001 fd67 	bl	2b4de <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   29a10:	3501      	adds	r5, #1
   29a12:	e7ee      	b.n	299f2 <at_params_list_clear+0xc>

00029a14 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   29a14:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   29a16:	4604      	mov	r4, r0
   29a18:	b148      	cbz	r0, 29a2e <at_params_list_free+0x1a>
   29a1a:	6843      	ldr	r3, [r0, #4]
   29a1c:	b13b      	cbz	r3, 29a2e <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   29a1e:	2500      	movs	r5, #0
	at_params_list_clear(list);
   29a20:	f7ff ffe1 	bl	299e6 <at_params_list_clear>
	k_free(list->params);
   29a24:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   29a26:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   29a28:	f001 fd0d 	bl	2b446 <k_free>
	list->params = NULL;
   29a2c:	6065      	str	r5, [r4, #4]
}
   29a2e:	bd38      	pop	{r3, r4, r5, pc}

00029a30 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   29a30:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   29a32:	b178      	cbz	r0, 29a54 <at_params_empty_put+0x24>
   29a34:	6843      	ldr	r3, [r0, #4]
   29a36:	b16b      	cbz	r3, 29a54 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   29a38:	f7ff ffac 	bl	29994 <at_params_get>

	if (param == NULL) {
   29a3c:	4604      	mov	r4, r0
   29a3e:	b148      	cbz	r0, 29a54 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   29a40:	f7ff ffb0 	bl	299a4 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   29a44:	2304      	movs	r3, #4
	param->value.int_val = 0;
   29a46:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   29a48:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   29a4a:	2300      	movs	r3, #0

	return 0;
   29a4c:	2000      	movs	r0, #0
	param->value.int_val = 0;
   29a4e:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   29a52:	bd10      	pop	{r4, pc}
		return -EINVAL;
   29a54:	f06f 0015 	mvn.w	r0, #21
   29a58:	e7fb      	b.n	29a52 <at_params_empty_put+0x22>

00029a5a <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   29a5a:	b570      	push	{r4, r5, r6, lr}
   29a5c:	4616      	mov	r6, r2
   29a5e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   29a60:	b168      	cbz	r0, 29a7e <at_params_int_put+0x24>
   29a62:	6843      	ldr	r3, [r0, #4]
   29a64:	b15b      	cbz	r3, 29a7e <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   29a66:	f7ff ff95 	bl	29994 <at_params_get>

	if (param == NULL) {
   29a6a:	4604      	mov	r4, r0
   29a6c:	b138      	cbz	r0, 29a7e <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   29a6e:	f7ff ff99 	bl	299a4 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   29a72:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   29a74:	2000      	movs	r0, #0
	param->value.int_val = value;
   29a76:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   29a7a:	7023      	strb	r3, [r4, #0]
}
   29a7c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   29a7e:	f06f 0015 	mvn.w	r0, #21
   29a82:	e7fb      	b.n	29a7c <at_params_int_put+0x22>

00029a84 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   29a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a86:	4617      	mov	r7, r2
   29a88:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   29a8a:	b1c0      	cbz	r0, 29abe <at_params_string_put+0x3a>
   29a8c:	6843      	ldr	r3, [r0, #4]
   29a8e:	b1b3      	cbz	r3, 29abe <at_params_string_put+0x3a>
   29a90:	b1aa      	cbz	r2, 29abe <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   29a92:	f7ff ff7f 	bl	29994 <at_params_get>

	if (param == NULL) {
   29a96:	4604      	mov	r4, r0
   29a98:	b188      	cbz	r0, 29abe <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   29a9a:	1c68      	adds	r0, r5, #1
   29a9c:	f001 fcda 	bl	2b454 <k_malloc>

	if (param_value == NULL) {
   29aa0:	4606      	mov	r6, r0
   29aa2:	b178      	cbz	r0, 29ac4 <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29aa4:	462a      	mov	r2, r5
   29aa6:	4639      	mov	r1, r7
   29aa8:	f001 fd0c 	bl	2b4c4 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   29aac:	4620      	mov	r0, r4
   29aae:	f7ff ff79 	bl	299a4 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   29ab2:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   29ab4:	2000      	movs	r0, #0
	param->size = str_len;
   29ab6:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   29ab8:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   29aba:	60a6      	str	r6, [r4, #8]
}
   29abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   29abe:	f06f 0015 	mvn.w	r0, #21
   29ac2:	e7fb      	b.n	29abc <at_params_string_put+0x38>
		return -ENOMEM;
   29ac4:	f06f 000b 	mvn.w	r0, #11
   29ac8:	e7f8      	b.n	29abc <at_params_string_put+0x38>

00029aca <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   29aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29acc:	4617      	mov	r7, r2
   29ace:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   29ad0:	b1c0      	cbz	r0, 29b04 <at_params_array_put+0x3a>
   29ad2:	6843      	ldr	r3, [r0, #4]
   29ad4:	b1b3      	cbz	r3, 29b04 <at_params_array_put+0x3a>
   29ad6:	b1aa      	cbz	r2, 29b04 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   29ad8:	f7ff ff5c 	bl	29994 <at_params_get>

	if (param == NULL) {
   29adc:	4604      	mov	r4, r0
   29ade:	b188      	cbz	r0, 29b04 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   29ae0:	4628      	mov	r0, r5
   29ae2:	f001 fcb7 	bl	2b454 <k_malloc>

	if (param_value == NULL) {
   29ae6:	4606      	mov	r6, r0
   29ae8:	b178      	cbz	r0, 29b0a <at_params_array_put+0x40>
   29aea:	462a      	mov	r2, r5
   29aec:	4639      	mov	r1, r7
   29aee:	f001 fce9 	bl	2b4c4 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   29af2:	4620      	mov	r0, r4
   29af4:	f7ff ff56 	bl	299a4 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   29af8:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   29afa:	2000      	movs	r0, #0
	param->size = array_len;
   29afc:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   29afe:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   29b00:	60a6      	str	r6, [r4, #8]
}
   29b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   29b04:	f06f 0015 	mvn.w	r0, #21
   29b08:	e7fb      	b.n	29b02 <at_params_array_put+0x38>
		return -ENOMEM;
   29b0a:	f06f 000b 	mvn.w	r0, #11
   29b0e:	e7f8      	b.n	29b02 <at_params_array_put+0x38>

00029b10 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   29b10:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   29b12:	b1b0      	cbz	r0, 29b42 <at_params_short_get+0x32>
   29b14:	6843      	ldr	r3, [r0, #4]
   29b16:	b1a3      	cbz	r3, 29b42 <at_params_short_get+0x32>
   29b18:	b19a      	cbz	r2, 29b42 <at_params_short_get+0x32>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   29b1a:	f7ff ff3b 	bl	29994 <at_params_get>

	if (param == NULL) {
   29b1e:	b180      	cbz	r0, 29b42 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   29b20:	7803      	ldrb	r3, [r0, #0]
   29b22:	2b01      	cmp	r3, #1
   29b24:	d10d      	bne.n	29b42 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   29b26:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   29b2a:	f513 4000 	adds.w	r0, r3, #32768	; 0x8000
   29b2e:	f141 0100 	adc.w	r1, r1, #0
   29b32:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   29b36:	f171 0100 	sbcs.w	r1, r1, #0
   29b3a:	d202      	bcs.n	29b42 <at_params_short_get+0x32>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   29b3c:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   29b3e:	8013      	strh	r3, [r2, #0]
}
   29b40:	bd08      	pop	{r3, pc}
		return -EINVAL;
   29b42:	f06f 0015 	mvn.w	r0, #21
   29b46:	e7fb      	b.n	29b40 <at_params_short_get+0x30>

00029b48 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   29b48:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   29b4a:	b190      	cbz	r0, 29b72 <at_params_unsigned_short_get+0x2a>
   29b4c:	6843      	ldr	r3, [r0, #4]
   29b4e:	b183      	cbz	r3, 29b72 <at_params_unsigned_short_get+0x2a>
   29b50:	b17a      	cbz	r2, 29b72 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   29b52:	f7ff ff1f 	bl	29994 <at_params_get>

	if (param == NULL) {
   29b56:	b160      	cbz	r0, 29b72 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   29b58:	7803      	ldrb	r3, [r0, #0]
   29b5a:	2b01      	cmp	r3, #1
   29b5c:	d109      	bne.n	29b72 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   29b5e:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   29b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   29b66:	f171 0100 	sbcs.w	r1, r1, #0
   29b6a:	d202      	bcs.n	29b72 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
   29b6c:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   29b6e:	8013      	strh	r3, [r2, #0]
}
   29b70:	bd08      	pop	{r3, pc}
		return -EINVAL;
   29b72:	f06f 0015 	mvn.w	r0, #21
   29b76:	e7fb      	b.n	29b70 <at_params_unsigned_short_get+0x28>

00029b78 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   29b78:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   29b7a:	b190      	cbz	r0, 29ba2 <at_params_int_get+0x2a>
   29b7c:	6843      	ldr	r3, [r0, #4]
   29b7e:	b183      	cbz	r3, 29ba2 <at_params_int_get+0x2a>
   29b80:	b17a      	cbz	r2, 29ba2 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   29b82:	f7ff ff07 	bl	29994 <at_params_get>

	if (param == NULL) {
   29b86:	b160      	cbz	r0, 29ba2 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   29b88:	7803      	ldrb	r3, [r0, #0]
   29b8a:	2b01      	cmp	r3, #1
   29b8c:	d109      	bne.n	29ba2 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   29b8e:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   29b92:	f113 4000 	adds.w	r0, r3, #2147483648	; 0x80000000
   29b96:	f141 0100 	adc.w	r1, r1, #0
   29b9a:	b911      	cbnz	r1, 29ba2 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   29b9c:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   29b9e:	6013      	str	r3, [r2, #0]
}
   29ba0:	bd08      	pop	{r3, pc}
		return -EINVAL;
   29ba2:	f06f 0015 	mvn.w	r0, #21
   29ba6:	e7fb      	b.n	29ba0 <at_params_int_get+0x28>

00029ba8 <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   29ba8:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   29baa:	b170      	cbz	r0, 29bca <at_params_int64_get+0x22>
   29bac:	6843      	ldr	r3, [r0, #4]
   29bae:	b163      	cbz	r3, 29bca <at_params_int64_get+0x22>
   29bb0:	b15a      	cbz	r2, 29bca <at_params_int64_get+0x22>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   29bb2:	f7ff feef 	bl	29994 <at_params_get>

	if (param == NULL) {
   29bb6:	b140      	cbz	r0, 29bca <at_params_int64_get+0x22>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   29bb8:	7803      	ldrb	r3, [r0, #0]
   29bba:	2b01      	cmp	r3, #1
   29bbc:	d105      	bne.n	29bca <at_params_int64_get+0x22>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   29bbe:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   29bc2:	e9c2 0100 	strd	r0, r1, [r2]
	return 0;
   29bc6:	2000      	movs	r0, #0
}
   29bc8:	bd08      	pop	{r3, pc}
		return -EINVAL;
   29bca:	f06f 0015 	mvn.w	r0, #21
   29bce:	e7fb      	b.n	29bc8 <at_params_int64_get+0x20>

00029bd0 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   29bd0:	b570      	push	{r4, r5, r6, lr}
   29bd2:	4615      	mov	r5, r2
   29bd4:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL || len == NULL) {
   29bd6:	b1a8      	cbz	r0, 29c04 <at_params_string_get+0x34>
   29bd8:	6843      	ldr	r3, [r0, #4]
   29bda:	b19b      	cbz	r3, 29c04 <at_params_string_get+0x34>
   29bdc:	b192      	cbz	r2, 29c04 <at_params_string_get+0x34>
   29bde:	b18c      	cbz	r4, 29c04 <at_params_string_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   29be0:	f7ff fed8 	bl	29994 <at_params_get>

	if (param == NULL) {
   29be4:	b170      	cbz	r0, 29c04 <at_params_string_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   29be6:	7803      	ldrb	r3, [r0, #0]
   29be8:	2b02      	cmp	r3, #2
   29bea:	d10b      	bne.n	29c04 <at_params_string_get+0x34>
		return param->size;
   29bec:	6846      	ldr	r6, [r0, #4]
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);

	if (*len < param_len) {
   29bee:	6823      	ldr	r3, [r4, #0]
   29bf0:	42b3      	cmp	r3, r6
   29bf2:	d30a      	bcc.n	29c0a <at_params_string_get+0x3a>
   29bf4:	6881      	ldr	r1, [r0, #8]
   29bf6:	4632      	mov	r2, r6
   29bf8:	4628      	mov	r0, r5
   29bfa:	f001 fc63 	bl	2b4c4 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   29bfe:	2000      	movs	r0, #0
	*len = param_len;
   29c00:	6026      	str	r6, [r4, #0]
}
   29c02:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   29c04:	f06f 0015 	mvn.w	r0, #21
   29c08:	e7fb      	b.n	29c02 <at_params_string_get+0x32>
		return -ENOMEM;
   29c0a:	f06f 000b 	mvn.w	r0, #11
   29c0e:	e7f8      	b.n	29c02 <at_params_string_get+0x32>

00029c10 <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   29c10:	4602      	mov	r2, r0
{
   29c12:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   29c14:	b170      	cbz	r0, 29c34 <at_params_valid_count_get+0x24>
   29c16:	6840      	ldr	r0, [r0, #4]
   29c18:	b160      	cbz	r0, 29c34 <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   29c1a:	6811      	ldr	r1, [r2, #0]
   29c1c:	b119      	cbz	r1, 29c26 <at_params_valid_count_get+0x16>
   29c1e:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   29c20:	b108      	cbz	r0, 29c26 <at_params_valid_count_get+0x16>
   29c22:	7803      	ldrb	r3, [r0, #0]
   29c24:	b90b      	cbnz	r3, 29c2a <at_params_valid_count_get+0x1a>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   29c26:	4608      	mov	r0, r1
   29c28:	bd08      	pop	{r3, pc}
		param = at_params_get(list, valid_i);
   29c2a:	4610      	mov	r0, r2
		valid_i += 1;
   29c2c:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   29c2e:	f7ff feb1 	bl	29994 <at_params_get>
   29c32:	e7f5      	b.n	29c20 <at_params_valid_count_get+0x10>
		return -EINVAL;
   29c34:	f06f 0115 	mvn.w	r1, #21
   29c38:	e7f5      	b.n	29c26 <at_params_valid_count_get+0x16>

00029c3a <z_log_msg_static_create.constprop.0>:
   29c3a:	2300      	movs	r3, #0
   29c3c:	f7f1 bb7c 	b.w	1b338 <z_impl_z_log_msg_static_create>

00029c40 <lte_lc_connect_async>:
{
   29c40:	b508      	push	{r3, lr}
	if (handler) {
   29c42:	b130      	cbz	r0, 29c52 <lte_lc_connect_async+0x12>
		event_handler_list_append_handler(handler);
   29c44:	f7f6 ff84 	bl	20b50 <event_handler_list_append_handler>
}
   29c48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return connect_lte(false);
   29c4c:	2000      	movs	r0, #0
   29c4e:	f7f6 beb5 	b.w	209bc <connect_lte>
	} else if (event_handler_list_is_empty()) {
   29c52:	f7f6 ff75 	bl	20b40 <event_handler_list_is_empty>
   29c56:	2800      	cmp	r0, #0
   29c58:	d0f6      	beq.n	29c48 <lte_lc_connect_async+0x8>
}
   29c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   29c5e:	f7f6 b891 	b.w	1fd84 <lte_lc_connect_async.part.0>

00029c62 <lte_lc_init_and_connect_async>:
{
   29c62:	b510      	push	{r4, lr}
   29c64:	4604      	mov	r4, r0
	err = init_and_config();
   29c66:	f7f6 fd9f 	bl	207a8 <init_and_config>
	if (err) {
   29c6a:	b920      	cbnz	r0, 29c76 <lte_lc_init_and_connect_async+0x14>
	return lte_lc_connect_async(handler);
   29c6c:	4620      	mov	r0, r4
}
   29c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return lte_lc_connect_async(handler);
   29c72:	f7ff bfe5 	b.w	29c40 <lte_lc_connect_async>
}
   29c76:	f06f 000d 	mvn.w	r0, #13
   29c7a:	bd10      	pop	{r4, pc}

00029c7c <z_log_msg_static_create.constprop.0>:
   29c7c:	2300      	movs	r3, #0
   29c7e:	f7f1 bb5b 	b.w	1b338 <z_impl_z_log_msg_static_create>

00029c82 <string_to_int>:
{
   29c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29c84:	460c      	mov	r4, r1
   29c86:	4605      	mov	r5, r0
   29c88:	4616      	mov	r6, r2
	errno = 0;
   29c8a:	f7fe fbc0 	bl	2840e <__errno>
   29c8e:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   29c90:	4622      	mov	r2, r4
	errno = 0;
   29c92:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   29c94:	a901      	add	r1, sp, #4
   29c96:	4628      	mov	r0, r5
   29c98:	f7fc fd86 	bl	267a8 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   29c9c:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   29c9e:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   29ca0:	42ab      	cmp	r3, r5
   29ca2:	d103      	bne.n	29cac <string_to_int+0x2a>
		return -ENODATA;
   29ca4:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   29ca8:	b002      	add	sp, #8
   29caa:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   29cac:	781b      	ldrb	r3, [r3, #0]
   29cae:	2b00      	cmp	r3, #0
   29cb0:	d1f8      	bne.n	29ca4 <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   29cb2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   29cb6:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   29cb8:	3303      	adds	r3, #3
   29cba:	d802      	bhi.n	29cc2 <string_to_int+0x40>
	return 0;
   29cbc:	2000      	movs	r0, #0
	*output = temp;
   29cbe:	6034      	str	r4, [r6, #0]
	return 0;
   29cc0:	e7f2      	b.n	29ca8 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   29cc2:	f7fe fba4 	bl	2840e <__errno>
   29cc6:	6803      	ldr	r3, [r0, #0]
   29cc8:	2b22      	cmp	r3, #34	; 0x22
   29cca:	d1f7      	bne.n	29cbc <string_to_int+0x3a>
   29ccc:	e7ea      	b.n	29ca4 <string_to_int+0x22>

00029cce <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   29cce:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   29cd0:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   29cd2:	b087      	sub	sp, #28
   29cd4:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   29cd6:	ab01      	add	r3, sp, #4
   29cd8:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   29cda:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   29cdc:	f7ff ff78 	bl	29bd0 <at_params_string_get>
	if (err) {
   29ce0:	b968      	cbnz	r0, 29cfe <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   29ce2:	9b01      	ldr	r3, [sp, #4]
	if (string_to_int(str_buf, base, output)) {
   29ce4:	4622      	mov	r2, r4
	str_buf[len] = '\0';
   29ce6:	3318      	adds	r3, #24
   29ce8:	446b      	add	r3, sp
   29cea:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   29cee:	4629      	mov	r1, r5
   29cf0:	a802      	add	r0, sp, #8
   29cf2:	f7ff ffc6 	bl	29c82 <string_to_int>
		return -ENODATA;
   29cf6:	2800      	cmp	r0, #0
   29cf8:	bf18      	it	ne
   29cfa:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   29cfe:	b007      	add	sp, #28
   29d00:	bd30      	pop	{r4, r5, pc}

00029d02 <on_modem_init>:
	if (err) {
		LOG_ERR("Failed to unlock PLMN, err %d", err);
		return;
	}
#endif
}
   29d02:	4770      	bx	lr

00029d04 <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   29d04:	f7f6 bf06 	b.w	20b14 <lte_lc_deinit>

00029d08 <on_modem_lib_init>:
	if (ret != 0) {
   29d08:	b908      	cbnz	r0, 29d0e <on_modem_lib_init+0x6>
   29d0a:	f7f7 bf7d 	b.w	21c08 <on_modem_lib_init.part.0>
}
   29d0e:	4770      	bx	lr

00029d10 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   29d10:	2000      	movs	r0, #0
   29d12:	4770      	bx	lr

00029d14 <psa_crypto_init>:
}
   29d14:	2000      	movs	r0, #0
   29d16:	4770      	bx	lr

00029d18 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   29d18:	4700      	bx	r0

00029d1a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   29d1a:	f001 b9da 	b.w	2b0d2 <z_impl_k_busy_wait>

00029d1e <nrfx_clock_stop>:
    clock_stop(domain);
   29d1e:	f7f8 b865 	b.w	21dec <clock_stop>

00029d22 <set_ss_pin_state>:
{
   29d22:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   29d24:	7fc0      	ldrb	r0, [r0, #31]
   29d26:	28ff      	cmp	r0, #255	; 0xff
   29d28:	d006      	beq.n	29d38 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
   29d2a:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
   29d2c:	079b      	lsls	r3, r3, #30
   29d2e:	bf58      	it	pl
   29d30:	f081 0101 	eorpl.w	r1, r1, #1
   29d34:	f7f8 bd2e 	b.w	22794 <nrf_gpio_pin_write>
}
   29d38:	4770      	bx	lr

00029d3a <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   29d3a:	7b0a      	ldrb	r2, [r1, #12]
{
   29d3c:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   29d3e:	2a03      	cmp	r2, #3
   29d40:	d829      	bhi.n	29d96 <xfer_completeness_check+0x5c>
   29d42:	e8df f002 	tbb	[pc, r2]
   29d46:	2521      	.short	0x2521
   29d48:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   29d4a:	688a      	ldr	r2, [r1, #8]
   29d4c:	0350      	lsls	r0, r2, #13
   29d4e:	d504      	bpl.n	29d5a <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   29d50:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   29d54:	6908      	ldr	r0, [r1, #16]
   29d56:	4290      	cmp	r0, r2
   29d58:	d107      	bne.n	29d6a <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   29d5a:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   29d5c:	0352      	lsls	r2, r2, #13
   29d5e:	d41a      	bmi.n	29d96 <xfer_completeness_check+0x5c>
   29d60:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   29d64:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   29d66:	4291      	cmp	r1, r2
   29d68:	d015      	beq.n	29d96 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   29d6a:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   29d6c:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   29d6e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   29d72:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   29d76:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   29d78:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   29d7c:	6908      	ldr	r0, [r1, #16]
   29d7e:	4290      	cmp	r0, r2
   29d80:	d1f3      	bne.n	29d6a <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   29d82:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   29d86:	e7ed      	b.n	29d64 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   29d88:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   29d8c:	6909      	ldr	r1, [r1, #16]
   29d8e:	e7ea      	b.n	29d66 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   29d90:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   29d94:	e7fa      	b.n	29d8c <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   29d96:	2001      	movs	r0, #1
}
   29d98:	4770      	bx	lr

00029d9a <rpc_handle_ctrl_message>:
   29d9a:	2902      	cmp	r1, #2
   29d9c:	b510      	push	{r4, lr}
   29d9e:	4604      	mov	r4, r0
   29da0:	d005      	beq.n	29dae <rpc_handle_ctrl_message+0x14>
   29da2:	2904      	cmp	r1, #4
   29da4:	d001      	beq.n	29daa <rpc_handle_ctrl_message+0x10>
   29da6:	2901      	cmp	r1, #1
   29da8:	d107      	bne.n	29dba <rpc_handle_ctrl_message+0x20>
   29daa:	2000      	movs	r0, #0
   29dac:	bd10      	pop	{r4, pc}
   29dae:	6880      	ldr	r0, [r0, #8]
   29db0:	2800      	cmp	r0, #0
   29db2:	d0fa      	beq.n	29daa <rpc_handle_ctrl_message+0x10>
   29db4:	f7f4 fef8 	bl	1eba8 <nrf_modem_os_shm_tx_free>
   29db8:	e7f7      	b.n	29daa <rpc_handle_ctrl_message+0x10>
   29dba:	6880      	ldr	r0, [r0, #8]
   29dbc:	b108      	cbz	r0, 29dc2 <rpc_handle_ctrl_message+0x28>
   29dbe:	f7f4 fef3 	bl	1eba8 <nrf_modem_os_shm_tx_free>
   29dc2:	4620      	mov	r0, r4
   29dc4:	f7f9 f9c4 	bl	23150 <rpc_transport_msg_rx_free>
   29dc8:	e7ef      	b.n	29daa <rpc_handle_ctrl_message+0x10>

00029dca <rpc_init>:
   29dca:	f7f9 b9af 	b.w	2312c <rpc_transport_init>

00029dce <rpc_list_preambles_init>:
   29dce:	2200      	movs	r2, #0
   29dd0:	b510      	push	{r4, lr}
   29dd2:	6804      	ldr	r4, [r0, #0]
   29dd4:	4294      	cmp	r4, r2
   29dd6:	d100      	bne.n	29dda <rpc_list_preambles_init+0xc>
   29dd8:	bd10      	pop	{r4, pc}
   29dda:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   29dde:	684b      	ldr	r3, [r1, #4]
   29de0:	3201      	adds	r2, #1
   29de2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   29de6:	f043 0303 	orr.w	r3, r3, #3
   29dea:	604b      	str	r3, [r1, #4]
   29dec:	e7f2      	b.n	29dd4 <rpc_list_preambles_init+0x6>

00029dee <rpc_transport_ipc_data_rx_resume>:
   29dee:	2004      	movs	r0, #4
   29df0:	f7f8 bc94 	b.w	2271c <nrfx_ipc_receive_event_enable>

00029df4 <rpc_transport_ipc_data_rx_suspend>:
   29df4:	2004      	movs	r0, #4
   29df6:	f7f8 bc99 	b.w	2272c <nrfx_ipc_receive_event_disable>

00029dfa <rpc_transport_ipc_shutdown>:
   29dfa:	f7f8 bc61 	b.w	226c0 <nrfx_ipc_uninit>

00029dfe <rpc_transport_ipc_msg_alloc>:
   29dfe:	b538      	push	{r3, r4, r5, lr}
   29e00:	2300      	movs	r3, #0
   29e02:	1d02      	adds	r2, r0, #4
   29e04:	6804      	ldr	r4, [r0, #0]
   29e06:	429c      	cmp	r4, r3
   29e08:	d801      	bhi.n	29e0e <rpc_transport_ipc_msg_alloc+0x10>
   29e0a:	2300      	movs	r3, #0
   29e0c:	e016      	b.n	29e3c <rpc_transport_ipc_msg_alloc+0x3e>
   29e0e:	f04f 0400 	mov.w	r4, #0
   29e12:	e8d2 5fcf 	ldaexb	r5, [r2]
   29e16:	2d03      	cmp	r5, #3
   29e18:	d104      	bne.n	29e24 <rpc_transport_ipc_msg_alloc+0x26>
   29e1a:	e8c2 4fcc 	stlexb	ip, r4, [r2]
   29e1e:	f1bc 0f00 	cmp.w	ip, #0
   29e22:	d1f6      	bne.n	29e12 <rpc_transport_ipc_msg_alloc+0x14>
   29e24:	d002      	beq.n	29e2c <rpc_transport_ipc_msg_alloc+0x2e>
   29e26:	3208      	adds	r2, #8
   29e28:	3301      	adds	r3, #1
   29e2a:	e7eb      	b.n	29e04 <rpc_transport_ipc_msg_alloc+0x6>
   29e2c:	eb01 1383 	add.w	r3, r1, r3, lsl #6
   29e30:	4618      	mov	r0, r3
   29e32:	2240      	movs	r2, #64	; 0x40
   29e34:	2100      	movs	r1, #0
   29e36:	f001 fb52 	bl	2b4de <memset>
   29e3a:	4603      	mov	r3, r0
   29e3c:	4618      	mov	r0, r3
   29e3e:	bd38      	pop	{r3, r4, r5, pc}

00029e40 <rpc_client_msg_from_rpc_msg_get>:
   29e40:	3008      	adds	r0, #8
   29e42:	4770      	bx	lr

00029e44 <rpc_client_msg_alloc>:
   29e44:	b538      	push	{r3, r4, r5, lr}
   29e46:	4605      	mov	r5, r0
   29e48:	b920      	cbnz	r0, 29e54 <rpc_client_msg_alloc+0x10>
   29e4a:	f7f9 f975 	bl	23138 <rpc_transport_msg_alloc>
   29e4e:	b980      	cbnz	r0, 29e72 <rpc_client_msg_alloc+0x2e>
   29e50:	2000      	movs	r0, #0
   29e52:	bd38      	pop	{r3, r4, r5, pc}
   29e54:	f7f4 fea0 	bl	1eb98 <nrf_modem_os_shm_tx_alloc>
   29e58:	4604      	mov	r4, r0
   29e5a:	2800      	cmp	r0, #0
   29e5c:	d0f8      	beq.n	29e50 <rpc_client_msg_alloc+0xc>
   29e5e:	f7f9 f96b 	bl	23138 <rpc_transport_msg_alloc>
   29e62:	b938      	cbnz	r0, 29e74 <rpc_client_msg_alloc+0x30>
   29e64:	4620      	mov	r0, r4
   29e66:	f7f4 fe9f 	bl	1eba8 <nrf_modem_os_shm_tx_free>
   29e6a:	2001      	movs	r0, #1
   29e6c:	f7f4 fe6a 	bl	1eb44 <nrf_modem_os_event_notify>
   29e70:	e7ee      	b.n	29e50 <rpc_client_msg_alloc+0xc>
   29e72:	462c      	mov	r4, r5
   29e74:	60c5      	str	r5, [r0, #12]
   29e76:	f840 4f08 	str.w	r4, [r0, #8]!
   29e7a:	e7ea      	b.n	29e52 <rpc_client_msg_alloc+0xe>

00029e7c <rpc_client_msg_send>:
   29e7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   29e80:	4610      	mov	r0, r2
   29e82:	f840 1d08 	str.w	r1, [r0, #-8]!
   29e86:	f7f9 b96f 	b.w	23168 <rpc_transport_msg_send>

00029e8a <rpc_client_msg_rx_free>:
   29e8a:	3808      	subs	r0, #8
   29e8c:	f7f9 b960 	b.w	23150 <rpc_transport_msg_rx_free>

00029e90 <rpc_client_msg_data_rx_free>:
   29e90:	f7f9 b964 	b.w	2315c <rpc_transport_msg_data_rx_free>

00029e94 <rpc_client_msg_data_tx_size>:
   29e94:	f7f9 b956 	b.w	23144 <rpc_transport_msg_data_tx_size>

00029e98 <rpc_client_msg_data_tx_alloc>:
   29e98:	f7f4 be7e 	b.w	1eb98 <nrf_modem_os_shm_tx_alloc>

00029e9c <rpc_client_msg_data_tx_free>:
   29e9c:	b508      	push	{r3, lr}
   29e9e:	f7f4 fe83 	bl	1eba8 <nrf_modem_os_shm_tx_free>
   29ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   29ea6:	2001      	movs	r0, #1
   29ea8:	f7f4 be4c 	b.w	1eb44 <nrf_modem_os_event_notify>

00029eac <sockaddr_init>:
   29eac:	2904      	cmp	r1, #4
   29eae:	b570      	push	{r4, r5, r6, lr}
   29eb0:	4605      	mov	r5, r0
   29eb2:	4616      	mov	r6, r2
   29eb4:	d003      	beq.n	29ebe <sockaddr_init+0x12>
   29eb6:	2910      	cmp	r1, #16
   29eb8:	d015      	beq.n	29ee6 <sockaddr_init+0x3a>
   29eba:	2400      	movs	r4, #0
   29ebc:	e011      	b.n	29ee2 <sockaddr_init+0x36>
   29ebe:	2010      	movs	r0, #16
   29ec0:	f7f4 fe5c 	bl	1eb7c <nrf_modem_os_alloc>
   29ec4:	4604      	mov	r4, r0
   29ec6:	2800      	cmp	r0, #0
   29ec8:	d0f7      	beq.n	29eba <sockaddr_init+0xe>
   29eca:	220f      	movs	r2, #15
   29ecc:	2100      	movs	r1, #0
   29ece:	3001      	adds	r0, #1
   29ed0:	f001 fb05 	bl	2b4de <memset>
   29ed4:	2310      	movs	r3, #16
   29ed6:	7023      	strb	r3, [r4, #0]
   29ed8:	2301      	movs	r3, #1
   29eda:	8126      	strh	r6, [r4, #8]
   29edc:	6063      	str	r3, [r4, #4]
   29ede:	682b      	ldr	r3, [r5, #0]
   29ee0:	60e3      	str	r3, [r4, #12]
   29ee2:	4620      	mov	r0, r4
   29ee4:	bd70      	pop	{r4, r5, r6, pc}
   29ee6:	2024      	movs	r0, #36	; 0x24
   29ee8:	f7f4 fe48 	bl	1eb7c <nrf_modem_os_alloc>
   29eec:	4604      	mov	r4, r0
   29eee:	2800      	cmp	r0, #0
   29ef0:	d0e3      	beq.n	29eba <sockaddr_init+0xe>
   29ef2:	2223      	movs	r2, #35	; 0x23
   29ef4:	2100      	movs	r1, #0
   29ef6:	3001      	adds	r0, #1
   29ef8:	f001 faf1 	bl	2b4de <memset>
   29efc:	2324      	movs	r3, #36	; 0x24
   29efe:	7023      	strb	r3, [r4, #0]
   29f00:	2302      	movs	r3, #2
   29f02:	4628      	mov	r0, r5
   29f04:	6063      	str	r3, [r4, #4]
   29f06:	8126      	strh	r6, [r4, #8]
   29f08:	f104 0310 	add.w	r3, r4, #16
   29f0c:	f105 0210 	add.w	r2, r5, #16
   29f10:	f850 1b04 	ldr.w	r1, [r0], #4
   29f14:	4290      	cmp	r0, r2
   29f16:	f843 1b04 	str.w	r1, [r3], #4
   29f1a:	d1f9      	bne.n	29f10 <sockaddr_init+0x64>
   29f1c:	e7e1      	b.n	29ee2 <sockaddr_init+0x36>

00029f1e <sock_pollcb>:
   29f1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29f20:	2500      	movs	r5, #0
   29f22:	6803      	ldr	r3, [r0, #0]
   29f24:	4604      	mov	r4, r0
   29f26:	9300      	str	r3, [sp, #0]
   29f28:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   29f2a:	4668      	mov	r0, sp
   29f2c:	f8ad 5006 	strh.w	r5, [sp, #6]
   29f30:	f8ad 3004 	strh.w	r3, [sp, #4]
   29f34:	f000 fcc2 	bl	2a8bc <nrf_poll_one>
   29f38:	b138      	cbz	r0, 29f4a <sock_pollcb+0x2c>
   29f3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29f3c:	4668      	mov	r0, sp
   29f3e:	4798      	blx	r3
   29f40:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   29f44:	b10b      	cbz	r3, 29f4a <sock_pollcb+0x2c>
   29f46:	6365      	str	r5, [r4, #52]	; 0x34
   29f48:	63a5      	str	r5, [r4, #56]	; 0x38
   29f4a:	b003      	add	sp, #12
   29f4c:	bd30      	pop	{r4, r5, pc}

00029f4e <sock_has_pkt>:
   29f4e:	6840      	ldr	r0, [r0, #4]
   29f50:	3800      	subs	r0, #0
   29f52:	bf18      	it	ne
   29f54:	2001      	movne	r0, #1
   29f56:	4770      	bx	lr

00029f58 <sock_pkt_append>:
   29f58:	2300      	movs	r3, #0
   29f5a:	600b      	str	r3, [r1, #0]
   29f5c:	6883      	ldr	r3, [r0, #8]
   29f5e:	b913      	cbnz	r3, 29f66 <sock_pkt_append+0xe>
   29f60:	e9c0 1101 	strd	r1, r1, [r0, #4]
   29f64:	4770      	bx	lr
   29f66:	6019      	str	r1, [r3, #0]
   29f68:	6081      	str	r1, [r0, #8]
   29f6a:	4770      	bx	lr

00029f6c <sock_pkt_remove>:
   29f6c:	b538      	push	{r3, r4, r5, lr}
   29f6e:	4605      	mov	r5, r0
   29f70:	460c      	mov	r4, r1
   29f72:	f7f9 f8ff 	bl	23174 <rpc_transport_data_rx_suspend>
   29f76:	68aa      	ldr	r2, [r5, #8]
   29f78:	6823      	ldr	r3, [r4, #0]
   29f7a:	4294      	cmp	r4, r2
   29f7c:	606b      	str	r3, [r5, #4]
   29f7e:	bf08      	it	eq
   29f80:	60ab      	streq	r3, [r5, #8]
   29f82:	2300      	movs	r3, #0
   29f84:	4620      	mov	r0, r4
   29f86:	6023      	str	r3, [r4, #0]
   29f88:	f000 f904 	bl	2a194 <pkt_free>
   29f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29f90:	f7f9 b8f6 	b.w	23180 <rpc_transport_data_rx_resume>

00029f94 <sock_pkt_peek_head>:
   29f94:	6840      	ldr	r0, [r0, #4]
   29f96:	4770      	bx	lr

00029f98 <sock_is_stream>:
   29f98:	6900      	ldr	r0, [r0, #16]
   29f9a:	1e43      	subs	r3, r0, #1
   29f9c:	4258      	negs	r0, r3
   29f9e:	4158      	adcs	r0, r3
   29fa0:	4770      	bx	lr

00029fa2 <sock_is_datagram>:
   29fa2:	6900      	ldr	r0, [r0, #16]
   29fa4:	1e83      	subs	r3, r0, #2
   29fa6:	4258      	negs	r0, r3
   29fa8:	4158      	adcs	r0, r3
   29faa:	4770      	bx	lr

00029fac <sock_is_raw>:
   29fac:	6900      	ldr	r0, [r0, #16]
   29fae:	1ec3      	subs	r3, r0, #3
   29fb0:	4258      	negs	r0, r3
   29fb2:	4158      	adcs	r0, r3
   29fb4:	4770      	bx	lr

00029fb6 <sock_proto_is_secure>:
   29fb6:	6940      	ldr	r0, [r0, #20]
   29fb8:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   29fbc:	d005      	beq.n	29fca <sock_proto_is_secure+0x14>
   29fbe:	f240 1311 	movw	r3, #273	; 0x111
   29fc2:	1ac3      	subs	r3, r0, r3
   29fc4:	4258      	negs	r0, r3
   29fc6:	4158      	adcs	r0, r3
   29fc8:	4770      	bx	lr
   29fca:	2001      	movs	r0, #1
   29fcc:	4770      	bx	lr

00029fce <sock_is_connecting>:
   29fce:	7f00      	ldrb	r0, [r0, #28]
   29fd0:	f3c0 0080 	ubfx	r0, r0, #2, #1
   29fd4:	4770      	bx	lr

00029fd6 <sock_is_connected>:
   29fd6:	7f00      	ldrb	r0, [r0, #28]
   29fd8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   29fdc:	4770      	bx	lr

00029fde <sock_is_attaching>:
   29fde:	7f00      	ldrb	r0, [r0, #28]
   29fe0:	f3c0 1000 	ubfx	r0, r0, #4, #1
   29fe4:	4770      	bx	lr

00029fe6 <sock_is_nonblock>:
   29fe6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   29fe8:	f000 0001 	and.w	r0, r0, #1
   29fec:	4770      	bx	lr

00029fee <sock_is_closed>:
   29fee:	7f00      	ldrb	r0, [r0, #28]
   29ff0:	f000 0001 	and.w	r0, r0, #1
   29ff4:	4770      	bx	lr

00029ff6 <sock_is_local_closed>:
   29ff6:	7f00      	ldrb	r0, [r0, #28]
   29ff8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   29ffc:	4770      	bx	lr

00029ffe <sock_is_eof>:
   29ffe:	6903      	ldr	r3, [r0, #16]
   2a000:	2b01      	cmp	r3, #1
   2a002:	d105      	bne.n	2a010 <sock_is_eof+0x12>
   2a004:	6980      	ldr	r0, [r0, #24]
   2a006:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   2a00a:	4258      	negs	r0, r3
   2a00c:	4158      	adcs	r0, r3
   2a00e:	4770      	bx	lr
   2a010:	2000      	movs	r0, #0
   2a012:	4770      	bx	lr

0002a014 <sock_has_stream_error>:
   2a014:	7f00      	ldrb	r0, [r0, #28]
   2a016:	09c0      	lsrs	r0, r0, #7
   2a018:	4770      	bx	lr

0002a01a <sock_has_error>:
   2a01a:	6983      	ldr	r3, [r0, #24]
   2a01c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   2a020:	bf14      	ite	ne
   2a022:	2001      	movne	r0, #1
   2a024:	2000      	moveq	r0, #0
   2a026:	4770      	bx	lr

0002a028 <sock_has_flow_control>:
   2a028:	7f00      	ldrb	r0, [r0, #28]
   2a02a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2a02e:	4770      	bx	lr

0002a030 <sock_has_pollcb>:
   2a030:	6b40      	ldr	r0, [r0, #52]	; 0x34
   2a032:	3800      	subs	r0, #0
   2a034:	bf18      	it	ne
   2a036:	2001      	movne	r0, #1
   2a038:	4770      	bx	lr

0002a03a <sock_has_rai_no_data>:
   2a03a:	6b00      	ldr	r0, [r0, #48]	; 0x30
   2a03c:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
   2a040:	4258      	negs	r0, r3
   2a042:	4158      	adcs	r0, r3
   2a044:	4770      	bx	lr

0002a046 <sock_can_read>:
   2a046:	6840      	ldr	r0, [r0, #4]
   2a048:	3800      	subs	r0, #0
   2a04a:	bf18      	it	ne
   2a04c:	2001      	movne	r0, #1
   2a04e:	4770      	bx	lr

0002a050 <sock_can_accept>:
   2a050:	7f40      	ldrb	r0, [r0, #29]
   2a052:	3800      	subs	r0, #0
   2a054:	bf18      	it	ne
   2a056:	2001      	movne	r0, #1
   2a058:	4770      	bx	lr

0002a05a <sock_can_send>:
   2a05a:	b510      	push	{r4, lr}
   2a05c:	4602      	mov	r2, r0
   2a05e:	6904      	ldr	r4, [r0, #16]
   2a060:	f7ff ffa9 	bl	29fb6 <sock_proto_is_secure>
   2a064:	2c01      	cmp	r4, #1
   2a066:	4601      	mov	r1, r0
   2a068:	7f13      	ldrb	r3, [r2, #28]
   2a06a:	d103      	bne.n	2a074 <sock_can_send+0x1a>
   2a06c:	071c      	lsls	r4, r3, #28
   2a06e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   2a072:	d50b      	bpl.n	2a08c <sock_can_send+0x32>
   2a074:	b931      	cbnz	r1, 2a084 <sock_can_send+0x2a>
   2a076:	07d9      	lsls	r1, r3, #31
   2a078:	d40b      	bmi.n	2a092 <sock_can_send+0x38>
   2a07a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   2a07e:	f1c3 0001 	rsb	r0, r3, #1
   2a082:	e003      	b.n	2a08c <sock_can_send+0x32>
   2a084:	069a      	lsls	r2, r3, #26
   2a086:	f3c3 1040 	ubfx	r0, r3, #5, #1
   2a08a:	d4f4      	bmi.n	2a076 <sock_can_send+0x1c>
   2a08c:	f000 0001 	and.w	r0, r0, #1
   2a090:	bd10      	pop	{r4, pc}
   2a092:	2000      	movs	r0, #0
   2a094:	e7fa      	b.n	2a08c <sock_can_send+0x32>

0002a096 <sock_rcvtimeo_ms_get>:
   2a096:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   2a09a:	ea53 0102 	orrs.w	r1, r3, r2
   2a09e:	d009      	beq.n	2a0b4 <sock_rcvtimeo_ms_get+0x1e>
   2a0a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2a0a4:	fbb3 f0f1 	udiv	r0, r3, r1
   2a0a8:	fb01 0002 	mla	r0, r1, r2, r0
   2a0ac:	2801      	cmp	r0, #1
   2a0ae:	bfb8      	it	lt
   2a0b0:	2001      	movlt	r0, #1
   2a0b2:	4770      	bx	lr
   2a0b4:	f04f 30ff 	mov.w	r0, #4294967295
   2a0b8:	4770      	bx	lr

0002a0ba <sock_sndtimeo_ms_get>:
   2a0ba:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   2a0be:	ea53 0102 	orrs.w	r1, r3, r2
   2a0c2:	d009      	beq.n	2a0d8 <sock_sndtimeo_ms_get+0x1e>
   2a0c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2a0c8:	fbb3 f0f1 	udiv	r0, r3, r1
   2a0cc:	fb01 0002 	mla	r0, r1, r2, r0
   2a0d0:	2801      	cmp	r0, #1
   2a0d2:	bfb8      	it	lt
   2a0d4:	2001      	movlt	r0, #1
   2a0d6:	4770      	bx	lr
   2a0d8:	f04f 30ff 	mov.w	r0, #4294967295
   2a0dc:	4770      	bx	lr

0002a0de <sock_family_is_valid>:
   2a0de:	3801      	subs	r0, #1
   2a0e0:	2802      	cmp	r0, #2
   2a0e2:	bf8c      	ite	hi
   2a0e4:	2000      	movhi	r0, #0
   2a0e6:	2001      	movls	r0, #1
   2a0e8:	4770      	bx	lr

0002a0ea <sock_type_is_valid>:
   2a0ea:	3801      	subs	r0, #1
   2a0ec:	2802      	cmp	r0, #2
   2a0ee:	bf8c      	ite	hi
   2a0f0:	2000      	movhi	r0, #0
   2a0f2:	2001      	movls	r0, #1
   2a0f4:	4770      	bx	lr

0002a0f6 <sock_proto_supports_type>:
   2a0f6:	2903      	cmp	r1, #3
   2a0f8:	d015      	beq.n	2a126 <sock_proto_supports_type+0x30>
   2a0fa:	2811      	cmp	r0, #17
   2a0fc:	d00c      	beq.n	2a118 <sock_proto_supports_type+0x22>
   2a0fe:	dc04      	bgt.n	2a10a <sock_proto_supports_type+0x14>
   2a100:	b188      	cbz	r0, 2a126 <sock_proto_supports_type+0x30>
   2a102:	2806      	cmp	r0, #6
   2a104:	d00a      	beq.n	2a11c <sock_proto_supports_type+0x26>
   2a106:	2000      	movs	r0, #0
   2a108:	4770      	bx	lr
   2a10a:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2a10e:	d005      	beq.n	2a11c <sock_proto_supports_type+0x26>
   2a110:	f240 1311 	movw	r3, #273	; 0x111
   2a114:	4298      	cmp	r0, r3
   2a116:	d1f6      	bne.n	2a106 <sock_proto_supports_type+0x10>
   2a118:	2902      	cmp	r1, #2
   2a11a:	e000      	b.n	2a11e <sock_proto_supports_type+0x28>
   2a11c:	2901      	cmp	r1, #1
   2a11e:	bf14      	ite	ne
   2a120:	2000      	movne	r0, #0
   2a122:	2001      	moveq	r0, #1
   2a124:	4770      	bx	lr
   2a126:	2001      	movs	r0, #1
   2a128:	4770      	bx	lr

0002a12a <sock_sockaddr_len_is_valid>:
   2a12a:	6843      	ldr	r3, [r0, #4]
   2a12c:	2b01      	cmp	r3, #1
   2a12e:	d003      	beq.n	2a138 <sock_sockaddr_len_is_valid+0xe>
   2a130:	2b02      	cmp	r3, #2
   2a132:	d009      	beq.n	2a148 <sock_sockaddr_len_is_valid+0x1e>
   2a134:	2000      	movs	r0, #0
   2a136:	4770      	bx	lr
   2a138:	7803      	ldrb	r3, [r0, #0]
   2a13a:	2b10      	cmp	r3, #16
   2a13c:	d1fa      	bne.n	2a134 <sock_sockaddr_len_is_valid+0xa>
   2a13e:	2910      	cmp	r1, #16
   2a140:	bf14      	ite	ne
   2a142:	2000      	movne	r0, #0
   2a144:	2001      	moveq	r0, #1
   2a146:	4770      	bx	lr
   2a148:	7803      	ldrb	r3, [r0, #0]
   2a14a:	2b24      	cmp	r3, #36	; 0x24
   2a14c:	d1f2      	bne.n	2a134 <sock_sockaddr_len_is_valid+0xa>
   2a14e:	2924      	cmp	r1, #36	; 0x24
   2a150:	e7f6      	b.n	2a140 <sock_sockaddr_len_is_valid+0x16>

0002a152 <sock_sockaddr_fam_is_valid>:
   2a152:	68c3      	ldr	r3, [r0, #12]
   2a154:	2b01      	cmp	r3, #1
   2a156:	d003      	beq.n	2a160 <sock_sockaddr_fam_is_valid+0xe>
   2a158:	2b02      	cmp	r3, #2
   2a15a:	d007      	beq.n	2a16c <sock_sockaddr_fam_is_valid+0x1a>
   2a15c:	2001      	movs	r0, #1
   2a15e:	4770      	bx	lr
   2a160:	6848      	ldr	r0, [r1, #4]
   2a162:	2801      	cmp	r0, #1
   2a164:	bf14      	ite	ne
   2a166:	2000      	movne	r0, #0
   2a168:	2001      	moveq	r0, #1
   2a16a:	4770      	bx	lr
   2a16c:	6848      	ldr	r0, [r1, #4]
   2a16e:	2802      	cmp	r0, #2
   2a170:	e7f8      	b.n	2a164 <sock_sockaddr_fam_is_valid+0x12>

0002a172 <pkt_has_next>:
   2a172:	b100      	cbz	r0, 2a176 <pkt_has_next+0x4>
   2a174:	6800      	ldr	r0, [r0, #0]
   2a176:	3800      	subs	r0, #0
   2a178:	bf18      	it	ne
   2a17a:	2001      	movne	r0, #1
   2a17c:	4770      	bx	lr

0002a17e <pkt_peek_next>:
   2a17e:	b100      	cbz	r0, 2a182 <pkt_peek_next+0x4>
   2a180:	6800      	ldr	r0, [r0, #0]
   2a182:	4770      	bx	lr

0002a184 <pkt_bytes_get>:
   2a184:	8943      	ldrh	r3, [r0, #10]
   2a186:	6840      	ldr	r0, [r0, #4]
   2a188:	4418      	add	r0, r3
   2a18a:	4770      	bx	lr

0002a18c <pkt_bytes_left>:
   2a18c:	8902      	ldrh	r2, [r0, #8]
   2a18e:	8940      	ldrh	r0, [r0, #10]
   2a190:	1a10      	subs	r0, r2, r0
   2a192:	4770      	bx	lr

0002a194 <pkt_free>:
   2a194:	b510      	push	{r4, lr}
   2a196:	4604      	mov	r4, r0
   2a198:	6840      	ldr	r0, [r0, #4]
   2a19a:	f7ff fe79 	bl	29e90 <rpc_client_msg_data_rx_free>
   2a19e:	68e0      	ldr	r0, [r4, #12]
   2a1a0:	b108      	cbz	r0, 2a1a6 <pkt_free+0x12>
   2a1a2:	f7f4 fcf3 	bl	1eb8c <nrf_modem_os_free>
   2a1a6:	4620      	mov	r0, r4
   2a1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a1ac:	f7f4 bcee 	b.w	1eb8c <nrf_modem_os_free>

0002a1b0 <pkt_flush>:
   2a1b0:	b510      	push	{r4, lr}
   2a1b2:	4604      	mov	r4, r0
   2a1b4:	6820      	ldr	r0, [r4, #0]
   2a1b6:	b900      	cbnz	r0, 2a1ba <pkt_flush+0xa>
   2a1b8:	bd10      	pop	{r4, pc}
   2a1ba:	6862      	ldr	r2, [r4, #4]
   2a1bc:	6803      	ldr	r3, [r0, #0]
   2a1be:	4290      	cmp	r0, r2
   2a1c0:	6023      	str	r3, [r4, #0]
   2a1c2:	bf08      	it	eq
   2a1c4:	6063      	streq	r3, [r4, #4]
   2a1c6:	f7ff ffe5 	bl	2a194 <pkt_free>
   2a1ca:	e7f3      	b.n	2a1b4 <pkt_flush+0x4>

0002a1cc <on_conf_dnssrv_res>:
   2a1cc:	f000 bc67 	b.w	2aa9e <res_forward>

0002a1d0 <nrf_freeaddrinfo>:
   2a1d0:	b510      	push	{r4, lr}
   2a1d2:	4604      	mov	r4, r0
   2a1d4:	b160      	cbz	r0, 2a1f0 <nrf_freeaddrinfo+0x20>
   2a1d6:	6940      	ldr	r0, [r0, #20]
   2a1d8:	b108      	cbz	r0, 2a1de <nrf_freeaddrinfo+0xe>
   2a1da:	f7f4 fcd7 	bl	1eb8c <nrf_modem_os_free>
   2a1de:	69a0      	ldr	r0, [r4, #24]
   2a1e0:	b108      	cbz	r0, 2a1e6 <nrf_freeaddrinfo+0x16>
   2a1e2:	f7f4 fcd3 	bl	1eb8c <nrf_modem_os_free>
   2a1e6:	4620      	mov	r0, r4
   2a1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a1ec:	f7f4 bcce 	b.w	1eb8c <nrf_modem_os_free>
   2a1f0:	bd10      	pop	{r4, pc}

0002a1f2 <on_getifaddrs_res>:
   2a1f2:	f000 bc54 	b.w	2aa9e <res_forward>

0002a1f6 <nrf_socket>:
   2a1f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a1fa:	4681      	mov	r9, r0
   2a1fc:	460f      	mov	r7, r1
   2a1fe:	4616      	mov	r6, r2
   2a200:	f7ff ff6d 	bl	2a0de <sock_family_is_valid>
   2a204:	b930      	cbnz	r0, 2a214 <nrf_socket+0x1e>
   2a206:	206a      	movs	r0, #106	; 0x6a
   2a208:	f7ff f974 	bl	294f4 <nrf_modem_os_errno_set>
   2a20c:	f04f 30ff 	mov.w	r0, #4294967295
   2a210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a214:	4630      	mov	r0, r6
   2a216:	f7f9 fb1b 	bl	23850 <sock_proto_is_valid>
   2a21a:	b908      	cbnz	r0, 2a220 <nrf_socket+0x2a>
   2a21c:	207b      	movs	r0, #123	; 0x7b
   2a21e:	e7f3      	b.n	2a208 <nrf_socket+0x12>
   2a220:	4638      	mov	r0, r7
   2a222:	f7ff ff62 	bl	2a0ea <sock_type_is_valid>
   2a226:	b908      	cbnz	r0, 2a22c <nrf_socket+0x36>
   2a228:	206b      	movs	r0, #107	; 0x6b
   2a22a:	e7ed      	b.n	2a208 <nrf_socket+0x12>
   2a22c:	4639      	mov	r1, r7
   2a22e:	4630      	mov	r0, r6
   2a230:	f7ff ff61 	bl	2a0f6 <sock_proto_supports_type>
   2a234:	2800      	cmp	r0, #0
   2a236:	d0f7      	beq.n	2a228 <nrf_socket+0x32>
   2a238:	f7f9 fa92 	bl	23760 <sock_open>
   2a23c:	4605      	mov	r5, r0
   2a23e:	b908      	cbnz	r0, 2a244 <nrf_socket+0x4e>
   2a240:	2017      	movs	r0, #23
   2a242:	e7e1      	b.n	2a208 <nrf_socket+0x12>
   2a244:	2000      	movs	r0, #0
   2a246:	f7ff fdfd 	bl	29e44 <rpc_client_msg_alloc>
   2a24a:	4604      	mov	r4, r0
   2a24c:	b920      	cbnz	r0, 2a258 <nrf_socket+0x62>
   2a24e:	6828      	ldr	r0, [r5, #0]
   2a250:	f7f9 fabe 	bl	237d0 <_sock_close>
   2a254:	2069      	movs	r0, #105	; 0x69
   2a256:	e7d7      	b.n	2a208 <nrf_socket+0x12>
   2a258:	2300      	movs	r3, #0
   2a25a:	220c      	movs	r2, #12
   2a25c:	f04f 38ff 	mov.w	r8, #4294967295
   2a260:	7202      	strb	r2, [r0, #8]
   2a262:	7243      	strb	r3, [r0, #9]
   2a264:	7283      	strb	r3, [r0, #10]
   2a266:	72c3      	strb	r3, [r0, #11]
   2a268:	f880 8010 	strb.w	r8, [r0, #16]
   2a26c:	f880 8011 	strb.w	r8, [r0, #17]
   2a270:	f880 8012 	strb.w	r8, [r0, #18]
   2a274:	f880 8013 	strb.w	r8, [r0, #19]
   2a278:	4648      	mov	r0, r9
   2a27a:	f7fa f9d7 	bl	2462c <nrf_af_to_rpc_af>
   2a27e:	6160      	str	r0, [r4, #20]
   2a280:	4638      	mov	r0, r7
   2a282:	f000 fb85 	bl	2a990 <nrf_type_to_rpc_type>
   2a286:	4601      	mov	r1, r0
   2a288:	61a0      	str	r0, [r4, #24]
   2a28a:	4630      	mov	r0, r6
   2a28c:	f000 fb81 	bl	2a992 <nrf_proto_to_rpc_proto>
   2a290:	4621      	mov	r1, r4
   2a292:	61e0      	str	r0, [r4, #28]
   2a294:	f247 0001 	movw	r0, #28673	; 0x7001
   2a298:	e9c5 9703 	strd	r9, r7, [r5, #12]
   2a29c:	616e      	str	r6, [r5, #20]
   2a29e:	f000 fbcf 	bl	2aa40 <req_forward>
   2a2a2:	4604      	mov	r4, r0
   2a2a4:	b120      	cbz	r0, 2a2b0 <nrf_socket+0xba>
   2a2a6:	4640      	mov	r0, r8
   2a2a8:	f7f9 fa92 	bl	237d0 <_sock_close>
   2a2ac:	4620      	mov	r0, r4
   2a2ae:	e7ab      	b.n	2a208 <nrf_socket+0x12>
   2a2b0:	6828      	ldr	r0, [r5, #0]
   2a2b2:	e7ad      	b.n	2a210 <nrf_socket+0x1a>

0002a2b4 <nrf_connect>:
   2a2b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a2b6:	4607      	mov	r7, r0
   2a2b8:	460d      	mov	r5, r1
   2a2ba:	4616      	mov	r6, r2
   2a2bc:	f7f9 fa76 	bl	237ac <sock_find>
   2a2c0:	4604      	mov	r4, r0
   2a2c2:	b938      	cbnz	r0, 2a2d4 <nrf_connect+0x20>
   2a2c4:	2009      	movs	r0, #9
   2a2c6:	f7ff f915 	bl	294f4 <nrf_modem_os_errno_set>
   2a2ca:	f04f 35ff 	mov.w	r5, #4294967295
   2a2ce:	4628      	mov	r0, r5
   2a2d0:	b003      	add	sp, #12
   2a2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a2d4:	f7ff fe8b 	bl	29fee <sock_is_closed>
   2a2d8:	b108      	cbz	r0, 2a2de <nrf_connect+0x2a>
   2a2da:	69a0      	ldr	r0, [r4, #24]
   2a2dc:	e7f3      	b.n	2a2c6 <nrf_connect+0x12>
   2a2de:	4620      	mov	r0, r4
   2a2e0:	f7ff fe79 	bl	29fd6 <sock_is_connected>
   2a2e4:	b108      	cbz	r0, 2a2ea <nrf_connect+0x36>
   2a2e6:	207f      	movs	r0, #127	; 0x7f
   2a2e8:	e7ed      	b.n	2a2c6 <nrf_connect+0x12>
   2a2ea:	4620      	mov	r0, r4
   2a2ec:	f7ff fe6f 	bl	29fce <sock_is_connecting>
   2a2f0:	b108      	cbz	r0, 2a2f6 <nrf_connect+0x42>
   2a2f2:	2078      	movs	r0, #120	; 0x78
   2a2f4:	e7e7      	b.n	2a2c6 <nrf_connect+0x12>
   2a2f6:	b90d      	cbnz	r5, 2a2fc <nrf_connect+0x48>
   2a2f8:	200e      	movs	r0, #14
   2a2fa:	e7e4      	b.n	2a2c6 <nrf_connect+0x12>
   2a2fc:	4631      	mov	r1, r6
   2a2fe:	4628      	mov	r0, r5
   2a300:	f7ff ff13 	bl	2a12a <sock_sockaddr_len_is_valid>
   2a304:	b908      	cbnz	r0, 2a30a <nrf_connect+0x56>
   2a306:	2016      	movs	r0, #22
   2a308:	e7dd      	b.n	2a2c6 <nrf_connect+0x12>
   2a30a:	4629      	mov	r1, r5
   2a30c:	4620      	mov	r0, r4
   2a30e:	f7ff ff20 	bl	2a152 <sock_sockaddr_fam_is_valid>
   2a312:	b908      	cbnz	r0, 2a318 <nrf_connect+0x64>
   2a314:	206a      	movs	r0, #106	; 0x6a
   2a316:	e7d6      	b.n	2a2c6 <nrf_connect+0x12>
   2a318:	4620      	mov	r0, r4
   2a31a:	f7ff fe64 	bl	29fe6 <sock_is_nonblock>
   2a31e:	4606      	mov	r6, r0
   2a320:	b118      	cbz	r0, 2a32a <nrf_connect+0x76>
   2a322:	6966      	ldr	r6, [r4, #20]
   2a324:	3e11      	subs	r6, #17
   2a326:	bf18      	it	ne
   2a328:	2601      	movne	r6, #1
   2a32a:	2000      	movs	r0, #0
   2a32c:	f7ff fd8a 	bl	29e44 <rpc_client_msg_alloc>
   2a330:	4602      	mov	r2, r0
   2a332:	b908      	cbnz	r0, 2a338 <nrf_connect+0x84>
   2a334:	2069      	movs	r0, #105	; 0x69
   2a336:	e7c6      	b.n	2a2c6 <nrf_connect+0x12>
   2a338:	2300      	movs	r3, #0
   2a33a:	2114      	movs	r1, #20
   2a33c:	6107      	str	r7, [r0, #16]
   2a33e:	7201      	strb	r1, [r0, #8]
   2a340:	7243      	strb	r3, [r0, #9]
   2a342:	7283      	strb	r3, [r0, #10]
   2a344:	72c3      	strb	r3, [r0, #11]
   2a346:	6869      	ldr	r1, [r5, #4]
   2a348:	2901      	cmp	r1, #1
   2a34a:	d00e      	beq.n	2a36a <nrf_connect+0xb6>
   2a34c:	2902      	cmp	r1, #2
   2a34e:	d014      	beq.n	2a37a <nrf_connect+0xc6>
   2a350:	7f23      	ldrb	r3, [r4, #28]
   2a352:	f247 0102 	movw	r1, #28674	; 0x7002
   2a356:	f043 0304 	orr.w	r3, r3, #4
   2a35a:	7723      	strb	r3, [r4, #28]
   2a35c:	2004      	movs	r0, #4
   2a35e:	60d6      	str	r6, [r2, #12]
   2a360:	f7ff fd8c 	bl	29e7c <rpc_client_msg_send>
   2a364:	b1ce      	cbz	r6, 2a39a <nrf_connect+0xe6>
   2a366:	2077      	movs	r0, #119	; 0x77
   2a368:	e7ad      	b.n	2a2c6 <nrf_connect+0x12>
   2a36a:	8929      	ldrh	r1, [r5, #8]
   2a36c:	75c3      	strb	r3, [r0, #23]
   2a36e:	8281      	strh	r1, [r0, #20]
   2a370:	2104      	movs	r1, #4
   2a372:	7581      	strb	r1, [r0, #22]
   2a374:	68eb      	ldr	r3, [r5, #12]
   2a376:	6183      	str	r3, [r0, #24]
   2a378:	e7ea      	b.n	2a350 <nrf_connect+0x9c>
   2a37a:	8929      	ldrh	r1, [r5, #8]
   2a37c:	75c3      	strb	r3, [r0, #23]
   2a37e:	8281      	strh	r1, [r0, #20]
   2a380:	2110      	movs	r1, #16
   2a382:	186b      	adds	r3, r5, r1
   2a384:	7581      	strb	r1, [r0, #22]
   2a386:	3520      	adds	r5, #32
   2a388:	f100 0118 	add.w	r1, r0, #24
   2a38c:	f853 0b04 	ldr.w	r0, [r3], #4
   2a390:	42ab      	cmp	r3, r5
   2a392:	f841 0b04 	str.w	r0, [r1], #4
   2a396:	d1f9      	bne.n	2a38c <nrf_connect+0xd8>
   2a398:	e7da      	b.n	2a350 <nrf_connect+0x9c>
   2a39a:	4620      	mov	r0, r4
   2a39c:	f7ff fe8d 	bl	2a0ba <sock_sndtimeo_ms_get>
   2a3a0:	9001      	str	r0, [sp, #4]
   2a3a2:	4620      	mov	r0, r4
   2a3a4:	f7ff fe13 	bl	29fce <sock_is_connecting>
   2a3a8:	b918      	cbnz	r0, 2a3b2 <nrf_connect+0xfe>
   2a3aa:	69a5      	ldr	r5, [r4, #24]
   2a3ac:	b17d      	cbz	r5, 2a3ce <nrf_connect+0x11a>
   2a3ae:	4628      	mov	r0, r5
   2a3b0:	e789      	b.n	2a2c6 <nrf_connect+0x12>
   2a3b2:	2002      	movs	r0, #2
   2a3b4:	a901      	add	r1, sp, #4
   2a3b6:	f7f4 fae7 	bl	1e988 <nrf_modem_os_timedwait>
   2a3ba:	f110 0f0b 	cmn.w	r0, #11
   2a3be:	d004      	beq.n	2a3ca <nrf_connect+0x116>
   2a3c0:	2800      	cmp	r0, #0
   2a3c2:	d0ee      	beq.n	2a3a2 <nrf_connect+0xee>
   2a3c4:	f001 f85c 	bl	2b480 <abs>
   2a3c8:	e77d      	b.n	2a2c6 <nrf_connect+0x12>
   2a3ca:	2074      	movs	r0, #116	; 0x74
   2a3cc:	e77b      	b.n	2a2c6 <nrf_connect+0x12>
   2a3ce:	4620      	mov	r0, r4
   2a3d0:	f7ff fdf1 	bl	29fb6 <sock_proto_is_secure>
   2a3d4:	2800      	cmp	r0, #0
   2a3d6:	f43f af7a 	beq.w	2a2ce <nrf_connect+0x1a>
   2a3da:	4620      	mov	r0, r4
   2a3dc:	9901      	ldr	r1, [sp, #4]
   2a3de:	f7fa f8af 	bl	24540 <tls_attach>
   2a3e2:	4605      	mov	r5, r0
   2a3e4:	e773      	b.n	2a2ce <nrf_connect+0x1a>

0002a3e6 <nrf_bind>:
   2a3e6:	b538      	push	{r3, r4, r5, lr}
   2a3e8:	4605      	mov	r5, r0
   2a3ea:	460c      	mov	r4, r1
   2a3ec:	f7f9 f9de 	bl	237ac <sock_find>
   2a3f0:	b930      	cbnz	r0, 2a400 <nrf_bind+0x1a>
   2a3f2:	2009      	movs	r0, #9
   2a3f4:	f7ff f87e 	bl	294f4 <nrf_modem_os_errno_set>
   2a3f8:	f04f 33ff 	mov.w	r3, #4294967295
   2a3fc:	4618      	mov	r0, r3
   2a3fe:	bd38      	pop	{r3, r4, r5, pc}
   2a400:	b90c      	cbnz	r4, 2a406 <nrf_bind+0x20>
   2a402:	200e      	movs	r0, #14
   2a404:	e7f6      	b.n	2a3f4 <nrf_bind+0xe>
   2a406:	4621      	mov	r1, r4
   2a408:	f7ff fea3 	bl	2a152 <sock_sockaddr_fam_is_valid>
   2a40c:	b908      	cbnz	r0, 2a412 <nrf_bind+0x2c>
   2a40e:	206a      	movs	r0, #106	; 0x6a
   2a410:	e7f0      	b.n	2a3f4 <nrf_bind+0xe>
   2a412:	2000      	movs	r0, #0
   2a414:	f7ff fd16 	bl	29e44 <rpc_client_msg_alloc>
   2a418:	4601      	mov	r1, r0
   2a41a:	b908      	cbnz	r0, 2a420 <nrf_bind+0x3a>
   2a41c:	2069      	movs	r0, #105	; 0x69
   2a41e:	e7e9      	b.n	2a3f4 <nrf_bind+0xe>
   2a420:	2300      	movs	r3, #0
   2a422:	2214      	movs	r2, #20
   2a424:	6105      	str	r5, [r0, #16]
   2a426:	7202      	strb	r2, [r0, #8]
   2a428:	7243      	strb	r3, [r0, #9]
   2a42a:	7283      	strb	r3, [r0, #10]
   2a42c:	72c3      	strb	r3, [r0, #11]
   2a42e:	6862      	ldr	r2, [r4, #4]
   2a430:	2a01      	cmp	r2, #1
   2a432:	d009      	beq.n	2a448 <nrf_bind+0x62>
   2a434:	2a02      	cmp	r2, #2
   2a436:	d00f      	beq.n	2a458 <nrf_bind+0x72>
   2a438:	f247 0005 	movw	r0, #28677	; 0x7005
   2a43c:	f000 fb00 	bl	2aa40 <req_forward>
   2a440:	4603      	mov	r3, r0
   2a442:	2800      	cmp	r0, #0
   2a444:	d0da      	beq.n	2a3fc <nrf_bind+0x16>
   2a446:	e7d5      	b.n	2a3f4 <nrf_bind+0xe>
   2a448:	8922      	ldrh	r2, [r4, #8]
   2a44a:	75c3      	strb	r3, [r0, #23]
   2a44c:	8282      	strh	r2, [r0, #20]
   2a44e:	2204      	movs	r2, #4
   2a450:	7582      	strb	r2, [r0, #22]
   2a452:	68e3      	ldr	r3, [r4, #12]
   2a454:	6183      	str	r3, [r0, #24]
   2a456:	e7ef      	b.n	2a438 <nrf_bind+0x52>
   2a458:	8922      	ldrh	r2, [r4, #8]
   2a45a:	75c3      	strb	r3, [r0, #23]
   2a45c:	8282      	strh	r2, [r0, #20]
   2a45e:	2210      	movs	r2, #16
   2a460:	18a3      	adds	r3, r4, r2
   2a462:	7582      	strb	r2, [r0, #22]
   2a464:	3420      	adds	r4, #32
   2a466:	f100 0218 	add.w	r2, r0, #24
   2a46a:	f853 0b04 	ldr.w	r0, [r3], #4
   2a46e:	42a3      	cmp	r3, r4
   2a470:	f842 0b04 	str.w	r0, [r2], #4
   2a474:	d1f9      	bne.n	2a46a <nrf_bind+0x84>
   2a476:	e7df      	b.n	2a438 <nrf_bind+0x52>

0002a478 <nrf_listen>:
   2a478:	b538      	push	{r3, r4, r5, lr}
   2a47a:	4605      	mov	r5, r0
   2a47c:	460c      	mov	r4, r1
   2a47e:	f7f9 f995 	bl	237ac <sock_find>
   2a482:	b930      	cbnz	r0, 2a492 <nrf_listen+0x1a>
   2a484:	2009      	movs	r0, #9
   2a486:	f7ff f835 	bl	294f4 <nrf_modem_os_errno_set>
   2a48a:	f04f 33ff 	mov.w	r3, #4294967295
   2a48e:	4618      	mov	r0, r3
   2a490:	bd38      	pop	{r3, r4, r5, pc}
   2a492:	f7ff fd81 	bl	29f98 <sock_is_stream>
   2a496:	b908      	cbnz	r0, 2a49c <nrf_listen+0x24>
   2a498:	205f      	movs	r0, #95	; 0x5f
   2a49a:	e7f4      	b.n	2a486 <nrf_listen+0xe>
   2a49c:	2000      	movs	r0, #0
   2a49e:	f7ff fcd1 	bl	29e44 <rpc_client_msg_alloc>
   2a4a2:	4601      	mov	r1, r0
   2a4a4:	b908      	cbnz	r0, 2a4aa <nrf_listen+0x32>
   2a4a6:	2069      	movs	r0, #105	; 0x69
   2a4a8:	e7ed      	b.n	2a486 <nrf_listen+0xe>
   2a4aa:	2300      	movs	r3, #0
   2a4ac:	2204      	movs	r2, #4
   2a4ae:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2a4b2:	7243      	strb	r3, [r0, #9]
   2a4b4:	7283      	strb	r3, [r0, #10]
   2a4b6:	72c3      	strb	r3, [r0, #11]
   2a4b8:	6105      	str	r5, [r0, #16]
   2a4ba:	7202      	strb	r2, [r0, #8]
   2a4bc:	6144      	str	r4, [r0, #20]
   2a4be:	f247 0008 	movw	r0, #28680	; 0x7008
   2a4c2:	f000 fabd 	bl	2aa40 <req_forward>
   2a4c6:	4603      	mov	r3, r0
   2a4c8:	2800      	cmp	r0, #0
   2a4ca:	d0e0      	beq.n	2a48e <nrf_listen+0x16>
   2a4cc:	e7db      	b.n	2a486 <nrf_listen+0xe>

0002a4ce <nrf_accept>:
   2a4ce:	2300      	movs	r3, #0
   2a4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a4d4:	b08d      	sub	sp, #52	; 0x34
   2a4d6:	4606      	mov	r6, r0
   2a4d8:	4688      	mov	r8, r1
   2a4da:	4614      	mov	r4, r2
   2a4dc:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2a4e0:	f7f9 f964 	bl	237ac <sock_find>
   2a4e4:	4605      	mov	r5, r0
   2a4e6:	b938      	cbnz	r0, 2a4f8 <nrf_accept+0x2a>
   2a4e8:	2009      	movs	r0, #9
   2a4ea:	f7ff f803 	bl	294f4 <nrf_modem_os_errno_set>
   2a4ee:	f04f 30ff 	mov.w	r0, #4294967295
   2a4f2:	b00d      	add	sp, #52	; 0x34
   2a4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2a4f8:	f1b8 0f00 	cmp.w	r8, #0
   2a4fc:	d002      	beq.n	2a504 <nrf_accept+0x36>
   2a4fe:	b91c      	cbnz	r4, 2a508 <nrf_accept+0x3a>
   2a500:	200e      	movs	r0, #14
   2a502:	e7f2      	b.n	2a4ea <nrf_accept+0x1c>
   2a504:	2c00      	cmp	r4, #0
   2a506:	d1fb      	bne.n	2a500 <nrf_accept+0x32>
   2a508:	4628      	mov	r0, r5
   2a50a:	f7ff fd45 	bl	29f98 <sock_is_stream>
   2a50e:	b908      	cbnz	r0, 2a514 <nrf_accept+0x46>
   2a510:	205f      	movs	r0, #95	; 0x5f
   2a512:	e7ea      	b.n	2a4ea <nrf_accept+0x1c>
   2a514:	4628      	mov	r0, r5
   2a516:	f7ff fd66 	bl	29fe6 <sock_is_nonblock>
   2a51a:	b128      	cbz	r0, 2a528 <nrf_accept+0x5a>
   2a51c:	4628      	mov	r0, r5
   2a51e:	f7ff fd97 	bl	2a050 <sock_can_accept>
   2a522:	b908      	cbnz	r0, 2a528 <nrf_accept+0x5a>
   2a524:	200b      	movs	r0, #11
   2a526:	e7e0      	b.n	2a4ea <nrf_accept+0x1c>
   2a528:	f7f9 f91a 	bl	23760 <sock_open>
   2a52c:	4607      	mov	r7, r0
   2a52e:	b908      	cbnz	r0, 2a534 <nrf_accept+0x66>
   2a530:	2017      	movs	r0, #23
   2a532:	e7da      	b.n	2a4ea <nrf_accept+0x1c>
   2a534:	2000      	movs	r0, #0
   2a536:	f7ff fc85 	bl	29e44 <rpc_client_msg_alloc>
   2a53a:	4605      	mov	r5, r0
   2a53c:	b920      	cbnz	r0, 2a548 <nrf_accept+0x7a>
   2a53e:	6838      	ldr	r0, [r7, #0]
   2a540:	f7f9 f946 	bl	237d0 <_sock_close>
   2a544:	2069      	movs	r0, #105	; 0x69
   2a546:	e7d0      	b.n	2a4ea <nrf_accept+0x1c>
   2a548:	6106      	str	r6, [r0, #16]
   2a54a:	a901      	add	r1, sp, #4
   2a54c:	9702      	str	r7, [sp, #8]
   2a54e:	f000 faa2 	bl	2aa96 <req_cookie_set>
   2a552:	4629      	mov	r1, r5
   2a554:	f247 000c 	movw	r0, #28684	; 0x700c
   2a558:	f000 fa72 	bl	2aa40 <req_forward>
   2a55c:	4606      	mov	r6, r0
   2a55e:	b120      	cbz	r0, 2a56a <nrf_accept+0x9c>
   2a560:	6838      	ldr	r0, [r7, #0]
   2a562:	f7f9 f935 	bl	237d0 <_sock_close>
   2a566:	4630      	mov	r0, r6
   2a568:	e7bf      	b.n	2a4ea <nrf_accept+0x1c>
   2a56a:	9d01      	ldr	r5, [sp, #4]
   2a56c:	f1b8 0f00 	cmp.w	r8, #0
   2a570:	d006      	beq.n	2a580 <nrf_accept+0xb2>
   2a572:	b12c      	cbz	r4, 2a580 <nrf_accept+0xb2>
   2a574:	8beb      	ldrh	r3, [r5, #30]
   2a576:	2b04      	cmp	r3, #4
   2a578:	d007      	beq.n	2a58a <nrf_accept+0xbc>
   2a57a:	2b10      	cmp	r3, #16
   2a57c:	d01e      	beq.n	2a5bc <nrf_accept+0xee>
   2a57e:	6026      	str	r6, [r4, #0]
   2a580:	4628      	mov	r0, r5
   2a582:	f7ff fc82 	bl	29e8a <rpc_client_msg_rx_free>
   2a586:	6838      	ldr	r0, [r7, #0]
   2a588:	e7b3      	b.n	2a4f2 <nrf_accept+0x24>
   2a58a:	2310      	movs	r3, #16
   2a58c:	9003      	str	r0, [sp, #12]
   2a58e:	f88d 300c 	strb.w	r3, [sp, #12]
   2a592:	2301      	movs	r3, #1
   2a594:	6826      	ldr	r6, [r4, #0]
   2a596:	9005      	str	r0, [sp, #20]
   2a598:	2e10      	cmp	r6, #16
   2a59a:	bf28      	it	cs
   2a59c:	2610      	movcs	r6, #16
   2a59e:	9304      	str	r3, [sp, #16]
   2a5a0:	7f2b      	ldrb	r3, [r5, #28]
   2a5a2:	7f6a      	ldrb	r2, [r5, #29]
   2a5a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2a5a8:	f8ad 3014 	strh.w	r3, [sp, #20]
   2a5ac:	6a2b      	ldr	r3, [r5, #32]
   2a5ae:	9306      	str	r3, [sp, #24]
   2a5b0:	4632      	mov	r2, r6
   2a5b2:	4640      	mov	r0, r8
   2a5b4:	a903      	add	r1, sp, #12
   2a5b6:	f000 ff85 	bl	2b4c4 <memcpy>
   2a5ba:	e7e0      	b.n	2a57e <nrf_accept+0xb0>
   2a5bc:	f04f 0924 	mov.w	r9, #36	; 0x24
   2a5c0:	4601      	mov	r1, r0
   2a5c2:	464a      	mov	r2, r9
   2a5c4:	a803      	add	r0, sp, #12
   2a5c6:	f000 ff8a 	bl	2b4de <memset>
   2a5ca:	2302      	movs	r3, #2
   2a5cc:	f88d 900c 	strb.w	r9, [sp, #12]
   2a5d0:	9304      	str	r3, [sp, #16]
   2a5d2:	7f2b      	ldrb	r3, [r5, #28]
   2a5d4:	7f6a      	ldrb	r2, [r5, #29]
   2a5d6:	ae07      	add	r6, sp, #28
   2a5d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2a5dc:	f8ad 3014 	strh.w	r3, [sp, #20]
   2a5e0:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   2a5e4:	f105 0320 	add.w	r3, r5, #32
   2a5e8:	4632      	mov	r2, r6
   2a5ea:	6818      	ldr	r0, [r3, #0]
   2a5ec:	6859      	ldr	r1, [r3, #4]
   2a5ee:	3308      	adds	r3, #8
   2a5f0:	c203      	stmia	r2!, {r0, r1}
   2a5f2:	4563      	cmp	r3, ip
   2a5f4:	4616      	mov	r6, r2
   2a5f6:	d1f7      	bne.n	2a5e8 <nrf_accept+0x11a>
   2a5f8:	6826      	ldr	r6, [r4, #0]
   2a5fa:	2e24      	cmp	r6, #36	; 0x24
   2a5fc:	bf28      	it	cs
   2a5fe:	2624      	movcs	r6, #36	; 0x24
   2a600:	e7d6      	b.n	2a5b0 <nrf_accept+0xe2>

0002a602 <nrf_recvfrom>:
   2a602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a606:	b085      	sub	sp, #20
   2a608:	4690      	mov	r8, r2
   2a60a:	e9dd b70e 	ldrd	fp, r7, [sp, #56]	; 0x38
   2a60e:	461e      	mov	r6, r3
   2a610:	9101      	str	r1, [sp, #4]
   2a612:	f403 7a80 	and.w	sl, r3, #256	; 0x100
   2a616:	f7f9 f8c9 	bl	237ac <sock_find>
   2a61a:	4604      	mov	r4, r0
   2a61c:	b940      	cbnz	r0, 2a630 <nrf_recvfrom+0x2e>
   2a61e:	2009      	movs	r0, #9
   2a620:	f7fe ff68 	bl	294f4 <nrf_modem_os_errno_set>
   2a624:	f04f 39ff 	mov.w	r9, #4294967295
   2a628:	4648      	mov	r0, r9
   2a62a:	b005      	add	sp, #20
   2a62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a630:	f436 79a1 	bics.w	r9, r6, #322	; 0x142
   2a634:	d001      	beq.n	2a63a <nrf_recvfrom+0x38>
   2a636:	205f      	movs	r0, #95	; 0x5f
   2a638:	e7f2      	b.n	2a620 <nrf_recvfrom+0x1e>
   2a63a:	f1bb 0f00 	cmp.w	fp, #0
   2a63e:	d002      	beq.n	2a646 <nrf_recvfrom+0x44>
   2a640:	b91f      	cbnz	r7, 2a64a <nrf_recvfrom+0x48>
   2a642:	200e      	movs	r0, #14
   2a644:	e7ec      	b.n	2a620 <nrf_recvfrom+0x1e>
   2a646:	2f00      	cmp	r7, #0
   2a648:	d1fb      	bne.n	2a642 <nrf_recvfrom+0x40>
   2a64a:	4620      	mov	r0, r4
   2a64c:	f7ff fca4 	bl	29f98 <sock_is_stream>
   2a650:	b128      	cbz	r0, 2a65e <nrf_recvfrom+0x5c>
   2a652:	4620      	mov	r0, r4
   2a654:	f7ff fcbf 	bl	29fd6 <sock_is_connected>
   2a658:	b908      	cbnz	r0, 2a65e <nrf_recvfrom+0x5c>
   2a65a:	2080      	movs	r0, #128	; 0x80
   2a65c:	e7e0      	b.n	2a620 <nrf_recvfrom+0x1e>
   2a65e:	f1ba 0f00 	cmp.w	sl, #0
   2a662:	d117      	bne.n	2a694 <nrf_recvfrom+0x92>
   2a664:	4620      	mov	r0, r4
   2a666:	f7ff fcbe 	bl	29fe6 <sock_is_nonblock>
   2a66a:	b9a8      	cbnz	r0, 2a698 <nrf_recvfrom+0x96>
   2a66c:	f3c6 1580 	ubfx	r5, r6, #6, #1
   2a670:	4620      	mov	r0, r4
   2a672:	f7ff fd10 	bl	2a096 <sock_rcvtimeo_ms_get>
   2a676:	9003      	str	r0, [sp, #12]
   2a678:	4620      	mov	r0, r4
   2a67a:	f7ff fcb8 	bl	29fee <sock_is_closed>
   2a67e:	b1b0      	cbz	r0, 2a6ae <nrf_recvfrom+0xac>
   2a680:	4620      	mov	r0, r4
   2a682:	f7ff fc64 	bl	29f4e <sock_has_pkt>
   2a686:	bb70      	cbnz	r0, 2a6e6 <nrf_recvfrom+0xe4>
   2a688:	4620      	mov	r0, r4
   2a68a:	f7ff fcc6 	bl	2a01a <sock_has_error>
   2a68e:	b1b8      	cbz	r0, 2a6c0 <nrf_recvfrom+0xbe>
   2a690:	69a0      	ldr	r0, [r4, #24]
   2a692:	e7c5      	b.n	2a620 <nrf_recvfrom+0x1e>
   2a694:	2500      	movs	r5, #0
   2a696:	e7eb      	b.n	2a670 <nrf_recvfrom+0x6e>
   2a698:	2501      	movs	r5, #1
   2a69a:	e7e9      	b.n	2a670 <nrf_recvfrom+0x6e>
   2a69c:	2002      	movs	r0, #2
   2a69e:	a903      	add	r1, sp, #12
   2a6a0:	f7f4 f972 	bl	1e988 <nrf_modem_os_timedwait>
   2a6a4:	2800      	cmp	r0, #0
   2a6a6:	d0e7      	beq.n	2a678 <nrf_recvfrom+0x76>
   2a6a8:	f000 feea 	bl	2b480 <abs>
   2a6ac:	e7b8      	b.n	2a620 <nrf_recvfrom+0x1e>
   2a6ae:	4620      	mov	r0, r4
   2a6b0:	f7ff fc4d 	bl	29f4e <sock_has_pkt>
   2a6b4:	2800      	cmp	r0, #0
   2a6b6:	d1e3      	bne.n	2a680 <nrf_recvfrom+0x7e>
   2a6b8:	2d00      	cmp	r5, #0
   2a6ba:	d0ef      	beq.n	2a69c <nrf_recvfrom+0x9a>
   2a6bc:	200b      	movs	r0, #11
   2a6be:	e7af      	b.n	2a620 <nrf_recvfrom+0x1e>
   2a6c0:	4620      	mov	r0, r4
   2a6c2:	f7ff fc9c 	bl	29ffe <sock_is_eof>
   2a6c6:	2800      	cmp	r0, #0
   2a6c8:	d1ae      	bne.n	2a628 <nrf_recvfrom+0x26>
   2a6ca:	4620      	mov	r0, r4
   2a6cc:	f7ff fc93 	bl	29ff6 <sock_is_local_closed>
   2a6d0:	b148      	cbz	r0, 2a6e6 <nrf_recvfrom+0xe4>
   2a6d2:	4620      	mov	r0, r4
   2a6d4:	f7ff fc60 	bl	29f98 <sock_is_stream>
   2a6d8:	2800      	cmp	r0, #0
   2a6da:	d1a5      	bne.n	2a628 <nrf_recvfrom+0x26>
   2a6dc:	4620      	mov	r0, r4
   2a6de:	f7ff fc60 	bl	29fa2 <sock_is_datagram>
   2a6e2:	2800      	cmp	r0, #0
   2a6e4:	d19b      	bne.n	2a61e <nrf_recvfrom+0x1c>
   2a6e6:	4620      	mov	r0, r4
   2a6e8:	f7ff fc54 	bl	29f94 <sock_pkt_peek_head>
   2a6ec:	4605      	mov	r5, r0
   2a6ee:	f1bb 0f00 	cmp.w	fp, #0
   2a6f2:	d00a      	beq.n	2a70a <nrf_recvfrom+0x108>
   2a6f4:	68c1      	ldr	r1, [r0, #12]
   2a6f6:	b369      	cbz	r1, 2a754 <nrf_recvfrom+0x152>
   2a6f8:	780a      	ldrb	r2, [r1, #0]
   2a6fa:	683b      	ldr	r3, [r7, #0]
   2a6fc:	4658      	mov	r0, fp
   2a6fe:	429a      	cmp	r2, r3
   2a700:	bf28      	it	cs
   2a702:	461a      	movcs	r2, r3
   2a704:	603a      	str	r2, [r7, #0]
   2a706:	f000 fedd 	bl	2b4c4 <memcpy>
   2a70a:	f006 0602 	and.w	r6, r6, #2
   2a70e:	4628      	mov	r0, r5
   2a710:	f7ff fd3c 	bl	2a18c <pkt_bytes_left>
   2a714:	4540      	cmp	r0, r8
   2a716:	d81f      	bhi.n	2a758 <nrf_recvfrom+0x156>
   2a718:	4628      	mov	r0, r5
   2a71a:	f7ff fd37 	bl	2a18c <pkt_bytes_left>
   2a71e:	4607      	mov	r7, r0
   2a720:	2f00      	cmp	r7, #0
   2a722:	d081      	beq.n	2a628 <nrf_recvfrom+0x26>
   2a724:	9b01      	ldr	r3, [sp, #4]
   2a726:	4628      	mov	r0, r5
   2a728:	eb03 0b09 	add.w	fp, r3, r9
   2a72c:	f7ff fd2a 	bl	2a184 <pkt_bytes_get>
   2a730:	463a      	mov	r2, r7
   2a732:	4601      	mov	r1, r0
   2a734:	4658      	mov	r0, fp
   2a736:	f000 fec5 	bl	2b4c4 <memcpy>
   2a73a:	4620      	mov	r0, r4
   2a73c:	44b9      	add	r9, r7
   2a73e:	f7ff fc30 	bl	29fa2 <sock_is_datagram>
   2a742:	b158      	cbz	r0, 2a75c <nrf_recvfrom+0x15a>
   2a744:	2e00      	cmp	r6, #0
   2a746:	f47f af6f 	bne.w	2a628 <nrf_recvfrom+0x26>
   2a74a:	4629      	mov	r1, r5
   2a74c:	4620      	mov	r0, r4
   2a74e:	f7ff fc0d 	bl	29f6c <sock_pkt_remove>
   2a752:	e769      	b.n	2a628 <nrf_recvfrom+0x26>
   2a754:	6039      	str	r1, [r7, #0]
   2a756:	e7d8      	b.n	2a70a <nrf_recvfrom+0x108>
   2a758:	4647      	mov	r7, r8
   2a75a:	e7e1      	b.n	2a720 <nrf_recvfrom+0x11e>
   2a75c:	4620      	mov	r0, r4
   2a75e:	f7ff fc25 	bl	29fac <sock_is_raw>
   2a762:	2800      	cmp	r0, #0
   2a764:	d1ee      	bne.n	2a744 <nrf_recvfrom+0x142>
   2a766:	b956      	cbnz	r6, 2a77e <nrf_recvfrom+0x17c>
   2a768:	896b      	ldrh	r3, [r5, #10]
   2a76a:	4628      	mov	r0, r5
   2a76c:	443b      	add	r3, r7
   2a76e:	816b      	strh	r3, [r5, #10]
   2a770:	f7ff fd0c 	bl	2a18c <pkt_bytes_left>
   2a774:	b918      	cbnz	r0, 2a77e <nrf_recvfrom+0x17c>
   2a776:	4629      	mov	r1, r5
   2a778:	4620      	mov	r0, r4
   2a77a:	f7ff fbf7 	bl	29f6c <sock_pkt_remove>
   2a77e:	45b8      	cmp	r8, r7
   2a780:	f43f af52 	beq.w	2a628 <nrf_recvfrom+0x26>
   2a784:	f1ba 0f00 	cmp.w	sl, #0
   2a788:	d10a      	bne.n	2a7a0 <nrf_recvfrom+0x19e>
   2a78a:	b976      	cbnz	r6, 2a7aa <nrf_recvfrom+0x1a8>
   2a78c:	4620      	mov	r0, r4
   2a78e:	f7ff fc01 	bl	29f94 <sock_pkt_peek_head>
   2a792:	e00d      	b.n	2a7b0 <nrf_recvfrom+0x1ae>
   2a794:	4620      	mov	r0, r4
   2a796:	f7ff fc2a 	bl	29fee <sock_is_closed>
   2a79a:	2800      	cmp	r0, #0
   2a79c:	f47f af44 	bne.w	2a628 <nrf_recvfrom+0x26>
   2a7a0:	b16e      	cbz	r6, 2a7be <nrf_recvfrom+0x1bc>
   2a7a2:	4628      	mov	r0, r5
   2a7a4:	f7ff fce5 	bl	2a172 <pkt_has_next>
   2a7a8:	b170      	cbz	r0, 2a7c8 <nrf_recvfrom+0x1c6>
   2a7aa:	4628      	mov	r0, r5
   2a7ac:	f7ff fce7 	bl	2a17e <pkt_peek_next>
   2a7b0:	4605      	mov	r5, r0
   2a7b2:	2800      	cmp	r0, #0
   2a7b4:	f43f af38 	beq.w	2a628 <nrf_recvfrom+0x26>
   2a7b8:	eba8 0807 	sub.w	r8, r8, r7
   2a7bc:	e7a7      	b.n	2a70e <nrf_recvfrom+0x10c>
   2a7be:	4620      	mov	r0, r4
   2a7c0:	f7ff fbc5 	bl	29f4e <sock_has_pkt>
   2a7c4:	2800      	cmp	r0, #0
   2a7c6:	d1e1      	bne.n	2a78c <nrf_recvfrom+0x18a>
   2a7c8:	2002      	movs	r0, #2
   2a7ca:	a903      	add	r1, sp, #12
   2a7cc:	f7f4 f8dc 	bl	1e988 <nrf_modem_os_timedwait>
   2a7d0:	2800      	cmp	r0, #0
   2a7d2:	d0df      	beq.n	2a794 <nrf_recvfrom+0x192>
   2a7d4:	f1b9 0f00 	cmp.w	r9, #0
   2a7d8:	f47f af26 	bne.w	2a628 <nrf_recvfrom+0x26>
   2a7dc:	e764      	b.n	2a6a8 <nrf_recvfrom+0xa6>

0002a7de <tls_setopt_role>:
   2a7de:	b508      	push	{r3, lr}
   2a7e0:	b109      	cbz	r1, 2a7e6 <tls_setopt_role+0x8>
   2a7e2:	2a04      	cmp	r2, #4
   2a7e4:	d005      	beq.n	2a7f2 <tls_setopt_role+0x14>
   2a7e6:	2016      	movs	r0, #22
   2a7e8:	f7fe fe84 	bl	294f4 <nrf_modem_os_errno_set>
   2a7ec:	f04f 30ff 	mov.w	r0, #4294967295
   2a7f0:	e006      	b.n	2a800 <tls_setopt_role+0x22>
   2a7f2:	780b      	ldrb	r3, [r1, #0]
   2a7f4:	b12b      	cbz	r3, 2a802 <tls_setopt_role+0x24>
   2a7f6:	2b01      	cmp	r3, #1
   2a7f8:	d1f5      	bne.n	2a7e6 <tls_setopt_role+0x8>
   2a7fa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   2a7fe:	2000      	movs	r0, #0
   2a800:	bd08      	pop	{r3, pc}
   2a802:	2302      	movs	r3, #2
   2a804:	e7f9      	b.n	2a7fa <tls_setopt_role+0x1c>

0002a806 <tls_setopt_taglist>:
   2a806:	b510      	push	{r4, lr}
   2a808:	f012 0403 	ands.w	r4, r2, #3
   2a80c:	d100      	bne.n	2a810 <tls_setopt_taglist+0xa>
   2a80e:	b92a      	cbnz	r2, 2a81c <tls_setopt_taglist+0x16>
   2a810:	2016      	movs	r0, #22
   2a812:	f7fe fe6f 	bl	294f4 <nrf_modem_os_errno_set>
   2a816:	f04f 30ff 	mov.w	r0, #4294967295
   2a81a:	bd10      	pop	{r4, pc}
   2a81c:	0893      	lsrs	r3, r2, #2
   2a81e:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   2a822:	3048      	adds	r0, #72	; 0x48
   2a824:	f000 fe4e 	bl	2b4c4 <memcpy>
   2a828:	4620      	mov	r0, r4
   2a82a:	e7f6      	b.n	2a81a <tls_setopt_taglist+0x14>

0002a82c <tls_setopt_sess_cache>:
   2a82c:	b508      	push	{r3, lr}
   2a82e:	b109      	cbz	r1, 2a834 <tls_setopt_sess_cache+0x8>
   2a830:	2a04      	cmp	r2, #4
   2a832:	d005      	beq.n	2a840 <tls_setopt_sess_cache+0x14>
   2a834:	2016      	movs	r0, #22
   2a836:	f7fe fe5d 	bl	294f4 <nrf_modem_os_errno_set>
   2a83a:	f04f 30ff 	mov.w	r0, #4294967295
   2a83e:	bd08      	pop	{r3, pc}
   2a840:	780b      	ldrb	r3, [r1, #0]
   2a842:	3b00      	subs	r3, #0
   2a844:	bf18      	it	ne
   2a846:	2301      	movne	r3, #1
   2a848:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   2a84c:	2000      	movs	r0, #0
   2a84e:	e7f6      	b.n	2a83e <tls_setopt_sess_cache+0x12>

0002a850 <tls_setopt_peer_verify>:
   2a850:	b508      	push	{r3, lr}
   2a852:	b109      	cbz	r1, 2a858 <tls_setopt_peer_verify+0x8>
   2a854:	2a04      	cmp	r2, #4
   2a856:	d005      	beq.n	2a864 <tls_setopt_peer_verify+0x14>
   2a858:	2016      	movs	r0, #22
   2a85a:	f7fe fe4b 	bl	294f4 <nrf_modem_os_errno_set>
   2a85e:	f04f 30ff 	mov.w	r0, #4294967295
   2a862:	bd08      	pop	{r3, pc}
   2a864:	680b      	ldr	r3, [r1, #0]
   2a866:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   2a86a:	2000      	movs	r0, #0
   2a86c:	e7f9      	b.n	2a862 <tls_setopt_peer_verify+0x12>

0002a86e <tls_setopt_hostname>:
   2a86e:	b570      	push	{r4, r5, r6, lr}
   2a870:	4605      	mov	r5, r0
   2a872:	4614      	mov	r4, r2
   2a874:	460e      	mov	r6, r1
   2a876:	b931      	cbnz	r1, 2a886 <tls_setopt_hostname+0x18>
   2a878:	b192      	cbz	r2, 2a8a0 <tls_setopt_hostname+0x32>
   2a87a:	2016      	movs	r0, #22
   2a87c:	f7fe fe3a 	bl	294f4 <nrf_modem_os_errno_set>
   2a880:	f04f 30ff 	mov.w	r0, #4294967295
   2a884:	bd70      	pop	{r4, r5, r6, pc}
   2a886:	2a00      	cmp	r2, #0
   2a888:	d0f7      	beq.n	2a87a <tls_setopt_hostname+0xc>
   2a88a:	6c00      	ldr	r0, [r0, #64]	; 0x40
   2a88c:	b108      	cbz	r0, 2a892 <tls_setopt_hostname+0x24>
   2a88e:	f7f4 f97d 	bl	1eb8c <nrf_modem_os_free>
   2a892:	1c60      	adds	r0, r4, #1
   2a894:	f7f4 f972 	bl	1eb7c <nrf_modem_os_alloc>
   2a898:	6428      	str	r0, [r5, #64]	; 0x40
   2a89a:	b938      	cbnz	r0, 2a8ac <tls_setopt_hostname+0x3e>
   2a89c:	2069      	movs	r0, #105	; 0x69
   2a89e:	e7ed      	b.n	2a87c <tls_setopt_hostname+0xe>
   2a8a0:	6c00      	ldr	r0, [r0, #64]	; 0x40
   2a8a2:	b108      	cbz	r0, 2a8a8 <tls_setopt_hostname+0x3a>
   2a8a4:	f7f4 f972 	bl	1eb8c <nrf_modem_os_free>
   2a8a8:	2000      	movs	r0, #0
   2a8aa:	e7eb      	b.n	2a884 <tls_setopt_hostname+0x16>
   2a8ac:	4622      	mov	r2, r4
   2a8ae:	4631      	mov	r1, r6
   2a8b0:	f000 fe08 	bl	2b4c4 <memcpy>
   2a8b4:	2200      	movs	r2, #0
   2a8b6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   2a8b8:	551a      	strb	r2, [r3, r4]
   2a8ba:	e7f5      	b.n	2a8a8 <tls_setopt_hostname+0x3a>

0002a8bc <nrf_poll_one>:
   2a8bc:	b538      	push	{r3, r4, r5, lr}
   2a8be:	4604      	mov	r4, r0
   2a8c0:	6800      	ldr	r0, [r0, #0]
   2a8c2:	f7f8 ff73 	bl	237ac <sock_find>
   2a8c6:	4605      	mov	r5, r0
   2a8c8:	b928      	cbnz	r0, 2a8d6 <nrf_poll_one+0x1a>
   2a8ca:	2001      	movs	r0, #1
   2a8cc:	88e3      	ldrh	r3, [r4, #6]
   2a8ce:	f043 0320 	orr.w	r3, r3, #32
   2a8d2:	80e3      	strh	r3, [r4, #6]
   2a8d4:	bd38      	pop	{r3, r4, r5, pc}
   2a8d6:	f7ff fb8e 	bl	29ff6 <sock_is_local_closed>
   2a8da:	2800      	cmp	r0, #0
   2a8dc:	d1f5      	bne.n	2a8ca <nrf_poll_one+0xe>
   2a8de:	4628      	mov	r0, r5
   2a8e0:	f7ff fb9b 	bl	2a01a <sock_has_error>
   2a8e4:	b1f8      	cbz	r0, 2a926 <nrf_poll_one+0x6a>
   2a8e6:	88e3      	ldrh	r3, [r4, #6]
   2a8e8:	f043 0308 	orr.w	r3, r3, #8
   2a8ec:	80e3      	strh	r3, [r4, #6]
   2a8ee:	88a3      	ldrh	r3, [r4, #4]
   2a8f0:	07da      	lsls	r2, r3, #31
   2a8f2:	d507      	bpl.n	2a904 <nrf_poll_one+0x48>
   2a8f4:	4628      	mov	r0, r5
   2a8f6:	f7ff fba6 	bl	2a046 <sock_can_read>
   2a8fa:	b1e8      	cbz	r0, 2a938 <nrf_poll_one+0x7c>
   2a8fc:	88e3      	ldrh	r3, [r4, #6]
   2a8fe:	f043 0301 	orr.w	r3, r3, #1
   2a902:	80e3      	strh	r3, [r4, #6]
   2a904:	88a3      	ldrh	r3, [r4, #4]
   2a906:	075b      	lsls	r3, r3, #29
   2a908:	d507      	bpl.n	2a91a <nrf_poll_one+0x5e>
   2a90a:	4628      	mov	r0, r5
   2a90c:	f7ff fba5 	bl	2a05a <sock_can_send>
   2a910:	b118      	cbz	r0, 2a91a <nrf_poll_one+0x5e>
   2a912:	88e3      	ldrh	r3, [r4, #6]
   2a914:	f043 0304 	orr.w	r3, r3, #4
   2a918:	80e3      	strh	r3, [r4, #6]
   2a91a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   2a91e:	3800      	subs	r0, #0
   2a920:	bf18      	it	ne
   2a922:	2001      	movne	r0, #1
   2a924:	e7d6      	b.n	2a8d4 <nrf_poll_one+0x18>
   2a926:	4628      	mov	r0, r5
   2a928:	f7ff fb69 	bl	29ffe <sock_is_eof>
   2a92c:	2800      	cmp	r0, #0
   2a92e:	d0de      	beq.n	2a8ee <nrf_poll_one+0x32>
   2a930:	88e3      	ldrh	r3, [r4, #6]
   2a932:	f043 0310 	orr.w	r3, r3, #16
   2a936:	e7d9      	b.n	2a8ec <nrf_poll_one+0x30>
   2a938:	4628      	mov	r0, r5
   2a93a:	f7ff fb89 	bl	2a050 <sock_can_accept>
   2a93e:	2800      	cmp	r0, #0
   2a940:	d1dc      	bne.n	2a8fc <nrf_poll_one+0x40>
   2a942:	4628      	mov	r0, r5
   2a944:	f7ff fb5b 	bl	29ffe <sock_is_eof>
   2a948:	2800      	cmp	r0, #0
   2a94a:	d1d7      	bne.n	2a8fc <nrf_poll_one+0x40>
   2a94c:	e7da      	b.n	2a904 <nrf_poll_one+0x48>

0002a94e <nrf_fcntl>:
   2a94e:	b538      	push	{r3, r4, r5, lr}
   2a950:	460d      	mov	r5, r1
   2a952:	4614      	mov	r4, r2
   2a954:	f7f8 ff2a 	bl	237ac <sock_find>
   2a958:	b928      	cbnz	r0, 2a966 <nrf_fcntl+0x18>
   2a95a:	2009      	movs	r0, #9
   2a95c:	f7fe fdca 	bl	294f4 <nrf_modem_os_errno_set>
   2a960:	f04f 30ff 	mov.w	r0, #4294967295
   2a964:	e006      	b.n	2a974 <nrf_fcntl+0x26>
   2a966:	2d03      	cmp	r5, #3
   2a968:	d003      	beq.n	2a972 <nrf_fcntl+0x24>
   2a96a:	2d04      	cmp	r5, #4
   2a96c:	d003      	beq.n	2a976 <nrf_fcntl+0x28>
   2a96e:	2016      	movs	r0, #22
   2a970:	e7f4      	b.n	2a95c <nrf_fcntl+0xe>
   2a972:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   2a974:	bd38      	pop	{r3, r4, r5, pc}
   2a976:	2c01      	cmp	r4, #1
   2a978:	d8f9      	bhi.n	2a96e <nrf_fcntl+0x20>
   2a97a:	63c4      	str	r4, [r0, #60]	; 0x3c
   2a97c:	2000      	movs	r0, #0
   2a97e:	e7f9      	b.n	2a974 <nrf_fcntl+0x26>

0002a980 <rpc_af_to_nrf_af>:
   2a980:	1f43      	subs	r3, r0, #5
   2a982:	2b00      	cmp	r3, #0
   2a984:	d803      	bhi.n	2a98e <rpc_af_to_nrf_af+0xe>
   2a986:	e8df f003 	tbb	[pc, r3]
   2a98a:	01          	.byte	0x01
   2a98b:	00          	.byte	0x00
   2a98c:	2003      	movs	r0, #3
   2a98e:	4770      	bx	lr

0002a990 <nrf_type_to_rpc_type>:
   2a990:	4770      	bx	lr

0002a992 <nrf_proto_to_rpc_proto>:
   2a992:	2829      	cmp	r0, #41	; 0x29
   2a994:	d015      	beq.n	2a9c2 <nrf_proto_to_rpc_proto+0x30>
   2a996:	dc05      	bgt.n	2a9a4 <nrf_proto_to_rpc_proto+0x12>
   2a998:	2806      	cmp	r0, #6
   2a99a:	d014      	beq.n	2a9c6 <nrf_proto_to_rpc_proto+0x34>
   2a99c:	2811      	cmp	r0, #17
   2a99e:	d014      	beq.n	2a9ca <nrf_proto_to_rpc_proto+0x38>
   2a9a0:	b148      	cbz	r0, 2a9b6 <nrf_proto_to_rpc_proto+0x24>
   2a9a2:	4770      	bx	lr
   2a9a4:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2a9a8:	d00d      	beq.n	2a9c6 <nrf_proto_to_rpc_proto+0x34>
   2a9aa:	f240 1311 	movw	r3, #273	; 0x111
   2a9ae:	4298      	cmp	r0, r3
   2a9b0:	d00b      	beq.n	2a9ca <nrf_proto_to_rpc_proto+0x38>
   2a9b2:	28ff      	cmp	r0, #255	; 0xff
   2a9b4:	d10c      	bne.n	2a9d0 <nrf_proto_to_rpc_proto+0x3e>
   2a9b6:	2901      	cmp	r1, #1
   2a9b8:	d009      	beq.n	2a9ce <nrf_proto_to_rpc_proto+0x3c>
   2a9ba:	2902      	cmp	r1, #2
   2a9bc:	bf08      	it	eq
   2a9be:	2002      	moveq	r0, #2
   2a9c0:	4770      	bx	lr
   2a9c2:	2006      	movs	r0, #6
   2a9c4:	4770      	bx	lr
   2a9c6:	2001      	movs	r0, #1
   2a9c8:	4770      	bx	lr
   2a9ca:	2002      	movs	r0, #2
   2a9cc:	4770      	bx	lr
   2a9ce:	4608      	mov	r0, r1
   2a9d0:	4770      	bx	lr

0002a9d2 <nrf_sol_to_rpc_sol>:
   2a9d2:	2829      	cmp	r0, #41	; 0x29
   2a9d4:	d011      	beq.n	2a9fa <nrf_sol_to_rpc_sol+0x28>
   2a9d6:	dc0a      	bgt.n	2a9ee <nrf_sol_to_rpc_sol+0x1c>
   2a9d8:	2801      	cmp	r0, #1
   2a9da:	d010      	beq.n	2a9fe <nrf_sol_to_rpc_sol+0x2c>
   2a9dc:	2806      	cmp	r0, #6
   2a9de:	d010      	beq.n	2aa02 <nrf_sol_to_rpc_sol+0x30>
   2a9e0:	2800      	cmp	r0, #0
   2a9e2:	bf08      	it	eq
   2a9e4:	2004      	moveq	r0, #4
   2a9e6:	bf18      	it	ne
   2a9e8:	f04f 30ff 	movne.w	r0, #4294967295
   2a9ec:	4770      	bx	lr
   2a9ee:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   2a9f2:	d008      	beq.n	2aa06 <nrf_sol_to_rpc_sol+0x34>
   2a9f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   2a9f8:	e7f5      	b.n	2a9e6 <nrf_sol_to_rpc_sol+0x14>
   2a9fa:	2006      	movs	r0, #6
   2a9fc:	4770      	bx	lr
   2a9fe:	2008      	movs	r0, #8
   2aa00:	4770      	bx	lr
   2aa02:	2001      	movs	r0, #1
   2aa04:	4770      	bx	lr
   2aa06:	f44f 7080 	mov.w	r0, #256	; 0x100
   2aa0a:	4770      	bx	lr

0002aa0c <rpc_error_to_nrf_gai_errno>:
   2aa0c:	b508      	push	{r3, lr}
   2aa0e:	1f03      	subs	r3, r0, #4
   2aa10:	2b09      	cmp	r3, #9
   2aa12:	d80f      	bhi.n	2aa34 <rpc_error_to_nrf_gai_errno+0x28>
   2aa14:	e8df f003 	tbb	[pc, r3]
   2aa18:	0e051108 	.word	0x0e051108
   2aa1c:	0e0e0e0e 	.word	0x0e0e0e0e
   2aa20:	050e      	.short	0x050e
   2aa22:	f06f 0001 	mvn.w	r0, #1
   2aa26:	bd08      	pop	{r3, pc}
   2aa28:	2073      	movs	r0, #115	; 0x73
   2aa2a:	f7fe fd63 	bl	294f4 <nrf_modem_os_errno_set>
   2aa2e:	f06f 000a 	mvn.w	r0, #10
   2aa32:	e7f8      	b.n	2aa26 <rpc_error_to_nrf_gai_errno+0x1a>
   2aa34:	f7f9 fe0e 	bl	24654 <rpc_error_to_nrf_errno>
   2aa38:	e7f7      	b.n	2aa2a <rpc_error_to_nrf_gai_errno+0x1e>
   2aa3a:	f06f 0063 	mvn.w	r0, #99	; 0x63
   2aa3e:	e7f2      	b.n	2aa26 <rpc_error_to_nrf_gai_errno+0x1a>

0002aa40 <req_forward>:
   2aa40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2aa42:	2300      	movs	r3, #0
   2aa44:	460a      	mov	r2, r1
   2aa46:	f04f 31ff 	mov.w	r1, #4294967295
   2aa4a:	9303      	str	r3, [sp, #12]
   2aa4c:	68d6      	ldr	r6, [r2, #12]
   2aa4e:	ac02      	add	r4, sp, #8
   2aa50:	9302      	str	r3, [sp, #8]
   2aa52:	9101      	str	r1, [sp, #4]
   2aa54:	b18e      	cbz	r6, 2aa7a <req_forward+0x3a>
   2aa56:	4634      	mov	r4, r6
   2aa58:	b281      	uxth	r1, r0
   2aa5a:	6023      	str	r3, [r4, #0]
   2aa5c:	2004      	movs	r0, #4
   2aa5e:	f7ff fa0d 	bl	29e7c <rpc_client_msg_send>
   2aa62:	6823      	ldr	r3, [r4, #0]
   2aa64:	b15b      	cbz	r3, 2aa7e <req_forward+0x3e>
   2aa66:	6958      	ldr	r0, [r3, #20]
   2aa68:	f7f9 fdf4 	bl	24654 <rpc_error_to_nrf_errno>
   2aa6c:	4605      	mov	r5, r0
   2aa6e:	b106      	cbz	r6, 2aa72 <req_forward+0x32>
   2aa70:	b170      	cbz	r0, 2aa90 <req_forward+0x50>
   2aa72:	6820      	ldr	r0, [r4, #0]
   2aa74:	f7ff fa09 	bl	29e8a <rpc_client_msg_rx_free>
   2aa78:	e00a      	b.n	2aa90 <req_forward+0x50>
   2aa7a:	60d4      	str	r4, [r2, #12]
   2aa7c:	e7ec      	b.n	2aa58 <req_forward+0x18>
   2aa7e:	2002      	movs	r0, #2
   2aa80:	a901      	add	r1, sp, #4
   2aa82:	f7f3 ff81 	bl	1e988 <nrf_modem_os_timedwait>
   2aa86:	2800      	cmp	r0, #0
   2aa88:	d0eb      	beq.n	2aa62 <req_forward+0x22>
   2aa8a:	f000 fcf9 	bl	2b480 <abs>
   2aa8e:	4605      	mov	r5, r0
   2aa90:	4628      	mov	r0, r5
   2aa92:	b004      	add	sp, #16
   2aa94:	bd70      	pop	{r4, r5, r6, pc}

0002aa96 <req_cookie_set>:
   2aa96:	60c1      	str	r1, [r0, #12]
   2aa98:	4770      	bx	lr

0002aa9a <res_cookie_get>:
   2aa9a:	68c0      	ldr	r0, [r0, #12]
   2aa9c:	4770      	bx	lr

0002aa9e <res_forward>:
   2aa9e:	68c3      	ldr	r3, [r0, #12]
   2aaa0:	6018      	str	r0, [r3, #0]
   2aaa2:	2001      	movs	r0, #1
   2aaa4:	4770      	bx	lr

0002aaa6 <rpc_dfu_event_handler>:
   2aaa6:	b510      	push	{r4, lr}
   2aaa8:	4604      	mov	r4, r0
   2aaaa:	6800      	ldr	r0, [r0, #0]
   2aaac:	b108      	cbz	r0, 2aab2 <rpc_dfu_event_handler+0xc>
   2aaae:	f7ff f9ef 	bl	29e90 <rpc_client_msg_data_rx_free>
   2aab2:	68e0      	ldr	r0, [r4, #12]
   2aab4:	b108      	cbz	r0, 2aaba <rpc_dfu_event_handler+0x14>
   2aab6:	6004      	str	r4, [r0, #0]
   2aab8:	2001      	movs	r0, #1
   2aaba:	bd10      	pop	{r4, pc}

0002aabc <nrf_modem_is_initialized>:
   2aabc:	f7fa b928 	b.w	24d10 <nrf_modem_state_is_initialized>

0002aac0 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2aac0:	4770      	bx	lr

0002aac2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2aac2:	b140      	cbz	r0, 2aad6 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2aac4:	68c3      	ldr	r3, [r0, #12]
   2aac6:	7858      	ldrb	r0, [r3, #1]
   2aac8:	f010 0001 	ands.w	r0, r0, #1
   2aacc:	bf1e      	ittt	ne
   2aace:	7818      	ldrbne	r0, [r3, #0]
   2aad0:	fab0 f080 	clzne	r0, r0
   2aad4:	0940      	lsrne	r0, r0, #5
}
   2aad6:	4770      	bx	lr

0002aad8 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   2aad8:	f000 bd01 	b.w	2b4de <memset>

0002aadc <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2aadc:	f000 bcf2 	b.w	2b4c4 <memcpy>

0002aae0 <k_heap_init>:
{
   2aae0:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2aae2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2aae6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2aaea:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2aaec:	f7fc bf06 	b.w	278fc <sys_heap_init>

0002aaf0 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2aaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aaf4:	b085      	sub	sp, #20
   2aaf6:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   2aafa:	4607      	mov	r7, r0
   2aafc:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2aafe:	4650      	mov	r0, sl
   2ab00:	4621      	mov	r1, r4
{
   2ab02:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2ab04:	f000 fae9 	bl	2b0da <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2ab08:	f1b4 3fff 	cmp.w	r4, #4294967295
   2ab0c:	bf08      	it	eq
   2ab0e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2ab12:	4605      	mov	r5, r0
   2ab14:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2ab16:	bf04      	itt	eq
   2ab18:	f04f 35ff 	moveq.w	r5, #4294967295
   2ab1c:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2ab20:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   2ab24:	f04f 0320 	mov.w	r3, #32
   2ab28:	f3ef 8411 	mrs	r4, BASEPRI
   2ab2c:	f383 8812 	msr	BASEPRI_MAX, r3
   2ab30:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2ab34:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2ab38:	464a      	mov	r2, r9
   2ab3a:	4641      	mov	r1, r8
   2ab3c:	4638      	mov	r0, r7
   2ab3e:	f7fc fe76 	bl	2782e <sys_heap_aligned_alloc>
   2ab42:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2ab44:	f7fb fb30 	bl	261a8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2ab48:	9b03      	ldr	r3, [sp, #12]
   2ab4a:	b13b      	cbz	r3, 2ab5c <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   2ab4c:	f384 8811 	msr	BASEPRI, r4
   2ab50:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2ab54:	4618      	mov	r0, r3
   2ab56:	b005      	add	sp, #20
   2ab58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2ab5c:	1a28      	subs	r0, r5, r0
   2ab5e:	eb66 0101 	sbc.w	r1, r6, r1
   2ab62:	2801      	cmp	r0, #1
   2ab64:	f171 0200 	sbcs.w	r2, r1, #0
   2ab68:	dbf0      	blt.n	2ab4c <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2ab6a:	e9cd 0100 	strd	r0, r1, [sp]
   2ab6e:	465a      	mov	r2, fp
   2ab70:	4621      	mov	r1, r4
   2ab72:	4650      	mov	r0, sl
   2ab74:	f7fa ffc0 	bl	25af8 <z_pend_curr>
	__asm__ volatile(
   2ab78:	f04f 0320 	mov.w	r3, #32
   2ab7c:	f3ef 8411 	mrs	r4, BASEPRI
   2ab80:	f383 8812 	msr	BASEPRI_MAX, r3
   2ab84:	f3bf 8f6f 	isb	sy
	return k;
   2ab88:	e7d6      	b.n	2ab38 <k_heap_aligned_alloc+0x48>

0002ab8a <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   2ab8a:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   2ab8c:	e9cd 2300 	strd	r2, r3, [sp]
   2ab90:	460a      	mov	r2, r1
   2ab92:	2104      	movs	r1, #4
   2ab94:	f7ff ffac 	bl	2aaf0 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   2ab98:	b003      	add	sp, #12
   2ab9a:	f85d fb04 	ldr.w	pc, [sp], #4

0002ab9e <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   2ab9e:	b538      	push	{r3, r4, r5, lr}
   2aba0:	4604      	mov	r4, r0
   2aba2:	f04f 0320 	mov.w	r3, #32
   2aba6:	f3ef 8511 	mrs	r5, BASEPRI
   2abaa:	f383 8812 	msr	BASEPRI_MAX, r3
   2abae:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2abb2:	f7fc fe04 	bl	277be <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2abb6:	f104 000c 	add.w	r0, r4, #12
   2abba:	f000 fa0f 	bl	2afdc <z_unpend_all>
   2abbe:	b130      	cbz	r0, 2abce <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2abc0:	4629      	mov	r1, r5
   2abc2:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2abc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2abca:	f7fa bff9 	b.w	25bc0 <z_reschedule>
	__asm__ volatile(
   2abce:	f385 8811 	msr	BASEPRI, r5
   2abd2:	f3bf 8f6f 	isb	sy
}
   2abd6:	bd38      	pop	{r3, r4, r5, pc}

0002abd8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2abd8:	f3ef 8005 	mrs	r0, IPSR
}
   2abdc:	3800      	subs	r0, #0
   2abde:	bf18      	it	ne
   2abe0:	2001      	movne	r0, #1
   2abe2:	4770      	bx	lr

0002abe4 <z_impl_k_thread_name_set>:
}
   2abe4:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2abe8:	4770      	bx	lr

0002abea <k_thread_name_get>:
}
   2abea:	2000      	movs	r0, #0
   2abec:	4770      	bx	lr

0002abee <z_impl_k_thread_start>:
	z_sched_start(thread);
   2abee:	f7fa bff9 	b.w	25be4 <z_sched_start>

0002abf2 <z_pm_save_idle_exit>:
{
   2abf2:	b508      	push	{r3, lr}
	pm_system_resume();
   2abf4:	f7f0 ffe4 	bl	1bbc0 <pm_system_resume>
}
   2abf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2abfc:	f7fe bc54 	b.w	294a8 <sys_clock_idle_exit>

0002ac00 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2ac00:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2ac04:	428b      	cmp	r3, r1
   2ac06:	d001      	beq.n	2ac0c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2ac08:	f7fa bf94 	b.w	25b34 <z_set_prio>
}
   2ac0c:	2000      	movs	r0, #0
   2ac0e:	4770      	bx	lr

0002ac10 <z_impl_k_mutex_init>:
{
   2ac10:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2ac12:	2000      	movs	r0, #0
   2ac14:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   2ac18:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   2ac1c:	4770      	bx	lr

0002ac1e <queue_insert>:
{
   2ac1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ac22:	4699      	mov	r9, r3
   2ac24:	4604      	mov	r4, r0
   2ac26:	460d      	mov	r5, r1
   2ac28:	4690      	mov	r8, r2
   2ac2a:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2ac2e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2ac32:	f04f 0220 	mov.w	r2, #32
   2ac36:	f3ef 8711 	mrs	r7, BASEPRI
   2ac3a:	f382 8812 	msr	BASEPRI_MAX, r2
   2ac3e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2ac42:	b103      	cbz	r3, 2ac46 <queue_insert+0x28>
	return list->tail;
   2ac44:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2ac46:	4630      	mov	r0, r6
   2ac48:	f000 f982 	bl	2af50 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2ac4c:	b158      	cbz	r0, 2ac66 <queue_insert+0x48>
   2ac4e:	2300      	movs	r3, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2ac50:	f8c0 8014 	str.w	r8, [r0, #20]
   2ac54:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2ac56:	f000 f944 	bl	2aee2 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2ac5a:	4630      	mov	r0, r6
   2ac5c:	4639      	mov	r1, r7
   2ac5e:	f7fa ffaf 	bl	25bc0 <z_reschedule>
		return 0;
   2ac62:	2000      	movs	r0, #0
   2ac64:	e00c      	b.n	2ac80 <queue_insert+0x62>
	if (alloc) {
   2ac66:	f1b9 0f00 	cmp.w	r9, #0
   2ac6a:	d01b      	beq.n	2aca4 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2ac6c:	2108      	movs	r1, #8
   2ac6e:	f7fb fbfd 	bl	2646c <z_thread_aligned_alloc>
		if (anode == NULL) {
   2ac72:	b938      	cbnz	r0, 2ac84 <queue_insert+0x66>
	__asm__ volatile(
   2ac74:	f387 8811 	msr	BASEPRI, r7
   2ac78:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2ac7c:	f06f 000b 	mvn.w	r0, #11
}
   2ac80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2ac84:	2201      	movs	r2, #1
		anode->data = data;
   2ac86:	f8c0 8004 	str.w	r8, [r0, #4]
   2ac8a:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ac8c:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ac8e:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2ac92:	b95d      	cbnz	r5, 2acac <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ac94:	6822      	ldr	r2, [r4, #0]
   2ac96:	430a      	orrs	r2, r1
   2ac98:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2ac9a:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2ac9c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2ac9e:	b96a      	cbnz	r2, 2acbc <queue_insert+0x9e>
	list->tail = node;
   2aca0:	6060      	str	r0, [r4, #4]
}
   2aca2:	e00b      	b.n	2acbc <queue_insert+0x9e>
}
   2aca4:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   2aca6:	f8c8 9000 	str.w	r9, [r8]
}
   2acaa:	e7ef      	b.n	2ac8c <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2acac:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2acae:	2a03      	cmp	r2, #3
   2acb0:	d810      	bhi.n	2acd4 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2acb2:	6001      	str	r1, [r0, #0]
	return list->tail;
   2acb4:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2acb6:	b939      	cbnz	r1, 2acc8 <queue_insert+0xaa>
	list->head = node;
   2acb8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2acbc:	2104      	movs	r1, #4
   2acbe:	f104 0010 	add.w	r0, r4, #16
   2acc2:	f000 fb95 	bl	2b3f0 <z_handle_obj_poll_events>
   2acc6:	e7c8      	b.n	2ac5a <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2acc8:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2acca:	f002 0203 	and.w	r2, r2, #3
   2acce:	4302      	orrs	r2, r0
   2acd0:	600a      	str	r2, [r1, #0]
   2acd2:	e7e5      	b.n	2aca0 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2acd4:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2acd8:	430a      	orrs	r2, r1
   2acda:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2acdc:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2acde:	f002 0203 	and.w	r2, r2, #3
   2ace2:	ea40 0302 	orr.w	r3, r0, r2
   2ace6:	602b      	str	r3, [r5, #0]
}
   2ace8:	e7e8      	b.n	2acbc <queue_insert+0x9e>

0002acea <z_queue_node_peek>:
{
   2acea:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2acec:	4604      	mov	r4, r0
   2acee:	b130      	cbz	r0, 2acfe <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2acf0:	6802      	ldr	r2, [r0, #0]
   2acf2:	0793      	lsls	r3, r2, #30
   2acf4:	d003      	beq.n	2acfe <z_queue_node_peek+0x14>
		ret = anode->data;
   2acf6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2acf8:	b109      	cbz	r1, 2acfe <z_queue_node_peek+0x14>
			k_free(anode);
   2acfa:	f000 fba4 	bl	2b446 <k_free>
}
   2acfe:	4620      	mov	r0, r4
   2ad00:	bd10      	pop	{r4, pc}

0002ad02 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2ad02:	2301      	movs	r3, #1
{
   2ad04:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2ad06:	9300      	str	r3, [sp, #0]
   2ad08:	2300      	movs	r3, #0
{
   2ad0a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2ad0c:	4619      	mov	r1, r3
   2ad0e:	f7ff ff86 	bl	2ac1e <queue_insert>
}
   2ad12:	b003      	add	sp, #12
   2ad14:	f85d fb04 	ldr.w	pc, [sp], #4

0002ad18 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2ad18:	b15a      	cbz	r2, 2ad32 <z_impl_k_sem_init+0x1a>
   2ad1a:	428a      	cmp	r2, r1
   2ad1c:	d309      	bcc.n	2ad32 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2ad1e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2ad22:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2ad26:	e9c0 0000 	strd	r0, r0, [r0]
   2ad2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2ad2e:	2000      	movs	r0, #0
   2ad30:	4770      	bx	lr
		return -EINVAL;
   2ad32:	f06f 0015 	mvn.w	r0, #21
}
   2ad36:	4770      	bx	lr

0002ad38 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   2ad38:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   2ad3a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2ad3c:	408b      	lsls	r3, r1
   2ad3e:	ea22 0303 	bic.w	r3, r2, r3
   2ad42:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2ad44:	fa22 f001 	lsr.w	r0, r2, r1
}
   2ad48:	f000 0001 	and.w	r0, r0, #1
   2ad4c:	4770      	bx	lr

0002ad4e <unschedule_locked>:
{
   2ad4e:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2ad50:	2103      	movs	r1, #3
{
   2ad52:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2ad54:	300c      	adds	r0, #12
   2ad56:	f7ff ffef 	bl	2ad38 <flag_test_and_clear>
   2ad5a:	4604      	mov	r4, r0
   2ad5c:	b118      	cbz	r0, 2ad66 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2ad5e:	f105 0010 	add.w	r0, r5, #16
   2ad62:	f000 f96e 	bl	2b042 <z_abort_timeout>
}
   2ad66:	4620      	mov	r0, r4
   2ad68:	bd38      	pop	{r3, r4, r5, pc}

0002ad6a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2ad6a:	b120      	cbz	r0, 2ad76 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2ad6c:	2200      	movs	r2, #0
   2ad6e:	3090      	adds	r0, #144	; 0x90
   2ad70:	4611      	mov	r1, r2
   2ad72:	f000 b943 	b.w	2affc <z_sched_wake>
}
   2ad76:	4770      	bx	lr

0002ad78 <work_timeout>:
{
   2ad78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ad7a:	4604      	mov	r4, r0
	__asm__ volatile(
   2ad7c:	f04f 0320 	mov.w	r3, #32
   2ad80:	f3ef 8511 	mrs	r5, BASEPRI
   2ad84:	f383 8812 	msr	BASEPRI_MAX, r3
   2ad88:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2ad8c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2ad8e:	f1a0 0610 	sub.w	r6, r0, #16
   2ad92:	2103      	movs	r1, #3
   2ad94:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2ad96:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2ad98:	f7ff ffce 	bl	2ad38 <flag_test_and_clear>
   2ad9c:	b128      	cbz	r0, 2adaa <work_timeout+0x32>
		queue = dw->queue;
   2ad9e:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   2ada0:	4630      	mov	r0, r6
   2ada2:	a901      	add	r1, sp, #4
		queue = dw->queue;
   2ada4:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2ada6:	f7fa fc67 	bl	25678 <submit_to_queue_locked>
	__asm__ volatile(
   2adaa:	f385 8811 	msr	BASEPRI, r5
   2adae:	f3bf 8f6f 	isb	sy
}
   2adb2:	b002      	add	sp, #8
   2adb4:	bd70      	pop	{r4, r5, r6, pc}

0002adb6 <z_work_submit_to_queue>:
{
   2adb6:	b513      	push	{r0, r1, r4, lr}
   2adb8:	9001      	str	r0, [sp, #4]
   2adba:	4608      	mov	r0, r1
	__asm__ volatile(
   2adbc:	f04f 0320 	mov.w	r3, #32
   2adc0:	f3ef 8411 	mrs	r4, BASEPRI
   2adc4:	f383 8812 	msr	BASEPRI_MAX, r3
   2adc8:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2adcc:	a901      	add	r1, sp, #4
   2adce:	f7fa fc53 	bl	25678 <submit_to_queue_locked>
	__asm__ volatile(
   2add2:	f384 8811 	msr	BASEPRI, r4
   2add6:	f3bf 8f6f 	isb	sy
}
   2adda:	b002      	add	sp, #8
   2addc:	bd10      	pop	{r4, pc}

0002adde <k_work_submit_to_queue>:
{
   2adde:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2ade0:	f7ff ffe9 	bl	2adb6 <z_work_submit_to_queue>
	if (ret > 0) {
   2ade4:	1e04      	subs	r4, r0, #0
   2ade6:	dd09      	ble.n	2adfc <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2ade8:	f04f 0320 	mov.w	r3, #32
   2adec:	f3ef 8011 	mrs	r0, BASEPRI
   2adf0:	f383 8812 	msr	BASEPRI_MAX, r3
   2adf4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2adf8:	f000 f8da 	bl	2afb0 <z_reschedule_irqlock>
}
   2adfc:	4620      	mov	r0, r4
   2adfe:	bd10      	pop	{r4, pc}

0002ae00 <k_work_init_delayable>:
{
   2ae00:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2ae02:	2230      	movs	r2, #48	; 0x30
{
   2ae04:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2ae06:	2100      	movs	r1, #0
{
   2ae08:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
   2ae0a:	f000 fb68 	bl	2b4de <memset>
   2ae0e:	f44f 7380 	mov.w	r3, #256	; 0x100
   2ae12:	6065      	str	r5, [r4, #4]
   2ae14:	60e3      	str	r3, [r4, #12]
}
   2ae16:	bd38      	pop	{r3, r4, r5, pc}

0002ae18 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2ae18:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2ae1c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2ae1e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ae20:	2300      	movs	r3, #0
	node->prev = NULL;
   2ae22:	e9c0 3300 	strd	r3, r3, [r0]
}
   2ae26:	4770      	bx	lr

0002ae28 <unpend_thread_no_timeout>:
{
   2ae28:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2ae2a:	f7ff fff5 	bl	2ae18 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2ae2e:	7b43      	ldrb	r3, [r0, #13]
   2ae30:	f023 0302 	bic.w	r3, r3, #2
   2ae34:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2ae36:	2300      	movs	r3, #0
   2ae38:	6083      	str	r3, [r0, #8]
}
   2ae3a:	bd08      	pop	{r3, pc}

0002ae3c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2ae3c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2ae40:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2ae44:	4283      	cmp	r3, r0
		return b2 - b1;
   2ae46:	bf14      	ite	ne
   2ae48:	1ac0      	subne	r0, r0, r3
	return 0;
   2ae4a:	2000      	moveq	r0, #0
}
   2ae4c:	4770      	bx	lr

0002ae4e <z_thread_timeout>:
{
   2ae4e:	4601      	mov	r1, r0
   2ae50:	b510      	push	{r4, lr}
   2ae52:	f04f 0320 	mov.w	r3, #32
   2ae56:	f3ef 8411 	mrs	r4, BASEPRI
   2ae5a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ae5e:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2ae62:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2ae66:	f013 0f28 	tst.w	r3, #40	; 0x28
   2ae6a:	d10d      	bne.n	2ae88 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2ae6c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2ae70:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2ae72:	b10b      	cbz	r3, 2ae78 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2ae74:	f7ff ffd8 	bl	2ae28 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2ae78:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2ae7c:	f023 0314 	bic.w	r3, r3, #20
   2ae80:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2ae84:	f7fa fd60 	bl	25948 <ready_thread>
	__asm__ volatile(
   2ae88:	f384 8811 	msr	BASEPRI, r4
   2ae8c:	f3bf 8f6f 	isb	sy
}
   2ae90:	bd10      	pop	{r4, pc}

0002ae92 <add_to_waitq_locked>:
{
   2ae92:	b538      	push	{r3, r4, r5, lr}
   2ae94:	4604      	mov	r4, r0
   2ae96:	460d      	mov	r5, r1
	unready_thread(thread);
   2ae98:	f7fa fd8a 	bl	259b0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2ae9c:	7b63      	ldrb	r3, [r4, #13]
   2ae9e:	f043 0302 	orr.w	r3, r3, #2
   2aea2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2aea4:	b1e5      	cbz	r5, 2aee0 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   2aea6:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   2aea8:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2aeaa:	429d      	cmp	r5, r3
   2aeac:	d109      	bne.n	2aec2 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   2aeae:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2aeb0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2aeb4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2aeb6:	606c      	str	r4, [r5, #4]
}
   2aeb8:	e012      	b.n	2aee0 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   2aeba:	686a      	ldr	r2, [r5, #4]
   2aebc:	4293      	cmp	r3, r2
   2aebe:	d0f6      	beq.n	2aeae <add_to_waitq_locked+0x1c>
   2aec0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2aec2:	2b00      	cmp	r3, #0
   2aec4:	d0f3      	beq.n	2aeae <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   2aec6:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2aeca:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2aece:	428a      	cmp	r2, r1
   2aed0:	d0f3      	beq.n	2aeba <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2aed2:	4291      	cmp	r1, r2
   2aed4:	ddf1      	ble.n	2aeba <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   2aed6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2aed8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2aedc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2aede:	605c      	str	r4, [r3, #4]
}
   2aee0:	bd38      	pop	{r3, r4, r5, pc}

0002aee2 <z_ready_thread>:
{
   2aee2:	b510      	push	{r4, lr}
	__asm__ volatile(
   2aee4:	f04f 0320 	mov.w	r3, #32
   2aee8:	f3ef 8411 	mrs	r4, BASEPRI
   2aeec:	f383 8812 	msr	BASEPRI_MAX, r3
   2aef0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2aef4:	f7fa fd28 	bl	25948 <ready_thread>
	__asm__ volatile(
   2aef8:	f384 8811 	msr	BASEPRI, r4
   2aefc:	f3bf 8f6f 	isb	sy
}
   2af00:	bd10      	pop	{r4, pc}

0002af02 <z_unpend_thread_no_timeout>:
{
   2af02:	b508      	push	{r3, lr}
	__asm__ volatile(
   2af04:	f04f 0320 	mov.w	r3, #32
   2af08:	f3ef 8111 	mrs	r1, BASEPRI
   2af0c:	f383 8812 	msr	BASEPRI_MAX, r3
   2af10:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2af14:	f7ff ff88 	bl	2ae28 <unpend_thread_no_timeout>
	__asm__ volatile(
   2af18:	f381 8811 	msr	BASEPRI, r1
   2af1c:	f3bf 8f6f 	isb	sy
}
   2af20:	bd08      	pop	{r3, pc}

0002af22 <z_unpend1_no_timeout>:
{
   2af22:	b508      	push	{r3, lr}
   2af24:	4603      	mov	r3, r0
	__asm__ volatile(
   2af26:	f04f 0220 	mov.w	r2, #32
   2af2a:	f3ef 8111 	mrs	r1, BASEPRI
   2af2e:	f382 8812 	msr	BASEPRI_MAX, r2
   2af32:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2af36:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2af38:	4283      	cmp	r3, r0
   2af3a:	d007      	beq.n	2af4c <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   2af3c:	b108      	cbz	r0, 2af42 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   2af3e:	f7ff ff73 	bl	2ae28 <unpend_thread_no_timeout>
	__asm__ volatile(
   2af42:	f381 8811 	msr	BASEPRI, r1
   2af46:	f3bf 8f6f 	isb	sy
}
   2af4a:	bd08      	pop	{r3, pc}
   2af4c:	2000      	movs	r0, #0
   2af4e:	e7f8      	b.n	2af42 <z_unpend1_no_timeout+0x20>

0002af50 <z_unpend_first_thread>:
{
   2af50:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2af52:	f04f 0320 	mov.w	r3, #32
   2af56:	f3ef 8511 	mrs	r5, BASEPRI
   2af5a:	f383 8812 	msr	BASEPRI_MAX, r3
   2af5e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2af62:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2af64:	42a0      	cmp	r0, r4
   2af66:	d00d      	beq.n	2af84 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   2af68:	b134      	cbz	r4, 2af78 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   2af6a:	4620      	mov	r0, r4
   2af6c:	f7ff ff5c 	bl	2ae28 <unpend_thread_no_timeout>
   2af70:	f104 0018 	add.w	r0, r4, #24
   2af74:	f000 f865 	bl	2b042 <z_abort_timeout>
	__asm__ volatile(
   2af78:	f385 8811 	msr	BASEPRI, r5
   2af7c:	f3bf 8f6f 	isb	sy
}
   2af80:	4620      	mov	r0, r4
   2af82:	bd38      	pop	{r3, r4, r5, pc}
   2af84:	2400      	movs	r4, #0
   2af86:	e7f7      	b.n	2af78 <z_unpend_first_thread+0x28>

0002af88 <z_unpend_thread>:
{
   2af88:	b510      	push	{r4, lr}
	__asm__ volatile(
   2af8a:	f04f 0320 	mov.w	r3, #32
   2af8e:	f3ef 8411 	mrs	r4, BASEPRI
   2af92:	f383 8812 	msr	BASEPRI_MAX, r3
   2af96:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2af9a:	f7ff ff45 	bl	2ae28 <unpend_thread_no_timeout>
	__asm__ volatile(
   2af9e:	f384 8811 	msr	BASEPRI, r4
   2afa2:	f3bf 8f6f 	isb	sy
}
   2afa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2afaa:	3018      	adds	r0, #24
   2afac:	f000 b849 	b.w	2b042 <z_abort_timeout>

0002afb0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2afb0:	4603      	mov	r3, r0
   2afb2:	b920      	cbnz	r0, 2afbe <z_reschedule_irqlock+0xe>
   2afb4:	f3ef 8205 	mrs	r2, IPSR
   2afb8:	b90a      	cbnz	r2, 2afbe <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2afba:	f7f1 b841 	b.w	1c040 <arch_swap>
   2afbe:	f383 8811 	msr	BASEPRI, r3
   2afc2:	f3bf 8f6f 	isb	sy
}
   2afc6:	4770      	bx	lr

0002afc8 <z_reschedule_unlocked>:
	__asm__ volatile(
   2afc8:	f04f 0320 	mov.w	r3, #32
   2afcc:	f3ef 8011 	mrs	r0, BASEPRI
   2afd0:	f383 8812 	msr	BASEPRI_MAX, r3
   2afd4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2afd8:	f7ff bfea 	b.w	2afb0 <z_reschedule_irqlock>

0002afdc <z_unpend_all>:
{
   2afdc:	b538      	push	{r3, r4, r5, lr}
   2afde:	4605      	mov	r5, r0
	int need_sched = 0;
   2afe0:	2000      	movs	r0, #0
	return list->head == list;
   2afe2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2afe4:	42a5      	cmp	r5, r4
   2afe6:	d000      	beq.n	2afea <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2afe8:	b904      	cbnz	r4, 2afec <z_unpend_all+0x10>
}
   2afea:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2afec:	4620      	mov	r0, r4
   2afee:	f7ff ffcb 	bl	2af88 <z_unpend_thread>
		z_ready_thread(thread);
   2aff2:	4620      	mov	r0, r4
   2aff4:	f7ff ff75 	bl	2aee2 <z_ready_thread>
		need_sched = 1;
   2aff8:	2001      	movs	r0, #1
   2affa:	e7f2      	b.n	2afe2 <z_unpend_all+0x6>

0002affc <z_sched_wake>:
{
   2affc:	b538      	push	{r3, r4, r5, lr}
   2affe:	f04f 0320 	mov.w	r3, #32
   2b002:	f3ef 8511 	mrs	r5, BASEPRI
   2b006:	f383 8812 	msr	BASEPRI_MAX, r3
   2b00a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2b00e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b010:	42a0      	cmp	r0, r4
   2b012:	d012      	beq.n	2b03a <z_sched_wake+0x3e>
		if (thread != NULL) {
   2b014:	b19c      	cbz	r4, 2b03e <z_sched_wake+0x42>
   2b016:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   2b018:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   2b01a:	4620      	mov	r0, r4
   2b01c:	f7ff ff04 	bl	2ae28 <unpend_thread_no_timeout>
   2b020:	f104 0018 	add.w	r0, r4, #24
   2b024:	f000 f80d 	bl	2b042 <z_abort_timeout>
			ready_thread(thread);
   2b028:	4620      	mov	r0, r4
   2b02a:	f7fa fc8d 	bl	25948 <ready_thread>
			ret = true;
   2b02e:	2001      	movs	r0, #1
	__asm__ volatile(
   2b030:	f385 8811 	msr	BASEPRI, r5
   2b034:	f3bf 8f6f 	isb	sy
}
   2b038:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   2b03a:	2000      	movs	r0, #0
   2b03c:	e7f8      	b.n	2b030 <z_sched_wake+0x34>
   2b03e:	4620      	mov	r0, r4
   2b040:	e7f6      	b.n	2b030 <z_sched_wake+0x34>

0002b042 <z_abort_timeout>:
{
   2b042:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b044:	f04f 0220 	mov.w	r2, #32
   2b048:	f3ef 8411 	mrs	r4, BASEPRI
   2b04c:	f382 8812 	msr	BASEPRI_MAX, r2
   2b050:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2b054:	6803      	ldr	r3, [r0, #0]
   2b056:	b13b      	cbz	r3, 2b068 <z_abort_timeout+0x26>
			remove_timeout(to);
   2b058:	f7fa ffb0 	bl	25fbc <remove_timeout>
			ret = 0;
   2b05c:	2000      	movs	r0, #0
	__asm__ volatile(
   2b05e:	f384 8811 	msr	BASEPRI, r4
   2b062:	f3bf 8f6f 	isb	sy
}
   2b066:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2b068:	f06f 0015 	mvn.w	r0, #21
   2b06c:	e7f7      	b.n	2b05e <z_abort_timeout+0x1c>

0002b06e <z_get_next_timeout_expiry>:
{
   2b06e:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b070:	f04f 0320 	mov.w	r3, #32
   2b074:	f3ef 8411 	mrs	r4, BASEPRI
   2b078:	f383 8812 	msr	BASEPRI_MAX, r3
   2b07c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2b080:	f7fa ff74 	bl	25f6c <next_timeout>
	__asm__ volatile(
   2b084:	f384 8811 	msr	BASEPRI, r4
   2b088:	f3bf 8f6f 	isb	sy
}
   2b08c:	bd10      	pop	{r4, pc}

0002b08e <z_set_timeout_expiry>:
{
   2b08e:	b570      	push	{r4, r5, r6, lr}
   2b090:	4604      	mov	r4, r0
   2b092:	460d      	mov	r5, r1
	__asm__ volatile(
   2b094:	f04f 0320 	mov.w	r3, #32
   2b098:	f3ef 8611 	mrs	r6, BASEPRI
   2b09c:	f383 8812 	msr	BASEPRI_MAX, r3
   2b0a0:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2b0a4:	f7fa ff62 	bl	25f6c <next_timeout>
			      || (ticks <= next_to);
   2b0a8:	2801      	cmp	r0, #1
   2b0aa:	dd07      	ble.n	2b0bc <z_set_timeout_expiry+0x2e>
   2b0ac:	42a0      	cmp	r0, r4
   2b0ae:	db05      	blt.n	2b0bc <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2b0b0:	42a0      	cmp	r0, r4
   2b0b2:	4629      	mov	r1, r5
   2b0b4:	bfa8      	it	ge
   2b0b6:	4620      	movge	r0, r4
   2b0b8:	f7f3 fb2e 	bl	1e718 <sys_clock_set_timeout>
	__asm__ volatile(
   2b0bc:	f386 8811 	msr	BASEPRI, r6
   2b0c0:	f3bf 8f6f 	isb	sy
}
   2b0c4:	bd70      	pop	{r4, r5, r6, pc}

0002b0c6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2b0c6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2b0c8:	f7fb f86e 	bl	261a8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2b0cc:	bd08      	pop	{r3, pc}

0002b0ce <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2b0ce:	f7fb b86b 	b.w	261a8 <sys_clock_tick_get>

0002b0d2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2b0d2:	b108      	cbz	r0, 2b0d8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2b0d4:	f7ef be9e 	b.w	1ae14 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2b0d8:	4770      	bx	lr

0002b0da <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b0da:	f1b1 3fff 	cmp.w	r1, #4294967295
   2b0de:	bf08      	it	eq
   2b0e0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2b0e4:	b538      	push	{r3, r4, r5, lr}
   2b0e6:	460c      	mov	r4, r1
   2b0e8:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b0ea:	d014      	beq.n	2b116 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2b0ec:	4308      	orrs	r0, r1
   2b0ee:	d103      	bne.n	2b0f8 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2b0f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2b0f4:	f7fb b858 	b.w	261a8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2b0f8:	f06f 0001 	mvn.w	r0, #1
   2b0fc:	f04f 33ff 	mov.w	r3, #4294967295
   2b100:	1b40      	subs	r0, r0, r5
   2b102:	eb63 0101 	sbc.w	r1, r3, r1
   2b106:	2900      	cmp	r1, #0
   2b108:	da04      	bge.n	2b114 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2b10a:	f7fb f84d 	bl	261a8 <sys_clock_tick_get>
   2b10e:	1940      	adds	r0, r0, r5
   2b110:	eb41 0104 	adc.w	r1, r1, r4
}
   2b114:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2b116:	f04f 30ff 	mov.w	r0, #4294967295
   2b11a:	4601      	mov	r1, r0
   2b11c:	e7fa      	b.n	2b114 <sys_clock_timeout_end_calc+0x3a>

0002b11e <k_timer_init>:
	timer->status = 0U;
   2b11e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2b120:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2b124:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2b128:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2b12c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2b130:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2b132:	6343      	str	r3, [r0, #52]	; 0x34
}
   2b134:	4770      	bx	lr

0002b136 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2b136:	b510      	push	{r4, lr}
   2b138:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2b13a:	f7ff ff82 	bl	2b042 <z_abort_timeout>

	if (inactive) {
   2b13e:	b9b0      	cbnz	r0, 2b16e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2b140:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b142:	b10b      	cbz	r3, 2b148 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2b144:	4620      	mov	r0, r4
   2b146:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2b148:	f104 0018 	add.w	r0, r4, #24
   2b14c:	f7ff fee9 	bl	2af22 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2b150:	b168      	cbz	r0, 2b16e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2b152:	f7ff fec6 	bl	2aee2 <z_ready_thread>
	__asm__ volatile(
   2b156:	f04f 0320 	mov.w	r3, #32
   2b15a:	f3ef 8011 	mrs	r0, BASEPRI
   2b15e:	f383 8812 	msr	BASEPRI_MAX, r3
   2b162:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2b166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b16a:	f7ff bf21 	b.w	2afb0 <z_reschedule_irqlock>
   2b16e:	bd10      	pop	{r4, pc}

0002b170 <add_event>:
{
   2b170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b172:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2b174:	e9d0 1300 	ldrd	r1, r3, [r0]
   2b178:	4288      	cmp	r0, r1
   2b17a:	4604      	mov	r4, r0
   2b17c:	d105      	bne.n	2b18a <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2b17e:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2b180:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2b184:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2b186:	6065      	str	r5, [r4, #4]
   2b188:	e01d      	b.n	2b1c6 <add_event+0x56>
	if ((pending == NULL) ||
   2b18a:	2b00      	cmp	r3, #0
   2b18c:	d0f7      	beq.n	2b17e <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2b18e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b190:	b100      	cbz	r0, 2b194 <add_event+0x24>
   2b192:	3860      	subs	r0, #96	; 0x60
   2b194:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2b198:	4639      	mov	r1, r7
   2b19a:	f7ff fe4f 	bl	2ae3c <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2b19e:	2800      	cmp	r0, #0
   2b1a0:	dced      	bgt.n	2b17e <add_event+0xe>
	return list->head == list;
   2b1a2:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b1a4:	42b4      	cmp	r4, r6
   2b1a6:	d0ea      	beq.n	2b17e <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2b1a8:	2e00      	cmp	r6, #0
   2b1aa:	d0e8      	beq.n	2b17e <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2b1ac:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b1ae:	b101      	cbz	r1, 2b1b2 <add_event+0x42>
   2b1b0:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2b1b2:	4638      	mov	r0, r7
   2b1b4:	f7ff fe42 	bl	2ae3c <z_sched_prio_cmp>
   2b1b8:	2800      	cmp	r0, #0
   2b1ba:	dd05      	ble.n	2b1c8 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2b1bc:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2b1be:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2b1c2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2b1c4:	6075      	str	r5, [r6, #4]
}
   2b1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2b1c8:	6863      	ldr	r3, [r4, #4]
   2b1ca:	429e      	cmp	r6, r3
   2b1cc:	d0d7      	beq.n	2b17e <add_event+0xe>
   2b1ce:	6836      	ldr	r6, [r6, #0]
   2b1d0:	e7ea      	b.n	2b1a8 <add_event+0x38>

0002b1d2 <register_events>:
{
   2b1d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2b1d6:	2500      	movs	r5, #0
{
   2b1d8:	468b      	mov	fp, r1
   2b1da:	4614      	mov	r4, r2
   2b1dc:	461f      	mov	r7, r3
   2b1de:	4682      	mov	sl, r0
	int events_registered = 0;
   2b1e0:	462e      	mov	r6, r5
	event->poller = NULL;
   2b1e2:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2b1e4:	455d      	cmp	r5, fp
   2b1e6:	db02      	blt.n	2b1ee <register_events+0x1c>
}
   2b1e8:	4630      	mov	r0, r6
   2b1ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1ee:	f04f 0320 	mov.w	r3, #32
   2b1f2:	f3ef 8911 	mrs	r9, BASEPRI
   2b1f6:	f383 8812 	msr	BASEPRI_MAX, r3
   2b1fa:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2b1fe:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2b202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2b206:	3b01      	subs	r3, #1
   2b208:	2b07      	cmp	r3, #7
   2b20a:	d80f      	bhi.n	2b22c <register_events+0x5a>
   2b20c:	e8df f003 	tbb	[pc, r3]
   2b210:	0a0e041e 	.word	0x0a0e041e
   2b214:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   2b218:	f8da 3010 	ldr.w	r3, [sl, #16]
   2b21c:	689b      	ldr	r3, [r3, #8]
   2b21e:	b12b      	cbz	r3, 2b22c <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2b220:	2302      	movs	r3, #2
   2b222:	e020      	b.n	2b266 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2b224:	f8da 3010 	ldr.w	r3, [sl, #16]
   2b228:	681b      	ldr	r3, [r3, #0]
   2b22a:	bb8b      	cbnz	r3, 2b290 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2b22c:	bb47      	cbnz	r7, 2b280 <register_events+0xae>
   2b22e:	7823      	ldrb	r3, [r4, #0]
   2b230:	b333      	cbz	r3, 2b280 <register_events+0xae>
	switch (event->type) {
   2b232:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2b236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2b23a:	3b01      	subs	r3, #1
   2b23c:	2b07      	cmp	r3, #7
   2b23e:	d830      	bhi.n	2b2a2 <register_events+0xd0>
   2b240:	e8df f003 	tbb	[pc, r3]
   2b244:	282f2833 	.word	0x282f2833
   2b248:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   2b24c:	f8da 3010 	ldr.w	r3, [sl, #16]
   2b250:	689b      	ldr	r3, [r3, #8]
   2b252:	2b00      	cmp	r3, #0
   2b254:	d0ea      	beq.n	2b22c <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2b256:	2301      	movs	r3, #1
   2b258:	e005      	b.n	2b266 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2b25a:	f8da 3010 	ldr.w	r3, [sl, #16]
   2b25e:	6a1b      	ldr	r3, [r3, #32]
   2b260:	2b00      	cmp	r3, #0
   2b262:	d0e3      	beq.n	2b22c <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2b264:	2310      	movs	r3, #16
	event->state |= state;
   2b266:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2b26a:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2b26e:	f3c2 3186 	ubfx	r1, r2, #14, #7
   2b272:	430b      	orrs	r3, r1
   2b274:	f363 3294 	bfi	r2, r3, #14, #7
   2b278:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2b27c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2b280:	f389 8811 	msr	BASEPRI, r9
   2b284:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2b288:	3501      	adds	r5, #1
   2b28a:	f10a 0a14 	add.w	sl, sl, #20
   2b28e:	e7a9      	b.n	2b1e4 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2b290:	2304      	movs	r3, #4
   2b292:	e7e8      	b.n	2b266 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2b294:	4622      	mov	r2, r4
   2b296:	4651      	mov	r1, sl
   2b298:	f8da 0010 	ldr.w	r0, [sl, #16]
   2b29c:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2b29e:	f7ff ff67 	bl	2b170 <add_event>
	event->poller = poller;
   2b2a2:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2b2a6:	3601      	adds	r6, #1
   2b2a8:	e7ea      	b.n	2b280 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2b2aa:	4622      	mov	r2, r4
   2b2ac:	4651      	mov	r1, sl
   2b2ae:	f8da 0010 	ldr.w	r0, [sl, #16]
   2b2b2:	e7f4      	b.n	2b29e <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2b2b4:	f8da 0010 	ldr.w	r0, [sl, #16]
   2b2b8:	4622      	mov	r2, r4
   2b2ba:	4651      	mov	r1, sl
   2b2bc:	3024      	adds	r0, #36	; 0x24
   2b2be:	e7ee      	b.n	2b29e <register_events+0xcc>

0002b2c0 <signal_poll_event>:
{
   2b2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2b2c4:	6884      	ldr	r4, [r0, #8]
{
   2b2c6:	4605      	mov	r5, r0
   2b2c8:	460e      	mov	r6, r1
	if (poller != NULL) {
   2b2ca:	b144      	cbz	r4, 2b2de <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2b2cc:	7863      	ldrb	r3, [r4, #1]
   2b2ce:	2b01      	cmp	r3, #1
   2b2d0:	d12e      	bne.n	2b330 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2b2d2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2b2d6:	f013 0302 	ands.w	r3, r3, #2
   2b2da:	d10a      	bne.n	2b2f2 <signal_poll_event+0x32>
		poller->is_polling = false;
   2b2dc:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2b2de:	2000      	movs	r0, #0
	event->state |= state;
   2b2e0:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   2b2e2:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2b2e4:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2b2e8:	4316      	orrs	r6, r2
   2b2ea:	f366 3394 	bfi	r3, r6, #14, #7
   2b2ee:	60eb      	str	r3, [r5, #12]
	return retcode;
   2b2f0:	e03e      	b.n	2b370 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2b2f2:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2b2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
   2b2fa:	bf08      	it	eq
   2b2fc:	f112 0f02 	cmneq.w	r2, #2
   2b300:	d032      	beq.n	2b368 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b302:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2b306:	4640      	mov	r0, r8
   2b308:	f7ff fe3e 	bl	2af88 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2b30c:	2e08      	cmp	r6, #8
   2b30e:	bf0c      	ite	eq
   2b310:	f06f 0303 	mvneq.w	r3, #3
   2b314:	2300      	movne	r3, #0
   2b316:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2b318:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2b31c:	06db      	lsls	r3, r3, #27
   2b31e:	d109      	bne.n	2b334 <signal_poll_event+0x74>
   2b320:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2b324:	b937      	cbnz	r7, 2b334 <signal_poll_event+0x74>
	z_ready_thread(thread);
   2b326:	4640      	mov	r0, r8
   2b328:	f7ff fddb 	bl	2aee2 <z_ready_thread>
		poller->is_polling = false;
   2b32c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2b32e:	e7d6      	b.n	2b2de <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2b330:	2b02      	cmp	r3, #2
   2b332:	d001      	beq.n	2b338 <signal_poll_event+0x78>
		poller->is_polling = false;
   2b334:	2300      	movs	r3, #0
   2b336:	e7d1      	b.n	2b2dc <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2b338:	7823      	ldrb	r3, [r4, #0]
   2b33a:	2b00      	cmp	r3, #0
   2b33c:	d0cf      	beq.n	2b2de <signal_poll_event+0x1e>
   2b33e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2b342:	2f00      	cmp	r7, #0
   2b344:	d0f2      	beq.n	2b32c <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2b346:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2b34a:	f1a4 0914 	sub.w	r9, r4, #20
   2b34e:	f104 0014 	add.w	r0, r4, #20
   2b352:	f7ff fe76 	bl	2b042 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   2b356:	4649      	mov	r1, r9
   2b358:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2b35a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2b35e:	f7ff fd2a 	bl	2adb6 <z_work_submit_to_queue>
		poller->is_polling = false;
   2b362:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2b366:	e7ba      	b.n	2b2de <signal_poll_event+0x1e>
		poller->is_polling = false;
   2b368:	2300      	movs	r3, #0
		return -EAGAIN;
   2b36a:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2b36e:	7023      	strb	r3, [r4, #0]
}
   2b370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002b374 <clear_event_registrations>:
	while (num_events--) {
   2b374:	2314      	movs	r3, #20
{
   2b376:	b5f0      	push	{r4, r5, r6, r7, lr}
	event->poller = NULL;
   2b378:	2400      	movs	r4, #0
	switch (event->type) {
   2b37a:	f44f 768b 	mov.w	r6, #278	; 0x116
   2b37e:	fb03 0001 	mla	r0, r3, r1, r0
	while (num_events--) {
   2b382:	b901      	cbnz	r1, 2b386 <clear_event_registrations+0x12>
}
   2b384:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2b386:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   2b38a:	f1a0 0714 	sub.w	r7, r0, #20
   2b38e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2b392:	2b08      	cmp	r3, #8
	event->poller = NULL;
   2b394:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2b398:	d80c      	bhi.n	2b3b4 <clear_event_registrations+0x40>
   2b39a:	fa26 f303 	lsr.w	r3, r6, r3
   2b39e:	07db      	lsls	r3, r3, #31
   2b3a0:	d508      	bpl.n	2b3b4 <clear_event_registrations+0x40>
	return node->next != NULL;
   2b3a2:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2b3a6:	b12b      	cbz	r3, 2b3b4 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2b3a8:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2b3ac:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2b3ae:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2b3b0:	e940 4405 	strd	r4, r4, [r0, #-20]
   2b3b4:	f382 8811 	msr	BASEPRI, r2
   2b3b8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2b3bc:	f04f 0320 	mov.w	r3, #32
   2b3c0:	f3ef 8211 	mrs	r2, BASEPRI
   2b3c4:	f383 8812 	msr	BASEPRI_MAX, r3
   2b3c8:	f3bf 8f6f 	isb	sy
   2b3cc:	4638      	mov	r0, r7
   2b3ce:	3901      	subs	r1, #1
   2b3d0:	e7d7      	b.n	2b382 <clear_event_registrations+0xe>

0002b3d2 <k_poll_event_init>:
{
   2b3d2:	b510      	push	{r4, lr}
	event->poller = NULL;
   2b3d4:	2400      	movs	r4, #0
	event->type = type;
   2b3d6:	0552      	lsls	r2, r2, #21
   2b3d8:	0209      	lsls	r1, r1, #8
   2b3da:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2b3de:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   2b3e2:	430a      	orrs	r2, r1
   2b3e4:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2b3e6:	6084      	str	r4, [r0, #8]
	event->type = type;
   2b3e8:	430a      	orrs	r2, r1
	event->obj = obj;
   2b3ea:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   2b3ee:	bd10      	pop	{r4, pc}

0002b3f0 <z_handle_obj_poll_events>:
{
   2b3f0:	4603      	mov	r3, r0
	return list->head == list;
   2b3f2:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2b3f4:	4283      	cmp	r3, r0
   2b3f6:	d008      	beq.n	2b40a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2b3f8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2b3fc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2b3fe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b400:	2300      	movs	r3, #0
	node->prev = NULL;
   2b402:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2b406:	f7ff bf5b 	b.w	2b2c0 <signal_poll_event>
}
   2b40a:	4770      	bx	lr

0002b40c <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2b40c:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2b40e:	e9c0 0000 	strd	r0, r0, [r0]
   2b412:	6083      	str	r3, [r0, #8]
}
   2b414:	4770      	bx	lr

0002b416 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   2b416:	6883      	ldr	r3, [r0, #8]
   2b418:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   2b41a:	68c3      	ldr	r3, [r0, #12]
   2b41c:	6013      	str	r3, [r2, #0]
}
   2b41e:	4770      	bx	lr

0002b420 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2b420:	3204      	adds	r2, #4
{
   2b422:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   2b424:	4604      	mov	r4, r0
   2b426:	d208      	bcs.n	2b43a <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2b428:	2600      	movs	r6, #0
   2b42a:	2700      	movs	r7, #0
   2b42c:	f041 0104 	orr.w	r1, r1, #4
   2b430:	e9cd 6700 	strd	r6, r7, [sp]
   2b434:	f7ff fb5c 	bl	2aaf0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2b438:	b910      	cbnz	r0, 2b440 <z_heap_aligned_alloc+0x20>
		return NULL;
   2b43a:	2000      	movs	r0, #0
}
   2b43c:	b002      	add	sp, #8
   2b43e:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   2b440:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   2b444:	e7fa      	b.n	2b43c <z_heap_aligned_alloc+0x1c>

0002b446 <k_free>:
	if (ptr != NULL) {
   2b446:	b120      	cbz	r0, 2b452 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2b448:	1f01      	subs	r1, r0, #4
   2b44a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2b44e:	f7ff bba6 	b.w	2ab9e <k_heap_free>
}
   2b452:	4770      	bx	lr

0002b454 <k_malloc>:
{
   2b454:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2b456:	2004      	movs	r0, #4
   2b458:	f7fa bffa 	b.w	26450 <k_aligned_alloc>

0002b45c <k_calloc>:
{
   2b45c:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   2b45e:	fba0 5401 	umull	r5, r4, r0, r1
   2b462:	b924      	cbnz	r4, 2b46e <k_calloc+0x12>
	ret = k_malloc(bounds);
   2b464:	4628      	mov	r0, r5
   2b466:	f7ff fff5 	bl	2b454 <k_malloc>
	if (ret != NULL) {
   2b46a:	4606      	mov	r6, r0
   2b46c:	b910      	cbnz	r0, 2b474 <k_calloc+0x18>
		return NULL;
   2b46e:	2600      	movs	r6, #0
}
   2b470:	4630      	mov	r0, r6
   2b472:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   2b474:	462a      	mov	r2, r5
   2b476:	4621      	mov	r1, r4
   2b478:	f000 f831 	bl	2b4de <memset>
   2b47c:	e7f8      	b.n	2b470 <k_calloc+0x14>

0002b47e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2b47e:	4770      	bx	lr

0002b480 <abs>:
   2b480:	2800      	cmp	r0, #0
   2b482:	bfb8      	it	lt
   2b484:	4240      	neglt	r0, r0
   2b486:	4770      	bx	lr

0002b488 <memchr>:
   2b488:	b2c9      	uxtb	r1, r1
   2b48a:	4603      	mov	r3, r0
   2b48c:	4402      	add	r2, r0
   2b48e:	b510      	push	{r4, lr}
   2b490:	4293      	cmp	r3, r2
   2b492:	4618      	mov	r0, r3
   2b494:	d101      	bne.n	2b49a <memchr+0x12>
   2b496:	2000      	movs	r0, #0
   2b498:	e003      	b.n	2b4a2 <memchr+0x1a>
   2b49a:	7804      	ldrb	r4, [r0, #0]
   2b49c:	3301      	adds	r3, #1
   2b49e:	428c      	cmp	r4, r1
   2b4a0:	d1f6      	bne.n	2b490 <memchr+0x8>
   2b4a2:	bd10      	pop	{r4, pc}

0002b4a4 <memcmp>:
   2b4a4:	3901      	subs	r1, #1
   2b4a6:	4402      	add	r2, r0
   2b4a8:	b510      	push	{r4, lr}
   2b4aa:	4290      	cmp	r0, r2
   2b4ac:	d101      	bne.n	2b4b2 <memcmp+0xe>
   2b4ae:	2000      	movs	r0, #0
   2b4b0:	e005      	b.n	2b4be <memcmp+0x1a>
   2b4b2:	7803      	ldrb	r3, [r0, #0]
   2b4b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2b4b8:	42a3      	cmp	r3, r4
   2b4ba:	d001      	beq.n	2b4c0 <memcmp+0x1c>
   2b4bc:	1b18      	subs	r0, r3, r4
   2b4be:	bd10      	pop	{r4, pc}
   2b4c0:	3001      	adds	r0, #1
   2b4c2:	e7f2      	b.n	2b4aa <memcmp+0x6>

0002b4c4 <memcpy>:
   2b4c4:	440a      	add	r2, r1
   2b4c6:	1e43      	subs	r3, r0, #1
   2b4c8:	4291      	cmp	r1, r2
   2b4ca:	d100      	bne.n	2b4ce <memcpy+0xa>
   2b4cc:	4770      	bx	lr
   2b4ce:	b510      	push	{r4, lr}
   2b4d0:	f811 4b01 	ldrb.w	r4, [r1], #1
   2b4d4:	4291      	cmp	r1, r2
   2b4d6:	f803 4f01 	strb.w	r4, [r3, #1]!
   2b4da:	d1f9      	bne.n	2b4d0 <memcpy+0xc>
   2b4dc:	bd10      	pop	{r4, pc}

0002b4de <memset>:
   2b4de:	4402      	add	r2, r0
   2b4e0:	4603      	mov	r3, r0
   2b4e2:	4293      	cmp	r3, r2
   2b4e4:	d100      	bne.n	2b4e8 <memset+0xa>
   2b4e6:	4770      	bx	lr
   2b4e8:	f803 1b01 	strb.w	r1, [r3], #1
   2b4ec:	e7f9      	b.n	2b4e2 <memset+0x4>

0002b4ee <__seofread>:
   2b4ee:	2000      	movs	r0, #0
   2b4f0:	4770      	bx	lr

0002b4f2 <strchr>:
   2b4f2:	b2c9      	uxtb	r1, r1
   2b4f4:	4603      	mov	r3, r0
   2b4f6:	4618      	mov	r0, r3
   2b4f8:	f813 2b01 	ldrb.w	r2, [r3], #1
   2b4fc:	b112      	cbz	r2, 2b504 <strchr+0x12>
   2b4fe:	428a      	cmp	r2, r1
   2b500:	d1f9      	bne.n	2b4f6 <strchr+0x4>
   2b502:	4770      	bx	lr
   2b504:	2900      	cmp	r1, #0
   2b506:	bf18      	it	ne
   2b508:	2000      	movne	r0, #0
   2b50a:	4770      	bx	lr

0002b50c <strcpy>:
   2b50c:	4603      	mov	r3, r0
   2b50e:	f811 2b01 	ldrb.w	r2, [r1], #1
   2b512:	f803 2b01 	strb.w	r2, [r3], #1
   2b516:	2a00      	cmp	r2, #0
   2b518:	d1f9      	bne.n	2b50e <strcpy+0x2>
   2b51a:	4770      	bx	lr

0002b51c <strncmp>:
   2b51c:	b510      	push	{r4, lr}
   2b51e:	b16a      	cbz	r2, 2b53c <strncmp+0x20>
   2b520:	3901      	subs	r1, #1
   2b522:	1884      	adds	r4, r0, r2
   2b524:	f810 2b01 	ldrb.w	r2, [r0], #1
   2b528:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2b52c:	429a      	cmp	r2, r3
   2b52e:	d103      	bne.n	2b538 <strncmp+0x1c>
   2b530:	42a0      	cmp	r0, r4
   2b532:	d001      	beq.n	2b538 <strncmp+0x1c>
   2b534:	2a00      	cmp	r2, #0
   2b536:	d1f5      	bne.n	2b524 <strncmp+0x8>
   2b538:	1ad0      	subs	r0, r2, r3
   2b53a:	bd10      	pop	{r4, pc}
   2b53c:	4610      	mov	r0, r2
   2b53e:	e7fc      	b.n	2b53a <strncmp+0x1e>

0002b540 <strncpy>:
   2b540:	3901      	subs	r1, #1
   2b542:	4603      	mov	r3, r0
   2b544:	b510      	push	{r4, lr}
   2b546:	b132      	cbz	r2, 2b556 <strncpy+0x16>
   2b548:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2b54c:	3a01      	subs	r2, #1
   2b54e:	f803 4b01 	strb.w	r4, [r3], #1
   2b552:	2c00      	cmp	r4, #0
   2b554:	d1f7      	bne.n	2b546 <strncpy+0x6>
   2b556:	441a      	add	r2, r3
   2b558:	2100      	movs	r1, #0
   2b55a:	4293      	cmp	r3, r2
   2b55c:	d100      	bne.n	2b560 <strncpy+0x20>
   2b55e:	bd10      	pop	{r4, pc}
   2b560:	f803 1b01 	strb.w	r1, [r3], #1
   2b564:	e7f9      	b.n	2b55a <strncpy+0x1a>

0002b566 <strnlen>:
   2b566:	4602      	mov	r2, r0
   2b568:	4401      	add	r1, r0
   2b56a:	b510      	push	{r4, lr}
   2b56c:	428a      	cmp	r2, r1
   2b56e:	4613      	mov	r3, r2
   2b570:	d003      	beq.n	2b57a <strnlen+0x14>
   2b572:	781c      	ldrb	r4, [r3, #0]
   2b574:	3201      	adds	r2, #1
   2b576:	2c00      	cmp	r4, #0
   2b578:	d1f8      	bne.n	2b56c <strnlen+0x6>
   2b57a:	1a18      	subs	r0, r3, r0
   2b57c:	bd10      	pop	{r4, pc}

0002b57e <strstr>:
   2b57e:	780a      	ldrb	r2, [r1, #0]
   2b580:	b570      	push	{r4, r5, r6, lr}
   2b582:	b96a      	cbnz	r2, 2b5a0 <strstr+0x22>
   2b584:	bd70      	pop	{r4, r5, r6, pc}
   2b586:	429a      	cmp	r2, r3
   2b588:	d109      	bne.n	2b59e <strstr+0x20>
   2b58a:	460c      	mov	r4, r1
   2b58c:	4605      	mov	r5, r0
   2b58e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2b592:	2b00      	cmp	r3, #0
   2b594:	d0f6      	beq.n	2b584 <strstr+0x6>
   2b596:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   2b59a:	429e      	cmp	r6, r3
   2b59c:	d0f7      	beq.n	2b58e <strstr+0x10>
   2b59e:	3001      	adds	r0, #1
   2b5a0:	7803      	ldrb	r3, [r0, #0]
   2b5a2:	2b00      	cmp	r3, #0
   2b5a4:	d1ef      	bne.n	2b586 <strstr+0x8>
   2b5a6:	4618      	mov	r0, r3
   2b5a8:	e7ec      	b.n	2b584 <strstr+0x6>

0002b5aa <_strtol_r>:
   2b5aa:	f7fb b87f 	b.w	266ac <_strtol_l.constprop.0>

0002b5ae <_strtoul_r>:
   2b5ae:	f7fb b9a3 	b.w	268f8 <_strtoul_l.constprop.0>

0002b5b2 <_vsniprintf_r>:
   2b5b2:	b530      	push	{r4, r5, lr}
   2b5b4:	4614      	mov	r4, r2
   2b5b6:	b09b      	sub	sp, #108	; 0x6c
   2b5b8:	4605      	mov	r5, r0
   2b5ba:	461a      	mov	r2, r3
   2b5bc:	2c00      	cmp	r4, #0
   2b5be:	da05      	bge.n	2b5cc <_vsniprintf_r+0x1a>
   2b5c0:	238b      	movs	r3, #139	; 0x8b
   2b5c2:	6003      	str	r3, [r0, #0]
   2b5c4:	f04f 30ff 	mov.w	r0, #4294967295
   2b5c8:	b01b      	add	sp, #108	; 0x6c
   2b5ca:	bd30      	pop	{r4, r5, pc}
   2b5cc:	f44f 7302 	mov.w	r3, #520	; 0x208
   2b5d0:	9100      	str	r1, [sp, #0]
   2b5d2:	9104      	str	r1, [sp, #16]
   2b5d4:	4669      	mov	r1, sp
   2b5d6:	f8ad 300c 	strh.w	r3, [sp, #12]
   2b5da:	bf14      	ite	ne
   2b5dc:	f104 33ff 	addne.w	r3, r4, #4294967295
   2b5e0:	4623      	moveq	r3, r4
   2b5e2:	9302      	str	r3, [sp, #8]
   2b5e4:	9305      	str	r3, [sp, #20]
   2b5e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b5ea:	f8ad 300e 	strh.w	r3, [sp, #14]
   2b5ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2b5f0:	f7fb fa46 	bl	26a80 <_svfiprintf_r>
   2b5f4:	1c43      	adds	r3, r0, #1
   2b5f6:	bfbc      	itt	lt
   2b5f8:	238b      	movlt	r3, #139	; 0x8b
   2b5fa:	602b      	strlt	r3, [r5, #0]
   2b5fc:	2c00      	cmp	r4, #0
   2b5fe:	d0e3      	beq.n	2b5c8 <_vsniprintf_r+0x16>
   2b600:	9b00      	ldr	r3, [sp, #0]
   2b602:	2200      	movs	r2, #0
   2b604:	701a      	strb	r2, [r3, #0]
   2b606:	e7df      	b.n	2b5c8 <_vsniprintf_r+0x16>

0002b608 <__ssputs_r>:
   2b608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b60c:	461f      	mov	r7, r3
   2b60e:	688e      	ldr	r6, [r1, #8]
   2b610:	4682      	mov	sl, r0
   2b612:	460c      	mov	r4, r1
   2b614:	42be      	cmp	r6, r7
   2b616:	4690      	mov	r8, r2
   2b618:	680b      	ldr	r3, [r1, #0]
   2b61a:	d82d      	bhi.n	2b678 <__ssputs_r+0x70>
   2b61c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2b620:	f412 6f90 	tst.w	r2, #1152	; 0x480
   2b624:	d026      	beq.n	2b674 <__ssputs_r+0x6c>
   2b626:	6965      	ldr	r5, [r4, #20]
   2b628:	6909      	ldr	r1, [r1, #16]
   2b62a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2b62e:	eba3 0901 	sub.w	r9, r3, r1
   2b632:	1c7b      	adds	r3, r7, #1
   2b634:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2b638:	444b      	add	r3, r9
   2b63a:	106d      	asrs	r5, r5, #1
   2b63c:	429d      	cmp	r5, r3
   2b63e:	bf38      	it	cc
   2b640:	461d      	movcc	r5, r3
   2b642:	0553      	lsls	r3, r2, #21
   2b644:	d527      	bpl.n	2b696 <__ssputs_r+0x8e>
   2b646:	4629      	mov	r1, r5
   2b648:	f7fa ff92 	bl	26570 <_malloc_r>
   2b64c:	4606      	mov	r6, r0
   2b64e:	b360      	cbz	r0, 2b6aa <__ssputs_r+0xa2>
   2b650:	464a      	mov	r2, r9
   2b652:	6921      	ldr	r1, [r4, #16]
   2b654:	f7ff ff36 	bl	2b4c4 <memcpy>
   2b658:	89a3      	ldrh	r3, [r4, #12]
   2b65a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   2b65e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2b662:	81a3      	strh	r3, [r4, #12]
   2b664:	6126      	str	r6, [r4, #16]
   2b666:	444e      	add	r6, r9
   2b668:	6165      	str	r5, [r4, #20]
   2b66a:	eba5 0509 	sub.w	r5, r5, r9
   2b66e:	6026      	str	r6, [r4, #0]
   2b670:	463e      	mov	r6, r7
   2b672:	60a5      	str	r5, [r4, #8]
   2b674:	42be      	cmp	r6, r7
   2b676:	d900      	bls.n	2b67a <__ssputs_r+0x72>
   2b678:	463e      	mov	r6, r7
   2b67a:	4632      	mov	r2, r6
   2b67c:	4641      	mov	r1, r8
   2b67e:	6820      	ldr	r0, [r4, #0]
   2b680:	f000 f957 	bl	2b932 <memmove>
   2b684:	68a3      	ldr	r3, [r4, #8]
   2b686:	2000      	movs	r0, #0
   2b688:	1b9b      	subs	r3, r3, r6
   2b68a:	60a3      	str	r3, [r4, #8]
   2b68c:	6823      	ldr	r3, [r4, #0]
   2b68e:	4433      	add	r3, r6
   2b690:	6023      	str	r3, [r4, #0]
   2b692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b696:	462a      	mov	r2, r5
   2b698:	f000 f965 	bl	2b966 <_realloc_r>
   2b69c:	4606      	mov	r6, r0
   2b69e:	2800      	cmp	r0, #0
   2b6a0:	d1e0      	bne.n	2b664 <__ssputs_r+0x5c>
   2b6a2:	6921      	ldr	r1, [r4, #16]
   2b6a4:	4650      	mov	r0, sl
   2b6a6:	f7fa ff19 	bl	264dc <_free_r>
   2b6aa:	230c      	movs	r3, #12
   2b6ac:	f04f 30ff 	mov.w	r0, #4294967295
   2b6b0:	f8ca 3000 	str.w	r3, [sl]
   2b6b4:	89a3      	ldrh	r3, [r4, #12]
   2b6b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b6ba:	81a3      	strh	r3, [r4, #12]
   2b6bc:	e7e9      	b.n	2b692 <__ssputs_r+0x8a>

0002b6be <_sungetc_r>:
   2b6be:	b538      	push	{r3, r4, r5, lr}
   2b6c0:	1c4b      	adds	r3, r1, #1
   2b6c2:	4614      	mov	r4, r2
   2b6c4:	d103      	bne.n	2b6ce <_sungetc_r+0x10>
   2b6c6:	f04f 35ff 	mov.w	r5, #4294967295
   2b6ca:	4628      	mov	r0, r5
   2b6cc:	bd38      	pop	{r3, r4, r5, pc}
   2b6ce:	8993      	ldrh	r3, [r2, #12]
   2b6d0:	b2cd      	uxtb	r5, r1
   2b6d2:	f023 0320 	bic.w	r3, r3, #32
   2b6d6:	8193      	strh	r3, [r2, #12]
   2b6d8:	6853      	ldr	r3, [r2, #4]
   2b6da:	6b52      	ldr	r2, [r2, #52]	; 0x34
   2b6dc:	b18a      	cbz	r2, 2b702 <_sungetc_r+0x44>
   2b6de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2b6e0:	429a      	cmp	r2, r3
   2b6e2:	dd08      	ble.n	2b6f6 <_sungetc_r+0x38>
   2b6e4:	6823      	ldr	r3, [r4, #0]
   2b6e6:	1e5a      	subs	r2, r3, #1
   2b6e8:	6022      	str	r2, [r4, #0]
   2b6ea:	f803 5c01 	strb.w	r5, [r3, #-1]
   2b6ee:	6863      	ldr	r3, [r4, #4]
   2b6f0:	3301      	adds	r3, #1
   2b6f2:	6063      	str	r3, [r4, #4]
   2b6f4:	e7e9      	b.n	2b6ca <_sungetc_r+0xc>
   2b6f6:	4621      	mov	r1, r4
   2b6f8:	f000 f8e4 	bl	2b8c4 <__submore>
   2b6fc:	2800      	cmp	r0, #0
   2b6fe:	d0f1      	beq.n	2b6e4 <_sungetc_r+0x26>
   2b700:	e7e1      	b.n	2b6c6 <_sungetc_r+0x8>
   2b702:	6921      	ldr	r1, [r4, #16]
   2b704:	6822      	ldr	r2, [r4, #0]
   2b706:	b141      	cbz	r1, 2b71a <_sungetc_r+0x5c>
   2b708:	4291      	cmp	r1, r2
   2b70a:	d206      	bcs.n	2b71a <_sungetc_r+0x5c>
   2b70c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   2b710:	42a9      	cmp	r1, r5
   2b712:	d102      	bne.n	2b71a <_sungetc_r+0x5c>
   2b714:	3a01      	subs	r2, #1
   2b716:	6022      	str	r2, [r4, #0]
   2b718:	e7ea      	b.n	2b6f0 <_sungetc_r+0x32>
   2b71a:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   2b71e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2b722:	6363      	str	r3, [r4, #52]	; 0x34
   2b724:	2303      	movs	r3, #3
   2b726:	63a3      	str	r3, [r4, #56]	; 0x38
   2b728:	4623      	mov	r3, r4
   2b72a:	f803 5f46 	strb.w	r5, [r3, #70]!
   2b72e:	6023      	str	r3, [r4, #0]
   2b730:	2301      	movs	r3, #1
   2b732:	e7de      	b.n	2b6f2 <_sungetc_r+0x34>

0002b734 <__ssrefill_r>:
   2b734:	b510      	push	{r4, lr}
   2b736:	460c      	mov	r4, r1
   2b738:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2b73a:	b169      	cbz	r1, 2b758 <__ssrefill_r+0x24>
   2b73c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2b740:	4299      	cmp	r1, r3
   2b742:	d001      	beq.n	2b748 <__ssrefill_r+0x14>
   2b744:	f7fa feca 	bl	264dc <_free_r>
   2b748:	2000      	movs	r0, #0
   2b74a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2b74c:	6360      	str	r0, [r4, #52]	; 0x34
   2b74e:	6063      	str	r3, [r4, #4]
   2b750:	b113      	cbz	r3, 2b758 <__ssrefill_r+0x24>
   2b752:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2b754:	6023      	str	r3, [r4, #0]
   2b756:	bd10      	pop	{r4, pc}
   2b758:	6923      	ldr	r3, [r4, #16]
   2b75a:	f04f 30ff 	mov.w	r0, #4294967295
   2b75e:	6023      	str	r3, [r4, #0]
   2b760:	2300      	movs	r3, #0
   2b762:	6063      	str	r3, [r4, #4]
   2b764:	89a3      	ldrh	r3, [r4, #12]
   2b766:	f043 0320 	orr.w	r3, r3, #32
   2b76a:	81a3      	strh	r3, [r4, #12]
   2b76c:	e7f3      	b.n	2b756 <__ssrefill_r+0x22>

0002b76e <_printf_common>:
   2b76e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b772:	4616      	mov	r6, r2
   2b774:	4698      	mov	r8, r3
   2b776:	688a      	ldr	r2, [r1, #8]
   2b778:	4607      	mov	r7, r0
   2b77a:	690b      	ldr	r3, [r1, #16]
   2b77c:	460c      	mov	r4, r1
   2b77e:	f8dd 9020 	ldr.w	r9, [sp, #32]
   2b782:	4293      	cmp	r3, r2
   2b784:	bfb8      	it	lt
   2b786:	4613      	movlt	r3, r2
   2b788:	6033      	str	r3, [r6, #0]
   2b78a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2b78e:	b10a      	cbz	r2, 2b794 <_printf_common+0x26>
   2b790:	3301      	adds	r3, #1
   2b792:	6033      	str	r3, [r6, #0]
   2b794:	6823      	ldr	r3, [r4, #0]
   2b796:	0699      	lsls	r1, r3, #26
   2b798:	bf42      	ittt	mi
   2b79a:	6833      	ldrmi	r3, [r6, #0]
   2b79c:	3302      	addmi	r3, #2
   2b79e:	6033      	strmi	r3, [r6, #0]
   2b7a0:	6825      	ldr	r5, [r4, #0]
   2b7a2:	f015 0506 	ands.w	r5, r5, #6
   2b7a6:	d106      	bne.n	2b7b6 <_printf_common+0x48>
   2b7a8:	f104 0a19 	add.w	sl, r4, #25
   2b7ac:	68e3      	ldr	r3, [r4, #12]
   2b7ae:	6832      	ldr	r2, [r6, #0]
   2b7b0:	1a9b      	subs	r3, r3, r2
   2b7b2:	42ab      	cmp	r3, r5
   2b7b4:	dc2b      	bgt.n	2b80e <_printf_common+0xa0>
   2b7b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   2b7ba:	6822      	ldr	r2, [r4, #0]
   2b7bc:	3b00      	subs	r3, #0
   2b7be:	bf18      	it	ne
   2b7c0:	2301      	movne	r3, #1
   2b7c2:	0692      	lsls	r2, r2, #26
   2b7c4:	d430      	bmi.n	2b828 <_printf_common+0xba>
   2b7c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2b7ca:	4641      	mov	r1, r8
   2b7cc:	4638      	mov	r0, r7
   2b7ce:	47c8      	blx	r9
   2b7d0:	3001      	adds	r0, #1
   2b7d2:	d023      	beq.n	2b81c <_printf_common+0xae>
   2b7d4:	6823      	ldr	r3, [r4, #0]
   2b7d6:	341a      	adds	r4, #26
   2b7d8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   2b7dc:	f003 0306 	and.w	r3, r3, #6
   2b7e0:	2b04      	cmp	r3, #4
   2b7e2:	bf0a      	itet	eq
   2b7e4:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   2b7e8:	2500      	movne	r5, #0
   2b7ea:	6833      	ldreq	r3, [r6, #0]
   2b7ec:	f04f 0600 	mov.w	r6, #0
   2b7f0:	bf08      	it	eq
   2b7f2:	1aed      	subeq	r5, r5, r3
   2b7f4:	f854 3c12 	ldr.w	r3, [r4, #-18]
   2b7f8:	bf08      	it	eq
   2b7fa:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2b7fe:	4293      	cmp	r3, r2
   2b800:	bfc4      	itt	gt
   2b802:	1a9b      	subgt	r3, r3, r2
   2b804:	18ed      	addgt	r5, r5, r3
   2b806:	42b5      	cmp	r5, r6
   2b808:	d11a      	bne.n	2b840 <_printf_common+0xd2>
   2b80a:	2000      	movs	r0, #0
   2b80c:	e008      	b.n	2b820 <_printf_common+0xb2>
   2b80e:	2301      	movs	r3, #1
   2b810:	4652      	mov	r2, sl
   2b812:	4641      	mov	r1, r8
   2b814:	4638      	mov	r0, r7
   2b816:	47c8      	blx	r9
   2b818:	3001      	adds	r0, #1
   2b81a:	d103      	bne.n	2b824 <_printf_common+0xb6>
   2b81c:	f04f 30ff 	mov.w	r0, #4294967295
   2b820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b824:	3501      	adds	r5, #1
   2b826:	e7c1      	b.n	2b7ac <_printf_common+0x3e>
   2b828:	18e1      	adds	r1, r4, r3
   2b82a:	1c5a      	adds	r2, r3, #1
   2b82c:	2030      	movs	r0, #48	; 0x30
   2b82e:	3302      	adds	r3, #2
   2b830:	4422      	add	r2, r4
   2b832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2b836:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2b83a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2b83e:	e7c2      	b.n	2b7c6 <_printf_common+0x58>
   2b840:	2301      	movs	r3, #1
   2b842:	4622      	mov	r2, r4
   2b844:	4641      	mov	r1, r8
   2b846:	4638      	mov	r0, r7
   2b848:	47c8      	blx	r9
   2b84a:	3001      	adds	r0, #1
   2b84c:	d0e6      	beq.n	2b81c <_printf_common+0xae>
   2b84e:	3601      	adds	r6, #1
   2b850:	e7d9      	b.n	2b806 <_printf_common+0x98>

0002b852 <__sccl>:
   2b852:	b570      	push	{r4, r5, r6, lr}
   2b854:	780b      	ldrb	r3, [r1, #0]
   2b856:	4604      	mov	r4, r0
   2b858:	3801      	subs	r0, #1
   2b85a:	2b5e      	cmp	r3, #94	; 0x5e
   2b85c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   2b860:	bf13      	iteet	ne
   2b862:	1c4a      	addne	r2, r1, #1
   2b864:	1c8a      	addeq	r2, r1, #2
   2b866:	784b      	ldrbeq	r3, [r1, #1]
   2b868:	2100      	movne	r1, #0
   2b86a:	bf08      	it	eq
   2b86c:	2101      	moveq	r1, #1
   2b86e:	f800 1f01 	strb.w	r1, [r0, #1]!
   2b872:	42a8      	cmp	r0, r5
   2b874:	d1fb      	bne.n	2b86e <__sccl+0x1c>
   2b876:	b90b      	cbnz	r3, 2b87c <__sccl+0x2a>
   2b878:	1e50      	subs	r0, r2, #1
   2b87a:	bd70      	pop	{r4, r5, r6, pc}
   2b87c:	f081 0101 	eor.w	r1, r1, #1
   2b880:	4610      	mov	r0, r2
   2b882:	54e1      	strb	r1, [r4, r3]
   2b884:	4602      	mov	r2, r0
   2b886:	f812 5b01 	ldrb.w	r5, [r2], #1
   2b88a:	2d2d      	cmp	r5, #45	; 0x2d
   2b88c:	d005      	beq.n	2b89a <__sccl+0x48>
   2b88e:	2d5d      	cmp	r5, #93	; 0x5d
   2b890:	d016      	beq.n	2b8c0 <__sccl+0x6e>
   2b892:	2d00      	cmp	r5, #0
   2b894:	d0f1      	beq.n	2b87a <__sccl+0x28>
   2b896:	462b      	mov	r3, r5
   2b898:	e7f2      	b.n	2b880 <__sccl+0x2e>
   2b89a:	7846      	ldrb	r6, [r0, #1]
   2b89c:	2e5d      	cmp	r6, #93	; 0x5d
   2b89e:	d0fa      	beq.n	2b896 <__sccl+0x44>
   2b8a0:	42b3      	cmp	r3, r6
   2b8a2:	dcf8      	bgt.n	2b896 <__sccl+0x44>
   2b8a4:	3002      	adds	r0, #2
   2b8a6:	461a      	mov	r2, r3
   2b8a8:	3201      	adds	r2, #1
   2b8aa:	4296      	cmp	r6, r2
   2b8ac:	54a1      	strb	r1, [r4, r2]
   2b8ae:	dcfb      	bgt.n	2b8a8 <__sccl+0x56>
   2b8b0:	1af2      	subs	r2, r6, r3
   2b8b2:	1c5d      	adds	r5, r3, #1
   2b8b4:	3a01      	subs	r2, #1
   2b8b6:	42b3      	cmp	r3, r6
   2b8b8:	bfa8      	it	ge
   2b8ba:	2200      	movge	r2, #0
   2b8bc:	18ab      	adds	r3, r5, r2
   2b8be:	e7e1      	b.n	2b884 <__sccl+0x32>
   2b8c0:	4610      	mov	r0, r2
   2b8c2:	e7da      	b.n	2b87a <__sccl+0x28>

0002b8c4 <__submore>:
   2b8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b8c8:	460c      	mov	r4, r1
   2b8ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2b8cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2b8d0:	4299      	cmp	r1, r3
   2b8d2:	d11a      	bne.n	2b90a <__submore+0x46>
   2b8d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2b8d8:	f7fa fe4a 	bl	26570 <_malloc_r>
   2b8dc:	b918      	cbnz	r0, 2b8e6 <__submore+0x22>
   2b8de:	f04f 30ff 	mov.w	r0, #4294967295
   2b8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b8e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2b8ea:	6360      	str	r0, [r4, #52]	; 0x34
   2b8ec:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   2b8f0:	63a3      	str	r3, [r4, #56]	; 0x38
   2b8f2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   2b8f6:	7083      	strb	r3, [r0, #2]
   2b8f8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   2b8fc:	7043      	strb	r3, [r0, #1]
   2b8fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2b902:	7003      	strb	r3, [r0, #0]
   2b904:	6020      	str	r0, [r4, #0]
   2b906:	2000      	movs	r0, #0
   2b908:	e7eb      	b.n	2b8e2 <__submore+0x1e>
   2b90a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   2b90c:	0077      	lsls	r7, r6, #1
   2b90e:	463a      	mov	r2, r7
   2b910:	f000 f829 	bl	2b966 <_realloc_r>
   2b914:	4605      	mov	r5, r0
   2b916:	2800      	cmp	r0, #0
   2b918:	d0e1      	beq.n	2b8de <__submore+0x1a>
   2b91a:	eb00 0806 	add.w	r8, r0, r6
   2b91e:	4601      	mov	r1, r0
   2b920:	4632      	mov	r2, r6
   2b922:	4640      	mov	r0, r8
   2b924:	f7ff fdce 	bl	2b4c4 <memcpy>
   2b928:	f8c4 8000 	str.w	r8, [r4]
   2b92c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   2b930:	e7e9      	b.n	2b906 <__submore+0x42>

0002b932 <memmove>:
   2b932:	4288      	cmp	r0, r1
   2b934:	b510      	push	{r4, lr}
   2b936:	eb01 0402 	add.w	r4, r1, r2
   2b93a:	d902      	bls.n	2b942 <memmove+0x10>
   2b93c:	4284      	cmp	r4, r0
   2b93e:	4623      	mov	r3, r4
   2b940:	d807      	bhi.n	2b952 <memmove+0x20>
   2b942:	1e43      	subs	r3, r0, #1
   2b944:	42a1      	cmp	r1, r4
   2b946:	d008      	beq.n	2b95a <memmove+0x28>
   2b948:	f811 2b01 	ldrb.w	r2, [r1], #1
   2b94c:	f803 2f01 	strb.w	r2, [r3, #1]!
   2b950:	e7f8      	b.n	2b944 <memmove+0x12>
   2b952:	4402      	add	r2, r0
   2b954:	4601      	mov	r1, r0
   2b956:	428a      	cmp	r2, r1
   2b958:	d100      	bne.n	2b95c <memmove+0x2a>
   2b95a:	bd10      	pop	{r4, pc}
   2b95c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2b960:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2b964:	e7f7      	b.n	2b956 <memmove+0x24>

0002b966 <_realloc_r>:
   2b966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b968:	4607      	mov	r7, r0
   2b96a:	4615      	mov	r5, r2
   2b96c:	460c      	mov	r4, r1
   2b96e:	b921      	cbnz	r1, 2b97a <_realloc_r+0x14>
   2b970:	4611      	mov	r1, r2
   2b972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2b976:	f7fa bdfb 	b.w	26570 <_malloc_r>
   2b97a:	b922      	cbnz	r2, 2b986 <_realloc_r+0x20>
   2b97c:	f7fa fdae 	bl	264dc <_free_r>
   2b980:	2400      	movs	r4, #0
   2b982:	4620      	mov	r0, r4
   2b984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b986:	f000 f813 	bl	2b9b0 <_malloc_usable_size_r>
   2b98a:	42a8      	cmp	r0, r5
   2b98c:	d2f9      	bcs.n	2b982 <_realloc_r+0x1c>
   2b98e:	4629      	mov	r1, r5
   2b990:	4638      	mov	r0, r7
   2b992:	f7fa fded 	bl	26570 <_malloc_r>
   2b996:	4606      	mov	r6, r0
   2b998:	2800      	cmp	r0, #0
   2b99a:	d0f1      	beq.n	2b980 <_realloc_r+0x1a>
   2b99c:	4621      	mov	r1, r4
   2b99e:	462a      	mov	r2, r5
   2b9a0:	f7ff fd90 	bl	2b4c4 <memcpy>
   2b9a4:	4621      	mov	r1, r4
   2b9a6:	4638      	mov	r0, r7
   2b9a8:	4634      	mov	r4, r6
   2b9aa:	f7fa fd97 	bl	264dc <_free_r>
   2b9ae:	e7e8      	b.n	2b982 <_realloc_r+0x1c>

0002b9b0 <_malloc_usable_size_r>:
   2b9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2b9b4:	1f18      	subs	r0, r3, #4
   2b9b6:	2b00      	cmp	r3, #0
   2b9b8:	bfbc      	itt	lt
   2b9ba:	580b      	ldrlt	r3, [r1, r0]
   2b9bc:	18c0      	addlt	r0, r0, r3
   2b9be:	4770      	bx	lr
