
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	78 6d 00 20 7d 2f 00 00 eb 64 00 00 51 2f 00 00     xm. }/...d..Q/..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	51 2f 00 00 51 2f 00 00 51 2f 00 00 51 2f 00 00     Q/..Q/..Q/..Q/..
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	f1 2a 00 00 51 2f 00 00 00 00 00 00 51 2f 00 00     .*..Q/......Q/..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	51 2f 00 00                                         Q/..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
					str_ptr_arg[s_idx] = arg_idx;
  a0:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
			switch (*fmt) {
  c0:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
  d0:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
  e0:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
  f0:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
 100:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
 110:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
				align = VA_STACK_ALIGN(void *);
 120:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
			switch (*fmt) {
 130:	4d 2b 00 00 4d 2b 00 00 4d 2b 00 00 4d 2b 00 00     M+..M+..M+..M+..
 140:	4d 2b 00 00                                         M+..

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
		buf = (void *) ROUND_UP(buf, align);
     144:	b953      	cbnz	r3, 15c <__data_size+0xc>
     146:	b94a      	cbnz	r2, 15c <__data_size+0xc>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b80c 	b.w	174 <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
		if (is_str_arg) {
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f000 f808 	bl	178 <__udivmoddi4>
			int v = va_arg(ap, int);
     168:	f8dd e004 	ldr.w	lr, [sp, #4]

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
				arg_idx--;
     172:	4770      	bx	lr

00000174 <__aeabi_idiv0>:
     174:	4770      	bx	lr
     176:	bf00      	nop

00000178 <__udivmoddi4>:
				parsing = false;
     178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				continue;
     17c:	4686      	mov	lr, r0
				if (fmt[-1] == 'l') {
     17e:	468c      	mov	ip, r1
     180:	4608      	mov	r0, r1
     182:	9e08      	ldr	r6, [sp, #32]
     184:	4615      	mov	r5, r2
					if (fmt[-2] == 'l') {
     186:	4674      	mov	r4, lr
     188:	4619      	mov	r1, r3
     18a:	2b00      	cmp	r3, #0
				parsing = false;
     18c:	f040 80c1 	bne.w	312 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x12>
					if (fmt[-2] == 'l') {
     190:	4285      	cmp	r5, r0
						align = VA_STACK_ALIGN(long long);
     192:	fab2 f282 	clz	r2, r2
				size = sizeof(void *);
     196:	d945      	bls.n	224 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x24>
     198:	b14a      	cbz	r2, 1ae <__udivmoddi4+0x36>
					v.ld = va_arg(ap, long double);
     19a:	f1c2 0320 	rsb	r3, r2, #32
     19e:	fa00 fc02 	lsl.w	ip, r0, r2
				buf = (void *) ROUND_UP(buf, align);
     1a2:	4095      	lsls	r5, r2
     1a4:	4094      	lsls	r4, r2
     1a6:	fa2e f303 	lsr.w	r3, lr, r3
					v.ld = va_arg(ap, long double);
     1aa:	ea43 0c0c 	orr.w	ip, r3, ip
					if (BUF_OFFSET + size > len) {
     1ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1b2:	b2a8      	uxth	r0, r5
     1b4:	0c23      	lsrs	r3, r4, #16
     1b6:	fbbc f8fe 	udiv	r8, ip, lr
						*(long double *)buf = v.ld;
     1ba:	fb0e cc18 	mls	ip, lr, r8, ip
				parsing = false;
     1be:	fb08 f900 	mul.w	r9, r8, r0
			switch (*fmt) {
     1c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1c6:	4599      	cmp	r9, r3
			if (*++fmt == '\0') {
     1c8:	d928      	bls.n	21c <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1c>
     1ca:	18eb      	adds	r3, r5, r3
     1cc:	f108 37ff 	add.w	r7, r8, #4294967295
			if (!parsing) {
     1d0:	d204      	bcs.n	1dc <__udivmoddi4+0x64>
     1d2:	4599      	cmp	r9, r3
     1d4:	d902      	bls.n	1dc <__udivmoddi4+0x64>
     1d6:	f1a8 0702 	sub.w	r7, r8, #2
				if (*fmt == '%') {
     1da:	442b      	add	r3, r5
					parsing = true;
     1dc:	eba3 0309 	sub.w	r3, r3, r9
					arg_idx++;
     1e0:	b2a4      	uxth	r4, r4
     1e2:	fbb3 fcfe 	udiv	ip, r3, lr
				align = VA_STACK_ALIGN(size_t);
     1e6:	fb0e 331c 	mls	r3, lr, ip, r3
     1ea:	fb0c f000 	mul.w	r0, ip, r0
			switch (*fmt) {
     1ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
				parsing = false;
     1f2:	42a0      	cmp	r0, r4
     1f4:	d914      	bls.n	220 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x20>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f6:	192c      	adds	r4, r5, r4
     1f8:	f10c 33ff 	add.w	r3, ip, #4294967295
					return -EINVAL;
     1fc:	d204      	bcs.n	208 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x8>
     1fe:	42a0      	cmp	r0, r4
			long long v = va_arg(ap, long long);
     200:	d902      	bls.n	208 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x8>
     202:	f1ac 0302 	sub.w	r3, ip, #2
     206:	442c      	add	r4, r5
     208:	1a24      	subs	r4, r4, r0
     20a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20e:	b11e      	cbz	r6, 218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
				}
			}
			buf += sizeof(long long);
     210:	40d4      	lsrs	r4, r2
     212:	2300      	movs	r3, #0
     214:	6034      	str	r4, [r6, #0]
		if (is_str_arg) {
     216:	6073      	str	r3, [r6, #4]
		} else if (size == sizeof(int)) {
     218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			int v = va_arg(ap, int);
     21c:	4647      	mov	r7, r8
     21e:	e7dd      	b.n	1dc <__udivmoddi4+0x64>
			if (buf0 != NULL) {
     220:	4663      	mov	r3, ip
		} else if (size == sizeof(long long)) {
     222:	e7f1      	b.n	208 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x8>
     224:	bb92      	cbnz	r2, 28c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc>
			long long v = va_arg(ap, long long);
     226:	1b43      	subs	r3, r0, r5
     228:	2101      	movs	r1, #1
     22a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     22e:	b2af      	uxth	r7, r5
     230:	0c20      	lsrs	r0, r4, #16
			if (buf0 != NULL) {
     232:	fbb3 fcfe 	udiv	ip, r3, lr
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	fb0e 331c 	mls	r3, lr, ip, r3
			s = va_arg(ap, char *);
     23a:	fb0c f807 	mul.w	r8, ip, r7
     23e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
			if (is_ro && !do_ro) {
     242:	4598      	cmp	r8, r3
     244:	d961      	bls.n	30a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa>
     246:	18eb      	adds	r3, r5, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     248:	f10c 30ff 	add.w	r0, ip, #4294967295
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24c:	d204      	bcs.n	258 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x58>
     24e:	4598      	cmp	r8, r3
     250:	d902      	bls.n	258 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x58>
     252:	f1ac 0002 	sub.w	r0, ip, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     256:	442b      	add	r3, r5
     258:	eba3 0308 	sub.w	r3, r3, r8
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	b2a4      	uxth	r4, r4
				if (buf0 != NULL) {
     25e:	fbb3 fcfe 	udiv	ip, r3, lr
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	fb0e 331c 	mls	r3, lr, ip, r3
     266:	fb0c f707 	mul.w	r7, ip, r7
     26a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     26e:	42a7      	cmp	r7, r4
					str_ptr_arg[s_idx] = arg_idx;
     270:	d94d      	bls.n	30e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe>
     272:	192c      	adds	r4, r5, r4
					if (is_ro) {
     274:	f10c 33ff 	add.w	r3, ip, #4294967295
     278:	d204      	bcs.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     27a:	42a7      	cmp	r7, r4
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27c:	d902      	bls.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     27e:	f1ac 0302 	sub.w	r3, ip, #2
     282:	442c      	add	r4, r5
						s_ro_cnt++;
     284:	1be4      	subs	r4, r4, r7
     286:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
					if (BUF_OFFSET + size > len) {
     28a:	e7c0      	b.n	20e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xe>
     28c:	f1c2 0320 	rsb	r3, r2, #32
			switch (*fmt) {
     290:	4095      	lsls	r5, r2
			buf += sizeof(char *);
     292:	4094      	lsls	r4, r2
					if (BUF_OFFSET + size > len) {
     294:	fa20 f103 	lsr.w	r1, r0, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     298:	fa2e f303 	lsr.w	r3, lr, r3
     29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				} else if (is_ro) {
     2a0:	4090      	lsls	r0, r2
     2a2:	b2af      	uxth	r7, r5
					len += 1;
     2a4:	4303      	orrs	r3, r0
     2a6:	fbb1 fcfe 	udiv	ip, r1, lr
					len += 2;
     2aa:	fb0e 101c 	mls	r0, lr, ip, r1
				} else if (rws_pos_en) {
     2ae:	0c19      	lsrs	r1, r3, #16
					len += strlen(s) + 1 + 1;
     2b0:	fb0c f807 	mul.w	r8, ip, r7
     2b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2b8:	4588      	cmp	r8, r1
     2ba:	d922      	bls.n	302 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x2>
     2bc:	1869      	adds	r1, r5, r1
     2be:	f10c 30ff 	add.w	r0, ip, #4294967295
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c2:	d204      	bcs.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2c4:	4588      	cmp	r8, r1
     2c6:	d902      	bls.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2c8:	f1ac 0002 	sub.w	r0, ip, #2
	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2cc:	4429      	add	r1, r5
     2ce:	eba1 0108 	sub.w	r1, r1, r8
     2d2:	b29b      	uxth	r3, r3
     2d4:	fbb1 fcfe 	udiv	ip, r1, lr
     2d8:	fb0e 111c 	mls	r1, lr, ip, r1
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2dc:	fb0c f707 	mul.w	r7, ip, r7
	*(char **)buf0 = NULL;
     2e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e4:	429f      	cmp	r7, r3
     2e6:	d90e      	bls.n	306 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x6>
	if (rws_pos_en) {
     2e8:	18eb      	adds	r3, r5, r3
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ea:	f10c 31ff 	add.w	r1, ip, #4294967295
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ee:	d204      	bcs.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f0:	429f      	cmp	r7, r3
     2f2:	d902      	bls.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     2f4:	f1ac 0102 	sub.w	r1, ip, #2
		for (i = 0; i < s_idx; i++) {
     2f8:	442b      	add	r3, r5
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fa:	1bdb      	subs	r3, r3, r7
     2fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
		for (i = 0; i < s_idx; i++) {
     300:	e793      	b.n	22a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2a>
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     302:	4660      	mov	r0, ip
     304:	e7e3      	b.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     306:	4661      	mov	r1, ip
     308:	e7f7      	b.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     30a:	4660      	mov	r0, ip
     30c:	e7a4      	b.n	258 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x58>
     30e:	4663      	mov	r3, ip
			*buf++ = str_ptr_arg[i];
     310:	e7b8      	b.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     312:	4283      	cmp	r3, r0
	for (i = 0; i < s_idx; i++) {
     314:	d906      	bls.n	324 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x24>
     316:	b916      	cbnz	r6, 31e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x1e>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     318:	2100      	movs	r1, #0
     31a:	4608      	mov	r0, r1
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     31c:	e77c      	b.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
		pkg_hdr->desc.rw_str_cnt = 0;
     31e:	e9c6 e000 	strd	lr, r0, [r6]
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     322:	e7f9      	b.n	318 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x18>
     324:	fab3 f783 	clz	r7, r3
			if (BUF_OFFSET + 1 > len) {
     328:	b98f      	cbnz	r7, 34e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x4e>
     32a:	4283      	cmp	r3, r0
     32c:	d301      	bcc.n	332 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x32>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32e:	4572      	cmp	r2, lr
     330:	d808      	bhi.n	344 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x44>
			if (BUF_OFFSET + 1 > len) {
     332:	ebbe 0402 	subs.w	r4, lr, r2
			*buf++ = pos;
     336:	eb60 0303 	sbc.w	r3, r0, r3
		for (i = 0; i < s_idx; i++) {
     33a:	2001      	movs	r0, #1
     33c:	469c      	mov	ip, r3
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33e:	b91e      	cbnz	r6, 348 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x48>
     340:	2100      	movs	r1, #0
     342:	e769      	b.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     344:	4638      	mov	r0, r7
     346:	e7fa      	b.n	33e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x3e>
     348:	e9c6 4c00 	strd	r4, ip, [r6]
		if (rws_pos_en) {
     34c:	e7f8      	b.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     34e:	f1c7 0c20 	rsb	ip, r7, #32
			*buf++ = str_ptr_arg[i];
     352:	40bb      	lsls	r3, r7
     354:	fa0e f507 	lsl.w	r5, lr, r7
			size = 0;
     358:	fa22 f40c 	lsr.w	r4, r2, ip
		if (BUF_OFFSET + 1 + size > len) {
     35c:	fa2e f10c 	lsr.w	r1, lr, ip
     360:	40ba      	lsls	r2, r7
     362:	431c      	orrs	r4, r3
     364:	fa20 f30c 	lsr.w	r3, r0, ip
		*buf++ = str_ptr_pos[i];
     368:	40b8      	lsls	r0, r7
		memcpy(buf, s, size);
     36a:	ea4f 4914 	mov.w	r9, r4, lsr #16
		*buf++ = str_ptr_pos[i];
     36e:	4301      	orrs	r1, r0
		memcpy(buf, s, size);
     370:	fa1f fe84 	uxth.w	lr, r4
     374:	fbb3 f8f9 	udiv	r8, r3, r9
		buf += size;
     378:	fb09 3018 	mls	r0, r9, r8, r3
	for (i = 0; i < s_idx; i++) {
     37c:	0c0b      	lsrs	r3, r1, #16
     37e:	fb08 fa0e 	mul.w	sl, r8, lr
     382:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     386:	459a      	cmp	sl, r3
     388:	d940      	bls.n	40c <CONFIG_BOOT_SERIAL_MAX_RECEIVE_SIZE+0xc>
     38a:	18e3      	adds	r3, r4, r3
     38c:	f108 30ff 	add.w	r0, r8, #4294967295
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     390:	d204      	bcs.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
			size = strlen(s) + 1;
     392:	459a      	cmp	sl, r3
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	d902      	bls.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
     396:	f1a8 0002 	sub.w	r0, r8, #2
			size = strlen(s) + 1;
     39a:	4423      	add	r3, r4
     39c:	eba3 030a 	sub.w	r3, r3, sl
		return -EFAULT;
     3a0:	b289      	uxth	r1, r1
     3a2:	fbb3 f8f9 	udiv	r8, r3, r9
     3a6:	fb09 3318 	mls	r3, r9, r8, r3
     3aa:	fb08 fe0e 	mul.w	lr, r8, lr
     3ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3b2:	458e      	cmp	lr, r1
     3b4:	d92c      	bls.n	410 <CONFIG_BOOT_SERIAL_MAX_RECEIVE_SIZE+0x10>
     3b6:	1861      	adds	r1, r4, r1
     3b8:	f108 33ff 	add.w	r3, r8, #4294967295
     3bc:	d204      	bcs.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>
     3be:	458e      	cmp	lr, r1
     3c0:	d902      	bls.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>
     3c2:	f1a8 0302 	sub.w	r3, r8, #2
     3c6:	4421      	add	r1, r4
     3c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3cc:	eba1 010e 	sub.w	r1, r1, lr
     3d0:	fba0 9802 	umull	r9, r8, r0, r2
     3d4:	4541      	cmp	r1, r8
     3d6:	46ce      	mov	lr, r9
     3d8:	4643      	mov	r3, r8
     3da:	d302      	bcc.n	3e2 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe2>
     3dc:	d106      	bne.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3de:	454d      	cmp	r5, r9
     3e0:	d204      	bcs.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3e2:	3801      	subs	r0, #1
     3e4:	ebb9 0e02 	subs.w	lr, r9, r2
     3e8:	eb68 0304 	sbc.w	r3, r8, r4
     3ec:	2e00      	cmp	r6, #0
     3ee:	d0a7      	beq.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     3f0:	ebb5 020e 	subs.w	r2, r5, lr
     3f4:	eb61 0103 	sbc.w	r1, r1, r3
     3f8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3fc:	fa22 f307 	lsr.w	r3, r2, r7
     400:	40f9      	lsrs	r1, r7
     402:	ea4c 0303 	orr.w	r3, ip, r3
     406:	e9c6 3100 	strd	r3, r1, [r6]
     40a:	e799      	b.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     40c:	4640      	mov	r0, r8
     40e:	e7c5      	b.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
     410:	4643      	mov	r3, r8
     412:	e7d9      	b.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>

00000414 <main>:
    return (bool)pin_active;
}
#endif

void main(void)
{
     414:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     416:	4b3f      	ldr	r3, [pc, #252]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     418:	4a3f      	ldr	r2, [pc, #252]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     41a:	2149      	movs	r1, #73	; 0x49
     41c:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     420:	483e      	ldr	r0, [pc, #248]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     422:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     426:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     42a:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     42e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     432:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     436:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     43a:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     43e:	f005 fd1a 	bl	5e76 <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     442:	f000 f89f 	bl	584 <os_heap_init>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     446:	4c36      	ldr	r4, [pc, #216]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     448:	4620      	mov	r0, r4
     44a:	f008 f8df 	bl	860c <z_device_is_ready>
    if (!device_is_ready(button0.port)) {
     44e:	b320      	cbz	r0, 49a <FIH_LABEL_FIH_CALL_START_496>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     450:	6925      	ldr	r5, [r4, #16]
	const struct gpio_driver_api *api =
     452:	68a6      	ldr	r6, [r4, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     454:	682b      	ldr	r3, [r5, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     456:	211a      	movs	r1, #26
		data->invert |= (gpio_port_pins_t)BIT(pin);
     458:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     45c:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
     45e:	4620      	mov	r0, r4
     460:	6833      	ldr	r3, [r6, #0]
     462:	4a30      	ldr	r2, [pc, #192]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
     464:	4798      	blx	r3
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
     466:	4620      	mov	r0, r4
     468:	6873      	ldr	r3, [r6, #4]
     46a:	a901      	add	r1, sp, #4
     46c:	4798      	blx	r3
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
     46e:	b920      	cbnz	r0, 47a <main+0x66>
		*value ^= data->invert;
     470:	682a      	ldr	r2, [r5, #0]
     472:	9b01      	ldr	r3, [sp, #4]
     474:	4053      	eors	r3, r2
    (void)rc;

    mcuboot_status_change(MCUBOOT_STATUS_STARTUP);

#ifdef CONFIG_MCUBOOT_SERIAL
    if (detect_pin() &&
     476:	015a      	lsls	r2, r3, #5
     478:	d50f      	bpl.n	49a <FIH_LABEL_FIH_CALL_START_496>
#endif // defined(DPPI_PRESENT)

#if NRF_POWER_HAS_RESETREAS
NRF_STATIC_INLINE uint32_t nrf_power_resetreas_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->RESETREAS;
     47a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     47e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRFX_RESET_REASON_RESETPIN_MASK));
     482:	b10b      	cbz	r3, 488 <main+0x74>
     484:	07db      	lsls	r3, r3, #31
     486:	d508      	bpl.n	49a <FIH_LABEL_FIH_CALL_START_496>
        gpio_pin_set_dt(&led0, 1);
#endif

        mcuboot_status_change(MCUBOOT_STATUS_SERIAL_DFU_ENTERED);

        BOOT_LOG_INF("Enter the serial recovery mode");
     488:	2149      	movs	r1, #73	; 0x49
     48a:	4827      	ldr	r0, [pc, #156]	; (528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>)
     48c:	f005 fcf3 	bl	5e76 <z_log_minimal_printk>
        rc = boot_console_init();
     490:	f001 fda2 	bl	1fd8 <boot_console_init>
        __ASSERT(rc == 0, "Error initializing boot console.\n");
        boot_serial_start(&boot_funcs);
     494:	4825      	ldr	r0, [pc, #148]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     496:	f002 f90b 	bl	26b0 <boot_serial_start>

0000049a <FIH_LABEL_FIH_CALL_START_496>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     49a:	a801      	add	r0, sp, #4
     49c:	f000 fcd6 	bl	e4c <boot_go>

000004a0 <FIH_LABEL_FIH_CALL_END_508>:
        timeout_in_ms = 1;
    }
    boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     4a0:	4b23      	ldr	r3, [pc, #140]	; (530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>)
     4a2:	681b      	ldr	r3, [r3, #0]
     4a4:	4283      	cmp	r3, r0
     4a6:	d004      	beq.n	4b2 <FIH_LABEL_FIH_CALL_END_508+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     4a8:	2145      	movs	r1, #69	; 0x45
     4aa:	4822      	ldr	r0, [pc, #136]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
     4ac:	f005 fce3 	bl	5e76 <z_log_minimal_printk>

        mcuboot_status_change(MCUBOOT_STATUS_NO_BOOTABLE_IMAGE_FOUND);

        FIH_PANIC;
     4b0:	e7fe      	b.n	4b0 <FIH_LABEL_FIH_CALL_END_508+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     4b2:	9a03      	ldr	r2, [sp, #12]
     4b4:	2149      	movs	r1, #73	; 0x49
     4b6:	4820      	ldr	r0, [pc, #128]	; (538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>)
     4b8:	f005 fcdd 	bl	5e76 <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     4bc:	2149      	movs	r1, #73	; 0x49
     4be:	481f      	ldr	r0, [pc, #124]	; (53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>)
     4c0:	f005 fcd9 	bl	5e76 <z_log_minimal_printk>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     4c4:	4669      	mov	r1, sp
     4c6:	f89d 0008 	ldrb.w	r0, [sp, #8]
     4ca:	f000 f83b 	bl	544 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     4ce:	9b00      	ldr	r3, [sp, #0]
     4d0:	9c03      	ldr	r4, [sp, #12]
     4d2:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     4d4:	9b01      	ldr	r3, [sp, #4]
     4d6:	891d      	ldrh	r5, [r3, #8]
    nrf_cleanup_peripheral();
     4d8:	f000 ff8a 	bl	13f0 <nrf_cleanup_peripheral>
                                     rsp->br_image_off +
     4dc:	1966      	adds	r6, r4, r5
    nrf_cleanup_ns_ram();
     4de:	f000 ffcf 	bl	1480 <nrf_cleanup_ns_ram>
    cleanup_arm_nvic(); /* cleanup NVIC registers */
     4e2:	f000 ff69 	bl	13b8 <cleanup_arm_nvic>
    z_arm_clear_arm_mpu_config();
     4e6:	f002 fd8b 	bl	3000 <z_arm_clear_arm_mpu_config>
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
     4ea:	2300      	movs	r3, #0
     4ec:	f383 880b 	msr	PSPLIM, r3
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
     4f0:	f383 880a 	msr	MSPLIM, r3
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     4f4:	5962      	ldr	r2, [r4, r5]
     4f6:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     4fa:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
     4fe:	f3bf 8f6f 	isb	sy
     502:	f3bf 8f6f 	isb	sy
    ((void (*)(void))vt->reset)();
     506:	6873      	ldr	r3, [r6, #4]
     508:	4798      	blx	r3

    do_boot(&rsp);

    mcuboot_status_change(MCUBOOT_STATUS_BOOT_FAILED);

    BOOT_LOG_ERR("Never should get here");
     50a:	2145      	movs	r1, #69	; 0x45
     50c:	480c      	ldr	r0, [pc, #48]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
     50e:	f005 fcb2 	bl	5e76 <z_log_minimal_printk>
    while (1)
     512:	e7fe      	b.n	512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
     514:	50018000 	.word	0x50018000
     518:	6e524635 	.word	0x6e524635
     51c:	00008da4 	.word	0x00008da4
     520:	000086b0 	.word	0x000086b0
     524:	00010011 	.word	0x00010011
     528:	00008dbd 	.word	0x00008dbd
     52c:	000089a8 	.word	0x000089a8
     530:	20000208 	.word	0x20000208
     534:	00008de1 	.word	0x00008de1
     538:	00008e04 	.word	0x00008e04
     53c:	00008e33 	.word	0x00008e33
     540:	00008e58 	.word	0x00008e58

00000544 <flash_device_base>:

static const struct device *flash_dev = DEVICE_DT_GET(FLASH_DEVICE_NODE);

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     544:	4602      	mov	r2, r0
{
     546:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     548:	b138      	cbz	r0, 55a <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     54a:	4805      	ldr	r0, [pc, #20]	; (560 <flash_device_base+0x1c>)
     54c:	2300      	movs	r3, #0
     54e:	2145      	movs	r1, #69	; 0x45
     550:	f005 fc91 	bl	5e76 <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     554:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     558:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     55a:	6008      	str	r0, [r1, #0]
    return 0;
     55c:	e7fc      	b.n	558 <flash_device_base+0x14>
     55e:	bf00      	nop
     560:	00008e7b 	.word	0x00008e7b

00000564 <flash_area_sector_from_off>:
    return -EINVAL;
}
#endif

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     566:	460c      	mov	r4, r1
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     568:	4601      	mov	r1, r0
     56a:	aa01      	add	r2, sp, #4
     56c:	4804      	ldr	r0, [pc, #16]	; (580 <flash_area_sector_from_off+0x1c>)
     56e:	f006 f930 	bl	67d2 <z_impl_flash_get_page_info_by_offs>
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
    if (rc) {
     572:	b918      	cbnz	r0, 57c <flash_area_sector_from_off+0x18>
        return rc;
    }

    sector->fs_off = page.start_offset;
     574:	9b01      	ldr	r3, [sp, #4]
     576:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     578:	9b02      	ldr	r3, [sp, #8]
     57a:	6063      	str	r3, [r4, #4]

    return rc;
}
     57c:	b004      	add	sp, #16
     57e:	bd10      	pop	{r4, pc}
     580:	000086f8 	.word	0x000086f8

00000584 <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     584:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     588:	4801      	ldr	r0, [pc, #4]	; (590 <os_heap_init+0xc>)
     58a:	f003 bee7 	b.w	435c <mbedtls_memory_buffer_alloc_init>
     58e:	bf00      	nop
     590:	20001baa 	.word	0x20001baa

00000594 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     598:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 780 <FIH_LABEL_FIH_CALL_END_814+0x20>
{
     59c:	b0f9      	sub	sp, #484	; 0x1e4
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     59e:	a838      	add	r0, sp, #224	; 0xe0
     5a0:	e9dd 4884 	ldrd	r4, r8, [sp, #528]	; 0x210
     5a4:	4617      	mov	r7, r2
     5a6:	461d      	mov	r5, r3
    fih_int valid_signature = FIH_FAILURE;
     5a8:	f8da 6000 	ldr.w	r6, [sl]
     5ac:	f007 fea8 	bl	8300 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     5b0:	2100      	movs	r1, #0
     5b2:	a838      	add	r0, sp, #224	; 0xe0
     5b4:	f003 ffe6 	bl	4584 <mbedtls_sha256_starts>
    if (seed && (seed_len > 0)) {
     5b8:	b13c      	cbz	r4, 5ca <bootutil_img_validate+0x36>
     5ba:	f1b8 0f00 	cmp.w	r8, #0
     5be:	dd04      	ble.n	5ca <bootutil_img_validate+0x36>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     5c0:	4642      	mov	r2, r8
     5c2:	4621      	mov	r1, r4
     5c4:	a838      	add	r0, sp, #224	; 0xe0
     5c6:	f007 fe9f 	bl	8308 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     5ca:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     5ce:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     5d0:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     5d4:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     5d6:	68fb      	ldr	r3, [r7, #12]
     5d8:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     5da:	45c8      	cmp	r8, r9
     5dc:	d821      	bhi.n	622 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x46>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     5de:	a90d      	add	r1, sp, #52	; 0x34
     5e0:	a838      	add	r0, sp, #224	; 0xe0
     5e2:	f007 feca 	bl	837a <mbedtls_sha256_finish>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     5e6:	9b86      	ldr	r3, [sp, #536]	; 0x218
     5e8:	b123      	cbz	r3, 5f4 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x18>
        memcpy(out_hash, hash, 32);
     5ea:	2220      	movs	r2, #32
     5ec:	4618      	mov	r0, r3
     5ee:	a90d      	add	r1, sp, #52	; 0x34
     5f0:	f005 ffb0 	bl	6554 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     5f4:	2300      	movs	r3, #0
     5f6:	462a      	mov	r2, r5
     5f8:	9300      	str	r3, [sp, #0]
     5fa:	4639      	mov	r1, r7
     5fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
     600:	a807      	add	r0, sp, #28
     602:	f005 f8d4 	bl	57ae <bootutil_tlv_iter_begin>
    if (rc) {
     606:	4604      	mov	r4, r0
     608:	b938      	cbnz	r0, 61a <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x3e>
        goto out;
    }

    if (it.tlv_end > bootutil_max_image_size(fap)) {
     60a:	4628      	mov	r0, r5
     60c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
     60e:	f000 f9dd 	bl	9cc <bootutil_max_image_size>
     612:	4287      	cmp	r7, r0
     614:	d91b      	bls.n	64e <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x72>
        rc = -1;
     616:	f04f 34ff 	mov.w	r4, #4294967295
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     61a:	4620      	mov	r0, r4
     61c:	b079      	add	sp, #484	; 0x1e4
     61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (blk_sz > tmp_buf_sz) {
     622:	9b83      	ldr	r3, [sp, #524]	; 0x20c
        blk_sz = size - off;
     624:	eba8 0b09 	sub.w	fp, r8, r9
     628:	459b      	cmp	fp, r3
     62a:	bf28      	it	cs
     62c:	469b      	movcs	fp, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     62e:	4649      	mov	r1, r9
     630:	465b      	mov	r3, fp
     632:	4628      	mov	r0, r5
     634:	9a82      	ldr	r2, [sp, #520]	; 0x208
     636:	f005 fc2c 	bl	5e92 <flash_area_read>
        if (rc) {
     63a:	4604      	mov	r4, r0
     63c:	2800      	cmp	r0, #0
     63e:	d1ec      	bne.n	61a <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x3e>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     640:	465a      	mov	r2, fp
     642:	9982      	ldr	r1, [sp, #520]	; 0x208
     644:	a838      	add	r0, sp, #224	; 0xe0
     646:	f007 fe5f 	bl	8308 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     64a:	44d9      	add	r9, fp
     64c:	e7c5      	b.n	5da <bootutil_img_validate+0x46>
    int key_id = -1;
     64e:	f04f 37ff 	mov.w	r7, #4294967295
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     652:	f8df 9130 	ldr.w	r9, [pc, #304]	; 784 <FIH_LABEL_FIH_CALL_END_814+0x24>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     656:	f10d 0316 	add.w	r3, sp, #22
     65a:	aa05      	add	r2, sp, #20
     65c:	a906      	add	r1, sp, #24
     65e:	a807      	add	r0, sp, #28
     660:	f005 f8f3 	bl	584a <bootutil_tlv_iter_next>
        if (rc < 0) {
     664:	f1b0 0800 	subs.w	r8, r0, #0
     668:	f2c0 8088 	blt.w	77c <FIH_LABEL_FIH_CALL_END_814+0x1c>
        } else if (rc > 0) {
     66c:	d17b      	bne.n	766 <FIH_LABEL_FIH_CALL_END_814+0x6>
        if (type == IMAGE_TLV_SHA256) {
     66e:	f8bd b016 	ldrh.w	fp, [sp, #22]
     672:	f1bb 0f10 	cmp.w	fp, #16
     676:	d118      	bne.n	6aa <FIH_LABEL_FIH_CALL_END_576+0xc>
            if (len != sizeof(hash)) {
     678:	f8bd 4014 	ldrh.w	r4, [sp, #20]
     67c:	2c20      	cmp	r4, #32
     67e:	d1ca      	bne.n	616 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x3a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     680:	4623      	mov	r3, r4
     682:	4628      	mov	r0, r5
     684:	9906      	ldr	r1, [sp, #24]
     686:	aa38      	add	r2, sp, #224	; 0xe0
     688:	f005 fc03 	bl	5e92 <flash_area_read>
            if (rc) {
     68c:	4680      	mov	r8, r0
     68e:	2800      	cmp	r0, #0
     690:	d174      	bne.n	77c <FIH_LABEL_FIH_CALL_END_814+0x1c>

00000692 <FIH_LABEL_FIH_CALL_START_559>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     692:	4622      	mov	r2, r4
     694:	a938      	add	r1, sp, #224	; 0xe0
     696:	a80d      	add	r0, sp, #52	; 0x34
     698:	f005 f923 	bl	58e2 <boot_fih_memequal>
     69c:	4604      	mov	r4, r0

0000069e <FIH_LABEL_FIH_CALL_END_576>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     69e:	4b3a      	ldr	r3, [pc, #232]	; (788 <FIH_LABEL_FIH_CALL_END_814+0x28>)
     6a0:	681b      	ldr	r3, [r3, #0]
     6a2:	4283      	cmp	r3, r0
     6a4:	d1b9      	bne.n	61a <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x3e>
            sha256_valid = 1;
     6a6:	2401      	movs	r4, #1
     6a8:	e7d5      	b.n	656 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x7a>
        } else if (type == IMAGE_TLV_KEYHASH) {
     6aa:	f1bb 0f01 	cmp.w	fp, #1
     6ae:	d137      	bne.n	720 <FIH_LABEL_FIH_CALL_END_576+0x82>
            if (len > 32) {
     6b0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6b4:	2b20      	cmp	r3, #32
     6b6:	d8ae      	bhi.n	616 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x3a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     6b8:	4628      	mov	r0, r5
     6ba:	9906      	ldr	r1, [sp, #24]
     6bc:	aa38      	add	r2, sp, #224	; 0xe0
     6be:	f005 fbe8 	bl	5e92 <flash_area_read>
            if (rc) {
     6c2:	4680      	mov	r8, r0
     6c4:	2800      	cmp	r0, #0
     6c6:	d159      	bne.n	77c <FIH_LABEL_FIH_CALL_END_814+0x1c>
            key_id = bootutil_find_key(buf, len);
     6c8:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     6cc:	f1bb 0f20 	cmp.w	fp, #32
     6d0:	d903      	bls.n	6da <FIH_LABEL_FIH_CALL_END_576+0x3c>
        return -1;
     6d2:	f04f 38ff 	mov.w	r8, #4294967295
            key_id = bootutil_find_key(buf, len);
     6d6:	4647      	mov	r7, r8
     6d8:	e7bd      	b.n	656 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x7a>
    for (i = 0; i < bootutil_key_cnt; i++) {
     6da:	f8d9 3000 	ldr.w	r3, [r9]
     6de:	4f2b      	ldr	r7, [pc, #172]	; (78c <FIH_LABEL_FIH_CALL_END_814+0x2c>)
     6e0:	9303      	str	r3, [sp, #12]
     6e2:	9b03      	ldr	r3, [sp, #12]
     6e4:	4598      	cmp	r8, r3
     6e6:	daf4      	bge.n	6d2 <FIH_LABEL_FIH_CALL_END_576+0x34>
    mbedtls_sha256_init(ctx);
     6e8:	a81d      	add	r0, sp, #116	; 0x74
     6ea:	f007 fe09 	bl	8300 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     6ee:	2100      	movs	r1, #0
     6f0:	a81d      	add	r0, sp, #116	; 0x74
     6f2:	f003 ff47 	bl	4584 <mbedtls_sha256_starts>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     6f6:	687a      	ldr	r2, [r7, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     6f8:	a81d      	add	r0, sp, #116	; 0x74
     6fa:	6812      	ldr	r2, [r2, #0]
     6fc:	f857 1b08 	ldr.w	r1, [r7], #8
     700:	f007 fe02 	bl	8308 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     704:	a915      	add	r1, sp, #84	; 0x54
     706:	a81d      	add	r0, sp, #116	; 0x74
     708:	f007 fe37 	bl	837a <mbedtls_sha256_finish>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     70c:	465a      	mov	r2, fp
     70e:	a938      	add	r1, sp, #224	; 0xe0
     710:	a815      	add	r0, sp, #84	; 0x54
     712:	f005 fef8 	bl	6506 <memcmp>
     716:	2800      	cmp	r0, #0
     718:	d0dd      	beq.n	6d6 <FIH_LABEL_FIH_CALL_END_576+0x38>
    for (i = 0; i < bootutil_key_cnt; i++) {
     71a:	f108 0801 	add.w	r8, r8, #1
     71e:	e7e0      	b.n	6e2 <FIH_LABEL_FIH_CALL_END_576+0x44>
        } else if (type == EXPECTED_SIG_TLV) {
     720:	f1bb 0f20 	cmp.w	fp, #32
     724:	d197      	bne.n	656 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x7a>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     726:	1c7b      	adds	r3, r7, #1
     728:	d095      	beq.n	656 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x7a>
     72a:	f8d9 3000 	ldr.w	r3, [r9]
     72e:	42bb      	cmp	r3, r7
     730:	dd16      	ble.n	760 <FIH_LABEL_FIH_CALL_END_814>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     732:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     73a:	f47f af6c 	bne.w	616 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x3a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     73e:	4628      	mov	r0, r5
     740:	9906      	ldr	r1, [sp, #24]
     742:	aa38      	add	r2, sp, #224	; 0xe0
     744:	f005 fba5 	bl	5e92 <flash_area_read>
            if (rc) {
     748:	4680      	mov	r8, r0
     74a:	b9b8      	cbnz	r0, 77c <FIH_LABEL_FIH_CALL_END_814+0x1c>

0000074c <FIH_LABEL_FIH_CALL_START_793>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     74c:	b2ff      	uxtb	r7, r7
     74e:	4659      	mov	r1, fp
     750:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     754:	9700      	str	r7, [sp, #0]
     756:	aa38      	add	r2, sp, #224	; 0xe0
     758:	a80d      	add	r0, sp, #52	; 0x34
     75a:	f000 f819 	bl	790 <bootutil_verify_sig>
     75e:	4606      	mov	r6, r0

00000760 <FIH_LABEL_FIH_CALL_END_814>:
            key_id = -1;
     760:	f04f 37ff 	mov.w	r7, #4294967295
     764:	e777      	b.n	656 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x7a>
    if (rc) {
     766:	b13c      	cbz	r4, 778 <FIH_LABEL_FIH_CALL_END_814+0x18>
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     768:	4b07      	ldr	r3, [pc, #28]	; (788 <FIH_LABEL_FIH_CALL_END_814+0x28>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     76a:	681b      	ldr	r3, [r3, #0]
     76c:	42b3      	cmp	r3, r6
        return FIH_FAILURE;
     76e:	bf18      	it	ne
     770:	f8da 6000 	ldrne.w	r6, [sl]
        return -1;
     774:	4634      	mov	r4, r6
     776:	e750      	b.n	61a <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x3e>
    rc = !sha256_valid;
     778:	f04f 0801 	mov.w	r8, #1
        return -1;
     77c:	4644      	mov	r4, r8
     77e:	e74c      	b.n	61a <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x3e>
     780:	20000000 	.word	0x20000000
     784:	000089b0 	.word	0x000089b0
     788:	20000208 	.word	0x20000208
     78c:	000089b4 	.word	0x000089b4

00000790 <bootutil_verify_sig>:
}

fih_int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     794:	461f      	mov	r7, r3
     796:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
    mbedtls_rsa_context ctx;
    int rc;
    fih_int fih_rc = FIH_FAILURE;
     79a:	4b6a      	ldr	r3, [pc, #424]	; (944 <FIH_LABEL_FIH_CALL_END_650+0x2>)
{
     79c:	4680      	mov	r8, r0
    uint8_t *cp;
    uint8_t *end;

#if MBEDTLS_VERSION_NUMBER >= 0x03000000
    mbedtls_rsa_init(&ctx);
     79e:	a827      	add	r0, sp, #156	; 0x9c
{
     7a0:	f89d 6350 	ldrb.w	r6, [sp, #848]	; 0x350
     7a4:	468a      	mov	sl, r1
     7a6:	4691      	mov	r9, r2
    fih_int fih_rc = FIH_FAILURE;
     7a8:	681d      	ldr	r5, [r3, #0]
    mbedtls_rsa_init(&ctx);
     7aa:	f007 fd66 	bl	827a <mbedtls_rsa_init>
#else
    mbedtls_rsa_init(&ctx, 0, 0);
#endif

    cp = (uint8_t *)bootutil_keys[key_id].key;
     7ae:	4b66      	ldr	r3, [pc, #408]	; (948 <FIH_LABEL_FIH_CALL_END_650+0x6>)
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     7b0:	aa8a      	add	r2, sp, #552	; 0x228
    cp = (uint8_t *)bootutil_keys[key_id].key;
     7b2:	f853 4036 	ldr.w	r4, [r3, r6, lsl #3]
    end = cp + *bootutil_keys[key_id].len;
     7b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
     7ba:	685b      	ldr	r3, [r3, #4]
    cp = (uint8_t *)bootutil_keys[key_id].key;
     7bc:	9402      	str	r4, [sp, #8]
    end = cp + *bootutil_keys[key_id].len;
     7be:	681b      	ldr	r3, [r3, #0]
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     7c0:	a802      	add	r0, sp, #8
    end = cp + *bootutil_keys[key_id].len;
     7c2:	441c      	add	r4, r3
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     7c4:	4621      	mov	r1, r4
     7c6:	2330      	movs	r3, #48	; 0x30
     7c8:	f006 faeb 	bl	6da2 <mbedtls_asn1_get_tag>
     7cc:	bb68      	cbnz	r0, 82a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x2a>
    if (*p + len != end) {
     7ce:	9b02      	ldr	r3, [sp, #8]
     7d0:	9a8a      	ldr	r2, [sp, #552]	; 0x228
     7d2:	4413      	add	r3, r2
     7d4:	429c      	cmp	r4, r3
     7d6:	d128      	bne.n	82a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x2a>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     7d8:	4621      	mov	r1, r4
     7da:	aa29      	add	r2, sp, #164	; 0xa4
     7dc:	a802      	add	r0, sp, #8
     7de:	f006 faf4 	bl	6dca <mbedtls_asn1_get_mpi>
     7e2:	bb10      	cbnz	r0, 82a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x2a>
        (rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(E))) != 0) {
     7e4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
     7e8:	465a      	mov	r2, fp
     7ea:	4621      	mov	r1, r4
     7ec:	a802      	add	r0, sp, #8
     7ee:	f006 faec 	bl	6dca <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     7f2:	4606      	mov	r6, r0
     7f4:	b9c8      	cbnz	r0, 82a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x2a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     7f6:	a829      	add	r0, sp, #164	; 0xa4
     7f8:	f006 fe07 	bl	740a <mbedtls_mpi_size>
    if (*p != end) {
     7fc:	9b02      	ldr	r3, [sp, #8]
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     7fe:	9028      	str	r0, [sp, #160]	; 0xa0
    if (*p != end) {
     800:	429c      	cmp	r4, r3
     802:	d112      	bne.n	82a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x2a>
    rc = mbedtls_rsa_import(ctx, &ctx->MBEDTLS_CONTEXT_MEMBER(N), NULL,
     804:	4633      	mov	r3, r6
     806:	4632      	mov	r2, r6
     808:	e9cd 6b00 	strd	r6, fp, [sp]
     80c:	a929      	add	r1, sp, #164	; 0xa4
     80e:	a827      	add	r0, sp, #156	; 0x9c
     810:	f007 fcf0 	bl	81f4 <mbedtls_rsa_import>
    if (rc != 0) {
     814:	b948      	cbnz	r0, 82a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x2a>
    rc = mbedtls_rsa_check_pubkey(ctx);
     816:	a827      	add	r0, sp, #156	; 0x9c
     818:	f003 fe46 	bl	44a8 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     81c:	b928      	cbnz	r0, 82a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x2a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     81e:	a829      	add	r0, sp, #164	; 0xa4
     820:	f006 fdf3 	bl	740a <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     824:	4287      	cmp	r7, r0
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     826:	9028      	str	r0, [sp, #160]	; 0xa0
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     828:	d00a      	beq.n	840 <FIH_LABEL_FIH_CALL_START_229>
        mbedtls_rsa_free(&ctx);
     82a:	a827      	add	r0, sp, #156	; 0x9c
     82c:	f007 fd2f 	bl	828e <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     830:	a827      	add	r0, sp, #156	; 0x9c
     832:	f007 fd2c 	bl	828e <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     836:	4628      	mov	r0, r5
     838:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
     83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000840 <FIH_LABEL_FIH_CALL_START_229>:
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     840:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
     844:	d002      	beq.n	84c <FIH_LABEL_FIH_CALL_END_285+0x2>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     846:	f04f 35ff 	mov.w	r5, #4294967295

0000084a <FIH_LABEL_FIH_CALL_END_285>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     84a:	e7f1      	b.n	830 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x30>
    if (hlen != PSS_HLEN) {
     84c:	f1ba 0f20 	cmp.w	sl, #32
     850:	d1f9      	bne.n	846 <FIH_LABEL_FIH_CALL_START_229+0x6>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     852:	4649      	mov	r1, r9
     854:	aa8a      	add	r2, sp, #552	; 0x228
     856:	a827      	add	r0, sp, #156	; 0x9c
     858:	f003 fe4c 	bl	44f4 <mbedtls_rsa_public>
     85c:	4604      	mov	r4, r0
     85e:	2800      	cmp	r0, #0
     860:	d1f1      	bne.n	846 <FIH_LABEL_FIH_CALL_START_229+0x6>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     862:	f89d 3327 	ldrb.w	r3, [sp, #807]	; 0x327
     866:	2bbc      	cmp	r3, #188	; 0xbc
     868:	d1ed      	bne.n	846 <FIH_LABEL_FIH_CALL_START_229+0x6>
    uint8_t counter[4] = { 0, 0, 0, 0 };
     86a:	af52      	add	r7, sp, #328	; 0x148
    int count = PSS_MASK_LEN;
     86c:	26df      	movs	r6, #223	; 0xdf
     86e:	463d      	mov	r5, r7
    uint8_t counter[4] = { 0, 0, 0, 0 };
     870:	9003      	str	r0, [sp, #12]
    mbedtls_sha256_init(ctx);
     872:	a80c      	add	r0, sp, #48	; 0x30
     874:	f007 fd44 	bl	8300 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     878:	2100      	movs	r1, #0
     87a:	a80c      	add	r0, sp, #48	; 0x30
     87c:	f003 fe82 	bl	4584 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     880:	2220      	movs	r2, #32
     882:	f20d 3107 	addw	r1, sp, #775	; 0x307
     886:	a80c      	add	r0, sp, #48	; 0x30
     888:	f007 fd3e 	bl	8308 <mbedtls_sha256_update>
     88c:	2204      	movs	r2, #4
     88e:	a903      	add	r1, sp, #12
     890:	a80c      	add	r0, sp, #48	; 0x30
     892:	f007 fd39 	bl	8308 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     896:	a904      	add	r1, sp, #16
     898:	a80c      	add	r0, sp, #48	; 0x30
     89a:	f007 fd6e 	bl	837a <mbedtls_sha256_finish>
        if (bytes > count)
     89e:	2e20      	cmp	r6, #32
     8a0:	46b1      	mov	r9, r6
     8a2:	bfa8      	it	ge
     8a4:	f04f 0920 	movge.w	r9, #32
        counter[3]++;
     8a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     8ac:	4638      	mov	r0, r7
        counter[3]++;
     8ae:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     8b0:	464a      	mov	r2, r9
     8b2:	a904      	add	r1, sp, #16
        count -= bytes;
     8b4:	eba6 0609 	sub.w	r6, r6, r9
        counter[3]++;
     8b8:	f88d 300f 	strb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     8bc:	f005 fe4a 	bl	6554 <memcpy>
    while (count > 0) {
     8c0:	2e00      	cmp	r6, #0
        mask += bytes;
     8c2:	444f      	add	r7, r9
    while (count > 0) {
     8c4:	dcd5      	bgt.n	872 <FIH_LABEL_FIH_CALL_END_285+0x28>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     8c6:	462f      	mov	r7, r5
     8c8:	4629      	mov	r1, r5
     8ca:	2200      	movs	r2, #0
     8cc:	ab8a      	add	r3, sp, #552	; 0x228
        db_mask[i] ^= em[i];
     8ce:	7808      	ldrb	r0, [r1, #0]
     8d0:	f813 6b01 	ldrb.w	r6, [r3], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     8d4:	3201      	adds	r2, #1
        db_mask[i] ^= em[i];
     8d6:	4070      	eors	r0, r6
    for (i = 0; i < PSS_MASK_LEN; i++) {
     8d8:	2adf      	cmp	r2, #223	; 0xdf
        db_mask[i] ^= em[i];
     8da:	f801 0b01 	strb.w	r0, [r1], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     8de:	d1f6      	bne.n	8ce <FIH_LABEL_FIH_CALL_END_285+0x84>
    db_mask[0] &= 0x7F;
     8e0:	782b      	ldrb	r3, [r5, #0]
     8e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     8e6:	702b      	strb	r3, [r5, #0]
        if (db_mask[i] != 0) {
     8e8:	f817 6b01 	ldrb.w	r6, [r7], #1
     8ec:	2e00      	cmp	r6, #0
     8ee:	d1aa      	bne.n	846 <FIH_LABEL_FIH_CALL_START_229+0x6>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     8f0:	3401      	adds	r4, #1
     8f2:	2cbe      	cmp	r4, #190	; 0xbe
     8f4:	d1f8      	bne.n	8e8 <FIH_LABEL_FIH_CALL_END_285+0x9e>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     8f6:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
     8fa:	2b01      	cmp	r3, #1
     8fc:	d1a3      	bne.n	846 <FIH_LABEL_FIH_CALL_START_229+0x6>
    mbedtls_sha256_init(ctx);
     8fe:	a80c      	add	r0, sp, #48	; 0x30
     900:	f007 fcfe 	bl	8300 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     904:	4631      	mov	r1, r6
     906:	a80c      	add	r0, sp, #48	; 0x30
     908:	f003 fe3c 	bl	4584 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     90c:	2208      	movs	r2, #8
     90e:	490f      	ldr	r1, [pc, #60]	; (94c <FIH_LABEL_FIH_CALL_END_650+0xa>)
     910:	a80c      	add	r0, sp, #48	; 0x30
     912:	f007 fcf9 	bl	8308 <mbedtls_sha256_update>
     916:	4641      	mov	r1, r8
     918:	2220      	movs	r2, #32
     91a:	a80c      	add	r0, sp, #48	; 0x30
     91c:	f007 fcf4 	bl	8308 <mbedtls_sha256_update>
     920:	2220      	movs	r2, #32
     922:	f20d 2107 	addw	r1, sp, #519	; 0x207
     926:	a80c      	add	r0, sp, #48	; 0x30
     928:	f007 fcee 	bl	8308 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     92c:	a904      	add	r1, sp, #16
     92e:	a80c      	add	r0, sp, #48	; 0x30
     930:	f007 fd23 	bl	837a <mbedtls_sha256_finish>

00000934 <FIH_LABEL_FIH_CALL_START_634>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     934:	2220      	movs	r2, #32
     936:	f20d 3107 	addw	r1, sp, #775	; 0x307
     93a:	a804      	add	r0, sp, #16
     93c:	f004 ffd1 	bl	58e2 <boot_fih_memequal>
     940:	4605      	mov	r5, r0

00000942 <FIH_LABEL_FIH_CALL_END_650>:
    if (rc) {
     942:	e782      	b.n	84a <FIH_LABEL_FIH_CALL_END_285>
     944:	20000000 	.word	0x20000000
     948:	000089b4 	.word	0x000089b4
     94c:	00008ea1 	.word	0x00008ea1

00000950 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t areas[2] = {
     954:	2302      	movs	r3, #2
{
     956:	b086      	sub	sp, #24
     958:	460d      	mov	r5, r1
     95a:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     95c:	2600      	movs	r6, #0
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     95e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 9c8 <boot_read_swap_size+0x78>
    uint8_t areas[2] = {
     962:	f8ad 3000 	strh.w	r3, [sp]
        rc = flash_area_open(areas[i], fap);
     966:	f817 0b01 	ldrb.w	r0, [r7], #1
     96a:	a901      	add	r1, sp, #4
     96c:	f001 fa28 	bl	1dc0 <flash_area_open>
        if (rc != 0) {
     970:	4604      	mov	r4, r0
     972:	b9a0      	cbnz	r0, 99e <boot_read_swap_size+0x4e>
        off = boot_magic_off(*fap);
     974:	9801      	ldr	r0, [sp, #4]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     976:	2310      	movs	r3, #16
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     978:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     97a:	aa02      	add	r2, sp, #8
     97c:	3910      	subs	r1, #16
     97e:	f005 fa88 	bl	5e92 <flash_area_read>
     982:	4604      	mov	r4, r0
        flash_area_close(*fap);
     984:	9801      	ldr	r0, [sp, #4]
     986:	f005 fa83 	bl	5e90 <flash_area_close>
        if (rc != 0) {
     98a:	b944      	cbnz	r4, 99e <boot_read_swap_size+0x4e>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     98c:	2210      	movs	r2, #16
     98e:	4641      	mov	r1, r8
     990:	a802      	add	r0, sp, #8
     992:	f005 fdb8 	bl	6506 <memcmp>
     996:	b140      	cbz	r0, 9aa <boot_read_swap_size+0x5a>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     998:	b12e      	cbz	r6, 9a6 <boot_read_swap_size+0x56>
    return -1;
     99a:	f04f 34ff 	mov.w	r4, #4294967295
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     99e:	4620      	mov	r0, r4
     9a0:	b006      	add	sp, #24
     9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     9a6:	2601      	movs	r6, #1
     9a8:	e7dd      	b.n	966 <boot_read_swap_size+0x16>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     9aa:	9801      	ldr	r0, [sp, #4]
     9ac:	f006 f900 	bl	6bb0 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     9b0:	2304      	movs	r3, #4
     9b2:	f1a0 0108 	sub.w	r1, r0, #8
     9b6:	462a      	mov	r2, r5
     9b8:	9801      	ldr	r0, [sp, #4]
     9ba:	f005 fa6a 	bl	5e92 <flash_area_read>
     9be:	4604      	mov	r4, r0
        flash_area_close(fap);
     9c0:	9801      	ldr	r0, [sp, #4]
     9c2:	f005 fa65 	bl	5e90 <flash_area_close>
     9c6:	e7ea      	b.n	99e <boot_read_swap_size+0x4e>
     9c8:	00008d94 	.word	0x00008d94

000009cc <bootutil_max_image_size>:
    return 0;
}
#endif

uint32_t bootutil_max_image_size(const struct flash_area *fap)
{
     9cc:	b507      	push	{r0, r1, r2, lr}
#if defined(MCUBOOT_SWAP_USING_SCRATCH)
    return boot_status_off(fap);
#elif defined(MCUBOOT_SWAP_USING_MOVE)
    struct flash_sector sector;
    /* get the last sector offset */
    int rc = flash_area_sector_from_off(boot_status_off(fap), &sector);
     9ce:	f004 ff9c 	bl	590a <boot_status_off>
     9d2:	4669      	mov	r1, sp
     9d4:	f7ff fdc6 	bl	564 <flash_area_sector_from_off>
    if (rc) {
     9d8:	b138      	cbz	r0, 9ea <bootutil_max_image_size+0x1e>
        BOOT_LOG_ERR("Unable to determine flash sector of the image trailer");
     9da:	4805      	ldr	r0, [pc, #20]	; (9f0 <bootutil_max_image_size+0x24>)
     9dc:	2145      	movs	r1, #69	; 0x45
     9de:	f005 fa4a 	bl	5e76 <z_log_minimal_printk>
        return 0; /* Returning of zero here should cause any check which uses
     9e2:	2000      	movs	r0, #0
#elif defined(MCUBOOT_DIRECT_XIP)
    return boot_swap_info_off(fap);
#elif defined(MCUBOOT_RAM_LOAD)
    return boot_swap_info_off(fap);
#endif
}
     9e4:	b003      	add	sp, #12
     9e6:	f85d fb04 	ldr.w	pc, [sp], #4
 */
uint8_t flash_area_erased_val(const struct flash_area *fap);

static inline uint32_t flash_sector_get_off(const struct flash_sector *fs)
{
	return fs->fs_off;
     9ea:	9800      	ldr	r0, [sp, #0]
    return flash_sector_get_off(&sector);
     9ec:	e7fa      	b.n	9e4 <bootutil_max_image_size+0x18>
     9ee:	bf00      	nop
     9f0:	00008ea9 	.word	0x00008ea9

000009f4 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     9f8:	4b35      	ldr	r3, [pc, #212]	; (ad0 <FIH_LABEL_FIH_CALL_END_437+0x76>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     9fa:	b088      	sub	sp, #32
     9fc:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9fe:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     a00:	460c      	mov	r4, r1
    fih_int fih_rc = FIH_FAILURE;
     a02:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a04:	f004 fec8 	bl	5798 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     a08:	a906      	add	r1, sp, #24
     a0a:	b2c0      	uxtb	r0, r0
     a0c:	f001 f9d8 	bl	1dc0 <flash_area_open>
    if (rc != 0) {
     a10:	2800      	cmp	r0, #0
     a12:	d157      	bne.n	ac4 <FIH_LABEL_FIH_CALL_END_437+0x6a>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a14:	4621      	mov	r1, r4
     a16:	f004 febf 	bl	5798 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     a1a:	252c      	movs	r5, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     a1c:	a907      	add	r1, sp, #28
     a1e:	b2c0      	uxtb	r0, r0
     a20:	fb05 6504 	mla	r5, r5, r4, r6
     a24:	f001 f9cc 	bl	1dc0 <flash_area_open>
    if (rc != 0) {
     a28:	2800      	cmp	r0, #0
     a2a:	d033      	beq.n	a94 <FIH_LABEL_FIH_CALL_END_437+0x3a>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     a2c:	272c      	movs	r7, #44	; 0x2c
     a2e:	4367      	muls	r7, r4
     a30:	eb06 0807 	add.w	r8, r6, r7
     a34:	f8d8 1010 	ldr.w	r1, [r8, #16]
#endif
    BOOT_HOOK_CALL_FIH(boot_image_check_hook, fih_int_encode(BOOT_HOOK_REGULAR),
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
     a38:	9b06      	ldr	r3, [sp, #24]
    if (boot_check_header_erased(state, slot) == 0 ||
     a3a:	f011 0110 	ands.w	r1, r1, #16
     a3e:	d138      	bne.n	ab2 <FIH_LABEL_FIH_CALL_END_437+0x58>

00000a40 <FIH_LABEL_FIH_CALL_START_388>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     a40:	f44f 7280 	mov.w	r2, #256	; 0x100
     a44:	9201      	str	r2, [sp, #4]
     a46:	4a23      	ldr	r2, [pc, #140]	; (ad4 <FIH_LABEL_FIH_CALL_END_437+0x7a>)
     a48:	4608      	mov	r0, r1
     a4a:	9200      	str	r2, [sp, #0]
     a4c:	e9cd 1103 	strd	r1, r1, [sp, #12]
     a50:	462a      	mov	r2, r5
     a52:	9102      	str	r1, [sp, #8]
     a54:	f7ff fd9e 	bl	594 <bootutil_img_validate>
     a58:	4605      	mov	r5, r0

00000a5a <FIH_LABEL_FIH_CALL_END_437>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a5a:	4b1f      	ldr	r3, [pc, #124]	; (ad8 <FIH_LABEL_FIH_CALL_END_437+0x7e>)
     a5c:	59f2      	ldr	r2, [r6, r7]
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a5e:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a60:	429a      	cmp	r2, r3
     a62:	d10c      	bne.n	a7e <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     a64:	f8d8 200c 	ldr.w	r2, [r8, #12]
     a68:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    if (a > UINT32_MAX - b) {
     a6c:	189b      	adds	r3, r3, r2
     a6e:	d206      	bcs.n	a7e <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (size >= flash_area_get_size(fap)) {
     a70:	6882      	ldr	r2, [r0, #8]
     a72:	4293      	cmp	r3, r2
     a74:	d203      	bcs.n	a7e <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a76:	4b19      	ldr	r3, [pc, #100]	; (adc <FIH_LABEL_FIH_CALL_END_437+0x82>)
     a78:	681b      	ldr	r3, [r3, #0]
     a7a:	42ab      	cmp	r3, r5
     a7c:	d01f      	beq.n	abe <FIH_LABEL_FIH_CALL_END_437+0x64>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     a7e:	b32c      	cbz	r4, acc <FIH_LABEL_FIH_CALL_END_437+0x72>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     a80:	6882      	ldr	r2, [r0, #8]
     a82:	2100      	movs	r1, #0
     a84:	f005 fa2f 	bl	5ee6 <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     a88:	4a15      	ldr	r2, [pc, #84]	; (ae0 <FIH_LABEL_FIH_CALL_END_437+0x86>)
     a8a:	2145      	movs	r1, #69	; 0x45
     a8c:	4815      	ldr	r0, [pc, #84]	; (ae4 <FIH_LABEL_FIH_CALL_END_437+0x8a>)
     a8e:	f005 f9f2 	bl	5e76 <z_log_minimal_printk>
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        fih_rc = fih_int_encode(1);
        goto out;
     a92:	e013      	b.n	abc <FIH_LABEL_FIH_CALL_END_437+0x62>
    erased_val = flash_area_erased_val(fap);
     a94:	9807      	ldr	r0, [sp, #28]
     a96:	f005 fa41 	bl	5f1c <flash_area_erased_val>
     a9a:	4607      	mov	r7, r0
    flash_area_close(fap);
     a9c:	9807      	ldr	r0, [sp, #28]
     a9e:	f005 f9f7 	bl	5e90 <flash_area_close>
    for (i = 0; i < len; i++) {
     aa2:	1e6b      	subs	r3, r5, #1
     aa4:	1cea      	adds	r2, r5, #3
        if (val != p[i]) {
     aa6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     aaa:	42b9      	cmp	r1, r7
     aac:	d1be      	bne.n	a2c <boot_validate_slot.isra.0+0x38>
    for (i = 0; i < len; i++) {
     aae:	4293      	cmp	r3, r2
     ab0:	d1f9      	bne.n	aa6 <FIH_LABEL_FIH_CALL_END_437+0x4c>
        if (slot != BOOT_PRIMARY_SLOT) {
     ab2:	b11c      	cbz	r4, abc <FIH_LABEL_FIH_CALL_END_437+0x62>
            swap_erase_trailer_sectors(state, fap);
     ab4:	4630      	mov	r0, r6
     ab6:	9906      	ldr	r1, [sp, #24]
     ab8:	f005 f80c 	bl	5ad4 <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     abc:	2501      	movs	r5, #1
        }
    }
#endif

out:
    flash_area_close(fap);
     abe:	9806      	ldr	r0, [sp, #24]
     ac0:	f005 f9e6 	bl	5e90 <flash_area_close>

    FIH_RET(fih_rc);
}
     ac4:	4628      	mov	r0, r5
     ac6:	b008      	add	sp, #32
     ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     acc:	4a06      	ldr	r2, [pc, #24]	; (ae8 <FIH_LABEL_FIH_CALL_END_437+0x8e>)
     ace:	e7dc      	b.n	a8a <FIH_LABEL_FIH_CALL_END_437+0x30>
     ad0:	20000000 	.word	0x20000000
     ad4:	200033aa 	.word	0x200033aa
     ad8:	96f3b83d 	.word	0x96f3b83d
     adc:	20000208 	.word	0x20000208
     ae0:	00008eec 	.word	0x00008eec
     ae4:	00008ef6 	.word	0x00008ef6
     ae8:	00008ee4 	.word	0x00008ee4

00000aec <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     aec:	b573      	push	{r0, r1, r4, r5, r6, lr}
     aee:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     af0:	2100      	movs	r1, #0
{
     af2:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     af4:	4628      	mov	r0, r5
    size = copy_size = 0;
     af6:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     afa:	f004 ffaa 	bl	5a52 <boot_status_is_reset>
     afe:	b330      	cbz	r0, b4e <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     b00:	4e16      	ldr	r6, [pc, #88]	; (b5c <boot_swap_image+0x70>)
     b02:	6823      	ldr	r3, [r4, #0]
     b04:	42b3      	cmp	r3, r6
     b06:	d103      	bne.n	b10 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     b08:	4620      	mov	r0, r4
     b0a:	aa01      	add	r2, sp, #4
     b0c:	f004 ff35 	bl	597a <boot_read_image_size.constprop.0.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     b10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b12:	42b3      	cmp	r3, r6
     b14:	d104      	bne.n	b20 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     b16:	466a      	mov	r2, sp
     b18:	2101      	movs	r1, #1
     b1a:	4620      	mov	r0, r4
     b1c:	f004 ff2d 	bl	597a <boot_read_image_size.constprop.0.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        if (size > copy_size) {
     b20:	e9dd 3200 	ldrd	r3, r2, [sp]
     b24:	4293      	cmp	r3, r2
            copy_size = size;
     b26:	bf88      	it	hi
     b28:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     b2a:	9b01      	ldr	r3, [sp, #4]
     b2c:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     b2e:	9a01      	ldr	r2, [sp, #4]
     b30:	4629      	mov	r1, r5
     b32:	4620      	mov	r0, r4
     b34:	f000 fb36 	bl	11a4 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     b38:	4b09      	ldr	r3, [pc, #36]	; (b60 <boot_swap_image+0x74>)
     b3a:	681a      	ldr	r2, [r3, #0]
     b3c:	2a00      	cmp	r2, #0
     b3e:	dd03      	ble.n	b48 <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     b40:	2157      	movs	r1, #87	; 0x57
     b42:	4808      	ldr	r0, [pc, #32]	; (b64 <boot_swap_image+0x78>)
     b44:	f005 f997 	bl	5e76 <z_log_minimal_printk>
#endif
    rc = BOOT_HOOK_CALL(boot_copy_region_post_hook, 0, BOOT_CURR_IMG(state),
                        BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT), size);

    return 0;
}
     b48:	2000      	movs	r0, #0
     b4a:	b002      	add	sp, #8
     b4c:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     b4e:	f105 0108 	add.w	r1, r5, #8
     b52:	f7ff fefd 	bl	950 <boot_read_swap_size>
        copy_size = bs->swap_size;
     b56:	68ab      	ldr	r3, [r5, #8]
     b58:	9301      	str	r3, [sp, #4]
     b5a:	e7e8      	b.n	b2e <boot_swap_image+0x42>
     b5c:	96f3b83d 	.word	0x96f3b83d
     b60:	2000166c 	.word	0x2000166c
     b64:	00008f1e 	.word	0x00008f1e

00000b68 <boot_copy_region>:
{
     b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b6c:	4688      	mov	r8, r1
     b6e:	4691      	mov	r9, r2
     b70:	469a      	mov	sl, r3
    bytes_copied = 0;
     b72:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b74:	f8df b068 	ldr.w	fp, [pc, #104]	; be0 <boot_copy_region+0x78>
     b78:	4c1a      	ldr	r4, [pc, #104]	; (be4 <boot_copy_region+0x7c>)
     b7a:	4d1b      	ldr	r5, [pc, #108]	; (be8 <boot_copy_region+0x80>)
    while (bytes_copied < sz) {
     b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b7e:	429e      	cmp	r6, r3
     b80:	d301      	bcc.n	b86 <boot_copy_region+0x1e>
    return 0;
     b82:	2000      	movs	r0, #0
     b84:	e00f      	b.n	ba6 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b88:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     b8a:	1b9f      	subs	r7, r3, r6
     b8c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     b90:	bf28      	it	cs
     b92:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b96:	4a12      	ldr	r2, [pc, #72]	; (be0 <boot_copy_region+0x78>)
     b98:	463b      	mov	r3, r7
     b9a:	eb06 010a 	add.w	r1, r6, sl
     b9e:	f005 f978 	bl	5e92 <flash_area_read>
        if (rc != 0) {
     ba2:	b110      	cbz	r0, baa <boot_copy_region+0x42>
            return BOOT_EFLASH;
     ba4:	2001      	movs	r0, #1
}
     ba6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     baa:	990a      	ldr	r1, [sp, #40]	; 0x28
     bac:	463b      	mov	r3, r7
     bae:	465a      	mov	r2, fp
     bb0:	4648      	mov	r0, r9
     bb2:	1871      	adds	r1, r6, r1
     bb4:	f005 f982 	bl	5ebc <flash_area_write>
        if (rc != 0) {
     bb8:	2800      	cmp	r0, #0
     bba:	d1f3      	bne.n	ba4 <boot_copy_region+0x3c>
     bbc:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     bc0:	443e      	add	r6, r7
     bc2:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     bc6:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     bca:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     bce:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     bd2:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     bd6:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     bda:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     bde:	e7cd      	b.n	b7c <boot_copy_region+0x14>
     be0:	2000120c 	.word	0x2000120c
     be4:	50018000 	.word	0x50018000
     be8:	6e524635 	.word	0x6e524635

00000bec <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     bec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
     bf0:	460e      	mov	r6, r1

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bf2:	2100      	movs	r1, #0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     bf4:	4b8e      	ldr	r3, [pc, #568]	; (e30 <FIH_LABEL_FIH_CALL_END_2283+0x40>)
{
     bf6:	4604      	mov	r4, r0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     bf8:	6243      	str	r3, [r0, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     bfa:	4b8e      	ldr	r3, [pc, #568]	; (e34 <FIH_LABEL_FIH_CALL_END_2283+0x44>)
     bfc:	6503      	str	r3, [r0, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bfe:	4608      	mov	r0, r1
     c00:	f004 fdca 	bl	5798 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c04:	f104 0120 	add.w	r1, r4, #32
     c08:	b2c0      	uxtb	r0, r0
     c0a:	f001 f8d9 	bl	1dc0 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c0e:	2101      	movs	r1, #1
     c10:	2000      	movs	r0, #0
     c12:	f004 fdc1 	bl	5798 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c16:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     c1a:	b2c0      	uxtb	r0, r0
     c1c:	f001 f8d0 	bl	1dc0 <flash_area_open>
     c20:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     c22:	4620      	mov	r0, r4
     c24:	f004 feea 	bl	59fc <boot_read_sectors>
    if (rc != 0) {
     c28:	4607      	mov	r7, r0
     c2a:	b968      	cbnz	r0, c48 <context_boot_go+0x5c>
    rc = boot_read_image_headers(state, false, NULL);
     c2c:	2200      	movs	r2, #0
     c2e:	4620      	mov	r0, r4
     c30:	4611      	mov	r1, r2
     c32:	f004 fe8c 	bl	594e <boot_read_image_headers>
    if (rc != 0) {
     c36:	4607      	mov	r7, r0
     c38:	b308      	cbz	r0, c7e <context_boot_go+0x92>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     c3a:	2200      	movs	r2, #0
     c3c:	2157      	movs	r1, #87	; 0x57
     c3e:	487e      	ldr	r0, [pc, #504]	; (e38 <FIH_LABEL_FIH_CALL_END_2283+0x48>)
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c40:	f005 f919 	bl	5e76 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c44:	2301      	movs	r3, #1
     c46:	e090      	b.n	d6a <FIH_LABEL_FIH_CALL_END_2032+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     c48:	f44f 7280 	mov.w	r2, #256	; 0x100
     c4c:	2157      	movs	r1, #87	; 0x57
     c4e:	487b      	ldr	r0, [pc, #492]	; (e3c <FIH_LABEL_FIH_CALL_END_2283+0x4c>)
     c50:	f005 f911 	bl	5e76 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c54:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     c56:	429f      	cmp	r7, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c58:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     c5c:	d1e6      	bne.n	c2c <context_boot_go+0x40>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     c5e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     c62:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     c64:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (BOOT_SWAP_TYPE(state)) {
     c68:	f200 8082 	bhi.w	d70 <FIH_LABEL_FIH_CALL_END_2032+0x14>
     c6c:	2b01      	cmp	r3, #1
     c6e:	f200 8085 	bhi.w	d7c <FIH_LABEL_FIH_CALL_END_2032+0x20>
     c72:	f000 809c 	beq.w	dae <FIH_LABEL_FIH_CALL_END_2032+0x52>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c76:	23ff      	movs	r3, #255	; 0xff
     c78:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c7c:	e097      	b.n	dae <FIH_LABEL_FIH_CALL_END_2032+0x52>
    if (boot_slots_compatible(state)) {
     c7e:	4620      	mov	r0, r4
     c80:	f000 f9a6 	bl	fd0 <boot_slots_compatible>
     c84:	2800      	cmp	r0, #0
     c86:	d0dd      	beq.n	c44 <context_boot_go+0x58>
        boot_status_reset(bs);
     c88:	4668      	mov	r0, sp
     c8a:	f004 fed9 	bl	5a40 <boot_status_reset>
        rc = swap_read_status(state, bs);
     c8e:	4669      	mov	r1, sp
     c90:	4620      	mov	r0, r4
     c92:	f004 ff74 	bl	5b7e <swap_read_status>
        if (rc != 0) {
     c96:	b118      	cbz	r0, ca0 <context_boot_go+0xb4>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c98:	463a      	mov	r2, r7
     c9a:	2157      	movs	r1, #87	; 0x57
     c9c:	4868      	ldr	r0, [pc, #416]	; (e40 <FIH_LABEL_FIH_CALL_END_2283+0x50>)
     c9e:	e7cf      	b.n	c40 <context_boot_go+0x54>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     ca0:	4668      	mov	r0, sp
     ca2:	f004 fed6 	bl	5a52 <boot_status_is_reset>
     ca6:	f080 0101 	eor.w	r1, r0, #1
     caa:	466a      	mov	r2, sp
     cac:	4620      	mov	r0, r4
     cae:	b2c9      	uxtb	r1, r1
     cb0:	f004 fe4d 	bl	594e <boot_read_image_headers>
        if (rc != 0) {
     cb4:	4602      	mov	r2, r0
     cb6:	2800      	cmp	r0, #0
     cb8:	d1bf      	bne.n	c3a <context_boot_go+0x4e>
        if (!boot_status_is_reset(bs)) {
     cba:	4668      	mov	r0, sp
     cbc:	f004 fec9 	bl	5a52 <boot_status_is_reset>
     cc0:	4607      	mov	r7, r0
     cc2:	bb60      	cbnz	r0, d1e <context_boot_go+0x132>
    rc = boot_swap_image(state, bs);
     cc4:	4669      	mov	r1, sp
     cc6:	4620      	mov	r0, r4
     cc8:	f7ff ff10 	bl	aec <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     ccc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cd0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     cd4:	3b03      	subs	r3, #3
     cd6:	2b01      	cmp	r3, #1
     cd8:	d806      	bhi.n	ce8 <context_boot_go+0xfc>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     cda:	4638      	mov	r0, r7
     cdc:	f004 ff9d 	bl	5c1a <swap_set_image_ok>
        if (rc != 0) {
     ce0:	b110      	cbz	r0, ce8 <context_boot_go+0xfc>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     ce2:	23ff      	movs	r3, #255	; 0xff
     ce4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     ce8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cec:	3b02      	subs	r3, #2
     cee:	2b02      	cmp	r3, #2
     cf0:	d80b      	bhi.n	d0a <context_boot_go+0x11e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     cf2:	2000      	movs	r0, #0
     cf4:	f004 ff7f 	bl	5bf6 <swap_set_copy_done>
        if (rc != 0) {
     cf8:	b138      	cbz	r0, d0a <context_boot_go+0x11e>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     cfa:	23ff      	movs	r3, #255	; 0xff
     cfc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     d00:	2145      	movs	r1, #69	; 0x45
     d02:	4850      	ldr	r0, [pc, #320]	; (e44 <FIH_LABEL_FIH_CALL_END_2283+0x54>)
     d04:	f005 f8b7 	bl	5e76 <z_log_minimal_printk>
        while (1) {}
     d08:	e7fe      	b.n	d08 <context_boot_go+0x11c>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     d0a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d0e:	2bff      	cmp	r3, #255	; 0xff
     d10:	d0f6      	beq.n	d00 <context_boot_go+0x114>
            rc = boot_read_image_headers(state, false, bs);
     d12:	466a      	mov	r2, sp
     d14:	2100      	movs	r1, #0
     d16:	4620      	mov	r0, r4
     d18:	f004 fe19 	bl	594e <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d1c:	e792      	b.n	c44 <context_boot_go+0x58>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     d1e:	f89d 8007 	ldrb.w	r8, [sp, #7]
     d22:	f1b8 0f01 	cmp.w	r8, #1
     d26:	d115      	bne.n	d54 <FIH_LABEL_FIH_CALL_START_2017>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d28:	4610      	mov	r0, r2
     d2a:	f003 f947 	bl	3fbc <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d2e:	1e83      	subs	r3, r0, #2
     d30:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d32:	4607      	mov	r7, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     d34:	d80b      	bhi.n	d4e <FIH_LABEL_FIH_CALL_END_1981+0x10>

00000d36 <FIH_LABEL_FIH_CALL_START_1966>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     d36:	4641      	mov	r1, r8
     d38:	4620      	mov	r0, r4
     d3a:	f7ff fe5b 	bl	9f4 <boot_validate_slot.isra.0>

00000d3e <FIH_LABEL_FIH_CALL_END_1981>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d3e:	4b42      	ldr	r3, [pc, #264]	; (e48 <FIH_LABEL_FIH_CALL_END_2283+0x58>)
     d40:	681b      	ldr	r3, [r3, #0]
     d42:	4298      	cmp	r0, r3
     d44:	d003      	beq.n	d4e <FIH_LABEL_FIH_CALL_END_1981+0x10>
                swap_type = BOOT_SWAP_TYPE_NONE;
     d46:	2801      	cmp	r0, #1
     d48:	bf14      	ite	ne
     d4a:	2705      	movne	r7, #5
     d4c:	2701      	moveq	r7, #1
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     d4e:	f884 7058 	strb.w	r7, [r4, #88]	; 0x58
     d52:	e784      	b.n	c5e <context_boot_go+0x72>

00000d54 <FIH_LABEL_FIH_CALL_START_2017>:
                FIH_CALL(boot_validate_slot, fih_rc,
     d54:	2101      	movs	r1, #1
     d56:	4620      	mov	r0, r4
     d58:	f7ff fe4c 	bl	9f4 <boot_validate_slot.isra.0>

00000d5c <FIH_LABEL_FIH_CALL_END_2032>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d5c:	4b3a      	ldr	r3, [pc, #232]	; (e48 <FIH_LABEL_FIH_CALL_END_2283+0x58>)
     d5e:	681b      	ldr	r3, [r3, #0]
     d60:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     d62:	bf14      	ite	ne
     d64:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     d66:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d6a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d6e:	e776      	b.n	c5e <context_boot_go+0x72>
        switch (BOOT_SWAP_TYPE(state)) {
     d70:	2b05      	cmp	r3, #5
     d72:	d180      	bne.n	c76 <context_boot_go+0x8a>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d74:	2000      	movs	r0, #0
     d76:	f004 ff50 	bl	5c1a <swap_set_image_ok>
     d7a:	e013      	b.n	da4 <FIH_LABEL_FIH_CALL_END_2032+0x48>
        rc = boot_swap_image(state, bs);
     d7c:	4669      	mov	r1, sp
     d7e:	4620      	mov	r0, r4
     d80:	f7ff feb4 	bl	aec <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     d84:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        rc = boot_swap_image(state, bs);
     d88:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     d8a:	1eda      	subs	r2, r3, #3
     d8c:	2a01      	cmp	r2, #1
     d8e:	d80c      	bhi.n	daa <FIH_LABEL_FIH_CALL_END_2032+0x4e>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d90:	2000      	movs	r0, #0
     d92:	f004 ff42 	bl	5c1a <swap_set_image_ok>
        if (rc != 0) {
     d96:	4605      	mov	r5, r0
     d98:	2800      	cmp	r0, #0
     d9a:	f47f af6c 	bne.w	c76 <context_boot_go+0x8a>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d9e:	2000      	movs	r0, #0
     da0:	f004 ff29 	bl	5bf6 <swap_set_copy_done>
            if (rc != 0) {
     da4:	4605      	mov	r5, r0
     da6:	b110      	cbz	r0, dae <FIH_LABEL_FIH_CALL_END_2032+0x52>
     da8:	e765      	b.n	c76 <context_boot_go+0x8a>
    if (BOOT_IS_UPGRADE(swap_type)) {
     daa:	2b02      	cmp	r3, #2
     dac:	d0f7      	beq.n	d9e <FIH_LABEL_FIH_CALL_END_2032+0x42>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     dae:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     db2:	2bff      	cmp	r3, #255	; 0xff
     db4:	d104      	bne.n	dc0 <FIH_LABEL_FIH_CALL_END_2032+0x64>
            BOOT_LOG_ERR("panic!");
     db6:	2145      	movs	r1, #69	; 0x45
     db8:	4822      	ldr	r0, [pc, #136]	; (e44 <FIH_LABEL_FIH_CALL_END_2283+0x54>)
     dba:	f005 f85c 	bl	5e76 <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     dbe:	e7fe      	b.n	dbe <FIH_LABEL_FIH_CALL_END_2032+0x62>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     dc0:	2b01      	cmp	r3, #1
     dc2:	d010      	beq.n	de6 <FIH_LABEL_FIH_CALL_START_2268>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     dc4:	466a      	mov	r2, sp
     dc6:	2100      	movs	r1, #0
     dc8:	4620      	mov	r0, r4
     dca:	f004 fdc0 	bl	594e <boot_read_image_headers>
            if (rc != 0) {
     dce:	4605      	mov	r5, r0
     dd0:	b148      	cbz	r0, de6 <FIH_LABEL_FIH_CALL_START_2268>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     dd2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     dd4:	f005 f85c 	bl	5e90 <flash_area_close>
     dd8:	6a20      	ldr	r0, [r4, #32]
     dda:	f005 f859 	bl	5e90 <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     dde:	4628      	mov	r0, r5
     de0:	b004      	add	sp, #16
     de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000de6 <FIH_LABEL_FIH_CALL_START_2268>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     de6:	2100      	movs	r1, #0
     de8:	4620      	mov	r0, r4
     dea:	f7ff fe03 	bl	9f4 <boot_validate_slot.isra.0>
     dee:	4607      	mov	r7, r0

00000df0 <FIH_LABEL_FIH_CALL_END_2283>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     df0:	f8df 8054 	ldr.w	r8, [pc, #84]	; e48 <FIH_LABEL_FIH_CALL_END_2283+0x58>
     df4:	f8d8 3000 	ldr.w	r3, [r8]
     df8:	4298      	cmp	r0, r3
     dfa:	d10f      	bne.n	e1c <FIH_LABEL_FIH_CALL_END_2283+0x2c>
    memset(&bs, 0, sizeof(struct boot_status));
     dfc:	2210      	movs	r2, #16
     dfe:	2100      	movs	r1, #0
     e00:	4668      	mov	r0, sp
     e02:	f005 fbb2 	bl	656a <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     e06:	6a20      	ldr	r0, [r4, #32]
     e08:	f004 fccf 	bl	57aa <flash_area_get_device_id>
     e0c:	7130      	strb	r0, [r6, #4]
	return (uint32_t)fa->fa_off;
     e0e:	6a23      	ldr	r3, [r4, #32]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     e10:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     e12:	6034      	str	r4, [r6, #0]
    fih_rc = FIH_SUCCESS;
     e14:	f8d8 5000 	ldr.w	r5, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     e18:	60b3      	str	r3, [r6, #8]
    fih_rc = FIH_SUCCESS;
     e1a:	e7da      	b.n	dd2 <FIH_LABEL_FIH_CALL_END_2032+0x76>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     e1c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     e1e:	f005 f837 	bl	5e90 <flash_area_close>
     e22:	6a20      	ldr	r0, [r4, #32]
     e24:	f005 f834 	bl	5e90 <flash_area_close>
    if (rc) {
     e28:	2d00      	cmp	r5, #0
     e2a:	bf08      	it	eq
     e2c:	463d      	moveq	r5, r7
     e2e:	e7d6      	b.n	dde <FIH_LABEL_FIH_CALL_END_2032+0x82>
     e30:	20000a0c 	.word	0x20000a0c
     e34:	2000020c 	.word	0x2000020c
     e38:	00008f8f 	.word	0x00008f8f
     e3c:	00008f4d 	.word	0x00008f4d
     e40:	00008fbb 	.word	0x00008fbb
     e44:	00008fe5 	.word	0x00008fe5
     e48:	20000208 	.word	0x20000208

00000e4c <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     e4c:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     e4e:	4d06      	ldr	r5, [pc, #24]	; (e68 <FIH_LABEL_FIH_CALL_END_2906+0x4>)
{
     e50:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     e52:	2260      	movs	r2, #96	; 0x60
     e54:	2100      	movs	r1, #0
     e56:	4628      	mov	r0, r5
     e58:	f005 fb87 	bl	656a <memset>

00000e5c <FIH_LABEL_FIH_CALL_START_2892>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     e5c:	4621      	mov	r1, r4
     e5e:	4628      	mov	r0, r5
     e60:	f7ff fec4 	bl	bec <context_boot_go>

00000e64 <FIH_LABEL_FIH_CALL_END_2906>:
}
     e64:	bd38      	pop	{r3, r4, r5, pc}
     e66:	bf00      	nop
     e68:	2000160c 	.word	0x2000160c

00000e6c <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     e6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
     e6e:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     e70:	461d      	mov	r5, r3
     e72:	b143      	cbz	r3, e86 <boot_read_image_header+0x1a>
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     e74:	795b      	ldrb	r3, [r3, #5]
     e76:	2b01      	cmp	r3, #1
     e78:	d107      	bne.n	e8a <boot_read_image_header+0x1e>
            if (slot == 0 && bs->idx > g_last_idx) {
     e7a:	b921      	cbnz	r1, e86 <boot_read_image_header+0x1a>
     e7c:	4b20      	ldr	r3, [pc, #128]	; (f00 <boot_read_image_header+0x94>)
     e7e:	682a      	ldr	r2, [r5, #0]
     e80:	681b      	ldr	r3, [r3, #0]
     e82:	429a      	cmp	r2, r3
     e84:	d817      	bhi.n	eb6 <boot_read_image_header+0x4a>
    off = 0;
     e86:	2400      	movs	r4, #0
     e88:	e018      	b.n	ebc <boot_read_image_header+0x50>
                /* second sector */
                off = sz;
            }
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     e8a:	2b02      	cmp	r3, #2
     e8c:	d1fb      	bne.n	e86 <boot_read_image_header+0x1a>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     e8e:	682b      	ldr	r3, [r5, #0]
     e90:	2b01      	cmp	r3, #1
     e92:	d907      	bls.n	ea4 <boot_read_image_header+0x38>
     e94:	4a1a      	ldr	r2, [pc, #104]	; (f00 <boot_read_image_header+0x94>)
     e96:	6812      	ldr	r2, [r2, #0]
     e98:	4293      	cmp	r3, r2
     e9a:	d8f4      	bhi.n	e86 <boot_read_image_header+0x1a>
                if (slot == 0) {
     e9c:	fab1 f181 	clz	r1, r1
     ea0:	0949      	lsrs	r1, r1, #5
     ea2:	e7f0      	b.n	e86 <boot_read_image_header+0x1a>
                    slot = 1;
                } else {
                    slot = 0;
                }
            } else if (bs->idx == 1) {
     ea4:	d1ef      	bne.n	e86 <boot_read_image_header+0x1a>
                if (slot == 0) {
     ea6:	b131      	cbz	r1, eb6 <boot_read_image_header+0x4a>
                    off = sz;
                }
                if (slot == 1 && bs->state == 2) {
     ea8:	2901      	cmp	r1, #1
     eaa:	d1ec      	bne.n	e86 <boot_read_image_header+0x1a>
     eac:	7929      	ldrb	r1, [r5, #4]
     eae:	3902      	subs	r1, #2
     eb0:	bf18      	it	ne
     eb2:	2101      	movne	r1, #1
     eb4:	e7e7      	b.n	e86 <boot_read_image_header+0x1a>
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     eb6:	2100      	movs	r1, #0
     eb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
     eba:	685c      	ldr	r4, [r3, #4]
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     ebc:	2000      	movs	r0, #0
     ebe:	f004 fc6b 	bl	5798 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     ec2:	a901      	add	r1, sp, #4
     ec4:	b2c0      	uxtb	r0, r0
     ec6:	f000 ff7b 	bl	1dc0 <flash_area_open>
    if (rc != 0) {
     eca:	b130      	cbz	r0, eda <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     ecc:	2401      	movs	r4, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     ece:	9801      	ldr	r0, [sp, #4]
     ed0:	f004 ffde 	bl	5e90 <flash_area_close>
    return rc;
}
     ed4:	4620      	mov	r0, r4
     ed6:	b002      	add	sp, #8
     ed8:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     eda:	4621      	mov	r1, r4
     edc:	2320      	movs	r3, #32
     ede:	4632      	mov	r2, r6
     ee0:	9801      	ldr	r0, [sp, #4]
     ee2:	f004 ffd6 	bl	5e92 <flash_area_read>
    if (rc != 0) {
     ee6:	4604      	mov	r4, r0
     ee8:	2800      	cmp	r0, #0
     eea:	d1ef      	bne.n	ecc <boot_read_image_header+0x60>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     eec:	2d00      	cmp	r5, #0
     eee:	d0ee      	beq.n	ece <boot_read_image_header+0x62>
     ef0:	6834      	ldr	r4, [r6, #0]
     ef2:	4b04      	ldr	r3, [pc, #16]	; (f04 <boot_read_image_header+0x98>)
     ef4:	1ae4      	subs	r4, r4, r3
     ef6:	bf18      	it	ne
     ef8:	f04f 34ff 	movne.w	r4, #4294967295
     efc:	e7e7      	b.n	ece <boot_read_image_header+0x62>
     efe:	bf00      	nop
     f00:	20000004 	.word	0x20000004
     f04:	96f3b83d 	.word	0x96f3b83d

00000f08 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f0c:	4607      	mov	r7, r0
     f0e:	460c      	mov	r4, r1
     f10:	b085      	sub	sp, #20
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f12:	4601      	mov	r1, r0
     f14:	2000      	movs	r0, #0
{
     f16:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f18:	f004 fcea 	bl	58f0 <boot_status_entries>
    if (max_entries < 0) {
     f1c:	1e05      	subs	r5, r0, #0
     f1e:	db51      	blt.n	fc4 <swap_read_status_bytes+0xbc>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     f20:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     f22:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     f24:	f004 fcf1 	bl	590a <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     f28:	fa5f f984 	uxtb.w	r9, r4
    erased_sections = 0;
     f2c:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     f30:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     f34:	f04f 34ff 	mov.w	r4, #4294967295
     f38:	1e6b      	subs	r3, r5, #1
     f3a:	fb09 0803 	mla	r8, r9, r3, r0
    for (i = max_entries; i > 0; i--) {
     f3e:	b99d      	cbnz	r5, f68 <swap_read_status_bytes+0x60>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     f40:	f1ba 0f01 	cmp.w	sl, #1
     f44:	dd03      	ble.n	f4e <swap_read_status_bytes+0x46>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     f46:	2145      	movs	r1, #69	; 0x45
     f48:	4820      	ldr	r0, [pc, #128]	; (fcc <swap_read_status_bytes+0xc4>)
     f4a:	f004 ff94 	bl	5e76 <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     f4e:	1c63      	adds	r3, r4, #1
     f50:	d006      	beq.n	f60 <swap_read_status_bytes+0x58>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     f52:	2cff      	cmp	r4, #255	; 0xff
     f54:	dc2a      	bgt.n	fac <swap_read_status_bytes+0xa4>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f56:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f5a:	3401      	adds	r4, #1
     f5c:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f5e:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     f60:	4628      	mov	r0, r5
     f62:	b005      	add	sp, #20
     f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     f68:	1e6b      	subs	r3, r5, #1
     f6a:	9300      	str	r3, [sp, #0]
     f6c:	4641      	mov	r1, r8
     f6e:	2301      	movs	r3, #1
     f70:	4638      	mov	r0, r7
     f72:	f10d 020f 	add.w	r2, sp, #15
     f76:	f004 ff8c 	bl	5e92 <flash_area_read>
        if (rc < 0) {
     f7a:	1e03      	subs	r3, r0, #0
     f7c:	9301      	str	r3, [sp, #4]
     f7e:	db23      	blt.n	fc8 <swap_read_status_bytes+0xc0>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     f80:	2201      	movs	r2, #1
     f82:	4638      	mov	r0, r7
     f84:	f10d 010f 	add.w	r1, sp, #15
     f88:	f005 fe26 	bl	6bd8 <bootutil_buffer_is_erased>
     f8c:	9b01      	ldr	r3, [sp, #4]
     f8e:	b140      	cbz	r0, fa2 <swap_read_status_bytes+0x9a>
            if (rc != last_rc) {
     f90:	455b      	cmp	r3, fp
     f92:	d001      	beq.n	f98 <swap_read_status_bytes+0x90>
                erased_sections++;
     f94:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     f98:	469b      	mov	fp, r3
     f9a:	9d00      	ldr	r5, [sp, #0]
     f9c:	eba8 0809 	sub.w	r8, r8, r9
     fa0:	e7cd      	b.n	f3e <swap_read_status_bytes+0x36>
     fa2:	f1b4 3fff 	cmp.w	r4, #4294967295
     fa6:	bf08      	it	eq
     fa8:	462c      	moveq	r4, r5
     faa:	e7f5      	b.n	f98 <swap_read_status_bytes+0x90>
        bs->op = BOOT_STATUS_OP_SWAP;
     fac:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fae:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        bs->op = BOOT_STATUS_OP_SWAP;
     fb2:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fb4:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fb6:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fba:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fbc:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fbe:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fc0:	7134      	strb	r4, [r6, #4]
     fc2:	e7cd      	b.n	f60 <swap_read_status_bytes+0x58>
        return BOOT_EBADARGS;
     fc4:	2507      	movs	r5, #7
     fc6:	e7cb      	b.n	f60 <swap_read_status_bytes+0x58>
            return BOOT_EFLASH;
     fc8:	2501      	movs	r5, #1
     fca:	e7c9      	b.n	f60 <swap_read_status_bytes+0x58>
     fcc:	00008ff1 	.word	0x00008ff1

00000fd0 <boot_slots_compatible>:
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
     fd0:	b538      	push	{r3, r4, r5, lr}
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
     fd2:	6a81      	ldr	r1, [r0, #40]	; 0x28
     fd4:	6d42      	ldr	r2, [r0, #84]	; 0x54
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     fd6:	4291      	cmp	r1, r2
     fd8:	d008      	beq.n	fec <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     fda:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     fdc:	428b      	cmp	r3, r1
     fde:	d005      	beq.n	fec <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     fe0:	2157      	movs	r1, #87	; 0x57
     fe2:	4814      	ldr	r0, [pc, #80]	; (1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>)
        return 0;
    }

    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     fe4:	f004 ff47 	bl	5e76 <z_log_minimal_printk>
        return 0;
     fe8:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     fea:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     fec:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
     ff0:	d91c      	bls.n	102c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2c>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     ff2:	2157      	movs	r1, #87	; 0x57
     ff4:	4810      	ldr	r0, [pc, #64]	; (1038 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x38>)
     ff6:	e7f5      	b.n	fe4 <boot_slots_compatible+0x14>
     ff8:	6a44      	ldr	r4, [r0, #36]	; 0x24
     ffa:	6d05      	ldr	r5, [r0, #80]	; 0x50
     ffc:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    1000:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    1004:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
    1006:	686d      	ldr	r5, [r5, #4]
    1008:	42ac      	cmp	r4, r5
    100a:	d002      	beq.n	1012 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    100c:	2157      	movs	r1, #87	; 0x57
    100e:	480b      	ldr	r0, [pc, #44]	; (103c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3c>)
    1010:	e7e8      	b.n	fe4 <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
    1012:	3301      	adds	r3, #1
    1014:	429a      	cmp	r2, r3
    1016:	d1ef      	bne.n	ff8 <boot_slots_compatible+0x28>
    if (num_sectors_pri > num_sectors_sec) {
    1018:	4291      	cmp	r1, r2
    101a:	d905      	bls.n	1028 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x28>
    101c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    101e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    1022:	685b      	ldr	r3, [r3, #4]
    1024:	42a3      	cmp	r3, r4
    1026:	d1f1      	bne.n	100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>
    return 1;
    1028:	2001      	movs	r0, #1
    102a:	e7de      	b.n	fea <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
    102c:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    102e:	461c      	mov	r4, r3
    1030:	e7f0      	b.n	1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>
    1032:	bf00      	nop
    1034:	00009014 	.word	0x00009014
    1038:	0000904c 	.word	0x0000904c
    103c:	0000907b 	.word	0x0000907b

00001040 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
    1040:	b500      	push	{lr}
    1042:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1044:	2002      	movs	r0, #2
    1046:	a904      	add	r1, sp, #16
    1048:	f005 fe38 	bl	6cbc <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    104c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1050:	2a01      	cmp	r2, #1
    1052:	d041      	beq.n	10d8 <swap_status_source+0x98>
    1054:	4b25      	ldr	r3, [pc, #148]	; (10ec <swap_status_source+0xac>)
    1056:	4926      	ldr	r1, [pc, #152]	; (10f0 <swap_status_source+0xb0>)
    1058:	2a03      	cmp	r2, #3
    105a:	bf08      	it	eq
    105c:	460b      	moveq	r3, r1
    105e:	f89d 2013 	ldrb.w	r2, [sp, #19]
    1062:	2149      	movs	r1, #73	; 0x49
    1064:	9202      	str	r2, [sp, #8]
    1066:	f89d 2012 	ldrb.w	r2, [sp, #18]
    106a:	4822      	ldr	r0, [pc, #136]	; (10f4 <swap_status_source+0xb4>)
    106c:	9201      	str	r2, [sp, #4]
    106e:	f89d 2011 	ldrb.w	r2, [sp, #17]
    1072:	9200      	str	r2, [sp, #0]
    1074:	4a20      	ldr	r2, [pc, #128]	; (10f8 <swap_status_source+0xb8>)
    1076:	f004 fefe 	bl	5e76 <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    107a:	2008      	movs	r0, #8
    107c:	a906      	add	r1, sp, #24
    107e:	f005 fe1d 	bl	6cbc <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    1082:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1086:	2a01      	cmp	r2, #1
    1088:	d028      	beq.n	10dc <swap_status_source+0x9c>
    108a:	4b18      	ldr	r3, [pc, #96]	; (10ec <swap_status_source+0xac>)
    108c:	4918      	ldr	r1, [pc, #96]	; (10f0 <swap_status_source+0xb0>)
    108e:	2a03      	cmp	r2, #3
    1090:	bf08      	it	eq
    1092:	460b      	moveq	r3, r1
    1094:	f89d 201b 	ldrb.w	r2, [sp, #27]
    1098:	2149      	movs	r1, #73	; 0x49
    109a:	9202      	str	r2, [sp, #8]
    109c:	f89d 201a 	ldrb.w	r2, [sp, #26]
    10a0:	4814      	ldr	r0, [pc, #80]	; (10f4 <swap_status_source+0xb4>)
    10a2:	9201      	str	r2, [sp, #4]
    10a4:	f89d 2019 	ldrb.w	r2, [sp, #25]
    10a8:	9200      	str	r2, [sp, #0]
    10aa:	4a14      	ldr	r2, [pc, #80]	; (10fc <swap_status_source+0xbc>)
    10ac:	f004 fee3 	bl	5e76 <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    10b0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    10b4:	2b01      	cmp	r3, #1
    10b6:	d113      	bne.n	10e0 <swap_status_source+0xa0>
    10b8:	f89d 3012 	ldrb.w	r3, [sp, #18]
    10bc:	2b03      	cmp	r3, #3
    10be:	d10f      	bne.n	10e0 <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    10c0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    10c4:	2b01      	cmp	r3, #1
    10c6:	d00b      	beq.n	10e0 <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
    10c8:	480d      	ldr	r0, [pc, #52]	; (1100 <swap_status_source+0xc0>)
    10ca:	2149      	movs	r1, #73	; 0x49
    10cc:	f004 fed3 	bl	5e76 <z_log_minimal_printk>
        return source;
    10d0:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    10d2:	b009      	add	sp, #36	; 0x24
    10d4:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    10d8:	4b0a      	ldr	r3, [pc, #40]	; (1104 <swap_status_source+0xc4>)
    10da:	e7c0      	b.n	105e <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    10dc:	4b09      	ldr	r3, [pc, #36]	; (1104 <swap_status_source+0xc4>)
    10de:	e7d9      	b.n	1094 <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
    10e0:	4809      	ldr	r0, [pc, #36]	; (1108 <swap_status_source+0xc8>)
    10e2:	2149      	movs	r1, #73	; 0x49
    10e4:	f004 fec7 	bl	5e76 <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
    10e8:	2000      	movs	r0, #0
    10ea:	e7f2      	b.n	10d2 <swap_status_source+0x92>
    10ec:	000090a7 	.word	0x000090a7
    10f0:	000090b0 	.word	0x000090b0
    10f4:	000090c4 	.word	0x000090c4
    10f8:	000090b6 	.word	0x000090b6
    10fc:	00009105 	.word	0x00009105
    1100:	00009115 	.word	0x00009115
    1104:	000090ab 	.word	0x000090ab
    1108:	00009134 	.word	0x00009134

0000110c <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
    110c:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    110e:	684b      	ldr	r3, [r1, #4]
{
    1110:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1112:	4a1e      	ldr	r2, [pc, #120]	; (118c <fixup_revert+0x80>)
    1114:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    1118:	4293      	cmp	r3, r2
{
    111a:	4606      	mov	r6, r0
    111c:	460d      	mov	r5, r1
    111e:	b086      	sub	sp, #24
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1120:	d12f      	bne.n	1182 <fixup_revert+0x76>
        bs->op != BOOT_STATUS_OP_MOVE ||
    1122:	680b      	ldr	r3, [r1, #0]
    1124:	2b01      	cmp	r3, #1
    1126:	d12c      	bne.n	1182 <fixup_revert+0x76>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
    1128:	4620      	mov	r0, r4
    112a:	a904      	add	r1, sp, #16
    112c:	f002 fef0 	bl	3f10 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1130:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1134:	2a01      	cmp	r2, #1
    1136:	d026      	beq.n	1186 <fixup_revert+0x7a>
    1138:	4b15      	ldr	r3, [pc, #84]	; (1190 <fixup_revert+0x84>)
    113a:	4916      	ldr	r1, [pc, #88]	; (1194 <fixup_revert+0x88>)
    113c:	2a03      	cmp	r2, #3
    113e:	bf08      	it	eq
    1140:	460b      	moveq	r3, r1
    1142:	f89d 2013 	ldrb.w	r2, [sp, #19]
    1146:	2149      	movs	r1, #73	; 0x49
    1148:	9202      	str	r2, [sp, #8]
    114a:	f89d 2012 	ldrb.w	r2, [sp, #18]
    114e:	4812      	ldr	r0, [pc, #72]	; (1198 <fixup_revert+0x8c>)
    1150:	9201      	str	r2, [sp, #4]
    1152:	f89d 2011 	ldrb.w	r2, [sp, #17]
    1156:	9200      	str	r2, [sp, #0]
    1158:	4a10      	ldr	r2, [pc, #64]	; (119c <fixup_revert+0x90>)
    115a:	f004 fe8c 	bl	5e76 <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    115e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1162:	2b03      	cmp	r3, #3
    1164:	d10d      	bne.n	1182 <fixup_revert+0x76>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1166:	4621      	mov	r1, r4
    1168:	4630      	mov	r0, r6
    116a:	f004 fcb3 	bl	5ad4 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    116e:	4620      	mov	r0, r4
    1170:	f005 fd97 	bl	6ca2 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    1174:	4620      	mov	r0, r4
    1176:	68a9      	ldr	r1, [r5, #8]
    1178:	f004 fbda 	bl	5930 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    117c:	4620      	mov	r0, r4
    117e:	f002 fea7 	bl	3ed0 <boot_write_magic>
        assert(rc == 0);
    }
}
    1182:	b006      	add	sp, #24
    1184:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1186:	4b06      	ldr	r3, [pc, #24]	; (11a0 <fixup_revert+0x94>)
    1188:	e7db      	b.n	1142 <fixup_revert+0x36>
    118a:	bf00      	nop
    118c:	04000100 	.word	0x04000100
    1190:	000090a7 	.word	0x000090a7
    1194:	000090b0 	.word	0x000090b0
    1198:	000090c4 	.word	0x000090c4
    119c:	00009105 	.word	0x00009105
    11a0:	000090ab 	.word	0x000090ab

000011a4 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    11a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11a8:	4605      	mov	r5, r0
    11aa:	460c      	mov	r4, r1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    BOOT_LOG_INF("Starting swap using move algorithm.");
    11ac:	487d      	ldr	r0, [pc, #500]	; (13a4 <swap_run+0x200>)
    11ae:	2149      	movs	r1, #73	; 0x49
{
    11b0:	b089      	sub	sp, #36	; 0x24
    11b2:	4617      	mov	r7, r2
    BOOT_LOG_INF("Starting swap using move algorithm.");
    11b4:	f004 fe5f 	bl	5e76 <z_log_minimal_printk>
    11b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    11ba:	2201      	movs	r2, #1
    11bc:	685e      	ldr	r6, [r3, #4]

    sz = 0;
    11be:	2300      	movs	r3, #0
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    11c0:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    11c2:	42bb      	cmp	r3, r7
    11c4:	4611      	mov	r1, r2
    11c6:	f102 0201 	add.w	r2, r2, #1
    11ca:	d3f9      	bcc.n	11c0 <swap_run+0x1c>
    11cc:	4f76      	ldr	r7, [pc, #472]	; (13a8 <swap_run+0x204>)
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    11ce:	4620      	mov	r0, r4
    11d0:	6039      	str	r1, [r7, #0]
    11d2:	f004 fc3e 	bl	5a52 <boot_status_is_reset>
    11d6:	b308      	cbz	r0, 121c <swap_run+0x78>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    11d8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    11da:	f004 fb84 	bl	58e6 <boot_trailer_sz>
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    11de:	6aab      	ldr	r3, [r5, #40]	; 0x28
    11e0:	f103 38ff 	add.w	r8, r3, #4294967295
        sz = 0;
    11e4:	2300      	movs	r3, #0

        while (1) {
            sz += sector_sz;
    11e6:	4433      	add	r3, r6
            if  (sz >= trailer_sz) {
    11e8:	4283      	cmp	r3, r0
    11ea:	d202      	bcs.n	11f2 <swap_run+0x4e>
                break;
            }
            first_trailer_idx--;
    11ec:	f108 38ff 	add.w	r8, r8, #4294967295
            sz += sector_sz;
    11f0:	e7f9      	b.n	11e6 <swap_run+0x42>
        }

        if (g_last_idx >= first_trailer_idx) {
    11f2:	683b      	ldr	r3, [r7, #0]
    11f4:	4543      	cmp	r3, r8
    11f6:	d311      	bcc.n	121c <swap_run+0x78>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    11f8:	2157      	movs	r1, #87	; 0x57
    11fa:	486c      	ldr	r0, [pc, #432]	; (13ac <swap_run+0x208>)
    11fc:	f004 fe3b 	bl	5e76 <z_log_minimal_printk>
            BOOT_LOG_WRN("required %d bytes but only %d are available",
    1200:	683a      	ldr	r2, [r7, #0]
    1202:	fb08 f306 	mul.w	r3, r8, r6
    1206:	2157      	movs	r1, #87	; 0x57
    1208:	fb02 6206 	mla	r2, r2, r6, r6
    120c:	4868      	ldr	r0, [pc, #416]	; (13b0 <swap_run+0x20c>)
    120e:	f004 fe32 	bl	5e76 <z_log_minimal_printk>
                         (g_last_idx + 1) * sector_sz ,
                         first_trailer_idx * sector_sz);
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    1212:	2301      	movs	r3, #1
    1214:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    1216:	b009      	add	sp, #36	; 0x24
    1218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    121c:	a906      	add	r1, sp, #24
    121e:	2002      	movs	r0, #2
    1220:	f000 fdce 	bl	1dc0 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    1224:	a907      	add	r1, sp, #28
    1226:	2008      	movs	r0, #8
    1228:	f000 fdca 	bl	1dc0 <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    122c:	4621      	mov	r1, r4
    122e:	4628      	mov	r0, r5
    1230:	9a07      	ldr	r2, [sp, #28]
    1232:	f7ff ff6b 	bl	110c <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    1236:	7963      	ldrb	r3, [r4, #5]
    1238:	2b01      	cmp	r3, #1
    123a:	d10b      	bne.n	1254 <swap_run+0xb0>
        idx = g_last_idx;
    123c:	f8d7 8000 	ldr.w	r8, [r7]
    BOOT_STATUS_ASSERT(rc == 0);
    1240:	f8df b170 	ldr.w	fp, [pc, #368]	; 13b4 <swap_run+0x210>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1244:	683b      	ldr	r3, [r7, #0]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1246:	f8dd 9018 	ldr.w	r9, [sp, #24]
        while (idx > 0) {
    124a:	f1b8 0f00 	cmp.w	r8, #0
    124e:	d111      	bne.n	1274 <swap_run+0xd0>
        bs->idx = BOOT_STATUS_IDX_0;
    1250:	2301      	movs	r3, #1
    1252:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    1254:	2302      	movs	r3, #2
    idx = 1;
    1256:	f04f 0801 	mov.w	r8, #1
    bs->op = BOOT_STATUS_OP_SWAP;
    125a:	7163      	strb	r3, [r4, #5]
    while (idx <= g_last_idx) {
    125c:	683b      	ldr	r3, [r7, #0]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    125e:	f8dd a018 	ldr.w	sl, [sp, #24]
    while (idx <= g_last_idx) {
    1262:	4598      	cmp	r8, r3
    1264:	d949      	bls.n	12fa <swap_run+0x156>
    flash_area_close(fap_pri);
    1266:	4650      	mov	r0, sl
    1268:	f004 fe12 	bl	5e90 <flash_area_close>
    flash_area_close(fap_sec);
    126c:	9807      	ldr	r0, [sp, #28]
    126e:	f004 fe0f 	bl	5e90 <flash_area_close>
    1272:	e7d0      	b.n	1216 <swap_run+0x72>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1274:	6822      	ldr	r2, [r4, #0]
    1276:	3301      	adds	r3, #1
    1278:	1a9b      	subs	r3, r3, r2
    127a:	4598      	cmp	r8, r3
    127c:	d83a      	bhi.n	12f4 <swap_run+0x150>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    127e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
    1280:	2a01      	cmp	r2, #1
	return fs->fs_off;
    1282:	6819      	ldr	r1, [r3, #0]
    1284:	f853 0038 	ldr.w	r0, [r3, r8, lsl #3]
    1288:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    128c:	f853 3c08 	ldr.w	r3, [r3, #-8]
    1290:	eba0 0a01 	sub.w	sl, r0, r1
    1294:	eba3 0301 	sub.w	r3, r3, r1
    1298:	9304      	str	r3, [sp, #16]
    129a:	d111      	bne.n	12c0 <swap_run+0x11c>
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    129c:	9b07      	ldr	r3, [sp, #28]
    129e:	9303      	str	r3, [sp, #12]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    12a0:	68e3      	ldr	r3, [r4, #12]
    12a2:	2b02      	cmp	r3, #2
    12a4:	d008      	beq.n	12b8 <swap_run+0x114>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    12a6:	4649      	mov	r1, r9
    12a8:	4628      	mov	r0, r5
    12aa:	f004 fc13 	bl	5ad4 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    12ae:	4622      	mov	r2, r4
    12b0:	4649      	mov	r1, r9
    12b2:	4628      	mov	r0, r5
    12b4:	f004 fc44 	bl	5b40 <swap_status_init>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    12b8:	4628      	mov	r0, r5
    12ba:	9903      	ldr	r1, [sp, #12]
    12bc:	f004 fc0a 	bl	5ad4 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    12c0:	4632      	mov	r2, r6
    12c2:	4651      	mov	r1, sl
    12c4:	4648      	mov	r0, r9
    12c6:	f004 fc03 	bl	5ad0 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    12ca:	9b04      	ldr	r3, [sp, #16]
    12cc:	464a      	mov	r2, r9
    12ce:	4649      	mov	r1, r9
    12d0:	4628      	mov	r0, r5
    12d2:	e9cd a600 	strd	sl, r6, [sp]
    12d6:	f7ff fc47 	bl	b68 <boot_copy_region>
    rc = boot_write_status(state, bs);
    12da:	4621      	mov	r1, r4
    12dc:	4628      	mov	r0, r5
    12de:	f004 fbc5 	bl	5a6c <boot_write_status>
    bs->idx++;
    12e2:	6823      	ldr	r3, [r4, #0]
    12e4:	3301      	adds	r3, #1
    12e6:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    12e8:	b120      	cbz	r0, 12f4 <swap_run+0x150>
    12ea:	f8db 3000 	ldr.w	r3, [fp]
    12ee:	3301      	adds	r3, #1
    12f0:	f8cb 3000 	str.w	r3, [fp]
            idx--;
    12f4:	f108 38ff 	add.w	r8, r8, #4294967295
    12f8:	e7a4      	b.n	1244 <swap_run+0xa0>
        if (idx >= bs->idx) {
    12fa:	6823      	ldr	r3, [r4, #0]
    12fc:	4598      	cmp	r8, r3
    12fe:	d34e      	bcc.n	139e <swap_run+0x1fa>
    1300:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1302:	ea4f 03c8 	mov.w	r3, r8, lsl #3
    1306:	f852 1038 	ldr.w	r1, [r2, r8, lsl #3]
    130a:	3b08      	subs	r3, #8
    130c:	9104      	str	r1, [sp, #16]
    130e:	6811      	ldr	r1, [r2, #0]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1310:	f8dd b01c 	ldr.w	fp, [sp, #28]
    1314:	9103      	str	r1, [sp, #12]
    1316:	58d1      	ldr	r1, [r2, r3]
    1318:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    131a:	58d0      	ldr	r0, [r2, r3]
    131c:	6813      	ldr	r3, [r2, #0]
    131e:	eba0 0903 	sub.w	r9, r0, r3
    if (bs->state == BOOT_STATUS_STATE_0) {
    1322:	7923      	ldrb	r3, [r4, #4]
    1324:	2b01      	cmp	r3, #1
    1326:	d138      	bne.n	139a <swap_run+0x1f6>
    1328:	9b03      	ldr	r3, [sp, #12]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    132a:	4632      	mov	r2, r6
    132c:	1ac9      	subs	r1, r1, r3
    132e:	4650      	mov	r0, sl
    1330:	9105      	str	r1, [sp, #20]
    1332:	f004 fbcd 	bl	5ad0 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    1336:	9905      	ldr	r1, [sp, #20]
    1338:	464b      	mov	r3, r9
    133a:	4652      	mov	r2, sl
    133c:	9100      	str	r1, [sp, #0]
    133e:	4628      	mov	r0, r5
    1340:	4659      	mov	r1, fp
    1342:	9601      	str	r6, [sp, #4]
    1344:	f7ff fc10 	bl	b68 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1348:	4621      	mov	r1, r4
    134a:	4628      	mov	r0, r5
    134c:	f004 fb8e 	bl	5a6c <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1350:	2302      	movs	r3, #2
    1352:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1354:	b118      	cbz	r0, 135e <swap_run+0x1ba>
    1356:	4a17      	ldr	r2, [pc, #92]	; (13b4 <swap_run+0x210>)
    1358:	6813      	ldr	r3, [r2, #0]
    135a:	3301      	adds	r3, #1
    135c:	6013      	str	r3, [r2, #0]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    135e:	4632      	mov	r2, r6
    1360:	4649      	mov	r1, r9
    1362:	4658      	mov	r0, fp
    1364:	f004 fbb4 	bl	5ad0 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1368:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    136c:	4651      	mov	r1, sl
    136e:	1a9b      	subs	r3, r3, r2
    1370:	4628      	mov	r0, r5
    1372:	465a      	mov	r2, fp
    1374:	e9cd 9600 	strd	r9, r6, [sp]
    1378:	f7ff fbf6 	bl	b68 <boot_copy_region>
        rc = boot_write_status(state, bs);
    137c:	4621      	mov	r1, r4
    137e:	4628      	mov	r0, r5
    1380:	f004 fb74 	bl	5a6c <boot_write_status>
        bs->idx++;
    1384:	6823      	ldr	r3, [r4, #0]
    1386:	3301      	adds	r3, #1
    1388:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    138a:	2301      	movs	r3, #1
    138c:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    138e:	b130      	cbz	r0, 139e <swap_run+0x1fa>
    1390:	4a08      	ldr	r2, [pc, #32]	; (13b4 <swap_run+0x210>)
    1392:	6813      	ldr	r3, [r2, #0]
    1394:	3301      	adds	r3, #1
    1396:	6013      	str	r3, [r2, #0]
    1398:	e001      	b.n	139e <swap_run+0x1fa>
    if (bs->state == BOOT_STATUS_STATE_1) {
    139a:	2b02      	cmp	r3, #2
    139c:	d0df      	beq.n	135e <swap_run+0x1ba>
        idx++;
    139e:	f108 0801 	add.w	r8, r8, #1
    13a2:	e75b      	b.n	125c <swap_run+0xb8>
    13a4:	0000914b 	.word	0x0000914b
    13a8:	20000004 	.word	0x20000004
    13ac:	00009174 	.word	0x00009174
    13b0:	000091a3 	.word	0x000091a3
    13b4:	2000166c 	.word	0x2000166c

000013b8 <cleanup_arm_nvic>:
    13b8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    13bc:	b672      	cpsid	i
    13be:	2300      	movs	r3, #0
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    13c0:	f04f 30ff 	mov.w	r0, #4294967295
    13c4:	4a09      	ldr	r2, [pc, #36]	; (13ec <cleanup_arm_nvic+0x34>)
    13c6:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    13ca:	3301      	adds	r3, #1
    13cc:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    13ce:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    13d2:	d1f8      	bne.n	13c6 <cleanup_arm_nvic+0xe>
    13d4:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    13d6:	f04f 30ff 	mov.w	r0, #4294967295
    13da:	4a04      	ldr	r2, [pc, #16]	; (13ec <cleanup_arm_nvic+0x34>)
    13dc:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    13e0:	3301      	adds	r3, #1
    13e2:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    13e4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    13e8:	d1f8      	bne.n	13dc <cleanup_arm_nvic+0x24>
	}
}
    13ea:	4770      	bx	lr
    13ec:	e000e100 	.word	0xe000e100

000013f0 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    13f0:	b538      	push	{r3, r4, r5, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13f2:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    13f4:	f04f 34ff 	mov.w	r4, #4294967295
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    13f8:	2500      	movs	r5, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13fa:	4b1a      	ldr	r3, [pc, #104]	; (1464 <nrf_cleanup_peripheral+0x74>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    13fc:	4629      	mov	r1, r5
    13fe:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    1400:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1404:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    140c:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    140e:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1412:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1416:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    141a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    141e:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    1420:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1424:	4810      	ldr	r0, [pc, #64]	; (1468 <nrf_cleanup_peripheral+0x78>)
    1426:	f005 f8a0 	bl	656a <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    142a:	2280      	movs	r2, #128	; 0x80
    142c:	4629      	mov	r1, r5
    142e:	480f      	ldr	r0, [pc, #60]	; (146c <nrf_cleanup_peripheral+0x7c>)
    1430:	f005 f89b 	bl	656a <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1434:	4b0e      	ldr	r3, [pc, #56]	; (1470 <nrf_cleanup_peripheral+0x80>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    1436:	2280      	movs	r2, #128	; 0x80
    1438:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    143c:	4629      	mov	r1, r5
    p_reg->INTENCLR = mask;
    143e:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1442:	480c      	ldr	r0, [pc, #48]	; (1474 <nrf_cleanup_peripheral+0x84>)
    1444:	f005 f891 	bl	656a <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    1448:	2280      	movs	r2, #128	; 0x80
    144a:	4629      	mov	r1, r5
    144c:	480a      	ldr	r0, [pc, #40]	; (1478 <nrf_cleanup_peripheral+0x88>)
    144e:	f005 f88c 	bl	656a <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    1452:	4b0a      	ldr	r3, [pc, #40]	; (147c <nrf_cleanup_peripheral+0x8c>)
    1454:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1458:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    145c:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    1460:	bd38      	pop	{r3, r4, r5, pc}
    1462:	bf00      	nop
    1464:	50014000 	.word	0x50014000
    1468:	50008080 	.word	0x50008080
    146c:	50008180 	.word	0x50008180
    1470:	50009000 	.word	0x50009000
    1474:	50009080 	.word	0x50009080
    1478:	50009180 	.word	0x50009180
    147c:	50017000 	.word	0x50017000

00001480 <nrf_cleanup_ns_ram>:
#if defined(USE_PARTITION_MANAGER) \
	&& defined(CONFIG_ARM_TRUSTZONE_M) \
	&& defined(PM_SRAM_NONSECURE_NAME)
void nrf_cleanup_ns_ram(void)
{
	memset((void *) PM_SRAM_NONSECURE_ADDRESS, 0, PM_SRAM_NONSECURE_SIZE);
    1480:	f44f 3260 	mov.w	r2, #229376	; 0x38000
    1484:	2100      	movs	r1, #0
    1486:	4801      	ldr	r0, [pc, #4]	; (148c <nrf_cleanup_ns_ram+0xc>)
    1488:	f005 b86f 	b.w	656a <memset>
    148c:	20008000 	.word	0x20008000

00001490 <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    1490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1494:	9d07      	ldr	r5, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    1496:	b915      	cbnz	r5, 149e <base64_encode+0xe>
		*olen = 0;
    1498:	6015      	str	r5, [r2, #0]
		return 0;
    149a:	2000      	movs	r0, #0
    149c:	e012      	b.n	14c4 <base64_encode+0x34>
	}

	n = slen / 3 + (slen % 3 != 0);
    149e:	2403      	movs	r4, #3
    14a0:	fbb5 f4f4 	udiv	r4, r5, r4
    14a4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    14a8:	42bd      	cmp	r5, r7
    14aa:	bf18      	it	ne
    14ac:	3401      	addne	r4, #1

	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    14ae:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    14b2:	d209      	bcs.n	14c8 <base64_encode+0x38>
		*olen = BASE64_SIZE_T_MAX;
		return -ENOMEM;
	}

	n *= 4;
    14b4:	00a4      	lsls	r4, r4, #2

	if ((dlen < n + 1) || (!dst)) {
    14b6:	3401      	adds	r4, #1
    14b8:	428c      	cmp	r4, r1
    14ba:	d800      	bhi.n	14be <base64_encode+0x2e>
    14bc:	b938      	cbnz	r0, 14ce <base64_encode+0x3e>
		return -ENOMEM;
    14be:	f06f 000b 	mvn.w	r0, #11
		*olen = n + 1;
    14c2:	6014      	str	r4, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    14c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    14c8:	f04f 34ff 	mov.w	r4, #4294967295
    14cc:	e7f7      	b.n	14be <base64_encode+0x2e>
	for (i = 0, p = dst; i < n; i += 3) {
    14ce:	4604      	mov	r4, r0
    14d0:	2100      	movs	r1, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14d2:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 1588 <base64_encode+0xf8>
	for (i = 0, p = dst; i < n; i += 3) {
    14d6:	42b9      	cmp	r1, r7
    14d8:	f103 0c03 	add.w	ip, r3, #3
    14dc:	f104 0604 	add.w	r6, r4, #4
    14e0:	d32b      	bcc.n	153a <base64_encode+0xaa>
	if (i < slen) {
    14e2:	42a9      	cmp	r1, r5
    14e4:	4627      	mov	r7, r4
    14e6:	d223      	bcs.n	1530 <base64_encode+0xa0>
		C2 = ((i + 1) < slen) ? *src++ : 0;
    14e8:	f101 0c01 	add.w	ip, r1, #1
    14ec:	45ac      	cmp	ip, r5
		C1 = *src++;
    14ee:	781f      	ldrb	r7, [r3, #0]
		C2 = ((i + 1) < slen) ? *src++ : 0;
    14f0:	bf28      	it	cs
    14f2:	2300      	movcs	r3, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14f4:	4924      	ldr	r1, [pc, #144]	; (1588 <base64_encode+0xf8>)
    14f6:	ea4f 0ea7 	mov.w	lr, r7, asr #2
		C2 = ((i + 1) < slen) ? *src++ : 0;
    14fa:	bf38      	it	cc
    14fc:	785b      	ldrbcc	r3, [r3, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14fe:	f811 e00e 	ldrb.w	lr, [r1, lr]
		if ((i + 1) < slen) {
    1502:	45ac      	cmp	ip, r5
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1504:	f884 e000 	strb.w	lr, [r4]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1508:	eb01 1e13 	add.w	lr, r1, r3, lsr #4
			*p++ = '=';
    150c:	bf2e      	itee	cs
    150e:	233d      	movcs	r3, #61	; 0x3d
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    1510:	009b      	lslcc	r3, r3, #2
    1512:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1516:	ea4f 1707 	mov.w	r7, r7, lsl #4
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    151a:	bf38      	it	cc
    151c:	5ccb      	ldrbcc	r3, [r1, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    151e:	f007 0730 	and.w	r7, r7, #48	; 0x30
    1522:	f81e 7007 	ldrb.w	r7, [lr, r7]
    1526:	70a3      	strb	r3, [r4, #2]
		*p++ = '=';
    1528:	233d      	movs	r3, #61	; 0x3d
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    152a:	7067      	strb	r7, [r4, #1]
		*p++ = '=';
    152c:	4637      	mov	r7, r6
    152e:	70e3      	strb	r3, [r4, #3]
	*p = 0U;
    1530:	2300      	movs	r3, #0
	*olen = p - dst;
    1532:	1a38      	subs	r0, r7, r0
    1534:	6010      	str	r0, [r2, #0]
	*p = 0U;
    1536:	703b      	strb	r3, [r7, #0]
	return 0;
    1538:	e7af      	b.n	149a <base64_encode+0xa>
		C1 = *src++;
    153a:	f81c 4c03 	ldrb.w	r4, [ip, #-3]
		C2 = *src++;
    153e:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1542:	ea4f 09a4 	mov.w	r9, r4, asr #2
    1546:	f81e 9009 	ldrb.w	r9, [lr, r9]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    154a:	0124      	lsls	r4, r4, #4
		C3 = *src++;
    154c:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1550:	f004 0430 	and.w	r4, r4, #48	; 0x30
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1554:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1558:	eb0e 1913 	add.w	r9, lr, r3, lsr #4
    155c:	f819 4004 	ldrb.w	r4, [r9, r4]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1560:	009b      	lsls	r3, r3, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1562:	f806 4c03 	strb.w	r4, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1566:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    156a:	eb0e 1498 	add.w	r4, lr, r8, lsr #6
    156e:	5ce3      	ldrb	r3, [r4, r3]
		*p++ = base64_enc_map[C3 & 0x3F];
    1570:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1574:	f806 3c02 	strb.w	r3, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    1578:	f81e 3008 	ldrb.w	r3, [lr, r8]
	for (i = 0, p = dst; i < n; i += 3) {
    157c:	4634      	mov	r4, r6
		*p++ = base64_enc_map[C3 & 0x3F];
    157e:	f806 3c01 	strb.w	r3, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    1582:	3103      	adds	r1, #3
    1584:	4663      	mov	r3, ip
    1586:	e7a6      	b.n	14d6 <base64_encode+0x46>
    1588:	00009362 	.word	0x00009362

0000158c <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    158c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size_t i, n;
	uint32_t j, x;
	uint8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    1590:	2700      	movs	r7, #0
    1592:	463c      	mov	r4, r7
    1594:	463d      	mov	r5, r7
{
    1596:	f8dd e01c 	ldr.w	lr, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    159a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 16c4 <base64_decode+0x138>
	for (i = n = j = 0U; i < slen; i++) {
    159e:	4575      	cmp	r5, lr
    15a0:	d31f      	bcc.n	15e2 <base64_decode+0x56>
		}

		n++;
	}

	if (n == 0) {
    15a2:	bbe4      	cbnz	r4, 161e <base64_decode+0x92>
		*olen = 0;
		return 0;
    15a4:	2000      	movs	r0, #0
		*olen = 0;
    15a6:	6014      	str	r4, [r2, #0]
	}

	*olen = p - dst;

	return 0;
}
    15a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			++i;
    15ac:	3601      	adds	r6, #1
		while (i < slen && src[i] == ' ') {
    15ae:	4576      	cmp	r6, lr
    15b0:	d033      	beq.n	161a <base64_decode+0x8e>
    15b2:	f813 c006 	ldrb.w	ip, [r3, r6]
    15b6:	f1bc 0f20 	cmp.w	ip, #32
    15ba:	d0f7      	beq.n	15ac <base64_decode+0x20>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    15bc:	ebae 0906 	sub.w	r9, lr, r6
    15c0:	f1b9 0f01 	cmp.w	r9, #1
    15c4:	eba6 0505 	sub.w	r5, r6, r5
    15c8:	d00d      	beq.n	15e6 <base64_decode+0x5a>
    15ca:	f1bc 0f0d 	cmp.w	ip, #13
    15ce:	d10a      	bne.n	15e6 <base64_decode+0x5a>
    15d0:	eb03 0906 	add.w	r9, r3, r6
    15d4:	f899 9001 	ldrb.w	r9, [r9, #1]
    15d8:	f1b9 0f0a 	cmp.w	r9, #10
    15dc:	d16e      	bne.n	16bc <base64_decode+0x130>
	for (i = n = j = 0U; i < slen; i++) {
    15de:	1c75      	adds	r5, r6, #1
    15e0:	e7dd      	b.n	159e <base64_decode+0x12>
    15e2:	462e      	mov	r6, r5
    15e4:	e7e3      	b.n	15ae <base64_decode+0x22>
		if (src[i] == '\n') {
    15e6:	f1bc 0f0a 	cmp.w	ip, #10
    15ea:	d0f8      	beq.n	15de <base64_decode+0x52>
		if (x != 0U) {
    15ec:	b92d      	cbnz	r5, 15fa <base64_decode+0x6e>
		if (src[i] == '=' && ++j > 2) {
    15ee:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
    15f2:	d105      	bne.n	1600 <base64_decode+0x74>
    15f4:	3701      	adds	r7, #1
    15f6:	2f02      	cmp	r7, #2
    15f8:	d90d      	bls.n	1616 <base64_decode+0x8a>
			return -EINVAL;
    15fa:	f06f 0015 	mvn.w	r0, #21
    15fe:	e7d3      	b.n	15a8 <base64_decode+0x1c>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    1600:	f01c 0f80 	tst.w	ip, #128	; 0x80
    1604:	d1f9      	bne.n	15fa <base64_decode+0x6e>
    1606:	f818 500c 	ldrb.w	r5, [r8, ip]
    160a:	2d7f      	cmp	r5, #127	; 0x7f
    160c:	d0f5      	beq.n	15fa <base64_decode+0x6e>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    160e:	2d3f      	cmp	r5, #63	; 0x3f
    1610:	d801      	bhi.n	1616 <base64_decode+0x8a>
    1612:	2f00      	cmp	r7, #0
    1614:	d1f1      	bne.n	15fa <base64_decode+0x6e>
		n++;
    1616:	3401      	adds	r4, #1
    1618:	e7e1      	b.n	15de <base64_decode+0x52>
    161a:	4635      	mov	r5, r6
    161c:	e7c1      	b.n	15a2 <base64_decode+0x16>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    161e:	f04f 0c06 	mov.w	ip, #6
    1622:	f004 0607 	and.w	r6, r4, #7
    1626:	08e4      	lsrs	r4, r4, #3
    1628:	fb0c f606 	mul.w	r6, ip, r6
    162c:	fb0c f404 	mul.w	r4, ip, r4
    1630:	3607      	adds	r6, #7
	n -= j;
    1632:	1be4      	subs	r4, r4, r7
    1634:	eb04 04d6 	add.w	r4, r4, r6, lsr #3
	if (dst == NULL || dlen < n) {
    1638:	b170      	cbz	r0, 1658 <base64_decode+0xcc>
    163a:	428c      	cmp	r4, r1
    163c:	d80c      	bhi.n	1658 <base64_decode+0xcc>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    163e:	2700      	movs	r7, #0
	if (dst == NULL || dlen < n) {
    1640:	4601      	mov	r1, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1642:	2603      	movs	r6, #3
    1644:	463c      	mov	r4, r7
		j -= (base64_dec_map[*src] == 64U);
    1646:	f8df e07c 	ldr.w	lr, [pc, #124]	; 16c4 <base64_decode+0x138>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    164a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 16c8 <base64_decode+0x13c>
    164e:	441d      	add	r5, r3
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1650:	429d      	cmp	r5, r3
    1652:	d105      	bne.n	1660 <base64_decode+0xd4>
	*olen = p - dst;
    1654:	1a0c      	subs	r4, r1, r0
	return 0;
    1656:	e7a5      	b.n	15a4 <base64_decode+0x18>
		return -ENOMEM;
    1658:	f06f 000b 	mvn.w	r0, #11
		*olen = n;
    165c:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    165e:	e7a3      	b.n	15a8 <base64_decode+0x1c>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    1660:	f813 9b01 	ldrb.w	r9, [r3], #1
    1664:	f1a9 0c0a 	sub.w	ip, r9, #10
    1668:	fa5f fc8c 	uxtb.w	ip, ip
    166c:	f1bc 0f16 	cmp.w	ip, #22
    1670:	d804      	bhi.n	167c <base64_decode+0xf0>
    1672:	fa48 fc0c 	asr.w	ip, r8, ip
    1676:	f01c 0f01 	tst.w	ip, #1
    167a:	d0e9      	beq.n	1650 <base64_decode+0xc4>
		j -= (base64_dec_map[*src] == 64U);
    167c:	f81e c009 	ldrb.w	ip, [lr, r9]
		if (++n == 4) {
    1680:	3401      	adds	r4, #1
		j -= (base64_dec_map[*src] == 64U);
    1682:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    1686:	bf08      	it	eq
    1688:	3e01      	subeq	r6, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    168a:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
		if (++n == 4) {
    168e:	2c04      	cmp	r4, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    1690:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
		if (++n == 4) {
    1694:	d1dc      	bne.n	1650 <base64_decode+0xc4>
			if (j > 0) {
    1696:	b17e      	cbz	r6, 16b8 <base64_decode+0x12c>
				*p++ = (unsigned char)(x >> 16);
    1698:	0c3c      	lsrs	r4, r7, #16
			if (j > 1) {
    169a:	2e01      	cmp	r6, #1
				*p++ = (unsigned char)(x >> 16);
    169c:	700c      	strb	r4, [r1, #0]
			if (j > 1) {
    169e:	d102      	bne.n	16a6 <base64_decode+0x11a>
				*p++ = (unsigned char)(x >> 16);
    16a0:	3101      	adds	r1, #1
			n = 0;
    16a2:	2400      	movs	r4, #0
    16a4:	e7d4      	b.n	1650 <base64_decode+0xc4>
			if (j > 2) {
    16a6:	2e02      	cmp	r6, #2
				*p++ = (unsigned char)(x >> 8);
    16a8:	ea4f 2417 	mov.w	r4, r7, lsr #8
    16ac:	704c      	strb	r4, [r1, #1]
				*p++ = (unsigned char)(x);
    16ae:	bf16      	itet	ne
    16b0:	708f      	strbne	r7, [r1, #2]
				*p++ = (unsigned char)(x >> 8);
    16b2:	3102      	addeq	r1, #2
				*p++ = (unsigned char)(x);
    16b4:	3103      	addne	r1, #3
    16b6:	e7f4      	b.n	16a2 <base64_decode+0x116>
			n = 0;
    16b8:	4634      	mov	r4, r6
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    16ba:	e7c9      	b.n	1650 <base64_decode+0xc4>
		if (x != 0U) {
    16bc:	2d00      	cmp	r5, #0
    16be:	d0a2      	beq.n	1606 <base64_decode+0x7a>
    16c0:	e79b      	b.n	15fa <base64_decode+0x6e>
    16c2:	bf00      	nop
    16c4:	000092e2 	.word	0x000092e2
    16c8:	ffbffff6 	.word	0xffbffff6

000016cc <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    16cc:	4b01      	ldr	r3, [pc, #4]	; (16d4 <char_out+0x8>)
    16ce:	681b      	ldr	r3, [r3, #0]
    16d0:	4718      	bx	r3
    16d2:	bf00      	nop
    16d4:	20000008 	.word	0x20000008

000016d8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    16d8:	b507      	push	{r0, r1, r2, lr}
    16da:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    16dc:	2100      	movs	r1, #0
    16de:	4602      	mov	r2, r0
    16e0:	9100      	str	r1, [sp, #0]
    16e2:	4803      	ldr	r0, [pc, #12]	; (16f0 <vprintk+0x18>)
    16e4:	f000 f914 	bl	1910 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    16e8:	b003      	add	sp, #12
    16ea:	f85d fb04 	ldr.w	pc, [sp], #4
    16ee:	bf00      	nop
    16f0:	000016cd 	.word	0x000016cd

000016f4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    16f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    16f8:	8b05      	ldrh	r5, [r0, #24]
{
    16fa:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    16fc:	0728      	lsls	r0, r5, #28
{
    16fe:	4690      	mov	r8, r2
	if (processing) {
    1700:	d411      	bmi.n	1726 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1702:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1704:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1708:	f040 80cd 	bne.w	18a6 <process_event+0x1b2>
			evt = process_recheck(mgr);
    170c:	4620      	mov	r0, r4
    170e:	f004 fac4 	bl	5c9a <process_recheck>
		}

		if (evt == EVT_NOP) {
    1712:	b178      	cbz	r0, 1734 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1714:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1716:	8b21      	ldrh	r1, [r4, #24]
    1718:	2804      	cmp	r0, #4
    171a:	d811      	bhi.n	1740 <process_event+0x4c>
    171c:	e8df f000 	tbb	[pc, r0]
    1720:	856d10c3 	.word	0x856d10c3
    1724:	95          	.byte	0x95
    1725:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    1726:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1728:	bf0c      	ite	eq
    172a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    172e:	f045 0520 	orrne.w	r5, r5, #32
    1732:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1734:	f388 8811 	msr	BASEPRI, r8
    1738:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    173c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1740:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1744:	45aa      	cmp	sl, r5
    1746:	f000 80a6 	beq.w	1896 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    174a:	2700      	movs	r7, #0
    174c:	46b9      	mov	r9, r7
    174e:	463e      	mov	r6, r7
    1750:	68a3      	ldr	r3, [r4, #8]
    1752:	2b00      	cmp	r3, #0
    1754:	f000 80bd 	beq.w	18d2 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1758:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    175c:	8321      	strh	r1, [r4, #24]
    175e:	f388 8811 	msr	BASEPRI, r8
    1762:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1766:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1768:	2900      	cmp	r1, #0
    176a:	f000 80bb 	beq.w	18e4 <process_event+0x1f0>
	return node->next;
    176e:	680d      	ldr	r5, [r1, #0]
    1770:	2900      	cmp	r1, #0
    1772:	f000 80b7 	beq.w	18e4 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    1776:	4633      	mov	r3, r6
    1778:	4652      	mov	r2, sl
    177a:	4620      	mov	r0, r4
    177c:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1780:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1782:	2d00      	cmp	r5, #0
    1784:	d076      	beq.n	1874 <process_event+0x180>
    1786:	682b      	ldr	r3, [r5, #0]
    1788:	4629      	mov	r1, r5
    178a:	461d      	mov	r5, r3
    178c:	e7f0      	b.n	1770 <process_event+0x7c>
    178e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1792:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1794:	2a01      	cmp	r2, #1
    1796:	d81b      	bhi.n	17d0 <process_event+0xdc>
	list->head = NULL;
    1798:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    179a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    179e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    17a0:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17a2:	b289      	uxth	r1, r1
	list->tail = NULL;
    17a4:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    17a8:	d109      	bne.n	17be <process_event+0xca>
    17aa:	463b      	mov	r3, r7
    17ac:	e003      	b.n	17b6 <process_event+0xc2>
				mgr->refs += 1U;
    17ae:	8b62      	ldrh	r2, [r4, #26]
    17b0:	3201      	adds	r2, #1
    17b2:	8362      	strh	r2, [r4, #26]
	return node->next;
    17b4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    17b6:	2b00      	cmp	r3, #0
    17b8:	d1f9      	bne.n	17ae <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17ba:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    17be:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    17c0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    17c2:	f004 fa6a 	bl	5c9a <process_recheck>
    17c6:	2800      	cmp	r0, #0
    17c8:	d07b      	beq.n	18c2 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    17ca:	f041 0120 	orr.w	r1, r1, #32
    17ce:	e077      	b.n	18c0 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    17d0:	2b04      	cmp	r3, #4
    17d2:	d10a      	bne.n	17ea <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17d4:	f021 0107 	bic.w	r1, r1, #7
    17d8:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    17da:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    17dc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    17de:	f004 fa5c 	bl	5c9a <process_recheck>
    17e2:	b110      	cbz	r0, 17ea <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    17e4:	f041 0120 	orr.w	r1, r1, #32
    17e8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17ea:	8b21      	ldrh	r1, [r4, #24]
    17ec:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    17f0:	45aa      	cmp	sl, r5
    17f2:	d050      	beq.n	1896 <process_event+0x1a2>
    17f4:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    17f6:	46b9      	mov	r9, r7
    17f8:	e7aa      	b.n	1750 <process_event+0x5c>
			transit = mgr->transitions->start;
    17fa:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17fc:	f021 0107 	bic.w	r1, r1, #7
    1800:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1804:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    1806:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    180a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    180c:	d12d      	bne.n	186a <process_event+0x176>
		    || (transit != NULL)) {
    180e:	f1b9 0f00 	cmp.w	r9, #0
    1812:	d040      	beq.n	1896 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1814:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1818:	8321      	strh	r1, [r4, #24]
    181a:	f388 8811 	msr	BASEPRI, r8
    181e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1822:	4620      	mov	r0, r4
    1824:	4939      	ldr	r1, [pc, #228]	; (190c <process_event+0x218>)
    1826:	47c8      	blx	r9
    1828:	e029      	b.n	187e <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    182a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    182e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1830:	f041 0104 	orr.w	r1, r1, #4
    1834:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1836:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    1838:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    183c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    183e:	d0e6      	beq.n	180e <process_event+0x11a>
    1840:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1842:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    1846:	463e      	mov	r6, r7
    1848:	e782      	b.n	1750 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    184a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    184e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1850:	f041 0105 	orr.w	r1, r1, #5
    1854:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1856:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1858:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    185c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    185e:	d0d6      	beq.n	180e <process_event+0x11a>
    1860:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1862:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    1866:	463e      	mov	r6, r7
    1868:	e772      	b.n	1750 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    186a:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    186c:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    1870:	463e      	mov	r6, r7
    1872:	e76d      	b.n	1750 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1874:	462b      	mov	r3, r5
    1876:	e787      	b.n	1788 <process_event+0x94>
			if (transit != NULL) {
    1878:	f1b9 0f00 	cmp.w	r9, #0
    187c:	d1d1      	bne.n	1822 <process_event+0x12e>
	__asm__ volatile(
    187e:	f04f 0320 	mov.w	r3, #32
    1882:	f3ef 8811 	mrs	r8, BASEPRI
    1886:	f383 8812 	msr	BASEPRI_MAX, r3
    188a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    188e:	8b23      	ldrh	r3, [r4, #24]
    1890:	f023 0308 	bic.w	r3, r3, #8
    1894:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1896:	8b25      	ldrh	r5, [r4, #24]
    1898:	06ea      	lsls	r2, r5, #27
    189a:	d52e      	bpl.n	18fa <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    189c:	f025 0310 	bic.w	r3, r5, #16
    18a0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    18a2:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    18a6:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    18a8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    18aa:	2e00      	cmp	r6, #0
    18ac:	f6bf af6f 	bge.w	178e <process_event+0x9a>
	list->head = NULL;
    18b0:	2300      	movs	r3, #0
		*clients = mgr->clients;
    18b2:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    18b4:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18b8:	f021 0107 	bic.w	r1, r1, #7
    18bc:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    18c0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    18c2:	8b21      	ldrh	r1, [r4, #24]
    18c4:	f04f 0900 	mov.w	r9, #0
    18c8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    18cc:	45aa      	cmp	sl, r5
    18ce:	f47f af3f 	bne.w	1750 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    18d2:	2f00      	cmp	r7, #0
    18d4:	d09b      	beq.n	180e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    18d6:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    18da:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    18dc:	f388 8811 	msr	BASEPRI, r8
    18e0:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    18e4:	2f00      	cmp	r7, #0
    18e6:	d0c7      	beq.n	1878 <process_event+0x184>
	return node->next;
    18e8:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    18ea:	4639      	mov	r1, r7
    18ec:	4633      	mov	r3, r6
    18ee:	4652      	mov	r2, sl
    18f0:	4620      	mov	r0, r4
    18f2:	f004 f9fe 	bl	5cf2 <notify_one>
	list->head = node;
    18f6:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    18f8:	e7f4      	b.n	18e4 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    18fa:	06ab      	lsls	r3, r5, #26
    18fc:	f57f af1a 	bpl.w	1734 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1900:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1904:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1906:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    190a:	e6ff      	b.n	170c <process_event+0x18>
    190c:	00005d1f 	.word	0x00005d1f

00001910 <z_cbvprintf_impl>:
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fmt,
		     va_list ap, uint32_t flags)
{
    1910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1914:	4682      	mov	sl, r0
	size_t count = 0;
    1916:	f04f 0900 	mov.w	r9, #0
{
    191a:	b08d      	sub	sp, #52	; 0x34
    191c:	461d      	mov	r5, r3

	const bool tagged_ap = (flags & Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS)
			       == Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    191e:	1e53      	subs	r3, r2, #1
{
    1920:	9101      	str	r1, [sp, #4]
	fmt--;
    1922:	9303      	str	r3, [sp, #12]

start:
	while (*++fmt != '%') {
    1924:	9b03      	ldr	r3, [sp, #12]
    1926:	7858      	ldrb	r0, [r3, #1]
    1928:	1c5c      	adds	r4, r3, #1
    192a:	2825      	cmp	r0, #37	; 0x25
    192c:	d119      	bne.n	1962 <z_cbvprintf_impl+0x52>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    192e:	2000      	movs	r0, #0
	precision = -1;
    1930:	f04f 38ff 	mov.w	r8, #4294967295

	for (fmt++ ; ; fmt++) {
    1934:	461e      	mov	r6, r3
	min_width = -1;
    1936:	4644      	mov	r4, r8
	length_mod = 0;
    1938:	4603      	mov	r3, r0
	for (fmt++ ; ; fmt++) {
    193a:	3602      	adds	r6, #2
	padding_mode = 0;
    193c:	9002      	str	r0, [sp, #8]
		switch (*fmt) {
    193e:	7831      	ldrb	r1, [r6, #0]
    1940:	9603      	str	r6, [sp, #12]
    1942:	2939      	cmp	r1, #57	; 0x39
    1944:	d855      	bhi.n	19f2 <z_cbvprintf_impl+0xe2>
    1946:	291f      	cmp	r1, #31
    1948:	d814      	bhi.n	1974 <z_cbvprintf_impl+0x64>
    194a:	2900      	cmp	r1, #0
    194c:	f000 81f1 	beq.w	1d32 <z_cbvprintf_impl+0x422>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    1950:	9901      	ldr	r1, [sp, #4]
    1952:	2025      	movs	r0, #37	; 0x25
    1954:	47d0      	blx	sl
			OUTC(*fmt);
    1956:	9901      	ldr	r1, [sp, #4]
    1958:	7830      	ldrb	r0, [r6, #0]
    195a:	47d0      	blx	sl
    195c:	f109 0902 	add.w	r9, r9, #2
			goto start;
    1960:	e7e0      	b.n	1924 <z_cbvprintf_impl+0x14>
		if (*fmt == '\0') {
    1962:	2800      	cmp	r0, #0
    1964:	f000 81e5 	beq.w	1d32 <z_cbvprintf_impl+0x422>
		OUTC(*fmt);
    1968:	9901      	ldr	r1, [sp, #4]
    196a:	47d0      	blx	sl
    196c:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    1970:	9403      	str	r4, [sp, #12]
    1972:	e7d7      	b.n	1924 <z_cbvprintf_impl+0x14>
		switch (*fmt) {
    1974:	f1a1 0220 	sub.w	r2, r1, #32
    1978:	2a19      	cmp	r2, #25
    197a:	d8e9      	bhi.n	1950 <z_cbvprintf_impl+0x40>
    197c:	a701      	add	r7, pc, #4	; (adr r7, 1984 <z_cbvprintf_impl+0x74>)
    197e:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    1982:	bf00      	nop
    1984:	000019ed 	.word	0x000019ed
    1988:	00001951 	.word	0x00001951
    198c:	00001951 	.word	0x00001951
    1990:	000019ed 	.word	0x000019ed
    1994:	00001951 	.word	0x00001951
    1998:	00001a6d 	.word	0x00001a6d
    199c:	00001951 	.word	0x00001951
    19a0:	00001951 	.word	0x00001951
    19a4:	00001951 	.word	0x00001951
    19a8:	00001951 	.word	0x00001951
    19ac:	00001ab9 	.word	0x00001ab9
    19b0:	000019ed 	.word	0x000019ed
    19b4:	00001951 	.word	0x00001951
    19b8:	00001acd 	.word	0x00001acd
    19bc:	00001a79 	.word	0x00001a79
    19c0:	00001951 	.word	0x00001951
    19c4:	00001a87 	.word	0x00001a87
    19c8:	00001aa7 	.word	0x00001aa7
    19cc:	00001aa7 	.word	0x00001aa7
    19d0:	00001aa7 	.word	0x00001aa7
    19d4:	00001aa7 	.word	0x00001aa7
    19d8:	00001aa7 	.word	0x00001aa7
    19dc:	00001aa7 	.word	0x00001aa7
    19e0:	00001aa7 	.word	0x00001aa7
    19e4:	00001aa7 	.word	0x00001aa7
    19e8:	00001aa7 	.word	0x00001aa7
    19ec:	4608      	mov	r0, r1
    19ee:	3601      	adds	r6, #1
    19f0:	e7a5      	b.n	193e <z_cbvprintf_impl+0x2e>
    19f2:	2958      	cmp	r1, #88	; 0x58
    19f4:	f000 80ee 	beq.w	1bd4 <z_cbvprintf_impl+0x2c4>
    19f8:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
    19fc:	b2d7      	uxtb	r7, r2
    19fe:	2f17      	cmp	r7, #23
    1a00:	d8a6      	bhi.n	1950 <z_cbvprintf_impl+0x40>
    1a02:	2a17      	cmp	r2, #23
    1a04:	d8a4      	bhi.n	1950 <z_cbvprintf_impl+0x40>
    1a06:	a701      	add	r7, pc, #4	; (adr r7, 1a0c <z_cbvprintf_impl+0xfc>)
    1a08:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    1a0c:	00001c7b 	.word	0x00001c7b
    1a10:	00001af3 	.word	0x00001af3
    1a14:	00001951 	.word	0x00001951
    1a18:	00001951 	.word	0x00001951
    1a1c:	00001951 	.word	0x00001951
    1a20:	00001ad3 	.word	0x00001ad3
    1a24:	00001af3 	.word	0x00001af3
    1a28:	00001951 	.word	0x00001951
    1a2c:	00001951 	.word	0x00001951
    1a30:	00001ad3 	.word	0x00001ad3
    1a34:	00001951 	.word	0x00001951
    1a38:	00001951 	.word	0x00001951
    1a3c:	00001951 	.word	0x00001951
    1a40:	00001baf 	.word	0x00001baf
    1a44:	00001951 	.word	0x00001951
    1a48:	00001951 	.word	0x00001951
    1a4c:	00001c4f 	.word	0x00001c4f
    1a50:	00001951 	.word	0x00001951
    1a54:	00001af3 	.word	0x00001af3
    1a58:	00001951 	.word	0x00001951
    1a5c:	00001951 	.word	0x00001951
    1a60:	00001baf 	.word	0x00001baf
    1a64:	00001951 	.word	0x00001951
    1a68:	00001ad3 	.word	0x00001ad3
			OUTC('%');
    1a6c:	2025      	movs	r0, #37	; 0x25
    1a6e:	9901      	ldr	r1, [sp, #4]
    1a70:	47d0      	blx	sl
    1a72:	f109 0901 	add.w	r9, r9, #1
			goto start;
    1a76:	e755      	b.n	1924 <z_cbvprintf_impl+0x14>
			padding_mode &= (char)~PAD_ZERO;
    1a78:	9a02      	ldr	r2, [sp, #8]
			precision = 0;
    1a7a:	f04f 0800 	mov.w	r8, #0
			padding_mode &= (char)~PAD_ZERO;
    1a7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1a82:	9202      	str	r2, [sp, #8]
			continue;
    1a84:	e7b3      	b.n	19ee <z_cbvprintf_impl+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    1a86:	2c00      	cmp	r4, #0
    1a88:	da0d      	bge.n	1aa6 <z_cbvprintf_impl+0x196>
    1a8a:	f1b8 0f00 	cmp.w	r8, #0
    1a8e:	da0d      	bge.n	1aac <z_cbvprintf_impl+0x19c>
    1a90:	9a02      	ldr	r2, [sp, #8]
    1a92:	2a00      	cmp	r2, #0
    1a94:	f000 8145 	beq.w	1d22 <z_cbvprintf_impl+0x412>
				min_width = 10 * min_width + *fmt - '0';
    1a98:	220a      	movs	r2, #10
				if (min_width < 0) {
    1a9a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
				min_width = 10 * min_width + *fmt - '0';
    1a9e:	fb02 1404 	mla	r4, r2, r4, r1
    1aa2:	3c30      	subs	r4, #48	; 0x30
    1aa4:	e7a3      	b.n	19ee <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    1aa6:	f1b8 0f00 	cmp.w	r8, #0
    1aaa:	dbf5      	blt.n	1a98 <z_cbvprintf_impl+0x188>
				precision = 10 * precision + *fmt - '0';
    1aac:	220a      	movs	r2, #10
    1aae:	fb02 1208 	mla	r2, r2, r8, r1
    1ab2:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
    1ab6:	e79a      	b.n	19ee <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    1ab8:	f1b8 0f00 	cmp.w	r8, #0
				precision = va_arg(ap, int);
    1abc:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
    1ac0:	f280 8131 	bge.w	1d26 <z_cbvprintf_impl+0x416>
				if (min_width < 0) {
    1ac4:	2a00      	cmp	r2, #0
    1ac6:	f280 8130 	bge.w	1d2a <z_cbvprintf_impl+0x41a>
					min_width = -min_width;
    1aca:	4254      	negs	r4, r2
		switch (*fmt) {
    1acc:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    1ace:	9202      	str	r2, [sp, #8]
    1ad0:	e78d      	b.n	19ee <z_cbvprintf_impl+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
    1ad2:	2968      	cmp	r1, #104	; 0x68
    1ad4:	d103      	bne.n	1ade <z_cbvprintf_impl+0x1ce>
    1ad6:	2b68      	cmp	r3, #104	; 0x68
    1ad8:	d106      	bne.n	1ae8 <z_cbvprintf_impl+0x1d8>
				length_mod = 'H';
    1ada:	2348      	movs	r3, #72	; 0x48
    1adc:	e787      	b.n	19ee <z_cbvprintf_impl+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1ade:	296c      	cmp	r1, #108	; 0x6c
    1ae0:	d102      	bne.n	1ae8 <z_cbvprintf_impl+0x1d8>
    1ae2:	2b6c      	cmp	r3, #108	; 0x6c
    1ae4:	f000 8123 	beq.w	1d2e <z_cbvprintf_impl+0x41e>
			} else if (length_mod == '\0') {
    1ae8:	2b00      	cmp	r3, #0
    1aea:	f47f af31 	bne.w	1950 <z_cbvprintf_impl+0x40>
		switch (*fmt) {
    1aee:	460b      	mov	r3, r1
    1af0:	e77d      	b.n	19ee <z_cbvprintf_impl+0xde>
			if (length_mod == 'z') {
    1af2:	2b7a      	cmp	r3, #122	; 0x7a
    1af4:	d106      	bne.n	1b04 <z_cbvprintf_impl+0x1f4>
			} else if (*fmt == 'u') {
    1af6:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
    1af8:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
    1afc:	d114      	bne.n	1b28 <z_cbvprintf_impl+0x218>
				d = va_arg(ap, unsigned int);
    1afe:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1b02:	e00c      	b.n	1b1e <z_cbvprintf_impl+0x20e>
			} else if (length_mod == 'l') {
    1b04:	2b6c      	cmp	r3, #108	; 0x6c
    1b06:	d0f6      	beq.n	1af6 <z_cbvprintf_impl+0x1e6>
			} else if (length_mod == 'L') {
    1b08:	2b4c      	cmp	r3, #76	; 0x4c
    1b0a:	d1f4      	bne.n	1af6 <z_cbvprintf_impl+0x1e6>
					unsigned long long llu =
    1b0c:	3507      	adds	r5, #7
    1b0e:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
    1b12:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
    1b14:	f103 0508 	add.w	r5, r3, #8
    1b18:	e9d3 6b00 	ldrd	r6, fp, [r3]
				if (*fmt == 'u') {
    1b1c:	d106      	bne.n	1b2c <z_cbvprintf_impl+0x21c>
			} else if (special == ' ') {
    1b1e:	2820      	cmp	r0, #32
    1b20:	d13e      	bne.n	1ba0 <z_cbvprintf_impl+0x290>
				prefix = " ";
    1b22:	4f86      	ldr	r7, [pc, #536]	; (1d3c <z_cbvprintf_impl+0x42c>)
				min_width--;
    1b24:	3c01      	subs	r4, #1
    1b26:	e009      	b.n	1b3c <z_cbvprintf_impl+0x22c>
				d = va_arg(ap, int);
    1b28:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1b2c:	f1bb 0f00 	cmp.w	fp, #0
    1b30:	daf5      	bge.n	1b1e <z_cbvprintf_impl+0x20e>
				d = -d;
    1b32:	4276      	negs	r6, r6
				prefix = "-";
    1b34:	4f82      	ldr	r7, [pc, #520]	; (1d40 <z_cbvprintf_impl+0x430>)
				d = -d;
    1b36:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
    1b3a:	3c01      	subs	r4, #1
	int i = 0;
    1b3c:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    1b40:	9305      	str	r3, [sp, #20]
    1b42:	2300      	movs	r3, #0
    1b44:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
    1b46:	4630      	mov	r0, r6
    1b48:	4659      	mov	r1, fp
    1b4a:	220a      	movs	r2, #10
    1b4c:	2300      	movs	r3, #0
    1b4e:	f7fe faf9 	bl	144 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    1b52:	9b04      	ldr	r3, [sp, #16]
    1b54:	3230      	adds	r2, #48	; 0x30
    1b56:	f103 3cff 	add.w	ip, r3, #4294967295
    1b5a:	f8cd c010 	str.w	ip, [sp, #16]
    1b5e:	f8dd c014 	ldr.w	ip, [sp, #20]
    1b62:	f80c 2d01 	strb.w	r2, [ip, #-1]!
    1b66:	f8cd c014 	str.w	ip, [sp, #20]
		num /= base;
    1b6a:	46b4      	mov	ip, r6
    1b6c:	465a      	mov	r2, fp
	} while (num);
    1b6e:	f1bc 0f0a 	cmp.w	ip, #10
    1b72:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
    1b76:	4606      	mov	r6, r0
    1b78:	468b      	mov	fp, r1
	} while (num);
    1b7a:	d2e4      	bcs.n	1b46 <z_cbvprintf_impl+0x236>
	return -i;
    1b7c:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    1b80:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
    1b82:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1b86:	f1b8 0f00 	cmp.w	r8, #0
			data = buf + sizeof(buf) - data_len;
    1b8a:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1b8e:	da6d      	bge.n	1c6c <z_cbvprintf_impl+0x35c>
    1b90:	9b02      	ldr	r3, [sp, #8]
    1b92:	07d9      	lsls	r1, r3, #31
    1b94:	d47c      	bmi.n	1c90 <z_cbvprintf_impl+0x380>
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    1b96:	eba8 030b 	sub.w	r3, r8, fp
		min_width -= data_len;
    1b9a:	eba4 040b 	sub.w	r4, r4, fp
    1b9e:	e013      	b.n	1bc8 <z_cbvprintf_impl+0x2b8>
			} else if (special == '+') {
    1ba0:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    1ba2:	bf0a      	itet	eq
    1ba4:	4f67      	ldreq	r7, [pc, #412]	; (1d44 <z_cbvprintf_impl+0x434>)
	prefix = "";
    1ba6:	4f68      	ldrne	r7, [pc, #416]	; (1d48 <z_cbvprintf_impl+0x438>)
				min_width--;
    1ba8:	f104 34ff 	addeq.w	r4, r4, #4294967295
    1bac:	e7c6      	b.n	1b3c <z_cbvprintf_impl+0x22c>
			if (*fmt == 'p') {
    1bae:	2970      	cmp	r1, #112	; 0x70
    1bb0:	d10f      	bne.n	1bd2 <z_cbvprintf_impl+0x2c2>
				x = (uintptr_t)va_arg(ap, void *);
    1bb2:	f855 2b04 	ldr.w	r2, [r5], #4
    1bb6:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    1bb8:	b9fa      	cbnz	r2, 1bfa <z_cbvprintf_impl+0x2ea>
		precision -= data_len;
    1bba:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
    1bbe:	f04f 0b05 	mov.w	fp, #5
					data = "(nil)";
    1bc2:	4e62      	ldr	r6, [pc, #392]	; (1d4c <z_cbvprintf_impl+0x43c>)
		min_width -= data_len;
    1bc4:	3c05      	subs	r4, #5
	prefix = "";
    1bc6:	4f60      	ldr	r7, [pc, #384]	; (1d48 <z_cbvprintf_impl+0x438>)
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1bc8:	9a02      	ldr	r2, [sp, #8]
    1bca:	0792      	lsls	r2, r2, #30
    1bcc:	d46f      	bmi.n	1cae <z_cbvprintf_impl+0x39e>
    1bce:	46a0      	mov	r8, r4
    1bd0:	e065      	b.n	1c9e <z_cbvprintf_impl+0x38e>
		switch (*fmt) {
    1bd2:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
    1bd4:	2b6c      	cmp	r3, #108	; 0x6c
    1bd6:	d103      	bne.n	1be0 <z_cbvprintf_impl+0x2d0>
				x = va_arg(ap, unsigned int);
    1bd8:	2300      	movs	r3, #0
    1bda:	f855 2b04 	ldr.w	r2, [r5], #4
    1bde:	e008      	b.n	1bf2 <z_cbvprintf_impl+0x2e2>
			} else if (length_mod == 'L') {
    1be0:	2b4c      	cmp	r3, #76	; 0x4c
    1be2:	d1f9      	bne.n	1bd8 <z_cbvprintf_impl+0x2c8>
				unsigned long long llx =
    1be4:	3507      	adds	r5, #7
    1be6:	f025 0307 	bic.w	r3, r5, #7
    1bea:	461d      	mov	r5, r3
    1bec:	685b      	ldr	r3, [r3, #4]
    1bee:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
    1bf2:	2823      	cmp	r0, #35	; 0x23
    1bf4:	d125      	bne.n	1c42 <z_cbvprintf_impl+0x332>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1bf6:	0688      	lsls	r0, r1, #26
    1bf8:	d521      	bpl.n	1c3e <z_cbvprintf_impl+0x32e>
    1bfa:	4f55      	ldr	r7, [pc, #340]	; (1d50 <z_cbvprintf_impl+0x440>)
				min_width -= 2;
    1bfc:	3c02      	subs	r4, #2
	int i = 0;
    1bfe:	2600      	movs	r6, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1c00:	f001 0160 	and.w	r1, r1, #96	; 0x60
    1c04:	f1a1 0b39 	sub.w	fp, r1, #57	; 0x39
	int i = 0;
    1c08:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
		unsigned int c = num % base;
    1c0c:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
    1c10:	2909      	cmp	r1, #9
			c += alpha;
    1c12:	bf88      	it	hi
    1c14:	4459      	addhi	r1, fp
		buftop[--i] = c + '0';
    1c16:	3130      	adds	r1, #48	; 0x30
    1c18:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	} while (num);
    1c1c:	2a10      	cmp	r2, #16
		num /= base;
    1c1e:	ea4f 1112 	mov.w	r1, r2, lsr #4
    1c22:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    1c26:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    1c2a:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1c2e:	f106 3cff 	add.w	ip, r6, #4294967295
	} while (num);
    1c32:	d208      	bcs.n	1c46 <z_cbvprintf_impl+0x336>
	return -i;
    1c34:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
    1c38:	f106 0330 	add.w	r3, r6, #48	; 0x30
    1c3c:	e7a1      	b.n	1b82 <z_cbvprintf_impl+0x272>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1c3e:	4f45      	ldr	r7, [pc, #276]	; (1d54 <z_cbvprintf_impl+0x444>)
    1c40:	e7dc      	b.n	1bfc <z_cbvprintf_impl+0x2ec>
	prefix = "";
    1c42:	4f41      	ldr	r7, [pc, #260]	; (1d48 <z_cbvprintf_impl+0x438>)
    1c44:	e7db      	b.n	1bfe <z_cbvprintf_impl+0x2ee>
		buftop[--i] = c + '0';
    1c46:	4666      	mov	r6, ip
		num /= base;
    1c48:	460a      	mov	r2, r1
    1c4a:	4603      	mov	r3, r0
    1c4c:	e7de      	b.n	1c0c <z_cbvprintf_impl+0x2fc>
			data = va_arg(ap, char *);
    1c4e:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
    1c52:	4630      	mov	r0, r6
    1c54:	f004 fc50 	bl	64f8 <strlen>
			if (precision >= 0 && data_len > precision) {
    1c58:	f1b8 0f00 	cmp.w	r8, #0
			data_len = strlen(data);
    1c5c:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    1c5e:	db02      	blt.n	1c66 <z_cbvprintf_impl+0x356>
    1c60:	4540      	cmp	r0, r8
    1c62:	bfa8      	it	ge
    1c64:	46c3      	movge	fp, r8
			precision = 0;
    1c66:	f04f 0800 	mov.w	r8, #0
	prefix = "";
    1c6a:	4f37      	ldr	r7, [pc, #220]	; (1d48 <z_cbvprintf_impl+0x438>)
		precision -= data_len;
    1c6c:	eba8 030b 	sub.w	r3, r8, fp
		if (precision > 0) {
    1c70:	2b00      	cmp	r3, #0
    1c72:	dd92      	ble.n	1b9a <z_cbvprintf_impl+0x28a>
			min_width -= precision;
    1c74:	eba4 0408 	sub.w	r4, r4, r8
    1c78:	e7a6      	b.n	1bc8 <z_cbvprintf_impl+0x2b8>
			buf[0] = c;
    1c7a:	f855 3b04 	ldr.w	r3, [r5], #4
			data_len = 1;
    1c7e:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
    1c82:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
    1c86:	3c01      	subs	r4, #1
		precision -= data_len;
    1c88:	f04f 33ff 	mov.w	r3, #4294967295
			data = buf;
    1c8c:	ae06      	add	r6, sp, #24
    1c8e:	e79a      	b.n	1bc6 <z_cbvprintf_impl+0x2b6>
    1c90:	46a0      	mov	r8, r4
    1c92:	e7eb      	b.n	1c6c <z_cbvprintf_impl+0x35c>
    1c94:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
    1c96:	2020      	movs	r0, #32
    1c98:	9901      	ldr	r1, [sp, #4]
    1c9a:	47d0      	blx	sl
    1c9c:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
    1c9e:	f1b8 0801 	subs.w	r8, r8, #1
    1ca2:	d5f7      	bpl.n	1c94 <z_cbvprintf_impl+0x384>
    1ca4:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
    1ca8:	3c01      	subs	r4, #1
    1caa:	4491      	add	r9, r2
    1cac:	1aa4      	subs	r4, r4, r2
    1cae:	46b8      	mov	r8, r7
    1cb0:	e006      	b.n	1cc0 <z_cbvprintf_impl+0x3b0>
    1cb2:	9304      	str	r3, [sp, #16]
    1cb4:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1cb6:	9901      	ldr	r1, [sp, #4]
    1cb8:	47d0      	blx	sl
    1cba:	9a02      	ldr	r2, [sp, #8]
    1cbc:	9b04      	ldr	r3, [sp, #16]
    1cbe:	4690      	mov	r8, r2
		while (*prefix) {
    1cc0:	4642      	mov	r2, r8
    1cc2:	f812 0b01 	ldrb.w	r0, [r2], #1
    1cc6:	2800      	cmp	r0, #0
    1cc8:	d1f3      	bne.n	1cb2 <z_cbvprintf_impl+0x3a2>
    1cca:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
    1ccc:	3a01      	subs	r2, #1
    1cce:	d515      	bpl.n	1cfc <z_cbvprintf_impl+0x3ec>
    1cd0:	2b00      	cmp	r3, #0
    1cd2:	bfac      	ite	ge
    1cd4:	ebc7 0703 	rsbge	r7, r7, r3
    1cd8:	427f      	neglt	r7, r7
    1cda:	465b      	mov	r3, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
    1cdc:	3b01      	subs	r3, #1
    1cde:	d515      	bpl.n	1d0c <z_cbvprintf_impl+0x3fc>
    1ce0:	f1bb 0f00 	cmp.w	fp, #0
    1ce4:	bfa8      	it	ge
    1ce6:	445f      	addge	r7, fp
    1ce8:	4626      	mov	r6, r4
    1cea:	444f      	add	r7, r9
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1cec:	3e01      	subs	r6, #1
    1cee:	d514      	bpl.n	1d1a <z_cbvprintf_impl+0x40a>
    1cf0:	2c00      	cmp	r4, #0
    1cf2:	bfa8      	it	ge
    1cf4:	193f      	addge	r7, r7, r4
    1cf6:	eb07 0908 	add.w	r9, r7, r8
    1cfa:	e613      	b.n	1924 <z_cbvprintf_impl+0x14>
    1cfc:	9304      	str	r3, [sp, #16]
    1cfe:	9202      	str	r2, [sp, #8]
			OUTC('0');
    1d00:	2030      	movs	r0, #48	; 0x30
    1d02:	9901      	ldr	r1, [sp, #4]
    1d04:	47d0      	blx	sl
    1d06:	9b04      	ldr	r3, [sp, #16]
    1d08:	9a02      	ldr	r2, [sp, #8]
    1d0a:	e7df      	b.n	1ccc <z_cbvprintf_impl+0x3bc>
    1d0c:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
    1d0e:	9901      	ldr	r1, [sp, #4]
    1d10:	f816 0b01 	ldrb.w	r0, [r6], #1
    1d14:	47d0      	blx	sl
    1d16:	9b02      	ldr	r3, [sp, #8]
    1d18:	e7e0      	b.n	1cdc <z_cbvprintf_impl+0x3cc>
			OUTC(' ');
    1d1a:	9901      	ldr	r1, [sp, #4]
    1d1c:	2020      	movs	r0, #32
    1d1e:	47d0      	blx	sl
    1d20:	e7e4      	b.n	1cec <z_cbvprintf_impl+0x3dc>
				padding_mode = PAD_ZERO;
    1d22:	2201      	movs	r2, #1
    1d24:	e6d3      	b.n	1ace <z_cbvprintf_impl+0x1be>
				precision = va_arg(ap, int);
    1d26:	4690      	mov	r8, r2
    1d28:	e661      	b.n	19ee <z_cbvprintf_impl+0xde>
    1d2a:	4614      	mov	r4, r2
    1d2c:	e65f      	b.n	19ee <z_cbvprintf_impl+0xde>
				length_mod = 'L';
    1d2e:	234c      	movs	r3, #76	; 0x4c
    1d30:	e65d      	b.n	19ee <z_cbvprintf_impl+0xde>
		}

		goto start;
	}
}
    1d32:	4648      	mov	r0, r9
    1d34:	b00d      	add	sp, #52	; 0x34
    1d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d3a:	bf00      	nop
    1d3c:	0000987e 	.word	0x0000987e
    1d40:	000093b3 	.word	0x000093b3
    1d44:	000093b5 	.word	0x000093b5
    1d48:	00009be2 	.word	0x00009be2
    1d4c:	000093bd 	.word	0x000093bd
    1d50:	000093b7 	.word	0x000093b7
    1d54:	000093ba 	.word	0x000093ba

00001d58 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1d58:	b508      	push	{r3, lr}
	__asm__ volatile(
    1d5a:	f04f 0220 	mov.w	r2, #32
    1d5e:	f3ef 8311 	mrs	r3, BASEPRI
    1d62:	f382 8812 	msr	BASEPRI_MAX, r2
    1d66:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1d6a:	f001 f937 	bl	2fdc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1d6e:	4803      	ldr	r0, [pc, #12]	; (1d7c <sys_reboot+0x24>)
    1d70:	f003 ff86 	bl	5c80 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1d74:	f000 fe22 	bl	29bc <arch_cpu_idle>
    1d78:	e7fc      	b.n	1d74 <sys_reboot+0x1c>
    1d7a:	bf00      	nop
    1d7c:	000093c3 	.word	0x000093c3

00001d80 <nordicsemi_nrf91_init>:
    1d80:	f04f 0220 	mov.w	r2, #32
    1d84:	f3ef 8311 	mrs	r3, BASEPRI
    1d88:	f382 8812 	msr	BASEPRI_MAX, r2
    1d8c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1d90:	2101      	movs	r1, #1
    1d92:	4a04      	ldr	r2, [pc, #16]	; (1da4 <nordicsemi_nrf91_init+0x24>)
    1d94:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1d98:	f383 8811 	msr	BASEPRI, r3
    1d9c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1da0:	2000      	movs	r0, #0
    1da2:	4770      	bx	lr
    1da4:	50039000 	.word	0x50039000

00001da8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1da8:	b120      	cbz	r0, 1db4 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1daa:	4b03      	ldr	r3, [pc, #12]	; (1db8 <arch_busy_wait+0x10>)
    1dac:	0180      	lsls	r0, r0, #6
    1dae:	f043 0301 	orr.w	r3, r3, #1
    1db2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1db4:	4770      	bx	lr
    1db6:	bf00      	nop
    1db8:	000089a0 	.word	0x000089a0

00001dbc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1dbc:	f002 bce8 	b.w	4790 <SystemInit>

00001dc0 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    1dc0:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    1dc2:	4b11      	ldr	r3, [pc, #68]	; (1e08 <flash_area_open+0x48>)
{
    1dc4:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    1dc6:	681c      	ldr	r4, [r3, #0]
    1dc8:	b1dc      	cbz	r4, 1e02 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1dca:	4b10      	ldr	r3, [pc, #64]	; (1e0c <flash_area_open+0x4c>)
    1dcc:	6819      	ldr	r1, [r3, #0]
    1dce:	2300      	movs	r3, #0
    1dd0:	428b      	cmp	r3, r1
    1dd2:	db02      	blt.n	1dda <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1dd4:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    1dd8:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1dda:	4622      	mov	r2, r4
    1ddc:	f812 6b10 	ldrb.w	r6, [r2], #16
    1de0:	4286      	cmp	r6, r0
    1de2:	d002      	beq.n	1dea <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    1de4:	4614      	mov	r4, r2
    1de6:	3301      	adds	r3, #1
    1de8:	e7f2      	b.n	1dd0 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1dea:	68e0      	ldr	r0, [r4, #12]
    1dec:	b910      	cbnz	r0, 1df4 <flash_area_open+0x34>
		return -ENODEV;
    1dee:	f06f 0012 	mvn.w	r0, #18
    1df2:	e7f1      	b.n	1dd8 <flash_area_open+0x18>
    1df4:	f006 fc0a 	bl	860c <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1df8:	2800      	cmp	r0, #0
    1dfa:	d0f8      	beq.n	1dee <flash_area_open+0x2e>
	return 0;
    1dfc:	2000      	movs	r0, #0
	*fap = area;
    1dfe:	602c      	str	r4, [r5, #0]
	return 0;
    1e00:	e7ea      	b.n	1dd8 <flash_area_open+0x18>
		return -EACCES;
    1e02:	f06f 000c 	mvn.w	r0, #12
    1e06:	e7e7      	b.n	1dd8 <flash_area_open+0x18>
    1e08:	2000000c 	.word	0x2000000c
    1e0c:	000089c0 	.word	0x000089c0

00001e10 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1e10:	b570      	push	{r4, r5, r6, lr}
    1e12:	b088      	sub	sp, #32
    1e14:	4605      	mov	r5, r0
    1e16:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1e18:	b2c0      	uxtb	r0, r0
    1e1a:	4669      	mov	r1, sp
{
    1e1c:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1e1e:	f7ff ffcf 	bl	1dc0 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1e22:	2800      	cmp	r0, #0
    1e24:	db1b      	blt.n	1e5e <flash_area_get_sectors+0x4e>
    1e26:	9800      	ldr	r0, [sp, #0]
    1e28:	b1c8      	cbz	r0, 1e5e <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    1e2a:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1e2c:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1e2e:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1e30:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    1e32:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    1e34:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1e38:	2300      	movs	r3, #0
	cb_data->status = 0;
    1e3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1e3e:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    1e40:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    1e42:	f004 f825 	bl	5e90 <flash_area_close>
	if (flash_dev == NULL) {
    1e46:	b16d      	cbz	r5, 1e64 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    1e48:	4628      	mov	r0, r5
    1e4a:	4908      	ldr	r1, [pc, #32]	; (1e6c <flash_area_get_sectors+0x5c>)
    1e4c:	aa01      	add	r2, sp, #4
    1e4e:	f004 fcc4 	bl	67da <flash_page_foreach>
	if (cb_data->status == 0) {
    1e52:	9807      	ldr	r0, [sp, #28]
    1e54:	b908      	cbnz	r0, 1e5a <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    1e56:	9b05      	ldr	r3, [sp, #20]
    1e58:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1e5a:	b008      	add	sp, #32
    1e5c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1e5e:	f06f 0015 	mvn.w	r0, #21
    1e62:	e7fa      	b.n	1e5a <flash_area_get_sectors+0x4a>
		return -ENODEV;
    1e64:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1e68:	e7f7      	b.n	1e5a <flash_area_get_sectors+0x4a>
    1e6a:	bf00      	nop
    1e6c:	00005f2b 	.word	0x00005f2b

00001e70 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1e70:	4801      	ldr	r0, [pc, #4]	; (1e78 <nrf_cc3xx_platform_abort_init+0x8>)
    1e72:	f003 bb19 	b.w	54a8 <nrf_cc3xx_platform_set_abort>
    1e76:	bf00      	nop
    1e78:	00008a94 	.word	0x00008a94

00001e7c <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    1e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    1e7e:	4e25      	ldr	r6, [pc, #148]	; (1f14 <boot_uart_fifo_callback+0x98>)
    1e80:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    1e82:	6883      	ldr	r3, [r0, #8]
    1e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e86:	b103      	cbz	r3, 1e8a <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    1e88:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    1e8a:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
    1e8c:	6883      	ldr	r3, [r0, #8]
    1e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1e90:	2b00      	cmp	r3, #0
    1e92:	d132      	bne.n	1efa <boot_uart_fifo_callback+0x7e>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    1e94:	4c20      	ldr	r4, [pc, #128]	; (1f18 <boot_uart_fifo_callback+0x9c>)
	return list->head;
    1e96:	4d21      	ldr	r5, [pc, #132]	; (1f1c <boot_uart_fifo_callback+0xa0>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    1e98:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read == NULL) {
    1e9a:	6883      	ldr	r3, [r0, #8]
    1e9c:	699b      	ldr	r3, [r3, #24]
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	d02e      	beq.n	1f00 <boot_uart_fifo_callback+0x84>
	return api->fifo_read(dev, rx_data, size);
    1ea2:	2201      	movs	r2, #1
    1ea4:	f10d 0107 	add.w	r1, sp, #7
    1ea8:	4798      	blx	r3
		if (rx != 1) {
    1eaa:	2801      	cmp	r0, #1
    1eac:	d128      	bne.n	1f00 <boot_uart_fifo_callback+0x84>
		if (!cmd) {
    1eae:	6823      	ldr	r3, [r4, #0]
    1eb0:	b943      	cbnz	r3, 1ec4 <boot_uart_fifo_callback+0x48>
    1eb2:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    1eb4:	b333      	cbz	r3, 1f04 <boot_uart_fifo_callback+0x88>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1eb6:	6869      	ldr	r1, [r5, #4]
	return node->next;
    1eb8:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1eba:	428b      	cmp	r3, r1
	list->head = node;
    1ebc:	602a      	str	r2, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1ebe:	d100      	bne.n	1ec2 <boot_uart_fifo_callback+0x46>
	list->tail = node;
    1ec0:	606a      	str	r2, [r5, #4]
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
					     " incoming data!");
				return;
			}
			cmd = CONTAINER_OF(node, struct line_input, node);
    1ec2:	6023      	str	r3, [r4, #0]
		}

		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    1ec4:	4a16      	ldr	r2, [pc, #88]	; (1f20 <boot_uart_fifo_callback+0xa4>)
			cmd->line[cur++] = byte;
		}

		if (byte ==  '\n') {
    1ec6:	f89d 0007 	ldrb.w	r0, [sp, #7]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    1eca:	8811      	ldrh	r1, [r2, #0]
    1ecc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1ed0:	d204      	bcs.n	1edc <boot_uart_fifo_callback+0x60>
			cmd->line[cur++] = byte;
    1ed2:	6823      	ldr	r3, [r4, #0]
    1ed4:	1c4f      	adds	r7, r1, #1
    1ed6:	440b      	add	r3, r1
    1ed8:	8017      	strh	r7, [r2, #0]
    1eda:	7218      	strb	r0, [r3, #8]
		if (byte ==  '\n') {
    1edc:	280a      	cmp	r0, #10
    1ede:	d1db      	bne.n	1e98 <boot_uart_fifo_callback+0x1c>
	parent->next = child;
    1ee0:	2000      	movs	r0, #0
			cmd->len = cur;
    1ee2:	6823      	ldr	r3, [r4, #0]
    1ee4:	8811      	ldrh	r1, [r2, #0]
    1ee6:	6018      	str	r0, [r3, #0]
    1ee8:	6059      	str	r1, [r3, #4]
	return list->tail;
    1eea:	490e      	ldr	r1, [pc, #56]	; (1f24 <boot_uart_fifo_callback+0xa8>)
    1eec:	684d      	ldr	r5, [r1, #4]
Z_GENLIST_APPEND(slist, snode)
    1eee:	b975      	cbnz	r5, 1f0e <boot_uart_fifo_callback+0x92>
	list->head = node;
    1ef0:	e9c1 3300 	strd	r3, r3, [r1]
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
    1ef4:	8010      	strh	r0, [r2, #0]
			cmd = NULL;
    1ef6:	6020      	str	r0, [r4, #0]
    1ef8:	e7cd      	b.n	1e96 <boot_uart_fifo_callback+0x1a>
	return api->irq_rx_ready(dev);
    1efa:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    1efc:	2800      	cmp	r0, #0
    1efe:	d1c9      	bne.n	1e94 <boot_uart_fifo_callback+0x18>
		}
	}
}
    1f00:	b003      	add	sp, #12
    1f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
				BOOT_LOG_ERR("Not enough memory to store"
    1f04:	2145      	movs	r1, #69	; 0x45
    1f06:	4808      	ldr	r0, [pc, #32]	; (1f28 <boot_uart_fifo_callback+0xac>)
    1f08:	f003 ffb5 	bl	5e76 <z_log_minimal_printk>
				return;
    1f0c:	e7f8      	b.n	1f00 <boot_uart_fifo_callback+0x84>
	parent->next = child;
    1f0e:	602b      	str	r3, [r5, #0]
	list->tail = node;
    1f10:	604b      	str	r3, [r1, #4]
}
    1f12:	e7ef      	b.n	1ef4 <boot_uart_fifo_callback+0x78>
    1f14:	20001a98 	.word	0x20001a98
    1f18:	20001670 	.word	0x20001670
    1f1c:	20001680 	.word	0x20001680
    1f20:	20001ba8 	.word	0x20001ba8
    1f24:	20001678 	.word	0x20001678
    1f28:	000093f0 	.word	0x000093f0

00001f2c <console_out>:
{
    1f2c:	b510      	push	{r4, lr}
	uart_poll_out(uart_dev, c);
    1f2e:	4b04      	ldr	r3, [pc, #16]	; (1f40 <console_out+0x14>)
{
    1f30:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    1f32:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    1f34:	6883      	ldr	r3, [r0, #8]
    1f36:	b2e1      	uxtb	r1, r4
    1f38:	685b      	ldr	r3, [r3, #4]
    1f3a:	4798      	blx	r3
}
    1f3c:	4620      	mov	r0, r4
    1f3e:	bd10      	pop	{r4, pc}
    1f40:	20001a98 	.word	0x20001a98

00001f44 <console_read>:
{
    1f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f46:	4605      	mov	r5, r0
    1f48:	4616      	mov	r6, r2
    1f4a:	4608      	mov	r0, r1
	__asm__ volatile(
    1f4c:	f04f 0320 	mov.w	r3, #32
    1f50:	f3ef 8711 	mrs	r7, BASEPRI
    1f54:	f383 8812 	msr	BASEPRI_MAX, r3
    1f58:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    1f5c:	491b      	ldr	r1, [pc, #108]	; (1fcc <console_read+0x88>)
    1f5e:	680b      	ldr	r3, [r1, #0]
    1f60:	b14b      	cbz	r3, 1f76 <console_read+0x32>
	return list->tail;
    1f62:	4c1b      	ldr	r4, [pc, #108]	; (1fd0 <console_read+0x8c>)
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    1f64:	6862      	ldr	r2, [r4, #4]
    1f66:	429a      	cmp	r2, r3
    1f68:	d005      	beq.n	1f76 <console_read+0x32>
	parent->next = child;
    1f6a:	2200      	movs	r2, #0
    1f6c:	601a      	str	r2, [r3, #0]
	return list->tail;
    1f6e:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    1f70:	b962      	cbnz	r2, 1f8c <console_read+0x48>
	list->head = node;
    1f72:	e9c4 3300 	strd	r3, r3, [r4]
	return list->head;
    1f76:	4a17      	ldr	r2, [pc, #92]	; (1fd4 <console_read+0x90>)
    1f78:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_GET(slist, snode)
    1f7a:	b953      	cbnz	r3, 1f92 <console_read+0x4e>
	__asm__ volatile(
    1f7c:	f387 8811 	msr	BASEPRI, r7
    1f80:	f3bf 8f6f 	isb	sy
		return 0;
    1f84:	4618      	mov	r0, r3

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    1f86:	600b      	str	r3, [r1, #0]
		*newline = 0;
    1f88:	6033      	str	r3, [r6, #0]
}
    1f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    1f8c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    1f8e:	6063      	str	r3, [r4, #4]
}
    1f90:	e7f1      	b.n	1f76 <console_read+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1f92:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return node->next;
    1f96:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1f98:	4563      	cmp	r3, ip
	list->head = node;
    1f9a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    1f9c:	bf08      	it	eq
    1f9e:	6054      	streq	r4, [r2, #4]
    1fa0:	f387 8811 	msr	BASEPRI, r7
    1fa4:	f3bf 8f6f 	isb	sy
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    1fa8:	685c      	ldr	r4, [r3, #4]
	cmd = CONTAINER_OF(node, struct line_input, node);
    1faa:	600b      	str	r3, [r1, #0]
	if (len > str_size - 1) {
    1fac:	42a0      	cmp	r0, r4
		len = str_size - 1;
    1fae:	bfd8      	it	le
    1fb0:	f100 34ff 	addle.w	r4, r0, #4294967295
	*line = cmd->line;
    1fb4:	f103 0108 	add.w	r1, r3, #8
	memcpy(str, line, len);
    1fb8:	4622      	mov	r2, r4
    1fba:	4628      	mov	r0, r5
    1fbc:	f004 faca 	bl	6554 <memcpy>
	str[len] = '\0';
    1fc0:	2300      	movs	r3, #0
	return len + 1;
    1fc2:	1c60      	adds	r0, r4, #1
	str[len] = '\0';
    1fc4:	552b      	strb	r3, [r5, r4]
	return len + 1;
    1fc6:	2301      	movs	r3, #1
    1fc8:	e7de      	b.n	1f88 <console_read+0x44>
    1fca:	bf00      	nop
    1fcc:	20001674 	.word	0x20001674
    1fd0:	20001680 	.word	0x20001680
    1fd4:	20001678 	.word	0x20001678

00001fd8 <boot_console_init>:
{
    1fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	list->head = NULL;
    1fda:	2500      	movs	r5, #0
    1fdc:	4b1b      	ldr	r3, [pc, #108]	; (204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>)
	list->head = node;
    1fde:	4a1c      	ldr	r2, [pc, #112]	; (2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>)
	list->tail = NULL;
    1fe0:	e9c3 5500 	strd	r5, r5, [r3]
	list->head = node;
    1fe4:	4b1b      	ldr	r3, [pc, #108]	; (2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>)

static int
boot_uart_fifo_init(void)
{
#ifdef CONFIG_BOOT_SERIAL_UART
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1fe6:	4c1c      	ldr	r4, [pc, #112]	; (2058 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58>)
    1fe8:	481c      	ldr	r0, [pc, #112]	; (205c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5c>)
	parent->next = child;
    1fea:	f503 7102 	add.w	r1, r3, #520	; 0x208
	list->head = node;
    1fee:	6013      	str	r3, [r2, #0]
	parent->next = child;
    1ff0:	f8c3 5208 	str.w	r5, [r3, #520]	; 0x208
    1ff4:	6019      	str	r1, [r3, #0]
	list->tail = node;
    1ff6:	6051      	str	r1, [r2, #4]
    1ff8:	6020      	str	r0, [r4, #0]
    1ffa:	f006 fb07 	bl	860c <z_device_is_ready>
#elif CONFIG_BOOT_SERIAL_CDC_ACM
	uart_dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
#endif

	if (!device_is_ready(uart_dev)) {
    1ffe:	b310      	cbz	r0, 2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
	if (rc) {
		return (-1);
	}
#endif

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);
    2000:	6820      	ldr	r0, [r4, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    2002:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    2004:	b123      	cbz	r3, 2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>
    2006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2008:	b113      	cbz	r3, 2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>
		api->irq_callback_set(dev, cb, user_data);
    200a:	462a      	mov	r2, r5
    200c:	4914      	ldr	r1, [pc, #80]	; (2060 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x60>)
    200e:	4798      	blx	r3

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    2010:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_ready == NULL) {
    2012:	6883      	ldr	r3, [r0, #8]
    2014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2016:	b10b      	cbz	r3, 201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
	return api->irq_rx_ready(dev);
    2018:	4798      	blx	r3
    201a:	b148      	cbz	r0, 2030 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x30>
		uint8_t c;

		while (uart_fifo_read(uart_dev, &c, 1)) {
    201c:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read == NULL) {
    201e:	6883      	ldr	r3, [r0, #8]
    2020:	699b      	ldr	r3, [r3, #24]
    2022:	2b00      	cmp	r3, #0
    2024:	d0fa      	beq.n	201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
	return api->fifo_read(dev, rx_data, size);
    2026:	2201      	movs	r2, #1
    2028:	f10d 0107 	add.w	r1, sp, #7
    202c:	4798      	blx	r3
    202e:	e7f4      	b.n	201a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a>
			;
		}
	}

	cur = 0;
    2030:	2200      	movs	r2, #0
    2032:	4b0c      	ldr	r3, [pc, #48]	; (2064 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x64>)

	uart_irq_rx_enable(uart_dev);
    2034:	6820      	ldr	r0, [r4, #0]
	cur = 0;
    2036:	801a      	strh	r2, [r3, #0]
	if (api->irq_rx_enable != NULL) {
    2038:	6883      	ldr	r3, [r0, #8]
    203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    203c:	b103      	cbz	r3, 2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>
		api->irq_rx_enable(dev);
    203e:	4798      	blx	r3

	return 0;
    2040:	2000      	movs	r0, #0
}
    2042:	b003      	add	sp, #12
    2044:	bd30      	pop	{r4, r5, pc}
		return (-1);
    2046:	f04f 30ff 	mov.w	r0, #4294967295
	return boot_uart_fifo_init();
    204a:	e7fa      	b.n	2042 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x42>
    204c:	20001678 	.word	0x20001678
    2050:	20001680 	.word	0x20001680
    2054:	20001688 	.word	0x20001688
    2058:	20001a98 	.word	0x20001a98
    205c:	000086e0 	.word	0x000086e0
    2060:	00001e7d 	.word	0x00001e7d
    2064:	20001ba8 	.word	0x20001ba8

00002068 <boot_serial_output>:
{
    char *data;
    int len;
    uint16_t crc;
    uint16_t totlen;
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    2068:	f640 1306 	movw	r3, #2310	; 0x906

    data = bs_obuf;
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;

    bs_hdr->nh_op++;
    bs_hdr->nh_flags = 0;
    206c:	2000      	movs	r0, #0
{
    206e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2072:	b0d9      	sub	sp, #356	; 0x164
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    2074:	f8ad 3008 	strh.w	r3, [sp, #8]
    bs_hdr->nh_op++;
    2078:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 2164 <boot_serial_output+0xfc>
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    207c:	4b3a      	ldr	r3, [pc, #232]	; (2168 <boot_serial_output+0x100>)
    bs_hdr->nh_op++;
    207e:	f8d9 1000 	ldr.w	r1, [r9]
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    2082:	681b      	ldr	r3, [r3, #0]
    2084:	4e39      	ldr	r6, [pc, #228]	; (216c <boot_serial_output+0x104>)
    bs_hdr->nh_len = htons(len);
    bs_hdr->nh_group = htons(bs_hdr->nh_group);

#ifdef __ZEPHYR__
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    2086:	2208      	movs	r2, #8
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    2088:	eba3 0806 	sub.w	r8, r3, r6
    bs_hdr->nh_op++;
    208c:	780b      	ldrb	r3, [r1, #0]
    bs_hdr->nh_flags = 0;
    208e:	7048      	strb	r0, [r1, #1]
    bs_hdr->nh_op++;
    2090:	3301      	adds	r3, #1
    2092:	700b      	strb	r3, [r1, #0]
    bs_hdr->nh_len = htons(len);
    2094:	fa98 f398 	rev16.w	r3, r8
    2098:	804b      	strh	r3, [r1, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    209a:	888b      	ldrh	r3, [r1, #4]

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    totlen = htons(totlen);

    memcpy(buf, &totlen, sizeof(totlen));
    totlen = sizeof(totlen);
    209c:	2702      	movs	r7, #2
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    209e:	ba5b      	rev16	r3, r3
    20a0:	808b      	strh	r3, [r1, #4]
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    20a2:	f003 fed3 	bl	5e4c <crc16_itu_t>
    crc =  crc16_itu_t(crc, data, len);
    20a6:	4642      	mov	r2, r8
    20a8:	4631      	mov	r1, r6
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    20aa:	f8ad 000c 	strh.w	r0, [sp, #12]
    crc =  crc16_itu_t(crc, data, len);
    20ae:	f003 fecd 	bl	5e4c <crc16_itu_t>
    boot_uf->write(pkt_start, sizeof(pkt_start));
    20b2:	4d2f      	ldr	r5, [pc, #188]	; (2170 <boot_serial_output+0x108>)
    crc = htons(crc);
    20b4:	ba40      	rev16	r0, r0
    boot_uf->write(pkt_start, sizeof(pkt_start));
    20b6:	682b      	ldr	r3, [r5, #0]
    20b8:	fa1f f488 	uxth.w	r4, r8
    crc = htons(crc);
    20bc:	f8ad 000c 	strh.w	r0, [sp, #12]
    boot_uf->write(pkt_start, sizeof(pkt_start));
    20c0:	2102      	movs	r1, #2
    20c2:	a802      	add	r0, sp, #8
    20c4:	685b      	ldr	r3, [r3, #4]
    20c6:	4798      	blx	r3
    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    20c8:	f104 030a 	add.w	r3, r4, #10
    totlen = htons(totlen);
    20cc:	ba5b      	rev16	r3, r3
    memcpy(buf, &totlen, sizeof(totlen));
    20ce:	f10d 010e 	add.w	r1, sp, #14
    20d2:	2202      	movs	r2, #2
    20d4:	a805      	add	r0, sp, #20
    totlen = htons(totlen);
    20d6:	f8ad 300e 	strh.w	r3, [sp, #14]
    memcpy(buf, &totlen, sizeof(totlen));
    20da:	f004 fa3b 	bl	6554 <memcpy>
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    20de:	f8d9 1000 	ldr.w	r1, [r9]
    20e2:	2208      	movs	r2, #8
    20e4:	f10d 0016 	add.w	r0, sp, #22
    totlen = sizeof(totlen);
    20e8:	f8ad 700e 	strh.w	r7, [sp, #14]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    20ec:	f004 fa32 	bl	6554 <memcpy>
    totlen += sizeof(*bs_hdr);
    20f0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    memcpy(&buf[totlen], data, len);
    20f4:	ab05      	add	r3, sp, #20
    totlen += sizeof(*bs_hdr);
    20f6:	3008      	adds	r0, #8
    20f8:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], data, len);
    20fa:	4642      	mov	r2, r8
    20fc:	4631      	mov	r1, r6
    totlen += sizeof(*bs_hdr);
    20fe:	f8ad 000e 	strh.w	r0, [sp, #14]
    memcpy(&buf[totlen], data, len);
    2102:	4418      	add	r0, r3
    2104:	f004 fa26 	bl	6554 <memcpy>
    totlen += len;
    2108:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    210c:	463a      	mov	r2, r7
    totlen += len;
    210e:	18e0      	adds	r0, r4, r3
    2110:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], &crc, sizeof(crc));
    2112:	ab05      	add	r3, sp, #20
    totlen += len;
    2114:	f8ad 000e 	strh.w	r0, [sp, #14]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    2118:	a903      	add	r1, sp, #12
    211a:	4418      	add	r0, r3
    211c:	f004 fa1a 	bl	6554 <memcpy>
    totlen += sizeof(crc);
    2120:	f8bd 300e 	ldrh.w	r3, [sp, #14]
#ifdef __ZEPHYR__
    size_t enc_len;
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    2124:	aa04      	add	r2, sp, #16
    totlen += sizeof(crc);
    2126:	443b      	add	r3, r7
    2128:	b29b      	uxth	r3, r3
    212a:	f8ad 300e 	strh.w	r3, [sp, #14]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    212e:	9300      	str	r3, [sp, #0]
    2130:	21bd      	movs	r1, #189	; 0xbd
    2132:	ab05      	add	r3, sp, #20
    2134:	a828      	add	r0, sp, #160	; 0xa0
    2136:	f7ff f9ab 	bl	1490 <base64_encode>
    totlen = enc_len;
    213a:	9904      	ldr	r1, [sp, #16]
    base64_encode((unsigned char *)encoded_buf, sizeof(encoded_buf), &enc_len, (unsigned char *)buf, totlen);
    totlen = enc_len;
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif
    boot_uf->write(encoded_buf, totlen);
    213c:	682b      	ldr	r3, [r5, #0]
    totlen = enc_len;
    213e:	f8ad 100e 	strh.w	r1, [sp, #14]
    boot_uf->write(encoded_buf, totlen);
    2142:	a828      	add	r0, sp, #160	; 0xa0
    2144:	685b      	ldr	r3, [r3, #4]
    2146:	b289      	uxth	r1, r1
    2148:	4798      	blx	r3
    boot_uf->write("\n", 1);
    214a:	682b      	ldr	r3, [r5, #0]
    214c:	2101      	movs	r1, #1
    214e:	685b      	ldr	r3, [r3, #4]
    2150:	4808      	ldr	r0, [pc, #32]	; (2174 <boot_serial_output+0x10c>)
    2152:	4798      	blx	r3
    BOOT_LOG_INF("TX");
    2154:	2149      	movs	r1, #73	; 0x49
    2156:	4808      	ldr	r0, [pc, #32]	; (2178 <boot_serial_output+0x110>)
    2158:	f003 fe8d 	bl	5e76 <z_log_minimal_printk>
}
    215c:	b059      	add	sp, #356	; 0x164
    215e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2162:	bf00      	nop
    2164:	20001ae0 	.word	0x20001ae0
    2168:	20001ab0 	.word	0x20001ab0
    216c:	200034aa 	.word	0x200034aa
    2170:	20001ae4 	.word	0x20001ae4
    2174:	00009be1 	.word	0x00009be1
    2178:	0000942e 	.word	0x0000942e

0000217c <erase_range>:
{
    217c:	b5f0      	push	{r4, r5, r6, r7, lr}
    217e:	4606      	mov	r6, r0
    if (end >= flash_area_get_size(fap)) {
    2180:	68b3      	ldr	r3, [r6, #8]
{
    2182:	460c      	mov	r4, r1
    if (end >= flash_area_get_size(fap)) {
    2184:	429a      	cmp	r2, r3
{
    2186:	4610      	mov	r0, r2
    2188:	b085      	sub	sp, #20
    if (end >= flash_area_get_size(fap)) {
    218a:	d21d      	bcs.n	21c8 <erase_range+0x4c>
    if (end < start) {
    218c:	4291      	cmp	r1, r2
    218e:	dc1d      	bgt.n	21cc <erase_range+0x50>
    if (flash_area_sector_from_off(end, &sect)) {
    2190:	a902      	add	r1, sp, #8
    2192:	f7fe f9e7 	bl	564 <flash_area_sector_from_off>
    2196:	b9b8      	cbnz	r0, 21c8 <erase_range+0x4c>
    size = flash_sector_get_off(&sect) + flash_sector_get_size(&sect) - start;
    2198:	e9dd 5302 	ldrd	r5, r3, [sp, #8]
    219c:	441d      	add	r5, r3
    BOOT_LOG_INF("Erasing range 0x%jx:0x%jx", (intmax_t)start,
    219e:	1e6b      	subs	r3, r5, #1
    21a0:	e9cd 3000 	strd	r3, r0, [sp]
    21a4:	4622      	mov	r2, r4
    21a6:	2149      	movs	r1, #73	; 0x49
    21a8:	480b      	ldr	r0, [pc, #44]	; (21d8 <erase_range+0x5c>)
    21aa:	17e3      	asrs	r3, r4, #31
    size = flash_sector_get_off(&sect) + flash_sector_get_size(&sect) - start;
    21ac:	1b2f      	subs	r7, r5, r4
    BOOT_LOG_INF("Erasing range 0x%jx:0x%jx", (intmax_t)start,
    21ae:	f003 fe62 	bl	5e76 <z_log_minimal_printk>
    rc = flash_area_erase(fap, start, size);
    21b2:	463a      	mov	r2, r7
    21b4:	4621      	mov	r1, r4
    21b6:	4630      	mov	r0, r6
    21b8:	f003 fe95 	bl	5ee6 <flash_area_erase>
    if (rc != 0) {
    21bc:	4602      	mov	r2, r0
    21be:	b140      	cbz	r0, 21d2 <erase_range+0x56>
        BOOT_LOG_ERR("Error %d while erasing range", rc);
    21c0:	2145      	movs	r1, #69	; 0x45
    21c2:	4806      	ldr	r0, [pc, #24]	; (21dc <erase_range+0x60>)
    21c4:	f003 fe57 	bl	5e76 <z_log_minimal_printk>
        return -EINVAL;
    21c8:	f06f 0415 	mvn.w	r4, #21
}
    21cc:	4620      	mov	r0, r4
    21ce:	b005      	add	sp, #20
    21d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return start + size;
    21d2:	462c      	mov	r4, r5
    21d4:	e7fa      	b.n	21cc <erase_range+0x50>
    21d6:	bf00      	nop
    21d8:	00009436 	.word	0x00009436
    21dc:	00009455 	.word	0x00009455

000021e0 <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    21e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    21e2:	680c      	ldr	r4, [r1, #0]
    21e4:	4f16      	ldr	r7, [pc, #88]	; (2240 <boot_serial_in_dec.constprop.0+0x60>)
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    21e6:	b085      	sub	sp, #20
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    21e8:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    21ea:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    21ec:	f5c4 6180 	rsb	r1, r4, #1024	; 0x400
    21f0:	9000      	str	r0, [sp, #0]
    21f2:	4b14      	ldr	r3, [pc, #80]	; (2244 <boot_serial_in_dec.constprop.0+0x64>)
    21f4:	1938      	adds	r0, r7, r4
    21f6:	aa03      	add	r2, sp, #12
    21f8:	3101      	adds	r1, #1
    21fa:	f7ff f9c7 	bl	158c <base64_decode>
    if (err) {
    21fe:	4604      	mov	r4, r0
    2200:	b9d0      	cbnz	r0, 2238 <boot_serial_in_dec.constprop.0+0x58>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    2202:	682b      	ldr	r3, [r5, #0]
    2204:	9a03      	ldr	r2, [sp, #12]
    2206:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    2208:	2b02      	cmp	r3, #2
    *out_off += rc;
    220a:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    220c:	d911      	bls.n	2232 <boot_serial_in_dec.constprop.0+0x52>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    220e:	883e      	ldrh	r6, [r7, #0]
    if (len != *out_off - sizeof(uint16_t)) {
    2210:	3b02      	subs	r3, #2
    2212:	ba76      	rev16	r6, r6
    2214:	b2b6      	uxth	r6, r6
    2216:	429e      	cmp	r6, r3
    2218:	d10b      	bne.n	2232 <boot_serial_in_dec.constprop.0+0x52>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16_itu_t(CRC16_INITIAL_CRC, out, len);
    221a:	4632      	mov	r2, r6
    221c:	1cb9      	adds	r1, r7, #2
    221e:	f003 fe15 	bl	5e4c <crc16_itu_t>
#elif __ESPRESSIF__
    crc = ~crc16_be(~CRC16_INITIAL_CRC, (uint8_t *)out, len);
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    2222:	b930      	cbnz	r0, 2232 <boot_serial_in_dec.constprop.0+0x52>
    2224:	2e02      	cmp	r6, #2
    2226:	d904      	bls.n	2232 <boot_serial_in_dec.constprop.0+0x52>
        return 0;
    }
    *out_off -= sizeof(crc);
    2228:	682b      	ldr	r3, [r5, #0]
    222a:	1e9a      	subs	r2, r3, #2
    222c:	602a      	str	r2, [r5, #0]
    out[*out_off] = '\0';
    222e:	54fc      	strb	r4, [r7, r3]

    return 1;
    2230:	2401      	movs	r4, #1
}
    2232:	4620      	mov	r0, r4
    2234:	b005      	add	sp, #20
    2236:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    2238:	f04f 34ff 	mov.w	r4, #4294967295
    223c:	e7f9      	b.n	2232 <boot_serial_in_dec.constprop.0+0x52>
    223e:	bf00      	nop
    2240:	2000352b 	.word	0x2000352b
    2244:	2000392e 	.word	0x2000392e

00002248 <zcbor_tstr_encode_ptr.constprop.0.isra.0>:
 */
static inline bool zcbor_bstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
{
	return zcbor_bstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
}
static inline bool zcbor_tstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
    2248:	b507      	push	{r0, r1, r2, lr}
{
	return zcbor_tstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
    224a:	e9cd 0100 	strd	r0, r1, [sp]
    224e:	4669      	mov	r1, sp
    2250:	4802      	ldr	r0, [pc, #8]	; (225c <zcbor_tstr_encode_ptr.constprop.0.isra.0+0x14>)
    2252:	f004 f890 	bl	6376 <zcbor_tstr_encode>
}
    2256:	b003      	add	sp, #12
    2258:	f85d fb04 	ldr.w	pc, [sp], #4
    225c:	20001ab0 	.word	0x20001ab0

00002260 <bs_rc_rsp>:
{
    2260:	b538      	push	{r3, r4, r5, lr}
    2262:	4605      	mov	r5, r0
    zcbor_map_start_encode(cbor_state, 10);
    2264:	4c0a      	ldr	r4, [pc, #40]	; (2290 <bs_rc_rsp+0x30>)
    2266:	210a      	movs	r1, #10
    2268:	4620      	mov	r0, r4
    226a:	f004 f896 	bl	639a <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    226e:	2102      	movs	r1, #2
    2270:	4808      	ldr	r0, [pc, #32]	; (2294 <bs_rc_rsp+0x34>)
    2272:	f7ff ffe9 	bl	2248 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_int32_put(cbor_state, rc_code);
    2276:	4629      	mov	r1, r5
    2278:	4620      	mov	r0, r4
    227a:	f004 f86c 	bl	6356 <zcbor_int32_put>
    zcbor_map_end_encode(cbor_state, 10);
    227e:	4620      	mov	r0, r4
    2280:	210a      	movs	r1, #10
    2282:	f004 f8a8 	bl	63d6 <zcbor_map_end_encode>
}
    2286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    boot_serial_output();
    228a:	f7ff beed 	b.w	2068 <boot_serial_output>
    228e:	bf00      	nop
    2290:	20001ab0 	.word	0x20001ab0
    2294:	00009477 	.word	0x00009477

00002298 <reset_cbor_state>:
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    2298:	2300      	movs	r3, #0
{
    229a:	b507      	push	{r0, r1, r2, lr}
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    229c:	4a05      	ldr	r2, [pc, #20]	; (22b4 <reset_cbor_state+0x1c>)
    229e:	9300      	str	r3, [sp, #0]
    22a0:	2102      	movs	r1, #2
    22a2:	f102 0380 	add.w	r3, r2, #128	; 0x80
    22a6:	4804      	ldr	r0, [pc, #16]	; (22b8 <reset_cbor_state+0x20>)
    22a8:	f004 f897 	bl	63da <zcbor_new_encode_state>
}
    22ac:	b003      	add	sp, #12
    22ae:	f85d fb04 	ldr.w	pc, [sp], #4
    22b2:	bf00      	nop
    22b4:	200034aa 	.word	0x200034aa
    22b8:	20001ab0 	.word	0x20001ab0

000022bc <boot_serial_input>:
{
    22bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len < sizeof(*hdr) ||
    22c0:	2907      	cmp	r1, #7
{
    22c2:	4604      	mov	r4, r0
    22c4:	b0a8      	sub	sp, #160	; 0xa0
    if (len < sizeof(*hdr) ||
    22c6:	f240 8094 	bls.w	23f2 <FIH_LABEL_FIH_CALL_END_798+0x78>
    22ca:	7803      	ldrb	r3, [r0, #0]
    22cc:	f013 06fd 	ands.w	r6, r3, #253	; 0xfd
    22d0:	f040 808f 	bne.w	23f2 <FIH_LABEL_FIH_CALL_END_798+0x78>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    22d4:	8843      	ldrh	r3, [r0, #2]
    22d6:	f1a1 0508 	sub.w	r5, r1, #8
    22da:	ba5b      	rev16	r3, r3
    22dc:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    22de:	42ab      	cmp	r3, r5
    22e0:	f0c0 8087 	bcc.w	23f2 <FIH_LABEL_FIH_CALL_END_798+0x78>
    bs_hdr = hdr;
    22e4:	4ba6      	ldr	r3, [pc, #664]	; (2580 <FIH_LABEL_FIH_CALL_END_798+0x206>)
    22e6:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    22e8:	8883      	ldrh	r3, [r0, #4]
    22ea:	ba5b      	rev16	r3, r3
    22ec:	8083      	strh	r3, [r0, #4]
    reset_cbor_state();
    22ee:	f7ff ffd3 	bl	2298 <reset_cbor_state>
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    22f2:	88a0      	ldrh	r0, [r4, #4]
    22f4:	2801      	cmp	r0, #1
    22f6:	f040 81c1 	bne.w	267c <FIH_LABEL_FIH_CALL_END_798+0x302>
        switch (hdr->nh_id) {
    22fa:	79e7      	ldrb	r7, [r4, #7]
    22fc:	b13f      	cbz	r7, 230e <boot_serial_input+0x52>
    22fe:	2f01      	cmp	r7, #1
    2300:	d07c      	beq.n	23fc <FIH_LABEL_FIH_CALL_END_798+0x82>
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    2302:	2008      	movs	r0, #8
}
    2304:	b028      	add	sp, #160	; 0xa0
    2306:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    230a:	f7ff bfa9 	b.w	2260 <bs_rc_rsp>
    zcbor_map_start_encode(cbor_state, 1);
    230e:	4601      	mov	r1, r0
    2310:	489c      	ldr	r0, [pc, #624]	; (2584 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    2312:	f004 f842 	bl	639a <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "images");
    2316:	2106      	movs	r1, #6
    2318:	489b      	ldr	r0, [pc, #620]	; (2588 <FIH_LABEL_FIH_CALL_END_798+0x20e>)
    231a:	f7ff ff95 	bl	2248 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_list_start_encode(cbor_state, 5);
    231e:	2105      	movs	r1, #5
    2320:	4898      	ldr	r0, [pc, #608]	; (2584 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    2322:	f004 f82b 	bl	637c <zcbor_list_start_encode>
        for (slot = 0; slot < 2; slot++) {
    2326:	463c      	mov	r4, r7
            if (hdr.ih_magic == IMAGE_MAGIC)
    2328:	f8df 8260 	ldr.w	r8, [pc, #608]	; 258c <FIH_LABEL_FIH_CALL_END_798+0x212>
            fih_int fih_rc = FIH_FAILURE;
    232c:	4f98      	ldr	r7, [pc, #608]	; (2590 <FIH_LABEL_FIH_CALL_END_798+0x216>)
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    232e:	f8df 9264 	ldr.w	r9, [pc, #612]	; 2594 <FIH_LABEL_FIH_CALL_END_798+0x21a>
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    2332:	4621      	mov	r1, r4
    2334:	2000      	movs	r0, #0
    2336:	f003 fa2f 	bl	5798 <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    233a:	a907      	add	r1, sp, #28
    233c:	b2c0      	uxtb	r0, r0
    233e:	f7ff fd3f 	bl	1dc0 <flash_area_open>
    2342:	4605      	mov	r5, r0
    2344:	2800      	cmp	r0, #0
    2346:	d149      	bne.n	23dc <FIH_LABEL_FIH_CALL_END_798+0x62>
                flash_area_read(fap, 0, &hdr, sizeof(hdr));
    2348:	2320      	movs	r3, #32
    234a:	4601      	mov	r1, r0
    234c:	eb0d 0203 	add.w	r2, sp, r3
    2350:	9807      	ldr	r0, [sp, #28]
    2352:	f003 fd9e 	bl	5e92 <flash_area_read>
            if (hdr.ih_magic == IMAGE_MAGIC)
    2356:	9b08      	ldr	r3, [sp, #32]
            fih_int fih_rc = FIH_FAILURE;
    2358:	683e      	ldr	r6, [r7, #0]
            if (hdr.ih_magic == IMAGE_MAGIC)
    235a:	4543      	cmp	r3, r8
    235c:	d10d      	bne.n	237a <FIH_LABEL_FIH_CALL_END_798>

0000235e <FIH_LABEL_FIH_CALL_START_774>:
                    FIH_CALL(bootutil_img_validate, fih_rc, NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    235e:	2340      	movs	r3, #64	; 0x40
    2360:	9301      	str	r3, [sp, #4]
    2362:	ab18      	add	r3, sp, #96	; 0x60
    2364:	9300      	str	r3, [sp, #0]
    2366:	4629      	mov	r1, r5
    2368:	4628      	mov	r0, r5
    236a:	e9cd 5503 	strd	r5, r5, [sp, #12]
    236e:	9b07      	ldr	r3, [sp, #28]
    2370:	9502      	str	r5, [sp, #8]
    2372:	aa08      	add	r2, sp, #32
    2374:	f7fe f90e 	bl	594 <bootutil_img_validate>
    2378:	4606      	mov	r6, r0

0000237a <FIH_LABEL_FIH_CALL_END_798>:
            flash_area_close(fap);
    237a:	9807      	ldr	r0, [sp, #28]
    237c:	f003 fd88 	bl	5e90 <flash_area_close>
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    2380:	f8d9 3000 	ldr.w	r3, [r9]
    2384:	42b3      	cmp	r3, r6
    2386:	d129      	bne.n	23dc <FIH_LABEL_FIH_CALL_END_798+0x62>
            zcbor_map_start_encode(cbor_state, 20);
    2388:	2114      	movs	r1, #20
    238a:	487e      	ldr	r0, [pc, #504]	; (2584 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    238c:	f004 f805 	bl	639a <zcbor_map_start_encode>
            zcbor_tstr_put_lit_cast(cbor_state, "slot");
    2390:	2104      	movs	r1, #4
    2392:	4881      	ldr	r0, [pc, #516]	; (2598 <FIH_LABEL_FIH_CALL_END_798+0x21e>)
    2394:	f7ff ff58 	bl	2248 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_uint32_put(cbor_state, slot);
    2398:	4621      	mov	r1, r4
    239a:	487a      	ldr	r0, [pc, #488]	; (2584 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    239c:	f003 ffdf 	bl	635e <zcbor_uint32_put>
            zcbor_tstr_put_lit_cast(cbor_state, "version");
    23a0:	2107      	movs	r1, #7
    23a2:	487e      	ldr	r0, [pc, #504]	; (259c <FIH_LABEL_FIH_CALL_END_798+0x222>)
    23a4:	f7ff ff50 	bl	2248 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
   snprintf(dst, maxlen, "%hu.%hu.%hu.%u", (uint16_t)ver->iv_major,
    23a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    23aa:	2140      	movs	r1, #64	; 0x40
    23ac:	9302      	str	r3, [sp, #8]
    23ae:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    23b2:	4a7b      	ldr	r2, [pc, #492]	; (25a0 <FIH_LABEL_FIH_CALL_END_798+0x226>)
    23b4:	9301      	str	r3, [sp, #4]
    23b6:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    23ba:	a818      	add	r0, sp, #96	; 0x60
    23bc:	9300      	str	r3, [sp, #0]
    23be:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    23c2:	f000 fe55 	bl	3070 <snprintf>
            zcbor_tstr_encode_ptr(cbor_state, tmpbuf, strlen((char *)tmpbuf));
    23c6:	a818      	add	r0, sp, #96	; 0x60
    23c8:	f004 f896 	bl	64f8 <strlen>
    23cc:	4601      	mov	r1, r0
    23ce:	a818      	add	r0, sp, #96	; 0x60
    23d0:	f7ff ff3a 	bl	2248 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_map_end_encode(cbor_state, 20);
    23d4:	2114      	movs	r1, #20
    23d6:	486b      	ldr	r0, [pc, #428]	; (2584 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    23d8:	f003 fffd 	bl	63d6 <zcbor_map_end_encode>
        for (slot = 0; slot < 2; slot++) {
    23dc:	b164      	cbz	r4, 23f8 <FIH_LABEL_FIH_CALL_END_798+0x7e>
    zcbor_list_end_encode(cbor_state, 5);
    23de:	2105      	movs	r1, #5
    23e0:	4868      	ldr	r0, [pc, #416]	; (2584 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    23e2:	f003 ffe9 	bl	63b8 <zcbor_list_end_encode>
    zcbor_map_end_encode(cbor_state, 1);
    23e6:	2101      	movs	r1, #1
    23e8:	4866      	ldr	r0, [pc, #408]	; (2584 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    23ea:	f003 fff4 	bl	63d6 <zcbor_map_end_encode>
    boot_serial_output();
    23ee:	f7ff fe3b 	bl	2068 <boot_serial_output>
}
    23f2:	b028      	add	sp, #160	; 0xa0
    23f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for (slot = 0; slot < 2; slot++) {
    23f8:	2401      	movs	r4, #1
    23fa:	e79a      	b.n	2332 <boot_serial_input+0x76>
    uint_fast8_t result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    23fc:	4629      	mov	r1, r5
    23fe:	ab07      	add	r3, sp, #28
    2400:	aa08      	add	r2, sp, #32
    2402:	f104 0008 	add.w	r0, r4, #8
    const struct flash_area *fap = NULL;
    2406:	9606      	str	r6, [sp, #24]
    uint_fast8_t result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    2408:	f000 fa30 	bl	286c <cbor_decode_Upload>
    if ((result != ZCBOR_SUCCESS) || (len != decoded_len)) {
    240c:	b328      	cbz	r0, 245a <FIH_LABEL_FIH_CALL_END_798+0xe0>
        rc = MGMT_ERR_EINVAL;
    240e:	2403      	movs	r4, #3
    BOOT_LOG_INF("RX: 0x%x", rc);
    2410:	4622      	mov	r2, r4
    2412:	2149      	movs	r1, #73	; 0x49
    2414:	4863      	ldr	r0, [pc, #396]	; (25a4 <FIH_LABEL_FIH_CALL_END_798+0x22a>)
    2416:	f003 fd2e 	bl	5e76 <z_log_minimal_printk>
    zcbor_map_start_encode(cbor_state, 10);
    241a:	210a      	movs	r1, #10
    241c:	4859      	ldr	r0, [pc, #356]	; (2584 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    241e:	f003 ffbc 	bl	639a <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    2422:	2102      	movs	r1, #2
    2424:	4860      	ldr	r0, [pc, #384]	; (25a8 <FIH_LABEL_FIH_CALL_END_798+0x22e>)
    2426:	f7ff ff0f 	bl	2248 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_int32_put(cbor_state, rc);
    242a:	4621      	mov	r1, r4
    242c:	4855      	ldr	r0, [pc, #340]	; (2584 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    242e:	f003 ff92 	bl	6356 <zcbor_int32_put>
    if (rc == 0) {
    2432:	b944      	cbnz	r4, 2446 <FIH_LABEL_FIH_CALL_END_798+0xcc>
        zcbor_tstr_put_lit_cast(cbor_state, "off");
    2434:	2103      	movs	r1, #3
    2436:	485d      	ldr	r0, [pc, #372]	; (25ac <FIH_LABEL_FIH_CALL_END_798+0x232>)
    2438:	f7ff ff06 	bl	2248 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
        zcbor_uint32_put(cbor_state, curr_off);
    243c:	4b5c      	ldr	r3, [pc, #368]	; (25b0 <FIH_LABEL_FIH_CALL_END_798+0x236>)
    243e:	4851      	ldr	r0, [pc, #324]	; (2584 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    2440:	6819      	ldr	r1, [r3, #0]
    2442:	f003 ff8c 	bl	635e <zcbor_uint32_put>
    zcbor_map_end_encode(cbor_state, 10);
    2446:	210a      	movs	r1, #10
    2448:	484e      	ldr	r0, [pc, #312]	; (2584 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    244a:	f003 ffc4 	bl	63d6 <zcbor_map_end_encode>
    boot_serial_output();
    244e:	f7ff fe0b 	bl	2068 <boot_serial_output>
    flash_area_close(fap);
    2452:	9806      	ldr	r0, [sp, #24]
    2454:	f003 fd1c 	bl	5e90 <flash_area_close>
}
    2458:	e7cb      	b.n	23f2 <FIH_LABEL_FIH_CALL_END_798+0x78>
    if ((result != ZCBOR_SUCCESS) || (len != decoded_len)) {
    245a:	9b07      	ldr	r3, [sp, #28]
    245c:	429d      	cmp	r5, r3
    245e:	d1d6      	bne.n	240e <FIH_LABEL_FIH_CALL_END_798+0x94>
    size_t img_size_tmp = SIZE_MAX;     /* Temp variable for image size */
    2460:	f04f 39ff 	mov.w	r9, #4294967295
    for (int i = 0; i < upload._Upload_members_count; i++) {
    2464:	4601      	mov	r1, r0
    size_t img_chunk_off = SIZE_MAX;    /* Offset of image chunk within image  */
    2466:	46c8      	mov	r8, r9
    size_t img_chunk_len = 0;           /* Length of received image chunk */
    2468:	4605      	mov	r5, r0
    const uint8_t *img_chunk = NULL;    /* Pointer to buffer with received image chunk */
    246a:	4607      	mov	r7, r0
    246c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    246e:	aa08      	add	r2, sp, #32
    for (int i = 0; i < upload._Upload_members_count; i++) {
    2470:	42a1      	cmp	r1, r4
    2472:	d122      	bne.n	24ba <FIH_LABEL_FIH_CALL_END_798+0x140>
    if (img_chunk_off == SIZE_MAX || img_chunk == NULL) {
    2474:	f1b8 3fff 	cmp.w	r8, #4294967295
    2478:	d0c9      	beq.n	240e <FIH_LABEL_FIH_CALL_END_798+0x94>
    247a:	2f00      	cmp	r7, #0
    247c:	d0c7      	beq.n	240e <FIH_LABEL_FIH_CALL_END_798+0x94>
    rc = flash_area_open(flash_area_id_from_multi_image_slot(img_num, 0), &fap);
    247e:	2100      	movs	r1, #0
    2480:	f003 f98a 	bl	5798 <flash_area_id_from_multi_image_slot>
    2484:	a906      	add	r1, sp, #24
    2486:	b2c0      	uxtb	r0, r0
    2488:	f7ff fc9a 	bl	1dc0 <flash_area_open>
    if (rc) {
    248c:	4604      	mov	r4, r0
    248e:	2800      	cmp	r0, #0
    2490:	d1bd      	bne.n	240e <FIH_LABEL_FIH_CALL_END_798+0x94>
    if (img_chunk_off == 0) {
    2492:	4e47      	ldr	r6, [pc, #284]	; (25b0 <FIH_LABEL_FIH_CALL_END_798+0x236>)
    2494:	f1b8 0f00 	cmp.w	r8, #0
    2498:	d166      	bne.n	2568 <FIH_LABEL_FIH_CALL_END_798+0x1ee>
        const size_t area_size = flash_area_get_size(fap);
    249a:	9806      	ldr	r0, [sp, #24]
        curr_off = 0;
    249c:	6034      	str	r4, [r6, #0]
	return (uint32_t)fa->fa_size;
    249e:	f8d0 8008 	ldr.w	r8, [r0, #8]
        if (flash_area_sector_from_off(boot_status_off(fap), &status_sector)) {
    24a2:	f003 fa32 	bl	590a <boot_status_off>
    24a6:	4943      	ldr	r1, [pc, #268]	; (25b4 <FIH_LABEL_FIH_CALL_END_798+0x23a>)
    24a8:	f7fe f85c 	bl	564 <flash_area_sector_from_off>
    24ac:	b1c8      	cbz	r0, 24e2 <FIH_LABEL_FIH_CALL_END_798+0x168>
            BOOT_LOG_ERR("Unable to determine flash sector of the image trailer");
    24ae:	2145      	movs	r1, #69	; 0x45
    24b0:	4841      	ldr	r0, [pc, #260]	; (25b8 <FIH_LABEL_FIH_CALL_END_798+0x23e>)
    24b2:	f003 fce0 	bl	5e76 <z_log_minimal_printk>
            rc = MGMT_ERR_EUNKNOWN;
    24b6:	2401      	movs	r4, #1
            goto out;
    24b8:	e7aa      	b.n	2410 <FIH_LABEL_FIH_CALL_END_798+0x96>
        switch(member->_Member_choice) {
    24ba:	7a13      	ldrb	r3, [r2, #8]
    24bc:	2b03      	cmp	r3, #3
    24be:	d804      	bhi.n	24ca <FIH_LABEL_FIH_CALL_END_798+0x150>
    24c0:	e8df f003 	tbb	[pc, r3]
    24c4:	0c090602 	.word	0x0c090602
                img_num = member->_Member_image;
    24c8:	6810      	ldr	r0, [r2, #0]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    24ca:	3101      	adds	r1, #1
    24cc:	320c      	adds	r2, #12
    24ce:	e7cf      	b.n	2470 <FIH_LABEL_FIH_CALL_END_798+0xf6>
                img_chunk_len = member->_Member_data.len;
    24d0:	e9d2 7500 	ldrd	r7, r5, [r2]
                break;
    24d4:	e7f9      	b.n	24ca <FIH_LABEL_FIH_CALL_END_798+0x150>
                img_size_tmp = member->_Member_len;
    24d6:	f8d2 9000 	ldr.w	r9, [r2]
                break;
    24da:	e7f6      	b.n	24ca <FIH_LABEL_FIH_CALL_END_798+0x150>
                img_chunk_off = member->_Member_off;
    24dc:	f8d2 8000 	ldr.w	r8, [r2]
                break;
    24e0:	e7f3      	b.n	24ca <FIH_LABEL_FIH_CALL_END_798+0x150>
        if (img_size_tmp > area_size) {
    24e2:	45c8      	cmp	r8, r9
    24e4:	d393      	bcc.n	240e <FIH_LABEL_FIH_CALL_END_798+0x94>
        not_yet_erased = 0;
    24e6:	4b35      	ldr	r3, [pc, #212]	; (25bc <FIH_LABEL_FIH_CALL_END_798+0x242>)
    24e8:	601c      	str	r4, [r3, #0]
        img_size = img_size_tmp;
    24ea:	4b35      	ldr	r3, [pc, #212]	; (25c0 <FIH_LABEL_FIH_CALL_END_798+0x246>)
    24ec:	f8c3 9000 	str.w	r9, [r3]
                                 curr_off + img_chunk_len - 1);
    24f0:	6832      	ldr	r2, [r6, #0]
    not_yet_erased = erase_range(fap, not_yet_erased,
    24f2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 25bc <FIH_LABEL_FIH_CALL_END_798+0x242>
                                 curr_off + img_chunk_len - 1);
    24f6:	3a01      	subs	r2, #1
    not_yet_erased = erase_range(fap, not_yet_erased,
    24f8:	f8d8 1000 	ldr.w	r1, [r8]
    24fc:	9806      	ldr	r0, [sp, #24]
    24fe:	442a      	add	r2, r5
    2500:	f7ff fe3c 	bl	217c <erase_range>
    if (not_yet_erased < 0) {
    2504:	2800      	cmp	r0, #0
    not_yet_erased = erase_range(fap, not_yet_erased,
    2506:	f8c8 0000 	str.w	r0, [r8]
    if (not_yet_erased < 0) {
    250a:	db80      	blt.n	240e <FIH_LABEL_FIH_CALL_END_798+0x94>
    rem_bytes = img_chunk_len % flash_area_align(fap);
    250c:	9806      	ldr	r0, [sp, #24]
    250e:	f003 fcfe 	bl	5f0e <flash_area_align>
    2512:	fbb5 f3f0 	udiv	r3, r5, r0
    2516:	fb03 5010 	mls	r0, r3, r0, r5
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    251a:	6832      	ldr	r2, [r6, #0]
    251c:	b2c1      	uxtb	r1, r0
    251e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 25c0 <FIH_LABEL_FIH_CALL_END_798+0x246>
    img_chunk_len -= rem_bytes;
    2522:	eba5 0801 	sub.w	r8, r5, r1
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    2526:	eb08 0302 	add.w	r3, r8, r2
    252a:	f8d9 5000 	ldr.w	r5, [r9]
    252e:	4419      	add	r1, r3
    2530:	42a9      	cmp	r1, r5
    2532:	bf38      	it	cc
    2534:	2000      	movcc	r0, #0
    BOOT_LOG_INF("Writing at 0x%x until 0x%x", curr_off, curr_off + img_chunk_len);
    2536:	2149      	movs	r1, #73	; 0x49
    2538:	b2c5      	uxtb	r5, r0
    253a:	4822      	ldr	r0, [pc, #136]	; (25c4 <FIH_LABEL_FIH_CALL_END_798+0x24a>)
    253c:	f003 fc9b 	bl	5e76 <z_log_minimal_printk>
    if (flash_area_align(fap) > 1 &&
    2540:	9806      	ldr	r0, [sp, #24]
    2542:	f003 fce4 	bl	5f0e <flash_area_align>
    2546:	2801      	cmp	r0, #1
    2548:	d905      	bls.n	2556 <FIH_LABEL_FIH_CALL_END_798+0x1dc>
        (((size_t)img_chunk) & (flash_area_align(fap) - 1)) != 0) {
    254a:	9806      	ldr	r0, [sp, #24]
    254c:	f003 fcdf 	bl	5f0e <flash_area_align>
    2550:	3801      	subs	r0, #1
    if (flash_area_align(fap) > 1 &&
    2552:	4207      	tst	r7, r0
    2554:	d16f      	bne.n	2636 <FIH_LABEL_FIH_CALL_END_798+0x2bc>
        rc = flash_area_write(fap, curr_off, img_chunk, img_chunk_len);
    2556:	4643      	mov	r3, r8
    2558:	463a      	mov	r2, r7
    255a:	6831      	ldr	r1, [r6, #0]
    255c:	9806      	ldr	r0, [sp, #24]
    255e:	f003 fcad 	bl	5ebc <flash_area_write>
    if (rc == 0 && rem_bytes) {
    2562:	2800      	cmp	r0, #0
    2564:	d055      	beq.n	2612 <FIH_LABEL_FIH_CALL_END_798+0x298>
    2566:	e752      	b.n	240e <FIH_LABEL_FIH_CALL_END_798+0x94>
    } else if (img_chunk_off != curr_off) {
    2568:	6833      	ldr	r3, [r6, #0]
    256a:	4543      	cmp	r3, r8
    256c:	f47f af50 	bne.w	2410 <FIH_LABEL_FIH_CALL_END_798+0x96>
    } else if (curr_off + img_chunk_len > img_size) {
    2570:	4a13      	ldr	r2, [pc, #76]	; (25c0 <FIH_LABEL_FIH_CALL_END_798+0x246>)
    2572:	eb05 0308 	add.w	r3, r5, r8
    2576:	6812      	ldr	r2, [r2, #0]
    2578:	4293      	cmp	r3, r2
    257a:	d9b9      	bls.n	24f0 <FIH_LABEL_FIH_CALL_END_798+0x176>
    257c:	e747      	b.n	240e <FIH_LABEL_FIH_CALL_END_798+0x94>
    257e:	bf00      	nop
    2580:	20001ae0 	.word	0x20001ae0
    2584:	20001ab0 	.word	0x20001ab0
    2588:	0000947a 	.word	0x0000947a
    258c:	96f3b83d 	.word	0x96f3b83d
    2590:	20000000 	.word	0x20000000
    2594:	20000208 	.word	0x20000208
    2598:	00009481 	.word	0x00009481
    259c:	00009486 	.word	0x00009486
    25a0:	0000948e 	.word	0x0000948e
    25a4:	000094bd 	.word	0x000094bd
    25a8:	00009477 	.word	0x00009477
    25ac:	000094cb 	.word	0x000094cb
    25b0:	20001aac 	.word	0x20001aac
    25b4:	20001aa4 	.word	0x20001aa4
    25b8:	00008ea9 	.word	0x00008ea9
    25bc:	20001aa0 	.word	0x20001aa0
    25c0:	20001a9c 	.word	0x20001a9c
    25c4:	0000949d 	.word	0x0000949d
            if (write_size > img_chunk_len) {
    25c8:	45c2      	cmp	sl, r8
            memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    25ca:	9806      	ldr	r0, [sp, #24]
                write_size = img_chunk_len;
    25cc:	bf88      	it	hi
    25ce:	fa5f fa88 	uxtbhi.w	sl, r8
            memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    25d2:	f003 fca3 	bl	5f1c <flash_area_erased_val>
    25d6:	2240      	movs	r2, #64	; 0x40
    25d8:	4601      	mov	r1, r0
    25da:	a818      	add	r0, sp, #96	; 0x60
    25dc:	f003 ffc5 	bl	656a <memset>
            memcpy(wbs_aligned, img_chunk, write_size);
    25e0:	4652      	mov	r2, sl
    25e2:	4639      	mov	r1, r7
    25e4:	a818      	add	r0, sp, #96	; 0x60
    25e6:	f003 ffb5 	bl	6554 <memcpy>
            rc = flash_area_write(fap, curr_off, wbs_aligned, write_size);
    25ea:	4653      	mov	r3, sl
    25ec:	6831      	ldr	r1, [r6, #0]
    25ee:	9806      	ldr	r0, [sp, #24]
    25f0:	aa18      	add	r2, sp, #96	; 0x60
    25f2:	f003 fc63 	bl	5ebc <flash_area_write>
            if (rc != 0) {
    25f6:	2800      	cmp	r0, #0
    25f8:	f47f af09 	bne.w	240e <FIH_LABEL_FIH_CALL_END_798+0x94>
            curr_off += write_size;
    25fc:	6833      	ldr	r3, [r6, #0]
            img_chunk += write_size;
    25fe:	4457      	add	r7, sl
            curr_off += write_size;
    2600:	4453      	add	r3, sl
    2602:	6033      	str	r3, [r6, #0]
            img_chunk_len -= write_size;
    2604:	eba8 080a 	sub.w	r8, r8, sl
        while (img_chunk_len >= flash_area_align(fap)) {
    2608:	9806      	ldr	r0, [sp, #24]
    260a:	f003 fc80 	bl	5f0e <flash_area_align>
    260e:	4580      	cmp	r8, r0
    2610:	d2da      	bcs.n	25c8 <FIH_LABEL_FIH_CALL_END_798+0x24e>
    if (rc == 0 && rem_bytes) {
    2612:	b99d      	cbnz	r5, 263c <FIH_LABEL_FIH_CALL_END_798+0x2c2>
        curr_off += img_chunk_len + rem_bytes;
    2614:	6833      	ldr	r3, [r6, #0]
        if (curr_off == img_size) {
    2616:	f8d9 2000 	ldr.w	r2, [r9]
        curr_off += img_chunk_len + rem_bytes;
    261a:	442b      	add	r3, r5
    261c:	4443      	add	r3, r8
        if (curr_off == img_size) {
    261e:	4293      	cmp	r3, r2
        curr_off += img_chunk_len + rem_bytes;
    2620:	6033      	str	r3, [r6, #0]
        if (curr_off == img_size) {
    2622:	f47f aef5 	bne.w	2410 <FIH_LABEL_FIH_CALL_END_798+0x96>
	return fs->fs_off;
    2626:	4b20      	ldr	r3, [pc, #128]	; (26a8 <FIH_LABEL_FIH_CALL_END_798+0x32e>)
            if (erase_range(fap, start, start) < 0) {
    2628:	9806      	ldr	r0, [sp, #24]
    262a:	681a      	ldr	r2, [r3, #0]
    262c:	4611      	mov	r1, r2
    262e:	f7ff fda5 	bl	217c <erase_range>
    2632:	0fc4      	lsrs	r4, r0, #31
    2634:	e6ec      	b.n	2410 <FIH_LABEL_FIH_CALL_END_798+0x96>
        uint8_t write_size = MCUBOOT_SERIAL_UNALIGNED_BUFFER_SIZE;
    2636:	f04f 0a40 	mov.w	sl, #64	; 0x40
    263a:	e7e5      	b.n	2608 <FIH_LABEL_FIH_CALL_END_798+0x28e>
        memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    263c:	9806      	ldr	r0, [sp, #24]
    263e:	f003 fc6d 	bl	5f1c <flash_area_erased_val>
    2642:	2208      	movs	r2, #8
    2644:	4601      	mov	r1, r0
    2646:	a818      	add	r0, sp, #96	; 0x60
    2648:	f003 ff8f 	bl	656a <memset>
        memcpy(wbs_aligned, img_chunk + img_chunk_len, rem_bytes);
    264c:	462a      	mov	r2, r5
    264e:	eb07 0108 	add.w	r1, r7, r8
    2652:	a818      	add	r0, sp, #96	; 0x60
    2654:	f003 ff7e 	bl	6554 <memcpy>
        rc = flash_area_write(fap, curr_off + img_chunk_len, wbs_aligned,
    2658:	f8dd a018 	ldr.w	sl, [sp, #24]
    265c:	6831      	ldr	r1, [r6, #0]
    265e:	4650      	mov	r0, sl
    2660:	eb08 0701 	add.w	r7, r8, r1
    2664:	f003 fc53 	bl	5f0e <flash_area_align>
    2668:	4639      	mov	r1, r7
    266a:	4603      	mov	r3, r0
    266c:	aa18      	add	r2, sp, #96	; 0x60
    266e:	4650      	mov	r0, sl
    2670:	f003 fc24 	bl	5ebc <flash_area_write>
    if (rc == 0) {
    2674:	2800      	cmp	r0, #0
    2676:	f47f aeca 	bne.w	240e <FIH_LABEL_FIH_CALL_END_798+0x94>
    267a:	e7cb      	b.n	2614 <FIH_LABEL_FIH_CALL_END_798+0x29a>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    267c:	2800      	cmp	r0, #0
    267e:	f47f ae40 	bne.w	2302 <boot_serial_input+0x46>
        switch (hdr->nh_id) {
    2682:	79e3      	ldrb	r3, [r4, #7]
    2684:	2b01      	cmp	r3, #1
    2686:	f43f ae3d 	beq.w	2304 <boot_serial_input+0x48>
    268a:	2b05      	cmp	r3, #5
    268c:	d003      	beq.n	2696 <FIH_LABEL_FIH_CALL_END_798+0x31c>
    268e:	2b00      	cmp	r3, #0
    2690:	f47f ae37 	bne.w	2302 <boot_serial_input+0x46>
    2694:	e6ad      	b.n	23f2 <FIH_LABEL_FIH_CALL_END_798+0x78>
    bs_rc_rsp(0);
    2696:	f7ff fde3 	bl	2260 <bs_rc_rsp>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    269a:	4804      	ldr	r0, [pc, #16]	; (26ac <FIH_LABEL_FIH_CALL_END_798+0x332>)
    269c:	f005 ffcb 	bl	8636 <z_impl_k_busy_wait>
    sys_reboot(SYS_REBOOT_COLD);
    26a0:	2001      	movs	r0, #1
    26a2:	f7ff fb59 	bl	1d58 <sys_reboot>
    26a6:	bf00      	nop
    26a8:	20001aa4 	.word	0x20001aa4
    26ac:	0003d090 	.word	0x0003d090

000026b0 <boot_serial_start>:
 * serial port.
 */
void
boot_serial_start(const struct boot_uart_funcs *f)
{
    bs_entry = true;
    26b0:	2301      	movs	r3, #1
{
    26b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int dec_off = 0;
    26b6:	2400      	movs	r4, #0
{
    26b8:	4606      	mov	r6, r0
    bs_entry = true;
    26ba:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 275c <boot_serial_start+0xac>
    26be:	4d28      	ldr	r5, [pc, #160]	; (2760 <boot_serial_start+0xb0>)
    26c0:	f888 3000 	strb.w	r3, [r8]
    boot_uf = f;
    26c4:	4b27      	ldr	r3, [pc, #156]	; (2764 <boot_serial_start+0xb4>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    26c6:	4f28      	ldr	r7, [pc, #160]	; (2768 <boot_serial_start+0xb8>)
    int dec_off = 0;
    26c8:	9400      	str	r4, [sp, #0]
    boot_uf = f;
    26ca:	6018      	str	r0, [r3, #0]
    while (timeout_in_ms > 0 || bs_entry) {
    26cc:	f898 3000 	ldrb.w	r3, [r8]
    26d0:	b913      	cbnz	r3, 26d8 <boot_serial_start+0x28>
    boot_serial_read_console(f,0);
}
    26d2:	b002      	add	sp, #8
    26d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26d8:	f000 f970 	bl	29bc <arch_cpu_idle>
    26dc:	4b23      	ldr	r3, [pc, #140]	; (276c <boot_serial_start+0xbc>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    26de:	f5c4 6180 	rsb	r1, r4, #1024	; 0x400
    26e2:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    26e6:	f8c3 5604 	str.w	r5, [r3, #1540]	; 0x604
    26ea:	f8c3 5608 	str.w	r5, [r3, #1544]	; 0x608
    26ee:	f8c3 560c 	str.w	r5, [r3, #1548]	; 0x60c
    26f2:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
    26f6:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
    26fa:	f8c3 5618 	str.w	r5, [r3, #1560]	; 0x618
    26fe:	f8c3 561c 	str.w	r5, [r3, #1564]	; 0x61c
    2702:	6833      	ldr	r3, [r6, #0]
    2704:	aa01      	add	r2, sp, #4
    2706:	3101      	adds	r1, #1
    2708:	1938      	adds	r0, r7, r4
    270a:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    270c:	2800      	cmp	r0, #0
    270e:	9b01      	ldr	r3, [sp, #4]
    2710:	dc01      	bgt.n	2716 <boot_serial_start+0x66>
    2712:	2b00      	cmp	r3, #0
    2714:	d0da      	beq.n	26cc <boot_serial_start+0x1c>
        off += rc;
    2716:	4404      	add	r4, r0
        if (!full_line) {
    2718:	b92b      	cbnz	r3, 2726 <boot_serial_start+0x76>
            if (off == max_input) {
    271a:	f240 4301 	movw	r3, #1025	; 0x401
    271e:	429c      	cmp	r4, r3
    2720:	d1d4      	bne.n	26cc <boot_serial_start+0x1c>
                off = 0;
    2722:	2400      	movs	r4, #0
    2724:	e7d2      	b.n	26cc <boot_serial_start+0x1c>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    2726:	783b      	ldrb	r3, [r7, #0]
    2728:	2b06      	cmp	r3, #6
    272a:	d109      	bne.n	2740 <boot_serial_start+0x90>
    272c:	787b      	ldrb	r3, [r7, #1]
    272e:	2b09      	cmp	r3, #9
    2730:	d10b      	bne.n	274a <boot_serial_start+0x9a>
            dec_off = 0;
    2732:	2300      	movs	r3, #0
    2734:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    2736:	4669      	mov	r1, sp
    2738:	1ea0      	subs	r0, r4, #2
    273a:	f7ff fd51 	bl	21e0 <boot_serial_in_dec.constprop.0>
    273e:	e004      	b.n	274a <boot_serial_start+0x9a>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    2740:	2b04      	cmp	r3, #4
    2742:	d102      	bne.n	274a <boot_serial_start+0x9a>
    2744:	787b      	ldrb	r3, [r7, #1]
    2746:	2b14      	cmp	r3, #20
    2748:	d0f5      	beq.n	2736 <boot_serial_start+0x86>
        if (rc == 1) {
    274a:	2801      	cmp	r0, #1
    274c:	d1e9      	bne.n	2722 <boot_serial_start+0x72>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    274e:	9900      	ldr	r1, [sp, #0]
    2750:	4807      	ldr	r0, [pc, #28]	; (2770 <boot_serial_start+0xc0>)
    2752:	3902      	subs	r1, #2
    2754:	f7ff fdb2 	bl	22bc <boot_serial_input>
    2758:	e7e3      	b.n	2722 <boot_serial_start+0x72>
    275a:	bf00      	nop
    275c:	2000352a 	.word	0x2000352a
    2760:	6e524635 	.word	0x6e524635
    2764:	20001ae4 	.word	0x20001ae4
    2768:	2000392c 	.word	0x2000392c
    276c:	50018000 	.word	0x50018000
    2770:	2000352d 	.word	0x2000352d

00002774 <decode_repeated_Upload_members>:
	return tmp_result;
}

static bool decode_repeated_Upload_members(
		zcbor_state_t *state, struct Upload_members *result)
{
    2774:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2776:	4604      	mov	r4, r0
    2778:	460d      	mov	r5, r1
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    277a:	f003 fe81 	bl	6480 <zcbor_union_start_code>
    277e:	2800      	cmp	r0, #0
    2780:	d068      	beq.n	2854 <CONFIG_MAIN_STACK_SIZE+0x54>
    2782:	4b35      	ldr	r3, [pc, #212]	; (2858 <CONFIG_MAIN_STACK_SIZE+0x58>)
    2784:	4669      	mov	r1, sp
    2786:	9300      	str	r3, [sp, #0]
    2788:	2305      	movs	r3, #5
    278a:	4620      	mov	r0, r4
    278c:	9301      	str	r3, [sp, #4]
    278e:	f003 fd4d 	bl	622c <zcbor_tstr_expect>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"sha", tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    2792:	b160      	cbz	r0, 27ae <decode_repeated_Upload_members+0x3a>
	&& (zcbor_int32_decode(state, (&(*result)._Member_image)))) && (((*result)._Member_choice = _Member_image) || 1))
    2794:	4629      	mov	r1, r5
    2796:	4620      	mov	r0, r4
    2798:	f003 fd29 	bl	61ee <zcbor_int32_decode>
    279c:	b138      	cbz	r0, 27ae <decode_repeated_Upload_members+0x3a>
    279e:	2300      	movs	r3, #0
    27a0:	722b      	strb	r3, [r5, #8]
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    27a2:	4620      	mov	r0, r4
    27a4:	f003 fe73 	bl	648e <zcbor_union_end_code>
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    27a8:	2001      	movs	r0, #1

	if (!tmp_result)
		zcbor_trace();

	return tmp_result;
}
    27aa:	b002      	add	sp, #8
    27ac:	bd70      	pop	{r4, r5, r6, pc}
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"data", tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    27ae:	4620      	mov	r0, r4
    27b0:	f003 fe69 	bl	6486 <zcbor_union_elem_code>
    27b4:	b178      	cbz	r0, 27d6 <decode_repeated_Upload_members+0x62>
    27b6:	4b29      	ldr	r3, [pc, #164]	; (285c <CONFIG_MAIN_STACK_SIZE+0x5c>)
    27b8:	4669      	mov	r1, sp
    27ba:	9300      	str	r3, [sp, #0]
    27bc:	2304      	movs	r3, #4
    27be:	4620      	mov	r0, r4
    27c0:	9301      	str	r3, [sp, #4]
    27c2:	f003 fd33 	bl	622c <zcbor_tstr_expect>
    27c6:	b130      	cbz	r0, 27d6 <decode_repeated_Upload_members+0x62>
	&& (zcbor_bstr_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    27c8:	4629      	mov	r1, r5
    27ca:	4620      	mov	r0, r4
    27cc:	f003 fd2b 	bl	6226 <zcbor_bstr_decode>
    27d0:	b108      	cbz	r0, 27d6 <decode_repeated_Upload_members+0x62>
    27d2:	2301      	movs	r3, #1
    27d4:	e7e4      	b.n	27a0 <decode_repeated_Upload_members+0x2c>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"len", tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    27d6:	4620      	mov	r0, r4
    27d8:	f003 fe55 	bl	6486 <zcbor_union_elem_code>
    27dc:	b178      	cbz	r0, 27fe <decode_repeated_Upload_members+0x8a>
    27de:	4b20      	ldr	r3, [pc, #128]	; (2860 <CONFIG_MAIN_STACK_SIZE+0x60>)
    27e0:	4669      	mov	r1, sp
    27e2:	9300      	str	r3, [sp, #0]
    27e4:	2303      	movs	r3, #3
    27e6:	4620      	mov	r0, r4
    27e8:	9301      	str	r3, [sp, #4]
    27ea:	f003 fd1f 	bl	622c <zcbor_tstr_expect>
    27ee:	b130      	cbz	r0, 27fe <decode_repeated_Upload_members+0x8a>
	&& (zcbor_int32_decode(state, (&(*result)._Member_len)))) && (((*result)._Member_choice = _Member_len) || 1)))
    27f0:	4629      	mov	r1, r5
    27f2:	4620      	mov	r0, r4
    27f4:	f003 fcfb 	bl	61ee <zcbor_int32_decode>
    27f8:	b108      	cbz	r0, 27fe <decode_repeated_Upload_members+0x8a>
    27fa:	2302      	movs	r3, #2
    27fc:	e7d0      	b.n	27a0 <decode_repeated_Upload_members+0x2c>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"off", tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    27fe:	4620      	mov	r0, r4
    2800:	f003 fe41 	bl	6486 <zcbor_union_elem_code>
    2804:	b178      	cbz	r0, 2826 <CONFIG_MAIN_STACK_SIZE+0x26>
    2806:	2603      	movs	r6, #3
    2808:	4b16      	ldr	r3, [pc, #88]	; (2864 <CONFIG_MAIN_STACK_SIZE+0x64>)
    280a:	4669      	mov	r1, sp
    280c:	4620      	mov	r0, r4
    280e:	9300      	str	r3, [sp, #0]
    2810:	9601      	str	r6, [sp, #4]
    2812:	f003 fd0b 	bl	622c <zcbor_tstr_expect>
    2816:	b130      	cbz	r0, 2826 <CONFIG_MAIN_STACK_SIZE+0x26>
	&& (zcbor_int32_decode(state, (&(*result)._Member_off)))) && (((*result)._Member_choice = _Member_off) || 1)))
    2818:	4629      	mov	r1, r5
    281a:	4620      	mov	r0, r4
    281c:	f003 fce7 	bl	61ee <zcbor_int32_decode>
    2820:	b108      	cbz	r0, 2826 <CONFIG_MAIN_STACK_SIZE+0x26>
    2822:	722e      	strb	r6, [r5, #8]
    2824:	e7bd      	b.n	27a2 <decode_repeated_Upload_members+0x2e>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"sha", tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    2826:	4620      	mov	r0, r4
    2828:	f003 fe2d 	bl	6486 <zcbor_union_elem_code>
    282c:	b178      	cbz	r0, 284e <CONFIG_MAIN_STACK_SIZE+0x4e>
    282e:	4b0e      	ldr	r3, [pc, #56]	; (2868 <CONFIG_MAIN_STACK_SIZE+0x68>)
    2830:	4669      	mov	r1, sp
    2832:	9300      	str	r3, [sp, #0]
    2834:	2303      	movs	r3, #3
    2836:	4620      	mov	r0, r4
    2838:	9301      	str	r3, [sp, #4]
    283a:	f003 fcf7 	bl	622c <zcbor_tstr_expect>
    283e:	b130      	cbz	r0, 284e <CONFIG_MAIN_STACK_SIZE+0x4e>
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    2840:	4629      	mov	r1, r5
    2842:	4620      	mov	r0, r4
    2844:	f003 fcef 	bl	6226 <zcbor_bstr_decode>
    2848:	b108      	cbz	r0, 284e <CONFIG_MAIN_STACK_SIZE+0x4e>
    284a:	2304      	movs	r3, #4
    284c:	e7a8      	b.n	27a0 <decode_repeated_Upload_members+0x2c>
    284e:	4620      	mov	r0, r4
    2850:	f003 fe1d 	bl	648e <zcbor_union_end_code>
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    2854:	2000      	movs	r0, #0
    2856:	e7a8      	b.n	27aa <decode_repeated_Upload_members+0x36>
    2858:	0000910f 	.word	0x0000910f
    285c:	000094cf 	.word	0x000094cf
    2860:	000094d4 	.word	0x000094d4
    2864:	000094cb 	.word	0x000094cb
    2868:	000094d8 	.word	0x000094d8

0000286c <cbor_decode_Upload>:

int cbor_decode_Upload(
		const uint8_t *payload, size_t payload_len,
		struct Upload *result,
		size_t *payload_len_out)
{
    286c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	zcbor_state_t states[4];

	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    2870:	f04f 0901 	mov.w	r9, #1
{
    2874:	b09d      	sub	sp, #116	; 0x74
	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    2876:	ac04      	add	r4, sp, #16
{
    2878:	4607      	mov	r7, r0
    287a:	460e      	mov	r6, r1
    287c:	4690      	mov	r8, r2
    287e:	461d      	mov	r5, r3
	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    2880:	4602      	mov	r2, r0
    2882:	460b      	mov	r3, r1
    2884:	4620      	mov	r0, r4
    2886:	2104      	movs	r1, #4
    2888:	f8cd 9000 	str.w	r9, [sp]
    288c:	f003 fe03 	bl	6496 <zcbor_new_state>
	bool tmp_result = (((zcbor_map_start_decode(state) && ((zcbor_multi_decode(1, 5, &(*result)._Upload_members_count, (zcbor_decoder_t *)decode_repeated_Upload_members, state, (&(*result)._Upload_members), sizeof(struct Upload_members))) || (zcbor_list_map_end_force_decode(state), false)) && zcbor_map_end_decode(state))));
    2890:	4620      	mov	r0, r4
    2892:	f003 fcce 	bl	6232 <zcbor_map_start_decode>
    2896:	b170      	cbz	r0, 28b6 <cbor_decode_Upload+0x4a>
    2898:	230c      	movs	r3, #12
    289a:	2105      	movs	r1, #5
    289c:	e9cd 8301 	strd	r8, r3, [sp, #4]
    28a0:	4648      	mov	r0, r9
    28a2:	4b11      	ldr	r3, [pc, #68]	; (28e8 <cbor_decode_Upload+0x7c>)
    28a4:	9400      	str	r4, [sp, #0]
    28a6:	f108 023c 	add.w	r2, r8, #60	; 0x3c
    28aa:	f003 fce2 	bl	6272 <zcbor_multi_decode>
    28ae:	b960      	cbnz	r0, 28ca <cbor_decode_Upload+0x5e>
    28b0:	4620      	mov	r0, r4
    28b2:	f003 fcd9 	bl	6268 <zcbor_list_map_end_force_decode>
/** Return the current error state, replacing it with SUCCESS. */
static inline int zcbor_pop_error(zcbor_state_t *state)
{
	int err = state->constant_state->error;

	state->constant_state->error = ZCBOR_SUCCESS;
    28b6:	2200      	movs	r2, #0
	int err = state->constant_state->error;
    28b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28ba:	68d8      	ldr	r0, [r3, #12]
	state->constant_state->error = ZCBOR_SUCCESS;
    28bc:	60da      	str	r2, [r3, #12]
				(size_t)states[0].payload - (size_t)payload);
	}

	if (!ret) {
		int status = zcbor_pop_error(states);
		return (status == ZCBOR_SUCCESS) ? ZCBOR_ERR_UNKNOWN : status;
    28be:	4290      	cmp	r0, r2
    28c0:	bf08      	it	eq
    28c2:	201f      	moveq	r0, #31
	}
	return ZCBOR_SUCCESS;
}
    28c4:	b01d      	add	sp, #116	; 0x74
    28c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bool tmp_result = (((zcbor_map_start_decode(state) && ((zcbor_multi_decode(1, 5, &(*result)._Upload_members_count, (zcbor_decoder_t *)decode_repeated_Upload_members, state, (&(*result)._Upload_members), sizeof(struct Upload_members))) || (zcbor_list_map_end_force_decode(state), false)) && zcbor_map_end_decode(state))));
    28ca:	4620      	mov	r0, r4
    28cc:	f003 fcca 	bl	6264 <zcbor_map_end_decode>
    28d0:	2800      	cmp	r0, #0
    28d2:	d0f0      	beq.n	28b6 <cbor_decode_Upload+0x4a>
	if (ret && (payload_len_out != NULL)) {
    28d4:	b90d      	cbnz	r5, 28da <cbor_decode_Upload+0x6e>
	return ZCBOR_SUCCESS;
    28d6:	2000      	movs	r0, #0
    28d8:	e7f4      	b.n	28c4 <cbor_decode_Upload+0x58>
		*payload_len_out = MIN(payload_len,
    28da:	9b04      	ldr	r3, [sp, #16]
    28dc:	1bdb      	subs	r3, r3, r7
    28de:	42b3      	cmp	r3, r6
    28e0:	bf94      	ite	ls
    28e2:	602b      	strls	r3, [r5, #0]
    28e4:	602e      	strhi	r6, [r5, #0]
    28e6:	e7f6      	b.n	28d6 <cbor_decode_Upload+0x6a>
    28e8:	00002775 	.word	0x00002775

000028ec <get_result_len>:
	return true;
}


static uint_fast32_t get_result_len(const void *const input, uint_fast32_t max_result_len)
{
    28ec:	4602      	mov	r2, r0

	for (; len > 0; len--) {
#ifdef CONFIG_BIG_ENDIAN
		if (u8_result[max_result_len - len] != 0) {
#else
		if (u8_result[len - 1] != 0) {
    28ee:	1e4b      	subs	r3, r1, #1
{
    28f0:	4608      	mov	r0, r1
		if (u8_result[len - 1] != 0) {
    28f2:	5cd1      	ldrb	r1, [r2, r3]
    28f4:	b151      	cbz	r1, 290c <get_result_len+0x20>
			break;
		}
	}

	/* Round up to nearest power of 2. */
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
    28f6:	2802      	cmp	r0, #2
    28f8:	d90f      	bls.n	291a <get_result_len+0x2e>
    28fa:	4b08      	ldr	r3, [pc, #32]	; (291c <get_result_len+0x30>)
    28fc:	4403      	add	r3, r0
    28fe:	2001      	movs	r0, #1
    2900:	f813 3c02 	ldrb.w	r3, [r3, #-2]
    2904:	4098      	lsls	r0, r3
    2906:	b2c0      	uxtb	r0, r0
    2908:	4770      	bx	lr
	for (; len > 0; len--) {
    290a:	b12b      	cbz	r3, 2918 <get_result_len+0x2c>
		if (u8_result[len - 1] != 0) {
    290c:	4618      	mov	r0, r3
    290e:	3b01      	subs	r3, #1
    2910:	5cd1      	ldrb	r1, [r2, r3]
    2912:	2900      	cmp	r1, #0
    2914:	d0f9      	beq.n	290a <get_result_len+0x1e>
    2916:	e7ee      	b.n	28f6 <get_result_len+0xa>
    2918:	4618      	mov	r0, r3
}
    291a:	4770      	bx	lr
    291c:	000094dc 	.word	0x000094dc

00002920 <value_encode>:
}


static bool value_encode(zcbor_state_t *state, zcbor_major_type_t major_type,
		const void *const input, uint_fast32_t max_result_len)
{
    2920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2922:	4605      	mov	r5, r0
    2924:	460f      	mov	r7, r1
	zcbor_assert(max_result_len != 0, "0-length result not supported.\r\n");

	uint_fast32_t result_len = get_result_len(input, max_result_len);
    2926:	4610      	mov	r0, r2
    2928:	4619      	mov	r1, r3
{
    292a:	4616      	mov	r6, r2
	uint_fast32_t result_len = get_result_len(input, max_result_len);
    292c:	f7ff ffde 	bl	28ec <get_result_len>
	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
    2930:	2801      	cmp	r0, #1
	uint_fast32_t result_len = get_result_len(input, max_result_len);
    2932:	4604      	mov	r4, r0
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    2934:	682a      	ldr	r2, [r5, #0]
    2936:	68e9      	ldr	r1, [r5, #12]
	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
    2938:	d11c      	bne.n	2974 <value_encode+0x54>
    293a:	7833      	ldrb	r3, [r6, #0]
    293c:	2b17      	cmp	r3, #23
    293e:	d904      	bls.n	294a <value_encode+0x2a>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    2940:	1c93      	adds	r3, r2, #2
    2942:	4299      	cmp	r1, r3
    2944:	d31a      	bcc.n	297c <value_encode+0x5c>
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    2946:	2300      	movs	r3, #0
    2948:	e025      	b.n	2996 <value_encode+0x76>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    294a:	1c50      	adds	r0, r2, #1
    294c:	4281      	cmp	r1, r0
    294e:	d315      	bcc.n	297c <value_encode+0x5c>
		return 0;
    2950:	2400      	movs	r4, #0
	ZCBOR_CHECK_PAYLOAD();
    2952:	428a      	cmp	r2, r1
    2954:	d212      	bcs.n	297c <value_encode+0x5c>
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    2956:	1c51      	adds	r1, r2, #1
    2958:	f003 031f 	and.w	r3, r3, #31
    295c:	6029      	str	r1, [r5, #0]
    295e:	ea43 1147 	orr.w	r1, r3, r7, lsl #5
    2962:	7011      	strb	r1, [r2, #0]
	for (; encoded_len > 0; encoded_len--) {
    2964:	4434      	add	r4, r6
    2966:	42b4      	cmp	r4, r6
    2968:	d118      	bne.n	299c <value_encode+0x7c>
	state->elem_count++;
    296a:	68ab      	ldr	r3, [r5, #8]
	return true;
    296c:	2001      	movs	r0, #1
	state->elem_count++;
    296e:	3301      	adds	r3, #1
    2970:	60ab      	str	r3, [r5, #8]
	return true;
    2972:	e007      	b.n	2984 <value_encode+0x64>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    2974:	1c43      	adds	r3, r0, #1
    2976:	4413      	add	r3, r2
    2978:	4299      	cmp	r1, r3
    297a:	d204      	bcs.n	2986 <value_encode+0x66>
{
#ifdef ZCBOR_STOP_ON_ERROR
	if (zcbor_check_error(state))
#endif
	{
		state->constant_state->error = err;
    297c:	2208      	movs	r2, #8
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
    297e:	2000      	movs	r0, #0
    2980:	696b      	ldr	r3, [r5, #20]
    2982:	60da      	str	r2, [r3, #12]
	const void *const result = get_result(input, max_result_len, result_len);

	return value_encode_len(state, major_type, result, result_len);
}
    2984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    2986:	b908      	cbnz	r0, 298c <value_encode+0x6c>
	if (!encode_header_byte(state, major_type,
    2988:	7833      	ldrb	r3, [r6, #0]
    298a:	e7e2      	b.n	2952 <value_encode+0x32>
	switch(val) {
    298c:	1e83      	subs	r3, r0, #2
    298e:	2b06      	cmp	r3, #6
    2990:	d8d9      	bhi.n	2946 <value_encode+0x26>
    2992:	4806      	ldr	r0, [pc, #24]	; (29ac <value_encode+0x8c>)
    2994:	5cc3      	ldrb	r3, [r0, r3]
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    2996:	3318      	adds	r3, #24
    2998:	b2db      	uxtb	r3, r3
    299a:	e7da      	b.n	2952 <value_encode+0x32>
		*(state->payload_mut++) = u8_result[encoded_len - 1];
    299c:	682b      	ldr	r3, [r5, #0]
    299e:	1c5a      	adds	r2, r3, #1
    29a0:	602a      	str	r2, [r5, #0]
    29a2:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
    29a6:	701a      	strb	r2, [r3, #0]
	for (; encoded_len > 0; encoded_len--) {
    29a8:	e7dd      	b.n	2966 <value_encode+0x46>
    29aa:	bf00      	nop
    29ac:	000094dc 	.word	0x000094dc

000029b0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    29b0:	4901      	ldr	r1, [pc, #4]	; (29b8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    29b2:	2210      	movs	r2, #16
	str	r2, [r1]
    29b4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    29b6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    29b8:	e000ed10 	.word	0xe000ed10

000029bc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    29bc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    29be:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    29c0:	f380 8811 	msr	BASEPRI, r0
	isb
    29c4:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    29c8:	f3bf 8f4f 	dsb	sy
    29cc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    29ce:	b662      	cpsie	i
	isb
    29d0:	f3bf 8f6f 	isb	sy

	bx	lr
    29d4:	4770      	bx	lr
    29d6:	bf00      	nop

000029d8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    29d8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    29da:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    29dc:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    29e0:	f3bf 8f4f 	dsb	sy
    29e4:	bf20      	wfe

	msr	BASEPRI, r0
    29e6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    29ea:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    29ec:	4770      	bx	lr
    29ee:	bf00      	nop

000029f0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    29f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    29f2:	4605      	mov	r5, r0

	if (esf != NULL) {
    29f4:	460c      	mov	r4, r1
    29f6:	b1c9      	cbz	r1, 2a2c <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    29f8:	688b      	ldr	r3, [r1, #8]
    29fa:	4810      	ldr	r0, [pc, #64]	; (2a3c <z_arm_fatal_error+0x4c>)
    29fc:	9300      	str	r3, [sp, #0]
    29fe:	e9d1 2300 	ldrd	r2, r3, [r1]
    2a02:	2145      	movs	r1, #69	; 0x45
    2a04:	f003 fa37 	bl	5e76 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2a08:	6963      	ldr	r3, [r4, #20]
    2a0a:	2145      	movs	r1, #69	; 0x45
    2a0c:	9300      	str	r3, [sp, #0]
    2a0e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    2a12:	480b      	ldr	r0, [pc, #44]	; (2a40 <z_arm_fatal_error+0x50>)
    2a14:	f003 fa2f 	bl	5e76 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2a18:	2145      	movs	r1, #69	; 0x45
    2a1a:	69e2      	ldr	r2, [r4, #28]
    2a1c:	4809      	ldr	r0, [pc, #36]	; (2a44 <z_arm_fatal_error+0x54>)
    2a1e:	f003 fa2a 	bl	5e76 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2a22:	2145      	movs	r1, #69	; 0x45
    2a24:	69a2      	ldr	r2, [r4, #24]
    2a26:	4808      	ldr	r0, [pc, #32]	; (2a48 <z_arm_fatal_error+0x58>)
    2a28:	f003 fa25 	bl	5e76 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2a2c:	4621      	mov	r1, r4
    2a2e:	4628      	mov	r0, r5
}
    2a30:	b003      	add	sp, #12
    2a32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    2a36:	f002 bb71 	b.w	511c <z_fatal_error>
    2a3a:	bf00      	nop
    2a3c:	000094e3 	.word	0x000094e3
    2a40:	00009517 	.word	0x00009517
    2a44:	0000954b 	.word	0x0000954b
    2a48:	0000955f 	.word	0x0000955f

00002a4c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2a4c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2a4e:	2800      	cmp	r0, #0
    2a50:	db07      	blt.n	2a62 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a52:	2301      	movs	r3, #1
    2a54:	0941      	lsrs	r1, r0, #5
    2a56:	4a03      	ldr	r2, [pc, #12]	; (2a64 <arch_irq_enable+0x18>)
    2a58:	f000 001f 	and.w	r0, r0, #31
    2a5c:	4083      	lsls	r3, r0
    2a5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2a62:	4770      	bx	lr
    2a64:	e000e100 	.word	0xe000e100

00002a68 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2a68:	4b05      	ldr	r3, [pc, #20]	; (2a80 <arch_irq_is_enabled+0x18>)
    2a6a:	0942      	lsrs	r2, r0, #5
    2a6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2a70:	2301      	movs	r3, #1
    2a72:	f000 001f 	and.w	r0, r0, #31
    2a76:	fa03 f000 	lsl.w	r0, r3, r0
}
    2a7a:	4010      	ands	r0, r2
    2a7c:	4770      	bx	lr
    2a7e:	bf00      	nop
    2a80:	e000e100 	.word	0xe000e100

00002a84 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2a84:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2a86:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    2a88:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a8c:	bfac      	ite	ge
    2a8e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a92:	4b06      	ldrlt	r3, [pc, #24]	; (2aac <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a94:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2a98:	b2c9      	uxtb	r1, r1
    2a9a:	bfab      	itete	ge
    2a9c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2aa0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2aa4:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2aa8:	5419      	strblt	r1, [r3, r0]
}
    2aaa:	4770      	bx	lr
    2aac:	e000ed14 	.word	0xe000ed14

00002ab0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2ab0:	bf30      	wfi
    b z_SysNmiOnReset
    2ab2:	f7ff bffd 	b.w	2ab0 <z_SysNmiOnReset>
    2ab6:	bf00      	nop

00002ab8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2ab8:	4a0b      	ldr	r2, [pc, #44]	; (2ae8 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2aba:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2abc:	4b0b      	ldr	r3, [pc, #44]	; (2aec <z_arm_prep_c+0x34>)
    2abe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2ac2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2ac4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ac8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2acc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2ad0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2ad8:	f002 fb98 	bl	520c <z_bss_zero>
	z_data_copy();
    2adc:	f002 fbda 	bl	5294 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2ae0:	f000 fa40 	bl	2f64 <z_arm_interrupt_init>
	z_cstart();
    2ae4:	f002 fb9e 	bl	5224 <z_cstart>
    2ae8:	00000000 	.word	0x00000000
    2aec:	e000ed00 	.word	0xe000ed00

00002af0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2af0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2af4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2af6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2afa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2afe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2b00:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2b04:	2902      	cmp	r1, #2
    beq _oops
    2b06:	d0ff      	beq.n	2b08 <_oops>

00002b08 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2b08:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2b0a:	f003 fce6 	bl	64da <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    2b0e:	bd01      	pop	{r0, pc}

00002b10 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    2b10:	4604      	mov	r4, r0
    2b12:	4608      	mov	r0, r1
    2b14:	4611      	mov	r1, r2
    2b16:	461a      	mov	r2, r3
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    2b18:	2300      	movs	r3, #0
    2b1a:	f383 880b 	msr	PSPLIM, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    2b1e:	4b0a      	ldr	r3, [pc, #40]	; (2b48 <loop+0x2>)
    2b20:	2520      	movs	r5, #32
    2b22:	f5a3 5620 	sub.w	r6, r3, #10240	; 0x2800
    2b26:	f386 880b 	msr	PSPLIM, r6
    2b2a:	f383 8809 	msr	PSP, r3
    2b2e:	b663      	cpsie	if
    2b30:	f04f 0300 	mov.w	r3, #0
    2b34:	f383 8811 	msr	BASEPRI, r3
    2b38:	f3bf 8f6f 	isb	sy
    2b3c:	47a0      	blx	r4
    2b3e:	f385 8811 	msr	BASEPRI, r5
    2b42:	f3bf 8f6f 	isb	sy

00002b46 <loop>:
    2b46:	e7fe      	b.n	2b46 <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2b48:	20006d78 	.word	0x20006d78

00002b4c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2b4c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2b4e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2b52:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2b56:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2b5a:	4904      	ldr	r1, [pc, #16]	; (2b6c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2b5c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2b5e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2b60:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2b62:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2b66:	4902      	ldr	r1, [pc, #8]	; (2b70 <_isr_wrapper+0x24>)
	bx r1
    2b68:	4708      	bx	r1
    2b6a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    2b6c:	00008710 	.word	0x00008710
	ldr r1, =z_arm_int_exit
    2b70:	00002b75 	.word	0x00002b75

00002b74 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2b74:	4770      	bx	lr
    2b76:	bf00      	nop

00002b78 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2b78:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2b7a:	4c21      	ldr	r4, [pc, #132]	; (2c00 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    2b7c:	2145      	movs	r1, #69	; 0x45
    2b7e:	4821      	ldr	r0, [pc, #132]	; (2c04 <usage_fault.constprop.0+0x8c>)
    2b80:	f003 f979 	bl	5e76 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2b84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b86:	019d      	lsls	r5, r3, #6
    2b88:	d503      	bpl.n	2b92 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    2b8a:	2145      	movs	r1, #69	; 0x45
    2b8c:	481e      	ldr	r0, [pc, #120]	; (2c08 <usage_fault.constprop.0+0x90>)
    2b8e:	f003 f972 	bl	5e76 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2b92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b94:	01dc      	lsls	r4, r3, #7
    2b96:	d503      	bpl.n	2ba0 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    2b98:	2145      	movs	r1, #69	; 0x45
    2b9a:	481c      	ldr	r0, [pc, #112]	; (2c0c <usage_fault.constprop.0+0x94>)
    2b9c:	f003 f96b 	bl	5e76 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2ba0:	4d17      	ldr	r5, [pc, #92]	; (2c00 <usage_fault.constprop.0+0x88>)
    2ba2:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2ba4:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    2ba8:	d004      	beq.n	2bb4 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    2baa:	2145      	movs	r1, #69	; 0x45
    2bac:	4818      	ldr	r0, [pc, #96]	; (2c10 <usage_fault.constprop.0+0x98>)
    2bae:	f003 f962 	bl	5e76 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    2bb2:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2bb4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2bb6:	0318      	lsls	r0, r3, #12
    2bb8:	d503      	bpl.n	2bc2 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    2bba:	2145      	movs	r1, #69	; 0x45
    2bbc:	4815      	ldr	r0, [pc, #84]	; (2c14 <usage_fault.constprop.0+0x9c>)
    2bbe:	f003 f95a 	bl	5e76 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2bc2:	4d0f      	ldr	r5, [pc, #60]	; (2c00 <usage_fault.constprop.0+0x88>)
    2bc4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2bc6:	0359      	lsls	r1, r3, #13
    2bc8:	d503      	bpl.n	2bd2 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2bca:	2145      	movs	r1, #69	; 0x45
    2bcc:	4812      	ldr	r0, [pc, #72]	; (2c18 <usage_fault.constprop.0+0xa0>)
    2bce:	f003 f952 	bl	5e76 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2bd2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2bd4:	039a      	lsls	r2, r3, #14
    2bd6:	d503      	bpl.n	2be0 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2bd8:	2145      	movs	r1, #69	; 0x45
    2bda:	4810      	ldr	r0, [pc, #64]	; (2c1c <usage_fault.constprop.0+0xa4>)
    2bdc:	f003 f94b 	bl	5e76 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2be0:	4d07      	ldr	r5, [pc, #28]	; (2c00 <usage_fault.constprop.0+0x88>)
    2be2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2be4:	03db      	lsls	r3, r3, #15
    2be6:	d503      	bpl.n	2bf0 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2be8:	2145      	movs	r1, #69	; 0x45
    2bea:	480d      	ldr	r0, [pc, #52]	; (2c20 <usage_fault.constprop.0+0xa8>)
    2bec:	f003 f943 	bl	5e76 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2bf0:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    2bf2:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2bf4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2bf8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2bfc:	62ab      	str	r3, [r5, #40]	; 0x28
}
    2bfe:	bd38      	pop	{r3, r4, r5, pc}
    2c00:	e000ed00 	.word	0xe000ed00
    2c04:	00009592 	.word	0x00009592
    2c08:	000095af 	.word	0x000095af
    2c0c:	000095c7 	.word	0x000095c7
    2c10:	000095e6 	.word	0x000095e6
    2c14:	00009615 	.word	0x00009615
    2c18:	00009638 	.word	0x00009638
    2c1c:	00009662 	.word	0x00009662
    2c20:	00009681 	.word	0x00009681

00002c24 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2c24:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2c26:	4c23      	ldr	r4, [pc, #140]	; (2cb4 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2c28:	4606      	mov	r6, r0
    2c2a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2c2c:	4822      	ldr	r0, [pc, #136]	; (2cb8 <bus_fault.constprop.0+0x94>)
    2c2e:	2145      	movs	r1, #69	; 0x45
    2c30:	f003 f921 	bl	5e76 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2c34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c36:	04d9      	lsls	r1, r3, #19
    2c38:	d503      	bpl.n	2c42 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    2c3a:	2145      	movs	r1, #69	; 0x45
    2c3c:	481f      	ldr	r0, [pc, #124]	; (2cbc <bus_fault.constprop.0+0x98>)
    2c3e:	f003 f91a 	bl	5e76 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2c42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c44:	051a      	lsls	r2, r3, #20
    2c46:	d503      	bpl.n	2c50 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2c48:	2145      	movs	r1, #69	; 0x45
    2c4a:	481d      	ldr	r0, [pc, #116]	; (2cc0 <bus_fault.constprop.0+0x9c>)
    2c4c:	f003 f913 	bl	5e76 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2c50:	4c18      	ldr	r4, [pc, #96]	; (2cb4 <bus_fault.constprop.0+0x90>)
    2c52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c54:	059b      	lsls	r3, r3, #22
    2c56:	d510      	bpl.n	2c7a <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    2c58:	481a      	ldr	r0, [pc, #104]	; (2cc4 <bus_fault.constprop.0+0xa0>)
    2c5a:	2145      	movs	r1, #69	; 0x45
    2c5c:	f003 f90b 	bl	5e76 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    2c60:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2c62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c64:	0418      	lsls	r0, r3, #16
    2c66:	d508      	bpl.n	2c7a <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2c68:	2145      	movs	r1, #69	; 0x45
    2c6a:	4817      	ldr	r0, [pc, #92]	; (2cc8 <bus_fault.constprop.0+0xa4>)
    2c6c:	f003 f903 	bl	5e76 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2c70:	b11e      	cbz	r6, 2c7a <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2c72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2c78:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2c7a:	4c0e      	ldr	r4, [pc, #56]	; (2cb4 <bus_fault.constprop.0+0x90>)
    2c7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c7e:	0559      	lsls	r1, r3, #21
    2c80:	d503      	bpl.n	2c8a <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    2c82:	2145      	movs	r1, #69	; 0x45
    2c84:	4811      	ldr	r0, [pc, #68]	; (2ccc <bus_fault.constprop.0+0xa8>)
    2c86:	f003 f8f6 	bl	5e76 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2c8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c8c:	05da      	lsls	r2, r3, #23
    2c8e:	d50b      	bpl.n	2ca8 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    2c90:	2145      	movs	r1, #69	; 0x45
    2c92:	480f      	ldr	r0, [pc, #60]	; (2cd0 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2c94:	f003 f8ef 	bl	5e76 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    2c98:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2c9a:	4a06      	ldr	r2, [pc, #24]	; (2cb4 <bus_fault.constprop.0+0x90>)
    2c9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2c9e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2ca2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2ca4:	7028      	strb	r0, [r5, #0]
}
    2ca6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2ca8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2caa:	049b      	lsls	r3, r3, #18
    2cac:	d5f4      	bpl.n	2c98 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2cae:	2145      	movs	r1, #69	; 0x45
    2cb0:	4808      	ldr	r0, [pc, #32]	; (2cd4 <bus_fault.constprop.0+0xb0>)
    2cb2:	e7ef      	b.n	2c94 <bus_fault.constprop.0+0x70>
    2cb4:	e000ed00 	.word	0xe000ed00
    2cb8:	000096b1 	.word	0x000096b1
    2cbc:	000096cc 	.word	0x000096cc
    2cc0:	000096e2 	.word	0x000096e2
    2cc4:	000096fa 	.word	0x000096fa
    2cc8:	00009718 	.word	0x00009718
    2ccc:	00009732 	.word	0x00009732
    2cd0:	00009752 	.word	0x00009752
    2cd4:	0000976f 	.word	0x0000976f

00002cd8 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2cd8:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2cda:	4c26      	ldr	r4, [pc, #152]	; (2d74 <mem_manage_fault.constprop.0+0x9c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2cdc:	4606      	mov	r6, r0
    2cde:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2ce0:	4825      	ldr	r0, [pc, #148]	; (2d78 <mem_manage_fault.constprop.0+0xa0>)
    2ce2:	2145      	movs	r1, #69	; 0x45
    2ce4:	f003 f8c7 	bl	5e76 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2ce8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2cea:	06d8      	lsls	r0, r3, #27
    2cec:	d503      	bpl.n	2cf6 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2cee:	2145      	movs	r1, #69	; 0x45
    2cf0:	4822      	ldr	r0, [pc, #136]	; (2d7c <mem_manage_fault.constprop.0+0xa4>)
    2cf2:	f003 f8c0 	bl	5e76 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2cf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2cf8:	0719      	lsls	r1, r3, #28
    2cfa:	d503      	bpl.n	2d04 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2cfc:	2145      	movs	r1, #69	; 0x45
    2cfe:	4820      	ldr	r0, [pc, #128]	; (2d80 <mem_manage_fault.constprop.0+0xa8>)
    2d00:	f003 f8b9 	bl	5e76 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2d04:	4c1b      	ldr	r4, [pc, #108]	; (2d74 <mem_manage_fault.constprop.0+0x9c>)
    2d06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2d08:	079a      	lsls	r2, r3, #30
    2d0a:	d510      	bpl.n	2d2e <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    2d0c:	2145      	movs	r1, #69	; 0x45
    2d0e:	481d      	ldr	r0, [pc, #116]	; (2d84 <mem_manage_fault.constprop.0+0xac>)
    2d10:	f003 f8b1 	bl	5e76 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    2d14:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2d16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2d18:	061b      	lsls	r3, r3, #24
    2d1a:	d508      	bpl.n	2d2e <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2d1c:	2145      	movs	r1, #69	; 0x45
    2d1e:	481a      	ldr	r0, [pc, #104]	; (2d88 <mem_manage_fault.constprop.0+0xb0>)
    2d20:	f003 f8a9 	bl	5e76 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2d24:	b11e      	cbz	r6, 2d2e <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2d26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2d28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2d2c:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2d2e:	4c11      	ldr	r4, [pc, #68]	; (2d74 <mem_manage_fault.constprop.0+0x9c>)
    2d30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2d32:	07de      	lsls	r6, r3, #31
    2d34:	d503      	bpl.n	2d3e <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    2d36:	2145      	movs	r1, #69	; 0x45
    2d38:	4814      	ldr	r0, [pc, #80]	; (2d8c <mem_manage_fault.constprop.0+0xb4>)
    2d3a:	f003 f89c 	bl	5e76 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2d3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2d40:	0698      	lsls	r0, r3, #26
    2d42:	d503      	bpl.n	2d4c <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    2d44:	2145      	movs	r1, #69	; 0x45
    2d46:	4812      	ldr	r0, [pc, #72]	; (2d90 <mem_manage_fault.constprop.0+0xb8>)
    2d48:	f003 f895 	bl	5e76 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    2d4c:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2d4e:	4b09      	ldr	r3, [pc, #36]	; (2d74 <mem_manage_fault.constprop.0+0x9c>)
    2d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2d52:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2d54:	bf58      	it	pl
    2d56:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2d5a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2d5c:	bf42      	ittt	mi
    2d5e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    2d60:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    2d64:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2d68:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2d6c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2d6e:	7028      	strb	r0, [r5, #0]
}
    2d70:	bd70      	pop	{r4, r5, r6, pc}
    2d72:	bf00      	nop
    2d74:	e000ed00 	.word	0xe000ed00
    2d78:	000097a3 	.word	0x000097a3
    2d7c:	000097be 	.word	0x000097be
    2d80:	000096e2 	.word	0x000096e2
    2d84:	000097f6 	.word	0x000097f6
    2d88:	00009813 	.word	0x00009813
    2d8c:	0000982e 	.word	0x0000982e
    2d90:	0000976f 	.word	0x0000976f

00002d94 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2d98:	4b5c      	ldr	r3, [pc, #368]	; (2f0c <z_arm_fault+0x178>)
{
    2d9a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2d9c:	685f      	ldr	r7, [r3, #4]
    2d9e:	2600      	movs	r6, #0
{
    2da0:	b08a      	sub	sp, #40	; 0x28
    2da2:	f3c7 0408 	ubfx	r4, r7, #0, #9
    2da6:	f386 8811 	msr	BASEPRI, r6
    2daa:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2dae:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2db2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2db6:	d107      	bne.n	2dc8 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2db8:	f002 030c 	and.w	r3, r2, #12
    2dbc:	2b08      	cmp	r3, #8
    2dbe:	d114      	bne.n	2dea <z_arm_fault+0x56>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2dc0:	2145      	movs	r1, #69	; 0x45
    2dc2:	4853      	ldr	r0, [pc, #332]	; (2f10 <z_arm_fault+0x17c>)
    2dc4:	f003 f857 	bl	5e76 <z_log_minimal_printk>
	*nested_exc = false;
    2dc8:	2600      	movs	r6, #0
		return NULL;
    2dca:	4635      	mov	r5, r6
	*recoverable = false;
    2dcc:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    2dd0:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    2dd2:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    2dd6:	2b09      	cmp	r3, #9
    2dd8:	f200 8086 	bhi.w	2ee8 <z_arm_fault+0x154>
    2ddc:	e8df f003 	tbb	[pc, r3]
    2de0:	757d790a 	.word	0x757d790a
    2de4:	84848484 	.word	0x84848484
    2de8:	8184      	.short	0x8184
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2dea:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    2dec:	bf4c      	ite	mi
    2dee:	460d      	movmi	r5, r1
			*nested_exc = true;
    2df0:	2601      	movpl	r6, #1
    2df2:	e7eb      	b.n	2dcc <z_arm_fault+0x38>
	PR_FAULT_INFO("***** HARD FAULT *****");
    2df4:	2145      	movs	r1, #69	; 0x45
    2df6:	4847      	ldr	r0, [pc, #284]	; (2f14 <z_arm_fault+0x180>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2df8:	4c44      	ldr	r4, [pc, #272]	; (2f0c <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    2dfa:	f003 f83c 	bl	5e76 <z_log_minimal_printk>
	*recoverable = false;
    2dfe:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2e02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2e04:	079a      	lsls	r2, r3, #30
    2e06:	d505      	bpl.n	2e14 <z_arm_fault+0x80>
		PR_EXC("  Bus fault on vector table read");
    2e08:	2145      	movs	r1, #69	; 0x45
    2e0a:	4843      	ldr	r0, [pc, #268]	; (2f18 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
    2e0c:	f003 f833 	bl	5e76 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2e10:	2400      	movs	r4, #0
    2e12:	e032      	b.n	2e7a <z_arm_fault+0xe6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2e14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2e16:	2b00      	cmp	r3, #0
    2e18:	da02      	bge.n	2e20 <z_arm_fault+0x8c>
		PR_EXC("  Debug event");
    2e1a:	2145      	movs	r1, #69	; 0x45
    2e1c:	483f      	ldr	r0, [pc, #252]	; (2f1c <z_arm_fault+0x188>)
    2e1e:	e7f5      	b.n	2e0c <z_arm_fault+0x78>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2e20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2e22:	005b      	lsls	r3, r3, #1
    2e24:	d5f4      	bpl.n	2e10 <z_arm_fault+0x7c>
		PR_EXC("  Fault escalation (see below)");
    2e26:	2145      	movs	r1, #69	; 0x45
    2e28:	483d      	ldr	r0, [pc, #244]	; (2f20 <z_arm_fault+0x18c>)
    2e2a:	f003 f824 	bl	5e76 <z_log_minimal_printk>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    2e2e:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    2e30:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    2e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2e36:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2e38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e3c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    2e40:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    2e42:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    2e46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2e4a:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2e4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e50:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2e54:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2e58:	429a      	cmp	r2, r3
    2e5a:	d008      	beq.n	2e6e <z_arm_fault+0xda>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    2e5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e5e:	b2db      	uxtb	r3, r3
    2e60:	b32b      	cbz	r3, 2eae <z_arm_fault+0x11a>
			reason = mem_manage_fault(esf, 1, recoverable);
    2e62:	2001      	movs	r0, #1
    2e64:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2e68:	f7ff ff36 	bl	2cd8 <mem_manage_fault.constprop.0>
    2e6c:	e02f      	b.n	2ece <z_arm_fault+0x13a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2e6e:	2145      	movs	r1, #69	; 0x45
    2e70:	682a      	ldr	r2, [r5, #0]
    2e72:	482c      	ldr	r0, [pc, #176]	; (2f24 <z_arm_fault+0x190>)
    2e74:	f002 ffff 	bl	5e76 <z_log_minimal_printk>
			reason = esf->basic.r0;
    2e78:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2e7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2e7e:	b99b      	cbnz	r3, 2ea8 <z_arm_fault+0x114>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2e80:	2220      	movs	r2, #32
    2e82:	4629      	mov	r1, r5
    2e84:	a802      	add	r0, sp, #8
    2e86:	f003 fb65 	bl	6554 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e8c:	2e00      	cmp	r6, #0
    2e8e:	d038      	beq.n	2f02 <z_arm_fault+0x16e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2e90:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2e94:	b922      	cbnz	r2, 2ea0 <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2e96:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2e9a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2e9e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2ea0:	4620      	mov	r0, r4
    2ea2:	a902      	add	r1, sp, #8
    2ea4:	f7ff fda4 	bl	29f0 <z_arm_fatal_error>
}
    2ea8:	b00a      	add	sp, #40	; 0x28
    2eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    2eae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2eb0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    2eb4:	d005      	beq.n	2ec2 <z_arm_fault+0x12e>
			reason = bus_fault(esf, 1, recoverable);
    2eb6:	2001      	movs	r0, #1
    2eb8:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2ebc:	f7ff feb2 	bl	2c24 <bus_fault.constprop.0>
    2ec0:	e005      	b.n	2ece <z_arm_fault+0x13a>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    2ec2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    2ec8:	d3a2      	bcc.n	2e10 <z_arm_fault+0x7c>
			reason = usage_fault(esf);
    2eca:	f7ff fe55 	bl	2b78 <usage_fault.constprop.0>
    2ece:	4604      	mov	r4, r0
    2ed0:	e7d3      	b.n	2e7a <z_arm_fault+0xe6>
		reason = mem_manage_fault(esf, 0, recoverable);
    2ed2:	2000      	movs	r0, #0
    2ed4:	f10d 0107 	add.w	r1, sp, #7
    2ed8:	e7c6      	b.n	2e68 <z_arm_fault+0xd4>
		reason = bus_fault(esf, 0, recoverable);
    2eda:	2000      	movs	r0, #0
    2edc:	f10d 0107 	add.w	r1, sp, #7
    2ee0:	e7ec      	b.n	2ebc <z_arm_fault+0x128>
	PR_FAULT_INFO(
    2ee2:	2145      	movs	r1, #69	; 0x45
    2ee4:	4810      	ldr	r0, [pc, #64]	; (2f28 <z_arm_fault+0x194>)
    2ee6:	e791      	b.n	2e0c <z_arm_fault+0x78>
	PR_FAULT_INFO("***** %s %d) *****",
    2ee8:	4910      	ldr	r1, [pc, #64]	; (2f2c <z_arm_fault+0x198>)
    2eea:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    2eee:	4a10      	ldr	r2, [pc, #64]	; (2f30 <z_arm_fault+0x19c>)
    2ef0:	4810      	ldr	r0, [pc, #64]	; (2f34 <z_arm_fault+0x1a0>)
    2ef2:	bf08      	it	eq
    2ef4:	460a      	moveq	r2, r1
    2ef6:	f1a4 0310 	sub.w	r3, r4, #16
    2efa:	2145      	movs	r1, #69	; 0x45
    2efc:	f002 ffbb 	bl	5e76 <z_log_minimal_printk>
}
    2f00:	e786      	b.n	2e10 <z_arm_fault+0x7c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2f02:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2f06:	f023 0301 	bic.w	r3, r3, #1
    2f0a:	e7c8      	b.n	2e9e <z_arm_fault+0x10a>
    2f0c:	e000ed00 	.word	0xe000ed00
    2f10:	00009880 	.word	0x00009880
    2f14:	000098b0 	.word	0x000098b0
    2f18:	000098cc 	.word	0x000098cc
    2f1c:	000098f2 	.word	0x000098f2
    2f20:	00009905 	.word	0x00009905
    2f24:	00009929 	.word	0x00009929
    2f28:	0000994a 	.word	0x0000994a
    2f2c:	00009852 	.word	0x00009852
    2f30:	00009867 	.word	0x00009867
    2f34:	00009973 	.word	0x00009973

00002f38 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2f38:	4b04      	ldr	r3, [pc, #16]	; (2f4c <z_arm_fault_init+0x14>)
    2f3a:	695a      	ldr	r2, [r3, #20]
    2f3c:	f042 0210 	orr.w	r2, r2, #16
    2f40:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    2f42:	695a      	ldr	r2, [r3, #20]
    2f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2f48:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    2f4a:	4770      	bx	lr
    2f4c:	e000ed00 	.word	0xe000ed00

00002f50 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2f50:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2f54:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2f58:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2f5a:	4672      	mov	r2, lr
	bl z_arm_fault
    2f5c:	f7ff ff1a 	bl	2d94 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2f60:	bd01      	pop	{r0, pc}
    2f62:	bf00      	nop

00002f64 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2f64:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f66:	2120      	movs	r1, #32
    2f68:	4803      	ldr	r0, [pc, #12]	; (2f78 <z_arm_interrupt_init+0x14>)
    2f6a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2f6c:	3301      	adds	r3, #1
    2f6e:	2b41      	cmp	r3, #65	; 0x41
    2f70:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2f74:	d1f9      	bne.n	2f6a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2f76:	4770      	bx	lr
    2f78:	e000e100 	.word	0xe000e100

00002f7c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2f7c:	2000      	movs	r0, #0
    msr CONTROL, r0
    2f7e:	f380 8814 	msr	CONTROL, r0
    isb
    2f82:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    2f86:	2000      	movs	r0, #0
    msr MSPLIM, r0
    2f88:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    2f8c:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2f90:	f7fe ff14 	bl	1dbc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2f94:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2f96:	490e      	ldr	r1, [pc, #56]	; (2fd0 <__start+0x54>)
    str r0, [r1]
    2f98:	6008      	str	r0, [r1, #0]
    dsb
    2f9a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2f9e:	480d      	ldr	r0, [pc, #52]	; (2fd4 <__start+0x58>)
    msr msp, r0
    2fa0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2fa4:	f000 f83e 	bl	3024 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2fa8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2faa:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2fae:	480a      	ldr	r0, [pc, #40]	; (2fd8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2fb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2fb4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2fb6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2fba:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2fbe:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2fc0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2fc2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2fc6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2fca:	f7ff fd75 	bl	2ab8 <z_arm_prep_c>
    2fce:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2fd0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2fd4:	20006d78 	.word	0x20006d78
    ldr r0, =z_interrupt_stacks
    2fd8:	20003d78 	.word	0x20003d78

00002fdc <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2fdc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2fe0:	4905      	ldr	r1, [pc, #20]	; (2ff8 <sys_arch_reboot+0x1c>)
    2fe2:	4b06      	ldr	r3, [pc, #24]	; (2ffc <sys_arch_reboot+0x20>)
    2fe4:	68ca      	ldr	r2, [r1, #12]
    2fe6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2fea:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2fec:	60cb      	str	r3, [r1, #12]
    2fee:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2ff2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2ff4:	e7fd      	b.n	2ff2 <sys_arch_reboot+0x16>
    2ff6:	bf00      	nop
    2ff8:	e000ed00 	.word	0xe000ed00
    2ffc:	05fa0004 	.word	0x05fa0004

00003000 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    3000:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    3002:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3004:	4906      	ldr	r1, [pc, #24]	; (3020 <z_arm_clear_arm_mpu_config+0x20>)
    3006:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    300a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    300e:	4293      	cmp	r3, r2
    3010:	db00      	blt.n	3014 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    3012:	4770      	bx	lr
  mpu->RNR = rnr;
    3014:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    3018:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    301c:	3301      	adds	r3, #1
    301e:	e7f6      	b.n	300e <z_arm_clear_arm_mpu_config+0xe>
    3020:	e000ed00 	.word	0xe000ed00

00003024 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3024:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3026:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3028:	2400      	movs	r4, #0
    302a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    302e:	f7ff ffe7 	bl	3000 <z_arm_clear_arm_mpu_config>
    3032:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3034:	f04f 30ff 	mov.w	r0, #4294967295
    3038:	4a0c      	ldr	r2, [pc, #48]	; (306c <z_arm_init_arch_hw_at_boot+0x48>)
    303a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    303e:	3301      	adds	r3, #1
    3040:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    3042:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3046:	d1f8      	bne.n	303a <z_arm_init_arch_hw_at_boot+0x16>
    3048:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    304a:	f04f 30ff 	mov.w	r0, #4294967295
    304e:	4a07      	ldr	r2, [pc, #28]	; (306c <z_arm_init_arch_hw_at_boot+0x48>)
    3050:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3054:	3301      	adds	r3, #1
    3056:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3058:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    305c:	d1f8      	bne.n	3050 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    305e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3060:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3064:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3068:	bd10      	pop	{r4, pc}
    306a:	bf00      	nop
    306c:	e000e100 	.word	0xe000e100

00003070 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    3070:	b40c      	push	{r2, r3}
    3072:	b510      	push	{r4, lr}
    3074:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    3076:	b909      	cbnz	r1, 307c <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    3078:	f10d 000b 	add.w	r0, sp, #11
    307c:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
    307e:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
    3082:	ab09      	add	r3, sp, #36	; 0x24
    3084:	9a08      	ldr	r2, [sp, #32]
    3086:	9400      	str	r4, [sp, #0]
    3088:	a904      	add	r1, sp, #16
    308a:	4805      	ldr	r0, [pc, #20]	; (30a0 <snprintf+0x30>)
    308c:	9303      	str	r3, [sp, #12]
    308e:	f7fe fc3f 	bl	1910 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
    3092:	9b04      	ldr	r3, [sp, #16]
    3094:	701c      	strb	r4, [r3, #0]
	return r;
}
    3096:	b006      	add	sp, #24
    3098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    309c:	b002      	add	sp, #8
    309e:	4770      	bx	lr
    30a0:	0000657d 	.word	0x0000657d

000030a4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    30a4:	4b08      	ldr	r3, [pc, #32]	; (30c8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    30a6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    30a8:	1ac3      	subs	r3, r0, r3
{
    30aa:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    30ac:	4907      	ldr	r1, [pc, #28]	; (30cc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    30ae:	109b      	asrs	r3, r3, #2
{
    30b0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    30b2:	4359      	muls	r1, r3
    30b4:	2240      	movs	r2, #64	; 0x40
    30b6:	4806      	ldr	r0, [pc, #24]	; (30d0 <onoff_stop+0x2c>)
    30b8:	f003 fa89 	bl	65ce <stop>
	notify(mgr, res);
    30bc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    30be:	4601      	mov	r1, r0
	notify(mgr, res);
    30c0:	4620      	mov	r0, r4
}
    30c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    30c6:	4718      	bx	r3
    30c8:	20001afc 	.word	0x20001afc
    30cc:	b6db6db7 	.word	0xb6db6db7
    30d0:	00008698 	.word	0x00008698

000030d4 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    30d4:	2340      	movs	r3, #64	; 0x40
{
    30d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    30d8:	4c0b      	ldr	r4, [pc, #44]	; (3108 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    30da:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    30dc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    30de:	460b      	mov	r3, r1
{
    30e0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    30e2:	490a      	ldr	r1, [pc, #40]	; (310c <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    30e4:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    30e6:	4361      	muls	r1, r4
{
    30e8:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    30ea:	4a09      	ldr	r2, [pc, #36]	; (3110 <onoff_start+0x3c>)
    30ec:	4809      	ldr	r0, [pc, #36]	; (3114 <onoff_start+0x40>)
    30ee:	f003 fa9a 	bl	6626 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    30f2:	1e01      	subs	r1, r0, #0
    30f4:	da05      	bge.n	3102 <onoff_start+0x2e>
		notify(mgr, err);
    30f6:	4630      	mov	r0, r6
    30f8:	462b      	mov	r3, r5
	}
}
    30fa:	b002      	add	sp, #8
    30fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    3100:	4718      	bx	r3
}
    3102:	b002      	add	sp, #8
    3104:	bd70      	pop	{r4, r5, r6, pc}
    3106:	bf00      	nop
    3108:	20001afc 	.word	0x20001afc
    310c:	b6db6db7 	.word	0xb6db6db7
    3110:	00006697 	.word	0x00006697
    3114:	00008698 	.word	0x00008698

00003118 <generic_hfclk_stop>:
{
    3118:	b510      	push	{r4, lr}
	__asm__ volatile(
    311a:	f04f 0320 	mov.w	r3, #32
    311e:	f3ef 8411 	mrs	r4, BASEPRI
    3122:	f383 8812 	msr	BASEPRI_MAX, r3
    3126:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    312a:	4a07      	ldr	r2, [pc, #28]	; (3148 <generic_hfclk_stop+0x30>)
    312c:	6813      	ldr	r3, [r2, #0]
    312e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    3132:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    3134:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    3136:	d402      	bmi.n	313e <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3138:	2001      	movs	r0, #1
    313a:	f005 fa5b 	bl	85f4 <nrfx_clock_stop>
	__asm__ volatile(
    313e:	f384 8811 	msr	BASEPRI, r4
    3142:	f3bf 8f6f 	isb	sy
}
    3146:	bd10      	pop	{r4, pc}
    3148:	20001b4c 	.word	0x20001b4c

0000314c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    314c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    314e:	2200      	movs	r2, #0
    3150:	2101      	movs	r1, #1
{
    3152:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3154:	2005      	movs	r0, #5
    3156:	f7ff fc95 	bl	2a84 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    315a:	480f      	ldr	r0, [pc, #60]	; (3198 <clk_init+0x4c>)
    315c:	f001 fc12 	bl	4984 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3160:	4b0e      	ldr	r3, [pc, #56]	; (319c <clk_init+0x50>)
    3162:	4298      	cmp	r0, r3
    3164:	d115      	bne.n	3192 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3166:	f005 f9f7 	bl	8558 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    316a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    316c:	490c      	ldr	r1, [pc, #48]	; (31a0 <clk_init+0x54>)
    316e:	4630      	mov	r0, r6
    3170:	f002 fde3 	bl	5d3a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3174:	2800      	cmp	r0, #0
    3176:	db0b      	blt.n	3190 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3178:	2501      	movs	r5, #1
    317a:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    317c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    317e:	4908      	ldr	r1, [pc, #32]	; (31a0 <clk_init+0x54>)
    3180:	f104 001c 	add.w	r0, r4, #28
    3184:	f002 fdd9 	bl	5d3a <onoff_manager_init>
		if (err < 0) {
    3188:	2800      	cmp	r0, #0
    318a:	db01      	blt.n	3190 <clk_init+0x44>
	}

	return 0;
    318c:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    318e:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    3190:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3192:	f06f 0004 	mvn.w	r0, #4
    3196:	e7fb      	b.n	3190 <clk_init+0x44>
    3198:	000031d9 	.word	0x000031d9
    319c:	0bad0000 	.word	0x0bad0000
    31a0:	00008a9c 	.word	0x00008a9c

000031a4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    31a4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    31a6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    31a8:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
    31aa:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    31ac:	434b      	muls	r3, r1
    31ae:	4808      	ldr	r0, [pc, #32]	; (31d0 <clkstarted_handle.constprop.0+0x2c>)
    31b0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    31b2:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    31b4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    31b8:	4418      	add	r0, r3
	sub_data->cb = NULL;
    31ba:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    31bc:	f003 f9f4 	bl	65a8 <set_on_state>
	if (callback) {
    31c0:	b12d      	cbz	r5, 31ce <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    31c2:	4632      	mov	r2, r6
    31c4:	462b      	mov	r3, r5
}
    31c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    31ca:	4802      	ldr	r0, [pc, #8]	; (31d4 <clkstarted_handle.constprop.0+0x30>)
    31cc:	4718      	bx	r3
}
    31ce:	bd70      	pop	{r4, r5, r6, pc}
    31d0:	20001afc 	.word	0x20001afc
    31d4:	00008698 	.word	0x00008698

000031d8 <clock_event_handler>:
	switch (event) {
    31d8:	b110      	cbz	r0, 31e0 <clock_event_handler+0x8>
    31da:	2801      	cmp	r0, #1
    31dc:	d004      	beq.n	31e8 <clock_event_handler+0x10>
    31de:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    31e0:	4b03      	ldr	r3, [pc, #12]	; (31f0 <clock_event_handler+0x18>)
    31e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31e4:	075b      	lsls	r3, r3, #29
    31e6:	d101      	bne.n	31ec <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    31e8:	f7ff bfdc 	b.w	31a4 <clkstarted_handle.constprop.0>
}
    31ec:	4770      	bx	lr
    31ee:	bf00      	nop
    31f0:	20001afc 	.word	0x20001afc

000031f4 <generic_hfclk_start>:
{
    31f4:	b508      	push	{r3, lr}
	__asm__ volatile(
    31f6:	f04f 0320 	mov.w	r3, #32
    31fa:	f3ef 8111 	mrs	r1, BASEPRI
    31fe:	f383 8812 	msr	BASEPRI_MAX, r3
    3202:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3206:	4a12      	ldr	r2, [pc, #72]	; (3250 <generic_hfclk_start+0x5c>)
    3208:	6813      	ldr	r3, [r2, #0]
    320a:	f043 0002 	orr.w	r0, r3, #2
    320e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3210:	07da      	lsls	r2, r3, #31
    3212:	d408      	bmi.n	3226 <generic_hfclk_start+0x32>
	__asm__ volatile(
    3214:	f381 8811 	msr	BASEPRI, r1
    3218:	f3bf 8f6f 	isb	sy
}
    321c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3220:	2001      	movs	r0, #1
    3222:	f005 b9a7 	b.w	8574 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3226:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    322a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    322e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3232:	07d3      	lsls	r3, r2, #31
    3234:	d5ee      	bpl.n	3214 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    3236:	4807      	ldr	r0, [pc, #28]	; (3254 <generic_hfclk_start+0x60>)
    3238:	f003 f9b6 	bl	65a8 <set_on_state>
    323c:	f381 8811 	msr	BASEPRI, r1
    3240:	f3bf 8f6f 	isb	sy
}
    3244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3248:	2000      	movs	r0, #0
    324a:	f7ff bfab 	b.w	31a4 <clkstarted_handle.constprop.0>
    324e:	bf00      	nop
    3250:	20001b4c 	.word	0x20001b4c
    3254:	20001b3c 	.word	0x20001b3c

00003258 <z_nrf_clock_control_lf_on>:
{
    3258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    325c:	2201      	movs	r2, #1
    325e:	4607      	mov	r7, r0
    3260:	4934      	ldr	r1, [pc, #208]	; (3334 <z_nrf_clock_control_lf_on+0xdc>)
    3262:	e8d1 3fef 	ldaex	r3, [r1]
    3266:	e8c1 2fe0 	stlex	r0, r2, [r1]
    326a:	2800      	cmp	r0, #0
    326c:	d1f9      	bne.n	3262 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    326e:	b933      	cbnz	r3, 327e <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3270:	4931      	ldr	r1, [pc, #196]	; (3338 <z_nrf_clock_control_lf_on+0xe0>)
		err = onoff_request(mgr, &cli);
    3272:	4832      	ldr	r0, [pc, #200]	; (333c <z_nrf_clock_control_lf_on+0xe4>)
    3274:	604b      	str	r3, [r1, #4]
    3276:	60cb      	str	r3, [r1, #12]
    3278:	608a      	str	r2, [r1, #8]
    327a:	f002 fd71 	bl	5d60 <onoff_request>
	switch (start_mode) {
    327e:	1e7b      	subs	r3, r7, #1
    3280:	2b01      	cmp	r3, #1
    3282:	d82d      	bhi.n	32e0 <z_nrf_clock_control_lf_on+0x88>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3284:	2f01      	cmp	r7, #1
    3286:	d107      	bne.n	3298 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3288:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    328c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3290:	f003 0303 	and.w	r3, r3, #3
    3294:	2b02      	cmp	r3, #2
    3296:	d023      	beq.n	32e0 <z_nrf_clock_control_lf_on+0x88>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3298:	f005 f9c7 	bl	862a <k_is_in_isr>
    329c:	4605      	mov	r5, r0
    329e:	bb08      	cbnz	r0, 32e4 <z_nrf_clock_control_lf_on+0x8c>
	return !z_sys_post_kernel;
    32a0:	4b27      	ldr	r3, [pc, #156]	; (3340 <z_nrf_clock_control_lf_on+0xe8>)
    32a2:	781b      	ldrb	r3, [r3, #0]
    32a4:	b1f3      	cbz	r3, 32e4 <z_nrf_clock_control_lf_on+0x8c>
    p_reg->INTENCLR = mask;
    32a6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    32aa:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    32ac:	4606      	mov	r6, r0
    32ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    32b2:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32b6:	f04f 0800 	mov.w	r8, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    32ba:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3344 <z_nrf_clock_control_lf_on+0xec>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    32be:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    32c2:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    32c6:	03d2      	lsls	r2, r2, #15
    32c8:	d516      	bpl.n	32f8 <z_nrf_clock_control_lf_on+0xa0>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    32ca:	f003 0303 	and.w	r3, r3, #3
    32ce:	2b02      	cmp	r3, #2
    32d0:	d001      	beq.n	32d6 <z_nrf_clock_control_lf_on+0x7e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    32d2:	2f01      	cmp	r7, #1
    32d4:	d110      	bne.n	32f8 <z_nrf_clock_control_lf_on+0xa0>
	if (isr_mode) {
    32d6:	b33d      	cbz	r5, 3328 <z_nrf_clock_control_lf_on+0xd0>
    32d8:	f386 8811 	msr	BASEPRI, r6
    32dc:	f3bf 8f6f 	isb	sy
}
    32e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
    32e4:	f04f 0320 	mov.w	r3, #32
    32e8:	f3ef 8611 	mrs	r6, BASEPRI
    32ec:	f383 8812 	msr	BASEPRI_MAX, r3
    32f0:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    32f4:	2501      	movs	r5, #1
    32f6:	e7dc      	b.n	32b2 <z_nrf_clock_control_lf_on+0x5a>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    32f8:	4630      	mov	r0, r6
    32fa:	f7ff fb6d 	bl	29d8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    32fe:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3302:	b2db      	uxtb	r3, r3
    3304:	2b01      	cmp	r3, #1
    3306:	d1da      	bne.n	32be <z_nrf_clock_control_lf_on+0x66>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3308:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    330c:	2a00      	cmp	r2, #0
    330e:	d0d6      	beq.n	32be <z_nrf_clock_control_lf_on+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3310:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3314:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3318:	2202      	movs	r2, #2
    331a:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    331e:	2220      	movs	r2, #32
    3320:	f8c9 2180 	str.w	r2, [r9, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3324:	60a3      	str	r3, [r4, #8]
}
    3326:	e7ca      	b.n	32be <z_nrf_clock_control_lf_on+0x66>
    p_reg->INTENSET = mask;
    3328:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    332c:	2202      	movs	r2, #2
    332e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3332:	e7d5      	b.n	32e0 <z_nrf_clock_control_lf_on+0x88>
    3334:	20001af8 	.word	0x20001af8
    3338:	20001ae8 	.word	0x20001ae8
    333c:	20001b18 	.word	0x20001b18
    3340:	20003d71 	.word	0x20003d71
    3344:	e000e100 	.word	0xe000e100

00003348 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3348:	b530      	push	{r4, r5, lr}
	return port->config;
    334a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    334c:	f001 041f 	and.w	r4, r1, #31
    3350:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    3352:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    3356:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3358:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    335c:	d105      	bne.n	336a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    335e:	4620      	mov	r0, r4
    3360:	f001 fda4 	bl	4eac <nrfx_gpiote_trigger_disable>

		return 0;
    3364:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    3366:	b005      	add	sp, #20
    3368:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    336a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    336c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3370:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3374:	d114      	bne.n	33a0 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    337a:	bf0c      	ite	eq
    337c:	2304      	moveq	r3, #4
    337e:	2305      	movne	r3, #5
    3380:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3384:	2300      	movs	r3, #0
    3386:	4620      	mov	r0, r4
    3388:	4619      	mov	r1, r3
    338a:	aa02      	add	r2, sp, #8
    338c:	f001 fbc4 	bl	4b18 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3390:	4b1c      	ldr	r3, [pc, #112]	; (3404 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    3392:	4298      	cmp	r0, r3
    3394:	d133      	bne.n	33fe <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3396:	2101      	movs	r1, #1
    3398:	4620      	mov	r0, r4
    339a:	f001 fd43 	bl	4e24 <nrfx_gpiote_trigger_enable>
	return 0;
    339e:	e7e1      	b.n	3364 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    33a0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    33a4:	d020      	beq.n	33e8 <gpio_nrfx_pin_interrupt_configure+0xa0>
    33a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    33aa:	bf14      	ite	ne
    33ac:	2301      	movne	r3, #1
    33ae:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    33b0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    33b4:	6883      	ldr	r3, [r0, #8]
    33b6:	40cb      	lsrs	r3, r1
    33b8:	07d9      	lsls	r1, r3, #31
    33ba:	d4e3      	bmi.n	3384 <gpio_nrfx_pin_interrupt_configure+0x3c>
    33bc:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    33c0:	d1e0      	bne.n	3384 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    33c2:	4a11      	ldr	r2, [pc, #68]	; (3408 <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    33c4:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    33c8:	3380      	adds	r3, #128	; 0x80
    33ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    33ce:	07db      	lsls	r3, r3, #31
    33d0:	d4d8      	bmi.n	3384 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    33d2:	f10d 0507 	add.w	r5, sp, #7
    33d6:	4629      	mov	r1, r5
    33d8:	4620      	mov	r0, r4
    33da:	f001 fccf 	bl	4d7c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    33de:	4b0b      	ldr	r3, [pc, #44]	; (340c <gpio_nrfx_pin_interrupt_configure+0xc4>)
    33e0:	4298      	cmp	r0, r3
    33e2:	d003      	beq.n	33ec <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
    33e4:	9503      	str	r5, [sp, #12]
    33e6:	e7cd      	b.n	3384 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    33e8:	2303      	movs	r3, #3
    33ea:	e7e1      	b.n	33b0 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    33ec:	4628      	mov	r0, r5
    33ee:	f001 fd13 	bl	4e18 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    33f2:	4b04      	ldr	r3, [pc, #16]	; (3404 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    33f4:	4298      	cmp	r0, r3
    33f6:	d0f5      	beq.n	33e4 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    33f8:	f06f 000b 	mvn.w	r0, #11
    33fc:	e7b3      	b.n	3366 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    33fe:	f06f 0015 	mvn.w	r0, #21
    3402:	e7b0      	b.n	3366 <gpio_nrfx_pin_interrupt_configure+0x1e>
    3404:	0bad0000 	.word	0x0bad0000
    3408:	50842500 	.word	0x50842500
    340c:	0bad0004 	.word	0x0bad0004

00003410 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3410:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3412:	f001 fcf1 	bl	4df8 <nrfx_gpiote_is_init>
    3416:	4604      	mov	r4, r0
    3418:	b968      	cbnz	r0, 3436 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    341a:	f001 fcc5 	bl	4da8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    341e:	4b08      	ldr	r3, [pc, #32]	; (3440 <gpio_nrfx_init+0x30>)
    3420:	4298      	cmp	r0, r3
    3422:	d10a      	bne.n	343a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3424:	4621      	mov	r1, r4
    3426:	4807      	ldr	r0, [pc, #28]	; (3444 <gpio_nrfx_init+0x34>)
    3428:	f001 fca2 	bl	4d70 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    342c:	4622      	mov	r2, r4
    342e:	2105      	movs	r1, #5
    3430:	200d      	movs	r0, #13
    3432:	f7ff fb27 	bl	2a84 <z_arm_irq_priority_set>
		return 0;
    3436:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3438:	bd10      	pop	{r4, pc}
		return -EIO;
    343a:	f06f 0004 	mvn.w	r0, #4
    343e:	e7fb      	b.n	3438 <gpio_nrfx_init+0x28>
    3440:	0bad0000 	.word	0x0bad0000
    3444:	00003449 	.word	0x00003449

00003448 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3448:	0943      	lsrs	r3, r0, #5
{
    344a:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    344c:	d107      	bne.n	345e <nrfx_gpio_handler+0x16>
	return list->head;
    344e:	4b0b      	ldr	r3, [pc, #44]	; (347c <nrfx_gpio_handler+0x34>)
    3450:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3452:	b121      	cbz	r1, 345e <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    3454:	2501      	movs	r5, #1
	return node->next;
    3456:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3458:	4e09      	ldr	r6, [pc, #36]	; (3480 <nrfx_gpio_handler+0x38>)
    345a:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    345c:	b901      	cbnz	r1, 3460 <nrfx_gpio_handler+0x18>
}
    345e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    3460:	688a      	ldr	r2, [r1, #8]
    3462:	402a      	ands	r2, r5
    3464:	d002      	beq.n	346c <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    3466:	4630      	mov	r0, r6
    3468:	684b      	ldr	r3, [r1, #4]
    346a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    346c:	b11c      	cbz	r4, 3476 <nrfx_gpio_handler+0x2e>
    346e:	6823      	ldr	r3, [r4, #0]
    3470:	4621      	mov	r1, r4
    3472:	461c      	mov	r4, r3
    3474:	e7f2      	b.n	345c <nrfx_gpio_handler+0x14>
    3476:	4623      	mov	r3, r4
    3478:	e7fa      	b.n	3470 <nrfx_gpio_handler+0x28>
    347a:	bf00      	nop
    347c:	20001b50 	.word	0x20001b50
    3480:	000086b0 	.word	0x000086b0

00003484 <gpio_nrfx_pin_configure>:
{
    3484:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    3488:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    348a:	f001 051f 	and.w	r5, r1, #31
    348e:	7b3b      	ldrb	r3, [r7, #12]
{
    3490:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3492:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    3496:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3498:	4628      	mov	r0, r5
    349a:	f10d 0103 	add.w	r1, sp, #3
    349e:	f001 fc6d 	bl	4d7c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    34a2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    34a6:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    34a8:	d10b      	bne.n	34c2 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    34aa:	4628      	mov	r0, r5
    34ac:	f001 fd26 	bl	4efc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    34b0:	4b3c      	ldr	r3, [pc, #240]	; (35a4 <gpio_nrfx_pin_configure+0x120>)
    34b2:	4598      	cmp	r8, r3
    34b4:	d103      	bne.n	34be <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    34b6:	f89d 0003 	ldrb.w	r0, [sp, #3]
    34ba:	f001 fca7 	bl	4e0c <nrfx_gpiote_channel_free>
		return 0;
    34be:	2000      	movs	r0, #0
    34c0:	e00c      	b.n	34dc <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    34c2:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    34c4:	4628      	mov	r0, r5
    34c6:	4619      	mov	r1, r3
    34c8:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    34ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    34ce:	f001 fb23 	bl	4b18 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    34d2:	4b34      	ldr	r3, [pc, #208]	; (35a4 <gpio_nrfx_pin_configure+0x120>)
    34d4:	4298      	cmp	r0, r3
    34d6:	d004      	beq.n	34e2 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    34d8:	f06f 0015 	mvn.w	r0, #21
}
    34dc:	b004      	add	sp, #16
    34de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    34e2:	4580      	cmp	r8, r0
    34e4:	d103      	bne.n	34ee <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    34e6:	f89d 0003 	ldrb.w	r0, [sp, #3]
    34ea:	f001 fc8f 	bl	4e0c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    34ee:	03a3      	lsls	r3, r4, #14
    34f0:	d549      	bpl.n	3586 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    34f2:	f240 3306 	movw	r3, #774	; 0x306
    34f6:	4023      	ands	r3, r4
    34f8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    34fc:	d019      	beq.n	3532 <gpio_nrfx_pin_configure+0xae>
    34fe:	d80c      	bhi.n	351a <gpio_nrfx_pin_configure+0x96>
    3500:	2b06      	cmp	r3, #6
    3502:	d017      	beq.n	3534 <gpio_nrfx_pin_configure+0xb0>
    3504:	d804      	bhi.n	3510 <gpio_nrfx_pin_configure+0x8c>
    3506:	b1ab      	cbz	r3, 3534 <gpio_nrfx_pin_configure+0xb0>
    3508:	2b02      	cmp	r3, #2
    350a:	d1e5      	bne.n	34d8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    350c:	2304      	movs	r3, #4
    350e:	e011      	b.n	3534 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3514:	d1e0      	bne.n	34d8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    3516:	2301      	movs	r3, #1
    3518:	e00c      	b.n	3534 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    351a:	f240 2202 	movw	r2, #514	; 0x202
    351e:	4293      	cmp	r3, r2
    3520:	d026      	beq.n	3570 <gpio_nrfx_pin_configure+0xec>
    3522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3526:	d025      	beq.n	3574 <gpio_nrfx_pin_configure+0xf0>
    3528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    352c:	d1d4      	bne.n	34d8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    352e:	2302      	movs	r3, #2
    3530:	e000      	b.n	3534 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    3532:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    3534:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3538:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    353c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    3540:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3542:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    3546:	bf4c      	ite	mi
    3548:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    354a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    354e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    3550:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3554:	d510      	bpl.n	3578 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3556:	2301      	movs	r3, #1
    3558:	687a      	ldr	r2, [r7, #4]
    355a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    355c:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    355e:	2200      	movs	r2, #0
    3560:	4628      	mov	r0, r5
    3562:	a901      	add	r1, sp, #4
    3564:	f001 fb84 	bl	4c70 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3568:	4b0e      	ldr	r3, [pc, #56]	; (35a4 <gpio_nrfx_pin_configure+0x120>)
    356a:	4298      	cmp	r0, r3
    356c:	d0a7      	beq.n	34be <gpio_nrfx_pin_configure+0x3a>
    356e:	e7b3      	b.n	34d8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    3570:	2305      	movs	r3, #5
    3572:	e7df      	b.n	3534 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3574:	2303      	movs	r3, #3
    3576:	e7dd      	b.n	3534 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3578:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    357a:	bf41      	itttt	mi
    357c:	2301      	movmi	r3, #1
    357e:	687a      	ldrmi	r2, [r7, #4]
    3580:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    3582:	60d3      	strmi	r3, [r2, #12]
}
    3584:	e7eb      	b.n	355e <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    3586:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3588:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    358c:	bf4c      	ite	mi
    358e:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    3590:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3594:	461a      	mov	r2, r3
    3596:	4628      	mov	r0, r5
    3598:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    359a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    359e:	f001 fabb 	bl	4b18 <nrfx_gpiote_input_configure>
    35a2:	e7e1      	b.n	3568 <gpio_nrfx_pin_configure+0xe4>
    35a4:	0bad0000 	.word	0x0bad0000

000035a8 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    35a8:	4b02      	ldr	r3, [pc, #8]	; (35b4 <flash_nrf_pages_layout+0xc>)
    35aa:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    35ac:	2301      	movs	r3, #1
    35ae:	6013      	str	r3, [r2, #0]
}
    35b0:	4770      	bx	lr
    35b2:	bf00      	nop
    35b4:	20001b5c 	.word	0x20001b5c

000035b8 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    35b8:	4800      	ldr	r0, [pc, #0]	; (35bc <flash_nrf_get_parameters+0x4>)
    35ba:	4770      	bx	lr
    35bc:	00008b24 	.word	0x00008b24

000035c0 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    35c0:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    35c2:	f005 f81f 	bl	8604 <nrfx_nvmc_flash_page_count_get>
    35c6:	4c03      	ldr	r4, [pc, #12]	; (35d4 <nrf_flash_init+0x14>)
    35c8:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    35ca:	f005 f818 	bl	85fe <nrfx_nvmc_flash_page_size_get>
    35ce:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    35d0:	2000      	movs	r0, #0
    35d2:	bd10      	pop	{r4, pc}
    35d4:	20001b5c 	.word	0x20001b5c

000035d8 <flash_nrf_erase>:
{
    35d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35da:	460e      	mov	r6, r1
    35dc:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    35de:	f005 f80e 	bl	85fe <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    35e2:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    35e4:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    35e6:	4630      	mov	r0, r6
    35e8:	f003 f8b1 	bl	674e <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    35ec:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
    35ee:	b300      	cbz	r0, 3632 <flash_nrf_erase+0x5a>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    35f0:	fbb6 f3f5 	udiv	r3, r6, r5
    35f4:	fb05 6313 	mls	r3, r5, r3, r6
    35f8:	b923      	cbnz	r3, 3604 <flash_nrf_erase+0x2c>
    35fa:	fbb4 f3f5 	udiv	r3, r4, r5
    35fe:	fb05 4313 	mls	r3, r5, r3, r4
    3602:	b143      	cbz	r3, 3616 <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    3604:	4623      	mov	r3, r4
    3606:	4632      	mov	r2, r6
    3608:	2145      	movs	r1, #69	; 0x45
    360a:	480c      	ldr	r0, [pc, #48]	; (363c <flash_nrf_erase+0x64>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    360c:	f002 fc33 	bl	5e76 <z_log_minimal_printk>
			return -EINVAL;
    3610:	f06f 0015 	mvn.w	r0, #21
    3614:	e002      	b.n	361c <flash_nrf_erase+0x44>
		if (!n_pages) {
    3616:	42a5      	cmp	r5, r4
    3618:	d901      	bls.n	361e <flash_nrf_erase+0x46>
			return 0;
    361a:	2000      	movs	r0, #0
}
    361c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    361e:	f004 ffee 	bl	85fe <nrfx_nvmc_flash_page_size_get>
    3622:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    3624:	4638      	mov	r0, r7
    3626:	f001 fd4b 	bl	50c0 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    362a:	1b64      	subs	r4, r4, r5
    362c:	442f      	add	r7, r5
    362e:	d1f9      	bne.n	3624 <flash_nrf_erase+0x4c>
    3630:	e7f3      	b.n	361a <flash_nrf_erase+0x42>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3632:	4623      	mov	r3, r4
    3634:	4632      	mov	r2, r6
    3636:	2145      	movs	r1, #69	; 0x45
    3638:	4801      	ldr	r0, [pc, #4]	; (3640 <flash_nrf_erase+0x68>)
    363a:	e7e7      	b.n	360c <flash_nrf_erase+0x34>
    363c:	000099bc 	.word	0x000099bc
    3640:	000099e0 	.word	0x000099e0

00003644 <flash_nrf_write>:
{
    3644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3646:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    3648:	4619      	mov	r1, r3
    364a:	4630      	mov	r0, r6
{
    364c:	4617      	mov	r7, r2
    364e:	461d      	mov	r5, r3
	if (is_regular_addr_valid(addr, len)) {
    3650:	f003 f87d 	bl	674e <is_regular_addr_valid>
    3654:	b940      	cbnz	r0, 3668 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3656:	462b      	mov	r3, r5
    3658:	4632      	mov	r2, r6
    365a:	2145      	movs	r1, #69	; 0x45
    365c:	4811      	ldr	r0, [pc, #68]	; (36a4 <flash_nrf_write+0x60>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    365e:	f002 fc0a 	bl	5e76 <z_log_minimal_printk>
		return -EINVAL;
    3662:	f06f 0015 	mvn.w	r0, #21
}
    3666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    3668:	ea46 0405 	orr.w	r4, r6, r5
    366c:	f014 0403 	ands.w	r4, r4, #3
    3670:	d004      	beq.n	367c <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3672:	462b      	mov	r3, r5
    3674:	4632      	mov	r2, r6
    3676:	2145      	movs	r1, #69	; 0x45
    3678:	480b      	ldr	r0, [pc, #44]	; (36a8 <flash_nrf_write+0x64>)
    367a:	e7f0      	b.n	365e <flash_nrf_write+0x1a>
	if (!len) {
    367c:	b14d      	cbz	r5, 3692 <flash_nrf_write+0x4e>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    367e:	192b      	adds	r3, r5, r4
    3680:	2b03      	cmp	r3, #3
    3682:	eba6 0004 	sub.w	r0, r6, r4
    3686:	d806      	bhi.n	3696 <flash_nrf_write+0x52>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3688:	4a08      	ldr	r2, [pc, #32]	; (36ac <flash_nrf_write+0x68>)
    368a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    368e:	07db      	lsls	r3, r3, #31
    3690:	d5fb      	bpl.n	368a <flash_nrf_write+0x46>
	return ret;
    3692:	2000      	movs	r0, #0
    3694:	e7e7      	b.n	3666 <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    3696:	1b3b      	subs	r3, r7, r4
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    3698:	6819      	ldr	r1, [r3, #0]
    369a:	f001 fd2f 	bl	50fc <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    369e:	3c04      	subs	r4, #4
}
    36a0:	e7ed      	b.n	367e <flash_nrf_write+0x3a>
    36a2:	bf00      	nop
    36a4:	000099e0 	.word	0x000099e0
    36a8:	00009a02 	.word	0x00009a02
    36ac:	50039000 	.word	0x50039000

000036b0 <flash_nrf_read>:
{
    36b0:	b570      	push	{r4, r5, r6, lr}
    36b2:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    36b4:	4619      	mov	r1, r3
    36b6:	4628      	mov	r0, r5
{
    36b8:	4616      	mov	r6, r2
    36ba:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    36bc:	f003 f847 	bl	674e <is_regular_addr_valid>
    36c0:	b940      	cbnz	r0, 36d4 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    36c2:	4808      	ldr	r0, [pc, #32]	; (36e4 <flash_nrf_read+0x34>)
    36c4:	4623      	mov	r3, r4
    36c6:	462a      	mov	r2, r5
    36c8:	2145      	movs	r1, #69	; 0x45
    36ca:	f002 fbd4 	bl	5e76 <z_log_minimal_printk>
    36ce:	f06f 0015 	mvn.w	r0, #21
}
    36d2:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    36d4:	b124      	cbz	r4, 36e0 <flash_nrf_read+0x30>
	memcpy(data, (void *)addr, len);
    36d6:	4622      	mov	r2, r4
    36d8:	4629      	mov	r1, r5
    36da:	4630      	mov	r0, r6
    36dc:	f002 ff3a 	bl	6554 <memcpy>
		return 0;
    36e0:	2000      	movs	r0, #0
    36e2:	e7f6      	b.n	36d2 <flash_nrf_read+0x22>
    36e4:	000099e0 	.word	0x000099e0

000036e8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    36e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36ea:	4604      	mov	r4, r0
    36ec:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    36ee:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    36f0:	f004 ff9b 	bl	862a <k_is_in_isr>
    36f4:	b990      	cbnz	r0, 371c <uarte_nrfx_poll_out+0x34>
	return !z_sys_post_kernel;
    36f6:	4b1f      	ldr	r3, [pc, #124]	; (3774 <uarte_nrfx_poll_out+0x8c>)
    36f8:	781b      	ldrb	r3, [r3, #0]
    36fa:	b17b      	cbz	r3, 371c <uarte_nrfx_poll_out+0x34>
{
    36fc:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    36fe:	6860      	ldr	r0, [r4, #4]
    3700:	f003 f966 	bl	69d0 <is_tx_ready.isra.0>
    3704:	b9e0      	cbnz	r0, 3740 <uarte_nrfx_poll_out+0x58>
    3706:	2001      	movs	r0, #1
    3708:	f004 feca 	bl	84a0 <nrfx_busy_wait>
    370c:	3e01      	subs	r6, #1
    370e:	d1f6      	bne.n	36fe <uarte_nrfx_poll_out+0x16>
    3710:	e7f4      	b.n	36fc <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    3712:	f381 8811 	msr	BASEPRI, r1
    3716:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    371a:	e7ef      	b.n	36fc <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    371c:	f04f 0320 	mov.w	r3, #32
    3720:	f3ef 8111 	mrs	r1, BASEPRI
    3724:	f383 8812 	msr	BASEPRI_MAX, r3
    3728:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    372c:	6860      	ldr	r0, [r4, #4]
    372e:	460e      	mov	r6, r1
    3730:	f003 f94e 	bl	69d0 <is_tx_ready.isra.0>
    3734:	b990      	cbnz	r0, 375c <uarte_nrfx_poll_out+0x74>
	__asm__ volatile(
    3736:	f381 8811 	msr	BASEPRI, r1
    373a:	f3bf 8f6f 	isb	sy
}
    373e:	e7ed      	b.n	371c <uarte_nrfx_poll_out+0x34>
	__asm__ volatile(
    3740:	f04f 0320 	mov.w	r3, #32
    3744:	f3ef 8111 	mrs	r1, BASEPRI
    3748:	f383 8812 	msr	BASEPRI_MAX, r3
    374c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3750:	6860      	ldr	r0, [r4, #4]
    3752:	460e      	mov	r6, r1
    3754:	f003 f93c 	bl	69d0 <is_tx_ready.isra.0>
    3758:	2800      	cmp	r0, #0
    375a:	d0da      	beq.n	3712 <uarte_nrfx_poll_out+0x2a>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	*data->char_out = c;
    375c:	697b      	ldr	r3, [r7, #20]
	tx_start(dev, data->char_out, 1);
    375e:	2201      	movs	r2, #1
	*data->char_out = c;
    3760:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    3762:	4620      	mov	r0, r4
    3764:	6979      	ldr	r1, [r7, #20]
    3766:	f003 f873 	bl	6850 <tx_start>
	__asm__ volatile(
    376a:	f386 8811 	msr	BASEPRI, r6
    376e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    3772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3774:	20003d71 	.word	0x20003d71

00003778 <uarte_nrfx_configure>:
{
    3778:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    377a:	794b      	ldrb	r3, [r1, #5]
    377c:	2b01      	cmp	r3, #1
    377e:	d026      	beq.n	37ce <uarte_nrfx_configure+0x56>
    3780:	2b03      	cmp	r3, #3
    3782:	d121      	bne.n	37c8 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3784:	2510      	movs	r5, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3786:	798b      	ldrb	r3, [r1, #6]
    3788:	2b03      	cmp	r3, #3
    378a:	d11d      	bne.n	37c8 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    378c:	79ce      	ldrb	r6, [r1, #7]
    378e:	b10e      	cbz	r6, 3794 <uarte_nrfx_configure+0x1c>
    3790:	2e01      	cmp	r6, #1
    3792:	d119      	bne.n	37c8 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    3794:	790a      	ldrb	r2, [r1, #4]
    3796:	b112      	cbz	r2, 379e <uarte_nrfx_configure+0x26>
    3798:	2a02      	cmp	r2, #2
    379a:	d115      	bne.n	37c8 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    379c:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    379e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    37a0:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    37a2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    37a6:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    37a8:	d067      	beq.n	387a <uarte_nrfx_configure+0x102>
    37aa:	d82d      	bhi.n	3808 <uarte_nrfx_configure+0x90>
    37ac:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    37b0:	d066      	beq.n	3880 <uarte_nrfx_configure+0x108>
    37b2:	d816      	bhi.n	37e2 <uarte_nrfx_configure+0x6a>
    37b4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    37b8:	d064      	beq.n	3884 <uarte_nrfx_configure+0x10c>
    37ba:	d80a      	bhi.n	37d2 <uarte_nrfx_configure+0x5a>
    37bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    37c0:	d063      	beq.n	388a <uarte_nrfx_configure+0x112>
    37c2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    37c6:	d063      	beq.n	3890 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    37c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    37cc:	e054      	b.n	3878 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    37ce:	2500      	movs	r5, #0
    37d0:	e7d9      	b.n	3786 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    37d2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    37d6:	d05e      	beq.n	3896 <uarte_nrfx_configure+0x11e>
    37d8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    37dc:	d1f4      	bne.n	37c8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    37de:	4b38      	ldr	r3, [pc, #224]	; (38c0 <uarte_nrfx_configure+0x148>)
    37e0:	e03c      	b.n	385c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    37e2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    37e6:	d059      	beq.n	389c <uarte_nrfx_configure+0x124>
    37e8:	d807      	bhi.n	37fa <uarte_nrfx_configure+0x82>
    37ea:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    37ee:	d057      	beq.n	38a0 <uarte_nrfx_configure+0x128>
    37f0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    37f4:	d1e8      	bne.n	37c8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    37f6:	4b33      	ldr	r3, [pc, #204]	; (38c4 <uarte_nrfx_configure+0x14c>)
    37f8:	e030      	b.n	385c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    37fa:	f647 2412 	movw	r4, #31250	; 0x7a12
    37fe:	42a3      	cmp	r3, r4
    3800:	d1e2      	bne.n	37c8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3802:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3806:	e029      	b.n	385c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3808:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    380c:	d04a      	beq.n	38a4 <uarte_nrfx_configure+0x12c>
    380e:	d813      	bhi.n	3838 <uarte_nrfx_configure+0xc0>
    3810:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3814:	d049      	beq.n	38aa <uarte_nrfx_configure+0x132>
    3816:	d809      	bhi.n	382c <uarte_nrfx_configure+0xb4>
    3818:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    381c:	42a3      	cmp	r3, r4
    381e:	d046      	beq.n	38ae <uarte_nrfx_configure+0x136>
    3820:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3824:	d1d0      	bne.n	37c8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3826:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    382a:	e017      	b.n	385c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    382c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3830:	d1ca      	bne.n	37c8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3832:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3836:	e011      	b.n	385c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3838:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    383c:	d03a      	beq.n	38b4 <uarte_nrfx_configure+0x13c>
    383e:	d808      	bhi.n	3852 <uarte_nrfx_configure+0xda>
    3840:	4c21      	ldr	r4, [pc, #132]	; (38c8 <uarte_nrfx_configure+0x150>)
    3842:	42a3      	cmp	r3, r4
    3844:	d039      	beq.n	38ba <uarte_nrfx_configure+0x142>
    3846:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    384a:	d1bd      	bne.n	37c8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    384c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3850:	e004      	b.n	385c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3852:	4c1e      	ldr	r4, [pc, #120]	; (38cc <uarte_nrfx_configure+0x154>)
    3854:	42a3      	cmp	r3, r4
    3856:	d1b7      	bne.n	37c8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3858:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    385c:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    385e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    3862:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    3864:	4335      	orrs	r5, r6
    3866:	681b      	ldr	r3, [r3, #0]
    3868:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    386a:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
    386e:	1d23      	adds	r3, r4, #4
    3870:	c903      	ldmia	r1, {r0, r1}
    3872:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    3876:	2000      	movs	r0, #0
}
    3878:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    387a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    387e:	e7ed      	b.n	385c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3880:	4b13      	ldr	r3, [pc, #76]	; (38d0 <uarte_nrfx_configure+0x158>)
    3882:	e7eb      	b.n	385c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3884:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3888:	e7e8      	b.n	385c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    388a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    388e:	e7e5      	b.n	385c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3890:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3894:	e7e2      	b.n	385c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3896:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    389a:	e7df      	b.n	385c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    389c:	4b0d      	ldr	r3, [pc, #52]	; (38d4 <uarte_nrfx_configure+0x15c>)
    389e:	e7dd      	b.n	385c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    38a0:	4b0d      	ldr	r3, [pc, #52]	; (38d8 <uarte_nrfx_configure+0x160>)
    38a2:	e7db      	b.n	385c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    38a4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    38a8:	e7d8      	b.n	385c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    38aa:	4b0c      	ldr	r3, [pc, #48]	; (38dc <uarte_nrfx_configure+0x164>)
    38ac:	e7d6      	b.n	385c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    38ae:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    38b2:	e7d3      	b.n	385c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    38b4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    38b8:	e7d0      	b.n	385c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    38ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    38be:	e7cd      	b.n	385c <uarte_nrfx_configure+0xe4>
    38c0:	0013b000 	.word	0x0013b000
    38c4:	004ea000 	.word	0x004ea000
    38c8:	0003d090 	.word	0x0003d090
    38cc:	000f4240 	.word	0x000f4240
    38d0:	00275000 	.word	0x00275000
    38d4:	0075c000 	.word	0x0075c000
    38d8:	003af000 	.word	0x003af000
    38dc:	013a9000 	.word	0x013a9000

000038e0 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    38e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    38e4:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    38e6:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    38e8:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    38ea:	683c      	ldr	r4, [r7, #0]
static int uarte_instance_init(const struct device *dev,
    38ec:	4680      	mov	r8, r0
    38ee:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    38f2:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    38f4:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    38f8:	aa01      	add	r2, sp, #4
    38fa:	4648      	mov	r0, r9
    38fc:	f003 f93a 	bl	6b74 <pinctrl_lookup_state>
	if (ret < 0) {
    3900:	1e05      	subs	r5, r0, #0
    3902:	db1e      	blt.n	3942 <uarte_instance_init.constprop.0+0x62>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    3904:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3906:	f8d9 2000 	ldr.w	r2, [r9]
    390a:	7919      	ldrb	r1, [r3, #4]
    390c:	6818      	ldr	r0, [r3, #0]
    390e:	f000 fa51 	bl	3db4 <pinctrl_configure_pins>
	if (err < 0) {
    3912:	1e05      	subs	r5, r0, #0
    3914:	db15      	blt.n	3942 <uarte_instance_init.constprop.0+0x62>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    3916:	4640      	mov	r0, r8
    3918:	1d31      	adds	r1, r6, #4
    391a:	f7ff ff2d 	bl	3778 <uarte_nrfx_configure>
	if (err) {
    391e:	4605      	mov	r5, r0
    3920:	b978      	cbnz	r0, 3942 <uarte_instance_init.constprop.0+0x62>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3922:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3924:	0799      	lsls	r1, r3, #30
    3926:	d51d      	bpl.n	3964 <uarte_instance_init.constprop.0+0x84>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3928:	f106 001c 	add.w	r0, r6, #28
    392c:	f001 f86e 	bl	4a0c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3930:	4b20      	ldr	r3, [pc, #128]	; (39b4 <uarte_instance_init.constprop.0+0xd4>)
    3932:	4298      	cmp	r0, r3
    3934:	d009      	beq.n	394a <uarte_instance_init.constprop.0+0x6a>
		LOG_ERR("Failed to allocate PPI Channel");
    3936:	2145      	movs	r1, #69	; 0x45
    3938:	481f      	ldr	r0, [pc, #124]	; (39b8 <uarte_instance_init.constprop.0+0xd8>)
    393a:	f002 fa9c 	bl	5e76 <z_log_minimal_printk>
		return -EIO;
    393e:	f06f 0504 	mvn.w	r5, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3942:	4628      	mov	r0, r5
    3944:	b003      	add	sp, #12
    3946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    394a:	7f33      	ldrb	r3, [r6, #28]
    394c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3950:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3954:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3958:	2301      	movs	r3, #1
    395a:	7f32      	ldrb	r2, [r6, #28]
    395c:	4093      	lsls	r3, r2
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    395e:	4a17      	ldr	r2, [pc, #92]	; (39bc <uarte_instance_init.constprop.0+0xdc>)
    3960:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3964:	2308      	movs	r3, #8
    3966:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    396a:	7a3b      	ldrb	r3, [r7, #8]
    396c:	b953      	cbnz	r3, 3984 <uarte_instance_init.constprop.0+0xa4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    396e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3972:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3976:	69b3      	ldr	r3, [r6, #24]
    3978:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    397c:	2301      	movs	r3, #1
    397e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3982:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3984:	687b      	ldr	r3, [r7, #4]
    3986:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3988:	bf5c      	itt	pl
    398a:	f44f 7380 	movpl.w	r3, #256	; 0x100
    398e:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3992:	687b      	ldr	r3, [r7, #4]
    3994:	06db      	lsls	r3, r3, #27
    3996:	bf44      	itt	mi
    3998:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    399c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    39a0:	6973      	ldr	r3, [r6, #20]
    39a2:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    39a6:	2300      	movs	r3, #0
    39a8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39ac:	2301      	movs	r3, #1
    39ae:	60a3      	str	r3, [r4, #8]
    39b0:	60e3      	str	r3, [r4, #12]
	return 0;
    39b2:	e7c6      	b.n	3942 <uarte_instance_init.constprop.0+0x62>
    39b4:	0bad0000 	.word	0x0bad0000
    39b8:	00009a46 	.word	0x00009a46
    39bc:	50017000 	.word	0x50017000

000039c0 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    39c0:	2301      	movs	r3, #1
    39c2:	4083      	lsls	r3, r0
{
    39c4:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    39c6:	43dc      	mvns	r4, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    39c8:	4a0b      	ldr	r2, [pc, #44]	; (39f8 <compare_int_lock+0x38>)
    39ca:	e8d2 1fef 	ldaex	r1, [r2]
    39ce:	ea01 0504 	and.w	r5, r1, r4
    39d2:	e8c2 5fe6 	stlex	r6, r5, [r2]
    39d6:	2e00      	cmp	r6, #0
    39d8:	d1f7      	bne.n	39ca <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    39da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    39de:	4082      	lsls	r2, r0
    39e0:	4806      	ldr	r0, [pc, #24]	; (39fc <compare_int_lock+0x3c>)
    39e2:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    39e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    39ea:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    39ee:	420b      	tst	r3, r1
}
    39f0:	bf14      	ite	ne
    39f2:	2001      	movne	r0, #1
    39f4:	2000      	moveq	r0, #0
    39f6:	bd70      	pop	{r4, r5, r6, pc}
    39f8:	20001b68 	.word	0x20001b68
    39fc:	50015000 	.word	0x50015000

00003a00 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    3a00:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    3a02:	490e      	ldr	r1, [pc, #56]	; (3a3c <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    3a04:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    3a08:	e9d1 3400 	ldrd	r3, r4, [r1]
    3a0c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    3a0e:	18c3      	adds	r3, r0, r3
    3a10:	f144 0400 	adc.w	r4, r4, #0
    3a14:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3a18:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    3a1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3a20:	d209      	bcs.n	3a36 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3a22:	4b07      	ldr	r3, [pc, #28]	; (3a40 <sys_clock_timeout_handler+0x40>)
    3a24:	681b      	ldr	r3, [r3, #0]
    3a26:	0a1a      	lsrs	r2, r3, #8
    3a28:	061b      	lsls	r3, r3, #24
    3a2a:	199c      	adds	r4, r3, r6
    3a2c:	4b05      	ldr	r3, [pc, #20]	; (3a44 <sys_clock_timeout_handler+0x44>)
    3a2e:	f142 0500 	adc.w	r5, r2, #0
    3a32:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    3a36:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    3a38:	f001 bc8c 	b.w	5354 <sys_clock_announce>
    3a3c:	20000170 	.word	0x20000170
    3a40:	20001b6c 	.word	0x20001b6c
    3a44:	20000178 	.word	0x20000178

00003a48 <compare_int_unlock>:
	if (key) {
    3a48:	b1d9      	cbz	r1, 3a82 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    3a4a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3a4c:	4a0d      	ldr	r2, [pc, #52]	; (3a84 <compare_int_unlock+0x3c>)
    3a4e:	4083      	lsls	r3, r0
    3a50:	e8d2 cfef 	ldaex	ip, [r2]
    3a54:	ea4c 0c03 	orr.w	ip, ip, r3
    3a58:	e8c2 cfe1 	stlex	r1, ip, [r2]
    3a5c:	2900      	cmp	r1, #0
    3a5e:	d1f7      	bne.n	3a50 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    3a64:	4a08      	ldr	r2, [pc, #32]	; (3a88 <compare_int_unlock+0x40>)
    3a66:	4083      	lsls	r3, r0
    3a68:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3a6c:	4b07      	ldr	r3, [pc, #28]	; (3a8c <compare_int_unlock+0x44>)
    3a6e:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3a72:	40c3      	lsrs	r3, r0
    3a74:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a76:	bf42      	ittt	mi
    3a78:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    3a7c:	4b04      	ldrmi	r3, [pc, #16]	; (3a90 <compare_int_unlock+0x48>)
    3a7e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3a82:	4770      	bx	lr
    3a84:	20001b68 	.word	0x20001b68
    3a88:	50015000 	.word	0x50015000
    3a8c:	20001b64 	.word	0x20001b64
    3a90:	e000e100 	.word	0xe000e100

00003a94 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3a94:	4b0d      	ldr	r3, [pc, #52]	; (3acc <z_nrf_rtc_timer_read+0x38>)
    3a96:	6818      	ldr	r0, [r3, #0]
    3a98:	0a01      	lsrs	r1, r0, #8
    3a9a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3a9c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3aa0:	4b0b      	ldr	r3, [pc, #44]	; (3ad0 <z_nrf_rtc_timer_read+0x3c>)
    3aa2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3aa6:	1818      	adds	r0, r3, r0
    3aa8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3ab0:	d20a      	bcs.n	3ac8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3ab2:	4b08      	ldr	r3, [pc, #32]	; (3ad4 <z_nrf_rtc_timer_read+0x40>)
    3ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ab8:	4290      	cmp	r0, r2
    3aba:	eb71 0303 	sbcs.w	r3, r1, r3
    3abe:	d203      	bcs.n	3ac8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3ac0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3ac4:	f141 0100 	adc.w	r1, r1, #0
}
    3ac8:	4770      	bx	lr
    3aca:	bf00      	nop
    3acc:	20001b6c 	.word	0x20001b6c
    3ad0:	50015000 	.word	0x50015000
    3ad4:	20000178 	.word	0x20000178

00003ad8 <compare_set>:
{
    3ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3adc:	4616      	mov	r6, r2
    3ade:	461f      	mov	r7, r3
    3ae0:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    3ae2:	f7ff ff6d 	bl	39c0 <compare_int_lock>
    3ae6:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3ae8:	f7ff ffd4 	bl	3a94 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3aec:	42b0      	cmp	r0, r6
    3aee:	eb71 0307 	sbcs.w	r3, r1, r7
    3af2:	d250      	bcs.n	3b96 <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    3af4:	4b38      	ldr	r3, [pc, #224]	; (3bd8 <compare_set+0x100>)
    3af6:	1a30      	subs	r0, r6, r0
    3af8:	eb67 0101 	sbc.w	r1, r7, r1
    3afc:	4298      	cmp	r0, r3
    3afe:	f171 0100 	sbcs.w	r1, r1, #0
    3b02:	d265      	bcs.n	3bd0 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    3b04:	4b35      	ldr	r3, [pc, #212]	; (3bdc <compare_set+0x104>)
    3b06:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    3b0a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3b0e:	429f      	cmp	r7, r3
    3b10:	bf08      	it	eq
    3b12:	4296      	cmpeq	r6, r2
    3b14:	d049      	beq.n	3baa <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3b16:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
    3b1a:	4931      	ldr	r1, [pc, #196]	; (3be0 <compare_set+0x108>)
    3b1c:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    3b20:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    3b22:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    3b26:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    3b2a:	f003 f817 	bl	6b5c <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    3b2e:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    3b32:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3b34:	f104 0550 	add.w	r5, r4, #80	; 0x50
    3b38:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b3a:	b2ad      	uxth	r5, r5
    3b3c:	f105 2550 	add.w	r5, r5, #1342197760	; 0x50005000
    p_reg->CC[ch] = cc_val;
    3b40:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    3b44:	4a27      	ldr	r2, [pc, #156]	; (3be4 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b46:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    p_reg->CC[ch] = cc_val;
    3b4a:	9301      	str	r3, [sp, #4]
    3b4c:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3b50:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    3b54:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    3b58:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    3b5c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3b60:	eba0 0008 	sub.w	r0, r0, r8
    3b64:	3803      	subs	r0, #3
    3b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    3b6a:	4290      	cmp	r0, r2
    3b6c:	d91d      	bls.n	3baa <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b6e:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    3b70:	b160      	cbz	r0, 3b8c <compare_set+0xb4>
     return p_reg->COUNTER;
    3b72:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3b76:	eba8 000b 	sub.w	r0, r8, fp
    3b7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    3b7e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3b82:	d912      	bls.n	3baa <compare_set+0xd2>
					event_clear(chan);
    3b84:	4620      	mov	r0, r4
    3b86:	f002 ffe9 	bl	6b5c <event_clear>
    3b8a:	4a16      	ldr	r2, [pc, #88]	; (3be4 <compare_set+0x10c>)
			cc_val = now + cc_inc;
    3b8c:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    3b90:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    3b94:	e7da      	b.n	3b4c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    3b96:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3b98:	4a13      	ldr	r2, [pc, #76]	; (3be8 <compare_set+0x110>)
    3b9a:	40a3      	lsls	r3, r4
    3b9c:	e8d2 0fef 	ldaex	r0, [r2]
    3ba0:	4318      	orrs	r0, r3
    3ba2:	e8c2 0fe1 	stlex	r1, r0, [r2]
    3ba6:	2900      	cmp	r1, #0
    3ba8:	d1f8      	bne.n	3b9c <compare_set+0xc4>
	return ret;
    3baa:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    3bac:	490b      	ldr	r1, [pc, #44]	; (3bdc <compare_set+0x104>)
	cc_data[chan].callback = handler;
    3bae:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    3bb0:	0123      	lsls	r3, r4, #4
    3bb2:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    3bb6:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    3bb8:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    3bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3bbe:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    3bc0:	4620      	mov	r0, r4
    3bc2:	9900      	ldr	r1, [sp, #0]
    3bc4:	f7ff ff40 	bl	3a48 <compare_int_unlock>
}
    3bc8:	4628      	mov	r0, r5
    3bca:	b003      	add	sp, #12
    3bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    3bd0:	f06f 0515 	mvn.w	r5, #21
    3bd4:	e7f4      	b.n	3bc0 <compare_set+0xe8>
    3bd6:	bf00      	nop
    3bd8:	00800001 	.word	0x00800001
    3bdc:	20000160 	.word	0x20000160
    3be0:	50015000 	.word	0x50015000
    3be4:	007ffffd 	.word	0x007ffffd
    3be8:	20001b64 	.word	0x20001b64

00003bec <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3bec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    3bee:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3bf0:	f04f 30ff 	mov.w	r0, #4294967295
    3bf4:	f04f 31ff 	mov.w	r1, #4294967295
    3bf8:	4d16      	ldr	r5, [pc, #88]	; (3c54 <sys_clock_driver_init+0x68>)
    3bfa:	4b17      	ldr	r3, [pc, #92]	; (3c58 <sys_clock_driver_init+0x6c>)
    3bfc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3c00:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3c08:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3c0e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    3c12:	4b12      	ldr	r3, [pc, #72]	; (3c5c <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3c14:	2101      	movs	r1, #1
    3c16:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3c1a:	2015      	movs	r0, #21
    3c1c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3c20:	4622      	mov	r2, r4
    3c22:	f7fe ff2f 	bl	2a84 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3c26:	2015      	movs	r0, #21
    3c28:	f7fe ff10 	bl	2a4c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3c2c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3c2e:	4a0c      	ldr	r2, [pc, #48]	; (3c60 <sys_clock_driver_init+0x74>)
    3c30:	60ab      	str	r3, [r5, #8]
    3c32:	602b      	str	r3, [r5, #0]
    3c34:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3c36:	4b0b      	ldr	r3, [pc, #44]	; (3c64 <sys_clock_driver_init+0x78>)
    3c38:	4a0b      	ldr	r2, [pc, #44]	; (3c68 <sys_clock_driver_init+0x7c>)
    3c3a:	9300      	str	r3, [sp, #0]
    3c3c:	4620      	mov	r0, r4
    3c3e:	2300      	movs	r3, #0
    3c40:	9401      	str	r4, [sp, #4]
    3c42:	f7ff ff49 	bl	3ad8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3c46:	4630      	mov	r0, r6
    3c48:	f7ff fb06 	bl	3258 <z_nrf_clock_control_lf_on>

	return 0;
}
    3c4c:	4620      	mov	r0, r4
    3c4e:	b002      	add	sp, #8
    3c50:	bd70      	pop	{r4, r5, r6, pc}
    3c52:	bf00      	nop
    3c54:	50015000 	.word	0x50015000
    3c58:	20000160 	.word	0x20000160
    3c5c:	e000e100 	.word	0xe000e100
    3c60:	20001b68 	.word	0x20001b68
    3c64:	00003a01 	.word	0x00003a01
    3c68:	007fffff 	.word	0x007fffff

00003c6c <rtc_nrf_isr>:
{
    3c6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3c70:	4b2e      	ldr	r3, [pc, #184]	; (3d2c <rtc_nrf_isr+0xc0>)
    3c72:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3c76:	0790      	lsls	r0, r2, #30
    3c78:	d50b      	bpl.n	3c92 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3c7a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    3c7e:	b142      	cbz	r2, 3c92 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3c80:	2200      	movs	r2, #0
    3c82:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    3c86:	4a2a      	ldr	r2, [pc, #168]	; (3d30 <rtc_nrf_isr+0xc4>)
    3c88:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3c8c:	6813      	ldr	r3, [r2, #0]
    3c8e:	3301      	adds	r3, #1
    3c90:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    3c92:	4a26      	ldr	r2, [pc, #152]	; (3d2c <rtc_nrf_isr+0xc0>)
    3c94:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3c98:	03d9      	lsls	r1, r3, #15
    3c9a:	d527      	bpl.n	3cec <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3c9c:	4b25      	ldr	r3, [pc, #148]	; (3d34 <rtc_nrf_isr+0xc8>)
    3c9e:	e8d3 1fef 	ldaex	r1, [r3]
    3ca2:	f021 0001 	bic.w	r0, r1, #1
    3ca6:	e8c3 0fe4 	stlex	r4, r0, [r3]
    3caa:	2c00      	cmp	r4, #0
    3cac:	d1f7      	bne.n	3c9e <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    3cae:	07cb      	lsls	r3, r1, #31
    3cb0:	d402      	bmi.n	3cb8 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3cb2:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    3cb6:	b1cb      	cbz	r3, 3cec <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3cb8:	2500      	movs	r5, #0
    3cba:	4c1c      	ldr	r4, [pc, #112]	; (3d2c <rtc_nrf_isr+0xc0>)
    3cbc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3cc0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    3cc4:	f7ff fee6 	bl	3a94 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3cc8:	f04f 0320 	mov.w	r3, #32
    3ccc:	f3ef 8211 	mrs	r2, BASEPRI
    3cd0:	f383 8812 	msr	BASEPRI_MAX, r3
    3cd4:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3cd8:	4b17      	ldr	r3, [pc, #92]	; (3d38 <rtc_nrf_isr+0xcc>)
    3cda:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3cde:	42b0      	cmp	r0, r6
    3ce0:	41b9      	sbcs	r1, r7
    3ce2:	d206      	bcs.n	3cf2 <rtc_nrf_isr+0x86>
	__asm__ volatile(
    3ce4:	f382 8811 	msr	BASEPRI, r2
    3ce8:	f3bf 8f6f 	isb	sy
}
    3cec:	b003      	add	sp, #12
    3cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3cf2:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    3cf6:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3cfa:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    3cfe:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3d00:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    3d04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3d08:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d0c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3d10:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3d14:	f382 8811 	msr	BASEPRI, r2
    3d18:	f3bf 8f6f 	isb	sy
		if (handler) {
    3d1c:	2900      	cmp	r1, #0
    3d1e:	d0e5      	beq.n	3cec <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    3d20:	9000      	str	r0, [sp, #0]
    3d22:	4632      	mov	r2, r6
    3d24:	463b      	mov	r3, r7
    3d26:	4628      	mov	r0, r5
    3d28:	4788      	blx	r1
    3d2a:	e7df      	b.n	3cec <rtc_nrf_isr+0x80>
    3d2c:	50015000 	.word	0x50015000
    3d30:	20001b6c 	.word	0x20001b6c
    3d34:	20001b64 	.word	0x20001b64
    3d38:	20000160 	.word	0x20000160

00003d3c <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    3d3c:	1c43      	adds	r3, r0, #1
{
    3d3e:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    3d40:	d021      	beq.n	3d86 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    3d42:	2801      	cmp	r0, #1
    3d44:	dd21      	ble.n	3d8a <sys_clock_set_timeout+0x4e>
    3d46:	4a12      	ldr	r2, [pc, #72]	; (3d90 <sys_clock_set_timeout+0x54>)
    3d48:	4b12      	ldr	r3, [pc, #72]	; (3d94 <sys_clock_set_timeout+0x58>)
    3d4a:	4290      	cmp	r0, r2
    3d4c:	bfd4      	ite	le
    3d4e:	4604      	movle	r4, r0
    3d50:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3d52:	f7ff fe9f 	bl	3a94 <z_nrf_rtc_timer_read>
    3d56:	4b10      	ldr	r3, [pc, #64]	; (3d98 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    3d58:	490e      	ldr	r1, [pc, #56]	; (3d94 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d5e:	1a80      	subs	r0, r0, r2
		cyc = 0;
    3d60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3d64:	bf28      	it	cs
    3d66:	2400      	movcs	r4, #0
	cyc += unannounced;
    3d68:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    3d6a:	428c      	cmp	r4, r1
    3d6c:	bf28      	it	cs
    3d6e:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    3d70:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3d72:	490a      	ldr	r1, [pc, #40]	; (3d9c <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    3d74:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3d76:	9001      	str	r0, [sp, #4]
    3d78:	9100      	str	r1, [sp, #0]
    3d7a:	f143 0300 	adc.w	r3, r3, #0
    3d7e:	f7ff feab 	bl	3ad8 <compare_set>
}
    3d82:	b002      	add	sp, #8
    3d84:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    3d86:	4c03      	ldr	r4, [pc, #12]	; (3d94 <sys_clock_set_timeout+0x58>)
    3d88:	e7e3      	b.n	3d52 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    3d8a:	2401      	movs	r4, #1
    3d8c:	e7e1      	b.n	3d52 <sys_clock_set_timeout+0x16>
    3d8e:	bf00      	nop
    3d90:	007ffffe 	.word	0x007ffffe
    3d94:	007fffff 	.word	0x007fffff
    3d98:	20000170 	.word	0x20000170
    3d9c:	00003a01 	.word	0x00003a01

00003da0 <sys_clock_elapsed>:
{
    3da0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3da2:	f7ff fe77 	bl	3a94 <z_nrf_rtc_timer_read>
    3da6:	4b02      	ldr	r3, [pc, #8]	; (3db0 <sys_clock_elapsed+0x10>)
    3da8:	681b      	ldr	r3, [r3, #0]
}
    3daa:	1ac0      	subs	r0, r0, r3
    3dac:	bd08      	pop	{r3, pc}
    3dae:	bf00      	nop
    3db0:	20000170 	.word	0x20000170

00003db4 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    3db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3db8:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    3dba:	4e3f      	ldr	r6, [pc, #252]	; (3eb8 <pinctrl_configure_pins+0x104>)
    3dbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    3dc0:	4281      	cmp	r1, r0
    3dc2:	d102      	bne.n	3dca <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    3dc4:	2000      	movs	r0, #0
}
    3dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    3dca:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    3dcc:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    3dd0:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    3dd4:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    3dd6:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    3dda:	bf08      	it	eq
    3ddc:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    3de0:	2d19      	cmp	r5, #25
    3de2:	d866      	bhi.n	3eb2 <pinctrl_configure_pins+0xfe>
    3de4:	e8df f005 	tbb	[pc, r5]
    3de8:	1e1b160d 	.word	0x1e1b160d
    3dec:	651e2d21 	.word	0x651e2d21
    3df0:	31656565 	.word	0x31656565
    3df4:	65656551 	.word	0x65656551
    3df8:	65656565 	.word	0x65656565
    3dfc:	5c546565 	.word	0x5c546565
    3e00:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
    3e02:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    3e06:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3e0a:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    3e0e:	60b5      	str	r5, [r6, #8]
}
    3e10:	2501      	movs	r5, #1
    3e12:	e002      	b.n	3e1a <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
    3e14:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    3e18:	2500      	movs	r5, #0
    3e1a:	46ac      	mov	ip, r5
    3e1c:	e01c      	b.n	3e58 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
    3e1e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    3e22:	e7f0      	b.n	3e06 <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
    3e24:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    3e28:	e7f6      	b.n	3e18 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    3e2a:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    3e2c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    3e30:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3e34:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    3e38:	f8c6 c00c 	str.w	ip, [r6, #12]
}
    3e3c:	f04f 0c01 	mov.w	ip, #1
    3e40:	e00a      	b.n	3e58 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    3e42:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    3e46:	2501      	movs	r5, #1
    3e48:	e7f2      	b.n	3e30 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    3e4a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    3e4e:	2c00      	cmp	r4, #0
    3e50:	d1e2      	bne.n	3e18 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    3e52:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
    3e54:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    3e56:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    3e58:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    3e5c:	0224      	lsls	r4, r4, #8
    3e5e:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3e62:	f1b8 0f00 	cmp.w	r8, #0
    3e66:	bf1c      	itt	ne
    3e68:	f04f 0c00 	movne.w	ip, #0
    3e6c:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3e6e:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
    3e72:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
    3e76:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3e7a:	ea44 040c 	orr.w	r4, r4, ip
    3e7e:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    3e82:	3380      	adds	r3, #128	; 0x80
    3e84:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    3e88:	e79a      	b.n	3dc0 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    3e8a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    3e8e:	e7de      	b.n	3e4e <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    3e90:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    3e94:	6805      	ldr	r5, [r0, #0]
    3e96:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    3e9a:	2d00      	cmp	r5, #0
    3e9c:	d0d3      	beq.n	3e46 <pinctrl_configure_pins+0x92>
    3e9e:	e7b2      	b.n	3e06 <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    3ea0:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    3ea4:	e7f6      	b.n	3e94 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    3ea6:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    3eaa:	e7f3      	b.n	3e94 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    3eac:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    3eb0:	e7f0      	b.n	3e94 <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
    3eb2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3eb6:	e786      	b.n	3dc6 <pinctrl_configure_pins+0x12>
    3eb8:	50842500 	.word	0x50842500

00003ebc <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3ebc:	4803      	ldr	r0, [pc, #12]	; (3ecc <k_sys_fatal_error_handler+0x10>)
    3ebe:	2145      	movs	r1, #69	; 0x45
{
    3ec0:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    3ec2:	f001 ffd8 	bl	5e76 <z_log_minimal_printk>
		sys_arch_reboot(0);
    3ec6:	2000      	movs	r0, #0
    3ec8:	f7ff f888 	bl	2fdc <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3ecc:	00009a8e 	.word	0x00009a8e

00003ed0 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    3ed0:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3ed2:	6881      	ldr	r1, [r0, #8]
{
    3ed4:	b085      	sub	sp, #20
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3ed6:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    3ed8:	f021 0407 	bic.w	r4, r1, #7
{
    3edc:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    3ede:	f002 f81d 	bl	5f1c <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    3ee2:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    3ee4:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    3ee6:	4668      	mov	r0, sp
    3ee8:	f002 fb3f 	bl	656a <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    3eec:	2210      	movs	r2, #16
    3eee:	4668      	mov	r0, sp
    3ef0:	4906      	ldr	r1, [pc, #24]	; (3f0c <boot_write_magic+0x3c>)
    3ef2:	f002 fb2f 	bl	6554 <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    3ef6:	2310      	movs	r3, #16
    3ef8:	466a      	mov	r2, sp
    3efa:	4621      	mov	r1, r4
    3efc:	4628      	mov	r0, r5
    3efe:	f001 ffdd 	bl	5ebc <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    3f02:	3800      	subs	r0, #0
    3f04:	bf18      	it	ne
    3f06:	2001      	movne	r0, #1
    3f08:	b005      	add	sp, #20
    3f0a:	bd30      	pop	{r4, r5, pc}
    3f0c:	00008d94 	.word	0x00008d94

00003f10 <boot_read_swap_state>:
{
    3f10:	b530      	push	{r4, r5, lr}
    3f12:	460d      	mov	r5, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3f14:	6881      	ldr	r1, [r0, #8]
{
    3f16:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3f18:	2310      	movs	r3, #16
    3f1a:	aa02      	add	r2, sp, #8
    3f1c:	3910      	subs	r1, #16
{
    3f1e:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3f20:	f001 ffb7 	bl	5e92 <flash_area_read>
    if (rc < 0) {
    3f24:	2800      	cmp	r0, #0
    3f26:	da02      	bge.n	3f2e <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    3f28:	2001      	movs	r0, #1
}
    3f2a:	b007      	add	sp, #28
    3f2c:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    3f2e:	2210      	movs	r2, #16
    3f30:	4620      	mov	r0, r4
    3f32:	a902      	add	r1, sp, #8
    3f34:	f002 fe50 	bl	6bd8 <bootutil_buffer_is_erased>
    3f38:	2800      	cmp	r0, #0
    3f3a:	d13a      	bne.n	3fb2 <boot_read_swap_state+0xa2>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    3f3c:	2210      	movs	r2, #16
    3f3e:	491e      	ldr	r1, [pc, #120]	; (3fb8 <boot_read_swap_state+0xa8>)
    3f40:	a802      	add	r0, sp, #8
    3f42:	f002 fae0 	bl	6506 <memcmp>
    return BOOT_MAGIC_BAD;
    3f46:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
    3f48:	bf0c      	ite	eq
    3f4a:	2301      	moveq	r3, #1
    3f4c:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
    3f4e:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    3f50:	4620      	mov	r0, r4
    3f52:	f002 fe2d 	bl	6bb0 <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    3f56:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    3f58:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    3f5a:	f10d 0207 	add.w	r2, sp, #7
    3f5e:	4620      	mov	r0, r4
    3f60:	f001 ff97 	bl	5e92 <flash_area_read>
    if (rc < 0) {
    3f64:	2800      	cmp	r0, #0
    3f66:	dbdf      	blt.n	3f28 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3f68:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    3f6c:	4620      	mov	r0, r4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3f6e:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    3f72:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3f74:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    3f76:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    3f78:	2201      	movs	r2, #1
    3f7a:	f10d 0107 	add.w	r1, sp, #7
    3f7e:	f002 fe2b 	bl	6bd8 <bootutil_buffer_is_erased>
    3f82:	b910      	cbnz	r0, 3f8a <boot_read_swap_state+0x7a>
    3f84:	786b      	ldrb	r3, [r5, #1]
    3f86:	2b04      	cmp	r3, #4
    3f88:	d903      	bls.n	3f92 <boot_read_swap_state+0x82>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    3f8a:	2301      	movs	r3, #1
    3f8c:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    3f8e:	2300      	movs	r3, #0
    3f90:	712b      	strb	r3, [r5, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    3f92:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    3f94:	4620      	mov	r0, r4
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    3f96:	3a18      	subs	r2, #24
    3f98:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    3f9c:	3a08      	subs	r2, #8
    3f9e:	1ca9      	adds	r1, r5, #2
    3fa0:	f002 fe2d 	bl	6bfe <boot_read_flag>
    if (rc) {
    3fa4:	2800      	cmp	r0, #0
    3fa6:	d1bf      	bne.n	3f28 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    3fa8:	4620      	mov	r0, r4
    3faa:	1ce9      	adds	r1, r5, #3
    3fac:	f002 fe80 	bl	6cb0 <boot_read_image_ok>
    3fb0:	e7bb      	b.n	3f2a <boot_read_swap_state+0x1a>
    3fb2:	2303      	movs	r3, #3
    3fb4:	e7cb      	b.n	3f4e <boot_read_swap_state+0x3e>
    3fb6:	bf00      	nop
    3fb8:	00008d94 	.word	0x00008d94

00003fbc <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    3fbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3fbe:	4605      	mov	r5, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    3fc0:	4669      	mov	r1, sp
    3fc2:	2002      	movs	r0, #2
    3fc4:	f002 fe7a 	bl	6cbc <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    3fc8:	4604      	mov	r4, r0
    3fca:	b110      	cbz	r0, 3fd2 <boot_swap_type_multi+0x16>
        return BOOT_SWAP_TYPE_PANIC;
    3fcc:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    3fce:	b004      	add	sp, #16
    3fd0:	bd70      	pop	{r4, r5, r6, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3fd2:	2008      	movs	r0, #8
    3fd4:	a902      	add	r1, sp, #8
    3fd6:	f002 fe71 	bl	6cbc <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    3fda:	2801      	cmp	r0, #1
    3fdc:	d136      	bne.n	404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    3fde:	462a      	mov	r2, r5
    3fe0:	2149      	movs	r1, #73	; 0x49
    3fe2:	4828      	ldr	r0, [pc, #160]	; (4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>)
    3fe4:	f001 ff47 	bl	5e76 <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    3fe8:	4b27      	ldr	r3, [pc, #156]	; (4088 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x88>)
        secondary_slot.image_num = 0;
    3fea:	f88d 400c 	strb.w	r4, [sp, #12]
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    3fee:	9302      	str	r3, [sp, #8]
            boot_magic_compatible_check(table->magic_secondary_slot,
    3ff0:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3ff2:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    3ff6:	f89d 6008 	ldrb.w	r6, [sp, #8]
    3ffa:	4c24      	ldr	r4, [pc, #144]	; (408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3ffc:	4629      	mov	r1, r5
    3ffe:	7820      	ldrb	r0, [r4, #0]
    4000:	f002 fddc 	bl	6bbc <boot_magic_compatible_check>
    4004:	b348      	cbz	r0, 405a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a>
            boot_magic_compatible_check(table->magic_secondary_slot,
    4006:	4631      	mov	r1, r6
    4008:	7860      	ldrb	r0, [r4, #1]
    400a:	f002 fdd7 	bl	6bbc <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    400e:	b320      	cbz	r0, 405a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    4010:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    4012:	2b04      	cmp	r3, #4
    4014:	d003      	beq.n	401e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    4016:	f89d 1003 	ldrb.w	r1, [sp, #3]
    401a:	4299      	cmp	r1, r3
    401c:	d11d      	bne.n	405a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    401e:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    4020:	2b04      	cmp	r3, #4
    4022:	d003      	beq.n	402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    4024:	f89d 100b 	ldrb.w	r1, [sp, #11]
    4028:	4299      	cmp	r1, r3
    402a:	d116      	bne.n	405a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    402c:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    402e:	2b04      	cmp	r3, #4
    4030:	d10f      	bne.n	4052 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52>
            BOOT_LOG_INF("Swap type: %s",
    4032:	7963      	ldrb	r3, [r4, #5]
    4034:	2b02      	cmp	r3, #2
    4036:	d11b      	bne.n	4070 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x70>
    4038:	4a15      	ldr	r2, [pc, #84]	; (4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>)
    403a:	4816      	ldr	r0, [pc, #88]	; (4094 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x94>)
    403c:	2149      	movs	r1, #73	; 0x49
    403e:	f001 ff1a 	bl	5e76 <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    4042:	7960      	ldrb	r0, [r4, #5]
    4044:	1e83      	subs	r3, r0, #2
    4046:	2b02      	cmp	r3, #2
    4048:	d9c1      	bls.n	3fce <boot_swap_type_multi+0x12>
    404a:	e7bf      	b.n	3fcc <boot_swap_type_multi+0x10>
    } else if (rc) {
    404c:	2800      	cmp	r0, #0
    404e:	d0cf      	beq.n	3ff0 <boot_swap_type_multi+0x34>
    4050:	e7bc      	b.n	3fcc <boot_swap_type_multi+0x10>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    4052:	f89d 1002 	ldrb.w	r1, [sp, #2]
    4056:	4299      	cmp	r1, r3
    4058:	d0eb      	beq.n	4032 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x32>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    405a:	3201      	adds	r2, #1
    405c:	2a03      	cmp	r2, #3
    405e:	f104 0406 	add.w	r4, r4, #6
    4062:	d1cb      	bne.n	3ffc <boot_swap_type_multi+0x40>
    BOOT_LOG_INF("Swap type: none");
    4064:	480c      	ldr	r0, [pc, #48]	; (4098 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x98>)
    4066:	2149      	movs	r1, #73	; 0x49
    4068:	f001 ff05 	bl	5e76 <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    406c:	2001      	movs	r0, #1
    406e:	e7ae      	b.n	3fce <boot_swap_type_multi+0x12>
            BOOT_LOG_INF("Swap type: %s",
    4070:	2b03      	cmp	r3, #3
    4072:	d005      	beq.n	4080 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x80>
    4074:	4a09      	ldr	r2, [pc, #36]	; (409c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9c>)
    4076:	490a      	ldr	r1, [pc, #40]	; (40a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa0>)
    4078:	2b04      	cmp	r3, #4
    407a:	bf08      	it	eq
    407c:	460a      	moveq	r2, r1
    407e:	e7dc      	b.n	403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
    4080:	4a08      	ldr	r2, [pc, #32]	; (40a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa4>)
    4082:	e7da      	b.n	403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
    4084:	00009ad3 	.word	0x00009ad3
    4088:	03030103 	.word	0x03030103
    408c:	00009b46 	.word	0x00009b46
    4090:	00009ab5 	.word	0x00009ab5
    4094:	00009b1e 	.word	0x00009b1e
    4098:	00009b31 	.word	0x00009b31
    409c:	00009aba 	.word	0x00009aba
    40a0:	00009acc 	.word	0x00009acc
    40a4:	00009ab0 	.word	0x00009ab0

000040a8 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    40a8:	6801      	ldr	r1, [r0, #0]
    40aa:	4a0e      	ldr	r2, [pc, #56]	; (40e4 <verify_header+0x3c>)
{
    40ac:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    40ae:	4291      	cmp	r1, r2
    40b0:	d115      	bne.n	40de <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    40b2:	69c1      	ldr	r1, [r0, #28]
    40b4:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    40b8:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    40bc:	4291      	cmp	r1, r2
    40be:	d10e      	bne.n	40de <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    40c0:	6882      	ldr	r2, [r0, #8]
    40c2:	2a01      	cmp	r2, #1
    40c4:	d80b      	bhi.n	40de <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    40c6:	68c2      	ldr	r2, [r0, #12]
    40c8:	b112      	cbz	r2, 40d0 <verify_header+0x28>
    40ca:	6901      	ldr	r1, [r0, #16]
    40cc:	428a      	cmp	r2, r1
    40ce:	d006      	beq.n	40de <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    40d0:	6958      	ldr	r0, [r3, #20]
    40d2:	b128      	cbz	r0, 40e0 <verify_header+0x38>
    40d4:	699b      	ldr	r3, [r3, #24]
    40d6:	1a1b      	subs	r3, r3, r0
    40d8:	4258      	negs	r0, r3
    40da:	4158      	adcs	r0, r3
    40dc:	4770      	bx	lr
        return( 1 );
    40de:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    40e0:	4770      	bx	lr
    40e2:	bf00      	nop
    40e4:	ff00aa55 	.word	0xff00aa55

000040e8 <verify_chain>:

static int verify_chain( void )
{
    40e8:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    40ea:	4b0d      	ldr	r3, [pc, #52]	; (4120 <verify_chain+0x38>)
    40ec:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    40ee:	b1a6      	cbz	r6, 411a <verify_chain+0x32>
    40f0:	4630      	mov	r0, r6
    40f2:	f7ff ffd9 	bl	40a8 <verify_header>
    40f6:	4604      	mov	r4, r0
    40f8:	b978      	cbnz	r0, 411a <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    40fa:	68f3      	ldr	r3, [r6, #12]
    40fc:	b96b      	cbnz	r3, 411a <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    40fe:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    4100:	b90d      	cbnz	r5, 4106 <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    4102:	4620      	mov	r0, r4
    4104:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    4106:	4628      	mov	r0, r5
    4108:	f7ff ffce 	bl	40a8 <verify_header>
    410c:	b928      	cbnz	r0, 411a <verify_chain+0x32>
        if( cur->prev != prv )
    410e:	68eb      	ldr	r3, [r5, #12]
    4110:	42b3      	cmp	r3, r6
    4112:	d102      	bne.n	411a <verify_chain+0x32>
        cur = cur->next;
    4114:	462e      	mov	r6, r5
    4116:	692d      	ldr	r5, [r5, #16]
    4118:	e7f2      	b.n	4100 <verify_chain+0x18>
        return( 1 );
    411a:	2401      	movs	r4, #1
    411c:	e7f1      	b.n	4102 <verify_chain+0x1a>
    411e:	bf00      	nop
    4120:	20001b70 	.word	0x20001b70

00004124 <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    4124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    4128:	4f3f      	ldr	r7, [pc, #252]	; (4228 <buffer_alloc_calloc+0x104>)
    412a:	683c      	ldr	r4, [r7, #0]
    412c:	b1d4      	cbz	r4, 4164 <buffer_alloc_calloc+0x40>
    412e:	68bc      	ldr	r4, [r7, #8]
    4130:	b1c4      	cbz	r4, 4164 <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    4132:	2800      	cmp	r0, #0
    4134:	d04a      	beq.n	41cc <buffer_alloc_calloc+0xa8>
    4136:	2900      	cmp	r1, #0
    4138:	d048      	beq.n	41cc <buffer_alloc_calloc+0xa8>
    original_len = len = n * size;
    413a:	fb01 f500 	mul.w	r5, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    413e:	fbb5 f0f0 	udiv	r0, r5, r0
    4142:	4288      	cmp	r0, r1
    4144:	d142      	bne.n	41cc <buffer_alloc_calloc+0xa8>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4146:	1d28      	adds	r0, r5, #4
    4148:	d840      	bhi.n	41cc <buffer_alloc_calloc+0xa8>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    414a:	07a9      	lsls	r1, r5, #30
    414c:	d00d      	beq.n	416a <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    414e:	f025 0603 	bic.w	r6, r5, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    4152:	3604      	adds	r6, #4
    memory_header *new, *cur = heap.first_free;
    4154:	68fc      	ldr	r4, [r7, #12]
    4156:	e003      	b.n	4160 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    4158:	6863      	ldr	r3, [r4, #4]
    415a:	42b3      	cmp	r3, r6
    415c:	d238      	bcs.n	41d0 <buffer_alloc_calloc+0xac>
            break;

        cur = cur->next_free;
    415e:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    4160:	2c00      	cmp	r4, #0
    4162:	d1f9      	bne.n	4158 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    4164:	4620      	mov	r0, r4
    4166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    416a:	462e      	mov	r6, r5
    416c:	e7f2      	b.n	4154 <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    416e:	60fb      	str	r3, [r7, #12]
    4170:	e041      	b.n	41f6 <buffer_alloc_calloc+0xd2>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    4172:	f106 0120 	add.w	r1, r6, #32
    4176:	1863      	adds	r3, r4, r1
    new->size = cur->size - len - sizeof(memory_header);
    4178:	3a20      	subs	r2, #32
    417a:	605a      	str	r2, [r3, #4]
    new->alloc = 0;
    417c:	2200      	movs	r2, #0
    new->prev = cur;
    417e:	e9c3 2402 	strd	r2, r4, [r3, #8]
    new->magic1 = MAGIC1;
    4182:	482a      	ldr	r0, [pc, #168]	; (422c <buffer_alloc_calloc+0x108>)
    new->next = cur->next;
    4184:	6922      	ldr	r2, [r4, #16]
    4186:	611a      	str	r2, [r3, #16]
    new->magic1 = MAGIC1;
    4188:	5060      	str	r0, [r4, r1]
    new->magic2 = MAGIC2;
    418a:	4929      	ldr	r1, [pc, #164]	; (4230 <buffer_alloc_calloc+0x10c>)
    418c:	61d9      	str	r1, [r3, #28]
    if( new->next != NULL )
    418e:	b102      	cbz	r2, 4192 <buffer_alloc_calloc+0x6e>
        new->next->prev = new;
    4190:	60d3      	str	r3, [r2, #12]
    new->prev_free = cur->prev_free;
    4192:	6962      	ldr	r2, [r4, #20]
    4194:	615a      	str	r2, [r3, #20]
    new->next_free = cur->next_free;
    4196:	69a1      	ldr	r1, [r4, #24]
    4198:	6199      	str	r1, [r3, #24]
    if( new->prev_free != NULL )
    419a:	b1aa      	cbz	r2, 41c8 <buffer_alloc_calloc+0xa4>
        new->prev_free->next_free = new;
    419c:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    419e:	699a      	ldr	r2, [r3, #24]
    41a0:	b102      	cbz	r2, 41a4 <buffer_alloc_calloc+0x80>
        new->next_free->prev_free = new;
    41a2:	6153      	str	r3, [r2, #20]
    cur->alloc = 1;
    41a4:	f04f 0901 	mov.w	r9, #1
    cur->next = new;
    41a8:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    41aa:	2300      	movs	r3, #0
    cur->size = len;
    41ac:	e9c4 6901 	strd	r6, r9, [r4, #4]
    cur->next_free = NULL;
    41b0:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    41b4:	693b      	ldr	r3, [r7, #16]
    41b6:	07db      	lsls	r3, r3, #31
    41b8:	d52e      	bpl.n	4218 <buffer_alloc_calloc+0xf4>
    41ba:	f7ff ff95 	bl	40e8 <verify_chain>
    41be:	b358      	cbz	r0, 4218 <buffer_alloc_calloc+0xf4>
        mbedtls_exit( 1 );
    41c0:	4b1c      	ldr	r3, [pc, #112]	; (4234 <buffer_alloc_calloc+0x110>)
    41c2:	4648      	mov	r0, r9
    41c4:	681b      	ldr	r3, [r3, #0]
    41c6:	e026      	b.n	4216 <buffer_alloc_calloc+0xf2>
        heap.first_free = new;
    41c8:	60fb      	str	r3, [r7, #12]
    41ca:	e7e8      	b.n	419e <buffer_alloc_calloc+0x7a>
        return( NULL );
    41cc:	2400      	movs	r4, #0
    41ce:	e7c9      	b.n	4164 <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    41d0:	68a3      	ldr	r3, [r4, #8]
    41d2:	b11b      	cbz	r3, 41dc <buffer_alloc_calloc+0xb8>
        mbedtls_exit( 1 );
    41d4:	4b17      	ldr	r3, [pc, #92]	; (4234 <buffer_alloc_calloc+0x110>)
    41d6:	2001      	movs	r0, #1
    41d8:	681b      	ldr	r3, [r3, #0]
    41da:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    41dc:	6862      	ldr	r2, [r4, #4]
    41de:	f104 0820 	add.w	r8, r4, #32
    41e2:	1b92      	subs	r2, r2, r6
    41e4:	2a23      	cmp	r2, #35	; 0x23
    41e6:	d8c4      	bhi.n	4172 <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    41e8:	2301      	movs	r3, #1
    41ea:	60a3      	str	r3, [r4, #8]
            cur->prev_free->next_free = cur->next_free;
    41ec:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
        if( cur->prev_free != NULL )
    41f0:	2a00      	cmp	r2, #0
    41f2:	d0bc      	beq.n	416e <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    41f4:	6193      	str	r3, [r2, #24]
        if( cur->next_free != NULL )
    41f6:	69a3      	ldr	r3, [r4, #24]
    41f8:	b10b      	cbz	r3, 41fe <buffer_alloc_calloc+0xda>
            cur->next_free->prev_free = cur->prev_free;
    41fa:	6962      	ldr	r2, [r4, #20]
    41fc:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    41fe:	2300      	movs	r3, #0
        cur->next_free = NULL;
    4200:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    4204:	693b      	ldr	r3, [r7, #16]
    4206:	07da      	lsls	r2, r3, #31
    4208:	d506      	bpl.n	4218 <buffer_alloc_calloc+0xf4>
    420a:	f7ff ff6d 	bl	40e8 <verify_chain>
    420e:	b118      	cbz	r0, 4218 <buffer_alloc_calloc+0xf4>
            mbedtls_exit( 1 );
    4210:	2001      	movs	r0, #1
    4212:	4b08      	ldr	r3, [pc, #32]	; (4234 <buffer_alloc_calloc+0x110>)
    4214:	681b      	ldr	r3, [r3, #0]
        mbedtls_exit( 1 );
    4216:	4798      	blx	r3
    memset( ret, 0, original_len );
    4218:	462a      	mov	r2, r5
    421a:	2100      	movs	r1, #0
    421c:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    421e:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    4220:	f002 f9a3 	bl	656a <memset>
    return( ret );
    4224:	e79e      	b.n	4164 <buffer_alloc_calloc+0x40>
    4226:	bf00      	nop
    4228:	20001b70 	.word	0x20001b70
    422c:	ff00aa55 	.word	0xff00aa55
    4230:	ee119966 	.word	0xee119966
    4234:	20000078 	.word	0x20000078

00004238 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    4238:	b570      	push	{r4, r5, r6, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    423a:	4605      	mov	r5, r0
    423c:	2800      	cmp	r0, #0
    423e:	f000 8088 	beq.w	4352 <buffer_alloc_free+0x11a>
    4242:	4e44      	ldr	r6, [pc, #272]	; (4354 <buffer_alloc_free+0x11c>)
    4244:	6833      	ldr	r3, [r6, #0]
    4246:	2b00      	cmp	r3, #0
    4248:	f000 8083 	beq.w	4352 <buffer_alloc_free+0x11a>
    424c:	68b2      	ldr	r2, [r6, #8]
    424e:	2a00      	cmp	r2, #0
    4250:	d07f      	beq.n	4352 <buffer_alloc_free+0x11a>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    4252:	4283      	cmp	r3, r0
    4254:	d803      	bhi.n	425e <buffer_alloc_free+0x26>
    4256:	6872      	ldr	r2, [r6, #4]
    4258:	4413      	add	r3, r2
    425a:	4298      	cmp	r0, r3
    425c:	d303      	bcc.n	4266 <buffer_alloc_free+0x2e>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    425e:	4b3e      	ldr	r3, [pc, #248]	; (4358 <buffer_alloc_free+0x120>)
    4260:	2001      	movs	r0, #1
    4262:	681b      	ldr	r3, [r3, #0]
    4264:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    4266:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    426a:	4620      	mov	r0, r4
    426c:	f7ff ff1c 	bl	40a8 <verify_header>
    4270:	b118      	cbz	r0, 427a <buffer_alloc_free+0x42>
        mbedtls_exit( 1 );
    4272:	4b39      	ldr	r3, [pc, #228]	; (4358 <buffer_alloc_free+0x120>)
    4274:	2001      	movs	r0, #1
    4276:	681b      	ldr	r3, [r3, #0]
    4278:	4798      	blx	r3

    if( hdr->alloc != 1 )
    427a:	f855 3c18 	ldr.w	r3, [r5, #-24]
    427e:	2b01      	cmp	r3, #1
    4280:	d003      	beq.n	428a <buffer_alloc_free+0x52>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    4282:	4b35      	ldr	r3, [pc, #212]	; (4358 <buffer_alloc_free+0x120>)
    4284:	2001      	movs	r0, #1
    4286:	681b      	ldr	r3, [r3, #0]
    4288:	4798      	blx	r3
    }

    hdr->alloc = 0;
    428a:	2300      	movs	r3, #0
    428c:	f845 3c18 	str.w	r3, [r5, #-24]
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    4290:	f855 3c14 	ldr.w	r3, [r5, #-20]
    4294:	b33b      	cbz	r3, 42e6 <buffer_alloc_free+0xae>
    4296:	689a      	ldr	r2, [r3, #8]
    4298:	bb2a      	cbnz	r2, 42e6 <buffer_alloc_free+0xae>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    429a:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    429e:	f102 0120 	add.w	r1, r2, #32
    42a2:	685a      	ldr	r2, [r3, #4]
    42a4:	440a      	add	r2, r1
    42a6:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
    42a8:	e955 3205 	ldrd	r3, r2, [r5, #-20]
    42ac:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
    42ae:	f855 5c14 	ldr.w	r5, [r5, #-20]

        if( hdr->next != NULL )
    42b2:	692b      	ldr	r3, [r5, #16]
    42b4:	b103      	cbz	r3, 42b8 <buffer_alloc_free+0x80>
            hdr->next->prev = hdr;
    42b6:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    42b8:	2220      	movs	r2, #32
    42ba:	2100      	movs	r1, #0
    42bc:	4620      	mov	r0, r4
    42be:	f002 f954 	bl	656a <memset>
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    42c2:	6928      	ldr	r0, [r5, #16]
    42c4:	b110      	cbz	r0, 42cc <buffer_alloc_free+0x94>
    42c6:	6883      	ldr	r3, [r0, #8]
    42c8:	2b00      	cmp	r3, #0
    42ca:	d02e      	beq.n	432a <buffer_alloc_free+0xf2>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    42cc:	6933      	ldr	r3, [r6, #16]
    42ce:	079b      	lsls	r3, r3, #30
    42d0:	d53f      	bpl.n	4352 <buffer_alloc_free+0x11a>
    42d2:	f7ff ff09 	bl	40e8 <verify_chain>
    42d6:	2800      	cmp	r0, #0
    42d8:	d03b      	beq.n	4352 <buffer_alloc_free+0x11a>
        mbedtls_exit( 1 );
}
    42da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        mbedtls_exit( 1 );
    42de:	4b1e      	ldr	r3, [pc, #120]	; (4358 <buffer_alloc_free+0x120>)
    42e0:	2001      	movs	r0, #1
    42e2:	681b      	ldr	r3, [r3, #0]
    42e4:	4718      	bx	r3
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    42e6:	f855 0c10 	ldr.w	r0, [r5, #-16]
    42ea:	2800      	cmp	r0, #0
    42ec:	d02a      	beq.n	4344 <buffer_alloc_free+0x10c>
    42ee:	6883      	ldr	r3, [r0, #8]
    42f0:	bb43      	cbnz	r3, 4344 <buffer_alloc_free+0x10c>
        hdr->size += sizeof(memory_header) + hdr->next->size;
    42f2:	6842      	ldr	r2, [r0, #4]
    42f4:	6863      	ldr	r3, [r4, #4]
    42f6:	4413      	add	r3, r2
    42f8:	3320      	adds	r3, #32
    42fa:	6063      	str	r3, [r4, #4]
        hdr->next = hdr->next->next;
    42fc:	6903      	ldr	r3, [r0, #16]
    42fe:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    4300:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    4304:	b99a      	cbnz	r2, 432e <buffer_alloc_free+0xf6>
    4306:	b9cb      	cbnz	r3, 433c <buffer_alloc_free+0x104>
        hdr->prev_free = old->prev_free;
    4308:	6943      	ldr	r3, [r0, #20]
    430a:	6163      	str	r3, [r4, #20]
        hdr->next_free = old->next_free;
    430c:	6982      	ldr	r2, [r0, #24]
    430e:	61a2      	str	r2, [r4, #24]
        if( hdr->prev_free != NULL )
    4310:	b1b3      	cbz	r3, 4340 <buffer_alloc_free+0x108>
            hdr->prev_free->next_free = hdr;
    4312:	619c      	str	r4, [r3, #24]
        if( hdr->next_free != NULL )
    4314:	69a3      	ldr	r3, [r4, #24]
    4316:	b103      	cbz	r3, 431a <buffer_alloc_free+0xe2>
            hdr->next_free->prev_free = hdr;
    4318:	615c      	str	r4, [r3, #20]
        if( hdr->next != NULL )
    431a:	6923      	ldr	r3, [r4, #16]
    431c:	b103      	cbz	r3, 4320 <buffer_alloc_free+0xe8>
            hdr->next->prev = hdr;
    431e:	60dc      	str	r4, [r3, #12]
        memset( old, 0, sizeof(memory_header) );
    4320:	2220      	movs	r2, #32
    4322:	2100      	movs	r1, #0
    4324:	f002 f921 	bl	656a <memset>
    if( old == NULL )
    4328:	e7d0      	b.n	42cc <buffer_alloc_free+0x94>
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    432a:	462c      	mov	r4, r5
    432c:	e7e1      	b.n	42f2 <buffer_alloc_free+0xba>
                hdr->prev_free->next_free = hdr->next_free;
    432e:	6193      	str	r3, [r2, #24]
            if( hdr->next_free != NULL )
    4330:	69a3      	ldr	r3, [r4, #24]
    4332:	2b00      	cmp	r3, #0
    4334:	d0e8      	beq.n	4308 <buffer_alloc_free+0xd0>
                hdr->next_free->prev_free = hdr->prev_free;
    4336:	6962      	ldr	r2, [r4, #20]
    4338:	615a      	str	r2, [r3, #20]
    433a:	e7e5      	b.n	4308 <buffer_alloc_free+0xd0>
                heap.first_free = hdr->next_free;
    433c:	60f3      	str	r3, [r6, #12]
    433e:	e7f7      	b.n	4330 <buffer_alloc_free+0xf8>
            heap.first_free = hdr;
    4340:	60f4      	str	r4, [r6, #12]
    4342:	e7e7      	b.n	4314 <buffer_alloc_free+0xdc>
        hdr->next_free = heap.first_free;
    4344:	68f3      	ldr	r3, [r6, #12]
    4346:	f845 3c08 	str.w	r3, [r5, #-8]
        if( heap.first_free != NULL )
    434a:	b103      	cbz	r3, 434e <buffer_alloc_free+0x116>
            heap.first_free->prev_free = hdr;
    434c:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    434e:	60f4      	str	r4, [r6, #12]
    4350:	e7bc      	b.n	42cc <buffer_alloc_free+0x94>
}
    4352:	bd70      	pop	{r4, r5, r6, pc}
    4354:	20001b70 	.word	0x20001b70
    4358:	20000078 	.word	0x20000078

0000435c <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    435c:	b538      	push	{r3, r4, r5, lr}
    435e:	460c      	mov	r4, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    4360:	2214      	movs	r2, #20
    4362:	2100      	movs	r1, #0
{
    4364:	4605      	mov	r5, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    4366:	4813      	ldr	r0, [pc, #76]	; (43b4 <mbedtls_memory_buffer_alloc_init+0x58>)
    4368:	f002 f8ff 	bl	656a <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    436c:	4912      	ldr	r1, [pc, #72]	; (43b8 <mbedtls_memory_buffer_alloc_init+0x5c>)
    436e:	4813      	ldr	r0, [pc, #76]	; (43bc <mbedtls_memory_buffer_alloc_init+0x60>)
    4370:	f000 f834 	bl	43dc <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4374:	2c23      	cmp	r4, #35	; 0x23
    4376:	d91c      	bls.n	43b2 <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4378:	f015 0303 	ands.w	r3, r5, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    437c:	bf1f      	itttt	ne
    437e:	3c04      	subne	r4, #4
    4380:	18e4      	addne	r4, r4, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    4382:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    4386:	18ed      	addne	r5, r5, r3
    }

    memset( buf, 0, len );
    4388:	4622      	mov	r2, r4
    438a:	2100      	movs	r1, #0
    438c:	4628      	mov	r0, r5
    438e:	f002 f8ec 	bl	656a <memset>

    heap.buf = buf;
    4392:	4b08      	ldr	r3, [pc, #32]	; (43b4 <mbedtls_memory_buffer_alloc_init+0x58>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    4394:	490a      	ldr	r1, [pc, #40]	; (43c0 <mbedtls_memory_buffer_alloc_init+0x64>)
    heap.len = len;
    4396:	e9c3 5400 	strd	r5, r4, [r3]
    heap.first->size = len - sizeof( memory_header );
    439a:	3c20      	subs	r4, #32
    heap.first = (memory_header *)buf;
    439c:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof( memory_header );
    439e:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
    43a0:	689a      	ldr	r2, [r3, #8]
    43a2:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
    43a4:	689a      	ldr	r2, [r3, #8]
    43a6:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
    43aa:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
    43ae:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
    43b0:	60da      	str	r2, [r3, #12]
}
    43b2:	bd38      	pop	{r3, r4, r5, pc}
    43b4:	20001b70 	.word	0x20001b70
    43b8:	00004239 	.word	0x00004239
    43bc:	00004125 	.word	0x00004125
    43c0:	ff00aa55 	.word	0xff00aa55

000043c4 <mbedtls_calloc>:
void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    43c4:	4b01      	ldr	r3, [pc, #4]	; (43cc <mbedtls_calloc+0x8>)
    43c6:	681b      	ldr	r3, [r3, #0]
    43c8:	4718      	bx	r3
    43ca:	bf00      	nop
    43cc:	20000080 	.word	0x20000080

000043d0 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    43d0:	4b01      	ldr	r3, [pc, #4]	; (43d8 <mbedtls_free+0x8>)
    43d2:	681b      	ldr	r3, [r3, #0]
    43d4:	4718      	bx	r3
    43d6:	bf00      	nop
    43d8:	2000007c 	.word	0x2000007c

000043dc <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    43dc:	4b02      	ldr	r3, [pc, #8]	; (43e8 <mbedtls_platform_set_calloc_free+0xc>)
    43de:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    43e0:	4b02      	ldr	r3, [pc, #8]	; (43ec <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    43e2:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    43e4:	6019      	str	r1, [r3, #0]
}
    43e6:	4770      	bx	lr
    43e8:	20000080 	.word	0x20000080
    43ec:	2000007c 	.word	0x2000007c

000043f0 <rsa_check_context.constprop.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    43f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    43f2:	f100 0608 	add.w	r6, r0, #8
    43f6:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    43f8:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    43fa:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    43fc:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    43fe:	f003 f804 	bl	740a <mbedtls_mpi_size>
    4402:	4287      	cmp	r7, r0
    4404:	d14b      	bne.n	449e <rsa_check_context.constprop.0+0xae>
    4406:	6863      	ldr	r3, [r4, #4]
    4408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    440c:	d847      	bhi.n	449e <rsa_check_context.constprop.0+0xae>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    440e:	2100      	movs	r1, #0
    4410:	4630      	mov	r0, r6
    4412:	f003 f965 	bl	76e0 <mbedtls_mpi_cmp_int>
    4416:	2800      	cmp	r0, #0
    4418:	dd41      	ble.n	449e <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    441a:	2100      	movs	r1, #0
    441c:	4630      	mov	r0, r6
    441e:	f002 ffc6 	bl	73ae <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    4422:	b3e0      	cbz	r0, 449e <rsa_check_context.constprop.0+0xae>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    4424:	b945      	cbnz	r5, 4438 <rsa_check_context.constprop.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    4426:	4629      	mov	r1, r5
    4428:	f104 0014 	add.w	r0, r4, #20

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    442c:	f003 f958 	bl	76e0 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    4430:	2800      	cmp	r0, #0
    4432:	dd34      	ble.n	449e <rsa_check_context.constprop.0+0xae>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
    4434:	2000      	movs	r0, #0
}
    4436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    4438:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    443c:	2100      	movs	r1, #0
    443e:	4628      	mov	r0, r5
    4440:	f003 f94e 	bl	76e0 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    4444:	2800      	cmp	r0, #0
    4446:	dd2a      	ble.n	449e <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    4448:	2100      	movs	r1, #0
    444a:	4628      	mov	r0, r5
    444c:	f002 ffaf 	bl	73ae <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    4450:	b328      	cbz	r0, 449e <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    4452:	f104 0538 	add.w	r5, r4, #56	; 0x38
    4456:	2100      	movs	r1, #0
    4458:	4628      	mov	r0, r5
    445a:	f003 f941 	bl	76e0 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    445e:	2800      	cmp	r0, #0
    4460:	dd1d      	ble.n	449e <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    4462:	2100      	movs	r1, #0
    4464:	4628      	mov	r0, r5
    4466:	f002 ffa2 	bl	73ae <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    446a:	b1c0      	cbz	r0, 449e <rsa_check_context.constprop.0+0xae>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    446c:	2100      	movs	r1, #0
    446e:	f104 0014 	add.w	r0, r4, #20
    4472:	f003 f935 	bl	76e0 <mbedtls_mpi_cmp_int>
    4476:	2800      	cmp	r0, #0
    4478:	dd11      	ble.n	449e <rsa_check_context.constprop.0+0xae>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    447a:	2100      	movs	r1, #0
    447c:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4480:	f003 f92e 	bl	76e0 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    4484:	2800      	cmp	r0, #0
    4486:	dd0a      	ble.n	449e <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    4488:	2100      	movs	r1, #0
    448a:	f104 0050 	add.w	r0, r4, #80	; 0x50
    448e:	f003 f927 	bl	76e0 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    4492:	2800      	cmp	r0, #0
    4494:	dd03      	ble.n	449e <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    4496:	2100      	movs	r1, #0
    4498:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    449c:	e7c6      	b.n	442c <rsa_check_context.constprop.0+0x3c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    449e:	4801      	ldr	r0, [pc, #4]	; (44a4 <rsa_check_context.constprop.0+0xb4>)
    44a0:	e7c9      	b.n	4436 <rsa_check_context.constprop.0+0x46>
    44a2:	bf00      	nop
    44a4:	ffffbf80 	.word	0xffffbf80

000044a8 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    44a8:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    44aa:	2100      	movs	r1, #0
{
    44ac:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    44ae:	f7ff ff9f 	bl	43f0 <rsa_check_context.constprop.0>
    44b2:	4605      	mov	r5, r0
    44b4:	b110      	cbz	r0, 44bc <mbedtls_rsa_check_pubkey+0x14>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    44b6:	4d0e      	ldr	r5, [pc, #56]	; (44f0 <mbedtls_rsa_check_pubkey+0x48>)
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    44b8:	4628      	mov	r0, r5
    44ba:	bd70      	pop	{r4, r5, r6, pc}
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    44bc:	f104 0608 	add.w	r6, r4, #8
    44c0:	4630      	mov	r0, r6
    44c2:	f002 ff84 	bl	73ce <mbedtls_mpi_bitlen>
    44c6:	287f      	cmp	r0, #127	; 0x7f
    44c8:	d9f5      	bls.n	44b6 <mbedtls_rsa_check_pubkey+0xe>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    44ca:	3414      	adds	r4, #20
    44cc:	4629      	mov	r1, r5
    44ce:	4620      	mov	r0, r4
    44d0:	f002 ff6d 	bl	73ae <mbedtls_mpi_get_bit>
    44d4:	2800      	cmp	r0, #0
    44d6:	d0ee      	beq.n	44b6 <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    44d8:	4620      	mov	r0, r4
    44da:	f002 ff78 	bl	73ce <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    44de:	2801      	cmp	r0, #1
    44e0:	d9e9      	bls.n	44b6 <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    44e2:	4631      	mov	r1, r6
    44e4:	4620      	mov	r0, r4
    44e6:	f003 f8ba 	bl	765e <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    44ea:	2800      	cmp	r0, #0
    44ec:	dbe4      	blt.n	44b8 <mbedtls_rsa_check_pubkey+0x10>
    44ee:	e7e2      	b.n	44b6 <mbedtls_rsa_check_pubkey+0xe>
    44f0:	ffffbe00 	.word	0xffffbe00

000044f4 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    44f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    44f6:	460c      	mov	r4, r1
    44f8:	b087      	sub	sp, #28
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    44fa:	2100      	movs	r1, #0
{
    44fc:	4605      	mov	r5, r0
    44fe:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    4500:	f7ff ff76 	bl	43f0 <rsa_check_context.constprop.0>
    4504:	2800      	cmp	r0, #0
    4506:	d139      	bne.n	457c <mbedtls_rsa_public+0x88>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    4508:	a803      	add	r0, sp, #12
    450a:	f002 fea6 	bl	725a <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    450e:	4621      	mov	r1, r4
    4510:	686a      	ldr	r2, [r5, #4]
    4512:	a803      	add	r0, sp, #12
    4514:	f002 ff7f 	bl	7416 <mbedtls_mpi_read_binary>
    4518:	4604      	mov	r4, r0
    451a:	b118      	cbz	r0, 4524 <mbedtls_rsa_public+0x30>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    451c:	a803      	add	r0, sp, #12
    451e:	f002 fea2 	bl	7266 <mbedtls_mpi_free>

    if( ret != 0 )
    4522:	e00c      	b.n	453e <mbedtls_rsa_public+0x4a>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    4524:	f105 0408 	add.w	r4, r5, #8
    4528:	4621      	mov	r1, r4
    452a:	a803      	add	r0, sp, #12
    452c:	f003 f897 	bl	765e <mbedtls_mpi_cmp_mpi>
    4530:	2800      	cmp	r0, #0
    4532:	db07      	blt.n	4544 <mbedtls_rsa_public+0x50>
    mbedtls_mpi_free( &T );
    4534:	a803      	add	r0, sp, #12
    4536:	f002 fe96 	bl	7266 <mbedtls_mpi_free>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    453a:	f06f 0403 	mvn.w	r4, #3
        ( *mbedtls_test_hook_error_add )( high, low, file, line );
#endif
    (void)file;
    (void)line;

    return( high + low );
    453e:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
        return( MBEDTLS_ERROR_ADD( MBEDTLS_ERR_RSA_PUBLIC_FAILED, ret ) );
    4542:	e018      	b.n	4576 <mbedtls_rsa_public+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    4544:	f105 0368 	add.w	r3, r5, #104	; 0x68
    4548:	a903      	add	r1, sp, #12
    olen = ctx->len;
    454a:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    454c:	4608      	mov	r0, r1
    454e:	9300      	str	r3, [sp, #0]
    4550:	f105 0214 	add.w	r2, r5, #20
    4554:	4623      	mov	r3, r4
    4556:	f003 fbdd 	bl	7d14 <mbedtls_mpi_exp_mod>
    455a:	4604      	mov	r4, r0
    455c:	2800      	cmp	r0, #0
    455e:	d1dd      	bne.n	451c <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    4560:	463a      	mov	r2, r7
    4562:	4631      	mov	r1, r6
    4564:	a803      	add	r0, sp, #12
    4566:	f002 ff77 	bl	7458 <mbedtls_mpi_write_binary>
    456a:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
    456c:	a803      	add	r0, sp, #12
    456e:	f002 fe7a 	bl	7266 <mbedtls_mpi_free>
    if( ret != 0 )
    4572:	2c00      	cmp	r4, #0
    4574:	d1e3      	bne.n	453e <mbedtls_rsa_public+0x4a>

    return( 0 );
}
    4576:	4620      	mov	r0, r4
    4578:	b007      	add	sp, #28
    457a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    457c:	4c00      	ldr	r4, [pc, #0]	; (4580 <mbedtls_rsa_public+0x8c>)
    457e:	e7fa      	b.n	4576 <mbedtls_rsa_public+0x82>
    4580:	ffffbf80 	.word	0xffffbf80

00004584 <mbedtls_sha256_starts>:
#endif

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    if( is224 == 0 )
    4584:	4a23      	ldr	r2, [pc, #140]	; (4614 <mbedtls_sha256_starts+0x90>)
{
    4586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( is224 == 0 )
    458a:	f1b1 0800 	subs.w	r8, r1, #0
    458e:	bf18      	it	ne
    4590:	4696      	movne	lr, r2
    4592:	4a21      	ldr	r2, [pc, #132]	; (4618 <mbedtls_sha256_starts+0x94>)
    4594:	4921      	ldr	r1, [pc, #132]	; (461c <mbedtls_sha256_starts+0x98>)
    4596:	bf18      	it	ne
    4598:	4694      	movne	ip, r2
    459a:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    459e:	bf08      	it	eq
    45a0:	468e      	moveq	lr, r1
    45a2:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    45a6:	491e      	ldr	r1, [pc, #120]	; (4620 <mbedtls_sha256_starts+0x9c>)
    45a8:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    45ac:	bf08      	it	eq
    45ae:	468c      	moveq	ip, r1
    45b0:	491c      	ldr	r1, [pc, #112]	; (4624 <mbedtls_sha256_starts+0xa0>)
    45b2:	bf18      	it	ne
    45b4:	4611      	movne	r1, r2
    45b6:	4a1c      	ldr	r2, [pc, #112]	; (4628 <mbedtls_sha256_starts+0xa4>)
    45b8:	4f1c      	ldr	r7, [pc, #112]	; (462c <mbedtls_sha256_starts+0xa8>)
    45ba:	bf18      	it	ne
    45bc:	4617      	movne	r7, r2
    45be:	4a1c      	ldr	r2, [pc, #112]	; (4630 <mbedtls_sha256_starts+0xac>)
    45c0:	4e1c      	ldr	r6, [pc, #112]	; (4634 <mbedtls_sha256_starts+0xb0>)
    45c2:	bf18      	it	ne
    45c4:	4616      	movne	r6, r2
    45c6:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    45ca:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    45ce:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    45d2:	4d19      	ldr	r5, [pc, #100]	; (4638 <mbedtls_sha256_starts+0xb4>)
    45d4:	bf18      	it	ne
    45d6:	4615      	movne	r5, r2
    45d8:	4a18      	ldr	r2, [pc, #96]	; (463c <mbedtls_sha256_starts+0xb8>)
{
    45da:	4603      	mov	r3, r0
    if( is224 == 0 )
    45dc:	4c18      	ldr	r4, [pc, #96]	; (4640 <mbedtls_sha256_starts+0xbc>)
    45de:	4819      	ldr	r0, [pc, #100]	; (4644 <mbedtls_sha256_starts+0xc0>)
    45e0:	bf18      	it	ne
    45e2:	4614      	movne	r4, r2
    45e4:	f1a2 6211 	sub.w	r2, r2, #152043520	; 0x9100000
    45e8:	f5a2 220c 	sub.w	r2, r2, #573440	; 0x8c000
    45ec:	f2a2 228e 	subw	r2, r2, #654	; 0x28e
    45f0:	bf18      	it	ne
    45f2:	4602      	movne	r2, r0
    ctx->total[0] = 0;
    45f4:	2000      	movs	r0, #0
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    45f6:	e9c3 ec02 	strd	lr, ip, [r3, #8]
    ctx->total[1] = 0;
    45fa:	e9c3 0000 	strd	r0, r0, [r3]
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    45fe:	e9c3 1704 	strd	r1, r7, [r3, #16]
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    4602:	e9c3 6506 	strd	r6, r5, [r3, #24]
        ctx->state[6] = 0x1F83D9AB;
        ctx->state[7] = 0x5BE0CD19;
    4606:	e9c3 4208 	strd	r4, r2, [r3, #32]
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
#endif
    }

    ctx->is224 = is224;
    460a:	f8c3 8068 	str.w	r8, [r3, #104]	; 0x68

    return( 0 );
}
    460e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4612:	bf00      	nop
    4614:	c1059ed8 	.word	0xc1059ed8
    4618:	367cd507 	.word	0x367cd507
    461c:	6a09e667 	.word	0x6a09e667
    4620:	bb67ae85 	.word	0xbb67ae85
    4624:	3c6ef372 	.word	0x3c6ef372
    4628:	f70e5939 	.word	0xf70e5939
    462c:	a54ff53a 	.word	0xa54ff53a
    4630:	ffc00b31 	.word	0xffc00b31
    4634:	510e527f 	.word	0x510e527f
    4638:	9b05688c 	.word	0x9b05688c
    463c:	64f98fa7 	.word	0x64f98fa7
    4640:	1f83d9ab 	.word	0x1f83d9ab
    4644:	befa4fa4 	.word	0xbefa4fa4

00004648 <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    4648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    464c:	b0d1      	sub	sp, #324	; 0x144
    464e:	f50d 7b8e 	add.w	fp, sp, #284	; 0x11c
    4652:	465a      	mov	r2, fp
    4654:	1d03      	adds	r3, r0, #4
    4656:	9301      	str	r3, [sp, #4]
    4658:	f100 0324 	add.w	r3, r0, #36	; 0x24
    465c:	9303      	str	r3, [sp, #12]
    465e:	9b01      	ldr	r3, [sp, #4]

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    4660:	f853 0f04 	ldr.w	r0, [r3, #4]!
    4664:	f842 0f04 	str.w	r0, [r2, #4]!
    for( i = 0; i < 8; i++ )
    4668:	9803      	ldr	r0, [sp, #12]
    466a:	4298      	cmp	r0, r3
    466c:	d1f8      	bne.n	4660 <mbedtls_internal_sha256_process+0x18>
    466e:	e9dd 0748 	ldrd	r0, r7, [sp, #288]	; 0x120

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    4672:	f04f 0900 	mov.w	r9, #0
    4676:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    4678:	ad4c      	add	r5, sp, #304	; 0x130
    467a:	9302      	str	r3, [sp, #8]
    467c:	e9dd e34a 	ldrd	lr, r3, [sp, #296]	; 0x128
    4680:	9304      	str	r3, [sp, #16]
    4682:	4b42      	ldr	r3, [pc, #264]	; (478c <mbedtls_internal_sha256_process+0x144>)
    4684:	aa06      	add	r2, sp, #24
    4686:	9305      	str	r3, [sp, #20]
    4688:	e895 1120 	ldmia.w	r5, {r5, r8, ip}
    {
        if( i < 16 )
    468c:	f1b9 0f0f 	cmp.w	r9, #15
    4690:	d863      	bhi.n	475a <mbedtls_internal_sha256_process+0x112>
            local.W[i] = MBEDTLS_GET_UINT32_BE( data, 4 * i );
    4692:	784c      	ldrb	r4, [r1, #1]
    4694:	780b      	ldrb	r3, [r1, #0]
    4696:	0424      	lsls	r4, r4, #16
    4698:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    469c:	78cb      	ldrb	r3, [r1, #3]
    469e:	4323      	orrs	r3, r4
    46a0:	788c      	ldrb	r4, [r1, #2]
    46a2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    46a6:	ea4f 2af5 	mov.w	sl, r5, ror #11
    46aa:	ea8c 0408 	eor.w	r4, ip, r8
    46ae:	9e05      	ldr	r6, [sp, #20]
    46b0:	ea8a 1ab5 	eor.w	sl, sl, r5, ror #6
    46b4:	402c      	ands	r4, r5
    46b6:	ea8a 6a75 	eor.w	sl, sl, r5, ror #25
    46ba:	ea84 040c 	eor.w	r4, r4, ip
    46be:	4454      	add	r4, sl
    46c0:	f856 ab04 	ldr.w	sl, [r6], #4
    46c4:	6093      	str	r3, [r2, #8]
    46c6:	4454      	add	r4, sl
    46c8:	4423      	add	r3, r4
    46ca:	9c02      	ldr	r4, [sp, #8]
    46cc:	ea4f 3a70 	mov.w	sl, r0, ror #13
    46d0:	4423      	add	r3, r4
    46d2:	ea40 0407 	orr.w	r4, r0, r7
    46d6:	9605      	str	r6, [sp, #20]
    46d8:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
    46dc:	ea04 040e 	and.w	r4, r4, lr
    46e0:	ea00 0607 	and.w	r6, r0, r7
    46e4:	ea8a 5ab0 	eor.w	sl, sl, r0, ror #22
    46e8:	4334      	orrs	r4, r6
    46ea:	4454      	add	r4, sl
    for( i = 0; i < 64; i++ )
    46ec:	f109 0901 	add.w	r9, r9, #1
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    46f0:	f8dd a010 	ldr.w	sl, [sp, #16]
    for( i = 0; i < 64; i++ )
    46f4:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    46f8:	449a      	add	sl, r3
    for( i = 0; i < 64; i++ )
    46fa:	f102 0204 	add.w	r2, r2, #4
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    46fe:	4423      	add	r3, r4
    for( i = 0; i < 64; i++ )
    4700:	f101 0104 	add.w	r1, r1, #4
    4704:	f8cd c008 	str.w	ip, [sp, #8]
    4708:	f8cd e010 	str.w	lr, [sp, #16]
    470c:	d11e      	bne.n	474c <mbedtls_internal_sha256_process+0x104>
    470e:	e9cd 3406 	strd	r3, r4, [sp, #24]
    4712:	e9cd 8c4e 	strd	r8, ip, [sp, #312]	; 0x138
    4716:	e9cd a54c 	strd	sl, r5, [sp, #304]	; 0x130
    471a:	e9cd 7e4a 	strd	r7, lr, [sp, #296]	; 0x128
    471e:	e9cd 3048 	strd	r3, r0, [sp, #288]	; 0x120
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    4722:	9a01      	ldr	r2, [sp, #4]
    4724:	f852 3f04 	ldr.w	r3, [r2, #4]!
    4728:	9201      	str	r2, [sp, #4]
    472a:	f85b 2f04 	ldr.w	r2, [fp, #4]!
    472e:	4413      	add	r3, r2
    4730:	9a01      	ldr	r2, [sp, #4]
    4732:	6013      	str	r3, [r2, #0]
    for( i = 0; i < 8; i++ )
    4734:	9b03      	ldr	r3, [sp, #12]
    4736:	4293      	cmp	r3, r2
    4738:	d1f3      	bne.n	4722 <mbedtls_internal_sha256_process+0xda>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    473a:	a806      	add	r0, sp, #24
    473c:	f44f 7194 	mov.w	r1, #296	; 0x128
    4740:	f000 feba 	bl	54b8 <mbedtls_platform_zeroize>

    return( 0 );
}
    4744:	2000      	movs	r0, #0
    4746:	b051      	add	sp, #324	; 0x144
    4748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    474c:	46be      	mov	lr, r7
    474e:	46c4      	mov	ip, r8
    4750:	4607      	mov	r7, r0
    4752:	46a8      	mov	r8, r5
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    4754:	4618      	mov	r0, r3
    4756:	4655      	mov	r5, sl
    4758:	e798      	b.n	468c <mbedtls_internal_sha256_process+0x44>
            R( i );
    475a:	6813      	ldr	r3, [r2, #0]
    475c:	f852 4c38 	ldr.w	r4, [r2, #-56]
    4760:	ea4f 4af3 	mov.w	sl, r3, ror #19
    4764:	ea8a 4a73 	eor.w	sl, sl, r3, ror #17
    4768:	ea8a 2a93 	eor.w	sl, sl, r3, lsr #10
    476c:	f852 3c14 	ldr.w	r3, [r2, #-20]
    4770:	f852 6c34 	ldr.w	r6, [r2, #-52]
    4774:	4423      	add	r3, r4
    4776:	f852 4c34 	ldr.w	r4, [r2, #-52]
    477a:	4453      	add	r3, sl
    477c:	ea4f 44b4 	mov.w	r4, r4, ror #18
    4780:	ea84 14f6 	eor.w	r4, r4, r6, ror #7
    4784:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
    4788:	4423      	add	r3, r4
    478a:	e78c      	b.n	46a6 <mbedtls_internal_sha256_process+0x5e>
    478c:	00008be0 	.word	0x00008be0

00004790 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    4790:	b508      	push	{r3, lr}
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4792:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4796:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    479a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    479e:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    47a2:	2a09      	cmp	r2, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    47a4:	bf01      	itttt	eq
    47a6:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    47aa:	2200      	moveq	r2, #0
    47ac:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    47b0:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    47b4:	f003 fe63 	bl	847e <nrf91_errata_14>
    47b8:	b128      	cbz	r0, 47c6 <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    47ba:	2201      	movs	r2, #1
    47bc:	4b4d      	ldr	r3, [pc, #308]	; (48f4 <SystemInit+0x164>)
    47be:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    47c2:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    47c6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    47ca:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    47ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    47d2:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    47d6:	2a09      	cmp	r2, #9
    47d8:	d105      	bne.n	47e6 <SystemInit+0x56>
            {
                switch(var2)
    47da:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    47dc:	bf1e      	ittt	ne
    47de:	2201      	movne	r2, #1
    47e0:	4b44      	ldrne	r3, [pc, #272]	; (48f4 <SystemInit+0x164>)
    47e2:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    47e6:	f003 fe4a 	bl	847e <nrf91_errata_14>
    47ea:	b118      	cbz	r0, 47f4 <SystemInit+0x64>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    47ec:	220e      	movs	r2, #14
    47ee:	4b42      	ldr	r3, [pc, #264]	; (48f8 <SystemInit+0x168>)
    47f0:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    47f4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    47f8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    47fc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    4800:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    4804:	2a09      	cmp	r2, #9
    4806:	d106      	bne.n	4816 <SystemInit+0x86>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    4808:	2200      	movs	r2, #0
    480a:	4b3a      	ldr	r3, [pc, #232]	; (48f4 <SystemInit+0x164>)
    480c:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    4810:	2201      	movs	r2, #1
    4812:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
    4816:	2200      	movs	r2, #0
    4818:	00d3      	lsls	r3, r2, #3
        #endif

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    481a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    481e:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    4822:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    4826:	3101      	adds	r1, #1
    4828:	d008      	beq.n	483c <SystemInit+0xac>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    482a:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    482e:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4830:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    4834:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4838:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    483a:	d1ed      	bne.n	4818 <SystemInit+0x88>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    483c:	4b2f      	ldr	r3, [pc, #188]	; (48fc <SystemInit+0x16c>)
    483e:	69da      	ldr	r2, [r3, #28]
    4840:	f3bf 8f4f 	dsb	sy
        if ((HFXOSRC_readout & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    4844:	07d1      	lsls	r1, r2, #31
    4846:	d545      	bpl.n	48d4 <SystemInit+0x144>
    4848:	f3bf 8f4f 	dsb	sy
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    484c:	4b2c      	ldr	r3, [pc, #176]	; (4900 <SystemInit+0x170>)
    484e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4852:	2a01      	cmp	r2, #1
    4854:	d1fb      	bne.n	484e <SystemInit+0xbe>
            NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    4856:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    485a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    485e:	2a01      	cmp	r2, #1
    4860:	d1fb      	bne.n	485a <SystemInit+0xca>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    4862:	4b26      	ldr	r3, [pc, #152]	; (48fc <SystemInit+0x16c>)
    4864:	69da      	ldr	r2, [r3, #28]
    4866:	f3bf 8f4f 	dsb	sy
        if ((HFXOSRC_readout & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    486a:	07d2      	lsls	r2, r2, #31
    486c:	d50a      	bpl.n	4884 <SystemInit+0xf4>
                  uicr_erased_value = NRF_UICR_S->HFXOSRC;
    486e:	69da      	ldr	r2, [r3, #28]
                  uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    4870:	f022 0201 	bic.w	r2, r2, #1
                  NRF_UICR_S->HFXOSRC = uicr_new_value;
    4874:	61da      	str	r2, [r3, #28]
    4876:	f3bf 8f4f 	dsb	sy
                  while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    487a:	4a21      	ldr	r2, [pc, #132]	; (4900 <SystemInit+0x170>)
    487c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4880:	2b01      	cmp	r3, #1
    4882:	d1fb      	bne.n	487c <SystemInit+0xec>
        uint32_t val = *word;
    4884:	4a1d      	ldr	r2, [pc, #116]	; (48fc <SystemInit+0x16c>)
    4886:	6a13      	ldr	r3, [r2, #32]
    4888:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    488c:	3301      	adds	r3, #1
    488e:	d10c      	bne.n	48aa <SystemInit+0x11a>
                  uicr_erased_value = NRF_UICR_S->HFXOCNT;
    4890:	6a13      	ldr	r3, [r2, #32]
                  uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    4892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    4896:	f043 0320 	orr.w	r3, r3, #32
                  NRF_UICR_S->HFXOCNT = uicr_new_value;
    489a:	6213      	str	r3, [r2, #32]
    489c:	f3bf 8f4f 	dsb	sy
                  while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    48a0:	4a17      	ldr	r2, [pc, #92]	; (4900 <SystemInit+0x170>)
    48a2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    48a6:	2b01      	cmp	r3, #1
    48a8:	d1fb      	bne.n	48a2 <SystemInit+0x112>
            NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    48aa:	2200      	movs	r2, #0
    48ac:	4b14      	ldr	r3, [pc, #80]	; (4900 <SystemInit+0x170>)
    48ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    48b2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    48b6:	2a01      	cmp	r2, #1
    48b8:	d1fb      	bne.n	48b2 <SystemInit+0x122>
    48ba:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    48be:	4911      	ldr	r1, [pc, #68]	; (4904 <SystemInit+0x174>)
    48c0:	4b11      	ldr	r3, [pc, #68]	; (4908 <SystemInit+0x178>)
    48c2:	68ca      	ldr	r2, [r1, #12]
    48c4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    48c8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    48ca:	60cb      	str	r3, [r1, #12]
    48cc:	f3bf 8f4f 	dsb	sy
    __NOP();
    48d0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    48d2:	e7fd      	b.n	48d0 <SystemInit+0x140>
        uint32_t val = *word;
    48d4:	6a1b      	ldr	r3, [r3, #32]
    48d6:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    48da:	3301      	adds	r3, #1
    48dc:	d0b4      	beq.n	4848 <SystemInit+0xb8>
        SCB->NSACR |= (3UL << 10);
    48de:	4a09      	ldr	r2, [pc, #36]	; (4904 <SystemInit+0x174>)
    48e0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    48e4:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    48e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    48ec:	4b07      	ldr	r3, [pc, #28]	; (490c <SystemInit+0x17c>)
    48ee:	4a08      	ldr	r2, [pc, #32]	; (4910 <SystemInit+0x180>)
    48f0:	601a      	str	r2, [r3, #0]
}
    48f2:	bd08      	pop	{r3, pc}
    48f4:	50004000 	.word	0x50004000
    48f8:	5003a000 	.word	0x5003a000
    48fc:	00ff8000 	.word	0x00ff8000
    4900:	50039000 	.word	0x50039000
    4904:	e000ed00 	.word	0xe000ed00
    4908:	05fa0004 	.word	0x05fa0004
    490c:	20000084 	.word	0x20000084
    4910:	03d09000 	.word	0x03d09000

00004914 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4914:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4916:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4918:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    491a:	fab2 f382 	clz	r3, r2
    491e:	f1c3 031f 	rsb	r3, r3, #31
    4922:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4924:	fa05 f403 	lsl.w	r4, r5, r3
    4928:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    492c:	e8d0 6fef 	ldaex	r6, [r0]
    4930:	4296      	cmp	r6, r2
    4932:	d104      	bne.n	493e <nrfx_flag32_alloc+0x2a>
    4934:	e8c0 4fec 	stlex	ip, r4, [r0]
    4938:	f1bc 0f00 	cmp.w	ip, #0
    493c:	d1f6      	bne.n	492c <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    493e:	d1eb      	bne.n	4918 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    4940:	4801      	ldr	r0, [pc, #4]	; (4948 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    4942:	700b      	strb	r3, [r1, #0]
}
    4944:	bd70      	pop	{r4, r5, r6, pc}
    4946:	bf00      	nop
    4948:	0bad0000 	.word	0x0bad0000

0000494c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    494c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    494e:	6803      	ldr	r3, [r0, #0]
    4950:	40cb      	lsrs	r3, r1
    4952:	07db      	lsls	r3, r3, #31
    4954:	d410      	bmi.n	4978 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4956:	2301      	movs	r3, #1
    4958:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    495a:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    495c:	ea43 0102 	orr.w	r1, r3, r2
    4960:	e8d0 4fef 	ldaex	r4, [r0]
    4964:	4294      	cmp	r4, r2
    4966:	d104      	bne.n	4972 <nrfx_flag32_free+0x26>
    4968:	e8c0 1fec 	stlex	ip, r1, [r0]
    496c:	f1bc 0f00 	cmp.w	ip, #0
    4970:	d1f6      	bne.n	4960 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4972:	d1f2      	bne.n	495a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    4974:	4801      	ldr	r0, [pc, #4]	; (497c <nrfx_flag32_free+0x30>)
}
    4976:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4978:	4801      	ldr	r0, [pc, #4]	; (4980 <nrfx_flag32_free+0x34>)
    497a:	e7fc      	b.n	4976 <nrfx_flag32_free+0x2a>
    497c:	0bad0000 	.word	0x0bad0000
    4980:	0bad0004 	.word	0x0bad0004

00004984 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4984:	4b04      	ldr	r3, [pc, #16]	; (4998 <nrfx_clock_init+0x14>)
    4986:	791a      	ldrb	r2, [r3, #4]
    4988:	b922      	cbnz	r2, 4994 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    498a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    498c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    498e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4990:	4802      	ldr	r0, [pc, #8]	; (499c <nrfx_clock_init+0x18>)
    4992:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4994:	4802      	ldr	r0, [pc, #8]	; (49a0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4996:	4770      	bx	lr
    4998:	20001b84 	.word	0x20001b84
    499c:	0bad0000 	.word	0x0bad0000
    49a0:	0bad000c 	.word	0x0bad000c

000049a4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    49a4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    49a8:	b510      	push	{r4, lr}
    49aa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    49ae:	b152      	cbz	r2, 49c6 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49b0:	2000      	movs	r0, #0
    49b2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    49b6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    49ba:	2201      	movs	r2, #1
    49bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    49c0:	4b11      	ldr	r3, [pc, #68]	; (4a08 <nrfx_power_clock_irq_handler+0x64>)
    49c2:	681b      	ldr	r3, [r3, #0]
    49c4:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    49c6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    49ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    49ce:	b18a      	cbz	r2, 49f4 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49d0:	2200      	movs	r2, #0
    49d2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    49d6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    49da:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    49de:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    49e2:	f002 0203 	and.w	r2, r2, #3
    49e6:	2a01      	cmp	r2, #1
    49e8:	f04f 0102 	mov.w	r1, #2
    49ec:	d103      	bne.n	49f6 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    49ee:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    49f2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    49f4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    49f6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    49fa:	4b03      	ldr	r3, [pc, #12]	; (4a08 <nrfx_power_clock_irq_handler+0x64>)
    49fc:	2001      	movs	r0, #1
}
    49fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a02:	681b      	ldr	r3, [r3, #0]
    4a04:	4718      	bx	r3
    4a06:	bf00      	nop
    4a08:	20001b84 	.word	0x20001b84

00004a0c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    4a0c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    4a0e:	4801      	ldr	r0, [pc, #4]	; (4a14 <nrfx_dppi_channel_alloc+0x8>)
    4a10:	f7ff bf80 	b.w	4914 <nrfx_flag32_alloc>
    4a14:	20000088 	.word	0x20000088

00004a18 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4a18:	4a06      	ldr	r2, [pc, #24]	; (4a34 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    4a1a:	f000 001f 	and.w	r0, r0, #31
    4a1e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4a22:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
    4a26:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4a2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4a2e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4a32:	4770      	bx	lr
    4a34:	50842500 	.word	0x50842500

00004a38 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4a38:	4b03      	ldr	r3, [pc, #12]	; (4a48 <pin_in_use_by_te+0x10>)
    4a3a:	3008      	adds	r0, #8
    4a3c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4a40:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4a44:	4770      	bx	lr
    4a46:	bf00      	nop
    4a48:	2000008c 	.word	0x2000008c

00004a4c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4a4c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a4e:	4c0d      	ldr	r4, [pc, #52]	; (4a84 <call_handler+0x38>)
    4a50:	f100 0308 	add.w	r3, r0, #8
    4a54:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    4a58:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a5a:	05da      	lsls	r2, r3, #23
{
    4a5c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a5e:	d507      	bpl.n	4a70 <call_handler+0x24>
    4a60:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4a64:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4a68:	6852      	ldr	r2, [r2, #4]
    4a6a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4a6e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4a70:	68a3      	ldr	r3, [r4, #8]
    4a72:	b12b      	cbz	r3, 4a80 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4a74:	4631      	mov	r1, r6
    4a76:	4628      	mov	r0, r5
    4a78:	68e2      	ldr	r2, [r4, #12]
    }
}
    4a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4a7e:	4718      	bx	r3
}
    4a80:	bd70      	pop	{r4, r5, r6, pc}
    4a82:	bf00      	nop
    4a84:	2000008c 	.word	0x2000008c

00004a88 <release_handler>:
{
    4a88:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a8a:	4a12      	ldr	r2, [pc, #72]	; (4ad4 <release_handler+0x4c>)
    4a8c:	3008      	adds	r0, #8
    4a8e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    4a92:	05d9      	lsls	r1, r3, #23
    4a94:	d51b      	bpl.n	4ace <release_handler+0x46>
    4a96:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4a9a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4a9e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4aa2:	2000      	movs	r0, #0
    4aa4:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4aa8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    4aac:	f413 7f80 	tst.w	r3, #256	; 0x100
    4ab0:	d003      	beq.n	4aba <release_handler+0x32>
    4ab2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4ab6:	4299      	cmp	r1, r3
    4ab8:	d009      	beq.n	4ace <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4aba:	3001      	adds	r0, #1
    4abc:	2820      	cmp	r0, #32
    4abe:	d1f3      	bne.n	4aa8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4ac0:	2300      	movs	r3, #0
    4ac2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4ac6:	4804      	ldr	r0, [pc, #16]	; (4ad8 <release_handler+0x50>)
}
    4ac8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4aca:	f7ff bf3f 	b.w	494c <nrfx_flag32_free>
}
    4ace:	bc10      	pop	{r4}
    4ad0:	4770      	bx	lr
    4ad2:	bf00      	nop
    4ad4:	2000008c 	.word	0x2000008c
    4ad8:	200000e0 	.word	0x200000e0

00004adc <pin_handler_trigger_uninit>:
{
    4adc:	b538      	push	{r3, r4, r5, lr}
    4ade:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4ae0:	f7ff ffaa 	bl	4a38 <pin_in_use_by_te>
    4ae4:	4c0b      	ldr	r4, [pc, #44]	; (4b14 <pin_handler_trigger_uninit+0x38>)
    4ae6:	f102 0508 	add.w	r5, r2, #8
    4aea:	b160      	cbz	r0, 4b06 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4aec:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4aee:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4af2:	0b5b      	lsrs	r3, r3, #13
    4af4:	009b      	lsls	r3, r3, #2
    4af6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4afa:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4afe:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    4b02:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    4b06:	4610      	mov	r0, r2
    4b08:	f7ff ffbe 	bl	4a88 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4b0c:	2300      	movs	r3, #0
    4b0e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4b12:	bd38      	pop	{r3, r4, r5, pc}
    4b14:	2000008c 	.word	0x2000008c

00004b18 <nrfx_gpiote_input_configure>:
{
    4b18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4b1c:	4604      	mov	r4, r0
    4b1e:	461d      	mov	r5, r3
    if (p_input_config)
    4b20:	b309      	cbz	r1, 4b66 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b22:	4f4e      	ldr	r7, [pc, #312]	; (4c5c <nrfx_gpiote_input_configure+0x144>)
    4b24:	f100 0808 	add.w	r8, r0, #8
    4b28:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4b2c:	07b3      	lsls	r3, r6, #30
    4b2e:	d506      	bpl.n	4b3e <nrfx_gpiote_input_configure+0x26>
    4b30:	f7ff ff82 	bl	4a38 <pin_in_use_by_te>
    4b34:	b118      	cbz	r0, 4b3e <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    4b36:	484a      	ldr	r0, [pc, #296]	; (4c60 <nrfx_gpiote_input_configure+0x148>)
}
    4b38:	b002      	add	sp, #8
    4b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4b3e:	4849      	ldr	r0, [pc, #292]	; (4c64 <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
    4b40:	f004 031f 	and.w	r3, r4, #31
    4b44:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4b48:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4b4c:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    4b4e:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4b52:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4b56:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4b5a:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    4b5e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    4b62:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    4b66:	b19a      	cbz	r2, 4b90 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b68:	4e3c      	ldr	r6, [pc, #240]	; (4c5c <nrfx_gpiote_input_configure+0x144>)
    4b6a:	f104 0708 	add.w	r7, r4, #8
    4b6e:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4b72:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
    4b74:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4b78:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
    4b7a:	d00c      	beq.n	4b96 <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
    4b7c:	2800      	cmp	r0, #0
    4b7e:	d1da      	bne.n	4b36 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4b80:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    4b84:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4b88:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    4b8c:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    4b90:	bbd5      	cbnz	r5, 4c08 <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
    4b92:	4835      	ldr	r0, [pc, #212]	; (4c68 <nrfx_gpiote_input_configure+0x150>)
    4b94:	e7d0      	b.n	4b38 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4b96:	f021 0120 	bic.w	r1, r1, #32
    4b9a:	04c9      	lsls	r1, r1, #19
    4b9c:	0cc9      	lsrs	r1, r1, #19
    4b9e:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    4ba2:	2800      	cmp	r0, #0
    4ba4:	d0ec      	beq.n	4b80 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    4ba6:	2b03      	cmp	r3, #3
    4ba8:	d8c5      	bhi.n	4b36 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4baa:	6852      	ldr	r2, [r2, #4]
    4bac:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4bb0:	4662      	mov	r2, ip
    4bb2:	0092      	lsls	r2, r2, #2
    4bb4:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    4bb8:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4bbc:	b923      	cbnz	r3, 4bc8 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
    4bbe:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    4bc2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
    4bc6:	e7db      	b.n	4b80 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4bc8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4bcc:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    4bd0:	f020 0003 	bic.w	r0, r0, #3
    4bd4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4bd8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4bdc:	f041 0120 	orr.w	r1, r1, #32
    4be0:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    4be4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    4be8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4bec:	0220      	lsls	r0, r4, #8
    4bee:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4bf2:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    4bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    4bfa:	ea40 000e 	orr.w	r0, r0, lr
    4bfe:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    4c02:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    4c06:	e7bb      	b.n	4b80 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
    4c08:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4c0a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4c0e:	f7ff ff3b 	bl	4a88 <release_handler>
    if (!handler)
    4c12:	2e00      	cmp	r6, #0
    4c14:	d0bd      	beq.n	4b92 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4c16:	4d11      	ldr	r5, [pc, #68]	; (4c5c <nrfx_gpiote_input_configure+0x144>)
    4c18:	e9d5 2300 	ldrd	r2, r3, [r5]
    4c1c:	4296      	cmp	r6, r2
    4c1e:	d101      	bne.n	4c24 <nrfx_gpiote_input_configure+0x10c>
    4c20:	429f      	cmp	r7, r3
    4c22:	d018      	beq.n	4c56 <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4c24:	4811      	ldr	r0, [pc, #68]	; (4c6c <nrfx_gpiote_input_configure+0x154>)
    4c26:	f10d 0107 	add.w	r1, sp, #7
    4c2a:	f7ff fe73 	bl	4914 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4c2e:	4b0e      	ldr	r3, [pc, #56]	; (4c68 <nrfx_gpiote_input_configure+0x150>)
    4c30:	4298      	cmp	r0, r3
    4c32:	d181      	bne.n	4b38 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    4c34:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    4c38:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4c3c:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4c3e:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4c40:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    4c44:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4c48:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4c50:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    4c54:	e79d      	b.n	4b92 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4c56:	2200      	movs	r2, #0
    4c58:	e7ee      	b.n	4c38 <nrfx_gpiote_input_configure+0x120>
    4c5a:	bf00      	nop
    4c5c:	2000008c 	.word	0x2000008c
    4c60:	0bad0004 	.word	0x0bad0004
    4c64:	50842500 	.word	0x50842500
    4c68:	0bad0000 	.word	0x0bad0000
    4c6c:	200000e0 	.word	0x200000e0

00004c70 <nrfx_gpiote_output_configure>:
{
    4c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c72:	4604      	mov	r4, r0
    if (p_config)
    4c74:	b379      	cbz	r1, 4cd6 <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4c76:	4e3a      	ldr	r6, [pc, #232]	; (4d60 <nrfx_gpiote_output_configure+0xf0>)
    4c78:	f100 0708 	add.w	r7, r0, #8
    4c7c:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4c80:	07ab      	lsls	r3, r5, #30
    4c82:	d404      	bmi.n	4c8e <nrfx_gpiote_output_configure+0x1e>
    4c84:	f7ff fed8 	bl	4a38 <pin_in_use_by_te>
    4c88:	b108      	cbz	r0, 4c8e <nrfx_gpiote_output_configure+0x1e>
{
    4c8a:	4836      	ldr	r0, [pc, #216]	; (4d64 <nrfx_gpiote_output_configure+0xf4>)
}
    4c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4c8e:	f015 0f1c 	tst.w	r5, #28
    4c92:	784b      	ldrb	r3, [r1, #1]
    4c94:	d122      	bne.n	4cdc <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
    4c96:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4c9a:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 4d68 <nrfx_gpiote_output_configure+0xf8>
    4c9e:	f100 0e80 	add.w	lr, r0, #128	; 0x80
    4ca2:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4ca6:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4caa:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    4cac:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4cb0:	7809      	ldrb	r1, [r1, #0]
    4cb2:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
    4cb6:	f02c 0c07 	bic.w	ip, ip, #7
    4cba:	ea43 030c 	orr.w	r3, r3, ip
    4cbe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    4cc2:	4929      	ldr	r1, [pc, #164]	; (4d68 <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4cc4:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
    4cc8:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4cca:	f045 0503 	orr.w	r5, r5, #3
    4cce:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    4cd2:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    4cd6:	b922      	cbnz	r2, 4ce2 <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
    4cd8:	4824      	ldr	r0, [pc, #144]	; (4d6c <nrfx_gpiote_output_configure+0xfc>)
    4cda:	e7d7      	b.n	4c8c <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4cdc:	2b01      	cmp	r3, #1
    4cde:	d1da      	bne.n	4c96 <nrfx_gpiote_output_configure+0x26>
    4ce0:	e7d3      	b.n	4c8a <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4ce2:	4e1f      	ldr	r6, [pc, #124]	; (4d60 <nrfx_gpiote_output_configure+0xf0>)
    4ce4:	f104 0708 	add.w	r7, r4, #8
    4ce8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4cec:	0783      	lsls	r3, r0, #30
    4cee:	d5cc      	bpl.n	4c8a <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    4cf0:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    4cf4:	2300      	movs	r3, #0
    4cf6:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4cf8:	f020 0020 	bic.w	r0, r0, #32
    4cfc:	0089      	lsls	r1, r1, #2
    4cfe:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    4d02:	04c0      	lsls	r0, r0, #19
    4d04:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    4d08:	0cc0      	lsrs	r0, r0, #19
    4d0a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4d0e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    4d12:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4d16:	7855      	ldrb	r5, [r2, #1]
    4d18:	2d00      	cmp	r5, #0
    4d1a:	d0dd      	beq.n	4cd8 <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4d1c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    4d20:	7892      	ldrb	r2, [r2, #2]
    4d22:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    4d26:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4d2a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d2e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4d32:	0223      	lsls	r3, r4, #8
    4d34:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4d38:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d3a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4d3e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4d42:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d44:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4d46:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4d4a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d4e:	4313      	orrs	r3, r2
    4d50:	f040 0020 	orr.w	r0, r0, #32
    4d54:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4d58:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4d5c:	e7bc      	b.n	4cd8 <nrfx_gpiote_output_configure+0x68>
    4d5e:	bf00      	nop
    4d60:	2000008c 	.word	0x2000008c
    4d64:	0bad0004 	.word	0x0bad0004
    4d68:	50842500 	.word	0x50842500
    4d6c:	0bad0000 	.word	0x0bad0000

00004d70 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4d70:	4b01      	ldr	r3, [pc, #4]	; (4d78 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4d72:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4d76:	4770      	bx	lr
    4d78:	2000008c 	.word	0x2000008c

00004d7c <nrfx_gpiote_channel_get>:
{
    4d7c:	b508      	push	{r3, lr}
    4d7e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4d80:	f7ff fe5a 	bl	4a38 <pin_in_use_by_te>
    4d84:	b138      	cbz	r0, 4d96 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d86:	4b05      	ldr	r3, [pc, #20]	; (4d9c <nrfx_gpiote_channel_get+0x20>)
    4d88:	3208      	adds	r2, #8
    4d8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    4d8e:	4804      	ldr	r0, [pc, #16]	; (4da0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d90:	0b5b      	lsrs	r3, r3, #13
    4d92:	700b      	strb	r3, [r1, #0]
}
    4d94:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4d96:	4803      	ldr	r0, [pc, #12]	; (4da4 <nrfx_gpiote_channel_get+0x28>)
    4d98:	e7fc      	b.n	4d94 <nrfx_gpiote_channel_get+0x18>
    4d9a:	bf00      	nop
    4d9c:	2000008c 	.word	0x2000008c
    4da0:	0bad0000 	.word	0x0bad0000
    4da4:	0bad0004 	.word	0x0bad0004

00004da8 <nrfx_gpiote_init>:
{
    4da8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4daa:	4c0f      	ldr	r4, [pc, #60]	; (4de8 <nrfx_gpiote_init+0x40>)
    4dac:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    4db0:	b9bd      	cbnz	r5, 4de2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4db2:	2240      	movs	r2, #64	; 0x40
    4db4:	4629      	mov	r1, r5
    4db6:	f104 0010 	add.w	r0, r4, #16
    4dba:	f001 fbd6 	bl	656a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4dbe:	200d      	movs	r0, #13
    4dc0:	f7fd fe44 	bl	2a4c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4dc4:	4b09      	ldr	r3, [pc, #36]	; (4dec <nrfx_gpiote_init+0x44>)
    return err_code;
    4dc6:	480a      	ldr	r0, [pc, #40]	; (4df0 <nrfx_gpiote_init+0x48>)
    4dc8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4dcc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4dd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4dd4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4dd8:	2301      	movs	r3, #1
    4dda:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4dde:	6563      	str	r3, [r4, #84]	; 0x54
}
    4de0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4de2:	4804      	ldr	r0, [pc, #16]	; (4df4 <nrfx_gpiote_init+0x4c>)
    4de4:	e7fc      	b.n	4de0 <nrfx_gpiote_init+0x38>
    4de6:	bf00      	nop
    4de8:	2000008c 	.word	0x2000008c
    4dec:	5000d000 	.word	0x5000d000
    4df0:	0bad0000 	.word	0x0bad0000
    4df4:	0bad0005 	.word	0x0bad0005

00004df8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4df8:	4b03      	ldr	r3, [pc, #12]	; (4e08 <nrfx_gpiote_is_init+0x10>)
    4dfa:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    4dfe:	3800      	subs	r0, #0
    4e00:	bf18      	it	ne
    4e02:	2001      	movne	r0, #1
    4e04:	4770      	bx	lr
    4e06:	bf00      	nop
    4e08:	2000008c 	.word	0x2000008c

00004e0c <nrfx_gpiote_channel_free>:
{
    4e0c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4e0e:	4801      	ldr	r0, [pc, #4]	; (4e14 <nrfx_gpiote_channel_free+0x8>)
    4e10:	f7ff bd9c 	b.w	494c <nrfx_flag32_free>
    4e14:	200000dc 	.word	0x200000dc

00004e18 <nrfx_gpiote_channel_alloc>:
{
    4e18:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4e1a:	4801      	ldr	r0, [pc, #4]	; (4e20 <nrfx_gpiote_channel_alloc+0x8>)
    4e1c:	f7ff bd7a 	b.w	4914 <nrfx_flag32_alloc>
    4e20:	200000dc 	.word	0x200000dc

00004e24 <nrfx_gpiote_trigger_enable>:
{
    4e24:	4602      	mov	r2, r0
    4e26:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e28:	f7ff fe06 	bl	4a38 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4e2c:	4b1c      	ldr	r3, [pc, #112]	; (4ea0 <nrfx_gpiote_trigger_enable+0x7c>)
    4e2e:	f102 0408 	add.w	r4, r2, #8
    4e32:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e36:	b1e0      	cbz	r0, 4e72 <nrfx_gpiote_trigger_enable+0x4e>
    4e38:	f013 0402 	ands.w	r4, r3, #2
    4e3c:	d119      	bne.n	4e72 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4e3e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4e40:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4e42:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    4e46:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    4e4a:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e4e:	6004      	str	r4, [r0, #0]
    4e50:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4e54:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4e56:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4e5a:	f040 0001 	orr.w	r0, r0, #1
    4e5e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4e62:	b129      	cbz	r1, 4e70 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4e64:	2201      	movs	r2, #1
    4e66:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4e6a:	4a0e      	ldr	r2, [pc, #56]	; (4ea4 <nrfx_gpiote_trigger_enable+0x80>)
    4e6c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4e70:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4e72:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4e76:	2b04      	cmp	r3, #4
    4e78:	d00e      	beq.n	4e98 <nrfx_gpiote_trigger_enable+0x74>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4e7a:	2b05      	cmp	r3, #5
    4e7c:	d00e      	beq.n	4e9c <nrfx_gpiote_trigger_enable+0x78>
    return p_reg->IN;
    4e7e:	4b0a      	ldr	r3, [pc, #40]	; (4ea8 <nrfx_gpiote_trigger_enable+0x84>)
    4e80:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    4e82:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4e86:	40d9      	lsrs	r1, r3
    4e88:	f001 0101 	and.w	r1, r1, #1
    4e8c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4e8e:	4610      	mov	r0, r2
}
    4e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4e94:	f7ff bdc0 	b.w	4a18 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4e98:	2103      	movs	r1, #3
    4e9a:	e7f8      	b.n	4e8e <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4e9c:	2102      	movs	r1, #2
    4e9e:	e7f6      	b.n	4e8e <nrfx_gpiote_trigger_enable+0x6a>
    4ea0:	2000008c 	.word	0x2000008c
    4ea4:	5000d000 	.word	0x5000d000
    4ea8:	50842500 	.word	0x50842500

00004eac <nrfx_gpiote_trigger_disable>:
{
    4eac:	b508      	push	{r3, lr}
    4eae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4eb0:	f7ff fdc2 	bl	4a38 <pin_in_use_by_te>
    4eb4:	b1c0      	cbz	r0, 4ee8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4eb6:	4b0f      	ldr	r3, [pc, #60]	; (4ef4 <nrfx_gpiote_trigger_disable+0x48>)
    4eb8:	f102 0108 	add.w	r1, r2, #8
    4ebc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4ec0:	0799      	lsls	r1, r3, #30
    4ec2:	d411      	bmi.n	4ee8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4ec4:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4ec6:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4ec8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4eca:	490b      	ldr	r1, [pc, #44]	; (4ef8 <nrfx_gpiote_trigger_disable+0x4c>)
    4ecc:	009b      	lsls	r3, r3, #2
    4ece:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4ed2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4ed6:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4eda:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4ede:	f022 0203 	bic.w	r2, r2, #3
    4ee2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4ee6:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4ee8:	2100      	movs	r1, #0
}
    4eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4eee:	4610      	mov	r0, r2
    4ef0:	f7ff bd92 	b.w	4a18 <nrf_gpio_cfg_sense_set>
    4ef4:	2000008c 	.word	0x2000008c
    4ef8:	5000d000 	.word	0x5000d000

00004efc <nrfx_gpiote_pin_uninit>:
{
    4efc:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4efe:	4b0c      	ldr	r3, [pc, #48]	; (4f30 <nrfx_gpiote_pin_uninit+0x34>)
    4f00:	f100 0208 	add.w	r2, r0, #8
    4f04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    4f08:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4f0a:	07db      	lsls	r3, r3, #31
    4f0c:	d50d      	bpl.n	4f2a <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    4f0e:	f7ff ffcd 	bl	4eac <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4f12:	4620      	mov	r0, r4
    4f14:	f7ff fde2 	bl	4adc <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    4f18:	2202      	movs	r2, #2
    4f1a:	4b06      	ldr	r3, [pc, #24]	; (4f34 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    4f1c:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    4f20:	3480      	adds	r4, #128	; 0x80
    4f22:	4805      	ldr	r0, [pc, #20]	; (4f38 <nrfx_gpiote_pin_uninit+0x3c>)
    4f24:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    4f28:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4f2a:	4804      	ldr	r0, [pc, #16]	; (4f3c <nrfx_gpiote_pin_uninit+0x40>)
    4f2c:	e7fc      	b.n	4f28 <nrfx_gpiote_pin_uninit+0x2c>
    4f2e:	bf00      	nop
    4f30:	2000008c 	.word	0x2000008c
    4f34:	50842500 	.word	0x50842500
    4f38:	0bad0000 	.word	0x0bad0000
    4f3c:	0bad0004 	.word	0x0bad0004

00004f40 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    4f44:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4f46:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f48:	462c      	mov	r4, r5
{
    4f4a:	4b4d      	ldr	r3, [pc, #308]	; (5080 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    4f4c:	484d      	ldr	r0, [pc, #308]	; (5084 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f4e:	494e      	ldr	r1, [pc, #312]	; (5088 <nrfx_gpiote_irq_handler+0x148>)
{
    4f50:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f52:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4f54:	b136      	cbz	r6, 4f64 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4f56:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4f5a:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f5c:	bf1e      	ittt	ne
    4f5e:	601c      	strne	r4, [r3, #0]
    4f60:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4f62:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f64:	3304      	adds	r3, #4
    4f66:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4f68:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f6c:	d1f1      	bne.n	4f52 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f6e:	4f45      	ldr	r7, [pc, #276]	; (5084 <nrfx_gpiote_irq_handler+0x144>)
    4f70:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4f74:	b193      	cbz	r3, 4f9c <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    4f76:	4e45      	ldr	r6, [pc, #276]	; (508c <nrfx_gpiote_irq_handler+0x14c>)
    4f78:	6a33      	ldr	r3, [r6, #32]
    4f7a:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    4f7c:	6233      	str	r3, [r6, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4f7e:	f04f 0a01 	mov.w	sl, #1
    4f82:	f10d 090c 	add.w	r9, sp, #12
            while (latch[i])
    4f86:	9803      	ldr	r0, [sp, #12]
    4f88:	b970      	cbnz	r0, 4fa8 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f8a:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    4f8e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    4f92:	6a33      	ldr	r3, [r6, #32]
    4f94:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    4f96:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    4f98:	2b00      	cmp	r3, #0
    4f9a:	d1f0      	bne.n	4f7e <nrfx_gpiote_irq_handler+0x3e>
        mask &= ~NRFX_BIT(ch);
    4f9c:	2401      	movs	r4, #1
    while (mask)
    4f9e:	2d00      	cmp	r5, #0
    4fa0:	d156      	bne.n	5050 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4fa2:	b005      	add	sp, #20
    4fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    4fa8:	fa90 fba0 	rbit	fp, r0
    4fac:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4fb0:	4a37      	ldr	r2, [pc, #220]	; (5090 <nrfx_gpiote_irq_handler+0x150>)
    4fb2:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4fb6:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
    4fba:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    4fbe:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4fc2:	f819 300c 	ldrb.w	r3, [r9, ip]
    4fc6:	fa0a f404 	lsl.w	r4, sl, r4
    4fca:	ea23 0304 	bic.w	r3, r3, r4
    4fce:	f809 300c 	strb.w	r3, [r9, ip]
    4fd2:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4fd6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    4fda:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
    4fde:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4fe0:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4fe2:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    4fe6:	d518      	bpl.n	501a <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
    4fe8:	4611      	mov	r1, r2
    4fea:	4658      	mov	r0, fp
    4fec:	9301      	str	r3, [sp, #4]
    4fee:	f7ff fd2d 	bl	4a4c <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4ff2:	9b01      	ldr	r3, [sp, #4]
    4ff4:	b2e4      	uxtb	r4, r4
    4ff6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4ffa:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4ffe:	429c      	cmp	r4, r3
    5000:	d107      	bne.n	5012 <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5002:	2100      	movs	r1, #0
    5004:	4658      	mov	r0, fp
    5006:	f7ff fd07 	bl	4a18 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    500a:	4621      	mov	r1, r4
    500c:	4658      	mov	r0, fp
    500e:	f7ff fd03 	bl	4a18 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    5012:	fa0a f00b 	lsl.w	r0, sl, fp
    5016:	6230      	str	r0, [r6, #32]
}
    5018:	e7b5      	b.n	4f86 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    501a:	2c02      	cmp	r4, #2
    501c:	d10c      	bne.n	5038 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    501e:	2103      	movs	r1, #3
    5020:	4658      	mov	r0, fp
    5022:	f7ff fcf9 	bl	4a18 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5026:	f008 0305 	and.w	r3, r8, #5
    502a:	2b01      	cmp	r3, #1
    502c:	d1f1      	bne.n	5012 <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
    502e:	4641      	mov	r1, r8
    5030:	4658      	mov	r0, fp
    5032:	f7ff fd0b 	bl	4a4c <call_handler>
    5036:	e7ec      	b.n	5012 <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5038:	2102      	movs	r1, #2
    503a:	4658      	mov	r0, fp
    503c:	9201      	str	r2, [sp, #4]
    503e:	f7ff fceb 	bl	4a18 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5042:	9a01      	ldr	r2, [sp, #4]
    5044:	2a03      	cmp	r2, #3
    5046:	d0f2      	beq.n	502e <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5048:	2c03      	cmp	r4, #3
    504a:	d1e2      	bne.n	5012 <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    504c:	428a      	cmp	r2, r1
    504e:	e7ed      	b.n	502c <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
    5050:	fa95 f3a5 	rbit	r3, r5
    5054:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5058:	fa04 f203 	lsl.w	r2, r4, r3
    505c:	009b      	lsls	r3, r3, #2
    505e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    5062:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5066:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    506a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    506e:	f3c0 2004 	ubfx	r0, r0, #8, #5
    5072:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    5076:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    507a:	f7ff fce7 	bl	4a4c <call_handler>
    507e:	e78e      	b.n	4f9e <nrfx_gpiote_irq_handler+0x5e>
    5080:	5000d100 	.word	0x5000d100
    5084:	5000d000 	.word	0x5000d000
    5088:	5000d120 	.word	0x5000d120
    508c:	50842500 	.word	0x50842500
    5090:	2000008c 	.word	0x2000008c

00005094 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    5094:	2200      	movs	r2, #0
    5096:	4b03      	ldr	r3, [pc, #12]	; (50a4 <nvmc_readonly_mode_set+0x10>)
    5098:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    509c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    50a0:	4770      	bx	lr
    50a2:	bf00      	nop
    50a4:	50039000 	.word	0x50039000

000050a8 <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    50a8:	4a04      	ldr	r2, [pc, #16]	; (50bc <nvmc_word_write+0x14>)
    50aa:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    50ae:	07db      	lsls	r3, r3, #31
    50b0:	d5fb      	bpl.n	50aa <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    50b2:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    50b4:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    50b8:	4770      	bx	lr
    50ba:	bf00      	nop
    50bc:	50039000 	.word	0x50039000

000050c0 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    50c0:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    50c2:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    50c6:	b983      	cbnz	r3, 50ea <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    50c8:	2202      	movs	r2, #2
    50ca:	4b09      	ldr	r3, [pc, #36]	; (50f0 <nrfx_nvmc_page_erase+0x30>)
    50cc:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    50d0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    50d4:	f04f 32ff 	mov.w	r2, #4294967295
    50d8:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    50da:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    50de:	07d2      	lsls	r2, r2, #31
    50e0:	d5fb      	bpl.n	50da <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    50e2:	f7ff ffd7 	bl	5094 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    50e6:	4803      	ldr	r0, [pc, #12]	; (50f4 <nrfx_nvmc_page_erase+0x34>)
}
    50e8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    50ea:	4803      	ldr	r0, [pc, #12]	; (50f8 <nrfx_nvmc_page_erase+0x38>)
    50ec:	e7fc      	b.n	50e8 <nrfx_nvmc_page_erase+0x28>
    50ee:	bf00      	nop
    50f0:	50039000 	.word	0x50039000
    50f4:	0bad0000 	.word	0x0bad0000
    50f8:	0bad000a 	.word	0x0bad000a

000050fc <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    50fc:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    50fe:	b508      	push	{r3, lr}
    5100:	4b05      	ldr	r3, [pc, #20]	; (5118 <nrfx_nvmc_word_write+0x1c>)
    5102:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    5106:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    510a:	f7ff ffcd 	bl	50a8 <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    510e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    5112:	f7ff bfbf 	b.w	5094 <nvmc_readonly_mode_set>
    5116:	bf00      	nop
    5118:	50039000 	.word	0x50039000

0000511c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    511c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    511e:	4604      	mov	r4, r0
    5120:	460d      	mov	r5, r1
	__asm__ volatile(
    5122:	f04f 0320 	mov.w	r3, #32
    5126:	f3ef 8611 	mrs	r6, BASEPRI
    512a:	f383 8812 	msr	BASEPRI_MAX, r3
    512e:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5132:	2200      	movs	r2, #0
    5134:	2804      	cmp	r0, #4
    5136:	bf96      	itet	ls
    5138:	4b11      	ldrls	r3, [pc, #68]	; (5180 <z_fatal_error+0x64>)
    513a:	4b12      	ldrhi	r3, [pc, #72]	; (5184 <z_fatal_error+0x68>)
    513c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
    5140:	9200      	str	r2, [sp, #0]
    5142:	2145      	movs	r1, #69	; 0x45
    5144:	4602      	mov	r2, r0
    5146:	4810      	ldr	r0, [pc, #64]	; (5188 <z_fatal_error+0x6c>)
    5148:	f000 fe95 	bl	5e76 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    514c:	b13d      	cbz	r5, 515e <z_fatal_error+0x42>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    514e:	69eb      	ldr	r3, [r5, #28]
    5150:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5154:	b11b      	cbz	r3, 515e <z_fatal_error+0x42>
		LOG_ERR("Fault during interrupt handling\n");
    5156:	2145      	movs	r1, #69	; 0x45
    5158:	480c      	ldr	r0, [pc, #48]	; (518c <z_fatal_error+0x70>)
    515a:	f000 fe8c 	bl	5e76 <z_log_minimal_printk>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    515e:	2200      	movs	r2, #0
    5160:	4b0b      	ldr	r3, [pc, #44]	; (5190 <z_fatal_error+0x74>)
    5162:	2145      	movs	r1, #69	; 0x45
    5164:	480b      	ldr	r0, [pc, #44]	; (5194 <z_fatal_error+0x78>)
    5166:	f000 fe86 	bl	5e76 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    516a:	4629      	mov	r1, r5
    516c:	4620      	mov	r0, r4
    516e:	f7fe fea5 	bl	3ebc <k_sys_fatal_error_handler>
	__asm__ volatile(
    5172:	f386 8811 	msr	BASEPRI, r6
    5176:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    517a:	b002      	add	sp, #8
    517c:	bd70      	pop	{r4, r5, r6, pc}
    517e:	bf00      	nop
    5180:	00008ce0 	.word	0x00008ce0
    5184:	00009b82 	.word	0x00009b82
    5188:	00009b90 	.word	0x00009b90
    518c:	00009bbd 	.word	0x00009bbd
    5190:	00009be3 	.word	0x00009be3
    5194:	00009beb 	.word	0x00009beb

00005198 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5198:	4b0f      	ldr	r3, [pc, #60]	; (51d8 <z_sys_init_run_level+0x40>)
{
    519a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    519c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    51a0:	3001      	adds	r0, #1
    51a2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    51a6:	42a6      	cmp	r6, r4
    51a8:	d800      	bhi.n	51ac <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    51aa:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    51ac:	e9d4 3500 	ldrd	r3, r5, [r4]
    51b0:	4628      	mov	r0, r5
    51b2:	4798      	blx	r3
		if (dev != NULL) {
    51b4:	b16d      	cbz	r5, 51d2 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    51b6:	b138      	cbz	r0, 51c8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    51b8:	2800      	cmp	r0, #0
    51ba:	bfb8      	it	lt
    51bc:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    51be:	28ff      	cmp	r0, #255	; 0xff
    51c0:	bfa8      	it	ge
    51c2:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    51c4:	68eb      	ldr	r3, [r5, #12]
    51c6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    51c8:	68ea      	ldr	r2, [r5, #12]
    51ca:	7853      	ldrb	r3, [r2, #1]
    51cc:	f043 0301 	orr.w	r3, r3, #1
    51d0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    51d2:	3408      	adds	r4, #8
    51d4:	e7e7      	b.n	51a6 <z_sys_init_run_level+0xe>
    51d6:	bf00      	nop
    51d8:	00008cf4 	.word	0x00008cf4

000051dc <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    51dc:	2201      	movs	r2, #1
{
    51de:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    51e0:	4b08      	ldr	r3, [pc, #32]	; (5204 <bg_thread_main+0x28>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    51e2:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    51e4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    51e6:	f7ff ffd7 	bl	5198 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    51ea:	f000 f90f 	bl	540c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    51ee:	2004      	movs	r0, #4
    51f0:	f7ff ffd2 	bl	5198 <z_sys_init_run_level>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
    51f4:	f7fb f90e 	bl	414 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    51f8:	4a03      	ldr	r2, [pc, #12]	; (5208 <bg_thread_main+0x2c>)
    51fa:	7b13      	ldrb	r3, [r2, #12]
    51fc:	f023 0301 	bic.w	r3, r3, #1
    5200:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5202:	bd08      	pop	{r3, pc}
    5204:	20003d71 	.word	0x20003d71
    5208:	20000180 	.word	0x20000180

0000520c <z_bss_zero>:
{
    520c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    520e:	4803      	ldr	r0, [pc, #12]	; (521c <z_bss_zero+0x10>)
    5210:	4a03      	ldr	r2, [pc, #12]	; (5220 <z_bss_zero+0x14>)
    5212:	2100      	movs	r1, #0
    5214:	1a12      	subs	r2, r2, r0
    5216:	f003 fa04 	bl	8622 <z_early_memset>
}
    521a:	bd08      	pop	{r3, pc}
    521c:	20000160 	.word	0x20000160
    5220:	20003d74 	.word	0x20003d74

00005224 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5224:	b508      	push	{r3, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    5226:	2000      	movs	r0, #0
    5228:	f7ff ffb6 	bl	5198 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    522c:	4b16      	ldr	r3, [pc, #88]	; (5288 <z_cstart+0x64>)
	uint32_t msp =
    522e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5232:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    5236:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    523a:	2500      	movs	r5, #0
    523c:	23e0      	movs	r3, #224	; 0xe0
    523e:	4c13      	ldr	r4, [pc, #76]	; (528c <z_cstart+0x68>)
    5240:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    5244:	77e5      	strb	r5, [r4, #31]
    5246:	7625      	strb	r5, [r4, #24]
    5248:	7665      	strb	r5, [r4, #25]
    524a:	76a5      	strb	r5, [r4, #26]
    524c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5250:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5252:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5256:	6263      	str	r3, [r4, #36]	; 0x24
    5258:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    525c:	f7fd fe6c 	bl	2f38 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5260:	f7fd fba6 	bl	29b0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5264:	f04f 33ff 	mov.w	r3, #4294967295
    5268:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    526a:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    526c:	f003 f9cd 	bl	860a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    5270:	2001      	movs	r0, #1
    5272:	f7ff ff91 	bl	5198 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    5276:	2002      	movs	r0, #2
    5278:	f7ff ff8e 	bl	5198 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    527c:	462b      	mov	r3, r5
    527e:	462a      	mov	r2, r5
    5280:	4629      	mov	r1, r5
    5282:	4803      	ldr	r0, [pc, #12]	; (5290 <z_cstart+0x6c>)
    5284:	f7fd fc44 	bl	2b10 <z_arm_switch_to_main_no_multithreading>
    5288:	20003d78 	.word	0x20003d78
    528c:	e000ed00 	.word	0xe000ed00
    5290:	000051dd 	.word	0x000051dd

00005294 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    5294:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    5296:	4806      	ldr	r0, [pc, #24]	; (52b0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    5298:	4a06      	ldr	r2, [pc, #24]	; (52b4 <z_data_copy+0x20>)
    529a:	4907      	ldr	r1, [pc, #28]	; (52b8 <z_data_copy+0x24>)
    529c:	1a12      	subs	r2, r2, r0
    529e:	f003 f9c2 	bl	8626 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    52a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    52a6:	4a05      	ldr	r2, [pc, #20]	; (52bc <z_data_copy+0x28>)
    52a8:	4905      	ldr	r1, [pc, #20]	; (52c0 <z_data_copy+0x2c>)
    52aa:	4806      	ldr	r0, [pc, #24]	; (52c4 <z_data_copy+0x30>)
    52ac:	f003 b9bb 	b.w	8626 <z_early_memcpy>
    52b0:	20000000 	.word	0x20000000
    52b4:	2000015a 	.word	0x2000015a
    52b8:	00009c84 	.word	0x00009c84
    52bc:	00000000 	.word	0x00000000
    52c0:	00009c84 	.word	0x00009c84
    52c4:	20000000 	.word	0x20000000

000052c8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    52c8:	4b03      	ldr	r3, [pc, #12]	; (52d8 <elapsed+0x10>)
    52ca:	681b      	ldr	r3, [r3, #0]
    52cc:	b90b      	cbnz	r3, 52d2 <elapsed+0xa>
    52ce:	f7fe bd67 	b.w	3da0 <sys_clock_elapsed>
}
    52d2:	2000      	movs	r0, #0
    52d4:	4770      	bx	lr
    52d6:	bf00      	nop
    52d8:	20001b8c 	.word	0x20001b8c

000052dc <next_timeout>:

static int32_t next_timeout(void)
{
    52dc:	b510      	push	{r4, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    52de:	4b0e      	ldr	r3, [pc, #56]	; (5318 <next_timeout+0x3c>)
    52e0:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    52e2:	429c      	cmp	r4, r3
    52e4:	d104      	bne.n	52f0 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    52e6:	f7ff ffef 	bl	52c8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    52ea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    52ee:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    52f0:	f7ff ffea 	bl	52c8 <elapsed>
	if ((to == NULL) ||
    52f4:	2c00      	cmp	r4, #0
    52f6:	d0f8      	beq.n	52ea <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    52f8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    52fc:	1a1b      	subs	r3, r3, r0
    52fe:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    5302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5306:	f172 0100 	sbcs.w	r1, r2, #0
    530a:	daee      	bge.n	52ea <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    530c:	2a00      	cmp	r2, #0
    530e:	bfac      	ite	ge
    5310:	4618      	movge	r0, r3
    5312:	2000      	movlt	r0, #0
	return ret;
    5314:	e7eb      	b.n	52ee <next_timeout+0x12>
    5316:	bf00      	nop
    5318:	200000e8 	.word	0x200000e8

0000531c <remove_timeout>:
{
    531c:	b530      	push	{r4, r5, lr}
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    531e:	b170      	cbz	r0, 533e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5320:	4b0b      	ldr	r3, [pc, #44]	; (5350 <remove_timeout+0x34>)
    5322:	685b      	ldr	r3, [r3, #4]
    5324:	4298      	cmp	r0, r3
    5326:	d00a      	beq.n	533e <remove_timeout+0x22>
    5328:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    532a:	b143      	cbz	r3, 533e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    532c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5330:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5334:	1912      	adds	r2, r2, r4
    5336:	eb41 0105 	adc.w	r1, r1, r5
    533a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    533e:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    5342:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5344:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5346:	2300      	movs	r3, #0
	node->prev = NULL;
    5348:	e9c0 3300 	strd	r3, r3, [r0]
}
    534c:	bd30      	pop	{r4, r5, pc}
    534e:	bf00      	nop
    5350:	200000e8 	.word	0x200000e8

00005354 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5358:	4603      	mov	r3, r0
	__asm__ volatile(
    535a:	f04f 0220 	mov.w	r2, #32
    535e:	f3ef 8411 	mrs	r4, BASEPRI
    5362:	f382 8812 	msr	BASEPRI_MAX, r2
    5366:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    536a:	4f25      	ldr	r7, [pc, #148]	; (5400 <sys_clock_announce+0xac>)
	return list->head == list;
    536c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 5404 <sys_clock_announce+0xb0>
    5370:	f8d9 0000 	ldr.w	r0, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    5374:	f8df c090 	ldr.w	ip, [pc, #144]	; 5408 <sys_clock_announce+0xb4>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5378:	4548      	cmp	r0, r9
	announce_remaining = ticks;
    537a:	603b      	str	r3, [r7, #0]
	return list->head == list;
    537c:	ea4f 75e3 	mov.w	r5, r3, asr #31
		curr_tick += dt;
    5380:	e9dc 1e00 	ldrd	r1, lr, [ip]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5384:	d00c      	beq.n	53a0 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5386:	b158      	cbz	r0, 53a0 <sys_clock_announce+0x4c>
    5388:	e9d0 8604 	ldrd	r8, r6, [r0, #16]
    538c:	4543      	cmp	r3, r8
    538e:	eb75 0206 	sbcs.w	r2, r5, r6
    5392:	da17      	bge.n	53c4 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5394:	ebb8 0203 	subs.w	r2, r8, r3
    5398:	eb66 0605 	sbc.w	r6, r6, r5
    539c:	e9c0 2604 	strd	r2, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    53a0:	1859      	adds	r1, r3, r1
    53a2:	eb4e 0505 	adc.w	r5, lr, r5
    53a6:	e9cc 1500 	strd	r1, r5, [ip]
	announce_remaining = 0;
    53aa:	2500      	movs	r5, #0
    53ac:	603d      	str	r5, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    53ae:	f7ff ff95 	bl	52dc <next_timeout>
    53b2:	4629      	mov	r1, r5
    53b4:	f7fe fcc2 	bl	3d3c <sys_clock_set_timeout>
	__asm__ volatile(
    53b8:	f384 8811 	msr	BASEPRI, r4
    53bc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    53c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    53c4:	eb18 0101 	adds.w	r1, r8, r1
    53c8:	eb4e 73e8 	adc.w	r3, lr, r8, asr #31
		t->dticks = 0;
    53cc:	2200      	movs	r2, #0
		curr_tick += dt;
    53ce:	e9cc 1300 	strd	r1, r3, [ip]
		t->dticks = 0;
    53d2:	2300      	movs	r3, #0
    53d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    53d8:	f7ff ffa0 	bl	531c <remove_timeout>
    53dc:	f384 8811 	msr	BASEPRI, r4
    53e0:	f3bf 8f6f 	isb	sy
		t->fn(t);
    53e4:	6883      	ldr	r3, [r0, #8]
    53e6:	4798      	blx	r3
	__asm__ volatile(
    53e8:	f04f 0320 	mov.w	r3, #32
    53ec:	f3ef 8411 	mrs	r4, BASEPRI
    53f0:	f383 8812 	msr	BASEPRI_MAX, r3
    53f4:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    53f8:	683b      	ldr	r3, [r7, #0]
    53fa:	eba3 0308 	sub.w	r3, r3, r8
    53fe:	e7b7      	b.n	5370 <sys_clock_announce+0x1c>
    5400:	20001b8c 	.word	0x20001b8c
    5404:	200000e8 	.word	0x200000e8
    5408:	20000200 	.word	0x20000200

0000540c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    540c:	4801      	ldr	r0, [pc, #4]	; (5414 <boot_banner+0x8>)
    540e:	f000 bc37 	b.w	5c80 <printk>
    5412:	bf00      	nop
    5414:	00009c55 	.word	0x00009c55

00005418 <nrf_cc3xx_platform_init_no_rng>:
    5418:	b510      	push	{r4, lr}
    541a:	4c0a      	ldr	r4, [pc, #40]	; (5444 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    541c:	6823      	ldr	r3, [r4, #0]
    541e:	b11b      	cbz	r3, 5428 <nrf_cc3xx_platform_init_no_rng+0x10>
    5420:	2301      	movs	r3, #1
    5422:	2000      	movs	r0, #0
    5424:	6023      	str	r3, [r4, #0]
    5426:	bd10      	pop	{r4, pc}
    5428:	f000 f850 	bl	54cc <CC_LibInitNoRng>
    542c:	2800      	cmp	r0, #0
    542e:	d0f7      	beq.n	5420 <nrf_cc3xx_platform_init_no_rng+0x8>
    5430:	3801      	subs	r0, #1
    5432:	2806      	cmp	r0, #6
    5434:	d803      	bhi.n	543e <nrf_cc3xx_platform_init_no_rng+0x26>
    5436:	4b04      	ldr	r3, [pc, #16]	; (5448 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5438:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    543c:	bd10      	pop	{r4, pc}
    543e:	4803      	ldr	r0, [pc, #12]	; (544c <nrf_cc3xx_platform_init_no_rng+0x34>)
    5440:	bd10      	pop	{r4, pc}
    5442:	bf00      	nop
    5444:	20001b90 	.word	0x20001b90
    5448:	00008d0c 	.word	0x00008d0c
    544c:	ffff8ffe 	.word	0xffff8ffe

00005450 <nrf_cc3xx_platform_abort>:
    5450:	f3bf 8f4f 	dsb	sy
    5454:	4905      	ldr	r1, [pc, #20]	; (546c <nrf_cc3xx_platform_abort+0x1c>)
    5456:	4b06      	ldr	r3, [pc, #24]	; (5470 <nrf_cc3xx_platform_abort+0x20>)
    5458:	68ca      	ldr	r2, [r1, #12]
    545a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    545e:	4313      	orrs	r3, r2
    5460:	60cb      	str	r3, [r1, #12]
    5462:	f3bf 8f4f 	dsb	sy
    5466:	bf00      	nop
    5468:	e7fd      	b.n	5466 <nrf_cc3xx_platform_abort+0x16>
    546a:	bf00      	nop
    546c:	e000ed00 	.word	0xe000ed00
    5470:	05fa0004 	.word	0x05fa0004

00005474 <CC_PalAbort>:
    5474:	b430      	push	{r4, r5}
    5476:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    547a:	2500      	movs	r5, #0
    547c:	4b07      	ldr	r3, [pc, #28]	; (549c <CC_PalAbort+0x28>)
    547e:	4c08      	ldr	r4, [pc, #32]	; (54a0 <CC_PalAbort+0x2c>)
    5480:	4908      	ldr	r1, [pc, #32]	; (54a4 <CC_PalAbort+0x30>)
    5482:	6849      	ldr	r1, [r1, #4]
    5484:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    5488:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    548c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    5490:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    5494:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    5498:	bc30      	pop	{r4, r5}
    549a:	4708      	bx	r1
    549c:	50841000 	.word	0x50841000
    54a0:	50840000 	.word	0x50840000
    54a4:	200000f0 	.word	0x200000f0

000054a8 <nrf_cc3xx_platform_set_abort>:
    54a8:	4b02      	ldr	r3, [pc, #8]	; (54b4 <nrf_cc3xx_platform_set_abort+0xc>)
    54aa:	e9d0 1200 	ldrd	r1, r2, [r0]
    54ae:	e9c3 1200 	strd	r1, r2, [r3]
    54b2:	4770      	bx	lr
    54b4:	200000f0 	.word	0x200000f0

000054b8 <mbedtls_platform_zeroize>:
    54b8:	b138      	cbz	r0, 54ca <mbedtls_platform_zeroize+0x12>
    54ba:	b131      	cbz	r1, 54ca <mbedtls_platform_zeroize+0x12>
    54bc:	2200      	movs	r2, #0
    54be:	4401      	add	r1, r0
    54c0:	4603      	mov	r3, r0
    54c2:	3001      	adds	r0, #1
    54c4:	4288      	cmp	r0, r1
    54c6:	701a      	strb	r2, [r3, #0]
    54c8:	d1fa      	bne.n	54c0 <mbedtls_platform_zeroize+0x8>
    54ca:	4770      	bx	lr

000054cc <CC_LibInitNoRng>:
    54cc:	b538      	push	{r3, r4, r5, lr}
    54ce:	f000 f82f 	bl	5530 <CC_HalInit>
    54d2:	b120      	cbz	r0, 54de <CC_LibInitNoRng+0x12>
    54d4:	2403      	movs	r4, #3
    54d6:	f000 f863 	bl	55a0 <CC_PalTerminate>
    54da:	4620      	mov	r0, r4
    54dc:	bd38      	pop	{r3, r4, r5, pc}
    54de:	f000 f831 	bl	5544 <CC_PalInit>
    54e2:	b998      	cbnz	r0, 550c <CC_LibInitNoRng+0x40>
    54e4:	f000 f8ac 	bl	5640 <CC_PalPowerSaveModeSelect>
    54e8:	b998      	cbnz	r0, 5512 <CC_LibInitNoRng+0x46>
    54ea:	4d0f      	ldr	r5, [pc, #60]	; (5528 <CC_LibInitNoRng+0x5c>)
    54ec:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    54f0:	0e1b      	lsrs	r3, r3, #24
    54f2:	2bf0      	cmp	r3, #240	; 0xf0
    54f4:	d108      	bne.n	5508 <CC_LibInitNoRng+0x3c>
    54f6:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    54fa:	4b0c      	ldr	r3, [pc, #48]	; (552c <CC_LibInitNoRng+0x60>)
    54fc:	429a      	cmp	r2, r3
    54fe:	d00a      	beq.n	5516 <CC_LibInitNoRng+0x4a>
    5500:	2407      	movs	r4, #7
    5502:	f000 f817 	bl	5534 <CC_HalTerminate>
    5506:	e7e6      	b.n	54d6 <CC_LibInitNoRng+0xa>
    5508:	2406      	movs	r4, #6
    550a:	e7fa      	b.n	5502 <CC_LibInitNoRng+0x36>
    550c:	2404      	movs	r4, #4
    550e:	4620      	mov	r0, r4
    5510:	bd38      	pop	{r3, r4, r5, pc}
    5512:	2400      	movs	r4, #0
    5514:	e7f5      	b.n	5502 <CC_LibInitNoRng+0x36>
    5516:	2001      	movs	r0, #1
    5518:	f000 f892 	bl	5640 <CC_PalPowerSaveModeSelect>
    551c:	4604      	mov	r4, r0
    551e:	2800      	cmp	r0, #0
    5520:	d1f7      	bne.n	5512 <CC_LibInitNoRng+0x46>
    5522:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    5526:	e7d8      	b.n	54da <CC_LibInitNoRng+0xe>
    5528:	50841000 	.word	0x50841000
    552c:	20e00000 	.word	0x20e00000

00005530 <CC_HalInit>:
    5530:	2000      	movs	r0, #0
    5532:	4770      	bx	lr

00005534 <CC_HalTerminate>:
    5534:	2000      	movs	r0, #0
    5536:	4770      	bx	lr

00005538 <CC_HalMaskInterrupt>:
    5538:	4b01      	ldr	r3, [pc, #4]	; (5540 <CC_HalMaskInterrupt+0x8>)
    553a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    553e:	4770      	bx	lr
    5540:	50841000 	.word	0x50841000

00005544 <CC_PalInit>:
    5544:	b510      	push	{r4, lr}
    5546:	4811      	ldr	r0, [pc, #68]	; (558c <CC_PalInit+0x48>)
    5548:	f000 f848 	bl	55dc <CC_PalMutexCreate>
    554c:	b100      	cbz	r0, 5550 <CC_PalInit+0xc>
    554e:	bd10      	pop	{r4, pc}
    5550:	480f      	ldr	r0, [pc, #60]	; (5590 <CC_PalInit+0x4c>)
    5552:	f000 f843 	bl	55dc <CC_PalMutexCreate>
    5556:	2800      	cmp	r0, #0
    5558:	d1f9      	bne.n	554e <CC_PalInit+0xa>
    555a:	4c0e      	ldr	r4, [pc, #56]	; (5594 <CC_PalInit+0x50>)
    555c:	4620      	mov	r0, r4
    555e:	f000 f83d 	bl	55dc <CC_PalMutexCreate>
    5562:	2800      	cmp	r0, #0
    5564:	d1f3      	bne.n	554e <CC_PalInit+0xa>
    5566:	4b0c      	ldr	r3, [pc, #48]	; (5598 <CC_PalInit+0x54>)
    5568:	480c      	ldr	r0, [pc, #48]	; (559c <CC_PalInit+0x58>)
    556a:	601c      	str	r4, [r3, #0]
    556c:	f000 f836 	bl	55dc <CC_PalMutexCreate>
    5570:	4601      	mov	r1, r0
    5572:	2800      	cmp	r0, #0
    5574:	d1eb      	bne.n	554e <CC_PalInit+0xa>
    5576:	f000 f82d 	bl	55d4 <CC_PalDmaInit>
    557a:	4604      	mov	r4, r0
    557c:	b108      	cbz	r0, 5582 <CC_PalInit+0x3e>
    557e:	4620      	mov	r0, r4
    5580:	bd10      	pop	{r4, pc}
    5582:	f000 f83f 	bl	5604 <CC_PalPowerSaveModeInit>
    5586:	4620      	mov	r0, r4
    5588:	e7fa      	b.n	5580 <CC_PalInit+0x3c>
    558a:	bf00      	nop
    558c:	20000104 	.word	0x20000104
    5590:	200000f8 	.word	0x200000f8
    5594:	20000100 	.word	0x20000100
    5598:	20000108 	.word	0x20000108
    559c:	200000fc 	.word	0x200000fc

000055a0 <CC_PalTerminate>:
    55a0:	b508      	push	{r3, lr}
    55a2:	4808      	ldr	r0, [pc, #32]	; (55c4 <CC_PalTerminate+0x24>)
    55a4:	f000 f824 	bl	55f0 <CC_PalMutexDestroy>
    55a8:	4807      	ldr	r0, [pc, #28]	; (55c8 <CC_PalTerminate+0x28>)
    55aa:	f000 f821 	bl	55f0 <CC_PalMutexDestroy>
    55ae:	4807      	ldr	r0, [pc, #28]	; (55cc <CC_PalTerminate+0x2c>)
    55b0:	f000 f81e 	bl	55f0 <CC_PalMutexDestroy>
    55b4:	4806      	ldr	r0, [pc, #24]	; (55d0 <CC_PalTerminate+0x30>)
    55b6:	f000 f81b 	bl	55f0 <CC_PalMutexDestroy>
    55ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    55be:	f000 b80b 	b.w	55d8 <CC_PalDmaTerminate>
    55c2:	bf00      	nop
    55c4:	20000104 	.word	0x20000104
    55c8:	200000f8 	.word	0x200000f8
    55cc:	20000100 	.word	0x20000100
    55d0:	200000fc 	.word	0x200000fc

000055d4 <CC_PalDmaInit>:
    55d4:	2000      	movs	r0, #0
    55d6:	4770      	bx	lr

000055d8 <CC_PalDmaTerminate>:
    55d8:	4770      	bx	lr
    55da:	bf00      	nop

000055dc <CC_PalMutexCreate>:
    55dc:	b508      	push	{r3, lr}
    55de:	4b03      	ldr	r3, [pc, #12]	; (55ec <CC_PalMutexCreate+0x10>)
    55e0:	6802      	ldr	r2, [r0, #0]
    55e2:	681b      	ldr	r3, [r3, #0]
    55e4:	6810      	ldr	r0, [r2, #0]
    55e6:	4798      	blx	r3
    55e8:	2000      	movs	r0, #0
    55ea:	bd08      	pop	{r3, pc}
    55ec:	20000114 	.word	0x20000114

000055f0 <CC_PalMutexDestroy>:
    55f0:	b508      	push	{r3, lr}
    55f2:	4b03      	ldr	r3, [pc, #12]	; (5600 <CC_PalMutexDestroy+0x10>)
    55f4:	6802      	ldr	r2, [r0, #0]
    55f6:	685b      	ldr	r3, [r3, #4]
    55f8:	6810      	ldr	r0, [r2, #0]
    55fa:	4798      	blx	r3
    55fc:	2000      	movs	r0, #0
    55fe:	bd08      	pop	{r3, pc}
    5600:	20000114 	.word	0x20000114

00005604 <CC_PalPowerSaveModeInit>:
    5604:	b570      	push	{r4, r5, r6, lr}
    5606:	4c09      	ldr	r4, [pc, #36]	; (562c <CC_PalPowerSaveModeInit+0x28>)
    5608:	4d09      	ldr	r5, [pc, #36]	; (5630 <CC_PalPowerSaveModeInit+0x2c>)
    560a:	6920      	ldr	r0, [r4, #16]
    560c:	68ab      	ldr	r3, [r5, #8]
    560e:	4798      	blx	r3
    5610:	b118      	cbz	r0, 561a <CC_PalPowerSaveModeInit+0x16>
    5612:	4b08      	ldr	r3, [pc, #32]	; (5634 <CC_PalPowerSaveModeInit+0x30>)
    5614:	4808      	ldr	r0, [pc, #32]	; (5638 <CC_PalPowerSaveModeInit+0x34>)
    5616:	685b      	ldr	r3, [r3, #4]
    5618:	4798      	blx	r3
    561a:	2100      	movs	r1, #0
    561c:	4a07      	ldr	r2, [pc, #28]	; (563c <CC_PalPowerSaveModeInit+0x38>)
    561e:	68eb      	ldr	r3, [r5, #12]
    5620:	6011      	str	r1, [r2, #0]
    5622:	6920      	ldr	r0, [r4, #16]
    5624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5628:	4718      	bx	r3
    562a:	bf00      	nop
    562c:	20000124 	.word	0x20000124
    5630:	20000114 	.word	0x20000114
    5634:	200000f0 	.word	0x200000f0
    5638:	00008d28 	.word	0x00008d28
    563c:	20001b94 	.word	0x20001b94

00005640 <CC_PalPowerSaveModeSelect>:
    5640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5642:	4d1a      	ldr	r5, [pc, #104]	; (56ac <CC_PalPowerSaveModeSelect+0x6c>)
    5644:	4e1a      	ldr	r6, [pc, #104]	; (56b0 <CC_PalPowerSaveModeSelect+0x70>)
    5646:	4604      	mov	r4, r0
    5648:	68b2      	ldr	r2, [r6, #8]
    564a:	6928      	ldr	r0, [r5, #16]
    564c:	4790      	blx	r2
    564e:	b9e8      	cbnz	r0, 568c <CC_PalPowerSaveModeSelect+0x4c>
    5650:	4f18      	ldr	r7, [pc, #96]	; (56b4 <CC_PalPowerSaveModeSelect+0x74>)
    5652:	683b      	ldr	r3, [r7, #0]
    5654:	b14c      	cbz	r4, 566a <CC_PalPowerSaveModeSelect+0x2a>
    5656:	b1a3      	cbz	r3, 5682 <CC_PalPowerSaveModeSelect+0x42>
    5658:	2b01      	cmp	r3, #1
    565a:	d019      	beq.n	5690 <CC_PalPowerSaveModeSelect+0x50>
    565c:	3b01      	subs	r3, #1
    565e:	603b      	str	r3, [r7, #0]
    5660:	6928      	ldr	r0, [r5, #16]
    5662:	68f3      	ldr	r3, [r6, #12]
    5664:	4798      	blx	r3
    5666:	2000      	movs	r0, #0
    5668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    566a:	b943      	cbnz	r3, 567e <CC_PalPowerSaveModeSelect+0x3e>
    566c:	2101      	movs	r1, #1
    566e:	4a12      	ldr	r2, [pc, #72]	; (56b8 <CC_PalPowerSaveModeSelect+0x78>)
    5670:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    5674:	4911      	ldr	r1, [pc, #68]	; (56bc <CC_PalPowerSaveModeSelect+0x7c>)
    5676:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    567a:	2a00      	cmp	r2, #0
    567c:	d1fb      	bne.n	5676 <CC_PalPowerSaveModeSelect+0x36>
    567e:	3301      	adds	r3, #1
    5680:	603b      	str	r3, [r7, #0]
    5682:	68f3      	ldr	r3, [r6, #12]
    5684:	6928      	ldr	r0, [r5, #16]
    5686:	4798      	blx	r3
    5688:	2000      	movs	r0, #0
    568a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    568c:	480c      	ldr	r0, [pc, #48]	; (56c0 <CC_PalPowerSaveModeSelect+0x80>)
    568e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5690:	4a0a      	ldr	r2, [pc, #40]	; (56bc <CC_PalPowerSaveModeSelect+0x7c>)
    5692:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    5696:	2b00      	cmp	r3, #0
    5698:	d1fb      	bne.n	5692 <CC_PalPowerSaveModeSelect+0x52>
    569a:	4a07      	ldr	r2, [pc, #28]	; (56b8 <CC_PalPowerSaveModeSelect+0x78>)
    569c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    56a0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    56a4:	f7ff ff48 	bl	5538 <CC_HalMaskInterrupt>
    56a8:	683b      	ldr	r3, [r7, #0]
    56aa:	e7d7      	b.n	565c <CC_PalPowerSaveModeSelect+0x1c>
    56ac:	20000124 	.word	0x20000124
    56b0:	20000114 	.word	0x20000114
    56b4:	20001b94 	.word	0x20001b94
    56b8:	50840000 	.word	0x50840000
    56bc:	50841000 	.word	0x50841000
    56c0:	ffff8fe9 	.word	0xffff8fe9

000056c4 <mutex_free>:
    56c4:	b510      	push	{r4, lr}
    56c6:	4604      	mov	r4, r0
    56c8:	b150      	cbz	r0, 56e0 <mutex_free+0x1c>
    56ca:	6863      	ldr	r3, [r4, #4]
    56cc:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    56d0:	d005      	beq.n	56de <mutex_free+0x1a>
    56d2:	4a06      	ldr	r2, [pc, #24]	; (56ec <mutex_free+0x28>)
    56d4:	4293      	cmp	r3, r2
    56d6:	d002      	beq.n	56de <mutex_free+0x1a>
    56d8:	2300      	movs	r3, #0
    56da:	6062      	str	r2, [r4, #4]
    56dc:	6023      	str	r3, [r4, #0]
    56de:	bd10      	pop	{r4, pc}
    56e0:	4b03      	ldr	r3, [pc, #12]	; (56f0 <mutex_free+0x2c>)
    56e2:	4804      	ldr	r0, [pc, #16]	; (56f4 <mutex_free+0x30>)
    56e4:	685b      	ldr	r3, [r3, #4]
    56e6:	4798      	blx	r3
    56e8:	e7ef      	b.n	56ca <mutex_free+0x6>
    56ea:	bf00      	nop
    56ec:	a95c5f2c 	.word	0xa95c5f2c
    56f0:	200000f0 	.word	0x200000f0
    56f4:	00008d48 	.word	0x00008d48

000056f8 <mutex_lock>:
    56f8:	b1c8      	cbz	r0, 572e <mutex_lock+0x36>
    56fa:	6843      	ldr	r3, [r0, #4]
    56fc:	4a0d      	ldr	r2, [pc, #52]	; (5734 <mutex_lock+0x3c>)
    56fe:	4293      	cmp	r3, r2
    5700:	d013      	beq.n	572a <mutex_lock+0x32>
    5702:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5706:	d00e      	beq.n	5726 <mutex_lock+0x2e>
    5708:	2301      	movs	r3, #1
    570a:	e850 2f00 	ldrex	r2, [r0]
    570e:	4619      	mov	r1, r3
    5710:	e840 1c00 	strex	ip, r1, [r0]
    5714:	f09c 0f00 	teq	ip, #0
    5718:	d1f7      	bne.n	570a <mutex_lock+0x12>
    571a:	2a01      	cmp	r2, #1
    571c:	d0f5      	beq.n	570a <mutex_lock+0x12>
    571e:	f3bf 8f5f 	dmb	sy
    5722:	2000      	movs	r0, #0
    5724:	4770      	bx	lr
    5726:	4804      	ldr	r0, [pc, #16]	; (5738 <mutex_lock+0x40>)
    5728:	4770      	bx	lr
    572a:	4804      	ldr	r0, [pc, #16]	; (573c <mutex_lock+0x44>)
    572c:	4770      	bx	lr
    572e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5732:	4770      	bx	lr
    5734:	a95c5f2c 	.word	0xa95c5f2c
    5738:	ffff8fe9 	.word	0xffff8fe9
    573c:	ffff8fea 	.word	0xffff8fea

00005740 <mutex_unlock>:
    5740:	4603      	mov	r3, r0
    5742:	b180      	cbz	r0, 5766 <mutex_unlock+0x26>
    5744:	6842      	ldr	r2, [r0, #4]
    5746:	4909      	ldr	r1, [pc, #36]	; (576c <mutex_unlock+0x2c>)
    5748:	428a      	cmp	r2, r1
    574a:	d00a      	beq.n	5762 <mutex_unlock+0x22>
    574c:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    5750:	d005      	beq.n	575e <mutex_unlock+0x1e>
    5752:	f3bf 8f5f 	dmb	sy
    5756:	2200      	movs	r2, #0
    5758:	4610      	mov	r0, r2
    575a:	601a      	str	r2, [r3, #0]
    575c:	4770      	bx	lr
    575e:	4804      	ldr	r0, [pc, #16]	; (5770 <mutex_unlock+0x30>)
    5760:	4770      	bx	lr
    5762:	4804      	ldr	r0, [pc, #16]	; (5774 <mutex_unlock+0x34>)
    5764:	4770      	bx	lr
    5766:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    576a:	4770      	bx	lr
    576c:	a95c5f2c 	.word	0xa95c5f2c
    5770:	ffff8fe9 	.word	0xffff8fe9
    5774:	ffff8fea 	.word	0xffff8fea

00005778 <mutex_init>:
    5778:	b510      	push	{r4, lr}
    577a:	4604      	mov	r4, r0
    577c:	b120      	cbz	r0, 5788 <mutex_init+0x10>
    577e:	2300      	movs	r3, #0
    5780:	4a03      	ldr	r2, [pc, #12]	; (5790 <mutex_init+0x18>)
    5782:	6023      	str	r3, [r4, #0]
    5784:	6062      	str	r2, [r4, #4]
    5786:	bd10      	pop	{r4, pc}
    5788:	4802      	ldr	r0, [pc, #8]	; (5794 <mutex_init+0x1c>)
    578a:	f7ff fe73 	bl	5474 <CC_PalAbort>
    578e:	e7f6      	b.n	577e <mutex_init+0x6>
    5790:	3a00003a 	.word	0x3a00003a
    5794:	00008d70 	.word	0x00008d70

00005798 <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    5798:	b129      	cbz	r1, 57a6 <flash_area_id_from_multi_image_slot+0xe>
    return -EINVAL; /* flash_area_open will fail on that */
    579a:	2901      	cmp	r1, #1
    579c:	bf0c      	ite	eq
    579e:	2008      	moveq	r0, #8
    57a0:	f06f 0015 	mvnne.w	r0, #21
    57a4:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    57a6:	2002      	movs	r0, #2
}
    57a8:	4770      	bx	lr

000057aa <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    57aa:	2000      	movs	r0, #0
    57ac:	4770      	bx	lr

000057ae <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    57ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    57b2:	460e      	mov	r6, r1
    57b4:	4617      	mov	r7, r2
    57b6:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    57b8:	4604      	mov	r4, r0
    57ba:	b928      	cbnz	r0, 57c8 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    57bc:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    57c0:	4640      	mov	r0, r8
    57c2:	b003      	add	sp, #12
    57c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    57c8:	2900      	cmp	r1, #0
    57ca:	d0f7      	beq.n	57bc <bootutil_tlv_iter_begin+0xe>
    57cc:	2a00      	cmp	r2, #0
    57ce:	d0f5      	beq.n	57bc <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    57d0:	68cb      	ldr	r3, [r1, #12]
    57d2:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    57d4:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    57d6:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    57d8:	2304      	movs	r3, #4
    57da:	4629      	mov	r1, r5
    57dc:	eb0d 0203 	add.w	r2, sp, r3
    57e0:	f000 fb57 	bl	5e92 <flash_area_read>
    57e4:	4680      	mov	r8, r0
    57e6:	2800      	cmp	r0, #0
    57e8:	d1e8      	bne.n	57bc <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    57ea:	f646 1208 	movw	r2, #26888	; 0x6908
    57ee:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    57f2:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    57f4:	4291      	cmp	r1, r2
    57f6:	d125      	bne.n	5844 <bootutil_tlv_iter_begin+0x96>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    57f8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    57fc:	4299      	cmp	r1, r3
    57fe:	d1dd      	bne.n	57bc <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    5800:	2304      	movs	r3, #4
    5802:	4638      	mov	r0, r7
    5804:	eb0d 0203 	add.w	r2, sp, r3
    5808:	4429      	add	r1, r5
    580a:	f000 fb42 	bl	5e92 <flash_area_read>
    580e:	2800      	cmp	r0, #0
    5810:	d1d4      	bne.n	57bc <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5812:	f646 1307 	movw	r3, #26887	; 0x6907
    5816:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    581a:	429a      	cmp	r2, r3
    581c:	d1ce      	bne.n	57bc <bootutil_tlv_iter_begin+0xe>
    it->fap = fap;
    581e:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot = prot;
    5822:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->type = type;
    5826:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot = prot;
    582a:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    582c:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    582e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    5832:	442b      	add	r3, r5
    5834:	60e3      	str	r3, [r4, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5836:	8973      	ldrh	r3, [r6, #10]
    5838:	4413      	add	r3, r2
    583a:	442b      	add	r3, r5
    it->tlv_off = off_ + sizeof(info);
    583c:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    583e:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    5840:	6125      	str	r5, [r4, #16]
    return 0;
    5842:	e7bd      	b.n	57c0 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    5844:	2b00      	cmp	r3, #0
    5846:	d0e4      	beq.n	5812 <bootutil_tlv_iter_begin+0x64>
    5848:	e7b8      	b.n	57bc <bootutil_tlv_iter_begin+0xe>

0000584a <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    584a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    584e:	460e      	mov	r6, r1
    5850:	4617      	mov	r7, r2
    5852:	461d      	mov	r5, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5854:	4604      	mov	r4, r0
    5856:	b920      	cbnz	r0, 5862 <bootutil_tlv_iter_next+0x18>
        return -1;
    5858:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    585c:	b002      	add	sp, #8
    585e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5862:	6803      	ldr	r3, [r0, #0]
    5864:	2b00      	cmp	r3, #0
    5866:	d0f7      	beq.n	5858 <bootutil_tlv_iter_next+0xe>
    5868:	6843      	ldr	r3, [r0, #4]
    586a:	2b00      	cmp	r3, #0
    586c:	d0f4      	beq.n	5858 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    586e:	f64f 78ff 	movw	r8, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    5872:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    5876:	429a      	cmp	r2, r3
    5878:	d216      	bcs.n	58a8 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    587a:	6823      	ldr	r3, [r4, #0]
    587c:	895b      	ldrh	r3, [r3, #10]
    587e:	b123      	cbz	r3, 588a <bootutil_tlv_iter_next+0x40>
    5880:	68e3      	ldr	r3, [r4, #12]
    5882:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    5884:	bf04      	itt	eq
    5886:	3304      	addeq	r3, #4
    5888:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    588a:	2304      	movs	r3, #4
    588c:	6921      	ldr	r1, [r4, #16]
    588e:	6860      	ldr	r0, [r4, #4]
    5890:	eb0d 0203 	add.w	r2, sp, r3
    5894:	f000 fafd 	bl	5e92 <flash_area_read>
        if (rc) {
    5898:	2800      	cmp	r0, #0
    589a:	d1dd      	bne.n	5858 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    589c:	7aa3      	ldrb	r3, [r4, #10]
    589e:	b12b      	cbz	r3, 58ac <bootutil_tlv_iter_next+0x62>
    58a0:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    58a4:	429a      	cmp	r2, r3
    58a6:	d301      	bcc.n	58ac <bootutil_tlv_iter_next+0x62>
            return 1;
    58a8:	2001      	movs	r0, #1
    58aa:	e7d7      	b.n	585c <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    58ac:	8923      	ldrh	r3, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    58ae:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    58b2:	4543      	cmp	r3, r8
    58b4:	f101 0204 	add.w	r2, r1, #4
    58b8:	d003      	beq.n	58c2 <bootutil_tlv_iter_next+0x78>
    58ba:	f8bd c004 	ldrh.w	ip, [sp, #4]
    58be:	459c      	cmp	ip, r3
    58c0:	d10b      	bne.n	58da <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    58c2:	b115      	cbz	r5, 58ca <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    58c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    58c8:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    58ca:	6923      	ldr	r3, [r4, #16]
    58cc:	3304      	adds	r3, #4
    58ce:	6033      	str	r3, [r6, #0]
            *len = tlv.it_len;
    58d0:	8039      	strh	r1, [r7, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    58d2:	6923      	ldr	r3, [r4, #16]
    58d4:	4413      	add	r3, r2
    58d6:	6123      	str	r3, [r4, #16]
            return 0;
    58d8:	e7c0      	b.n	585c <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    58da:	6923      	ldr	r3, [r4, #16]
    58dc:	4413      	add	r3, r2
    58de:	6123      	str	r3, [r4, #16]
    58e0:	e7c7      	b.n	5872 <bootutil_tlv_iter_next+0x28>

000058e2 <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    58e2:	f000 be10 	b.w	6506 <memcmp>

000058e6 <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    58e6:	f44f 7340 	mov.w	r3, #768	; 0x300
    58ea:	4358      	muls	r0, r3
}
    58ec:	3030      	adds	r0, #48	; 0x30
    58ee:	4770      	bx	lr

000058f0 <boot_status_entries>:
	return fa->fa_id;
    58f0:	780b      	ldrb	r3, [r1, #0]
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    58f2:	2b02      	cmp	r3, #2
    58f4:	d006      	beq.n	5904 <boot_status_entries+0x14>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    58f6:	2b08      	cmp	r3, #8
    58f8:	bf14      	ite	ne
    58fa:	f04f 30ff 	movne.w	r0, #4294967295
    58fe:	f44f 7040 	moveq.w	r0, #768	; 0x300
    5902:	4770      	bx	lr
    5904:	f44f 7040 	mov.w	r0, #768	; 0x300
}
    5908:	4770      	bx	lr

0000590a <boot_status_off>:
{
    590a:	b510      	push	{r4, lr}
    590c:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    590e:	f000 fafe 	bl	5f0e <flash_area_align>
}
    5912:	f44f 7240 	mov.w	r2, #768	; 0x300
    return flash_area_get_size(fap) - off_from_end;
    5916:	68a3      	ldr	r3, [r4, #8]
    5918:	3b30      	subs	r3, #48	; 0x30
}
    591a:	fb02 3010 	mls	r0, r2, r0, r3
    591e:	bd10      	pop	{r4, pc}

00005920 <boot_write_copy_done>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    5920:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    5922:	2201      	movs	r2, #1
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    5924:	3918      	subs	r1, #24
    5926:	f021 0107 	bic.w	r1, r1, #7
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    592a:	3908      	subs	r1, #8
    592c:	f001 b9af 	b.w	6c8e <boot_write_trailer_flag>

00005930 <boot_write_swap_size>:
{
    5930:	b513      	push	{r0, r1, r4, lr}
    5932:	4604      	mov	r4, r0
    5934:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    5936:	f001 f93b 	bl	6bb0 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    593a:	2304      	movs	r3, #4
    593c:	f1a0 0108 	sub.w	r1, r0, #8
    5940:	eb0d 0203 	add.w	r2, sp, r3
    5944:	4620      	mov	r0, r4
    5946:	f001 f976 	bl	6c36 <boot_write_trailer>
}
    594a:	b002      	add	sp, #8
    594c:	bd10      	pop	{r4, pc}

0000594e <boot_read_image_headers>:
{
    594e:	b570      	push	{r4, r5, r6, lr}
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5950:	4613      	mov	r3, r2
{
    5952:	460e      	mov	r6, r1
    5954:	4615      	mov	r5, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5956:	2100      	movs	r1, #0
    5958:	4602      	mov	r2, r0
{
    595a:	4604      	mov	r4, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    595c:	f7fb fa86 	bl	e6c <boot_read_image_header>
        if (rc != 0) {
    5960:	b950      	cbnz	r0, 5978 <boot_read_image_headers+0x2a>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5962:	462b      	mov	r3, r5
    5964:	2101      	movs	r1, #1
    5966:	4620      	mov	r0, r4
    5968:	f104 022c 	add.w	r2, r4, #44	; 0x2c
    596c:	f7fb fa7e 	bl	e6c <boot_read_image_header>
        if (rc != 0) {
    5970:	b110      	cbz	r0, 5978 <boot_read_image_headers+0x2a>
                return 0;
    5972:	2e00      	cmp	r6, #0
    5974:	bf08      	it	eq
    5976:	2000      	moveq	r0, #0
}
    5978:	bd70      	pop	{r4, r5, r6, pc}

0000597a <boot_read_image_size.constprop.0.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    597a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    597c:	4604      	mov	r4, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    597e:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    5980:	460d      	mov	r5, r1
    5982:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5984:	f7ff ff08 	bl	5798 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    5988:	4669      	mov	r1, sp
    598a:	b2c0      	uxtb	r0, r0
    598c:	f7fc fa18 	bl	1dc0 <flash_area_open>
    if (rc != 0) {
    5990:	bb30      	cbnz	r0, 59e0 <boot_read_image_size.constprop.0.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5992:	232c      	movs	r3, #44	; 0x2c
    5994:	fb03 4405 	mla	r4, r3, r5, r4
    5998:	68e3      	ldr	r3, [r4, #12]
    599a:	8925      	ldrh	r5, [r4, #8]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    599c:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    599e:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    59a0:	2304      	movs	r3, #4
    59a2:	4629      	mov	r1, r5
    59a4:	eb0d 0203 	add.w	r2, sp, r3
    59a8:	f000 fa73 	bl	5e92 <flash_area_read>
    59ac:	b9c0      	cbnz	r0, 59e0 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    59ae:	f646 1308 	movw	r3, #26888	; 0x6908
    59b2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    59b6:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    59b8:	429a      	cmp	r2, r3
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    59ba:	9800      	ldr	r0, [sp, #0]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    59bc:	d115      	bne.n	59ea <boot_read_image_size.constprop.0.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    59be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    59c2:	429c      	cmp	r4, r3
    59c4:	d10c      	bne.n	59e0 <boot_read_image_size.constprop.0.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    59c6:	2304      	movs	r3, #4
    59c8:	1961      	adds	r1, r4, r5
    59ca:	eb0d 0203 	add.w	r2, sp, r3
    59ce:	f000 fa60 	bl	5e92 <flash_area_read>
    59d2:	b928      	cbnz	r0, 59e0 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    59d4:	f646 1307 	movw	r3, #26887	; 0x6907
    59d8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    59dc:	429a      	cmp	r2, r3
    59de:	d007      	beq.n	59f0 <boot_read_image_size.constprop.0.isra.0+0x76>
    flash_area_close(fap);
    59e0:	9800      	ldr	r0, [sp, #0]
    59e2:	f000 fa55 	bl	5e90 <flash_area_close>
}
    59e6:	b002      	add	sp, #8
    59e8:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    59ea:	2c00      	cmp	r4, #0
    59ec:	d0f2      	beq.n	59d4 <boot_read_image_size.constprop.0.isra.0+0x5a>
    59ee:	e7f7      	b.n	59e0 <boot_read_image_size.constprop.0.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    59f0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    59f4:	4421      	add	r1, r4
    59f6:	4429      	add	r1, r5
    59f8:	6031      	str	r1, [r6, #0]
    rc = 0;
    59fa:	e7f1      	b.n	59e0 <boot_read_image_size.constprop.0.isra.0+0x66>

000059fc <boot_read_sectors>:
{
    59fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    59fe:	f44f 7580 	mov.w	r5, #256	; 0x100
{
    5a02:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5a04:	6a42      	ldr	r2, [r0, #36]	; 0x24
    5a06:	a901      	add	r1, sp, #4
    5a08:	2002      	movs	r0, #2
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5a0a:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5a0c:	f7fc fa00 	bl	1e10 <flash_area_get_sectors>
    if (rc != 0) {
    5a10:	b958      	cbnz	r0, 5a2a <boot_read_sectors+0x2e>
    *out_num_sectors = num_sectors;
    5a12:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5a14:	2008      	movs	r0, #8
    5a16:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    5a18:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5a1a:	a901      	add	r1, sp, #4
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5a1c:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5a1e:	f7fc f9f7 	bl	1e10 <flash_area_get_sectors>
    if (rc != 0) {
    5a22:	4605      	mov	r5, r0
    5a24:	b128      	cbz	r0, 5a32 <boot_read_sectors+0x36>
        return BOOT_EFLASH_SEC;
    5a26:	2509      	movs	r5, #9
    5a28:	e000      	b.n	5a2c <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    5a2a:	2501      	movs	r5, #1
}
    5a2c:	4628      	mov	r0, r5
    5a2e:	b003      	add	sp, #12
    5a30:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    5a32:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5a34:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    5a36:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5a38:	f000 fa69 	bl	5f0e <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    5a3c:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    5a3e:	e7f5      	b.n	5a2c <boot_read_sectors+0x30>

00005a40 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    5a40:	2301      	movs	r3, #1
    5a42:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    5a44:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    5a48:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    5a4a:	2300      	movs	r3, #0
    bs->source = 0;
    5a4c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    5a50:	4770      	bx	lr

00005a52 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    5a52:	7943      	ldrb	r3, [r0, #5]
    5a54:	2b01      	cmp	r3, #1
    5a56:	d107      	bne.n	5a68 <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    5a58:	6803      	ldr	r3, [r0, #0]
    5a5a:	2b01      	cmp	r3, #1
    5a5c:	d104      	bne.n	5a68 <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    5a5e:	7900      	ldrb	r0, [r0, #4]
    5a60:	1e43      	subs	r3, r0, #1
    5a62:	4258      	negs	r0, r3
    5a64:	4158      	adcs	r0, r3
    5a66:	4770      	bx	lr
    5a68:	2000      	movs	r0, #0
}
    5a6a:	4770      	bx	lr

00005a6c <boot_write_status>:
{
    5a6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5a6e:	4606      	mov	r6, r0
    5a70:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    5a72:	2002      	movs	r0, #2
    5a74:	a901      	add	r1, sp, #4
    5a76:	f7fc f9a3 	bl	1dc0 <flash_area_open>
    if (rc != 0) {
    5a7a:	bb38      	cbnz	r0, 5acc <boot_write_status+0x60>
    off = boot_status_off(fap) +
    5a7c:	9801      	ldr	r0, [sp, #4]
    5a7e:	f7ff ff44 	bl	590a <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5a82:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    5a84:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5a86:	4628      	mov	r0, r5
    5a88:	f000 f8e5 	bl	5c56 <boot_status_internal_off>
    off = boot_status_off(fap) +
    5a8c:	4404      	add	r4, r0
    align = flash_area_align(fap);
    5a8e:	9801      	ldr	r0, [sp, #4]
    5a90:	f000 fa3d 	bl	5f0e <flash_area_align>
    5a94:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    5a96:	9801      	ldr	r0, [sp, #4]
    5a98:	f000 fa40 	bl	5f1c <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5a9c:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    5a9e:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5aa0:	eb0d 0002 	add.w	r0, sp, r2
    5aa4:	f000 fd61 	bl	656a <memset>
    buf[0] = bs->state;
    5aa8:	792b      	ldrb	r3, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    5aaa:	4621      	mov	r1, r4
    buf[0] = bs->state;
    5aac:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    5ab0:	9801      	ldr	r0, [sp, #4]
    5ab2:	4633      	mov	r3, r6
    5ab4:	aa02      	add	r2, sp, #8
    5ab6:	f000 fa01 	bl	5ebc <flash_area_write>
    if (rc != 0) {
    5aba:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    5abc:	9801      	ldr	r0, [sp, #4]
    if (rc != 0) {
    5abe:	bf18      	it	ne
    5ac0:	2401      	movne	r4, #1
    flash_area_close(fap);
    5ac2:	f000 f9e5 	bl	5e90 <flash_area_close>
}
    5ac6:	4620      	mov	r0, r4
    5ac8:	b004      	add	sp, #16
    5aca:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    5acc:	2401      	movs	r4, #1
    5ace:	e7fa      	b.n	5ac6 <boot_write_status+0x5a>

00005ad0 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    5ad0:	f000 ba09 	b.w	5ee6 <flash_area_erase>

00005ad4 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    5ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ad8:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5ada:	2100      	movs	r1, #0
{
    5adc:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5ade:	4608      	mov	r0, r1
    5ae0:	f7ff fe5a 	bl	5798 <flash_area_id_from_multi_image_slot>
    5ae4:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    5ae6:	2101      	movs	r1, #1
    5ae8:	2000      	movs	r0, #0
    5aea:	f7ff fe55 	bl	5798 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    5aee:	7833      	ldrb	r3, [r6, #0]
    5af0:	429c      	cmp	r4, r3
    5af2:	d021      	beq.n	5b38 <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    5af4:	4298      	cmp	r0, r3
    5af6:	d121      	bne.n	5b3c <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    5af8:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    5afa:	232c      	movs	r3, #44	; 0x2c
    5afc:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5b00:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    5b02:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5b04:	f7ff feef 	bl	58e6 <boot_trailer_sz>
    total_sz = 0;
    5b08:	f04f 0800 	mov.w	r8, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5b0c:	4607      	mov	r7, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    5b0e:	3c01      	subs	r4, #1
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    5b10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    5b12:	4630      	mov	r0, r6
    5b14:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    5b18:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
	return fs->fs_size;
    5b1c:	f8d2 9004 	ldr.w	r9, [r2, #4]
    5b20:	681b      	ldr	r3, [r3, #0]
    5b22:	464a      	mov	r2, r9
    5b24:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    5b26:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    5b28:	f7ff ffd2 	bl	5ad0 <boot_erase_region>
    } while (total_sz < trailer_sz);
    5b2c:	45b8      	cmp	r8, r7
        sector--;
    5b2e:	f104 34ff 	add.w	r4, r4, #4294967295
    } while (total_sz < trailer_sz);
    5b32:	d3ed      	bcc.n	5b10 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    5b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    5b38:	2500      	movs	r5, #0
    5b3a:	e7de      	b.n	5afa <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    5b3c:	2001      	movs	r0, #1
    5b3e:	e7f9      	b.n	5b34 <swap_erase_trailer_sectors+0x60>

00005b40 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    5b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5b42:	4615      	mov	r5, r2
    5b44:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    5b46:	2008      	movs	r0, #8
    5b48:	4669      	mov	r1, sp
    5b4a:	f001 f8b7 	bl	6cbc <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    5b4e:	79e9      	ldrb	r1, [r5, #7]
    5b50:	2901      	cmp	r1, #1
    5b52:	d003      	beq.n	5b5c <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    5b54:	2200      	movs	r2, #0
    5b56:	4620      	mov	r0, r4
    5b58:	f001 f8c4 	bl	6ce4 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    5b5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b60:	2b01      	cmp	r3, #1
    5b62:	d102      	bne.n	5b6a <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    5b64:	4620      	mov	r0, r4
    5b66:	f001 f89c 	bl	6ca2 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    5b6a:	68a9      	ldr	r1, [r5, #8]
    5b6c:	4620      	mov	r0, r4
    5b6e:	f7ff fedf 	bl	5930 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    5b72:	4620      	mov	r0, r4
    5b74:	f7fe f9ac 	bl	3ed0 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    5b78:	2000      	movs	r0, #0
    5b7a:	b003      	add	sp, #12
    5b7c:	bd30      	pop	{r4, r5, pc}

00005b7e <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    5b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5b80:	460d      	mov	r5, r1
    5b82:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    5b84:	f7fb fa5c 	bl	1040 <swap_status_source>
    5b88:	4604      	mov	r4, r0
    5b8a:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    5b8c:	b350      	cbz	r0, 5be4 <swap_read_status+0x66>
    5b8e:	2802      	cmp	r0, #2
    5b90:	d12d      	bne.n	5bee <swap_read_status+0x70>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    5b92:	a901      	add	r1, sp, #4
    5b94:	f7fc f914 	bl	1dc0 <flash_area_open>
    if (rc != 0) {
    5b98:	bb58      	cbnz	r0, 5bf2 <swap_read_status+0x74>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    5b9a:	462a      	mov	r2, r5
    5b9c:	4631      	mov	r1, r6
    5b9e:	9801      	ldr	r0, [sp, #4]
    5ba0:	f7fb f9b2 	bl	f08 <swap_read_status_bytes>
    if (rc == 0) {
    5ba4:	4604      	mov	r4, r0
    5ba6:	b9d0      	cbnz	r0, 5bde <swap_read_status+0x60>
        off = boot_swap_info_off(fap);
    5ba8:	9801      	ldr	r0, [sp, #4]
    5baa:	f001 f801 	bl	6bb0 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5bae:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    5bb0:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5bb2:	f10d 0203 	add.w	r2, sp, #3
    5bb6:	9801      	ldr	r0, [sp, #4]
    5bb8:	f000 f96b 	bl	5e92 <flash_area_read>
        if (rc != 0) {
    5bbc:	4604      	mov	r4, r0
    5bbe:	b9a0      	cbnz	r0, 5bea <swap_read_status+0x6c>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    5bc0:	2201      	movs	r2, #1
    5bc2:	9801      	ldr	r0, [sp, #4]
    5bc4:	f10d 0103 	add.w	r1, sp, #3
    5bc8:	f001 f806 	bl	6bd8 <bootutil_buffer_is_erased>
    5bcc:	b110      	cbz	r0, 5bd4 <swap_read_status+0x56>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    5bce:	2301      	movs	r3, #1
    5bd0:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    5bd4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5bd8:	f003 030f 	and.w	r3, r3, #15
    5bdc:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    5bde:	9801      	ldr	r0, [sp, #4]
    5be0:	f000 f956 	bl	5e90 <flash_area_close>

    return rc;
}
    5be4:	4620      	mov	r0, r4
    5be6:	b002      	add	sp, #8
    5be8:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    5bea:	2401      	movs	r4, #1
    5bec:	e7f7      	b.n	5bde <swap_read_status+0x60>
    switch (bs->source) {
    5bee:	2407      	movs	r4, #7
    5bf0:	e7f8      	b.n	5be4 <swap_read_status+0x66>
        return BOOT_EFLASH;
    5bf2:	2401      	movs	r4, #1
    5bf4:	e7f6      	b.n	5be4 <swap_read_status+0x66>

00005bf6 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    5bf6:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5bf8:	2002      	movs	r0, #2
    5bfa:	a901      	add	r1, sp, #4
    5bfc:	f7fc f8e0 	bl	1dc0 <flash_area_open>
            &fap);
    if (rc != 0) {
    5c00:	b948      	cbnz	r0, 5c16 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    5c02:	9801      	ldr	r0, [sp, #4]
    5c04:	f7ff fe8c 	bl	5920 <boot_write_copy_done>
    5c08:	4604      	mov	r4, r0
    flash_area_close(fap);
    5c0a:	9801      	ldr	r0, [sp, #4]
    5c0c:	f000 f940 	bl	5e90 <flash_area_close>
    return rc;
}
    5c10:	4620      	mov	r0, r4
    5c12:	b002      	add	sp, #8
    5c14:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    5c16:	2401      	movs	r4, #1
    5c18:	e7fa      	b.n	5c10 <swap_set_copy_done+0x1a>

00005c1a <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    5c1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5c1c:	2002      	movs	r0, #2
    5c1e:	a901      	add	r1, sp, #4
    5c20:	f7fc f8ce 	bl	1dc0 <flash_area_open>
            &fap);
    if (rc != 0) {
    5c24:	b9a8      	cbnz	r0, 5c52 <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    5c26:	9801      	ldr	r0, [sp, #4]
    5c28:	a902      	add	r1, sp, #8
    5c2a:	f7fe f971 	bl	3f10 <boot_read_swap_state>
    if (rc != 0) {
    5c2e:	4604      	mov	r4, r0
    5c30:	b968      	cbnz	r0, 5c4e <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    5c32:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5c36:	2b03      	cmp	r3, #3
    5c38:	d103      	bne.n	5c42 <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    5c3a:	9801      	ldr	r0, [sp, #4]
    5c3c:	f001 f831 	bl	6ca2 <boot_write_image_ok>
    5c40:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    5c42:	9801      	ldr	r0, [sp, #4]
    5c44:	f000 f924 	bl	5e90 <flash_area_close>
    return rc;
}
    5c48:	4620      	mov	r0, r4
    5c4a:	b004      	add	sp, #16
    5c4c:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    5c4e:	2401      	movs	r4, #1
    5c50:	e7f7      	b.n	5c42 <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    5c52:	2401      	movs	r4, #1
    5c54:	e7f8      	b.n	5c48 <swap_set_image_ok+0x2e>

00005c56 <boot_status_internal_off>:
{
    5c56:	b510      	push	{r4, lr}
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    5c58:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5c5a:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    5c5c:	2b01      	cmp	r3, #1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5c5e:	bf06      	itte	eq
    5c60:	2300      	moveq	r3, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5c62:	460c      	moveq	r4, r1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5c64:	020b      	lslne	r3, r1, #8
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5c66:	f102 32ff 	add.w	r2, r2, #4294967295
    off = ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5c6a:	fb01 3302 	mla	r3, r1, r2, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5c6e:	6802      	ldr	r2, [r0, #0]
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5c70:	bf18      	it	ne
    5c72:	004c      	lslne	r4, r1, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5c74:	3a01      	subs	r2, #1
}
    5c76:	fb04 3002 	mla	r0, r4, r2, r3
    5c7a:	bd10      	pop	{r4, pc}

00005c7c <arch_printk_char_out>:
}
    5c7c:	2000      	movs	r0, #0
    5c7e:	4770      	bx	lr

00005c80 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    5c80:	b40f      	push	{r0, r1, r2, r3}
    5c82:	b507      	push	{r0, r1, r2, lr}
    5c84:	a904      	add	r1, sp, #16
    5c86:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5c8a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    5c8c:	f7fb fd24 	bl	16d8 <vprintk>

	va_end(ap);
}
    5c90:	b003      	add	sp, #12
    5c92:	f85d eb04 	ldr.w	lr, [sp], #4
    5c96:	b004      	add	sp, #16
    5c98:	4770      	bx	lr

00005c9a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5c9a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5c9c:	f013 0307 	ands.w	r3, r3, #7
    5ca0:	d105      	bne.n	5cae <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5ca2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    5ca4:	2b00      	cmp	r3, #0
    5ca6:	bf0c      	ite	eq
    5ca8:	2000      	moveq	r0, #0
    5caa:	2003      	movne	r0, #3
    5cac:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5cae:	2b02      	cmp	r3, #2
    5cb0:	d105      	bne.n	5cbe <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5cb2:	8b40      	ldrh	r0, [r0, #26]
    5cb4:	fab0 f080 	clz	r0, r0
    5cb8:	0940      	lsrs	r0, r0, #5
    5cba:	0080      	lsls	r0, r0, #2
    5cbc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5cbe:	2b01      	cmp	r3, #1
    5cc0:	d105      	bne.n	5cce <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5cc2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    5cc4:	2b00      	cmp	r3, #0
    5cc6:	bf0c      	ite	eq
    5cc8:	2000      	moveq	r0, #0
    5cca:	2005      	movne	r0, #5
    5ccc:	4770      	bx	lr
	int evt = EVT_NOP;
    5cce:	2000      	movs	r0, #0
}
    5cd0:	4770      	bx	lr

00005cd2 <validate_args>:
{
    5cd2:	b510      	push	{r4, lr}
    5cd4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5cd6:	b100      	cbz	r0, 5cda <validate_args+0x8>
    5cd8:	b911      	cbnz	r1, 5ce0 <validate_args+0xe>
		return -EINVAL;
    5cda:	f06f 0015 	mvn.w	r0, #21
}
    5cde:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    5ce0:	1d08      	adds	r0, r1, #4
    5ce2:	f000 f895 	bl	5e10 <sys_notify_validate>
	if ((rv == 0)
    5ce6:	2800      	cmp	r0, #0
    5ce8:	d1f9      	bne.n	5cde <validate_args+0xc>
	    && ((cli->notify.flags
    5cea:	68a3      	ldr	r3, [r4, #8]
    5cec:	2b03      	cmp	r3, #3
    5cee:	d9f6      	bls.n	5cde <validate_args+0xc>
    5cf0:	e7f3      	b.n	5cda <validate_args+0x8>

00005cf2 <notify_one>:
{
    5cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cf6:	460d      	mov	r5, r1
    5cf8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5cfa:	4619      	mov	r1, r3
    5cfc:	1d28      	adds	r0, r5, #4
{
    5cfe:	4690      	mov	r8, r2
    5d00:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5d02:	f000 f896 	bl	5e32 <sys_notify_finalize>
	if (cb) {
    5d06:	4604      	mov	r4, r0
    5d08:	b138      	cbz	r0, 5d1a <notify_one+0x28>
		cb(mgr, cli, state, res);
    5d0a:	4633      	mov	r3, r6
    5d0c:	4642      	mov	r2, r8
    5d0e:	4629      	mov	r1, r5
    5d10:	4638      	mov	r0, r7
    5d12:	46a4      	mov	ip, r4
}
    5d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5d18:	4760      	bx	ip
}
    5d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005d1e <transition_complete>:
{
    5d1e:	b410      	push	{r4}
    5d20:	f04f 0420 	mov.w	r4, #32
    5d24:	f3ef 8211 	mrs	r2, BASEPRI
    5d28:	f384 8812 	msr	BASEPRI_MAX, r4
    5d2c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5d30:	6141      	str	r1, [r0, #20]
}
    5d32:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5d34:	2101      	movs	r1, #1
    5d36:	f7fb bcdd 	b.w	16f4 <process_event>

00005d3a <onoff_manager_init>:
{
    5d3a:	b538      	push	{r3, r4, r5, lr}
    5d3c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5d3e:	4605      	mov	r5, r0
    5d40:	b158      	cbz	r0, 5d5a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5d42:	b151      	cbz	r1, 5d5a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5d44:	680b      	ldr	r3, [r1, #0]
    5d46:	b143      	cbz	r3, 5d5a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5d48:	684b      	ldr	r3, [r1, #4]
    5d4a:	b133      	cbz	r3, 5d5a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5d4c:	221c      	movs	r2, #28
    5d4e:	2100      	movs	r1, #0
    5d50:	f000 fc0b 	bl	656a <memset>
	return 0;
    5d54:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5d56:	612c      	str	r4, [r5, #16]
}
    5d58:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5d5a:	f06f 0015 	mvn.w	r0, #21
    5d5e:	e7fb      	b.n	5d58 <onoff_manager_init+0x1e>

00005d60 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5d60:	b570      	push	{r4, r5, r6, lr}
    5d62:	4605      	mov	r5, r0
    5d64:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5d66:	f7ff ffb4 	bl	5cd2 <validate_args>

	if (rv < 0) {
    5d6a:	1e04      	subs	r4, r0, #0
    5d6c:	db15      	blt.n	5d9a <onoff_request+0x3a>
    5d6e:	f04f 0320 	mov.w	r3, #32
    5d72:	f3ef 8211 	mrs	r2, BASEPRI
    5d76:	f383 8812 	msr	BASEPRI_MAX, r3
    5d7a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5d7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5d82:	8b6b      	ldrh	r3, [r5, #26]
    5d84:	8b2c      	ldrh	r4, [r5, #24]
    5d86:	428b      	cmp	r3, r1
    5d88:	f004 0407 	and.w	r4, r4, #7
    5d8c:	d107      	bne.n	5d9e <onoff_request+0x3e>
	__asm__ volatile(
    5d8e:	f382 8811 	msr	BASEPRI, r2
    5d92:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    5d96:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    5d9a:	4620      	mov	r0, r4
    5d9c:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    5d9e:	2c02      	cmp	r4, #2
    5da0:	d10c      	bne.n	5dbc <onoff_request+0x5c>
		mgr->refs += 1U;
    5da2:	3301      	adds	r3, #1
    5da4:	836b      	strh	r3, [r5, #26]
    5da6:	f382 8811 	msr	BASEPRI, r2
    5daa:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    5dae:	2300      	movs	r3, #0
    5db0:	4622      	mov	r2, r4
    5db2:	4631      	mov	r1, r6
    5db4:	4628      	mov	r0, r5
    5db6:	f7ff ff9c 	bl	5cf2 <notify_one>
    5dba:	e7ee      	b.n	5d9a <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    5dbc:	2c06      	cmp	r4, #6
    5dbe:	d814      	bhi.n	5dea <onoff_request+0x8a>
    5dc0:	e8df f004 	tbb	[pc, r4]
    5dc4:	13131304 	.word	0x13131304
    5dc8:	1a04      	.short	0x1a04
    5dca:	04          	.byte	0x04
    5dcb:	00          	.byte	0x00
	parent->next = child;
    5dcc:	2300      	movs	r3, #0
    5dce:	6033      	str	r3, [r6, #0]
	return list->tail;
    5dd0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    5dd2:	b93b      	cbnz	r3, 5de4 <onoff_request+0x84>
	list->head = node;
    5dd4:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    5dd8:	b9ac      	cbnz	r4, 5e06 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    5dda:	2102      	movs	r1, #2
    5ddc:	4628      	mov	r0, r5
    5dde:	f7fb fc89 	bl	16f4 <process_event>
    5de2:	e7da      	b.n	5d9a <onoff_request+0x3a>
	parent->next = child;
    5de4:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5de6:	606e      	str	r6, [r5, #4]
}
    5de8:	e7f6      	b.n	5dd8 <onoff_request+0x78>
    5dea:	f382 8811 	msr	BASEPRI, r2
    5dee:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    5df2:	f06f 0404 	mvn.w	r4, #4
    5df6:	e7d0      	b.n	5d9a <onoff_request+0x3a>
    5df8:	f382 8811 	msr	BASEPRI, r2
    5dfc:	f3bf 8f6f 	isb	sy
    5e00:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5e04:	e7c9      	b.n	5d9a <onoff_request+0x3a>
    5e06:	f382 8811 	msr	BASEPRI, r2
    5e0a:	f3bf 8f6f 	isb	sy
		if (notify) {
    5e0e:	e7c4      	b.n	5d9a <onoff_request+0x3a>

00005e10 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5e10:	4603      	mov	r3, r0
    5e12:	b158      	cbz	r0, 5e2c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5e14:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5e16:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5e1a:	2a01      	cmp	r2, #1
    5e1c:	d003      	beq.n	5e26 <sys_notify_validate+0x16>
    5e1e:	2a03      	cmp	r2, #3
    5e20:	d104      	bne.n	5e2c <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5e22:	6802      	ldr	r2, [r0, #0]
    5e24:	b112      	cbz	r2, 5e2c <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5e26:	2000      	movs	r0, #0
    5e28:	6098      	str	r0, [r3, #8]
    5e2a:	4770      	bx	lr
    5e2c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5e30:	4770      	bx	lr

00005e32 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5e32:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    5e34:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    5e36:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    5e3a:	2a03      	cmp	r2, #3
    5e3c:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    5e40:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    5e42:	bf14      	ite	ne
    5e44:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5e46:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5e48:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5e4a:	4770      	bx	lr

00005e4c <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
    5e4c:	440a      	add	r2, r1
    5e4e:	428a      	cmp	r2, r1
    5e50:	d100      	bne.n	5e54 <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
    5e52:	4770      	bx	lr
		seed ^= *src++;
    5e54:	f811 3b01 	ldrb.w	r3, [r1], #1
    5e58:	ba40      	rev16	r0, r0
    5e5a:	b280      	uxth	r0, r0
    5e5c:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
    5e5e:	f3c0 1303 	ubfx	r3, r0, #4, #4
    5e62:	4043      	eors	r3, r0
		seed ^= seed << 12U;
    5e64:	0318      	lsls	r0, r3, #12
    5e66:	b280      	uxth	r0, r0
    5e68:	4043      	eors	r3, r0
		seed ^= (seed & 0xffU) << 5U;
    5e6a:	0158      	lsls	r0, r3, #5
    5e6c:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
    5e70:	4058      	eors	r0, r3
	for (; len > 0; len--) {
    5e72:	e7ec      	b.n	5e4e <crc16_itu_t+0x2>

00005e74 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5e74:	4770      	bx	lr

00005e76 <z_log_minimal_printk>:
#include <zephyr/sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    5e76:	b40f      	push	{r0, r1, r2, r3}
    5e78:	b507      	push	{r0, r1, r2, lr}
    5e7a:	a904      	add	r1, sp, #16
    5e7c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5e80:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    5e82:	f7fb fc29 	bl	16d8 <vprintk>
	va_end(ap);
}
    5e86:	b003      	add	sp, #12
    5e88:	f85d eb04 	ldr.w	lr, [sp], #4
    5e8c:	b004      	add	sp, #16
    5e8e:	4770      	bx	lr

00005e90 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    5e90:	4770      	bx	lr

00005e92 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    5e92:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    5e94:	b430      	push	{r4, r5}
    5e96:	4604      	mov	r4, r0
    5e98:	4618      	mov	r0, r3
    5e9a:	db0b      	blt.n	5eb4 <flash_area_read+0x22>
    5e9c:	68a5      	ldr	r5, [r4, #8]
    5e9e:	4408      	add	r0, r1
    5ea0:	42a8      	cmp	r0, r5
    5ea2:	d807      	bhi.n	5eb4 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
    5ea4:	68e0      	ldr	r0, [r4, #12]
    5ea6:	6864      	ldr	r4, [r4, #4]
    5ea8:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    5eaa:	6884      	ldr	r4, [r0, #8]
    5eac:	6824      	ldr	r4, [r4, #0]
    5eae:	46a4      	mov	ip, r4
}
    5eb0:	bc30      	pop	{r4, r5}
    5eb2:	4760      	bx	ip
    5eb4:	f06f 0015 	mvn.w	r0, #21
    5eb8:	bc30      	pop	{r4, r5}
    5eba:	4770      	bx	lr

00005ebc <flash_area_write>:
    5ebc:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    5ebe:	b430      	push	{r4, r5}
    5ec0:	4604      	mov	r4, r0
    5ec2:	4618      	mov	r0, r3
    5ec4:	db0b      	blt.n	5ede <flash_area_write+0x22>
    5ec6:	68a5      	ldr	r5, [r4, #8]
    5ec8:	4408      	add	r0, r1
    5eca:	42a8      	cmp	r0, r5
    5ecc:	d807      	bhi.n	5ede <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
    5ece:	68e0      	ldr	r0, [r4, #12]
    5ed0:	6864      	ldr	r4, [r4, #4]
    5ed2:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    5ed4:	6884      	ldr	r4, [r0, #8]
    5ed6:	6864      	ldr	r4, [r4, #4]
    5ed8:	46a4      	mov	ip, r4
}
    5eda:	bc30      	pop	{r4, r5}
    5edc:	4760      	bx	ip
    5ede:	f06f 0015 	mvn.w	r0, #21
    5ee2:	bc30      	pop	{r4, r5}
    5ee4:	4770      	bx	lr

00005ee6 <flash_area_erase>:
    5ee6:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    5ee8:	4603      	mov	r3, r0
    5eea:	b410      	push	{r4}
    5eec:	4610      	mov	r0, r2
    5eee:	db0a      	blt.n	5f06 <flash_area_erase+0x20>
    5ef0:	689c      	ldr	r4, [r3, #8]
    5ef2:	4408      	add	r0, r1
    5ef4:	42a0      	cmp	r0, r4
    5ef6:	d806      	bhi.n	5f06 <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
    5ef8:	68d8      	ldr	r0, [r3, #12]
    5efa:	685b      	ldr	r3, [r3, #4]
    5efc:	4419      	add	r1, r3
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    5efe:	6883      	ldr	r3, [r0, #8]
}
    5f00:	bc10      	pop	{r4}
    5f02:	689b      	ldr	r3, [r3, #8]
    5f04:	4718      	bx	r3
    5f06:	f06f 0015 	mvn.w	r0, #21
    5f0a:	bc10      	pop	{r4}
    5f0c:	4770      	bx	lr

00005f0e <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    5f0e:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
    5f10:	68c0      	ldr	r0, [r0, #12]
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    5f12:	6883      	ldr	r3, [r0, #8]
    5f14:	68db      	ldr	r3, [r3, #12]
    5f16:	4798      	blx	r3
}
    5f18:	6800      	ldr	r0, [r0, #0]
    5f1a:	bd08      	pop	{r3, pc}

00005f1c <flash_area_erased_val>:
{
	return fa->fa_dev;
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    5f1c:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
    5f1e:	68c0      	ldr	r0, [r0, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    5f20:	6883      	ldr	r3, [r0, #8]
    5f22:	68db      	ldr	r3, [r3, #12]
    5f24:	4798      	blx	r3

	return param->erase_value;
}
    5f26:	7900      	ldrb	r0, [r0, #4]
    5f28:	bd08      	pop	{r3, pc}

00005f2a <get_sectors_cb>:
{
    5f2a:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    5f2c:	684c      	ldr	r4, [r1, #4]
    5f2e:	6803      	ldr	r3, [r0, #0]
    5f30:	42a3      	cmp	r3, r4
    5f32:	d201      	bcs.n	5f38 <get_sectors_cb+0xe>
		*bail_value = true;
    5f34:	2001      	movs	r0, #1
}
    5f36:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    5f38:	688a      	ldr	r2, [r1, #8]
    5f3a:	4422      	add	r2, r4
    5f3c:	4293      	cmp	r3, r2
    5f3e:	d301      	bcc.n	5f44 <get_sectors_cb+0x1a>
		*bail_value = false;
    5f40:	2000      	movs	r0, #0
    5f42:	e7f8      	b.n	5f36 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
    5f44:	694e      	ldr	r6, [r1, #20]
    5f46:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
    5f4a:	42b5      	cmp	r5, r6
    5f4c:	d303      	bcc.n	5f56 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
    5f4e:	f06f 030b 	mvn.w	r3, #11
    5f52:	618b      	str	r3, [r1, #24]
		return true;
    5f54:	e7f4      	b.n	5f40 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    5f56:	1b1b      	subs	r3, r3, r4
    5f58:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    5f5c:	6843      	ldr	r3, [r0, #4]
    5f5e:	6908      	ldr	r0, [r1, #16]
    5f60:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    5f64:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
    5f66:	690b      	ldr	r3, [r1, #16]
    5f68:	3301      	adds	r3, #1
    5f6a:	610b      	str	r3, [r1, #16]
	return true;
    5f6c:	e7e2      	b.n	5f34 <get_sectors_cb+0xa>

00005f6e <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    5f6e:	2000      	movs	r0, #0
{
    5f70:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5f72:	f7fb fef1 	bl	1d58 <sys_reboot>

00005f76 <nrf_cc3xx_platform_mutex_init>:
/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
	// No thread-safe mutexes are required
}
    5f76:	4770      	bx	lr

00005f78 <console_write>:
{
    5f78:	b570      	push	{r4, r5, r6, lr}
    5f7a:	4606      	mov	r6, r0
    5f7c:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    5f7e:	2400      	movs	r4, #0
    5f80:	42ac      	cmp	r4, r5
    5f82:	db00      	blt.n	5f86 <console_write+0xe>
}
    5f84:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    5f86:	5d30      	ldrb	r0, [r6, r4]
    5f88:	f7fb ffd0 	bl	1f2c <console_out>
    5f8c:	3001      	adds	r0, #1
    5f8e:	d0f9      	beq.n	5f84 <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    5f90:	3401      	adds	r4, #1
    5f92:	e7f5      	b.n	5f80 <console_write+0x8>

00005f94 <initial_checks>:
} while(0)

static bool initial_checks(zcbor_state_t *state)
{
	ZCBOR_CHECK_ERROR();
	ZCBOR_CHECK_PAYLOAD();
    5f94:	6802      	ldr	r2, [r0, #0]
    5f96:	68c3      	ldr	r3, [r0, #12]
    5f98:	429a      	cmp	r2, r3
    5f9a:	bf21      	itttt	cs
    5f9c:	2208      	movcs	r2, #8
    5f9e:	6943      	ldrcs	r3, [r0, #20]
    5fa0:	2000      	movcs	r0, #0
    5fa2:	60da      	strcs	r2, [r3, #12]
	return true;
    5fa4:	bf38      	it	cc
    5fa6:	2001      	movcc	r0, #1
}
    5fa8:	4770      	bx	lr

00005faa <type_check>:

static bool type_check(zcbor_state_t *state, zcbor_major_type_t exp_major_type)
{
    5faa:	b510      	push	{r4, lr}
    5fac:	4604      	mov	r4, r0
	if (!initial_checks(state)) {
    5fae:	f7ff fff1 	bl	5f94 <initial_checks>
    5fb2:	b138      	cbz	r0, 5fc4 <type_check+0x1a>
		ZCBOR_FAIL();
	}
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    5fb4:	6823      	ldr	r3, [r4, #0]
    5fb6:	781b      	ldrb	r3, [r3, #0]

	if (major_type != exp_major_type) {
    5fb8:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
    5fbc:	d003      	beq.n	5fc6 <type_check+0x1c>
    5fbe:	220a      	movs	r2, #10
    5fc0:	6963      	ldr	r3, [r4, #20]
    5fc2:	60da      	str	r2, [r3, #12]
		ZCBOR_FAIL();
    5fc4:	2000      	movs	r0, #0
		ZCBOR_ERR(ZCBOR_ERR_WRONG_TYPE);
	}
	return true;
}
    5fc6:	bd10      	pop	{r4, pc}

00005fc8 <value_extract>:
 *          CBOR values are always big-endian, so this function converts from
 *          big to little-endian if necessary (@ref CONFIG_BIG_ENDIAN).
 */
static bool value_extract(zcbor_state_t *state,
		void *const result, uint_fast32_t result_len)
{
    5fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fcc:	4604      	mov	r4, r0
    5fce:	4617      	mov	r7, r2
	zcbor_trace();
	zcbor_assert(result_len != 0, "0-length result not supported.\r\n");
	zcbor_assert(result != NULL, NULL);

	INITIAL_CHECKS();
    5fd0:	f7ff ffe0 	bl	5f94 <initial_checks>
{
    5fd4:	460d      	mov	r5, r1
	INITIAL_CHECKS();
    5fd6:	4680      	mov	r8, r0
    5fd8:	b120      	cbz	r0, 5fe4 <value_extract+0x1c>
	ZCBOR_ERR_IF((state->elem_count == 0), ZCBOR_ERR_LOW_ELEM_COUNT);
    5fda:	68a3      	ldr	r3, [r4, #8]
    5fdc:	b93b      	cbnz	r3, 5fee <value_extract+0x26>
    5fde:	2203      	movs	r2, #3
    5fe0:	6963      	ldr	r3, [r4, #20]
    5fe2:	60da      	str	r2, [r3, #12]
	INITIAL_CHECKS();
    5fe4:	f04f 0800 	mov.w	r8, #0
		(state->payload) += len;
	}

	(state->elem_count)--;
	return true;
}
    5fe8:	4640      	mov	r0, r8
    5fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t additional = ADDITIONAL(*state->payload);
    5fee:	6823      	ldr	r3, [r4, #0]
	memset(result, 0, result_len);
    5ff0:	463a      	mov	r2, r7
	uint8_t additional = ADDITIONAL(*state->payload);
    5ff2:	781e      	ldrb	r6, [r3, #0]
	state->payload_bak = state->payload;
    5ff4:	6063      	str	r3, [r4, #4]
	(state->payload)++;
    5ff6:	3301      	adds	r3, #1
	memset(result, 0, result_len);
    5ff8:	2100      	movs	r1, #0
    5ffa:	4628      	mov	r0, r5
	uint8_t additional = ADDITIONAL(*state->payload);
    5ffc:	f006 061f 	and.w	r6, r6, #31
	(state->payload)++;
    6000:	6023      	str	r3, [r4, #0]
	memset(result, 0, result_len);
    6002:	f000 fab2 	bl	656a <memset>
	if (additional <= ZCBOR_VALUE_IN_HEADER) {
    6006:	2e17      	cmp	r6, #23
    6008:	d804      	bhi.n	6014 <value_extract+0x4c>
		u8_result[0] = additional;
    600a:	702e      	strb	r6, [r5, #0]
	(state->elem_count)--;
    600c:	68a3      	ldr	r3, [r4, #8]
    600e:	3b01      	subs	r3, #1
    6010:	60a3      	str	r3, [r4, #8]
	return true;
    6012:	e7e9      	b.n	5fe8 <value_extract+0x20>
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    6014:	3e18      	subs	r6, #24
    6016:	b2f2      	uxtb	r2, r6
    6018:	2a03      	cmp	r2, #3
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    601a:	6823      	ldr	r3, [r4, #0]
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    601c:	d808      	bhi.n	6030 <value_extract+0x68>
		return 1U << (additional - ZCBOR_VALUE_IS_1_BYTE);
    601e:	2101      	movs	r1, #1
    6020:	40b1      	lsls	r1, r6
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    6022:	428f      	cmp	r7, r1
    6024:	d209      	bcs.n	603a <value_extract+0x72>
    6026:	3b01      	subs	r3, #1
    6028:	6023      	str	r3, [r4, #0]
    602a:	2205      	movs	r2, #5
    602c:	6963      	ldr	r3, [r4, #20]
    602e:	e7d8      	b.n	5fe2 <value_extract+0x1a>
		FAIL_AND_DECR_IF(len == 0, ZCBOR_ERR_ADDITIONAL_INVAL); // additional_len() did not recognize the additional value.
    6030:	3b01      	subs	r3, #1
    6032:	6023      	str	r3, [r4, #0]
    6034:	2207      	movs	r2, #7
    6036:	6963      	ldr	r3, [r4, #20]
    6038:	e7d3      	b.n	5fe2 <value_extract+0x1a>
		FAIL_AND_DECR_IF((state->payload + len) > state->payload_end,
    603a:	68e0      	ldr	r0, [r4, #12]
    603c:	185a      	adds	r2, r3, r1
    603e:	4290      	cmp	r0, r2
    6040:	d204      	bcs.n	604c <value_extract+0x84>
    6042:	3b01      	subs	r3, #1
    6044:	6023      	str	r3, [r4, #0]
    6046:	2208      	movs	r2, #8
    6048:	6963      	ldr	r3, [r4, #20]
    604a:	e7ca      	b.n	5fe2 <value_extract+0x1a>
    604c:	1e4b      	subs	r3, r1, #1
    604e:	3d01      	subs	r5, #1
			u8_result[i] = (state->payload)[len - i - 1];
    6050:	6822      	ldr	r2, [r4, #0]
    6052:	5cd2      	ldrb	r2, [r2, r3]
		for (uint_fast32_t i = 0; i < len; i++) {
    6054:	3b01      	subs	r3, #1
			u8_result[i] = (state->payload)[len - i - 1];
    6056:	f805 2f01 	strb.w	r2, [r5, #1]!
		for (uint_fast32_t i = 0; i < len; i++) {
    605a:	d2f9      	bcs.n	6050 <value_extract+0x88>
		(state->payload) += len;
    605c:	6823      	ldr	r3, [r4, #0]
    605e:	440b      	add	r3, r1
    6060:	6023      	str	r3, [r4, #0]
    6062:	e7d3      	b.n	600c <value_extract+0x44>

00006064 <str_start_decode>:
}


static bool str_start_decode(zcbor_state_t *state,
		struct zcbor_string *result, zcbor_major_type_t exp_major_type)
{
    6064:	b538      	push	{r3, r4, r5, lr}
    6066:	460c      	mov	r4, r1
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    6068:	4611      	mov	r1, r2
{
    606a:	4605      	mov	r5, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    606c:	f7ff ff9d 	bl	5faa <type_check>
    6070:	b908      	cbnz	r0, 6076 <str_start_decode+0x12>
    6072:	2000      	movs	r0, #0
		ZCBOR_FAIL();
	}

	result->value = state->payload;
	return true;
}
    6074:	bd38      	pop	{r3, r4, r5, pc}
	if (!value_extract(state, &result->len, sizeof(result->len))) {
    6076:	2204      	movs	r2, #4
    6078:	4628      	mov	r0, r5
    607a:	18a1      	adds	r1, r4, r2
    607c:	f7ff ffa4 	bl	5fc8 <value_extract>
    6080:	2800      	cmp	r0, #0
    6082:	d0f6      	beq.n	6072 <str_start_decode+0xe>
	result->value = state->payload;
    6084:	682b      	ldr	r3, [r5, #0]
    6086:	6023      	str	r3, [r4, #0]
	return true;
    6088:	e7f4      	b.n	6074 <str_start_decode+0x10>

0000608a <list_map_start_decode>:
}


static bool list_map_start_decode(zcbor_state_t *state,
		zcbor_major_type_t exp_major_type)
{
    608a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    608c:	4604      	mov	r4, r0
	uint_fast32_t new_elem_count;
	bool indefinite_length_array = false;

	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    608e:	f7ff ff8c 	bl	5faa <type_check>
    6092:	4605      	mov	r5, r0
    6094:	b168      	cbz	r0, 60b2 <list_map_start_decode+0x28>

	if (ADDITIONAL(*state->payload) == ZCBOR_VALUE_IS_INDEFINITE_LENGTH) {
    6096:	6822      	ldr	r2, [r4, #0]
    6098:	7813      	ldrb	r3, [r2, #0]
    609a:	f003 031f 	and.w	r3, r3, #31
    609e:	2b1f      	cmp	r3, #31
    60a0:	d119      	bne.n	60d6 <list_map_start_decode+0x4c>
		/* Indefinite length array. */
		new_elem_count = ZCBOR_LARGE_ELEM_COUNT;
    60a2:	f06f 0310 	mvn.w	r3, #16
    60a6:	9301      	str	r3, [sp, #4]
		ZCBOR_ERR_IF(state->elem_count == 0, ZCBOR_ERR_LOW_ELEM_COUNT);
    60a8:	68a3      	ldr	r3, [r4, #8]
    60aa:	b92b      	cbnz	r3, 60b8 <list_map_start_decode+0x2e>
    60ac:	2203      	movs	r2, #3
    60ae:	6963      	ldr	r3, [r4, #20]
    60b0:	60da      	str	r2, [r3, #12]
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    60b2:	2000      	movs	r0, #0
	}

	state->indefinite_length_array = indefinite_length_array;

	return true;
}
    60b4:	b003      	add	sp, #12
    60b6:	bd30      	pop	{r4, r5, pc}
		state->payload++;
    60b8:	3201      	adds	r2, #1
		state->elem_count--;
    60ba:	3b01      	subs	r3, #1
		state->payload++;
    60bc:	6022      	str	r2, [r4, #0]
		state->elem_count--;
    60be:	60a3      	str	r3, [r4, #8]
	if (!zcbor_new_backup(state, new_elem_count)) {
    60c0:	4620      	mov	r0, r4
    60c2:	9901      	ldr	r1, [sp, #4]
    60c4:	f000 f98b 	bl	63de <zcbor_new_backup>
    60c8:	b978      	cbnz	r0, 60ea <list_map_start_decode+0x60>
		FAIL_RESTORE();
    60ca:	6863      	ldr	r3, [r4, #4]
    60cc:	6023      	str	r3, [r4, #0]
    60ce:	68a3      	ldr	r3, [r4, #8]
    60d0:	3301      	adds	r3, #1
    60d2:	60a3      	str	r3, [r4, #8]
    60d4:	e7ed      	b.n	60b2 <list_map_start_decode+0x28>
		if (!value_extract(state, &new_elem_count, sizeof(new_elem_count))) {
    60d6:	2204      	movs	r2, #4
    60d8:	4620      	mov	r0, r4
    60da:	eb0d 0102 	add.w	r1, sp, r2
    60de:	f7ff ff73 	bl	5fc8 <value_extract>
    60e2:	2800      	cmp	r0, #0
    60e4:	d0e5      	beq.n	60b2 <list_map_start_decode+0x28>
	bool indefinite_length_array = false;
    60e6:	2500      	movs	r5, #0
    60e8:	e7ea      	b.n	60c0 <list_map_start_decode+0x36>
	state->indefinite_length_array = indefinite_length_array;
    60ea:	7425      	strb	r5, [r4, #16]
	return true;
    60ec:	e7e2      	b.n	60b4 <list_map_start_decode+0x2a>

000060ee <list_map_end_decode>:
	return true;
}


static bool list_map_end_decode(zcbor_state_t *state)
{
    60ee:	b510      	push	{r4, lr}
	uint_fast32_t max_elem_count = 0;

	if (state->indefinite_length_array) {
    60f0:	7c02      	ldrb	r2, [r0, #16]
{
    60f2:	4604      	mov	r4, r0
	if (state->indefinite_length_array) {
    60f4:	b18a      	cbz	r2, 611a <list_map_end_decode+0x2c>
	INITIAL_CHECKS();
    60f6:	f7ff ff4d 	bl	5f94 <initial_checks>
    60fa:	b130      	cbz	r0, 610a <list_map_end_decode+0x1c>
	ZCBOR_ERR_IF(*state->payload != 0xFF, ZCBOR_ERR_WRONG_TYPE);
    60fc:	6823      	ldr	r3, [r4, #0]
    60fe:	781a      	ldrb	r2, [r3, #0]
    6100:	2aff      	cmp	r2, #255	; 0xff
    6102:	d004      	beq.n	610e <list_map_end_decode+0x20>
    6104:	220a      	movs	r2, #10
    6106:	6963      	ldr	r3, [r4, #20]
    6108:	60da      	str	r2, [r3, #12]
			max_elem_count)) {
		ZCBOR_FAIL();
	}

	return true;
}
    610a:	2000      	movs	r0, #0
    610c:	bd10      	pop	{r4, pc}
	state->payload++;
    610e:	3301      	adds	r3, #1
    6110:	6023      	str	r3, [r4, #0]
		state->indefinite_length_array = false;
    6112:	2300      	movs	r3, #0
		max_elem_count = ZCBOR_MAX_ELEM_COUNT;
    6114:	f04f 32ff 	mov.w	r2, #4294967295
		state->indefinite_length_array = false;
    6118:	7423      	strb	r3, [r4, #16]
	if (!zcbor_process_backup(state,
    611a:	4620      	mov	r0, r4
}
    611c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!zcbor_process_backup(state,
    6120:	2107      	movs	r1, #7
    6122:	f000 b97a 	b.w	641a <zcbor_process_backup>

00006126 <str_decode>:
{
    6126:	b538      	push	{r3, r4, r5, lr}
    6128:	4604      	mov	r4, r0
    612a:	460d      	mov	r5, r1
	if (!str_start_decode(state, result, exp_major_type)) {
    612c:	f7ff ff9a 	bl	6064 <str_start_decode>
    6130:	b180      	cbz	r0, 6154 <str_decode+0x2e>
	if (result->len > (state->payload_end - state->payload)) {
    6132:	6823      	ldr	r3, [r4, #0]
    6134:	68e2      	ldr	r2, [r4, #12]
    6136:	6869      	ldr	r1, [r5, #4]
    6138:	1ad2      	subs	r2, r2, r3
    613a:	4291      	cmp	r1, r2
    613c:	d802      	bhi.n	6144 <str_decode+0x1e>
	state->payload += result->len;
    613e:	440b      	add	r3, r1
    6140:	6023      	str	r3, [r4, #0]
}
    6142:	bd38      	pop	{r3, r4, r5, pc}
    6144:	2208      	movs	r2, #8
		ERR_RESTORE(ZCBOR_ERR_NO_PAYLOAD);
    6146:	6863      	ldr	r3, [r4, #4]
    6148:	6023      	str	r3, [r4, #0]
    614a:	68a3      	ldr	r3, [r4, #8]
    614c:	3301      	adds	r3, #1
    614e:	60a3      	str	r3, [r4, #8]
    6150:	6963      	ldr	r3, [r4, #20]
    6152:	60da      	str	r2, [r3, #12]
		ZCBOR_FAIL();
    6154:	2000      	movs	r0, #0
    6156:	e7f4      	b.n	6142 <str_decode+0x1c>

00006158 <str_expect>:
{
    6158:	b573      	push	{r0, r1, r4, r5, r6, lr}
    615a:	460e      	mov	r6, r1
	if (!str_decode(state, &tmp_result, exp_major_type)) {
    615c:	4669      	mov	r1, sp
{
    615e:	4604      	mov	r4, r0
	if (!str_decode(state, &tmp_result, exp_major_type)) {
    6160:	f7ff ffe1 	bl	6126 <str_decode>
    6164:	4605      	mov	r5, r0
    6166:	b158      	cbz	r0, 6180 <str_expect+0x28>
	if ((tmp_result.len != result->len)
    6168:	9a01      	ldr	r2, [sp, #4]
    616a:	6873      	ldr	r3, [r6, #4]
    616c:	429a      	cmp	r2, r3
    616e:	d00b      	beq.n	6188 <str_expect+0x30>
    6170:	220b      	movs	r2, #11
		ERR_RESTORE(ZCBOR_ERR_WRONG_VALUE);
    6172:	6863      	ldr	r3, [r4, #4]
    6174:	6023      	str	r3, [r4, #0]
    6176:	68a3      	ldr	r3, [r4, #8]
    6178:	3301      	adds	r3, #1
    617a:	60a3      	str	r3, [r4, #8]
    617c:	6963      	ldr	r3, [r4, #20]
    617e:	60da      	str	r2, [r3, #12]
		ZCBOR_FAIL();
    6180:	2500      	movs	r5, #0
}
    6182:	4628      	mov	r0, r5
    6184:	b002      	add	sp, #8
    6186:	bd70      	pop	{r4, r5, r6, pc}
			|| memcmp(result->value, tmp_result.value, tmp_result.len)) {
    6188:	9900      	ldr	r1, [sp, #0]
    618a:	6830      	ldr	r0, [r6, #0]
    618c:	f000 f9bb 	bl	6506 <memcmp>
    6190:	2800      	cmp	r0, #0
    6192:	d0f6      	beq.n	6182 <str_expect+0x2a>
    6194:	e7ec      	b.n	6170 <str_expect+0x18>

00006196 <zcbor_int64_decode>:
{
    6196:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6198:	4604      	mov	r4, r0
    619a:	460d      	mov	r5, r1
	INITIAL_CHECKS();
    619c:	f7ff fefa 	bl	5f94 <initial_checks>
    61a0:	b140      	cbz	r0, 61b4 <zcbor_int64_decode+0x1e>
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    61a2:	6823      	ldr	r3, [r4, #0]
    61a4:	781b      	ldrb	r3, [r3, #0]
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
    61a6:	2b3f      	cmp	r3, #63	; 0x3f
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    61a8:	ea4f 1653 	mov.w	r6, r3, lsr #5
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
    61ac:	d905      	bls.n	61ba <zcbor_int64_decode+0x24>
    61ae:	220a      	movs	r2, #10
    61b0:	6963      	ldr	r3, [r4, #20]
    61b2:	60da      	str	r2, [r3, #12]
	INITIAL_CHECKS();
    61b4:	2000      	movs	r0, #0
}
    61b6:	b002      	add	sp, #8
    61b8:	bd70      	pop	{r4, r5, r6, pc}
	if (!value_extract(state, &uint_result, sizeof(uint_result))) {
    61ba:	2208      	movs	r2, #8
    61bc:	4669      	mov	r1, sp
    61be:	4620      	mov	r0, r4
    61c0:	f7ff ff02 	bl	5fc8 <value_extract>
    61c4:	2800      	cmp	r0, #0
    61c6:	d0f5      	beq.n	61b4 <zcbor_int64_decode+0x1e>
	int_result = (int64_t)uint_result;
    61c8:	e9dd 2300 	ldrd	r2, r3, [sp]
	if (int_result < 0) {
    61cc:	2b00      	cmp	r3, #0
    61ce:	da07      	bge.n	61e0 <zcbor_int64_decode+0x4a>
		ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    61d0:	6863      	ldr	r3, [r4, #4]
    61d2:	2205      	movs	r2, #5
    61d4:	6023      	str	r3, [r4, #0]
    61d6:	68a3      	ldr	r3, [r4, #8]
    61d8:	3301      	adds	r3, #1
    61da:	60a3      	str	r3, [r4, #8]
    61dc:	6963      	ldr	r3, [r4, #20]
    61de:	e7e8      	b.n	61b2 <zcbor_int64_decode+0x1c>
	if (major_type == ZCBOR_MAJOR_TYPE_NINT) {
    61e0:	2e01      	cmp	r6, #1
		*result = -1 - int_result;
    61e2:	bf04      	itt	eq
    61e4:	43d2      	mvneq	r2, r2
    61e6:	43db      	mvneq	r3, r3
    61e8:	e9c5 2300 	strd	r2, r3, [r5]
    61ec:	e7e3      	b.n	61b6 <zcbor_int64_decode+0x20>

000061ee <zcbor_int32_decode>:
{
    61ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    61f0:	460d      	mov	r5, r1
	if (zcbor_int64_decode(state, &result64)) {
    61f2:	4669      	mov	r1, sp
{
    61f4:	4604      	mov	r4, r0
	if (zcbor_int64_decode(state, &result64)) {
    61f6:	f7ff ffce 	bl	6196 <zcbor_int64_decode>
    61fa:	b910      	cbnz	r0, 6202 <zcbor_int32_decode+0x14>
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    61fc:	2000      	movs	r0, #0
}
    61fe:	b003      	add	sp, #12
    6200:	bd30      	pop	{r4, r5, pc}
		if (result64 > INT32_MAX) {
    6202:	9b00      	ldr	r3, [sp, #0]
    6204:	9a01      	ldr	r2, [sp, #4]
    6206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    620a:	f172 0200 	sbcs.w	r2, r2, #0
    620e:	db08      	blt.n	6222 <zcbor_int32_decode+0x34>
    6210:	2205      	movs	r2, #5
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    6212:	6863      	ldr	r3, [r4, #4]
    6214:	6023      	str	r3, [r4, #0]
    6216:	68a3      	ldr	r3, [r4, #8]
    6218:	3301      	adds	r3, #1
    621a:	60a3      	str	r3, [r4, #8]
    621c:	6963      	ldr	r3, [r4, #20]
    621e:	60da      	str	r2, [r3, #12]
    6220:	e7ec      	b.n	61fc <zcbor_int32_decode+0xe>
		*result = (int32_t)result64;
    6222:	602b      	str	r3, [r5, #0]
		return true;
    6224:	e7eb      	b.n	61fe <zcbor_int32_decode+0x10>

00006226 <zcbor_bstr_decode>:
	return str_decode(state, result, ZCBOR_MAJOR_TYPE_BSTR);
    6226:	2202      	movs	r2, #2
    6228:	f7ff bf7d 	b.w	6126 <str_decode>

0000622c <zcbor_tstr_expect>:
	return str_expect(state, result, ZCBOR_MAJOR_TYPE_TSTR);
    622c:	2203      	movs	r2, #3
    622e:	f7ff bf93 	b.w	6158 <str_expect>

00006232 <zcbor_map_start_decode>:
{
    6232:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    6234:	2105      	movs	r1, #5
{
    6236:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    6238:	f7ff ff27 	bl	608a <list_map_start_decode>
	if (ret && !state->indefinite_length_array) {
    623c:	b168      	cbz	r0, 625a <zcbor_map_start_decode+0x28>
    623e:	7c23      	ldrb	r3, [r4, #16]
    6240:	b963      	cbnz	r3, 625c <zcbor_map_start_decode+0x2a>
		if (state->elem_count >= (ZCBOR_MAX_ELEM_COUNT / 2)) {
    6242:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6246:	68a3      	ldr	r3, [r4, #8]
    6248:	4293      	cmp	r3, r2
    624a:	d308      	bcc.n	625e <zcbor_map_start_decode+0x2c>
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    624c:	6862      	ldr	r2, [r4, #4]
    624e:	3301      	adds	r3, #1
    6250:	6022      	str	r2, [r4, #0]
    6252:	2205      	movs	r2, #5
    6254:	60a3      	str	r3, [r4, #8]
    6256:	6963      	ldr	r3, [r4, #20]
    6258:	60da      	str	r2, [r3, #12]
    625a:	2000      	movs	r0, #0
}
    625c:	bd10      	pop	{r4, pc}
		state->elem_count *= 2;
    625e:	005b      	lsls	r3, r3, #1
    6260:	60a3      	str	r3, [r4, #8]
    6262:	e7fb      	b.n	625c <zcbor_map_start_decode+0x2a>

00006264 <zcbor_map_end_decode>:
{
	return list_map_end_decode(state);
}


bool zcbor_map_end_decode(zcbor_state_t *state)
    6264:	f7ff bf43 	b.w	60ee <list_map_end_decode>

00006268 <zcbor_list_map_end_force_decode>:
}


bool zcbor_list_map_end_force_decode(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state,
    6268:	f04f 32ff 	mov.w	r2, #4294967295
    626c:	2107      	movs	r1, #7
    626e:	f000 b8d4 	b.w	641a <zcbor_process_backup>

00006272 <zcbor_multi_decode>:
		uint_fast32_t *num_decode,
		zcbor_decoder_t decoder,
		zcbor_state_t *state,
		void *result,
		uint_fast32_t result_len)
{
    6272:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6276:	4681      	mov	r9, r0
    6278:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
    627c:	4688      	mov	r8, r1
    627e:	4617      	mov	r7, r2
    6280:	469a      	mov	sl, r3
	ZCBOR_CHECK_ERROR();
	for (uint_fast32_t i = 0; i < max_decode; i++) {
    6282:	2400      	movs	r4, #0
    6284:	4544      	cmp	r4, r8
    6286:	d102      	bne.n	628e <zcbor_multi_decode+0x1c>
			zcbor_print("Found %" PRIuFAST32 " elements.\r\n", i);
			return true;
		}
	}
	zcbor_print("Found %" PRIuFAST32 " elements.\r\n", max_decode);
	*num_decode = max_decode;
    6288:	603c      	str	r4, [r7, #0]
			return true;
    628a:	2001      	movs	r0, #1
    628c:	e013      	b.n	62b6 <zcbor_multi_decode+0x44>
		uint8_t const *payload_bak = state->payload;
    628e:	682b      	ldr	r3, [r5, #0]
		if (!decoder(state,
    6290:	4631      	mov	r1, r6
    6292:	4628      	mov	r0, r5
		uint8_t const *payload_bak = state->payload;
    6294:	9301      	str	r3, [sp, #4]
		uint_fast32_t elem_count_bak = state->elem_count;
    6296:	f8d5 b008 	ldr.w	fp, [r5, #8]
		if (!decoder(state,
    629a:	47d0      	blx	sl
    629c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    629e:	441e      	add	r6, r3
    62a0:	9b01      	ldr	r3, [sp, #4]
    62a2:	b958      	cbnz	r0, 62bc <zcbor_multi_decode+0x4a>
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
    62a4:	454c      	cmp	r4, r9
			*num_decode = i;
    62a6:	603c      	str	r4, [r7, #0]
			state->payload = payload_bak;
    62a8:	602b      	str	r3, [r5, #0]
			state->elem_count = elem_count_bak;
    62aa:	f8c5 b008 	str.w	fp, [r5, #8]
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
    62ae:	d2ec      	bcs.n	628a <zcbor_multi_decode+0x18>
    62b0:	220d      	movs	r2, #13
    62b2:	696b      	ldr	r3, [r5, #20]
    62b4:	60da      	str	r2, [r3, #12]
	return true;
}
    62b6:	b003      	add	sp, #12
    62b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint_fast32_t i = 0; i < max_decode; i++) {
    62bc:	3401      	adds	r4, #1
    62be:	e7e1      	b.n	6284 <zcbor_multi_decode+0x12>

000062c0 <str_encode>:
}


static bool str_encode(zcbor_state_t *state,
		const struct zcbor_string *input, zcbor_major_type_t major_type)
{
    62c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (input->len > (state->payload_end - state->payload)) {
    62c4:	f8d0 900c 	ldr.w	r9, [r0, #12]
    62c8:	6805      	ldr	r5, [r0, #0]
    62ca:	f8d1 a004 	ldr.w	sl, [r1, #4]
    62ce:	eba9 0305 	sub.w	r3, r9, r5
    62d2:	459a      	cmp	sl, r3
{
    62d4:	4604      	mov	r4, r0
    62d6:	460e      	mov	r6, r1
    62d8:	4690      	mov	r8, r2
	if (input->len > (state->payload_end - state->payload)) {
    62da:	d906      	bls.n	62ea <str_encode+0x2a>
    62dc:	2208      	movs	r2, #8
    62de:	6963      	ldr	r3, [r4, #20]
    62e0:	60da      	str	r2, [r3, #12]
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
    62e2:	2500      	movs	r5, #0
		 * because of bstrx_cbor_start_encode/bstrx_cbor_end_encode. */
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
    62e4:	4628      	mov	r0, r5
    62e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    62ea:	460f      	mov	r7, r1
    62ec:	f857 3b04 	ldr.w	r3, [r7], #4
    62f0:	b143      	cbz	r3, 6304 <str_encode+0x44>
    62f2:	2104      	movs	r1, #4
    62f4:	4638      	mov	r0, r7
    62f6:	f7fc faf9 	bl	28ec <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
    62fa:	4455      	add	r5, sl
    62fc:	3501      	adds	r5, #1
    62fe:	4405      	add	r5, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    6300:	45a9      	cmp	r9, r5
    6302:	d3eb      	bcc.n	62dc <str_encode+0x1c>
	if (!value_encode(state, major_type, &input->len, sizeof(input->len))) {
    6304:	2304      	movs	r3, #4
    6306:	463a      	mov	r2, r7
    6308:	4641      	mov	r1, r8
    630a:	4620      	mov	r0, r4
    630c:	f7fc fb08 	bl	2920 <value_encode>
    6310:	4605      	mov	r5, r0
    6312:	2800      	cmp	r0, #0
    6314:	d0e5      	beq.n	62e2 <str_encode+0x22>
	if (state->payload_mut != input->value) {
    6316:	6820      	ldr	r0, [r4, #0]
    6318:	6831      	ldr	r1, [r6, #0]
    631a:	4288      	cmp	r0, r1
    631c:	d002      	beq.n	6324 <str_encode+0x64>
		memmove(state->payload_mut, input->value, input->len);
    631e:	6872      	ldr	r2, [r6, #4]
    6320:	f000 f901 	bl	6526 <memmove>
	state->payload += input->len;
    6324:	6823      	ldr	r3, [r4, #0]
    6326:	6872      	ldr	r2, [r6, #4]
    6328:	4413      	add	r3, r2
    632a:	6023      	str	r3, [r4, #0]
	return true;
    632c:	e7da      	b.n	62e4 <str_encode+0x24>

0000632e <zcbor_int64_put>:
{
    632e:	b507      	push	{r0, r1, r2, lr}
    6330:	e9cd 2300 	strd	r2, r3, [sp]
	if (input < 0) {
    6334:	2b00      	cmp	r3, #0
{
    6336:	4611      	mov	r1, r2
		input = -1 - input;
    6338:	bfbb      	ittet	lt
    633a:	43db      	mvnlt	r3, r3
    633c:	43d1      	mvnlt	r1, r2
		major_type = ZCBOR_MAJOR_TYPE_PINT;
    633e:	2100      	movge	r1, #0
		input = -1 - input;
    6340:	e9cd 1300 	strdlt	r1, r3, [sp]
	if (!value_encode(state, major_type, &input, 8)) {
    6344:	466a      	mov	r2, sp
		major_type = ZCBOR_MAJOR_TYPE_NINT;
    6346:	bfb8      	it	lt
    6348:	2101      	movlt	r1, #1
	if (!value_encode(state, major_type, &input, 8)) {
    634a:	2308      	movs	r3, #8
    634c:	f7fc fae8 	bl	2920 <value_encode>
}
    6350:	b003      	add	sp, #12
    6352:	f85d fb04 	ldr.w	pc, [sp], #4

00006356 <zcbor_int32_put>:
{
    6356:	460a      	mov	r2, r1
	return zcbor_int64_put(state, input);
    6358:	17cb      	asrs	r3, r1, #31
    635a:	f7ff bfe8 	b.w	632e <zcbor_int64_put>

0000635e <zcbor_uint32_put>:
{
    635e:	b507      	push	{r0, r1, r2, lr}
    6360:	460b      	mov	r3, r1
	return zcbor_uint64_put(state, input);
    6362:	2100      	movs	r1, #0
	if (!value_encode(state, major_type, input, 8)) {
    6364:	466a      	mov	r2, sp
	return zcbor_uint64_put(state, input);
    6366:	e9cd 3100 	strd	r3, r1, [sp]
	if (!value_encode(state, major_type, input, 8)) {
    636a:	2308      	movs	r3, #8
    636c:	f7fc fad8 	bl	2920 <value_encode>
}
    6370:	b003      	add	sp, #12
    6372:	f85d fb04 	ldr.w	pc, [sp], #4

00006376 <zcbor_tstr_encode>:
}


bool zcbor_tstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_TSTR);
    6376:	2203      	movs	r2, #3
    6378:	f7ff bfa2 	b.w	62c0 <str_encode>

0000637c <zcbor_list_start_encode>:
	ZCBOR_CHECK_PAYLOAD();
    637c:	6803      	ldr	r3, [r0, #0]
    637e:	68c2      	ldr	r2, [r0, #12]
    6380:	4293      	cmp	r3, r2
    6382:	d304      	bcc.n	638e <zcbor_list_start_encode+0x12>
    6384:	2208      	movs	r2, #8
    6386:	6943      	ldr	r3, [r0, #20]
    6388:	2000      	movs	r0, #0
    638a:	60da      	str	r2, [r3, #12]
    638c:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    638e:	1c5a      	adds	r2, r3, #1
    6390:	6002      	str	r2, [r0, #0]
    6392:	229f      	movs	r2, #159	; 0x9f
	return true;
    6394:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    6396:	701a      	strb	r2, [r3, #0]


bool zcbor_list_start_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_start_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}
    6398:	4770      	bx	lr

0000639a <zcbor_map_start_encode>:
	ZCBOR_CHECK_PAYLOAD();
    639a:	6803      	ldr	r3, [r0, #0]
    639c:	68c2      	ldr	r2, [r0, #12]
    639e:	4293      	cmp	r3, r2
    63a0:	d304      	bcc.n	63ac <zcbor_map_start_encode+0x12>
    63a2:	2208      	movs	r2, #8
    63a4:	6943      	ldr	r3, [r0, #20]
    63a6:	2000      	movs	r0, #0
    63a8:	60da      	str	r2, [r3, #12]
    63aa:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    63ac:	1c5a      	adds	r2, r3, #1
    63ae:	6002      	str	r2, [r0, #0]
    63b0:	22bf      	movs	r2, #191	; 0xbf
	return true;
    63b2:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    63b4:	701a      	strb	r2, [r3, #0]


bool zcbor_map_start_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_start_encode(state, max_num, ZCBOR_MAJOR_TYPE_MAP);
}
    63b6:	4770      	bx	lr

000063b8 <zcbor_list_end_encode>:
	ZCBOR_CHECK_PAYLOAD();
    63b8:	6803      	ldr	r3, [r0, #0]
    63ba:	68c2      	ldr	r2, [r0, #12]
    63bc:	4293      	cmp	r3, r2
    63be:	d304      	bcc.n	63ca <zcbor_list_end_encode+0x12>
    63c0:	2208      	movs	r2, #8
    63c2:	6943      	ldr	r3, [r0, #20]
    63c4:	2000      	movs	r0, #0
    63c6:	60da      	str	r2, [r3, #12]
    63c8:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    63ca:	1c5a      	adds	r2, r3, #1
    63cc:	6002      	str	r2, [r0, #0]
    63ce:	22ff      	movs	r2, #255	; 0xff
	return true;
    63d0:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    63d2:	701a      	strb	r2, [r3, #0]


bool zcbor_list_end_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_end_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}
    63d4:	4770      	bx	lr

000063d6 <zcbor_map_end_encode>:


bool zcbor_map_end_encode(zcbor_state_t *state, uint_fast32_t max_num)
    63d6:	f7ff bfef 	b.w	63b8 <zcbor_list_end_encode>

000063da <zcbor_new_encode_state>:


bool zcbor_new_encode_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
	return zcbor_new_state(state_array, n_states, payload, payload_len, elem_count);
    63da:	f000 b85c 	b.w	6496 <zcbor_new_state>

000063de <zcbor_new_backup>:

_Static_assert((sizeof(zcbor_state_t) >= sizeof(struct zcbor_state_constant)),
	"This code needs zcbor_state_t to be at least as large as zcbor_backups_t.");

bool zcbor_new_backup(zcbor_state_t *state, uint_fast32_t new_elem_count)
{
    63de:	b538      	push	{r3, r4, r5, lr}
	ZCBOR_CHECK_ERROR();

	if ((state->constant_state->current_backup)
    63e0:	6943      	ldr	r3, [r0, #20]
{
    63e2:	460d      	mov	r5, r1
	if ((state->constant_state->current_backup)
    63e4:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
    63e8:	4291      	cmp	r1, r2
{
    63ea:	4604      	mov	r4, r0
    63ec:	f04f 0000 	mov.w	r0, #0
	if ((state->constant_state->current_backup)
    63f0:	d302      	bcc.n	63f8 <zcbor_new_backup+0x1a>
    63f2:	2201      	movs	r2, #1
    63f4:	60da      	str	r2, [r3, #12]
		sizeof(zcbor_state_t));

	state->elem_count = new_elem_count;

	return true;
}
    63f6:	bd38      	pop	{r3, r4, r5, pc}
	state->payload_moved = false;
    63f8:	7460      	strb	r0, [r4, #17]
	(state->constant_state->current_backup)++;
    63fa:	685a      	ldr	r2, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    63fc:	4621      	mov	r1, r4
	(state->constant_state->current_backup)++;
    63fe:	3201      	adds	r2, #1
    6400:	605a      	str	r2, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    6402:	2218      	movs	r2, #24
	uint_fast32_t i = (state->constant_state->current_backup) - 1;
    6404:	6963      	ldr	r3, [r4, #20]
    6406:	6858      	ldr	r0, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    6408:	681b      	ldr	r3, [r3, #0]
	uint_fast32_t i = (state->constant_state->current_backup) - 1;
    640a:	3801      	subs	r0, #1
	memcpy(&state->constant_state->backup_list[i], state,
    640c:	fb02 3000 	mla	r0, r2, r0, r3
    6410:	f000 f8a0 	bl	6554 <memcpy>
	return true;
    6414:	2001      	movs	r0, #1
	state->elem_count = new_elem_count;
    6416:	60a5      	str	r5, [r4, #8]
	return true;
    6418:	e7ed      	b.n	63f6 <zcbor_new_backup+0x18>

0000641a <zcbor_process_backup>:


bool zcbor_process_backup(zcbor_state_t *state, uint32_t flags,
		uint_fast32_t max_elem_count)
{
    641a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    641e:	4616      	mov	r6, r2
	const uint8_t *payload = state->payload;
	const uint_fast32_t elem_count = state->elem_count;

	ZCBOR_CHECK_ERROR();

	if (state->constant_state->current_backup == 0) {
    6420:	6942      	ldr	r2, [r0, #20]
{
    6422:	4604      	mov	r4, r0
	if (state->constant_state->current_backup == 0) {
    6424:	6853      	ldr	r3, [r2, #4]
{
    6426:	460d      	mov	r5, r1
	const uint8_t *payload = state->payload;
    6428:	6807      	ldr	r7, [r0, #0]
	const uint_fast32_t elem_count = state->elem_count;
    642a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (state->constant_state->current_backup == 0) {
    642e:	b923      	cbnz	r3, 643a <zcbor_process_backup+0x20>
    6430:	2302      	movs	r3, #2
    6432:	60d3      	str	r3, [r2, #12]
		zcbor_print("No backups available.\r\n");
		ZCBOR_ERR(ZCBOR_ERR_NO_BACKUP_ACTIVE);
    6434:	2000      	movs	r0, #0
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
    6436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flags & ZCBOR_FLAG_RESTORE) {
    643a:	07e9      	lsls	r1, r5, #31
    643c:	d50d      	bpl.n	645a <zcbor_process_backup+0x40>
			if (state->constant_state->backup_list[i].payload_moved) {
    643e:	6811      	ldr	r1, [r2, #0]
    6440:	2218      	movs	r2, #24
		uint_fast32_t i = state->constant_state->current_backup - 1;
    6442:	3b01      	subs	r3, #1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    6444:	0768      	lsls	r0, r5, #29
			if (state->constant_state->backup_list[i].payload_moved) {
    6446:	fb02 1103 	mla	r1, r2, r3, r1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    644a:	d402      	bmi.n	6452 <zcbor_process_backup+0x38>
			if (state->constant_state->backup_list[i].payload_moved) {
    644c:	7c4b      	ldrb	r3, [r1, #17]
    644e:	2b00      	cmp	r3, #0
    6450:	d1f0      	bne.n	6434 <zcbor_process_backup+0x1a>
		memcpy(state, &state->constant_state->backup_list[i],
    6452:	2218      	movs	r2, #24
    6454:	4620      	mov	r0, r4
    6456:	f000 f87d 	bl	6554 <memcpy>
	if (flags & ZCBOR_FLAG_CONSUME) {
    645a:	07aa      	lsls	r2, r5, #30
		state->constant_state->current_backup--;
    645c:	bf41      	itttt	mi
    645e:	6962      	ldrmi	r2, [r4, #20]
    6460:	6853      	ldrmi	r3, [r2, #4]
    6462:	f103 33ff 	addmi.w	r3, r3, #4294967295
    6466:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
    6468:	45b0      	cmp	r8, r6
    646a:	d903      	bls.n	6474 <zcbor_process_backup+0x5a>
    646c:	2204      	movs	r2, #4
    646e:	6963      	ldr	r3, [r4, #20]
    6470:	60da      	str	r2, [r3, #12]
		ZCBOR_ERR(ZCBOR_ERR_HIGH_ELEM_COUNT);
    6472:	e7df      	b.n	6434 <zcbor_process_backup+0x1a>
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
    6474:	076b      	lsls	r3, r5, #29
    6476:	d401      	bmi.n	647c <zcbor_process_backup+0x62>
	return true;
    6478:	2001      	movs	r0, #1
    647a:	e7dc      	b.n	6436 <zcbor_process_backup+0x1c>
		state->payload = payload;
    647c:	6027      	str	r7, [r4, #0]
    647e:	e7fb      	b.n	6478 <zcbor_process_backup+0x5e>

00006480 <zcbor_union_start_code>:
}


bool zcbor_union_start_code(zcbor_state_t *state)
{
	if (!zcbor_new_backup(state, state->elem_count)) {
    6480:	6881      	ldr	r1, [r0, #8]
    6482:	f7ff bfac 	b.w	63de <zcbor_new_backup>

00006486 <zcbor_union_elem_code>:
}


bool zcbor_union_elem_code(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state, ZCBOR_FLAG_RESTORE, state->elem_count)) {
    6486:	2101      	movs	r1, #1
    6488:	6882      	ldr	r2, [r0, #8]
    648a:	f7ff bfc6 	b.w	641a <zcbor_process_backup>

0000648e <zcbor_union_end_code>:
	return true;
}

bool zcbor_union_end_code(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state, ZCBOR_FLAG_CONSUME, state->elem_count)) {
    648e:	2102      	movs	r1, #2
    6490:	6882      	ldr	r2, [r0, #8]
    6492:	f7ff bfc2 	b.w	641a <zcbor_process_backup>

00006496 <zcbor_new_state>:
	return true;
}

bool zcbor_new_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		const uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
    6496:	b510      	push	{r4, lr}
	state_array[0].payload = payload;
    6498:	6002      	str	r2, [r0, #0]
	state_array[0].payload_end = payload + payload_len;
    649a:	441a      	add	r2, r3
	state_array[0].elem_count = elem_count;
    649c:	9b02      	ldr	r3, [sp, #8]
{
    649e:	4604      	mov	r4, r0
	state_array[0].payload_end = payload + payload_len;
    64a0:	60c2      	str	r2, [r0, #12]
	state_array[0].elem_count = elem_count;
    64a2:	6083      	str	r3, [r0, #8]
	state_array[0].indefinite_length_array = false;
    64a4:	2000      	movs	r0, #0
	state_array[0].payload_moved = false;
	state_array[0].constant_state = NULL;

	if(n_states < 2) {
    64a6:	2901      	cmp	r1, #1
	state_array[0].indefinite_length_array = false;
    64a8:	8220      	strh	r0, [r4, #16]
	if(n_states < 2) {
    64aa:	d801      	bhi.n	64b0 <zcbor_new_state+0x1a>
	state_array[0].constant_state = NULL;
    64ac:	6160      	str	r0, [r4, #20]
#endif
	if (n_states > 2) {
		state_array[0].constant_state->backup_list = &state_array[1];
	}
	return true;
}
    64ae:	bd10      	pop	{r4, pc}
	state_array[0].constant_state = (struct zcbor_state_constant *)&state_array[n_states - 1];
    64b0:	2318      	movs	r3, #24
    64b2:	434b      	muls	r3, r1
    64b4:	3b18      	subs	r3, #24
    64b6:	18e2      	adds	r2, r4, r3
    64b8:	6162      	str	r2, [r4, #20]
	state_array[0].constant_state->backup_list = NULL;
    64ba:	50e0      	str	r0, [r4, r3]
	state_array[0].constant_state->num_backups = n_states - 2;
    64bc:	6963      	ldr	r3, [r4, #20]
    64be:	1e8a      	subs	r2, r1, #2
    64c0:	609a      	str	r2, [r3, #8]
	state_array[0].constant_state->current_backup = 0;
    64c2:	6963      	ldr	r3, [r4, #20]
	if (n_states > 2) {
    64c4:	2902      	cmp	r1, #2
	state_array[0].constant_state->current_backup = 0;
    64c6:	6058      	str	r0, [r3, #4]
	state_array[0].constant_state->error = ZCBOR_SUCCESS;
    64c8:	6963      	ldr	r3, [r4, #20]
    64ca:	60d8      	str	r0, [r3, #12]
	if (n_states > 2) {
    64cc:	d101      	bne.n	64d2 <zcbor_new_state+0x3c>
	return true;
    64ce:	2001      	movs	r0, #1
    64d0:	e7ed      	b.n	64ae <zcbor_new_state+0x18>
		state_array[0].constant_state->backup_list = &state_array[1];
    64d2:	6963      	ldr	r3, [r4, #20]
    64d4:	3418      	adds	r4, #24
    64d6:	601c      	str	r4, [r3, #0]
    64d8:	e7f9      	b.n	64ce <zcbor_new_state+0x38>

000064da <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    64da:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    64dc:	6800      	ldr	r0, [r0, #0]
    64de:	f7fc ba87 	b.w	29f0 <z_arm_fatal_error>

000064e2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    64e2:	2100      	movs	r1, #0
    64e4:	2001      	movs	r0, #1
    64e6:	f7fc ba83 	b.w	29f0 <z_arm_fatal_error>

000064ea <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    64ea:	b508      	push	{r3, lr}
	handler();
    64ec:	f7fc fae0 	bl	2ab0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    64f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    64f4:	f7fc bb3e 	b.w	2b74 <z_arm_exc_exit>

000064f8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    64f8:	4603      	mov	r3, r0
	size_t n = 0;
    64fa:	2000      	movs	r0, #0

	while (*s != '\0') {
    64fc:	5c1a      	ldrb	r2, [r3, r0]
    64fe:	b902      	cbnz	r2, 6502 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6500:	4770      	bx	lr
		n++;
    6502:	3001      	adds	r0, #1
    6504:	e7fa      	b.n	64fc <strlen+0x4>

00006506 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    6506:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    6508:	b15a      	cbz	r2, 6522 <memcmp+0x1c>
    650a:	3901      	subs	r1, #1
    650c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    650e:	f810 2b01 	ldrb.w	r2, [r0], #1
    6512:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    6516:	42a0      	cmp	r0, r4
    6518:	d001      	beq.n	651e <memcmp+0x18>
    651a:	429a      	cmp	r2, r3
    651c:	d0f7      	beq.n	650e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    651e:	1ad0      	subs	r0, r2, r3
}
    6520:	bd10      	pop	{r4, pc}
		return 0;
    6522:	4610      	mov	r0, r2
    6524:	e7fc      	b.n	6520 <memcmp+0x1a>

00006526 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    6526:	1a43      	subs	r3, r0, r1
    6528:	4293      	cmp	r3, r2
{
    652a:	b510      	push	{r4, lr}
    652c:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    6530:	d308      	bcc.n	6544 <memmove+0x1e>
	char *dest = d;
    6532:	4602      	mov	r2, r0
    6534:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    6536:	429a      	cmp	r2, r3
    6538:	d00b      	beq.n	6552 <memmove+0x2c>
			*dest = *src;
    653a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    653e:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    6542:	e7f8      	b.n	6536 <memmove+0x10>
    6544:	440a      	add	r2, r1
			dest[n] = src[n];
    6546:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    654a:	428a      	cmp	r2, r1
			dest[n] = src[n];
    654c:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    6550:	d1f9      	bne.n	6546 <memmove+0x20>
		}
	}

	return d;
}
    6552:	bd10      	pop	{r4, pc}

00006554 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    6554:	b510      	push	{r4, lr}
    6556:	1e43      	subs	r3, r0, #1
    6558:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    655a:	4291      	cmp	r1, r2
    655c:	d100      	bne.n	6560 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    655e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6560:	f811 4b01 	ldrb.w	r4, [r1], #1
    6564:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6568:	e7f7      	b.n	655a <memcpy+0x6>

0000656a <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    656a:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    656c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    656e:	4402      	add	r2, r0
    6570:	4293      	cmp	r3, r2
    6572:	d100      	bne.n	6576 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6574:	4770      	bx	lr
		*(d_byte++) = c_byte;
    6576:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    657a:	e7f9      	b.n	6570 <memset+0x6>

0000657c <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    657c:	684b      	ldr	r3, [r1, #4]
    657e:	2b01      	cmp	r3, #1
    6580:	dd07      	ble.n	6592 <sprintf_out+0x16>
		*(p->ptr) = c;
    6582:	680b      	ldr	r3, [r1, #0]
    6584:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    6586:	680b      	ldr	r3, [r1, #0]
    6588:	3301      	adds	r3, #1
    658a:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    658c:	684b      	ldr	r3, [r1, #4]
    658e:	3b01      	subs	r3, #1
    6590:	604b      	str	r3, [r1, #4]
}
    6592:	2000      	movs	r0, #0
    6594:	4770      	bx	lr

00006596 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6596:	220c      	movs	r2, #12
    6598:	6903      	ldr	r3, [r0, #16]
    659a:	b2c9      	uxtb	r1, r1
    659c:	fb01 3302 	mla	r3, r1, r2, r3
    65a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    65a2:	f000 0007 	and.w	r0, r0, #7
    65a6:	4770      	bx	lr

000065a8 <set_on_state>:
	__asm__ volatile(
    65a8:	f04f 0320 	mov.w	r3, #32
    65ac:	f3ef 8211 	mrs	r2, BASEPRI
    65b0:	f383 8812 	msr	BASEPRI_MAX, r3
    65b4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    65b8:	6803      	ldr	r3, [r0, #0]
    65ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    65be:	f043 0302 	orr.w	r3, r3, #2
    65c2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    65c4:	f382 8811 	msr	BASEPRI, r2
    65c8:	f3bf 8f6f 	isb	sy
}
    65cc:	4770      	bx	lr

000065ce <stop>:
{
    65ce:	b570      	push	{r4, r5, r6, lr}
    65d0:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    65d2:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    65d4:	f04f 0420 	mov.w	r4, #32
    65d8:	f3ef 8511 	mrs	r5, BASEPRI
    65dc:	f384 8812 	msr	BASEPRI_MAX, r4
    65e0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    65e4:	260c      	movs	r6, #12
    65e6:	fb06 3401 	mla	r4, r6, r1, r3
    65ea:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    65ec:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    65f0:	d008      	beq.n	6604 <stop+0x36>
    65f2:	42a2      	cmp	r2, r4
    65f4:	d006      	beq.n	6604 <stop+0x36>
	__asm__ volatile(
    65f6:	f385 8811 	msr	BASEPRI, r5
    65fa:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    65fe:	f04f 30ff 	mov.w	r0, #4294967295
}
    6602:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6604:	2201      	movs	r2, #1
    6606:	4371      	muls	r1, r6
    6608:	440b      	add	r3, r1
    660a:	641a      	str	r2, [r3, #64]	; 0x40
    660c:	f385 8811 	msr	BASEPRI, r5
    6610:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    6614:	6843      	ldr	r3, [r0, #4]
    6616:	440b      	add	r3, r1
    6618:	685b      	ldr	r3, [r3, #4]
    661a:	4798      	blx	r3
	return 0;
    661c:	2000      	movs	r0, #0
    661e:	e7f0      	b.n	6602 <stop+0x34>

00006620 <api_stop>:
	return stop(dev, subsys, CTX_API);
    6620:	2280      	movs	r2, #128	; 0x80
    6622:	f7ff bfd4 	b.w	65ce <stop>

00006626 <async_start>:
{
    6626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6628:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    662a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    662c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    662e:	f04f 0520 	mov.w	r5, #32
    6632:	f3ef 8611 	mrs	r6, BASEPRI
    6636:	f385 8812 	msr	BASEPRI_MAX, r5
    663a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    663e:	250c      	movs	r5, #12
    6640:	4369      	muls	r1, r5
    6642:	440c      	add	r4, r1
    6644:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6646:	f005 0c07 	and.w	ip, r5, #7
    664a:	f1bc 0f01 	cmp.w	ip, #1
    664e:	d10b      	bne.n	6668 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6650:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    6652:	f386 8811 	msr	BASEPRI, r6
    6656:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    665a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    665e:	6843      	ldr	r3, [r0, #4]
    6660:	585b      	ldr	r3, [r3, r1]
    6662:	4798      	blx	r3
	return 0;
    6664:	2000      	movs	r0, #0
}
    6666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6668:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    666c:	42af      	cmp	r7, r5
    666e:	f386 8811 	msr	BASEPRI, r6
    6672:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    6676:	bf0c      	ite	eq
    6678:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    667c:	f04f 30ff 	movne.w	r0, #4294967295
    6680:	e7f1      	b.n	6666 <async_start+0x40>

00006682 <api_start>:
{
    6682:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6684:	2480      	movs	r4, #128	; 0x80
    6686:	9400      	str	r4, [sp, #0]
    6688:	f7ff ffcd 	bl	6626 <async_start>
}
    668c:	b002      	add	sp, #8
    668e:	bd10      	pop	{r4, pc}

00006690 <api_blocking_start>:
}
    6690:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6694:	4770      	bx	lr

00006696 <onoff_started_callback>:
{
    6696:	b410      	push	{r4}
	notify(mgr, 0);
    6698:	241c      	movs	r4, #28
	return &data->mgr[type];
    669a:	6900      	ldr	r0, [r0, #16]
    669c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    669e:	fb03 0004 	mla	r0, r3, r4, r0
    66a2:	2100      	movs	r1, #0
}
    66a4:	bc10      	pop	{r4}
	notify(mgr, 0);
    66a6:	4710      	bx	r2

000066a8 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    66a8:	2000      	movs	r0, #0
    66aa:	f001 bf63 	b.w	8574 <nrfx_clock_start>

000066ae <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    66ae:	2000      	movs	r0, #0
    66b0:	f001 bfa0 	b.w	85f4 <nrfx_clock_stop>

000066b4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66b4:	6843      	ldr	r3, [r0, #4]
}
    66b6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66b8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    66ba:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    66bc:	600b      	str	r3, [r1, #0]
}
    66be:	4770      	bx	lr

000066c0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66c0:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    66c2:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66c6:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    66c8:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    66cc:	6098      	str	r0, [r3, #8]
}
    66ce:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    66d0:	60d9      	str	r1, [r3, #12]
    66d2:	4770      	bx	lr

000066d4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66d4:	6843      	ldr	r3, [r0, #4]
}
    66d6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66d8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    66da:	6099      	str	r1, [r3, #8]
}
    66dc:	4770      	bx	lr

000066de <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66de:	6843      	ldr	r3, [r0, #4]
}
    66e0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66e2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    66e4:	60d9      	str	r1, [r3, #12]
}
    66e6:	4770      	bx	lr

000066e8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66e8:	6843      	ldr	r3, [r0, #4]
    66ea:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    66ec:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    66ee:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    66f2:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    66f4:	6090      	str	r0, [r2, #8]
}
    66f6:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    66f8:	60d3      	str	r3, [r2, #12]
    66fa:	4770      	bx	lr

000066fc <gpio_nrfx_manage_callback>:
{
    66fc:	b510      	push	{r4, lr}
	return port->data;
    66fe:	6903      	ldr	r3, [r0, #16]
	return list->head;
    6700:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    6702:	b1f8      	cbz	r0, 6744 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6704:	4288      	cmp	r0, r1
    6706:	d119      	bne.n	673c <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    6708:	689c      	ldr	r4, [r3, #8]
	return node->next;
    670a:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    670c:	42a1      	cmp	r1, r4
	list->head = node;
    670e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6710:	d100      	bne.n	6714 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    6712:	6098      	str	r0, [r3, #8]
	parent->next = child;
    6714:	2000      	movs	r0, #0
    6716:	6008      	str	r0, [r1, #0]
	if (set) {
    6718:	b12a      	cbz	r2, 6726 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    671a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    671c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    671e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    6720:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6722:	b902      	cbnz	r2, 6726 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    6724:	6099      	str	r1, [r3, #8]
	return 0;
    6726:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6728:	e010      	b.n	674c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    672a:	4281      	cmp	r1, r0
    672c:	d106      	bne.n	673c <gpio_nrfx_manage_callback+0x40>
	return node->next;
    672e:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    6730:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    6732:	6898      	ldr	r0, [r3, #8]
    6734:	4281      	cmp	r1, r0
    6736:	d1ed      	bne.n	6714 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    6738:	609c      	str	r4, [r3, #8]
}
    673a:	e7eb      	b.n	6714 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    673c:	4604      	mov	r4, r0
    673e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6740:	2800      	cmp	r0, #0
    6742:	d1f2      	bne.n	672a <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    6744:	2a00      	cmp	r2, #0
    6746:	d1e8      	bne.n	671a <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    6748:	f06f 0015 	mvn.w	r0, #21
}
    674c:	bd10      	pop	{r4, pc}

0000674e <is_regular_addr_valid>:
{
    674e:	b538      	push	{r3, r4, r5, lr}
    6750:	4605      	mov	r5, r0
    6752:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    6754:	f001 ff50 	bl	85f8 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    6758:	2d00      	cmp	r5, #0
    675a:	db07      	blt.n	676c <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    675c:	42a8      	cmp	r0, r5
    675e:	d905      	bls.n	676c <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    6760:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    6762:	4284      	cmp	r4, r0
    6764:	bf8c      	ite	hi
    6766:	2000      	movhi	r0, #0
    6768:	2001      	movls	r0, #1
}
    676a:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    676c:	2000      	movs	r0, #0
    676e:	e7fc      	b.n	676a <is_regular_addr_valid+0x1c>

00006770 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    6770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6772:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    6774:	2300      	movs	r3, #0
{
    6776:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
    6778:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
    677a:	6023      	str	r3, [r4, #0]
	info->index = 0U;
    677c:	60a3      	str	r3, [r4, #8]
{
    677e:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
    6780:	6913      	ldr	r3, [r2, #16]
    6782:	4669      	mov	r1, sp
    6784:	aa01      	add	r2, sp, #4
    6786:	4798      	blx	r3

	while (layout_size--) {
    6788:	9b01      	ldr	r3, [sp, #4]
    678a:	1e5a      	subs	r2, r3, #1
    678c:	9201      	str	r2, [sp, #4]
    678e:	b91b      	cbnz	r3, 6798 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    6790:	f06f 0015 	mvn.w	r0, #21
}
    6794:	b003      	add	sp, #12
    6796:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
    6798:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
    679a:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
    679c:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
    679e:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
    67a0:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
    67a2:	b985      	cbnz	r5, 67c6 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
    67a4:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
    67a6:	f8d0 c000 	ldr.w	ip, [r0]
    67aa:	4563      	cmp	r3, ip
    67ac:	bf28      	it	cs
    67ae:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
    67b0:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
    67b4:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
    67b6:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
    67b8:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
    67ba:	6802      	ldr	r2, [r0, #0]
    67bc:	429a      	cmp	r2, r3
    67be:	d806      	bhi.n	67ce <flash_get_page_info+0x5e>
		layout++;
    67c0:	3008      	adds	r0, #8
    67c2:	9000      	str	r0, [sp, #0]
    67c4:	e7e0      	b.n	6788 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
    67c6:	1a6b      	subs	r3, r5, r1
    67c8:	fbb3 f3f7 	udiv	r3, r3, r7
    67cc:	e7eb      	b.n	67a6 <flash_get_page_info+0x36>
			return 0;
    67ce:	2000      	movs	r0, #0
    67d0:	e7e0      	b.n	6794 <flash_get_page_info+0x24>

000067d2 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    67d2:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    67d4:	2200      	movs	r2, #0
    67d6:	f7ff bfcb 	b.w	6770 <flash_get_page_info>

000067da <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    67da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    67de:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    67e0:	6883      	ldr	r3, [r0, #8]
{
    67e2:	b086      	sub	sp, #24
    67e4:	4688      	mov	r8, r1
    67e6:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    67e8:	691b      	ldr	r3, [r3, #16]
    67ea:	aa02      	add	r2, sp, #8
    67ec:	a901      	add	r1, sp, #4
    67ee:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    67f0:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    67f2:	4625      	mov	r5, r4
    67f4:	9b02      	ldr	r3, [sp, #8]
    67f6:	42ab      	cmp	r3, r5
    67f8:	d802      	bhi.n	6800 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    67fa:	b006      	add	sp, #24
    67fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    6800:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    6802:	9f01      	ldr	r7, [sp, #4]
    6804:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    6808:	687b      	ldr	r3, [r7, #4]
    680a:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    680c:	683a      	ldr	r2, [r7, #0]
    680e:	eb0a 0306 	add.w	r3, sl, r6
    6812:	42b2      	cmp	r2, r6
    6814:	d802      	bhi.n	681c <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    6816:	469a      	mov	sl, r3
    6818:	3501      	adds	r5, #1
    681a:	e7eb      	b.n	67f4 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    681c:	4649      	mov	r1, r9
			page_info.start_offset = off;
    681e:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    6820:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    6822:	a803      	add	r0, sp, #12
    6824:	47c0      	blx	r8
    6826:	2800      	cmp	r0, #0
    6828:	d0e7      	beq.n	67fa <flash_page_foreach+0x20>
			off += page_info.size;
    682a:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    682c:	3601      	adds	r6, #1
			off += page_info.size;
    682e:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    6830:	e7ec      	b.n	680c <flash_page_foreach+0x32>

00006832 <uarte_nrfx_config_get>:
{
    6832:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    6834:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    6836:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    683a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    683e:	2000      	movs	r0, #0
    6840:	4770      	bx	lr

00006842 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6842:	6843      	ldr	r3, [r0, #4]
    6844:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6846:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    684a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    684e:	4770      	bx	lr

00006850 <tx_start>:
{
    6850:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    6852:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    6854:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6856:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    685a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    685e:	2200      	movs	r2, #0
    6860:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    6864:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    6868:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    686c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6870:	6862      	ldr	r2, [r4, #4]
    6872:	06d2      	lsls	r2, r2, #27
    6874:	d508      	bpl.n	6888 <tx_start+0x38>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6876:	2108      	movs	r1, #8
	return config->uarte_regs;
    6878:	6842      	ldr	r2, [r0, #4]
    687a:	6812      	ldr	r2, [r2, #0]
    687c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    6880:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6884:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6888:	2201      	movs	r2, #1
    688a:	609a      	str	r2, [r3, #8]
}
    688c:	bd10      	pop	{r4, pc}

0000688e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    688e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    6890:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    6892:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6894:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6898:	b150      	cbz	r0, 68b0 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    689a:	2000      	movs	r0, #0
	*c = *data->rx_data;
    689c:	6992      	ldr	r2, [r2, #24]
    689e:	7812      	ldrb	r2, [r2, #0]
    68a0:	700a      	strb	r2, [r1, #0]
    68a2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    68a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68aa:	2201      	movs	r2, #1
    68ac:	601a      	str	r2, [r3, #0]
	return 0;
    68ae:	4770      	bx	lr
		return -1;
    68b0:	f04f 30ff 	mov.w	r0, #4294967295
}
    68b4:	4770      	bx	lr

000068b6 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    68b6:	2a00      	cmp	r2, #0
{
    68b8:	b510      	push	{r4, lr}
    68ba:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    68bc:	dd10      	ble.n	68e0 <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
    68be:	6843      	ldr	r3, [r0, #4]
    68c0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    68c2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    68c6:	b150      	cbz	r0, 68de <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    68c8:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = dev->data;
    68ca:	6922      	ldr	r2, [r4, #16]
    68cc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    68d0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68d4:	2001      	movs	r0, #1
		rx_data[num_rx++] = *data->rx_data;
    68d6:	6992      	ldr	r2, [r2, #24]
    68d8:	7812      	ldrb	r2, [r2, #0]
    68da:	700a      	strb	r2, [r1, #0]
    68dc:	6018      	str	r0, [r3, #0]
}
    68de:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    68e0:	2000      	movs	r0, #0
    68e2:	e7fc      	b.n	68de <uarte_nrfx_fifo_read+0x28>

000068e4 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    68e4:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    68e6:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    68e8:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    68ea:	f04f 0020 	mov.w	r0, #32
    68ee:	f3ef 8311 	mrs	r3, BASEPRI
    68f2:	f380 8812 	msr	BASEPRI_MAX, r0
    68f6:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    68fa:	2000      	movs	r0, #0
    68fc:	68c9      	ldr	r1, [r1, #12]
    68fe:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    6900:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    6904:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    6908:	f383 8811 	msr	BASEPRI, r3
    690c:	f3bf 8f6f 	isb	sy
}
    6910:	4770      	bx	lr

00006912 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    6912:	2201      	movs	r2, #1
    6914:	6903      	ldr	r3, [r0, #16]
    6916:	68db      	ldr	r3, [r3, #12]
    6918:	739a      	strb	r2, [r3, #14]
}
    691a:	4770      	bx	lr

0000691c <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    691c:	6903      	ldr	r3, [r0, #16]
    691e:	68db      	ldr	r3, [r3, #12]
    6920:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6922:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    6926:	b962      	cbnz	r2, 6942 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    6928:	6842      	ldr	r2, [r0, #4]
    692a:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    692c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    6930:	b140      	cbz	r0, 6944 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    6932:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6936:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    693a:	d003      	beq.n	6944 <uarte_nrfx_irq_tx_ready_complete+0x28>
    693c:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
    693e:	6119      	str	r1, [r3, #16]
    6940:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6942:	2000      	movs	r0, #0
}
    6944:	4770      	bx	lr

00006946 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    6946:	6843      	ldr	r3, [r0, #4]
    6948:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    694a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    694e:	3800      	subs	r0, #0
    6950:	bf18      	it	ne
    6952:	2001      	movne	r0, #1
    6954:	4770      	bx	lr

00006956 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    6956:	2210      	movs	r2, #16
	return config->uarte_regs;
    6958:	6843      	ldr	r3, [r0, #4]
    695a:	681b      	ldr	r3, [r3, #0]
    695c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6960:	4770      	bx	lr

00006962 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    6962:	2210      	movs	r2, #16
	return config->uarte_regs;
    6964:	6843      	ldr	r3, [r0, #4]
    6966:	681b      	ldr	r3, [r3, #0]
    6968:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    696c:	4770      	bx	lr

0000696e <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    696e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    6972:	6843      	ldr	r3, [r0, #4]
    6974:	681b      	ldr	r3, [r3, #0]
    6976:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    697a:	4770      	bx	lr

0000697c <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    697c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    6980:	6843      	ldr	r3, [r0, #4]
    6982:	681b      	ldr	r3, [r3, #0]
    6984:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6988:	4770      	bx	lr

0000698a <uarte_nrfx_irq_is_pending>:
{
    698a:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    698c:	6843      	ldr	r3, [r0, #4]
{
    698e:	4604      	mov	r4, r0
	return config->uarte_regs;
    6990:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    6992:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    6996:	025b      	lsls	r3, r3, #9
    6998:	d405      	bmi.n	69a6 <uarte_nrfx_irq_is_pending+0x1c>
    699a:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    699e:	f010 0010 	ands.w	r0, r0, #16
    69a2:	d106      	bne.n	69b2 <uarte_nrfx_irq_is_pending+0x28>
}
    69a4:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    69a6:	f7ff ffb9 	bl	691c <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    69aa:	2800      	cmp	r0, #0
    69ac:	d0f5      	beq.n	699a <uarte_nrfx_irq_is_pending+0x10>
		||
    69ae:	2001      	movs	r0, #1
    69b0:	e7f8      	b.n	69a4 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    69b2:	4620      	mov	r0, r4
    69b4:	f7ff ffc7 	bl	6946 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    69b8:	3800      	subs	r0, #0
    69ba:	bf18      	it	ne
    69bc:	2001      	movne	r0, #1
    69be:	e7f1      	b.n	69a4 <uarte_nrfx_irq_is_pending+0x1a>

000069c0 <uarte_nrfx_irq_update>:
}
    69c0:	2001      	movs	r0, #1
    69c2:	4770      	bx	lr

000069c4 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    69c4:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    69c6:	68d8      	ldr	r0, [r3, #12]
    69c8:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    69ca:	68db      	ldr	r3, [r3, #12]
    69cc:	605a      	str	r2, [r3, #4]
}
    69ce:	4770      	bx	lr

000069d0 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    69d0:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    69d2:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69d4:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    69d8:	b940      	cbnz	r0, 69ec <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    69da:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    69dc:	079b      	lsls	r3, r3, #30
    69de:	d406      	bmi.n	69ee <is_tx_ready.isra.0+0x1e>
    69e0:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    69e4:	3800      	subs	r0, #0
    69e6:	bf18      	it	ne
    69e8:	2001      	movne	r0, #1
    69ea:	4770      	bx	lr
    69ec:	2001      	movs	r0, #1
}
    69ee:	4770      	bx	lr

000069f0 <uarte_nrfx_fifo_fill>:
{
    69f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    69f2:	6906      	ldr	r6, [r0, #16]
{
    69f4:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
    69f6:	68f3      	ldr	r3, [r6, #12]
    69f8:	899c      	ldrh	r4, [r3, #12]
    69fa:	3310      	adds	r3, #16
    69fc:	4294      	cmp	r4, r2
    69fe:	bfa8      	it	ge
    6a00:	4614      	movge	r4, r2
    6a02:	2201      	movs	r2, #1
    6a04:	e8d3 0fef 	ldaex	r0, [r3]
    6a08:	2800      	cmp	r0, #0
    6a0a:	d103      	bne.n	6a14 <uarte_nrfx_fifo_fill+0x24>
    6a0c:	e8c3 2fe7 	stlex	r7, r2, [r3]
    6a10:	2f00      	cmp	r7, #0
    6a12:	d1f7      	bne.n	6a04 <uarte_nrfx_fifo_fill+0x14>
    6a14:	bf0c      	ite	eq
    6a16:	4613      	moveq	r3, r2
    6a18:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    6a1a:	d11f      	bne.n	6a5c <uarte_nrfx_fifo_fill+0x6c>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
    6a1c:	68f3      	ldr	r3, [r6, #12]
    6a1e:	4622      	mov	r2, r4
    6a20:	6898      	ldr	r0, [r3, #8]
    6a22:	f7ff fd97 	bl	6554 <memcpy>
	__asm__ volatile(
    6a26:	f04f 0320 	mov.w	r3, #32
    6a2a:	f3ef 8711 	mrs	r7, BASEPRI
    6a2e:	f383 8812 	msr	BASEPRI_MAX, r3
    6a32:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    6a36:	6868      	ldr	r0, [r5, #4]
    6a38:	f7ff ffca 	bl	69d0 <is_tx_ready.isra.0>
    6a3c:	68f3      	ldr	r3, [r6, #12]
    6a3e:	b938      	cbnz	r0, 6a50 <uarte_nrfx_fifo_fill+0x60>
		len = 0;
    6a40:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
    6a42:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
    6a44:	f387 8811 	msr	BASEPRI, r7
    6a48:	f3bf 8f6f 	isb	sy
}
    6a4c:	4620      	mov	r0, r4
    6a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    6a50:	4622      	mov	r2, r4
    6a52:	4628      	mov	r0, r5
    6a54:	6899      	ldr	r1, [r3, #8]
    6a56:	f7ff fefb 	bl	6850 <tx_start>
    6a5a:	e7f3      	b.n	6a44 <uarte_nrfx_fifo_fill+0x54>
		return 0;
    6a5c:	461c      	mov	r4, r3
    6a5e:	e7f5      	b.n	6a4c <uarte_nrfx_fifo_fill+0x5c>

00006a60 <uarte_nrfx_isr_int>:
{
    6a60:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
    6a62:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    6a64:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    6a66:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6a6a:	05c9      	lsls	r1, r1, #23
    6a6c:	d518      	bpl.n	6aa0 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a6e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    6a72:	b1a9      	cbz	r1, 6aa0 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    6a74:	f04f 0420 	mov.w	r4, #32
    6a78:	f3ef 8111 	mrs	r1, BASEPRI
    6a7c:	f384 8812 	msr	BASEPRI_MAX, r4
    6a80:	f3bf 8f6f 	isb	sy
    6a84:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6a88:	b134      	cbz	r4, 6a98 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a8a:	2400      	movs	r4, #0
    6a8c:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    6a90:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a94:	2401      	movs	r4, #1
    6a96:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    6a98:	f381 8811 	msr	BASEPRI, r1
    6a9c:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6aa0:	6852      	ldr	r2, [r2, #4]
    6aa2:	06d2      	lsls	r2, r2, #27
    6aa4:	d51a      	bpl.n	6adc <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    6aa6:	f04f 0220 	mov.w	r2, #32
    6aaa:	f3ef 8111 	mrs	r1, BASEPRI
    6aae:	f382 8812 	msr	BASEPRI_MAX, r2
    6ab2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ab6:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6aba:	b112      	cbz	r2, 6ac2 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6abc:	2200      	movs	r2, #0
    6abe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    6ac2:	6902      	ldr	r2, [r0, #16]
    6ac4:	68d2      	ldr	r2, [r2, #12]
    6ac6:	b10a      	cbz	r2, 6acc <uarte_nrfx_isr_int+0x6c>
    6ac8:	6912      	ldr	r2, [r2, #16]
    6aca:	b91a      	cbnz	r2, 6ad4 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    6acc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6ad0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    6ad4:	f381 8811 	msr	BASEPRI, r1
    6ad8:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
    6adc:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
    6ade:	68d4      	ldr	r4, [r2, #12]
    6ae0:	b16c      	cbz	r4, 6afe <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ae2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6ae6:	b161      	cbz	r1, 6b02 <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
    6ae8:	2100      	movs	r1, #0
    6aea:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
    6aec:	68d4      	ldr	r4, [r2, #12]
    6aee:	7ba4      	ldrb	r4, [r4, #14]
    6af0:	b13c      	cbz	r4, 6b02 <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
    6af2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    6af6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    6afa:	68d3      	ldr	r3, [r2, #12]
    6afc:	7399      	strb	r1, [r3, #14]
}
    6afe:	bc10      	pop	{r4}
    6b00:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b02:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    6b06:	b121      	cbz	r1, 6b12 <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b08:	2100      	movs	r1, #0
    6b0a:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    6b0e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    6b12:	68d2      	ldr	r2, [r2, #12]
    6b14:	6813      	ldr	r3, [r2, #0]
    6b16:	2b00      	cmp	r3, #0
    6b18:	d0f1      	beq.n	6afe <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    6b1a:	6851      	ldr	r1, [r2, #4]
}
    6b1c:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    6b1e:	4718      	bx	r3

00006b20 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6b20:	b510      	push	{r4, lr}
    6b22:	4604      	mov	r4, r0
    6b24:	2200      	movs	r2, #0
    6b26:	2101      	movs	r1, #1
    6b28:	2009      	movs	r0, #9
    6b2a:	f7fb ffab 	bl	2a84 <z_arm_irq_priority_set>
    6b2e:	2009      	movs	r0, #9
    6b30:	f7fb ff8c 	bl	2a4c <arch_irq_enable>
    6b34:	4620      	mov	r0, r4
    6b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6b3a:	f7fc bed1 	b.w	38e0 <uarte_instance_init.constprop.0>

00006b3e <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    6b3e:	b510      	push	{r4, lr}
    6b40:	4604      	mov	r4, r0
    6b42:	2200      	movs	r2, #0
    6b44:	2101      	movs	r1, #1
    6b46:	2008      	movs	r0, #8
    6b48:	f7fb ff9c 	bl	2a84 <z_arm_irq_priority_set>
    6b4c:	2008      	movs	r0, #8
    6b4e:	f7fb ff7d 	bl	2a4c <arch_irq_enable>
    6b52:	4620      	mov	r0, r4
    6b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6b58:	f7fc bec2 	b.w	38e0 <uarte_instance_init.constprop.0>

00006b5c <event_clear>:
    6b5c:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6b5e:	f100 0350 	add.w	r3, r0, #80	; 0x50
    6b62:	009b      	lsls	r3, r3, #2
    6b64:	b29b      	uxth	r3, r3
    6b66:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    6b6a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    6b6e:	601a      	str	r2, [r3, #0]
    6b70:	681b      	ldr	r3, [r3, #0]
}
    6b72:	4770      	bx	lr

00006b74 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6b74:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    6b76:	6843      	ldr	r3, [r0, #4]
    6b78:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    6b7a:	7a05      	ldrb	r5, [r0, #8]
    6b7c:	6844      	ldr	r4, [r0, #4]
    6b7e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    6b82:	42a3      	cmp	r3, r4
    6b84:	d302      	bcc.n	6b8c <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    6b86:	f06f 0001 	mvn.w	r0, #1
}
    6b8a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    6b8c:	795c      	ldrb	r4, [r3, #5]
    6b8e:	428c      	cmp	r4, r1
    6b90:	d001      	beq.n	6b96 <pinctrl_lookup_state+0x22>
		(*state)++;
    6b92:	3308      	adds	r3, #8
    6b94:	e7f0      	b.n	6b78 <pinctrl_lookup_state+0x4>
			return 0;
    6b96:	2000      	movs	r0, #0
    6b98:	e7f7      	b.n	6b8a <pinctrl_lookup_state+0x16>

00006b9a <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6b9a:	f7fe bc3d 	b.w	5418 <nrf_cc3xx_platform_init_no_rng>

00006b9e <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6b9e:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6ba0:	f7fb f966 	bl	1e70 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6ba4:	f7ff f9e7 	bl	5f76 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6ba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6bac:	f7fe bc34 	b.w	5418 <nrf_cc3xx_platform_init_no_rng>

00006bb0 <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    6bb0:	6880      	ldr	r0, [r0, #8]
    6bb2:	3818      	subs	r0, #24
    6bb4:	f020 0007 	bic.w	r0, r0, #7
}
    6bb8:	3810      	subs	r0, #16
    6bba:	4770      	bx	lr

00006bbc <boot_magic_compatible_check>:
    switch (tbl_val) {
    6bbc:	2804      	cmp	r0, #4
    6bbe:	d009      	beq.n	6bd4 <boot_magic_compatible_check+0x18>
    6bc0:	2805      	cmp	r0, #5
    6bc2:	d103      	bne.n	6bcc <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    6bc4:	1e48      	subs	r0, r1, #1
    6bc6:	bf18      	it	ne
    6bc8:	2001      	movne	r0, #1
    6bca:	4770      	bx	lr
        return tbl_val == val;
    6bcc:	1a43      	subs	r3, r0, r1
    6bce:	4258      	negs	r0, r3
    6bd0:	4158      	adcs	r0, r3
    6bd2:	4770      	bx	lr
    switch (tbl_val) {
    6bd4:	2001      	movs	r0, #1
}
    6bd6:	4770      	bx	lr

00006bd8 <bootutil_buffer_is_erased>:
{
    6bd8:	b538      	push	{r3, r4, r5, lr}
    6bda:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
    6bdc:	460c      	mov	r4, r1
    6bde:	b161      	cbz	r1, 6bfa <bootutil_buffer_is_erased+0x22>
    6be0:	b15a      	cbz	r2, 6bfa <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
    6be2:	f7ff f99b 	bl	5f1c <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    6be6:	4621      	mov	r1, r4
    6be8:	4425      	add	r5, r4
        if (u8b[i] != erased_val) {
    6bea:	f811 3b01 	ldrb.w	r3, [r1], #1
    6bee:	4283      	cmp	r3, r0
    6bf0:	d103      	bne.n	6bfa <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    6bf2:	42a9      	cmp	r1, r5
    6bf4:	d1f9      	bne.n	6bea <bootutil_buffer_is_erased+0x12>
    return true;
    6bf6:	2001      	movs	r0, #1
}
    6bf8:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    6bfa:	2000      	movs	r0, #0
    6bfc:	e7fc      	b.n	6bf8 <bootutil_buffer_is_erased+0x20>

00006bfe <boot_read_flag>:
{
    6bfe:	b538      	push	{r3, r4, r5, lr}
    6c00:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6c02:	2301      	movs	r3, #1
{
    6c04:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6c06:	4622      	mov	r2, r4
{
    6c08:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6c0a:	f7ff f942 	bl	5e92 <flash_area_read>
    if (rc < 0) {
    6c0e:	2800      	cmp	r0, #0
    6c10:	db0f      	blt.n	6c32 <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    6c12:	2201      	movs	r2, #1
    6c14:	4621      	mov	r1, r4
    6c16:	4628      	mov	r0, r5
    6c18:	f7ff ffde 	bl	6bd8 <bootutil_buffer_is_erased>
    6c1c:	b938      	cbnz	r0, 6c2e <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
    6c1e:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
    6c20:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
    6c22:	bf14      	ite	ne
    6c24:	2302      	movne	r3, #2
    6c26:	2301      	moveq	r3, #1
    6c28:	2000      	movs	r0, #0
    6c2a:	7023      	strb	r3, [r4, #0]
}
    6c2c:	bd38      	pop	{r3, r4, r5, pc}
    6c2e:	2303      	movs	r3, #3
    6c30:	e7fa      	b.n	6c28 <boot_read_flag+0x2a>
        return BOOT_EFLASH;
    6c32:	2001      	movs	r0, #1
    6c34:	e7fa      	b.n	6c2c <boot_read_flag+0x2e>

00006c36 <boot_write_trailer>:
{
    6c36:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6c3a:	461d      	mov	r5, r3
    6c3c:	4606      	mov	r6, r0
    6c3e:	460f      	mov	r7, r1
    6c40:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    6c42:	f7ff f964 	bl	5f0e <flash_area_align>
    align = ALIGN_UP(inlen, align);
    6c46:	1e6c      	subs	r4, r5, #1
    6c48:	4404      	add	r4, r0
    6c4a:	4240      	negs	r0, r0
    6c4c:	4004      	ands	r4, r0
    if (align > BOOT_MAX_ALIGN) {
    6c4e:	2c08      	cmp	r4, #8
    6c50:	d81a      	bhi.n	6c88 <boot_write_trailer+0x52>
    erased_val = flash_area_erased_val(fap);
    6c52:	4630      	mov	r0, r6
    6c54:	f7ff f962 	bl	5f1c <flash_area_erased_val>
    6c58:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    6c5a:	462a      	mov	r2, r5
    6c5c:	4641      	mov	r1, r8
    6c5e:	4668      	mov	r0, sp
    6c60:	f7ff fc78 	bl	6554 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    6c64:	4649      	mov	r1, r9
    6c66:	1b62      	subs	r2, r4, r5
    6c68:	eb0d 0005 	add.w	r0, sp, r5
    6c6c:	f7ff fc7d 	bl	656a <memset>
    rc = flash_area_write(fap, off, buf, align);
    6c70:	4623      	mov	r3, r4
    6c72:	466a      	mov	r2, sp
    6c74:	4639      	mov	r1, r7
    6c76:	4630      	mov	r0, r6
    6c78:	f7ff f920 	bl	5ebc <flash_area_write>
    if (rc != 0) {
    6c7c:	3800      	subs	r0, #0
    6c7e:	bf18      	it	ne
    6c80:	2001      	movne	r0, #1
}
    6c82:	b003      	add	sp, #12
    6c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    6c88:	f04f 30ff 	mov.w	r0, #4294967295
    6c8c:	e7f9      	b.n	6c82 <boot_write_trailer+0x4c>

00006c8e <boot_write_trailer_flag>:
{
    6c8e:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    6c90:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    6c92:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    6c96:	aa01      	add	r2, sp, #4
    6c98:	f7ff ffcd 	bl	6c36 <boot_write_trailer>
}
    6c9c:	b003      	add	sp, #12
    6c9e:	f85d fb04 	ldr.w	pc, [sp], #4

00006ca2 <boot_write_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    6ca2:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    6ca4:	2201      	movs	r2, #1
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    6ca6:	3918      	subs	r1, #24
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    6ca8:	f021 0107 	bic.w	r1, r1, #7
    6cac:	f7ff bfef 	b.w	6c8e <boot_write_trailer_flag>

00006cb0 <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    6cb0:	6882      	ldr	r2, [r0, #8]
    6cb2:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    6cb4:	f022 0207 	bic.w	r2, r2, #7
    6cb8:	f7ff bfa1 	b.w	6bfe <boot_read_flag>

00006cbc <boot_read_swap_state_by_id>:
{
    6cbc:	b513      	push	{r0, r1, r4, lr}
    6cbe:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    6cc0:	b2c0      	uxtb	r0, r0
    6cc2:	a901      	add	r1, sp, #4
    6cc4:	f7fb f87c 	bl	1dc0 <flash_area_open>
    if (rc != 0) {
    6cc8:	b950      	cbnz	r0, 6ce0 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    6cca:	4621      	mov	r1, r4
    6ccc:	9801      	ldr	r0, [sp, #4]
    6cce:	f7fd f91f 	bl	3f10 <boot_read_swap_state>
    6cd2:	4604      	mov	r4, r0
    flash_area_close(fap);
    6cd4:	9801      	ldr	r0, [sp, #4]
    6cd6:	f7ff f8db 	bl	5e90 <flash_area_close>
}
    6cda:	4620      	mov	r0, r4
    6cdc:	b002      	add	sp, #8
    6cde:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    6ce0:	2401      	movs	r4, #1
    6ce2:	e7fa      	b.n	6cda <boot_read_swap_state_by_id+0x1e>

00006ce4 <boot_write_swap_info>:
{
    6ce4:	b513      	push	{r0, r1, r4, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6ce6:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
{
    6cea:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6cec:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
    6cf0:	f7ff ff5e 	bl	6bb0 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    6cf4:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    6cf6:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    6cf8:	f10d 0207 	add.w	r2, sp, #7
    6cfc:	4620      	mov	r0, r4
    6cfe:	f7ff ff9a 	bl	6c36 <boot_write_trailer>
}
    6d02:	b002      	add	sp, #8
    6d04:	bd10      	pop	{r4, pc}

00006d06 <_mbedtls_init>:
#if defined(CONFIG_MBEDTLS_DEBUG_LEVEL)
	mbedtls_debug_set_threshold(CONFIG_MBEDTLS_DEBUG_LEVEL);
#endif

	return 0;
}
    6d06:	2000      	movs	r0, #0
    6d08:	4770      	bx	lr

00006d0a <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    6d0a:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    6d0c:	6803      	ldr	r3, [r0, #0]
    6d0e:	1acd      	subs	r5, r1, r3
    6d10:	2d00      	cmp	r5, #0
    6d12:	dc02      	bgt.n	6d1a <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6d14:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
    6d18:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
    6d1a:	f993 6000 	ldrsb.w	r6, [r3]
    6d1e:	781c      	ldrb	r4, [r3, #0]
    6d20:	2e00      	cmp	r6, #0
    6d22:	db0a      	blt.n	6d3a <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
    6d24:	1c5c      	adds	r4, r3, #1
    6d26:	6004      	str	r4, [r0, #0]
    6d28:	781b      	ldrb	r3, [r3, #0]
    6d2a:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
    6d2c:	6803      	ldr	r3, [r0, #0]
    6d2e:	1ac9      	subs	r1, r1, r3
    6d30:	6813      	ldr	r3, [r2, #0]
    6d32:	428b      	cmp	r3, r1
    6d34:	d8ee      	bhi.n	6d14 <mbedtls_asn1_get_len+0xa>
    return( 0 );
    6d36:	2000      	movs	r0, #0
    6d38:	e7ee      	b.n	6d18 <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
    6d3a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    6d3e:	3c01      	subs	r4, #1
    6d40:	2c03      	cmp	r4, #3
    6d42:	d82b      	bhi.n	6d9c <mbedtls_asn1_get_len+0x92>
    6d44:	e8df f004 	tbb	[pc, r4]
    6d48:	21140a02 	.word	0x21140a02
            if( ( end - *p ) < 2 )
    6d4c:	2d01      	cmp	r5, #1
    6d4e:	d0e1      	beq.n	6d14 <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
    6d50:	785b      	ldrb	r3, [r3, #1]
    6d52:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    6d54:	6803      	ldr	r3, [r0, #0]
    6d56:	3302      	adds	r3, #2
            (*p) += 5;
    6d58:	6003      	str	r3, [r0, #0]
            break;
    6d5a:	e7e7      	b.n	6d2c <mbedtls_asn1_get_len+0x22>
            if( ( end - *p ) < 3 )
    6d5c:	2d02      	cmp	r5, #2
    6d5e:	ddd9      	ble.n	6d14 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6d60:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    6d64:	ba5b      	rev16	r3, r3
    6d66:	b29b      	uxth	r3, r3
    6d68:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    6d6a:	6803      	ldr	r3, [r0, #0]
    6d6c:	3303      	adds	r3, #3
    6d6e:	e7f3      	b.n	6d58 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 4 )
    6d70:	2d03      	cmp	r5, #3
    6d72:	ddcf      	ble.n	6d14 <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6d74:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    6d76:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6d78:	0224      	lsls	r4, r4, #8
    6d7a:	78db      	ldrb	r3, [r3, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
    6d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6d80:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    6d82:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    6d84:	6803      	ldr	r3, [r0, #0]
    6d86:	3304      	adds	r3, #4
    6d88:	e7e6      	b.n	6d58 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 5 )
    6d8a:	2d04      	cmp	r5, #4
    6d8c:	ddc2      	ble.n	6d14 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6d8e:	f8d3 3001 	ldr.w	r3, [r3, #1]
    6d92:	ba1b      	rev	r3, r3
    6d94:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    6d96:	6803      	ldr	r3, [r0, #0]
    6d98:	3305      	adds	r3, #5
    6d9a:	e7dd      	b.n	6d58 <mbedtls_asn1_get_len+0x4e>
        switch( **p & 0x7F )
    6d9c:	f06f 0063 	mvn.w	r0, #99	; 0x63
    6da0:	e7ba      	b.n	6d18 <mbedtls_asn1_get_len+0xe>

00006da2 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    6da2:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    6da4:	6804      	ldr	r4, [r0, #0]
    6da6:	1b0e      	subs	r6, r1, r4
    6da8:	2e00      	cmp	r6, #0
    6daa:	dd07      	ble.n	6dbc <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    6dac:	7826      	ldrb	r6, [r4, #0]
    6dae:	429e      	cmp	r6, r3
    6db0:	d108      	bne.n	6dc4 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    6db2:	3401      	adds	r4, #1
    6db4:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    6db6:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    6db8:	f7ff bfa7 	b.w	6d0a <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6dbc:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    6dc0:	bc70      	pop	{r4, r5, r6}
    6dc2:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    6dc4:	f06f 0061 	mvn.w	r0, #97	; 0x61
    6dc8:	e7fa      	b.n	6dc0 <mbedtls_asn1_get_tag+0x1e>

00006dca <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    6dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    6dcc:	2302      	movs	r3, #2
{
    6dce:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    6dd0:	aa01      	add	r2, sp, #4
{
    6dd2:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    6dd4:	f7ff ffe5 	bl	6da2 <mbedtls_asn1_get_tag>
    6dd8:	b940      	cbnz	r0, 6dec <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    6dda:	9e01      	ldr	r6, [sp, #4]
    6ddc:	4628      	mov	r0, r5
    6dde:	4632      	mov	r2, r6
    6de0:	6821      	ldr	r1, [r4, #0]
    6de2:	f000 fb18 	bl	7416 <mbedtls_mpi_read_binary>

    *p += len;
    6de6:	6823      	ldr	r3, [r4, #0]
    6de8:	4433      	add	r3, r6
    6dea:	6023      	str	r3, [r4, #0]

    return( ret );
}
    6dec:	b002      	add	sp, #8
    6dee:	bd70      	pop	{r4, r5, r6, pc}

00006df0 <mpi_mul_hlp>:
#endif
void mpi_mul_hlp( size_t i,
                  const mbedtls_mpi_uint *s,
                  mbedtls_mpi_uint *d,
                  mbedtls_mpi_uint b )
{
    6df0:	b5f0      	push	{r4, r5, r6, r7, lr}
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    6df2:	4684      	mov	ip, r0
{
    6df4:	4617      	mov	r7, r2
    6df6:	460e      	mov	r6, r1
    6df8:	4614      	mov	r4, r2
    mbedtls_mpi_uint c = 0, t = 0;
    6dfa:	2500      	movs	r5, #0
    for( ; i >= 16; i -= 16 )
    6dfc:	f1bc 0f0f 	cmp.w	ip, #15
    6e00:	f106 0640 	add.w	r6, r6, #64	; 0x40
    6e04:	f104 0440 	add.w	r4, r4, #64	; 0x40
    6e08:	d877      	bhi.n	6efa <mpi_mul_hlp+0x10a>
    6e0a:	f06f 020f 	mvn.w	r2, #15
    6e0e:	0904      	lsrs	r4, r0, #4
    6e10:	fb02 0004 	mla	r0, r2, r4, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    6e14:	2807      	cmp	r0, #7
    6e16:	ea4f 1c84 	mov.w	ip, r4, lsl #6
    6e1a:	eb01 1684 	add.w	r6, r1, r4, lsl #6
    6e1e:	eb07 1484 	add.w	r4, r7, r4, lsl #6
    6e22:	d95d      	bls.n	6ee0 <mpi_mul_hlp+0xf0>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    6e24:	f851 100c 	ldr.w	r1, [r1, ip]
    for( ; i >= 8; i -= 8 )
    6e28:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
    6e2a:	fba3 1201 	umull	r1, r2, r3, r1
    6e2e:	1869      	adds	r1, r5, r1
    6e30:	f857 500c 	ldr.w	r5, [r7, ip]
    6e34:	f142 0200 	adc.w	r2, r2, #0
    6e38:	1949      	adds	r1, r1, r5
    6e3a:	f847 100c 	str.w	r1, [r7, ip]
    6e3e:	6871      	ldr	r1, [r6, #4]
    6e40:	f142 0200 	adc.w	r2, r2, #0
    6e44:	fba3 5101 	umull	r5, r1, r3, r1
    6e48:	1952      	adds	r2, r2, r5
    6e4a:	6865      	ldr	r5, [r4, #4]
    6e4c:	f141 0100 	adc.w	r1, r1, #0
    6e50:	1952      	adds	r2, r2, r5
    6e52:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
    6e54:	68b2      	ldr	r2, [r6, #8]
        MULADDC_CORE   MULADDC_CORE
    6e56:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    6e5a:	fba3 5202 	umull	r5, r2, r3, r2
    6e5e:	1949      	adds	r1, r1, r5
    6e60:	68a5      	ldr	r5, [r4, #8]
    6e62:	f142 0200 	adc.w	r2, r2, #0
    6e66:	1949      	adds	r1, r1, r5
    6e68:	60a1      	str	r1, [r4, #8]
    6e6a:	68f1      	ldr	r1, [r6, #12]
    6e6c:	f142 0200 	adc.w	r2, r2, #0
    6e70:	fba3 5101 	umull	r5, r1, r3, r1
    6e74:	1952      	adds	r2, r2, r5
    6e76:	68e5      	ldr	r5, [r4, #12]
    6e78:	f141 0100 	adc.w	r1, r1, #0
    6e7c:	1952      	adds	r2, r2, r5
    6e7e:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
    6e80:	6932      	ldr	r2, [r6, #16]
        MULADDC_CORE   MULADDC_CORE
    6e82:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    6e86:	fba3 5202 	umull	r5, r2, r3, r2
    6e8a:	1949      	adds	r1, r1, r5
    6e8c:	6925      	ldr	r5, [r4, #16]
    6e8e:	f142 0200 	adc.w	r2, r2, #0
    6e92:	1949      	adds	r1, r1, r5
    6e94:	6121      	str	r1, [r4, #16]
    6e96:	6971      	ldr	r1, [r6, #20]
    6e98:	f142 0200 	adc.w	r2, r2, #0
    6e9c:	fba3 5101 	umull	r5, r1, r3, r1
    6ea0:	1952      	adds	r2, r2, r5
    6ea2:	6965      	ldr	r5, [r4, #20]
    6ea4:	f141 0100 	adc.w	r1, r1, #0
    6ea8:	1952      	adds	r2, r2, r5
    6eaa:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
    6eac:	69b2      	ldr	r2, [r6, #24]
        MULADDC_CORE   MULADDC_CORE
    6eae:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    6eb2:	fba3 5202 	umull	r5, r2, r3, r2
    6eb6:	1949      	adds	r1, r1, r5
    6eb8:	69a5      	ldr	r5, [r4, #24]
    6eba:	f142 0200 	adc.w	r2, r2, #0
    6ebe:	1949      	adds	r1, r1, r5
    6ec0:	61a1      	str	r1, [r4, #24]
    6ec2:	69f1      	ldr	r1, [r6, #28]
    6ec4:	f142 0200 	adc.w	r2, r2, #0
    6ec8:	fba3 1501 	umull	r1, r5, r3, r1
    6ecc:	1852      	adds	r2, r2, r1
    6ece:	69e1      	ldr	r1, [r4, #28]
    6ed0:	f145 0500 	adc.w	r5, r5, #0
    6ed4:	1852      	adds	r2, r2, r1
    6ed6:	61e2      	str	r2, [r4, #28]
    6ed8:	f145 0500 	adc.w	r5, r5, #0
    6edc:	3420      	adds	r4, #32
    6ede:	3620      	adds	r6, #32
    6ee0:	4627      	mov	r7, r4
    6ee2:	ea4f 0c80 	mov.w	ip, r0, lsl #2
    6ee6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    6eea:	42b0      	cmp	r0, r6
    6eec:	f040 8106 	bne.w	70fc <mpi_mul_hlp+0x30c>
    6ef0:	4464      	add	r4, ip
    }
#endif /* MULADDC_HUIT */

    t++;

    while( c != 0 )
    6ef2:	2d00      	cmp	r5, #0
    6ef4:	f040 8110 	bne.w	7118 <mpi_mul_hlp+0x328>
    {
        *d += c; c = ( *d < c ); d++;
    }
}
    6ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MULADDC_CORE   MULADDC_CORE
    6efa:	f856 2c40 	ldr.w	r2, [r6, #-64]
    for( ; i >= 16; i -= 16 )
    6efe:	f1ac 0c10 	sub.w	ip, ip, #16
        MULADDC_CORE   MULADDC_CORE
    6f02:	fba3 e202 	umull	lr, r2, r3, r2
    6f06:	eb15 0e0e 	adds.w	lr, r5, lr
    6f0a:	f854 5c40 	ldr.w	r5, [r4, #-64]
    6f0e:	f142 0200 	adc.w	r2, r2, #0
    6f12:	eb15 050e 	adds.w	r5, r5, lr
    6f16:	f844 5c40 	str.w	r5, [r4, #-64]
    6f1a:	f856 5c3c 	ldr.w	r5, [r6, #-60]
    6f1e:	f142 0200 	adc.w	r2, r2, #0
    6f22:	fba3 e505 	umull	lr, r5, r3, r5
    6f26:	eb12 0e0e 	adds.w	lr, r2, lr
    6f2a:	f854 2c3c 	ldr.w	r2, [r4, #-60]
    6f2e:	f145 0500 	adc.w	r5, r5, #0
    6f32:	eb12 020e 	adds.w	r2, r2, lr
    6f36:	f844 2c3c 	str.w	r2, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
    6f3a:	f856 2c38 	ldr.w	r2, [r6, #-56]
        MULADDC_CORE   MULADDC_CORE
    6f3e:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    6f42:	fba3 e202 	umull	lr, r2, r3, r2
    6f46:	eb15 0e0e 	adds.w	lr, r5, lr
    6f4a:	f854 5c38 	ldr.w	r5, [r4, #-56]
    6f4e:	f142 0200 	adc.w	r2, r2, #0
    6f52:	eb15 050e 	adds.w	r5, r5, lr
    6f56:	f844 5c38 	str.w	r5, [r4, #-56]
    6f5a:	f856 5c34 	ldr.w	r5, [r6, #-52]
    6f5e:	f142 0200 	adc.w	r2, r2, #0
    6f62:	fba3 e505 	umull	lr, r5, r3, r5
    6f66:	eb12 0e0e 	adds.w	lr, r2, lr
    6f6a:	f854 2c34 	ldr.w	r2, [r4, #-52]
    6f6e:	f145 0500 	adc.w	r5, r5, #0
    6f72:	eb12 020e 	adds.w	r2, r2, lr
    6f76:	f844 2c34 	str.w	r2, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
    6f7a:	f856 2c30 	ldr.w	r2, [r6, #-48]
        MULADDC_CORE   MULADDC_CORE
    6f7e:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    6f82:	fba3 e202 	umull	lr, r2, r3, r2
    6f86:	eb15 0e0e 	adds.w	lr, r5, lr
    6f8a:	f854 5c30 	ldr.w	r5, [r4, #-48]
    6f8e:	f142 0200 	adc.w	r2, r2, #0
    6f92:	eb15 050e 	adds.w	r5, r5, lr
    6f96:	f844 5c30 	str.w	r5, [r4, #-48]
    6f9a:	f856 5c2c 	ldr.w	r5, [r6, #-44]
    6f9e:	f142 0200 	adc.w	r2, r2, #0
    6fa2:	fba3 e505 	umull	lr, r5, r3, r5
    6fa6:	eb12 0e0e 	adds.w	lr, r2, lr
    6faa:	f854 2c2c 	ldr.w	r2, [r4, #-44]
    6fae:	f145 0500 	adc.w	r5, r5, #0
    6fb2:	eb12 020e 	adds.w	r2, r2, lr
    6fb6:	f844 2c2c 	str.w	r2, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
    6fba:	f856 2c28 	ldr.w	r2, [r6, #-40]
        MULADDC_CORE   MULADDC_CORE
    6fbe:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    6fc2:	fba3 e202 	umull	lr, r2, r3, r2
    6fc6:	eb15 0e0e 	adds.w	lr, r5, lr
    6fca:	f854 5c28 	ldr.w	r5, [r4, #-40]
    6fce:	f142 0200 	adc.w	r2, r2, #0
    6fd2:	eb15 050e 	adds.w	r5, r5, lr
    6fd6:	f844 5c28 	str.w	r5, [r4, #-40]
    6fda:	f856 5c24 	ldr.w	r5, [r6, #-36]
    6fde:	f142 0200 	adc.w	r2, r2, #0
    6fe2:	fba3 e505 	umull	lr, r5, r3, r5
    6fe6:	eb12 0e0e 	adds.w	lr, r2, lr
    6fea:	f854 2c24 	ldr.w	r2, [r4, #-36]
    6fee:	f145 0500 	adc.w	r5, r5, #0
    6ff2:	eb12 020e 	adds.w	r2, r2, lr
    6ff6:	f844 2c24 	str.w	r2, [r4, #-36]
        MULADDC_CORE   MULADDC_CORE
    6ffa:	f856 2c20 	ldr.w	r2, [r6, #-32]
        MULADDC_CORE   MULADDC_CORE
    6ffe:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7002:	fba3 e202 	umull	lr, r2, r3, r2
    7006:	eb15 0e0e 	adds.w	lr, r5, lr
    700a:	f854 5c20 	ldr.w	r5, [r4, #-32]
    700e:	f142 0200 	adc.w	r2, r2, #0
    7012:	eb15 050e 	adds.w	r5, r5, lr
    7016:	f844 5c20 	str.w	r5, [r4, #-32]
    701a:	f856 5c1c 	ldr.w	r5, [r6, #-28]
    701e:	f142 0200 	adc.w	r2, r2, #0
    7022:	fba3 e505 	umull	lr, r5, r3, r5
    7026:	eb12 0e0e 	adds.w	lr, r2, lr
    702a:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    702e:	f145 0500 	adc.w	r5, r5, #0
    7032:	eb12 020e 	adds.w	r2, r2, lr
    7036:	f844 2c1c 	str.w	r2, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
    703a:	f856 2c18 	ldr.w	r2, [r6, #-24]
        MULADDC_CORE   MULADDC_CORE
    703e:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7042:	fba3 e202 	umull	lr, r2, r3, r2
    7046:	eb15 0e0e 	adds.w	lr, r5, lr
    704a:	f854 5c18 	ldr.w	r5, [r4, #-24]
    704e:	f142 0200 	adc.w	r2, r2, #0
    7052:	eb15 050e 	adds.w	r5, r5, lr
    7056:	f844 5c18 	str.w	r5, [r4, #-24]
    705a:	f856 5c14 	ldr.w	r5, [r6, #-20]
    705e:	f142 0200 	adc.w	r2, r2, #0
    7062:	fba3 e505 	umull	lr, r5, r3, r5
    7066:	eb12 0e0e 	adds.w	lr, r2, lr
    706a:	f854 2c14 	ldr.w	r2, [r4, #-20]
    706e:	f145 0500 	adc.w	r5, r5, #0
    7072:	eb12 020e 	adds.w	r2, r2, lr
    7076:	f844 2c14 	str.w	r2, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
    707a:	f856 2c10 	ldr.w	r2, [r6, #-16]
        MULADDC_CORE   MULADDC_CORE
    707e:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7082:	fba3 e202 	umull	lr, r2, r3, r2
    7086:	eb15 0e0e 	adds.w	lr, r5, lr
    708a:	f854 5c10 	ldr.w	r5, [r4, #-16]
    708e:	f142 0200 	adc.w	r2, r2, #0
    7092:	eb15 050e 	adds.w	r5, r5, lr
    7096:	f844 5c10 	str.w	r5, [r4, #-16]
    709a:	f856 5c0c 	ldr.w	r5, [r6, #-12]
    709e:	f142 0200 	adc.w	r2, r2, #0
    70a2:	fba3 e505 	umull	lr, r5, r3, r5
    70a6:	eb12 0e0e 	adds.w	lr, r2, lr
    70aa:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    70ae:	f145 0500 	adc.w	r5, r5, #0
    70b2:	eb12 020e 	adds.w	r2, r2, lr
    70b6:	f844 2c0c 	str.w	r2, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
    70ba:	f856 2c08 	ldr.w	r2, [r6, #-8]
        MULADDC_CORE   MULADDC_CORE
    70be:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    70c2:	fba3 e202 	umull	lr, r2, r3, r2
    70c6:	eb15 0e0e 	adds.w	lr, r5, lr
    70ca:	f854 5c08 	ldr.w	r5, [r4, #-8]
    70ce:	f142 0200 	adc.w	r2, r2, #0
    70d2:	eb15 050e 	adds.w	r5, r5, lr
    70d6:	f844 5c08 	str.w	r5, [r4, #-8]
    70da:	f856 5c04 	ldr.w	r5, [r6, #-4]
    70de:	f142 0200 	adc.w	r2, r2, #0
    70e2:	fba3 5e05 	umull	r5, lr, r3, r5
    70e6:	1952      	adds	r2, r2, r5
    70e8:	f854 5c04 	ldr.w	r5, [r4, #-4]
    70ec:	f14e 0e00 	adc.w	lr, lr, #0
    70f0:	18aa      	adds	r2, r5, r2
    70f2:	f14e 0500 	adc.w	r5, lr, #0
    70f6:	f844 2c04 	str.w	r2, [r4, #-4]
    for( ; i >= 16; i -= 16 )
    70fa:	e67f      	b.n	6dfc <mpi_mul_hlp+0xc>
        MULADDC_CORE
    70fc:	f856 2b04 	ldr.w	r2, [r6], #4
    7100:	fba3 2102 	umull	r2, r1, r3, r2
    7104:	18aa      	adds	r2, r5, r2
    7106:	f141 0500 	adc.w	r5, r1, #0
    710a:	6839      	ldr	r1, [r7, #0]
    710c:	1889      	adds	r1, r1, r2
    710e:	f145 0500 	adc.w	r5, r5, #0
    7112:	f847 1b04 	str.w	r1, [r7], #4
    for( ; i > 0; i-- )
    7116:	e6e8      	b.n	6eea <mpi_mul_hlp+0xfa>
        *d += c; c = ( *d < c ); d++;
    7118:	6823      	ldr	r3, [r4, #0]
    711a:	195b      	adds	r3, r3, r5
    711c:	bf2c      	ite	cs
    711e:	2501      	movcs	r5, #1
    7120:	2500      	movcc	r5, #0
    7122:	f844 3b04 	str.w	r3, [r4], #4
    7126:	e6e4      	b.n	6ef2 <mpi_mul_hlp+0x102>

00007128 <mpi_montmul>:
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    7128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    712c:	468a      	mov	sl, r1
    712e:	4617      	mov	r7, r2
    7130:	b085      	sub	sp, #20
    7132:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    7134:	9000      	str	r0, [sp, #0]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    7136:	6862      	ldr	r2, [r4, #4]
    7138:	68a0      	ldr	r0, [r4, #8]
    713a:	2100      	movs	r1, #0
    713c:	0092      	lsls	r2, r2, #2
{
    713e:	9303      	str	r3, [sp, #12]
    memset( T->p, 0, T->n * ciL );
    7140:	f7ff fa13 	bl	656a <memset>

    d = T->p;
    n = N->n;
    7144:	687e      	ldr	r6, [r7, #4]
    m = ( B->n < n ) ? B->n : n;
    7146:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
    714a:	68a5      	ldr	r5, [r4, #8]
    m = ( B->n < n ) ? B->n : n;
    714c:	42b3      	cmp	r3, r6
    714e:	bf28      	it	cs
    7150:	4633      	movcs	r3, r6
    d = T->p;
    7152:	46a9      	mov	r9, r5

    for( i = 0; i < n; i++ )
    7154:	f04f 0800 	mov.w	r8, #0
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    7158:	1c74      	adds	r4, r6, #1
    m = ( B->n < n ) ? B->n : n;
    715a:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
    715c:	00a4      	lsls	r4, r4, #2
        u0 = A->p[i];
    715e:	9b00      	ldr	r3, [sp, #0]
    for( i = 0; i < n; i++ )
    7160:	45b0      	cmp	r8, r6
        u0 = A->p[i];
    7162:	6898      	ldr	r0, [r3, #8]
    for( i = 0; i < n; i++ )
    7164:	d11c      	bne.n	71a0 <mpi_montmul+0x78>
    7166:	3c04      	subs	r4, #4
    7168:	4425      	add	r5, r4
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    716a:	4622      	mov	r2, r4
    716c:	4629      	mov	r1, r5
    716e:	f7ff f9f1 	bl	6554 <memcpy>
    mbedtls_mpi_uint c = 0, t, z;
    7172:	2200      	movs	r2, #0
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    7174:	592b      	ldr	r3, [r5, r4]
    7176:	1f28      	subs	r0, r5, #4
    7178:	3301      	adds	r3, #1
    717a:	512b      	str	r3, [r5, r4]
    for( i = 0; i < n; i++ )
    717c:	4613      	mov	r3, r2
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    717e:	f8d7 e008 	ldr.w	lr, [r7, #8]
    for( i = 0; i < n; i++ )
    7182:	429e      	cmp	r6, r3
    7184:	d12b      	bne.n	71de <mpi_montmul+0xb6>
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7186:	592b      	ldr	r3, [r5, r4]
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7188:	4630      	mov	r0, r6
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    718a:	1a9b      	subs	r3, r3, r2
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    718c:	462a      	mov	r2, r5
    718e:	9900      	ldr	r1, [sp, #0]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7190:	512b      	str	r3, [r5, r4]
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7192:	6889      	ldr	r1, [r1, #8]
    7194:	b2db      	uxtb	r3, r3
}
    7196:	b005      	add	sp, #20
    7198:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    719c:	f000 bfe5 	b.w	816a <mbedtls_ct_mpi_uint_cond_assign>
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    71a0:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
    71a4:	f850 b028 	ldr.w	fp, [r0, r8, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    71a8:	f8d9 3000 	ldr.w	r3, [r9]
    71ac:	6808      	ldr	r0, [r1, #0]
    71ae:	9a03      	ldr	r2, [sp, #12]
    71b0:	fb00 330b 	mla	r3, r0, fp, r3
    71b4:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
    71b6:	9801      	ldr	r0, [sp, #4]
    71b8:	464a      	mov	r2, r9
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    71ba:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
    71bc:	465b      	mov	r3, fp
    71be:	f7ff fe17 	bl	6df0 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    71c2:	464a      	mov	r2, r9
    71c4:	9b02      	ldr	r3, [sp, #8]
    71c6:	4630      	mov	r0, r6
    71c8:	68b9      	ldr	r1, [r7, #8]
    71ca:	f7ff fe11 	bl	6df0 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
    71ce:	2300      	movs	r3, #0
    71d0:	f849 bb04 	str.w	fp, [r9], #4
    71d4:	f849 3004 	str.w	r3, [r9, r4]
    for( i = 0; i < n; i++ )
    71d8:	f108 0801 	add.w	r8, r8, #1
    71dc:	e7bf      	b.n	715e <mpi_montmul+0x36>
        z = ( l[i] <  c );    t = l[i] - c;
    71de:	f850 cf04 	ldr.w	ip, [r0, #4]!
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    71e2:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    71e6:	ebac 0102 	sub.w	r1, ip, r2
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    71ea:	42b9      	cmp	r1, r7
    71ec:	bf2c      	ite	cs
    71ee:	f04f 0800 	movcs.w	r8, #0
    71f2:	f04f 0801 	movcc.w	r8, #1
    71f6:	1bc9      	subs	r1, r1, r7
    71f8:	4594      	cmp	ip, r2
    71fa:	bf2c      	ite	cs
    71fc:	4642      	movcs	r2, r8
    71fe:	f108 0201 	addcc.w	r2, r8, #1
    7202:	6001      	str	r1, [r0, #0]
    for( i = 0; i < n; i++ )
    7204:	3301      	adds	r3, #1
    7206:	e7bc      	b.n	7182 <mpi_montmul+0x5a>

00007208 <mpi_bigendian_to_host.part.0>:
static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
    7208:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    720a:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
    720e:	3a01      	subs	r2, #1
    7210:	eb00 0282 	add.w	r2, r0, r2, lsl #2
         cur_limb_left <= cur_limb_right;
    7214:	4282      	cmp	r2, r0
    7216:	d201      	bcs.n	721c <mpi_bigendian_to_host.part.0+0x14>
}
    7218:	b002      	add	sp, #8
    721a:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_uint_bigendian_to_host_c( x ) );
    721c:	6803      	ldr	r3, [r0, #0]
    mbedtls_mpi_uint tmp = 0;
    721e:	2400      	movs	r4, #0
    7220:	9301      	str	r3, [sp, #4]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    7222:	2304      	movs	r3, #4
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7224:	eb0d 0503 	add.w	r5, sp, r3
    7228:	4629      	mov	r1, r5
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    722a:	f815 6b01 	ldrb.w	r6, [r5], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    722e:	3b01      	subs	r3, #1
    7230:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7234:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7238:	d1f7      	bne.n	722a <mpi_bigendian_to_host.part.0+0x22>
    return( mpi_uint_bigendian_to_host_c( x ) );
    723a:	6815      	ldr	r5, [r2, #0]
    723c:	9501      	str	r5, [sp, #4]
    mbedtls_mpi_uint tmp = 0;
    723e:	461d      	mov	r5, r3
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7240:	3301      	adds	r3, #1
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7242:	f811 6b01 	ldrb.w	r6, [r1], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7246:	b2db      	uxtb	r3, r3
    7248:	2b04      	cmp	r3, #4
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    724a:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    724e:	d1f7      	bne.n	7240 <mpi_bigendian_to_host.part.0+0x38>
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    7250:	f840 5b04 	str.w	r5, [r0], #4
        *cur_limb_right = tmp;
    7254:	f842 4904 	str.w	r4, [r2], #-4
         cur_limb_left++, cur_limb_right-- )
    7258:	e7dc      	b.n	7214 <mpi_bigendian_to_host.part.0+0xc>

0000725a <mbedtls_mpi_init>:
    X->n = 0;
    725a:	2300      	movs	r3, #0
    725c:	2201      	movs	r2, #1
    X->p = NULL;
    725e:	6083      	str	r3, [r0, #8]
    X->n = 0;
    7260:	e9c0 2300 	strd	r2, r3, [r0]
}
    7264:	4770      	bx	lr

00007266 <mbedtls_mpi_free>:
{
    7266:	b510      	push	{r4, lr}
    if( X == NULL )
    7268:	4604      	mov	r4, r0
    726a:	b168      	cbz	r0, 7288 <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    726c:	6880      	ldr	r0, [r0, #8]
    726e:	b130      	cbz	r0, 727e <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    7270:	6861      	ldr	r1, [r4, #4]
    7272:	0089      	lsls	r1, r1, #2
    7274:	f7fe f920 	bl	54b8 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    7278:	68a0      	ldr	r0, [r4, #8]
    727a:	f7fd f8a9 	bl	43d0 <mbedtls_free>
    X->n = 0;
    727e:	2300      	movs	r3, #0
    7280:	2201      	movs	r2, #1
    7282:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    7286:	60a3      	str	r3, [r4, #8]
}
    7288:	bd10      	pop	{r4, pc}

0000728a <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    728a:	f242 7310 	movw	r3, #10000	; 0x2710
    728e:	4299      	cmp	r1, r3
{
    7290:	b570      	push	{r4, r5, r6, lr}
    7292:	4604      	mov	r4, r0
    7294:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    7296:	d902      	bls.n	729e <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    7298:	f06f 000f 	mvn.w	r0, #15
}
    729c:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    729e:	6843      	ldr	r3, [r0, #4]
    72a0:	428b      	cmp	r3, r1
    72a2:	d301      	bcc.n	72a8 <mbedtls_mpi_grow+0x1e>
    return( 0 );
    72a4:	2000      	movs	r0, #0
    72a6:	e7f9      	b.n	729c <mbedtls_mpi_grow+0x12>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    72a8:	2104      	movs	r1, #4
    72aa:	4628      	mov	r0, r5
    72ac:	f7fd f88a 	bl	43c4 <mbedtls_calloc>
    72b0:	4606      	mov	r6, r0
    72b2:	2800      	cmp	r0, #0
    72b4:	d0f0      	beq.n	7298 <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    72b6:	68a1      	ldr	r1, [r4, #8]
    72b8:	b159      	cbz	r1, 72d2 <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
    72ba:	6862      	ldr	r2, [r4, #4]
    72bc:	0092      	lsls	r2, r2, #2
    72be:	f7ff f949 	bl	6554 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    72c2:	6861      	ldr	r1, [r4, #4]
    72c4:	68a0      	ldr	r0, [r4, #8]
    72c6:	0089      	lsls	r1, r1, #2
    72c8:	f7fe f8f6 	bl	54b8 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    72cc:	68a0      	ldr	r0, [r4, #8]
    72ce:	f7fd f87f 	bl	43d0 <mbedtls_free>
        X->p = p;
    72d2:	e9c4 5601 	strd	r5, r6, [r4, #4]
    72d6:	e7e5      	b.n	72a4 <mbedtls_mpi_grow+0x1a>

000072d8 <mbedtls_mpi_resize_clear>:
{
    72d8:	b538      	push	{r3, r4, r5, lr}
    72da:	4604      	mov	r4, r0
    if( limbs == 0 )
    72dc:	460d      	mov	r5, r1
    72de:	b919      	cbnz	r1, 72e8 <mbedtls_mpi_resize_clear+0x10>
        mbedtls_mpi_free( X );
    72e0:	f7ff ffc1 	bl	7266 <mbedtls_mpi_free>
}
    72e4:	2000      	movs	r0, #0
    72e6:	bd38      	pop	{r3, r4, r5, pc}
    else if( X->n == limbs )
    72e8:	6842      	ldr	r2, [r0, #4]
    72ea:	428a      	cmp	r2, r1
    72ec:	d107      	bne.n	72fe <mbedtls_mpi_resize_clear+0x26>
        memset( X->p, 0, limbs * ciL );
    72ee:	2100      	movs	r1, #0
    72f0:	6880      	ldr	r0, [r0, #8]
    72f2:	0092      	lsls	r2, r2, #2
    72f4:	f7ff f939 	bl	656a <memset>
        X->s = 1;
    72f8:	2301      	movs	r3, #1
    72fa:	6023      	str	r3, [r4, #0]
        return( 0 );
    72fc:	e7f2      	b.n	72e4 <mbedtls_mpi_resize_clear+0xc>
        mbedtls_mpi_free( X );
    72fe:	f7ff ffb2 	bl	7266 <mbedtls_mpi_free>
        return( mbedtls_mpi_grow( X, limbs ) );
    7302:	4629      	mov	r1, r5
    7304:	4620      	mov	r0, r4
}
    7306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return( mbedtls_mpi_grow( X, limbs ) );
    730a:	f7ff bfbe 	b.w	728a <mbedtls_mpi_grow>

0000730e <mbedtls_mpi_copy>:
    if( X == Y )
    730e:	4288      	cmp	r0, r1
{
    7310:	b570      	push	{r4, r5, r6, lr}
    7312:	4605      	mov	r5, r0
    7314:	460e      	mov	r6, r1
    if( X == Y )
    7316:	d009      	beq.n	732c <mbedtls_mpi_copy+0x1e>
    if( Y->n == 0 )
    7318:	6849      	ldr	r1, [r1, #4]
        if( X->n != 0 )
    731a:	6842      	ldr	r2, [r0, #4]
    if( Y->n == 0 )
    731c:	b941      	cbnz	r1, 7330 <mbedtls_mpi_copy+0x22>
        if( X->n != 0 )
    731e:	b12a      	cbz	r2, 732c <mbedtls_mpi_copy+0x1e>
            X->s = 1;
    7320:	2301      	movs	r3, #1
            memset( X->p, 0, X->n * ciL );
    7322:	0092      	lsls	r2, r2, #2
            X->s = 1;
    7324:	6003      	str	r3, [r0, #0]
            memset( X->p, 0, X->n * ciL );
    7326:	6880      	ldr	r0, [r0, #8]
    7328:	f7ff f91f 	bl	656a <memset>
        return( 0 );
    732c:	2000      	movs	r0, #0
}
    732e:	bd70      	pop	{r4, r5, r6, pc}
    for( i = Y->n - 1; i > 0; i-- )
    7330:	1e4c      	subs	r4, r1, #1
    7332:	b984      	cbnz	r4, 7356 <mbedtls_mpi_copy+0x48>
    X->s = Y->s;
    7334:	6833      	ldr	r3, [r6, #0]
    i++;
    7336:	3401      	adds	r4, #1
    if( X->n < i )
    7338:	4294      	cmp	r4, r2
    X->s = Y->s;
    733a:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    733c:	d912      	bls.n	7364 <mbedtls_mpi_copy+0x56>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    733e:	4621      	mov	r1, r4
    7340:	4628      	mov	r0, r5
    7342:	f7ff ffa2 	bl	728a <mbedtls_mpi_grow>
    7346:	2800      	cmp	r0, #0
    7348:	d1f1      	bne.n	732e <mbedtls_mpi_copy+0x20>
    memcpy( X->p, Y->p, i * ciL );
    734a:	68b1      	ldr	r1, [r6, #8]
    734c:	68a8      	ldr	r0, [r5, #8]
    734e:	00a2      	lsls	r2, r4, #2
    7350:	f7ff f900 	bl	6554 <memcpy>
    7354:	e7ea      	b.n	732c <mbedtls_mpi_copy+0x1e>
        if( Y->p[i] != 0 )
    7356:	68b3      	ldr	r3, [r6, #8]
    7358:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    735c:	2b00      	cmp	r3, #0
    735e:	d1e9      	bne.n	7334 <mbedtls_mpi_copy+0x26>
    for( i = Y->n - 1; i > 0; i-- )
    7360:	3c01      	subs	r4, #1
    7362:	e7e6      	b.n	7332 <mbedtls_mpi_copy+0x24>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    7364:	68a8      	ldr	r0, [r5, #8]
    7366:	1b12      	subs	r2, r2, r4
    7368:	2100      	movs	r1, #0
    736a:	0092      	lsls	r2, r2, #2
    736c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    7370:	f7ff f8fb 	bl	656a <memset>
    7374:	e7e9      	b.n	734a <mbedtls_mpi_copy+0x3c>

00007376 <mbedtls_mpi_lset>:
{
    7376:	b570      	push	{r4, r5, r6, lr}
    7378:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    737a:	2101      	movs	r1, #1
{
    737c:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    737e:	f7ff ff84 	bl	728a <mbedtls_mpi_grow>
    7382:	4605      	mov	r5, r0
    7384:	b988      	cbnz	r0, 73aa <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
    7386:	6862      	ldr	r2, [r4, #4]
    7388:	4601      	mov	r1, r0
    738a:	0092      	lsls	r2, r2, #2
    738c:	68a0      	ldr	r0, [r4, #8]
    738e:	f7ff f8ec 	bl	656a <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    7392:	68a3      	ldr	r3, [r4, #8]
    7394:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
    7398:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
    739a:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    739e:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    73a0:	bfac      	ite	ge
    73a2:	2301      	movge	r3, #1
    73a4:	f04f 33ff 	movlt.w	r3, #4294967295
    73a8:	6023      	str	r3, [r4, #0]
}
    73aa:	4628      	mov	r0, r5
    73ac:	bd70      	pop	{r4, r5, r6, pc}

000073ae <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    73ae:	6843      	ldr	r3, [r0, #4]
    73b0:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    73b4:	bf3f      	itttt	cc
    73b6:	6883      	ldrcc	r3, [r0, #8]
    73b8:	094a      	lsrcc	r2, r1, #5
    73ba:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    73be:	f001 011f 	andcc.w	r1, r1, #31
    73c2:	bf3a      	itte	cc
    73c4:	40c8      	lsrcc	r0, r1
    73c6:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
    73ca:	2000      	movcs	r0, #0
}
    73cc:	4770      	bx	lr

000073ce <mbedtls_mpi_bitlen>:
{
    73ce:	4602      	mov	r2, r0
    if( X->n == 0 )
    73d0:	6840      	ldr	r0, [r0, #4]
    73d2:	b198      	cbz	r0, 73fc <mbedtls_mpi_bitlen+0x2e>
        if( X->p[i] != 0 )
    73d4:	6892      	ldr	r2, [r2, #8]
    for( i = X->n - 1; i > 0; i-- )
    73d6:	1e43      	subs	r3, r0, #1
    73d8:	b98b      	cbnz	r3, 73fe <mbedtls_mpi_bitlen+0x30>
    j = biL - mbedtls_clz( X->p[i] );
    73da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
    73de:	2000      	movs	r0, #0
        if( x & mask ) break;
    73e0:	2900      	cmp	r1, #0
    73e2:	db08      	blt.n	73f6 <mbedtls_mpi_bitlen+0x28>
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    73e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    for( j = 0; j < biL; j++ )
    73e8:	3001      	adds	r0, #1
    73ea:	2820      	cmp	r0, #32
        mask >>= 1;
    73ec:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    73f0:	d001      	beq.n	73f6 <mbedtls_mpi_bitlen+0x28>
        if( x & mask ) break;
    73f2:	4211      	tst	r1, r2
    73f4:	d0f8      	beq.n	73e8 <mbedtls_mpi_bitlen+0x1a>
    return( ( i * biL ) + j );
    73f6:	3301      	adds	r3, #1
    73f8:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
    73fc:	4770      	bx	lr
        if( X->p[i] != 0 )
    73fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    7402:	2900      	cmp	r1, #0
    7404:	d1e9      	bne.n	73da <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
    7406:	3b01      	subs	r3, #1
    7408:	e7e6      	b.n	73d8 <mbedtls_mpi_bitlen+0xa>

0000740a <mbedtls_mpi_size>:
{
    740a:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    740c:	f7ff ffdf 	bl	73ce <mbedtls_mpi_bitlen>
    7410:	3007      	adds	r0, #7
}
    7412:	08c0      	lsrs	r0, r0, #3
    7414:	bd08      	pop	{r3, pc}

00007416 <mbedtls_mpi_read_binary>:
{
    7416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    741a:	f012 0403 	ands.w	r4, r2, #3
    741e:	bf18      	it	ne
    7420:	2401      	movne	r4, #1
    7422:	eb04 0492 	add.w	r4, r4, r2, lsr #2
{
    7426:	4688      	mov	r8, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    7428:	4621      	mov	r1, r4
{
    742a:	4607      	mov	r7, r0
    742c:	4615      	mov	r5, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    742e:	f7ff ff53 	bl	72d8 <mbedtls_mpi_resize_clear>
    7432:	4606      	mov	r6, r0
    7434:	b968      	cbnz	r0, 7452 <mbedtls_mpi_read_binary+0x3c>
    if( buflen != 0 )
    7436:	b165      	cbz	r5, 7452 <mbedtls_mpi_read_binary+0x3c>
        memcpy( Xp + overhead, buf, buflen );
    7438:	68bb      	ldr	r3, [r7, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
    743a:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
        memcpy( Xp + overhead, buf, buflen );
    743e:	462a      	mov	r2, r5
    7440:	4641      	mov	r1, r8
    7442:	4418      	add	r0, r3
    7444:	f7ff f886 	bl	6554 <memcpy>
        mpi_bigendian_to_host( X->p, limbs );
    7448:	68b8      	ldr	r0, [r7, #8]
    if( limbs == 0 )
    744a:	b114      	cbz	r4, 7452 <mbedtls_mpi_read_binary+0x3c>
    744c:	4621      	mov	r1, r4
    744e:	f7ff fedb 	bl	7208 <mpi_bigendian_to_host.part.0>
}
    7452:	4630      	mov	r0, r6
    7454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007458 <mbedtls_mpi_write_binary>:
{
    7458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    745a:	4604      	mov	r4, r0
    stored_bytes = X->n * ciL;
    745c:	6863      	ldr	r3, [r4, #4]
{
    745e:	4608      	mov	r0, r1
    if( stored_bytes < buflen )
    7460:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
    7464:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
    7468:	d91a      	bls.n	74a0 <mbedtls_mpi_write_binary+0x48>
        p = buf + buflen - stored_bytes;
    746a:	1b52      	subs	r2, r2, r5
    746c:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    746e:	2100      	movs	r1, #0
    7470:	f7ff f87b 	bl	656a <memset>
        p = buf + buflen - stored_bytes;
    7474:	4630      	mov	r0, r6
    7476:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
    7478:	2100      	movs	r1, #0
    747a:	1883      	adds	r3, r0, r2
    747c:	428a      	cmp	r2, r1
    747e:	d111      	bne.n	74a4 <mbedtls_mpi_write_binary+0x4c>
    return( 0 );
    7480:	2000      	movs	r0, #0
}
    7482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
    7484:	68a1      	ldr	r1, [r4, #8]
    7486:	f023 0703 	bic.w	r7, r3, #3
    748a:	59c9      	ldr	r1, [r1, r7]
    748c:	f003 0603 	and.w	r6, r3, #3
    7490:	00f6      	lsls	r6, r6, #3
    7492:	40f1      	lsrs	r1, r6
    7494:	b2c9      	uxtb	r1, r1
    7496:	b989      	cbnz	r1, 74bc <mbedtls_mpi_write_binary+0x64>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    7498:	3301      	adds	r3, #1
    749a:	42ab      	cmp	r3, r5
    749c:	d1f2      	bne.n	7484 <mbedtls_mpi_write_binary+0x2c>
    749e:	e7eb      	b.n	7478 <mbedtls_mpi_write_binary+0x20>
    74a0:	4613      	mov	r3, r2
    74a2:	e7fa      	b.n	749a <mbedtls_mpi_write_binary+0x42>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    74a4:	68a6      	ldr	r6, [r4, #8]
    74a6:	f021 0003 	bic.w	r0, r1, #3
    74aa:	5830      	ldr	r0, [r6, r0]
    74ac:	f001 0503 	and.w	r5, r1, #3
    74b0:	00ed      	lsls	r5, r5, #3
    74b2:	40e8      	lsrs	r0, r5
    74b4:	f803 0d01 	strb.w	r0, [r3, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
    74b8:	3101      	adds	r1, #1
    74ba:	e7df      	b.n	747c <mbedtls_mpi_write_binary+0x24>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    74bc:	f06f 0007 	mvn.w	r0, #7
    74c0:	e7df      	b.n	7482 <mbedtls_mpi_write_binary+0x2a>

000074c2 <mbedtls_mpi_shift_l>:
{
    74c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74c4:	4605      	mov	r5, r0
    74c6:	460e      	mov	r6, r1
    v0 = count / (biL    );
    74c8:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    74ca:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    74ce:	f7ff ff7e 	bl	73ce <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    74d2:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    74d4:	4430      	add	r0, r6
    if( X->n * biL < i )
    74d6:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    74da:	d805      	bhi.n	74e8 <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    74dc:	2e1f      	cmp	r6, #31
    74de:	d80f      	bhi.n	7500 <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    74e0:	2f00      	cmp	r7, #0
    74e2:	d141      	bne.n	7568 <mbedtls_mpi_shift_l+0xa6>
    ret = 0;
    74e4:	2000      	movs	r0, #0
    74e6:	e00a      	b.n	74fe <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    74e8:	f010 011f 	ands.w	r1, r0, #31
    74ec:	bf18      	it	ne
    74ee:	2101      	movne	r1, #1
    74f0:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    74f4:	4628      	mov	r0, r5
    74f6:	f7ff fec8 	bl	728a <mbedtls_mpi_grow>
    74fa:	2800      	cmp	r0, #0
    74fc:	d0ee      	beq.n	74dc <mbedtls_mpi_shift_l+0x1a>
}
    74fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    7500:	f06f 0003 	mvn.w	r0, #3
    7504:	686b      	ldr	r3, [r5, #4]
    7506:	4360      	muls	r0, r4
    7508:	4619      	mov	r1, r3
    750a:	009a      	lsls	r2, r3, #2
    750c:	42a1      	cmp	r1, r4
    750e:	f1a2 0204 	sub.w	r2, r2, #4
    7512:	d80c      	bhi.n	752e <mbedtls_mpi_shift_l+0x6c>
    7514:	1ae2      	subs	r2, r4, r3
    7516:	429c      	cmp	r4, r3
    7518:	bf88      	it	hi
    751a:	2200      	movhi	r2, #0
    751c:	4413      	add	r3, r2
            X->p[i - 1] = 0;
    751e:	2200      	movs	r2, #0
    7520:	009b      	lsls	r3, r3, #2
        for( ; i > 0; i-- )
    7522:	3b04      	subs	r3, #4
    7524:	1d19      	adds	r1, r3, #4
    7526:	d0db      	beq.n	74e0 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    7528:	68a9      	ldr	r1, [r5, #8]
    752a:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    752c:	e7f9      	b.n	7522 <mbedtls_mpi_shift_l+0x60>
            X->p[i - 1] = X->p[i - v0 - 1];
    752e:	68ae      	ldr	r6, [r5, #8]
        for( i = X->n; i > v0; i-- )
    7530:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    7532:	eb06 0c02 	add.w	ip, r6, r2
    7536:	f85c c000 	ldr.w	ip, [ip, r0]
    753a:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    753e:	e7e5      	b.n	750c <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    7540:	68ab      	ldr	r3, [r5, #8]
    7542:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            X->p[i] <<= t1;
    7546:	fa01 f007 	lsl.w	r0, r1, r7
    754a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
            X->p[i] |= r0;
    754e:	68a8      	ldr	r0, [r5, #8]
    7550:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    7554:	4313      	orrs	r3, r2
    7556:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
    755a:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    755e:	3401      	adds	r4, #1
    7560:	686b      	ldr	r3, [r5, #4]
    7562:	42a3      	cmp	r3, r4
    7564:	d8ec      	bhi.n	7540 <mbedtls_mpi_shift_l+0x7e>
    7566:	e7bd      	b.n	74e4 <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    7568:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    756a:	f1c7 0620 	rsb	r6, r7, #32
    756e:	e7f7      	b.n	7560 <mbedtls_mpi_shift_l+0x9e>

00007570 <mbedtls_mpi_shift_r>:
{
    7570:	b4f0      	push	{r4, r5, r6, r7}
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    7572:	6843      	ldr	r3, [r0, #4]
    v0 = count /  biL;
    7574:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    7576:	42a3      	cmp	r3, r4
    v1 = count & (biL - 1);
    7578:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    757c:	d301      	bcc.n	7582 <mbedtls_mpi_shift_r+0x12>
    757e:	d109      	bne.n	7594 <mbedtls_mpi_shift_r+0x24>
    7580:	b11a      	cbz	r2, 758a <mbedtls_mpi_shift_r+0x1a>
}
    7582:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
    7584:	2100      	movs	r1, #0
    7586:	f7ff bef6 	b.w	7376 <mbedtls_mpi_lset>
    if( v0 > 0 )
    758a:	291f      	cmp	r1, #31
    758c:	d804      	bhi.n	7598 <mbedtls_mpi_shift_r+0x28>
}
    758e:	bcf0      	pop	{r4, r5, r6, r7}
    7590:	2000      	movs	r0, #0
    7592:	4770      	bx	lr
    if( v0 > 0 )
    7594:	291f      	cmp	r1, #31
    7596:	d909      	bls.n	75ac <mbedtls_mpi_shift_r+0x3c>
{
    7598:	2300      	movs	r3, #0
    759a:	00a5      	lsls	r5, r4, #2
        for( i = 0; i < X->n - v0; i++ )
    759c:	6841      	ldr	r1, [r0, #4]
    759e:	1b09      	subs	r1, r1, r4
    75a0:	4299      	cmp	r1, r3
    75a2:	d81b      	bhi.n	75dc <mbedtls_mpi_shift_r+0x6c>
            X->p[i] = 0;
    75a4:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
    75a6:	6841      	ldr	r1, [r0, #4]
    75a8:	4299      	cmp	r1, r3
    75aa:	d81e      	bhi.n	75ea <mbedtls_mpi_shift_r+0x7a>
    if( v1 > 0 )
    75ac:	2a00      	cmp	r2, #0
    75ae:	d0ee      	beq.n	758e <mbedtls_mpi_shift_r+0x1e>
    mbedtls_mpi_uint r0 = 0, r1;
    75b0:	2400      	movs	r4, #0
        for( i = X->n; i > 0; i-- )
    75b2:	6843      	ldr	r3, [r0, #4]
            r1 = X->p[i - 1] << (biL - v1);
    75b4:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
    75b8:	3b01      	subs	r3, #1
    75ba:	d3e8      	bcc.n	758e <mbedtls_mpi_shift_r+0x1e>
            r1 = X->p[i - 1] << (biL - v1);
    75bc:	6881      	ldr	r1, [r0, #8]
    75be:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
            X->p[i - 1] >>= v1;
    75c2:	fa25 f602 	lsr.w	r6, r5, r2
    75c6:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
            X->p[i - 1] |= r0;
    75ca:	6886      	ldr	r6, [r0, #8]
    75cc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    75d0:	4321      	orrs	r1, r4
    75d2:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
    75d6:	fa05 f407 	lsl.w	r4, r5, r7
    75da:	e7ed      	b.n	75b8 <mbedtls_mpi_shift_r+0x48>
            X->p[i] = X->p[i + v0];
    75dc:	6881      	ldr	r1, [r0, #8]
    75de:	594e      	ldr	r6, [r1, r5]
    75e0:	3504      	adds	r5, #4
    75e2:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    75e6:	3301      	adds	r3, #1
    75e8:	e7d8      	b.n	759c <mbedtls_mpi_shift_r+0x2c>
            X->p[i] = 0;
    75ea:	6881      	ldr	r1, [r0, #8]
    75ec:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
    75f0:	3301      	adds	r3, #1
    75f2:	e7d8      	b.n	75a6 <mbedtls_mpi_shift_r+0x36>

000075f4 <mbedtls_mpi_cmp_abs>:
{
    75f4:	b510      	push	{r4, lr}
    for( i = X->n; i > 0; i-- )
    75f6:	6842      	ldr	r2, [r0, #4]
    75f8:	b93a      	cbnz	r2, 760a <mbedtls_mpi_cmp_abs+0x16>
    for( j = Y->n; j > 0; j-- )
    75fa:	684b      	ldr	r3, [r1, #4]
    75fc:	b973      	cbnz	r3, 761c <mbedtls_mpi_cmp_abs+0x28>
    if( i == 0 && j == 0 )
    75fe:	b9b2      	cbnz	r2, 762e <mbedtls_mpi_cmp_abs+0x3a>
    7600:	1e18      	subs	r0, r3, #0
    7602:	bf18      	it	ne
    7604:	2001      	movne	r0, #1
    7606:	4240      	negs	r0, r0
}
    7608:	bd10      	pop	{r4, pc}
        if( X->p[i - 1] != 0 )
    760a:	6883      	ldr	r3, [r0, #8]
    760c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7610:	f853 3c04 	ldr.w	r3, [r3, #-4]
    7614:	2b00      	cmp	r3, #0
    7616:	d1f0      	bne.n	75fa <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    7618:	3a01      	subs	r2, #1
    761a:	e7ed      	b.n	75f8 <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    761c:	688c      	ldr	r4, [r1, #8]
    761e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    7622:	f854 4c04 	ldr.w	r4, [r4, #-4]
    7626:	2c00      	cmp	r4, #0
    7628:	d1e9      	bne.n	75fe <mbedtls_mpi_cmp_abs+0xa>
    for( j = Y->n; j > 0; j-- )
    762a:	3b01      	subs	r3, #1
    762c:	e7e6      	b.n	75fc <mbedtls_mpi_cmp_abs+0x8>
    if( i > j ) return(  1 );
    762e:	429a      	cmp	r2, r3
    7630:	d810      	bhi.n	7654 <mbedtls_mpi_cmp_abs+0x60>
    if( j > i ) return( -1 );
    7632:	d311      	bcc.n	7658 <mbedtls_mpi_cmp_abs+0x64>
    7634:	3a01      	subs	r2, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    7636:	6883      	ldr	r3, [r0, #8]
    7638:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    763c:	688b      	ldr	r3, [r1, #8]
    763e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7642:	429c      	cmp	r4, r3
    7644:	d806      	bhi.n	7654 <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    7646:	f102 32ff 	add.w	r2, r2, #4294967295
    764a:	d305      	bcc.n	7658 <mbedtls_mpi_cmp_abs+0x64>
    for( ; i > 0; i-- )
    764c:	1c53      	adds	r3, r2, #1
    764e:	d1f2      	bne.n	7636 <mbedtls_mpi_cmp_abs+0x42>
        return( 0 );
    7650:	2000      	movs	r0, #0
    7652:	e7d9      	b.n	7608 <mbedtls_mpi_cmp_abs+0x14>
    if( i > j ) return(  1 );
    7654:	2001      	movs	r0, #1
    7656:	e7d7      	b.n	7608 <mbedtls_mpi_cmp_abs+0x14>
    if( j > i ) return( -1 );
    7658:	f04f 30ff 	mov.w	r0, #4294967295
    765c:	e7d4      	b.n	7608 <mbedtls_mpi_cmp_abs+0x14>

0000765e <mbedtls_mpi_cmp_mpi>:
{
    765e:	4602      	mov	r2, r0
    7660:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    7662:	6843      	ldr	r3, [r0, #4]
    7664:	b923      	cbnz	r3, 7670 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    7666:	6848      	ldr	r0, [r1, #4]
    7668:	b958      	cbnz	r0, 7682 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    766a:	2b00      	cmp	r3, #0
    766c:	d136      	bne.n	76dc <mbedtls_mpi_cmp_mpi+0x7e>
    766e:	e02f      	b.n	76d0 <mbedtls_mpi_cmp_mpi+0x72>
        if( X->p[i - 1] != 0 )
    7670:	6890      	ldr	r0, [r2, #8]
    7672:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7676:	f850 0c04 	ldr.w	r0, [r0, #-4]
    767a:	2800      	cmp	r0, #0
    767c:	d1f3      	bne.n	7666 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    767e:	3b01      	subs	r3, #1
    7680:	e7f0      	b.n	7664 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    7682:	688c      	ldr	r4, [r1, #8]
    7684:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    7688:	f855 5c04 	ldr.w	r5, [r5, #-4]
    768c:	bb15      	cbnz	r5, 76d4 <mbedtls_mpi_cmp_mpi+0x76>
    for( j = Y->n; j > 0; j-- )
    768e:	3801      	subs	r0, #1
    7690:	e7ea      	b.n	7668 <mbedtls_mpi_cmp_mpi+0xa>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    7692:	680d      	ldr	r5, [r1, #0]
    if( j > i ) return( -Y->s );
    7694:	d202      	bcs.n	769c <mbedtls_mpi_cmp_mpi+0x3e>
    7696:	6808      	ldr	r0, [r1, #0]
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    7698:	4240      	negs	r0, r0
    769a:	e020      	b.n	76de <mbedtls_mpi_cmp_mpi+0x80>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    769c:	6810      	ldr	r0, [r2, #0]
    769e:	2800      	cmp	r0, #0
    76a0:	dd03      	ble.n	76aa <mbedtls_mpi_cmp_mpi+0x4c>
    76a2:	2d00      	cmp	r5, #0
    76a4:	da07      	bge.n	76b6 <mbedtls_mpi_cmp_mpi+0x58>
    76a6:	2001      	movs	r0, #1
    76a8:	e019      	b.n	76de <mbedtls_mpi_cmp_mpi+0x80>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    76aa:	2d00      	cmp	r5, #0
    76ac:	dd03      	ble.n	76b6 <mbedtls_mpi_cmp_mpi+0x58>
    76ae:	b110      	cbz	r0, 76b6 <mbedtls_mpi_cmp_mpi+0x58>
    76b0:	f04f 30ff 	mov.w	r0, #4294967295
    76b4:	e013      	b.n	76de <mbedtls_mpi_cmp_mpi+0x80>
    76b6:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    76b8:	6891      	ldr	r1, [r2, #8]
    76ba:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    76be:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    76c2:	428d      	cmp	r5, r1
    76c4:	d80b      	bhi.n	76de <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    76c6:	f103 33ff 	add.w	r3, r3, #4294967295
    76ca:	d3e5      	bcc.n	7698 <mbedtls_mpi_cmp_mpi+0x3a>
    for( ; i > 0; i-- )
    76cc:	1c59      	adds	r1, r3, #1
    76ce:	d1f3      	bne.n	76b8 <mbedtls_mpi_cmp_mpi+0x5a>
        return( 0 );
    76d0:	2000      	movs	r0, #0
    76d2:	e004      	b.n	76de <mbedtls_mpi_cmp_mpi+0x80>
    if( i == 0 && j == 0 )
    76d4:	2b00      	cmp	r3, #0
    76d6:	d0de      	beq.n	7696 <mbedtls_mpi_cmp_mpi+0x38>
    if( i > j ) return(  X->s );
    76d8:	4283      	cmp	r3, r0
    76da:	d9da      	bls.n	7692 <mbedtls_mpi_cmp_mpi+0x34>
    76dc:	6810      	ldr	r0, [r2, #0]
}
    76de:	bd30      	pop	{r4, r5, pc}

000076e0 <mbedtls_mpi_cmp_int>:
{
    76e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
    76e2:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    76e6:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
    76ea:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
    76ec:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    76ee:	bfac      	ite	ge
    76f0:	2301      	movge	r3, #1
    76f2:	f04f 33ff 	movlt.w	r3, #4294967295
    76f6:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    76f8:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    76fa:	a901      	add	r1, sp, #4
    Y.n = 1;
    76fc:	9302      	str	r3, [sp, #8]
    Y.p = p;
    76fe:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    7702:	f7ff ffac 	bl	765e <mbedtls_mpi_cmp_mpi>
}
    7706:	b005      	add	sp, #20
    7708:	f85d fb04 	ldr.w	pc, [sp], #4

0000770c <mbedtls_mpi_add_abs>:
    if( X == B )
    770c:	4290      	cmp	r0, r2
{
    770e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7712:	4606      	mov	r6, r0
    7714:	460f      	mov	r7, r1
    7716:	4615      	mov	r5, r2
    if( X == B )
    7718:	d002      	beq.n	7720 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    771a:	4288      	cmp	r0, r1
    771c:	d129      	bne.n	7772 <mbedtls_mpi_add_abs+0x66>
{
    771e:	462f      	mov	r7, r5
    X->s = 1;
    7720:	2301      	movs	r3, #1
    7722:	6033      	str	r3, [r6, #0]
    for( j = B->n; j > 0; j-- )
    7724:	687d      	ldr	r5, [r7, #4]
    7726:	bb65      	cbnz	r5, 7782 <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    7728:	4629      	mov	r1, r5
    772a:	4630      	mov	r0, r6
    772c:	f7ff fdad 	bl	728a <mbedtls_mpi_grow>
    7730:	4604      	mov	r4, r0
    7732:	bb18      	cbnz	r0, 777c <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
    7734:	68b3      	ldr	r3, [r6, #8]
    7736:	68b9      	ldr	r1, [r7, #8]
    7738:	469c      	mov	ip, r3
    773a:	4607      	mov	r7, r0
    for( i = 0; i < j; i++, o++, p++ )
    773c:	4285      	cmp	r5, r0
    773e:	d129      	bne.n	7794 <mbedtls_mpi_add_abs+0x88>
    7740:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
    7744:	b1d7      	cbz	r7, 777c <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
    7746:	6872      	ldr	r2, [r6, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    7748:	f105 0801 	add.w	r8, r5, #1
        if( i >= X->n )
    774c:	42aa      	cmp	r2, r5
    774e:	d807      	bhi.n	7760 <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    7750:	4641      	mov	r1, r8
    7752:	4630      	mov	r0, r6
    7754:	f7ff fd99 	bl	728a <mbedtls_mpi_grow>
    7758:	bb68      	cbnz	r0, 77b6 <mbedtls_mpi_add_abs+0xaa>
            p = X->p + i;
    775a:	68b3      	ldr	r3, [r6, #8]
    775c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
    7760:	681a      	ldr	r2, [r3, #0]
    7762:	4645      	mov	r5, r8
    7764:	19d2      	adds	r2, r2, r7
    7766:	bf2c      	ite	cs
    7768:	2701      	movcs	r7, #1
    776a:	2700      	movcc	r7, #0
    776c:	f843 2b04 	str.w	r2, [r3], #4
    7770:	e7e8      	b.n	7744 <mbedtls_mpi_add_abs+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    7772:	f7ff fdcc 	bl	730e <mbedtls_mpi_copy>
    7776:	4604      	mov	r4, r0
    7778:	2800      	cmp	r0, #0
    777a:	d0d0      	beq.n	771e <mbedtls_mpi_add_abs+0x12>
}
    777c:	4620      	mov	r0, r4
    777e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    7782:	68bb      	ldr	r3, [r7, #8]
    7784:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7788:	f853 3c04 	ldr.w	r3, [r3, #-4]
    778c:	2b00      	cmp	r3, #0
    778e:	d1cb      	bne.n	7728 <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
    7790:	3d01      	subs	r5, #1
    7792:	e7c8      	b.n	7726 <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
    7794:	f8dc 2000 	ldr.w	r2, [ip]
    7798:	19d2      	adds	r2, r2, r7
    779a:	bf2c      	ite	cs
    779c:	f04f 0e01 	movcs.w	lr, #1
    77a0:	f04f 0e00 	movcc.w	lr, #0
        *p += tmp; c += ( *p < tmp );
    77a4:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
    for( i = 0; i < j; i++, o++, p++ )
    77a8:	3001      	adds	r0, #1
    77aa:	19d2      	adds	r2, r2, r7
        *p += tmp; c += ( *p < tmp );
    77ac:	f84c 2b04 	str.w	r2, [ip], #4
    77b0:	f14e 0700 	adc.w	r7, lr, #0
    for( i = 0; i < j; i++, o++, p++ )
    77b4:	e7c2      	b.n	773c <mbedtls_mpi_add_abs+0x30>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    77b6:	4604      	mov	r4, r0
    return( ret );
    77b8:	e7e0      	b.n	777c <mbedtls_mpi_add_abs+0x70>

000077ba <mbedtls_mpi_sub_abs>:
{
    77ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    77be:	4605      	mov	r5, r0
    77c0:	460e      	mov	r6, r1
    77c2:	4690      	mov	r8, r2
    for( n = B->n; n > 0; n-- )
    77c4:	6854      	ldr	r4, [r2, #4]
    77c6:	b93c      	cbnz	r4, 77d8 <mbedtls_mpi_sub_abs+0x1e>
    if( n > A->n )
    77c8:	6871      	ldr	r1, [r6, #4]
    77ca:	42a1      	cmp	r1, r4
    77cc:	d20e      	bcs.n	77ec <mbedtls_mpi_sub_abs+0x32>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    77ce:	f06f 0709 	mvn.w	r7, #9
}
    77d2:	4638      	mov	r0, r7
    77d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if( B->p[n - 1] != 0 )
    77d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    77dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    77e0:	f853 3c04 	ldr.w	r3, [r3, #-4]
    77e4:	2b00      	cmp	r3, #0
    77e6:	d1ef      	bne.n	77c8 <mbedtls_mpi_sub_abs+0xe>
    for( n = B->n; n > 0; n-- )
    77e8:	3c01      	subs	r4, #1
    77ea:	e7ec      	b.n	77c6 <mbedtls_mpi_sub_abs+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
    77ec:	4628      	mov	r0, r5
    77ee:	f7ff fd4c 	bl	728a <mbedtls_mpi_grow>
    77f2:	4607      	mov	r7, r0
    77f4:	2800      	cmp	r0, #0
    77f6:	d1ec      	bne.n	77d2 <mbedtls_mpi_sub_abs+0x18>
    if( A->n > n )
    77f8:	6872      	ldr	r2, [r6, #4]
    77fa:	42a2      	cmp	r2, r4
    77fc:	d909      	bls.n	7812 <mbedtls_mpi_sub_abs+0x58>
        memcpy( X->p + n, A->p + n, ( A->n - n ) * ciL );
    77fe:	68b1      	ldr	r1, [r6, #8]
    7800:	68a8      	ldr	r0, [r5, #8]
    7802:	1b12      	subs	r2, r2, r4
    7804:	0092      	lsls	r2, r2, #2
    7806:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    780a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    780e:	f7fe fea1 	bl	6554 <memcpy>
    if( X->n > A->n )
    7812:	686a      	ldr	r2, [r5, #4]
    7814:	6870      	ldr	r0, [r6, #4]
    7816:	4282      	cmp	r2, r0
    7818:	d907      	bls.n	782a <mbedtls_mpi_sub_abs+0x70>
        memset( X->p + A->n, 0, ( X->n - A->n ) * ciL );
    781a:	68ab      	ldr	r3, [r5, #8]
    781c:	1a12      	subs	r2, r2, r0
    781e:	2100      	movs	r1, #0
    7820:	0092      	lsls	r2, r2, #2
    7822:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7826:	f7fe fea0 	bl	656a <memset>
    mbedtls_mpi_uint c = 0, t, z;
    782a:	2200      	movs	r2, #0
    for( i = 0; i < n; i++ )
    782c:	4613      	mov	r3, r2
    carry = mpi_sub_hlp( n, X->p, A->p, B->p );
    782e:	f8d5 c008 	ldr.w	ip, [r5, #8]
    7832:	f8d6 e008 	ldr.w	lr, [r6, #8]
    7836:	f8d8 8008 	ldr.w	r8, [r8, #8]
    for( i = 0; i < n; i++ )
    783a:	429c      	cmp	r4, r3
    783c:	d112      	bne.n	7864 <mbedtls_mpi_sub_abs+0xaa>
    if( carry != 0 )
    783e:	b172      	cbz	r2, 785e <mbedtls_mpi_sub_abs+0xa4>
            --X->p[n];
    7840:	f04f 31ff 	mov.w	r1, #4294967295
        for( ; n < X->n && X->p[n] == 0; n++ )
    7844:	686b      	ldr	r3, [r5, #4]
    7846:	42a3      	cmp	r3, r4
    7848:	d925      	bls.n	7896 <mbedtls_mpi_sub_abs+0xdc>
    784a:	68ab      	ldr	r3, [r5, #8]
    784c:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    7850:	b1ea      	cbz	r2, 788e <mbedtls_mpi_sub_abs+0xd4>
        --X->p[n];
    7852:	68aa      	ldr	r2, [r5, #8]
    7854:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    7858:	3b01      	subs	r3, #1
    785a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    X->s = 1;
    785e:	2301      	movs	r3, #1
    7860:	602b      	str	r3, [r5, #0]
    return( ret );
    7862:	e7b6      	b.n	77d2 <mbedtls_mpi_sub_abs+0x18>
        z = ( l[i] <  c );    t = l[i] - c;
    7864:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    7868:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    786c:	1ab1      	subs	r1, r6, r2
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    786e:	4281      	cmp	r1, r0
    7870:	bf2c      	ite	cs
    7872:	f04f 0900 	movcs.w	r9, #0
    7876:	f04f 0901 	movcc.w	r9, #1
    787a:	1a09      	subs	r1, r1, r0
    787c:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
    7880:	4296      	cmp	r6, r2
    7882:	bf2c      	ite	cs
    7884:	464a      	movcs	r2, r9
    7886:	f109 0201 	addcc.w	r2, r9, #1
    for( i = 0; i < n; i++ )
    788a:	3301      	adds	r3, #1
    788c:	e7d5      	b.n	783a <mbedtls_mpi_sub_abs+0x80>
            --X->p[n];
    788e:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
        for( ; n < X->n && X->p[n] == 0; n++ )
    7892:	3401      	adds	r4, #1
    7894:	e7d6      	b.n	7844 <mbedtls_mpi_sub_abs+0x8a>
        if( n == X->n )
    7896:	d1dc      	bne.n	7852 <mbedtls_mpi_sub_abs+0x98>
    7898:	e799      	b.n	77ce <mbedtls_mpi_sub_abs+0x14>

0000789a <mbedtls_mpi_add_mpi>:
{
    789a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    789c:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s < 0 )
    789e:	6813      	ldr	r3, [r2, #0]
{
    78a0:	4605      	mov	r5, r0
    if( A->s * B->s < 0 )
    78a2:	437b      	muls	r3, r7
{
    78a4:	460c      	mov	r4, r1
    78a6:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
    78a8:	d516      	bpl.n	78d8 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    78aa:	4611      	mov	r1, r2
    78ac:	4620      	mov	r0, r4
    78ae:	f7ff fea1 	bl	75f4 <mbedtls_mpi_cmp_abs>
    78b2:	2800      	cmp	r0, #0
    78b4:	db06      	blt.n	78c4 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    78b6:	4632      	mov	r2, r6
    78b8:	4621      	mov	r1, r4
    78ba:	4628      	mov	r0, r5
    78bc:	f7ff ff7d 	bl	77ba <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    78c0:	b138      	cbz	r0, 78d2 <mbedtls_mpi_add_mpi+0x38>
}
    78c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    78c4:	4622      	mov	r2, r4
    78c6:	4628      	mov	r0, r5
    78c8:	f7ff ff77 	bl	77ba <mbedtls_mpi_sub_abs>
    78cc:	2800      	cmp	r0, #0
    78ce:	d1f8      	bne.n	78c2 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
    78d0:	427f      	negs	r7, r7
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    78d2:	2000      	movs	r0, #0
        X->s = s;
    78d4:	602f      	str	r7, [r5, #0]
    return( ret );
    78d6:	e7f4      	b.n	78c2 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    78d8:	f7ff ff18 	bl	770c <mbedtls_mpi_add_abs>
    78dc:	e7f0      	b.n	78c0 <mbedtls_mpi_add_mpi+0x26>

000078de <mbedtls_mpi_sub_mpi>:
{
    78de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    78e0:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s > 0 )
    78e2:	6813      	ldr	r3, [r2, #0]
{
    78e4:	4605      	mov	r5, r0
    if( A->s * B->s > 0 )
    78e6:	437b      	muls	r3, r7
    78e8:	2b00      	cmp	r3, #0
{
    78ea:	460c      	mov	r4, r1
    78ec:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
    78ee:	dd16      	ble.n	791e <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    78f0:	4611      	mov	r1, r2
    78f2:	4620      	mov	r0, r4
    78f4:	f7ff fe7e 	bl	75f4 <mbedtls_mpi_cmp_abs>
    78f8:	2800      	cmp	r0, #0
    78fa:	db06      	blt.n	790a <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    78fc:	4632      	mov	r2, r6
    78fe:	4621      	mov	r1, r4
    7900:	4628      	mov	r0, r5
    7902:	f7ff ff5a 	bl	77ba <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7906:	b138      	cbz	r0, 7918 <mbedtls_mpi_sub_mpi+0x3a>
}
    7908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    790a:	4622      	mov	r2, r4
    790c:	4628      	mov	r0, r5
    790e:	f7ff ff54 	bl	77ba <mbedtls_mpi_sub_abs>
    7912:	2800      	cmp	r0, #0
    7914:	d1f8      	bne.n	7908 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
    7916:	427f      	negs	r7, r7
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    7918:	2000      	movs	r0, #0
        X->s = s;
    791a:	602f      	str	r7, [r5, #0]
    return( ret );
    791c:	e7f4      	b.n	7908 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    791e:	f7ff fef5 	bl	770c <mbedtls_mpi_add_abs>
    7922:	e7f0      	b.n	7906 <mbedtls_mpi_sub_mpi+0x28>

00007924 <mbedtls_mpi_mul_int>:
{
    7924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7928:	4605      	mov	r5, r0
    792a:	460f      	mov	r7, r1
    792c:	4690      	mov	r8, r2
    size_t n = A->n;
    792e:	684e      	ldr	r6, [r1, #4]
    while( n > 0 && A->p[n - 1] == 0 )
    7930:	b146      	cbz	r6, 7944 <mbedtls_mpi_mul_int+0x20>
    7932:	68bb      	ldr	r3, [r7, #8]
    7934:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    7938:	f853 3c04 	ldr.w	r3, [r3, #-4]
    793c:	b143      	cbz	r3, 7950 <mbedtls_mpi_mul_int+0x2c>
    if( b == 0 || n == 0 )
    793e:	f1b8 0f00 	cmp.w	r8, #0
    7942:	d107      	bne.n	7954 <mbedtls_mpi_mul_int+0x30>
        return( mbedtls_mpi_lset( X, 0 ) );
    7944:	4628      	mov	r0, r5
}
    7946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_lset( X, 0 ) );
    794a:	2100      	movs	r1, #0
    794c:	f7ff bd13 	b.w	7376 <mbedtls_mpi_lset>
        --n;
    7950:	3e01      	subs	r6, #1
    7952:	e7ed      	b.n	7930 <mbedtls_mpi_mul_int+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
    7954:	4628      	mov	r0, r5
    7956:	1c71      	adds	r1, r6, #1
    7958:	f7ff fc97 	bl	728a <mbedtls_mpi_grow>
    795c:	4604      	mov	r4, r0
    795e:	b960      	cbnz	r0, 797a <mbedtls_mpi_mul_int+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    7960:	4639      	mov	r1, r7
    7962:	4628      	mov	r0, r5
    7964:	f7ff fcd3 	bl	730e <mbedtls_mpi_copy>
    7968:	4604      	mov	r4, r0
    796a:	b930      	cbnz	r0, 797a <mbedtls_mpi_mul_int+0x56>
    mpi_mul_hlp( n, A->p, X->p, b - 1 );
    796c:	4630      	mov	r0, r6
    796e:	68aa      	ldr	r2, [r5, #8]
    7970:	68b9      	ldr	r1, [r7, #8]
    7972:	f108 33ff 	add.w	r3, r8, #4294967295
    7976:	f7ff fa3b 	bl	6df0 <mpi_mul_hlp>
}
    797a:	4620      	mov	r0, r4
    797c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007980 <mbedtls_mpi_div_mpi>:
{
    7980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7984:	4683      	mov	fp, r0
    7986:	b09d      	sub	sp, #116	; 0x74
    7988:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    798a:	4618      	mov	r0, r3
    798c:	2100      	movs	r1, #0
{
    798e:	4616      	mov	r6, r2
    7990:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    7992:	f7ff fea5 	bl	76e0 <mbedtls_mpi_cmp_int>
    7996:	2800      	cmp	r0, #0
    7998:	f000 8187 	beq.w	7caa <mbedtls_mpi_div_mpi+0x32a>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    799c:	2303      	movs	r3, #3
    X->n = 0;
    799e:	2400      	movs	r4, #0
    79a0:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    79a2:	9317      	str	r3, [sp, #92]	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    79a4:	4630      	mov	r0, r6
    T2.p = TP2;
    79a6:	ab19      	add	r3, sp, #100	; 0x64
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    79a8:	9903      	ldr	r1, [sp, #12]
    X->n = 0;
    79aa:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    X->s = 1;
    79ae:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    X->p = NULL;
    79b2:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    X->n = 0;
    79b6:	e9cd 5410 	strd	r5, r4, [sp, #64]	; 0x40
    X->s = 1;
    79ba:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    X->p = NULL;
    79be:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
    T2.s = 1;
    79c2:	9516      	str	r5, [sp, #88]	; 0x58
    T2.p = TP2;
    79c4:	9318      	str	r3, [sp, #96]	; 0x60
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    79c6:	f7ff fe15 	bl	75f4 <mbedtls_mpi_cmp_abs>
    79ca:	42a0      	cmp	r0, r4
    79cc:	da28      	bge.n	7a20 <mbedtls_mpi_div_mpi+0xa0>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    79ce:	f1bb 0f00 	cmp.w	fp, #0
    79d2:	d105      	bne.n	79e0 <mbedtls_mpi_div_mpi+0x60>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    79d4:	b9e7      	cbnz	r7, 7a10 <mbedtls_mpi_div_mpi+0x90>
        return( 0 );
    79d6:	2400      	movs	r4, #0
}
    79d8:	4620      	mov	r0, r4
    79da:	b01d      	add	sp, #116	; 0x74
    79dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    79e0:	4621      	mov	r1, r4
    79e2:	4658      	mov	r0, fp
    79e4:	f7ff fcc7 	bl	7376 <mbedtls_mpi_lset>
    79e8:	4604      	mov	r4, r0
    79ea:	2800      	cmp	r0, #0
    79ec:	d0f2      	beq.n	79d4 <mbedtls_mpi_div_mpi+0x54>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    79ee:	a80a      	add	r0, sp, #40	; 0x28
    79f0:	f7ff fc39 	bl	7266 <mbedtls_mpi_free>
    79f4:	a80d      	add	r0, sp, #52	; 0x34
    79f6:	f7ff fc36 	bl	7266 <mbedtls_mpi_free>
    79fa:	a810      	add	r0, sp, #64	; 0x40
    79fc:	f7ff fc33 	bl	7266 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    7a00:	a813      	add	r0, sp, #76	; 0x4c
    7a02:	f7ff fc30 	bl	7266 <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    7a06:	210c      	movs	r1, #12
    7a08:	a819      	add	r0, sp, #100	; 0x64
    7a0a:	f7fd fd55 	bl	54b8 <mbedtls_platform_zeroize>
    return( ret );
    7a0e:	e7e3      	b.n	79d8 <mbedtls_mpi_div_mpi+0x58>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    7a10:	4631      	mov	r1, r6
    7a12:	4638      	mov	r0, r7
    7a14:	f7ff fc7b 	bl	730e <mbedtls_mpi_copy>
    7a18:	4604      	mov	r4, r0
    7a1a:	2800      	cmp	r0, #0
    7a1c:	d1e7      	bne.n	79ee <mbedtls_mpi_div_mpi+0x6e>
    7a1e:	e7da      	b.n	79d6 <mbedtls_mpi_div_mpi+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    7a20:	4631      	mov	r1, r6
    7a22:	a80a      	add	r0, sp, #40	; 0x28
    7a24:	f7ff fc73 	bl	730e <mbedtls_mpi_copy>
    7a28:	4604      	mov	r4, r0
    7a2a:	2800      	cmp	r0, #0
    7a2c:	d1df      	bne.n	79ee <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    7a2e:	9903      	ldr	r1, [sp, #12]
    7a30:	a80d      	add	r0, sp, #52	; 0x34
    7a32:	f7ff fc6c 	bl	730e <mbedtls_mpi_copy>
    7a36:	4604      	mov	r4, r0
    7a38:	2800      	cmp	r0, #0
    7a3a:	d1d8      	bne.n	79ee <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    7a3c:	6871      	ldr	r1, [r6, #4]
    7a3e:	a810      	add	r0, sp, #64	; 0x40
    7a40:	3102      	adds	r1, #2
    X.s = Y.s = 1;
    7a42:	950d      	str	r5, [sp, #52]	; 0x34
    7a44:	950a      	str	r5, [sp, #40]	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    7a46:	f7ff fc20 	bl	728a <mbedtls_mpi_grow>
    7a4a:	4604      	mov	r4, r0
    7a4c:	2800      	cmp	r0, #0
    7a4e:	d1ce      	bne.n	79ee <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    7a50:	4601      	mov	r1, r0
    7a52:	a810      	add	r0, sp, #64	; 0x40
    7a54:	f7ff fc8f 	bl	7376 <mbedtls_mpi_lset>
    7a58:	4604      	mov	r4, r0
    7a5a:	2800      	cmp	r0, #0
    7a5c:	d1c7      	bne.n	79ee <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
    7a5e:	6871      	ldr	r1, [r6, #4]
    7a60:	a813      	add	r0, sp, #76	; 0x4c
    7a62:	3102      	adds	r1, #2
    7a64:	f7ff fc11 	bl	728a <mbedtls_mpi_grow>
    7a68:	4604      	mov	r4, r0
    7a6a:	2800      	cmp	r0, #0
    7a6c:	d1bf      	bne.n	79ee <mbedtls_mpi_div_mpi+0x6e>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    7a6e:	a80d      	add	r0, sp, #52	; 0x34
    7a70:	f7ff fcad 	bl	73ce <mbedtls_mpi_bitlen>
    7a74:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    7a78:	281f      	cmp	r0, #31
    7a7a:	d070      	beq.n	7b5e <mbedtls_mpi_div_mpi+0x1de>
        k = biL - 1 - k;
    7a7c:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    7a80:	4619      	mov	r1, r3
    7a82:	a80a      	add	r0, sp, #40	; 0x28
        k = biL - 1 - k;
    7a84:	9301      	str	r3, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    7a86:	f7ff fd1c 	bl	74c2 <mbedtls_mpi_shift_l>
    7a8a:	4604      	mov	r4, r0
    7a8c:	2800      	cmp	r0, #0
    7a8e:	d1ae      	bne.n	79ee <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    7a90:	9901      	ldr	r1, [sp, #4]
    7a92:	a80d      	add	r0, sp, #52	; 0x34
    7a94:	f7ff fd15 	bl	74c2 <mbedtls_mpi_shift_l>
    7a98:	4604      	mov	r4, r0
    7a9a:	2800      	cmp	r0, #0
    7a9c:	d1a7      	bne.n	79ee <mbedtls_mpi_div_mpi+0x6e>
    n = X.n - 1;
    7a9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    t = Y.n - 1;
    7aa0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    7aa4:	a80d      	add	r0, sp, #52	; 0x34
    7aa6:	eba5 0a08 	sub.w	sl, r5, r8
    7aaa:	ea4f 194a 	mov.w	r9, sl, lsl #5
    7aae:	4649      	mov	r1, r9
    7ab0:	f7ff fd07 	bl	74c2 <mbedtls_mpi_shift_l>
    7ab4:	4604      	mov	r4, r0
    7ab6:	2800      	cmp	r0, #0
    7ab8:	d199      	bne.n	79ee <mbedtls_mpi_div_mpi+0x6e>
        Z.p[n - t]++;
    7aba:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    7abe:	a90d      	add	r1, sp, #52	; 0x34
    7ac0:	a80a      	add	r0, sp, #40	; 0x28
    7ac2:	f7ff fdcc 	bl	765e <mbedtls_mpi_cmp_mpi>
    7ac6:	2800      	cmp	r0, #0
    7ac8:	da4b      	bge.n	7b62 <mbedtls_mpi_div_mpi+0x1e2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    7aca:	4649      	mov	r1, r9
    7acc:	a80d      	add	r0, sp, #52	; 0x34
    7ace:	f7ff fd4f 	bl	7570 <mbedtls_mpi_shift_r>
    7ad2:	4604      	mov	r4, r0
    7ad4:	2800      	cmp	r0, #0
    7ad6:	d18a      	bne.n	79ee <mbedtls_mpi_div_mpi+0x6e>
    t = Y.n - 1;
    7ad8:	f108 33ff 	add.w	r3, r8, #4294967295
    7adc:	9305      	str	r3, [sp, #20]
        if( X.p[i] >= Y.p[t] )
    7ade:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
    7ae0:	f105 3aff 	add.w	sl, r5, #4294967295
        if( X.p[i] >= Y.p[t] )
    7ae4:	9306      	str	r3, [sp, #24]
    7ae6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7aea:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
    7aee:	3b02      	subs	r3, #2
    7af0:	3d01      	subs	r5, #1
    7af2:	009b      	lsls	r3, r3, #2
    7af4:	eba5 0508 	sub.w	r5, r5, r8
    7af8:	9308      	str	r3, [sp, #32]
    7afa:	00ab      	lsls	r3, r5, #2
    7afc:	9302      	str	r3, [sp, #8]
    for( i = n; i > t ; i-- )
    7afe:	9b05      	ldr	r3, [sp, #20]
    7b00:	459a      	cmp	sl, r3
    7b02:	d83d      	bhi.n	7b80 <mbedtls_mpi_div_mpi+0x200>
    if( Q != NULL )
    7b04:	f1bb 0f00 	cmp.w	fp, #0
    7b08:	d00c      	beq.n	7b24 <mbedtls_mpi_div_mpi+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    7b0a:	4658      	mov	r0, fp
    7b0c:	a910      	add	r1, sp, #64	; 0x40
    7b0e:	f7ff fbfe 	bl	730e <mbedtls_mpi_copy>
    7b12:	2800      	cmp	r0, #0
    7b14:	f040 80c5 	bne.w	7ca2 <mbedtls_mpi_div_mpi+0x322>
        Q->s = A->s * B->s;
    7b18:	9a03      	ldr	r2, [sp, #12]
    7b1a:	6833      	ldr	r3, [r6, #0]
    7b1c:	6812      	ldr	r2, [r2, #0]
    7b1e:	4353      	muls	r3, r2
    7b20:	f8cb 3000 	str.w	r3, [fp]
    if( R != NULL )
    7b24:	2f00      	cmp	r7, #0
    7b26:	f43f af62 	beq.w	79ee <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    7b2a:	9901      	ldr	r1, [sp, #4]
    7b2c:	a80a      	add	r0, sp, #40	; 0x28
    7b2e:	f7ff fd1f 	bl	7570 <mbedtls_mpi_shift_r>
    7b32:	2800      	cmp	r0, #0
    7b34:	f040 80b5 	bne.w	7ca2 <mbedtls_mpi_div_mpi+0x322>
        X.s = A->s;
    7b38:	6833      	ldr	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    7b3a:	a90a      	add	r1, sp, #40	; 0x28
    7b3c:	4638      	mov	r0, r7
        X.s = A->s;
    7b3e:	930a      	str	r3, [sp, #40]	; 0x28
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    7b40:	f7ff fbe5 	bl	730e <mbedtls_mpi_copy>
    7b44:	4601      	mov	r1, r0
    7b46:	2800      	cmp	r0, #0
    7b48:	f040 80ad 	bne.w	7ca6 <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    7b4c:	4638      	mov	r0, r7
    7b4e:	f7ff fdc7 	bl	76e0 <mbedtls_mpi_cmp_int>
    7b52:	2800      	cmp	r0, #0
    7b54:	f47f af4b 	bne.w	79ee <mbedtls_mpi_div_mpi+0x6e>
            R->s = 1;
    7b58:	2301      	movs	r3, #1
    7b5a:	603b      	str	r3, [r7, #0]
    7b5c:	e747      	b.n	79ee <mbedtls_mpi_div_mpi+0x6e>
    else k = 0;
    7b5e:	9401      	str	r4, [sp, #4]
    7b60:	e79d      	b.n	7a9e <mbedtls_mpi_div_mpi+0x11e>
        Z.p[n - t]++;
    7b62:	9a12      	ldr	r2, [sp, #72]	; 0x48
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    7b64:	a90a      	add	r1, sp, #40	; 0x28
        Z.p[n - t]++;
    7b66:	f852 300a 	ldr.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    7b6a:	4608      	mov	r0, r1
        Z.p[n - t]++;
    7b6c:	3301      	adds	r3, #1
    7b6e:	f842 300a 	str.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    7b72:	aa0d      	add	r2, sp, #52	; 0x34
    7b74:	f7ff feb3 	bl	78de <mbedtls_mpi_sub_mpi>
    7b78:	4604      	mov	r4, r0
    7b7a:	2800      	cmp	r0, #0
    7b7c:	d09f      	beq.n	7abe <mbedtls_mpi_div_mpi+0x13e>
    7b7e:	e736      	b.n	79ee <mbedtls_mpi_div_mpi+0x6e>
        if( X.p[i] >= Y.p[t] )
    7b80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7b82:	9a06      	ldr	r2, [sp, #24]
    7b84:	9304      	str	r3, [sp, #16]
    7b86:	4413      	add	r3, r2
    7b88:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    7b8c:	9307      	str	r3, [sp, #28]
    7b8e:	9b04      	ldr	r3, [sp, #16]
    7b90:	ea4f 088a 	mov.w	r8, sl, lsl #2
    7b94:	589a      	ldr	r2, [r3, r2]
    7b96:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    7b9a:	f1a8 0304 	sub.w	r3, r8, #4
            Z.p[i - t - 1] = ~0;
    7b9e:	9d12      	ldr	r5, [sp, #72]	; 0x48
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    7ba0:	9309      	str	r3, [sp, #36]	; 0x24
            Z.p[i - t - 1] = ~0;
    7ba2:	9b02      	ldr	r3, [sp, #8]
        if( X.p[i] >= Y.p[t] )
    7ba4:	4291      	cmp	r1, r2
            Z.p[i - t - 1] = ~0;
    7ba6:	441d      	add	r5, r3
        if( X.p[i] >= Y.p[t] )
    7ba8:	d276      	bcs.n	7c98 <mbedtls_mpi_div_mpi+0x318>
    quotient = dividend / d;
    7baa:	f1a8 0004 	sub.w	r0, r8, #4
    7bae:	2300      	movs	r3, #0
    7bb0:	f859 0000 	ldr.w	r0, [r9, r0]
    7bb4:	f7f8 fac6 	bl	144 <__aeabi_uldivmod>
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    7bb8:	2900      	cmp	r1, #0
    7bba:	bf14      	ite	ne
    7bbc:	f04f 33ff 	movne.w	r3, #4294967295
    7bc0:	4603      	moveq	r3, r0
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    7bc2:	f1ba 0f01 	cmp.w	sl, #1
            Z.p[i - t - 1] = ~0;
    7bc6:	602b      	str	r3, [r5, #0]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    7bc8:	bf0e      	itee	eq
    7bca:	2300      	moveq	r3, #0
    7bcc:	eb09 0308 	addne.w	r3, r9, r8
    7bd0:	f853 3c08 	ldrne.w	r3, [r3, #-8]
    7bd4:	9319      	str	r3, [sp, #100]	; 0x64
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    7bd6:	f1a8 0304 	sub.w	r3, r8, #4
    7bda:	f859 3003 	ldr.w	r3, [r9, r3]
    7bde:	931a      	str	r3, [sp, #104]	; 0x68
        T2.p[2] = X.p[i];
    7be0:	f859 3008 	ldr.w	r3, [r9, r8]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7be4:	f8dd 8010 	ldr.w	r8, [sp, #16]
        T2.p[2] = X.p[i];
    7be8:	931b      	str	r3, [sp, #108]	; 0x6c
        Z.p[i - t - 1]++;
    7bea:	682b      	ldr	r3, [r5, #0]
    7bec:	3301      	adds	r3, #1
    7bee:	602b      	str	r3, [r5, #0]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7bf0:	9b08      	ldr	r3, [sp, #32]
    7bf2:	4498      	add	r8, r3
            Z.p[i - t - 1]--;
    7bf4:	682b      	ldr	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    7bf6:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
    7bf8:	3b01      	subs	r3, #1
    7bfa:	602b      	str	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    7bfc:	a813      	add	r0, sp, #76	; 0x4c
    7bfe:	f7ff fbba 	bl	7376 <mbedtls_mpi_lset>
    7c02:	2800      	cmp	r0, #0
    7c04:	d14d      	bne.n	7ca2 <mbedtls_mpi_div_mpi+0x322>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7c06:	9b05      	ldr	r3, [sp, #20]
    7c08:	2b00      	cmp	r3, #0
    7c0a:	d048      	beq.n	7c9e <mbedtls_mpi_div_mpi+0x31e>
    7c0c:	f8d8 2000 	ldr.w	r2, [r8]
    7c10:	9b15      	ldr	r3, [sp, #84]	; 0x54
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    7c12:	a913      	add	r1, sp, #76	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7c14:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
    7c16:	9a07      	ldr	r2, [sp, #28]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    7c18:	4608      	mov	r0, r1
            T1.p[1] = Y.p[t];
    7c1a:	6812      	ldr	r2, [r2, #0]
    7c1c:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    7c1e:	682a      	ldr	r2, [r5, #0]
    7c20:	f7ff fe80 	bl	7924 <mbedtls_mpi_mul_int>
    7c24:	2800      	cmp	r0, #0
    7c26:	d13c      	bne.n	7ca2 <mbedtls_mpi_div_mpi+0x322>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    7c28:	a916      	add	r1, sp, #88	; 0x58
    7c2a:	a813      	add	r0, sp, #76	; 0x4c
    7c2c:	f7ff fd17 	bl	765e <mbedtls_mpi_cmp_mpi>
    7c30:	2800      	cmp	r0, #0
    7c32:	dcdf      	bgt.n	7bf4 <mbedtls_mpi_div_mpi+0x274>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    7c34:	682a      	ldr	r2, [r5, #0]
    7c36:	a90d      	add	r1, sp, #52	; 0x34
    7c38:	a813      	add	r0, sp, #76	; 0x4c
    7c3a:	f7ff fe73 	bl	7924 <mbedtls_mpi_mul_int>
    7c3e:	bb80      	cbnz	r0, 7ca2 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    7c40:	9b02      	ldr	r3, [sp, #8]
    7c42:	a813      	add	r0, sp, #76	; 0x4c
    7c44:	ea4f 08c3 	mov.w	r8, r3, lsl #3
    7c48:	4641      	mov	r1, r8
    7c4a:	f7ff fc3a 	bl	74c2 <mbedtls_mpi_shift_l>
    7c4e:	bb40      	cbnz	r0, 7ca2 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    7c50:	a90a      	add	r1, sp, #40	; 0x28
    7c52:	4608      	mov	r0, r1
    7c54:	aa13      	add	r2, sp, #76	; 0x4c
    7c56:	f7ff fe42 	bl	78de <mbedtls_mpi_sub_mpi>
    7c5a:	4601      	mov	r1, r0
    7c5c:	bb18      	cbnz	r0, 7ca6 <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    7c5e:	a80a      	add	r0, sp, #40	; 0x28
    7c60:	f7ff fd3e 	bl	76e0 <mbedtls_mpi_cmp_int>
    7c64:	2800      	cmp	r0, #0
    7c66:	da12      	bge.n	7c8e <mbedtls_mpi_div_mpi+0x30e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    7c68:	a90d      	add	r1, sp, #52	; 0x34
    7c6a:	a813      	add	r0, sp, #76	; 0x4c
    7c6c:	f7ff fb4f 	bl	730e <mbedtls_mpi_copy>
    7c70:	b9b8      	cbnz	r0, 7ca2 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    7c72:	4641      	mov	r1, r8
    7c74:	a813      	add	r0, sp, #76	; 0x4c
    7c76:	f7ff fc24 	bl	74c2 <mbedtls_mpi_shift_l>
    7c7a:	b990      	cbnz	r0, 7ca2 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    7c7c:	a90a      	add	r1, sp, #40	; 0x28
    7c7e:	4608      	mov	r0, r1
    7c80:	aa13      	add	r2, sp, #76	; 0x4c
    7c82:	f7ff fe0a 	bl	789a <mbedtls_mpi_add_mpi>
    7c86:	b960      	cbnz	r0, 7ca2 <mbedtls_mpi_div_mpi+0x322>
            Z.p[i - t - 1]--;
    7c88:	682b      	ldr	r3, [r5, #0]
    7c8a:	3b01      	subs	r3, #1
    7c8c:	602b      	str	r3, [r5, #0]
    for( i = n; i > t ; i-- )
    7c8e:	9b02      	ldr	r3, [sp, #8]
    7c90:	f10a 3aff 	add.w	sl, sl, #4294967295
    7c94:	3b04      	subs	r3, #4
    7c96:	e731      	b.n	7afc <mbedtls_mpi_div_mpi+0x17c>
    7c98:	f04f 33ff 	mov.w	r3, #4294967295
    7c9c:	e791      	b.n	7bc2 <mbedtls_mpi_div_mpi+0x242>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7c9e:	9a05      	ldr	r2, [sp, #20]
    7ca0:	e7b6      	b.n	7c10 <mbedtls_mpi_div_mpi+0x290>
    7ca2:	4604      	mov	r4, r0
    7ca4:	e6a3      	b.n	79ee <mbedtls_mpi_div_mpi+0x6e>
    7ca6:	460c      	mov	r4, r1
    7ca8:	e6a1      	b.n	79ee <mbedtls_mpi_div_mpi+0x6e>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    7caa:	f06f 040b 	mvn.w	r4, #11
    7cae:	e693      	b.n	79d8 <mbedtls_mpi_div_mpi+0x58>

00007cb0 <mbedtls_mpi_mod_mpi>:
{
    7cb0:	b570      	push	{r4, r5, r6, lr}
    7cb2:	4604      	mov	r4, r0
    7cb4:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    7cb6:	4610      	mov	r0, r2
    7cb8:	2100      	movs	r1, #0
{
    7cba:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    7cbc:	f7ff fd10 	bl	76e0 <mbedtls_mpi_cmp_int>
    7cc0:	2800      	cmp	r0, #0
    7cc2:	db24      	blt.n	7d0e <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    7cc4:	462a      	mov	r2, r5
    7cc6:	4633      	mov	r3, r6
    7cc8:	4621      	mov	r1, r4
    7cca:	2000      	movs	r0, #0
    7ccc:	f7ff fe58 	bl	7980 <mbedtls_mpi_div_mpi>
    7cd0:	4605      	mov	r5, r0
    7cd2:	b138      	cbz	r0, 7ce4 <mbedtls_mpi_mod_mpi+0x34>
}
    7cd4:	4628      	mov	r0, r5
    7cd6:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    7cd8:	4632      	mov	r2, r6
    7cda:	4621      	mov	r1, r4
    7cdc:	4620      	mov	r0, r4
    7cde:	f7ff fddc 	bl	789a <mbedtls_mpi_add_mpi>
    7ce2:	b990      	cbnz	r0, 7d0a <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    7ce4:	2100      	movs	r1, #0
    7ce6:	4620      	mov	r0, r4
    7ce8:	f7ff fcfa 	bl	76e0 <mbedtls_mpi_cmp_int>
    7cec:	2800      	cmp	r0, #0
    7cee:	dbf3      	blt.n	7cd8 <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    7cf0:	4631      	mov	r1, r6
    7cf2:	4620      	mov	r0, r4
    7cf4:	f7ff fcb3 	bl	765e <mbedtls_mpi_cmp_mpi>
    7cf8:	2800      	cmp	r0, #0
    7cfa:	dbeb      	blt.n	7cd4 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    7cfc:	4632      	mov	r2, r6
    7cfe:	4621      	mov	r1, r4
    7d00:	4620      	mov	r0, r4
    7d02:	f7ff fdec 	bl	78de <mbedtls_mpi_sub_mpi>
    7d06:	2800      	cmp	r0, #0
    7d08:	d0f2      	beq.n	7cf0 <mbedtls_mpi_mod_mpi+0x40>
    7d0a:	4605      	mov	r5, r0
    7d0c:	e7e2      	b.n	7cd4 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    7d0e:	f06f 0509 	mvn.w	r5, #9
    7d12:	e7df      	b.n	7cd4 <mbedtls_mpi_mod_mpi+0x24>

00007d14 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *prec_RR )
{
    7d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d18:	4606      	mov	r6, r0
    7d1a:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
    7d1e:	4689      	mov	r9, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    7d20:	4618      	mov	r0, r3
    7d22:	2100      	movs	r1, #0
{
    7d24:	461d      	mov	r5, r3
    7d26:	9205      	str	r2, [sp, #20]
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    7d28:	f7ff fcda 	bl	76e0 <mbedtls_mpi_cmp_int>
    7d2c:	2800      	cmp	r0, #0
    7d2e:	f340 8213 	ble.w	8158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
    7d32:	68ab      	ldr	r3, [r5, #8]
    7d34:	681c      	ldr	r4, [r3, #0]
    7d36:	f014 0301 	ands.w	r3, r4, #1
    7d3a:	9308      	str	r3, [sp, #32]
    7d3c:	f000 820c 	beq.w	8158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    7d40:	2100      	movs	r1, #0
    7d42:	9805      	ldr	r0, [sp, #20]
    7d44:	f7ff fccc 	bl	76e0 <mbedtls_mpi_cmp_int>
    7d48:	2800      	cmp	r0, #0
    7d4a:	f2c0 8205 	blt.w	8158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    7d4e:	9805      	ldr	r0, [sp, #20]
    7d50:	f7ff fb3d 	bl	73ce <mbedtls_mpi_bitlen>
    7d54:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    7d58:	f200 81fe 	bhi.w	8158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    7d5c:	4628      	mov	r0, r5
    7d5e:	f7ff fb36 	bl	73ce <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    7d62:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    7d66:	f200 81f7 	bhi.w	8158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
    x += ( ( m0 + 2 ) & 4 ) << 1;
    7d6a:	2103      	movs	r1, #3
    7d6c:	f104 0802 	add.w	r8, r4, #2
    7d70:	ea4f 0848 	mov.w	r8, r8, lsl #1
    7d74:	f008 0808 	and.w	r8, r8, #8
    7d78:	44a0      	add	r8, r4
        x *= ( 2 - ( m0 * x ) );
    7d7a:	fb08 f304 	mul.w	r3, r8, r4
    for( i = biL; i >= 8; i /= 2 )
    7d7e:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
    7d80:	f1c3 0302 	rsb	r3, r3, #2
    7d84:	fb03 f808 	mul.w	r8, r3, r8
    for( i = biL; i >= 8; i /= 2 )
    7d88:	d1f7      	bne.n	7d7a <mbedtls_mpi_exp_mod+0x66>
    X->s = 1;
    7d8a:	2301      	movs	r3, #1
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    mbedtls_mpi_init( &WW );
    memset( W, 0, sizeof( W ) );
    7d8c:	f44f 7240 	mov.w	r2, #768	; 0x300
    7d90:	a81a      	add	r0, sp, #104	; 0x68
    X->n = 0;
    7d92:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
    X->s = 1;
    7d96:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    X->p = NULL;
    7d9a:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
    X->n = 0;
    7d9e:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    7da2:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
    X->p = NULL;
    7da6:	9116      	str	r1, [sp, #88]	; 0x58
    7da8:	9113      	str	r1, [sp, #76]	; 0x4c
    memset( W, 0, sizeof( W ) );
    7daa:	f7fe fbde 	bl	656a <memset>

    i = mbedtls_mpi_bitlen( E );
    7dae:	9805      	ldr	r0, [sp, #20]
    7db0:	f7ff fb0d 	bl	73ce <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    7db4:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    7db8:	f080 80f5 	bcs.w	7fa6 <mbedtls_mpi_exp_mod+0x292>
    7dbc:	28ef      	cmp	r0, #239	; 0xef
    7dbe:	f200 80f4 	bhi.w	7faa <mbedtls_mpi_exp_mod+0x296>
    7dc2:	284f      	cmp	r0, #79	; 0x4f
    7dc4:	f200 80f3 	bhi.w	7fae <mbedtls_mpi_exp_mod+0x29a>
    7dc8:	9b08      	ldr	r3, [sp, #32]
    7dca:	2818      	cmp	r0, #24
    7dcc:	bf34      	ite	cc
    7dce:	461f      	movcc	r7, r3
    7dd0:	2703      	movcs	r7, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    7dd2:	686b      	ldr	r3, [r5, #4]
    /* All W[i] and X must have at least N->n limbs for the mpi_montmul()
     * and mpi_montred() calls later. Here we ensure that W[1] and X are
     * large enough, and later we'll grow other W[i] to the same length.
     * They must not be shrunk midway through this function!
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    7dd4:	4630      	mov	r0, r6
    j = N->n + 1;
    7dd6:	f103 0a01 	add.w	sl, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    7dda:	4651      	mov	r1, sl
    7ddc:	f7ff fa55 	bl	728a <mbedtls_mpi_grow>
    7de0:	4604      	mov	r4, r0
    7de2:	2800      	cmp	r0, #0
    7de4:	f040 80bd 	bne.w	7f62 <mbedtls_mpi_exp_mod+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    7de8:	4651      	mov	r1, sl
    7dea:	a81d      	add	r0, sp, #116	; 0x74
    7dec:	f7ff fa4d 	bl	728a <mbedtls_mpi_grow>
    7df0:	4604      	mov	r4, r0
    7df2:	2800      	cmp	r0, #0
    7df4:	f040 80b5 	bne.w	7f62 <mbedtls_mpi_exp_mod+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    7df8:	ea4f 014a 	mov.w	r1, sl, lsl #1
    7dfc:	a80e      	add	r0, sp, #56	; 0x38
    7dfe:	f7ff fa44 	bl	728a <mbedtls_mpi_grow>
    7e02:	4604      	mov	r4, r0
    7e04:	2800      	cmp	r0, #0
    7e06:	f040 80ac 	bne.w	7f62 <mbedtls_mpi_exp_mod+0x24e>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
    7e0a:	f8d9 3000 	ldr.w	r3, [r9]
    7e0e:	9306      	str	r3, [sp, #24]
    if( neg )
    7e10:	3301      	adds	r3, #1
    7e12:	d10b      	bne.n	7e2c <mbedtls_mpi_exp_mod+0x118>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    7e14:	4649      	mov	r1, r9
    7e16:	a814      	add	r0, sp, #80	; 0x50
    7e18:	f7ff fa79 	bl	730e <mbedtls_mpi_copy>
    7e1c:	4604      	mov	r4, r0
    7e1e:	2800      	cmp	r0, #0
    7e20:	f040 809f 	bne.w	7f62 <mbedtls_mpi_exp_mod+0x24e>
        Apos.s = 1;
    7e24:	2301      	movs	r3, #1
        A = &Apos;
    7e26:	f10d 0950 	add.w	r9, sp, #80	; 0x50
        Apos.s = 1;
    7e2a:	9314      	str	r3, [sp, #80]	; 0x50
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( prec_RR == NULL || prec_RR->p == NULL )
    7e2c:	9be4      	ldr	r3, [sp, #912]	; 0x390
    7e2e:	b11b      	cbz	r3, 7e38 <mbedtls_mpi_exp_mod+0x124>
    7e30:	689b      	ldr	r3, [r3, #8]
    7e32:	2b00      	cmp	r3, #0
    7e34:	f040 80bd 	bne.w	7fb2 <mbedtls_mpi_exp_mod+0x29e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    7e38:	2101      	movs	r1, #1
    7e3a:	a80b      	add	r0, sp, #44	; 0x2c
    7e3c:	f7ff fa9b 	bl	7376 <mbedtls_mpi_lset>
    7e40:	4604      	mov	r4, r0
    7e42:	2800      	cmp	r0, #0
    7e44:	f040 808d 	bne.w	7f62 <mbedtls_mpi_exp_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    7e48:	6869      	ldr	r1, [r5, #4]
    7e4a:	a80b      	add	r0, sp, #44	; 0x2c
    7e4c:	0189      	lsls	r1, r1, #6
    7e4e:	f7ff fb38 	bl	74c2 <mbedtls_mpi_shift_l>
    7e52:	4604      	mov	r4, r0
    7e54:	2800      	cmp	r0, #0
    7e56:	f040 8084 	bne.w	7f62 <mbedtls_mpi_exp_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    7e5a:	a90b      	add	r1, sp, #44	; 0x2c
    7e5c:	462a      	mov	r2, r5
    7e5e:	4608      	mov	r0, r1
    7e60:	f7ff ff26 	bl	7cb0 <mbedtls_mpi_mod_mpi>
    7e64:	4604      	mov	r4, r0
    7e66:	2800      	cmp	r0, #0
    7e68:	d17b      	bne.n	7f62 <mbedtls_mpi_exp_mod+0x24e>

        if( prec_RR != NULL )
    7e6a:	9be4      	ldr	r3, [sp, #912]	; 0x390
    7e6c:	b123      	cbz	r3, 7e78 <mbedtls_mpi_exp_mod+0x164>
            memcpy( prec_RR, &RR, sizeof( mbedtls_mpi ) );
    7e6e:	220c      	movs	r2, #12
    7e70:	4618      	mov	r0, r3
    7e72:	a90b      	add	r1, sp, #44	; 0x2c
    }
    else
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    7e74:	f7fe fb6e 	bl	6554 <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    7e78:	4629      	mov	r1, r5
    7e7a:	4648      	mov	r0, r9
    7e7c:	f7ff fbef 	bl	765e <mbedtls_mpi_cmp_mpi>
    7e80:	2800      	cmp	r0, #0
    7e82:	f2c0 809a 	blt.w	7fba <mbedtls_mpi_exp_mod+0x2a6>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    7e86:	462a      	mov	r2, r5
    7e88:	4649      	mov	r1, r9
    7e8a:	a81d      	add	r0, sp, #116	; 0x74
    7e8c:	f7ff ff10 	bl	7cb0 <mbedtls_mpi_mod_mpi>
    7e90:	4604      	mov	r4, r0
    7e92:	2800      	cmp	r0, #0
    7e94:	d165      	bne.n	7f62 <mbedtls_mpi_exp_mod+0x24e>
        /* This should be a no-op because W[1] is already that large before
         * mbedtls_mpi_mod_mpi(), but it's necessary to avoid an overflow
         * in mpi_montmul() below, so let's make sure. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1], N->n + 1 ) );
    7e96:	6869      	ldr	r1, [r5, #4]
    7e98:	a81d      	add	r0, sp, #116	; 0x74
    7e9a:	3101      	adds	r1, #1
    7e9c:	f7ff f9f5 	bl	728a <mbedtls_mpi_grow>
    7ea0:	4604      	mov	r4, r0
    7ea2:	2800      	cmp	r0, #0
    7ea4:	d15d      	bne.n	7f62 <mbedtls_mpi_exp_mod+0x24e>
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    /* Note that this is safe because W[1] always has at least N->n limbs
     * (it grew above and was preserved by mbedtls_mpi_copy()). */
    mpi_montmul( &W[1], &RR, N, mm, &T );
    7ea6:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    *mm = ~x + 1;
    7eaa:	f1c8 0300 	rsb	r3, r8, #0
    mpi_montmul( &W[1], &RR, N, mm, &T );
    7eae:	462a      	mov	r2, r5
    7eb0:	a90b      	add	r1, sp, #44	; 0x2c
    7eb2:	a81d      	add	r0, sp, #116	; 0x74
    7eb4:	f8cd b000 	str.w	fp, [sp]
    *mm = ~x + 1;
    7eb8:	9303      	str	r3, [sp, #12]
    mpi_montmul( &W[1], &RR, N, mm, &T );
    7eba:	f7ff f935 	bl	7128 <mpi_montmul>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    7ebe:	4630      	mov	r0, r6
    7ec0:	a90b      	add	r1, sp, #44	; 0x2c
    7ec2:	f7ff fa24 	bl	730e <mbedtls_mpi_copy>
    7ec6:	4604      	mov	r4, r0
    7ec8:	2800      	cmp	r0, #0
    7eca:	d14a      	bne.n	7f62 <mbedtls_mpi_exp_mod+0x24e>
    mbedtls_mpi_uint z = 1;
    7ecc:	2301      	movs	r3, #1
    7ece:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    7ed0:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    7ed4:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    7ed6:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    7ed8:	4630      	mov	r0, r6
    7eda:	462a      	mov	r2, r5
    7edc:	9b03      	ldr	r3, [sp, #12]
    7ede:	f8cd b000 	str.w	fp, [sp]
    7ee2:	a917      	add	r1, sp, #92	; 0x5c
    7ee4:	f7ff f920 	bl	7128 <mpi_montmul>
    mpi_montred( X, N, mm, &T );

    if( wsize > 1 )
    7ee8:	2f01      	cmp	r7, #1
    7eea:	d16b      	bne.n	7fc4 <mbedtls_mpi_exp_mod+0x2b0>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
    7eec:	f04f 0a00 	mov.w	sl, #0
    nbits   = 0;
    7ef0:	46d0      	mov	r8, sl
    bufsize = 0;
    7ef2:	46d3      	mov	fp, sl
    wbits   = 0;
    7ef4:	46d1      	mov	r9, sl
    nblimbs = E->n;
    7ef6:	9b05      	ldr	r3, [sp, #20]
    7ef8:	685b      	ldr	r3, [r3, #4]
    7efa:	9304      	str	r3, [sp, #16]

    while( 1 )
    {
        if( bufsize == 0 )
    7efc:	f1bb 0f00 	cmp.w	fp, #0
    7f00:	f040 80af 	bne.w	8062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
        {
            if( nblimbs == 0 )
    7f04:	9b04      	ldr	r3, [sp, #16]
    7f06:	2b00      	cmp	r3, #0
    7f08:	f040 80a6 	bne.w	8058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
    {
        mpi_montmul( X, X, N, mm, &T );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
    7f0c:	f04f 0b01 	mov.w	fp, #1
    7f10:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
    7f14:	fa0b fb07 	lsl.w	fp, fp, r7
    for( i = 0; i < nbits; i++ )
    7f18:	9b04      	ldr	r3, [sp, #16]
    7f1a:	4543      	cmp	r3, r8
    7f1c:	f040 80fa 	bne.w	8114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
    mbedtls_mpi_uint z = 1;
    7f20:	2301      	movs	r3, #1
    7f22:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    7f24:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    7f28:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    7f2a:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    7f2c:	9b03      	ldr	r3, [sp, #12]
    7f2e:	462a      	mov	r2, r5
    7f30:	4630      	mov	r0, r6
    7f32:	f8cd a000 	str.w	sl, [sp]
    7f36:	a917      	add	r1, sp, #92	; 0x5c
    7f38:	f7ff f8f6 	bl	7128 <mpi_montmul>
    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    mpi_montred( X, N, mm, &T );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    7f3c:	9b06      	ldr	r3, [sp, #24]
    7f3e:	3301      	adds	r3, #1
    7f40:	d10f      	bne.n	7f62 <mbedtls_mpi_exp_mod+0x24e>
    7f42:	9b05      	ldr	r3, [sp, #20]
    7f44:	685b      	ldr	r3, [r3, #4]
    7f46:	b163      	cbz	r3, 7f62 <mbedtls_mpi_exp_mod+0x24e>
    7f48:	9b05      	ldr	r3, [sp, #20]
    7f4a:	689b      	ldr	r3, [r3, #8]
    7f4c:	681b      	ldr	r3, [r3, #0]
    7f4e:	07db      	lsls	r3, r3, #31
    7f50:	d507      	bpl.n	7f62 <mbedtls_mpi_exp_mod+0x24e>
    {
        X->s = -1;
    7f52:	9b06      	ldr	r3, [sp, #24]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    7f54:	4632      	mov	r2, r6
    7f56:	4629      	mov	r1, r5
    7f58:	4630      	mov	r0, r6
        X->s = -1;
    7f5a:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    7f5c:	f7ff fc9d 	bl	789a <mbedtls_mpi_add_mpi>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    7f60:	4604      	mov	r4, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    7f62:	2301      	movs	r3, #1
    7f64:	1e7d      	subs	r5, r7, #1
    7f66:	fa03 f607 	lsl.w	r6, r3, r7
        mbedtls_mpi_free( &W[i] );
    7f6a:	270c      	movs	r7, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    7f6c:	fa03 f505 	lsl.w	r5, r3, r5
    7f70:	42ae      	cmp	r6, r5
    7f72:	f200 80ea 	bhi.w	814a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    7f76:	a81d      	add	r0, sp, #116	; 0x74
    7f78:	f7ff f975 	bl	7266 <mbedtls_mpi_free>
    7f7c:	a80e      	add	r0, sp, #56	; 0x38
    7f7e:	f7ff f972 	bl	7266 <mbedtls_mpi_free>
    7f82:	a814      	add	r0, sp, #80	; 0x50
    7f84:	f7ff f96f 	bl	7266 <mbedtls_mpi_free>
    mbedtls_mpi_free( &WW );
    7f88:	a811      	add	r0, sp, #68	; 0x44
    7f8a:	f7ff f96c 	bl	7266 <mbedtls_mpi_free>

    if( prec_RR == NULL || prec_RR->p == NULL )
    7f8e:	9be4      	ldr	r3, [sp, #912]	; 0x390
    7f90:	b10b      	cbz	r3, 7f96 <mbedtls_mpi_exp_mod+0x282>
    7f92:	689b      	ldr	r3, [r3, #8]
    7f94:	b913      	cbnz	r3, 7f9c <mbedtls_mpi_exp_mod+0x288>
        mbedtls_mpi_free( &RR );
    7f96:	a80b      	add	r0, sp, #44	; 0x2c
    7f98:	f7ff f965 	bl	7266 <mbedtls_mpi_free>

    return( ret );
}
    7f9c:	4620      	mov	r0, r4
    7f9e:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
    7fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    7fa6:	2706      	movs	r7, #6
    7fa8:	e713      	b.n	7dd2 <mbedtls_mpi_exp_mod+0xbe>
    7faa:	2705      	movs	r7, #5
    7fac:	e711      	b.n	7dd2 <mbedtls_mpi_exp_mod+0xbe>
    7fae:	2704      	movs	r7, #4
    7fb0:	e70f      	b.n	7dd2 <mbedtls_mpi_exp_mod+0xbe>
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    7fb2:	220c      	movs	r2, #12
    7fb4:	99e4      	ldr	r1, [sp, #912]	; 0x390
    7fb6:	a80b      	add	r0, sp, #44	; 0x2c
    7fb8:	e75c      	b.n	7e74 <mbedtls_mpi_exp_mod+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    7fba:	4649      	mov	r1, r9
    7fbc:	a81d      	add	r0, sp, #116	; 0x74
    7fbe:	f7ff f9a6 	bl	730e <mbedtls_mpi_copy>
    7fc2:	e76d      	b.n	7ea0 <mbedtls_mpi_exp_mod+0x18c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    7fc4:	230c      	movs	r3, #12
        j =  one << ( wsize - 1 );
    7fc6:	f107 39ff 	add.w	r9, r7, #4294967295
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    7fca:	6869      	ldr	r1, [r5, #4]
    7fcc:	fa03 f309 	lsl.w	r3, r3, r9
    7fd0:	aa1a      	add	r2, sp, #104	; 0x68
    7fd2:	eb02 0803 	add.w	r8, r2, r3
    7fd6:	4640      	mov	r0, r8
    7fd8:	3101      	adds	r1, #1
    7fda:	f7ff f956 	bl	728a <mbedtls_mpi_grow>
    7fde:	2800      	cmp	r0, #0
    7fe0:	d1be      	bne.n	7f60 <mbedtls_mpi_exp_mod+0x24c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    7fe2:	4640      	mov	r0, r8
    7fe4:	a91d      	add	r1, sp, #116	; 0x74
    7fe6:	f7ff f992 	bl	730e <mbedtls_mpi_copy>
    7fea:	2800      	cmp	r0, #0
    7fec:	d1b8      	bne.n	7f60 <mbedtls_mpi_exp_mod+0x24c>
        for( i = 0; i < wsize - 1; i++ )
    7fee:	46a2      	mov	sl, r4
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    7ff0:	462a      	mov	r2, r5
    7ff2:	4641      	mov	r1, r8
    7ff4:	4640      	mov	r0, r8
    7ff6:	9b03      	ldr	r3, [sp, #12]
    7ff8:	f8cd b000 	str.w	fp, [sp]
        for( i = 0; i < wsize - 1; i++ )
    7ffc:	f10a 0a01 	add.w	sl, sl, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    8000:	f7ff f892 	bl	7128 <mpi_montmul>
        for( i = 0; i < wsize - 1; i++ )
    8004:	45ca      	cmp	sl, r9
    8006:	d3f3      	bcc.n	7ff0 <mbedtls_mpi_exp_mod+0x2dc>
        j =  one << ( wsize - 1 );
    8008:	f04f 0a01 	mov.w	sl, #1
    800c:	fa0a f909 	lsl.w	r9, sl, r9
        for( i = j + 1; i < ( one << wsize ); i++ )
    8010:	44d1      	add	r9, sl
    8012:	fa0a fa07 	lsl.w	sl, sl, r7
    8016:	45ca      	cmp	sl, r9
    8018:	f67f af68 	bls.w	7eec <mbedtls_mpi_exp_mod+0x1d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    801c:	6869      	ldr	r1, [r5, #4]
    801e:	f108 0b0c 	add.w	fp, r8, #12
    8022:	4658      	mov	r0, fp
    8024:	3101      	adds	r1, #1
    8026:	f7ff f930 	bl	728a <mbedtls_mpi_grow>
    802a:	2800      	cmp	r0, #0
    802c:	d198      	bne.n	7f60 <mbedtls_mpi_exp_mod+0x24c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    802e:	4641      	mov	r1, r8
    8030:	4658      	mov	r0, fp
    8032:	f7ff f96c 	bl	730e <mbedtls_mpi_copy>
    8036:	2800      	cmp	r0, #0
    8038:	d192      	bne.n	7f60 <mbedtls_mpi_exp_mod+0x24c>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    803a:	ab0e      	add	r3, sp, #56	; 0x38
    803c:	9300      	str	r3, [sp, #0]
    803e:	462a      	mov	r2, r5
    8040:	4658      	mov	r0, fp
    8042:	9b03      	ldr	r3, [sp, #12]
    8044:	a91d      	add	r1, sp, #116	; 0x74
    8046:	f7ff f86f 	bl	7128 <mpi_montmul>
        for( i = j + 1; i < ( one << wsize ); i++ )
    804a:	46d8      	mov	r8, fp
    804c:	f109 0901 	add.w	r9, r9, #1
    8050:	e7e1      	b.n	8016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
        state = 2;
    8052:	f04f 0a02 	mov.w	sl, #2
    8056:	e751      	b.n	7efc <mbedtls_mpi_exp_mod+0x1e8>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    8058:	f04f 0b20 	mov.w	fp, #32
            nblimbs--;
    805c:	9b04      	ldr	r3, [sp, #16]
    805e:	3b01      	subs	r3, #1
    8060:	9304      	str	r3, [sp, #16]
        ei = (E->p[nblimbs] >> bufsize) & 1;
    8062:	9b05      	ldr	r3, [sp, #20]
    8064:	9a04      	ldr	r2, [sp, #16]
    8066:	689b      	ldr	r3, [r3, #8]
        bufsize--;
    8068:	f10b 3bff 	add.w	fp, fp, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
    806c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8070:	fa23 f30b 	lsr.w	r3, r3, fp
        if( ei == 0 && state == 0 )
    8074:	f013 0301 	ands.w	r3, r3, #1
    8078:	d10f      	bne.n	809a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
    807a:	f1ba 0f00 	cmp.w	sl, #0
    807e:	f43f af3d 	beq.w	7efc <mbedtls_mpi_exp_mod+0x1e8>
        if( ei == 0 && state == 1 )
    8082:	f1ba 0f01 	cmp.w	sl, #1
    8086:	d108      	bne.n	809a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
            mpi_montmul( X, X, N, mm, &T );
    8088:	ab0e      	add	r3, sp, #56	; 0x38
    808a:	9300      	str	r3, [sp, #0]
    808c:	462a      	mov	r2, r5
    808e:	4631      	mov	r1, r6
    8090:	4630      	mov	r0, r6
    8092:	9b03      	ldr	r3, [sp, #12]
    8094:	f7ff f848 	bl	7128 <mpi_montmul>
            continue;
    8098:	e730      	b.n	7efc <mbedtls_mpi_exp_mod+0x1e8>
        nbits++;
    809a:	f108 0801 	add.w	r8, r8, #1
        wbits |= ( ei << ( wsize - nbits ) );
    809e:	eba7 0208 	sub.w	r2, r7, r8
    80a2:	4093      	lsls	r3, r2
        if( nbits == wsize )
    80a4:	4547      	cmp	r7, r8
        wbits |= ( ei << ( wsize - nbits ) );
    80a6:	ea49 0903 	orr.w	r9, r9, r3
        if( nbits == wsize )
    80aa:	d1d2      	bne.n	8052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
            for( i = 0; i < wsize; i++ )
    80ac:	f04f 0a00 	mov.w	sl, #0
                mpi_montmul( X, X, N, mm, &T );
    80b0:	ab0e      	add	r3, sp, #56	; 0x38
    80b2:	9300      	str	r3, [sp, #0]
    80b4:	462a      	mov	r2, r5
    80b6:	4631      	mov	r1, r6
    80b8:	4630      	mov	r0, r6
    80ba:	9b03      	ldr	r3, [sp, #12]
            for( i = 0; i < wsize; i++ )
    80bc:	f10a 0a01 	add.w	sl, sl, #1
                mpi_montmul( X, X, N, mm, &T );
    80c0:	f7ff f832 	bl	7128 <mpi_montmul>
            for( i = 0; i < wsize; i++ )
    80c4:	45d0      	cmp	r8, sl
    80c6:	d8f3      	bhi.n	80b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    80c8:	2301      	movs	r3, #1
    for( size_t i = 0; i < T_size; i++ )
    80ca:	f04f 0a00 	mov.w	sl, #0
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    80ce:	fa03 f308 	lsl.w	r3, r3, r8
    for( size_t i = 0; i < T_size; i++ )
    80d2:	f10d 0868 	add.w	r8, sp, #104	; 0x68
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    80d6:	4649      	mov	r1, r9
    80d8:	4650      	mov	r0, sl
    80da:	9309      	str	r3, [sp, #36]	; 0x24
    80dc:	f000 f83f 	bl	815e <mbedtls_ct_size_bool_eq>
    80e0:	4641      	mov	r1, r8
    80e2:	b2c2      	uxtb	r2, r0
    80e4:	a811      	add	r0, sp, #68	; 0x44
    80e6:	f000 f852 	bl	818e <mbedtls_mpi_safe_cond_assign>
    80ea:	9007      	str	r0, [sp, #28]
    80ec:	bb58      	cbnz	r0, 8146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    for( size_t i = 0; i < T_size; i++ )
    80ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    80f0:	f10a 0a01 	add.w	sl, sl, #1
    80f4:	4553      	cmp	r3, sl
    80f6:	f108 080c 	add.w	r8, r8, #12
    80fa:	d1ec      	bne.n	80d6 <CONFIG_FPROTECT_BLOCK_SIZE+0xd6>
            mpi_montmul( X, &WW, N, mm, &T );
    80fc:	ab0e      	add	r3, sp, #56	; 0x38
    80fe:	9300      	str	r3, [sp, #0]
    8100:	462a      	mov	r2, r5
    8102:	4630      	mov	r0, r6
    8104:	9b03      	ldr	r3, [sp, #12]
    8106:	a911      	add	r1, sp, #68	; 0x44
    8108:	f7ff f80e 	bl	7128 <mpi_montmul>
            nbits = 0;
    810c:	e9dd 9a07 	ldrd	r9, sl, [sp, #28]
            wbits = 0;
    8110:	46c8      	mov	r8, r9
    8112:	e6f3      	b.n	7efc <mbedtls_mpi_exp_mod+0x1e8>
        mpi_montmul( X, X, N, mm, &T );
    8114:	462a      	mov	r2, r5
    8116:	4631      	mov	r1, r6
    8118:	4630      	mov	r0, r6
    811a:	9b03      	ldr	r3, [sp, #12]
    811c:	f8cd a000 	str.w	sl, [sp]
        wbits <<= 1;
    8120:	ea4f 0949 	mov.w	r9, r9, lsl #1
        mpi_montmul( X, X, N, mm, &T );
    8124:	f7ff f800 	bl	7128 <mpi_montmul>
        if( ( wbits & ( one << wsize ) ) != 0 )
    8128:	ea1b 0f09 	tst.w	fp, r9
    812c:	d007      	beq.n	813e <CONFIG_FPROTECT_BLOCK_SIZE+0x13e>
            mpi_montmul( X, &W[1], N, mm, &T );
    812e:	462a      	mov	r2, r5
    8130:	4630      	mov	r0, r6
    8132:	9b03      	ldr	r3, [sp, #12]
    8134:	f8cd a000 	str.w	sl, [sp]
    8138:	a91d      	add	r1, sp, #116	; 0x74
    813a:	f7fe fff5 	bl	7128 <mpi_montmul>
    for( i = 0; i < nbits; i++ )
    813e:	9b04      	ldr	r3, [sp, #16]
    8140:	3301      	adds	r3, #1
    8142:	9304      	str	r3, [sp, #16]
    8144:	e6e8      	b.n	7f18 <mbedtls_mpi_exp_mod+0x204>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    8146:	9c07      	ldr	r4, [sp, #28]
    8148:	e70b      	b.n	7f62 <mbedtls_mpi_exp_mod+0x24e>
        mbedtls_mpi_free( &W[i] );
    814a:	ab1a      	add	r3, sp, #104	; 0x68
    814c:	fb07 3005 	mla	r0, r7, r5, r3
    8150:	f7ff f889 	bl	7266 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    8154:	3501      	adds	r5, #1
    8156:	e70b      	b.n	7f70 <mbedtls_mpi_exp_mod+0x25c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    8158:	f06f 0403 	mvn.w	r4, #3
    815c:	e71e      	b.n	7f9c <mbedtls_mpi_exp_mod+0x288>

0000815e <mbedtls_ct_size_bool_eq>:

unsigned mbedtls_ct_size_bool_eq( size_t x,
                                  size_t y )
{
    /* diff = 0 if x == y, non-zero otherwise */
    const size_t diff = x ^ y;
    815e:	4041      	eors	r1, r0
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* diff_msb's most significant bit is equal to x != y */
    const size_t diff_msb = ( diff | (size_t) -diff );
    8160:	4248      	negs	r0, r1
    8162:	4308      	orrs	r0, r1

    /* diff1 = (x != y) ? 1 : 0 */
    const unsigned diff1 = diff_msb >> ( sizeof( diff_msb ) * 8 - 1 );

    return( 1 ^ diff1 );
}
    8164:	43c0      	mvns	r0, r0
    8166:	0fc0      	lsrs	r0, r0, #31
    8168:	4770      	bx	lr

0000816a <mbedtls_ct_mpi_uint_cond_assign>:

void mbedtls_ct_mpi_uint_cond_assign( size_t n,
                                      mbedtls_mpi_uint *dest,
                                      const mbedtls_mpi_uint *src,
                                      unsigned char condition )
{
    816a:	b5f0      	push	{r4, r5, r6, r7, lr}

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    for( i = 0; i < n; i++ )
    816c:	2500      	movs	r5, #0
    const mbedtls_mpi_uint mask = -condition;
    816e:	425f      	negs	r7, r3
    for( i = 0; i < n; i++ )
    8170:	3904      	subs	r1, #4
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    8172:	3b01      	subs	r3, #1
    for( i = 0; i < n; i++ )
    8174:	4285      	cmp	r5, r0
    8176:	d100      	bne.n	817a <mbedtls_ct_mpi_uint_cond_assign+0x10>
}
    8178:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    817a:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    817e:	f851 4f04 	ldr.w	r4, [r1, #4]!
    8182:	403e      	ands	r6, r7
    8184:	401c      	ands	r4, r3
    8186:	4334      	orrs	r4, r6
    8188:	600c      	str	r4, [r1, #0]
    for( i = 0; i < n; i++ )
    818a:	3501      	adds	r5, #1
    818c:	e7f2      	b.n	8174 <mbedtls_ct_mpi_uint_cond_assign+0xa>

0000818e <mbedtls_mpi_safe_cond_assign>:
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X,
                                  const mbedtls_mpi *Y,
                                  unsigned char assign )
{
    818e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8192:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( Y != NULL );

    /* all-bits 1 if assign is 1, all-bits 0 if assign is 0 */
    limb_mask = mbedtls_ct_mpi_uint_mask( assign );;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    8194:	6849      	ldr	r1, [r1, #4]
{
    8196:	4605      	mov	r5, r0
    8198:	4691      	mov	r9, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    819a:	f7ff f876 	bl	728a <mbedtls_mpi_grow>
    819e:	4680      	mov	r8, r0
    81a0:	b9c8      	cbnz	r0, 81d6 <mbedtls_mpi_safe_cond_assign+0x48>
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
    81a2:	f1c9 0600 	rsb	r6, r9, #0
    81a6:	ea46 0609 	orr.w	r6, r6, r9
    81aa:	17f6      	asrs	r6, r6, #31
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );

    mbedtls_ct_mpi_uint_cond_assign( Y->n, X->p, Y->p, assign );

    for( i = Y->n; i < X->n; i++ )
        X->p[i] &= ~limb_mask;
    81ac:	43f6      	mvns	r6, r6
    unsigned uif0 = if0 + 1;
    81ae:	682b      	ldr	r3, [r5, #0]
    unsigned uif1 = if1 + 1;
    81b0:	683c      	ldr	r4, [r7, #0]
    unsigned uif0 = if0 + 1;
    81b2:	3301      	adds	r3, #1
    unsigned uif1 = if1 + 1;
    81b4:	3401      	adds	r4, #1
    return( (int) ur - 1 );
    81b6:	405c      	eors	r4, r3
    81b8:	ea04 0449 	and.w	r4, r4, r9, lsl #1
    81bc:	405c      	eors	r4, r3
    81be:	3c01      	subs	r4, #1
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );
    81c0:	602c      	str	r4, [r5, #0]
    mbedtls_ct_mpi_uint_cond_assign( Y->n, X->p, Y->p, assign );
    81c2:	464b      	mov	r3, r9
    81c4:	68ba      	ldr	r2, [r7, #8]
    81c6:	68a9      	ldr	r1, [r5, #8]
    81c8:	6878      	ldr	r0, [r7, #4]
    81ca:	f7ff ffce 	bl	816a <mbedtls_ct_mpi_uint_cond_assign>
    for( i = Y->n; i < X->n; i++ )
    81ce:	687b      	ldr	r3, [r7, #4]
    81d0:	686a      	ldr	r2, [r5, #4]
    81d2:	429a      	cmp	r2, r3
    81d4:	d802      	bhi.n	81dc <mbedtls_mpi_safe_cond_assign+0x4e>

cleanup:
    return( ret );
}
    81d6:	4640      	mov	r0, r8
    81d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        X->p[i] &= ~limb_mask;
    81dc:	68a9      	ldr	r1, [r5, #8]
    81de:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    81e2:	4032      	ands	r2, r6
    81e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = Y->n; i < X->n; i++ )
    81e8:	3301      	adds	r3, #1
    81ea:	e7f1      	b.n	81d0 <mbedtls_mpi_safe_cond_assign+0x42>

000081ec <platform_calloc_uninit>:
}
    81ec:	2000      	movs	r0, #0
    81ee:	4770      	bx	lr

000081f0 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    81f0:	4770      	bx	lr

000081f2 <platform_free_uninit>:
static void platform_free_uninit( void *ptr )
    81f2:	4770      	bx	lr

000081f4 <mbedtls_rsa_import>:
{
    81f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    81f8:	4604      	mov	r4, r0
    81fa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    81fe:	4691      	mov	r9, r2
    8200:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    8202:	460d      	mov	r5, r1
    8204:	b951      	cbnz	r1, 821c <mbedtls_rsa_import+0x28>
    8206:	f1b9 0f00 	cmp.w	r9, #0
    820a:	d110      	bne.n	822e <mbedtls_rsa_import+0x3a>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    820c:	f1b8 0f00 	cmp.w	r8, #0
    8210:	d115      	bne.n	823e <mbedtls_rsa_import+0x4a>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    8212:	b9e7      	cbnz	r7, 824e <mbedtls_rsa_import+0x5a>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    8214:	bb1e      	cbnz	r6, 825e <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    8216:	bb55      	cbnz	r5, 826e <mbedtls_rsa_import+0x7a>
    return( 0 );
    8218:	2000      	movs	r0, #0
    821a:	e006      	b.n	822a <mbedtls_rsa_import+0x36>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    821c:	3008      	adds	r0, #8
    821e:	f7ff f876 	bl	730e <mbedtls_mpi_copy>
    8222:	2800      	cmp	r0, #0
    8224:	d0ef      	beq.n	8206 <mbedtls_rsa_import+0x12>
    8226:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    822a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    822e:	4649      	mov	r1, r9
    8230:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8234:	f7ff f86b 	bl	730e <mbedtls_mpi_copy>
    8238:	2800      	cmp	r0, #0
    823a:	d0e7      	beq.n	820c <mbedtls_rsa_import+0x18>
    823c:	e7f3      	b.n	8226 <mbedtls_rsa_import+0x32>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    823e:	4641      	mov	r1, r8
    8240:	f104 0038 	add.w	r0, r4, #56	; 0x38
    8244:	f7ff f863 	bl	730e <mbedtls_mpi_copy>
    8248:	2800      	cmp	r0, #0
    824a:	d0e2      	beq.n	8212 <mbedtls_rsa_import+0x1e>
    824c:	e7eb      	b.n	8226 <mbedtls_rsa_import+0x32>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    824e:	4639      	mov	r1, r7
    8250:	f104 0020 	add.w	r0, r4, #32
    8254:	f7ff f85b 	bl	730e <mbedtls_mpi_copy>
    8258:	2800      	cmp	r0, #0
    825a:	d0db      	beq.n	8214 <mbedtls_rsa_import+0x20>
    825c:	e7e3      	b.n	8226 <mbedtls_rsa_import+0x32>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    825e:	4631      	mov	r1, r6
    8260:	f104 0014 	add.w	r0, r4, #20
    8264:	f7ff f853 	bl	730e <mbedtls_mpi_copy>
    8268:	2800      	cmp	r0, #0
    826a:	d0d4      	beq.n	8216 <mbedtls_rsa_import+0x22>
    826c:	e7db      	b.n	8226 <mbedtls_rsa_import+0x32>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    826e:	f104 0008 	add.w	r0, r4, #8
    8272:	f7ff f8ca 	bl	740a <mbedtls_mpi_size>
    8276:	6060      	str	r0, [r4, #4]
    8278:	e7ce      	b.n	8218 <mbedtls_rsa_import+0x24>

0000827a <mbedtls_rsa_init>:
{
    827a:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    827c:	22ac      	movs	r2, #172	; 0xac
    827e:	2100      	movs	r1, #0
{
    8280:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    8282:	f7fe f972 	bl	656a <memset>
    ctx->padding = MBEDTLS_RSA_PKCS_V15;
    8286:	2300      	movs	r3, #0
    ctx->hash_id = MBEDTLS_MD_NONE;
    8288:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
    828c:	bd10      	pop	{r4, pc}

0000828e <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    828e:	b510      	push	{r4, lr}
    if( ctx == NULL )
    8290:	4604      	mov	r4, r0
    8292:	b3a0      	cbz	r0, 82fe <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    8294:	308c      	adds	r0, #140	; 0x8c
    8296:	f7fe ffe6 	bl	7266 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    829a:	f104 0098 	add.w	r0, r4, #152	; 0x98
    829e:	f7fe ffe2 	bl	7266 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    82a2:	f104 0068 	add.w	r0, r4, #104	; 0x68
    82a6:	f7fe ffde 	bl	7266 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    82aa:	f104 0020 	add.w	r0, r4, #32
    82ae:	f7fe ffda 	bl	7266 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    82b2:	f104 0038 	add.w	r0, r4, #56	; 0x38
    82b6:	f7fe ffd6 	bl	7266 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    82ba:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    82be:	f7fe ffd2 	bl	7266 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    82c2:	f104 0014 	add.w	r0, r4, #20
    82c6:	f7fe ffce 	bl	7266 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    82ca:	f104 0008 	add.w	r0, r4, #8
    82ce:	f7fe ffca 	bl	7266 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    82d2:	f104 0080 	add.w	r0, r4, #128	; 0x80
    82d6:	f7fe ffc6 	bl	7266 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    82da:	f104 0074 	add.w	r0, r4, #116	; 0x74
    82de:	f7fe ffc2 	bl	7266 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    82e2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    82e6:	f7fe ffbe 	bl	7266 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    82ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
    82ee:	f7fe ffba 	bl	7266 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    82f2:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    82f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    82fa:	f7fe bfb4 	b.w	7266 <mbedtls_mpi_free>
}
    82fe:	bd10      	pop	{r4, pc}

00008300 <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    8300:	226c      	movs	r2, #108	; 0x6c
    8302:	2100      	movs	r1, #0
    8304:	f7fe b931 	b.w	656a <memset>

00008308 <mbedtls_sha256_update>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    8308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    830c:	4605      	mov	r5, r0
    830e:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    8310:	4614      	mov	r4, r2
    8312:	b37a      	cbz	r2, 8374 <mbedtls_sha256_update+0x6c>
        return( 0 );

    left = ctx->total[0] & 0x3F;
    8314:	6803      	ldr	r3, [r0, #0]
    8316:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
    831a:	189b      	adds	r3, r3, r2
    831c:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
    831e:	bf22      	ittt	cs
    8320:	6843      	ldrcs	r3, [r0, #4]
    8322:	3301      	addcs	r3, #1
    8324:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
    8326:	b19f      	cbz	r7, 8350 <mbedtls_sha256_update+0x48>
    fill = 64 - left;
    8328:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    832c:	454a      	cmp	r2, r9
    832e:	d30f      	bcc.n	8350 <mbedtls_sha256_update+0x48>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
    8330:	f100 0828 	add.w	r8, r0, #40	; 0x28
    8334:	464a      	mov	r2, r9
    8336:	eb08 0007 	add.w	r0, r8, r7
    833a:	f7fe f90b 	bl	6554 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    833e:	4641      	mov	r1, r8
    8340:	4628      	mov	r0, r5
    8342:	f7fc f981 	bl	4648 <mbedtls_internal_sha256_process>
    8346:	b9b0      	cbnz	r0, 8376 <mbedtls_sha256_update+0x6e>
            return( ret );

        input += fill;
    8348:	443c      	add	r4, r7
        ilen  -= fill;
        left = 0;
    834a:	4607      	mov	r7, r0
        input += fill;
    834c:	444e      	add	r6, r9
        ilen  -= fill;
    834e:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    8350:	4426      	add	r6, r4
    8352:	e004      	b.n	835e <mbedtls_sha256_update+0x56>
    }

    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    8354:	4628      	mov	r0, r5
    8356:	f7fc f977 	bl	4648 <mbedtls_internal_sha256_process>
    835a:	b960      	cbnz	r0, 8376 <mbedtls_sha256_update+0x6e>
            return( ret );

        input += 64;
        ilen  -= 64;
    835c:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    835e:	2c3f      	cmp	r4, #63	; 0x3f
    8360:	eba6 0104 	sub.w	r1, r6, r4
    8364:	d8f6      	bhi.n	8354 <mbedtls_sha256_update+0x4c>
    }

    if( ilen > 0 )
    8366:	b12c      	cbz	r4, 8374 <mbedtls_sha256_update+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    8368:	f105 0028 	add.w	r0, r5, #40	; 0x28
    836c:	4622      	mov	r2, r4
    836e:	4438      	add	r0, r7
    8370:	f7fe f8f0 	bl	6554 <memcpy>
        return( 0 );
    8374:	2000      	movs	r0, #0

    return( 0 );
}
    8376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000837a <mbedtls_sha256_finish>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish( mbedtls_sha256_context *ctx,
                               unsigned char *output )
{
    837a:	b570      	push	{r4, r5, r6, lr}
    837c:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
    837e:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
    8380:	6803      	ldr	r3, [r0, #0]

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    8382:	f100 0628 	add.w	r6, r0, #40	; 0x28
    used = ctx->total[0] & 0x3F;
    8386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
    838a:	1c5a      	adds	r2, r3, #1
    if( used <= 56 )
    838c:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
    838e:	4403      	add	r3, r0
{
    8390:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    8392:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    8396:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    839a:	d861      	bhi.n	8460 <mbedtls_sha256_finish+0xe6>
        memset( ctx->buffer + used, 0, 56 - used );
    839c:	2100      	movs	r1, #0
    839e:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    83a2:	f7fe f8e2 	bl	656a <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    83a6:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    83aa:	0f5a      	lsrs	r2, r3, #29
    83ac:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    83b0:	00db      	lsls	r3, r3, #3
    83b2:	ba12      	rev	r2, r2
    83b4:	ba1b      	rev	r3, r3

    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    83b6:	4631      	mov	r1, r6
    83b8:	4620      	mov	r0, r4
    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    83ba:	6622      	str	r2, [r4, #96]	; 0x60
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );
    83bc:	6663      	str	r3, [r4, #100]	; 0x64
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    83be:	f7fc f943 	bl	4648 <mbedtls_internal_sha256_process>
    83c2:	2800      	cmp	r0, #0
    83c4:	d14b      	bne.n	845e <mbedtls_sha256_finish+0xe4>
        return( ret );

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_BE( ctx->state[0], output,  0 );
    83c6:	7ae3      	ldrb	r3, [r4, #11]
    83c8:	702b      	strb	r3, [r5, #0]
    83ca:	8963      	ldrh	r3, [r4, #10]
    83cc:	706b      	strb	r3, [r5, #1]
    83ce:	68a3      	ldr	r3, [r4, #8]
    83d0:	0a1b      	lsrs	r3, r3, #8
    83d2:	70ab      	strb	r3, [r5, #2]
    83d4:	68a3      	ldr	r3, [r4, #8]
    83d6:	70eb      	strb	r3, [r5, #3]
    MBEDTLS_PUT_UINT32_BE( ctx->state[1], output,  4 );
    83d8:	7be3      	ldrb	r3, [r4, #15]
    83da:	712b      	strb	r3, [r5, #4]
    83dc:	89e3      	ldrh	r3, [r4, #14]
    83de:	716b      	strb	r3, [r5, #5]
    83e0:	68e3      	ldr	r3, [r4, #12]
    83e2:	0a1b      	lsrs	r3, r3, #8
    83e4:	71ab      	strb	r3, [r5, #6]
    83e6:	68e3      	ldr	r3, [r4, #12]
    83e8:	71eb      	strb	r3, [r5, #7]
    MBEDTLS_PUT_UINT32_BE( ctx->state[2], output,  8 );
    83ea:	7ce3      	ldrb	r3, [r4, #19]
    83ec:	722b      	strb	r3, [r5, #8]
    83ee:	8a63      	ldrh	r3, [r4, #18]
    83f0:	726b      	strb	r3, [r5, #9]
    83f2:	6923      	ldr	r3, [r4, #16]
    83f4:	0a1b      	lsrs	r3, r3, #8
    83f6:	72ab      	strb	r3, [r5, #10]
    83f8:	6923      	ldr	r3, [r4, #16]
    83fa:	72eb      	strb	r3, [r5, #11]
    MBEDTLS_PUT_UINT32_BE( ctx->state[3], output, 12 );
    83fc:	7de3      	ldrb	r3, [r4, #23]
    83fe:	732b      	strb	r3, [r5, #12]
    8400:	8ae3      	ldrh	r3, [r4, #22]
    8402:	736b      	strb	r3, [r5, #13]
    8404:	6963      	ldr	r3, [r4, #20]
    8406:	0a1b      	lsrs	r3, r3, #8
    8408:	73ab      	strb	r3, [r5, #14]
    840a:	6963      	ldr	r3, [r4, #20]
    840c:	73eb      	strb	r3, [r5, #15]
    MBEDTLS_PUT_UINT32_BE( ctx->state[4], output, 16 );
    840e:	7ee3      	ldrb	r3, [r4, #27]
    8410:	742b      	strb	r3, [r5, #16]
    8412:	8b63      	ldrh	r3, [r4, #26]
    8414:	746b      	strb	r3, [r5, #17]
    8416:	69a3      	ldr	r3, [r4, #24]
    8418:	0a1b      	lsrs	r3, r3, #8
    841a:	74ab      	strb	r3, [r5, #18]
    841c:	69a3      	ldr	r3, [r4, #24]
    841e:	74eb      	strb	r3, [r5, #19]
    MBEDTLS_PUT_UINT32_BE( ctx->state[5], output, 20 );
    8420:	7fe3      	ldrb	r3, [r4, #31]
    8422:	752b      	strb	r3, [r5, #20]
    8424:	8be3      	ldrh	r3, [r4, #30]
    8426:	756b      	strb	r3, [r5, #21]
    8428:	69e3      	ldr	r3, [r4, #28]
    842a:	0a1b      	lsrs	r3, r3, #8
    842c:	75ab      	strb	r3, [r5, #22]
    842e:	69e3      	ldr	r3, [r4, #28]
    8430:	75eb      	strb	r3, [r5, #23]
    MBEDTLS_PUT_UINT32_BE( ctx->state[6], output, 24 );
    8432:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    8436:	762b      	strb	r3, [r5, #24]
    8438:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    843a:	766b      	strb	r3, [r5, #25]
    843c:	6a23      	ldr	r3, [r4, #32]
    843e:	0a1b      	lsrs	r3, r3, #8
    8440:	76ab      	strb	r3, [r5, #26]
    8442:	6a23      	ldr	r3, [r4, #32]
    8444:	76eb      	strb	r3, [r5, #27]

#if defined(MBEDTLS_SHA224_C)
    if( ctx->is224 == 0 )
    8446:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    8448:	b94b      	cbnz	r3, 845e <mbedtls_sha256_finish+0xe4>
#endif
        MBEDTLS_PUT_UINT32_BE( ctx->state[7], output, 28 );
    844a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    844e:	772b      	strb	r3, [r5, #28]
    8450:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    8452:	776b      	strb	r3, [r5, #29]
    8454:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8456:	0a1b      	lsrs	r3, r3, #8
    8458:	77ab      	strb	r3, [r5, #30]
    845a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    845c:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    845e:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    8460:	2100      	movs	r1, #0
    8462:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    8466:	f7fe f880 	bl	656a <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    846a:	4631      	mov	r1, r6
    846c:	4620      	mov	r0, r4
    846e:	f7fc f8eb 	bl	4648 <mbedtls_internal_sha256_process>
    8472:	2800      	cmp	r0, #0
    8474:	d1f3      	bne.n	845e <mbedtls_sha256_finish+0xe4>
        memset( ctx->buffer, 0, 56 );
    8476:	4601      	mov	r1, r0
    8478:	2238      	movs	r2, #56	; 0x38
    847a:	4630      	mov	r0, r6
    847c:	e791      	b.n	83a2 <mbedtls_sha256_finish+0x28>

0000847e <nrf91_errata_14>:
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    847e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    8482:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    8486:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    848a:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    848e:	2a09      	cmp	r2, #9
    8490:	d103      	bne.n	849a <nrf91_errata_14+0x1c>
                switch(var2)
    8492:	1e43      	subs	r3, r0, #1
    8494:	4258      	negs	r0, r3
    8496:	4158      	adcs	r0, r3
    8498:	4770      	bx	lr
                        return false;
    849a:	2000      	movs	r0, #0
}
    849c:	4770      	bx	lr

0000849e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    849e:	4700      	bx	r0

000084a0 <nrfx_busy_wait>:
    84a0:	f000 b8c9 	b.w	8636 <z_impl_k_busy_wait>

000084a4 <clock_stop>:
{
    84a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    84a6:	4604      	mov	r4, r0
    84a8:	b118      	cbz	r0, 84b2 <clock_stop+0xe>
    84aa:	2801      	cmp	r0, #1
    84ac:	d020      	beq.n	84f0 <clock_stop+0x4c>
}
    84ae:	b003      	add	sp, #12
    84b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84b2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    84b6:	2202      	movs	r2, #2
    84b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    84bc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    84c0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    84c4:	2201      	movs	r2, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    84c6:	4607      	mov	r7, r0
    84c8:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    84ca:	2301      	movs	r3, #1
    84cc:	f242 7510 	movw	r5, #10000	; 0x2710
    84d0:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    84d4:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    84d8:	b1bc      	cbz	r4, 850a <clock_stop+0x66>
    84da:	2c01      	cmp	r4, #1
    84dc:	d1e7      	bne.n	84ae <clock_stop+0xa>
            if (p_clk_src != NULL)
    84de:	b38f      	cbz	r7, 8544 <clock_stop+0xa0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    84e0:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    84e4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    84e8:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    84ea:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    84ee:	e014      	b.n	851a <clock_stop+0x76>
    p_reg->INTENCLR = mask;
    84f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    84f4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    84f6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    84fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    84fe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8502:	f10d 0707 	add.w	r7, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8506:	6058      	str	r0, [r3, #4]
    8508:	e7df      	b.n	84ca <clock_stop+0x26>
            if (p_clk_src != NULL)
    850a:	b18f      	cbz	r7, 8530 <clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    850c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    8510:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8514:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8516:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    851a:	03da      	lsls	r2, r3, #15
    851c:	d5c7      	bpl.n	84ae <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    851e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8522:	2801      	cmp	r0, #1
    8524:	d1c3      	bne.n	84ae <clock_stop+0xa>
    8526:	f7ff ffbb 	bl	84a0 <nrfx_busy_wait>
    852a:	3d01      	subs	r5, #1
    852c:	d1d4      	bne.n	84d8 <clock_stop+0x34>
    852e:	e7be      	b.n	84ae <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8530:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    8534:	03d9      	lsls	r1, r3, #15
    8536:	d5ba      	bpl.n	84ae <clock_stop+0xa>
    8538:	2001      	movs	r0, #1
    853a:	f7ff ffb1 	bl	84a0 <nrfx_busy_wait>
    853e:	3d01      	subs	r5, #1
    8540:	d1f6      	bne.n	8530 <clock_stop+0x8c>
    8542:	e7b4      	b.n	84ae <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8544:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    8548:	03db      	lsls	r3, r3, #15
    854a:	d5b0      	bpl.n	84ae <clock_stop+0xa>
    854c:	2001      	movs	r0, #1
    854e:	f7ff ffa7 	bl	84a0 <nrfx_busy_wait>
    8552:	3d01      	subs	r5, #1
    8554:	d1f6      	bne.n	8544 <clock_stop+0xa0>
    8556:	e7aa      	b.n	84ae <clock_stop+0xa>

00008558 <nrfx_clock_enable>:
{
    8558:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    855a:	2005      	movs	r0, #5
    855c:	f7fa fa84 	bl	2a68 <arch_irq_is_enabled>
    8560:	b910      	cbnz	r0, 8568 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8562:	2005      	movs	r0, #5
    8564:	f7fa fa72 	bl	2a4c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8568:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    856c:	2201      	movs	r2, #1
    856e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    8572:	bd08      	pop	{r3, pc}

00008574 <nrfx_clock_start>:
{
    8574:	b508      	push	{r3, lr}
    switch (domain)
    8576:	b110      	cbz	r0, 857e <nrfx_clock_start+0xa>
    8578:	2801      	cmp	r0, #1
    857a:	d030      	beq.n	85de <nrfx_clock_start+0x6a>
}
    857c:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    857e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    8582:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8586:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    858a:	03c9      	lsls	r1, r1, #15
    858c:	d40e      	bmi.n	85ac <nrfx_clock_start+0x38>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    858e:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    8592:	07db      	lsls	r3, r3, #31
    8594:	d513      	bpl.n	85be <nrfx_clock_start+0x4a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    8596:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    859a:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    859e:	3b01      	subs	r3, #1
    85a0:	2b01      	cmp	r3, #1
    85a2:	d809      	bhi.n	85b8 <nrfx_clock_start+0x44>
    p_reg->INTENSET = mask;
    85a4:	2302      	movs	r3, #2
    85a6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    85aa:	e7e7      	b.n	857c <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    85ac:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    85b0:	2b02      	cmp	r3, #2
    85b2:	d005      	beq.n	85c0 <nrfx_clock_start+0x4c>
    85b4:	2b01      	cmp	r3, #1
    85b6:	d002      	beq.n	85be <nrfx_clock_start+0x4a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    85b8:	2000      	movs	r0, #0
    85ba:	f7ff ff73 	bl	84a4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    85be:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    85c0:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    85c4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    85c8:	2300      	movs	r3, #0
    85ca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    85ce:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    85d2:	2302      	movs	r3, #2
    85d4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    85d8:	2301      	movs	r3, #1
    85da:	6093      	str	r3, [r2, #8]
}
    85dc:	e7ce      	b.n	857c <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    85de:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    85e2:	2200      	movs	r2, #0
    85e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    85e8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    85ec:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    85f0:	6018      	str	r0, [r3, #0]
}
    85f2:	e7c3      	b.n	857c <nrfx_clock_start+0x8>

000085f4 <nrfx_clock_stop>:
    clock_stop(domain);
    85f4:	f7ff bf56 	b.w	84a4 <clock_stop>

000085f8 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    85f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    85fc:	4770      	bx	lr

000085fe <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    85fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    8602:	4770      	bx	lr

00008604 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    8604:	f44f 7080 	mov.w	r0, #256	; 0x100
    8608:	4770      	bx	lr

0000860a <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    860a:	4770      	bx	lr

0000860c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    860c:	b140      	cbz	r0, 8620 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    860e:	68c3      	ldr	r3, [r0, #12]
    8610:	7858      	ldrb	r0, [r3, #1]
    8612:	f010 0001 	ands.w	r0, r0, #1
    8616:	bf1e      	ittt	ne
    8618:	7818      	ldrbne	r0, [r3, #0]
    861a:	fab0 f080 	clzne	r0, r0
    861e:	0940      	lsrne	r0, r0, #5
}
    8620:	4770      	bx	lr

00008622 <z_early_memset>:
	(void) memset(dst, c, n);
    8622:	f7fd bfa2 	b.w	656a <memset>

00008626 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    8626:	f7fd bf95 	b.w	6554 <memcpy>

0000862a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    862a:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    862e:	3800      	subs	r0, #0
    8630:	bf18      	it	ne
    8632:	2001      	movne	r0, #1
    8634:	4770      	bx	lr

00008636 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8636:	b108      	cbz	r0, 863c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8638:	f7f9 bbb6 	b.w	1da8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    863c:	4770      	bx	lr

0000863e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    863e:	4770      	bx	lr
